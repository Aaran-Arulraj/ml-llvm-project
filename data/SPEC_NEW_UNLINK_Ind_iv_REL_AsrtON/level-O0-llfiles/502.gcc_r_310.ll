; ModuleID = 'tree-parloops.c'
source_filename = "tree-parloops.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.tree_niter_desc = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.double_int, %struct.affine_iv, %union.tree_node*, i32 }
%struct.affine_iv = type { %union.tree_node*, %union.tree_node*, i8 }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.expanded_location = type { i8*, i32, i32, i8 }
%struct.reduction_info = type { %union.gimple_statement_d*, %union.gimple_statement_d*, i32, %union.gimple_statement_d*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.gimple_statement_d* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.VEC_ddr_p_heap = type { %struct.VEC_ddr_p_base }
%struct.VEC_ddr_p_base = type { i32, i32, [1 x %struct.data_dependence_relation*] }
%struct.data_dependence_relation = type { %struct.data_reference*, %struct.data_reference*, %union.tree_node*, %struct.VEC_subscript_p_heap*, %struct.VEC_loop_p_heap*, %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap*, i32, i8, i8, i8 }
%struct.data_reference = type { %union.gimple_statement_d*, %union.tree_node*, i8*, i8, %struct.innermost_loop_behavior, %struct.indices, %struct.dr_alias, %struct.access_matrix* }
%struct.innermost_loop_behavior = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.indices = type { %union.tree_node*, %struct.VEC_tree_heap* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.dr_alias = type { %struct.ptr_info_def*, %struct.bitmap_head_def* }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.access_matrix = type { %struct.VEC_loop_p_heap*, i32, %struct.VEC_tree_heap*, %struct.VEC_lambda_vector_gc* }
%struct.VEC_lambda_vector_gc = type { %struct.VEC_lambda_vector_base }
%struct.VEC_lambda_vector_base = type { i32, i32, [1 x i32*] }
%struct.VEC_subscript_p_heap = type { %struct.VEC_subscript_p_base }
%struct.VEC_subscript_p_base = type { i32, i32, [1 x %struct.subscript*] }
%struct.subscript = type { %struct.conflict_function*, %struct.conflict_function*, %union.tree_node*, %union.tree_node* }
%struct.conflict_function = type { i32, [2 x %struct.VEC_tree_heap*] }
%struct.VEC_loop_p_heap = type { %struct.VEC_loop_p_base }
%struct.VEC_lambda_vector_heap = type { %struct.VEC_lambda_vector_base }
%struct.VEC_data_reference_p_heap = type { %struct.VEC_data_reference_p_base }
%struct.VEC_data_reference_p_base = type { i32, i32, [1 x %struct.data_reference*] }
%struct.lambda_trans_matrix_s = type { i32**, i32, i32, i32 }
%struct.clsn_data = type { %union.tree_node*, %union.tree_node*, %struct.basic_block_def*, %struct.basic_block_def* }
%struct._loop_vec_info = type { %struct.loop*, %struct.basic_block_def**, %union.tree_node*, %union.tree_node*, i32, i8, i32, %struct.data_reference*, i32, i32, %struct.VEC_data_reference_p_heap*, %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap*, %struct.VEC_gimple_heap*, i32, %struct.VEC_gimple_heap*, %struct.VEC_slp_instance_heap*, i32 }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.VEC_slp_instance_heap = type { %struct.VEC_slp_instance_base }
%struct.VEC_slp_instance_base = type { i32, i32, [1 x %struct._slp_instance*] }
%struct._slp_instance = type { %struct._slp_tree*, i32, i32, %struct.anon.0, %struct.VEC_int_heap*, %struct.VEC_slp_tree_heap*, %union.gimple_statement_d* }
%struct._slp_tree = type { %struct._slp_tree*, %struct._slp_tree*, %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap*, i32, %struct.anon }
%struct.anon = type { i32, i32 }
%struct.anon.0 = type { i32, i32 }
%struct.VEC_slp_tree_heap = type { %struct.VEC_slp_tree_base }
%struct.VEC_slp_tree_base = type { i32, i32, [1 x %struct._slp_tree*] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.tree_omp_clause = type { %struct.tree_common, i32, i32, %union.omp_clause_subcode, %struct.gimple_seq_d*, %struct.gimple_seq_d*, [1 x %union.tree_node*] }
%union.omp_clause_subcode = type { i32 }
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.elv_data = type { %struct.walk_stmt_info, %struct.edge_def*, %struct.htab*, i8 }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.pointer_set_t = type opaque
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.int_tree_map = type { i32, %union.tree_node* }
%struct.name_to_copy_elt = type { i32, %union.tree_node*, %union.tree_node* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_omp_for = type { %struct.gimple_statement_omp, %union.tree_node*, i64, %struct.gimple_omp_for_iter*, %struct.gimple_seq_d* }
%struct.gimple_statement_omp = type { %struct.gimple_statement_base, %struct.gimple_seq_d* }
%struct.gimple_omp_for_iter = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }

@flag_tree_parallelize_loops = external dso_local global i32, align 4
@cfun = external dso_local global %struct.function*, align 8
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str = private unnamed_addr constant [29 x i8] c"Trying loop %d as candidate\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"loop %d is not innermost\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"loop %d is innermost\0A\00", align 1
@flag_loop_parallelize_all = external dso_local global i32, align 4
@.str.3 = private unnamed_addr constant [44 x i8] c"loop is not parallel according to graphite\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"loop is !single_dom_exit\0A\00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"parallelizing outer loop %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"parallelizing inner loop %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [17 x i8] c"\0Aloop at %s:%d: \00", align 1
@parallelized_functions = internal global %struct.bitmap_head_def* null, align 8, !dbg !0
@gt_ggc_r_gt_tree_parloops_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.bitmap_head_def** @parallelized_functions to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_bitmap_head_def, void (i8*)* @gt_pch_nx_bitmap_head_def }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2242
@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@.str.8 = private unnamed_addr constant [16 x i8] c"tree-parloops.c\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.10 = private unnamed_addr constant [42 x i8] c"  FAILED: number of iterations not known\0A\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"phi is \00", align 1
@.str.12 = private unnamed_addr constant [29 x i8] c"arg of phi to exit:   value \00", align 1
@.str.13 = private unnamed_addr constant [20 x i8] c" used outside loop\0A\00", align 1
@.str.14 = private unnamed_addr constant [49 x i8] c"  checking if it a part of reduction pattern:  \0A\00", align 1
@.str.15 = private unnamed_addr constant [42 x i8] c"  FAILED: it is not a part of reduction.\0A\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"reduction phi is  \00", align 1
@.str.17 = private unnamed_addr constant [20 x i8] c"reduction stmt is  \00", align 1
@.str.18 = private unnamed_addr constant [48 x i8] c"  FAILED: scalar dependency between iterations\0A\00", align 1
@vect_dump = external dso_local global %struct._IO_FILE*, align 8
@.str.19 = private unnamed_addr constant [41 x i8] c"Detected reduction. reduction stmt is: \0A\00", align 1
@.str.20 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.21 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.22 = private unnamed_addr constant [21 x i8] c"Considering loop %d\0A\00", align 1
@.str.23 = private unnamed_addr constant [19 x i8] c"loop is innermost\0A\00", align 1
@.str.24 = private unnamed_addr constant [20 x i8] c"loop NOT innermost\0A\00", align 1
@.str.25 = private unnamed_addr constant [32 x i8] c"  SUCCESS: may be parallelized\0A\00", align 1
@.str.26 = private unnamed_addr constant [53 x i8] c"  FAILED: data dependencies exist across iterations\0A\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.27 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"reduction\00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@current_function_decl = external dso_local global %union.tree_node*, align 8
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@.str.29 = private unnamed_addr constant [12 x i8] c".paral_data\00", align 1
@.str.30 = private unnamed_addr constant [18 x i8] c".paral_data_store\00", align 1
@.str.31 = private unnamed_addr constant [17 x i8] c".paral_data_load\00", align 1
@.str.32 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@create_loop_fn.loopfn_num = internal global i32 0, align 4, !dbg !2256
@.str.33 = private unnamed_addr constant [11 x i8] c"%s.$loopfn\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c"%s.%lu\00", align 1
@.str.35 = private unnamed_addr constant [18 x i8] c".paral_data_param\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @parallelize_loops() #0 !dbg !2266 {
entry:
  %retval = alloca i8, align 1
  %n_threads = alloca i32, align 4
  %changed = alloca i8, align 1
  %loop = alloca %struct.loop*, align 8
  %niter_desc = alloca %struct.tree_niter_desc, align 8
  %li = alloca %struct.loop_iterator, align 8
  %reduction_list = alloca %struct.htab*, align 8
  %estimated = alloca i64, align 8
  %loop_loc = alloca i32, align 4
  %tmp = alloca %struct.expanded_location, align 8
  %tmp102 = alloca %struct.expanded_location, align 8
  call void @llvm.dbg.declare(metadata i32* %n_threads, metadata !2269, metadata !DIExpression()), !dbg !2270
  %0 = load i32, i32* @flag_tree_parallelize_loops, align 4, !dbg !2271
  store i32 %0, i32* %n_threads, align 4, !dbg !2270
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !2272, metadata !DIExpression()), !dbg !2273
  store i8 0, i8* %changed, align 1, !dbg !2273
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2274, metadata !DIExpression()), !dbg !2275
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc* %niter_desc, metadata !2276, metadata !DIExpression()), !dbg !2292
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !2293, metadata !DIExpression()), !dbg !2299
  call void @llvm.dbg.declare(metadata %struct.htab** %reduction_list, metadata !2300, metadata !DIExpression()), !dbg !2301
  call void @llvm.dbg.declare(metadata i64* %estimated, metadata !2302, metadata !DIExpression()), !dbg !2303
  call void @llvm.dbg.declare(metadata i32* %loop_loc, metadata !2304, metadata !DIExpression()), !dbg !2307
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2308
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2308
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 6, !dbg !2310
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !2310
  %call = call zeroext i8 @parallelized_function_p(%union.tree_node* %2), !dbg !2311
  %tobool = icmp ne i8 %call, 0, !dbg !2311
  br i1 %tobool, label %if.then, label %if.end, !dbg !2312

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !2313
  br label %return, !dbg !2313

if.end:                                           ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2314
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !2314
  %has_nonlocal_label = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 20, !dbg !2316
  %bf.load = load i32, i32* %has_nonlocal_label, align 8, !dbg !2316
  %bf.lshr = lshr i32 %bf.load, 20, !dbg !2316
  %bf.clear = and i32 %bf.lshr, 1, !dbg !2316
  %tobool2 = icmp ne i32 %bf.clear, 0, !dbg !2314
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !2317

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !2318
  br label %return, !dbg !2318

if.end4:                                          ; preds = %if.end
  %call5 = call %struct.htab* @htab_create(i64 10, i32 (i8*)* @reduction_info_hash, i32 (i8*, i8*)* @reduction_info_eq, void (i8*)* @free), !dbg !2319
  store %struct.htab* %call5, %struct.htab** %reduction_list, align 8, !dbg !2320
  call void @init_stmt_vec_info_vec(), !dbg !2321
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !2322
  br label %for.cond, !dbg !2322

for.cond:                                         ; preds = %for.inc, %if.end4
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2324
  %tobool6 = icmp ne %struct.loop* %4, null, !dbg !2322
  br i1 %tobool6, label %for.body, label %for.end, !dbg !2322

for.body:                                         ; preds = %for.cond
  %5 = load %struct.htab*, %struct.htab** %reduction_list, align 8, !dbg !2326
  call void @htab_empty(%struct.htab* %5), !dbg !2328
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2329
  %tobool7 = icmp ne %struct._IO_FILE* %6, null, !dbg !2329
  br i1 %tobool7, label %land.lhs.true, label %if.end18, !dbg !2331

land.lhs.true:                                    ; preds = %for.body
  %7 = load i32, i32* @dump_flags, align 4, !dbg !2332
  %and = and i32 %7, 8, !dbg !2333
  %tobool8 = icmp ne i32 %and, 0, !dbg !2333
  br i1 %tobool8, label %if.then9, label %if.end18, !dbg !2334

if.then9:                                         ; preds = %land.lhs.true
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2335
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2337
  %num = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 0, !dbg !2338
  %10 = load i32, i32* %num, align 8, !dbg !2338
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i32 %10), !dbg !2339
  %11 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2340
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 8, !dbg !2342
  %12 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2342
  %tobool11 = icmp ne %struct.loop* %12, null, !dbg !2340
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !2343

if.then12:                                        ; preds = %if.then9
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2344
  %14 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2345
  %num13 = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 0, !dbg !2346
  %15 = load i32, i32* %num13, align 8, !dbg !2346
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i32 %15), !dbg !2347
  br label %if.end17, !dbg !2347

if.else:                                          ; preds = %if.then9
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2348
  %17 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2349
  %num15 = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 0, !dbg !2350
  %18 = load i32, i32* %num15, align 8, !dbg !2350
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i32 %18), !dbg !2351
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then12
  br label %if.end18, !dbg !2352

if.end18:                                         ; preds = %if.end17, %land.lhs.true, %for.body
  %19 = load i32, i32* @flag_loop_parallelize_all, align 4, !dbg !2353
  %tobool19 = icmp ne i32 %19, 0, !dbg !2353
  br i1 %tobool19, label %land.lhs.true20, label %if.end30, !dbg !2355

land.lhs.true20:                                  ; preds = %if.end18
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2356
  %can_be_parallel = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 19, !dbg !2357
  %21 = load i8, i8* %can_be_parallel, align 8, !dbg !2357
  %tobool21 = icmp ne i8 %21, 0, !dbg !2356
  br i1 %tobool21, label %if.end30, label %if.then22, !dbg !2358

if.then22:                                        ; preds = %land.lhs.true20
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2359
  %tobool23 = icmp ne %struct._IO_FILE* %22, null, !dbg !2359
  br i1 %tobool23, label %land.lhs.true24, label %if.end29, !dbg !2362

land.lhs.true24:                                  ; preds = %if.then22
  %23 = load i32, i32* @dump_flags, align 4, !dbg !2363
  %and25 = and i32 %23, 8, !dbg !2364
  %tobool26 = icmp ne i32 %and25, 0, !dbg !2364
  br i1 %tobool26, label %if.then27, label %if.end29, !dbg !2365

if.then27:                                        ; preds = %land.lhs.true24
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2366
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0)), !dbg !2367
  br label %if.end29, !dbg !2367

if.end29:                                         ; preds = %if.then27, %land.lhs.true24, %if.then22
  br label %for.inc, !dbg !2368

if.end30:                                         ; preds = %land.lhs.true20, %if.end18
  %25 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2369
  %call31 = call %struct.edge_def* @single_dom_exit(%struct.loop* %25), !dbg !2371
  %tobool32 = icmp ne %struct.edge_def* %call31, null, !dbg !2371
  br i1 %tobool32, label %if.end41, label %if.then33, !dbg !2372

if.then33:                                        ; preds = %if.end30
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2373
  %tobool34 = icmp ne %struct._IO_FILE* %26, null, !dbg !2373
  br i1 %tobool34, label %land.lhs.true35, label %if.end40, !dbg !2376

land.lhs.true35:                                  ; preds = %if.then33
  %27 = load i32, i32* @dump_flags, align 4, !dbg !2377
  %and36 = and i32 %27, 8, !dbg !2378
  %tobool37 = icmp ne i32 %and36, 0, !dbg !2378
  br i1 %tobool37, label %if.then38, label %if.end40, !dbg !2379

if.then38:                                        ; preds = %land.lhs.true35
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2380
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0)), !dbg !2381
  br label %if.end40, !dbg !2381

if.end40:                                         ; preds = %if.then38, %land.lhs.true35, %if.then33
  br label %for.inc, !dbg !2382

if.end41:                                         ; preds = %if.end30
  %29 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2383
  %call42 = call zeroext i8 @can_duplicate_loop_p(%struct.loop* %29), !dbg !2385
  %tobool43 = icmp ne i8 %call42, 0, !dbg !2385
  br i1 %tobool43, label %lor.lhs.false, label %if.then54, !dbg !2386

lor.lhs.false:                                    ; preds = %if.end41
  %30 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2387
  %call44 = call zeroext i8 @loop_has_blocks_with_irreducible_flag(%struct.loop* %30), !dbg !2388
  %conv = zext i8 %call44 to i32, !dbg !2388
  %tobool45 = icmp ne i32 %conv, 0, !dbg !2388
  br i1 %tobool45, label %if.then54, label %lor.lhs.false46, !dbg !2389

lor.lhs.false46:                                  ; preds = %lor.lhs.false
  %31 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2390
  %call47 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %31), !dbg !2391
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call47, i32 0, i32 0, !dbg !2392
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2392
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 13, !dbg !2393
  %33 = load i32, i32* %flags, align 8, !dbg !2393
  %and48 = and i32 %33, 4, !dbg !2394
  %tobool49 = icmp ne i32 %and48, 0, !dbg !2394
  br i1 %tobool49, label %if.then54, label %lor.lhs.false50, !dbg !2395

lor.lhs.false50:                                  ; preds = %lor.lhs.false46
  %34 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2396
  %call51 = call zeroext i8 @loop_has_vector_phi_nodes(%struct.loop* %34), !dbg !2397
  %conv52 = zext i8 %call51 to i32, !dbg !2397
  %tobool53 = icmp ne i32 %conv52, 0, !dbg !2397
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !2398

if.then54:                                        ; preds = %lor.lhs.false50, %lor.lhs.false46, %lor.lhs.false, %if.end41
  br label %for.inc, !dbg !2399

if.end55:                                         ; preds = %lor.lhs.false50
  %35 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2400
  %call56 = call i64 @estimated_loop_iterations_int(%struct.loop* %35, i8 zeroext 0), !dbg !2401
  store i64 %call56, i64* %estimated, align 8, !dbg !2402
  %36 = load i32, i32* @flag_loop_parallelize_all, align 4, !dbg !2403
  %tobool57 = icmp ne i32 %36, 0, !dbg !2403
  br i1 %tobool57, label %if.end69, label %land.lhs.true58, !dbg !2405

land.lhs.true58:                                  ; preds = %if.end55
  %37 = load i64, i64* %estimated, align 8, !dbg !2406
  %cmp = icmp ne i64 %37, -1, !dbg !2407
  br i1 %cmp, label %land.lhs.true60, label %lor.lhs.false64, !dbg !2408

land.lhs.true60:                                  ; preds = %land.lhs.true58
  %38 = load i64, i64* %estimated, align 8, !dbg !2409
  %39 = load i32, i32* %n_threads, align 4, !dbg !2410
  %conv61 = zext i32 %39 to i64, !dbg !2411
  %mul = mul nsw i64 %conv61, 100, !dbg !2412
  %cmp62 = icmp sle i64 %38, %mul, !dbg !2413
  br i1 %cmp62, label %if.then68, label %lor.lhs.false64, !dbg !2414

lor.lhs.false64:                                  ; preds = %land.lhs.true60, %land.lhs.true58
  %40 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2415
  %call65 = call zeroext i8 @optimize_loop_nest_for_size_p(%struct.loop* %40), !dbg !2416
  %conv66 = zext i8 %call65 to i32, !dbg !2416
  %tobool67 = icmp ne i32 %conv66, 0, !dbg !2416
  br i1 %tobool67, label %if.then68, label %if.end69, !dbg !2417

if.then68:                                        ; preds = %lor.lhs.false64, %land.lhs.true60
  br label %for.inc, !dbg !2418

if.end69:                                         ; preds = %lor.lhs.false64, %if.end55
  %41 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2419
  %call70 = call zeroext i8 @try_get_loop_niter(%struct.loop* %41, %struct.tree_niter_desc* %niter_desc), !dbg !2421
  %tobool71 = icmp ne i8 %call70, 0, !dbg !2421
  br i1 %tobool71, label %if.end73, label %if.then72, !dbg !2422

if.then72:                                        ; preds = %if.end69
  br label %for.inc, !dbg !2423

if.end73:                                         ; preds = %if.end69
  %42 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2424
  %43 = load %struct.htab*, %struct.htab** %reduction_list, align 8, !dbg !2426
  %call74 = call zeroext i8 @try_create_reduction_list(%struct.loop* %42, %struct.htab* %43), !dbg !2427
  %tobool75 = icmp ne i8 %call74, 0, !dbg !2427
  br i1 %tobool75, label %if.end77, label %if.then76, !dbg !2428

if.then76:                                        ; preds = %if.end73
  br label %for.inc, !dbg !2429

if.end77:                                         ; preds = %if.end73
  %44 = load i32, i32* @flag_loop_parallelize_all, align 4, !dbg !2430
  %tobool78 = icmp ne i32 %44, 0, !dbg !2430
  br i1 %tobool78, label %if.end83, label %land.lhs.true79, !dbg !2432

land.lhs.true79:                                  ; preds = %if.end77
  %45 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2433
  %call80 = call zeroext i8 @loop_parallel_p(%struct.loop* %45), !dbg !2434
  %tobool81 = icmp ne i8 %call80, 0, !dbg !2434
  br i1 %tobool81, label %if.end83, label %if.then82, !dbg !2435

if.then82:                                        ; preds = %land.lhs.true79
  br label %for.inc, !dbg !2436

if.end83:                                         ; preds = %land.lhs.true79, %if.end77
  store i8 1, i8* %changed, align 1, !dbg !2437
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2438
  %tobool84 = icmp ne %struct._IO_FILE* %46, null, !dbg !2438
  br i1 %tobool84, label %land.lhs.true85, label %if.end105, !dbg !2440

land.lhs.true85:                                  ; preds = %if.end83
  %47 = load i32, i32* @dump_flags, align 4, !dbg !2441
  %and86 = and i32 %47, 8, !dbg !2442
  %tobool87 = icmp ne i32 %and86, 0, !dbg !2442
  br i1 %tobool87, label %if.then88, label %if.end105, !dbg !2443

if.then88:                                        ; preds = %land.lhs.true85
  %48 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2444
  %inner89 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 8, !dbg !2447
  %49 = load %struct.loop*, %struct.loop** %inner89, align 8, !dbg !2447
  %tobool90 = icmp ne %struct.loop* %49, null, !dbg !2444
  br i1 %tobool90, label %if.then91, label %if.else93, !dbg !2448

if.then91:                                        ; preds = %if.then88
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2449
  %51 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2450
  %header = getelementptr inbounds %struct.loop, %struct.loop* %51, i32 0, i32 2, !dbg !2451
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2451
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 9, !dbg !2452
  %53 = load i32, i32* %index, align 8, !dbg !2452
  %call92 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i32 %53), !dbg !2453
  br label %if.end97, !dbg !2453

if.else93:                                        ; preds = %if.then88
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2454
  %55 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2455
  %header94 = getelementptr inbounds %struct.loop, %struct.loop* %55, i32 0, i32 2, !dbg !2456
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %header94, align 8, !dbg !2456
  %index95 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 9, !dbg !2457
  %57 = load i32, i32* %index95, align 8, !dbg !2457
  %call96 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i32 %57), !dbg !2458
  br label %if.end97

if.end97:                                         ; preds = %if.else93, %if.then91
  %58 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2459
  %call98 = call i32 @find_loop_location(%struct.loop* %58), !dbg !2460
  store i32 %call98, i32* %loop_loc, align 4, !dbg !2461
  %59 = load i32, i32* %loop_loc, align 4, !dbg !2462
  %cmp99 = icmp ne i32 %59, 0, !dbg !2464
  br i1 %cmp99, label %if.then101, label %if.end104, !dbg !2465

if.then101:                                       ; preds = %if.end97
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2466
  %61 = load i32, i32* %loop_loc, align 4, !dbg !2467
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %61), !dbg !2467
  %file = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i32 0, i32 0, !dbg !2467
  %62 = load i8*, i8** %file, align 8, !dbg !2467
  %63 = load i32, i32* %loop_loc, align 4, !dbg !2468
  call void @expand_location(%struct.expanded_location* sret %tmp102, i32 %63), !dbg !2468
  %line = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp102, i32 0, i32 1, !dbg !2468
  %64 = load i32, i32* %line, align 8, !dbg !2468
  %call103 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.7, i64 0, i64 0), i8* %62, i32 %64), !dbg !2469
  br label %if.end104, !dbg !2469

if.end104:                                        ; preds = %if.then101, %if.end97
  br label %if.end105, !dbg !2470

if.end105:                                        ; preds = %if.end104, %land.lhs.true85, %if.end83
  %65 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2471
  %66 = load %struct.htab*, %struct.htab** %reduction_list, align 8, !dbg !2472
  %67 = load i32, i32* %n_threads, align 4, !dbg !2473
  call void @gen_parallel_loop(%struct.loop* %65, %struct.htab* %66, i32 %67, %struct.tree_niter_desc* %niter_desc), !dbg !2474
  call void @verify_flow_info(), !dbg !2475
  call void @verify_dominators(i32 1), !dbg !2476
  call void @verify_loop_structure(), !dbg !2477
  call void @verify_loop_closed_ssa(), !dbg !2478
  br label %for.inc, !dbg !2479

for.inc:                                          ; preds = %if.end105, %if.then82, %if.then76, %if.then72, %if.then68, %if.then54, %if.end40, %if.end29
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2324
  br label %for.cond, !dbg !2324, !llvm.loop !2480

for.end:                                          ; preds = %for.cond
  call void @free_stmt_vec_info_vec(), !dbg !2482
  %68 = load %struct.htab*, %struct.htab** %reduction_list, align 8, !dbg !2483
  call void @htab_delete(%struct.htab* %68), !dbg !2484
  %69 = load i8, i8* %changed, align 1, !dbg !2485
  %tobool106 = icmp ne i8 %69, 0, !dbg !2485
  br i1 %tobool106, label %if.then107, label %if.end111, !dbg !2487

if.then107:                                       ; preds = %for.end
  %70 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2488
  %add.ptr108 = getelementptr inbounds %struct.function, %struct.function* %70, i64 0, !dbg !2488
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr108, i32 0, i32 3, !dbg !2490
  %71 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !2490
  %escaped = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %71, i32 0, i32 4, !dbg !2491
  call void @pt_solution_reset(%struct.pt_solution* %escaped), !dbg !2492
  %72 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2493
  %add.ptr109 = getelementptr inbounds %struct.function, %struct.function* %72, i64 0, !dbg !2493
  %gimple_df110 = getelementptr inbounds %struct.function, %struct.function* %add.ptr109, i32 0, i32 3, !dbg !2494
  %73 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df110, align 8, !dbg !2494
  %callused = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %73, i32 0, i32 5, !dbg !2495
  call void @pt_solution_reset(%struct.pt_solution* %callused), !dbg !2496
  br label %if.end111, !dbg !2497

if.end111:                                        ; preds = %if.then107, %for.end
  %74 = load i8, i8* %changed, align 1, !dbg !2498
  store i8 %74, i8* %retval, align 1, !dbg !2499
  br label %return, !dbg !2499

return:                                           ; preds = %if.end111, %if.then3, %if.then
  %75 = load i8, i8* %retval, align 1, !dbg !2500
  ret i8 %75, !dbg !2500
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @parallelized_function_p(%union.tree_node* %fn) #0 !dbg !2501 {
entry:
  %retval = alloca i8, align 1
  %fn.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !2504, metadata !DIExpression()), !dbg !2505
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @parallelized_functions, align 8, !dbg !2506
  %tobool = icmp ne %struct.bitmap_head_def* %0, null, !dbg !2506
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2508

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !2509
  %decl_common = bitcast %union.tree_node* %1 to %struct.tree_decl_common*, !dbg !2509
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !2509
  %2 = bitcast i40* %artificial_flag to i64*, !dbg !2509
  %bf.load = load i64, i64* %2, align 8, !dbg !2509
  %bf.lshr = lshr i64 %bf.load, 12, !dbg !2509
  %bf.clear = and i64 %bf.lshr, 1, !dbg !2509
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2509
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !2509
  br i1 %tobool1, label %if.end, label %if.then, !dbg !2510

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !2511
  br label %return, !dbg !2511

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @parallelized_functions, align 8, !dbg !2512
  %4 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !2513
  %decl_minimal = bitcast %union.tree_node* %4 to %struct.tree_decl_minimal*, !dbg !2513
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !2513
  %5 = load i32, i32* %uid, align 4, !dbg !2513
  %call = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %3, i32 %5), !dbg !2514
  %conv = trunc i32 %call to i8, !dbg !2514
  store i8 %conv, i8* %retval, align 1, !dbg !2515
  br label %return, !dbg !2515

return:                                           ; preds = %if.end, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !2516
  ret i8 %6, !dbg !2516
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @reduction_info_hash(i8* %aa) #0 !dbg !2517 {
entry:
  %aa.addr = alloca i8*, align 8
  %a = alloca %struct.reduction_info*, align 8
  store i8* %aa, i8** %aa.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %aa.addr, metadata !2518, metadata !DIExpression()), !dbg !2519
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %a, metadata !2520, metadata !DIExpression()), !dbg !2521
  %0 = load i8*, i8** %aa.addr, align 8, !dbg !2522
  %1 = bitcast i8* %0 to %struct.reduction_info*, !dbg !2523
  store %struct.reduction_info* %1, %struct.reduction_info** %a, align 8, !dbg !2521
  %2 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !2524
  %3 = load %struct.reduction_info*, %struct.reduction_info** %a, align 8, !dbg !2525
  %reduc_phi = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %3, i32 0, i32 1, !dbg !2526
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_phi, align 8, !dbg !2526
  %5 = bitcast %union.gimple_statement_d* %4 to i8*, !dbg !2525
  %call = call i32 %2(i8* %5), !dbg !2524
  ret i32 %call, !dbg !2527
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @reduction_info_eq(i8* %aa, i8* %bb) #0 !dbg !2528 {
entry:
  %aa.addr = alloca i8*, align 8
  %bb.addr = alloca i8*, align 8
  %a = alloca %struct.reduction_info*, align 8
  %b = alloca %struct.reduction_info*, align 8
  store i8* %aa, i8** %aa.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %aa.addr, metadata !2529, metadata !DIExpression()), !dbg !2530
  store i8* %bb, i8** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %bb.addr, metadata !2531, metadata !DIExpression()), !dbg !2532
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %a, metadata !2533, metadata !DIExpression()), !dbg !2534
  %0 = load i8*, i8** %aa.addr, align 8, !dbg !2535
  %1 = bitcast i8* %0 to %struct.reduction_info*, !dbg !2536
  store %struct.reduction_info* %1, %struct.reduction_info** %a, align 8, !dbg !2534
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %b, metadata !2537, metadata !DIExpression()), !dbg !2538
  %2 = load i8*, i8** %bb.addr, align 8, !dbg !2539
  %3 = bitcast i8* %2 to %struct.reduction_info*, !dbg !2540
  store %struct.reduction_info* %3, %struct.reduction_info** %b, align 8, !dbg !2538
  %4 = load %struct.reduction_info*, %struct.reduction_info** %a, align 8, !dbg !2541
  %reduc_phi = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %4, i32 0, i32 1, !dbg !2542
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_phi, align 8, !dbg !2542
  %6 = load %struct.reduction_info*, %struct.reduction_info** %b, align 8, !dbg !2543
  %reduc_phi1 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %6, i32 0, i32 1, !dbg !2544
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_phi1, align 8, !dbg !2544
  %cmp = icmp eq %union.gimple_statement_d* %5, %7, !dbg !2545
  %conv = zext i1 %cmp to i32, !dbg !2545
  ret i32 %conv, !dbg !2546
}

declare dso_local void @free(i8*) #2

declare dso_local void @init_stmt_vec_info_vec() #2

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !2547 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !2552, metadata !DIExpression()), !dbg !2553
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !2554, metadata !DIExpression()), !dbg !2555
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2556, metadata !DIExpression()), !dbg !2557
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !2558, metadata !DIExpression()), !dbg !2559
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2560, metadata !DIExpression()), !dbg !2561
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !2562, metadata !DIExpression()), !dbg !2563
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2564
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !2565
  store i32 0, i32* %idx, align 8, !dbg !2566
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2567
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2567
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2567
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2567
  %tobool = icmp ne %struct.loops* %2, null, !dbg !2567
  br i1 %tobool, label %if.end, label %if.then, !dbg !2569

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2570
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !2572
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !2573
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2574
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !2575
  br label %return, !dbg !2576

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !2577
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !2577
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2578
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !2579
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !2580
  %6 = load i32, i32* %flags.addr, align 4, !dbg !2581
  %and = and i32 %6, 1, !dbg !2582
  %tobool3 = icmp ne i32 %and, 0, !dbg !2583
  %7 = zext i1 %tobool3 to i64, !dbg !2583
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !2583
  store i32 %cond, i32* %mn, align 4, !dbg !2584
  %8 = load i32, i32* %flags.addr, align 4, !dbg !2585
  %and4 = and i32 %8, 4, !dbg !2587
  %tobool5 = icmp ne i32 %and4, 0, !dbg !2587
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !2588

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !2589
  br label %for.cond, !dbg !2592

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2593
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !2593
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !2593
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !2593
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !2593
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !2593
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !2593
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !2593

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2593
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !2593
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !2593
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !2593
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !2593
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !2593
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !2593
  br label %cond.end, !dbg !2593

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2593

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2593
  %15 = load i32, i32* %i, align 4, !dbg !2593
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !2593
  %tobool15 = icmp ne i32 %call14, 0, !dbg !2595
  br i1 %tobool15, label %for.body, label %for.end, !dbg !2595

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2596
  %cmp = icmp ne %struct.loop* %16, null, !dbg !2598
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !2599

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2600
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !2601
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2601
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !2602
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !2603

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2604
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !2605
  %20 = load i32, i32* %num, align 8, !dbg !2605
  %21 = load i32, i32* %mn, align 4, !dbg !2606
  %cmp18 = icmp sge i32 %20, %21, !dbg !2607
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !2608

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2609
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !2609
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !2609
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !2609
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !2609

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2609
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !2609
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !2609
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !2609
  br label %cond.end26, !dbg !2609

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !2609

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !2609
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2609
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !2609
  %27 = load i32, i32* %num28, align 8, !dbg !2609
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !2609
  br label %if.end30, !dbg !2609

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !2606

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !2610
  %inc = add i32 %28, 1, !dbg !2610
  store i32 %inc, i32* %i, align 4, !dbg !2610
  br label %for.cond, !dbg !2611, !llvm.loop !2612

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !2614

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !2615
  %and31 = and i32 %29, 2, !dbg !2617
  %tobool32 = icmp ne i32 %and31, 0, !dbg !2617
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !2618

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2619
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !2619
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !2619
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !2619
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !2622
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !2622
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !2623
  br label %for.cond36, !dbg !2624

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2625
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !2627
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !2627
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !2628
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !2629

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !2630

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2631
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !2632
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !2632
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !2633
  br label %for.cond36, !dbg !2634, !llvm.loop !2635

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !2637

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2638
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !2641
  %38 = load i32, i32* %num43, align 8, !dbg !2641
  %39 = load i32, i32* %mn, align 4, !dbg !2642
  %cmp44 = icmp sge i32 %38, %39, !dbg !2643
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !2644

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2645
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !2645
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !2645
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !2645
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !2645

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2645
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !2645
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !2645
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !2645
  br label %cond.end52, !dbg !2645

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !2645

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !2645
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2645
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !2645
  %45 = load i32, i32* %num54, align 8, !dbg !2645
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !2645
  br label %if.end56, !dbg !2645

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2646
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !2648
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !2648
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !2646
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !2649

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2650
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !2653
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !2653
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !2654
  br label %for.cond60, !dbg !2655

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2656
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !2658
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !2658
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !2659
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !2660

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !2661

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2662
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !2663
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !2663
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !2664
  br label %for.cond60, !dbg !2665, !llvm.loop !2666

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !2668

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2669
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !2671
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !2671
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !2672

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !2673

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2674
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !2675
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !2676
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !2637, !llvm.loop !2677

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !2679

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2680
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !2680
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !2680
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !2680
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !2682
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !2682
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !2683
  br label %while.body79, !dbg !2684

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2685
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !2688
  %60 = load i32, i32* %num80, align 8, !dbg !2688
  %61 = load i32, i32* %mn, align 4, !dbg !2689
  %cmp81 = icmp sge i32 %60, %61, !dbg !2690
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !2691

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2692
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !2692
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !2692
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !2692
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !2692

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2692
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !2692
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !2692
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !2692
  br label %cond.end89, !dbg !2692

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !2692

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !2692
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2692
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !2692
  %67 = load i32, i32* %num91, align 8, !dbg !2692
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !2692
  br label %if.end93, !dbg !2692

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2693
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !2695
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !2695
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !2696
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !2697

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2698
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !2699
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !2699
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !2700
  br label %if.end110, !dbg !2701

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !2702

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2704
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !2705
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !2706

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2707
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !2708
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !2708
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !2709
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !2710
  br i1 %75, label %while.body103, label %while.end105, !dbg !2702

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2711
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !2712
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !2713
  br label %while.cond99, !dbg !2702, !llvm.loop !2714

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2716
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !2718
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !2719

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !2720

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2721
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !2722
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !2722
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !2723
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !2684, !llvm.loop !2724

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2726
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2727
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !2728
  br label %return, !dbg !2729

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !2729
}

declare dso_local void @htab_empty(%struct.htab*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local %struct.edge_def* @single_dom_exit(%struct.loop*) #2

declare dso_local zeroext i8 @can_duplicate_loop_p(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loop_has_blocks_with_irreducible_flag(%struct.loop* %loop) #0 !dbg !2730 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %bbs = alloca %struct.basic_block_def**, align 8
  %res = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2733, metadata !DIExpression()), !dbg !2734
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2735, metadata !DIExpression()), !dbg !2736
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !2737, metadata !DIExpression()), !dbg !2738
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2739
  %call = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %0), !dbg !2740
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !2738
  call void @llvm.dbg.declare(metadata i8* %res, metadata !2741, metadata !DIExpression()), !dbg !2742
  store i8 1, i8* %res, align 1, !dbg !2742
  store i32 0, i32* %i, align 4, !dbg !2743
  br label %for.cond, !dbg !2745

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !2746
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2748
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !2749
  %3 = load i32, i32* %num_nodes, align 4, !dbg !2749
  %cmp = icmp ult i32 %1, %3, !dbg !2750
  br i1 %cmp, label %for.body, label %for.end, !dbg !2751

for.body:                                         ; preds = %for.cond
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2752
  %5 = load i32, i32* %i, align 4, !dbg !2754
  %idxprom = zext i32 %5 to i64, !dbg !2752
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %4, i64 %idxprom, !dbg !2752
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2752
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 13, !dbg !2755
  %7 = load i32, i32* %flags, align 8, !dbg !2755
  %and = and i32 %7, 4, !dbg !2756
  %tobool = icmp ne i32 %and, 0, !dbg !2756
  br i1 %tobool, label %if.then, label %if.end, !dbg !2757

if.then:                                          ; preds = %for.body
  br label %end, !dbg !2758

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !2759

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4, !dbg !2760
  %inc = add i32 %8, 1, !dbg !2760
  store i32 %inc, i32* %i, align 4, !dbg !2760
  br label %for.cond, !dbg !2761, !llvm.loop !2762

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %res, align 1, !dbg !2764
  br label %end, !dbg !2765

end:                                              ; preds = %for.end, %if.then
  call void @llvm.dbg.label(metadata !2766), !dbg !2767
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2768
  %10 = bitcast %struct.basic_block_def** %9 to i8*, !dbg !2768
  call void @free(i8* %10), !dbg !2769
  %11 = load i8, i8* %res, align 1, !dbg !2770
  ret i8 %11, !dbg !2771
}

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loop_has_vector_phi_nodes(%struct.loop* %loop) #0 !dbg !2772 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %bbs = alloca %struct.basic_block_def**, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %res = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2773, metadata !DIExpression()), !dbg !2774
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2775, metadata !DIExpression()), !dbg !2776
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !2777, metadata !DIExpression()), !dbg !2778
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2779
  %call = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %0), !dbg !2780
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !2778
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2781, metadata !DIExpression()), !dbg !2782
  call void @llvm.dbg.declare(metadata i8* %res, metadata !2783, metadata !DIExpression()), !dbg !2784
  store i8 1, i8* %res, align 1, !dbg !2784
  store i32 0, i32* %i, align 4, !dbg !2785
  br label %for.cond, !dbg !2787

for.cond:                                         ; preds = %for.inc8, %entry
  %1 = load i32, i32* %i, align 4, !dbg !2788
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2790
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !2791
  %3 = load i32, i32* %num_nodes, align 4, !dbg !2791
  %cmp = icmp ult i32 %1, %3, !dbg !2792
  br i1 %cmp, label %for.body, label %for.end9, !dbg !2793

for.body:                                         ; preds = %for.cond
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2794
  %5 = load i32, i32* %i, align 4, !dbg !2796
  %idxprom = zext i32 %5 to i64, !dbg !2794
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %4, i64 %idxprom, !dbg !2794
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2794
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %6), !dbg !2797
  %7 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2797
  %8 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2797
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 24, i1 false), !dbg !2797
  br label %for.cond1, !dbg !2798

for.cond1:                                        ; preds = %for.inc, %for.body
  %call2 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2799
  %tobool = icmp ne i8 %call2, 0, !dbg !2801
  %lnot = xor i1 %tobool, true, !dbg !2801
  br i1 %lnot, label %for.body3, label %for.end, !dbg !2802

for.body3:                                        ; preds = %for.cond1
  %call4 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2803
  %call5 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %call4), !dbg !2803
  %call6 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call5), !dbg !2803
  %common = bitcast %union.tree_node* %call6 to %struct.tree_common*, !dbg !2803
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2803
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2803
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !2803
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !2803
  %bf.load = load i64, i64* %10, align 8, !dbg !2803
  %bf.clear = and i64 %bf.load, 65535, !dbg !2803
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2803
  %cmp7 = icmp eq i32 %bf.cast, 14, !dbg !2805
  br i1 %cmp7, label %if.then, label %if.end, !dbg !2806

if.then:                                          ; preds = %for.body3
  br label %end, !dbg !2807

if.end:                                           ; preds = %for.body3
  br label %for.inc, !dbg !2808

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !2809
  br label %for.cond1, !dbg !2810, !llvm.loop !2811

for.end:                                          ; preds = %for.cond1
  br label %for.inc8, !dbg !2812

for.inc8:                                         ; preds = %for.end
  %11 = load i32, i32* %i, align 4, !dbg !2813
  %inc = add i32 %11, 1, !dbg !2813
  store i32 %inc, i32* %i, align 4, !dbg !2813
  br label %for.cond, !dbg !2814, !llvm.loop !2815

for.end9:                                         ; preds = %for.cond
  store i8 0, i8* %res, align 1, !dbg !2817
  br label %end, !dbg !2818

end:                                              ; preds = %for.end9, %if.then
  call void @llvm.dbg.label(metadata !2819), !dbg !2820
  %12 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2821
  %13 = bitcast %struct.basic_block_def** %12 to i8*, !dbg !2821
  call void @free(i8* %13), !dbg !2822
  %14 = load i8, i8* %res, align 1, !dbg !2823
  ret i8 %14, !dbg !2824
}

declare dso_local i64 @estimated_loop_iterations_int(%struct.loop*, i8 zeroext) #2

declare dso_local zeroext i8 @optimize_loop_nest_for_size_p(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @try_get_loop_niter(%struct.loop* %loop, %struct.tree_niter_desc* %niter) #0 !dbg !2825 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %niter.addr = alloca %struct.tree_niter_desc*, align 8
  %exit = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2829, metadata !DIExpression()), !dbg !2830
  store %struct.tree_niter_desc* %niter, %struct.tree_niter_desc** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc** %niter.addr, metadata !2831, metadata !DIExpression()), !dbg !2832
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !2833, metadata !DIExpression()), !dbg !2834
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2835
  %call = call %struct.edge_def* @single_dom_exit(%struct.loop* %0), !dbg !2836
  store %struct.edge_def* %call, %struct.edge_def** %exit, align 8, !dbg !2834
  %1 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !2837
  %tobool = icmp ne %struct.edge_def* %1, null, !dbg !2837
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2837

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 1766, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !2837
  br label %cond.end, !dbg !2837

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2837

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2837
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2838
  %3 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !2840
  %4 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !2841
  %call1 = call zeroext i8 @number_of_iterations_exit(%struct.loop* %2, %struct.edge_def* %3, %struct.tree_niter_desc* %4, i8 zeroext 0), !dbg !2842
  %tobool2 = icmp ne i8 %call1, 0, !dbg !2842
  br i1 %tobool2, label %if.end7, label %if.then, !dbg !2843

if.then:                                          ; preds = %cond.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2844
  %tobool3 = icmp ne %struct._IO_FILE* %5, null, !dbg !2844
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !2847

land.lhs.true:                                    ; preds = %if.then
  %6 = load i32, i32* @dump_flags, align 4, !dbg !2848
  %and = and i32 %6, 8, !dbg !2849
  %tobool4 = icmp ne i32 %and, 0, !dbg !2849
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !2850

if.then5:                                         ; preds = %land.lhs.true
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2851
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.10, i64 0, i64 0)), !dbg !2852
  br label %if.end, !dbg !2852

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  store i8 0, i8* %retval, align 1, !dbg !2853
  br label %return, !dbg !2853

if.end7:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !2854
  br label %return, !dbg !2854

return:                                           ; preds = %if.end7, %if.end
  %8 = load i8, i8* %retval, align 1, !dbg !2855
  ret i8 %8, !dbg !2855
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @try_create_reduction_list(%struct.loop* %loop, %struct.htab* %reduction_list) #0 !dbg !2856 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %reduction_list.addr = alloca %struct.htab*, align 8
  %exit = alloca %struct.edge_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %red = alloca %struct.reduction_info*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %reduc_phi = alloca %union.gimple_statement_d*, align 8
  %val = alloca %union.tree_node*, align 8
  %tmp62 = alloca %struct.gimple_stmt_iterator, align 8
  %phi68 = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %iv = alloca %struct.affine_iv, align 8
  %red78 = alloca %struct.reduction_info*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2859, metadata !DIExpression()), !dbg !2860
  store %struct.htab* %reduction_list, %struct.htab** %reduction_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %reduction_list.addr, metadata !2861, metadata !DIExpression()), !dbg !2862
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !2863, metadata !DIExpression()), !dbg !2864
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2865
  %call = call %struct.edge_def* @single_dom_exit(%struct.loop* %0), !dbg !2866
  store %struct.edge_def* %call, %struct.edge_def** %exit, align 8, !dbg !2864
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2867, metadata !DIExpression()), !dbg !2868
  %1 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !2869
  %tobool = icmp ne %struct.edge_def* %1, null, !dbg !2869
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2869

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 1790, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !2869
  br label %cond.end, !dbg !2869

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2869

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2869
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2870
  %3 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !2871
  call void @gather_scalar_reductions(%struct.loop* %2, %struct.htab* %3), !dbg !2872
  %4 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !2873
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 1, !dbg !2875
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2875
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %5), !dbg !2876
  %6 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2876
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2876
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !2876
  br label %for.cond, !dbg !2877

for.cond:                                         ; preds = %for.inc60, %cond.end
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2878
  %tobool2 = icmp ne i8 %call1, 0, !dbg !2880
  %lnot = xor i1 %tobool2, true, !dbg !2880
  br i1 %lnot, label %for.body, label %for.end61, !dbg !2881

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !2882, metadata !DIExpression()), !dbg !2884
  %call3 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2885
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %phi, align 8, !dbg !2884
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %red, metadata !2886, metadata !DIExpression()), !dbg !2887
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !2888, metadata !DIExpression()), !dbg !2896
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !2897, metadata !DIExpression()), !dbg !2898
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %reduc_phi, metadata !2899, metadata !DIExpression()), !dbg !2900
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !2901, metadata !DIExpression()), !dbg !2902
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !2903
  %9 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !2903
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 6, !dbg !2903
  %10 = load i32, i32* %dest_idx, align 4, !dbg !2903
  %call4 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %8, i32 %10), !dbg !2903
  %call5 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call4), !dbg !2903
  store %union.tree_node* %call5, %union.tree_node** %val, align 8, !dbg !2902
  %11 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !2904
  %call6 = call zeroext i8 @is_gimple_reg(%union.tree_node* %11), !dbg !2906
  %tobool7 = icmp ne i8 %call6, 0, !dbg !2906
  br i1 %tobool7, label %if.then, label %if.end59, !dbg !2907

if.then:                                          ; preds = %for.body
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2908
  %tobool8 = icmp ne %struct._IO_FILE* %12, null, !dbg !2908
  br i1 %tobool8, label %land.lhs.true, label %if.end, !dbg !2911

land.lhs.true:                                    ; preds = %if.then
  %13 = load i32, i32* @dump_flags, align 4, !dbg !2912
  %and = and i32 %13, 8, !dbg !2913
  %tobool9 = icmp ne i32 %and, 0, !dbg !2913
  br i1 %tobool9, label %if.then10, label %if.end, !dbg !2914

if.then10:                                        ; preds = %land.lhs.true
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2915
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0)), !dbg !2917
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2918
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !2919
  call void @print_gimple_stmt(%struct._IO_FILE* %15, %union.gimple_statement_d* %16, i32 0, i32 0), !dbg !2920
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2921
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i64 0, i64 0)), !dbg !2922
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2923
  %19 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !2924
  call void @print_generic_expr(%struct._IO_FILE* %18, %union.tree_node* %19, i32 0), !dbg !2925
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2926
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13, i64 0, i64 0)), !dbg !2927
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2928
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.14, i64 0, i64 0)), !dbg !2929
  br label %if.end, !dbg !2930

if.end:                                           ; preds = %if.then10, %land.lhs.true, %if.then
  %22 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !2931
  %call15 = call i64 @htab_elements(%struct.htab* %22), !dbg !2933
  %cmp = icmp eq i64 %call15, 0, !dbg !2934
  br i1 %cmp, label %if.then16, label %if.end24, !dbg !2935

if.then16:                                        ; preds = %if.end
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2936
  %tobool17 = icmp ne %struct._IO_FILE* %23, null, !dbg !2936
  br i1 %tobool17, label %land.lhs.true18, label %if.end23, !dbg !2939

land.lhs.true18:                                  ; preds = %if.then16
  %24 = load i32, i32* @dump_flags, align 4, !dbg !2940
  %and19 = and i32 %24, 8, !dbg !2941
  %tobool20 = icmp ne i32 %and19, 0, !dbg !2941
  br i1 %tobool20, label %if.then21, label %if.end23, !dbg !2942

if.then21:                                        ; preds = %land.lhs.true18
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2943
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.15, i64 0, i64 0)), !dbg !2944
  br label %if.end23, !dbg !2944

if.end23:                                         ; preds = %if.then21, %land.lhs.true18, %if.then16
  store i8 0, i8* %retval, align 1, !dbg !2945
  br label %return, !dbg !2945

if.end24:                                         ; preds = %if.end
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %reduc_phi, align 8, !dbg !2946
  %26 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !2947
  %call25 = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %26), !dbg !2947
  store %struct.ssa_use_operand_d* %call25, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2947
  br label %for.cond26, !dbg !2947

for.cond26:                                       ; preds = %for.inc, %if.end24
  %call27 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !2949
  %tobool28 = icmp ne i8 %call27, 0, !dbg !2949
  %lnot29 = xor i1 %tobool28, true, !dbg !2949
  br i1 %lnot29, label %for.body30, label %for.end, !dbg !2947

for.body30:                                       ; preds = %for.cond26
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2951
  %28 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2954
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %28, i32 0, i32 2, !dbg !2954
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !2954
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2954
  %call31 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %29), !dbg !2955
  %call32 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %27, %struct.basic_block_def* %call31), !dbg !2956
  %tobool33 = icmp ne i8 %call32, 0, !dbg !2956
  br i1 %tobool33, label %if.then34, label %if.end37, !dbg !2957

if.then34:                                        ; preds = %for.body30
  %30 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2958
  %loc35 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %30, i32 0, i32 2, !dbg !2958
  %stmt36 = bitcast %union.anon* %loc35 to %union.gimple_statement_d**, !dbg !2958
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt36, align 8, !dbg !2958
  store %union.gimple_statement_d* %31, %union.gimple_statement_d** %reduc_phi, align 8, !dbg !2960
  br label %for.end, !dbg !2961

if.end37:                                         ; preds = %for.body30
  br label %for.inc, !dbg !2962

for.inc:                                          ; preds = %if.end37
  %call38 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm_iter), !dbg !2949
  store %struct.ssa_use_operand_d* %call38, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2949
  br label %for.cond26, !dbg !2949, !llvm.loop !2963

for.end:                                          ; preds = %if.then34, %for.cond26
  %32 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !2965
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_phi, align 8, !dbg !2966
  %call39 = call %struct.reduction_info* @reduction_phi(%struct.htab* %32, %union.gimple_statement_d* %33), !dbg !2967
  store %struct.reduction_info* %call39, %struct.reduction_info** %red, align 8, !dbg !2968
  %34 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !2969
  %cmp40 = icmp eq %struct.reduction_info* %34, null, !dbg !2971
  br i1 %cmp40, label %if.then41, label %if.end49, !dbg !2972

if.then41:                                        ; preds = %for.end
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2973
  %tobool42 = icmp ne %struct._IO_FILE* %35, null, !dbg !2973
  br i1 %tobool42, label %land.lhs.true43, label %if.end48, !dbg !2976

land.lhs.true43:                                  ; preds = %if.then41
  %36 = load i32, i32* @dump_flags, align 4, !dbg !2977
  %and44 = and i32 %36, 8, !dbg !2978
  %tobool45 = icmp ne i32 %and44, 0, !dbg !2978
  br i1 %tobool45, label %if.then46, label %if.end48, !dbg !2979

if.then46:                                        ; preds = %land.lhs.true43
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2980
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.15, i64 0, i64 0)), !dbg !2981
  br label %if.end48, !dbg !2981

if.end48:                                         ; preds = %if.then46, %land.lhs.true43, %if.then41
  store i8 0, i8* %retval, align 1, !dbg !2982
  br label %return, !dbg !2982

if.end49:                                         ; preds = %for.end
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2983
  %tobool50 = icmp ne %struct._IO_FILE* %38, null, !dbg !2983
  br i1 %tobool50, label %land.lhs.true51, label %if.end58, !dbg !2985

land.lhs.true51:                                  ; preds = %if.end49
  %39 = load i32, i32* @dump_flags, align 4, !dbg !2986
  %and52 = and i32 %39, 8, !dbg !2987
  %tobool53 = icmp ne i32 %and52, 0, !dbg !2987
  br i1 %tobool53, label %if.then54, label %if.end58, !dbg !2988

if.then54:                                        ; preds = %land.lhs.true51
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2989
  %call55 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i64 0, i64 0)), !dbg !2991
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2992
  %42 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !2993
  %reduc_phi56 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %42, i32 0, i32 1, !dbg !2994
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_phi56, align 8, !dbg !2994
  call void @print_gimple_stmt(%struct._IO_FILE* %41, %union.gimple_statement_d* %43, i32 0, i32 0), !dbg !2995
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2996
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.17, i64 0, i64 0)), !dbg !2997
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2998
  %46 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !2999
  %reduc_stmt = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %46, i32 0, i32 0, !dbg !3000
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt, align 8, !dbg !3000
  call void @print_gimple_stmt(%struct._IO_FILE* %45, %union.gimple_statement_d* %47, i32 0, i32 0), !dbg !3001
  br label %if.end58, !dbg !3002

if.end58:                                         ; preds = %if.then54, %land.lhs.true51, %if.end49
  br label %if.end59, !dbg !3003

if.end59:                                         ; preds = %if.end58, %for.body
  br label %for.inc60, !dbg !3004

for.inc60:                                        ; preds = %if.end59
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3005
  br label %for.cond, !dbg !3006, !llvm.loop !3007

for.end61:                                        ; preds = %for.cond
  %48 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3009
  %header = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 2, !dbg !3011
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3011
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp62, %struct.basic_block_def* %49), !dbg !3012
  %50 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3012
  %51 = bitcast %struct.gimple_stmt_iterator* %tmp62 to i8*, !dbg !3012
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 24, i1 false), !dbg !3012
  br label %for.cond63, !dbg !3013

for.cond63:                                       ; preds = %for.inc92, %for.end61
  %call64 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3014
  %tobool65 = icmp ne i8 %call64, 0, !dbg !3016
  %lnot66 = xor i1 %tobool65, true, !dbg !3016
  br i1 %lnot66, label %for.body67, label %for.end93, !dbg !3017

for.body67:                                       ; preds = %for.cond63
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi68, metadata !3018, metadata !DIExpression()), !dbg !3020
  %call69 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3021
  store %union.gimple_statement_d* %call69, %union.gimple_statement_d** %phi68, align 8, !dbg !3020
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !3022, metadata !DIExpression()), !dbg !3023
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi68, align 8, !dbg !3024
  %call70 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %52), !dbg !3024
  %call71 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call70), !dbg !3024
  store %union.tree_node* %call71, %union.tree_node** %def, align 8, !dbg !3023
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %iv, metadata !3025, metadata !DIExpression()), !dbg !3026
  %53 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !3027
  %call72 = call zeroext i8 @is_gimple_reg(%union.tree_node* %53), !dbg !3029
  %conv = zext i8 %call72 to i32, !dbg !3029
  %tobool73 = icmp ne i32 %conv, 0, !dbg !3029
  br i1 %tobool73, label %land.lhs.true74, label %if.end91, !dbg !3030

land.lhs.true74:                                  ; preds = %for.body67
  %54 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3031
  %55 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3032
  %56 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !3033
  %call75 = call zeroext i8 @simple_iv(%struct.loop* %54, %struct.loop* %55, %union.tree_node* %56, %struct.affine_iv* %iv, i8 zeroext 1), !dbg !3034
  %tobool76 = icmp ne i8 %call75, 0, !dbg !3034
  br i1 %tobool76, label %if.end91, label %if.then77, !dbg !3035

if.then77:                                        ; preds = %land.lhs.true74
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %red78, metadata !3036, metadata !DIExpression()), !dbg !3038
  %57 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !3039
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi68, align 8, !dbg !3040
  %call79 = call %struct.reduction_info* @reduction_phi(%struct.htab* %57, %union.gimple_statement_d* %58), !dbg !3041
  store %struct.reduction_info* %call79, %struct.reduction_info** %red78, align 8, !dbg !3042
  %59 = load %struct.reduction_info*, %struct.reduction_info** %red78, align 8, !dbg !3043
  %cmp80 = icmp eq %struct.reduction_info* %59, null, !dbg !3045
  br i1 %cmp80, label %if.then82, label %if.end90, !dbg !3046

if.then82:                                        ; preds = %if.then77
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3047
  %tobool83 = icmp ne %struct._IO_FILE* %60, null, !dbg !3047
  br i1 %tobool83, label %land.lhs.true84, label %if.end89, !dbg !3050

land.lhs.true84:                                  ; preds = %if.then82
  %61 = load i32, i32* @dump_flags, align 4, !dbg !3051
  %and85 = and i32 %61, 8, !dbg !3052
  %tobool86 = icmp ne i32 %and85, 0, !dbg !3052
  br i1 %tobool86, label %if.then87, label %if.end89, !dbg !3053

if.then87:                                        ; preds = %land.lhs.true84
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3054
  %call88 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.18, i64 0, i64 0)), !dbg !3055
  br label %if.end89, !dbg !3055

if.end89:                                         ; preds = %if.then87, %land.lhs.true84, %if.then82
  store i8 0, i8* %retval, align 1, !dbg !3056
  br label %return, !dbg !3056

if.end90:                                         ; preds = %if.then77
  br label %if.end91, !dbg !3057

if.end91:                                         ; preds = %if.end90, %land.lhs.true74, %for.body67
  br label %for.inc92, !dbg !3058

for.inc92:                                        ; preds = %if.end91
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3059
  br label %for.cond63, !dbg !3060, !llvm.loop !3061

for.end93:                                        ; preds = %for.cond63
  store i8 1, i8* %retval, align 1, !dbg !3063
  br label %return, !dbg !3063

return:                                           ; preds = %for.end93, %if.end89, %if.end48, %if.end23
  %63 = load i8, i8* %retval, align 1, !dbg !3064
  ret i8 %63, !dbg !3064
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loop_parallel_p(%struct.loop* %loop) #0 !dbg !3065 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %dependence_relations = alloca %struct.VEC_ddr_p_heap*, align 8
  %datarefs = alloca %struct.VEC_data_reference_p_heap*, align 8
  %trans = alloca %struct.lambda_trans_matrix_s*, align 8
  %ret = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3066, metadata !DIExpression()), !dbg !3067
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %dependence_relations, metadata !3068, metadata !DIExpression()), !dbg !3069
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs, metadata !3070, metadata !DIExpression()), !dbg !3071
  call void @llvm.dbg.declare(metadata %struct.lambda_trans_matrix_s** %trans, metadata !3072, metadata !DIExpression()), !dbg !3083
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !3084, metadata !DIExpression()), !dbg !3085
  store i8 0, i8* %ret, align 1, !dbg !3085
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3086
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !3086
  br i1 %tobool, label %land.lhs.true, label %if.end6, !dbg !3088

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !3089
  %and = and i32 %1, 8, !dbg !3090
  %tobool1 = icmp ne i32 %and, 0, !dbg !3090
  br i1 %tobool1, label %if.then, label %if.end6, !dbg !3091

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3092
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3094
  %num = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 0, !dbg !3095
  %4 = load i32, i32* %num, align 8, !dbg !3095
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i64 0, i64 0), i32 %4), !dbg !3096
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3097
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 8, !dbg !3099
  %6 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3099
  %tobool2 = icmp ne %struct.loop* %6, null, !dbg !3097
  br i1 %tobool2, label %if.else, label %if.then3, !dbg !3100

if.then3:                                         ; preds = %if.then
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3101
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.23, i64 0, i64 0)), !dbg !3102
  br label %if.end, !dbg !3102

if.else:                                          ; preds = %if.then
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3103
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24, i64 0, i64 0)), !dbg !3104
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end6, !dbg !3105

if.end6:                                          ; preds = %if.end, %land.lhs.true, %entry
  %call7 = call %struct.VEC_data_reference_p_heap* @VEC_data_reference_p_heap_alloc(i32 10), !dbg !3106
  store %struct.VEC_data_reference_p_heap* %call7, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !3107
  %call8 = call %struct.VEC_ddr_p_heap* @VEC_ddr_p_heap_alloc(i32 100), !dbg !3108
  store %struct.VEC_ddr_p_heap* %call8, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !3109
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3110
  %call9 = call zeroext i8 @compute_data_dependences_for_loop(%struct.loop* %9, i8 zeroext 1, %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_ddr_p_heap** %dependence_relations), !dbg !3111
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3112
  %tobool10 = icmp ne %struct._IO_FILE* %10, null, !dbg !3112
  br i1 %tobool10, label %land.lhs.true11, label %if.end15, !dbg !3114

land.lhs.true11:                                  ; preds = %if.end6
  %11 = load i32, i32* @dump_flags, align 4, !dbg !3115
  %and12 = and i32 %11, 8, !dbg !3116
  %tobool13 = icmp ne i32 %and12, 0, !dbg !3116
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !3117

if.then14:                                        ; preds = %land.lhs.true11
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3118
  %13 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !3119
  call void @dump_data_dependence_relations(%struct._IO_FILE* %12, %struct.VEC_ddr_p_heap* %13), !dbg !3120
  br label %if.end15, !dbg !3120

if.end15:                                         ; preds = %if.then14, %land.lhs.true11, %if.end6
  %call16 = call %struct.lambda_trans_matrix_s* @lambda_trans_matrix_new(i32 1, i32 1), !dbg !3121
  store %struct.lambda_trans_matrix_s* %call16, %struct.lambda_trans_matrix_s** %trans, align 8, !dbg !3122
  %14 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans, align 8, !dbg !3123
  %matrix = getelementptr inbounds %struct.lambda_trans_matrix_s, %struct.lambda_trans_matrix_s* %14, i32 0, i32 0, !dbg !3123
  %15 = load i32**, i32*** %matrix, align 8, !dbg !3123
  %arrayidx = getelementptr inbounds i32*, i32** %15, i64 0, !dbg !3123
  %16 = load i32*, i32** %arrayidx, align 8, !dbg !3123
  %arrayidx17 = getelementptr inbounds i32, i32* %16, i64 0, !dbg !3123
  store i32 -1, i32* %arrayidx17, align 4, !dbg !3124
  %17 = load %struct.lambda_trans_matrix_s*, %struct.lambda_trans_matrix_s** %trans, align 8, !dbg !3125
  %18 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !3127
  %call18 = call zeroext i8 @lambda_transform_legal_p(%struct.lambda_trans_matrix_s* %17, i32 1, %struct.VEC_ddr_p_heap* %18), !dbg !3128
  %tobool19 = icmp ne i8 %call18, 0, !dbg !3128
  br i1 %tobool19, label %if.then20, label %if.else28, !dbg !3129

if.then20:                                        ; preds = %if.end15
  store i8 1, i8* %ret, align 1, !dbg !3130
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3132
  %tobool21 = icmp ne %struct._IO_FILE* %19, null, !dbg !3132
  br i1 %tobool21, label %land.lhs.true22, label %if.end27, !dbg !3134

land.lhs.true22:                                  ; preds = %if.then20
  %20 = load i32, i32* @dump_flags, align 4, !dbg !3135
  %and23 = and i32 %20, 8, !dbg !3136
  %tobool24 = icmp ne i32 %and23, 0, !dbg !3136
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !3137

if.then25:                                        ; preds = %land.lhs.true22
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3138
  %call26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.25, i64 0, i64 0)), !dbg !3139
  br label %if.end27, !dbg !3139

if.end27:                                         ; preds = %if.then25, %land.lhs.true22, %if.then20
  br label %if.end36, !dbg !3140

if.else28:                                        ; preds = %if.end15
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3141
  %tobool29 = icmp ne %struct._IO_FILE* %22, null, !dbg !3141
  br i1 %tobool29, label %land.lhs.true30, label %if.end35, !dbg !3143

land.lhs.true30:                                  ; preds = %if.else28
  %23 = load i32, i32* @dump_flags, align 4, !dbg !3144
  %and31 = and i32 %23, 8, !dbg !3145
  %tobool32 = icmp ne i32 %and31, 0, !dbg !3145
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !3146

if.then33:                                        ; preds = %land.lhs.true30
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3147
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.26, i64 0, i64 0)), !dbg !3148
  br label %if.end35, !dbg !3148

if.end35:                                         ; preds = %if.then33, %land.lhs.true30, %if.else28
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end27
  %25 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependence_relations, align 8, !dbg !3149
  call void @free_dependence_relations(%struct.VEC_ddr_p_heap* %25), !dbg !3150
  %26 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !3151
  call void @free_data_refs(%struct.VEC_data_reference_p_heap* %26), !dbg !3152
  %27 = load i8, i8* %ret, align 1, !dbg !3153
  ret i8 %27, !dbg !3154
}

declare dso_local i32 @find_loop_location(%struct.loop*) #2

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gen_parallel_loop(%struct.loop* %loop, %struct.htab* %reduction_list, i32 %n_threads, %struct.tree_niter_desc* %niter) #0 !dbg !3155 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %reduction_list.addr = alloca %struct.htab*, align 8
  %n_threads.addr = alloca i32, align 4
  %niter.addr = alloca %struct.tree_niter_desc*, align 8
  %li = alloca %struct.loop_iterator, align 8
  %many_iterations_cond = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %nit = alloca %union.tree_node*, align 8
  %arg_struct = alloca %union.tree_node*, align 8
  %new_arg_struct = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %parallel_head = alloca %struct.basic_block_def*, align 8
  %entry1 = alloca %struct.edge_def*, align 8
  %exit = alloca %struct.edge_def*, align 8
  %clsn_data = alloca %struct.clsn_data, align 8
  %prob = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3158, metadata !DIExpression()), !dbg !3159
  store %struct.htab* %reduction_list, %struct.htab** %reduction_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %reduction_list.addr, metadata !3160, metadata !DIExpression()), !dbg !3161
  store i32 %n_threads, i32* %n_threads.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_threads.addr, metadata !3162, metadata !DIExpression()), !dbg !3163
  store %struct.tree_niter_desc* %niter, %struct.tree_niter_desc** %niter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc** %niter.addr, metadata !3164, metadata !DIExpression()), !dbg !3165
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !3166, metadata !DIExpression()), !dbg !3167
  call void @llvm.dbg.declare(metadata %union.tree_node** %many_iterations_cond, metadata !3168, metadata !DIExpression()), !dbg !3169
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !3170, metadata !DIExpression()), !dbg !3171
  call void @llvm.dbg.declare(metadata %union.tree_node** %nit, metadata !3172, metadata !DIExpression()), !dbg !3173
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg_struct, metadata !3174, metadata !DIExpression()), !dbg !3175
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_arg_struct, metadata !3176, metadata !DIExpression()), !dbg !3177
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !3178, metadata !DIExpression()), !dbg !3179
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %parallel_head, metadata !3180, metadata !DIExpression()), !dbg !3181
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry1, metadata !3182, metadata !DIExpression()), !dbg !3183
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !3184, metadata !DIExpression()), !dbg !3185
  call void @llvm.dbg.declare(metadata %struct.clsn_data* %clsn_data, metadata !3186, metadata !DIExpression()), !dbg !3187
  call void @llvm.dbg.declare(metadata i32* %prob, metadata !3188, metadata !DIExpression()), !dbg !3189
  %0 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3190
  %niter2 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %0, i32 0, i32 2, !dbg !3190
  %1 = load %union.tree_node*, %union.tree_node** %niter2, align 8, !dbg !3190
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !3190
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3190
  %2 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !3190
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !3191
  %3 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3192
  %niter4 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %3, i32 0, i32 2, !dbg !3193
  %4 = load %union.tree_node*, %union.tree_node** %niter4, align 8, !dbg !3193
  %call = call %union.tree_node* @unshare_expr(%union.tree_node* %4), !dbg !3194
  %call5 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %call, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !3195
  store %union.tree_node* %call5, %union.tree_node** %nit, align 8, !dbg !3196
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3197
  %tobool = icmp ne %struct.gimple_seq_d* %5, null, !dbg !3197
  br i1 %tobool, label %if.then, label %if.end, !dbg !3199

if.then:                                          ; preds = %entry
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3200
  %call6 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %6), !dbg !3201
  %7 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3202
  %call7 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %call6, %struct.gimple_seq_d* %7), !dbg !3203
  br label %if.end, !dbg !3203

if.end:                                           ; preds = %if.then, %entry
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3204
  %9 = load %union.tree_node*, %union.tree_node** %nit, align 8, !dbg !3204
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3204
  %11 = load i32, i32* %n_threads.addr, align 4, !dbg !3204
  %mul = mul i32 100, %11, !dbg !3204
  %conv = zext i32 %mul to i64, !dbg !3204
  %call8 = call %union.tree_node* @build_int_cst(%union.tree_node* %10, i64 %conv), !dbg !3204
  %call9 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 100, %union.tree_node* %8, %union.tree_node* %9, %union.tree_node* %call8), !dbg !3204
  store %union.tree_node* %call9, %union.tree_node** %many_iterations_cond, align 8, !dbg !3205
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3206
  %13 = load %struct.tree_niter_desc*, %struct.tree_niter_desc** %niter.addr, align 8, !dbg !3206
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %13, i32 0, i32 1, !dbg !3206
  %14 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !3206
  %call10 = call %union.tree_node* @unshare_expr(%union.tree_node* %14), !dbg !3206
  %call11 = call %union.tree_node* @invert_truthvalue_loc(i32 0, %union.tree_node* %call10), !dbg !3206
  %15 = load %union.tree_node*, %union.tree_node** %many_iterations_cond, align 8, !dbg !3206
  %call12 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %12, %union.tree_node* %call11, %union.tree_node* %15), !dbg !3206
  store %union.tree_node* %call12, %union.tree_node** %many_iterations_cond, align 8, !dbg !3207
  %16 = load %union.tree_node*, %union.tree_node** %many_iterations_cond, align 8, !dbg !3208
  %call13 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %16, %struct.gimple_seq_d** %stmts, i8 zeroext 0, %union.tree_node* null), !dbg !3209
  store %union.tree_node* %call13, %union.tree_node** %many_iterations_cond, align 8, !dbg !3210
  %17 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3211
  %tobool14 = icmp ne %struct.gimple_seq_d* %17, null, !dbg !3211
  br i1 %tobool14, label %if.then15, label %if.end18, !dbg !3213

if.then15:                                        ; preds = %if.end
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3214
  %call16 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %18), !dbg !3215
  %19 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3216
  %call17 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %call16, %struct.gimple_seq_d* %19), !dbg !3217
  br label %if.end18, !dbg !3217

if.end18:                                         ; preds = %if.then15, %if.end
  %20 = load %union.tree_node*, %union.tree_node** %many_iterations_cond, align 8, !dbg !3218
  %call19 = call zeroext i8 @is_gimple_condexpr(%union.tree_node* %20), !dbg !3220
  %tobool20 = icmp ne i8 %call19, 0, !dbg !3220
  br i1 %tobool20, label %if.end28, label %if.then21, !dbg !3221

if.then21:                                        ; preds = %if.end18
  %21 = load %union.tree_node*, %union.tree_node** %many_iterations_cond, align 8, !dbg !3222
  %call22 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %21, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !3224
  store %union.tree_node* %call22, %union.tree_node** %many_iterations_cond, align 8, !dbg !3225
  %22 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3226
  %tobool23 = icmp ne %struct.gimple_seq_d* %22, null, !dbg !3226
  br i1 %tobool23, label %if.then24, label %if.end27, !dbg !3228

if.then24:                                        ; preds = %if.then21
  %23 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3229
  %call25 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %23), !dbg !3230
  %24 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3231
  %call26 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %call25, %struct.gimple_seq_d* %24), !dbg !3232
  br label %if.end27, !dbg !3232

if.end27:                                         ; preds = %if.then24, %if.then21
  br label %if.end28, !dbg !3233

if.end28:                                         ; preds = %if.end27, %if.end18
  call void @initialize_original_copy_tables(), !dbg !3234
  store i32 8000, i32* %prob, align 4, !dbg !3235
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3236
  %26 = load %union.tree_node*, %union.tree_node** %many_iterations_cond, align 8, !dbg !3237
  %27 = bitcast %union.tree_node* %26 to i8*, !dbg !3237
  %28 = load i32, i32* %prob, align 4, !dbg !3238
  %29 = load i32, i32* %prob, align 4, !dbg !3239
  %30 = load i32, i32* %prob, align 4, !dbg !3240
  %sub = sub i32 10000, %30, !dbg !3241
  %call29 = call %struct.loop* @loop_version(%struct.loop* %25, i8* %27, %struct.basic_block_def** null, i32 %28, i32 %29, i32 %sub, i8 zeroext 1), !dbg !3242
  call void @update_ssa(i32 2048), !dbg !3243
  call void @free_original_copy_tables(), !dbg !3244
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3245
  %call30 = call %union.tree_node* @canonicalize_loop_ivs(%struct.loop* %31, %union.tree_node** %nit, i8 zeroext 1), !dbg !3246
  %32 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3247
  %33 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !3248
  %34 = load %union.tree_node*, %union.tree_node** %nit, align 8, !dbg !3249
  call void @transform_to_exit_first_loop(%struct.loop* %32, %struct.htab* %33, %union.tree_node* %34), !dbg !3250
  %35 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !3251
  %call31 = call i64 @htab_elements(%struct.htab* %35), !dbg !3253
  %cmp = icmp ugt i64 %call31, 0, !dbg !3254
  br i1 %cmp, label %if.then33, label %if.end34, !dbg !3255

if.then33:                                        ; preds = %if.end28
  %36 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !3256
  %37 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3257
  %38 = bitcast %struct.loop* %37 to i8*, !dbg !3257
  call void @htab_traverse(%struct.htab* %36, i32 (i8**, i8*)* @initialize_reductions, i8* %38), !dbg !3258
  br label %if.end34, !dbg !3258

if.end34:                                         ; preds = %if.then33, %if.end28
  %39 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3259
  %call35 = call %struct.edge_def* @single_exit(%struct.loop* %39), !dbg !3259
  %tobool36 = icmp ne %struct.edge_def* %call35, null, !dbg !3259
  br i1 %tobool36, label %cond.false, label %cond.true, !dbg !3259

cond.true:                                        ; preds = %if.end34
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 1643, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !3259
  br label %cond.end, !dbg !3259

cond.false:                                       ; preds = %if.end34
  br label %cond.end, !dbg !3259

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3259
  %40 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3260
  %call37 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %40), !dbg !3261
  store %struct.edge_def* %call37, %struct.edge_def** %entry1, align 8, !dbg !3262
  %41 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3263
  %call38 = call %struct.edge_def* @single_dom_exit(%struct.loop* %41), !dbg !3264
  store %struct.edge_def* %call38, %struct.edge_def** %exit, align 8, !dbg !3265
  %42 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !3266
  %43 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !3267
  call void @eliminate_local_variables(%struct.edge_def* %42, %struct.edge_def* %43), !dbg !3268
  %44 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !3269
  %45 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !3270
  %46 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !3271
  call void @separate_decls_in_region(%struct.edge_def* %44, %struct.edge_def* %45, %struct.htab* %46, %union.tree_node** %arg_struct, %union.tree_node** %new_arg_struct, %struct.clsn_data* %clsn_data), !dbg !3272
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3273
  %call39 = call %union.tree_node* @create_loop_fn(), !dbg !3274
  %48 = load %union.tree_node*, %union.tree_node** %arg_struct, align 8, !dbg !3275
  %49 = load %union.tree_node*, %union.tree_node** %new_arg_struct, align 8, !dbg !3276
  %50 = load i32, i32* %n_threads.addr, align 4, !dbg !3277
  %call40 = call %struct.basic_block_def* @create_parallel_loop(%struct.loop* %47, %union.tree_node* %call39, %union.tree_node* %48, %union.tree_node* %49, i32 %50), !dbg !3278
  store %struct.basic_block_def* %call40, %struct.basic_block_def** %parallel_head, align 8, !dbg !3279
  %51 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !3280
  %call41 = call i64 @htab_elements(%struct.htab* %51), !dbg !3282
  %cmp42 = icmp ugt i64 %call41, 0, !dbg !3283
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !3284

if.then44:                                        ; preds = %cond.end
  %52 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3285
  %53 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !3286
  call void @create_call_for_reduction(%struct.loop* %52, %struct.htab* %53, %struct.clsn_data* %clsn_data), !dbg !3287
  br label %if.end45, !dbg !3287

if.end45:                                         ; preds = %if.then44, %cond.end
  call void @scev_reset(), !dbg !3288
  %54 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3289
  call void @cancel_loop_tree(%struct.loop* %54), !dbg !3290
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop.addr, i32 0), !dbg !3291
  br label %for.cond, !dbg !3291

for.cond:                                         ; preds = %for.inc, %if.end45
  %55 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3293
  %tobool46 = icmp ne %struct.loop* %55, null, !dbg !3291
  br i1 %tobool46, label %for.body, label %for.end, !dbg !3291

for.body:                                         ; preds = %for.cond
  %56 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3295
  call void @free_numbers_of_iterations_estimates_loop(%struct.loop* %56), !dbg !3296
  br label %for.inc, !dbg !3296

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop.addr), !dbg !3293
  br label %for.cond, !dbg !3293, !llvm.loop !3297

for.end:                                          ; preds = %for.cond
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %parallel_head, align 8, !dbg !3299
  call void @omp_expand_local(%struct.basic_block_def* %57), !dbg !3300
  ret void, !dbg !3301
}

declare dso_local void @verify_flow_info() #2

declare dso_local void @verify_dominators(i32) #2

declare dso_local void @verify_loop_structure() #2

declare dso_local void @verify_loop_closed_ssa() #2

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !3302 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !3305, metadata !DIExpression()), !dbg !3306
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !3307, metadata !DIExpression()), !dbg !3308
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !3309, metadata !DIExpression()), !dbg !3310
  br label %while.cond, !dbg !3311

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3312
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !3312
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !3312
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !3312
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3312

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3312
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !3312
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !3312
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !3312
  br label %cond.end, !dbg !3312

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !3312

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3312
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3312
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !3312
  %5 = load i32, i32* %idx, align 8, !dbg !3312
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !3312
  %tobool2 = icmp ne i32 %call, 0, !dbg !3311
  br i1 %tobool2, label %while.body, label %while.end, !dbg !3311

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3313
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !3315
  %7 = load i32, i32* %idx3, align 8, !dbg !3316
  %inc = add i32 %7, 1, !dbg !3316
  store i32 %inc, i32* %idx3, align 8, !dbg !3316
  %8 = load i32, i32* %anum, align 4, !dbg !3317
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !3318
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3319
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !3320
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3321
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !3323
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !3323
  br i1 %tobool5, label %if.then, label %if.end, !dbg !3324

if.then:                                          ; preds = %while.body
  br label %return, !dbg !3325

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !3311, !llvm.loop !3326

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3328
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !3328
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !3328
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3329
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !3330
  br label %return, !dbg !3331

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !3331
}

declare dso_local void @free_stmt_vec_info_vec() #2

declare dso_local void @htab_delete(%struct.htab*) #2

declare dso_local void @pt_solution_reset(%struct.pt_solution*) #2

declare dso_local void @gt_ggc_mx_bitmap_head_def(i8*) #2

declare dso_local void @gt_pch_nx_bitmap_head_def(i8*) #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !3332 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3335, metadata !DIExpression()), !dbg !3336
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3336
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !3336
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !3336
  ret %struct.VEC_int_heap* %1, !dbg !3336
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !3337 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3340
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3340
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3340
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3340
  %tobool = icmp ne %struct.loops* %1, null, !dbg !3340
  br i1 %tobool, label %if.end, label %if.then, !dbg !3342

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3343
  br label %return, !dbg !3343

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3344
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3344
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !3344
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !3344
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !3344
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3344
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !3344
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3344

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3344
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3344
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !3344
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !3344
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !3344
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !3344
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !3344
  br label %cond.end, !dbg !3344

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3344

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3344
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3344
  store i32 %call, i32* %retval, align 4, !dbg !3345
  br label %return, !dbg !3345

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3346
  ret i32 %8, !dbg !3346
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !3347 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3352, metadata !DIExpression()), !dbg !3353
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3354, metadata !DIExpression()), !dbg !3353
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !3355, metadata !DIExpression()), !dbg !3353
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3356
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3356
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3356

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3356
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3356
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !3356
  %3 = load i32, i32* %num, align 8, !dbg !3356
  %cmp = icmp ult i32 %1, %3, !dbg !3356
  br i1 %cmp, label %if.then, label %if.else, !dbg !3353

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3358
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !3358
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3358
  %idxprom = zext i32 %5 to i64, !dbg !3358
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3358
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !3358
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3358
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !3358
  store i32 1, i32* %retval, align 4, !dbg !3358
  br label %return, !dbg !3358

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3360
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !3360
  store i32 0, i32* %retval, align 4, !dbg !3360
  br label %return, !dbg !3360

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3353
  ret i32 %9, !dbg !3353
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !3362 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !3366, metadata !DIExpression()), !dbg !3367
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !3368, metadata !DIExpression()), !dbg !3367
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !3369, metadata !DIExpression()), !dbg !3367
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3367
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !3367
  %1 = load i32, i32* %num, align 4, !dbg !3367
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3367
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !3367
  %3 = load i32, i32* %alloc, align 4, !dbg !3367
  %cmp = icmp ult i32 %1, %3, !dbg !3367
  %conv = zext i1 %cmp to i32, !dbg !3367
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3367
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !3367
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3367
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !3367
  %6 = load i32, i32* %num1, align 4, !dbg !3367
  %inc = add i32 %6, 1, !dbg !3367
  store i32 %inc, i32* %num1, align 4, !dbg !3367
  %idxprom = zext i32 %6 to i64, !dbg !3367
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !3367
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !3367
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !3367
  %8 = load i32*, i32** %slot_, align 8, !dbg !3367
  store i32 %7, i32* %8, align 4, !dbg !3367
  %9 = load i32*, i32** %slot_, align 8, !dbg !3367
  ret i32* %9, !dbg !3367
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !3370 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3373, metadata !DIExpression()), !dbg !3374
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3375, metadata !DIExpression()), !dbg !3376
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3377
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !3377
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !3377
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !3377
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3377

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3377
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !3377
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !3377
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !3377
  br label %cond.end, !dbg !3377

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3377

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3377
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3377
  store i32 %call, i32* %n, align 4, !dbg !3376
  %4 = load i32, i32* %n, align 4, !dbg !3378
  %cmp = icmp eq i32 %4, 0, !dbg !3380
  br i1 %cmp, label %if.then, label %if.end, !dbg !3381

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3382
  br label %return, !dbg !3382

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3383
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !3383
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !3383
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !3383
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !3383

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3383
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !3383
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !3383
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !3383
  br label %cond.end8, !dbg !3383

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !3383

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !3383
  %9 = load i32, i32* %n, align 4, !dbg !3383
  %sub = sub i32 %9, 1, !dbg !3383
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !3383
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !3384
  br label %return, !dbg !3384

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !3385
  ret %struct.loop* %10, !dbg !3385
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !3386 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3389, metadata !DIExpression()), !dbg !3390
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3390
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3390
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3390

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3390
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !3390
  %2 = load i32, i32* %num, align 8, !dbg !3390
  br label %cond.end, !dbg !3390

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3390

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3390
  ret i32 %cond, !dbg !3390
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !3391 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3394, metadata !DIExpression()), !dbg !3395
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3396, metadata !DIExpression()), !dbg !3395
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3395
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3395
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3395

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3395
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3395
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !3395
  %3 = load i32, i32* %num, align 8, !dbg !3395
  %cmp = icmp ult i32 %1, %3, !dbg !3395
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3397
  %land.ext = zext i1 %4 to i32, !dbg !3395
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3395
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !3395
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3395
  %idxprom = zext i32 %6 to i64, !dbg !3395
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3395
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !3395
  ret %struct.loop* %7, !dbg !3395
}

declare dso_local %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3398 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3401, metadata !DIExpression()), !dbg !3402
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3403
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3403
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3404
  %conv = zext i1 %cmp to i32, !dbg !3404
  %conv1 = trunc i32 %conv to i8, !dbg !3405
  ret i8 %conv1, !dbg !3406
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !3407 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !3411, metadata !DIExpression()), !dbg !3412
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !3413
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !3414
  ret %union.tree_node* %1, !dbg !3415
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !3416 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3419, metadata !DIExpression()), !dbg !3420
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3421
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !3422
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !3423
  ret %union.tree_node** %result, !dbg !3424
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3425 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3428, metadata !DIExpression()), !dbg !3429
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3430
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3430
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !3431
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3431
  ret %union.gimple_statement_d* %1, !dbg !3432
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !3433 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !3437, metadata !DIExpression()), !dbg !3438
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3439
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !3440
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3440
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !3441
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !3441
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !3442
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !3443
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !3444
  ret void, !dbg !3445
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local zeroext i8 @number_of_iterations_exit(%struct.loop*, %struct.edge_def*, %struct.tree_niter_desc*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gather_scalar_reductions(%struct.loop* %loop, %struct.htab* %reduction_list) #0 !dbg !3446 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %reduction_list.addr = alloca %struct.htab*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %simple_loop_info = alloca %struct._loop_vec_info*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %iv = alloca %struct.affine_iv, align 8
  %res = alloca %union.tree_node*, align 8
  %double_reduc = alloca i8, align 1
  %reduc_stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3449, metadata !DIExpression()), !dbg !3450
  store %struct.htab* %reduction_list, %struct.htab** %reduction_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %reduction_list.addr, metadata !3451, metadata !DIExpression()), !dbg !3452
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3453, metadata !DIExpression()), !dbg !3454
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %simple_loop_info, metadata !3455, metadata !DIExpression()), !dbg !3536
  store %struct._IO_FILE* null, %struct._IO_FILE** @vect_dump, align 8, !dbg !3537
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3538
  %call = call %struct._loop_vec_info* @vect_analyze_loop_form(%struct.loop* %0), !dbg !3539
  store %struct._loop_vec_info* %call, %struct._loop_vec_info** %simple_loop_info, align 8, !dbg !3540
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3541
  %header = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 2, !dbg !3543
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3543
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %2), !dbg !3544
  %3 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3544
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3544
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !3544
  br label %for.cond, !dbg !3545

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3546
  %tobool = icmp ne i8 %call1, 0, !dbg !3548
  %lnot = xor i1 %tobool, true, !dbg !3548
  br i1 %lnot, label %for.body, label %for.end, !dbg !3549

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3550, metadata !DIExpression()), !dbg !3552
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3553
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %phi, align 8, !dbg !3552
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %iv, metadata !3554, metadata !DIExpression()), !dbg !3555
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !3556, metadata !DIExpression()), !dbg !3557
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3558
  %call3 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %5), !dbg !3558
  %call4 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call3), !dbg !3558
  store %union.tree_node* %call4, %union.tree_node** %res, align 8, !dbg !3557
  call void @llvm.dbg.declare(metadata i8* %double_reduc, metadata !3559, metadata !DIExpression()), !dbg !3560
  %6 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3561
  %call5 = call zeroext i8 @is_gimple_reg(%union.tree_node* %6), !dbg !3563
  %tobool6 = icmp ne i8 %call5, 0, !dbg !3563
  br i1 %tobool6, label %if.end, label %if.then, !dbg !3564

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !3565

if.end:                                           ; preds = %for.body
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3566
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3568
  %9 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !3569
  %call7 = call zeroext i8 @simple_iv(%struct.loop* %7, %struct.loop* %8, %union.tree_node* %9, %struct.affine_iv* %iv, i8 zeroext 1), !dbg !3570
  %tobool8 = icmp ne i8 %call7, 0, !dbg !3570
  br i1 %tobool8, label %if.end17, label %land.lhs.true, !dbg !3571

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct._loop_vec_info*, %struct._loop_vec_info** %simple_loop_info, align 8, !dbg !3572
  %tobool9 = icmp ne %struct._loop_vec_info* %10, null, !dbg !3572
  br i1 %tobool9, label %if.then10, label %if.end17, !dbg !3573

if.then10:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %reduc_stmt, metadata !3574, metadata !DIExpression()), !dbg !3576
  %11 = load %struct._loop_vec_info*, %struct._loop_vec_info** %simple_loop_info, align 8, !dbg !3577
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3578
  %call11 = call %union.gimple_statement_d* @vect_is_simple_reduction(%struct._loop_vec_info* %11, %union.gimple_statement_d* %12, i8 zeroext 1, i8* %double_reduc), !dbg !3579
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %reduc_stmt, align 8, !dbg !3576
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt, align 8, !dbg !3580
  %tobool12 = icmp ne %union.gimple_statement_d* %13, null, !dbg !3580
  br i1 %tobool12, label %land.lhs.true13, label %if.end16, !dbg !3582

land.lhs.true13:                                  ; preds = %if.then10
  %14 = load i8, i8* %double_reduc, align 1, !dbg !3583
  %tobool14 = icmp ne i8 %14, 0, !dbg !3583
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !3584

if.then15:                                        ; preds = %land.lhs.true13
  %15 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !3585
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt, align 8, !dbg !3586
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3587
  call void @build_new_reduction(%struct.htab* %15, %union.gimple_statement_d* %16, %union.gimple_statement_d* %17), !dbg !3588
  br label %if.end16, !dbg !3588

if.end16:                                         ; preds = %if.then15, %land.lhs.true13, %if.then10
  br label %if.end17, !dbg !3589

if.end17:                                         ; preds = %if.end16, %land.lhs.true, %if.end
  br label %for.inc, !dbg !3590

for.inc:                                          ; preds = %if.end17, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3591
  br label %for.cond, !dbg !3592, !llvm.loop !3593

for.end:                                          ; preds = %for.cond
  %18 = load %struct._loop_vec_info*, %struct._loop_vec_info** %simple_loop_info, align 8, !dbg !3595
  call void @destroy_loop_vec_info(%struct._loop_vec_info* %18, i8 zeroext 1), !dbg !3596
  ret void, !dbg !3597
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !3598 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !3601, metadata !DIExpression()), !dbg !3602
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3603
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !3604
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !3604
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !3605
  ret %union.tree_node* %2, !dbg !3606
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !3607 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3610, metadata !DIExpression()), !dbg !3611
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3612, metadata !DIExpression()), !dbg !3613
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3614
  %1 = load i32, i32* %i.addr, align 4, !dbg !3615
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !3616
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !3617
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !3618
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local i64 @htab_elements(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !3619 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3623, metadata !DIExpression()), !dbg !3624
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !3625, metadata !DIExpression()), !dbg !3626
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !3627
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !3627
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !3627
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3628
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !3629
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !3630
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3631
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !3632
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !3632
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !3633
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3633
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3634
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !3635
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3636
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3637
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %6), !dbg !3639
  %tobool = icmp ne i8 %call, 0, !dbg !3639
  br i1 %tobool, label %if.then, label %if.end, !dbg !3640

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3641
  br label %return, !dbg !3641

if.end:                                           ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3642
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !3643
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !3643
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3644
  br label %return, !dbg !3644

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3645
  ret %struct.ssa_use_operand_d* %9, !dbg !3645
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3646 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3651, metadata !DIExpression()), !dbg !3652
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3653
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !3654
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3654
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3655
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !3656
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !3656
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !3657
  %conv = zext i1 %cmp to i32, !dbg !3657
  %conv1 = trunc i32 %conv to i8, !dbg !3658
  ret i8 %conv1, !dbg !3659
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !3660 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3664, metadata !DIExpression()), !dbg !3665
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3666
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3667
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !3668
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3668
  ret %struct.basic_block_def* %1, !dbg !3669
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm) #0 !dbg !3670 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %old = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !3673, metadata !DIExpression()), !dbg !3674
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %old, metadata !3675, metadata !DIExpression()), !dbg !3676
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3677
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !3678
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !3678
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %old, align 8, !dbg !3676
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %old, align 8, !dbg !3679
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !3680
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !3680
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3681
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !3682
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !3683
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3684
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %5), !dbg !3686
  %tobool = icmp ne i8 %call, 0, !dbg !3686
  br i1 %tobool, label %if.then, label %if.end, !dbg !3687

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3688
  br label %return, !dbg !3688

if.end:                                           ; preds = %entry
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !3689
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 0, !dbg !3690
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !3690
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3691
  br label %return, !dbg !3691

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !3692
  ret %struct.ssa_use_operand_d* %8, !dbg !3692
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.reduction_info* @reduction_phi(%struct.htab* %reduction_list, %union.gimple_statement_d* %phi) #0 !dbg !3693 {
entry:
  %retval = alloca %struct.reduction_info*, align 8
  %reduction_list.addr = alloca %struct.htab*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %tmpred = alloca %struct.reduction_info, align 8
  %red = alloca %struct.reduction_info*, align 8
  store %struct.htab* %reduction_list, %struct.htab** %reduction_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %reduction_list.addr, metadata !3696, metadata !DIExpression()), !dbg !3697
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !3698, metadata !DIExpression()), !dbg !3699
  call void @llvm.dbg.declare(metadata %struct.reduction_info* %tmpred, metadata !3700, metadata !DIExpression()), !dbg !3701
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %red, metadata !3702, metadata !DIExpression()), !dbg !3703
  %0 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !3704
  %call = call i64 @htab_elements(%struct.htab* %0), !dbg !3706
  %cmp = icmp eq i64 %call, 0, !dbg !3707
  br i1 %cmp, label %if.then, label %if.end, !dbg !3708

if.then:                                          ; preds = %entry
  store %struct.reduction_info* null, %struct.reduction_info** %retval, align 8, !dbg !3709
  br label %return, !dbg !3709

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3710
  %reduc_phi = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %tmpred, i32 0, i32 1, !dbg !3711
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %reduc_phi, align 8, !dbg !3712
  %2 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !3713
  %3 = bitcast %struct.reduction_info* %tmpred to i8*, !dbg !3714
  %call1 = call i8* @htab_find(%struct.htab* %2, i8* %3), !dbg !3715
  %4 = bitcast i8* %call1 to %struct.reduction_info*, !dbg !3716
  store %struct.reduction_info* %4, %struct.reduction_info** %red, align 8, !dbg !3717
  %5 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !3718
  store %struct.reduction_info* %5, %struct.reduction_info** %retval, align 8, !dbg !3719
  br label %return, !dbg !3719

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.reduction_info*, %struct.reduction_info** %retval, align 8, !dbg !3720
  ret %struct.reduction_info* %6, !dbg !3720
}

declare dso_local zeroext i8 @simple_iv(%struct.loop*, %struct.loop*, %union.tree_node*, %struct.affine_iv*, i8 zeroext) #2

declare dso_local %struct._loop_vec_info* @vect_analyze_loop_form(%struct.loop*) #2

declare dso_local %union.gimple_statement_d* @vect_is_simple_reduction(%struct._loop_vec_info*, %union.gimple_statement_d*, i8 zeroext, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @build_new_reduction(%struct.htab* %reduction_list, %union.gimple_statement_d* %reduc_stmt, %union.gimple_statement_d* %phi) #0 !dbg !3721 {
entry:
  %reduction_list.addr = alloca %struct.htab*, align 8
  %reduc_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %slot = alloca i8**, align 8
  %new_reduction = alloca %struct.reduction_info*, align 8
  store %struct.htab* %reduction_list, %struct.htab** %reduction_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %reduction_list.addr, metadata !3724, metadata !DIExpression()), !dbg !3725
  store %union.gimple_statement_d* %reduc_stmt, %union.gimple_statement_d** %reduc_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %reduc_stmt.addr, metadata !3726, metadata !DIExpression()), !dbg !3727
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !3728, metadata !DIExpression()), !dbg !3729
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3730, metadata !DIExpression()), !dbg !3731
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %new_reduction, metadata !3732, metadata !DIExpression()), !dbg !3733
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt.addr, align 8, !dbg !3734
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !3734
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3734

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 1708, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !3734
  br label %cond.end, !dbg !3734

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3734

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3734
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3735
  %tobool1 = icmp ne %struct._IO_FILE* %1, null, !dbg !3735
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !3737

land.lhs.true:                                    ; preds = %cond.end
  %2 = load i32, i32* @dump_flags, align 4, !dbg !3738
  %and = and i32 %2, 8, !dbg !3739
  %tobool2 = icmp ne i32 %and, 0, !dbg !3739
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3740

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3741
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.19, i64 0, i64 0)), !dbg !3743
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3744
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt.addr, align 8, !dbg !3745
  call void @print_gimple_stmt(%struct._IO_FILE* %4, %union.gimple_statement_d* %5, i32 0, i32 0), !dbg !3746
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3747
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.20, i64 0, i64 0)), !dbg !3748
  br label %if.end, !dbg !3749

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end
  %call4 = call i8* @xcalloc(i64 1, i64 64), !dbg !3750
  %7 = bitcast i8* %call4 to %struct.reduction_info*, !dbg !3750
  store %struct.reduction_info* %7, %struct.reduction_info** %new_reduction, align 8, !dbg !3751
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt.addr, align 8, !dbg !3752
  %9 = load %struct.reduction_info*, %struct.reduction_info** %new_reduction, align 8, !dbg !3753
  %reduc_stmt5 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %9, i32 0, i32 0, !dbg !3754
  store %union.gimple_statement_d* %8, %union.gimple_statement_d** %reduc_stmt5, align 8, !dbg !3755
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3756
  %11 = load %struct.reduction_info*, %struct.reduction_info** %new_reduction, align 8, !dbg !3757
  %reduc_phi = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %11, i32 0, i32 1, !dbg !3758
  store %union.gimple_statement_d* %10, %union.gimple_statement_d** %reduc_phi, align 8, !dbg !3759
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt.addr, align 8, !dbg !3760
  %call6 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %12), !dbg !3761
  %13 = load %struct.reduction_info*, %struct.reduction_info** %new_reduction, align 8, !dbg !3762
  %reduction_code = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %13, i32 0, i32 2, !dbg !3763
  store i32 %call6, i32* %reduction_code, align 8, !dbg !3764
  %14 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !3765
  %15 = load %struct.reduction_info*, %struct.reduction_info** %new_reduction, align 8, !dbg !3766
  %16 = bitcast %struct.reduction_info* %15 to i8*, !dbg !3766
  %call7 = call i8** @htab_find_slot(%struct.htab* %14, i8* %16, i32 1), !dbg !3767
  store i8** %call7, i8*** %slot, align 8, !dbg !3768
  %17 = load %struct.reduction_info*, %struct.reduction_info** %new_reduction, align 8, !dbg !3769
  %18 = bitcast %struct.reduction_info* %17 to i8*, !dbg !3769
  %19 = load i8**, i8*** %slot, align 8, !dbg !3770
  store i8* %18, i8** %19, align 8, !dbg !3771
  ret void, !dbg !3772
}

declare dso_local void @destroy_loop_vec_info(%struct._loop_vec_info*, i8 zeroext) #2

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !3773 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3776, metadata !DIExpression()), !dbg !3777
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3778, metadata !DIExpression()), !dbg !3779
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3780
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !3781
  store i32 %call, i32* %code, align 4, !dbg !3782
  %1 = load i32, i32* %code, align 4, !dbg !3783
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !3785
  %cmp = icmp eq i32 %call1, 3, !dbg !3786
  br i1 %cmp, label %if.then, label %if.end, !dbg !3787

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3788
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !3788
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !3788
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !3788
  %bf.load = load i64, i64* %3, align 8, !dbg !3788
  %bf.clear = and i64 %bf.load, 65535, !dbg !3788
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3788
  store i32 %bf.cast, i32* %code, align 4, !dbg !3789
  br label %if.end, !dbg !3790

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !3791
  ret i32 %4, !dbg !3792
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !3793 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3794, metadata !DIExpression()), !dbg !3795
  call void @llvm.dbg.declare(metadata i32* %code, metadata !3796, metadata !DIExpression()), !dbg !3797
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3798
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3799
  store i32 %call, i32* %code, align 4, !dbg !3797
  %1 = load i32, i32* %code, align 4, !dbg !3800
  %cmp = icmp eq i32 %1, 6, !dbg !3802
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3803

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !3804
  %cmp1 = icmp eq i32 %2, 1, !dbg !3805
  br i1 %cmp1, label %if.then, label %if.else, !dbg !3806

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3807
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !3808
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3809
  %bf.load = load i32, i32* %4, align 8, !dbg !3809
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3809
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !3810
  br label %return, !dbg !3810

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !3811
  %cmp2 = icmp eq i32 %5, 8, !dbg !3813
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !3814

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !3815
  br label %return, !dbg !3815

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !3816
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !3817
  br label %return, !dbg !3817

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !3818
  ret i32 %6, !dbg !3818
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !3819 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3822, metadata !DIExpression()), !dbg !3823
  %0 = load i32, i32* %code.addr, align 4, !dbg !3824
  %idxprom = sext i32 %0 to i64, !dbg !3825
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !3825
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3825
  %conv = zext i8 %1 to i32, !dbg !3826
  ret i32 %conv, !dbg !3827
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !3828 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3831, metadata !DIExpression()), !dbg !3832
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3833
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !3834
  ret %union.tree_node* %call, !dbg !3835
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !3836 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3839, metadata !DIExpression()), !dbg !3840
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3841
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3842
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !3843
  %bf.load = load i32, i32* %1, align 8, !dbg !3843
  %bf.clear = and i32 %bf.load, 255, !dbg !3843
  ret i32 %bf.clear, !dbg !3844
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !3845 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3848, metadata !DIExpression()), !dbg !3849
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !3850, metadata !DIExpression()), !dbg !3851
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3852
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !3854
  %tobool = icmp ne i8 %call, 0, !dbg !3854
  br i1 %tobool, label %if.then, label %if.else, !dbg !3855

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3856
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !3858
  %2 = load i32, i32* %i.addr, align 4, !dbg !3859
  %idxprom = zext i32 %2 to i64, !dbg !3858
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !3858
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3858
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !3860
  br label %return, !dbg !3860

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3861
  br label %return, !dbg !3861

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3862
  ret %union.tree_node* %4, !dbg !3862
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !3863 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3866, metadata !DIExpression()), !dbg !3867
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3868
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3869
  %cmp = icmp uge i32 %call, 1, !dbg !3870
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3871

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3872
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !3873
  %cmp2 = icmp ule i32 %call1, 9, !dbg !3874
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !3875
  %land.ext = zext i1 %2 to i32, !dbg !3871
  %conv = trunc i32 %land.ext to i8, !dbg !3869
  ret i8 %conv, !dbg !3876
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !3877 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3878, metadata !DIExpression()), !dbg !3879
  call void @llvm.dbg.declare(metadata i64* %off, metadata !3880, metadata !DIExpression()), !dbg !3881
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3882
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !3883
  %idxprom = zext i32 %call to i64, !dbg !3884
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !3884
  %1 = load i64, i64* %arrayidx, align 8, !dbg !3884
  store i64 %1, i64* %off, align 8, !dbg !3885
  %2 = load i64, i64* %off, align 8, !dbg !3886
  %cmp = icmp ne i64 %2, 0, !dbg !3886
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3886

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !3886
  br label %cond.end, !dbg !3886

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3886

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3886
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3887
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !3888
  %5 = load i64, i64* %off, align 8, !dbg !3889
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !3890
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !3891
  ret %union.tree_node** %6, !dbg !3892
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !3893 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3896, metadata !DIExpression()), !dbg !3897
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3898
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3899
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !3900
  ret i32 %call1, !dbg !3901
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !3902 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !3905, metadata !DIExpression()), !dbg !3906
  %0 = load i32, i32* %code.addr, align 4, !dbg !3907
  %idxprom = zext i32 %0 to i64, !dbg !3908
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !3908
  %1 = load i32, i32* %arrayidx, align 4, !dbg !3908
  ret i32 %1, !dbg !3909
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !3910 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3914, metadata !DIExpression()), !dbg !3915
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !3916, metadata !DIExpression()), !dbg !3917
  %0 = load i32, i32* %index.addr, align 4, !dbg !3918
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3918
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !3918
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !3918
  %2 = load i32, i32* %capacity, align 8, !dbg !3918
  %cmp = icmp ule i32 %0, %2, !dbg !3918
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3918

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !3918
  br label %cond.end, !dbg !3918

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3918

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3918
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3919
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !3920
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !3921
  %4 = load i32, i32* %index.addr, align 4, !dbg !3922
  %idxprom = zext i32 %4 to i64, !dbg !3919
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !3919
  ret %struct.phi_arg_d* %arrayidx, !dbg !3923
}

declare dso_local i8* @htab_find(%struct.htab*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_data_reference_p_heap* @VEC_data_reference_p_heap_alloc(i32 %alloc_) #0 !dbg !3924 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3927, metadata !DIExpression()), !dbg !3928
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3928
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3928
  %1 = bitcast i8* %call to %struct.VEC_data_reference_p_heap*, !dbg !3928
  ret %struct.VEC_data_reference_p_heap* %1, !dbg !3928
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ddr_p_heap* @VEC_ddr_p_heap_alloc(i32 %alloc_) #0 !dbg !3929 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3932, metadata !DIExpression()), !dbg !3933
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3933
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3933
  %1 = bitcast i8* %call to %struct.VEC_ddr_p_heap*, !dbg !3933
  ret %struct.VEC_ddr_p_heap* %1, !dbg !3933
}

declare dso_local zeroext i8 @compute_data_dependences_for_loop(%struct.loop*, i8 zeroext, %struct.VEC_data_reference_p_heap**, %struct.VEC_ddr_p_heap**) #2

declare dso_local void @dump_data_dependence_relations(%struct._IO_FILE*, %struct.VEC_ddr_p_heap*) #2

declare dso_local %struct.lambda_trans_matrix_s* @lambda_trans_matrix_new(i32, i32) #2

declare dso_local zeroext i8 @lambda_transform_legal_p(%struct.lambda_trans_matrix_s*, i32, %struct.VEC_ddr_p_heap*) #2

declare dso_local void @free_dependence_relations(%struct.VEC_ddr_p_heap*) #2

declare dso_local void @free_data_refs(%struct.VEC_data_reference_p_heap*) #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) #2

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def*, %struct.gimple_seq_d*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local %union.tree_node* @invert_truthvalue_loc(i32, %union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_condexpr(%union.tree_node*) #2

declare dso_local void @initialize_original_copy_tables() #2

declare dso_local %struct.loop* @loop_version(%struct.loop*, i8*, %struct.basic_block_def**, i32, i32, i32, i8 zeroext) #2

declare dso_local void @update_ssa(i32) #2

declare dso_local void @free_original_copy_tables() #2

declare dso_local %union.tree_node* @canonicalize_loop_ivs(%struct.loop*, %union.tree_node**, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @transform_to_exit_first_loop(%struct.loop* %loop, %struct.htab* %reduction_list, %union.tree_node* %nit) #0 !dbg !3934 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %reduction_list.addr = alloca %struct.htab*, align 8
  %nit.addr = alloca %union.tree_node*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %nbbs = alloca %struct.basic_block_def**, align 8
  %ex_bb = alloca %struct.basic_block_def*, align 8
  %orig_header = alloca %struct.basic_block_def*, align 8
  %n = alloca i32, align 4
  %ok = alloca i8, align 1
  %exit = alloca %struct.edge_def*, align 8
  %hpred = alloca %struct.edge_def*, align 8
  %control = alloca %union.tree_node*, align 8
  %control_name = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %nphi = alloca %union.gimple_statement_d*, align 8
  %cond_stmt = alloca %union.gimple_statement_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %cond_nit = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %nit_1 = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp35 = alloca %struct.gimple_stmt_iterator, align 8
  %red = alloca %struct.reduction_info*, align 8
  %val = alloca %union.tree_node*, align 8
  %tmp81 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3937, metadata !DIExpression()), !dbg !3938
  store %struct.htab* %reduction_list, %struct.htab** %reduction_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %reduction_list.addr, metadata !3939, metadata !DIExpression()), !dbg !3940
  store %union.tree_node* %nit, %union.tree_node** %nit.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %nit.addr, metadata !3941, metadata !DIExpression()), !dbg !3942
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !3943, metadata !DIExpression()), !dbg !3944
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %nbbs, metadata !3945, metadata !DIExpression()), !dbg !3946
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ex_bb, metadata !3947, metadata !DIExpression()), !dbg !3948
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %orig_header, metadata !3949, metadata !DIExpression()), !dbg !3950
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3951, metadata !DIExpression()), !dbg !3952
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !3953, metadata !DIExpression()), !dbg !3954
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !3955, metadata !DIExpression()), !dbg !3956
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3957
  %call = call %struct.edge_def* @single_dom_exit(%struct.loop* %0), !dbg !3958
  store %struct.edge_def* %call, %struct.edge_def** %exit, align 8, !dbg !3956
  call void @llvm.dbg.declare(metadata %struct.edge_def** %hpred, metadata !3959, metadata !DIExpression()), !dbg !3960
  call void @llvm.dbg.declare(metadata %union.tree_node** %control, metadata !3961, metadata !DIExpression()), !dbg !3962
  call void @llvm.dbg.declare(metadata %union.tree_node** %control_name, metadata !3963, metadata !DIExpression()), !dbg !3964
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !3965, metadata !DIExpression()), !dbg !3966
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !3967, metadata !DIExpression()), !dbg !3968
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3969, metadata !DIExpression()), !dbg !3970
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %nphi, metadata !3971, metadata !DIExpression()), !dbg !3972
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt, metadata !3973, metadata !DIExpression()), !dbg !3974
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3975, metadata !DIExpression()), !dbg !3976
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_nit, metadata !3977, metadata !DIExpression()), !dbg !3978
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3979, metadata !DIExpression()), !dbg !3980
  call void @llvm.dbg.declare(metadata %union.tree_node** %nit_1, metadata !3981, metadata !DIExpression()), !dbg !3982
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3983
  %header = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 2, !dbg !3984
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3984
  %call1 = call %struct.edge_def* @split_block_after_labels(%struct.basic_block_def* %2), !dbg !3985
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3986
  %header2 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 2, !dbg !3987
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %header2, align 8, !dbg !3987
  %call3 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %4), !dbg !3988
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %orig_header, align 8, !dbg !3989
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3990
  %header4 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 2, !dbg !3991
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %header4, align 8, !dbg !3991
  %call5 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %6), !dbg !3992
  store %struct.edge_def* %call5, %struct.edge_def** %hpred, align 8, !dbg !3993
  %7 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !3994
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 0, !dbg !3995
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3995
  %call6 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %8), !dbg !3996
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !3997
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !3998
  %call7 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %9), !dbg !3999
  store %union.tree_node* %call7, %union.tree_node** %control, align 8, !dbg !4000
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !4001
  %call8 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %10), !dbg !4001
  %11 = load %union.tree_node*, %union.tree_node** %nit.addr, align 8, !dbg !4001
  %cmp = icmp eq %union.tree_node* %call8, %11, !dbg !4001
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4001

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 1311, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4001
  br label %cond.end, !dbg !4001

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4001

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4001
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4002
  %header9 = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 2, !dbg !4004
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %header9, align 8, !dbg !4004
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %13), !dbg !4005
  %14 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4005
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4005
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !4005
  br label %for.cond, !dbg !4006

for.cond:                                         ; preds = %for.inc, %cond.end
  %call10 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4007
  %tobool = icmp ne i8 %call10, 0, !dbg !4009
  %lnot = xor i1 %tobool, true, !dbg !4009
  br i1 %lnot, label %for.body, label %for.end, !dbg !4010

for.body:                                         ; preds = %for.cond
  %call11 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4011
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %phi, align 8, !dbg !4013
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4014
  %call12 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %16), !dbg !4014
  %call13 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call12), !dbg !4014
  store %union.tree_node* %call13, %union.tree_node** %res, align 8, !dbg !4015
  %17 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !4016
  %ssa_name = bitcast %union.tree_node* %17 to %struct.tree_ssa_name*, !dbg !4016
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4016
  %18 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4016
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4017
  %call14 = call %union.tree_node* @make_ssa_name(%union.tree_node* %18, %union.gimple_statement_d* %19), !dbg !4018
  store %union.tree_node* %call14, %union.tree_node** %t, align 8, !dbg !4019
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4020
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4020
  %call15 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %21), !dbg !4020
  store %union.tree_node* %20, %union.tree_node** %call15, align 8, !dbg !4020
  %22 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !4021
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %orig_header, align 8, !dbg !4022
  %call16 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %22, %struct.basic_block_def* %23), !dbg !4023
  store %union.gimple_statement_d* %call16, %union.gimple_statement_d** %nphi, align 8, !dbg !4024
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %nphi, align 8, !dbg !4025
  %25 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !4026
  %ssa_name17 = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !4026
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name17, i32 0, i32 2, !dbg !4026
  store %union.gimple_statement_d* %24, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4027
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %nphi, align 8, !dbg !4028
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4029
  %28 = load %struct.edge_def*, %struct.edge_def** %hpred, align 8, !dbg !4030
  call void @add_phi_arg(%union.gimple_statement_d* %26, %union.tree_node* %27, %struct.edge_def* %28, i32 0), !dbg !4031
  %29 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !4032
  %30 = load %union.tree_node*, %union.tree_node** %control, align 8, !dbg !4034
  %cmp18 = icmp eq %union.tree_node* %29, %30, !dbg !4035
  br i1 %cmp18, label %if.then, label %if.end, !dbg !4036

if.then:                                          ; preds = %for.body
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !4037
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4039
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %31, %union.tree_node* %32), !dbg !4040
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !4041
  call void @update_stmt(%union.gimple_statement_d* %33), !dbg !4042
  %34 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4043
  store %union.tree_node* %34, %union.tree_node** %control, align 8, !dbg !4044
  br label %if.end, !dbg !4045

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !4046

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4047
  br label %for.cond, !dbg !4048, !llvm.loop !4049

for.end:                                          ; preds = %for.cond
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4051
  %call19 = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %35), !dbg !4052
  store %struct.basic_block_def** %call19, %struct.basic_block_def*** %bbs, align 8, !dbg !4053
  store i32 0, i32* %n, align 4, !dbg !4054
  br label %for.cond20, !dbg !4056

for.cond20:                                       ; preds = %for.inc23, %for.end
  %36 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4057
  %37 = load i32, i32* %n, align 4, !dbg !4059
  %idxprom = zext i32 %37 to i64, !dbg !4057
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %36, i64 %idxprom, !dbg !4057
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4057
  %39 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4060
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %39, i32 0, i32 3, !dbg !4061
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4061
  %cmp21 = icmp ne %struct.basic_block_def* %38, %40, !dbg !4062
  br i1 %cmp21, label %for.body22, label %for.end24, !dbg !4063

for.body22:                                       ; preds = %for.cond20
  br label %for.inc23, !dbg !4064

for.inc23:                                        ; preds = %for.body22
  %41 = load i32, i32* %n, align 4, !dbg !4065
  %inc = add i32 %41, 1, !dbg !4065
  store i32 %inc, i32* %n, align 4, !dbg !4065
  br label %for.cond20, !dbg !4066, !llvm.loop !4067

for.end24:                                        ; preds = %for.cond20
  %42 = load i32, i32* %n, align 4, !dbg !4069
  %conv = zext i32 %42 to i64, !dbg !4069
  %mul = mul i64 8, %conv, !dbg !4069
  %call25 = call i8* @xmalloc(i64 %mul), !dbg !4069
  %43 = bitcast i8* %call25 to %struct.basic_block_def**, !dbg !4069
  store %struct.basic_block_def** %43, %struct.basic_block_def*** %nbbs, align 8, !dbg !4070
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4071
  %header26 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 2, !dbg !4072
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %header26, align 8, !dbg !4072
  %call27 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %45), !dbg !4073
  %46 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4074
  %47 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4075
  %add.ptr = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %47, i64 1, !dbg !4076
  %48 = load i32, i32* %n, align 4, !dbg !4077
  %49 = load %struct.basic_block_def**, %struct.basic_block_def*** %nbbs, align 8, !dbg !4078
  %call28 = call zeroext i8 @gimple_duplicate_sese_tail(%struct.edge_def* %call27, %struct.edge_def* %46, %struct.basic_block_def** %add.ptr, i32 %48, %struct.basic_block_def** %49), !dbg !4079
  store i8 %call28, i8* %ok, align 1, !dbg !4080
  %50 = load i8, i8* %ok, align 1, !dbg !4081
  %tobool29 = icmp ne i8 %50, 0, !dbg !4081
  br i1 %tobool29, label %cond.false31, label %cond.true30, !dbg !4081

cond.true30:                                      ; preds = %for.end24
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 1339, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4081
  br label %cond.end32, !dbg !4081

cond.false31:                                     ; preds = %for.end24
  br label %cond.end32, !dbg !4081

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !4081
  %51 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4082
  %52 = bitcast %struct.basic_block_def** %51 to i8*, !dbg !4082
  call void @free(i8* %52), !dbg !4083
  %53 = load %struct.basic_block_def**, %struct.basic_block_def*** %nbbs, align 8, !dbg !4084
  %arrayidx34 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %53, i64 0, !dbg !4084
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx34, align 8, !dbg !4084
  store %struct.basic_block_def* %54, %struct.basic_block_def** %ex_bb, align 8, !dbg !4085
  %55 = load %struct.basic_block_def**, %struct.basic_block_def*** %nbbs, align 8, !dbg !4086
  %56 = bitcast %struct.basic_block_def** %55 to i8*, !dbg !4086
  call void @free(i8* %56), !dbg !4087
  store %union.tree_node* null, %union.tree_node** %control_name, align 8, !dbg !4088
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !4089
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp35, %struct.basic_block_def* %57), !dbg !4091
  %58 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4091
  %59 = bitcast %struct.gimple_stmt_iterator* %tmp35 to i8*, !dbg !4091
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 24, i1 false), !dbg !4091
  br label %for.cond36, !dbg !4092

for.cond36:                                       ; preds = %cond.end72, %if.then59, %if.then46, %cond.end32
  %call37 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4093
  %tobool38 = icmp ne i8 %call37, 0, !dbg !4095
  %lnot39 = xor i1 %tobool38, true, !dbg !4095
  br i1 %lnot39, label %for.body40, label %for.end74, !dbg !4096

for.body40:                                       ; preds = %for.cond36
  %call41 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4097
  store %union.gimple_statement_d* %call41, %union.gimple_statement_d** %phi, align 8, !dbg !4099
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4100
  %call42 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %60), !dbg !4100
  %call43 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call42), !dbg !4100
  store %union.tree_node* %call43, %union.tree_node** %res, align 8, !dbg !4101
  %61 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !4102
  %call44 = call zeroext i8 @is_gimple_reg(%union.tree_node* %61), !dbg !4104
  %tobool45 = icmp ne i8 %call44, 0, !dbg !4104
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !4105

if.then46:                                        ; preds = %for.body40
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4106
  br label %for.cond36, !dbg !4108, !llvm.loop !4109

if.end47:                                         ; preds = %for.body40
  %62 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4111
  %call48 = call %struct.edge_def* @single_dom_exit(%struct.loop* %62), !dbg !4112
  store %struct.edge_def* %call48, %struct.edge_def** %exit, align 8, !dbg !4113
  %63 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4114
  %call49 = call i64 @htab_elements(%struct.htab* %63), !dbg !4116
  %cmp50 = icmp ugt i64 %call49, 0, !dbg !4117
  br i1 %cmp50, label %if.then52, label %if.end61, !dbg !4118

if.then52:                                        ; preds = %if.end47
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %red, metadata !4119, metadata !DIExpression()), !dbg !4121
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !4122, metadata !DIExpression()), !dbg !4123
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4124
  %65 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4124
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %65, i32 0, i32 6, !dbg !4124
  %66 = load i32, i32* %dest_idx, align 4, !dbg !4124
  %call53 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %64, i32 %66), !dbg !4124
  %call54 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call53), !dbg !4124
  store %union.tree_node* %call54, %union.tree_node** %val, align 8, !dbg !4123
  %67 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4125
  %68 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4126
  %ssa_name55 = bitcast %union.tree_node* %68 to %struct.tree_ssa_name*, !dbg !4126
  %def_stmt56 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name55, i32 0, i32 2, !dbg !4126
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt56, align 8, !dbg !4126
  %call57 = call %struct.reduction_info* @reduction_phi(%struct.htab* %67, %union.gimple_statement_d* %69), !dbg !4127
  store %struct.reduction_info* %call57, %struct.reduction_info** %red, align 8, !dbg !4128
  %70 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !4129
  %tobool58 = icmp ne %struct.reduction_info* %70, null, !dbg !4129
  br i1 %tobool58, label %if.then59, label %if.end60, !dbg !4131

if.then59:                                        ; preds = %if.then52
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4132
  %72 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !4134
  %keep_res = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %72, i32 0, i32 3, !dbg !4135
  store %union.gimple_statement_d* %71, %union.gimple_statement_d** %keep_res, align 8, !dbg !4136
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4137
  br label %for.cond36, !dbg !4138, !llvm.loop !4109

if.end60:                                         ; preds = %if.then52
  br label %if.end61, !dbg !4139

if.end61:                                         ; preds = %if.end60, %if.end47
  %73 = load %union.tree_node*, %union.tree_node** %control_name, align 8, !dbg !4140
  %cmp62 = icmp eq %union.tree_node* %73, null, !dbg !4140
  br i1 %cmp62, label %land.lhs.true, label %cond.true70, !dbg !4140

land.lhs.true:                                    ; preds = %if.end61
  %74 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !4140
  %ssa_name64 = bitcast %union.tree_node* %74 to %struct.tree_ssa_name*, !dbg !4140
  %var65 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name64, i32 0, i32 1, !dbg !4140
  %75 = load %union.tree_node*, %union.tree_node** %var65, align 8, !dbg !4140
  %76 = load %union.tree_node*, %union.tree_node** %control, align 8, !dbg !4140
  %ssa_name66 = bitcast %union.tree_node* %76 to %struct.tree_ssa_name*, !dbg !4140
  %var67 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name66, i32 0, i32 1, !dbg !4140
  %77 = load %union.tree_node*, %union.tree_node** %var67, align 8, !dbg !4140
  %cmp68 = icmp eq %union.tree_node* %75, %77, !dbg !4140
  br i1 %cmp68, label %cond.false71, label %cond.true70, !dbg !4140

cond.true70:                                      ; preds = %land.lhs.true, %if.end61
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 1379, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4140
  br label %cond.end72, !dbg !4140

cond.false71:                                     ; preds = %land.lhs.true
  br label %cond.end72, !dbg !4140

cond.end72:                                       ; preds = %cond.false71, %cond.true70
  %cond73 = phi i32 [ 0, %cond.true70 ], [ 0, %cond.false71 ], !dbg !4140
  %78 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !4141
  store %union.tree_node* %78, %union.tree_node** %control_name, align 8, !dbg !4142
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 0), !dbg !4143
  br label %for.cond36, !dbg !4144, !llvm.loop !4109

for.end74:                                        ; preds = %for.cond36
  %79 = load %union.tree_node*, %union.tree_node** %control_name, align 8, !dbg !4145
  %cmp75 = icmp ne %union.tree_node* %79, null, !dbg !4145
  br i1 %cmp75, label %cond.false78, label %cond.true77, !dbg !4145

cond.true77:                                      ; preds = %for.end74
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 1383, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4145
  br label %cond.end79, !dbg !4145

cond.false78:                                     ; preds = %for.end74
  br label %cond.end79, !dbg !4145

cond.end79:                                       ; preds = %cond.false78, %cond.true77
  %cond80 = phi i32 [ 0, %cond.true77 ], [ 0, %cond.false78 ], !dbg !4145
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !4146
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp81, %struct.basic_block_def* %80), !dbg !4147
  %81 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4147
  %82 = bitcast %struct.gimple_stmt_iterator* %tmp81 to i8*, !dbg !4147
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %81, i8* align 8 %82, i64 24, i1 false), !dbg !4147
  %83 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4148
  %src82 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %83, i32 0, i32 0, !dbg !4149
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %src82, align 8, !dbg !4149
  %call83 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %84), !dbg !4150
  store %union.gimple_statement_d* %call83, %union.gimple_statement_d** %cond_nit, align 8, !dbg !4151
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_nit, align 8, !dbg !4152
  %call84 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %85), !dbg !4153
  store %union.tree_node* %call84, %union.tree_node** %nit_1, align 8, !dbg !4154
  %86 = load %union.tree_node*, %union.tree_node** %control_name, align 8, !dbg !4155
  %common = bitcast %union.tree_node* %86 to %struct.tree_common*, !dbg !4155
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4155
  %87 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4155
  %88 = load %union.tree_node*, %union.tree_node** %nit_1, align 8, !dbg !4155
  %call85 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %87, %union.tree_node* %88), !dbg !4155
  %call86 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %call85, i8 zeroext 0, %union.tree_node* null, i8 zeroext 0, i32 1), !dbg !4156
  store %union.tree_node* %call86, %union.tree_node** %nit_1, align 8, !dbg !4157
  %89 = load %union.tree_node*, %union.tree_node** %control_name, align 8, !dbg !4158
  %90 = load %union.tree_node*, %union.tree_node** %nit_1, align 8, !dbg !4158
  %call87 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %89, %union.tree_node* %90), !dbg !4158
  store %union.gimple_statement_d* %call87, %union.gimple_statement_d** %stmt, align 8, !dbg !4159
  %91 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4160
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %91, i32 0), !dbg !4161
  %92 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4162
  %93 = load %union.tree_node*, %union.tree_node** %control_name, align 8, !dbg !4163
  %ssa_name88 = bitcast %union.tree_node* %93 to %struct.tree_ssa_name*, !dbg !4163
  %def_stmt89 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name88, i32 0, i32 2, !dbg !4163
  store %union.gimple_statement_d* %92, %union.gimple_statement_d** %def_stmt89, align 8, !dbg !4164
  ret void, !dbg !4165
}

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @initialize_reductions(i8** %slot, i8* %data) #0 !dbg !4166 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %init = alloca %union.tree_node*, align 8
  %c = alloca %union.tree_node*, align 8
  %bvar = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %e = alloca %struct.edge_def*, align 8
  %reduc = alloca %struct.reduction_info*, align 8
  %loop = alloca %struct.loop*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !4169, metadata !DIExpression()), !dbg !4170
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4171, metadata !DIExpression()), !dbg !4172
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !4173, metadata !DIExpression()), !dbg !4174
  call void @llvm.dbg.declare(metadata %union.tree_node** %c, metadata !4175, metadata !DIExpression()), !dbg !4176
  call void @llvm.dbg.declare(metadata %union.tree_node** %bvar, metadata !4177, metadata !DIExpression()), !dbg !4178
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4179, metadata !DIExpression()), !dbg !4180
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !4181, metadata !DIExpression()), !dbg !4182
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4183, metadata !DIExpression()), !dbg !4184
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %reduc, metadata !4185, metadata !DIExpression()), !dbg !4187
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !4188
  %1 = load i8*, i8** %0, align 8, !dbg !4189
  %2 = bitcast i8* %1 to %struct.reduction_info*, !dbg !4190
  store %struct.reduction_info* %2, %struct.reduction_info** %reduc, align 8, !dbg !4187
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4191, metadata !DIExpression()), !dbg !4192
  %3 = load i8*, i8** %data.addr, align 8, !dbg !4193
  %4 = bitcast i8* %3 to %struct.loop*, !dbg !4194
  store %struct.loop* %4, %struct.loop** %loop, align 8, !dbg !4192
  %5 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !4195
  %reduc_phi = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %5, i32 0, i32 1, !dbg !4195
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_phi, align 8, !dbg !4195
  %call = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %6), !dbg !4195
  %call1 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call), !dbg !4195
  %common = bitcast %union.tree_node* %call1 to %struct.tree_common*, !dbg !4195
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4195
  %7 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !4195
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !4196
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4197
  %call3 = call %union.tree_node* @create_tmp_var(%union.tree_node* %8, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i64 0, i64 0)), !dbg !4198
  store %union.tree_node* %call3, %union.tree_node** %bvar, align 8, !dbg !4199
  %9 = load %union.tree_node*, %union.tree_node** %bvar, align 8, !dbg !4200
  %call4 = call zeroext i8 @add_referenced_var(%union.tree_node* %9), !dbg !4201
  %10 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !4202
  %reduc_stmt = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %10, i32 0, i32 0, !dbg !4203
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt, align 8, !dbg !4203
  %call5 = call i32 @gimple_location(%union.gimple_statement_d* %11), !dbg !4204
  %call6 = call %union.tree_node* @build_omp_clause(i32 %call5, i32 5), !dbg !4205
  store %union.tree_node* %call6, %union.tree_node** %c, align 8, !dbg !4206
  %12 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !4207
  %reduction_code = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %12, i32 0, i32 2, !dbg !4208
  %13 = load i32, i32* %reduction_code, align 8, !dbg !4208
  %14 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !4209
  %omp_clause = bitcast %union.tree_node* %14 to %struct.tree_omp_clause*, !dbg !4209
  %subcode = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 3, !dbg !4209
  %reduction_code7 = bitcast %union.omp_clause_subcode* %subcode to i32*, !dbg !4209
  store i32 %13, i32* %reduction_code7, align 8, !dbg !4210
  %15 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !4211
  %reduc_stmt8 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %15, i32 0, i32 0, !dbg !4211
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt8, align 8, !dbg !4211
  %call9 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %16), !dbg !4211
  %ssa_name = bitcast %union.tree_node* %call9 to %struct.tree_ssa_name*, !dbg !4211
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4211
  %17 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4211
  %18 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !4212
  %omp_clause10 = bitcast %union.tree_node* %18 to %struct.tree_omp_clause*, !dbg !4212
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause10, i32 0, i32 6, !dbg !4212
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !4212
  store %union.tree_node* %17, %union.tree_node** %arrayidx, align 8, !dbg !4213
  %19 = load %union.tree_node*, %union.tree_node** %c, align 8, !dbg !4214
  %20 = load %union.tree_node*, %union.tree_node** %bvar, align 8, !dbg !4215
  %common11 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !4215
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !4215
  %21 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !4215
  %call13 = call %union.tree_node* @omp_reduction_init(%union.tree_node* %19, %union.tree_node* %21), !dbg !4216
  store %union.tree_node* %call13, %union.tree_node** %init, align 8, !dbg !4217
  %22 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !4218
  %23 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !4219
  %init14 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %23, i32 0, i32 6, !dbg !4220
  store %union.tree_node* %22, %union.tree_node** %init14, align 8, !dbg !4221
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4222
  %call15 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %24), !dbg !4223
  store %struct.edge_def* %call15, %struct.edge_def** %e, align 8, !dbg !4224
  %25 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !4225
  %reduc_phi16 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %25, i32 0, i32 1, !dbg !4225
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_phi16, align 8, !dbg !4225
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4225
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 6, !dbg !4225
  %28 = load i32, i32* %dest_idx, align 4, !dbg !4225
  %call17 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %26, i32 %28), !dbg !4225
  %call18 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call17), !dbg !4225
  store %union.tree_node* %call18, %union.tree_node** %arg, align 8, !dbg !4226
  %29 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !4227
  %reduc_phi19 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %29, i32 0, i32 1, !dbg !4227
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_phi19, align 8, !dbg !4227
  %31 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4227
  %call20 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %31), !dbg !4227
  %dest_idx21 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call20, i32 0, i32 6, !dbg !4227
  %32 = load i32, i32* %dest_idx21, align 4, !dbg !4227
  %call22 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %30, i32 %32), !dbg !4227
  %33 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !4227
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %call22, %union.tree_node* %33), !dbg !4227
  %34 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4228
  %35 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !4229
  %initial_value = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %35, i32 0, i32 4, !dbg !4230
  store %union.tree_node* %34, %union.tree_node** %initial_value, align 8, !dbg !4231
  ret i32 1, !dbg !4232
}

declare dso_local %struct.edge_def* @single_exit(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @eliminate_local_variables(%struct.edge_def* %entry1, %struct.edge_def* %exit) #0 !dbg !4233 {
entry:
  %entry.addr = alloca %struct.edge_def*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %body = alloca %struct.VEC_basic_block_heap*, align 8
  %i = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %decl_address = alloca %struct.htab*, align 8
  %entry_bb = alloca %struct.basic_block_def*, align 8
  %exit_bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.edge_def* %entry1, %struct.edge_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry.addr, metadata !4236, metadata !DIExpression()), !dbg !4237
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !4238, metadata !DIExpression()), !dbg !4239
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4240, metadata !DIExpression()), !dbg !4241
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %body, metadata !4242, metadata !DIExpression()), !dbg !4243
  %call = call %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 3), !dbg !4244
  store %struct.VEC_basic_block_heap* %call, %struct.VEC_basic_block_heap** %body, align 8, !dbg !4243
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4245, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4247, metadata !DIExpression()), !dbg !4248
  call void @llvm.dbg.declare(metadata %struct.htab** %decl_address, metadata !4249, metadata !DIExpression()), !dbg !4250
  %call2 = call %struct.htab* @htab_create(i64 10, i32 (i8*)* @int_tree_map_hash, i32 (i8*, i8*)* @int_tree_map_eq, void (i8*)* @free), !dbg !4251
  store %struct.htab* %call2, %struct.htab** %decl_address, align 8, !dbg !4250
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry_bb, metadata !4252, metadata !DIExpression()), !dbg !4253
  %0 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !4254
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !4255
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4255
  store %struct.basic_block_def* %1, %struct.basic_block_def** %entry_bb, align 8, !dbg !4253
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_bb, metadata !4256, metadata !DIExpression()), !dbg !4257
  %2 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !4258
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !4259
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4259
  store %struct.basic_block_def* %3, %struct.basic_block_def** %exit_bb, align 8, !dbg !4257
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !4260
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb, align 8, !dbg !4261
  call void @gather_blocks_in_sese_region(%struct.basic_block_def* %4, %struct.basic_block_def* %5, %struct.VEC_basic_block_heap** %body), !dbg !4262
  store i32 0, i32* %i, align 4, !dbg !4263
  br label %for.cond, !dbg !4265

for.cond:                                         ; preds = %for.inc11, %entry
  %6 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %body, align 8, !dbg !4266
  %tobool = icmp ne %struct.VEC_basic_block_heap* %6, null, !dbg !4266
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4266

cond.true:                                        ; preds = %for.cond
  %7 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %body, align 8, !dbg !4266
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %7, i32 0, i32 0, !dbg !4266
  br label %cond.end, !dbg !4266

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4266

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4266
  %8 = load i32, i32* %i, align 4, !dbg !4266
  %call3 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond, i32 %8, %struct.basic_block_def** %bb), !dbg !4266
  %tobool4 = icmp ne i32 %call3, 0, !dbg !4268
  br i1 %tobool4, label %for.body, label %for.end12, !dbg !4268

for.body:                                         ; preds = %cond.end
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4269
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !4271
  %cmp = icmp ne %struct.basic_block_def* %9, %10, !dbg !4272
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4273

land.lhs.true:                                    ; preds = %for.body
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4274
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb, align 8, !dbg !4275
  %cmp5 = icmp ne %struct.basic_block_def* %11, %12, !dbg !4276
  br i1 %cmp5, label %if.then, label %if.end, !dbg !4277

if.then:                                          ; preds = %land.lhs.true
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4278
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %13), !dbg !4280
  %14 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4280
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4280
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !4280
  br label %for.cond6, !dbg !4281

for.cond6:                                        ; preds = %for.inc, %if.then
  %call7 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4282
  %tobool8 = icmp ne i8 %call7, 0, !dbg !4284
  %lnot = xor i1 %tobool8, true, !dbg !4284
  br i1 %lnot, label %for.body9, label %for.end, !dbg !4285

for.body9:                                        ; preds = %for.cond6
  %16 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !4286
  %call10 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4287
  %17 = load %struct.htab*, %struct.htab** %decl_address, align 8, !dbg !4288
  call void @eliminate_local_variables_stmt(%struct.edge_def* %16, %union.gimple_statement_d* %call10, %struct.htab* %17), !dbg !4289
  br label %for.inc, !dbg !4289

for.inc:                                          ; preds = %for.body9
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4290
  br label %for.cond6, !dbg !4291, !llvm.loop !4292

for.end:                                          ; preds = %for.cond6
  br label %if.end, !dbg !4293

if.end:                                           ; preds = %for.end, %land.lhs.true, %for.body
  br label %for.inc11, !dbg !4275

for.inc11:                                        ; preds = %if.end
  %18 = load i32, i32* %i, align 4, !dbg !4294
  %inc = add i32 %18, 1, !dbg !4294
  store i32 %inc, i32* %i, align 4, !dbg !4294
  br label %for.cond, !dbg !4295, !llvm.loop !4296

for.end12:                                        ; preds = %cond.end
  %19 = load %struct.htab*, %struct.htab** %decl_address, align 8, !dbg !4298
  call void @htab_delete(%struct.htab* %19), !dbg !4299
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %body), !dbg !4300
  ret void, !dbg !4301
}

; Function Attrs: noinline nounwind uwtable
define internal void @separate_decls_in_region(%struct.edge_def* %entry1, %struct.edge_def* %exit, %struct.htab* %reduction_list, %union.tree_node** %arg_struct, %union.tree_node** %new_arg_struct, %struct.clsn_data* %ld_st_data) #0 !dbg !4302 {
entry:
  %entry.addr = alloca %struct.edge_def*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %reduction_list.addr = alloca %struct.htab*, align 8
  %arg_struct.addr = alloca %union.tree_node**, align 8
  %new_arg_struct.addr = alloca %union.tree_node**, align 8
  %ld_st_data.addr = alloca %struct.clsn_data*, align 8
  %bb1 = alloca %struct.basic_block_def*, align 8
  %bb0 = alloca %struct.basic_block_def*, align 8
  %name_copies = alloca %struct.htab*, align 8
  %decl_copies = alloca %struct.htab*, align 8
  %i = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %type_name = alloca %union.tree_node*, align 8
  %nvar = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %clsn_data = alloca %struct.clsn_data, align 8
  %body = alloca %struct.VEC_basic_block_heap*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %entry_bb = alloca %struct.basic_block_def*, align 8
  %exit_bb = alloca %struct.basic_block_def*, align 8
  %has_debug_stmt = alloca i8, align 1
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp15 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp46 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt52 = alloca %union.gimple_statement_d*, align 8
  store %struct.edge_def* %entry1, %struct.edge_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry.addr, metadata !4305, metadata !DIExpression()), !dbg !4306
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !4307, metadata !DIExpression()), !dbg !4308
  store %struct.htab* %reduction_list, %struct.htab** %reduction_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %reduction_list.addr, metadata !4309, metadata !DIExpression()), !dbg !4310
  store %union.tree_node** %arg_struct, %union.tree_node*** %arg_struct.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %arg_struct.addr, metadata !4311, metadata !DIExpression()), !dbg !4312
  store %union.tree_node** %new_arg_struct, %union.tree_node*** %new_arg_struct.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %new_arg_struct.addr, metadata !4313, metadata !DIExpression()), !dbg !4314
  store %struct.clsn_data* %ld_st_data, %struct.clsn_data** %ld_st_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.clsn_data** %ld_st_data.addr, metadata !4315, metadata !DIExpression()), !dbg !4316
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb1, metadata !4317, metadata !DIExpression()), !dbg !4318
  %0 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !4319
  %call = call %struct.basic_block_def* @split_edge(%struct.edge_def* %0), !dbg !4320
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bb1, align 8, !dbg !4318
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb0, metadata !4321, metadata !DIExpression()), !dbg !4322
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !4323
  %call2 = call %struct.basic_block_def* @single_pred(%struct.basic_block_def* %1), !dbg !4324
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %bb0, align 8, !dbg !4322
  call void @llvm.dbg.declare(metadata %struct.htab** %name_copies, metadata !4325, metadata !DIExpression()), !dbg !4326
  %call3 = call %struct.htab* @htab_create(i64 10, i32 (i8*)* @name_to_copy_elt_hash, i32 (i8*, i8*)* @name_to_copy_elt_eq, void (i8*)* @free), !dbg !4327
  store %struct.htab* %call3, %struct.htab** %name_copies, align 8, !dbg !4326
  call void @llvm.dbg.declare(metadata %struct.htab** %decl_copies, metadata !4328, metadata !DIExpression()), !dbg !4329
  %call4 = call %struct.htab* @htab_create(i64 10, i32 (i8*)* @int_tree_map_hash, i32 (i8*, i8*)* @int_tree_map_eq, void (i8*)* @free), !dbg !4330
  store %struct.htab* %call4, %struct.htab** %decl_copies, align 8, !dbg !4329
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4331, metadata !DIExpression()), !dbg !4332
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4333, metadata !DIExpression()), !dbg !4334
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_name, metadata !4335, metadata !DIExpression()), !dbg !4336
  call void @llvm.dbg.declare(metadata %union.tree_node** %nvar, metadata !4337, metadata !DIExpression()), !dbg !4338
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4339, metadata !DIExpression()), !dbg !4340
  call void @llvm.dbg.declare(metadata %struct.clsn_data* %clsn_data, metadata !4341, metadata !DIExpression()), !dbg !4342
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %body, metadata !4343, metadata !DIExpression()), !dbg !4344
  %call5 = call %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 3), !dbg !4345
  store %struct.VEC_basic_block_heap* %call5, %struct.VEC_basic_block_heap** %body, align 8, !dbg !4344
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4346, metadata !DIExpression()), !dbg !4347
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry_bb, metadata !4348, metadata !DIExpression()), !dbg !4349
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !4350
  store %struct.basic_block_def* %2, %struct.basic_block_def** %entry_bb, align 8, !dbg !4349
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_bb, metadata !4351, metadata !DIExpression()), !dbg !4352
  %3 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !4353
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 1, !dbg !4354
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4354
  store %struct.basic_block_def* %4, %struct.basic_block_def** %exit_bb, align 8, !dbg !4352
  call void @llvm.dbg.declare(metadata i8* %has_debug_stmt, metadata !4355, metadata !DIExpression()), !dbg !4356
  store i8 0, i8* %has_debug_stmt, align 1, !dbg !4356
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !4357
  %call6 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %5), !dbg !4358
  store %struct.edge_def* %call6, %struct.edge_def** %entry.addr, align 8, !dbg !4359
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !4360
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb, align 8, !dbg !4361
  call void @gather_blocks_in_sese_region(%struct.basic_block_def* %6, %struct.basic_block_def* %7, %struct.VEC_basic_block_heap** %body), !dbg !4362
  store i32 0, i32* %i, align 4, !dbg !4363
  br label %for.cond, !dbg !4365

for.cond:                                         ; preds = %for.inc28, %entry
  %8 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %body, align 8, !dbg !4366
  %tobool = icmp ne %struct.VEC_basic_block_heap* %8, null, !dbg !4366
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4366

cond.true:                                        ; preds = %for.cond
  %9 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %body, align 8, !dbg !4366
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %9, i32 0, i32 0, !dbg !4366
  br label %cond.end, !dbg !4366

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4366

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4366
  %10 = load i32, i32* %i, align 4, !dbg !4366
  %call7 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond, i32 %10, %struct.basic_block_def** %bb), !dbg !4366
  %tobool8 = icmp ne i32 %call7, 0, !dbg !4368
  br i1 %tobool8, label %for.body, label %for.end29, !dbg !4368

for.body:                                         ; preds = %cond.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4369
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !4372
  %cmp = icmp ne %struct.basic_block_def* %11, %12, !dbg !4373
  br i1 %cmp, label %land.lhs.true, label %if.end27, !dbg !4374

land.lhs.true:                                    ; preds = %for.body
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4375
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb, align 8, !dbg !4376
  %cmp9 = icmp ne %struct.basic_block_def* %13, %14, !dbg !4377
  br i1 %cmp9, label %if.then, label %if.end27, !dbg !4378

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4379
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %15), !dbg !4382
  %16 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4382
  %17 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4382
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 24, i1 false), !dbg !4382
  br label %for.cond10, !dbg !4383

for.cond10:                                       ; preds = %for.inc, %if.then
  %call11 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4384
  %tobool12 = icmp ne i8 %call11, 0, !dbg !4386
  %lnot = xor i1 %tobool12, true, !dbg !4386
  br i1 %lnot, label %for.body13, label %for.end, !dbg !4387

for.body13:                                       ; preds = %for.cond10
  %18 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !4388
  %19 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !4389
  %call14 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4390
  %20 = load %struct.htab*, %struct.htab** %name_copies, align 8, !dbg !4391
  %21 = load %struct.htab*, %struct.htab** %decl_copies, align 8, !dbg !4392
  call void @separate_decls_in_region_stmt(%struct.edge_def* %18, %struct.edge_def* %19, %union.gimple_statement_d* %call14, %struct.htab* %20, %struct.htab* %21), !dbg !4393
  br label %for.inc, !dbg !4393

for.inc:                                          ; preds = %for.body13
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4394
  br label %for.cond10, !dbg !4395, !llvm.loop !4396

for.end:                                          ; preds = %for.cond10
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4398
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp15, %struct.basic_block_def* %22), !dbg !4400
  %23 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4400
  %24 = bitcast %struct.gimple_stmt_iterator* %tmp15 to i8*, !dbg !4400
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 24, i1 false), !dbg !4400
  br label %for.cond16, !dbg !4401

for.cond16:                                       ; preds = %for.inc25, %for.end
  %call17 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4402
  %tobool18 = icmp ne i8 %call17, 0, !dbg !4404
  %lnot19 = xor i1 %tobool18, true, !dbg !4404
  br i1 %lnot19, label %for.body20, label %for.end26, !dbg !4405

for.body20:                                       ; preds = %for.cond16
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4406, metadata !DIExpression()), !dbg !4408
  %call21 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4409
  store %union.gimple_statement_d* %call21, %union.gimple_statement_d** %stmt, align 8, !dbg !4408
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4410
  %call22 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %25), !dbg !4412
  %tobool23 = icmp ne i8 %call22, 0, !dbg !4412
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !4413

if.then24:                                        ; preds = %for.body20
  store i8 1, i8* %has_debug_stmt, align 1, !dbg !4414
  br label %if.end, !dbg !4415

if.else:                                          ; preds = %for.body20
  %26 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !4416
  %27 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !4417
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4418
  %29 = load %struct.htab*, %struct.htab** %name_copies, align 8, !dbg !4419
  %30 = load %struct.htab*, %struct.htab** %decl_copies, align 8, !dbg !4420
  call void @separate_decls_in_region_stmt(%struct.edge_def* %26, %struct.edge_def* %27, %union.gimple_statement_d* %28, %struct.htab* %29, %struct.htab* %30), !dbg !4421
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then24
  br label %for.inc25, !dbg !4422

for.inc25:                                        ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4423
  br label %for.cond16, !dbg !4424, !llvm.loop !4425

for.end26:                                        ; preds = %for.cond16
  br label %if.end27, !dbg !4427

if.end27:                                         ; preds = %for.end26, %land.lhs.true, %for.body
  br label %for.inc28, !dbg !4428

for.inc28:                                        ; preds = %if.end27
  %31 = load i32, i32* %i, align 4, !dbg !4429
  %inc = add i32 %31, 1, !dbg !4429
  store i32 %inc, i32* %i, align 4, !dbg !4429
  br label %for.cond, !dbg !4430, !llvm.loop !4431

for.end29:                                        ; preds = %cond.end
  %32 = load i8, i8* %has_debug_stmt, align 1, !dbg !4433
  %tobool30 = icmp ne i8 %32, 0, !dbg !4433
  br i1 %tobool30, label %if.then31, label %if.end67, !dbg !4435

if.then31:                                        ; preds = %for.end29
  store i32 0, i32* %i, align 4, !dbg !4436
  br label %for.cond32, !dbg !4438

for.cond32:                                       ; preds = %for.inc64, %if.then31
  %33 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %body, align 8, !dbg !4439
  %tobool33 = icmp ne %struct.VEC_basic_block_heap* %33, null, !dbg !4439
  br i1 %tobool33, label %cond.true34, label %cond.false36, !dbg !4439

cond.true34:                                      ; preds = %for.cond32
  %34 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %body, align 8, !dbg !4439
  %base35 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %34, i32 0, i32 0, !dbg !4439
  br label %cond.end37, !dbg !4439

cond.false36:                                     ; preds = %for.cond32
  br label %cond.end37, !dbg !4439

cond.end37:                                       ; preds = %cond.false36, %cond.true34
  %cond38 = phi %struct.VEC_basic_block_base* [ %base35, %cond.true34 ], [ null, %cond.false36 ], !dbg !4439
  %35 = load i32, i32* %i, align 4, !dbg !4439
  %call39 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond38, i32 %35, %struct.basic_block_def** %bb), !dbg !4439
  %tobool40 = icmp ne i32 %call39, 0, !dbg !4441
  br i1 %tobool40, label %for.body41, label %for.end66, !dbg !4441

for.body41:                                       ; preds = %cond.end37
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4442
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !4444
  %cmp42 = icmp ne %struct.basic_block_def* %36, %37, !dbg !4445
  br i1 %cmp42, label %land.lhs.true43, label %if.end63, !dbg !4446

land.lhs.true43:                                  ; preds = %for.body41
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4447
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb, align 8, !dbg !4448
  %cmp44 = icmp ne %struct.basic_block_def* %38, %39, !dbg !4449
  br i1 %cmp44, label %if.then45, label %if.end63, !dbg !4450

if.then45:                                        ; preds = %land.lhs.true43
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4451
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp46, %struct.basic_block_def* %40), !dbg !4454
  %41 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4454
  %42 = bitcast %struct.gimple_stmt_iterator* %tmp46 to i8*, !dbg !4454
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 24, i1 false), !dbg !4454
  br label %for.cond47, !dbg !4455

for.cond47:                                       ; preds = %if.end61, %if.then59, %if.then45
  %call48 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4456
  %tobool49 = icmp ne i8 %call48, 0, !dbg !4458
  %lnot50 = xor i1 %tobool49, true, !dbg !4458
  br i1 %lnot50, label %for.body51, label %for.end62, !dbg !4459

for.body51:                                       ; preds = %for.cond47
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt52, metadata !4460, metadata !DIExpression()), !dbg !4462
  %call53 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4463
  store %union.gimple_statement_d* %call53, %union.gimple_statement_d** %stmt52, align 8, !dbg !4462
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt52, align 8, !dbg !4464
  %call54 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %43), !dbg !4466
  %tobool55 = icmp ne i8 %call54, 0, !dbg !4466
  br i1 %tobool55, label %if.then56, label %if.end61, !dbg !4467

if.then56:                                        ; preds = %for.body51
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt52, align 8, !dbg !4468
  %45 = load %struct.htab*, %struct.htab** %name_copies, align 8, !dbg !4471
  %46 = load %struct.htab*, %struct.htab** %decl_copies, align 8, !dbg !4472
  %call57 = call zeroext i8 @separate_decls_in_region_debug_bind(%union.gimple_statement_d* %44, %struct.htab* %45, %struct.htab* %46), !dbg !4473
  %tobool58 = icmp ne i8 %call57, 0, !dbg !4473
  br i1 %tobool58, label %if.then59, label %if.end60, !dbg !4474

if.then59:                                        ; preds = %if.then56
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !4475
  br label %for.cond47, !dbg !4477, !llvm.loop !4478

if.end60:                                         ; preds = %if.then56
  br label %if.end61, !dbg !4480

if.end61:                                         ; preds = %if.end60, %for.body51
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4481
  br label %for.cond47, !dbg !4482, !llvm.loop !4478

for.end62:                                        ; preds = %for.cond47
  br label %if.end63, !dbg !4483

if.end63:                                         ; preds = %for.end62, %land.lhs.true43, %for.body41
  br label %for.inc64, !dbg !4448

for.inc64:                                        ; preds = %if.end63
  %47 = load i32, i32* %i, align 4, !dbg !4484
  %inc65 = add i32 %47, 1, !dbg !4484
  store i32 %inc65, i32* %i, align 4, !dbg !4484
  br label %for.cond32, !dbg !4485, !llvm.loop !4486

for.end66:                                        ; preds = %cond.end37
  br label %if.end67, !dbg !4487

if.end67:                                         ; preds = %for.end66, %for.end29
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %body), !dbg !4488
  %48 = load %struct.htab*, %struct.htab** %name_copies, align 8, !dbg !4489
  %call68 = call i64 @htab_elements(%struct.htab* %48), !dbg !4491
  %cmp69 = icmp eq i64 %call68, 0, !dbg !4492
  br i1 %cmp69, label %land.lhs.true70, label %if.else74, !dbg !4493

land.lhs.true70:                                  ; preds = %if.end67
  %49 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4494
  %call71 = call i64 @htab_elements(%struct.htab* %49), !dbg !4495
  %cmp72 = icmp eq i64 %call71, 0, !dbg !4496
  br i1 %cmp72, label %if.then73, label %if.else74, !dbg !4497

if.then73:                                        ; preds = %land.lhs.true70
  %50 = load %union.tree_node**, %union.tree_node*** %arg_struct.addr, align 8, !dbg !4498
  store %union.tree_node* null, %union.tree_node** %50, align 8, !dbg !4500
  %51 = load %union.tree_node**, %union.tree_node*** %new_arg_struct.addr, align 8, !dbg !4501
  store %union.tree_node* null, %union.tree_node** %51, align 8, !dbg !4502
  br label %if.end103, !dbg !4503

if.else74:                                        ; preds = %land.lhs.true70, %if.end67
  %52 = load %union.tree_node* (i32)*, %union.tree_node* (i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 0), align 8, !dbg !4504
  %call75 = call %union.tree_node* %52(i32 16), !dbg !4506
  store %union.tree_node* %call75, %union.tree_node** %type, align 8, !dbg !4507
  %call76 = call %union.tree_node* @create_tmp_var_name(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0)), !dbg !4508
  %53 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4508
  %call77 = call %union.tree_node* @build_decl_stat(i32 1, i32 35, %union.tree_node* %call76, %union.tree_node* %53), !dbg !4508
  store %union.tree_node* %call77, %union.tree_node** %type_name, align 8, !dbg !4509
  %54 = load %union.tree_node*, %union.tree_node** %type_name, align 8, !dbg !4510
  %55 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4511
  %type78 = bitcast %union.tree_node* %55 to %struct.tree_type*, !dbg !4511
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type78, i32 0, i32 12, !dbg !4511
  store %union.tree_node* %54, %union.tree_node** %name, align 8, !dbg !4512
  %56 = load %struct.htab*, %struct.htab** %name_copies, align 8, !dbg !4513
  %57 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4514
  %58 = bitcast %union.tree_node* %57 to i8*, !dbg !4514
  call void @htab_traverse(%struct.htab* %56, i32 (i8**, i8*)* @add_field_for_name, i8* %58), !dbg !4515
  %59 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4516
  %tobool79 = icmp ne %struct.htab* %59, null, !dbg !4516
  br i1 %tobool79, label %land.lhs.true80, label %if.end84, !dbg !4518

land.lhs.true80:                                  ; preds = %if.else74
  %60 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4519
  %call81 = call i64 @htab_elements(%struct.htab* %60), !dbg !4520
  %cmp82 = icmp ugt i64 %call81, 0, !dbg !4521
  br i1 %cmp82, label %if.then83, label %if.end84, !dbg !4522

if.then83:                                        ; preds = %land.lhs.true80
  %61 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4523
  %62 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4525
  %63 = bitcast %union.tree_node* %62 to i8*, !dbg !4525
  call void @htab_traverse(%struct.htab* %61, i32 (i8**, i8*)* @add_field_for_reduction, i8* %63), !dbg !4526
  br label %if.end84, !dbg !4527

if.end84:                                         ; preds = %if.then83, %land.lhs.true80, %if.else74
  %64 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4528
  call void @layout_type(%union.tree_node* %64), !dbg !4529
  %65 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4530
  %call85 = call %union.tree_node* @create_tmp_var(%union.tree_node* %65, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.30, i64 0, i64 0)), !dbg !4531
  %66 = load %union.tree_node**, %union.tree_node*** %arg_struct.addr, align 8, !dbg !4532
  store %union.tree_node* %call85, %union.tree_node** %66, align 8, !dbg !4533
  %67 = load %union.tree_node**, %union.tree_node*** %arg_struct.addr, align 8, !dbg !4534
  %68 = load %union.tree_node*, %union.tree_node** %67, align 8, !dbg !4535
  %call86 = call zeroext i8 @add_referenced_var(%union.tree_node* %68), !dbg !4536
  %69 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4537
  %call87 = call %union.tree_node* @build_pointer_type(%union.tree_node* %69), !dbg !4538
  %call88 = call %union.tree_node* @create_tmp_var(%union.tree_node* %call87, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.31, i64 0, i64 0)), !dbg !4539
  store %union.tree_node* %call88, %union.tree_node** %nvar, align 8, !dbg !4540
  %70 = load %union.tree_node*, %union.tree_node** %nvar, align 8, !dbg !4541
  %call89 = call zeroext i8 @add_referenced_var(%union.tree_node* %70), !dbg !4542
  %71 = load %union.tree_node*, %union.tree_node** %nvar, align 8, !dbg !4543
  %call90 = call %union.tree_node* @make_ssa_name(%union.tree_node* %71, %union.gimple_statement_d* null), !dbg !4544
  %72 = load %union.tree_node**, %union.tree_node*** %new_arg_struct.addr, align 8, !dbg !4545
  store %union.tree_node* %call90, %union.tree_node** %72, align 8, !dbg !4546
  %73 = load %union.tree_node**, %union.tree_node*** %arg_struct.addr, align 8, !dbg !4547
  %74 = load %union.tree_node*, %union.tree_node** %73, align 8, !dbg !4548
  %75 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !4549
  %store = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %75, i32 0, i32 0, !dbg !4550
  store %union.tree_node* %74, %union.tree_node** %store, align 8, !dbg !4551
  %76 = load %union.tree_node**, %union.tree_node*** %new_arg_struct.addr, align 8, !dbg !4552
  %77 = load %union.tree_node*, %union.tree_node** %76, align 8, !dbg !4553
  %78 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !4554
  %load = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %78, i32 0, i32 1, !dbg !4555
  store %union.tree_node* %77, %union.tree_node** %load, align 8, !dbg !4556
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %bb0, align 8, !dbg !4557
  %80 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !4558
  %store_bb = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %80, i32 0, i32 2, !dbg !4559
  store %struct.basic_block_def* %79, %struct.basic_block_def** %store_bb, align 8, !dbg !4560
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !4561
  %82 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !4562
  %load_bb = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %82, i32 0, i32 3, !dbg !4563
  store %struct.basic_block_def* %81, %struct.basic_block_def** %load_bb, align 8, !dbg !4564
  %83 = load %struct.htab*, %struct.htab** %name_copies, align 8, !dbg !4565
  %84 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !4566
  %85 = bitcast %struct.clsn_data* %84 to i8*, !dbg !4566
  call void @htab_traverse(%struct.htab* %83, i32 (i8**, i8*)* @create_loads_and_stores_for_name, i8* %85), !dbg !4567
  %86 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4568
  %tobool91 = icmp ne %struct.htab* %86, null, !dbg !4568
  br i1 %tobool91, label %land.lhs.true92, label %if.end102, !dbg !4570

land.lhs.true92:                                  ; preds = %if.end84
  %87 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4571
  %call93 = call i64 @htab_elements(%struct.htab* %87), !dbg !4572
  %cmp94 = icmp ugt i64 %call93, 0, !dbg !4573
  br i1 %cmp94, label %if.then95, label %if.end102, !dbg !4574

if.then95:                                        ; preds = %land.lhs.true92
  %88 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4575
  %89 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !4577
  %90 = bitcast %struct.clsn_data* %89 to i8*, !dbg !4577
  call void @htab_traverse(%struct.htab* %88, i32 (i8**, i8*)* @create_stores_for_reduction, i8* %90), !dbg !4578
  %91 = load %union.tree_node*, %union.tree_node** %nvar, align 8, !dbg !4579
  %call96 = call %union.tree_node* @make_ssa_name(%union.tree_node* %91, %union.gimple_statement_d* null), !dbg !4580
  %load97 = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %clsn_data, i32 0, i32 1, !dbg !4581
  store %union.tree_node* %call96, %union.tree_node** %load97, align 8, !dbg !4582
  %92 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !4583
  %dest98 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %92, i32 0, i32 1, !dbg !4584
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %dest98, align 8, !dbg !4584
  %load_bb99 = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %clsn_data, i32 0, i32 3, !dbg !4585
  store %struct.basic_block_def* %93, %struct.basic_block_def** %load_bb99, align 8, !dbg !4586
  %94 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !4587
  %store100 = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %94, i32 0, i32 0, !dbg !4588
  %95 = load %union.tree_node*, %union.tree_node** %store100, align 8, !dbg !4588
  %store101 = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %clsn_data, i32 0, i32 0, !dbg !4589
  store %union.tree_node* %95, %union.tree_node** %store101, align 8, !dbg !4590
  %96 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4591
  call void @create_final_loads_for_reduction(%struct.htab* %96, %struct.clsn_data* %clsn_data), !dbg !4592
  br label %if.end102, !dbg !4593

if.end102:                                        ; preds = %if.then95, %land.lhs.true92, %if.end84
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then73
  %97 = load %struct.htab*, %struct.htab** %decl_copies, align 8, !dbg !4594
  call void @htab_delete(%struct.htab* %97), !dbg !4595
  %98 = load %struct.htab*, %struct.htab** %name_copies, align 8, !dbg !4596
  call void @htab_delete(%struct.htab* %98), !dbg !4597
  ret void, !dbg !4598
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @create_parallel_loop(%struct.loop* %loop, %union.tree_node* %loop_fn, %union.tree_node* %data, %union.tree_node* %new_data, i32 %n_threads) #0 !dbg !4599 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %loop_fn.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca %union.tree_node*, align 8
  %new_data.addr = alloca %union.tree_node*, align 8
  %n_threads.addr = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %paral_bb = alloca %struct.basic_block_def*, align 8
  %for_bb = alloca %struct.basic_block_def*, align 8
  %ex_bb = alloca %struct.basic_block_def*, align 8
  %t = alloca %union.tree_node*, align 8
  %param = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %for_stmt = alloca %union.gimple_statement_d*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %cond_stmt = alloca %union.gimple_statement_d*, align 8
  %cvar = alloca %union.tree_node*, align 8
  %cvar_init = alloca %union.tree_node*, align 8
  %initvar = alloca %union.tree_node*, align 8
  %cvar_next = alloca %union.tree_node*, align 8
  %cvar_base = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %exit = alloca %struct.edge_def*, align 8
  %nexit = alloca %struct.edge_def*, align 8
  %guard = alloca %struct.edge_def*, align 8
  %end = alloca %struct.edge_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp5 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp16 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp38 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp65 = alloca %struct.gimple_stmt_iterator, align 8
  %locus = alloca i32, align 4
  %def = alloca %union.tree_node*, align 8
  %tmp96 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp99 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp104 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4602, metadata !DIExpression()), !dbg !4603
  store %union.tree_node* %loop_fn, %union.tree_node** %loop_fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %loop_fn.addr, metadata !4604, metadata !DIExpression()), !dbg !4605
  store %union.tree_node* %data, %union.tree_node** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %data.addr, metadata !4606, metadata !DIExpression()), !dbg !4607
  store %union.tree_node* %new_data, %union.tree_node** %new_data.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_data.addr, metadata !4608, metadata !DIExpression()), !dbg !4609
  store i32 %n_threads, i32* %n_threads.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_threads.addr, metadata !4610, metadata !DIExpression()), !dbg !4611
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4612, metadata !DIExpression()), !dbg !4613
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4614, metadata !DIExpression()), !dbg !4615
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %paral_bb, metadata !4616, metadata !DIExpression()), !dbg !4617
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %for_bb, metadata !4618, metadata !DIExpression()), !dbg !4619
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ex_bb, metadata !4620, metadata !DIExpression()), !dbg !4621
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4622, metadata !DIExpression()), !dbg !4623
  call void @llvm.dbg.declare(metadata %union.tree_node** %param, metadata !4624, metadata !DIExpression()), !dbg !4625
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4626, metadata !DIExpression()), !dbg !4627
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %for_stmt, metadata !4628, metadata !DIExpression()), !dbg !4629
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4630, metadata !DIExpression()), !dbg !4631
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt, metadata !4632, metadata !DIExpression()), !dbg !4633
  call void @llvm.dbg.declare(metadata %union.tree_node** %cvar, metadata !4634, metadata !DIExpression()), !dbg !4635
  call void @llvm.dbg.declare(metadata %union.tree_node** %cvar_init, metadata !4636, metadata !DIExpression()), !dbg !4637
  call void @llvm.dbg.declare(metadata %union.tree_node** %initvar, metadata !4638, metadata !DIExpression()), !dbg !4639
  call void @llvm.dbg.declare(metadata %union.tree_node** %cvar_next, metadata !4640, metadata !DIExpression()), !dbg !4641
  call void @llvm.dbg.declare(metadata %union.tree_node** %cvar_base, metadata !4642, metadata !DIExpression()), !dbg !4643
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4644, metadata !DIExpression()), !dbg !4645
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !4646, metadata !DIExpression()), !dbg !4647
  call void @llvm.dbg.declare(metadata %struct.edge_def** %nexit, metadata !4648, metadata !DIExpression()), !dbg !4649
  call void @llvm.dbg.declare(metadata %struct.edge_def** %guard, metadata !4650, metadata !DIExpression()), !dbg !4651
  call void @llvm.dbg.declare(metadata %struct.edge_def** %end, metadata !4652, metadata !DIExpression()), !dbg !4653
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4654, metadata !DIExpression()), !dbg !4655
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4656
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %0), !dbg !4657
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 0, !dbg !4658
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4658
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb, align 8, !dbg !4659
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4660
  %call1 = call %struct.basic_block_def* @single_pred(%struct.basic_block_def* %2), !dbg !4661
  store %struct.basic_block_def* %call1, %struct.basic_block_def** %paral_bb, align 8, !dbg !4662
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %paral_bb, align 8, !dbg !4663
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %3), !dbg !4664
  %4 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4664
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4664
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !4664
  %call2 = call %union.tree_node* @build_omp_clause(i32 1, i32 9), !dbg !4665
  store %union.tree_node* %call2, %union.tree_node** %t, align 8, !dbg !4666
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !4667
  %7 = load i32, i32* %n_threads.addr, align 4, !dbg !4668
  %conv = zext i32 %7 to i64, !dbg !4668
  %call3 = call %union.tree_node* @build_int_cst(%union.tree_node* %6, i64 %conv), !dbg !4669
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4670
  %omp_clause = bitcast %union.tree_node* %8 to %struct.tree_omp_clause*, !dbg !4670
  %ops = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause, i32 0, i32 6, !dbg !4670
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %ops, i64 0, i64 0, !dbg !4670
  store %union.tree_node* %call3, %union.tree_node** %arrayidx, align 8, !dbg !4671
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4672
  %10 = load %union.tree_node*, %union.tree_node** %loop_fn.addr, align 8, !dbg !4673
  %11 = load %union.tree_node*, %union.tree_node** %data.addr, align 8, !dbg !4674
  %call4 = call %union.gimple_statement_d* @gimple_build_omp_parallel(%struct.gimple_seq_d* null, %union.tree_node* %9, %union.tree_node* %10, %union.tree_node* %11), !dbg !4675
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %stmt, align 8, !dbg !4676
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4677
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %12, i32 0), !dbg !4678
  %13 = load %union.tree_node*, %union.tree_node** %data.addr, align 8, !dbg !4679
  %tobool = icmp ne %union.tree_node* %13, null, !dbg !4679
  br i1 %tobool, label %if.then, label %if.end, !dbg !4681

if.then:                                          ; preds = %entry
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4682
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp5, %struct.basic_block_def* %14), !dbg !4684
  %15 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4684
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp5 to i8*, !dbg !4684
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !4684
  %17 = load %union.tree_node*, %union.tree_node** %loop_fn.addr, align 8, !dbg !4685
  %decl_non_common = bitcast %union.tree_node* %17 to %struct.tree_decl_non_common*, !dbg !4685
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !4685
  %18 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !4685
  %call6 = call %union.tree_node* @make_ssa_name(%union.tree_node* %18, %union.gimple_statement_d* null), !dbg !4686
  store %union.tree_node* %call6, %union.tree_node** %param, align 8, !dbg !4687
  %19 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !4688
  %20 = load %union.tree_node*, %union.tree_node** %data.addr, align 8, !dbg !4688
  %call7 = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %20), !dbg !4688
  %call8 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %19, %union.tree_node* %call7), !dbg !4688
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %stmt, align 8, !dbg !4689
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4690
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %21, i32 1), !dbg !4691
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4692
  %23 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !4693
  %ssa_name = bitcast %union.tree_node* %23 to %struct.tree_ssa_name*, !dbg !4693
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4693
  store %union.gimple_statement_d* %22, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4694
  %24 = load %union.tree_node*, %union.tree_node** %new_data.addr, align 8, !dbg !4695
  %25 = load %union.tree_node*, %union.tree_node** %new_data.addr, align 8, !dbg !4695
  %common = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !4695
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4695
  %26 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !4695
  %27 = load %union.tree_node*, %union.tree_node** %param, align 8, !dbg !4695
  %call10 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %26, %union.tree_node* %27), !dbg !4695
  %call11 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %24, %union.tree_node* %call10), !dbg !4695
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %stmt, align 8, !dbg !4696
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4697
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %28, i32 1), !dbg !4698
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4699
  %30 = load %union.tree_node*, %union.tree_node** %new_data.addr, align 8, !dbg !4700
  %ssa_name12 = bitcast %union.tree_node* %30 to %struct.tree_ssa_name*, !dbg !4700
  %def_stmt13 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name12, i32 0, i32 2, !dbg !4700
  store %union.gimple_statement_d* %29, %union.gimple_statement_d** %def_stmt13, align 8, !dbg !4701
  br label %if.end, !dbg !4702

if.end:                                           ; preds = %if.then, %entry
  %31 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4703
  %call14 = call %struct.edge_def* @single_dom_exit(%struct.loop* %31), !dbg !4704
  %call15 = call %struct.basic_block_def* @split_loop_exit_edge(%struct.edge_def* %call14), !dbg !4705
  store %struct.basic_block_def* %call15, %struct.basic_block_def** %bb, align 8, !dbg !4706
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4707
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp16, %struct.basic_block_def* %32), !dbg !4708
  %33 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4708
  %34 = bitcast %struct.gimple_stmt_iterator* %tmp16 to i8*, !dbg !4708
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 24, i1 false), !dbg !4708
  %call17 = call %union.gimple_statement_d* @gimple_build_omp_return(i8 zeroext 0), !dbg !4709
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %call17, i32 0), !dbg !4710
  %35 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4711
  %header = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 2, !dbg !4711
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4711
  %37 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4711
  %call18 = call %struct.edge_def* @single_dom_exit(%struct.loop* %37), !dbg !4711
  %src19 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call18, i32 0, i32 0, !dbg !4711
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %src19, align 8, !dbg !4711
  %cmp = icmp eq %struct.basic_block_def* %36, %38, !dbg !4711
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4711

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 1449, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4711
  br label %cond.end, !dbg !4711

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4711

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4711
  %39 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4712
  %header21 = getelementptr inbounds %struct.loop, %struct.loop* %39, i32 0, i32 2, !dbg !4713
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %header21, align 8, !dbg !4713
  %call22 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %40), !dbg !4714
  store %union.gimple_statement_d* %call22, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !4715
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !4716
  %call23 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %41), !dbg !4717
  store %union.tree_node* %call23, %union.tree_node** %cvar, align 8, !dbg !4718
  %42 = load %union.tree_node*, %union.tree_node** %cvar, align 8, !dbg !4719
  %ssa_name24 = bitcast %union.tree_node* %42 to %struct.tree_ssa_name*, !dbg !4719
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name24, i32 0, i32 1, !dbg !4719
  %43 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4719
  store %union.tree_node* %43, %union.tree_node** %cvar_base, align 8, !dbg !4720
  %44 = load %union.tree_node*, %union.tree_node** %cvar, align 8, !dbg !4721
  %ssa_name25 = bitcast %union.tree_node* %44 to %struct.tree_ssa_name*, !dbg !4721
  %def_stmt26 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name25, i32 0, i32 2, !dbg !4721
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt26, align 8, !dbg !4721
  store %union.gimple_statement_d* %45, %union.gimple_statement_d** %phi, align 8, !dbg !4722
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4723
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4723
  %call27 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %47), !dbg !4723
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call27, i32 0, i32 6, !dbg !4723
  %48 = load i32, i32* %dest_idx, align 4, !dbg !4723
  %call28 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %46, i32 %48), !dbg !4723
  %call29 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call28), !dbg !4723
  store %union.tree_node* %call29, %union.tree_node** %cvar_init, align 8, !dbg !4724
  %49 = load %union.tree_node*, %union.tree_node** %cvar_base, align 8, !dbg !4725
  %call30 = call %union.tree_node* @make_ssa_name(%union.tree_node* %49, %union.gimple_statement_d* null), !dbg !4726
  store %union.tree_node* %call30, %union.tree_node** %initvar, align 8, !dbg !4727
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4728
  %51 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4728
  %call31 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %51), !dbg !4728
  %dest_idx32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call31, i32 0, i32 6, !dbg !4728
  %52 = load i32, i32* %dest_idx32, align 4, !dbg !4728
  %call33 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %50, i32 %52), !dbg !4728
  %53 = load %union.tree_node*, %union.tree_node** %initvar, align 8, !dbg !4728
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %call33, %union.tree_node* %53), !dbg !4728
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4729
  %55 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4729
  %call34 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %55), !dbg !4729
  %dest_idx35 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call34, i32 0, i32 6, !dbg !4729
  %56 = load i32, i32* %dest_idx35, align 4, !dbg !4729
  %call36 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %54, i32 %56), !dbg !4729
  %call37 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call36), !dbg !4729
  store %union.tree_node* %call37, %union.tree_node** %cvar_next, align 8, !dbg !4730
  %57 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4731
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %57, i32 0, i32 3, !dbg !4732
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4732
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp38, %struct.basic_block_def* %58), !dbg !4733
  %59 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4733
  %60 = bitcast %struct.gimple_stmt_iterator* %tmp38 to i8*, !dbg !4733
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false), !dbg !4733
  %call39 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4734
  %61 = load %union.tree_node*, %union.tree_node** %cvar_next, align 8, !dbg !4734
  %ssa_name40 = bitcast %union.tree_node* %61 to %struct.tree_ssa_name*, !dbg !4734
  %def_stmt41 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name40, i32 0, i32 2, !dbg !4734
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt41, align 8, !dbg !4734
  %cmp42 = icmp eq %union.gimple_statement_d* %call39, %62, !dbg !4734
  br i1 %cmp42, label %cond.false45, label %cond.true44, !dbg !4734

cond.true44:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 1462, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4734
  br label %cond.end46, !dbg !4734

cond.false45:                                     ; preds = %cond.end
  br label %cond.end46, !dbg !4734

cond.end46:                                       ; preds = %cond.false45, %cond.true44
  %cond47 = phi i32 [ 0, %cond.true44 ], [ 0, %cond.false45 ], !dbg !4734
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !4735
  %63 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4736
  %call48 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %63), !dbg !4737
  %call49 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call48), !dbg !4738
  store %struct.basic_block_def* %call49, %struct.basic_block_def** %for_bb, align 8, !dbg !4739
  %64 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4740
  %call50 = call %struct.edge_def* @single_dom_exit(%struct.loop* %64), !dbg !4741
  %call51 = call %struct.basic_block_def* @split_loop_exit_edge(%struct.edge_def* %call50), !dbg !4742
  store %struct.basic_block_def* %call51, %struct.basic_block_def** %ex_bb, align 8, !dbg !4743
  %65 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4744
  %header52 = getelementptr inbounds %struct.loop, %struct.loop* %65, i32 0, i32 2, !dbg !4745
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %header52, align 8, !dbg !4745
  call void @extract_true_false_edges_from_block(%struct.basic_block_def* %66, %struct.edge_def** %nexit, %struct.edge_def** %exit), !dbg !4746
  %67 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4747
  %68 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4747
  %call53 = call %struct.edge_def* @single_dom_exit(%struct.loop* %68), !dbg !4747
  %cmp54 = icmp eq %struct.edge_def* %67, %call53, !dbg !4747
  br i1 %cmp54, label %cond.false57, label %cond.true56, !dbg !4747

cond.true56:                                      ; preds = %cond.end46
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 1469, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !4747
  br label %cond.end58, !dbg !4747

cond.false57:                                     ; preds = %cond.end46
  br label %cond.end58, !dbg !4747

cond.end58:                                       ; preds = %cond.false57, %cond.true56
  %cond59 = phi i32 [ 0, %cond.true56 ], [ 0, %cond.false57 ], !dbg !4747
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %for_bb, align 8, !dbg !4748
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !4749
  %call60 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %69, %struct.basic_block_def* %70, i32 0), !dbg !4750
  store %struct.edge_def* %call60, %struct.edge_def** %guard, align 8, !dbg !4751
  %71 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4752
  %latch61 = getelementptr inbounds %struct.loop, %struct.loop* %71, i32 0, i32 3, !dbg !4753
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %latch61, align 8, !dbg !4753
  %call62 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %72), !dbg !4754
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call62, i32 0, i32 7, !dbg !4755
  store i32 0, i32* %flags, align 8, !dbg !4756
  %73 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4757
  %latch63 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 3, !dbg !4758
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %latch63, align 8, !dbg !4758
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !4759
  %call64 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %74, %struct.basic_block_def* %75, i32 1), !dbg !4760
  store %struct.edge_def* %call64, %struct.edge_def** %end, align 8, !dbg !4761
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !4762
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp65, %struct.basic_block_def* %76), !dbg !4764
  %77 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4764
  %78 = bitcast %struct.gimple_stmt_iterator* %tmp65 to i8*, !dbg !4764
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %77, i8* align 8 %78, i64 24, i1 false), !dbg !4764
  br label %for.cond, !dbg !4765

for.cond:                                         ; preds = %for.inc, %cond.end58
  %call66 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4766
  %tobool67 = icmp ne i8 %call66, 0, !dbg !4768
  %lnot = xor i1 %tobool67, true, !dbg !4768
  br i1 %lnot, label %for.body, label %for.end, !dbg !4769

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !4770, metadata !DIExpression()), !dbg !4772
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !4773, metadata !DIExpression()), !dbg !4774
  %call68 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4775
  store %union.gimple_statement_d* %call68, %union.gimple_statement_d** %phi, align 8, !dbg !4776
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4777
  %80 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4777
  %dest_idx69 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %80, i32 0, i32 6, !dbg !4777
  %81 = load i32, i32* %dest_idx69, align 4, !dbg !4777
  %call70 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %79, i32 %81), !dbg !4777
  %call71 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call70), !dbg !4777
  %ssa_name72 = bitcast %union.tree_node* %call71 to %struct.tree_ssa_name*, !dbg !4777
  %def_stmt73 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name72, i32 0, i32 2, !dbg !4777
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt73, align 8, !dbg !4777
  store %union.gimple_statement_d* %82, %union.gimple_statement_d** %stmt, align 8, !dbg !4778
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4779
  %84 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4779
  %call74 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %84), !dbg !4779
  %dest_idx75 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call74, i32 0, i32 6, !dbg !4779
  %85 = load i32, i32* %dest_idx75, align 4, !dbg !4779
  %call76 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %83, i32 %85), !dbg !4779
  %call77 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call76), !dbg !4779
  store %union.tree_node* %call77, %union.tree_node** %def, align 8, !dbg !4780
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4781
  %87 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4782
  %call78 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %87), !dbg !4783
  %call79 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %86, %struct.edge_def* %call78), !dbg !4784
  store i32 %call79, i32* %locus, align 4, !dbg !4785
  %88 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4786
  %89 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4787
  %90 = load %struct.edge_def*, %struct.edge_def** %guard, align 8, !dbg !4788
  %91 = load i32, i32* %locus, align 4, !dbg !4789
  call void @add_phi_arg(%union.gimple_statement_d* %88, %union.tree_node* %89, %struct.edge_def* %90, i32 %91), !dbg !4790
  %92 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4791
  %93 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4791
  %call80 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %93), !dbg !4791
  %dest_idx81 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call80, i32 0, i32 6, !dbg !4791
  %94 = load i32, i32* %dest_idx81, align 4, !dbg !4791
  %call82 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %92, i32 %94), !dbg !4791
  %call83 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call82), !dbg !4791
  store %union.tree_node* %call83, %union.tree_node** %def, align 8, !dbg !4792
  %95 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4793
  %96 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4794
  %call84 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %96), !dbg !4795
  %call85 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %95, %struct.edge_def* %call84), !dbg !4796
  store i32 %call85, i32* %locus, align 4, !dbg !4797
  %97 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4798
  %98 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !4799
  %99 = load %struct.edge_def*, %struct.edge_def** %end, align 8, !dbg !4800
  %100 = load i32, i32* %locus, align 4, !dbg !4801
  call void @add_phi_arg(%union.gimple_statement_d* %97, %union.tree_node* %98, %struct.edge_def* %99, i32 %100), !dbg !4802
  br label %for.inc, !dbg !4803

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4804
  br label %for.cond, !dbg !4805, !llvm.loop !4806

for.end:                                          ; preds = %for.cond
  %101 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !4808
  %102 = load %struct.edge_def*, %struct.edge_def** %nexit, align 8, !dbg !4809
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %102, i32 0, i32 1, !dbg !4810
  %103 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4810
  %call86 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %101, %struct.basic_block_def* %103), !dbg !4811
  store %struct.edge_def* %call86, %struct.edge_def** %e, align 8, !dbg !4812
  %104 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4813
  %insns = getelementptr inbounds %struct.edge_def, %struct.edge_def* %104, i32 0, i32 2, !dbg !4813
  %g = bitcast %union.edge_def_insns* %insns to %struct.gimple_seq_d**, !dbg !4813
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %g, align 8, !dbg !4814
  %105 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !4815
  %106 = load %union.tree_node*, %union.tree_node** %cvar_base, align 8, !dbg !4816
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %105, %union.tree_node* %106), !dbg !4817
  %107 = load %union.tree_node*, %union.tree_node** %cvar, align 8, !dbg !4818
  %common87 = bitcast %union.tree_node* %107 to %struct.tree_common*, !dbg !4818
  %type88 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common87, i32 0, i32 2, !dbg !4818
  %108 = load %union.tree_node*, %union.tree_node** %type88, align 8, !dbg !4818
  store %union.tree_node* %108, %union.tree_node** %type, align 8, !dbg !4819
  %call89 = call %union.tree_node* @build_omp_clause(i32 1, i32 10), !dbg !4820
  store %union.tree_node* %call89, %union.tree_node** %t, align 8, !dbg !4821
  %109 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4822
  %omp_clause90 = bitcast %union.tree_node* %109 to %struct.tree_omp_clause*, !dbg !4822
  %subcode = getelementptr inbounds %struct.tree_omp_clause, %struct.tree_omp_clause* %omp_clause90, i32 0, i32 3, !dbg !4822
  %schedule_kind = bitcast %union.omp_clause_subcode* %subcode to i32*, !dbg !4822
  store i32 0, i32* %schedule_kind, align 8, !dbg !4823
  %110 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4824
  %call91 = call %union.gimple_statement_d* @gimple_build_omp_for(%struct.gimple_seq_d* null, %union.tree_node* %110, i64 1, %struct.gimple_seq_d* null), !dbg !4825
  store %union.gimple_statement_d* %call91, %union.gimple_statement_d** %for_stmt, align 8, !dbg !4826
  %111 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt, align 8, !dbg !4827
  %112 = load %union.tree_node*, %union.tree_node** %initvar, align 8, !dbg !4828
  call void @gimple_omp_for_set_index(%union.gimple_statement_d* %111, i64 0, %union.tree_node* %112), !dbg !4829
  %113 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt, align 8, !dbg !4830
  %114 = load %union.tree_node*, %union.tree_node** %cvar_init, align 8, !dbg !4831
  call void @gimple_omp_for_set_initial(%union.gimple_statement_d* %113, i64 0, %union.tree_node* %114), !dbg !4832
  %115 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt, align 8, !dbg !4833
  %116 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !4834
  %call92 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %116), !dbg !4835
  call void @gimple_omp_for_set_final(%union.gimple_statement_d* %115, i64 0, %union.tree_node* %call92), !dbg !4836
  %117 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt, align 8, !dbg !4837
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !4838
  %call93 = call i32 @gimple_cond_code(%union.gimple_statement_d* %118), !dbg !4839
  call void @gimple_omp_for_set_cond(%union.gimple_statement_d* %117, i64 0, i32 %call93), !dbg !4840
  %119 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt, align 8, !dbg !4841
  %120 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4842
  %121 = load %union.tree_node*, %union.tree_node** %cvar_base, align 8, !dbg !4842
  %122 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4842
  %call94 = call %union.tree_node* @build_int_cst(%union.tree_node* %122, i64 1), !dbg !4842
  %call95 = call %union.tree_node* @build2_stat(i32 63, %union.tree_node* %120, %union.tree_node* %121, %union.tree_node* %call94), !dbg !4842
  call void @gimple_omp_for_set_incr(%union.gimple_statement_d* %119, i64 0, %union.tree_node* %call95), !dbg !4843
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %for_bb, align 8, !dbg !4844
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp96, %struct.basic_block_def* %123), !dbg !4845
  %124 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4845
  %125 = bitcast %struct.gimple_stmt_iterator* %tmp96 to i8*, !dbg !4845
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %124, i8* align 8 %125, i64 24, i1 false), !dbg !4845
  %126 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt, align 8, !dbg !4846
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %126, i32 0), !dbg !4847
  %127 = load %union.gimple_statement_d*, %union.gimple_statement_d** %for_stmt, align 8, !dbg !4848
  %128 = load %union.tree_node*, %union.tree_node** %initvar, align 8, !dbg !4849
  %ssa_name97 = bitcast %union.tree_node* %128 to %struct.tree_ssa_name*, !dbg !4849
  %def_stmt98 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name97, i32 0, i32 2, !dbg !4849
  store %union.gimple_statement_d* %127, %union.gimple_statement_d** %def_stmt98, align 8, !dbg !4850
  %129 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4851
  %latch100 = getelementptr inbounds %struct.loop, %struct.loop* %129, i32 0, i32 3, !dbg !4852
  %130 = load %struct.basic_block_def*, %struct.basic_block_def** %latch100, align 8, !dbg !4852
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp99, %struct.basic_block_def* %130), !dbg !4853
  %131 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4853
  %132 = bitcast %struct.gimple_stmt_iterator* %tmp99 to i8*, !dbg !4853
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %131, i8* align 8 %132, i64 24, i1 false), !dbg !4853
  %133 = load %union.tree_node*, %union.tree_node** %cvar_next, align 8, !dbg !4854
  %134 = load %union.tree_node*, %union.tree_node** %cvar, align 8, !dbg !4855
  %call101 = call %union.gimple_statement_d* @gimple_build_omp_continue(%union.tree_node* %133, %union.tree_node* %134), !dbg !4856
  store %union.gimple_statement_d* %call101, %union.gimple_statement_d** %stmt, align 8, !dbg !4857
  %135 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4858
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %135, i32 0), !dbg !4859
  %136 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4860
  %137 = load %union.tree_node*, %union.tree_node** %cvar_next, align 8, !dbg !4861
  %ssa_name102 = bitcast %union.tree_node* %137 to %struct.tree_ssa_name*, !dbg !4861
  %def_stmt103 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name102, i32 0, i32 2, !dbg !4861
  store %union.gimple_statement_d* %136, %union.gimple_statement_d** %def_stmt103, align 8, !dbg !4862
  %138 = load %struct.basic_block_def*, %struct.basic_block_def** %ex_bb, align 8, !dbg !4863
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp104, %struct.basic_block_def* %138), !dbg !4864
  %139 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4864
  %140 = bitcast %struct.gimple_stmt_iterator* %tmp104 to i8*, !dbg !4864
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %139, i8* align 8 %140, i64 24, i1 false), !dbg !4864
  %call105 = call %union.gimple_statement_d* @gimple_build_omp_return(i8 zeroext 1), !dbg !4865
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %call105, i32 0), !dbg !4866
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %paral_bb, align 8, !dbg !4867
  ret %struct.basic_block_def* %141, !dbg !4868
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @create_loop_fn() #0 !dbg !2258 {
entry:
  %buf = alloca [100 x i8], align 16
  %tname = alloca i8*, align 8
  %decl = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %act_cfun = alloca %struct.function*, align 8
  %name_ = alloca i8*, align 8
  %output_ = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata [100 x i8]* %buf, metadata !4869, metadata !DIExpression()), !dbg !4873
  call void @llvm.dbg.declare(metadata i8** %tname, metadata !4874, metadata !DIExpression()), !dbg !4875
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !4876, metadata !DIExpression()), !dbg !4877
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4878, metadata !DIExpression()), !dbg !4879
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !4880, metadata !DIExpression()), !dbg !4881
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4882, metadata !DIExpression()), !dbg !4883
  call void @llvm.dbg.declare(metadata %struct.function** %act_cfun, metadata !4884, metadata !DIExpression()), !dbg !4885
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4886
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4886
  store %struct.function* %add.ptr, %struct.function** %act_cfun, align 8, !dbg !4885
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i64 0, i64 0, !dbg !4887
  %call = call i8* @current_function_name(), !dbg !4888
  %call1 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay, i64 100, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i64 0, i64 0), i8* %call), !dbg !4889
  br label %do.body, !dbg !4890

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %name_, metadata !4891, metadata !DIExpression()), !dbg !4894
  %arraydecay2 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i64 0, i64 0, !dbg !4894
  store i8* %arraydecay2, i8** %name_, align 8, !dbg !4894
  call void @llvm.dbg.declare(metadata i8** %output_, metadata !4895, metadata !DIExpression()), !dbg !4894
  %1 = load i8*, i8** %name_, align 8, !dbg !4894
  %call3 = call i64 @strlen(i8* %1), !dbg !4894
  %add = add i64 %call3, 32, !dbg !4894
  %2 = alloca i8, i64 %add, align 16, !dbg !4894
  store i8* %2, i8** %tname, align 8, !dbg !4894
  store i8* %2, i8** %output_, align 8, !dbg !4894
  %3 = load i8*, i8** %output_, align 8, !dbg !4894
  %4 = load i8*, i8** %name_, align 8, !dbg !4894
  %5 = load i32, i32* @create_loop_fn.loopfn_num, align 4, !dbg !4894
  %inc = add i32 %5, 1, !dbg !4894
  store i32 %inc, i32* @create_loop_fn.loopfn_num, align 4, !dbg !4894
  %conv = zext i32 %5 to i64, !dbg !4894
  %call4 = call i32 (i8*, i8*, ...) @sprintf(i8* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i64 0, i64 0), i8* %4, i64 %conv), !dbg !4894
  br label %do.end, !dbg !4894

do.end:                                           ; preds = %do.body
  %6 = load i8*, i8** %tname, align 8, !dbg !4897
  call void @clean_symbol_name(i8* %6), !dbg !4898
  %7 = load i8*, i8** %tname, align 8, !dbg !4899
  %call5 = call %union.tree_node* @get_identifier(i8* %7), !dbg !4900
  store %union.tree_node* %call5, %union.tree_node** %name, align 8, !dbg !4901
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !4902
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !4903
  %call6 = call %union.tree_node* (%union.tree_node*, ...) @build_function_type_list(%union.tree_node* %8, %union.tree_node* %9, %union.tree_node* null), !dbg !4904
  store %union.tree_node* %call6, %union.tree_node** %type, align 8, !dbg !4905
  %10 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4906
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4906
  %call7 = call %union.tree_node* @build_decl_stat(i32 1, i32 29, %union.tree_node* %10, %union.tree_node* %11), !dbg !4906
  store %union.tree_node* %call7, %union.tree_node** %decl, align 8, !dbg !4907
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @parallelized_functions, align 8, !dbg !4908
  %tobool = icmp ne %struct.bitmap_head_def* %12, null, !dbg !4908
  br i1 %tobool, label %if.end, label %if.then, !dbg !4910

if.then:                                          ; preds = %do.end
  %call8 = call %struct.bitmap_head_def* @bitmap_gc_alloc_stat(), !dbg !4911
  store %struct.bitmap_head_def* %call8, %struct.bitmap_head_def** @parallelized_functions, align 8, !dbg !4912
  br label %if.end, !dbg !4913

if.end:                                           ; preds = %if.then, %do.end
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @parallelized_functions, align 8, !dbg !4914
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4915
  %decl_minimal = bitcast %union.tree_node* %14 to %struct.tree_decl_minimal*, !dbg !4915
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !4915
  %15 = load i32, i32* %uid, align 4, !dbg !4915
  %call9 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %13, i32 %15), !dbg !4916
  %16 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4917
  %base = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !4917
  %17 = bitcast %struct.tree_base* %base to i64*, !dbg !4917
  %bf.load = load i64, i64* %17, align 8, !dbg !4918
  %bf.clear = and i64 %bf.load, -67108865, !dbg !4918
  %bf.set = or i64 %bf.clear, 67108864, !dbg !4918
  store i64 %bf.set, i64* %17, align 8, !dbg !4918
  %18 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4919
  %base10 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !4919
  %19 = bitcast %struct.tree_base* %base10 to i64*, !dbg !4919
  %bf.load11 = load i64, i64* %19, align 8, !dbg !4920
  %bf.clear12 = and i64 %bf.load11, -16777217, !dbg !4920
  %bf.set13 = or i64 %bf.clear12, 16777216, !dbg !4920
  store i64 %bf.set13, i64* %19, align 8, !dbg !4920
  %20 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4921
  %decl_common = bitcast %union.tree_node* %20 to %struct.tree_decl_common*, !dbg !4921
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4921
  %21 = bitcast i40* %artificial_flag to i64*, !dbg !4921
  %bf.load14 = load i64, i64* %21, align 8, !dbg !4922
  %bf.clear15 = and i64 %bf.load14, -4097, !dbg !4922
  %bf.set16 = or i64 %bf.clear15, 4096, !dbg !4922
  store i64 %bf.set16, i64* %21, align 8, !dbg !4922
  %22 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4923
  %decl_common17 = bitcast %union.tree_node* %22 to %struct.tree_decl_common*, !dbg !4923
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common17, i32 0, i32 2, !dbg !4923
  %23 = bitcast i40* %ignored_flag to i64*, !dbg !4923
  %bf.load18 = load i64, i64* %23, align 8, !dbg !4924
  %bf.clear19 = and i64 %bf.load18, -1025, !dbg !4924
  store i64 %bf.clear19, i64* %23, align 8, !dbg !4924
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4925
  %base20 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4925
  %25 = bitcast %struct.tree_base* %base20 to i64*, !dbg !4925
  %bf.load21 = load i64, i64* %25, align 8, !dbg !4926
  %bf.clear22 = and i64 %bf.load21, -134217729, !dbg !4926
  store i64 %bf.clear22, i64* %25, align 8, !dbg !4926
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4927
  %function_decl = bitcast %union.tree_node* %26 to %struct.tree_function_decl*, !dbg !4927
  %uninlinable = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4927
  %bf.load23 = load i32, i32* %uninlinable, align 8, !dbg !4928
  %bf.clear24 = and i32 %bf.load23, -32769, !dbg !4928
  %bf.set25 = or i32 %bf.clear24, 32768, !dbg !4928
  store i32 %bf.set25, i32* %uninlinable, align 8, !dbg !4928
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4929
  %decl_common26 = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !4929
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common26, i32 0, i32 2, !dbg !4929
  %28 = bitcast i40* %decl_flag_1 to i64*, !dbg !4929
  %bf.load27 = load i64, i64* %28, align 8, !dbg !4930
  %bf.clear28 = and i64 %bf.load27, -33554433, !dbg !4930
  store i64 %bf.clear28, i64* %28, align 8, !dbg !4930
  %29 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4931
  %decl_minimal29 = bitcast %union.tree_node* %29 to %struct.tree_decl_minimal*, !dbg !4931
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal29, i32 0, i32 4, !dbg !4931
  store %union.tree_node* null, %union.tree_node** %context, align 8, !dbg !4932
  %call30 = call %union.tree_node* @make_node_stat(i32 4), !dbg !4933
  %30 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4934
  %decl_common31 = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !4934
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common31, i32 0, i32 5, !dbg !4934
  store %union.tree_node* %call30, %union.tree_node** %initial, align 8, !dbg !4935
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !4936
  %call32 = call %union.tree_node* @build_decl_stat(i32 1, i32 36, %union.tree_node* null, %union.tree_node* %31), !dbg !4936
  store %union.tree_node* %call32, %union.tree_node** %t, align 8, !dbg !4937
  %32 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4938
  %decl_common33 = bitcast %union.tree_node* %32 to %struct.tree_decl_common*, !dbg !4938
  %artificial_flag34 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common33, i32 0, i32 2, !dbg !4938
  %33 = bitcast i40* %artificial_flag34 to i64*, !dbg !4938
  %bf.load35 = load i64, i64* %33, align 8, !dbg !4939
  %bf.clear36 = and i64 %bf.load35, -4097, !dbg !4939
  %bf.set37 = or i64 %bf.clear36, 4096, !dbg !4939
  store i64 %bf.set37, i64* %33, align 8, !dbg !4939
  %34 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4940
  %decl_common38 = bitcast %union.tree_node* %34 to %struct.tree_decl_common*, !dbg !4940
  %ignored_flag39 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common38, i32 0, i32 2, !dbg !4940
  %35 = bitcast i40* %ignored_flag39 to i64*, !dbg !4940
  %bf.load40 = load i64, i64* %35, align 8, !dbg !4941
  %bf.clear41 = and i64 %bf.load40, -1025, !dbg !4941
  %bf.set42 = or i64 %bf.clear41, 1024, !dbg !4941
  store i64 %bf.set42, i64* %35, align 8, !dbg !4941
  %36 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4942
  %37 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4943
  %decl_non_common = bitcast %union.tree_node* %37 to %struct.tree_decl_non_common*, !dbg !4943
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !4943
  store %union.tree_node* %36, %union.tree_node** %result, align 8, !dbg !4944
  %call43 = call %union.tree_node* @get_identifier(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.35, i64 0, i64 0)), !dbg !4945
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !4945
  %call44 = call %union.tree_node* @build_decl_stat(i32 1, i32 34, %union.tree_node* %call43, %union.tree_node* %38), !dbg !4945
  store %union.tree_node* %call44, %union.tree_node** %t, align 8, !dbg !4946
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4947
  %decl_common45 = bitcast %union.tree_node* %39 to %struct.tree_decl_common*, !dbg !4947
  %artificial_flag46 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common45, i32 0, i32 2, !dbg !4947
  %40 = bitcast i40* %artificial_flag46 to i64*, !dbg !4947
  %bf.load47 = load i64, i64* %40, align 8, !dbg !4948
  %bf.clear48 = and i64 %bf.load47, -4097, !dbg !4948
  %bf.set49 = or i64 %bf.clear48, 4096, !dbg !4948
  store i64 %bf.set49, i64* %40, align 8, !dbg !4948
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !4949
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4950
  %decl_common50 = bitcast %union.tree_node* %42 to %struct.tree_decl_common*, !dbg !4950
  %initial51 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common50, i32 0, i32 5, !dbg !4950
  store %union.tree_node* %41, %union.tree_node** %initial51, align 8, !dbg !4951
  %43 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4952
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4953
  %decl_minimal52 = bitcast %union.tree_node* %44 to %struct.tree_decl_minimal*, !dbg !4953
  %context53 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal52, i32 0, i32 4, !dbg !4953
  store %union.tree_node* %43, %union.tree_node** %context53, align 8, !dbg !4954
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4955
  %base54 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !4955
  %46 = bitcast %struct.tree_base* %base54 to i64*, !dbg !4955
  %bf.load55 = load i64, i64* %46, align 8, !dbg !4956
  %bf.clear56 = and i64 %bf.load55, -16777217, !dbg !4956
  %bf.set57 = or i64 %bf.clear56, 16777216, !dbg !4956
  store i64 %bf.set57, i64* %46, align 8, !dbg !4956
  %47 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4957
  %48 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4958
  %decl_non_common58 = bitcast %union.tree_node* %48 to %struct.tree_decl_non_common*, !dbg !4958
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common58, i32 0, i32 2, !dbg !4958
  store %union.tree_node* %47, %union.tree_node** %arguments, align 8, !dbg !4959
  %49 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4960
  call void @allocate_struct_function(%union.tree_node* %49, i8 zeroext 0), !dbg !4961
  %50 = load %struct.function*, %struct.function** %act_cfun, align 8, !dbg !4962
  call void @set_cfun(%struct.function* %50), !dbg !4963
  %51 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4964
  ret %union.tree_node* %51, !dbg !4965
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_call_for_reduction(%struct.loop* %loop, %struct.htab* %reduction_list, %struct.clsn_data* %ld_st_data) #0 !dbg !4966 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %reduction_list.addr = alloca %struct.htab*, align 8
  %ld_st_data.addr = alloca %struct.clsn_data*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4969, metadata !DIExpression()), !dbg !4970
  store %struct.htab* %reduction_list, %struct.htab** %reduction_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %reduction_list.addr, metadata !4971, metadata !DIExpression()), !dbg !4972
  store %struct.clsn_data* %ld_st_data, %struct.clsn_data** %ld_st_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.clsn_data** %ld_st_data.addr, metadata !4973, metadata !DIExpression()), !dbg !4974
  %0 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4975
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4976
  %2 = bitcast %struct.loop* %1 to i8*, !dbg !4976
  call void @htab_traverse(%struct.htab* %0, i32 (i8**, i8*)* @create_phi_for_local_result, i8* %2), !dbg !4977
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4978
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 3, !dbg !4978
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4978
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !4978
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4978
  %tobool = icmp ne %struct.VEC_edge_gc* %5, null, !dbg !4978
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4978

cond.true:                                        ; preds = %entry
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4978
  %latch1 = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 3, !dbg !4978
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %latch1, align 8, !dbg !4978
  %succs2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !4978
  %8 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs2, align 8, !dbg !4978
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %8, i32 0, i32 0, !dbg !4978
  br label %cond.end, !dbg !4978

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4978

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4978
  %call = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !4978
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 7, !dbg !4978
  %9 = load i32, i32* %flags, align 8, !dbg !4978
  %and = and i32 %9, 1, !dbg !4978
  %tobool3 = icmp ne i32 %and, 0, !dbg !4978
  br i1 %tobool3, label %cond.true4, label %cond.false16, !dbg !4978

cond.true4:                                       ; preds = %cond.end
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4978
  %latch5 = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 3, !dbg !4978
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %latch5, align 8, !dbg !4978
  %succs6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 1, !dbg !4978
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs6, align 8, !dbg !4978
  %tobool7 = icmp ne %struct.VEC_edge_gc* %12, null, !dbg !4978
  br i1 %tobool7, label %cond.true8, label %cond.false12, !dbg !4978

cond.true8:                                       ; preds = %cond.true4
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4978
  %latch9 = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 3, !dbg !4978
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %latch9, align 8, !dbg !4978
  %succs10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 1, !dbg !4978
  %15 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs10, align 8, !dbg !4978
  %base11 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %15, i32 0, i32 0, !dbg !4978
  br label %cond.end13, !dbg !4978

cond.false12:                                     ; preds = %cond.true4
  br label %cond.end13, !dbg !4978

cond.end13:                                       ; preds = %cond.false12, %cond.true8
  %cond14 = phi %struct.VEC_edge_base* [ %base11, %cond.true8 ], [ null, %cond.false12 ], !dbg !4978
  %call15 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond14, i32 0), !dbg !4978
  br label %cond.end28, !dbg !4978

cond.false16:                                     ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4978
  %latch17 = getelementptr inbounds %struct.loop, %struct.loop* %16, i32 0, i32 3, !dbg !4978
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %latch17, align 8, !dbg !4978
  %succs18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !4978
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs18, align 8, !dbg !4978
  %tobool19 = icmp ne %struct.VEC_edge_gc* %18, null, !dbg !4978
  br i1 %tobool19, label %cond.true20, label %cond.false24, !dbg !4978

cond.true20:                                      ; preds = %cond.false16
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4978
  %latch21 = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 3, !dbg !4978
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %latch21, align 8, !dbg !4978
  %succs22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 1, !dbg !4978
  %21 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs22, align 8, !dbg !4978
  %base23 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %21, i32 0, i32 0, !dbg !4978
  br label %cond.end25, !dbg !4978

cond.false24:                                     ; preds = %cond.false16
  br label %cond.end25, !dbg !4978

cond.end25:                                       ; preds = %cond.false24, %cond.true20
  %cond26 = phi %struct.VEC_edge_base* [ %base23, %cond.true20 ], [ null, %cond.false24 ], !dbg !4978
  %call27 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond26, i32 1), !dbg !4978
  br label %cond.end28, !dbg !4978

cond.end28:                                       ; preds = %cond.end25, %cond.end13
  %cond29 = phi %struct.edge_def* [ %call15, %cond.end13 ], [ %call27, %cond.end25 ], !dbg !4978
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond29, i32 0, i32 1, !dbg !4979
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4979
  %23 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !4980
  %load_bb = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %23, i32 0, i32 3, !dbg !4981
  store %struct.basic_block_def* %22, %struct.basic_block_def** %load_bb, align 8, !dbg !4982
  %24 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !4983
  %25 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !4984
  %26 = bitcast %struct.clsn_data* %25 to i8*, !dbg !4984
  call void @htab_traverse(%struct.htab* %24, i32 (i8**, i8*)* @create_call_for_reduction_1, i8* %26), !dbg !4985
  ret void, !dbg !4986
}

declare dso_local void @scev_reset() #2

declare dso_local void @cancel_loop_tree(%struct.loop*) #2

declare dso_local void @free_numbers_of_iterations_estimates_loop(%struct.loop*) #2

declare dso_local void @omp_expand_local(%struct.basic_block_def*) #2

declare dso_local %struct.edge_def* @split_block_after_labels(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !4987 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4993, metadata !DIExpression()), !dbg !4994
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4995
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !4996
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !4997
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4997
  ret %struct.basic_block_def* %1, !dbg !4998
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !4999 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5002, metadata !DIExpression()), !dbg !5003
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5004
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !5004
  %tobool = icmp ne i8 %call, 0, !dbg !5004
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5004

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !5004
  br label %cond.end, !dbg !5004

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5004

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5004
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5005
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !5005
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5005
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !5005
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5005

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5005
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !5005
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !5005
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !5005
  br label %cond.end5, !dbg !5005

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5005

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !5005
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !5005
  ret %struct.edge_def* %call7, !dbg !5006
}

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5007 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5008, metadata !DIExpression()), !dbg !5009
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5010
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5011
  ret %union.tree_node* %call, !dbg !5012
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !5013 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5014, metadata !DIExpression()), !dbg !5015
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5016
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5017
  ret %union.tree_node* %call, !dbg !5018
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !5019 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !5022, metadata !DIExpression()), !dbg !5023
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5024, metadata !DIExpression()), !dbg !5025
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5026
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5026
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !5027
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5028
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !5029
  ret %union.tree_node* %call, !dbg !5030
}

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) #2

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !5031 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5034, metadata !DIExpression()), !dbg !5035
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !5036, metadata !DIExpression()), !dbg !5037
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5038
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !5039
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !5040
  ret void, !dbg !5041
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !5042 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !5045, metadata !DIExpression()), !dbg !5046
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5047
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5049
  %tobool = icmp ne i8 %call, 0, !dbg !5049
  br i1 %tobool, label %if.then, label %if.end, !dbg !5050

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5051
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !5053
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5054
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !5055
  br label %if.end, !dbg !5056

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5057
}

declare dso_local i8* @xmalloc(i64) #2

declare dso_local zeroext i8 @gimple_duplicate_sese_tail(%struct.edge_def*, %struct.edge_def*, %struct.basic_block_def**, i32, %struct.basic_block_def**) #2

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5058 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5061, metadata !DIExpression()), !dbg !5062
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5063, metadata !DIExpression()), !dbg !5064
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5065
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !5066
  br label %while.cond, !dbg !5067

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !5068
  %tobool = icmp ne i8 %call, 0, !dbg !5068
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !5069

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !5070
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !5071
  %cmp = icmp eq i32 %call2, 4, !dbg !5072
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !5073
  br i1 %1, label %while.body, label %while.end, !dbg !5067

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %agg.result), !dbg !5074
  br label %while.cond, !dbg !5067, !llvm.loop !5075

while.end:                                        ; preds = %land.end
  ret void, !dbg !5077
}

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !5078 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5081, metadata !DIExpression()), !dbg !5082
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5083
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !5083
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5083
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !5083
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5083

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5083
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !5083
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !5083
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !5083
  br label %cond.end, !dbg !5083

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5083

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5083
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5083
  %cmp = icmp eq i32 %call, 1, !dbg !5084
  %conv = zext i1 %cmp to i32, !dbg !5084
  %conv2 = trunc i32 %conv to i8, !dbg !5083
  ret i8 %conv2, !dbg !5085
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !5086 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5091, metadata !DIExpression()), !dbg !5092
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5093, metadata !DIExpression()), !dbg !5092
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5092
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5092
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5092

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5092
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5092
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !5092
  %3 = load i32, i32* %num, align 8, !dbg !5092
  %cmp = icmp ult i32 %1, %3, !dbg !5092
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5094
  %land.ext = zext i1 %4 to i32, !dbg !5092
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5092
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !5092
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5092
  %idxprom = zext i32 %6 to i64, !dbg !5092
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !5092
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !5092
  ret %struct.edge_def* %7, !dbg !5092
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !5095 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5098, metadata !DIExpression()), !dbg !5099
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5099
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5099
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5099

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5099
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !5099
  %2 = load i32, i32* %num, align 8, !dbg !5099
  br label %cond.end, !dbg !5099

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5099

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5099
  ret i32 %cond, !dbg !5099
}

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !5100 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5103, metadata !DIExpression()), !dbg !5104
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5105, metadata !DIExpression()), !dbg !5106
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !5107, metadata !DIExpression()), !dbg !5108
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5109
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5109
  %conv = zext i8 %call to i32, !dbg !5109
  %tobool = icmp ne i32 %conv, 0, !dbg !5109
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !5109

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !5109
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5109
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !5109
  %cmp = icmp ult i32 %1, %call1, !dbg !5109
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5109

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !5109
  br label %cond.end, !dbg !5109

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5109

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5109
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !5110
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5111
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !5112
  %5 = load i32, i32* %i.addr, align 4, !dbg !5113
  %idxprom = zext i32 %5 to i64, !dbg !5112
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !5112
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !5114
  ret void, !dbg !5115
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !5116 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5119, metadata !DIExpression()), !dbg !5120
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5121
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5122
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !5123
  %1 = load i32, i32* %num_ops, align 4, !dbg !5123
  ret i32 %1, !dbg !5124
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !5125 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5126, metadata !DIExpression()), !dbg !5127
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5128, metadata !DIExpression()), !dbg !5129
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !5130, metadata !DIExpression()), !dbg !5131
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5132
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !5133
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !5134
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5135
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !5136
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !5137
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5138
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5139
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !5140
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !5141
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5142
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !5143
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !5144
  ret void, !dbg !5145
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5146 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5149, metadata !DIExpression()), !dbg !5150
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5151
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5152
  %1 = load i32, i32* %flags, align 8, !dbg !5152
  %and = and i32 %1, 512, !dbg !5153
  %tobool = icmp ne i32 %and, 0, !dbg !5153
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5154

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5155
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5156
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5157
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5157
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5155
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5158

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5159
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5160
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5161
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5161
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5162
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5162
  br label %cond.end, !dbg !5158

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5158

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5158
  ret %struct.gimple_seq_d* %cond, !dbg !5163
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5164 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5170, metadata !DIExpression()), !dbg !5171
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5172
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5172
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5172

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5173
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5174
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5174
  br label %cond.end, !dbg !5172

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5172

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5172
  ret %struct.gimple_seq_node_d* %cond, !dbg !5175
}

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_omp_clause(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !5176 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5179, metadata !DIExpression()), !dbg !5180
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5181
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5182
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !5183
  %1 = load i32, i32* %location, align 8, !dbg !5183
  ret i32 %1, !dbg !5184
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5185 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5186, metadata !DIExpression()), !dbg !5187
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5188
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5189
  ret %union.tree_node* %call, !dbg !5190
}

declare dso_local %union.tree_node* @omp_reduction_init(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !5191 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5194, metadata !DIExpression()), !dbg !5195
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !5196, metadata !DIExpression()), !dbg !5197
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5198
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !5199
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !5200
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5201
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !5202
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5202
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !5203
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5204
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !5205
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !5206
  ret void, !dbg !5207
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !5208 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !5211, metadata !DIExpression()), !dbg !5212
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5213
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !5215
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5215
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !5216
  br i1 %cmp, label %if.then, label %if.end, !dbg !5217

if.then:                                          ; preds = %entry
  br label %return, !dbg !5218

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5219
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !5220
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5220
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5221
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !5222
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !5222
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !5223
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !5224
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5225
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !5226
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !5226
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5227
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !5228
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !5228
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !5229
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !5230
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5231
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !5232
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !5233
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5234
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !5235
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !5236
  br label %return, !dbg !5237

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !5237
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !5238 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !5241, metadata !DIExpression()), !dbg !5242
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !5243, metadata !DIExpression()), !dbg !5244
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !5245, metadata !DIExpression()), !dbg !5246
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5247
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !5247
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5249

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5250
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5250
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5250
  %bf.load = load i64, i64* %2, align 8, !dbg !5250
  %bf.clear = and i64 %bf.load, 65535, !dbg !5250
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5250
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5251
  br i1 %cmp, label %if.then, label %if.else, !dbg !5252

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5253
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !5254
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5255
  br label %if.end, !dbg !5253

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5256
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !5256
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !5256
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !5258
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5259
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !5260
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !5261
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5262
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !5263 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !5266, metadata !DIExpression()), !dbg !5267
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !5268, metadata !DIExpression()), !dbg !5269
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5270
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5271
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !5272
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5273
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5274
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !5275
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5275
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5276
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !5277
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !5278
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5279
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5280
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !5281
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !5281
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !5282
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !5283
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5284
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5285
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !5286
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !5287
  ret void, !dbg !5288
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 %alloc_) #0 !dbg !5289 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5292, metadata !DIExpression()), !dbg !5293
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5293
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !5293
  %1 = bitcast i8* %call to %struct.VEC_basic_block_heap*, !dbg !5293
  ret %struct.VEC_basic_block_heap* %1, !dbg !5293
}

declare dso_local i32 @int_tree_map_hash(i8*) #2

declare dso_local i32 @int_tree_map_eq(i8*, i8*) #2

declare dso_local void @gather_blocks_in_sese_region(%struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_heap**) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def** %ptr) #0 !dbg !5294 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !5299, metadata !DIExpression()), !dbg !5300
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5301, metadata !DIExpression()), !dbg !5300
  store %struct.basic_block_def** %ptr, %struct.basic_block_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %ptr.addr, metadata !5302, metadata !DIExpression()), !dbg !5300
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5303
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !5303
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5303

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5303
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5303
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !5303
  %3 = load i32, i32* %num, align 8, !dbg !5303
  %cmp = icmp ult i32 %1, %3, !dbg !5303
  br i1 %cmp, label %if.then, label %if.else, !dbg !5300

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5305
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !5305
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5305
  %idxprom = zext i32 %5 to i64, !dbg !5305
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !5305
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !5305
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !5305
  store %struct.basic_block_def* %6, %struct.basic_block_def** %7, align 8, !dbg !5305
  store i32 1, i32* %retval, align 4, !dbg !5305
  br label %return, !dbg !5305

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !5307
  store %struct.basic_block_def* null, %struct.basic_block_def** %8, align 8, !dbg !5307
  store i32 0, i32* %retval, align 4, !dbg !5307
  br label %return, !dbg !5307

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5300
  ret i32 %9, !dbg !5300
}

; Function Attrs: noinline nounwind uwtable
define internal void @eliminate_local_variables_stmt(%struct.edge_def* %entry1, %union.gimple_statement_d* %stmt, %struct.htab* %decl_address) #0 !dbg !5309 {
entry:
  %entry.addr = alloca %struct.edge_def*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %decl_address.addr = alloca %struct.htab*, align 8
  %dta = alloca %struct.elv_data, align 8
  store %struct.edge_def* %entry1, %struct.edge_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry.addr, metadata !5312, metadata !DIExpression()), !dbg !5313
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5314, metadata !DIExpression()), !dbg !5315
  store %struct.htab* %decl_address, %struct.htab** %decl_address.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %decl_address.addr, metadata !5316, metadata !DIExpression()), !dbg !5317
  call void @llvm.dbg.declare(metadata %struct.elv_data* %dta, metadata !5318, metadata !DIExpression()), !dbg !5319
  %info = getelementptr inbounds %struct.elv_data, %struct.elv_data* %dta, i32 0, i32 0, !dbg !5320
  %0 = bitcast %struct.walk_stmt_info* %info to i8*, !dbg !5321
  call void @llvm.memset.p0i8.i64(i8* align 8 %0, i8 0, i64 56, i1 false), !dbg !5321
  %1 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !5322
  %entry2 = getelementptr inbounds %struct.elv_data, %struct.elv_data* %dta, i32 0, i32 1, !dbg !5323
  store %struct.edge_def* %1, %struct.edge_def** %entry2, align 8, !dbg !5324
  %2 = load %struct.htab*, %struct.htab** %decl_address.addr, align 8, !dbg !5325
  %decl_address3 = getelementptr inbounds %struct.elv_data, %struct.elv_data* %dta, i32 0, i32 2, !dbg !5326
  store %struct.htab* %2, %struct.htab** %decl_address3, align 8, !dbg !5327
  %changed = getelementptr inbounds %struct.elv_data, %struct.elv_data* %dta, i32 0, i32 3, !dbg !5328
  store i8 0, i8* %changed, align 8, !dbg !5329
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5330
  %call = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %3), !dbg !5332
  %tobool = icmp ne i8 %call, 0, !dbg !5332
  br i1 %tobool, label %if.then, label %if.else, !dbg !5333

if.then:                                          ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5334
  %call4 = call %union.tree_node** @gimple_debug_bind_get_value_ptr(%union.gimple_statement_d* %4), !dbg !5334
  %info5 = getelementptr inbounds %struct.elv_data, %struct.elv_data* %dta, i32 0, i32 0, !dbg !5334
  %5 = bitcast %struct.walk_stmt_info* %info5 to i8*, !dbg !5334
  %call6 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call4, %union.tree_node* (%union.tree_node**, i32*, i8*)* @eliminate_local_variables_1, i8* %5, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !5334
  br label %if.end, !dbg !5334

if.else:                                          ; preds = %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5335
  %info7 = getelementptr inbounds %struct.elv_data, %struct.elv_data* %dta, i32 0, i32 0, !dbg !5336
  %call8 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %6, %union.tree_node* (%union.tree_node**, i32*, i8*)* @eliminate_local_variables_1, %struct.walk_stmt_info* %info7), !dbg !5337
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %changed9 = getelementptr inbounds %struct.elv_data, %struct.elv_data* %dta, i32 0, i32 3, !dbg !5338
  %7 = load i8, i8* %changed9, align 8, !dbg !5338
  %tobool10 = icmp ne i8 %7, 0, !dbg !5340
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !5341

if.then11:                                        ; preds = %if.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5342
  call void @update_stmt(%union.gimple_statement_d* %8), !dbg !5343
  br label %if.end12, !dbg !5343

if.end12:                                         ; preds = %if.then11, %if.end
  ret void, !dbg !5344
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !5345 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !5349, metadata !DIExpression()), !dbg !5350
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !5351
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !5351
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !5351
  br i1 %tobool, label %if.then, label %if.end, !dbg !5350

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !5351
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !5351
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !5351
  call void @free(i8* %4), !dbg !5351
  br label %if.end, !dbg !5351

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !5350
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !5350
  ret void, !dbg !5350
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %s) #0 !dbg !5353 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !5354, metadata !DIExpression()), !dbg !5355
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5356
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %0), !dbg !5358
  %tobool = icmp ne i8 %call, 0, !dbg !5358
  br i1 %tobool, label %if.then, label %if.end, !dbg !5359

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !5360
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !5361
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5362
  %bf.load = load i32, i32* %2, align 8, !dbg !5362
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5362
  %cmp = icmp eq i32 %bf.lshr, 0, !dbg !5363
  %conv = zext i1 %cmp to i32, !dbg !5363
  %conv1 = trunc i32 %conv to i8, !dbg !5360
  store i8 %conv1, i8* %retval, align 1, !dbg !5364
  br label %return, !dbg !5364

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5365
  br label %return, !dbg !5365

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !5366
  ret i8 %3, !dbg !5366
}

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_debug_bind_get_value_ptr(%union.gimple_statement_d* %dbg) #0 !dbg !5367 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !5368, metadata !DIExpression()), !dbg !5369
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !5370
  %call = call %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %0, i32 1), !dbg !5371
  ret %union.tree_node** %call, !dbg !5372
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @eliminate_local_variables_1(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !5373 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %dta = alloca %struct.elv_data*, align 8
  %t = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %addr = alloca %union.tree_node*, align 8
  %addr_type = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %obj = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !5376, metadata !DIExpression()), !dbg !5377
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !5378, metadata !DIExpression()), !dbg !5379
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5380, metadata !DIExpression()), !dbg !5381
  call void @llvm.dbg.declare(metadata %struct.elv_data** %dta, metadata !5382, metadata !DIExpression()), !dbg !5384
  %0 = load i8*, i8** %data.addr, align 8, !dbg !5385
  %1 = bitcast i8* %0 to %struct.elv_data*, !dbg !5386
  store %struct.elv_data* %1, %struct.elv_data** %dta, align 8, !dbg !5384
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5387, metadata !DIExpression()), !dbg !5388
  %2 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5389
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !5390
  store %union.tree_node* %3, %union.tree_node** %t, align 8, !dbg !5388
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5391, metadata !DIExpression()), !dbg !5392
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !5393, metadata !DIExpression()), !dbg !5394
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_type, metadata !5395, metadata !DIExpression()), !dbg !5396
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5397, metadata !DIExpression()), !dbg !5398
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj, metadata !5399, metadata !DIExpression()), !dbg !5400
  %4 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5401
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5401
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !5401
  %bf.load = load i64, i64* %5, align 8, !dbg !5401
  %bf.clear = and i64 %bf.load, 65535, !dbg !5401
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5401
  %idxprom = sext i32 %bf.cast to i64, !dbg !5401
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5401
  %6 = load i32, i32* %arrayidx, align 4, !dbg !5401
  %cmp = icmp eq i32 %6, 3, !dbg !5401
  br i1 %cmp, label %if.then, label %if.end56, !dbg !5403

if.then:                                          ; preds = %entry
  %7 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !5404
  store i32 0, i32* %7, align 4, !dbg !5406
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5407
  %base1 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5407
  %9 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5407
  %bf.load2 = load i64, i64* %9, align 8, !dbg !5407
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5407
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5407
  %cmp5 = icmp eq i32 %bf.cast4, 32, !dbg !5407
  br i1 %cmp5, label %lor.lhs.false45, label %lor.lhs.false, !dbg !5407

lor.lhs.false:                                    ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5407
  %base6 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5407
  %11 = bitcast %struct.tree_base* %base6 to i64*, !dbg !5407
  %bf.load7 = load i64, i64* %11, align 8, !dbg !5407
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !5407
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !5407
  %cmp10 = icmp eq i32 %bf.cast9, 34, !dbg !5407
  br i1 %cmp10, label %lor.lhs.false45, label %lor.lhs.false11, !dbg !5407

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5407
  %base12 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5407
  %13 = bitcast %struct.tree_base* %base12 to i64*, !dbg !5407
  %bf.load13 = load i64, i64* %13, align 8, !dbg !5407
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !5407
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !5407
  %cmp16 = icmp eq i32 %bf.cast15, 36, !dbg !5407
  br i1 %cmp16, label %lor.lhs.false45, label %lor.lhs.false17, !dbg !5407

lor.lhs.false17:                                  ; preds = %lor.lhs.false11
  %14 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5407
  %base18 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !5407
  %15 = bitcast %struct.tree_base* %base18 to i64*, !dbg !5407
  %bf.load19 = load i64, i64* %15, align 8, !dbg !5407
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !5407
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !5407
  %cmp22 = icmp eq i32 %bf.cast21, 141, !dbg !5407
  br i1 %cmp22, label %land.lhs.true, label %if.then49, !dbg !5407

land.lhs.true:                                    ; preds = %lor.lhs.false17
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5407
  %ssa_name = bitcast %union.tree_node* %16 to %struct.tree_ssa_name*, !dbg !5407
  %var23 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5407
  %17 = load %union.tree_node*, %union.tree_node** %var23, align 8, !dbg !5407
  %base24 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !5407
  %18 = bitcast %struct.tree_base* %base24 to i64*, !dbg !5407
  %bf.load25 = load i64, i64* %18, align 8, !dbg !5407
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !5407
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !5407
  %cmp28 = icmp eq i32 %bf.cast27, 32, !dbg !5407
  br i1 %cmp28, label %lor.lhs.false45, label %lor.lhs.false29, !dbg !5407

lor.lhs.false29:                                  ; preds = %land.lhs.true
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5407
  %ssa_name30 = bitcast %union.tree_node* %19 to %struct.tree_ssa_name*, !dbg !5407
  %var31 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name30, i32 0, i32 1, !dbg !5407
  %20 = load %union.tree_node*, %union.tree_node** %var31, align 8, !dbg !5407
  %base32 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !5407
  %21 = bitcast %struct.tree_base* %base32 to i64*, !dbg !5407
  %bf.load33 = load i64, i64* %21, align 8, !dbg !5407
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !5407
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !5407
  %cmp36 = icmp eq i32 %bf.cast35, 34, !dbg !5407
  br i1 %cmp36, label %lor.lhs.false45, label %lor.lhs.false37, !dbg !5407

lor.lhs.false37:                                  ; preds = %lor.lhs.false29
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5407
  %ssa_name38 = bitcast %union.tree_node* %22 to %struct.tree_ssa_name*, !dbg !5407
  %var39 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name38, i32 0, i32 1, !dbg !5407
  %23 = load %union.tree_node*, %union.tree_node** %var39, align 8, !dbg !5407
  %base40 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !5407
  %24 = bitcast %struct.tree_base* %base40 to i64*, !dbg !5407
  %bf.load41 = load i64, i64* %24, align 8, !dbg !5407
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !5407
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !5407
  %cmp44 = icmp eq i32 %bf.cast43, 36, !dbg !5407
  br i1 %cmp44, label %lor.lhs.false45, label %if.then49, !dbg !5409

lor.lhs.false45:                                  ; preds = %lor.lhs.false37, %lor.lhs.false29, %land.lhs.true, %lor.lhs.false11, %lor.lhs.false, %if.then
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5410
  %decl_common = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !5410
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !5410
  %26 = bitcast i40* %decl_flag_1 to i64*, !dbg !5410
  %bf.load46 = load i64, i64* %26, align 8, !dbg !5410
  %bf.lshr = lshr i64 %bf.load46, 25, !dbg !5410
  %bf.clear47 = and i64 %bf.lshr, 1, !dbg !5410
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !5410
  %tobool = icmp ne i32 %bf.cast48, 0, !dbg !5410
  br i1 %tobool, label %if.then49, label %if.end, !dbg !5411

if.then49:                                        ; preds = %lor.lhs.false45, %lor.lhs.false37, %lor.lhs.false17
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5412
  br label %return, !dbg !5412

if.end:                                           ; preds = %lor.lhs.false45
  %27 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5413
  %common = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !5413
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5413
  %28 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !5413
  store %union.tree_node* %28, %union.tree_node** %type, align 8, !dbg !5414
  %29 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5415
  %call = call %union.tree_node* @build_pointer_type(%union.tree_node* %29), !dbg !5416
  store %union.tree_node* %call, %union.tree_node** %addr_type, align 8, !dbg !5417
  %30 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5418
  %31 = load %union.tree_node*, %union.tree_node** %addr_type, align 8, !dbg !5419
  %32 = load %struct.elv_data*, %struct.elv_data** %dta, align 8, !dbg !5420
  %entry51 = getelementptr inbounds %struct.elv_data, %struct.elv_data* %32, i32 0, i32 1, !dbg !5421
  %33 = load %struct.edge_def*, %struct.edge_def** %entry51, align 8, !dbg !5421
  %34 = load %struct.elv_data*, %struct.elv_data** %dta, align 8, !dbg !5422
  %decl_address = getelementptr inbounds %struct.elv_data, %struct.elv_data* %34, i32 0, i32 2, !dbg !5423
  %35 = load %struct.htab*, %struct.htab** %decl_address, align 8, !dbg !5423
  %call52 = call %union.tree_node* @take_address_of(%union.tree_node* %30, %union.tree_node* %31, %struct.edge_def* %33, %struct.htab* %35), !dbg !5424
  store %union.tree_node* %call52, %union.tree_node** %addr, align 8, !dbg !5425
  %36 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5426
  %37 = load %union.tree_node*, %union.tree_node** %36, align 8, !dbg !5426
  %common53 = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !5426
  %type54 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common53, i32 0, i32 2, !dbg !5426
  %38 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !5426
  %39 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5426
  %call55 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %38, %union.tree_node* %39), !dbg !5426
  %40 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5427
  store %union.tree_node* %call55, %union.tree_node** %40, align 8, !dbg !5428
  %41 = load %struct.elv_data*, %struct.elv_data** %dta, align 8, !dbg !5429
  %changed = getelementptr inbounds %struct.elv_data, %struct.elv_data* %41, i32 0, i32 3, !dbg !5430
  store i8 1, i8* %changed, align 8, !dbg !5431
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5432
  br label %return, !dbg !5432

if.end56:                                         ; preds = %entry
  %42 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5433
  %base57 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !5433
  %43 = bitcast %struct.tree_base* %base57 to i64*, !dbg !5433
  %bf.load58 = load i64, i64* %43, align 8, !dbg !5433
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !5433
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !5433
  %cmp61 = icmp eq i32 %bf.cast60, 121, !dbg !5435
  br i1 %cmp61, label %if.then62, label %if.end134, !dbg !5436

if.then62:                                        ; preds = %if.end56
  %44 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5437
  %call63 = call zeroext i8 @is_gimple_val(%union.tree_node* %44), !dbg !5440
  %tobool64 = icmp ne i8 %call63, 0, !dbg !5440
  br i1 %tobool64, label %if.end66, label %if.then65, !dbg !5441

if.then65:                                        ; preds = %if.then62
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5442
  br label %return, !dbg !5442

if.end66:                                         ; preds = %if.then62
  %45 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !5443
  store i32 0, i32* %45, align 4, !dbg !5444
  %46 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5445
  %exp = bitcast %union.tree_node* %46 to %struct.tree_exp*, !dbg !5445
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5445
  %arrayidx67 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5445
  %47 = load %union.tree_node*, %union.tree_node** %arrayidx67, align 8, !dbg !5445
  store %union.tree_node* %47, %union.tree_node** %obj, align 8, !dbg !5446
  %48 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !5447
  %call68 = call %union.tree_node* @get_base_address(%union.tree_node* %48), !dbg !5448
  store %union.tree_node* %call68, %union.tree_node** %var, align 8, !dbg !5449
  %49 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5450
  %tobool69 = icmp ne %union.tree_node* %49, null, !dbg !5450
  br i1 %tobool69, label %lor.lhs.false70, label %if.then126, !dbg !5452

lor.lhs.false70:                                  ; preds = %if.end66
  %50 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5453
  %base71 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !5453
  %51 = bitcast %struct.tree_base* %base71 to i64*, !dbg !5453
  %bf.load72 = load i64, i64* %51, align 8, !dbg !5453
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !5453
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !5453
  %cmp75 = icmp eq i32 %bf.cast74, 32, !dbg !5453
  br i1 %cmp75, label %lor.lhs.false118, label %lor.lhs.false76, !dbg !5453

lor.lhs.false76:                                  ; preds = %lor.lhs.false70
  %52 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5453
  %base77 = bitcast %union.tree_node* %52 to %struct.tree_base*, !dbg !5453
  %53 = bitcast %struct.tree_base* %base77 to i64*, !dbg !5453
  %bf.load78 = load i64, i64* %53, align 8, !dbg !5453
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !5453
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !5453
  %cmp81 = icmp eq i32 %bf.cast80, 34, !dbg !5453
  br i1 %cmp81, label %lor.lhs.false118, label %lor.lhs.false82, !dbg !5453

lor.lhs.false82:                                  ; preds = %lor.lhs.false76
  %54 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5453
  %base83 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !5453
  %55 = bitcast %struct.tree_base* %base83 to i64*, !dbg !5453
  %bf.load84 = load i64, i64* %55, align 8, !dbg !5453
  %bf.clear85 = and i64 %bf.load84, 65535, !dbg !5453
  %bf.cast86 = trunc i64 %bf.clear85 to i32, !dbg !5453
  %cmp87 = icmp eq i32 %bf.cast86, 36, !dbg !5453
  br i1 %cmp87, label %lor.lhs.false118, label %lor.lhs.false88, !dbg !5453

lor.lhs.false88:                                  ; preds = %lor.lhs.false82
  %56 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5453
  %base89 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !5453
  %57 = bitcast %struct.tree_base* %base89 to i64*, !dbg !5453
  %bf.load90 = load i64, i64* %57, align 8, !dbg !5453
  %bf.clear91 = and i64 %bf.load90, 65535, !dbg !5453
  %bf.cast92 = trunc i64 %bf.clear91 to i32, !dbg !5453
  %cmp93 = icmp eq i32 %bf.cast92, 141, !dbg !5453
  br i1 %cmp93, label %land.lhs.true94, label %if.then126, !dbg !5453

land.lhs.true94:                                  ; preds = %lor.lhs.false88
  %58 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5453
  %ssa_name95 = bitcast %union.tree_node* %58 to %struct.tree_ssa_name*, !dbg !5453
  %var96 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name95, i32 0, i32 1, !dbg !5453
  %59 = load %union.tree_node*, %union.tree_node** %var96, align 8, !dbg !5453
  %base97 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !5453
  %60 = bitcast %struct.tree_base* %base97 to i64*, !dbg !5453
  %bf.load98 = load i64, i64* %60, align 8, !dbg !5453
  %bf.clear99 = and i64 %bf.load98, 65535, !dbg !5453
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !5453
  %cmp101 = icmp eq i32 %bf.cast100, 32, !dbg !5453
  br i1 %cmp101, label %lor.lhs.false118, label %lor.lhs.false102, !dbg !5453

lor.lhs.false102:                                 ; preds = %land.lhs.true94
  %61 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5453
  %ssa_name103 = bitcast %union.tree_node* %61 to %struct.tree_ssa_name*, !dbg !5453
  %var104 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name103, i32 0, i32 1, !dbg !5453
  %62 = load %union.tree_node*, %union.tree_node** %var104, align 8, !dbg !5453
  %base105 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !5453
  %63 = bitcast %struct.tree_base* %base105 to i64*, !dbg !5453
  %bf.load106 = load i64, i64* %63, align 8, !dbg !5453
  %bf.clear107 = and i64 %bf.load106, 65535, !dbg !5453
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !5453
  %cmp109 = icmp eq i32 %bf.cast108, 34, !dbg !5453
  br i1 %cmp109, label %lor.lhs.false118, label %lor.lhs.false110, !dbg !5453

lor.lhs.false110:                                 ; preds = %lor.lhs.false102
  %64 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5453
  %ssa_name111 = bitcast %union.tree_node* %64 to %struct.tree_ssa_name*, !dbg !5453
  %var112 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name111, i32 0, i32 1, !dbg !5453
  %65 = load %union.tree_node*, %union.tree_node** %var112, align 8, !dbg !5453
  %base113 = bitcast %union.tree_node* %65 to %struct.tree_base*, !dbg !5453
  %66 = bitcast %struct.tree_base* %base113 to i64*, !dbg !5453
  %bf.load114 = load i64, i64* %66, align 8, !dbg !5453
  %bf.clear115 = and i64 %bf.load114, 65535, !dbg !5453
  %bf.cast116 = trunc i64 %bf.clear115 to i32, !dbg !5453
  %cmp117 = icmp eq i32 %bf.cast116, 36, !dbg !5453
  br i1 %cmp117, label %lor.lhs.false118, label %if.then126, !dbg !5454

lor.lhs.false118:                                 ; preds = %lor.lhs.false110, %lor.lhs.false102, %land.lhs.true94, %lor.lhs.false82, %lor.lhs.false76, %lor.lhs.false70
  %67 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5455
  %decl_common119 = bitcast %union.tree_node* %67 to %struct.tree_decl_common*, !dbg !5455
  %decl_flag_1120 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common119, i32 0, i32 2, !dbg !5455
  %68 = bitcast i40* %decl_flag_1120 to i64*, !dbg !5455
  %bf.load121 = load i64, i64* %68, align 8, !dbg !5455
  %bf.lshr122 = lshr i64 %bf.load121, 25, !dbg !5455
  %bf.clear123 = and i64 %bf.lshr122, 1, !dbg !5455
  %bf.cast124 = trunc i64 %bf.clear123 to i32, !dbg !5455
  %tobool125 = icmp ne i32 %bf.cast124, 0, !dbg !5455
  br i1 %tobool125, label %if.then126, label %if.end127, !dbg !5456

if.then126:                                       ; preds = %lor.lhs.false118, %lor.lhs.false110, %lor.lhs.false88, %if.end66
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5457
  br label %return, !dbg !5457

if.end127:                                        ; preds = %lor.lhs.false118
  %69 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5458
  %common128 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !5458
  %type129 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common128, i32 0, i32 2, !dbg !5458
  %70 = load %union.tree_node*, %union.tree_node** %type129, align 8, !dbg !5458
  store %union.tree_node* %70, %union.tree_node** %addr_type, align 8, !dbg !5459
  %71 = load %union.tree_node*, %union.tree_node** %obj, align 8, !dbg !5460
  %72 = load %union.tree_node*, %union.tree_node** %addr_type, align 8, !dbg !5461
  %73 = load %struct.elv_data*, %struct.elv_data** %dta, align 8, !dbg !5462
  %entry130 = getelementptr inbounds %struct.elv_data, %struct.elv_data* %73, i32 0, i32 1, !dbg !5463
  %74 = load %struct.edge_def*, %struct.edge_def** %entry130, align 8, !dbg !5463
  %75 = load %struct.elv_data*, %struct.elv_data** %dta, align 8, !dbg !5464
  %decl_address131 = getelementptr inbounds %struct.elv_data, %struct.elv_data* %75, i32 0, i32 2, !dbg !5465
  %76 = load %struct.htab*, %struct.htab** %decl_address131, align 8, !dbg !5465
  %call132 = call %union.tree_node* @take_address_of(%union.tree_node* %71, %union.tree_node* %72, %struct.edge_def* %74, %struct.htab* %76), !dbg !5466
  store %union.tree_node* %call132, %union.tree_node** %addr, align 8, !dbg !5467
  %77 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5468
  %78 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !5469
  store %union.tree_node* %77, %union.tree_node** %78, align 8, !dbg !5470
  %79 = load %struct.elv_data*, %struct.elv_data** %dta, align 8, !dbg !5471
  %changed133 = getelementptr inbounds %struct.elv_data, %struct.elv_data* %79, i32 0, i32 3, !dbg !5472
  store i8 1, i8* %changed133, align 8, !dbg !5473
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5474
  br label %return, !dbg !5474

if.end134:                                        ; preds = %if.end56
  %80 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5475
  %base135 = bitcast %union.tree_node* %80 to %struct.tree_base*, !dbg !5475
  %81 = bitcast %struct.tree_base* %base135 to i64*, !dbg !5475
  %bf.load136 = load i64, i64* %81, align 8, !dbg !5475
  %bf.clear137 = and i64 %bf.load136, 65535, !dbg !5475
  %bf.cast138 = trunc i64 %bf.clear137 to i32, !dbg !5475
  %idxprom139 = sext i32 %bf.cast138 to i64, !dbg !5475
  %arrayidx140 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom139, !dbg !5475
  %82 = load i32, i32* %arrayidx140, align 4, !dbg !5475
  %cmp141 = icmp uge i32 %82, 4, !dbg !5475
  br i1 %cmp141, label %land.lhs.true142, label %if.then150, !dbg !5475

land.lhs.true142:                                 ; preds = %if.end134
  %83 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5475
  %base143 = bitcast %union.tree_node* %83 to %struct.tree_base*, !dbg !5475
  %84 = bitcast %struct.tree_base* %base143 to i64*, !dbg !5475
  %bf.load144 = load i64, i64* %84, align 8, !dbg !5475
  %bf.clear145 = and i64 %bf.load144, 65535, !dbg !5475
  %bf.cast146 = trunc i64 %bf.clear145 to i32, !dbg !5475
  %idxprom147 = sext i32 %bf.cast146 to i64, !dbg !5475
  %arrayidx148 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom147, !dbg !5475
  %85 = load i32, i32* %arrayidx148, align 4, !dbg !5475
  %cmp149 = icmp ule i32 %85, 10, !dbg !5475
  br i1 %cmp149, label %if.end151, label %if.then150, !dbg !5477

if.then150:                                       ; preds = %land.lhs.true142, %if.end134
  %86 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !5478
  store i32 0, i32* %86, align 4, !dbg !5479
  br label %if.end151, !dbg !5480

if.end151:                                        ; preds = %if.then150, %land.lhs.true142
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5481
  br label %return, !dbg !5481

return:                                           ; preds = %if.end151, %if.end127, %if.then126, %if.then65, %if.end, %if.then49
  %87 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5482
  ret %union.tree_node* %87, !dbg !5482
}

declare dso_local %union.tree_node* @walk_gimple_op(%union.gimple_statement_d*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !5483 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5484, metadata !DIExpression()), !dbg !5485
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5486
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5487
  %cmp = icmp eq i32 %call, 2, !dbg !5488
  %conv = zext i1 %cmp to i32, !dbg !5488
  %conv1 = trunc i32 %conv to i8, !dbg !5487
  ret i8 %conv1, !dbg !5489
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5490 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5493, metadata !DIExpression()), !dbg !5494
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5495, metadata !DIExpression()), !dbg !5496
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5497
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5499
  %tobool = icmp ne i8 %call, 0, !dbg !5499
  br i1 %tobool, label %if.then, label %if.else, !dbg !5500

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5501
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5503
  %2 = load i32, i32* %i.addr, align 4, !dbg !5504
  %idx.ext = zext i32 %2 to i64, !dbg !5505
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !5505
  store %union.tree_node** %add.ptr, %union.tree_node*** %retval, align 8, !dbg !5506
  br label %return, !dbg !5506

if.else:                                          ; preds = %entry
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !5507
  br label %return, !dbg !5507

return:                                           ; preds = %if.else, %if.then
  %3 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !5508
  ret %union.tree_node** %3, !dbg !5508
}

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @take_address_of(%union.tree_node* %obj, %union.tree_node* %type, %struct.edge_def* %entry1, %struct.htab* %decl_address) #0 !dbg !5509 {
entry:
  %obj.addr = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %entry.addr = alloca %struct.edge_def*, align 8
  %decl_address.addr = alloca %struct.htab*, align 8
  %uid = alloca i32, align 4
  %dslot = alloca i8**, align 8
  %ielt = alloca %struct.int_tree_map, align 8
  %nielt = alloca %struct.int_tree_map*, align 8
  %var_p = alloca %union.tree_node**, align 8
  %name = alloca %union.tree_node*, align 8
  %bvar = alloca %union.tree_node*, align 8
  %addr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  store %union.tree_node* %obj, %union.tree_node** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj.addr, metadata !5512, metadata !DIExpression()), !dbg !5513
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !5514, metadata !DIExpression()), !dbg !5515
  store %struct.edge_def* %entry1, %struct.edge_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry.addr, metadata !5516, metadata !DIExpression()), !dbg !5517
  store %struct.htab* %decl_address, %struct.htab** %decl_address.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %decl_address.addr, metadata !5518, metadata !DIExpression()), !dbg !5519
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !5520, metadata !DIExpression()), !dbg !5521
  call void @llvm.dbg.declare(metadata i8*** %dslot, metadata !5522, metadata !DIExpression()), !dbg !5523
  call void @llvm.dbg.declare(metadata %struct.int_tree_map* %ielt, metadata !5524, metadata !DIExpression()), !dbg !5525
  call void @llvm.dbg.declare(metadata %struct.int_tree_map** %nielt, metadata !5526, metadata !DIExpression()), !dbg !5527
  call void @llvm.dbg.declare(metadata %union.tree_node*** %var_p, metadata !5528, metadata !DIExpression()), !dbg !5529
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !5530, metadata !DIExpression()), !dbg !5531
  call void @llvm.dbg.declare(metadata %union.tree_node** %bvar, metadata !5532, metadata !DIExpression()), !dbg !5533
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !5534, metadata !DIExpression()), !dbg !5535
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5536, metadata !DIExpression()), !dbg !5537
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !5538, metadata !DIExpression()), !dbg !5539
  %0 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !5540
  %call = call %union.tree_node* @unshare_expr(%union.tree_node* %0), !dbg !5541
  store %union.tree_node* %call, %union.tree_node** %obj.addr, align 8, !dbg !5542
  store %union.tree_node** %obj.addr, %union.tree_node*** %var_p, align 8, !dbg !5543
  br label %for.cond, !dbg !5545

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node**, %union.tree_node*** %var_p, align 8, !dbg !5546
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !5548
  %call2 = call zeroext i8 @handled_component_p(%union.tree_node* %2), !dbg !5549
  %tobool = icmp ne i8 %call2, 0, !dbg !5550
  br i1 %tobool, label %for.body, label %for.end, !dbg !5550

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !5551

for.inc:                                          ; preds = %for.body
  %3 = load %union.tree_node**, %union.tree_node*** %var_p, align 8, !dbg !5552
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !5552
  %exp = bitcast %union.tree_node* %4 to %struct.tree_exp*, !dbg !5552
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5552
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5552
  store %union.tree_node** %arrayidx, %union.tree_node*** %var_p, align 8, !dbg !5553
  br label %for.cond, !dbg !5554, !llvm.loop !5555

for.end:                                          ; preds = %for.cond
  %5 = load %union.tree_node**, %union.tree_node*** %var_p, align 8, !dbg !5557
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !5557
  %decl_minimal = bitcast %union.tree_node* %6 to %struct.tree_decl_minimal*, !dbg !5557
  %uid3 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !5557
  %7 = load i32, i32* %uid3, align 4, !dbg !5557
  store i32 %7, i32* %uid, align 4, !dbg !5558
  %8 = load i32, i32* %uid, align 4, !dbg !5559
  %uid4 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %ielt, i32 0, i32 0, !dbg !5560
  store i32 %8, i32* %uid4, align 8, !dbg !5561
  %9 = load %struct.htab*, %struct.htab** %decl_address.addr, align 8, !dbg !5562
  %10 = bitcast %struct.int_tree_map* %ielt to i8*, !dbg !5563
  %11 = load i32, i32* %uid, align 4, !dbg !5564
  %call5 = call i8** @htab_find_slot_with_hash(%struct.htab* %9, i8* %10, i32 %11, i32 1), !dbg !5565
  store i8** %call5, i8*** %dslot, align 8, !dbg !5566
  %12 = load i8**, i8*** %dslot, align 8, !dbg !5567
  %13 = load i8*, i8** %12, align 8, !dbg !5569
  %tobool6 = icmp ne i8* %13, null, !dbg !5569
  br i1 %tobool6, label %if.else, label %if.then, !dbg !5570

if.then:                                          ; preds = %for.end
  %14 = load %union.tree_node**, %union.tree_node*** %var_p, align 8, !dbg !5571
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !5573
  %16 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5574
  %call7 = call %union.tree_node* @build_addr(%union.tree_node* %15, %union.tree_node* %16), !dbg !5575
  store %union.tree_node* %call7, %union.tree_node** %addr, align 8, !dbg !5576
  %17 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5577
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !5577
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5577
  %18 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !5577
  %19 = load %union.tree_node**, %union.tree_node*** %var_p, align 8, !dbg !5578
  %20 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !5579
  %call9 = call i8* @get_name(%union.tree_node* %20), !dbg !5580
  %call10 = call %union.tree_node* @create_tmp_var(%union.tree_node* %18, i8* %call9), !dbg !5581
  store %union.tree_node* %call10, %union.tree_node** %bvar, align 8, !dbg !5582
  %21 = load %union.tree_node*, %union.tree_node** %bvar, align 8, !dbg !5583
  %call11 = call zeroext i8 @add_referenced_var(%union.tree_node* %21), !dbg !5584
  %22 = load %union.tree_node*, %union.tree_node** %bvar, align 8, !dbg !5585
  %23 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !5585
  %call12 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %22, %union.tree_node* %23), !dbg !5585
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %stmt, align 8, !dbg !5586
  %24 = load %union.tree_node*, %union.tree_node** %bvar, align 8, !dbg !5587
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5588
  %call13 = call %union.tree_node* @make_ssa_name(%union.tree_node* %24, %union.gimple_statement_d* %25), !dbg !5589
  store %union.tree_node* %call13, %union.tree_node** %name, align 8, !dbg !5590
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5591
  %27 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5592
  call void @gimple_assign_set_lhs(%union.gimple_statement_d* %26, %union.tree_node* %27), !dbg !5593
  %28 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !5594
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5595
  %call14 = call %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def* %28, %union.gimple_statement_d* %29), !dbg !5596
  %call15 = call i8* @xmalloc(i64 16), !dbg !5597
  %30 = bitcast i8* %call15 to %struct.int_tree_map*, !dbg !5597
  store %struct.int_tree_map* %30, %struct.int_tree_map** %nielt, align 8, !dbg !5598
  %31 = load i32, i32* %uid, align 4, !dbg !5599
  %32 = load %struct.int_tree_map*, %struct.int_tree_map** %nielt, align 8, !dbg !5600
  %uid16 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %32, i32 0, i32 0, !dbg !5601
  store i32 %31, i32* %uid16, align 8, !dbg !5602
  %33 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5603
  %34 = load %struct.int_tree_map*, %struct.int_tree_map** %nielt, align 8, !dbg !5604
  %to = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %34, i32 0, i32 1, !dbg !5605
  store %union.tree_node* %33, %union.tree_node** %to, align 8, !dbg !5606
  %35 = load %struct.int_tree_map*, %struct.int_tree_map** %nielt, align 8, !dbg !5607
  %36 = bitcast %struct.int_tree_map* %35 to i8*, !dbg !5607
  %37 = load i8**, i8*** %dslot, align 8, !dbg !5608
  store i8* %36, i8** %37, align 8, !dbg !5609
  br label %if.end, !dbg !5610

if.else:                                          ; preds = %for.end
  %38 = load i8**, i8*** %dslot, align 8, !dbg !5611
  %39 = load i8*, i8** %38, align 8, !dbg !5612
  %40 = bitcast i8* %39 to %struct.int_tree_map*, !dbg !5613
  %to17 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %40, i32 0, i32 1, !dbg !5614
  %41 = load %union.tree_node*, %union.tree_node** %to17, align 8, !dbg !5614
  store %union.tree_node* %41, %union.tree_node** %name, align 8, !dbg !5615
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %42 = load %union.tree_node**, %union.tree_node*** %var_p, align 8, !dbg !5616
  %cmp = icmp ne %union.tree_node** %42, %obj.addr, !dbg !5618
  br i1 %cmp, label %if.then18, label %if.end29, !dbg !5619

if.then18:                                        ; preds = %if.end
  %43 = load %union.tree_node**, %union.tree_node*** %var_p, align 8, !dbg !5620
  %44 = load %union.tree_node*, %union.tree_node** %43, align 8, !dbg !5620
  %common19 = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !5620
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !5620
  %45 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !5620
  %46 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5620
  %call21 = call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %45, %union.tree_node* %46), !dbg !5620
  %47 = load %union.tree_node**, %union.tree_node*** %var_p, align 8, !dbg !5622
  store %union.tree_node* %call21, %union.tree_node** %47, align 8, !dbg !5623
  %48 = load %union.tree_node*, %union.tree_node** %obj.addr, align 8, !dbg !5624
  %49 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5625
  %call22 = call %union.tree_node* @build_addr(%union.tree_node* %48, %union.tree_node* %49), !dbg !5626
  %call23 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %call22, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !5627
  store %union.tree_node* %call23, %union.tree_node** %name, align 8, !dbg !5628
  %50 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5629
  %call24 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %50), !dbg !5631
  %tobool25 = icmp ne i8 %call24, 0, !dbg !5631
  br i1 %tobool25, label %if.end28, label %if.then26, !dbg !5632

if.then26:                                        ; preds = %if.then18
  %51 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !5633
  %52 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5634
  %call27 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %51, %struct.gimple_seq_d* %52), !dbg !5635
  br label %if.end28, !dbg !5635

if.end28:                                         ; preds = %if.then26, %if.then18
  br label %if.end29, !dbg !5636

if.end29:                                         ; preds = %if.end28, %if.end
  %53 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5637
  %common30 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !5637
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !5637
  %54 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !5637
  %55 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5639
  %cmp32 = icmp ne %union.tree_node* %54, %55, !dbg !5640
  br i1 %cmp32, label %if.then33, label %if.end41, !dbg !5641

if.then33:                                        ; preds = %if.end29
  %56 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5642
  %57 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5642
  %call34 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %56, %union.tree_node* %57), !dbg !5642
  %call35 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %call34, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !5644
  store %union.tree_node* %call35, %union.tree_node** %name, align 8, !dbg !5645
  %58 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5646
  %call36 = call zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %58), !dbg !5648
  %tobool37 = icmp ne i8 %call36, 0, !dbg !5648
  br i1 %tobool37, label %if.end40, label %if.then38, !dbg !5649

if.then38:                                        ; preds = %if.then33
  %59 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !5650
  %60 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5651
  %call39 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %59, %struct.gimple_seq_d* %60), !dbg !5652
  br label %if.end40, !dbg !5652

if.end40:                                         ; preds = %if.then38, %if.then33
  br label %if.end41, !dbg !5653

if.end41:                                         ; preds = %if.end40, %if.end29
  %61 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5654
  ret %union.tree_node* %61, !dbg !5655
}

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @is_gimple_val(%union.tree_node*) #2

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !5656 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5662, metadata !DIExpression()), !dbg !5663
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5664
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5664
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5664
  %bf.load = load i64, i64* %1, align 8, !dbg !5664
  %bf.clear = and i64 %bf.load, 65535, !dbg !5664
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5664
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !5665

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !5666
  br label %return, !dbg !5666

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5668
  br label %return, !dbg !5668

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !5669
  ret i8 %2, !dbg !5669
}

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

declare dso_local %union.tree_node* @build_addr(%union.tree_node*, %union.tree_node*) #2

declare dso_local i8* @get_name(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !5670 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5671, metadata !DIExpression()), !dbg !5672
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !5673, metadata !DIExpression()), !dbg !5674
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5675
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !5676
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !5677
  %2 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !5678
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !5678
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5680

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !5681
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5681
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !5681
  %bf.load = load i64, i64* %4, align 8, !dbg !5681
  %bf.clear = and i64 %bf.load, 65535, !dbg !5681
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5681
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !5682
  br i1 %cmp, label %if.then, label %if.end, !dbg !5683

if.then:                                          ; preds = %land.lhs.true
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5684
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !5685
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !5685
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5685
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5686
  br label %if.end, !dbg !5685

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !5687
}

declare dso_local %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %s) #0 !dbg !5688 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5691, metadata !DIExpression()), !dbg !5692
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5693
  %cmp = icmp eq %struct.gimple_seq_d* %0, null, !dbg !5694
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !5695

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5696
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5697
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5697
  %cmp1 = icmp eq %struct.gimple_seq_node_d* %2, null, !dbg !5698
  br label %lor.end, !dbg !5695

lor.end:                                          ; preds = %lor.rhs, %entry
  %3 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %3 to i32, !dbg !5695
  %conv = trunc i32 %lor.ext to i8, !dbg !5693
  ret i8 %conv, !dbg !5699
}

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_pred(%struct.basic_block_def* %bb) #0 !dbg !5700 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5701, metadata !DIExpression()), !dbg !5702
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5703
  %call = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %0), !dbg !5704
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 0, !dbg !5705
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5705
  ret %struct.basic_block_def* %1, !dbg !5706
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @name_to_copy_elt_hash(i8* %aa) #0 !dbg !5707 {
entry:
  %aa.addr = alloca i8*, align 8
  %a = alloca %struct.name_to_copy_elt*, align 8
  store i8* %aa, i8** %aa.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %aa.addr, metadata !5708, metadata !DIExpression()), !dbg !5709
  call void @llvm.dbg.declare(metadata %struct.name_to_copy_elt** %a, metadata !5710, metadata !DIExpression()), !dbg !5711
  %0 = load i8*, i8** %aa.addr, align 8, !dbg !5712
  %1 = bitcast i8* %0 to %struct.name_to_copy_elt*, !dbg !5713
  store %struct.name_to_copy_elt* %1, %struct.name_to_copy_elt** %a, align 8, !dbg !5711
  %2 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %a, align 8, !dbg !5714
  %version = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %2, i32 0, i32 0, !dbg !5715
  %3 = load i32, i32* %version, align 8, !dbg !5715
  ret i32 %3, !dbg !5716
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @name_to_copy_elt_eq(i8* %aa, i8* %bb) #0 !dbg !5717 {
entry:
  %aa.addr = alloca i8*, align 8
  %bb.addr = alloca i8*, align 8
  %a = alloca %struct.name_to_copy_elt*, align 8
  %b = alloca %struct.name_to_copy_elt*, align 8
  store i8* %aa, i8** %aa.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %aa.addr, metadata !5718, metadata !DIExpression()), !dbg !5719
  store i8* %bb, i8** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %bb.addr, metadata !5720, metadata !DIExpression()), !dbg !5721
  call void @llvm.dbg.declare(metadata %struct.name_to_copy_elt** %a, metadata !5722, metadata !DIExpression()), !dbg !5723
  %0 = load i8*, i8** %aa.addr, align 8, !dbg !5724
  %1 = bitcast i8* %0 to %struct.name_to_copy_elt*, !dbg !5725
  store %struct.name_to_copy_elt* %1, %struct.name_to_copy_elt** %a, align 8, !dbg !5723
  call void @llvm.dbg.declare(metadata %struct.name_to_copy_elt** %b, metadata !5726, metadata !DIExpression()), !dbg !5727
  %2 = load i8*, i8** %bb.addr, align 8, !dbg !5728
  %3 = bitcast i8* %2 to %struct.name_to_copy_elt*, !dbg !5729
  store %struct.name_to_copy_elt* %3, %struct.name_to_copy_elt** %b, align 8, !dbg !5727
  %4 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %a, align 8, !dbg !5730
  %version = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %4, i32 0, i32 0, !dbg !5731
  %5 = load i32, i32* %version, align 8, !dbg !5731
  %6 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %b, align 8, !dbg !5732
  %version1 = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %6, i32 0, i32 0, !dbg !5733
  %7 = load i32, i32* %version1, align 8, !dbg !5733
  %cmp = icmp eq i32 %5, %7, !dbg !5734
  %conv = zext i1 %cmp to i32, !dbg !5734
  ret i32 %conv, !dbg !5735
}

; Function Attrs: noinline nounwind uwtable
define internal void @separate_decls_in_region_stmt(%struct.edge_def* %entry1, %struct.edge_def* %exit, %union.gimple_statement_d* %stmt, %struct.htab* %name_copies, %struct.htab* %decl_copies) #0 !dbg !5736 {
entry:
  %entry.addr = alloca %struct.edge_def*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %name_copies.addr = alloca %struct.htab*, align 8
  %decl_copies.addr = alloca %struct.htab*, align 8
  %use = alloca %struct.ssa_use_operand_d*, align 8
  %def = alloca %union.tree_node**, align 8
  %oi = alloca %struct.ssa_operand_iterator_d, align 8
  %name = alloca %union.tree_node*, align 8
  %copy = alloca %union.tree_node*, align 8
  %copy_name_p = alloca i8, align 1
  store %struct.edge_def* %entry1, %struct.edge_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry.addr, metadata !5739, metadata !DIExpression()), !dbg !5740
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !5741, metadata !DIExpression()), !dbg !5742
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5743, metadata !DIExpression()), !dbg !5744
  store %struct.htab* %name_copies, %struct.htab** %name_copies.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %name_copies.addr, metadata !5745, metadata !DIExpression()), !dbg !5746
  store %struct.htab* %decl_copies, %struct.htab** %decl_copies.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %decl_copies.addr, metadata !5747, metadata !DIExpression()), !dbg !5748
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use, metadata !5749, metadata !DIExpression()), !dbg !5750
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def, metadata !5751, metadata !DIExpression()), !dbg !5752
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %oi, metadata !5753, metadata !DIExpression()), !dbg !5766
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !5767, metadata !DIExpression()), !dbg !5768
  call void @llvm.dbg.declare(metadata %union.tree_node** %copy, metadata !5769, metadata !DIExpression()), !dbg !5770
  call void @llvm.dbg.declare(metadata i8* %copy_name_p, metadata !5771, metadata !DIExpression()), !dbg !5772
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5773
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %0), !dbg !5774
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5775
  %call = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5775
  %cmp = icmp eq i32 %call, 16, !dbg !5775
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5775

cond.true:                                        ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5775
  %call2 = call %union.tree_node** @op_iter_init_phidef(%struct.ssa_operand_iterator_d* %oi, %union.gimple_statement_d* %2, i32 2), !dbg !5775
  br label %cond.end, !dbg !5775

cond.false:                                       ; preds = %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5775
  %call3 = call %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %oi, %union.gimple_statement_d* %3, i32 2), !dbg !5775
  br label %cond.end, !dbg !5775

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ %call2, %cond.true ], [ %call3, %cond.false ], !dbg !5775
  store %union.tree_node** %cond, %union.tree_node*** %def, align 8, !dbg !5775
  br label %for.cond, !dbg !5775

for.cond:                                         ; preds = %for.inc, %cond.end
  %call4 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %oi), !dbg !5777
  %tobool = icmp ne i8 %call4, 0, !dbg !5777
  %lnot = xor i1 %tobool, true, !dbg !5777
  br i1 %lnot, label %for.body, label %for.end, !dbg !5775

for.body:                                         ; preds = %for.cond
  %4 = load %union.tree_node**, %union.tree_node*** %def, align 8, !dbg !5779
  %call5 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %4), !dbg !5779
  store %union.tree_node* %call5, %union.tree_node** %name, align 8, !dbg !5781
  %5 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5782
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !5782
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !5782
  %bf.load = load i64, i64* %6, align 8, !dbg !5782
  %bf.clear = and i64 %bf.load, 65535, !dbg !5782
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5782
  %cmp6 = icmp eq i32 %bf.cast, 141, !dbg !5782
  br i1 %cmp6, label %cond.false8, label %cond.true7, !dbg !5782

cond.true7:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !5782
  br label %cond.end9, !dbg !5782

cond.false8:                                      ; preds = %for.body
  br label %cond.end9, !dbg !5782

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !5782
  %7 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5783
  %8 = load %struct.htab*, %struct.htab** %name_copies.addr, align 8, !dbg !5784
  %9 = load %struct.htab*, %struct.htab** %decl_copies.addr, align 8, !dbg !5785
  %call11 = call %union.tree_node* @separate_decls_in_region_name(%union.tree_node* %7, %struct.htab* %8, %struct.htab* %9, i8 zeroext 0), !dbg !5786
  store %union.tree_node* %call11, %union.tree_node** %copy, align 8, !dbg !5787
  %10 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !5788
  %11 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5788
  %cmp12 = icmp eq %union.tree_node* %10, %11, !dbg !5788
  br i1 %cmp12, label %cond.false14, label %cond.true13, !dbg !5788

cond.true13:                                      ; preds = %cond.end9
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 690, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !5788
  br label %cond.end15, !dbg !5788

cond.false14:                                     ; preds = %cond.end9
  br label %cond.end15, !dbg !5788

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false14 ], !dbg !5788
  br label %for.inc, !dbg !5789

for.inc:                                          ; preds = %cond.end15
  %call17 = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %oi), !dbg !5777
  store %union.tree_node** %call17, %union.tree_node*** %def, align 8, !dbg !5777
  br label %for.cond, !dbg !5777, !llvm.loop !5790

for.end:                                          ; preds = %for.cond
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5792
  %call18 = call i32 @gimple_code(%union.gimple_statement_d* %12), !dbg !5792
  %cmp19 = icmp eq i32 %call18, 16, !dbg !5792
  br i1 %cmp19, label %cond.true20, label %cond.false22, !dbg !5792

cond.true20:                                      ; preds = %for.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5792
  %call21 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %oi, %union.gimple_statement_d* %13, i32 1), !dbg !5792
  br label %cond.end24, !dbg !5792

cond.false22:                                     ; preds = %for.end
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5792
  %call23 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %oi, %union.gimple_statement_d* %14, i32 1), !dbg !5792
  br label %cond.end24, !dbg !5792

cond.end24:                                       ; preds = %cond.false22, %cond.true20
  %cond25 = phi %struct.ssa_use_operand_d* [ %call21, %cond.true20 ], [ %call23, %cond.false22 ], !dbg !5792
  store %struct.ssa_use_operand_d* %cond25, %struct.ssa_use_operand_d** %use, align 8, !dbg !5792
  br label %for.cond26, !dbg !5792

for.cond26:                                       ; preds = %for.inc39, %cond.end24
  %call27 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %oi), !dbg !5794
  %tobool28 = icmp ne i8 %call27, 0, !dbg !5794
  %lnot29 = xor i1 %tobool28, true, !dbg !5794
  br i1 %lnot29, label %for.body30, label %for.end41, !dbg !5792

for.body30:                                       ; preds = %for.cond26
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !5796
  %call31 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %15), !dbg !5796
  store %union.tree_node* %call31, %union.tree_node** %name, align 8, !dbg !5798
  %16 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5799
  %base32 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5799
  %17 = bitcast %struct.tree_base* %base32 to i64*, !dbg !5799
  %bf.load33 = load i64, i64* %17, align 8, !dbg !5799
  %bf.clear34 = and i64 %bf.load33, 65535, !dbg !5799
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !5799
  %cmp36 = icmp ne i32 %bf.cast35, 141, !dbg !5801
  br i1 %cmp36, label %if.then, label %if.end, !dbg !5802

if.then:                                          ; preds = %for.body30
  br label %for.inc39, !dbg !5803

if.end:                                           ; preds = %for.body30
  %18 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !5804
  %19 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !5805
  %20 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5806
  %call37 = call zeroext i8 @expr_invariant_in_region_p(%struct.edge_def* %18, %struct.edge_def* %19, %union.tree_node* %20), !dbg !5807
  store i8 %call37, i8* %copy_name_p, align 1, !dbg !5808
  %21 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5809
  %22 = load %struct.htab*, %struct.htab** %name_copies.addr, align 8, !dbg !5810
  %23 = load %struct.htab*, %struct.htab** %decl_copies.addr, align 8, !dbg !5811
  %24 = load i8, i8* %copy_name_p, align 1, !dbg !5812
  %call38 = call %union.tree_node* @separate_decls_in_region_name(%union.tree_node* %21, %struct.htab* %22, %struct.htab* %23, i8 zeroext %24), !dbg !5813
  store %union.tree_node* %call38, %union.tree_node** %copy, align 8, !dbg !5814
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !5815
  %26 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !5815
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %25, %union.tree_node* %26), !dbg !5815
  br label %for.inc39, !dbg !5816

for.inc39:                                        ; preds = %if.end, %if.then
  %call40 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %oi), !dbg !5794
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %use, align 8, !dbg !5794
  br label %for.cond26, !dbg !5794, !llvm.loop !5817

for.end41:                                        ; preds = %for.cond26
  ret void, !dbg !5819
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @separate_decls_in_region_debug_bind(%union.gimple_statement_d* %stmt, %struct.htab* %name_copies, %struct.htab* %decl_copies) #0 !dbg !5820 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %name_copies.addr = alloca %struct.htab*, align 8
  %decl_copies.addr = alloca %struct.htab*, align 8
  %use = alloca %struct.ssa_use_operand_d*, align 8
  %oi = alloca %struct.ssa_operand_iterator_d, align 8
  %var = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %ielt = alloca %struct.int_tree_map, align 8
  %elt = alloca %struct.name_to_copy_elt, align 8
  %slot = alloca i8**, align 8
  %dslot = alloca i8**, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5823, metadata !DIExpression()), !dbg !5824
  store %struct.htab* %name_copies, %struct.htab** %name_copies.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %name_copies.addr, metadata !5825, metadata !DIExpression()), !dbg !5826
  store %struct.htab* %decl_copies, %struct.htab** %decl_copies.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %decl_copies.addr, metadata !5827, metadata !DIExpression()), !dbg !5828
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use, metadata !5829, metadata !DIExpression()), !dbg !5830
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %oi, metadata !5831, metadata !DIExpression()), !dbg !5832
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5833, metadata !DIExpression()), !dbg !5834
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !5835, metadata !DIExpression()), !dbg !5836
  call void @llvm.dbg.declare(metadata %struct.int_tree_map* %ielt, metadata !5837, metadata !DIExpression()), !dbg !5838
  call void @llvm.dbg.declare(metadata %struct.name_to_copy_elt* %elt, metadata !5839, metadata !DIExpression()), !dbg !5840
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5841, metadata !DIExpression()), !dbg !5842
  call void @llvm.dbg.declare(metadata i8*** %dslot, metadata !5843, metadata !DIExpression()), !dbg !5844
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5845
  %call = call %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %0), !dbg !5846
  store %union.tree_node* %call, %union.tree_node** %var, align 8, !dbg !5847
  %1 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5848
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5848
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5848
  %bf.load = load i64, i64* %2, align 8, !dbg !5848
  %bf.clear = and i64 %bf.load, 65535, !dbg !5848
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5848
  %cmp = icmp eq i32 %bf.cast, 37, !dbg !5850
  br i1 %cmp, label %if.then, label %if.end, !dbg !5851

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !5852
  br label %return, !dbg !5852

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5853
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5853
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5853
  %bf.load2 = load i64, i64* %4, align 8, !dbg !5853
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5853
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5853
  %idxprom = sext i32 %bf.cast4 to i64, !dbg !5853
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5853
  %5 = load i32, i32* %arrayidx, align 4, !dbg !5853
  %cmp5 = icmp eq i32 %5, 3, !dbg !5853
  br i1 %cmp5, label %land.lhs.true, label %cond.true, !dbg !5853

land.lhs.true:                                    ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5853
  %base6 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5853
  %7 = bitcast %struct.tree_base* %base6 to i64*, !dbg !5853
  %bf.load7 = load i64, i64* %7, align 8, !dbg !5853
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !5853
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !5853
  %cmp10 = icmp eq i32 %bf.cast9, 32, !dbg !5853
  br i1 %cmp10, label %cond.false, label %lor.lhs.false, !dbg !5853

lor.lhs.false:                                    ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5853
  %base11 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5853
  %9 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5853
  %bf.load12 = load i64, i64* %9, align 8, !dbg !5853
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !5853
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !5853
  %cmp15 = icmp eq i32 %bf.cast14, 34, !dbg !5853
  br i1 %cmp15, label %cond.false, label %lor.lhs.false16, !dbg !5853

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5853
  %base17 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5853
  %11 = bitcast %struct.tree_base* %base17 to i64*, !dbg !5853
  %bf.load18 = load i64, i64* %11, align 8, !dbg !5853
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !5853
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !5853
  %cmp21 = icmp eq i32 %bf.cast20, 36, !dbg !5853
  br i1 %cmp21, label %cond.false, label %lor.lhs.false22, !dbg !5853

lor.lhs.false22:                                  ; preds = %lor.lhs.false16
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5853
  %base23 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !5853
  %13 = bitcast %struct.tree_base* %base23 to i64*, !dbg !5853
  %bf.load24 = load i64, i64* %13, align 8, !dbg !5853
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !5853
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !5853
  %cmp27 = icmp eq i32 %bf.cast26, 141, !dbg !5853
  br i1 %cmp27, label %land.lhs.true28, label %cond.true, !dbg !5853

land.lhs.true28:                                  ; preds = %lor.lhs.false22
  %14 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5853
  %ssa_name = bitcast %union.tree_node* %14 to %struct.tree_ssa_name*, !dbg !5853
  %var29 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5853
  %15 = load %union.tree_node*, %union.tree_node** %var29, align 8, !dbg !5853
  %base30 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !5853
  %16 = bitcast %struct.tree_base* %base30 to i64*, !dbg !5853
  %bf.load31 = load i64, i64* %16, align 8, !dbg !5853
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !5853
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !5853
  %cmp34 = icmp eq i32 %bf.cast33, 32, !dbg !5853
  br i1 %cmp34, label %cond.false, label %lor.lhs.false35, !dbg !5853

lor.lhs.false35:                                  ; preds = %land.lhs.true28
  %17 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5853
  %ssa_name36 = bitcast %union.tree_node* %17 to %struct.tree_ssa_name*, !dbg !5853
  %var37 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name36, i32 0, i32 1, !dbg !5853
  %18 = load %union.tree_node*, %union.tree_node** %var37, align 8, !dbg !5853
  %base38 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !5853
  %19 = bitcast %struct.tree_base* %base38 to i64*, !dbg !5853
  %bf.load39 = load i64, i64* %19, align 8, !dbg !5853
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !5853
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !5853
  %cmp42 = icmp eq i32 %bf.cast41, 34, !dbg !5853
  br i1 %cmp42, label %cond.false, label %lor.lhs.false43, !dbg !5853

lor.lhs.false43:                                  ; preds = %lor.lhs.false35
  %20 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5853
  %ssa_name44 = bitcast %union.tree_node* %20 to %struct.tree_ssa_name*, !dbg !5853
  %var45 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name44, i32 0, i32 1, !dbg !5853
  %21 = load %union.tree_node*, %union.tree_node** %var45, align 8, !dbg !5853
  %base46 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !5853
  %22 = bitcast %struct.tree_base* %base46 to i64*, !dbg !5853
  %bf.load47 = load i64, i64* %22, align 8, !dbg !5853
  %bf.clear48 = and i64 %bf.load47, 65535, !dbg !5853
  %bf.cast49 = trunc i64 %bf.clear48 to i32, !dbg !5853
  %cmp50 = icmp eq i32 %bf.cast49, 36, !dbg !5853
  br i1 %cmp50, label %cond.false, label %cond.true, !dbg !5853

cond.true:                                        ; preds = %lor.lhs.false43, %lor.lhs.false22, %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 727, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !5853
  br label %cond.end, !dbg !5853

cond.false:                                       ; preds = %lor.lhs.false43, %lor.lhs.false35, %land.lhs.true28, %lor.lhs.false16, %lor.lhs.false, %land.lhs.true
  br label %cond.end, !dbg !5853

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5853
  %23 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5854
  %decl_minimal = bitcast %union.tree_node* %23 to %struct.tree_decl_minimal*, !dbg !5854
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !5854
  %24 = load i32, i32* %uid, align 4, !dbg !5854
  %uid51 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %ielt, i32 0, i32 0, !dbg !5855
  store i32 %24, i32* %uid51, align 8, !dbg !5856
  %25 = load %struct.htab*, %struct.htab** %decl_copies.addr, align 8, !dbg !5857
  %26 = bitcast %struct.int_tree_map* %ielt to i8*, !dbg !5858
  %uid52 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %ielt, i32 0, i32 0, !dbg !5859
  %27 = load i32, i32* %uid52, align 8, !dbg !5859
  %call53 = call i8** @htab_find_slot_with_hash(%struct.htab* %25, i8* %26, i32 %27, i32 0), !dbg !5860
  store i8** %call53, i8*** %dslot, align 8, !dbg !5861
  %28 = load i8**, i8*** %dslot, align 8, !dbg !5862
  %tobool = icmp ne i8** %28, null, !dbg !5862
  br i1 %tobool, label %if.end55, label %if.then54, !dbg !5864

if.then54:                                        ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !5865
  br label %return, !dbg !5865

if.end55:                                         ; preds = %cond.end
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5866
  %30 = load i8**, i8*** %dslot, align 8, !dbg !5867
  %31 = load i8*, i8** %30, align 8, !dbg !5868
  %32 = bitcast i8* %31 to %struct.int_tree_map*, !dbg !5869
  %to = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %32, i32 0, i32 1, !dbg !5870
  %33 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !5870
  call void @gimple_debug_bind_set_var(%union.gimple_statement_d* %29, %union.tree_node* %33), !dbg !5871
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5872
  %call56 = call i32 @gimple_code(%union.gimple_statement_d* %34), !dbg !5872
  %cmp57 = icmp eq i32 %call56, 16, !dbg !5872
  br i1 %cmp57, label %cond.true58, label %cond.false60, !dbg !5872

cond.true58:                                      ; preds = %if.end55
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5872
  %call59 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %oi, %union.gimple_statement_d* %35, i32 1), !dbg !5872
  br label %cond.end62, !dbg !5872

cond.false60:                                     ; preds = %if.end55
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5872
  %call61 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %oi, %union.gimple_statement_d* %36, i32 1), !dbg !5872
  br label %cond.end62, !dbg !5872

cond.end62:                                       ; preds = %cond.false60, %cond.true58
  %cond63 = phi %struct.ssa_use_operand_d* [ %call59, %cond.true58 ], [ %call61, %cond.false60 ], !dbg !5872
  store %struct.ssa_use_operand_d* %cond63, %struct.ssa_use_operand_d** %use, align 8, !dbg !5872
  br label %for.cond, !dbg !5872

for.cond:                                         ; preds = %for.inc, %cond.end62
  %call64 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %oi), !dbg !5874
  %tobool65 = icmp ne i8 %call64, 0, !dbg !5874
  %lnot = xor i1 %tobool65, true, !dbg !5874
  br i1 %lnot, label %for.body, label %for.end, !dbg !5872

for.body:                                         ; preds = %for.cond
  %37 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !5876
  %call66 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %37), !dbg !5876
  store %union.tree_node* %call66, %union.tree_node** %name, align 8, !dbg !5878
  %38 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5879
  %base67 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !5879
  %39 = bitcast %struct.tree_base* %base67 to i64*, !dbg !5879
  %bf.load68 = load i64, i64* %39, align 8, !dbg !5879
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !5879
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !5879
  %cmp71 = icmp ne i32 %bf.cast70, 141, !dbg !5881
  br i1 %cmp71, label %if.then72, label %if.end73, !dbg !5882

if.then72:                                        ; preds = %for.body
  br label %for.inc, !dbg !5883

if.end73:                                         ; preds = %for.body
  %40 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5884
  %ssa_name74 = bitcast %union.tree_node* %40 to %struct.tree_ssa_name*, !dbg !5884
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name74, i32 0, i32 3, !dbg !5884
  %41 = load i32, i32* %version, align 8, !dbg !5884
  %version75 = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %elt, i32 0, i32 0, !dbg !5885
  store i32 %41, i32* %version75, align 8, !dbg !5886
  %42 = load %struct.htab*, %struct.htab** %name_copies.addr, align 8, !dbg !5887
  %43 = bitcast %struct.name_to_copy_elt* %elt to i8*, !dbg !5888
  %version76 = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %elt, i32 0, i32 0, !dbg !5889
  %44 = load i32, i32* %version76, align 8, !dbg !5889
  %call77 = call i8** @htab_find_slot_with_hash(%struct.htab* %42, i8* %43, i32 %44, i32 0), !dbg !5890
  store i8** %call77, i8*** %slot, align 8, !dbg !5891
  %45 = load i8**, i8*** %slot, align 8, !dbg !5892
  %tobool78 = icmp ne i8** %45, null, !dbg !5892
  br i1 %tobool78, label %if.end80, label %if.then79, !dbg !5894

if.then79:                                        ; preds = %if.end73
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5895
  call void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %46), !dbg !5897
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5898
  call void @update_stmt(%union.gimple_statement_d* %47), !dbg !5899
  br label %for.end, !dbg !5900

if.end80:                                         ; preds = %if.end73
  %48 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !5901
  %49 = load i8**, i8*** %slot, align 8, !dbg !5901
  %50 = load i8*, i8** %49, align 8, !dbg !5901
  %51 = bitcast i8* %50 to %struct.name_to_copy_elt*, !dbg !5901
  %new_name = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %51, i32 0, i32 1, !dbg !5901
  %52 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !5901
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %48, %union.tree_node* %52), !dbg !5901
  br label %for.inc, !dbg !5902

for.inc:                                          ; preds = %if.end80, %if.then72
  %call81 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %oi), !dbg !5874
  store %struct.ssa_use_operand_d* %call81, %struct.ssa_use_operand_d** %use, align 8, !dbg !5874
  br label %for.cond, !dbg !5874, !llvm.loop !5903

for.end:                                          ; preds = %if.then79, %for.cond
  store i8 0, i8* %retval, align 1, !dbg !5905
  br label %return, !dbg !5905

return:                                           ; preds = %for.end, %if.then54, %if.then
  %53 = load i8, i8* %retval, align 1, !dbg !5906
  ret i8 %53, !dbg !5906
}

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @create_tmp_var_name(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_field_for_name(i8** %slot, i8* %data) #0 !dbg !5907 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %elt = alloca %struct.name_to_copy_elt*, align 8
  %type = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !5908, metadata !DIExpression()), !dbg !5909
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5910, metadata !DIExpression()), !dbg !5911
  call void @llvm.dbg.declare(metadata %struct.name_to_copy_elt** %elt, metadata !5912, metadata !DIExpression()), !dbg !5914
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !5915
  %1 = load i8*, i8** %0, align 8, !dbg !5916
  %2 = bitcast i8* %1 to %struct.name_to_copy_elt*, !dbg !5917
  store %struct.name_to_copy_elt* %2, %struct.name_to_copy_elt** %elt, align 8, !dbg !5914
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5918, metadata !DIExpression()), !dbg !5919
  %3 = load i8*, i8** %data.addr, align 8, !dbg !5920
  %4 = bitcast i8* %3 to %union.tree_node*, !dbg !5921
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !5919
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !5922, metadata !DIExpression()), !dbg !5923
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5924
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5924
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !5924
  %6 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5924
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %6, i32 0, i32 2, !dbg !5924
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !5924
  %tobool = icmp ne %struct.VEC_tree_gc* %7, null, !dbg !5924
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5924

cond.true:                                        ; preds = %entry
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5924
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !5924
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 3, !dbg !5924
  %9 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !5924
  %ssa_names3 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %9, i32 0, i32 2, !dbg !5924
  %10 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names3, align 8, !dbg !5924
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %10, i32 0, i32 0, !dbg !5924
  br label %cond.end, !dbg !5924

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5924

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5924
  %11 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %elt, align 8, !dbg !5924
  %version = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %11, i32 0, i32 0, !dbg !5924
  %12 = load i32, i32* %version, align 8, !dbg !5924
  %call = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %12), !dbg !5924
  store %union.tree_node* %call, %union.tree_node** %name, align 8, !dbg !5923
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5925, metadata !DIExpression()), !dbg !5926
  %13 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5927
  %ssa_name = bitcast %union.tree_node* %13 to %struct.tree_ssa_name*, !dbg !5927
  %var4 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5927
  %14 = load %union.tree_node*, %union.tree_node** %var4, align 8, !dbg !5927
  store %union.tree_node* %14, %union.tree_node** %var, align 8, !dbg !5926
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !5928, metadata !DIExpression()), !dbg !5929
  %15 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5930
  %decl_minimal = bitcast %union.tree_node* %15 to %struct.tree_decl_minimal*, !dbg !5930
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !5930
  %16 = load i32, i32* %locus, align 8, !dbg !5930
  %17 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5930
  %decl_minimal5 = bitcast %union.tree_node* %17 to %struct.tree_decl_minimal*, !dbg !5930
  %name6 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal5, i32 0, i32 3, !dbg !5930
  %18 = load %union.tree_node*, %union.tree_node** %name6, align 8, !dbg !5930
  %19 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5930
  %common = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !5930
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5930
  %20 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !5930
  %call8 = call %union.tree_node* @build_decl_stat(i32 %16, i32 31, %union.tree_node* %18, %union.tree_node* %20), !dbg !5930
  store %union.tree_node* %call8, %union.tree_node** %field, align 8, !dbg !5929
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5931
  %22 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5932
  call void @insert_field_into_struct(%union.tree_node* %21, %union.tree_node* %22), !dbg !5933
  %23 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5934
  %24 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %elt, align 8, !dbg !5935
  %field9 = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %24, i32 0, i32 2, !dbg !5936
  store %union.tree_node* %23, %union.tree_node** %field9, align 8, !dbg !5937
  ret i32 1, !dbg !5938
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_field_for_reduction(i8** %slot, i8* %data) #0 !dbg !5939 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %red = alloca %struct.reduction_info*, align 8
  %type = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %field = alloca %union.tree_node*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !5940, metadata !DIExpression()), !dbg !5941
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5942, metadata !DIExpression()), !dbg !5943
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %red, metadata !5944, metadata !DIExpression()), !dbg !5945
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !5946
  %1 = load i8*, i8** %0, align 8, !dbg !5947
  %2 = bitcast i8* %1 to %struct.reduction_info*, !dbg !5948
  store %struct.reduction_info* %2, %struct.reduction_info** %red, align 8, !dbg !5945
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5949, metadata !DIExpression()), !dbg !5951
  %3 = load i8*, i8** %data.addr, align 8, !dbg !5952
  %4 = bitcast i8* %3 to %union.tree_node*, !dbg !5953
  store %union.tree_node* %4, %union.tree_node** %type, align 8, !dbg !5951
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5954, metadata !DIExpression()), !dbg !5955
  %5 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !5956
  %reduc_stmt = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %5, i32 0, i32 0, !dbg !5956
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt, align 8, !dbg !5956
  %call = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %6), !dbg !5956
  %ssa_name = bitcast %union.tree_node* %call to %struct.tree_ssa_name*, !dbg !5956
  %var1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5956
  %7 = load %union.tree_node*, %union.tree_node** %var1, align 8, !dbg !5956
  store %union.tree_node* %7, %union.tree_node** %var, align 8, !dbg !5955
  call void @llvm.dbg.declare(metadata %union.tree_node** %field, metadata !5957, metadata !DIExpression()), !dbg !5958
  %8 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !5959
  %reduc_stmt2 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %8, i32 0, i32 0, !dbg !5959
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt2, align 8, !dbg !5959
  %call3 = call i32 @gimple_location(%union.gimple_statement_d* %9), !dbg !5959
  %10 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5959
  %decl_minimal = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !5959
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !5959
  %11 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5959
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5959
  %common = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !5959
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5959
  %13 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !5959
  %call5 = call %union.tree_node* @build_decl_stat(i32 %call3, i32 31, %union.tree_node* %11, %union.tree_node* %13), !dbg !5959
  store %union.tree_node* %call5, %union.tree_node** %field, align 8, !dbg !5958
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5960
  %15 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5961
  call void @insert_field_into_struct(%union.tree_node* %14, %union.tree_node* %15), !dbg !5962
  %16 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !5963
  %17 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !5964
  %field6 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %17, i32 0, i32 5, !dbg !5965
  store %union.tree_node* %16, %union.tree_node** %field6, align 8, !dbg !5966
  ret i32 1, !dbg !5967
}

declare dso_local void @layout_type(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @create_loads_and_stores_for_name(i8** %slot, i8* %data) #0 !dbg !5968 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %elt = alloca %struct.name_to_copy_elt*, align 8
  %clsn_data = alloca %struct.clsn_data*, align 8
  %t = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %type = alloca %union.tree_node*, align 8
  %struct_type = alloca %union.tree_node*, align 8
  %load_struct = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp11 = alloca %struct.gimple_stmt_iterator, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !5969, metadata !DIExpression()), !dbg !5970
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5971, metadata !DIExpression()), !dbg !5972
  call void @llvm.dbg.declare(metadata %struct.name_to_copy_elt** %elt, metadata !5973, metadata !DIExpression()), !dbg !5974
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !5975
  %1 = load i8*, i8** %0, align 8, !dbg !5976
  %2 = bitcast i8* %1 to %struct.name_to_copy_elt*, !dbg !5977
  store %struct.name_to_copy_elt* %2, %struct.name_to_copy_elt** %elt, align 8, !dbg !5974
  call void @llvm.dbg.declare(metadata %struct.clsn_data** %clsn_data, metadata !5978, metadata !DIExpression()), !dbg !5980
  %3 = load i8*, i8** %data.addr, align 8, !dbg !5981
  %4 = bitcast i8* %3 to %struct.clsn_data*, !dbg !5982
  store %struct.clsn_data* %4, %struct.clsn_data** %clsn_data, align 8, !dbg !5980
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !5983, metadata !DIExpression()), !dbg !5984
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5985, metadata !DIExpression()), !dbg !5986
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5987, metadata !DIExpression()), !dbg !5988
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5989, metadata !DIExpression()), !dbg !5990
  %5 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %elt, align 8, !dbg !5991
  %new_name = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %5, i32 0, i32 1, !dbg !5991
  %6 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !5991
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !5991
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5991
  %7 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5991
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !5990
  call void @llvm.dbg.declare(metadata %union.tree_node** %struct_type, metadata !5992, metadata !DIExpression()), !dbg !5993
  %8 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !5994
  %load = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %8, i32 0, i32 1, !dbg !5994
  %9 = load %union.tree_node*, %union.tree_node** %load, align 8, !dbg !5994
  %common2 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !5994
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !5994
  %10 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !5994
  %common4 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !5994
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !5994
  %11 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !5994
  store %union.tree_node* %11, %union.tree_node** %struct_type, align 8, !dbg !5993
  call void @llvm.dbg.declare(metadata %union.tree_node** %load_struct, metadata !5995, metadata !DIExpression()), !dbg !5996
  %12 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !5997
  %store_bb = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %12, i32 0, i32 2, !dbg !5998
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %store_bb, align 8, !dbg !5998
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %13), !dbg !5999
  %14 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5999
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5999
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !5999
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6000
  %17 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !6000
  %store = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %17, i32 0, i32 0, !dbg !6000
  %18 = load %union.tree_node*, %union.tree_node** %store, align 8, !dbg !6000
  %19 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %elt, align 8, !dbg !6000
  %field = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %19, i32 0, i32 2, !dbg !6000
  %20 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6000
  %call = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %16, %union.tree_node* %18, %union.tree_node* %20, %union.tree_node* null), !dbg !6000
  store %union.tree_node* %call, %union.tree_node** %t, align 8, !dbg !6001
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6002
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6002
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !6002
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !6002
  %23 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6002
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %23, i32 0, i32 2, !dbg !6002
  %24 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !6002
  %tobool = icmp ne %struct.VEC_tree_gc* %24, null, !dbg !6002
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6002

cond.true:                                        ; preds = %entry
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6002
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, !dbg !6002
  %gimple_df7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 3, !dbg !6002
  %26 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df7, align 8, !dbg !6002
  %ssa_names8 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %26, i32 0, i32 2, !dbg !6002
  %27 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names8, align 8, !dbg !6002
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %27, i32 0, i32 0, !dbg !6002
  br label %cond.end, !dbg !6002

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6002

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6002
  %28 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %elt, align 8, !dbg !6002
  %version = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %28, i32 0, i32 0, !dbg !6002
  %29 = load i32, i32* %version, align 8, !dbg !6002
  %call9 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %29), !dbg !6002
  %call10 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %21, %union.tree_node* %call9), !dbg !6002
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %stmt, align 8, !dbg !6003
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6004
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %30), !dbg !6005
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6006
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %31, i32 0), !dbg !6007
  %32 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !6008
  %load_bb = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %32, i32 0, i32 3, !dbg !6009
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %load_bb, align 8, !dbg !6009
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp11, %struct.basic_block_def* %33), !dbg !6010
  %34 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6010
  %35 = bitcast %struct.gimple_stmt_iterator* %tmp11 to i8*, !dbg !6010
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 24, i1 false), !dbg !6010
  %36 = load %union.tree_node*, %union.tree_node** %struct_type, align 8, !dbg !6011
  %37 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !6011
  %load12 = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %37, i32 0, i32 1, !dbg !6011
  %38 = load %union.tree_node*, %union.tree_node** %load12, align 8, !dbg !6011
  %call13 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 47, %union.tree_node* %36, %union.tree_node* %38), !dbg !6011
  store %union.tree_node* %call13, %union.tree_node** %load_struct, align 8, !dbg !6012
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6013
  %40 = load %union.tree_node*, %union.tree_node** %load_struct, align 8, !dbg !6013
  %41 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %elt, align 8, !dbg !6013
  %field14 = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %41, i32 0, i32 2, !dbg !6013
  %42 = load %union.tree_node*, %union.tree_node** %field14, align 8, !dbg !6013
  %call15 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %39, %union.tree_node* %40, %union.tree_node* %42, %union.tree_node* null), !dbg !6013
  store %union.tree_node* %call15, %union.tree_node** %t, align 8, !dbg !6014
  %43 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %elt, align 8, !dbg !6015
  %new_name16 = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %43, i32 0, i32 1, !dbg !6015
  %44 = load %union.tree_node*, %union.tree_node** %new_name16, align 8, !dbg !6015
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6015
  %call17 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %44, %union.tree_node* %45), !dbg !6015
  store %union.gimple_statement_d* %call17, %union.gimple_statement_d** %stmt, align 8, !dbg !6016
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6017
  %47 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %elt, align 8, !dbg !6018
  %new_name18 = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %47, i32 0, i32 1, !dbg !6018
  %48 = load %union.tree_node*, %union.tree_node** %new_name18, align 8, !dbg !6018
  %ssa_name = bitcast %union.tree_node* %48 to %struct.tree_ssa_name*, !dbg !6018
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6018
  store %union.gimple_statement_d* %46, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6019
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6020
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %49, i32 0), !dbg !6021
  ret i32 1, !dbg !6022
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @create_stores_for_reduction(i8** %slot, i8* %data) #0 !dbg !6023 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %red = alloca %struct.reduction_info*, align 8
  %clsn_data = alloca %struct.clsn_data*, align 8
  %t = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %type = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !6024, metadata !DIExpression()), !dbg !6025
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6026, metadata !DIExpression()), !dbg !6027
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %red, metadata !6028, metadata !DIExpression()), !dbg !6029
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !6030
  %1 = load i8*, i8** %0, align 8, !dbg !6031
  %2 = bitcast i8* %1 to %struct.reduction_info*, !dbg !6032
  store %struct.reduction_info* %2, %struct.reduction_info** %red, align 8, !dbg !6029
  call void @llvm.dbg.declare(metadata %struct.clsn_data** %clsn_data, metadata !6033, metadata !DIExpression()), !dbg !6034
  %3 = load i8*, i8** %data.addr, align 8, !dbg !6035
  %4 = bitcast i8* %3 to %struct.clsn_data*, !dbg !6036
  store %struct.clsn_data* %4, %struct.clsn_data** %clsn_data, align 8, !dbg !6034
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6037, metadata !DIExpression()), !dbg !6038
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6039, metadata !DIExpression()), !dbg !6040
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6041, metadata !DIExpression()), !dbg !6042
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6043, metadata !DIExpression()), !dbg !6044
  %5 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !6045
  %reduc_stmt = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %5, i32 0, i32 0, !dbg !6045
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt, align 8, !dbg !6045
  %call = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %6), !dbg !6045
  %common = bitcast %union.tree_node* %call to %struct.tree_common*, !dbg !6045
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6045
  %7 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6045
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !6044
  %8 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !6046
  %store_bb = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %8, i32 0, i32 2, !dbg !6047
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %store_bb, align 8, !dbg !6047
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %9), !dbg !6048
  %10 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6048
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6048
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !6048
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6049
  %13 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !6049
  %store = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %13, i32 0, i32 0, !dbg !6049
  %14 = load %union.tree_node*, %union.tree_node** %store, align 8, !dbg !6049
  %15 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !6049
  %field = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %15, i32 0, i32 5, !dbg !6049
  %16 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6049
  %call2 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %12, %union.tree_node* %14, %union.tree_node* %16, %union.tree_node* null), !dbg !6049
  store %union.tree_node* %call2, %union.tree_node** %t, align 8, !dbg !6050
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6051
  %18 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !6051
  %initial_value = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %18, i32 0, i32 4, !dbg !6051
  %19 = load %union.tree_node*, %union.tree_node** %initial_value, align 8, !dbg !6051
  %call3 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %17, %union.tree_node* %19), !dbg !6051
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt, align 8, !dbg !6052
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6053
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %20), !dbg !6054
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6055
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %21, i32 0), !dbg !6056
  ret i32 1, !dbg !6057
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_final_loads_for_reduction(%struct.htab* %reduction_list, %struct.clsn_data* %ld_st_data) #0 !dbg !6058 {
entry:
  %reduction_list.addr = alloca %struct.htab*, align 8
  %ld_st_data.addr = alloca %struct.clsn_data*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %t = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.htab* %reduction_list, %struct.htab** %reduction_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %reduction_list.addr, metadata !6061, metadata !DIExpression()), !dbg !6062
  store %struct.clsn_data* %ld_st_data, %struct.clsn_data** %ld_st_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.clsn_data** %ld_st_data.addr, metadata !6063, metadata !DIExpression()), !dbg !6064
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6065, metadata !DIExpression()), !dbg !6066
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6067, metadata !DIExpression()), !dbg !6068
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6069, metadata !DIExpression()), !dbg !6070
  %0 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !6071
  %load_bb = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %0, i32 0, i32 3, !dbg !6072
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %load_bb, align 8, !dbg !6072
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %1), !dbg !6073
  %2 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6073
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6073
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !6073
  %4 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !6074
  %store = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %4, i32 0, i32 0, !dbg !6074
  %5 = load %union.tree_node*, %union.tree_node** %store, align 8, !dbg !6074
  %call = call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %5), !dbg !6074
  store %union.tree_node* %call, %union.tree_node** %t, align 8, !dbg !6075
  %6 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !6076
  %load = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %6, i32 0, i32 1, !dbg !6076
  %7 = load %union.tree_node*, %union.tree_node** %load, align 8, !dbg !6076
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6076
  %call1 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %7, %union.tree_node* %8), !dbg !6076
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !6077
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6078
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %9, i32 0), !dbg !6079
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6080
  %11 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !6081
  %load2 = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %11, i32 0, i32 1, !dbg !6081
  %12 = load %union.tree_node*, %union.tree_node** %load2, align 8, !dbg !6081
  %ssa_name = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !6081
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6081
  store %union.gimple_statement_d* %10, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6082
  %13 = load %struct.htab*, %struct.htab** %reduction_list.addr, align 8, !dbg !6083
  %14 = load %struct.clsn_data*, %struct.clsn_data** %ld_st_data.addr, align 8, !dbg !6084
  %15 = bitcast %struct.clsn_data* %14 to i8*, !dbg !6084
  call void @htab_traverse(%struct.htab* %13, i32 (i8**, i8*)* @create_loads_for_reductions, i8* %15), !dbg !6085
  ret void, !dbg !6086
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !6087 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6088, metadata !DIExpression()), !dbg !6089
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6090
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !6090
  %tobool = icmp ne i8 %call, 0, !dbg !6090
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6090

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6090
  br label %cond.end, !dbg !6090

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6090

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6090
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6091
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !6091
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6091
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !6091
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6091

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6091
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !6091
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !6091
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !6091
  br label %cond.end5, !dbg !6091

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6091

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !6091
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !6091
  ret %struct.edge_def* %call7, !dbg !6092
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !6093 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6094, metadata !DIExpression()), !dbg !6095
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6096
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !6096
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6096
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6096
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6096

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6096
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !6096
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !6096
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6096
  br label %cond.end, !dbg !6096

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6096

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6096
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6096
  %cmp = icmp eq i32 %call, 1, !dbg !6097
  %conv = zext i1 %cmp to i32, !dbg !6097
  %conv2 = trunc i32 %conv to i8, !dbg !6096
  ret i8 %conv2, !dbg !6098
}

declare dso_local void @mark_virtual_ops_for_renaming(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_init_phidef(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !6099 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6103, metadata !DIExpression()), !dbg !6104
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6105, metadata !DIExpression()), !dbg !6106
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6107, metadata !DIExpression()), !dbg !6108
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !6109, metadata !DIExpression()), !dbg !6110
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6111
  %call = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %0), !dbg !6111
  %call1 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call), !dbg !6111
  store %union.tree_node* %call1, %union.tree_node** %phi_def, align 8, !dbg !6110
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !6112, metadata !DIExpression()), !dbg !6113
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6114
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !6115
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6116
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !6117
  store i8 0, i8* %done, align 8, !dbg !6118
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6119
  %and = and i32 %3, 10, !dbg !6119
  %cmp = icmp ne i32 %and, 0, !dbg !6119
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6119

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i64 0, i64 0), i32 947, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6119
  br label %cond.end, !dbg !6119

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6119

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6119
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !6120
  %call2 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6121
  %conv = zext i8 %call2 to i32, !dbg !6121
  %tobool = icmp ne i32 %conv, 0, !dbg !6121
  %5 = zext i1 %tobool to i64, !dbg !6121
  %cond3 = select i1 %tobool, i32 2, i32 8, !dbg !6121
  store i32 %cond3, i32* %comp, align 4, !dbg !6122
  %6 = load i32, i32* %flags.addr, align 4, !dbg !6123
  %7 = load i32, i32* %comp, align 4, !dbg !6125
  %and4 = and i32 %6, %7, !dbg !6126
  %cmp5 = icmp eq i32 %and4, 0, !dbg !6127
  br i1 %cmp5, label %if.then, label %if.end, !dbg !6128

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6129
  %done7 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !6131
  store i8 1, i8* %done7, align 8, !dbg !6132
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !6133
  br label %return, !dbg !6133

if.end:                                           ; preds = %cond.end
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6134
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 1, !dbg !6135
  store i32 3, i32* %iter_type, align 4, !dbg !6136
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6137
  %call8 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %10), !dbg !6137
  store %union.tree_node** %call8, %union.tree_node*** %retval, align 8, !dbg !6138
  br label %return, !dbg !6138

return:                                           ; preds = %if.end, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !6139
  ret %union.tree_node** %11, !dbg !6139
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_init_def(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6140 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6141, metadata !DIExpression()), !dbg !6142
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6143, metadata !DIExpression()), !dbg !6144
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6145, metadata !DIExpression()), !dbg !6146
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6147
  %and = and i32 %0, 5, !dbg !6147
  %cmp = icmp eq i32 %and, 0, !dbg !6147
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !6147

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6147
  %and1 = and i32 %1, 2, !dbg !6147
  %tobool = icmp ne i32 %and1, 0, !dbg !6147
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6147

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i64 0, i64 0), i32 783, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6147
  br label %cond.end, !dbg !6147

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6147

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6147
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6148
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6149
  %4 = load i32, i32* %flags.addr, align 4, !dbg !6150
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !6151
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6152
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !6153
  store i32 3, i32* %iter_type, align 4, !dbg !6154
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6155
  %call = call %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %6), !dbg !6156
  ret %union.tree_node** %call, !dbg !6157
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6158 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6163, metadata !DIExpression()), !dbg !6164
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6165
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !6166
  %1 = load i8, i8* %done, align 8, !dbg !6166
  ret i8 %1, !dbg !6167
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @separate_decls_in_region_name(%union.tree_node* %name, %struct.htab* %name_copies, %struct.htab* %decl_copies, i8 zeroext %copy_name_p) #0 !dbg !6168 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %name_copies.addr = alloca %struct.htab*, align 8
  %decl_copies.addr = alloca %struct.htab*, align 8
  %copy_name_p.addr = alloca i8, align 1
  %copy = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %var_copy = alloca %union.tree_node*, align 8
  %idx = alloca i32, align 4
  %uid = alloca i32, align 4
  %nuid = alloca i32, align 4
  %ielt = alloca %struct.int_tree_map, align 8
  %nielt = alloca %struct.int_tree_map*, align 8
  %elt = alloca %struct.name_to_copy_elt, align 8
  %nelt = alloca %struct.name_to_copy_elt*, align 8
  %slot = alloca i8**, align 8
  %dslot = alloca i8**, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6171, metadata !DIExpression()), !dbg !6172
  store %struct.htab* %name_copies, %struct.htab** %name_copies.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %name_copies.addr, metadata !6173, metadata !DIExpression()), !dbg !6174
  store %struct.htab* %decl_copies, %struct.htab** %decl_copies.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %decl_copies.addr, metadata !6175, metadata !DIExpression()), !dbg !6176
  store i8 %copy_name_p, i8* %copy_name_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %copy_name_p.addr, metadata !6177, metadata !DIExpression()), !dbg !6178
  call void @llvm.dbg.declare(metadata %union.tree_node** %copy, metadata !6179, metadata !DIExpression()), !dbg !6180
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6181, metadata !DIExpression()), !dbg !6182
  call void @llvm.dbg.declare(metadata %union.tree_node** %var_copy, metadata !6183, metadata !DIExpression()), !dbg !6184
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !6185, metadata !DIExpression()), !dbg !6186
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !6187, metadata !DIExpression()), !dbg !6188
  call void @llvm.dbg.declare(metadata i32* %nuid, metadata !6189, metadata !DIExpression()), !dbg !6190
  call void @llvm.dbg.declare(metadata %struct.int_tree_map* %ielt, metadata !6191, metadata !DIExpression()), !dbg !6192
  call void @llvm.dbg.declare(metadata %struct.int_tree_map** %nielt, metadata !6193, metadata !DIExpression()), !dbg !6194
  call void @llvm.dbg.declare(metadata %struct.name_to_copy_elt* %elt, metadata !6195, metadata !DIExpression()), !dbg !6196
  call void @llvm.dbg.declare(metadata %struct.name_to_copy_elt** %nelt, metadata !6197, metadata !DIExpression()), !dbg !6198
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !6199, metadata !DIExpression()), !dbg !6200
  call void @llvm.dbg.declare(metadata i8*** %dslot, metadata !6201, metadata !DIExpression()), !dbg !6202
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6203
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6203
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6203
  %bf.load = load i64, i64* %1, align 8, !dbg !6203
  %bf.clear = and i64 %bf.load, 65535, !dbg !6203
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6203
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6205
  br i1 %cmp, label %if.then, label %if.end, !dbg !6206

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6207
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6208
  br label %return, !dbg !6208

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6209
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !6209
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !6209
  %4 = load i32, i32* %version, align 8, !dbg !6209
  store i32 %4, i32* %idx, align 4, !dbg !6210
  %5 = load i32, i32* %idx, align 4, !dbg !6211
  %version1 = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %elt, i32 0, i32 0, !dbg !6212
  store i32 %5, i32* %version1, align 8, !dbg !6213
  %6 = load %struct.htab*, %struct.htab** %name_copies.addr, align 8, !dbg !6214
  %7 = bitcast %struct.name_to_copy_elt* %elt to i8*, !dbg !6215
  %8 = load i32, i32* %idx, align 4, !dbg !6216
  %9 = load i8, i8* %copy_name_p.addr, align 1, !dbg !6217
  %conv = zext i8 %9 to i32, !dbg !6217
  %tobool = icmp ne i32 %conv, 0, !dbg !6217
  %10 = zext i1 %tobool to i64, !dbg !6217
  %cond = select i1 %tobool, i32 1, i32 0, !dbg !6217
  %call = call i8** @htab_find_slot_with_hash(%struct.htab* %6, i8* %7, i32 %8, i32 %cond), !dbg !6218
  store i8** %call, i8*** %slot, align 8, !dbg !6219
  %11 = load i8**, i8*** %slot, align 8, !dbg !6220
  %tobool2 = icmp ne i8** %11, null, !dbg !6220
  br i1 %tobool2, label %land.lhs.true, label %if.end5, !dbg !6222

land.lhs.true:                                    ; preds = %if.end
  %12 = load i8**, i8*** %slot, align 8, !dbg !6223
  %13 = load i8*, i8** %12, align 8, !dbg !6224
  %tobool3 = icmp ne i8* %13, null, !dbg !6224
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !6225

if.then4:                                         ; preds = %land.lhs.true
  %14 = load i8**, i8*** %slot, align 8, !dbg !6226
  %15 = load i8*, i8** %14, align 8, !dbg !6227
  %16 = bitcast i8* %15 to %struct.name_to_copy_elt*, !dbg !6228
  %new_name = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %16, i32 0, i32 1, !dbg !6229
  %17 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !6229
  store %union.tree_node* %17, %union.tree_node** %retval, align 8, !dbg !6230
  br label %return, !dbg !6230

if.end5:                                          ; preds = %land.lhs.true, %if.end
  %18 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6231
  %ssa_name6 = bitcast %union.tree_node* %18 to %struct.tree_ssa_name*, !dbg !6231
  %var7 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name6, i32 0, i32 1, !dbg !6231
  %19 = load %union.tree_node*, %union.tree_node** %var7, align 8, !dbg !6231
  store %union.tree_node* %19, %union.tree_node** %var, align 8, !dbg !6232
  %20 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6233
  %decl_minimal = bitcast %union.tree_node* %20 to %struct.tree_decl_minimal*, !dbg !6233
  %uid8 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !6233
  %21 = load i32, i32* %uid8, align 4, !dbg !6233
  store i32 %21, i32* %uid, align 4, !dbg !6234
  %22 = load i32, i32* %uid, align 4, !dbg !6235
  %uid9 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %ielt, i32 0, i32 0, !dbg !6236
  store i32 %22, i32* %uid9, align 8, !dbg !6237
  %23 = load %struct.htab*, %struct.htab** %decl_copies.addr, align 8, !dbg !6238
  %24 = bitcast %struct.int_tree_map* %ielt to i8*, !dbg !6239
  %25 = load i32, i32* %uid, align 4, !dbg !6240
  %call10 = call i8** @htab_find_slot_with_hash(%struct.htab* %23, i8* %24, i32 %25, i32 1), !dbg !6241
  store i8** %call10, i8*** %dslot, align 8, !dbg !6242
  %26 = load i8**, i8*** %dslot, align 8, !dbg !6243
  %27 = load i8*, i8** %26, align 8, !dbg !6245
  %tobool11 = icmp ne i8* %27, null, !dbg !6245
  br i1 %tobool11, label %if.else, label %if.then12, !dbg !6246

if.then12:                                        ; preds = %if.end5
  %28 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6247
  %common = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !6247
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6247
  %29 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6247
  %30 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6249
  %call13 = call i8* @get_name(%union.tree_node* %30), !dbg !6250
  %call14 = call %union.tree_node* @create_tmp_var(%union.tree_node* %29, i8* %call13), !dbg !6251
  store %union.tree_node* %call14, %union.tree_node** %var_copy, align 8, !dbg !6252
  %31 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6253
  %decl_common = bitcast %union.tree_node* %31 to %struct.tree_decl_common*, !dbg !6253
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6253
  %32 = bitcast i40* %gimple_reg_flag to i64*, !dbg !6253
  %bf.load15 = load i64, i64* %32, align 8, !dbg !6253
  %bf.lshr = lshr i64 %bf.load15, 27, !dbg !6253
  %bf.clear16 = and i64 %bf.lshr, 1, !dbg !6253
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !6253
  %33 = load %union.tree_node*, %union.tree_node** %var_copy, align 8, !dbg !6254
  %decl_common18 = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !6254
  %gimple_reg_flag19 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common18, i32 0, i32 2, !dbg !6254
  %34 = bitcast i40* %gimple_reg_flag19 to i64*, !dbg !6254
  %35 = zext i32 %bf.cast17 to i64, !dbg !6255
  %bf.load20 = load i64, i64* %34, align 8, !dbg !6255
  %bf.value = and i64 %35, 1, !dbg !6255
  %bf.shl = shl i64 %bf.value, 27, !dbg !6255
  %bf.clear21 = and i64 %bf.load20, -134217729, !dbg !6255
  %bf.set = or i64 %bf.clear21, %bf.shl, !dbg !6255
  store i64 %bf.set, i64* %34, align 8, !dbg !6255
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !6255
  %36 = load %union.tree_node*, %union.tree_node** %var_copy, align 8, !dbg !6256
  %call22 = call zeroext i8 @add_referenced_var(%union.tree_node* %36), !dbg !6257
  %call23 = call i8* @xmalloc(i64 16), !dbg !6258
  %37 = bitcast i8* %call23 to %struct.int_tree_map*, !dbg !6258
  store %struct.int_tree_map* %37, %struct.int_tree_map** %nielt, align 8, !dbg !6259
  %38 = load i32, i32* %uid, align 4, !dbg !6260
  %39 = load %struct.int_tree_map*, %struct.int_tree_map** %nielt, align 8, !dbg !6261
  %uid24 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %39, i32 0, i32 0, !dbg !6262
  store i32 %38, i32* %uid24, align 8, !dbg !6263
  %40 = load %union.tree_node*, %union.tree_node** %var_copy, align 8, !dbg !6264
  %41 = load %struct.int_tree_map*, %struct.int_tree_map** %nielt, align 8, !dbg !6265
  %to = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %41, i32 0, i32 1, !dbg !6266
  store %union.tree_node* %40, %union.tree_node** %to, align 8, !dbg !6267
  %42 = load %struct.int_tree_map*, %struct.int_tree_map** %nielt, align 8, !dbg !6268
  %43 = bitcast %struct.int_tree_map* %42 to i8*, !dbg !6268
  %44 = load i8**, i8*** %dslot, align 8, !dbg !6269
  store i8* %43, i8** %44, align 8, !dbg !6270
  %45 = load %union.tree_node*, %union.tree_node** %var_copy, align 8, !dbg !6271
  %decl_minimal25 = bitcast %union.tree_node* %45 to %struct.tree_decl_minimal*, !dbg !6271
  %uid26 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal25, i32 0, i32 2, !dbg !6271
  %46 = load i32, i32* %uid26, align 4, !dbg !6271
  store i32 %46, i32* %nuid, align 4, !dbg !6272
  %47 = load i32, i32* %nuid, align 4, !dbg !6273
  %uid27 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %ielt, i32 0, i32 0, !dbg !6274
  store i32 %47, i32* %uid27, align 8, !dbg !6275
  %48 = load %struct.htab*, %struct.htab** %decl_copies.addr, align 8, !dbg !6276
  %49 = bitcast %struct.int_tree_map* %ielt to i8*, !dbg !6277
  %50 = load i32, i32* %nuid, align 4, !dbg !6278
  %call28 = call i8** @htab_find_slot_with_hash(%struct.htab* %48, i8* %49, i32 %50, i32 1), !dbg !6279
  store i8** %call28, i8*** %dslot, align 8, !dbg !6280
  %51 = load i8**, i8*** %dslot, align 8, !dbg !6281
  %52 = load i8*, i8** %51, align 8, !dbg !6281
  %tobool29 = icmp ne i8* %52, null, !dbg !6281
  br i1 %tobool29, label %cond.true, label %cond.false, !dbg !6281

cond.true:                                        ; preds = %if.then12
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 637, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6281
  br label %cond.end, !dbg !6281

cond.false:                                       ; preds = %if.then12
  br label %cond.end, !dbg !6281

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond30 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6281
  %call31 = call i8* @xmalloc(i64 16), !dbg !6282
  %53 = bitcast i8* %call31 to %struct.int_tree_map*, !dbg !6282
  store %struct.int_tree_map* %53, %struct.int_tree_map** %nielt, align 8, !dbg !6283
  %54 = load i32, i32* %nuid, align 4, !dbg !6284
  %55 = load %struct.int_tree_map*, %struct.int_tree_map** %nielt, align 8, !dbg !6285
  %uid32 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %55, i32 0, i32 0, !dbg !6286
  store i32 %54, i32* %uid32, align 8, !dbg !6287
  %56 = load %union.tree_node*, %union.tree_node** %var_copy, align 8, !dbg !6288
  %57 = load %struct.int_tree_map*, %struct.int_tree_map** %nielt, align 8, !dbg !6289
  %to33 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %57, i32 0, i32 1, !dbg !6290
  store %union.tree_node* %56, %union.tree_node** %to33, align 8, !dbg !6291
  %58 = load %struct.int_tree_map*, %struct.int_tree_map** %nielt, align 8, !dbg !6292
  %59 = bitcast %struct.int_tree_map* %58 to i8*, !dbg !6292
  %60 = load i8**, i8*** %dslot, align 8, !dbg !6293
  store i8* %59, i8** %60, align 8, !dbg !6294
  br label %if.end35, !dbg !6295

if.else:                                          ; preds = %if.end5
  %61 = load i8**, i8*** %dslot, align 8, !dbg !6296
  %62 = load i8*, i8** %61, align 8, !dbg !6297
  %63 = bitcast i8* %62 to %struct.int_tree_map*, !dbg !6298
  %to34 = getelementptr inbounds %struct.int_tree_map, %struct.int_tree_map* %63, i32 0, i32 1, !dbg !6299
  %64 = load %union.tree_node*, %union.tree_node** %to34, align 8, !dbg !6299
  store %union.tree_node* %64, %union.tree_node** %var_copy, align 8, !dbg !6300
  br label %if.end35

if.end35:                                         ; preds = %if.else, %cond.end
  %65 = load i8, i8* %copy_name_p.addr, align 1, !dbg !6301
  %tobool36 = icmp ne i8 %65, 0, !dbg !6301
  br i1 %tobool36, label %if.then37, label %if.else42, !dbg !6303

if.then37:                                        ; preds = %if.end35
  %66 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6304
  %call38 = call %union.tree_node* @duplicate_ssa_name(%union.tree_node* %66, %union.gimple_statement_d* null), !dbg !6306
  store %union.tree_node* %call38, %union.tree_node** %copy, align 8, !dbg !6307
  %call39 = call i8* @xmalloc(i64 24), !dbg !6308
  %67 = bitcast i8* %call39 to %struct.name_to_copy_elt*, !dbg !6308
  store %struct.name_to_copy_elt* %67, %struct.name_to_copy_elt** %nelt, align 8, !dbg !6309
  %68 = load i32, i32* %idx, align 4, !dbg !6310
  %69 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %nelt, align 8, !dbg !6311
  %version40 = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %69, i32 0, i32 0, !dbg !6312
  store i32 %68, i32* %version40, align 8, !dbg !6313
  %70 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !6314
  %71 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %nelt, align 8, !dbg !6315
  %new_name41 = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %71, i32 0, i32 1, !dbg !6316
  store %union.tree_node* %70, %union.tree_node** %new_name41, align 8, !dbg !6317
  %72 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %nelt, align 8, !dbg !6318
  %field = getelementptr inbounds %struct.name_to_copy_elt, %struct.name_to_copy_elt* %72, i32 0, i32 2, !dbg !6319
  store %union.tree_node* null, %union.tree_node** %field, align 8, !dbg !6320
  %73 = load %struct.name_to_copy_elt*, %struct.name_to_copy_elt** %nelt, align 8, !dbg !6321
  %74 = bitcast %struct.name_to_copy_elt* %73 to i8*, !dbg !6321
  %75 = load i8**, i8*** %slot, align 8, !dbg !6322
  store i8* %74, i8** %75, align 8, !dbg !6323
  br label %if.end48, !dbg !6324

if.else42:                                        ; preds = %if.end35
  %76 = load i8**, i8*** %slot, align 8, !dbg !6325
  %tobool43 = icmp ne i8** %76, null, !dbg !6325
  br i1 %tobool43, label %cond.true44, label %cond.false45, !dbg !6325

cond.true44:                                      ; preds = %if.else42
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 657, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6325
  br label %cond.end46, !dbg !6325

cond.false45:                                     ; preds = %if.else42
  br label %cond.end46, !dbg !6325

cond.end46:                                       ; preds = %cond.false45, %cond.true44
  %cond47 = phi i32 [ 0, %cond.true44 ], [ 0, %cond.false45 ], !dbg !6325
  %77 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6327
  store %union.tree_node* %77, %union.tree_node** %copy, align 8, !dbg !6328
  br label %if.end48

if.end48:                                         ; preds = %cond.end46, %if.then37
  %78 = load %union.tree_node*, %union.tree_node** %var_copy, align 8, !dbg !6329
  %79 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !6330
  %ssa_name49 = bitcast %union.tree_node* %79 to %struct.tree_ssa_name*, !dbg !6330
  %var50 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name49, i32 0, i32 1, !dbg !6330
  store %union.tree_node* %78, %union.tree_node** %var50, align 8, !dbg !6331
  %80 = load %union.tree_node*, %union.tree_node** %copy, align 8, !dbg !6332
  store %union.tree_node* %80, %union.tree_node** %retval, align 8, !dbg !6333
  br label %return, !dbg !6333

return:                                           ; preds = %if.end48, %if.then4, %if.then
  %81 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6334
  ret %union.tree_node* %81, !dbg !6334
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @op_iter_next_def(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6335 {
entry:
  %retval = alloca %union.tree_node**, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %def_p = alloca %union.tree_node**, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6338, metadata !DIExpression()), !dbg !6339
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def_p, metadata !6340, metadata !DIExpression()), !dbg !6341
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6342
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !6344
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !6344
  %tobool = icmp ne %struct.def_optype_d* %1, null, !dbg !6342
  br i1 %tobool, label %if.then, label %if.end, !dbg !6345

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6346
  %defs1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 2, !dbg !6346
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %defs1, align 8, !dbg !6346
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %3, i32 0, i32 1, !dbg !6346
  %4 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !6346
  store %union.tree_node** %4, %union.tree_node*** %def_p, align 8, !dbg !6348
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6349
  %defs2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 2, !dbg !6350
  %6 = load %struct.def_optype_d*, %struct.def_optype_d** %defs2, align 8, !dbg !6350
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %6, i32 0, i32 0, !dbg !6351
  %7 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !6351
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6352
  %defs3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !6353
  store %struct.def_optype_d* %7, %struct.def_optype_d** %defs3, align 8, !dbg !6354
  %9 = load %union.tree_node**, %union.tree_node*** %def_p, align 8, !dbg !6355
  store %union.tree_node** %9, %union.tree_node*** %retval, align 8, !dbg !6356
  br label %return, !dbg !6356

if.end:                                           ; preds = %entry
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6357
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 0, !dbg !6358
  store i8 1, i8* %done, align 8, !dbg !6359
  store %union.tree_node** null, %union.tree_node*** %retval, align 8, !dbg !6360
  br label %return, !dbg !6360

return:                                           ; preds = %if.end, %if.then
  %11 = load %union.tree_node**, %union.tree_node*** %retval, align 8, !dbg !6361
  ret %union.tree_node** %11, !dbg !6361
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !6362 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6365, metadata !DIExpression()), !dbg !6366
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6367, metadata !DIExpression()), !dbg !6368
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6369, metadata !DIExpression()), !dbg !6370
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !6371, metadata !DIExpression()), !dbg !6372
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6373
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !6374
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !6372
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !6375, metadata !DIExpression()), !dbg !6376
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6377
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !6378
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6379
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !6380
  store i8 0, i8* %done, align 8, !dbg !6381
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6382
  %and = and i32 %3, 5, !dbg !6382
  %cmp = icmp ne i32 %and, 0, !dbg !6382
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6382

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6382
  br label %cond.end, !dbg !6382

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6382

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6382
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !6383
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6384
  %conv = zext i8 %call1 to i32, !dbg !6384
  %tobool = icmp ne i32 %conv, 0, !dbg !6384
  %5 = zext i1 %tobool to i64, !dbg !6384
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !6384
  store i32 %cond2, i32* %comp, align 4, !dbg !6385
  %6 = load i32, i32* %flags.addr, align 4, !dbg !6386
  %7 = load i32, i32* %comp, align 4, !dbg !6388
  %and3 = and i32 %6, %7, !dbg !6389
  %cmp4 = icmp eq i32 %and3, 0, !dbg !6390
  br i1 %cmp4, label %if.then, label %if.end, !dbg !6391

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6392
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !6394
  store i8 1, i8* %done6, align 8, !dbg !6395
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6396
  br label %return, !dbg !6396

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6397
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6398
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !6399
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6400
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6401
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !6402
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6403
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !6404
  store i32 %call7, i32* %num_phi, align 4, !dbg !6405
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6406
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !6407
  store i32 2, i32* %iter_type, align 4, !dbg !6408
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6409
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !6410
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6411
  br label %return, !dbg !6411

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6412
  ret %struct.ssa_use_operand_d* %15, !dbg !6412
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6413 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6414, metadata !DIExpression()), !dbg !6415
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6416, metadata !DIExpression()), !dbg !6417
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6418, metadata !DIExpression()), !dbg !6419
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6420
  %and = and i32 %0, 10, !dbg !6420
  %cmp = icmp eq i32 %and, 0, !dbg !6420
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !6420

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6420
  %and1 = and i32 %1, 1, !dbg !6420
  %tobool = icmp ne i32 %and1, 0, !dbg !6420
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6420

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6420
  br label %cond.end, !dbg !6420

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6420

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6420
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6421
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6422
  %4 = load i32, i32* %flags.addr, align 4, !dbg !6423
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !6424
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6425
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !6426
  store i32 2, i32* %iter_type, align 4, !dbg !6427
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6428
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !6429
  ret %struct.ssa_use_operand_d* %call, !dbg !6430
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @expr_invariant_in_region_p(%struct.edge_def* %entry1, %struct.edge_def* %exit, %union.tree_node* %expr) #0 !dbg !6431 {
entry:
  %retval = alloca i8, align 1
  %entry.addr = alloca %struct.edge_def*, align 8
  %exit.addr = alloca %struct.edge_def*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %entry_bb = alloca %struct.basic_block_def*, align 8
  %exit_bb = alloca %struct.basic_block_def*, align 8
  %def_bb = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %entry1, %struct.edge_def** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry.addr, metadata !6434, metadata !DIExpression()), !dbg !6435
  store %struct.edge_def* %exit, %struct.edge_def** %exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit.addr, metadata !6436, metadata !DIExpression()), !dbg !6437
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !6438, metadata !DIExpression()), !dbg !6439
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %entry_bb, metadata !6440, metadata !DIExpression()), !dbg !6441
  %0 = load %struct.edge_def*, %struct.edge_def** %entry.addr, align 8, !dbg !6442
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !6443
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6443
  store %struct.basic_block_def* %1, %struct.basic_block_def** %entry_bb, align 8, !dbg !6441
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_bb, metadata !6444, metadata !DIExpression()), !dbg !6445
  %2 = load %struct.edge_def*, %struct.edge_def** %exit.addr, align 8, !dbg !6446
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !6447
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6447
  store %struct.basic_block_def* %3, %struct.basic_block_def** %exit_bb, align 8, !dbg !6445
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %def_bb, metadata !6448, metadata !DIExpression()), !dbg !6449
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6450
  %call = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %4), !dbg !6452
  %tobool = icmp ne i8 %call, 0, !dbg !6452
  br i1 %tobool, label %if.then, label %if.end, !dbg !6453

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !6454
  br label %return, !dbg !6454

if.end:                                           ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6455
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6455
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !6455
  %bf.load = load i64, i64* %6, align 8, !dbg !6455
  %bf.clear = and i64 %bf.load, 65535, !dbg !6455
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6455
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6457
  br i1 %cmp, label %if.then2, label %if.end12, !dbg !6458

if.then2:                                         ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !6459
  %ssa_name = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !6459
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6459
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6459
  %call3 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %8), !dbg !6461
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %def_bb, align 8, !dbg !6462
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !6463
  %tobool4 = icmp ne %struct.basic_block_def* %9, null, !dbg !6463
  br i1 %tobool4, label %land.lhs.true, label %if.end11, !dbg !6465

land.lhs.true:                                    ; preds = %if.then2
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !6466
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !6467
  %call5 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %10, %struct.basic_block_def* %11), !dbg !6468
  %conv = zext i8 %call5 to i32, !dbg !6468
  %tobool6 = icmp ne i32 %conv, 0, !dbg !6468
  br i1 %tobool6, label %land.lhs.true7, label %if.end11, !dbg !6469

land.lhs.true7:                                   ; preds = %land.lhs.true
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %def_bb, align 8, !dbg !6470
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb, align 8, !dbg !6471
  %call8 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %12, %struct.basic_block_def* %13), !dbg !6472
  %tobool9 = icmp ne i8 %call8, 0, !dbg !6472
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !6473

if.then10:                                        ; preds = %land.lhs.true7
  store i8 0, i8* %retval, align 1, !dbg !6474
  br label %return, !dbg !6474

if.end11:                                         ; preds = %land.lhs.true7, %land.lhs.true, %if.then2
  store i8 1, i8* %retval, align 1, !dbg !6475
  br label %return, !dbg !6475

if.end12:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6476
  br label %return, !dbg !6476

return:                                           ; preds = %if.end12, %if.end11, %if.then10, %if.then
  %14 = load i8, i8* %retval, align 1, !dbg !6477
  ret i8 %14, !dbg !6477
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6478 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6481, metadata !DIExpression()), !dbg !6482
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6483, metadata !DIExpression()), !dbg !6484
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6485
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !6487
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !6487
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !6485
  br i1 %tobool, label %if.then, label %if.end, !dbg !6488

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6489
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !6489
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !6489
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !6489
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6491
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6492
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !6493
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !6493
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !6494
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !6494
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6495
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !6496
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !6497
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6498
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6499
  br label %return, !dbg !6499

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6500
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !6502
  %10 = load i32, i32* %phi_i, align 8, !dbg !6502
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6503
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !6504
  %12 = load i32, i32* %num_phi, align 4, !dbg !6504
  %cmp = icmp slt i32 %10, %12, !dbg !6505
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !6506

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6507
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !6507
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6507
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6507
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !6507
  %16 = load i32, i32* %phi_i5, align 8, !dbg !6507
  %inc = add nsw i32 %16, 1, !dbg !6507
  store i32 %inc, i32* %phi_i5, align 8, !dbg !6507
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !6507
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6509
  br label %return, !dbg !6509

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6510
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !6511
  store i8 1, i8* %done, align 8, !dbg !6512
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6513
  br label %return, !dbg !6513

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6514
  ret %struct.ssa_use_operand_d* %18, !dbg !6514
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6515 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6518, metadata !DIExpression()), !dbg !6519
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6520
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !6521
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !6522
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6523
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !6524
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !6525
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6526
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !6527
  store i32 0, i32* %iter_type, align 4, !dbg !6528
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6529
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !6530
  store i32 0, i32* %phi_i, align 8, !dbg !6531
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6532
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !6533
  store i32 0, i32* %num_phi, align 4, !dbg !6534
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6535
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !6536
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6537
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6538
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !6539
  store i8 1, i8* %done, align 8, !dbg !6540
  ret void, !dbg !6541
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6542 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6545, metadata !DIExpression()), !dbg !6546
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6547, metadata !DIExpression()), !dbg !6548
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6549, metadata !DIExpression()), !dbg !6550
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6551
  %and = and i32 %0, 8, !dbg !6551
  %tobool = icmp ne i32 %and, 0, !dbg !6551
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !6551

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6551
  %and1 = and i32 %1, 2, !dbg !6551
  %tobool2 = icmp ne i32 %and1, 0, !dbg !6551
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !6551

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !6551
  %and3 = and i32 %2, 4, !dbg !6551
  %tobool4 = icmp ne i32 %and3, 0, !dbg !6551
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !6551

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6551
  %and6 = and i32 %3, 1, !dbg !6551
  %tobool7 = icmp ne i32 %and6, 0, !dbg !6551
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !6551

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6551
  br label %cond.end, !dbg !6551

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !6551

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6551
  %4 = load i32, i32* %flags.addr, align 4, !dbg !6552
  %and8 = and i32 %4, 10, !dbg !6553
  %tobool9 = icmp ne i32 %and8, 0, !dbg !6553
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !6554

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6555
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !6556
  br label %cond.end12, !dbg !6554

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !6554

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !6554
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6557
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !6558
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !6559
  %7 = load i32, i32* %flags.addr, align 4, !dbg !6560
  %and14 = and i32 %7, 8, !dbg !6562
  %tobool15 = icmp ne i32 %and14, 0, !dbg !6562
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !6563

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6564
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !6565
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !6565
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !6564
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !6566

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6567
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !6568
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !6569
  br i1 %cmp, label %if.then, label %if.end, !dbg !6570

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6571
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !6572
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !6572
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !6573
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !6573
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6574
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !6575
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !6576
  br label %if.end, !dbg !6574

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !6577
  %and23 = and i32 %15, 5, !dbg !6578
  %tobool24 = icmp ne i32 %and23, 0, !dbg !6578
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !6579

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6580
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !6581
  br label %cond.end28, !dbg !6579

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !6579

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !6579
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6582
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !6583
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !6584
  %18 = load i32, i32* %flags.addr, align 4, !dbg !6585
  %and30 = and i32 %18, 4, !dbg !6587
  %tobool31 = icmp ne i32 %and30, 0, !dbg !6587
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !6588

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6589
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !6590
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !6590
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !6589
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !6591

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6592
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !6593
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !6594
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !6595

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6596
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !6597
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !6597
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !6598
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !6598
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6599
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !6600
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !6601
  br label %if.end42, !dbg !6599

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6602
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !6603
  store i8 0, i8* %done, align 8, !dbg !6604
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6605
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !6606
  store i32 0, i32* %phi_i, align 8, !dbg !6607
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6608
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !6609
  store i32 0, i32* %num_phi, align 4, !dbg !6610
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6611
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !6612
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6613
  ret void, !dbg !6614
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !6615 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6618, metadata !DIExpression()), !dbg !6619
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6620
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6622
  %tobool = icmp ne i8 %call, 0, !dbg !6622
  br i1 %tobool, label %if.end, label %if.then, !dbg !6623

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !6624
  br label %return, !dbg !6624

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6625
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !6626
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !6627
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !6628
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !6628
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !6629
  br label %return, !dbg !6629

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !6630
  ret %struct.def_optype_d* %3, !dbg !6630
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !6631 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6632, metadata !DIExpression()), !dbg !6633
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6634
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6636
  %tobool = icmp ne i8 %call, 0, !dbg !6636
  br i1 %tobool, label %if.end, label %if.then, !dbg !6637

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6638
  br label %return, !dbg !6638

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6639
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6640
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !6641
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !6641
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6642
  br label %return, !dbg !6642

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6643
  ret %union.tree_node* %3, !dbg !6643
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !6644 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6647, metadata !DIExpression()), !dbg !6648
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6649
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6651
  %tobool = icmp ne i8 %call, 0, !dbg !6651
  br i1 %tobool, label %if.end, label %if.then, !dbg !6652

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !6653
  br label %return, !dbg !6653

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6654
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !6655
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !6656
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !6657
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !6657
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !6658
  br label %return, !dbg !6658

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !6659
  ret %struct.use_optype_d* %3, !dbg !6659
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !6660 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6661, metadata !DIExpression()), !dbg !6662
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6663
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6665
  %tobool = icmp ne i8 %call, 0, !dbg !6665
  br i1 %tobool, label %if.end, label %if.then, !dbg !6666

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6667
  br label %return, !dbg !6667

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6668
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6669
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !6670
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !6670
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !6671
  br label %return, !dbg !6671

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6672
  ret %union.tree_node* %3, !dbg !6672
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !6673 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6674, metadata !DIExpression()), !dbg !6675
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6676
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6677
  %cmp = icmp uge i32 %call, 6, !dbg !6678
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6679

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6680
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6681
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6682
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6683
  %land.ext = zext i1 %2 to i32, !dbg !6679
  %conv = trunc i32 %land.ext to i8, !dbg !6677
  ret i8 %conv, !dbg !6684
}

declare dso_local %union.tree_node* @duplicate_ssa_name(%union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !6685 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6686, metadata !DIExpression()), !dbg !6687
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6688
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6689
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !6690
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6690
  ret %union.tree_node* %1, !dbg !6691
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6692 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6693, metadata !DIExpression()), !dbg !6694
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6695
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6696
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !6697
  %1 = load i32, i32* %nargs, align 4, !dbg !6697
  ret i32 %1, !dbg !6698
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %dbg) #0 !dbg !6699 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !6702, metadata !DIExpression()), !dbg !6703
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !6704
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6705
  ret %union.tree_node* %call, !dbg !6706
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_set_var(%union.gimple_statement_d* %dbg, %union.tree_node* %var) #0 !dbg !6707 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !6708, metadata !DIExpression()), !dbg !6709
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6710, metadata !DIExpression()), !dbg !6711
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !6712
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6713
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !6714
  ret void, !dbg !6715
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %dbg) #0 !dbg !6716 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !6717, metadata !DIExpression()), !dbg !6718
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !6719
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* null), !dbg !6720
  ret void, !dbg !6721
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !6722 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6727, metadata !DIExpression()), !dbg !6728
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6729, metadata !DIExpression()), !dbg !6728
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6728
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6728
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6728

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6728
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6728
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !6728
  %3 = load i32, i32* %num, align 8, !dbg !6728
  %cmp = icmp ult i32 %1, %3, !dbg !6728
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6730
  %land.ext = zext i1 %4 to i32, !dbg !6728
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6728
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !6728
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6728
  %idxprom = zext i32 %6 to i64, !dbg !6728
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6728
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6728
  ret %union.tree_node* %7, !dbg !6728
}

declare dso_local void @insert_field_into_struct(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6731 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6732, metadata !DIExpression()), !dbg !6733
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6734, metadata !DIExpression()), !dbg !6735
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6736, metadata !DIExpression()), !dbg !6737
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6738
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6739
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6740
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6741
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !6742
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6743
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6744
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6745
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6746
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6747
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6748
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6749
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6750
  ret void, !dbg !6751
}

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !6752 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6753, metadata !DIExpression()), !dbg !6754
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6755
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6755
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6755

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6756
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !6757
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !6757
  br label %cond.end, !dbg !6755

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6755

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6755
  ret %struct.gimple_seq_node_d* %cond, !dbg !6758
}

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @create_loads_for_reductions(i8** %slot, i8* %data) #0 !dbg !6759 {
entry:
  %retval = alloca i32, align 4
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %red = alloca %struct.reduction_info*, align 8
  %clsn_data = alloca %struct.clsn_data*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %type = alloca %union.tree_node*, align 8
  %struct_type = alloca %union.tree_node*, align 8
  %load_struct = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp12 = alloca %struct.gimple_stmt_iterator, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !6760, metadata !DIExpression()), !dbg !6761
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6762, metadata !DIExpression()), !dbg !6763
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %red, metadata !6764, metadata !DIExpression()), !dbg !6765
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !6766
  %1 = load i8*, i8** %0, align 8, !dbg !6767
  %2 = bitcast i8* %1 to %struct.reduction_info*, !dbg !6768
  store %struct.reduction_info* %2, %struct.reduction_info** %red, align 8, !dbg !6765
  call void @llvm.dbg.declare(metadata %struct.clsn_data** %clsn_data, metadata !6769, metadata !DIExpression()), !dbg !6770
  %3 = load i8*, i8** %data.addr, align 8, !dbg !6771
  %4 = bitcast i8* %3 to %struct.clsn_data*, !dbg !6772
  store %struct.clsn_data* %4, %struct.clsn_data** %clsn_data, align 8, !dbg !6770
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6773, metadata !DIExpression()), !dbg !6774
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6775, metadata !DIExpression()), !dbg !6776
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6777, metadata !DIExpression()), !dbg !6778
  %5 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !6779
  %reduc_stmt = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %5, i32 0, i32 0, !dbg !6779
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt, align 8, !dbg !6779
  %call = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %6), !dbg !6779
  %common = bitcast %union.tree_node* %call to %struct.tree_common*, !dbg !6779
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6779
  %7 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6779
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !6778
  call void @llvm.dbg.declare(metadata %union.tree_node** %struct_type, metadata !6780, metadata !DIExpression()), !dbg !6781
  %8 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !6782
  %load = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %8, i32 0, i32 1, !dbg !6782
  %9 = load %union.tree_node*, %union.tree_node** %load, align 8, !dbg !6782
  %common2 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !6782
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !6782
  %10 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !6782
  %common4 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !6782
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !6782
  %11 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !6782
  store %union.tree_node* %11, %union.tree_node** %struct_type, align 8, !dbg !6781
  call void @llvm.dbg.declare(metadata %union.tree_node** %load_struct, metadata !6783, metadata !DIExpression()), !dbg !6784
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !6785, metadata !DIExpression()), !dbg !6786
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !6787, metadata !DIExpression()), !dbg !6788
  %12 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !6789
  %load_bb = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %12, i32 0, i32 3, !dbg !6790
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %load_bb, align 8, !dbg !6790
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %13), !dbg !6791
  %14 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6791
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6791
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 24, i1 false), !dbg !6791
  %16 = load %union.tree_node*, %union.tree_node** %struct_type, align 8, !dbg !6792
  %17 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !6792
  %load6 = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %17, i32 0, i32 1, !dbg !6792
  %18 = load %union.tree_node*, %union.tree_node** %load6, align 8, !dbg !6792
  %call7 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 47, %union.tree_node* %16, %union.tree_node* %18), !dbg !6792
  store %union.tree_node* %call7, %union.tree_node** %load_struct, align 8, !dbg !6793
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6794
  %20 = load %union.tree_node*, %union.tree_node** %load_struct, align 8, !dbg !6794
  %21 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !6794
  %field = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %21, i32 0, i32 5, !dbg !6794
  %22 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !6794
  %call8 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %19, %union.tree_node* %20, %union.tree_node* %22, %union.tree_node* null), !dbg !6794
  store %union.tree_node* %call8, %union.tree_node** %load_struct, align 8, !dbg !6795
  %23 = load %union.tree_node*, %union.tree_node** %load_struct, align 8, !dbg !6796
  store %union.tree_node* %23, %union.tree_node** %x, align 8, !dbg !6797
  %24 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !6798
  %keep_res = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %24, i32 0, i32 3, !dbg !6798
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %keep_res, align 8, !dbg !6798
  %call9 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %25), !dbg !6798
  %call10 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call9), !dbg !6798
  store %union.tree_node* %call10, %union.tree_node** %name, align 8, !dbg !6799
  %26 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6800
  %27 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !6800
  %call11 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %26, %union.tree_node* %27), !dbg !6800
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %stmt, align 8, !dbg !6801
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6802
  %29 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6803
  %ssa_name = bitcast %union.tree_node* %29 to %struct.tree_ssa_name*, !dbg !6803
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6803
  store %union.gimple_statement_d* %28, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6804
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6805
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %30, i32 0), !dbg !6806
  %31 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !6807
  %keep_res13 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %31, i32 0, i32 3, !dbg !6809
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %keep_res13, align 8, !dbg !6809
  %call14 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %32), !dbg !6810
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp12, %struct.basic_block_def* %call14), !dbg !6811
  %33 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6811
  %34 = bitcast %struct.gimple_stmt_iterator* %tmp12 to i8*, !dbg !6811
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 24, i1 false), !dbg !6811
  br label %for.cond, !dbg !6812

for.cond:                                         ; preds = %for.inc, %entry
  %call15 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6813
  %tobool = icmp ne i8 %call15, 0, !dbg !6815
  %lnot = xor i1 %tobool, true, !dbg !6815
  br i1 %lnot, label %for.body, label %for.end, !dbg !6816

for.body:                                         ; preds = %for.cond
  %call16 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6817
  %35 = load %struct.reduction_info*, %struct.reduction_info** %red, align 8, !dbg !6819
  %keep_res17 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %35, i32 0, i32 3, !dbg !6820
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %keep_res17, align 8, !dbg !6820
  %cmp = icmp eq %union.gimple_statement_d* %call16, %36, !dbg !6821
  br i1 %cmp, label %if.then, label %if.end, !dbg !6822

if.then:                                          ; preds = %for.body
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 0), !dbg !6823
  store i32 1, i32* %retval, align 4, !dbg !6825
  br label %return, !dbg !6825

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6820

for.inc:                                          ; preds = %if.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6826
  br label %for.cond, !dbg !6827, !llvm.loop !6828

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 953, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6830
  store i32 0, i32* %retval, align 4, !dbg !6831
  br label %return, !dbg !6831

return:                                           ; preds = %for.end, %if.then
  %37 = load i32, i32* %retval, align 4, !dbg !6832
  ret i32 %37, !dbg !6832
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_parallel(%struct.gimple_seq_d*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.basic_block_def* @split_loop_exit_edge(%struct.edge_def*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_return(i8 zeroext) #2

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #2

declare dso_local void @extract_true_false_edges_from_block(%struct.basic_block_def*, %struct.edge_def**, %struct.edge_def**) #2

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %gs, %struct.edge_def* %e) #0 !dbg !6833 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6836, metadata !DIExpression()), !dbg !6837
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !6838, metadata !DIExpression()), !dbg !6839
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6840
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !6841
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 6, !dbg !6842
  %2 = load i32, i32* %dest_idx, align 4, !dbg !6842
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %2), !dbg !6843
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !6844
  %3 = load i32, i32* %locus, align 8, !dbg !6844
  ret i32 %3, !dbg !6845
}

declare dso_local %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_for(%struct.gimple_seq_d*, %union.tree_node*, i64, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_index(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %index) #0 !dbg !6846 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %index.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6849, metadata !DIExpression()), !dbg !6850
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6851, metadata !DIExpression()), !dbg !6852
  store %union.tree_node* %index, %union.tree_node** %index.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %index.addr, metadata !6853, metadata !DIExpression()), !dbg !6854
  %0 = load i64, i64* %i.addr, align 8, !dbg !6855
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6855
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6855
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6855
  %2 = load i64, i64* %collapse, align 8, !dbg !6855
  %cmp = icmp ult i64 %0, %2, !dbg !6855
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6855

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 3475, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6855
  br label %cond.end, !dbg !6855

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6855

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6855
  %3 = load %union.tree_node*, %union.tree_node** %index.addr, align 8, !dbg !6856
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6857
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !6858
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6859
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6859
  %6 = load i64, i64* %i.addr, align 8, !dbg !6860
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !6857
  %index2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 1, !dbg !6861
  store %union.tree_node* %3, %union.tree_node** %index2, align 8, !dbg !6862
  ret void, !dbg !6863
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_initial(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %initial) #0 !dbg !6864 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %initial.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6865, metadata !DIExpression()), !dbg !6866
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6867, metadata !DIExpression()), !dbg !6868
  store %union.tree_node* %initial, %union.tree_node** %initial.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %initial.addr, metadata !6869, metadata !DIExpression()), !dbg !6870
  %0 = load i64, i64* %i.addr, align 8, !dbg !6871
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6871
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6871
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6871
  %2 = load i64, i64* %collapse, align 8, !dbg !6871
  %cmp = icmp ult i64 %0, %2, !dbg !6871
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6871

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 3508, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6871
  br label %cond.end, !dbg !6871

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6871

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6871
  %3 = load %union.tree_node*, %union.tree_node** %initial.addr, align 8, !dbg !6872
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6873
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !6874
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6875
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6875
  %6 = load i64, i64* %i.addr, align 8, !dbg !6876
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !6873
  %initial2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 2, !dbg !6877
  store %union.tree_node* %3, %union.tree_node** %initial2, align 8, !dbg !6878
  ret void, !dbg !6879
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_final(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %final) #0 !dbg !6880 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %final.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6881, metadata !DIExpression()), !dbg !6882
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6883, metadata !DIExpression()), !dbg !6884
  store %union.tree_node* %final, %union.tree_node** %final.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %final.addr, metadata !6885, metadata !DIExpression()), !dbg !6886
  %0 = load i64, i64* %i.addr, align 8, !dbg !6887
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6887
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6887
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6887
  %2 = load i64, i64* %collapse, align 8, !dbg !6887
  %cmp = icmp ult i64 %0, %2, !dbg !6887
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6887

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 3541, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6887
  br label %cond.end, !dbg !6887

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6887

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6887
  %3 = load %union.tree_node*, %union.tree_node** %final.addr, align 8, !dbg !6888
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6889
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !6890
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6891
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6891
  %6 = load i64, i64* %i.addr, align 8, !dbg !6892
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !6889
  %final2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 3, !dbg !6893
  store %union.tree_node* %3, %union.tree_node** %final2, align 8, !dbg !6894
  ret void, !dbg !6895
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_cond(%union.gimple_statement_d* %gs, i64 %i, i32 %cond) #0 !dbg !6896 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %cond.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6899, metadata !DIExpression()), !dbg !6900
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6901, metadata !DIExpression()), !dbg !6902
  store i32 %cond, i32* %cond.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cond.addr, metadata !6903, metadata !DIExpression()), !dbg !6904
  %0 = load i32, i32* %cond.addr, align 4, !dbg !6905
  %idxprom = sext i32 %0 to i64, !dbg !6905
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6905
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6905
  %cmp = icmp eq i32 %1, 5, !dbg !6905
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6905

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 4076, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6905
  br label %cond.end, !dbg !6905

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6905

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6905
  %2 = load i64, i64* %i.addr, align 8, !dbg !6906
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6906
  %gimple_omp_for = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_omp_for*, !dbg !6906
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6906
  %4 = load i64, i64* %collapse, align 8, !dbg !6906
  %cmp2 = icmp ult i64 %2, %4, !dbg !6906
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !6906

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 4077, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6906
  br label %cond.end5, !dbg !6906

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6906

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6906
  %5 = load i32, i32* %cond.addr, align 4, !dbg !6907
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6908
  %gimple_omp_for7 = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_omp_for*, !dbg !6909
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for7, i32 0, i32 3, !dbg !6910
  %7 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6910
  %8 = load i64, i64* %i.addr, align 8, !dbg !6911
  %arrayidx8 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %7, i64 %8, !dbg !6908
  %cond9 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx8, i32 0, i32 0, !dbg !6912
  store i32 %5, i32* %cond9, align 8, !dbg !6913
  ret void, !dbg !6914
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !6915 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6916, metadata !DIExpression()), !dbg !6917
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6918
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6919
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6920
  %bf.load = load i32, i32* %1, align 8, !dbg !6920
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6920
  ret i32 %bf.lshr, !dbg !6921
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_omp_for_set_incr(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %incr) #0 !dbg !6922 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  %incr.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6923, metadata !DIExpression()), !dbg !6924
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6925, metadata !DIExpression()), !dbg !6926
  store %union.tree_node* %incr, %union.tree_node** %incr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %incr.addr, metadata !6927, metadata !DIExpression()), !dbg !6928
  %0 = load i64, i64* %i.addr, align 8, !dbg !6929
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6929
  %gimple_omp_for = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_omp_for*, !dbg !6929
  %collapse = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for, i32 0, i32 2, !dbg !6929
  %2 = load i64, i64* %collapse, align 8, !dbg !6929
  %cmp = icmp ult i64 %0, %2, !dbg !6929
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6929

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.21, i64 0, i64 0), i32 3574, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0)), !dbg !6929
  br label %cond.end, !dbg !6929

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6929

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6929
  %3 = load %union.tree_node*, %union.tree_node** %incr.addr, align 8, !dbg !6930
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6931
  %gimple_omp_for1 = bitcast %union.gimple_statement_d* %4 to %struct.gimple_statement_omp_for*, !dbg !6932
  %iter = getelementptr inbounds %struct.gimple_statement_omp_for, %struct.gimple_statement_omp_for* %gimple_omp_for1, i32 0, i32 3, !dbg !6933
  %5 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %iter, align 8, !dbg !6933
  %6 = load i64, i64* %i.addr, align 8, !dbg !6934
  %arrayidx = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %5, i64 %6, !dbg !6931
  %incr2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %arrayidx, i32 0, i32 4, !dbg !6935
  store %union.tree_node* %3, %union.tree_node** %incr2, align 8, !dbg !6936
  ret void, !dbg !6937
}

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_continue(%union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @snprintf(i8*, i64, i8*, ...) #2

declare dso_local i8* @current_function_name() #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local void @clean_symbol_name(i8*) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

declare dso_local %union.tree_node* @build_function_type_list(%union.tree_node*, ...) #2

declare dso_local %struct.bitmap_head_def* @bitmap_gc_alloc_stat() #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local %union.tree_node* @make_node_stat(i32) #2

declare dso_local void @allocate_struct_function(%union.tree_node*, i8 zeroext) #2

declare dso_local void @set_cfun(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @create_phi_for_local_result(i8** %slot, i8* %data) #0 !dbg !6938 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %reduc = alloca %struct.reduction_info*, align 8
  %loop = alloca %struct.loop*, align 8
  %e = alloca %struct.edge_def*, align 8
  %new_phi = alloca %union.gimple_statement_d*, align 8
  %store_bb = alloca %struct.basic_block_def*, align 8
  %local_res = alloca %union.tree_node*, align 8
  %locus = alloca i32, align 4
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !6939, metadata !DIExpression()), !dbg !6940
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6941, metadata !DIExpression()), !dbg !6942
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %reduc, metadata !6943, metadata !DIExpression()), !dbg !6944
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !6945
  %1 = load i8*, i8** %0, align 8, !dbg !6946
  %2 = bitcast i8* %1 to %struct.reduction_info*, !dbg !6947
  store %struct.reduction_info* %2, %struct.reduction_info** %reduc, align 8, !dbg !6944
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !6948, metadata !DIExpression()), !dbg !6950
  %3 = load i8*, i8** %data.addr, align 8, !dbg !6951
  %4 = bitcast i8* %3 to %struct.loop*, !dbg !6952
  store %struct.loop* %4, %struct.loop** %loop, align 8, !dbg !6950
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6953, metadata !DIExpression()), !dbg !6954
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_phi, metadata !6955, metadata !DIExpression()), !dbg !6956
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %store_bb, metadata !6957, metadata !DIExpression()), !dbg !6958
  call void @llvm.dbg.declare(metadata %union.tree_node** %local_res, metadata !6959, metadata !DIExpression()), !dbg !6960
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !6961, metadata !DIExpression()), !dbg !6962
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6963
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 3, !dbg !6963
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !6963
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 1, !dbg !6963
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6963
  %tobool = icmp ne %struct.VEC_edge_gc* %7, null, !dbg !6963
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6963

cond.true:                                        ; preds = %entry
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6963
  %latch1 = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 3, !dbg !6963
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %latch1, align 8, !dbg !6963
  %succs2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 1, !dbg !6963
  %10 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs2, align 8, !dbg !6963
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %10, i32 0, i32 0, !dbg !6963
  br label %cond.end, !dbg !6963

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6963

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6963
  %call = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !6963
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 7, !dbg !6963
  %11 = load i32, i32* %flags, align 8, !dbg !6963
  %and = and i32 %11, 1, !dbg !6963
  %tobool3 = icmp ne i32 %and, 0, !dbg !6963
  br i1 %tobool3, label %cond.true4, label %cond.false16, !dbg !6963

cond.true4:                                       ; preds = %cond.end
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6963
  %latch5 = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 3, !dbg !6963
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %latch5, align 8, !dbg !6963
  %succs6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 1, !dbg !6963
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs6, align 8, !dbg !6963
  %tobool7 = icmp ne %struct.VEC_edge_gc* %14, null, !dbg !6963
  br i1 %tobool7, label %cond.true8, label %cond.false12, !dbg !6963

cond.true8:                                       ; preds = %cond.true4
  %15 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6963
  %latch9 = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 3, !dbg !6963
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %latch9, align 8, !dbg !6963
  %succs10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 1, !dbg !6963
  %17 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs10, align 8, !dbg !6963
  %base11 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %17, i32 0, i32 0, !dbg !6963
  br label %cond.end13, !dbg !6963

cond.false12:                                     ; preds = %cond.true4
  br label %cond.end13, !dbg !6963

cond.end13:                                       ; preds = %cond.false12, %cond.true8
  %cond14 = phi %struct.VEC_edge_base* [ %base11, %cond.true8 ], [ null, %cond.false12 ], !dbg !6963
  %call15 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond14, i32 0), !dbg !6963
  br label %cond.end28, !dbg !6963

cond.false16:                                     ; preds = %cond.end
  %18 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6963
  %latch17 = getelementptr inbounds %struct.loop, %struct.loop* %18, i32 0, i32 3, !dbg !6963
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %latch17, align 8, !dbg !6963
  %succs18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 1, !dbg !6963
  %20 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs18, align 8, !dbg !6963
  %tobool19 = icmp ne %struct.VEC_edge_gc* %20, null, !dbg !6963
  br i1 %tobool19, label %cond.true20, label %cond.false24, !dbg !6963

cond.true20:                                      ; preds = %cond.false16
  %21 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6963
  %latch21 = getelementptr inbounds %struct.loop, %struct.loop* %21, i32 0, i32 3, !dbg !6963
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %latch21, align 8, !dbg !6963
  %succs22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 1, !dbg !6963
  %23 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs22, align 8, !dbg !6963
  %base23 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %23, i32 0, i32 0, !dbg !6963
  br label %cond.end25, !dbg !6963

cond.false24:                                     ; preds = %cond.false16
  br label %cond.end25, !dbg !6963

cond.end25:                                       ; preds = %cond.false24, %cond.true20
  %cond26 = phi %struct.VEC_edge_base* [ %base23, %cond.true20 ], [ null, %cond.false24 ], !dbg !6963
  %call27 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond26, i32 1), !dbg !6963
  br label %cond.end28, !dbg !6963

cond.end28:                                       ; preds = %cond.end25, %cond.end13
  %cond29 = phi %struct.edge_def* [ %call15, %cond.end13 ], [ %call27, %cond.end25 ], !dbg !6963
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond29, i32 0, i32 1, !dbg !6964
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6964
  store %struct.basic_block_def* %24, %struct.basic_block_def** %store_bb, align 8, !dbg !6965
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %store_bb, align 8, !dbg !6966
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 0, !dbg !6966
  %26 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6966
  %tobool30 = icmp ne %struct.VEC_edge_gc* %26, null, !dbg !6966
  br i1 %tobool30, label %cond.true31, label %cond.false34, !dbg !6966

cond.true31:                                      ; preds = %cond.end28
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %store_bb, align 8, !dbg !6966
  %preds32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 0, !dbg !6966
  %28 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds32, align 8, !dbg !6966
  %base33 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %28, i32 0, i32 0, !dbg !6966
  br label %cond.end35, !dbg !6966

cond.false34:                                     ; preds = %cond.end28
  br label %cond.end35, !dbg !6966

cond.end35:                                       ; preds = %cond.false34, %cond.true31
  %cond36 = phi %struct.VEC_edge_base* [ %base33, %cond.true31 ], [ null, %cond.false34 ], !dbg !6966
  %call37 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond36, i32 0), !dbg !6966
  %29 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6968
  %latch38 = getelementptr inbounds %struct.loop, %struct.loop* %29, i32 0, i32 3, !dbg !6968
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %latch38, align 8, !dbg !6968
  %succs39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 1, !dbg !6968
  %31 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs39, align 8, !dbg !6968
  %tobool40 = icmp ne %struct.VEC_edge_gc* %31, null, !dbg !6968
  br i1 %tobool40, label %cond.true41, label %cond.false45, !dbg !6968

cond.true41:                                      ; preds = %cond.end35
  %32 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6968
  %latch42 = getelementptr inbounds %struct.loop, %struct.loop* %32, i32 0, i32 3, !dbg !6968
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %latch42, align 8, !dbg !6968
  %succs43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 1, !dbg !6968
  %34 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs43, align 8, !dbg !6968
  %base44 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %34, i32 0, i32 0, !dbg !6968
  br label %cond.end46, !dbg !6968

cond.false45:                                     ; preds = %cond.end35
  br label %cond.end46, !dbg !6968

cond.end46:                                       ; preds = %cond.false45, %cond.true41
  %cond47 = phi %struct.VEC_edge_base* [ %base44, %cond.true41 ], [ null, %cond.false45 ], !dbg !6968
  %call48 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond47, i32 0), !dbg !6968
  %flags49 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call48, i32 0, i32 7, !dbg !6968
  %35 = load i32, i32* %flags49, align 8, !dbg !6968
  %and50 = and i32 %35, 1, !dbg !6968
  %tobool51 = icmp ne i32 %and50, 0, !dbg !6968
  br i1 %tobool51, label %cond.true52, label %cond.false64, !dbg !6968

cond.true52:                                      ; preds = %cond.end46
  %36 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6968
  %latch53 = getelementptr inbounds %struct.loop, %struct.loop* %36, i32 0, i32 3, !dbg !6968
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %latch53, align 8, !dbg !6968
  %succs54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 1, !dbg !6968
  %38 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs54, align 8, !dbg !6968
  %tobool55 = icmp ne %struct.VEC_edge_gc* %38, null, !dbg !6968
  br i1 %tobool55, label %cond.true56, label %cond.false60, !dbg !6968

cond.true56:                                      ; preds = %cond.true52
  %39 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6968
  %latch57 = getelementptr inbounds %struct.loop, %struct.loop* %39, i32 0, i32 3, !dbg !6968
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %latch57, align 8, !dbg !6968
  %succs58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 1, !dbg !6968
  %41 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs58, align 8, !dbg !6968
  %base59 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %41, i32 0, i32 0, !dbg !6968
  br label %cond.end61, !dbg !6968

cond.false60:                                     ; preds = %cond.true52
  br label %cond.end61, !dbg !6968

cond.end61:                                       ; preds = %cond.false60, %cond.true56
  %cond62 = phi %struct.VEC_edge_base* [ %base59, %cond.true56 ], [ null, %cond.false60 ], !dbg !6968
  %call63 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond62, i32 0), !dbg !6968
  br label %cond.end76, !dbg !6968

cond.false64:                                     ; preds = %cond.end46
  %42 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6968
  %latch65 = getelementptr inbounds %struct.loop, %struct.loop* %42, i32 0, i32 3, !dbg !6968
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %latch65, align 8, !dbg !6968
  %succs66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 1, !dbg !6968
  %44 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs66, align 8, !dbg !6968
  %tobool67 = icmp ne %struct.VEC_edge_gc* %44, null, !dbg !6968
  br i1 %tobool67, label %cond.true68, label %cond.false72, !dbg !6968

cond.true68:                                      ; preds = %cond.false64
  %45 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6968
  %latch69 = getelementptr inbounds %struct.loop, %struct.loop* %45, i32 0, i32 3, !dbg !6968
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %latch69, align 8, !dbg !6968
  %succs70 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 1, !dbg !6968
  %47 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs70, align 8, !dbg !6968
  %base71 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %47, i32 0, i32 0, !dbg !6968
  br label %cond.end73, !dbg !6968

cond.false72:                                     ; preds = %cond.false64
  br label %cond.end73, !dbg !6968

cond.end73:                                       ; preds = %cond.false72, %cond.true68
  %cond74 = phi %struct.VEC_edge_base* [ %base71, %cond.true68 ], [ null, %cond.false72 ], !dbg !6968
  %call75 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond74, i32 1), !dbg !6968
  br label %cond.end76, !dbg !6968

cond.end76:                                       ; preds = %cond.end73, %cond.end61
  %cond77 = phi %struct.edge_def* [ %call63, %cond.end61 ], [ %call75, %cond.end73 ], !dbg !6968
  %cmp = icmp eq %struct.edge_def* %call37, %cond77, !dbg !6969
  br i1 %cmp, label %if.then, label %if.else, !dbg !6970

if.then:                                          ; preds = %cond.end76
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %store_bb, align 8, !dbg !6971
  %preds78 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 0, !dbg !6971
  %49 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds78, align 8, !dbg !6971
  %tobool79 = icmp ne %struct.VEC_edge_gc* %49, null, !dbg !6971
  br i1 %tobool79, label %cond.true80, label %cond.false83, !dbg !6971

cond.true80:                                      ; preds = %if.then
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %store_bb, align 8, !dbg !6971
  %preds81 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 0, !dbg !6971
  %51 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds81, align 8, !dbg !6971
  %base82 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %51, i32 0, i32 0, !dbg !6971
  br label %cond.end84, !dbg !6971

cond.false83:                                     ; preds = %if.then
  br label %cond.end84, !dbg !6971

cond.end84:                                       ; preds = %cond.false83, %cond.true80
  %cond85 = phi %struct.VEC_edge_base* [ %base82, %cond.true80 ], [ null, %cond.false83 ], !dbg !6971
  %call86 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond85, i32 1), !dbg !6971
  store %struct.edge_def* %call86, %struct.edge_def** %e, align 8, !dbg !6972
  br label %if.end, !dbg !6973

if.else:                                          ; preds = %cond.end76
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %store_bb, align 8, !dbg !6974
  %preds87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 0, !dbg !6974
  %53 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds87, align 8, !dbg !6974
  %tobool88 = icmp ne %struct.VEC_edge_gc* %53, null, !dbg !6974
  br i1 %tobool88, label %cond.true89, label %cond.false92, !dbg !6974

cond.true89:                                      ; preds = %if.else
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %store_bb, align 8, !dbg !6974
  %preds90 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 0, !dbg !6974
  %55 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds90, align 8, !dbg !6974
  %base91 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %55, i32 0, i32 0, !dbg !6974
  br label %cond.end93, !dbg !6974

cond.false92:                                     ; preds = %if.else
  br label %cond.end93, !dbg !6974

cond.end93:                                       ; preds = %cond.false92, %cond.true89
  %cond94 = phi %struct.VEC_edge_base* [ %base91, %cond.true89 ], [ null, %cond.false92 ], !dbg !6974
  %call95 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond94, i32 0), !dbg !6974
  store %struct.edge_def* %call95, %struct.edge_def** %e, align 8, !dbg !6975
  br label %if.end

if.end:                                           ; preds = %cond.end93, %cond.end84
  %56 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !6976
  %reduc_stmt = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %56, i32 0, i32 0, !dbg !6976
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt, align 8, !dbg !6976
  %call96 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %57), !dbg !6976
  %ssa_name = bitcast %union.tree_node* %call96 to %struct.tree_ssa_name*, !dbg !6976
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !6976
  %58 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6976
  %call97 = call %union.tree_node* @make_ssa_name(%union.tree_node* %58, %union.gimple_statement_d* null), !dbg !6977
  store %union.tree_node* %call97, %union.tree_node** %local_res, align 8, !dbg !6978
  %59 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !6979
  %reduc_stmt98 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %59, i32 0, i32 0, !dbg !6980
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt98, align 8, !dbg !6980
  %call99 = call i32 @gimple_location(%union.gimple_statement_d* %60), !dbg !6981
  store i32 %call99, i32* %locus, align 4, !dbg !6982
  %61 = load %union.tree_node*, %union.tree_node** %local_res, align 8, !dbg !6983
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %store_bb, align 8, !dbg !6984
  %call100 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %61, %struct.basic_block_def* %62), !dbg !6985
  store %union.gimple_statement_d* %call100, %union.gimple_statement_d** %new_phi, align 8, !dbg !6986
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6987
  %64 = load %union.tree_node*, %union.tree_node** %local_res, align 8, !dbg !6988
  %ssa_name101 = bitcast %union.tree_node* %64 to %struct.tree_ssa_name*, !dbg !6988
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name101, i32 0, i32 2, !dbg !6988
  store %union.gimple_statement_d* %63, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6989
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6990
  %66 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !6991
  %init = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %66, i32 0, i32 6, !dbg !6992
  %67 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !6992
  %68 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6993
  %69 = load i32, i32* %locus, align 4, !dbg !6994
  call void @add_phi_arg(%union.gimple_statement_d* %65, %union.tree_node* %67, %struct.edge_def* %68, i32 %69), !dbg !6995
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6996
  %71 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !6997
  %reduc_stmt102 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %71, i32 0, i32 0, !dbg !6998
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_stmt102, align 8, !dbg !6998
  %call103 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %72), !dbg !6999
  %73 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7000
  %latch104 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 3, !dbg !7000
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %latch104, align 8, !dbg !7000
  %succs105 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 1, !dbg !7000
  %75 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs105, align 8, !dbg !7000
  %tobool106 = icmp ne %struct.VEC_edge_gc* %75, null, !dbg !7000
  br i1 %tobool106, label %cond.true107, label %cond.false111, !dbg !7000

cond.true107:                                     ; preds = %if.end
  %76 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7000
  %latch108 = getelementptr inbounds %struct.loop, %struct.loop* %76, i32 0, i32 3, !dbg !7000
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %latch108, align 8, !dbg !7000
  %succs109 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 1, !dbg !7000
  %78 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs109, align 8, !dbg !7000
  %base110 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %78, i32 0, i32 0, !dbg !7000
  br label %cond.end112, !dbg !7000

cond.false111:                                    ; preds = %if.end
  br label %cond.end112, !dbg !7000

cond.end112:                                      ; preds = %cond.false111, %cond.true107
  %cond113 = phi %struct.VEC_edge_base* [ %base110, %cond.true107 ], [ null, %cond.false111 ], !dbg !7000
  %call114 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond113, i32 0), !dbg !7000
  %flags115 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call114, i32 0, i32 7, !dbg !7000
  %79 = load i32, i32* %flags115, align 8, !dbg !7000
  %and116 = and i32 %79, 1, !dbg !7000
  %tobool117 = icmp ne i32 %and116, 0, !dbg !7000
  br i1 %tobool117, label %cond.true118, label %cond.false130, !dbg !7000

cond.true118:                                     ; preds = %cond.end112
  %80 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7000
  %latch119 = getelementptr inbounds %struct.loop, %struct.loop* %80, i32 0, i32 3, !dbg !7000
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %latch119, align 8, !dbg !7000
  %succs120 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 1, !dbg !7000
  %82 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs120, align 8, !dbg !7000
  %tobool121 = icmp ne %struct.VEC_edge_gc* %82, null, !dbg !7000
  br i1 %tobool121, label %cond.true122, label %cond.false126, !dbg !7000

cond.true122:                                     ; preds = %cond.true118
  %83 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7000
  %latch123 = getelementptr inbounds %struct.loop, %struct.loop* %83, i32 0, i32 3, !dbg !7000
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %latch123, align 8, !dbg !7000
  %succs124 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 1, !dbg !7000
  %85 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs124, align 8, !dbg !7000
  %base125 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %85, i32 0, i32 0, !dbg !7000
  br label %cond.end127, !dbg !7000

cond.false126:                                    ; preds = %cond.true118
  br label %cond.end127, !dbg !7000

cond.end127:                                      ; preds = %cond.false126, %cond.true122
  %cond128 = phi %struct.VEC_edge_base* [ %base125, %cond.true122 ], [ null, %cond.false126 ], !dbg !7000
  %call129 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond128, i32 0), !dbg !7000
  br label %cond.end142, !dbg !7000

cond.false130:                                    ; preds = %cond.end112
  %86 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7000
  %latch131 = getelementptr inbounds %struct.loop, %struct.loop* %86, i32 0, i32 3, !dbg !7000
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %latch131, align 8, !dbg !7000
  %succs132 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 1, !dbg !7000
  %88 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs132, align 8, !dbg !7000
  %tobool133 = icmp ne %struct.VEC_edge_gc* %88, null, !dbg !7000
  br i1 %tobool133, label %cond.true134, label %cond.false138, !dbg !7000

cond.true134:                                     ; preds = %cond.false130
  %89 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7000
  %latch135 = getelementptr inbounds %struct.loop, %struct.loop* %89, i32 0, i32 3, !dbg !7000
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %latch135, align 8, !dbg !7000
  %succs136 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 1, !dbg !7000
  %91 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs136, align 8, !dbg !7000
  %base137 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %91, i32 0, i32 0, !dbg !7000
  br label %cond.end139, !dbg !7000

cond.false138:                                    ; preds = %cond.false130
  br label %cond.end139, !dbg !7000

cond.end139:                                      ; preds = %cond.false138, %cond.true134
  %cond140 = phi %struct.VEC_edge_base* [ %base137, %cond.true134 ], [ null, %cond.false138 ], !dbg !7000
  %call141 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond140, i32 1), !dbg !7000
  br label %cond.end142, !dbg !7000

cond.end142:                                      ; preds = %cond.end139, %cond.end127
  %cond143 = phi %struct.edge_def* [ %call129, %cond.end127 ], [ %call141, %cond.end139 ], !dbg !7000
  %92 = load i32, i32* %locus, align 4, !dbg !7001
  call void @add_phi_arg(%union.gimple_statement_d* %70, %union.tree_node* %call103, %struct.edge_def* %cond143, i32 %92), !dbg !7002
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !7003
  %94 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !7004
  %new_phi144 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %94, i32 0, i32 7, !dbg !7005
  store %union.gimple_statement_d* %93, %union.gimple_statement_d** %new_phi144, align 8, !dbg !7006
  ret i32 1, !dbg !7007
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @create_call_for_reduction_1(i8** %slot, i8* %data) #0 !dbg !7008 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %reduc = alloca %struct.reduction_info*, align 8
  %clsn_data = alloca %struct.clsn_data*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %type = alloca %union.tree_node*, align 8
  %struct_type = alloca %union.tree_node*, align 8
  %load_struct = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %t = alloca %union.tree_node*, align 8
  %addr = alloca %union.tree_node*, align 8
  %ref = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %tmp_load = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %load7 = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp23 = alloca %struct.gimple_stmt_iterator, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !7009, metadata !DIExpression()), !dbg !7010
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7011, metadata !DIExpression()), !dbg !7012
  call void @llvm.dbg.declare(metadata %struct.reduction_info** %reduc, metadata !7013, metadata !DIExpression()), !dbg !7014
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !7015
  %1 = load i8*, i8** %0, align 8, !dbg !7016
  %2 = bitcast i8* %1 to %struct.reduction_info*, !dbg !7017
  store %struct.reduction_info* %2, %struct.reduction_info** %reduc, align 8, !dbg !7014
  call void @llvm.dbg.declare(metadata %struct.clsn_data** %clsn_data, metadata !7018, metadata !DIExpression()), !dbg !7019
  %3 = load i8*, i8** %data.addr, align 8, !dbg !7020
  %4 = bitcast i8* %3 to %struct.clsn_data*, !dbg !7021
  store %struct.clsn_data* %4, %struct.clsn_data** %clsn_data, align 8, !dbg !7019
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7022, metadata !DIExpression()), !dbg !7023
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7024, metadata !DIExpression()), !dbg !7025
  %5 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !7026
  %reduc_phi = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %5, i32 0, i32 1, !dbg !7026
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %reduc_phi, align 8, !dbg !7026
  %call = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %6), !dbg !7026
  %call1 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call), !dbg !7026
  %common = bitcast %union.tree_node* %call1 to %struct.tree_common*, !dbg !7026
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7026
  %7 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !7026
  store %union.tree_node* %7, %union.tree_node** %type, align 8, !dbg !7025
  call void @llvm.dbg.declare(metadata %union.tree_node** %struct_type, metadata !7027, metadata !DIExpression()), !dbg !7028
  %8 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !7029
  %load = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %8, i32 0, i32 1, !dbg !7029
  %9 = load %union.tree_node*, %union.tree_node** %load, align 8, !dbg !7029
  %common3 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !7029
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common3, i32 0, i32 2, !dbg !7029
  %10 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !7029
  %common5 = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !7029
  %type6 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common5, i32 0, i32 2, !dbg !7029
  %11 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !7029
  store %union.tree_node* %11, %union.tree_node** %struct_type, align 8, !dbg !7028
  call void @llvm.dbg.declare(metadata %union.tree_node** %load_struct, metadata !7030, metadata !DIExpression()), !dbg !7031
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7032, metadata !DIExpression()), !dbg !7033
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !7034, metadata !DIExpression()), !dbg !7035
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7036, metadata !DIExpression()), !dbg !7037
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7038, metadata !DIExpression()), !dbg !7039
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !7040, metadata !DIExpression()), !dbg !7041
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !7042, metadata !DIExpression()), !dbg !7043
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !7044, metadata !DIExpression()), !dbg !7045
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp_load, metadata !7046, metadata !DIExpression()), !dbg !7047
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !7048, metadata !DIExpression()), !dbg !7049
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %load7, metadata !7050, metadata !DIExpression()), !dbg !7051
  %12 = load %union.tree_node*, %union.tree_node** %struct_type, align 8, !dbg !7052
  %13 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !7052
  %load8 = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %13, i32 0, i32 1, !dbg !7052
  %14 = load %union.tree_node*, %union.tree_node** %load8, align 8, !dbg !7052
  %call9 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 47, %union.tree_node* %12, %union.tree_node* %14), !dbg !7052
  store %union.tree_node* %call9, %union.tree_node** %load_struct, align 8, !dbg !7053
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7054
  %16 = load %union.tree_node*, %union.tree_node** %load_struct, align 8, !dbg !7054
  %17 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !7054
  %field = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %17, i32 0, i32 5, !dbg !7054
  %18 = load %union.tree_node*, %union.tree_node** %field, align 8, !dbg !7054
  %call10 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %15, %union.tree_node* %16, %union.tree_node* %18, %union.tree_node* null), !dbg !7054
  store %union.tree_node* %call10, %union.tree_node** %t, align 8, !dbg !7055
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7056
  %20 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7057
  %call11 = call %union.tree_node* @build_addr(%union.tree_node* %19, %union.tree_node* %20), !dbg !7058
  store %union.tree_node* %call11, %union.tree_node** %addr, align 8, !dbg !7059
  %21 = load %struct.clsn_data*, %struct.clsn_data** %clsn_data, align 8, !dbg !7060
  %load_bb = getelementptr inbounds %struct.clsn_data, %struct.clsn_data* %21, i32 0, i32 3, !dbg !7061
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %load_bb, align 8, !dbg !7061
  store %struct.basic_block_def* %22, %struct.basic_block_def** %bb, align 8, !dbg !7062
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7063
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7064
  %25 = bitcast %union.tree_node* %24 to i8*, !dbg !7064
  %call12 = call %struct.edge_def* @split_block(%struct.basic_block_def* %23, i8* %25), !dbg !7065
  store %struct.edge_def* %call12, %struct.edge_def** %e, align 8, !dbg !7066
  %26 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7067
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 1, !dbg !7068
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7068
  store %struct.basic_block_def* %27, %struct.basic_block_def** %new_bb, align 8, !dbg !7069
  %28 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7070
  %common13 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !7070
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !7070
  %29 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !7070
  %common15 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !7070
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !7070
  %30 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !7070
  %call17 = call %union.tree_node* @create_tmp_var(%union.tree_node* %30, i8* null), !dbg !7071
  store %union.tree_node* %call17, %union.tree_node** %tmp_load, align 8, !dbg !7072
  %31 = load %union.tree_node*, %union.tree_node** %tmp_load, align 8, !dbg !7073
  %call18 = call zeroext i8 @add_referenced_var(%union.tree_node* %31), !dbg !7074
  %32 = load %union.tree_node*, %union.tree_node** %tmp_load, align 8, !dbg !7075
  %call19 = call %union.tree_node* @make_ssa_name(%union.tree_node* %32, %union.gimple_statement_d* null), !dbg !7076
  store %union.tree_node* %call19, %union.tree_node** %tmp_load, align 8, !dbg !7077
  %33 = load %union.tree_node*, %union.tree_node** %tmp_load, align 8, !dbg !7078
  %34 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7079
  %call20 = call %union.gimple_statement_d* @gimple_build_omp_atomic_load(%union.tree_node* %33, %union.tree_node* %34), !dbg !7080
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %load7, align 8, !dbg !7081
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %load7, align 8, !dbg !7082
  %36 = load %union.tree_node*, %union.tree_node** %tmp_load, align 8, !dbg !7083
  %ssa_name = bitcast %union.tree_node* %36 to %struct.tree_ssa_name*, !dbg !7083
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7083
  store %union.gimple_statement_d* %35, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7084
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !7085
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %37), !dbg !7086
  %38 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7086
  %39 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7086
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 24, i1 false), !dbg !7086
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %load7, align 8, !dbg !7087
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %40, i32 0), !dbg !7088
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !7089
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %load7, align 8, !dbg !7090
  %43 = bitcast %union.gimple_statement_d* %42 to i8*, !dbg !7090
  %call21 = call %struct.edge_def* @split_block(%struct.basic_block_def* %41, i8* %43), !dbg !7091
  store %struct.edge_def* %call21, %struct.edge_def** %e, align 8, !dbg !7092
  %44 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7093
  %dest22 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %44, i32 0, i32 1, !dbg !7094
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %dest22, align 8, !dbg !7094
  store %struct.basic_block_def* %45, %struct.basic_block_def** %new_bb, align 8, !dbg !7095
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !7096
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp23, %struct.basic_block_def* %46), !dbg !7097
  %47 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7097
  %48 = bitcast %struct.gimple_stmt_iterator* %tmp23 to i8*, !dbg !7097
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 24, i1 false), !dbg !7097
  %49 = load %union.tree_node*, %union.tree_node** %tmp_load, align 8, !dbg !7098
  store %union.tree_node* %49, %union.tree_node** %ref, align 8, !dbg !7099
  %50 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !7100
  %reduction_code = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %50, i32 0, i32 2, !dbg !7100
  %51 = load i32, i32* %reduction_code, align 8, !dbg !7100
  %52 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !7100
  %new_phi = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %52, i32 0, i32 7, !dbg !7100
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !7100
  %call24 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %53), !dbg !7100
  %call25 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call24), !dbg !7100
  %common26 = bitcast %union.tree_node* %call25 to %struct.tree_common*, !dbg !7100
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !7100
  %54 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !7100
  %55 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !7100
  %56 = load %struct.reduction_info*, %struct.reduction_info** %reduc, align 8, !dbg !7100
  %new_phi28 = getelementptr inbounds %struct.reduction_info, %struct.reduction_info* %56, i32 0, i32 7, !dbg !7100
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi28, align 8, !dbg !7100
  %call29 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %57), !dbg !7100
  %call30 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call29), !dbg !7100
  %call31 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %51, %union.tree_node* %54, %union.tree_node* %55, %union.tree_node* %call30), !dbg !7100
  store %union.tree_node* %call31, %union.tree_node** %x, align 8, !dbg !7101
  %58 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !7102
  %call32 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %58, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 2), !dbg !7103
  store %union.tree_node* %call32, %union.tree_node** %name, align 8, !dbg !7104
  %59 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7105
  %call33 = call %union.gimple_statement_d* @gimple_build_omp_atomic_store(%union.tree_node* %59), !dbg !7106
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %call33, i32 0), !dbg !7107
  ret i32 1, !dbg !7108
}

declare dso_local %struct.edge_def* @split_block(%struct.basic_block_def*, i8*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_atomic_load(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_atomic_store(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !7109 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !7114, metadata !DIExpression()), !dbg !7115
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7116, metadata !DIExpression()), !dbg !7115
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !7117, metadata !DIExpression()), !dbg !7115
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7118
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !7118
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7118

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7118
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7118
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !7118
  %3 = load i32, i32* %num, align 4, !dbg !7118
  %cmp = icmp ult i32 %1, %3, !dbg !7118
  br i1 %cmp, label %if.then, label %if.else, !dbg !7115

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7120
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !7120
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7120
  %idxprom = zext i32 %5 to i64, !dbg !7120
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !7120
  %6 = load i32, i32* %arrayidx, align 4, !dbg !7120
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !7120
  store i32 %6, i32* %7, align 4, !dbg !7120
  store i32 1, i32* %retval, align 4, !dbg !7120
  br label %return, !dbg !7120

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !7122
  store i32 0, i32* %8, align 4, !dbg !7122
  store i32 0, i32* %retval, align 4, !dbg !7122
  br label %return, !dbg !7122

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7115
  ret i32 %9, !dbg !7115
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !7124 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !7127, metadata !DIExpression()), !dbg !7128
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7129
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !7129
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !7129
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !7129
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !7129
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !7129
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !7129
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7129

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7129
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !7129
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !7129
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !7129
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !7129
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !7129
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !7129
  br label %cond.end, !dbg !7129

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7129

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7129
  %6 = load i32, i32* %num.addr, align 4, !dbg !7129
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !7129
  ret %struct.loop* %call, !dbg !7130
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !7131 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !7135, metadata !DIExpression()), !dbg !7136
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7137
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !7137
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !7137
  br i1 %tobool, label %if.then, label %if.end, !dbg !7136

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7137
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !7137
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !7137
  call void @free(i8* %4), !dbg !7137
  br label %if.end, !dbg !7137

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7136
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !7136
  ret void, !dbg !7136
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2262, !2263, !2264}
!llvm.ident = !{!2265}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "parallelized_functions", scope: !2, file: !3, line: 1210, type: !1242, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !665, globals: !2241, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-parloops.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !150, !169, !176, !183, !377, !386, !390, !404, !408, !413, !418, !425, !463, !489, !623, !628, !631, !644, !651}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !146, line: 474, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149}
!148 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !151, line: 280, baseType: !7, size: 32, elements: !152)
!151 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!152 = !{!153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168}
!153 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!154 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!155 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!156 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!157 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!158 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!159 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!160 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!169 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !151, line: 1817, baseType: !7, size: 32, elements: !170)
!170 = !{!171, !172, !173, !174, !175}
!171 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !151, line: 1805, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !151, line: 39, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376}
!185 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!190 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!191 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!192 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!193 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!194 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!195 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!196 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!197 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!198 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!199 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!200 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!201 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!202 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!203 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!204 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!205 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!206 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!207 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!208 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!209 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!210 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!213 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!214 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!215 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!216 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!217 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!218 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!219 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!220 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!221 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!222 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!223 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!224 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!225 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!226 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!228 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!229 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!230 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!231 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!232 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!233 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!234 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!235 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!236 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!237 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!238 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!239 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!240 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!241 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!242 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!243 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!244 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!245 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!246 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!247 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!248 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!249 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!250 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!251 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!252 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!253 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!254 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!255 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!256 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!257 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!258 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!259 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!260 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!261 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!262 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!263 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!264 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!265 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!266 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!267 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!268 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!269 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!270 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!271 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!272 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!273 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!274 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!275 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!277 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!278 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!279 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!280 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!281 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!282 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!283 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!284 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!285 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!286 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!287 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!288 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!289 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!290 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!291 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!292 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!293 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!294 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!295 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!296 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!297 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!298 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!299 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!300 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!301 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!302 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!303 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!304 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!305 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!307 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!308 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!309 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!310 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!311 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!312 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!313 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!314 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!315 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!316 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!317 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!318 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!319 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!320 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!321 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!322 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!323 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!324 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!325 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!326 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!327 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!328 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!329 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!330 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!331 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!332 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!333 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!334 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!335 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!336 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!337 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!349 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!350 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!351 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!352 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!353 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!354 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!355 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!356 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!357 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!358 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!359 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!360 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!361 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!370 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!371 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!372 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!373 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!374 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!375 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!376 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !378, line: 31, baseType: !7, size: 32, elements: !379)
!378 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!379 = !{!380, !381, !382, !383, !384, !385}
!380 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!381 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!382 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!383 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!384 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!385 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!386 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !378, line: 91, baseType: !7, size: 32, elements: !387)
!387 = !{!388, !389}
!388 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!389 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !135, line: 295, baseType: !7, size: 32, elements: !391)
!391 = !{!392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403}
!392 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!393 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!394 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!395 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!396 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!397 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!398 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!399 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!400 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!401 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!402 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!403 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!404 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !135, line: 912, baseType: !7, size: 32, elements: !405)
!405 = !{!406, !407}
!406 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!407 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!408 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !378, line: 498, baseType: !7, size: 32, elements: !409)
!409 = !{!410, !411, !412}
!410 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!411 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!412 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!413 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !414, line: 147, baseType: !7, size: 32, elements: !415)
!414 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!415 = !{!416, !417}
!416 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!417 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!418 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !419, line: 80, baseType: !7, size: 32, elements: !420)
!419 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!420 = !{!421, !422, !423, !424}
!421 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!422 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!423 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!424 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!425 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !419, line: 51, baseType: !7, size: 32, elements: !426)
!426 = !{!427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462}
!427 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!428 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!429 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!430 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!431 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!432 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!433 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!434 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!435 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!436 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!437 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!438 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!439 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!440 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!441 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!442 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!443 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!444 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!445 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!446 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!447 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!448 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!449 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!450 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!451 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!452 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!453 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!454 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!455 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!456 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!457 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!458 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!459 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!460 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!461 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!462 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!463 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !419, line: 727, baseType: !7, size: 32, elements: !464)
!464 = !{!465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488}
!465 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!466 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!467 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!468 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!469 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!470 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!471 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!472 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!473 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!474 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!475 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!476 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!477 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!478 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!479 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!480 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!481 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!482 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!483 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!484 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!485 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!486 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!487 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!488 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!489 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !151, line: 3410, baseType: !7, size: 32, elements: !490)
!490 = !{!491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622}
!491 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!511 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!512 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!513 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!514 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!515 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!516 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!517 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!518 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!519 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!520 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!521 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!522 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!523 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!524 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!525 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!526 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!527 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!528 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!529 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!530 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!531 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!532 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!533 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!534 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!535 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!536 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!537 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!538 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!539 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!540 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!541 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!542 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!543 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!544 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!545 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!546 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!547 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!548 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!549 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!550 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!551 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!552 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!553 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!554 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!555 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!556 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!557 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!558 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!559 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!560 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!561 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!562 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!563 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!564 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!565 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!566 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!567 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!568 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!569 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!570 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!571 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!572 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!573 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!574 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!575 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!576 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!577 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!578 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!579 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!580 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!581 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!582 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!583 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!584 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!585 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!586 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!587 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!588 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!589 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!590 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!591 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!592 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!593 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!594 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!595 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!596 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!597 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!598 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!599 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!600 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!601 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!602 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!603 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!604 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!605 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!606 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!607 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!608 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!609 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!610 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!611 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!612 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!613 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!614 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!615 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!616 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!617 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!618 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!619 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!620 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!621 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!622 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!623 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !419, line: 4603, baseType: !7, size: 32, elements: !624)
!624 = !{!625, !626, !627}
!625 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!626 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!627 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!628 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_debug_subcode", file: !419, line: 124, baseType: !7, size: 32, elements: !629)
!629 = !{!630}
!630 = !DIEnumerator(name: "GIMPLE_DEBUG_BIND", value: 0, isUnsigned: true)
!631 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !151, line: 58, baseType: !7, size: 32, elements: !632)
!632 = !{!633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643}
!633 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!634 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!635 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!636 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!637 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!638 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!639 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!640 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!641 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!642 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!643 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!644 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !645, line: 119, baseType: !7, size: 32, elements: !646)
!645 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!646 = !{!647, !648, !649, !650}
!647 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!648 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!649 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!650 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!651 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !151, line: 3745, baseType: !7, size: 32, elements: !652)
!652 = !{!653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664}
!653 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!654 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!655 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!656 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!657 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!658 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!659 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!660 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!661 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!662 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!663 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!664 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!665 = !{!666, !667, !669, !849, !2036, !1306, !183, !2049, !418, !762, !676, !2050, !859, !1270, !834, !2052, !2055, !2127, !2187, !1307, !2188, !1122, !2193, !2218, !2223, !1163, !2230, !2231, !2232, !812, !2239}
!666 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!667 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !668, line: 44, baseType: !7)
!668 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !670, size: 64)
!670 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !671)
!671 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reduction_info", file: !3, line: 167, size: 512, elements: !672)
!672 = !{!673, !2029, !2030, !2031, !2032, !2033, !2034, !2035}
!673 = !DIDerivedType(tag: DW_TAG_member, name: "reduc_stmt", scope: !671, file: !3, line: 169, baseType: !674, size: 64)
!674 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !675, line: 58, baseType: !676)
!675 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !677, size: 64)
!677 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !419, line: 737, size: 768, elements: !678)
!678 = !{!679, !1876, !1886, !1892, !1897, !1902, !1909, !1915, !1921, !1926, !1940, !1945, !1951, !1956, !1966, !1971, !1987, !1994, !2001, !2007, !2012, !2018, !2024}
!679 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !677, file: !419, line: 738, baseType: !680, size: 256)
!680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !419, line: 271, size: 256, elements: !681)
!681 = !{!682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !695, !696, !1875}
!682 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !680, file: !419, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!683 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !680, file: !419, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !680, file: !419, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!685 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !680, file: !419, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !680, file: !419, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !680, file: !419, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!688 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !680, file: !419, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!689 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !680, file: !419, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!690 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !680, file: !419, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!691 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !680, file: !419, line: 312, baseType: !7, size: 32, offset: 32)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !680, file: !419, line: 316, baseType: !693, size: 32, offset: 64)
!693 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !694, line: 58, baseType: !667)
!694 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!695 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !680, file: !419, line: 319, baseType: !7, size: 32, offset: 96)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !680, file: !419, line: 323, baseType: !697, size: 64, offset: 128)
!697 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !698, size: 64)
!698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !699)
!699 = !{!700, !1842, !1843, !1844, !1845, !1849, !1850, !1851, !1869, !1870, !1871, !1872, !1873, !1874}
!700 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !698, file: !135, line: 219, baseType: !701, size: 64)
!701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !702, size: 64)
!702 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !703)
!703 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !704)
!704 = !{!705}
!705 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !703, file: !135, line: 151, baseType: !706, size: 128)
!706 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !707)
!707 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !708)
!708 = !{!709, !710, !711}
!709 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !707, file: !135, line: 150, baseType: !7, size: 32)
!710 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !707, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!711 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !707, file: !135, line: 150, baseType: !712, size: 64, offset: 64)
!712 = !DICompositeType(tag: DW_TAG_array_type, baseType: !713, size: 64, elements: !777)
!713 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !675, line: 108, baseType: !714)
!714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !715, size: 64)
!715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !716)
!716 = !{!717, !718, !719, !1834, !1835, !1836, !1837, !1838, !1839, !1840}
!717 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !715, file: !135, line: 124, baseType: !697, size: 64)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !715, file: !135, line: 125, baseType: !697, size: 64, offset: 64)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !715, file: !135, line: 131, baseType: !720, size: 64, offset: 128)
!720 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !721)
!721 = !{!722, !737}
!722 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !720, file: !135, line: 129, baseType: !723, size: 64)
!723 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !675, line: 66, baseType: !724)
!724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !725, size: 64)
!725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !419, line: 143, size: 192, elements: !726)
!726 = !{!727, !735, !736}
!727 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !725, file: !419, line: 145, baseType: !728, size: 64)
!728 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !675, line: 69, baseType: !729)
!729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !730, size: 64)
!730 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !419, line: 136, size: 192, elements: !731)
!731 = !{!732, !733, !734}
!732 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !730, file: !419, line: 137, baseType: !674, size: 64)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !730, file: !419, line: 138, baseType: !729, size: 64, offset: 64)
!734 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !730, file: !419, line: 139, baseType: !729, size: 64, offset: 128)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !725, file: !419, line: 146, baseType: !728, size: 64, offset: 64)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !725, file: !419, line: 152, baseType: !723, size: 64, offset: 128)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !720, file: !135, line: 130, baseType: !738, size: 64)
!738 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !675, line: 50, baseType: !739)
!739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !740, size: 64)
!740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !741, line: 240, size: 384, elements: !742)
!741 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!742 = !{!743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753}
!743 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !740, file: !741, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !740, file: !741, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !740, file: !741, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !740, file: !741, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !740, file: !741, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !740, file: !741, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !740, file: !741, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !740, file: !741, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!751 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !740, file: !741, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !740, file: !741, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!753 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !740, file: !741, line: 321, baseType: !754, size: 320, offset: 64)
!754 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !741, line: 315, size: 320, elements: !755)
!755 = !{!756, !1801, !1803, !1832, !1833}
!756 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !754, file: !741, line: 316, baseType: !757, size: 64)
!757 = !DICompositeType(tag: DW_TAG_array_type, baseType: !758, size: 64, elements: !777)
!758 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !741, line: 183, baseType: !759)
!759 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !741, line: 166, size: 64, elements: !760)
!760 = !{!761, !763, !764, !768, !769, !779, !780, !792, !795, !858, !1779, !1780, !1791, !1798}
!761 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !759, file: !741, line: 168, baseType: !762, size: 32)
!762 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !759, file: !741, line: 169, baseType: !7, size: 32)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !759, file: !741, line: 170, baseType: !765, size: 64)
!765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !766, size: 64)
!766 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !767)
!767 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !759, file: !741, line: 171, baseType: !738, size: 64)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !759, file: !741, line: 172, baseType: !770, size: 64)
!770 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !675, line: 53, baseType: !771)
!771 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !772, size: 64)
!772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !741, line: 359, size: 128, elements: !773)
!773 = !{!774, !775}
!774 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !772, file: !741, line: 360, baseType: !762, size: 32)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !772, file: !741, line: 361, baseType: !776, size: 64, offset: 64)
!776 = !DICompositeType(tag: DW_TAG_array_type, baseType: !738, size: 64, elements: !777)
!777 = !{!778}
!778 = !DISubrange(count: 1)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !759, file: !741, line: 173, baseType: !5, size: 32)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !759, file: !741, line: 174, baseType: !781, size: 32)
!781 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !741, line: 133, baseType: !782)
!782 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !741, line: 115, size: 32, elements: !783)
!783 = !{!784, !785, !786, !787, !788, !789, !790, !791}
!784 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !782, file: !741, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !782, file: !741, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !782, file: !741, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !782, file: !741, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!788 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !782, file: !741, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !782, file: !741, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !782, file: !741, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !782, file: !741, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !759, file: !741, line: 175, baseType: !793, size: 64)
!793 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !794, size: 64)
!794 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !741, line: 175, flags: DIFlagFwdDecl)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !759, file: !741, line: 176, baseType: !796, size: 64)
!796 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !797, size: 64)
!797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !798, line: 75, size: 256, elements: !799)
!798 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!799 = !{!800, !815, !816, !817}
!800 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !797, file: !798, line: 76, baseType: !801, size: 64)
!801 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !802, size: 64)
!802 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !798, line: 68, baseType: !803)
!803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !798, line: 63, size: 320, elements: !804)
!804 = !{!805, !807, !808, !809}
!805 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !803, file: !798, line: 64, baseType: !806, size: 64)
!806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !803, size: 64)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !803, file: !798, line: 65, baseType: !806, size: 64, offset: 64)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !803, file: !798, line: 66, baseType: !7, size: 32, offset: 128)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !803, file: !798, line: 67, baseType: !810, size: 128, offset: 192)
!810 = !DICompositeType(tag: DW_TAG_array_type, baseType: !811, size: 128, elements: !813)
!811 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !798, line: 29, baseType: !812)
!812 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!813 = !{!814}
!814 = !DISubrange(count: 2)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !797, file: !798, line: 77, baseType: !801, size: 64, offset: 64)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !797, file: !798, line: 78, baseType: !7, size: 32, offset: 128)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !797, file: !798, line: 79, baseType: !818, size: 64, offset: 192)
!818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !819, size: 64)
!819 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !798, line: 49, baseType: !820)
!820 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !798, line: 45, size: 832, elements: !821)
!821 = !{!822, !823, !824}
!822 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !820, file: !798, line: 46, baseType: !806, size: 64)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !820, file: !798, line: 47, baseType: !796, size: 64, offset: 64)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !820, file: !798, line: 48, baseType: !825, size: 704, offset: 128)
!825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !826, line: 164, size: 704, elements: !827)
!826 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!827 = !{!828, !829, !840, !841, !842, !843, !844, !845, !850, !854, !855, !856, !857}
!828 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !825, file: !826, line: 166, baseType: !666, size: 64)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !825, file: !826, line: 167, baseType: !830, size: 64, offset: 64)
!830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !831, size: 64)
!831 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !826, line: 157, size: 192, elements: !832)
!832 = !{!833, !835, !836}
!833 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !831, file: !826, line: 159, baseType: !834, size: 64)
!834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !767, size: 64)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !831, file: !826, line: 160, baseType: !830, size: 64, offset: 64)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !831, file: !826, line: 161, baseType: !837, size: 32, offset: 128)
!837 = !DICompositeType(tag: DW_TAG_array_type, baseType: !767, size: 32, elements: !838)
!838 = !{!839}
!839 = !DISubrange(count: 4)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !825, file: !826, line: 168, baseType: !834, size: 64, offset: 128)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !825, file: !826, line: 169, baseType: !834, size: 64, offset: 192)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !825, file: !826, line: 170, baseType: !834, size: 64, offset: 256)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !825, file: !826, line: 171, baseType: !666, size: 64, offset: 320)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !825, file: !826, line: 172, baseType: !762, size: 32, offset: 384)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !825, file: !826, line: 176, baseType: !846, size: 64, offset: 448)
!846 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !847, size: 64)
!847 = !DISubroutineType(types: !848)
!848 = !{!830, !849, !666}
!849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !825, file: !826, line: 177, baseType: !851, size: 64, offset: 512)
!851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !852, size: 64)
!852 = !DISubroutineType(types: !853)
!853 = !{null, !849, !830}
!854 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !825, file: !826, line: 178, baseType: !849, size: 64, offset: 576)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !825, file: !826, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !825, file: !826, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !825, file: !826, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !759, file: !741, line: 177, baseType: !859, size: 64)
!859 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !675, line: 56, baseType: !860)
!860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !861, size: 64)
!861 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !151, line: 3371, size: 1792, elements: !862)
!862 = !{!863, !896, !902, !913, !932, !943, !948, !955, !961, !975, !983, !1021, !1026, !1054, !1071, !1072, !1077, !1086, !1092, !1097, !1101, !1105, !1428, !1477, !1483, !1489, !1496, !1509, !1523, !1540, !1552, !1574, !1589, !1761}
!863 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !861, file: !151, line: 3372, baseType: !864, size: 64)
!864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !151, line: 360, size: 64, elements: !865)
!865 = !{!866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895}
!866 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !864, file: !151, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !864, file: !151, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !864, file: !151, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !864, file: !151, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !864, file: !151, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !864, file: !151, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !864, file: !151, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !864, file: !151, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !864, file: !151, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !864, file: !151, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !864, file: !151, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !864, file: !151, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !864, file: !151, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !864, file: !151, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !864, file: !151, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !864, file: !151, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !864, file: !151, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !864, file: !151, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !864, file: !151, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !864, file: !151, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !864, file: !151, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !864, file: !151, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !864, file: !151, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !864, file: !151, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !864, file: !151, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !864, file: !151, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !864, file: !151, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !864, file: !151, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !864, file: !151, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !864, file: !151, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !861, file: !151, line: 3373, baseType: !897, size: 192)
!897 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !151, line: 402, size: 192, elements: !898)
!898 = !{!899, !900, !901}
!899 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !897, file: !151, line: 403, baseType: !864, size: 64)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !897, file: !151, line: 404, baseType: !859, size: 64, offset: 64)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !897, file: !151, line: 405, baseType: !859, size: 64, offset: 128)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !861, file: !151, line: 3374, baseType: !903, size: 320)
!903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !151, line: 1384, size: 320, elements: !904)
!904 = !{!905, !906}
!905 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !903, file: !151, line: 1385, baseType: !897, size: 192)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !903, file: !151, line: 1386, baseType: !907, size: 128, offset: 192)
!907 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !908, line: 58, baseType: !909)
!908 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!909 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !908, line: 54, size: 128, elements: !910)
!910 = !{!911, !912}
!911 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !909, file: !908, line: 56, baseType: !812, size: 64)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !909, file: !908, line: 57, baseType: !666, size: 64, offset: 64)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !861, file: !151, line: 3375, baseType: !914, size: 256)
!914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !151, line: 1397, size: 256, elements: !915)
!915 = !{!916, !917}
!916 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !914, file: !151, line: 1398, baseType: !897, size: 192)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !914, file: !151, line: 1399, baseType: !918, size: 64, offset: 192)
!918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !919, size: 64)
!919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !920, line: 52, size: 256, elements: !921)
!920 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!921 = !{!922, !923, !924, !925, !926, !927, !928}
!922 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !919, file: !920, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !919, file: !920, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !919, file: !920, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !919, file: !920, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !919, file: !920, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !919, file: !920, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !919, file: !920, line: 62, baseType: !929, size: 192, offset: 64)
!929 = !DICompositeType(tag: DW_TAG_array_type, baseType: !812, size: 192, elements: !930)
!930 = !{!931}
!931 = !DISubrange(count: 3)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !861, file: !151, line: 3376, baseType: !933, size: 256)
!933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !151, line: 1408, size: 256, elements: !934)
!934 = !{!935, !936}
!935 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !933, file: !151, line: 1409, baseType: !897, size: 192)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !933, file: !151, line: 1410, baseType: !937, size: 64, offset: 192)
!937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !938, size: 64)
!938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !939, line: 27, size: 192, elements: !940)
!939 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!940 = !{!941, !942}
!941 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !938, file: !939, line: 29, baseType: !907, size: 128)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !938, file: !939, line: 30, baseType: !5, size: 32, offset: 128)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !861, file: !151, line: 3377, baseType: !944, size: 256)
!944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !151, line: 1437, size: 256, elements: !945)
!945 = !{!946, !947}
!946 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !944, file: !151, line: 1438, baseType: !897, size: 192)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !944, file: !151, line: 1439, baseType: !859, size: 64, offset: 192)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !861, file: !151, line: 3378, baseType: !949, size: 256)
!949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !151, line: 1418, size: 256, elements: !950)
!950 = !{!951, !952, !953}
!951 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !949, file: !151, line: 1419, baseType: !897, size: 192)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !949, file: !151, line: 1420, baseType: !762, size: 32, offset: 192)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !949, file: !151, line: 1421, baseType: !954, size: 8, offset: 224)
!954 = !DICompositeType(tag: DW_TAG_array_type, baseType: !767, size: 8, elements: !777)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !861, file: !151, line: 3379, baseType: !956, size: 320)
!956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !151, line: 1428, size: 320, elements: !957)
!957 = !{!958, !959, !960}
!958 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !956, file: !151, line: 1429, baseType: !897, size: 192)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !956, file: !151, line: 1430, baseType: !859, size: 64, offset: 192)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !956, file: !151, line: 1431, baseType: !859, size: 64, offset: 256)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !861, file: !151, line: 3380, baseType: !962, size: 320)
!962 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !151, line: 1460, size: 320, elements: !963)
!963 = !{!964, !965}
!964 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !962, file: !151, line: 1461, baseType: !897, size: 192)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !962, file: !151, line: 1462, baseType: !966, size: 128, offset: 192)
!966 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !967, line: 31, size: 128, elements: !968)
!967 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!968 = !{!969, !973, !974}
!969 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !966, file: !967, line: 32, baseType: !970, size: 64)
!970 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !971, size: 64)
!971 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !972)
!972 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !966, file: !967, line: 33, baseType: !7, size: 32, offset: 64)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !966, file: !967, line: 34, baseType: !7, size: 32, offset: 96)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !861, file: !151, line: 3381, baseType: !976, size: 384)
!976 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !151, line: 2507, size: 384, elements: !977)
!977 = !{!978, !979, !980, !981, !982}
!978 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !976, file: !151, line: 2508, baseType: !897, size: 192)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !976, file: !151, line: 2509, baseType: !693, size: 32, offset: 192)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !976, file: !151, line: 2510, baseType: !7, size: 32, offset: 224)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !976, file: !151, line: 2511, baseType: !859, size: 64, offset: 256)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !976, file: !151, line: 2512, baseType: !859, size: 64, offset: 320)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !861, file: !151, line: 3382, baseType: !984, size: 896)
!984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !151, line: 2652, size: 896, elements: !985)
!985 = !{!986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018}
!986 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !984, file: !151, line: 2653, baseType: !976, size: 384)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !984, file: !151, line: 2654, baseType: !859, size: 64, offset: 384)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !984, file: !151, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !984, file: !151, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !984, file: !151, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !984, file: !151, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !984, file: !151, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !984, file: !151, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !984, file: !151, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !984, file: !151, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !984, file: !151, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !984, file: !151, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !984, file: !151, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !984, file: !151, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !984, file: !151, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !984, file: !151, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !984, file: !151, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !984, file: !151, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !984, file: !151, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !984, file: !151, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !984, file: !151, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !984, file: !151, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !984, file: !151, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !984, file: !151, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !984, file: !151, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !984, file: !151, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !984, file: !151, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !984, file: !151, line: 2703, baseType: !7, size: 32, offset: 512)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !984, file: !151, line: 2705, baseType: !859, size: 64, offset: 576)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !984, file: !151, line: 2706, baseType: !859, size: 64, offset: 640)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !984, file: !151, line: 2707, baseType: !859, size: 64, offset: 704)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !984, file: !151, line: 2708, baseType: !859, size: 64, offset: 768)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !984, file: !151, line: 2711, baseType: !1019, size: 64, offset: 832)
!1019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1020, size: 64)
!1020 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !151, line: 2711, flags: DIFlagFwdDecl)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !861, file: !151, line: 3383, baseType: !1022, size: 960)
!1022 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !151, line: 2756, size: 960, elements: !1023)
!1023 = !{!1024, !1025}
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1022, file: !151, line: 2757, baseType: !984, size: 896)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1022, file: !151, line: 2758, baseType: !738, size: 64, offset: 896)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !861, file: !151, line: 3384, baseType: !1027, size: 1472)
!1027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !151, line: 3114, size: 1472, elements: !1028)
!1028 = !{!1029, !1050, !1051, !1052, !1053}
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1027, file: !151, line: 3115, baseType: !1030, size: 1216)
!1030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !151, line: 2984, size: 1216, elements: !1031)
!1031 = !{!1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049}
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1030, file: !151, line: 2985, baseType: !1022, size: 960)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1030, file: !151, line: 2986, baseType: !859, size: 64, offset: 960)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1030, file: !151, line: 2987, baseType: !859, size: 64, offset: 1024)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1030, file: !151, line: 2988, baseType: !859, size: 64, offset: 1088)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1030, file: !151, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1030, file: !151, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1030, file: !151, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1030, file: !151, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1030, file: !151, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1030, file: !151, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1030, file: !151, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1030, file: !151, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1030, file: !151, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1030, file: !151, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1030, file: !151, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1030, file: !151, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1030, file: !151, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1030, file: !151, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1027, file: !151, line: 3117, baseType: !859, size: 64, offset: 1216)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1027, file: !151, line: 3119, baseType: !859, size: 64, offset: 1280)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1027, file: !151, line: 3121, baseType: !859, size: 64, offset: 1344)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1027, file: !151, line: 3123, baseType: !859, size: 64, offset: 1408)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !861, file: !151, line: 3385, baseType: !1055, size: 1088)
!1055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !151, line: 2874, size: 1088, elements: !1056)
!1056 = !{!1057, !1058, !1059}
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1055, file: !151, line: 2875, baseType: !1022, size: 960)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1055, file: !151, line: 2876, baseType: !738, size: 64, offset: 960)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1055, file: !151, line: 2877, baseType: !1060, size: 64, offset: 1024)
!1060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1061, size: 64)
!1061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1062, line: 172, size: 128, elements: !1063)
!1062 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1063 = !{!1064, !1065, !1066, !1067, !1068, !1069, !1070}
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1061, file: !1062, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1061, file: !1062, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1061, file: !1062, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1061, file: !1062, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1061, file: !1062, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1061, file: !1062, line: 195, baseType: !7, size: 32, offset: 32)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1061, file: !1062, line: 199, baseType: !859, size: 64, offset: 64)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !861, file: !151, line: 3386, baseType: !1030, size: 1216)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !861, file: !151, line: 3387, baseType: !1073, size: 1280)
!1073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !151, line: 3093, size: 1280, elements: !1074)
!1074 = !{!1075, !1076}
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1073, file: !151, line: 3094, baseType: !1030, size: 1216)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1073, file: !151, line: 3095, baseType: !1060, size: 64, offset: 1216)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !861, file: !151, line: 3388, baseType: !1078, size: 1216)
!1078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !151, line: 2824, size: 1216, elements: !1079)
!1079 = !{!1080, !1081, !1082, !1083, !1084, !1085}
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1078, file: !151, line: 2825, baseType: !984, size: 896)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1078, file: !151, line: 2827, baseType: !859, size: 64, offset: 896)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1078, file: !151, line: 2828, baseType: !859, size: 64, offset: 960)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1078, file: !151, line: 2829, baseType: !859, size: 64, offset: 1024)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1078, file: !151, line: 2830, baseType: !859, size: 64, offset: 1088)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1078, file: !151, line: 2831, baseType: !859, size: 64, offset: 1152)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !861, file: !151, line: 3389, baseType: !1087, size: 1024)
!1087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !151, line: 2850, size: 1024, elements: !1088)
!1088 = !{!1089, !1090, !1091}
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1087, file: !151, line: 2851, baseType: !1022, size: 960)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1087, file: !151, line: 2852, baseType: !762, size: 32, offset: 960)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1087, file: !151, line: 2853, baseType: !762, size: 32, offset: 992)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !861, file: !151, line: 3390, baseType: !1093, size: 1024)
!1093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !151, line: 2857, size: 1024, elements: !1094)
!1094 = !{!1095, !1096}
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1093, file: !151, line: 2858, baseType: !1022, size: 960)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1093, file: !151, line: 2859, baseType: !1060, size: 64, offset: 960)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !861, file: !151, line: 3391, baseType: !1098, size: 960)
!1098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !151, line: 2862, size: 960, elements: !1099)
!1099 = !{!1100}
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1098, file: !151, line: 2863, baseType: !1022, size: 960)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !861, file: !151, line: 3392, baseType: !1102, size: 1472)
!1102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !151, line: 3304, size: 1472, elements: !1103)
!1103 = !{!1104}
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1102, file: !151, line: 3305, baseType: !1027, size: 1472)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !861, file: !151, line: 3393, baseType: !1106, size: 1792)
!1106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !151, line: 3248, size: 1792, elements: !1107)
!1107 = !{!1108, !1109, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427}
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1106, file: !151, line: 3249, baseType: !1027, size: 1472)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1106, file: !151, line: 3251, baseType: !1110, size: 64, offset: 1472)
!1110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1111, size: 64)
!1111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1112, line: 463, size: 1152, elements: !1113)
!1112 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1113 = !{!1114, !1117, !1148, !1149, !1288, !1351, !1352, !1353, !1354, !1355, !1356, !1380, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406}
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1111, file: !1112, line: 464, baseType: !1115, size: 64)
!1115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1116, size: 64)
!1116 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1112, line: 464, flags: DIFlagFwdDecl)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1111, file: !1112, line: 467, baseType: !1118, size: 64, offset: 64)
!1118 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1119, size: 64)
!1119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !1120)
!1120 = !{!1121, !1123, !1124, !1137, !1138, !1139, !1140, !1141, !1142, !1144, !1146, !1147}
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1119, file: !135, line: 377, baseType: !1122, size: 64)
!1122 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !675, line: 111, baseType: !697)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1119, file: !135, line: 378, baseType: !1122, size: 64, offset: 64)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1119, file: !135, line: 381, baseType: !1125, size: 64, offset: 128)
!1125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1126, size: 64)
!1126 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !1127)
!1127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !1128)
!1128 = !{!1129}
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1127, file: !135, line: 282, baseType: !1130, size: 128)
!1130 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !1131)
!1131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !1132)
!1132 = !{!1133, !1134, !1135}
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1131, file: !135, line: 281, baseType: !7, size: 32)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1131, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1131, file: !135, line: 281, baseType: !1136, size: 64, offset: 64)
!1136 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1122, size: 64, elements: !777)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1119, file: !135, line: 384, baseType: !762, size: 32, offset: 192)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1119, file: !135, line: 387, baseType: !762, size: 32, offset: 224)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1119, file: !135, line: 390, baseType: !762, size: 32, offset: 256)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1119, file: !135, line: 394, baseType: !1125, size: 64, offset: 320)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1119, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1119, file: !135, line: 399, baseType: !1143, size: 64, offset: 416)
!1143 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !813)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1119, file: !135, line: 402, baseType: !1145, size: 64, offset: 480)
!1145 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !813)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1119, file: !135, line: 406, baseType: !762, size: 32, offset: 544)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1119, file: !135, line: 409, baseType: !762, size: 32, offset: 576)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1111, file: !1112, line: 470, baseType: !724, size: 64, offset: 128)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1111, file: !1112, line: 473, baseType: !1150, size: 64, offset: 192)
!1150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1151, size: 64)
!1151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1062, line: 39, size: 1152, elements: !1152)
!1152 = !{!1153, !1204, !1217, !1230, !1231, !1243, !1244, !1248, !1249, !1250, !1251, !1252}
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1151, file: !1062, line: 41, baseType: !1154, size: 64)
!1154 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !414, line: 144, baseType: !1155)
!1155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1156, size: 64)
!1156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !414, line: 100, size: 896, elements: !1157)
!1157 = !{!1158, !1166, !1171, !1176, !1178, !1181, !1182, !1183, !1184, !1185, !1190, !1192, !1193, !1198, !1203}
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1156, file: !414, line: 102, baseType: !1159, size: 64)
!1159 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !414, line: 52, baseType: !1160)
!1160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1161, size: 64)
!1161 = !DISubroutineType(types: !1162)
!1162 = !{!1163, !1164}
!1163 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !414, line: 47, baseType: !7)
!1164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1165, size: 64)
!1165 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1156, file: !414, line: 105, baseType: !1167, size: 64, offset: 64)
!1167 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !414, line: 59, baseType: !1168)
!1168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1169, size: 64)
!1169 = !DISubroutineType(types: !1170)
!1170 = !{!762, !1164, !1164}
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1156, file: !414, line: 108, baseType: !1172, size: 64, offset: 128)
!1172 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !414, line: 63, baseType: !1173)
!1173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1174, size: 64)
!1174 = !DISubroutineType(types: !1175)
!1175 = !{null, !849}
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1156, file: !414, line: 111, baseType: !1177, size: 64, offset: 192)
!1177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !849, size: 64)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1156, file: !414, line: 114, baseType: !1179, size: 64, offset: 256)
!1179 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1180, line: 46, baseType: !812)
!1180 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1156, file: !414, line: 117, baseType: !1179, size: 64, offset: 320)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1156, file: !414, line: 120, baseType: !1179, size: 64, offset: 384)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1156, file: !414, line: 124, baseType: !7, size: 32, offset: 448)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1156, file: !414, line: 128, baseType: !7, size: 32, offset: 480)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1156, file: !414, line: 131, baseType: !1186, size: 64, offset: 512)
!1186 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !414, line: 75, baseType: !1187)
!1187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1188, size: 64)
!1188 = !DISubroutineType(types: !1189)
!1189 = !{!849, !1179, !1179}
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1156, file: !414, line: 132, baseType: !1191, size: 64, offset: 576)
!1191 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !414, line: 78, baseType: !1173)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1156, file: !414, line: 135, baseType: !849, size: 64, offset: 640)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1156, file: !414, line: 136, baseType: !1194, size: 64, offset: 704)
!1194 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !414, line: 82, baseType: !1195)
!1195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64)
!1196 = !DISubroutineType(types: !1197)
!1197 = !{!849, !849, !1179, !1179}
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1156, file: !414, line: 137, baseType: !1199, size: 64, offset: 768)
!1199 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !414, line: 83, baseType: !1200)
!1200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1201, size: 64)
!1201 = !DISubroutineType(types: !1202)
!1202 = !{null, !849, !849}
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1156, file: !414, line: 141, baseType: !7, size: 32, offset: 832)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1151, file: !1062, line: 48, baseType: !1205, size: 64, offset: 64)
!1205 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1206, size: 64)
!1206 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !419, line: 35, baseType: !1207)
!1207 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !419, line: 35, size: 128, elements: !1208)
!1208 = !{!1209}
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1207, file: !419, line: 35, baseType: !1210, size: 128)
!1210 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !419, line: 33, baseType: !1211)
!1211 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !419, line: 33, size: 128, elements: !1212)
!1212 = !{!1213, !1214, !1215}
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1211, file: !419, line: 33, baseType: !7, size: 32)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1211, file: !419, line: 33, baseType: !7, size: 32, offset: 32)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1211, file: !419, line: 33, baseType: !1216, size: 64, offset: 64)
!1216 = !DICompositeType(tag: DW_TAG_array_type, baseType: !674, size: 64, elements: !777)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1151, file: !1062, line: 51, baseType: !1218, size: 64, offset: 128)
!1218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1219, size: 64)
!1219 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !151, line: 183, baseType: !1220)
!1220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !151, line: 183, size: 128, elements: !1221)
!1221 = !{!1222}
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1220, file: !151, line: 183, baseType: !1223, size: 128)
!1223 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !151, line: 182, baseType: !1224)
!1224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !151, line: 182, size: 128, elements: !1225)
!1225 = !{!1226, !1227, !1228}
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1224, file: !151, line: 182, baseType: !7, size: 32)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1224, file: !151, line: 182, baseType: !7, size: 32, offset: 32)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1224, file: !151, line: 182, baseType: !1229, size: 64, offset: 64)
!1229 = !DICompositeType(tag: DW_TAG_array_type, baseType: !859, size: 64, elements: !777)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1151, file: !1062, line: 54, baseType: !859, size: 64, offset: 192)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1151, file: !1062, line: 57, baseType: !1232, size: 128, offset: 256)
!1232 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1233, line: 31, size: 128, elements: !1234)
!1233 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1234 = !{!1235, !1236, !1237, !1238, !1239, !1240, !1241}
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1232, file: !1233, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1232, file: !1233, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1232, file: !1233, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1232, file: !1233, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1232, file: !1233, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1232, file: !1233, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1232, file: !1233, line: 56, baseType: !1242, size: 64, offset: 64)
!1242 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !675, line: 47, baseType: !796)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1151, file: !1062, line: 60, baseType: !1232, size: 128, offset: 384)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1151, file: !1062, line: 64, baseType: !1245, size: 64, offset: 512)
!1245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1246, size: 64)
!1246 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1247, line: 33, flags: DIFlagFwdDecl)
!1247 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1151, file: !1062, line: 67, baseType: !859, size: 64, offset: 576)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1151, file: !1062, line: 73, baseType: !1154, size: 64, offset: 640)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1151, file: !1062, line: 77, baseType: !1242, size: 64, offset: 704)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1151, file: !1062, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1151, file: !1062, line: 82, baseType: !1253, size: 320, offset: 832)
!1253 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !645, line: 62, size: 320, elements: !1254)
!1254 = !{!1255, !1261, !1262, !1263, !1264, !1271}
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1253, file: !645, line: 63, baseType: !1256, size: 64)
!1256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1257, size: 64)
!1257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !645, line: 56, size: 128, elements: !1258)
!1258 = !{!1259, !1260}
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1257, file: !645, line: 57, baseType: !1256, size: 64)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1257, file: !645, line: 58, baseType: !954, size: 8, offset: 64)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1253, file: !645, line: 64, baseType: !7, size: 32, offset: 64)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1253, file: !645, line: 66, baseType: !7, size: 32, offset: 96)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1253, file: !645, line: 68, baseType: !972, size: 8, offset: 128)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1253, file: !645, line: 70, baseType: !1265, size: 64, offset: 192)
!1265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1266, size: 64)
!1266 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !645, line: 37, size: 128, elements: !1267)
!1267 = !{!1268, !1269}
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1266, file: !645, line: 39, baseType: !1265, size: 64)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1266, file: !645, line: 40, baseType: !1270, size: 64, offset: 64)
!1270 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !859, size: 64)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1253, file: !645, line: 71, baseType: !1272, size: 64, offset: 256)
!1272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1273, size: 64)
!1273 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !645, line: 45, size: 320, elements: !1274)
!1274 = !{!1275, !1276}
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1273, file: !645, line: 47, baseType: !1272, size: 64)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1273, file: !645, line: 48, baseType: !1277, size: 256, offset: 64)
!1277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !151, line: 1883, size: 256, elements: !1278)
!1278 = !{!1279, !1281, !1282, !1287}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1277, file: !151, line: 1884, baseType: !1280, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1277, size: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1277, file: !151, line: 1885, baseType: !1280, size: 64, offset: 64)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1277, file: !151, line: 1891, baseType: !1283, size: 64, offset: 128)
!1283 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1277, file: !151, line: 1891, size: 64, elements: !1284)
!1284 = !{!1285, !1286}
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1283, file: !151, line: 1891, baseType: !674, size: 64)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1283, file: !151, line: 1891, baseType: !859, size: 64)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1277, file: !151, line: 1892, baseType: !1270, size: 64, offset: 192)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1111, file: !1112, line: 476, baseType: !1289, size: 64, offset: 256)
!1289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1290, size: 64)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !378, line: 187, size: 256, elements: !1291)
!1291 = !{!1292, !1293, !1349, !1350}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1290, file: !378, line: 189, baseType: !762, size: 32)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1290, file: !378, line: 192, baseType: !1294, size: 64, offset: 64)
!1294 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1295, size: 64)
!1295 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !378, line: 87, baseType: !1296)
!1296 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !378, line: 87, size: 128, elements: !1297)
!1297 = !{!1298}
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1296, file: !378, line: 87, baseType: !1299, size: 128)
!1299 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !378, line: 85, baseType: !1300)
!1300 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !378, line: 85, size: 128, elements: !1301)
!1301 = !{!1302, !1303, !1304}
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1300, file: !378, line: 85, baseType: !7, size: 32)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1300, file: !378, line: 85, baseType: !7, size: 32, offset: 32)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1300, file: !378, line: 85, baseType: !1305, size: 64, offset: 64)
!1305 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1306, size: 64, elements: !777)
!1306 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !378, line: 84, baseType: !1307)
!1307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1308, size: 64)
!1308 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !378, line: 100, size: 1216, elements: !1309)
!1309 = !{!1310, !1311, !1312, !1313, !1314, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1339, !1347, !1348}
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1308, file: !378, line: 102, baseType: !762, size: 32)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1308, file: !378, line: 105, baseType: !7, size: 32, offset: 32)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1308, file: !378, line: 108, baseType: !697, size: 64, offset: 64)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1308, file: !378, line: 111, baseType: !697, size: 64, offset: 128)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1308, file: !378, line: 114, baseType: !1315, size: 64, offset: 192)
!1315 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !378, line: 41, size: 64, elements: !1316)
!1316 = !{!1317, !1318}
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1315, file: !378, line: 42, baseType: !377, size: 32)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1315, file: !378, line: 43, baseType: !7, size: 32, offset: 32)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1308, file: !378, line: 117, baseType: !7, size: 32, offset: 256)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1308, file: !378, line: 120, baseType: !7, size: 32, offset: 288)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1308, file: !378, line: 123, baseType: !1294, size: 64, offset: 320)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1308, file: !378, line: 126, baseType: !1307, size: 64, offset: 384)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1308, file: !378, line: 129, baseType: !1307, size: 64, offset: 448)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1308, file: !378, line: 132, baseType: !849, size: 64, offset: 512)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1308, file: !378, line: 139, baseType: !859, size: 64, offset: 576)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1308, file: !378, line: 143, baseType: !907, size: 128, offset: 640)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1308, file: !378, line: 146, baseType: !907, size: 128, offset: 768)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1308, file: !378, line: 148, baseType: !972, size: 8, offset: 896)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1308, file: !378, line: 149, baseType: !972, size: 8, offset: 904)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1308, file: !378, line: 153, baseType: !386, size: 32, offset: 928)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1308, file: !378, line: 156, baseType: !1332, size: 64, offset: 960)
!1332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1333, size: 64)
!1333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !378, line: 48, size: 320, elements: !1334)
!1334 = !{!1335, !1336, !1337, !1338}
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1333, file: !378, line: 50, baseType: !674, size: 64)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1333, file: !378, line: 59, baseType: !907, size: 128, offset: 64)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1333, file: !378, line: 64, baseType: !972, size: 8, offset: 192)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1333, file: !378, line: 67, baseType: !1332, size: 64, offset: 256)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1308, file: !378, line: 159, baseType: !1340, size: 64, offset: 1024)
!1340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1341, size: 64)
!1341 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !378, line: 72, size: 256, elements: !1342)
!1342 = !{!1343, !1344, !1345, !1346}
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1341, file: !378, line: 74, baseType: !714, size: 64)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1341, file: !378, line: 77, baseType: !1340, size: 64, offset: 64)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1341, file: !378, line: 78, baseType: !1340, size: 64, offset: 128)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1341, file: !378, line: 81, baseType: !1340, size: 64, offset: 192)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1308, file: !378, line: 162, baseType: !972, size: 8, offset: 1088)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1308, file: !378, line: 166, baseType: !859, size: 64, offset: 1152)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1290, file: !378, line: 197, baseType: !1154, size: 64, offset: 128)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1290, file: !378, line: 200, baseType: !1307, size: 64, offset: 192)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1111, file: !1112, line: 479, baseType: !1154, size: 64, offset: 320)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1111, file: !1112, line: 484, baseType: !859, size: 64, offset: 384)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1111, file: !1112, line: 488, baseType: !859, size: 64, offset: 448)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1111, file: !1112, line: 493, baseType: !859, size: 64, offset: 512)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1111, file: !1112, line: 496, baseType: !859, size: 64, offset: 576)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1111, file: !1112, line: 501, baseType: !1357, size: 64, offset: 640)
!1357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1358, size: 64)
!1358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !146, line: 2355, size: 576, elements: !1359)
!1359 = !{!1360, !1363, !1364, !1365, !1366, !1368, !1369, !1374, !1375, !1376, !1377, !1378, !1379}
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1358, file: !146, line: 2356, baseType: !1361, size: 64)
!1361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1362, size: 64)
!1362 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !146, line: 2356, flags: DIFlagFwdDecl)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1358, file: !146, line: 2357, baseType: !765, size: 64, offset: 64)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1358, file: !146, line: 2358, baseType: !762, size: 32, offset: 128)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1358, file: !146, line: 2359, baseType: !762, size: 32, offset: 160)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1358, file: !146, line: 2360, baseType: !1367, size: 128, offset: 192)
!1367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !762, size: 128, elements: !838)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1358, file: !146, line: 2364, baseType: !762, size: 32, offset: 320)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1358, file: !146, line: 2367, baseType: !1370, size: 128, offset: 384)
!1370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !146, line: 2349, size: 128, elements: !1371)
!1371 = !{!1372, !1373}
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1370, file: !146, line: 2351, baseType: !738, size: 64)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1370, file: !146, line: 2352, baseType: !666, size: 64, offset: 64)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1358, file: !146, line: 2371, baseType: !145, size: 32, offset: 512)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1358, file: !146, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1358, file: !146, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1358, file: !146, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1358, file: !146, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1358, file: !146, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1111, file: !1112, line: 504, baseType: !1381, size: 64, offset: 704)
!1381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1382, size: 64)
!1382 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1112, line: 504, flags: DIFlagFwdDecl)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1111, file: !1112, line: 507, baseType: !1154, size: 64, offset: 768)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1111, file: !1112, line: 510, baseType: !762, size: 32, offset: 832)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1111, file: !1112, line: 513, baseType: !762, size: 32, offset: 864)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1111, file: !1112, line: 516, baseType: !693, size: 32, offset: 896)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1111, file: !1112, line: 519, baseType: !693, size: 32, offset: 928)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1111, file: !1112, line: 522, baseType: !7, size: 32, offset: 960)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1111, file: !1112, line: 523, baseType: !7, size: 32, offset: 992)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1111, file: !1112, line: 528, baseType: !765, size: 64, offset: 1024)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1111, file: !1112, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1111, file: !1112, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1111, file: !1112, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1111, file: !1112, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1111, file: !1112, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1111, file: !1112, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1111, file: !1112, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1111, file: !1112, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1111, file: !1112, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1111, file: !1112, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1111, file: !1112, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1111, file: !1112, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1111, file: !1112, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1111, file: !1112, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1111, file: !1112, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1111, file: !1112, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1106, file: !151, line: 3254, baseType: !859, size: 64, offset: 1536)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1106, file: !151, line: 3257, baseType: !859, size: 64, offset: 1600)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1106, file: !151, line: 3258, baseType: !859, size: 64, offset: 1664)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1106, file: !151, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1106, file: !151, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1106, file: !151, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1106, file: !151, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1106, file: !151, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1106, file: !151, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1106, file: !151, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1106, file: !151, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1106, file: !151, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1106, file: !151, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1106, file: !151, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1106, file: !151, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1106, file: !151, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1106, file: !151, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1106, file: !151, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1106, file: !151, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1106, file: !151, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1106, file: !151, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !861, file: !151, line: 3394, baseType: !1429, size: 1344)
!1429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !151, line: 2279, size: 1344, elements: !1430)
!1430 = !{!1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1456, !1457, !1458, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474}
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1429, file: !151, line: 2280, baseType: !897, size: 192)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1429, file: !151, line: 2281, baseType: !859, size: 64, offset: 192)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1429, file: !151, line: 2282, baseType: !859, size: 64, offset: 256)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1429, file: !151, line: 2283, baseType: !859, size: 64, offset: 320)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1429, file: !151, line: 2284, baseType: !859, size: 64, offset: 384)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1429, file: !151, line: 2285, baseType: !7, size: 32, offset: 448)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1429, file: !151, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1429, file: !151, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1429, file: !151, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1429, file: !151, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1429, file: !151, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1429, file: !151, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1429, file: !151, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1429, file: !151, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1429, file: !151, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1429, file: !151, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1429, file: !151, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1429, file: !151, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1429, file: !151, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1429, file: !151, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1429, file: !151, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1429, file: !151, line: 2305, baseType: !7, size: 32, offset: 512)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1429, file: !151, line: 2306, baseType: !1454, size: 32, offset: 544)
!1454 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1455, line: 31, baseType: !762)
!1455 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1429, file: !151, line: 2307, baseType: !859, size: 64, offset: 576)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1429, file: !151, line: 2308, baseType: !859, size: 64, offset: 640)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1429, file: !151, line: 2314, baseType: !1459, size: 64, offset: 704)
!1459 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !151, line: 2309, size: 64, elements: !1460)
!1460 = !{!1461, !1462, !1463}
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1459, file: !151, line: 2310, baseType: !762, size: 32)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1459, file: !151, line: 2311, baseType: !765, size: 64)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1459, file: !151, line: 2312, baseType: !1464, size: 64)
!1464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1465, size: 64)
!1465 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !151, line: 2277, flags: DIFlagFwdDecl)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1429, file: !151, line: 2315, baseType: !859, size: 64, offset: 768)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1429, file: !151, line: 2316, baseType: !859, size: 64, offset: 832)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1429, file: !151, line: 2317, baseType: !859, size: 64, offset: 896)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1429, file: !151, line: 2318, baseType: !859, size: 64, offset: 960)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1429, file: !151, line: 2319, baseType: !859, size: 64, offset: 1024)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1429, file: !151, line: 2320, baseType: !859, size: 64, offset: 1088)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1429, file: !151, line: 2321, baseType: !859, size: 64, offset: 1152)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1429, file: !151, line: 2322, baseType: !859, size: 64, offset: 1216)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1429, file: !151, line: 2324, baseType: !1475, size: 64, offset: 1280)
!1475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1476, size: 64)
!1476 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !151, line: 2324, flags: DIFlagFwdDecl)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !861, file: !151, line: 3395, baseType: !1478, size: 320)
!1478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !151, line: 1469, size: 320, elements: !1479)
!1479 = !{!1480, !1481, !1482}
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1478, file: !151, line: 1470, baseType: !897, size: 192)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1478, file: !151, line: 1471, baseType: !859, size: 64, offset: 192)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1478, file: !151, line: 1472, baseType: !859, size: 64, offset: 256)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !861, file: !151, line: 3396, baseType: !1484, size: 320)
!1484 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !151, line: 1482, size: 320, elements: !1485)
!1485 = !{!1486, !1487, !1488}
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1484, file: !151, line: 1483, baseType: !897, size: 192)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1484, file: !151, line: 1484, baseType: !762, size: 32, offset: 192)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1484, file: !151, line: 1485, baseType: !1229, size: 64, offset: 256)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !861, file: !151, line: 3397, baseType: !1490, size: 384)
!1490 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !151, line: 1829, size: 384, elements: !1491)
!1491 = !{!1492, !1493, !1494, !1495}
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1490, file: !151, line: 1830, baseType: !897, size: 192)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1490, file: !151, line: 1831, baseType: !693, size: 32, offset: 192)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1490, file: !151, line: 1832, baseType: !859, size: 64, offset: 256)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1490, file: !151, line: 1835, baseType: !1229, size: 64, offset: 320)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !861, file: !151, line: 3398, baseType: !1497, size: 704)
!1497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !151, line: 1898, size: 704, elements: !1498)
!1498 = !{!1499, !1500, !1501, !1502, !1503, !1508}
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1497, file: !151, line: 1899, baseType: !897, size: 192)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1497, file: !151, line: 1902, baseType: !859, size: 64, offset: 192)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1497, file: !151, line: 1905, baseType: !674, size: 64, offset: 256)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1497, file: !151, line: 1908, baseType: !7, size: 32, offset: 320)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1497, file: !151, line: 1911, baseType: !1504, size: 64, offset: 384)
!1504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1505, size: 64)
!1505 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1062, line: 117, size: 128, elements: !1506)
!1506 = !{!1507}
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1505, file: !1062, line: 120, baseType: !1232, size: 128)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1497, file: !151, line: 1914, baseType: !1277, size: 256, offset: 448)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !861, file: !151, line: 3399, baseType: !1510, size: 704)
!1510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !151, line: 2008, size: 704, elements: !1511)
!1511 = !{!1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522}
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1510, file: !151, line: 2009, baseType: !897, size: 192)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1510, file: !151, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1510, file: !151, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1510, file: !151, line: 2014, baseType: !693, size: 32, offset: 224)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1510, file: !151, line: 2016, baseType: !859, size: 64, offset: 256)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1510, file: !151, line: 2017, baseType: !1218, size: 64, offset: 320)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1510, file: !151, line: 2019, baseType: !859, size: 64, offset: 384)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1510, file: !151, line: 2020, baseType: !859, size: 64, offset: 448)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1510, file: !151, line: 2021, baseType: !859, size: 64, offset: 512)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1510, file: !151, line: 2022, baseType: !859, size: 64, offset: 576)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1510, file: !151, line: 2023, baseType: !859, size: 64, offset: 640)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !861, file: !151, line: 3400, baseType: !1524, size: 832)
!1524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !151, line: 2430, size: 832, elements: !1525)
!1525 = !{!1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535}
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1524, file: !151, line: 2431, baseType: !897, size: 192)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1524, file: !151, line: 2433, baseType: !859, size: 64, offset: 192)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1524, file: !151, line: 2434, baseType: !859, size: 64, offset: 256)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1524, file: !151, line: 2435, baseType: !859, size: 64, offset: 320)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1524, file: !151, line: 2436, baseType: !859, size: 64, offset: 384)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1524, file: !151, line: 2437, baseType: !1218, size: 64, offset: 448)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1524, file: !151, line: 2438, baseType: !859, size: 64, offset: 512)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1524, file: !151, line: 2440, baseType: !859, size: 64, offset: 576)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1524, file: !151, line: 2441, baseType: !859, size: 64, offset: 640)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1524, file: !151, line: 2443, baseType: !1536, size: 128, offset: 704)
!1536 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !151, line: 182, baseType: !1537)
!1537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !151, line: 182, size: 128, elements: !1538)
!1538 = !{!1539}
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1537, file: !151, line: 182, baseType: !1223, size: 128)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !861, file: !151, line: 3401, baseType: !1541, size: 320)
!1541 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !151, line: 3327, size: 320, elements: !1542)
!1542 = !{!1543, !1544, !1551}
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1541, file: !151, line: 3329, baseType: !897, size: 192)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1541, file: !151, line: 3330, baseType: !1545, size: 64, offset: 192)
!1545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1546, size: 64)
!1546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !151, line: 3320, size: 192, elements: !1547)
!1547 = !{!1548, !1549, !1550}
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1546, file: !151, line: 3322, baseType: !1545, size: 64)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1546, file: !151, line: 3323, baseType: !1545, size: 64, offset: 64)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1546, file: !151, line: 3324, baseType: !859, size: 64, offset: 128)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1541, file: !151, line: 3331, baseType: !1545, size: 64, offset: 256)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !861, file: !151, line: 3402, baseType: !1553, size: 256)
!1553 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !151, line: 1540, size: 256, elements: !1554)
!1554 = !{!1555, !1556}
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1553, file: !151, line: 1541, baseType: !897, size: 192)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1553, file: !151, line: 1542, baseType: !1557, size: 64, offset: 192)
!1557 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1558, size: 64)
!1558 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !151, line: 1538, baseType: !1559)
!1559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !151, line: 1538, size: 192, elements: !1560)
!1560 = !{!1561}
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1559, file: !151, line: 1538, baseType: !1562, size: 192)
!1562 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !151, line: 1537, baseType: !1563)
!1563 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !151, line: 1537, size: 192, elements: !1564)
!1564 = !{!1565, !1566, !1567}
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1563, file: !151, line: 1537, baseType: !7, size: 32)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1563, file: !151, line: 1537, baseType: !7, size: 32, offset: 32)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1563, file: !151, line: 1537, baseType: !1568, size: 128, offset: 64)
!1568 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1569, size: 128, elements: !777)
!1569 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !151, line: 1535, baseType: !1570)
!1570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !151, line: 1532, size: 128, elements: !1571)
!1571 = !{!1572, !1573}
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1570, file: !151, line: 1533, baseType: !859, size: 64)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1570, file: !151, line: 1534, baseType: !859, size: 64, offset: 64)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !861, file: !151, line: 3403, baseType: !1575, size: 512)
!1575 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !151, line: 1938, size: 512, elements: !1576)
!1576 = !{!1577, !1578, !1579, !1580, !1586, !1587, !1588}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1575, file: !151, line: 1939, baseType: !897, size: 192)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1575, file: !151, line: 1940, baseType: !693, size: 32, offset: 192)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1575, file: !151, line: 1941, baseType: !150, size: 32, offset: 224)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1575, file: !151, line: 1946, baseType: !1581, size: 32, offset: 256)
!1581 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !151, line: 1942, size: 32, elements: !1582)
!1582 = !{!1583, !1584, !1585}
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1581, file: !151, line: 1943, baseType: !169, size: 32)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1581, file: !151, line: 1944, baseType: !176, size: 32)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1581, file: !151, line: 1945, baseType: !183, size: 32)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1575, file: !151, line: 1950, baseType: !723, size: 64, offset: 320)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1575, file: !151, line: 1951, baseType: !723, size: 64, offset: 384)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1575, file: !151, line: 1953, baseType: !1229, size: 64, offset: 448)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !861, file: !151, line: 3404, baseType: !1590, size: 1664)
!1590 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !151, line: 3337, size: 1664, elements: !1591)
!1591 = !{!1592, !1593}
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1590, file: !151, line: 3338, baseType: !897, size: 192)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1590, file: !151, line: 3341, baseType: !1594, size: 1472, offset: 192)
!1594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1595, line: 410, size: 1472, elements: !1596)
!1595 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1596 = !{!1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760}
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1594, file: !1595, line: 412, baseType: !762, size: 32)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1594, file: !1595, line: 413, baseType: !762, size: 32, offset: 32)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1594, file: !1595, line: 414, baseType: !762, size: 32, offset: 64)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1594, file: !1595, line: 415, baseType: !762, size: 32, offset: 96)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1594, file: !1595, line: 416, baseType: !762, size: 32, offset: 128)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1594, file: !1595, line: 417, baseType: !762, size: 32, offset: 160)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1594, file: !1595, line: 418, baseType: !972, size: 8, offset: 192)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1594, file: !1595, line: 419, baseType: !972, size: 8, offset: 200)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1594, file: !1595, line: 420, baseType: !1606, size: 8, offset: 208)
!1606 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1594, file: !1595, line: 421, baseType: !1606, size: 8, offset: 216)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1594, file: !1595, line: 422, baseType: !1606, size: 8, offset: 224)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1594, file: !1595, line: 423, baseType: !1606, size: 8, offset: 232)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1594, file: !1595, line: 424, baseType: !1606, size: 8, offset: 240)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1594, file: !1595, line: 425, baseType: !1606, size: 8, offset: 248)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1594, file: !1595, line: 426, baseType: !1606, size: 8, offset: 256)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1594, file: !1595, line: 427, baseType: !1606, size: 8, offset: 264)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1594, file: !1595, line: 428, baseType: !1606, size: 8, offset: 272)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1594, file: !1595, line: 429, baseType: !1606, size: 8, offset: 280)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1594, file: !1595, line: 430, baseType: !1606, size: 8, offset: 288)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1594, file: !1595, line: 431, baseType: !1606, size: 8, offset: 296)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1594, file: !1595, line: 432, baseType: !1606, size: 8, offset: 304)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1594, file: !1595, line: 433, baseType: !1606, size: 8, offset: 312)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1594, file: !1595, line: 434, baseType: !1606, size: 8, offset: 320)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1594, file: !1595, line: 435, baseType: !1606, size: 8, offset: 328)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1594, file: !1595, line: 436, baseType: !1606, size: 8, offset: 336)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1594, file: !1595, line: 437, baseType: !1606, size: 8, offset: 344)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1594, file: !1595, line: 438, baseType: !1606, size: 8, offset: 352)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1594, file: !1595, line: 439, baseType: !1606, size: 8, offset: 360)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1594, file: !1595, line: 440, baseType: !1606, size: 8, offset: 368)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1594, file: !1595, line: 441, baseType: !1606, size: 8, offset: 376)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1594, file: !1595, line: 442, baseType: !1606, size: 8, offset: 384)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1594, file: !1595, line: 443, baseType: !1606, size: 8, offset: 392)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1594, file: !1595, line: 444, baseType: !1606, size: 8, offset: 400)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1594, file: !1595, line: 445, baseType: !1606, size: 8, offset: 408)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1594, file: !1595, line: 446, baseType: !1606, size: 8, offset: 416)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1594, file: !1595, line: 447, baseType: !1606, size: 8, offset: 424)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1594, file: !1595, line: 448, baseType: !1606, size: 8, offset: 432)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1594, file: !1595, line: 449, baseType: !1606, size: 8, offset: 440)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1594, file: !1595, line: 450, baseType: !1606, size: 8, offset: 448)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1594, file: !1595, line: 451, baseType: !1606, size: 8, offset: 456)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1594, file: !1595, line: 452, baseType: !1606, size: 8, offset: 464)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1594, file: !1595, line: 453, baseType: !1606, size: 8, offset: 472)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1594, file: !1595, line: 454, baseType: !1606, size: 8, offset: 480)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1594, file: !1595, line: 455, baseType: !1606, size: 8, offset: 488)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1594, file: !1595, line: 456, baseType: !1606, size: 8, offset: 496)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1594, file: !1595, line: 457, baseType: !1606, size: 8, offset: 504)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1594, file: !1595, line: 458, baseType: !1606, size: 8, offset: 512)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1594, file: !1595, line: 459, baseType: !1606, size: 8, offset: 520)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1594, file: !1595, line: 460, baseType: !1606, size: 8, offset: 528)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1594, file: !1595, line: 461, baseType: !1606, size: 8, offset: 536)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1594, file: !1595, line: 462, baseType: !1606, size: 8, offset: 544)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1594, file: !1595, line: 463, baseType: !1606, size: 8, offset: 552)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1594, file: !1595, line: 464, baseType: !1606, size: 8, offset: 560)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1594, file: !1595, line: 465, baseType: !1606, size: 8, offset: 568)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1594, file: !1595, line: 466, baseType: !1606, size: 8, offset: 576)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1594, file: !1595, line: 467, baseType: !1606, size: 8, offset: 584)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1594, file: !1595, line: 468, baseType: !1606, size: 8, offset: 592)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1594, file: !1595, line: 469, baseType: !1606, size: 8, offset: 600)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1594, file: !1595, line: 470, baseType: !1606, size: 8, offset: 608)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1594, file: !1595, line: 471, baseType: !1606, size: 8, offset: 616)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1594, file: !1595, line: 472, baseType: !1606, size: 8, offset: 624)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1594, file: !1595, line: 473, baseType: !1606, size: 8, offset: 632)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1594, file: !1595, line: 474, baseType: !1606, size: 8, offset: 640)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1594, file: !1595, line: 475, baseType: !1606, size: 8, offset: 648)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1594, file: !1595, line: 476, baseType: !1606, size: 8, offset: 656)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1594, file: !1595, line: 477, baseType: !1606, size: 8, offset: 664)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1594, file: !1595, line: 478, baseType: !1606, size: 8, offset: 672)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1594, file: !1595, line: 479, baseType: !1606, size: 8, offset: 680)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1594, file: !1595, line: 480, baseType: !1606, size: 8, offset: 688)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1594, file: !1595, line: 481, baseType: !1606, size: 8, offset: 696)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1594, file: !1595, line: 482, baseType: !1606, size: 8, offset: 704)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1594, file: !1595, line: 483, baseType: !1606, size: 8, offset: 712)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1594, file: !1595, line: 484, baseType: !1606, size: 8, offset: 720)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1594, file: !1595, line: 485, baseType: !1606, size: 8, offset: 728)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1594, file: !1595, line: 486, baseType: !1606, size: 8, offset: 736)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1594, file: !1595, line: 487, baseType: !1606, size: 8, offset: 744)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1594, file: !1595, line: 488, baseType: !1606, size: 8, offset: 752)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1594, file: !1595, line: 489, baseType: !1606, size: 8, offset: 760)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1594, file: !1595, line: 490, baseType: !1606, size: 8, offset: 768)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1594, file: !1595, line: 491, baseType: !1606, size: 8, offset: 776)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1594, file: !1595, line: 492, baseType: !1606, size: 8, offset: 784)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1594, file: !1595, line: 493, baseType: !1606, size: 8, offset: 792)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1594, file: !1595, line: 494, baseType: !1606, size: 8, offset: 800)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1594, file: !1595, line: 495, baseType: !1606, size: 8, offset: 808)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1594, file: !1595, line: 496, baseType: !1606, size: 8, offset: 816)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1594, file: !1595, line: 497, baseType: !1606, size: 8, offset: 824)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1594, file: !1595, line: 498, baseType: !1606, size: 8, offset: 832)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1594, file: !1595, line: 499, baseType: !1606, size: 8, offset: 840)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1594, file: !1595, line: 500, baseType: !1606, size: 8, offset: 848)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1594, file: !1595, line: 501, baseType: !1606, size: 8, offset: 856)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1594, file: !1595, line: 502, baseType: !1606, size: 8, offset: 864)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1594, file: !1595, line: 503, baseType: !1606, size: 8, offset: 872)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1594, file: !1595, line: 504, baseType: !1606, size: 8, offset: 880)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1594, file: !1595, line: 505, baseType: !1606, size: 8, offset: 888)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1594, file: !1595, line: 506, baseType: !1606, size: 8, offset: 896)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1594, file: !1595, line: 507, baseType: !1606, size: 8, offset: 904)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1594, file: !1595, line: 508, baseType: !1606, size: 8, offset: 912)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1594, file: !1595, line: 509, baseType: !1606, size: 8, offset: 920)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1594, file: !1595, line: 510, baseType: !1606, size: 8, offset: 928)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1594, file: !1595, line: 511, baseType: !1606, size: 8, offset: 936)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1594, file: !1595, line: 512, baseType: !1606, size: 8, offset: 944)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1594, file: !1595, line: 513, baseType: !1606, size: 8, offset: 952)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1594, file: !1595, line: 514, baseType: !1606, size: 8, offset: 960)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1594, file: !1595, line: 515, baseType: !1606, size: 8, offset: 968)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1594, file: !1595, line: 516, baseType: !1606, size: 8, offset: 976)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1594, file: !1595, line: 517, baseType: !1606, size: 8, offset: 984)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1594, file: !1595, line: 518, baseType: !1606, size: 8, offset: 992)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1594, file: !1595, line: 519, baseType: !1606, size: 8, offset: 1000)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1594, file: !1595, line: 520, baseType: !1606, size: 8, offset: 1008)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1594, file: !1595, line: 521, baseType: !1606, size: 8, offset: 1016)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1594, file: !1595, line: 522, baseType: !1606, size: 8, offset: 1024)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1594, file: !1595, line: 523, baseType: !1606, size: 8, offset: 1032)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1594, file: !1595, line: 524, baseType: !1606, size: 8, offset: 1040)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1594, file: !1595, line: 525, baseType: !1606, size: 8, offset: 1048)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1594, file: !1595, line: 526, baseType: !1606, size: 8, offset: 1056)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1594, file: !1595, line: 527, baseType: !1606, size: 8, offset: 1064)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1594, file: !1595, line: 528, baseType: !1606, size: 8, offset: 1072)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1594, file: !1595, line: 529, baseType: !1606, size: 8, offset: 1080)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1594, file: !1595, line: 530, baseType: !1606, size: 8, offset: 1088)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1594, file: !1595, line: 531, baseType: !1606, size: 8, offset: 1096)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1594, file: !1595, line: 532, baseType: !1606, size: 8, offset: 1104)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1594, file: !1595, line: 533, baseType: !1606, size: 8, offset: 1112)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1594, file: !1595, line: 534, baseType: !1606, size: 8, offset: 1120)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1594, file: !1595, line: 535, baseType: !1606, size: 8, offset: 1128)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1594, file: !1595, line: 536, baseType: !1606, size: 8, offset: 1136)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1594, file: !1595, line: 537, baseType: !1606, size: 8, offset: 1144)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1594, file: !1595, line: 538, baseType: !1606, size: 8, offset: 1152)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1594, file: !1595, line: 539, baseType: !1606, size: 8, offset: 1160)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1594, file: !1595, line: 540, baseType: !1606, size: 8, offset: 1168)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1594, file: !1595, line: 541, baseType: !1606, size: 8, offset: 1176)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1594, file: !1595, line: 542, baseType: !1606, size: 8, offset: 1184)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1594, file: !1595, line: 543, baseType: !1606, size: 8, offset: 1192)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1594, file: !1595, line: 544, baseType: !1606, size: 8, offset: 1200)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1594, file: !1595, line: 545, baseType: !1606, size: 8, offset: 1208)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1594, file: !1595, line: 546, baseType: !1606, size: 8, offset: 1216)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1594, file: !1595, line: 547, baseType: !1606, size: 8, offset: 1224)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1594, file: !1595, line: 548, baseType: !1606, size: 8, offset: 1232)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1594, file: !1595, line: 549, baseType: !1606, size: 8, offset: 1240)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1594, file: !1595, line: 550, baseType: !1606, size: 8, offset: 1248)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1594, file: !1595, line: 551, baseType: !1606, size: 8, offset: 1256)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1594, file: !1595, line: 552, baseType: !1606, size: 8, offset: 1264)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1594, file: !1595, line: 553, baseType: !1606, size: 8, offset: 1272)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1594, file: !1595, line: 554, baseType: !1606, size: 8, offset: 1280)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1594, file: !1595, line: 555, baseType: !1606, size: 8, offset: 1288)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1594, file: !1595, line: 556, baseType: !1606, size: 8, offset: 1296)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1594, file: !1595, line: 557, baseType: !1606, size: 8, offset: 1304)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1594, file: !1595, line: 558, baseType: !1606, size: 8, offset: 1312)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1594, file: !1595, line: 559, baseType: !1606, size: 8, offset: 1320)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1594, file: !1595, line: 560, baseType: !1606, size: 8, offset: 1328)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1594, file: !1595, line: 561, baseType: !1606, size: 8, offset: 1336)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1594, file: !1595, line: 562, baseType: !1606, size: 8, offset: 1344)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1594, file: !1595, line: 563, baseType: !1606, size: 8, offset: 1352)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1594, file: !1595, line: 564, baseType: !1606, size: 8, offset: 1360)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1594, file: !1595, line: 565, baseType: !1606, size: 8, offset: 1368)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1594, file: !1595, line: 566, baseType: !1606, size: 8, offset: 1376)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1594, file: !1595, line: 567, baseType: !1606, size: 8, offset: 1384)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1594, file: !1595, line: 568, baseType: !1606, size: 8, offset: 1392)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1594, file: !1595, line: 569, baseType: !1606, size: 8, offset: 1400)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1594, file: !1595, line: 570, baseType: !1606, size: 8, offset: 1408)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1594, file: !1595, line: 571, baseType: !1606, size: 8, offset: 1416)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1594, file: !1595, line: 572, baseType: !1606, size: 8, offset: 1424)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1594, file: !1595, line: 573, baseType: !1606, size: 8, offset: 1432)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1594, file: !1595, line: 574, baseType: !1606, size: 8, offset: 1440)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !861, file: !151, line: 3405, baseType: !1762, size: 384)
!1762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !151, line: 3352, size: 384, elements: !1763)
!1763 = !{!1764, !1765}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1762, file: !151, line: 3353, baseType: !897, size: 192)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1762, file: !151, line: 3356, baseType: !1766, size: 192, offset: 192)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1595, line: 578, size: 192, elements: !1767)
!1767 = !{!1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1766, file: !1595, line: 580, baseType: !762, size: 32)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1766, file: !1595, line: 581, baseType: !762, size: 32, offset: 32)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1766, file: !1595, line: 582, baseType: !762, size: 32, offset: 64)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1766, file: !1595, line: 583, baseType: !762, size: 32, offset: 96)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1766, file: !1595, line: 584, baseType: !972, size: 8, offset: 128)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1766, file: !1595, line: 585, baseType: !972, size: 8, offset: 136)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1766, file: !1595, line: 586, baseType: !972, size: 8, offset: 144)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1766, file: !1595, line: 587, baseType: !972, size: 8, offset: 152)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1766, file: !1595, line: 588, baseType: !972, size: 8, offset: 160)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1766, file: !1595, line: 589, baseType: !972, size: 8, offset: 168)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1766, file: !1595, line: 590, baseType: !972, size: 8, offset: 176)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !759, file: !741, line: 178, baseType: !697, size: 64)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !759, file: !741, line: 179, baseType: !1781, size: 64)
!1781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1782, size: 64)
!1782 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !741, line: 150, baseType: !1783)
!1783 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !741, line: 142, size: 320, elements: !1784)
!1784 = !{!1785, !1786, !1787, !1788, !1789, !1790}
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1783, file: !741, line: 144, baseType: !859, size: 64)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1783, file: !741, line: 145, baseType: !738, size: 64, offset: 64)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1783, file: !741, line: 146, baseType: !738, size: 64, offset: 128)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1783, file: !741, line: 147, baseType: !1454, size: 32, offset: 192)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1783, file: !741, line: 148, baseType: !7, size: 32, offset: 224)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1783, file: !741, line: 149, baseType: !972, size: 8, offset: 256)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !759, file: !741, line: 180, baseType: !1792, size: 64)
!1792 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1793, size: 64)
!1793 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !741, line: 162, baseType: !1794)
!1794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !741, line: 159, size: 128, elements: !1795)
!1795 = !{!1796, !1797}
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1794, file: !741, line: 160, baseType: !859, size: 64)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1794, file: !741, line: 161, baseType: !666, size: 64, offset: 64)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !759, file: !741, line: 181, baseType: !1799, size: 64)
!1799 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1800, size: 64)
!1800 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !741, line: 181, flags: DIFlagFwdDecl)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !754, file: !741, line: 317, baseType: !1802, size: 64)
!1802 = !DICompositeType(tag: DW_TAG_array_type, baseType: !666, size: 64, elements: !777)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !754, file: !741, line: 318, baseType: !1804, size: 320)
!1804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !741, line: 188, size: 320, elements: !1805)
!1805 = !{!1806, !1808, !1831}
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1804, file: !741, line: 190, baseType: !1807, size: 192)
!1807 = !DICompositeType(tag: DW_TAG_array_type, baseType: !758, size: 192, elements: !930)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1804, file: !741, line: 193, baseType: !1809, size: 64, offset: 192)
!1809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1810, size: 64)
!1810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !741, line: 206, size: 320, elements: !1811)
!1811 = !{!1812, !1816, !1817, !1818, !1830}
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1810, file: !741, line: 208, baseType: !1813, size: 64)
!1813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1814, size: 64)
!1814 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !675, line: 62, baseType: !1815)
!1815 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !675, line: 61, flags: DIFlagFwdDecl)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1810, file: !741, line: 211, baseType: !7, size: 32, offset: 64)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1810, file: !741, line: 214, baseType: !666, size: 64, offset: 128)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1810, file: !741, line: 224, baseType: !1819, size: 64, offset: 192)
!1819 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1820, size: 64)
!1820 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !741, line: 202, baseType: !1821)
!1821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !741, line: 202, size: 128, elements: !1822)
!1822 = !{!1823}
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1821, file: !741, line: 202, baseType: !1824, size: 128)
!1824 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !741, line: 200, baseType: !1825)
!1825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !741, line: 200, size: 128, elements: !1826)
!1826 = !{!1827, !1828, !1829}
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1825, file: !741, line: 200, baseType: !7, size: 32)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1825, file: !741, line: 200, baseType: !7, size: 32, offset: 32)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1825, file: !741, line: 200, baseType: !776, size: 64, offset: 64)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1810, file: !741, line: 234, baseType: !1819, size: 64, offset: 256)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1804, file: !741, line: 197, baseType: !666, size: 64, offset: 256)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !754, file: !741, line: 319, baseType: !919, size: 256)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !754, file: !741, line: 320, baseType: !938, size: 192)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !715, file: !135, line: 134, baseType: !849, size: 64, offset: 192)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !715, file: !135, line: 137, baseType: !859, size: 64, offset: 256)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !715, file: !135, line: 138, baseType: !693, size: 32, offset: 320)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !715, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !715, file: !135, line: 144, baseType: !762, size: 32, offset: 384)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !715, file: !135, line: 145, baseType: !762, size: 32, offset: 416)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !715, file: !135, line: 146, baseType: !1841, size: 64, offset: 448)
!1841 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !666)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !698, file: !135, line: 220, baseType: !701, size: 64, offset: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !698, file: !135, line: 223, baseType: !849, size: 64, offset: 128)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !698, file: !135, line: 226, baseType: !1307, size: 64, offset: 192)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !698, file: !135, line: 229, baseType: !1846, size: 128, offset: 256)
!1846 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1847, size: 128, elements: !813)
!1847 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1848, size: 64)
!1848 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !698, file: !135, line: 232, baseType: !697, size: 64, offset: 384)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !698, file: !135, line: 233, baseType: !697, size: 64, offset: 448)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !698, file: !135, line: 238, baseType: !1852, size: 64, offset: 512)
!1852 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !1853)
!1853 = !{!1854, !1860}
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1852, file: !135, line: 236, baseType: !1855, size: 64)
!1855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1856, size: 64)
!1856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !1857)
!1857 = !{!1858, !1859}
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1856, file: !135, line: 275, baseType: !723, size: 64)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1856, file: !135, line: 278, baseType: !723, size: 64, offset: 64)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1852, file: !135, line: 237, baseType: !1861, size: 64)
!1861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1862, size: 64)
!1862 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !1863)
!1863 = !{!1864, !1865, !1866, !1867, !1868}
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1862, file: !135, line: 261, baseType: !738, size: 64)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1862, file: !135, line: 262, baseType: !738, size: 64, offset: 64)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1862, file: !135, line: 266, baseType: !738, size: 64, offset: 128)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1862, file: !135, line: 267, baseType: !738, size: 64, offset: 192)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1862, file: !135, line: 270, baseType: !762, size: 32, offset: 256)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !698, file: !135, line: 241, baseType: !1841, size: 64, offset: 576)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !698, file: !135, line: 244, baseType: !762, size: 32, offset: 640)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !698, file: !135, line: 247, baseType: !762, size: 32, offset: 672)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !698, file: !135, line: 250, baseType: !762, size: 32, offset: 704)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !698, file: !135, line: 253, baseType: !762, size: 32, offset: 736)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !698, file: !135, line: 256, baseType: !762, size: 32, offset: 768)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !680, file: !419, line: 327, baseType: !859, size: 64, offset: 192)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !677, file: !419, line: 739, baseType: !1877, size: 448)
!1877 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !419, line: 350, size: 448, elements: !1878)
!1878 = !{!1879, !1885}
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1877, file: !419, line: 353, baseType: !1880, size: 384)
!1880 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !419, line: 333, size: 384, elements: !1881)
!1881 = !{!1882, !1883, !1884}
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1880, file: !419, line: 336, baseType: !680, size: 256)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1880, file: !419, line: 343, baseType: !1265, size: 64, offset: 256)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1880, file: !419, line: 344, baseType: !1272, size: 64, offset: 320)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1877, file: !419, line: 359, baseType: !1229, size: 64, offset: 384)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !677, file: !419, line: 740, baseType: !1887, size: 512)
!1887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !419, line: 365, size: 512, elements: !1888)
!1888 = !{!1889, !1890, !1891}
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1887, file: !419, line: 368, baseType: !1880, size: 384)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1887, file: !419, line: 373, baseType: !859, size: 64, offset: 384)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1887, file: !419, line: 374, baseType: !859, size: 64, offset: 448)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !677, file: !419, line: 741, baseType: !1893, size: 576)
!1893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !419, line: 380, size: 576, elements: !1894)
!1894 = !{!1895, !1896}
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1893, file: !419, line: 383, baseType: !1887, size: 512)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1893, file: !419, line: 389, baseType: !1229, size: 64, offset: 512)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !677, file: !419, line: 742, baseType: !1898, size: 320)
!1898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !419, line: 395, size: 320, elements: !1899)
!1899 = !{!1900, !1901}
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1898, file: !419, line: 397, baseType: !680, size: 256)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1898, file: !419, line: 400, baseType: !723, size: 64, offset: 256)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !677, file: !419, line: 743, baseType: !1903, size: 448)
!1903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !419, line: 406, size: 448, elements: !1904)
!1904 = !{!1905, !1906, !1907, !1908}
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1903, file: !419, line: 408, baseType: !680, size: 256)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1903, file: !419, line: 412, baseType: !859, size: 64, offset: 256)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1903, file: !419, line: 420, baseType: !859, size: 64, offset: 320)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1903, file: !419, line: 423, baseType: !723, size: 64, offset: 384)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !677, file: !419, line: 744, baseType: !1910, size: 384)
!1910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !419, line: 429, size: 384, elements: !1911)
!1911 = !{!1912, !1913, !1914}
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1910, file: !419, line: 431, baseType: !680, size: 256)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1910, file: !419, line: 434, baseType: !859, size: 64, offset: 256)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1910, file: !419, line: 437, baseType: !723, size: 64, offset: 320)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !677, file: !419, line: 745, baseType: !1916, size: 384)
!1916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !419, line: 443, size: 384, elements: !1917)
!1917 = !{!1918, !1919, !1920}
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1916, file: !419, line: 445, baseType: !680, size: 256)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1916, file: !419, line: 449, baseType: !859, size: 64, offset: 256)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1916, file: !419, line: 453, baseType: !723, size: 64, offset: 320)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !677, file: !419, line: 746, baseType: !1922, size: 320)
!1922 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !419, line: 459, size: 320, elements: !1923)
!1923 = !{!1924, !1925}
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1922, file: !419, line: 461, baseType: !680, size: 256)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1922, file: !419, line: 464, baseType: !859, size: 64, offset: 256)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !677, file: !419, line: 747, baseType: !1927, size: 768)
!1927 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !419, line: 469, size: 768, elements: !1928)
!1928 = !{!1929, !1930, !1931, !1932, !1933}
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1927, file: !419, line: 471, baseType: !680, size: 256)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1927, file: !419, line: 474, baseType: !7, size: 32, offset: 256)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1927, file: !419, line: 475, baseType: !7, size: 32, offset: 288)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1927, file: !419, line: 478, baseType: !859, size: 64, offset: 320)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1927, file: !419, line: 481, baseType: !1934, size: 384, offset: 384)
!1934 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1935, size: 384, elements: !777)
!1935 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !151, line: 1917, size: 384, elements: !1936)
!1936 = !{!1937, !1938, !1939}
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1935, file: !151, line: 1920, baseType: !1277, size: 256)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1935, file: !151, line: 1921, baseType: !859, size: 64, offset: 256)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1935, file: !151, line: 1922, baseType: !693, size: 32, offset: 320)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !677, file: !419, line: 748, baseType: !1941, size: 320)
!1941 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !419, line: 487, size: 320, elements: !1942)
!1942 = !{!1943, !1944}
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1941, file: !419, line: 490, baseType: !680, size: 256)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1941, file: !419, line: 494, baseType: !762, size: 32, offset: 256)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !677, file: !419, line: 749, baseType: !1946, size: 384)
!1946 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !419, line: 500, size: 384, elements: !1947)
!1947 = !{!1948, !1949, !1950}
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1946, file: !419, line: 502, baseType: !680, size: 256)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1946, file: !419, line: 506, baseType: !723, size: 64, offset: 256)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1946, file: !419, line: 510, baseType: !723, size: 64, offset: 320)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !677, file: !419, line: 750, baseType: !1952, size: 320)
!1952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !419, line: 529, size: 320, elements: !1953)
!1953 = !{!1954, !1955}
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1952, file: !419, line: 531, baseType: !680, size: 256)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1952, file: !419, line: 540, baseType: !723, size: 64, offset: 256)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !677, file: !419, line: 751, baseType: !1957, size: 704)
!1957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !419, line: 546, size: 704, elements: !1958)
!1958 = !{!1959, !1960, !1961, !1962, !1963, !1964, !1965}
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1957, file: !419, line: 549, baseType: !1887, size: 512)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1957, file: !419, line: 553, baseType: !765, size: 64, offset: 512)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1957, file: !419, line: 557, baseType: !972, size: 8, offset: 576)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1957, file: !419, line: 558, baseType: !972, size: 8, offset: 584)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1957, file: !419, line: 559, baseType: !972, size: 8, offset: 592)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1957, file: !419, line: 560, baseType: !972, size: 8, offset: 600)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1957, file: !419, line: 566, baseType: !1229, size: 64, offset: 640)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !677, file: !419, line: 752, baseType: !1967, size: 384)
!1967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !419, line: 571, size: 384, elements: !1968)
!1968 = !{!1969, !1970}
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1967, file: !419, line: 573, baseType: !1898, size: 320)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1967, file: !419, line: 577, baseType: !859, size: 64, offset: 320)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !677, file: !419, line: 753, baseType: !1972, size: 576)
!1972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !419, line: 600, size: 576, elements: !1973)
!1973 = !{!1974, !1975, !1976, !1977, !1986}
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1972, file: !419, line: 602, baseType: !1898, size: 320)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1972, file: !419, line: 605, baseType: !859, size: 64, offset: 320)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1972, file: !419, line: 609, baseType: !1179, size: 64, offset: 384)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1972, file: !419, line: 612, baseType: !1978, size: 64, offset: 448)
!1978 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1979, size: 64)
!1979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !419, line: 581, size: 320, elements: !1980)
!1980 = !{!1981, !1982, !1983, !1984, !1985}
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1979, file: !419, line: 583, baseType: !183, size: 32)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1979, file: !419, line: 586, baseType: !859, size: 64, offset: 64)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1979, file: !419, line: 589, baseType: !859, size: 64, offset: 128)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1979, file: !419, line: 592, baseType: !859, size: 64, offset: 192)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1979, file: !419, line: 595, baseType: !859, size: 64, offset: 256)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1972, file: !419, line: 616, baseType: !723, size: 64, offset: 512)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !677, file: !419, line: 754, baseType: !1988, size: 512)
!1988 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !419, line: 622, size: 512, elements: !1989)
!1989 = !{!1990, !1991, !1992, !1993}
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1988, file: !419, line: 624, baseType: !1898, size: 320)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1988, file: !419, line: 628, baseType: !859, size: 64, offset: 320)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1988, file: !419, line: 632, baseType: !859, size: 64, offset: 384)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1988, file: !419, line: 636, baseType: !859, size: 64, offset: 448)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !677, file: !419, line: 755, baseType: !1995, size: 704)
!1995 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !419, line: 642, size: 704, elements: !1996)
!1996 = !{!1997, !1998, !1999, !2000}
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1995, file: !419, line: 644, baseType: !1988, size: 512)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1995, file: !419, line: 648, baseType: !859, size: 64, offset: 512)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1995, file: !419, line: 652, baseType: !859, size: 64, offset: 576)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1995, file: !419, line: 653, baseType: !859, size: 64, offset: 640)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !677, file: !419, line: 756, baseType: !2002, size: 448)
!2002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !419, line: 663, size: 448, elements: !2003)
!2003 = !{!2004, !2005, !2006}
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2002, file: !419, line: 665, baseType: !1898, size: 320)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2002, file: !419, line: 668, baseType: !859, size: 64, offset: 320)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2002, file: !419, line: 673, baseType: !859, size: 64, offset: 384)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !677, file: !419, line: 757, baseType: !2008, size: 384)
!2008 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !419, line: 694, size: 384, elements: !2009)
!2009 = !{!2010, !2011}
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2008, file: !419, line: 696, baseType: !1898, size: 320)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2008, file: !419, line: 699, baseType: !859, size: 64, offset: 320)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !677, file: !419, line: 758, baseType: !2013, size: 384)
!2013 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !419, line: 681, size: 384, elements: !2014)
!2014 = !{!2015, !2016, !2017}
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2013, file: !419, line: 683, baseType: !680, size: 256)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2013, file: !419, line: 686, baseType: !859, size: 64, offset: 256)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2013, file: !419, line: 689, baseType: !859, size: 64, offset: 320)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !677, file: !419, line: 759, baseType: !2019, size: 384)
!2019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !419, line: 707, size: 384, elements: !2020)
!2020 = !{!2021, !2022, !2023}
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2019, file: !419, line: 709, baseType: !680, size: 256)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2019, file: !419, line: 712, baseType: !859, size: 64, offset: 256)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2019, file: !419, line: 712, baseType: !859, size: 64, offset: 320)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !677, file: !419, line: 760, baseType: !2025, size: 320)
!2025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !419, line: 718, size: 320, elements: !2026)
!2026 = !{!2027, !2028}
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2025, file: !419, line: 720, baseType: !680, size: 256)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2025, file: !419, line: 723, baseType: !859, size: 64, offset: 256)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "reduc_phi", scope: !671, file: !3, line: 170, baseType: !674, size: 64, offset: 64)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !671, file: !3, line: 171, baseType: !183, size: 32, offset: 128)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "keep_res", scope: !671, file: !3, line: 172, baseType: !674, size: 64, offset: 192)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "initial_value", scope: !671, file: !3, line: 174, baseType: !859, size: 64, offset: 256)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "field", scope: !671, file: !3, line: 175, baseType: !859, size: 64, offset: 320)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !671, file: !3, line: 176, baseType: !859, size: 64, offset: 384)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "new_phi", scope: !671, file: !3, line: 177, baseType: !674, size: 64, offset: 448)
!2036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2037, size: 64)
!2037 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2038, line: 32, baseType: !2039)
!2038 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2038, line: 32, size: 96, elements: !2040)
!2040 = !{!2041}
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2039, file: !2038, line: 32, baseType: !2042, size: 96)
!2042 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2038, line: 31, baseType: !2043)
!2043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2038, line: 31, size: 96, elements: !2044)
!2044 = !{!2045, !2046, !2047}
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2043, file: !2038, line: 31, baseType: !7, size: 32)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2043, file: !2038, line: 31, baseType: !7, size: 32, offset: 32)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2043, file: !2038, line: 31, baseType: !2048, size: 32, offset: 64)
!2048 = !DICompositeType(tag: DW_TAG_array_type, baseType: !762, size: 32, elements: !777)
!2049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !671, size: 64)
!2050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2051, size: 64)
!2051 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !677)
!2052 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !645, line: 30, baseType: !2053)
!2053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2054, size: 64)
!2054 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !151, line: 1893, baseType: !1277)
!2055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2056, size: 64)
!2056 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_heap", file: !2057, line: 209, baseType: !2058)
!2057 = !DIFile(filename: "./tree-data-ref.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2058 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_heap", file: !2057, line: 209, size: 128, elements: !2059)
!2059 = !{!2060}
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2058, file: !2057, line: 209, baseType: !2061, size: 128)
!2061 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_base", file: !2057, line: 208, baseType: !2062)
!2062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_base", file: !2057, line: 208, size: 128, elements: !2063)
!2063 = !{!2064, !2065, !2066}
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2062, file: !2057, line: 208, baseType: !7, size: 32)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2062, file: !2057, line: 208, baseType: !7, size: 32, offset: 32)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2062, file: !2057, line: 208, baseType: !2067, size: 64, offset: 64)
!2067 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2068, size: 64, elements: !777)
!2068 = !DIDerivedType(tag: DW_TAG_typedef, name: "data_reference_p", file: !2057, line: 207, baseType: !2069)
!2069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2070, size: 64)
!2070 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_reference", file: !2057, line: 165, size: 896, elements: !2071)
!2071 = !{!2072, !2073, !2074, !2075, !2076, !2084, !2094, !2099}
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2070, file: !2057, line: 168, baseType: !674, size: 64)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !2070, file: !2057, line: 171, baseType: !859, size: 64, offset: 64)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2070, file: !2057, line: 174, baseType: !849, size: 64, offset: 128)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "is_read", scope: !2070, file: !2057, line: 177, baseType: !972, size: 8, offset: 192)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "innermost", scope: !2070, file: !2057, line: 180, baseType: !2077, size: 320, offset: 256)
!2077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "innermost_loop_behavior", file: !2057, line: 51, size: 320, elements: !2078)
!2078 = !{!2079, !2080, !2081, !2082, !2083}
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "base_address", scope: !2077, file: !2057, line: 53, baseType: !859, size: 64)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2077, file: !2057, line: 54, baseType: !859, size: 64, offset: 64)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !2077, file: !2057, line: 55, baseType: !859, size: 64, offset: 128)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2077, file: !2057, line: 56, baseType: !859, size: 64, offset: 192)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "aligned_to", scope: !2077, file: !2057, line: 60, baseType: !859, size: 64, offset: 256)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "indices", scope: !2070, file: !2057, line: 183, baseType: !2085, size: 128, offset: 576)
!2085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "indices", file: !2057, line: 78, size: 128, elements: !2086)
!2086 = !{!2087, !2088}
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "base_object", scope: !2085, file: !2057, line: 81, baseType: !859, size: 64)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "access_fns", scope: !2085, file: !2057, line: 84, baseType: !2089, size: 64, offset: 64)
!2089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2090, size: 64)
!2090 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !151, line: 184, baseType: !2091)
!2091 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !151, line: 184, size: 128, elements: !2092)
!2092 = !{!2093}
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2091, file: !151, line: 184, baseType: !1223, size: 128)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2070, file: !2057, line: 186, baseType: !2095, size: 128, offset: 704)
!2095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dr_alias", file: !2057, line: 87, size: 128, elements: !2096)
!2096 = !{!2097, !2098}
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2095, file: !2057, line: 91, baseType: !1504, size: 64)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "vops", scope: !2095, file: !2057, line: 96, baseType: !1242, size: 64, offset: 64)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "access_matrix", scope: !2070, file: !2057, line: 189, baseType: !2100, size: 64, offset: 832)
!2100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2101, size: 64)
!2101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "access_matrix", file: !2057, line: 127, size: 256, elements: !2102)
!2102 = !{!2103, !2109, !2110, !2111}
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2101, file: !2057, line: 129, baseType: !2104, size: 64)
!2104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2105, size: 64)
!2105 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_heap", file: !378, line: 86, baseType: !2106)
!2106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_heap", file: !378, line: 86, size: 128, elements: !2107)
!2107 = !{!2108}
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2106, file: !378, line: 86, baseType: !1299, size: 128)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "nb_induction_vars", scope: !2101, file: !2057, line: 130, baseType: !762, size: 32, offset: 64)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "parameters", scope: !2101, file: !2057, line: 131, baseType: !2089, size: 64, offset: 128)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "matrix", scope: !2101, file: !2057, line: 132, baseType: !2112, size: 64, offset: 192)
!2112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2113, size: 64)
!2113 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_gc", file: !2114, line: 34, baseType: !2115)
!2114 = !DIFile(filename: "./lambda.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2115 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_gc", file: !2114, line: 34, size: 128, elements: !2116)
!2116 = !{!2117}
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2115, file: !2114, line: 34, baseType: !2118, size: 128)
!2118 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_base", file: !2114, line: 32, baseType: !2119)
!2119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_base", file: !2114, line: 32, size: 128, elements: !2120)
!2120 = !{!2121, !2122, !2123}
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2119, file: !2114, line: 32, baseType: !7, size: 32)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2119, file: !2114, line: 32, baseType: !7, size: 32, offset: 32)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2119, file: !2114, line: 32, baseType: !2124, size: 64, offset: 64)
!2124 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2125, size: 64, elements: !777)
!2125 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_vector", file: !2114, line: 31, baseType: !2126)
!2126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !762, size: 64)
!2127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2128, size: 64)
!2128 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_heap", file: !2057, line: 333, baseType: !2129)
!2129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_heap", file: !2057, line: 333, size: 128, elements: !2130)
!2130 = !{!2131}
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2129, file: !2057, line: 333, baseType: !2132, size: 128)
!2132 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_base", file: !2057, line: 332, baseType: !2133)
!2133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_base", file: !2057, line: 332, size: 128, elements: !2134)
!2134 = !{!2135, !2136, !2137}
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2133, file: !2057, line: 332, baseType: !7, size: 32)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2133, file: !2057, line: 332, baseType: !7, size: 32, offset: 32)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2133, file: !2057, line: 332, baseType: !2138, size: 64, offset: 64)
!2138 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2139, size: 64, elements: !777)
!2139 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddr_p", file: !2057, line: 331, baseType: !2140)
!2140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2141, size: 64)
!2141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_dependence_relation", file: !2057, line: 282, size: 512, elements: !2142)
!2142 = !{!2143, !2144, !2145, !2146, !2175, !2176, !2182, !2183, !2184, !2185, !2186}
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2141, file: !2057, line: 285, baseType: !2069, size: 64)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !2141, file: !2057, line: 286, baseType: !2069, size: 64, offset: 64)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "are_dependent", scope: !2141, file: !2057, line: 299, baseType: !859, size: 64, offset: 128)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "subscripts", scope: !2141, file: !2057, line: 304, baseType: !2147, size: 64, offset: 192)
!2147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2148, size: 64)
!2148 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_heap", file: !2057, line: 272, baseType: !2149)
!2149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_heap", file: !2057, line: 272, size: 128, elements: !2150)
!2150 = !{!2151}
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2149, file: !2057, line: 272, baseType: !2152, size: 128)
!2152 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_base", file: !2057, line: 271, baseType: !2153)
!2153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_base", file: !2057, line: 271, size: 128, elements: !2154)
!2154 = !{!2155, !2156, !2157}
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2153, file: !2057, line: 271, baseType: !7, size: 32)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2153, file: !2057, line: 271, baseType: !7, size: 32, offset: 32)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2153, file: !2057, line: 271, baseType: !2158, size: 64, offset: 64)
!2158 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2159, size: 64, elements: !777)
!2159 = !DIDerivedType(tag: DW_TAG_typedef, name: "subscript_p", file: !2057, line: 270, baseType: !2160)
!2160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2161, size: 64)
!2161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "subscript", file: !2057, line: 252, size: 256, elements: !2162)
!2162 = !{!2163, !2172, !2173, !2174}
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_a", scope: !2161, file: !2057, line: 256, baseType: !2164, size: 64)
!2164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2165, size: 64)
!2165 = !DIDerivedType(tag: DW_TAG_typedef, name: "conflict_function", file: !2057, line: 243, baseType: !2166)
!2166 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2057, line: 239, size: 192, elements: !2167)
!2167 = !{!2168, !2169}
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !2166, file: !2057, line: 241, baseType: !7, size: 32)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "fns", scope: !2166, file: !2057, line: 242, baseType: !2170, size: 128, offset: 64)
!2170 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2171, size: 128, elements: !813)
!2171 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_fn", file: !2057, line: 237, baseType: !2089)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_b", scope: !2161, file: !2057, line: 257, baseType: !2164, size: 64, offset: 64)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "last_conflict", scope: !2161, file: !2057, line: 261, baseType: !859, size: 64, offset: 128)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !2161, file: !2057, line: 267, baseType: !859, size: 64, offset: 192)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2141, file: !2057, line: 307, baseType: !2104, size: 64, offset: 256)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "dir_vects", scope: !2141, file: !2057, line: 310, baseType: !2177, size: 64, offset: 320)
!2177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2178, size: 64)
!2178 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_heap", file: !2114, line: 33, baseType: !2179)
!2179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_heap", file: !2114, line: 33, size: 128, elements: !2180)
!2180 = !{!2181}
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2179, file: !2114, line: 33, baseType: !2118, size: 128)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "dist_vects", scope: !2141, file: !2057, line: 313, baseType: !2177, size: 64, offset: 384)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "inner_loop", scope: !2141, file: !2057, line: 317, baseType: !7, size: 32, offset: 448)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "reversed_p", scope: !2141, file: !2057, line: 320, baseType: !972, size: 8, offset: 480)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "affine_p", scope: !2141, file: !2057, line: 324, baseType: !972, size: 8, offset: 488)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "self_reference_p", scope: !2141, file: !2057, line: 328, baseType: !972, size: 8, offset: 496)
!2187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1122, size: 64)
!2188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2189, size: 64)
!2189 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !135, line: 283, baseType: !2190)
!2190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !135, line: 283, size: 128, elements: !2191)
!2191 = !{!2192}
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2190, file: !135, line: 283, baseType: !1130, size: 128)
!2193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2194, size: 64)
!2194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "elv_data", file: !3, line: 430, size: 640, elements: !2195)
!2195 = !{!2196, !2215, !2216, !2217}
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2194, file: !3, line: 432, baseType: !2197, size: 448)
!2197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_stmt_info", file: !419, line: 4652, size: 448, elements: !2198)
!2198 = !{!2199, !2206, !2207, !2210, !2211, !2212, !2213, !2214}
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "gsi", scope: !2197, file: !419, line: 4655, baseType: !2200, size: 192)
!2200 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !419, line: 265, baseType: !2201)
!2201 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !419, line: 254, size: 192, elements: !2202)
!2202 = !{!2203, !2204, !2205}
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2201, file: !419, line: 257, baseType: !728, size: 64)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2201, file: !419, line: 263, baseType: !723, size: 64, offset: 64)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2201, file: !419, line: 264, baseType: !1122, size: 64, offset: 128)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2197, file: !419, line: 4659, baseType: !849, size: 64, offset: 192)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "pset", scope: !2197, file: !419, line: 4664, baseType: !2208, size: 64, offset: 256)
!2208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2209, size: 64)
!2209 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !151, line: 5199, flags: DIFlagFwdDecl)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "val_only", scope: !2197, file: !419, line: 4678, baseType: !972, size: 8, offset: 320)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "is_lhs", scope: !2197, file: !419, line: 4681, baseType: !972, size: 8, offset: 328)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !2197, file: !419, line: 4685, baseType: !972, size: 8, offset: 336)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "want_locations", scope: !2197, file: !419, line: 4688, baseType: !972, size: 8, offset: 344)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "callback_result", scope: !2197, file: !419, line: 4694, baseType: !859, size: 64, offset: 384)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !2194, file: !3, line: 433, baseType: !713, size: 64, offset: 448)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "decl_address", scope: !2194, file: !3, line: 434, baseType: !1154, size: 64, offset: 512)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !2194, file: !3, line: 435, baseType: !972, size: 8, offset: 576)
!2218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2219, size: 64)
!2219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "int_tree_map", file: !1062, line: 321, size: 128, elements: !2220)
!2220 = !{!2221, !2222}
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2219, file: !1062, line: 323, baseType: !7, size: 32)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "to", scope: !2219, file: !1062, line: 324, baseType: !859, size: 64, offset: 64)
!2223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2224, size: 64)
!2224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2225)
!2225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "name_to_copy_elt", file: !3, line: 218, size: 192, elements: !2226)
!2226 = !{!2227, !2228, !2229}
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2225, file: !3, line: 220, baseType: !7, size: 32)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "new_name", scope: !2225, file: !3, line: 221, baseType: !859, size: 64, offset: 64)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "field", scope: !2225, file: !3, line: 222, baseType: !859, size: 64, offset: 128)
!2230 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !645, line: 27, baseType: !1270)
!2231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2225, size: 64)
!2232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2233, size: 64)
!2233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "clsn_data", file: !3, line: 840, size: 256, elements: !2234)
!2234 = !{!2235, !2236, !2237, !2238}
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "store", scope: !2233, file: !3, line: 842, baseType: !859, size: 64)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "load", scope: !2233, file: !3, line: 843, baseType: !859, size: 64, offset: 64)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "store_bb", scope: !2233, file: !3, line: 845, baseType: !1122, size: 64, offset: 128)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "load_bb", scope: !2233, file: !3, line: 846, baseType: !1122, size: 64, offset: 192)
!2239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2240, size: 64)
!2240 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1308)
!2241 = !{!2242, !0, !2256}
!2242 = !DIGlobalVariableExpression(var: !2243, expr: !DIExpression())
!2243 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_tree_parloops_h", scope: !2, file: !2244, line: 24, type: !2245, isLocal: false, isDefinition: true)
!2244 = !DIFile(filename: "./gt-tree-parloops.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2245 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2246, size: 640, elements: !813)
!2246 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2247)
!2247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !2248, line: 69, size: 320, elements: !2249)
!2248 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2249 = !{!2250, !2251, !2252, !2253, !2255}
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2247, file: !2248, line: 70, baseType: !849, size: 64)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !2247, file: !2248, line: 71, baseType: !1179, size: 64, offset: 64)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !2247, file: !2248, line: 72, baseType: !1179, size: 64, offset: 128)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !2247, file: !2248, line: 73, baseType: !2254, size: 64, offset: 192)
!2254 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !2248, line: 65, baseType: !1173)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !2247, file: !2248, line: 74, baseType: !2254, size: 64, offset: 256)
!2256 = !DIGlobalVariableExpression(var: !2257, expr: !DIExpression())
!2257 = distinct !DIGlobalVariable(name: "loopfn_num", scope: !2258, file: !3, line: 1233, type: !7, isLocal: true, isDefinition: true)
!2258 = distinct !DISubprogram(name: "create_loop_fn", scope: !3, file: !3, line: 1227, type: !2259, scopeLine: 1228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!2259 = !DISubroutineType(types: !2260)
!2260 = !{!859}
!2261 = !{}
!2262 = !{i32 7, !"Dwarf Version", i32 4}
!2263 = !{i32 2, !"Debug Info Version", i32 3}
!2264 = !{i32 1, !"wchar_size", i32 4}
!2265 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2266 = distinct !DISubprogram(name: "parallelize_loops", scope: !3, file: !3, line: 1882, type: !2267, scopeLine: 1883, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!2267 = !DISubroutineType(types: !2268)
!2268 = !{!972}
!2269 = !DILocalVariable(name: "n_threads", scope: !2266, file: !3, line: 1884, type: !7)
!2270 = !DILocation(line: 1884, column: 12, scope: !2266)
!2271 = !DILocation(line: 1884, column: 24, scope: !2266)
!2272 = !DILocalVariable(name: "changed", scope: !2266, file: !3, line: 1885, type: !972)
!2273 = !DILocation(line: 1885, column: 8, scope: !2266)
!2274 = !DILocalVariable(name: "loop", scope: !2266, file: !3, line: 1886, type: !1307)
!2275 = !DILocation(line: 1886, column: 16, scope: !2266)
!2276 = !DILocalVariable(name: "niter_desc", scope: !2266, file: !3, line: 1887, type: !2277)
!2277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_niter_desc", file: !1062, line: 657, size: 640, elements: !2278)
!2278 = !{!2279, !2280, !2281, !2282, !2283, !2290, !2291}
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "assumptions", scope: !2277, file: !1062, line: 659, baseType: !859, size: 64)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "may_be_zero", scope: !2277, file: !1062, line: 663, baseType: !859, size: 64, offset: 64)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "niter", scope: !2277, file: !1062, line: 667, baseType: !859, size: 64, offset: 128)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !2277, file: !1062, line: 671, baseType: !907, size: 128, offset: 192)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2277, file: !1062, line: 679, baseType: !2284, size: 192, offset: 320)
!2284 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_iv", file: !1062, line: 651, baseType: !2285)
!2285 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1062, line: 644, size: 192, elements: !2286)
!2286 = !{!2287, !2288, !2289}
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2285, file: !1062, line: 647, baseType: !859, size: 64)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2285, file: !1062, line: 647, baseType: !859, size: 64, offset: 64)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "no_overflow", scope: !2285, file: !1062, line: 650, baseType: !972, size: 8, offset: 128)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2277, file: !1062, line: 680, baseType: !859, size: 64, offset: 512)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "cmp", scope: !2277, file: !1062, line: 681, baseType: !183, size: 32, offset: 576)
!2292 = !DILocation(line: 1887, column: 26, scope: !2266)
!2293 = !DILocalVariable(name: "li", scope: !2266, file: !3, line: 1888, type: !2294)
!2294 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !378, line: 515, baseType: !2295)
!2295 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !378, line: 508, size: 128, elements: !2296)
!2296 = !{!2297, !2298}
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !2295, file: !378, line: 511, baseType: !2036, size: 64)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !2295, file: !378, line: 514, baseType: !7, size: 32, offset: 64)
!2299 = !DILocation(line: 1888, column: 17, scope: !2266)
!2300 = !DILocalVariable(name: "reduction_list", scope: !2266, file: !3, line: 1889, type: !1154)
!2301 = !DILocation(line: 1889, column: 10, scope: !2266)
!2302 = !DILocalVariable(name: "estimated", scope: !2266, file: !3, line: 1890, type: !666)
!2303 = !DILocation(line: 1890, column: 17, scope: !2266)
!2304 = !DILocalVariable(name: "loop_loc", scope: !2266, file: !3, line: 1891, type: !2305)
!2305 = !DIDerivedType(tag: DW_TAG_typedef, name: "LOC", file: !2306, line: 27, baseType: !667)
!2306 = !DIFile(filename: "./tree-vectorizer.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2307 = !DILocation(line: 1891, column: 7, scope: !2266)
!2308 = !DILocation(line: 1894, column: 32, scope: !2309)
!2309 = distinct !DILexicalBlock(scope: !2266, file: !3, line: 1894, column: 7)
!2310 = !DILocation(line: 1894, column: 38, scope: !2309)
!2311 = !DILocation(line: 1894, column: 7, scope: !2309)
!2312 = !DILocation(line: 1894, column: 7, scope: !2266)
!2313 = !DILocation(line: 1895, column: 5, scope: !2309)
!2314 = !DILocation(line: 1896, column: 7, scope: !2315)
!2315 = distinct !DILexicalBlock(scope: !2266, file: !3, line: 1896, column: 7)
!2316 = !DILocation(line: 1896, column: 13, scope: !2315)
!2317 = !DILocation(line: 1896, column: 7, scope: !2266)
!2318 = !DILocation(line: 1897, column: 5, scope: !2315)
!2319 = !DILocation(line: 1899, column: 20, scope: !2266)
!2320 = !DILocation(line: 1899, column: 18, scope: !2266)
!2321 = !DILocation(line: 1901, column: 3, scope: !2266)
!2322 = !DILocation(line: 1903, column: 3, scope: !2323)
!2323 = distinct !DILexicalBlock(scope: !2266, file: !3, line: 1903, column: 3)
!2324 = !DILocation(line: 1903, column: 3, scope: !2325)
!2325 = distinct !DILexicalBlock(scope: !2323, file: !3, line: 1903, column: 3)
!2326 = !DILocation(line: 1905, column: 19, scope: !2327)
!2327 = distinct !DILexicalBlock(scope: !2325, file: !3, line: 1904, column: 5)
!2328 = !DILocation(line: 1905, column: 7, scope: !2327)
!2329 = !DILocation(line: 1906, column: 11, scope: !2330)
!2330 = distinct !DILexicalBlock(scope: !2327, file: !3, line: 1906, column: 11)
!2331 = !DILocation(line: 1906, column: 21, scope: !2330)
!2332 = !DILocation(line: 1906, column: 25, scope: !2330)
!2333 = !DILocation(line: 1906, column: 36, scope: !2330)
!2334 = !DILocation(line: 1906, column: 11, scope: !2327)
!2335 = !DILocation(line: 1908, column: 18, scope: !2336)
!2336 = distinct !DILexicalBlock(scope: !2330, file: !3, line: 1907, column: 7)
!2337 = !DILocation(line: 1908, column: 61, scope: !2336)
!2338 = !DILocation(line: 1908, column: 67, scope: !2336)
!2339 = !DILocation(line: 1908, column: 9, scope: !2336)
!2340 = !DILocation(line: 1909, column: 6, scope: !2341)
!2341 = distinct !DILexicalBlock(scope: !2336, file: !3, line: 1909, column: 6)
!2342 = !DILocation(line: 1909, column: 12, scope: !2341)
!2343 = !DILocation(line: 1909, column: 6, scope: !2336)
!2344 = !DILocation(line: 1910, column: 13, scope: !2341)
!2345 = !DILocation(line: 1910, column: 53, scope: !2341)
!2346 = !DILocation(line: 1910, column: 59, scope: !2341)
!2347 = !DILocation(line: 1910, column: 4, scope: !2341)
!2348 = !DILocation(line: 1912, column: 13, scope: !2341)
!2349 = !DILocation(line: 1912, column: 49, scope: !2341)
!2350 = !DILocation(line: 1912, column: 55, scope: !2341)
!2351 = !DILocation(line: 1912, column: 4, scope: !2341)
!2352 = !DILocation(line: 1913, column: 7, scope: !2336)
!2353 = !DILocation(line: 1917, column: 11, scope: !2354)
!2354 = distinct !DILexicalBlock(scope: !2327, file: !3, line: 1917, column: 11)
!2355 = !DILocation(line: 1917, column: 37, scope: !2354)
!2356 = !DILocation(line: 1917, column: 41, scope: !2354)
!2357 = !DILocation(line: 1917, column: 47, scope: !2354)
!2358 = !DILocation(line: 1917, column: 11, scope: !2327)
!2359 = !DILocation(line: 1919, column: 13, scope: !2360)
!2360 = distinct !DILexicalBlock(scope: !2361, file: !3, line: 1919, column: 13)
!2361 = distinct !DILexicalBlock(scope: !2354, file: !3, line: 1918, column: 7)
!2362 = !DILocation(line: 1919, column: 23, scope: !2360)
!2363 = !DILocation(line: 1919, column: 27, scope: !2360)
!2364 = !DILocation(line: 1919, column: 38, scope: !2360)
!2365 = !DILocation(line: 1919, column: 13, scope: !2361)
!2366 = !DILocation(line: 1920, column: 14, scope: !2360)
!2367 = !DILocation(line: 1920, column: 5, scope: !2360)
!2368 = !DILocation(line: 1921, column: 2, scope: !2361)
!2369 = !DILocation(line: 1924, column: 29, scope: !2370)
!2370 = distinct !DILexicalBlock(scope: !2327, file: !3, line: 1924, column: 11)
!2371 = !DILocation(line: 1924, column: 12, scope: !2370)
!2372 = !DILocation(line: 1924, column: 11, scope: !2327)
!2373 = !DILocation(line: 1927, column: 13, scope: !2374)
!2374 = distinct !DILexicalBlock(scope: !2375, file: !3, line: 1927, column: 13)
!2375 = distinct !DILexicalBlock(scope: !2370, file: !3, line: 1925, column: 7)
!2376 = !DILocation(line: 1927, column: 23, scope: !2374)
!2377 = !DILocation(line: 1927, column: 27, scope: !2374)
!2378 = !DILocation(line: 1927, column: 38, scope: !2374)
!2379 = !DILocation(line: 1927, column: 13, scope: !2375)
!2380 = !DILocation(line: 1928, column: 13, scope: !2374)
!2381 = !DILocation(line: 1928, column: 4, scope: !2374)
!2382 = !DILocation(line: 1930, column: 2, scope: !2375)
!2383 = !DILocation(line: 1934, column: 27, scope: !2384)
!2384 = distinct !DILexicalBlock(scope: !2327, file: !3, line: 1934, column: 4)
!2385 = !DILocation(line: 1934, column: 5, scope: !2384)
!2386 = !DILocation(line: 1935, column: 4, scope: !2384)
!2387 = !DILocation(line: 1935, column: 46, scope: !2384)
!2388 = !DILocation(line: 1935, column: 7, scope: !2384)
!2389 = !DILocation(line: 1936, column: 4, scope: !2384)
!2390 = !DILocation(line: 1936, column: 29, scope: !2384)
!2391 = !DILocation(line: 1936, column: 8, scope: !2384)
!2392 = !DILocation(line: 1936, column: 36, scope: !2384)
!2393 = !DILocation(line: 1936, column: 41, scope: !2384)
!2394 = !DILocation(line: 1936, column: 47, scope: !2384)
!2395 = !DILocation(line: 1938, column: 4, scope: !2384)
!2396 = !DILocation(line: 1938, column: 34, scope: !2384)
!2397 = !DILocation(line: 1938, column: 7, scope: !2384)
!2398 = !DILocation(line: 1934, column: 4, scope: !2327)
!2399 = !DILocation(line: 1939, column: 2, scope: !2384)
!2400 = !DILocation(line: 1940, column: 50, scope: !2327)
!2401 = !DILocation(line: 1940, column: 19, scope: !2327)
!2402 = !DILocation(line: 1940, column: 17, scope: !2327)
!2403 = !DILocation(line: 1943, column: 12, scope: !2404)
!2404 = distinct !DILexicalBlock(scope: !2327, file: !3, line: 1943, column: 11)
!2405 = !DILocation(line: 1944, column: 4, scope: !2404)
!2406 = !DILocation(line: 1944, column: 9, scope: !2404)
!2407 = !DILocation(line: 1944, column: 19, scope: !2404)
!2408 = !DILocation(line: 1945, column: 7, scope: !2404)
!2409 = !DILocation(line: 1945, column: 10, scope: !2404)
!2410 = !DILocation(line: 1945, column: 39, scope: !2404)
!2411 = !DILocation(line: 1945, column: 23, scope: !2404)
!2412 = !DILocation(line: 1945, column: 49, scope: !2404)
!2413 = !DILocation(line: 1945, column: 20, scope: !2404)
!2414 = !DILocation(line: 1947, column: 8, scope: !2404)
!2415 = !DILocation(line: 1947, column: 42, scope: !2404)
!2416 = !DILocation(line: 1947, column: 11, scope: !2404)
!2417 = !DILocation(line: 1943, column: 11, scope: !2327)
!2418 = !DILocation(line: 1948, column: 2, scope: !2404)
!2419 = !DILocation(line: 1950, column: 32, scope: !2420)
!2420 = distinct !DILexicalBlock(scope: !2327, file: !3, line: 1950, column: 11)
!2421 = !DILocation(line: 1950, column: 12, scope: !2420)
!2422 = !DILocation(line: 1950, column: 11, scope: !2327)
!2423 = !DILocation(line: 1951, column: 2, scope: !2420)
!2424 = !DILocation(line: 1953, column: 39, scope: !2425)
!2425 = distinct !DILexicalBlock(scope: !2327, file: !3, line: 1953, column: 11)
!2426 = !DILocation(line: 1953, column: 45, scope: !2425)
!2427 = !DILocation(line: 1953, column: 12, scope: !2425)
!2428 = !DILocation(line: 1953, column: 11, scope: !2327)
!2429 = !DILocation(line: 1954, column: 2, scope: !2425)
!2430 = !DILocation(line: 1956, column: 12, scope: !2431)
!2431 = distinct !DILexicalBlock(scope: !2327, file: !3, line: 1956, column: 11)
!2432 = !DILocation(line: 1956, column: 38, scope: !2431)
!2433 = !DILocation(line: 1956, column: 59, scope: !2431)
!2434 = !DILocation(line: 1956, column: 42, scope: !2431)
!2435 = !DILocation(line: 1956, column: 11, scope: !2327)
!2436 = !DILocation(line: 1957, column: 2, scope: !2431)
!2437 = !DILocation(line: 1959, column: 15, scope: !2327)
!2438 = !DILocation(line: 1960, column: 11, scope: !2439)
!2439 = distinct !DILexicalBlock(scope: !2327, file: !3, line: 1960, column: 11)
!2440 = !DILocation(line: 1960, column: 21, scope: !2439)
!2441 = !DILocation(line: 1960, column: 25, scope: !2439)
!2442 = !DILocation(line: 1960, column: 36, scope: !2439)
!2443 = !DILocation(line: 1960, column: 11, scope: !2327)
!2444 = !DILocation(line: 1962, column: 6, scope: !2445)
!2445 = distinct !DILexicalBlock(scope: !2446, file: !3, line: 1962, column: 6)
!2446 = distinct !DILexicalBlock(scope: !2439, file: !3, line: 1961, column: 7)
!2447 = !DILocation(line: 1962, column: 12, scope: !2445)
!2448 = !DILocation(line: 1962, column: 6, scope: !2446)
!2449 = !DILocation(line: 1963, column: 13, scope: !2445)
!2450 = !DILocation(line: 1963, column: 56, scope: !2445)
!2451 = !DILocation(line: 1963, column: 62, scope: !2445)
!2452 = !DILocation(line: 1963, column: 70, scope: !2445)
!2453 = !DILocation(line: 1963, column: 4, scope: !2445)
!2454 = !DILocation(line: 1965, column: 13, scope: !2445)
!2455 = !DILocation(line: 1965, column: 56, scope: !2445)
!2456 = !DILocation(line: 1965, column: 62, scope: !2445)
!2457 = !DILocation(line: 1965, column: 70, scope: !2445)
!2458 = !DILocation(line: 1965, column: 4, scope: !2445)
!2459 = !DILocation(line: 1966, column: 33, scope: !2446)
!2460 = !DILocation(line: 1966, column: 13, scope: !2446)
!2461 = !DILocation(line: 1966, column: 11, scope: !2446)
!2462 = !DILocation(line: 1967, column: 6, scope: !2463)
!2463 = distinct !DILexicalBlock(scope: !2446, file: !3, line: 1967, column: 6)
!2464 = !DILocation(line: 1967, column: 15, scope: !2463)
!2465 = !DILocation(line: 1967, column: 6, scope: !2446)
!2466 = !DILocation(line: 1968, column: 13, scope: !2463)
!2467 = !DILocation(line: 1969, column: 6, scope: !2463)
!2468 = !DILocation(line: 1969, column: 27, scope: !2463)
!2469 = !DILocation(line: 1968, column: 4, scope: !2463)
!2470 = !DILocation(line: 1970, column: 7, scope: !2446)
!2471 = !DILocation(line: 1971, column: 26, scope: !2327)
!2472 = !DILocation(line: 1971, column: 32, scope: !2327)
!2473 = !DILocation(line: 1972, column: 5, scope: !2327)
!2474 = !DILocation(line: 1971, column: 7, scope: !2327)
!2475 = !DILocation(line: 1973, column: 7, scope: !2327)
!2476 = !DILocation(line: 1974, column: 7, scope: !2327)
!2477 = !DILocation(line: 1975, column: 7, scope: !2327)
!2478 = !DILocation(line: 1976, column: 7, scope: !2327)
!2479 = !DILocation(line: 1977, column: 5, scope: !2327)
!2480 = distinct !{!2480, !2322, !2481}
!2481 = !DILocation(line: 1977, column: 5, scope: !2323)
!2482 = !DILocation(line: 1979, column: 3, scope: !2266)
!2483 = !DILocation(line: 1980, column: 16, scope: !2266)
!2484 = !DILocation(line: 1980, column: 3, scope: !2266)
!2485 = !DILocation(line: 1985, column: 7, scope: !2486)
!2486 = distinct !DILexicalBlock(scope: !2266, file: !3, line: 1985, column: 7)
!2487 = !DILocation(line: 1985, column: 7, scope: !2266)
!2488 = !DILocation(line: 1987, column: 27, scope: !2489)
!2489 = distinct !DILexicalBlock(scope: !2486, file: !3, line: 1986, column: 5)
!2490 = !DILocation(line: 1987, column: 33, scope: !2489)
!2491 = !DILocation(line: 1987, column: 44, scope: !2489)
!2492 = !DILocation(line: 1987, column: 7, scope: !2489)
!2493 = !DILocation(line: 1988, column: 27, scope: !2489)
!2494 = !DILocation(line: 1988, column: 33, scope: !2489)
!2495 = !DILocation(line: 1988, column: 44, scope: !2489)
!2496 = !DILocation(line: 1988, column: 7, scope: !2489)
!2497 = !DILocation(line: 1989, column: 5, scope: !2489)
!2498 = !DILocation(line: 1991, column: 10, scope: !2266)
!2499 = !DILocation(line: 1991, column: 3, scope: !2266)
!2500 = !DILocation(line: 1992, column: 1, scope: !2266)
!2501 = distinct !DISubprogram(name: "parallelized_function_p", scope: !3, file: !3, line: 1215, type: !2502, scopeLine: 1216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!2502 = !DISubroutineType(types: !2503)
!2503 = !{!972, !859}
!2504 = !DILocalVariable(name: "fn", arg: 1, scope: !2501, file: !3, line: 1215, type: !859)
!2505 = !DILocation(line: 1215, column: 31, scope: !2501)
!2506 = !DILocation(line: 1217, column: 8, scope: !2507)
!2507 = distinct !DILexicalBlock(scope: !2501, file: !3, line: 1217, column: 7)
!2508 = !DILocation(line: 1217, column: 31, scope: !2507)
!2509 = !DILocation(line: 1217, column: 35, scope: !2507)
!2510 = !DILocation(line: 1217, column: 7, scope: !2501)
!2511 = !DILocation(line: 1218, column: 5, scope: !2507)
!2512 = !DILocation(line: 1220, column: 24, scope: !2501)
!2513 = !DILocation(line: 1220, column: 48, scope: !2501)
!2514 = !DILocation(line: 1220, column: 10, scope: !2501)
!2515 = !DILocation(line: 1220, column: 3, scope: !2501)
!2516 = !DILocation(line: 1221, column: 1, scope: !2501)
!2517 = distinct !DISubprogram(name: "reduction_info_hash", scope: !3, file: !3, line: 195, type: !1161, scopeLine: 196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!2518 = !DILocalVariable(name: "aa", arg: 1, scope: !2517, file: !3, line: 195, type: !1164)
!2519 = !DILocation(line: 195, column: 34, scope: !2517)
!2520 = !DILocalVariable(name: "a", scope: !2517, file: !3, line: 197, type: !669)
!2521 = !DILocation(line: 197, column: 32, scope: !2517)
!2522 = !DILocation(line: 197, column: 68, scope: !2517)
!2523 = !DILocation(line: 197, column: 36, scope: !2517)
!2524 = !DILocation(line: 199, column: 10, scope: !2517)
!2525 = !DILocation(line: 199, column: 29, scope: !2517)
!2526 = !DILocation(line: 199, column: 32, scope: !2517)
!2527 = !DILocation(line: 199, column: 3, scope: !2517)
!2528 = distinct !DISubprogram(name: "reduction_info_eq", scope: !3, file: !3, line: 186, type: !1169, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!2529 = !DILocalVariable(name: "aa", arg: 1, scope: !2528, file: !3, line: 186, type: !1164)
!2530 = !DILocation(line: 186, column: 32, scope: !2528)
!2531 = !DILocalVariable(name: "bb", arg: 2, scope: !2528, file: !3, line: 186, type: !1164)
!2532 = !DILocation(line: 186, column: 48, scope: !2528)
!2533 = !DILocalVariable(name: "a", scope: !2528, file: !3, line: 188, type: !669)
!2534 = !DILocation(line: 188, column: 32, scope: !2528)
!2535 = !DILocation(line: 188, column: 68, scope: !2528)
!2536 = !DILocation(line: 188, column: 36, scope: !2528)
!2537 = !DILocalVariable(name: "b", scope: !2528, file: !3, line: 189, type: !669)
!2538 = !DILocation(line: 189, column: 32, scope: !2528)
!2539 = !DILocation(line: 189, column: 68, scope: !2528)
!2540 = !DILocation(line: 189, column: 36, scope: !2528)
!2541 = !DILocation(line: 191, column: 11, scope: !2528)
!2542 = !DILocation(line: 191, column: 14, scope: !2528)
!2543 = !DILocation(line: 191, column: 27, scope: !2528)
!2544 = !DILocation(line: 191, column: 30, scope: !2528)
!2545 = !DILocation(line: 191, column: 24, scope: !2528)
!2546 = !DILocation(line: 191, column: 3, scope: !2528)
!2547 = distinct !DISubprogram(name: "fel_init", scope: !378, file: !378, line: 535, type: !2548, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!2548 = !DISubroutineType(types: !2549)
!2549 = !{null, !2550, !2551, !7}
!2550 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2294, size: 64)
!2551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1306, size: 64)
!2552 = !DILocalVariable(name: "li", arg: 1, scope: !2547, file: !378, line: 535, type: !2550)
!2553 = !DILocation(line: 535, column: 26, scope: !2547)
!2554 = !DILocalVariable(name: "loop", arg: 2, scope: !2547, file: !378, line: 535, type: !2551)
!2555 = !DILocation(line: 535, column: 38, scope: !2547)
!2556 = !DILocalVariable(name: "flags", arg: 3, scope: !2547, file: !378, line: 535, type: !7)
!2557 = !DILocation(line: 535, column: 53, scope: !2547)
!2558 = !DILocalVariable(name: "aloop", scope: !2547, file: !378, line: 537, type: !1307)
!2559 = !DILocation(line: 537, column: 16, scope: !2547)
!2560 = !DILocalVariable(name: "i", scope: !2547, file: !378, line: 538, type: !7)
!2561 = !DILocation(line: 538, column: 12, scope: !2547)
!2562 = !DILocalVariable(name: "mn", scope: !2547, file: !378, line: 539, type: !762)
!2563 = !DILocation(line: 539, column: 7, scope: !2547)
!2564 = !DILocation(line: 541, column: 3, scope: !2547)
!2565 = !DILocation(line: 541, column: 7, scope: !2547)
!2566 = !DILocation(line: 541, column: 11, scope: !2547)
!2567 = !DILocation(line: 542, column: 8, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !2547, file: !378, line: 542, column: 7)
!2569 = !DILocation(line: 542, column: 7, scope: !2547)
!2570 = !DILocation(line: 544, column: 7, scope: !2571)
!2571 = distinct !DILexicalBlock(scope: !2568, file: !378, line: 543, column: 5)
!2572 = !DILocation(line: 544, column: 11, scope: !2571)
!2573 = !DILocation(line: 544, column: 20, scope: !2571)
!2574 = !DILocation(line: 545, column: 8, scope: !2571)
!2575 = !DILocation(line: 545, column: 13, scope: !2571)
!2576 = !DILocation(line: 546, column: 7, scope: !2571)
!2577 = !DILocation(line: 549, column: 18, scope: !2547)
!2578 = !DILocation(line: 549, column: 3, scope: !2547)
!2579 = !DILocation(line: 549, column: 7, scope: !2547)
!2580 = !DILocation(line: 549, column: 16, scope: !2547)
!2581 = !DILocation(line: 550, column: 9, scope: !2547)
!2582 = !DILocation(line: 550, column: 15, scope: !2547)
!2583 = !DILocation(line: 550, column: 8, scope: !2547)
!2584 = !DILocation(line: 550, column: 6, scope: !2547)
!2585 = !DILocation(line: 552, column: 7, scope: !2586)
!2586 = distinct !DILexicalBlock(scope: !2547, file: !378, line: 552, column: 7)
!2587 = !DILocation(line: 552, column: 13, scope: !2586)
!2588 = !DILocation(line: 552, column: 7, scope: !2547)
!2589 = !DILocation(line: 554, column: 14, scope: !2590)
!2590 = distinct !DILexicalBlock(scope: !2591, file: !378, line: 554, column: 7)
!2591 = distinct !DILexicalBlock(scope: !2586, file: !378, line: 553, column: 5)
!2592 = !DILocation(line: 554, column: 12, scope: !2590)
!2593 = !DILocation(line: 554, column: 19, scope: !2594)
!2594 = distinct !DILexicalBlock(scope: !2590, file: !378, line: 554, column: 7)
!2595 = !DILocation(line: 554, column: 7, scope: !2590)
!2596 = !DILocation(line: 555, column: 6, scope: !2597)
!2597 = distinct !DILexicalBlock(scope: !2594, file: !378, line: 555, column: 6)
!2598 = !DILocation(line: 555, column: 12, scope: !2597)
!2599 = !DILocation(line: 556, column: 6, scope: !2597)
!2600 = !DILocation(line: 556, column: 9, scope: !2597)
!2601 = !DILocation(line: 556, column: 16, scope: !2597)
!2602 = !DILocation(line: 556, column: 22, scope: !2597)
!2603 = !DILocation(line: 557, column: 6, scope: !2597)
!2604 = !DILocation(line: 557, column: 9, scope: !2597)
!2605 = !DILocation(line: 557, column: 16, scope: !2597)
!2606 = !DILocation(line: 557, column: 23, scope: !2597)
!2607 = !DILocation(line: 557, column: 20, scope: !2597)
!2608 = !DILocation(line: 555, column: 6, scope: !2594)
!2609 = !DILocation(line: 558, column: 4, scope: !2597)
!2610 = !DILocation(line: 554, column: 75, scope: !2594)
!2611 = !DILocation(line: 554, column: 7, scope: !2594)
!2612 = distinct !{!2612, !2595, !2613}
!2613 = !DILocation(line: 558, column: 4, scope: !2590)
!2614 = !DILocation(line: 559, column: 5, scope: !2591)
!2615 = !DILocation(line: 560, column: 12, scope: !2616)
!2616 = distinct !DILexicalBlock(scope: !2586, file: !378, line: 560, column: 12)
!2617 = !DILocation(line: 560, column: 18, scope: !2616)
!2618 = !DILocation(line: 560, column: 12, scope: !2586)
!2619 = !DILocation(line: 563, column: 20, scope: !2620)
!2620 = distinct !DILexicalBlock(scope: !2621, file: !378, line: 563, column: 7)
!2621 = distinct !DILexicalBlock(scope: !2616, file: !378, line: 561, column: 5)
!2622 = !DILocation(line: 563, column: 35, scope: !2620)
!2623 = !DILocation(line: 563, column: 18, scope: !2620)
!2624 = !DILocation(line: 563, column: 12, scope: !2620)
!2625 = !DILocation(line: 564, column: 5, scope: !2626)
!2626 = distinct !DILexicalBlock(scope: !2620, file: !378, line: 563, column: 7)
!2627 = !DILocation(line: 564, column: 12, scope: !2626)
!2628 = !DILocation(line: 564, column: 18, scope: !2626)
!2629 = !DILocation(line: 563, column: 7, scope: !2620)
!2630 = !DILocation(line: 566, column: 2, scope: !2626)
!2631 = !DILocation(line: 565, column: 13, scope: !2626)
!2632 = !DILocation(line: 565, column: 20, scope: !2626)
!2633 = !DILocation(line: 565, column: 11, scope: !2626)
!2634 = !DILocation(line: 563, column: 7, scope: !2626)
!2635 = distinct !{!2635, !2629, !2636}
!2636 = !DILocation(line: 566, column: 2, scope: !2620)
!2637 = !DILocation(line: 568, column: 7, scope: !2621)
!2638 = !DILocation(line: 570, column: 8, scope: !2639)
!2639 = distinct !DILexicalBlock(scope: !2640, file: !378, line: 570, column: 8)
!2640 = distinct !DILexicalBlock(scope: !2621, file: !378, line: 569, column: 2)
!2641 = !DILocation(line: 570, column: 15, scope: !2639)
!2642 = !DILocation(line: 570, column: 22, scope: !2639)
!2643 = !DILocation(line: 570, column: 19, scope: !2639)
!2644 = !DILocation(line: 570, column: 8, scope: !2640)
!2645 = !DILocation(line: 571, column: 6, scope: !2639)
!2646 = !DILocation(line: 573, column: 8, scope: !2647)
!2647 = distinct !DILexicalBlock(scope: !2640, file: !378, line: 573, column: 8)
!2648 = !DILocation(line: 573, column: 15, scope: !2647)
!2649 = !DILocation(line: 573, column: 8, scope: !2640)
!2650 = !DILocation(line: 575, column: 21, scope: !2651)
!2651 = distinct !DILexicalBlock(scope: !2652, file: !378, line: 575, column: 8)
!2652 = distinct !DILexicalBlock(scope: !2647, file: !378, line: 574, column: 6)
!2653 = !DILocation(line: 575, column: 28, scope: !2651)
!2654 = !DILocation(line: 575, column: 19, scope: !2651)
!2655 = !DILocation(line: 575, column: 13, scope: !2651)
!2656 = !DILocation(line: 576, column: 6, scope: !2657)
!2657 = distinct !DILexicalBlock(scope: !2651, file: !378, line: 575, column: 8)
!2658 = !DILocation(line: 576, column: 13, scope: !2657)
!2659 = !DILocation(line: 576, column: 19, scope: !2657)
!2660 = !DILocation(line: 575, column: 8, scope: !2651)
!2661 = !DILocation(line: 578, column: 3, scope: !2657)
!2662 = !DILocation(line: 577, column: 14, scope: !2657)
!2663 = !DILocation(line: 577, column: 21, scope: !2657)
!2664 = !DILocation(line: 577, column: 12, scope: !2657)
!2665 = !DILocation(line: 575, column: 8, scope: !2657)
!2666 = distinct !{!2666, !2660, !2667}
!2667 = !DILocation(line: 578, column: 3, scope: !2651)
!2668 = !DILocation(line: 579, column: 6, scope: !2652)
!2669 = !DILocation(line: 580, column: 26, scope: !2670)
!2670 = distinct !DILexicalBlock(scope: !2647, file: !378, line: 580, column: 13)
!2671 = !DILocation(line: 580, column: 14, scope: !2670)
!2672 = !DILocation(line: 580, column: 13, scope: !2647)
!2673 = !DILocation(line: 581, column: 6, scope: !2670)
!2674 = !DILocation(line: 583, column: 26, scope: !2670)
!2675 = !DILocation(line: 583, column: 14, scope: !2670)
!2676 = !DILocation(line: 583, column: 12, scope: !2670)
!2677 = distinct !{!2677, !2637, !2678}
!2678 = !DILocation(line: 584, column: 2, scope: !2621)
!2679 = !DILocation(line: 585, column: 5, scope: !2621)
!2680 = !DILocation(line: 589, column: 15, scope: !2681)
!2681 = distinct !DILexicalBlock(scope: !2616, file: !378, line: 587, column: 5)
!2682 = !DILocation(line: 589, column: 30, scope: !2681)
!2683 = !DILocation(line: 589, column: 13, scope: !2681)
!2684 = !DILocation(line: 590, column: 7, scope: !2681)
!2685 = !DILocation(line: 592, column: 8, scope: !2686)
!2686 = distinct !DILexicalBlock(scope: !2687, file: !378, line: 592, column: 8)
!2687 = distinct !DILexicalBlock(scope: !2681, file: !378, line: 591, column: 2)
!2688 = !DILocation(line: 592, column: 15, scope: !2686)
!2689 = !DILocation(line: 592, column: 22, scope: !2686)
!2690 = !DILocation(line: 592, column: 19, scope: !2686)
!2691 = !DILocation(line: 592, column: 8, scope: !2687)
!2692 = !DILocation(line: 593, column: 6, scope: !2686)
!2693 = !DILocation(line: 595, column: 8, scope: !2694)
!2694 = distinct !DILexicalBlock(scope: !2687, file: !378, line: 595, column: 8)
!2695 = !DILocation(line: 595, column: 15, scope: !2694)
!2696 = !DILocation(line: 595, column: 21, scope: !2694)
!2697 = !DILocation(line: 595, column: 8, scope: !2687)
!2698 = !DILocation(line: 596, column: 14, scope: !2694)
!2699 = !DILocation(line: 596, column: 21, scope: !2694)
!2700 = !DILocation(line: 596, column: 12, scope: !2694)
!2701 = !DILocation(line: 596, column: 6, scope: !2694)
!2702 = !DILocation(line: 599, column: 8, scope: !2703)
!2703 = distinct !DILexicalBlock(scope: !2694, file: !378, line: 598, column: 6)
!2704 = !DILocation(line: 599, column: 15, scope: !2703)
!2705 = !DILocation(line: 599, column: 21, scope: !2703)
!2706 = !DILocation(line: 599, column: 29, scope: !2703)
!2707 = !DILocation(line: 599, column: 32, scope: !2703)
!2708 = !DILocation(line: 599, column: 39, scope: !2703)
!2709 = !DILocation(line: 599, column: 44, scope: !2703)
!2710 = !DILocation(line: 0, scope: !2703)
!2711 = !DILocation(line: 600, column: 23, scope: !2703)
!2712 = !DILocation(line: 600, column: 11, scope: !2703)
!2713 = !DILocation(line: 600, column: 9, scope: !2703)
!2714 = distinct !{!2714, !2702, !2715}
!2715 = !DILocation(line: 600, column: 28, scope: !2703)
!2716 = !DILocation(line: 601, column: 12, scope: !2717)
!2717 = distinct !DILexicalBlock(scope: !2703, file: !378, line: 601, column: 12)
!2718 = !DILocation(line: 601, column: 18, scope: !2717)
!2719 = !DILocation(line: 601, column: 12, scope: !2703)
!2720 = !DILocation(line: 602, column: 3, scope: !2717)
!2721 = !DILocation(line: 603, column: 16, scope: !2703)
!2722 = !DILocation(line: 603, column: 23, scope: !2703)
!2723 = !DILocation(line: 603, column: 14, scope: !2703)
!2724 = distinct !{!2724, !2684, !2725}
!2725 = !DILocation(line: 605, column: 2, scope: !2681)
!2726 = !DILocation(line: 608, column: 13, scope: !2547)
!2727 = !DILocation(line: 608, column: 17, scope: !2547)
!2728 = !DILocation(line: 608, column: 3, scope: !2547)
!2729 = !DILocation(line: 609, column: 1, scope: !2547)
!2730 = distinct !DISubprogram(name: "loop_has_blocks_with_irreducible_flag", scope: !3, file: !3, line: 299, type: !2731, scopeLine: 300, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!2731 = !DISubroutineType(types: !2732)
!2732 = !{!972, !1307}
!2733 = !DILocalVariable(name: "loop", arg: 1, scope: !2730, file: !3, line: 299, type: !1307)
!2734 = !DILocation(line: 299, column: 53, scope: !2730)
!2735 = !DILocalVariable(name: "i", scope: !2730, file: !3, line: 301, type: !7)
!2736 = !DILocation(line: 301, column: 12, scope: !2730)
!2737 = !DILocalVariable(name: "bbs", scope: !2730, file: !3, line: 302, type: !2187)
!2738 = !DILocation(line: 302, column: 16, scope: !2730)
!2739 = !DILocation(line: 302, column: 50, scope: !2730)
!2740 = !DILocation(line: 302, column: 22, scope: !2730)
!2741 = !DILocalVariable(name: "res", scope: !2730, file: !3, line: 303, type: !972)
!2742 = !DILocation(line: 303, column: 8, scope: !2730)
!2743 = !DILocation(line: 305, column: 10, scope: !2744)
!2744 = distinct !DILexicalBlock(scope: !2730, file: !3, line: 305, column: 3)
!2745 = !DILocation(line: 305, column: 8, scope: !2744)
!2746 = !DILocation(line: 305, column: 15, scope: !2747)
!2747 = distinct !DILexicalBlock(scope: !2744, file: !3, line: 305, column: 3)
!2748 = !DILocation(line: 305, column: 19, scope: !2747)
!2749 = !DILocation(line: 305, column: 25, scope: !2747)
!2750 = !DILocation(line: 305, column: 17, scope: !2747)
!2751 = !DILocation(line: 305, column: 3, scope: !2744)
!2752 = !DILocation(line: 306, column: 9, scope: !2753)
!2753 = distinct !DILexicalBlock(scope: !2747, file: !3, line: 306, column: 9)
!2754 = !DILocation(line: 306, column: 13, scope: !2753)
!2755 = !DILocation(line: 306, column: 17, scope: !2753)
!2756 = !DILocation(line: 306, column: 23, scope: !2753)
!2757 = !DILocation(line: 306, column: 9, scope: !2747)
!2758 = !DILocation(line: 307, column: 7, scope: !2753)
!2759 = !DILocation(line: 306, column: 25, scope: !2753)
!2760 = !DILocation(line: 305, column: 37, scope: !2747)
!2761 = !DILocation(line: 305, column: 3, scope: !2747)
!2762 = distinct !{!2762, !2751, !2763}
!2763 = !DILocation(line: 307, column: 12, scope: !2744)
!2764 = !DILocation(line: 309, column: 7, scope: !2730)
!2765 = !DILocation(line: 309, column: 3, scope: !2730)
!2766 = !DILabel(scope: !2730, name: "end", file: !3, line: 310)
!2767 = !DILocation(line: 310, column: 2, scope: !2730)
!2768 = !DILocation(line: 311, column: 9, scope: !2730)
!2769 = !DILocation(line: 311, column: 3, scope: !2730)
!2770 = !DILocation(line: 312, column: 10, scope: !2730)
!2771 = !DILocation(line: 312, column: 3, scope: !2730)
!2772 = distinct !DISubprogram(name: "loop_has_vector_phi_nodes", scope: !3, file: !3, line: 1681, type: !2731, scopeLine: 1682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!2773 = !DILocalVariable(name: "loop", arg: 1, scope: !2772, file: !3, line: 1681, type: !1307)
!2774 = !DILocation(line: 1681, column: 41, scope: !2772)
!2775 = !DILocalVariable(name: "i", scope: !2772, file: !3, line: 1683, type: !7)
!2776 = !DILocation(line: 1683, column: 12, scope: !2772)
!2777 = !DILocalVariable(name: "bbs", scope: !2772, file: !3, line: 1684, type: !2187)
!2778 = !DILocation(line: 1684, column: 16, scope: !2772)
!2779 = !DILocation(line: 1684, column: 50, scope: !2772)
!2780 = !DILocation(line: 1684, column: 22, scope: !2772)
!2781 = !DILocalVariable(name: "gsi", scope: !2772, file: !3, line: 1685, type: !2200)
!2782 = !DILocation(line: 1685, column: 24, scope: !2772)
!2783 = !DILocalVariable(name: "res", scope: !2772, file: !3, line: 1686, type: !972)
!2784 = !DILocation(line: 1686, column: 8, scope: !2772)
!2785 = !DILocation(line: 1688, column: 10, scope: !2786)
!2786 = distinct !DILexicalBlock(scope: !2772, file: !3, line: 1688, column: 3)
!2787 = !DILocation(line: 1688, column: 8, scope: !2786)
!2788 = !DILocation(line: 1688, column: 15, scope: !2789)
!2789 = distinct !DILexicalBlock(scope: !2786, file: !3, line: 1688, column: 3)
!2790 = !DILocation(line: 1688, column: 19, scope: !2789)
!2791 = !DILocation(line: 1688, column: 25, scope: !2789)
!2792 = !DILocation(line: 1688, column: 17, scope: !2789)
!2793 = !DILocation(line: 1688, column: 3, scope: !2786)
!2794 = !DILocation(line: 1689, column: 32, scope: !2795)
!2795 = distinct !DILexicalBlock(scope: !2789, file: !3, line: 1689, column: 5)
!2796 = !DILocation(line: 1689, column: 36, scope: !2795)
!2797 = !DILocation(line: 1689, column: 16, scope: !2795)
!2798 = !DILocation(line: 1689, column: 10, scope: !2795)
!2799 = !DILocation(line: 1689, column: 42, scope: !2800)
!2800 = distinct !DILexicalBlock(scope: !2795, file: !3, line: 1689, column: 5)
!2801 = !DILocation(line: 1689, column: 41, scope: !2800)
!2802 = !DILocation(line: 1689, column: 5, scope: !2795)
!2803 = !DILocation(line: 1690, column: 11, scope: !2804)
!2804 = distinct !DILexicalBlock(scope: !2800, file: !3, line: 1690, column: 11)
!2805 = !DILocation(line: 1690, column: 63, scope: !2804)
!2806 = !DILocation(line: 1690, column: 11, scope: !2800)
!2807 = !DILocation(line: 1691, column: 2, scope: !2804)
!2808 = !DILocation(line: 1690, column: 66, scope: !2804)
!2809 = !DILocation(line: 1689, column: 59, scope: !2800)
!2810 = !DILocation(line: 1689, column: 5, scope: !2800)
!2811 = distinct !{!2811, !2802, !2812}
!2812 = !DILocation(line: 1691, column: 7, scope: !2795)
!2813 = !DILocation(line: 1688, column: 37, scope: !2789)
!2814 = !DILocation(line: 1688, column: 3, scope: !2789)
!2815 = distinct !{!2815, !2793, !2816}
!2816 = !DILocation(line: 1691, column: 7, scope: !2786)
!2817 = !DILocation(line: 1693, column: 7, scope: !2772)
!2818 = !DILocation(line: 1693, column: 3, scope: !2772)
!2819 = !DILabel(scope: !2772, name: "end", file: !3, line: 1694)
!2820 = !DILocation(line: 1694, column: 2, scope: !2772)
!2821 = !DILocation(line: 1695, column: 9, scope: !2772)
!2822 = !DILocation(line: 1695, column: 3, scope: !2772)
!2823 = !DILocation(line: 1696, column: 10, scope: !2772)
!2824 = !DILocation(line: 1696, column: 3, scope: !2772)
!2825 = distinct !DISubprogram(name: "try_get_loop_niter", scope: !3, file: !3, line: 1762, type: !2826, scopeLine: 1763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!2826 = !DISubroutineType(types: !2827)
!2827 = !{!972, !1306, !2828}
!2828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2277, size: 64)
!2829 = !DILocalVariable(name: "loop", arg: 1, scope: !2825, file: !3, line: 1762, type: !1306)
!2830 = !DILocation(line: 1762, column: 28, scope: !2825)
!2831 = !DILocalVariable(name: "niter", arg: 2, scope: !2825, file: !3, line: 1762, type: !2828)
!2832 = !DILocation(line: 1762, column: 58, scope: !2825)
!2833 = !DILocalVariable(name: "exit", scope: !2825, file: !3, line: 1764, type: !713)
!2834 = !DILocation(line: 1764, column: 8, scope: !2825)
!2835 = !DILocation(line: 1764, column: 32, scope: !2825)
!2836 = !DILocation(line: 1764, column: 15, scope: !2825)
!2837 = !DILocation(line: 1766, column: 3, scope: !2825)
!2838 = !DILocation(line: 1771, column: 35, scope: !2839)
!2839 = distinct !DILexicalBlock(scope: !2825, file: !3, line: 1771, column: 7)
!2840 = !DILocation(line: 1771, column: 41, scope: !2839)
!2841 = !DILocation(line: 1771, column: 47, scope: !2839)
!2842 = !DILocation(line: 1771, column: 8, scope: !2839)
!2843 = !DILocation(line: 1771, column: 7, scope: !2825)
!2844 = !DILocation(line: 1773, column: 11, scope: !2845)
!2845 = distinct !DILexicalBlock(scope: !2846, file: !3, line: 1773, column: 11)
!2846 = distinct !DILexicalBlock(scope: !2839, file: !3, line: 1772, column: 5)
!2847 = !DILocation(line: 1773, column: 21, scope: !2845)
!2848 = !DILocation(line: 1773, column: 25, scope: !2845)
!2849 = !DILocation(line: 1773, column: 36, scope: !2845)
!2850 = !DILocation(line: 1773, column: 11, scope: !2846)
!2851 = !DILocation(line: 1774, column: 11, scope: !2845)
!2852 = !DILocation(line: 1774, column: 2, scope: !2845)
!2853 = !DILocation(line: 1775, column: 7, scope: !2846)
!2854 = !DILocation(line: 1778, column: 3, scope: !2825)
!2855 = !DILocation(line: 1779, column: 1, scope: !2825)
!2856 = distinct !DISubprogram(name: "try_create_reduction_list", scope: !3, file: !3, line: 1785, type: !2857, scopeLine: 1786, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!2857 = !DISubroutineType(types: !2858)
!2858 = !{!972, !1306, !1154}
!2859 = !DILocalVariable(name: "loop", arg: 1, scope: !2856, file: !3, line: 1785, type: !1306)
!2860 = !DILocation(line: 1785, column: 35, scope: !2856)
!2861 = !DILocalVariable(name: "reduction_list", arg: 2, scope: !2856, file: !3, line: 1785, type: !1154)
!2862 = !DILocation(line: 1785, column: 48, scope: !2856)
!2863 = !DILocalVariable(name: "exit", scope: !2856, file: !3, line: 1787, type: !713)
!2864 = !DILocation(line: 1787, column: 8, scope: !2856)
!2865 = !DILocation(line: 1787, column: 32, scope: !2856)
!2866 = !DILocation(line: 1787, column: 15, scope: !2856)
!2867 = !DILocalVariable(name: "gsi", scope: !2856, file: !3, line: 1788, type: !2200)
!2868 = !DILocation(line: 1788, column: 24, scope: !2856)
!2869 = !DILocation(line: 1790, column: 3, scope: !2856)
!2870 = !DILocation(line: 1792, column: 29, scope: !2856)
!2871 = !DILocation(line: 1792, column: 35, scope: !2856)
!2872 = !DILocation(line: 1792, column: 3, scope: !2856)
!2873 = !DILocation(line: 1795, column: 30, scope: !2874)
!2874 = distinct !DILexicalBlock(scope: !2856, file: !3, line: 1795, column: 3)
!2875 = !DILocation(line: 1795, column: 36, scope: !2874)
!2876 = !DILocation(line: 1795, column: 14, scope: !2874)
!2877 = !DILocation(line: 1795, column: 8, scope: !2874)
!2878 = !DILocation(line: 1795, column: 44, scope: !2879)
!2879 = distinct !DILexicalBlock(scope: !2874, file: !3, line: 1795, column: 3)
!2880 = !DILocation(line: 1795, column: 43, scope: !2879)
!2881 = !DILocation(line: 1795, column: 3, scope: !2874)
!2882 = !DILocalVariable(name: "phi", scope: !2883, file: !3, line: 1797, type: !674)
!2883 = distinct !DILexicalBlock(scope: !2879, file: !3, line: 1796, column: 5)
!2884 = !DILocation(line: 1797, column: 14, scope: !2883)
!2885 = !DILocation(line: 1797, column: 20, scope: !2883)
!2886 = !DILocalVariable(name: "red", scope: !2883, file: !3, line: 1798, type: !2049)
!2887 = !DILocation(line: 1798, column: 30, scope: !2883)
!2888 = !DILocalVariable(name: "imm_iter", scope: !2883, file: !3, line: 1799, type: !2889)
!2889 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !1062, line: 249, baseType: !2890)
!2890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !1062, line: 238, size: 448, elements: !2891)
!2891 = !{!2892, !2893, !2894, !2895}
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2890, file: !1062, line: 241, baseType: !2053, size: 64)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !2890, file: !1062, line: 243, baseType: !2053, size: 64, offset: 64)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !2890, file: !1062, line: 245, baseType: !2054, size: 256, offset: 128)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !2890, file: !1062, line: 248, baseType: !2053, size: 64, offset: 384)
!2896 = !DILocation(line: 1799, column: 24, scope: !2883)
!2897 = !DILocalVariable(name: "use_p", scope: !2883, file: !3, line: 1800, type: !2052)
!2898 = !DILocation(line: 1800, column: 21, scope: !2883)
!2899 = !DILocalVariable(name: "reduc_phi", scope: !2883, file: !3, line: 1801, type: !674)
!2900 = !DILocation(line: 1801, column: 14, scope: !2883)
!2901 = !DILocalVariable(name: "val", scope: !2883, file: !3, line: 1802, type: !859)
!2902 = !DILocation(line: 1802, column: 12, scope: !2883)
!2903 = !DILocation(line: 1802, column: 18, scope: !2883)
!2904 = !DILocation(line: 1804, column: 26, scope: !2905)
!2905 = distinct !DILexicalBlock(scope: !2883, file: !3, line: 1804, column: 11)
!2906 = !DILocation(line: 1804, column: 11, scope: !2905)
!2907 = !DILocation(line: 1804, column: 11, scope: !2883)
!2908 = !DILocation(line: 1806, column: 8, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2910, file: !3, line: 1806, column: 8)
!2910 = distinct !DILexicalBlock(scope: !2905, file: !3, line: 1805, column: 2)
!2911 = !DILocation(line: 1806, column: 18, scope: !2909)
!2912 = !DILocation(line: 1806, column: 22, scope: !2909)
!2913 = !DILocation(line: 1806, column: 33, scope: !2909)
!2914 = !DILocation(line: 1806, column: 8, scope: !2910)
!2915 = !DILocation(line: 1808, column: 17, scope: !2916)
!2916 = distinct !DILexicalBlock(scope: !2909, file: !3, line: 1807, column: 6)
!2917 = !DILocation(line: 1808, column: 8, scope: !2916)
!2918 = !DILocation(line: 1809, column: 27, scope: !2916)
!2919 = !DILocation(line: 1809, column: 38, scope: !2916)
!2920 = !DILocation(line: 1809, column: 8, scope: !2916)
!2921 = !DILocation(line: 1810, column: 17, scope: !2916)
!2922 = !DILocation(line: 1810, column: 8, scope: !2916)
!2923 = !DILocation(line: 1811, column: 28, scope: !2916)
!2924 = !DILocation(line: 1811, column: 39, scope: !2916)
!2925 = !DILocation(line: 1811, column: 8, scope: !2916)
!2926 = !DILocation(line: 1812, column: 17, scope: !2916)
!2927 = !DILocation(line: 1812, column: 8, scope: !2916)
!2928 = !DILocation(line: 1813, column: 17, scope: !2916)
!2929 = !DILocation(line: 1813, column: 8, scope: !2916)
!2930 = !DILocation(line: 1815, column: 6, scope: !2916)
!2931 = !DILocation(line: 1816, column: 23, scope: !2932)
!2932 = distinct !DILexicalBlock(scope: !2910, file: !3, line: 1816, column: 8)
!2933 = !DILocation(line: 1816, column: 8, scope: !2932)
!2934 = !DILocation(line: 1816, column: 39, scope: !2932)
!2935 = !DILocation(line: 1816, column: 8, scope: !2910)
!2936 = !DILocation(line: 1818, column: 12, scope: !2937)
!2937 = distinct !DILexicalBlock(scope: !2938, file: !3, line: 1818, column: 12)
!2938 = distinct !DILexicalBlock(scope: !2932, file: !3, line: 1817, column: 6)
!2939 = !DILocation(line: 1818, column: 22, scope: !2937)
!2940 = !DILocation(line: 1818, column: 26, scope: !2937)
!2941 = !DILocation(line: 1818, column: 37, scope: !2937)
!2942 = !DILocation(line: 1818, column: 12, scope: !2938)
!2943 = !DILocation(line: 1819, column: 12, scope: !2937)
!2944 = !DILocation(line: 1819, column: 3, scope: !2937)
!2945 = !DILocation(line: 1821, column: 8, scope: !2938)
!2946 = !DILocation(line: 1823, column: 14, scope: !2910)
!2947 = !DILocation(line: 1824, column: 4, scope: !2948)
!2948 = distinct !DILexicalBlock(scope: !2910, file: !3, line: 1824, column: 4)
!2949 = !DILocation(line: 1824, column: 4, scope: !2950)
!2950 = distinct !DILexicalBlock(scope: !2948, file: !3, line: 1824, column: 4)
!2951 = !DILocation(line: 1826, column: 35, scope: !2952)
!2952 = distinct !DILexicalBlock(scope: !2953, file: !3, line: 1826, column: 12)
!2953 = distinct !DILexicalBlock(scope: !2950, file: !3, line: 1825, column: 6)
!2954 = !DILocation(line: 1826, column: 52, scope: !2952)
!2955 = !DILocation(line: 1826, column: 41, scope: !2952)
!2956 = !DILocation(line: 1826, column: 12, scope: !2952)
!2957 = !DILocation(line: 1826, column: 12, scope: !2953)
!2958 = !DILocation(line: 1828, column: 17, scope: !2959)
!2959 = distinct !DILexicalBlock(scope: !2952, file: !3, line: 1827, column: 3)
!2960 = !DILocation(line: 1828, column: 15, scope: !2959)
!2961 = !DILocation(line: 1829, column: 5, scope: !2959)
!2962 = !DILocation(line: 1831, column: 6, scope: !2953)
!2963 = distinct !{!2963, !2947, !2964}
!2964 = !DILocation(line: 1831, column: 6, scope: !2948)
!2965 = !DILocation(line: 1832, column: 25, scope: !2910)
!2966 = !DILocation(line: 1832, column: 41, scope: !2910)
!2967 = !DILocation(line: 1832, column: 10, scope: !2910)
!2968 = !DILocation(line: 1832, column: 8, scope: !2910)
!2969 = !DILocation(line: 1833, column: 8, scope: !2970)
!2970 = distinct !DILexicalBlock(scope: !2910, file: !3, line: 1833, column: 8)
!2971 = !DILocation(line: 1833, column: 12, scope: !2970)
!2972 = !DILocation(line: 1833, column: 8, scope: !2910)
!2973 = !DILocation(line: 1835, column: 12, scope: !2974)
!2974 = distinct !DILexicalBlock(scope: !2975, file: !3, line: 1835, column: 12)
!2975 = distinct !DILexicalBlock(scope: !2970, file: !3, line: 1834, column: 6)
!2976 = !DILocation(line: 1835, column: 22, scope: !2974)
!2977 = !DILocation(line: 1835, column: 26, scope: !2974)
!2978 = !DILocation(line: 1835, column: 37, scope: !2974)
!2979 = !DILocation(line: 1835, column: 12, scope: !2975)
!2980 = !DILocation(line: 1836, column: 12, scope: !2974)
!2981 = !DILocation(line: 1836, column: 3, scope: !2974)
!2982 = !DILocation(line: 1838, column: 8, scope: !2975)
!2983 = !DILocation(line: 1840, column: 8, scope: !2984)
!2984 = distinct !DILexicalBlock(scope: !2910, file: !3, line: 1840, column: 8)
!2985 = !DILocation(line: 1840, column: 18, scope: !2984)
!2986 = !DILocation(line: 1840, column: 22, scope: !2984)
!2987 = !DILocation(line: 1840, column: 33, scope: !2984)
!2988 = !DILocation(line: 1840, column: 8, scope: !2910)
!2989 = !DILocation(line: 1842, column: 17, scope: !2990)
!2990 = distinct !DILexicalBlock(scope: !2984, file: !3, line: 1841, column: 6)
!2991 = !DILocation(line: 1842, column: 8, scope: !2990)
!2992 = !DILocation(line: 1843, column: 27, scope: !2990)
!2993 = !DILocation(line: 1843, column: 38, scope: !2990)
!2994 = !DILocation(line: 1843, column: 43, scope: !2990)
!2995 = !DILocation(line: 1843, column: 8, scope: !2990)
!2996 = !DILocation(line: 1844, column: 17, scope: !2990)
!2997 = !DILocation(line: 1844, column: 8, scope: !2990)
!2998 = !DILocation(line: 1845, column: 27, scope: !2990)
!2999 = !DILocation(line: 1845, column: 38, scope: !2990)
!3000 = !DILocation(line: 1845, column: 43, scope: !2990)
!3001 = !DILocation(line: 1845, column: 8, scope: !2990)
!3002 = !DILocation(line: 1846, column: 6, scope: !2990)
!3003 = !DILocation(line: 1847, column: 2, scope: !2910)
!3004 = !DILocation(line: 1848, column: 5, scope: !2883)
!3005 = !DILocation(line: 1795, column: 61, scope: !2879)
!3006 = !DILocation(line: 1795, column: 3, scope: !2879)
!3007 = distinct !{!3007, !2881, !3008}
!3008 = !DILocation(line: 1848, column: 5, scope: !2874)
!3009 = !DILocation(line: 1852, column: 30, scope: !3010)
!3010 = distinct !DILexicalBlock(scope: !2856, file: !3, line: 1852, column: 3)
!3011 = !DILocation(line: 1852, column: 36, scope: !3010)
!3012 = !DILocation(line: 1852, column: 14, scope: !3010)
!3013 = !DILocation(line: 1852, column: 8, scope: !3010)
!3014 = !DILocation(line: 1852, column: 46, scope: !3015)
!3015 = distinct !DILexicalBlock(scope: !3010, file: !3, line: 1852, column: 3)
!3016 = !DILocation(line: 1852, column: 45, scope: !3015)
!3017 = !DILocation(line: 1852, column: 3, scope: !3010)
!3018 = !DILocalVariable(name: "phi", scope: !3019, file: !3, line: 1854, type: !674)
!3019 = distinct !DILexicalBlock(scope: !3015, file: !3, line: 1853, column: 5)
!3020 = !DILocation(line: 1854, column: 14, scope: !3019)
!3021 = !DILocation(line: 1854, column: 20, scope: !3019)
!3022 = !DILocalVariable(name: "def", scope: !3019, file: !3, line: 1855, type: !859)
!3023 = !DILocation(line: 1855, column: 12, scope: !3019)
!3024 = !DILocation(line: 1855, column: 18, scope: !3019)
!3025 = !DILocalVariable(name: "iv", scope: !3019, file: !3, line: 1856, type: !2284)
!3026 = !DILocation(line: 1856, column: 17, scope: !3019)
!3027 = !DILocation(line: 1858, column: 26, scope: !3028)
!3028 = distinct !DILexicalBlock(scope: !3019, file: !3, line: 1858, column: 11)
!3029 = !DILocation(line: 1858, column: 11, scope: !3028)
!3030 = !DILocation(line: 1858, column: 31, scope: !3028)
!3031 = !DILocation(line: 1858, column: 46, scope: !3028)
!3032 = !DILocation(line: 1858, column: 52, scope: !3028)
!3033 = !DILocation(line: 1858, column: 58, scope: !3028)
!3034 = !DILocation(line: 1858, column: 35, scope: !3028)
!3035 = !DILocation(line: 1858, column: 11, scope: !3019)
!3036 = !DILocalVariable(name: "red", scope: !3037, file: !3, line: 1860, type: !2049)
!3037 = distinct !DILexicalBlock(scope: !3028, file: !3, line: 1859, column: 2)
!3038 = !DILocation(line: 1860, column: 27, scope: !3037)
!3039 = !DILocation(line: 1862, column: 25, scope: !3037)
!3040 = !DILocation(line: 1862, column: 41, scope: !3037)
!3041 = !DILocation(line: 1862, column: 10, scope: !3037)
!3042 = !DILocation(line: 1862, column: 8, scope: !3037)
!3043 = !DILocation(line: 1863, column: 8, scope: !3044)
!3044 = distinct !DILexicalBlock(scope: !3037, file: !3, line: 1863, column: 8)
!3045 = !DILocation(line: 1863, column: 12, scope: !3044)
!3046 = !DILocation(line: 1863, column: 8, scope: !3037)
!3047 = !DILocation(line: 1865, column: 12, scope: !3048)
!3048 = distinct !DILexicalBlock(scope: !3049, file: !3, line: 1865, column: 12)
!3049 = distinct !DILexicalBlock(scope: !3044, file: !3, line: 1864, column: 6)
!3050 = !DILocation(line: 1865, column: 22, scope: !3048)
!3051 = !DILocation(line: 1865, column: 26, scope: !3048)
!3052 = !DILocation(line: 1865, column: 37, scope: !3048)
!3053 = !DILocation(line: 1865, column: 12, scope: !3049)
!3054 = !DILocation(line: 1866, column: 12, scope: !3048)
!3055 = !DILocation(line: 1866, column: 3, scope: !3048)
!3056 = !DILocation(line: 1868, column: 8, scope: !3049)
!3057 = !DILocation(line: 1870, column: 2, scope: !3037)
!3058 = !DILocation(line: 1871, column: 5, scope: !3019)
!3059 = !DILocation(line: 1852, column: 63, scope: !3015)
!3060 = !DILocation(line: 1852, column: 3, scope: !3015)
!3061 = distinct !{!3061, !3017, !3062}
!3062 = !DILocation(line: 1871, column: 5, scope: !3010)
!3063 = !DILocation(line: 1874, column: 3, scope: !2856)
!3064 = !DILocation(line: 1875, column: 1, scope: !2856)
!3065 = distinct !DISubprogram(name: "loop_parallel_p", scope: !3, file: !3, line: 251, type: !2731, scopeLine: 252, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3066 = !DILocalVariable(name: "loop", arg: 1, scope: !3065, file: !3, line: 251, type: !1307)
!3067 = !DILocation(line: 251, column: 31, scope: !3065)
!3068 = !DILocalVariable(name: "dependence_relations", scope: !3065, file: !3, line: 253, type: !2127)
!3069 = !DILocation(line: 253, column: 23, scope: !3065)
!3070 = !DILocalVariable(name: "datarefs", scope: !3065, file: !3, line: 254, type: !2055)
!3071 = !DILocation(line: 254, column: 33, scope: !3065)
!3072 = !DILocalVariable(name: "trans", scope: !3065, file: !3, line: 255, type: !3073)
!3073 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_trans_matrix", file: !2114, line: 56, baseType: !3074)
!3074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3075, size: 64)
!3075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lambda_trans_matrix_s", file: !2114, line: 50, size: 192, elements: !3076)
!3076 = !{!3077, !3080, !3081, !3082}
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "matrix", scope: !3075, file: !2114, line: 52, baseType: !3078, size: 64)
!3078 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_matrix", file: !2114, line: 42, baseType: !3079)
!3079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2125, size: 64)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "rowsize", scope: !3075, file: !2114, line: 53, baseType: !762, size: 32, offset: 64)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "colsize", scope: !3075, file: !2114, line: 54, baseType: !762, size: 32, offset: 96)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "denominator", scope: !3075, file: !2114, line: 55, baseType: !762, size: 32, offset: 128)
!3083 = !DILocation(line: 255, column: 23, scope: !3065)
!3084 = !DILocalVariable(name: "ret", scope: !3065, file: !3, line: 256, type: !972)
!3085 = !DILocation(line: 256, column: 8, scope: !3065)
!3086 = !DILocation(line: 258, column: 7, scope: !3087)
!3087 = distinct !DILexicalBlock(scope: !3065, file: !3, line: 258, column: 7)
!3088 = !DILocation(line: 258, column: 17, scope: !3087)
!3089 = !DILocation(line: 258, column: 21, scope: !3087)
!3090 = !DILocation(line: 258, column: 32, scope: !3087)
!3091 = !DILocation(line: 258, column: 7, scope: !3065)
!3092 = !DILocation(line: 260, column: 14, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3087, file: !3, line: 259, column: 3)
!3094 = !DILocation(line: 260, column: 50, scope: !3093)
!3095 = !DILocation(line: 260, column: 56, scope: !3093)
!3096 = !DILocation(line: 260, column: 5, scope: !3093)
!3097 = !DILocation(line: 261, column: 10, scope: !3098)
!3098 = distinct !DILexicalBlock(scope: !3093, file: !3, line: 261, column: 9)
!3099 = !DILocation(line: 261, column: 16, scope: !3098)
!3100 = !DILocation(line: 261, column: 9, scope: !3093)
!3101 = !DILocation(line: 262, column: 16, scope: !3098)
!3102 = !DILocation(line: 262, column: 7, scope: !3098)
!3103 = !DILocation(line: 264, column: 16, scope: !3098)
!3104 = !DILocation(line: 264, column: 7, scope: !3098)
!3105 = !DILocation(line: 265, column: 4, scope: !3093)
!3106 = !DILocation(line: 269, column: 14, scope: !3065)
!3107 = !DILocation(line: 269, column: 12, scope: !3065)
!3108 = !DILocation(line: 270, column: 26, scope: !3065)
!3109 = !DILocation(line: 270, column: 24, scope: !3065)
!3110 = !DILocation(line: 271, column: 38, scope: !3065)
!3111 = !DILocation(line: 271, column: 3, scope: !3065)
!3112 = !DILocation(line: 273, column: 7, scope: !3113)
!3113 = distinct !DILexicalBlock(scope: !3065, file: !3, line: 273, column: 7)
!3114 = !DILocation(line: 273, column: 17, scope: !3113)
!3115 = !DILocation(line: 273, column: 21, scope: !3113)
!3116 = !DILocation(line: 273, column: 32, scope: !3113)
!3117 = !DILocation(line: 273, column: 7, scope: !3065)
!3118 = !DILocation(line: 274, column: 37, scope: !3113)
!3119 = !DILocation(line: 274, column: 48, scope: !3113)
!3120 = !DILocation(line: 274, column: 5, scope: !3113)
!3121 = !DILocation(line: 276, column: 11, scope: !3065)
!3122 = !DILocation(line: 276, column: 9, scope: !3065)
!3123 = !DILocation(line: 277, column: 3, scope: !3065)
!3124 = !DILocation(line: 277, column: 28, scope: !3065)
!3125 = !DILocation(line: 279, column: 33, scope: !3126)
!3126 = distinct !DILexicalBlock(scope: !3065, file: !3, line: 279, column: 7)
!3127 = !DILocation(line: 279, column: 43, scope: !3126)
!3128 = !DILocation(line: 279, column: 7, scope: !3126)
!3129 = !DILocation(line: 279, column: 7, scope: !3065)
!3130 = !DILocation(line: 281, column: 11, scope: !3131)
!3131 = distinct !DILexicalBlock(scope: !3126, file: !3, line: 280, column: 5)
!3132 = !DILocation(line: 282, column: 11, scope: !3133)
!3133 = distinct !DILexicalBlock(scope: !3131, file: !3, line: 282, column: 11)
!3134 = !DILocation(line: 282, column: 21, scope: !3133)
!3135 = !DILocation(line: 282, column: 25, scope: !3133)
!3136 = !DILocation(line: 282, column: 36, scope: !3133)
!3137 = !DILocation(line: 282, column: 11, scope: !3131)
!3138 = !DILocation(line: 283, column: 11, scope: !3133)
!3139 = !DILocation(line: 283, column: 2, scope: !3133)
!3140 = !DILocation(line: 284, column: 5, scope: !3131)
!3141 = !DILocation(line: 285, column: 12, scope: !3142)
!3142 = distinct !DILexicalBlock(scope: !3126, file: !3, line: 285, column: 12)
!3143 = !DILocation(line: 285, column: 22, scope: !3142)
!3144 = !DILocation(line: 285, column: 26, scope: !3142)
!3145 = !DILocation(line: 285, column: 37, scope: !3142)
!3146 = !DILocation(line: 285, column: 12, scope: !3126)
!3147 = !DILocation(line: 286, column: 14, scope: !3142)
!3148 = !DILocation(line: 286, column: 5, scope: !3142)
!3149 = !DILocation(line: 289, column: 30, scope: !3065)
!3150 = !DILocation(line: 289, column: 3, scope: !3065)
!3151 = !DILocation(line: 290, column: 19, scope: !3065)
!3152 = !DILocation(line: 290, column: 3, scope: !3065)
!3153 = !DILocation(line: 292, column: 10, scope: !3065)
!3154 = !DILocation(line: 292, column: 3, scope: !3065)
!3155 = distinct !DISubprogram(name: "gen_parallel_loop", scope: !3, file: !3, line: 1532, type: !3156, scopeLine: 1534, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3156 = !DISubroutineType(types: !3157)
!3157 = !{null, !1307, !1154, !7, !2828}
!3158 = !DILocalVariable(name: "loop", arg: 1, scope: !3155, file: !3, line: 1532, type: !1307)
!3159 = !DILocation(line: 1532, column: 33, scope: !3155)
!3160 = !DILocalVariable(name: "reduction_list", arg: 2, scope: !3155, file: !3, line: 1532, type: !1154)
!3161 = !DILocation(line: 1532, column: 46, scope: !3155)
!3162 = !DILocalVariable(name: "n_threads", arg: 3, scope: !3155, file: !3, line: 1533, type: !7)
!3163 = !DILocation(line: 1533, column: 15, scope: !3155)
!3164 = !DILocalVariable(name: "niter", arg: 4, scope: !3155, file: !3, line: 1533, type: !2828)
!3165 = !DILocation(line: 1533, column: 50, scope: !3155)
!3166 = !DILocalVariable(name: "li", scope: !3155, file: !3, line: 1535, type: !2294)
!3167 = !DILocation(line: 1535, column: 17, scope: !3155)
!3168 = !DILocalVariable(name: "many_iterations_cond", scope: !3155, file: !3, line: 1536, type: !859)
!3169 = !DILocation(line: 1536, column: 8, scope: !3155)
!3170 = !DILocalVariable(name: "type", scope: !3155, file: !3, line: 1536, type: !859)
!3171 = !DILocation(line: 1536, column: 30, scope: !3155)
!3172 = !DILocalVariable(name: "nit", scope: !3155, file: !3, line: 1536, type: !859)
!3173 = !DILocation(line: 1536, column: 36, scope: !3155)
!3174 = !DILocalVariable(name: "arg_struct", scope: !3155, file: !3, line: 1537, type: !859)
!3175 = !DILocation(line: 1537, column: 8, scope: !3155)
!3176 = !DILocalVariable(name: "new_arg_struct", scope: !3155, file: !3, line: 1537, type: !859)
!3177 = !DILocation(line: 1537, column: 20, scope: !3155)
!3178 = !DILocalVariable(name: "stmts", scope: !3155, file: !3, line: 1538, type: !723)
!3179 = !DILocation(line: 1538, column: 14, scope: !3155)
!3180 = !DILocalVariable(name: "parallel_head", scope: !3155, file: !3, line: 1539, type: !1122)
!3181 = !DILocation(line: 1539, column: 15, scope: !3155)
!3182 = !DILocalVariable(name: "entry", scope: !3155, file: !3, line: 1540, type: !713)
!3183 = !DILocation(line: 1540, column: 8, scope: !3155)
!3184 = !DILocalVariable(name: "exit", scope: !3155, file: !3, line: 1540, type: !713)
!3185 = !DILocation(line: 1540, column: 15, scope: !3155)
!3186 = !DILocalVariable(name: "clsn_data", scope: !3155, file: !3, line: 1541, type: !2233)
!3187 = !DILocation(line: 1541, column: 20, scope: !3155)
!3188 = !DILocalVariable(name: "prob", scope: !3155, file: !3, line: 1542, type: !7)
!3189 = !DILocation(line: 1542, column: 12, scope: !3155)
!3190 = !DILocation(line: 1597, column: 10, scope: !3155)
!3191 = !DILocation(line: 1597, column: 8, scope: !3155)
!3192 = !DILocation(line: 1598, column: 45, scope: !3155)
!3193 = !DILocation(line: 1598, column: 52, scope: !3155)
!3194 = !DILocation(line: 1598, column: 31, scope: !3155)
!3195 = !DILocation(line: 1598, column: 9, scope: !3155)
!3196 = !DILocation(line: 1598, column: 7, scope: !3155)
!3197 = !DILocation(line: 1600, column: 7, scope: !3198)
!3198 = distinct !DILexicalBlock(scope: !3155, file: !3, line: 1600, column: 7)
!3199 = !DILocation(line: 1600, column: 7, scope: !3155)
!3200 = !DILocation(line: 1601, column: 60, scope: !3198)
!3201 = !DILocation(line: 1601, column: 39, scope: !3198)
!3202 = !DILocation(line: 1601, column: 67, scope: !3198)
!3203 = !DILocation(line: 1601, column: 5, scope: !3198)
!3204 = !DILocation(line: 1604, column: 5, scope: !3155)
!3205 = !DILocation(line: 1603, column: 24, scope: !3155)
!3206 = !DILocation(line: 1607, column: 7, scope: !3155)
!3207 = !DILocation(line: 1607, column: 5, scope: !3155)
!3208 = !DILocation(line: 1611, column: 29, scope: !3155)
!3209 = !DILocation(line: 1611, column: 7, scope: !3155)
!3210 = !DILocation(line: 1611, column: 5, scope: !3155)
!3211 = !DILocation(line: 1612, column: 7, scope: !3212)
!3212 = distinct !DILexicalBlock(scope: !3155, file: !3, line: 1612, column: 7)
!3213 = !DILocation(line: 1612, column: 7, scope: !3155)
!3214 = !DILocation(line: 1613, column: 60, scope: !3212)
!3215 = !DILocation(line: 1613, column: 39, scope: !3212)
!3216 = !DILocation(line: 1613, column: 67, scope: !3212)
!3217 = !DILocation(line: 1613, column: 5, scope: !3212)
!3218 = !DILocation(line: 1614, column: 28, scope: !3219)
!3219 = distinct !DILexicalBlock(scope: !3155, file: !3, line: 1614, column: 7)
!3220 = !DILocation(line: 1614, column: 8, scope: !3219)
!3221 = !DILocation(line: 1614, column: 7, scope: !3155)
!3222 = !DILocation(line: 1617, column: 26, scope: !3223)
!3223 = distinct !DILexicalBlock(scope: !3219, file: !3, line: 1615, column: 5)
!3224 = !DILocation(line: 1617, column: 4, scope: !3223)
!3225 = !DILocation(line: 1617, column: 2, scope: !3223)
!3226 = !DILocation(line: 1619, column: 11, scope: !3227)
!3227 = distinct !DILexicalBlock(scope: !3223, file: !3, line: 1619, column: 11)
!3228 = !DILocation(line: 1619, column: 11, scope: !3223)
!3229 = !DILocation(line: 1620, column: 57, scope: !3227)
!3230 = !DILocation(line: 1620, column: 36, scope: !3227)
!3231 = !DILocation(line: 1620, column: 64, scope: !3227)
!3232 = !DILocation(line: 1620, column: 2, scope: !3227)
!3233 = !DILocation(line: 1621, column: 5, scope: !3223)
!3234 = !DILocation(line: 1623, column: 3, scope: !3155)
!3235 = !DILocation(line: 1626, column: 8, scope: !3155)
!3236 = !DILocation(line: 1627, column: 17, scope: !3155)
!3237 = !DILocation(line: 1627, column: 23, scope: !3155)
!3238 = !DILocation(line: 1628, column: 3, scope: !3155)
!3239 = !DILocation(line: 1628, column: 9, scope: !3155)
!3240 = !DILocation(line: 1628, column: 34, scope: !3155)
!3241 = !DILocation(line: 1628, column: 32, scope: !3155)
!3242 = !DILocation(line: 1627, column: 3, scope: !3155)
!3243 = !DILocation(line: 1629, column: 3, scope: !3155)
!3244 = !DILocation(line: 1630, column: 3, scope: !3155)
!3245 = !DILocation(line: 1633, column: 26, scope: !3155)
!3246 = !DILocation(line: 1633, column: 3, scope: !3155)
!3247 = !DILocation(line: 1636, column: 33, scope: !3155)
!3248 = !DILocation(line: 1636, column: 39, scope: !3155)
!3249 = !DILocation(line: 1636, column: 55, scope: !3155)
!3250 = !DILocation(line: 1636, column: 3, scope: !3155)
!3251 = !DILocation(line: 1639, column: 22, scope: !3252)
!3252 = distinct !DILexicalBlock(scope: !3155, file: !3, line: 1639, column: 7)
!3253 = !DILocation(line: 1639, column: 7, scope: !3252)
!3254 = !DILocation(line: 1639, column: 38, scope: !3252)
!3255 = !DILocation(line: 1639, column: 7, scope: !3155)
!3256 = !DILocation(line: 1640, column: 20, scope: !3252)
!3257 = !DILocation(line: 1640, column: 59, scope: !3252)
!3258 = !DILocation(line: 1640, column: 5, scope: !3252)
!3259 = !DILocation(line: 1643, column: 3, scope: !3155)
!3260 = !DILocation(line: 1644, column: 32, scope: !3155)
!3261 = !DILocation(line: 1644, column: 11, scope: !3155)
!3262 = !DILocation(line: 1644, column: 9, scope: !3155)
!3263 = !DILocation(line: 1645, column: 27, scope: !3155)
!3264 = !DILocation(line: 1645, column: 10, scope: !3155)
!3265 = !DILocation(line: 1645, column: 8, scope: !3155)
!3266 = !DILocation(line: 1647, column: 30, scope: !3155)
!3267 = !DILocation(line: 1647, column: 37, scope: !3155)
!3268 = !DILocation(line: 1647, column: 3, scope: !3155)
!3269 = !DILocation(line: 1650, column: 29, scope: !3155)
!3270 = !DILocation(line: 1650, column: 36, scope: !3155)
!3271 = !DILocation(line: 1650, column: 42, scope: !3155)
!3272 = !DILocation(line: 1650, column: 3, scope: !3155)
!3273 = !DILocation(line: 1654, column: 41, scope: !3155)
!3274 = !DILocation(line: 1654, column: 47, scope: !3155)
!3275 = !DILocation(line: 1654, column: 66, scope: !3155)
!3276 = !DILocation(line: 1655, column: 6, scope: !3155)
!3277 = !DILocation(line: 1655, column: 22, scope: !3155)
!3278 = !DILocation(line: 1654, column: 19, scope: !3155)
!3279 = !DILocation(line: 1654, column: 17, scope: !3155)
!3280 = !DILocation(line: 1656, column: 22, scope: !3281)
!3281 = distinct !DILexicalBlock(scope: !3155, file: !3, line: 1656, column: 7)
!3282 = !DILocation(line: 1656, column: 7, scope: !3281)
!3283 = !DILocation(line: 1656, column: 38, scope: !3281)
!3284 = !DILocation(line: 1656, column: 7, scope: !3155)
!3285 = !DILocation(line: 1657, column: 32, scope: !3281)
!3286 = !DILocation(line: 1657, column: 38, scope: !3281)
!3287 = !DILocation(line: 1657, column: 5, scope: !3281)
!3288 = !DILocation(line: 1659, column: 3, scope: !3155)
!3289 = !DILocation(line: 1663, column: 21, scope: !3155)
!3290 = !DILocation(line: 1663, column: 3, scope: !3155)
!3291 = !DILocation(line: 1667, column: 3, scope: !3292)
!3292 = distinct !DILexicalBlock(scope: !3155, file: !3, line: 1667, column: 3)
!3293 = !DILocation(line: 1667, column: 3, scope: !3294)
!3294 = distinct !DILexicalBlock(scope: !3292, file: !3, line: 1667, column: 3)
!3295 = !DILocation(line: 1668, column: 48, scope: !3294)
!3296 = !DILocation(line: 1668, column: 5, scope: !3294)
!3297 = distinct !{!3297, !3291, !3298}
!3298 = !DILocation(line: 1668, column: 52, scope: !3292)
!3299 = !DILocation(line: 1675, column: 21, scope: !3155)
!3300 = !DILocation(line: 1675, column: 3, scope: !3155)
!3301 = !DILocation(line: 1676, column: 1, scope: !3155)
!3302 = distinct !DISubprogram(name: "fel_next", scope: !378, file: !378, line: 518, type: !3303, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3303 = !DISubroutineType(types: !3304)
!3304 = !{null, !2550, !2551}
!3305 = !DILocalVariable(name: "li", arg: 1, scope: !3302, file: !378, line: 518, type: !2550)
!3306 = !DILocation(line: 518, column: 26, scope: !3302)
!3307 = !DILocalVariable(name: "loop", arg: 2, scope: !3302, file: !378, line: 518, type: !2551)
!3308 = !DILocation(line: 518, column: 38, scope: !3302)
!3309 = !DILocalVariable(name: "anum", scope: !3302, file: !378, line: 520, type: !762)
!3310 = !DILocation(line: 520, column: 7, scope: !3302)
!3311 = !DILocation(line: 522, column: 3, scope: !3302)
!3312 = !DILocation(line: 522, column: 10, scope: !3302)
!3313 = !DILocation(line: 524, column: 7, scope: !3314)
!3314 = distinct !DILexicalBlock(scope: !3302, file: !378, line: 523, column: 5)
!3315 = !DILocation(line: 524, column: 11, scope: !3314)
!3316 = !DILocation(line: 524, column: 14, scope: !3314)
!3317 = !DILocation(line: 525, column: 25, scope: !3314)
!3318 = !DILocation(line: 525, column: 15, scope: !3314)
!3319 = !DILocation(line: 525, column: 8, scope: !3314)
!3320 = !DILocation(line: 525, column: 13, scope: !3314)
!3321 = !DILocation(line: 526, column: 12, scope: !3322)
!3322 = distinct !DILexicalBlock(scope: !3314, file: !378, line: 526, column: 11)
!3323 = !DILocation(line: 526, column: 11, scope: !3322)
!3324 = !DILocation(line: 526, column: 11, scope: !3314)
!3325 = !DILocation(line: 527, column: 2, scope: !3322)
!3326 = distinct !{!3326, !3311, !3327}
!3327 = !DILocation(line: 528, column: 5, scope: !3302)
!3328 = !DILocation(line: 530, column: 3, scope: !3302)
!3329 = !DILocation(line: 531, column: 4, scope: !3302)
!3330 = !DILocation(line: 531, column: 9, scope: !3302)
!3331 = !DILocation(line: 532, column: 1, scope: !3302)
!3332 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !2038, file: !2038, line: 32, type: !3333, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3333 = !DISubroutineType(types: !3334)
!3334 = !{!2036, !762}
!3335 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3332, file: !2038, line: 32, type: !762)
!3336 = !DILocation(line: 32, column: 1, scope: !3332)
!3337 = distinct !DISubprogram(name: "number_of_loops", scope: !378, file: !378, line: 459, type: !3338, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3338 = !DISubroutineType(types: !3339)
!3339 = !{!7}
!3340 = !DILocation(line: 461, column: 8, scope: !3341)
!3341 = distinct !DILexicalBlock(scope: !3337, file: !378, line: 461, column: 7)
!3342 = !DILocation(line: 461, column: 7, scope: !3337)
!3343 = !DILocation(line: 462, column: 5, scope: !3341)
!3344 = !DILocation(line: 464, column: 10, scope: !3337)
!3345 = !DILocation(line: 464, column: 3, scope: !3337)
!3346 = !DILocation(line: 465, column: 1, scope: !3337)
!3347 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !378, file: !378, line: 85, type: !3348, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3348 = !DISubroutineType(types: !3349)
!3349 = !{!762, !3350, !7, !2551}
!3350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3351, size: 64)
!3351 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1299)
!3352 = !DILocalVariable(name: "vec_", arg: 1, scope: !3347, file: !378, line: 85, type: !3350)
!3353 = !DILocation(line: 85, column: 1, scope: !3347)
!3354 = !DILocalVariable(name: "ix_", arg: 2, scope: !3347, file: !378, line: 85, type: !7)
!3355 = !DILocalVariable(name: "ptr", arg: 3, scope: !3347, file: !378, line: 85, type: !2551)
!3356 = !DILocation(line: 85, column: 1, scope: !3357)
!3357 = distinct !DILexicalBlock(scope: !3347, file: !378, line: 85, column: 1)
!3358 = !DILocation(line: 85, column: 1, scope: !3359)
!3359 = distinct !DILexicalBlock(scope: !3357, file: !378, line: 85, column: 1)
!3360 = !DILocation(line: 85, column: 1, scope: !3361)
!3361 = distinct !DILexicalBlock(scope: !3357, file: !378, line: 85, column: 1)
!3362 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2038, file: !2038, line: 31, type: !3363, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3363 = !DISubroutineType(types: !3364)
!3364 = !{!2126, !3365, !762}
!3365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2042, size: 64)
!3366 = !DILocalVariable(name: "vec_", arg: 1, scope: !3362, file: !2038, line: 31, type: !3365)
!3367 = !DILocation(line: 31, column: 1, scope: !3362)
!3368 = !DILocalVariable(name: "obj_", arg: 2, scope: !3362, file: !2038, line: 31, type: !762)
!3369 = !DILocalVariable(name: "slot_", scope: !3362, file: !2038, line: 31, type: !2126)
!3370 = distinct !DISubprogram(name: "loop_outer", scope: !378, file: !378, line: 434, type: !3371, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3371 = !DISubroutineType(types: !3372)
!3372 = !{!1307, !2239}
!3373 = !DILocalVariable(name: "loop", arg: 1, scope: !3370, file: !378, line: 434, type: !2239)
!3374 = !DILocation(line: 434, column: 32, scope: !3370)
!3375 = !DILocalVariable(name: "n", scope: !3370, file: !378, line: 436, type: !7)
!3376 = !DILocation(line: 436, column: 12, scope: !3370)
!3377 = !DILocation(line: 436, column: 16, scope: !3370)
!3378 = !DILocation(line: 438, column: 7, scope: !3379)
!3379 = distinct !DILexicalBlock(scope: !3370, file: !378, line: 438, column: 7)
!3380 = !DILocation(line: 438, column: 9, scope: !3379)
!3381 = !DILocation(line: 438, column: 7, scope: !3370)
!3382 = !DILocation(line: 439, column: 5, scope: !3379)
!3383 = !DILocation(line: 441, column: 10, scope: !3370)
!3384 = !DILocation(line: 441, column: 3, scope: !3370)
!3385 = !DILocation(line: 442, column: 1, scope: !3370)
!3386 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !378, file: !378, line: 85, type: !3387, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3387 = !DISubroutineType(types: !3388)
!3388 = !{!7, !3350}
!3389 = !DILocalVariable(name: "vec_", arg: 1, scope: !3386, file: !378, line: 85, type: !3350)
!3390 = !DILocation(line: 85, column: 1, scope: !3386)
!3391 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !378, file: !378, line: 85, type: !3392, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3392 = !DISubroutineType(types: !3393)
!3393 = !{!1306, !3350, !7}
!3394 = !DILocalVariable(name: "vec_", arg: 1, scope: !3391, file: !378, line: 85, type: !3350)
!3395 = !DILocation(line: 85, column: 1, scope: !3391)
!3396 = !DILocalVariable(name: "ix_", arg: 2, scope: !3391, file: !378, line: 85, type: !7)
!3397 = !DILocation(line: 0, scope: !3391)
!3398 = distinct !DISubprogram(name: "gsi_end_p", scope: !419, file: !419, line: 4467, type: !3399, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3399 = !DISubroutineType(types: !3400)
!3400 = !{!972, !2200}
!3401 = !DILocalVariable(name: "i", arg: 1, scope: !3398, file: !419, line: 4467, type: !2200)
!3402 = !DILocation(line: 4467, column: 33, scope: !3398)
!3403 = !DILocation(line: 4469, column: 12, scope: !3398)
!3404 = !DILocation(line: 4469, column: 16, scope: !3398)
!3405 = !DILocation(line: 4469, column: 10, scope: !3398)
!3406 = !DILocation(line: 4469, column: 3, scope: !3398)
!3407 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !3408, file: !3408, line: 434, type: !3409, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3408 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3409 = !DISubroutineType(types: !3410)
!3410 = !{!859, !2230}
!3411 = !DILocalVariable(name: "def", arg: 1, scope: !3407, file: !3408, line: 434, type: !2230)
!3412 = !DILocation(line: 434, column: 33, scope: !3407)
!3413 = !DILocation(line: 436, column: 11, scope: !3407)
!3414 = !DILocation(line: 436, column: 10, scope: !3407)
!3415 = !DILocation(line: 436, column: 3, scope: !3407)
!3416 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !419, file: !419, line: 3080, type: !3417, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3417 = !DISubroutineType(types: !3418)
!3418 = !{!1270, !674}
!3419 = !DILocalVariable(name: "gs", arg: 1, scope: !3416, file: !419, line: 3080, type: !674)
!3420 = !DILocation(line: 3080, column: 31, scope: !3416)
!3421 = !DILocation(line: 3083, column: 11, scope: !3416)
!3422 = !DILocation(line: 3083, column: 15, scope: !3416)
!3423 = !DILocation(line: 3083, column: 26, scope: !3416)
!3424 = !DILocation(line: 3083, column: 3, scope: !3416)
!3425 = distinct !DISubprogram(name: "gsi_stmt", scope: !419, file: !419, line: 4501, type: !3426, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3426 = !DISubroutineType(types: !3427)
!3427 = !{!674, !2200}
!3428 = !DILocalVariable(name: "i", arg: 1, scope: !3425, file: !419, line: 4501, type: !2200)
!3429 = !DILocation(line: 4501, column: 32, scope: !3425)
!3430 = !DILocation(line: 4503, column: 12, scope: !3425)
!3431 = !DILocation(line: 4503, column: 17, scope: !3425)
!3432 = !DILocation(line: 4503, column: 3, scope: !3425)
!3433 = distinct !DISubprogram(name: "gsi_next", scope: !419, file: !419, line: 4485, type: !3434, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3434 = !DISubroutineType(types: !3435)
!3435 = !{null, !3436}
!3436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2200, size: 64)
!3437 = !DILocalVariable(name: "i", arg: 1, scope: !3433, file: !419, line: 4485, type: !3436)
!3438 = !DILocation(line: 4485, column: 33, scope: !3433)
!3439 = !DILocation(line: 4487, column: 12, scope: !3433)
!3440 = !DILocation(line: 4487, column: 15, scope: !3433)
!3441 = !DILocation(line: 4487, column: 20, scope: !3433)
!3442 = !DILocation(line: 4487, column: 3, scope: !3433)
!3443 = !DILocation(line: 4487, column: 6, scope: !3433)
!3444 = !DILocation(line: 4487, column: 10, scope: !3433)
!3445 = !DILocation(line: 4488, column: 1, scope: !3433)
!3446 = distinct !DISubprogram(name: "gather_scalar_reductions", scope: !3, file: !3, line: 1730, type: !3447, scopeLine: 1731, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3447 = !DISubroutineType(types: !3448)
!3448 = !{null, !1306, !1154}
!3449 = !DILocalVariable(name: "loop", arg: 1, scope: !3446, file: !3, line: 1730, type: !1306)
!3450 = !DILocation(line: 1730, column: 34, scope: !3446)
!3451 = !DILocalVariable(name: "reduction_list", arg: 2, scope: !3446, file: !3, line: 1730, type: !1154)
!3452 = !DILocation(line: 1730, column: 47, scope: !3446)
!3453 = !DILocalVariable(name: "gsi", scope: !3446, file: !3, line: 1732, type: !2200)
!3454 = !DILocation(line: 1732, column: 24, scope: !3446)
!3455 = !DILocalVariable(name: "simple_loop_info", scope: !3446, file: !3, line: 1733, type: !3456)
!3456 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_vec_info", file: !2306, line: 245, baseType: !3457)
!3457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3458, size: 64)
!3458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_loop_vec_info", file: !2306, line: 176, size: 1024, elements: !3459)
!3459 = !{!3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467, !3468, !3469, !3470, !3471, !3472, !3473, !3479, !3480, !3481, !3535}
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "loop", scope: !3458, file: !2306, line: 179, baseType: !1307, size: 64)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "bbs", scope: !3458, file: !2306, line: 182, baseType: !2187, size: 64, offset: 64)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "num_iters", scope: !3458, file: !2306, line: 185, baseType: !859, size: 64, offset: 128)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "num_iters_unchanged", scope: !3458, file: !2306, line: 186, baseType: !859, size: 64, offset: 192)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "min_profitable_iters", scope: !3458, file: !2306, line: 193, baseType: !762, size: 32, offset: 256)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "vectorizable", scope: !3458, file: !2306, line: 196, baseType: !972, size: 8, offset: 288)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "vectorization_factor", scope: !3458, file: !2306, line: 199, baseType: !762, size: 32, offset: 320)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "unaligned_dr", scope: !3458, file: !2306, line: 202, baseType: !2069, size: 64, offset: 384)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "peeling_for_alignment", scope: !3458, file: !2306, line: 212, baseType: !762, size: 32, offset: 448)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_mask", scope: !3458, file: !2306, line: 215, baseType: !762, size: 32, offset: 480)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "datarefs", scope: !3458, file: !2306, line: 218, baseType: !2055, size: 64, offset: 512)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "ddrs", scope: !3458, file: !2306, line: 221, baseType: !2127, size: 64, offset: 576)
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "may_alias_ddrs", scope: !3458, file: !2306, line: 225, baseType: !2127, size: 64, offset: 640)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "may_misalign_stmts", scope: !3458, file: !2306, line: 229, baseType: !3474, size: 64, offset: 704)
!3474 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3475, size: 64)
!3475 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !419, line: 34, baseType: !3476)
!3476 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !419, line: 34, size: 128, elements: !3477)
!3477 = !{!3478}
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3476, file: !419, line: 34, baseType: !1210, size: 128)
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "loop_line_number", scope: !3458, file: !2306, line: 232, baseType: !2305, size: 32, offset: 768)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "strided_stores", scope: !3458, file: !2306, line: 236, baseType: !3474, size: 64, offset: 832)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "slp_instances", scope: !3458, file: !2306, line: 240, baseType: !3482, size: 64, offset: 896)
!3482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3483, size: 64)
!3483 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_instance_heap", file: !2306, line: 153, baseType: !3484)
!3484 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_instance_heap", file: !2306, line: 153, size: 128, elements: !3485)
!3485 = !{!3486}
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3484, file: !2306, line: 153, baseType: !3487, size: 128)
!3487 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_instance_base", file: !2306, line: 152, baseType: !3488)
!3488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_instance_base", file: !2306, line: 152, size: 128, elements: !3489)
!3489 = !{!3490, !3491, !3492}
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3488, file: !2306, line: 152, baseType: !7, size: 32)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3488, file: !2306, line: 152, baseType: !7, size: 32, offset: 32)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3488, file: !2306, line: 152, baseType: !3493, size: 64, offset: 64)
!3493 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3494, size: 64, elements: !777)
!3494 = !DIDerivedType(tag: DW_TAG_typedef, name: "slp_instance", file: !2306, line: 150, baseType: !3495)
!3495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3496, size: 64)
!3496 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_slp_instance", file: !2306, line: 123, size: 384, elements: !3497)
!3497 = !{!3498, !3513, !3514, !3515, !3520, !3521, !3534}
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !3496, file: !2306, line: 125, baseType: !3499, size: 64)
!3499 = !DIDerivedType(tag: DW_TAG_typedef, name: "slp_tree", file: !2306, line: 116, baseType: !3500)
!3500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3501, size: 64)
!3501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_slp_tree", file: !2306, line: 95, size: 384, elements: !3502)
!3502 = !{!3503, !3504, !3505, !3506, !3507, !3508}
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !3501, file: !2306, line: 99, baseType: !3500, size: 64)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !3501, file: !2306, line: 100, baseType: !3500, size: 64, offset: 64)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "stmts", scope: !3501, file: !2306, line: 102, baseType: !3474, size: 64, offset: 128)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "vec_stmts", scope: !3501, file: !2306, line: 104, baseType: !3474, size: 64, offset: 192)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "vec_stmts_size", scope: !3501, file: !2306, line: 109, baseType: !7, size: 32, offset: 256)
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !3501, file: !2306, line: 115, baseType: !3509, size: 64, offset: 288)
!3509 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3501, file: !2306, line: 111, size: 64, elements: !3510)
!3510 = !{!3511, !3512}
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "outside_of_loop", scope: !3509, file: !2306, line: 113, baseType: !762, size: 32)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "inside_of_loop", scope: !3509, file: !2306, line: 114, baseType: !762, size: 32, offset: 32)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "group_size", scope: !3496, file: !2306, line: 128, baseType: !7, size: 32, offset: 64)
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "unrolling_factor", scope: !3496, file: !2306, line: 131, baseType: !7, size: 32, offset: 96)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !3496, file: !2306, line: 138, baseType: !3516, size: 64, offset: 128)
!3516 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3496, file: !2306, line: 134, size: 64, elements: !3517)
!3517 = !{!3518, !3519}
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "outside_of_loop", scope: !3516, file: !2306, line: 136, baseType: !762, size: 32)
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "inside_of_loop", scope: !3516, file: !2306, line: 137, baseType: !762, size: 32, offset: 32)
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "load_permutation", scope: !3496, file: !2306, line: 142, baseType: !2036, size: 64, offset: 192)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "loads", scope: !3496, file: !2306, line: 145, baseType: !3522, size: 64, offset: 256)
!3522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3523, size: 64)
!3523 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_tree_heap", file: !2306, line: 119, baseType: !3524)
!3524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_tree_heap", file: !2306, line: 119, size: 128, elements: !3525)
!3525 = !{!3526}
!3526 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3524, file: !2306, line: 119, baseType: !3527, size: 128)
!3527 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_tree_base", file: !2306, line: 118, baseType: !3528)
!3528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_tree_base", file: !2306, line: 118, size: 128, elements: !3529)
!3529 = !{!3530, !3531, !3532}
!3530 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3528, file: !2306, line: 118, baseType: !7, size: 32)
!3531 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3528, file: !2306, line: 118, baseType: !7, size: 32, offset: 32)
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3528, file: !2306, line: 118, baseType: !3533, size: 64, offset: 64)
!3533 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3499, size: 64, elements: !777)
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "first_load", scope: !3496, file: !2306, line: 149, baseType: !674, size: 64, offset: 320)
!3535 = !DIDerivedType(tag: DW_TAG_member, name: "slp_unrolling_factor", scope: !3458, file: !2306, line: 244, baseType: !7, size: 32, offset: 960)
!3536 = !DILocation(line: 1733, column: 17, scope: !3446)
!3537 = !DILocation(line: 1735, column: 13, scope: !3446)
!3538 = !DILocation(line: 1736, column: 46, scope: !3446)
!3539 = !DILocation(line: 1736, column: 22, scope: !3446)
!3540 = !DILocation(line: 1736, column: 20, scope: !3446)
!3541 = !DILocation(line: 1738, column: 30, scope: !3542)
!3542 = distinct !DILexicalBlock(scope: !3446, file: !3, line: 1738, column: 3)
!3543 = !DILocation(line: 1738, column: 36, scope: !3542)
!3544 = !DILocation(line: 1738, column: 14, scope: !3542)
!3545 = !DILocation(line: 1738, column: 8, scope: !3542)
!3546 = !DILocation(line: 1738, column: 46, scope: !3547)
!3547 = distinct !DILexicalBlock(scope: !3542, file: !3, line: 1738, column: 3)
!3548 = !DILocation(line: 1738, column: 45, scope: !3547)
!3549 = !DILocation(line: 1738, column: 3, scope: !3542)
!3550 = !DILocalVariable(name: "phi", scope: !3551, file: !3, line: 1740, type: !674)
!3551 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 1739, column: 5)
!3552 = !DILocation(line: 1740, column: 14, scope: !3551)
!3553 = !DILocation(line: 1740, column: 20, scope: !3551)
!3554 = !DILocalVariable(name: "iv", scope: !3551, file: !3, line: 1741, type: !2284)
!3555 = !DILocation(line: 1741, column: 17, scope: !3551)
!3556 = !DILocalVariable(name: "res", scope: !3551, file: !3, line: 1742, type: !859)
!3557 = !DILocation(line: 1742, column: 12, scope: !3551)
!3558 = !DILocation(line: 1742, column: 18, scope: !3551)
!3559 = !DILocalVariable(name: "double_reduc", scope: !3551, file: !3, line: 1743, type: !972)
!3560 = !DILocation(line: 1743, column: 12, scope: !3551)
!3561 = !DILocation(line: 1745, column: 27, scope: !3562)
!3562 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 1745, column: 11)
!3563 = !DILocation(line: 1745, column: 12, scope: !3562)
!3564 = !DILocation(line: 1745, column: 11, scope: !3551)
!3565 = !DILocation(line: 1746, column: 2, scope: !3562)
!3566 = !DILocation(line: 1748, column: 23, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 1748, column: 11)
!3568 = !DILocation(line: 1748, column: 29, scope: !3567)
!3569 = !DILocation(line: 1748, column: 35, scope: !3567)
!3570 = !DILocation(line: 1748, column: 12, scope: !3567)
!3571 = !DILocation(line: 1749, column: 2, scope: !3567)
!3572 = !DILocation(line: 1749, column: 5, scope: !3567)
!3573 = !DILocation(line: 1748, column: 11, scope: !3551)
!3574 = !DILocalVariable(name: "reduc_stmt", scope: !3575, file: !3, line: 1751, type: !674)
!3575 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 1750, column: 2)
!3576 = !DILocation(line: 1751, column: 19, scope: !3575)
!3577 = !DILocation(line: 1751, column: 58, scope: !3575)
!3578 = !DILocation(line: 1751, column: 76, scope: !3575)
!3579 = !DILocation(line: 1751, column: 32, scope: !3575)
!3580 = !DILocation(line: 1752, column: 9, scope: !3581)
!3581 = distinct !DILexicalBlock(scope: !3575, file: !3, line: 1752, column: 9)
!3582 = !DILocation(line: 1752, column: 20, scope: !3581)
!3583 = !DILocation(line: 1752, column: 24, scope: !3581)
!3584 = !DILocation(line: 1752, column: 9, scope: !3575)
!3585 = !DILocation(line: 1753, column: 36, scope: !3581)
!3586 = !DILocation(line: 1753, column: 52, scope: !3581)
!3587 = !DILocation(line: 1753, column: 64, scope: !3581)
!3588 = !DILocation(line: 1753, column: 15, scope: !3581)
!3589 = !DILocation(line: 1754, column: 9, scope: !3575)
!3590 = !DILocation(line: 1755, column: 5, scope: !3551)
!3591 = !DILocation(line: 1738, column: 63, scope: !3547)
!3592 = !DILocation(line: 1738, column: 3, scope: !3547)
!3593 = distinct !{!3593, !3549, !3594}
!3594 = !DILocation(line: 1755, column: 5, scope: !3542)
!3595 = !DILocation(line: 1756, column: 28, scope: !3446)
!3596 = !DILocation(line: 1756, column: 5, scope: !3446)
!3597 = !DILocation(line: 1757, column: 1, scope: !3446)
!3598 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !3408, file: !3408, line: 427, type: !3599, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3599 = !DISubroutineType(types: !3600)
!3600 = !{!859, !2052}
!3601 = !DILocalVariable(name: "use", arg: 1, scope: !3598, file: !3408, line: 427, type: !2052)
!3602 = !DILocation(line: 427, column: 33, scope: !3598)
!3603 = !DILocation(line: 429, column: 12, scope: !3598)
!3604 = !DILocation(line: 429, column: 17, scope: !3598)
!3605 = !DILocation(line: 429, column: 10, scope: !3598)
!3606 = !DILocation(line: 429, column: 3, scope: !3598)
!3607 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !3408, file: !3408, line: 442, type: !3608, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3608 = !DISubroutineType(types: !3609)
!3609 = !{!2052, !674, !762}
!3610 = !DILocalVariable(name: "gs", arg: 1, scope: !3607, file: !3408, line: 442, type: !674)
!3611 = !DILocation(line: 442, column: 36, scope: !3607)
!3612 = !DILocalVariable(name: "i", arg: 2, scope: !3607, file: !3408, line: 442, type: !762)
!3613 = !DILocation(line: 442, column: 44, scope: !3607)
!3614 = !DILocation(line: 444, column: 27, scope: !3607)
!3615 = !DILocation(line: 444, column: 31, scope: !3607)
!3616 = !DILocation(line: 444, column: 11, scope: !3607)
!3617 = !DILocation(line: 444, column: 35, scope: !3607)
!3618 = !DILocation(line: 444, column: 3, scope: !3607)
!3619 = distinct !DISubprogram(name: "first_readonly_imm_use", scope: !3408, file: !3408, line: 292, type: !3620, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3620 = !DISubroutineType(types: !3621)
!3621 = !{!2052, !3622, !859}
!3622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2889, size: 64)
!3623 = !DILocalVariable(name: "imm", arg: 1, scope: !3619, file: !3408, line: 292, type: !3622)
!3624 = !DILocation(line: 292, column: 43, scope: !3619)
!3625 = !DILocalVariable(name: "var", arg: 2, scope: !3619, file: !3408, line: 292, type: !859)
!3626 = !DILocation(line: 292, column: 53, scope: !3619)
!3627 = !DILocation(line: 294, column: 18, scope: !3619)
!3628 = !DILocation(line: 294, column: 3, scope: !3619)
!3629 = !DILocation(line: 294, column: 8, scope: !3619)
!3630 = !DILocation(line: 294, column: 14, scope: !3619)
!3631 = !DILocation(line: 295, column: 18, scope: !3619)
!3632 = !DILocation(line: 295, column: 23, scope: !3619)
!3633 = !DILocation(line: 295, column: 30, scope: !3619)
!3634 = !DILocation(line: 295, column: 3, scope: !3619)
!3635 = !DILocation(line: 295, column: 8, scope: !3619)
!3636 = !DILocation(line: 295, column: 16, scope: !3619)
!3637 = !DILocation(line: 299, column: 31, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3619, file: !3408, line: 299, column: 7)
!3639 = !DILocation(line: 299, column: 7, scope: !3638)
!3640 = !DILocation(line: 299, column: 7, scope: !3619)
!3641 = !DILocation(line: 300, column: 5, scope: !3638)
!3642 = !DILocation(line: 301, column: 10, scope: !3619)
!3643 = !DILocation(line: 301, column: 15, scope: !3619)
!3644 = !DILocation(line: 301, column: 3, scope: !3619)
!3645 = !DILocation(line: 302, column: 1, scope: !3619)
!3646 = distinct !DISubprogram(name: "end_readonly_imm_use_p", scope: !3408, file: !3408, line: 285, type: !3647, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3647 = !DISubroutineType(types: !3648)
!3648 = !{!972, !3649}
!3649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3650, size: 64)
!3650 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2889)
!3651 = !DILocalVariable(name: "imm", arg: 1, scope: !3646, file: !3408, line: 285, type: !3649)
!3652 = !DILocation(line: 285, column: 49, scope: !3646)
!3653 = !DILocation(line: 287, column: 11, scope: !3646)
!3654 = !DILocation(line: 287, column: 16, scope: !3646)
!3655 = !DILocation(line: 287, column: 27, scope: !3646)
!3656 = !DILocation(line: 287, column: 32, scope: !3646)
!3657 = !DILocation(line: 287, column: 24, scope: !3646)
!3658 = !DILocation(line: 287, column: 10, scope: !3646)
!3659 = !DILocation(line: 287, column: 3, scope: !3646)
!3660 = distinct !DISubprogram(name: "gimple_bb", scope: !419, file: !419, line: 1112, type: !3661, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3661 = !DISubroutineType(types: !3662)
!3662 = !{!697, !3663}
!3663 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !675, line: 60, baseType: !2050)
!3664 = !DILocalVariable(name: "g", arg: 1, scope: !3660, file: !419, line: 1112, type: !3663)
!3665 = !DILocation(line: 1112, column: 25, scope: !3660)
!3666 = !DILocation(line: 1114, column: 10, scope: !3660)
!3667 = !DILocation(line: 1114, column: 13, scope: !3660)
!3668 = !DILocation(line: 1114, column: 20, scope: !3660)
!3669 = !DILocation(line: 1114, column: 3, scope: !3660)
!3670 = distinct !DISubprogram(name: "next_readonly_imm_use", scope: !3408, file: !3408, line: 306, type: !3671, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3671 = !DISubroutineType(types: !3672)
!3672 = !{!2052, !3622}
!3673 = !DILocalVariable(name: "imm", arg: 1, scope: !3670, file: !3408, line: 306, type: !3622)
!3674 = !DILocation(line: 306, column: 42, scope: !3670)
!3675 = !DILocalVariable(name: "old", scope: !3670, file: !3408, line: 308, type: !2052)
!3676 = !DILocation(line: 308, column: 17, scope: !3670)
!3677 = !DILocation(line: 308, column: 23, scope: !3670)
!3678 = !DILocation(line: 308, column: 28, scope: !3670)
!3679 = !DILocation(line: 319, column: 18, scope: !3670)
!3680 = !DILocation(line: 319, column: 23, scope: !3670)
!3681 = !DILocation(line: 319, column: 3, scope: !3670)
!3682 = !DILocation(line: 319, column: 8, scope: !3670)
!3683 = !DILocation(line: 319, column: 16, scope: !3670)
!3684 = !DILocation(line: 320, column: 31, scope: !3685)
!3685 = distinct !DILexicalBlock(scope: !3670, file: !3408, line: 320, column: 7)
!3686 = !DILocation(line: 320, column: 7, scope: !3685)
!3687 = !DILocation(line: 320, column: 7, scope: !3670)
!3688 = !DILocation(line: 321, column: 5, scope: !3685)
!3689 = !DILocation(line: 322, column: 10, scope: !3670)
!3690 = !DILocation(line: 322, column: 15, scope: !3670)
!3691 = !DILocation(line: 322, column: 3, scope: !3670)
!3692 = !DILocation(line: 323, column: 1, scope: !3670)
!3693 = distinct !DISubprogram(name: "reduction_phi", scope: !3, file: !3, line: 203, type: !3694, scopeLine: 204, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3694 = !DISubroutineType(types: !3695)
!3695 = !{!2049, !1154, !674}
!3696 = !DILocalVariable(name: "reduction_list", arg: 1, scope: !3693, file: !3, line: 203, type: !1154)
!3697 = !DILocation(line: 203, column: 23, scope: !3693)
!3698 = !DILocalVariable(name: "phi", arg: 2, scope: !3693, file: !3, line: 203, type: !674)
!3699 = !DILocation(line: 203, column: 46, scope: !3693)
!3700 = !DILocalVariable(name: "tmpred", scope: !3693, file: !3, line: 205, type: !671)
!3701 = !DILocation(line: 205, column: 25, scope: !3693)
!3702 = !DILocalVariable(name: "red", scope: !3693, file: !3, line: 205, type: !2049)
!3703 = !DILocation(line: 205, column: 34, scope: !3693)
!3704 = !DILocation(line: 207, column: 22, scope: !3705)
!3705 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 207, column: 7)
!3706 = !DILocation(line: 207, column: 7, scope: !3705)
!3707 = !DILocation(line: 207, column: 38, scope: !3705)
!3708 = !DILocation(line: 207, column: 7, scope: !3693)
!3709 = !DILocation(line: 208, column: 5, scope: !3705)
!3710 = !DILocation(line: 210, column: 22, scope: !3693)
!3711 = !DILocation(line: 210, column: 10, scope: !3693)
!3712 = !DILocation(line: 210, column: 20, scope: !3693)
!3713 = !DILocation(line: 211, column: 46, scope: !3693)
!3714 = !DILocation(line: 211, column: 62, scope: !3693)
!3715 = !DILocation(line: 211, column: 35, scope: !3693)
!3716 = !DILocation(line: 211, column: 9, scope: !3693)
!3717 = !DILocation(line: 211, column: 7, scope: !3693)
!3718 = !DILocation(line: 213, column: 10, scope: !3693)
!3719 = !DILocation(line: 213, column: 3, scope: !3693)
!3720 = !DILocation(line: 214, column: 1, scope: !3693)
!3721 = distinct !DISubprogram(name: "build_new_reduction", scope: !3, file: !3, line: 1703, type: !3722, scopeLine: 1704, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3722 = !DISubroutineType(types: !3723)
!3723 = !{null, !1154, !674, !674}
!3724 = !DILocalVariable(name: "reduction_list", arg: 1, scope: !3721, file: !3, line: 1703, type: !1154)
!3725 = !DILocation(line: 1703, column: 29, scope: !3721)
!3726 = !DILocalVariable(name: "reduc_stmt", arg: 2, scope: !3721, file: !3, line: 1703, type: !674)
!3727 = !DILocation(line: 1703, column: 52, scope: !3721)
!3728 = !DILocalVariable(name: "phi", arg: 3, scope: !3721, file: !3, line: 1703, type: !674)
!3729 = !DILocation(line: 1703, column: 71, scope: !3721)
!3730 = !DILocalVariable(name: "slot", scope: !3721, file: !3, line: 1705, type: !1177)
!3731 = !DILocation(line: 1705, column: 8, scope: !3721)
!3732 = !DILocalVariable(name: "new_reduction", scope: !3721, file: !3, line: 1706, type: !2049)
!3733 = !DILocation(line: 1706, column: 26, scope: !3721)
!3734 = !DILocation(line: 1708, column: 3, scope: !3721)
!3735 = !DILocation(line: 1710, column: 7, scope: !3736)
!3736 = distinct !DILexicalBlock(scope: !3721, file: !3, line: 1710, column: 7)
!3737 = !DILocation(line: 1710, column: 17, scope: !3736)
!3738 = !DILocation(line: 1710, column: 21, scope: !3736)
!3739 = !DILocation(line: 1710, column: 32, scope: !3736)
!3740 = !DILocation(line: 1710, column: 7, scope: !3721)
!3741 = !DILocation(line: 1712, column: 16, scope: !3742)
!3742 = distinct !DILexicalBlock(scope: !3736, file: !3, line: 1711, column: 5)
!3743 = !DILocation(line: 1712, column: 7, scope: !3742)
!3744 = !DILocation(line: 1714, column: 26, scope: !3742)
!3745 = !DILocation(line: 1714, column: 37, scope: !3742)
!3746 = !DILocation(line: 1714, column: 7, scope: !3742)
!3747 = !DILocation(line: 1715, column: 16, scope: !3742)
!3748 = !DILocation(line: 1715, column: 7, scope: !3742)
!3749 = !DILocation(line: 1716, column: 5, scope: !3742)
!3750 = !DILocation(line: 1718, column: 19, scope: !3721)
!3751 = !DILocation(line: 1718, column: 17, scope: !3721)
!3752 = !DILocation(line: 1720, column: 31, scope: !3721)
!3753 = !DILocation(line: 1720, column: 3, scope: !3721)
!3754 = !DILocation(line: 1720, column: 18, scope: !3721)
!3755 = !DILocation(line: 1720, column: 29, scope: !3721)
!3756 = !DILocation(line: 1721, column: 30, scope: !3721)
!3757 = !DILocation(line: 1721, column: 3, scope: !3721)
!3758 = !DILocation(line: 1721, column: 18, scope: !3721)
!3759 = !DILocation(line: 1721, column: 28, scope: !3721)
!3760 = !DILocation(line: 1722, column: 59, scope: !3721)
!3761 = !DILocation(line: 1722, column: 35, scope: !3721)
!3762 = !DILocation(line: 1722, column: 3, scope: !3721)
!3763 = !DILocation(line: 1722, column: 18, scope: !3721)
!3764 = !DILocation(line: 1722, column: 33, scope: !3721)
!3765 = !DILocation(line: 1723, column: 26, scope: !3721)
!3766 = !DILocation(line: 1723, column: 42, scope: !3721)
!3767 = !DILocation(line: 1723, column: 10, scope: !3721)
!3768 = !DILocation(line: 1723, column: 8, scope: !3721)
!3769 = !DILocation(line: 1724, column: 11, scope: !3721)
!3770 = !DILocation(line: 1724, column: 4, scope: !3721)
!3771 = !DILocation(line: 1724, column: 9, scope: !3721)
!3772 = !DILocation(line: 1725, column: 1, scope: !3721)
!3773 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !419, file: !419, line: 1815, type: !3774, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3774 = !DISubroutineType(types: !3775)
!3775 = !{!183, !3663}
!3776 = !DILocalVariable(name: "gs", arg: 1, scope: !3773, file: !419, line: 1815, type: !3663)
!3777 = !DILocation(line: 1815, column: 38, scope: !3773)
!3778 = !DILocalVariable(name: "code", scope: !3773, file: !419, line: 1817, type: !183)
!3779 = !DILocation(line: 1817, column: 18, scope: !3773)
!3780 = !DILocation(line: 1820, column: 28, scope: !3773)
!3781 = !DILocation(line: 1820, column: 10, scope: !3773)
!3782 = !DILocation(line: 1820, column: 8, scope: !3773)
!3783 = !DILocation(line: 1821, column: 29, scope: !3784)
!3784 = distinct !DILexicalBlock(scope: !3773, file: !419, line: 1821, column: 7)
!3785 = !DILocation(line: 1821, column: 7, scope: !3784)
!3786 = !DILocation(line: 1821, column: 35, scope: !3784)
!3787 = !DILocation(line: 1821, column: 7, scope: !3773)
!3788 = !DILocation(line: 1822, column: 12, scope: !3784)
!3789 = !DILocation(line: 1822, column: 10, scope: !3784)
!3790 = !DILocation(line: 1822, column: 5, scope: !3784)
!3791 = !DILocation(line: 1824, column: 10, scope: !3773)
!3792 = !DILocation(line: 1824, column: 3, scope: !3773)
!3793 = distinct !DISubprogram(name: "gimple_expr_code", scope: !419, file: !419, line: 1438, type: !3774, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3794 = !DILocalVariable(name: "stmt", arg: 1, scope: !3793, file: !419, line: 1438, type: !3663)
!3795 = !DILocation(line: 1438, column: 32, scope: !3793)
!3796 = !DILocalVariable(name: "code", scope: !3793, file: !419, line: 1440, type: !425)
!3797 = !DILocation(line: 1440, column: 20, scope: !3793)
!3798 = !DILocation(line: 1440, column: 40, scope: !3793)
!3799 = !DILocation(line: 1440, column: 27, scope: !3793)
!3800 = !DILocation(line: 1441, column: 7, scope: !3801)
!3801 = distinct !DILexicalBlock(scope: !3793, file: !419, line: 1441, column: 7)
!3802 = !DILocation(line: 1441, column: 12, scope: !3801)
!3803 = !DILocation(line: 1441, column: 29, scope: !3801)
!3804 = !DILocation(line: 1441, column: 32, scope: !3801)
!3805 = !DILocation(line: 1441, column: 37, scope: !3801)
!3806 = !DILocation(line: 1441, column: 7, scope: !3793)
!3807 = !DILocation(line: 1442, column: 29, scope: !3801)
!3808 = !DILocation(line: 1442, column: 35, scope: !3801)
!3809 = !DILocation(line: 1442, column: 42, scope: !3801)
!3810 = !DILocation(line: 1442, column: 5, scope: !3801)
!3811 = !DILocation(line: 1443, column: 12, scope: !3812)
!3812 = distinct !DILexicalBlock(scope: !3801, file: !419, line: 1443, column: 12)
!3813 = !DILocation(line: 1443, column: 17, scope: !3812)
!3814 = !DILocation(line: 1443, column: 12, scope: !3801)
!3815 = !DILocation(line: 1444, column: 5, scope: !3812)
!3816 = !DILocation(line: 1446, column: 5, scope: !3812)
!3817 = !DILocation(line: 1448, column: 5, scope: !3793)
!3818 = !DILocation(line: 1450, column: 1, scope: !3793)
!3819 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !419, file: !419, line: 1686, type: !3820, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3820 = !DISubroutineType(types: !3821)
!3821 = !{!418, !183}
!3822 = !DILocalVariable(name: "code", arg: 1, scope: !3819, file: !419, line: 1686, type: !183)
!3823 = !DILocation(line: 1686, column: 38, scope: !3819)
!3824 = !DILocation(line: 1688, column: 63, scope: !3819)
!3825 = !DILocation(line: 1688, column: 34, scope: !3819)
!3826 = !DILocation(line: 1688, column: 10, scope: !3819)
!3827 = !DILocation(line: 1688, column: 3, scope: !3819)
!3828 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !419, file: !419, line: 1727, type: !3829, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3829 = !DISubroutineType(types: !3830)
!3830 = !{!859, !3663}
!3831 = !DILocalVariable(name: "gs", arg: 1, scope: !3828, file: !419, line: 1727, type: !3663)
!3832 = !DILocation(line: 1727, column: 34, scope: !3828)
!3833 = !DILocation(line: 1730, column: 21, scope: !3828)
!3834 = !DILocation(line: 1730, column: 10, scope: !3828)
!3835 = !DILocation(line: 1730, column: 3, scope: !3828)
!3836 = distinct !DISubprogram(name: "gimple_code", scope: !419, file: !419, line: 1052, type: !3837, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3837 = !DISubroutineType(types: !3838)
!3838 = !{!425, !3663}
!3839 = !DILocalVariable(name: "g", arg: 1, scope: !3836, file: !419, line: 1052, type: !3663)
!3840 = !DILocation(line: 1052, column: 27, scope: !3836)
!3841 = !DILocation(line: 1054, column: 10, scope: !3836)
!3842 = !DILocation(line: 1054, column: 13, scope: !3836)
!3843 = !DILocation(line: 1054, column: 20, scope: !3836)
!3844 = !DILocation(line: 1054, column: 3, scope: !3836)
!3845 = distinct !DISubprogram(name: "gimple_op", scope: !419, file: !419, line: 1631, type: !3846, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3846 = !DISubroutineType(types: !3847)
!3847 = !{!859, !3663, !7}
!3848 = !DILocalVariable(name: "gs", arg: 1, scope: !3845, file: !419, line: 1631, type: !3663)
!3849 = !DILocation(line: 1631, column: 25, scope: !3845)
!3850 = !DILocalVariable(name: "i", arg: 2, scope: !3845, file: !419, line: 1631, type: !7)
!3851 = !DILocation(line: 1631, column: 38, scope: !3845)
!3852 = !DILocation(line: 1633, column: 23, scope: !3853)
!3853 = distinct !DILexicalBlock(scope: !3845, file: !419, line: 1633, column: 7)
!3854 = !DILocation(line: 1633, column: 7, scope: !3853)
!3855 = !DILocation(line: 1633, column: 7, scope: !3845)
!3856 = !DILocation(line: 1638, column: 26, scope: !3857)
!3857 = distinct !DILexicalBlock(scope: !3853, file: !419, line: 1634, column: 5)
!3858 = !DILocation(line: 1638, column: 14, scope: !3857)
!3859 = !DILocation(line: 1638, column: 50, scope: !3857)
!3860 = !DILocation(line: 1638, column: 7, scope: !3857)
!3861 = !DILocation(line: 1641, column: 5, scope: !3853)
!3862 = !DILocation(line: 1642, column: 1, scope: !3845)
!3863 = distinct !DISubprogram(name: "gimple_has_ops", scope: !419, file: !419, line: 1274, type: !3864, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3864 = !DISubroutineType(types: !3865)
!3865 = !{!972, !3663}
!3866 = !DILocalVariable(name: "g", arg: 1, scope: !3863, file: !419, line: 1274, type: !3663)
!3867 = !DILocation(line: 1274, column: 30, scope: !3863)
!3868 = !DILocation(line: 1276, column: 23, scope: !3863)
!3869 = !DILocation(line: 1276, column: 10, scope: !3863)
!3870 = !DILocation(line: 1276, column: 26, scope: !3863)
!3871 = !DILocation(line: 1276, column: 41, scope: !3863)
!3872 = !DILocation(line: 1276, column: 57, scope: !3863)
!3873 = !DILocation(line: 1276, column: 44, scope: !3863)
!3874 = !DILocation(line: 1276, column: 60, scope: !3863)
!3875 = !DILocation(line: 0, scope: !3863)
!3876 = !DILocation(line: 1276, column: 3, scope: !3863)
!3877 = distinct !DISubprogram(name: "gimple_ops", scope: !419, file: !419, line: 1614, type: !3417, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3878 = !DILocalVariable(name: "gs", arg: 1, scope: !3877, file: !419, line: 1614, type: !674)
!3879 = !DILocation(line: 1614, column: 20, scope: !3877)
!3880 = !DILocalVariable(name: "off", scope: !3877, file: !419, line: 1616, type: !1179)
!3881 = !DILocation(line: 1616, column: 10, scope: !3877)
!3882 = !DILocation(line: 1621, column: 56, scope: !3877)
!3883 = !DILocation(line: 1621, column: 28, scope: !3877)
!3884 = !DILocation(line: 1621, column: 9, scope: !3877)
!3885 = !DILocation(line: 1621, column: 7, scope: !3877)
!3886 = !DILocation(line: 1622, column: 3, scope: !3877)
!3887 = !DILocation(line: 1624, column: 29, scope: !3877)
!3888 = !DILocation(line: 1624, column: 20, scope: !3877)
!3889 = !DILocation(line: 1624, column: 34, scope: !3877)
!3890 = !DILocation(line: 1624, column: 32, scope: !3877)
!3891 = !DILocation(line: 1624, column: 10, scope: !3877)
!3892 = !DILocation(line: 1624, column: 3, scope: !3877)
!3893 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !419, file: !419, line: 1073, type: !3894, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3894 = !DISubroutineType(types: !3895)
!3895 = !{!463, !674}
!3896 = !DILocalVariable(name: "gs", arg: 1, scope: !3893, file: !419, line: 1073, type: !674)
!3897 = !DILocation(line: 1073, column: 36, scope: !3893)
!3898 = !DILocation(line: 1075, column: 37, scope: !3893)
!3899 = !DILocation(line: 1075, column: 24, scope: !3893)
!3900 = !DILocation(line: 1075, column: 10, scope: !3893)
!3901 = !DILocation(line: 1075, column: 3, scope: !3893)
!3902 = distinct !DISubprogram(name: "gss_for_code", scope: !419, file: !419, line: 1061, type: !3903, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3903 = !DISubroutineType(types: !3904)
!3904 = !{!463, !425}
!3905 = !DILocalVariable(name: "code", arg: 1, scope: !3902, file: !419, line: 1061, type: !425)
!3906 = !DILocation(line: 1061, column: 32, scope: !3902)
!3907 = !DILocation(line: 1066, column: 24, scope: !3902)
!3908 = !DILocation(line: 1066, column: 10, scope: !3902)
!3909 = !DILocation(line: 1066, column: 3, scope: !3902)
!3910 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !419, file: !419, line: 3100, type: !3911, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3911 = !DISubroutineType(types: !3912)
!3912 = !{!3913, !674, !7}
!3913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1935, size: 64)
!3914 = !DILocalVariable(name: "gs", arg: 1, scope: !3910, file: !419, line: 3100, type: !674)
!3915 = !DILocation(line: 3100, column: 24, scope: !3910)
!3916 = !DILocalVariable(name: "index", arg: 2, scope: !3910, file: !419, line: 3100, type: !7)
!3917 = !DILocation(line: 3100, column: 37, scope: !3910)
!3918 = !DILocation(line: 3103, column: 3, scope: !3910)
!3919 = !DILocation(line: 3104, column: 12, scope: !3910)
!3920 = !DILocation(line: 3104, column: 16, scope: !3910)
!3921 = !DILocation(line: 3104, column: 27, scope: !3910)
!3922 = !DILocation(line: 3104, column: 32, scope: !3910)
!3923 = !DILocation(line: 3104, column: 3, scope: !3910)
!3924 = distinct !DISubprogram(name: "VEC_data_reference_p_heap_alloc", scope: !2057, file: !2057, line: 209, type: !3925, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3925 = !DISubroutineType(types: !3926)
!3926 = !{!2055, !762}
!3927 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3924, file: !2057, line: 209, type: !762)
!3928 = !DILocation(line: 209, column: 1, scope: !3924)
!3929 = distinct !DISubprogram(name: "VEC_ddr_p_heap_alloc", scope: !2057, file: !2057, line: 333, type: !3930, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3930 = !DISubroutineType(types: !3931)
!3931 = !{!2127, !762}
!3932 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3929, file: !2057, line: 333, type: !762)
!3933 = !DILocation(line: 333, column: 1, scope: !3929)
!3934 = distinct !DISubprogram(name: "transform_to_exit_first_loop", scope: !3, file: !3, line: 1294, type: !3935, scopeLine: 1295, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!3935 = !DISubroutineType(types: !3936)
!3936 = !{null, !1307, !1154, !859}
!3937 = !DILocalVariable(name: "loop", arg: 1, scope: !3934, file: !3, line: 1294, type: !1307)
!3938 = !DILocation(line: 1294, column: 44, scope: !3934)
!3939 = !DILocalVariable(name: "reduction_list", arg: 2, scope: !3934, file: !3, line: 1294, type: !1154)
!3940 = !DILocation(line: 1294, column: 57, scope: !3934)
!3941 = !DILocalVariable(name: "nit", arg: 3, scope: !3934, file: !3, line: 1294, type: !859)
!3942 = !DILocation(line: 1294, column: 78, scope: !3934)
!3943 = !DILocalVariable(name: "bbs", scope: !3934, file: !3, line: 1296, type: !2187)
!3944 = !DILocation(line: 1296, column: 16, scope: !3934)
!3945 = !DILocalVariable(name: "nbbs", scope: !3934, file: !3, line: 1296, type: !2187)
!3946 = !DILocation(line: 1296, column: 22, scope: !3934)
!3947 = !DILocalVariable(name: "ex_bb", scope: !3934, file: !3, line: 1296, type: !1122)
!3948 = !DILocation(line: 1296, column: 28, scope: !3934)
!3949 = !DILocalVariable(name: "orig_header", scope: !3934, file: !3, line: 1296, type: !1122)
!3950 = !DILocation(line: 1296, column: 35, scope: !3934)
!3951 = !DILocalVariable(name: "n", scope: !3934, file: !3, line: 1297, type: !7)
!3952 = !DILocation(line: 1297, column: 12, scope: !3934)
!3953 = !DILocalVariable(name: "ok", scope: !3934, file: !3, line: 1298, type: !972)
!3954 = !DILocation(line: 1298, column: 8, scope: !3934)
!3955 = !DILocalVariable(name: "exit", scope: !3934, file: !3, line: 1299, type: !713)
!3956 = !DILocation(line: 1299, column: 8, scope: !3934)
!3957 = !DILocation(line: 1299, column: 32, scope: !3934)
!3958 = !DILocation(line: 1299, column: 15, scope: !3934)
!3959 = !DILocalVariable(name: "hpred", scope: !3934, file: !3, line: 1299, type: !713)
!3960 = !DILocation(line: 1299, column: 39, scope: !3934)
!3961 = !DILocalVariable(name: "control", scope: !3934, file: !3, line: 1300, type: !859)
!3962 = !DILocation(line: 1300, column: 8, scope: !3934)
!3963 = !DILocalVariable(name: "control_name", scope: !3934, file: !3, line: 1300, type: !859)
!3964 = !DILocation(line: 1300, column: 17, scope: !3934)
!3965 = !DILocalVariable(name: "res", scope: !3934, file: !3, line: 1300, type: !859)
!3966 = !DILocation(line: 1300, column: 31, scope: !3934)
!3967 = !DILocalVariable(name: "t", scope: !3934, file: !3, line: 1300, type: !859)
!3968 = !DILocation(line: 1300, column: 36, scope: !3934)
!3969 = !DILocalVariable(name: "phi", scope: !3934, file: !3, line: 1301, type: !674)
!3970 = !DILocation(line: 1301, column: 10, scope: !3934)
!3971 = !DILocalVariable(name: "nphi", scope: !3934, file: !3, line: 1301, type: !674)
!3972 = !DILocation(line: 1301, column: 15, scope: !3934)
!3973 = !DILocalVariable(name: "cond_stmt", scope: !3934, file: !3, line: 1301, type: !674)
!3974 = !DILocation(line: 1301, column: 21, scope: !3934)
!3975 = !DILocalVariable(name: "stmt", scope: !3934, file: !3, line: 1301, type: !674)
!3976 = !DILocation(line: 1301, column: 32, scope: !3934)
!3977 = !DILocalVariable(name: "cond_nit", scope: !3934, file: !3, line: 1301, type: !674)
!3978 = !DILocation(line: 1301, column: 38, scope: !3934)
!3979 = !DILocalVariable(name: "gsi", scope: !3934, file: !3, line: 1302, type: !2200)
!3980 = !DILocation(line: 1302, column: 24, scope: !3934)
!3981 = !DILocalVariable(name: "nit_1", scope: !3934, file: !3, line: 1303, type: !859)
!3982 = !DILocation(line: 1303, column: 8, scope: !3934)
!3983 = !DILocation(line: 1305, column: 29, scope: !3934)
!3984 = !DILocation(line: 1305, column: 35, scope: !3934)
!3985 = !DILocation(line: 1305, column: 3, scope: !3934)
!3986 = !DILocation(line: 1306, column: 30, scope: !3934)
!3987 = !DILocation(line: 1306, column: 36, scope: !3934)
!3988 = !DILocation(line: 1306, column: 17, scope: !3934)
!3989 = !DILocation(line: 1306, column: 15, scope: !3934)
!3990 = !DILocation(line: 1307, column: 29, scope: !3934)
!3991 = !DILocation(line: 1307, column: 35, scope: !3934)
!3992 = !DILocation(line: 1307, column: 11, scope: !3934)
!3993 = !DILocation(line: 1307, column: 9, scope: !3934)
!3994 = !DILocation(line: 1309, column: 26, scope: !3934)
!3995 = !DILocation(line: 1309, column: 32, scope: !3934)
!3996 = !DILocation(line: 1309, column: 15, scope: !3934)
!3997 = !DILocation(line: 1309, column: 13, scope: !3934)
!3998 = !DILocation(line: 1310, column: 30, scope: !3934)
!3999 = !DILocation(line: 1310, column: 13, scope: !3934)
!4000 = !DILocation(line: 1310, column: 11, scope: !3934)
!4001 = !DILocation(line: 1311, column: 3, scope: !3934)
!4002 = !DILocation(line: 1315, column: 30, scope: !4003)
!4003 = distinct !DILexicalBlock(scope: !3934, file: !3, line: 1315, column: 3)
!4004 = !DILocation(line: 1315, column: 36, scope: !4003)
!4005 = !DILocation(line: 1315, column: 14, scope: !4003)
!4006 = !DILocation(line: 1315, column: 8, scope: !4003)
!4007 = !DILocation(line: 1315, column: 46, scope: !4008)
!4008 = distinct !DILexicalBlock(scope: !4003, file: !3, line: 1315, column: 3)
!4009 = !DILocation(line: 1315, column: 45, scope: !4008)
!4010 = !DILocation(line: 1315, column: 3, scope: !4003)
!4011 = !DILocation(line: 1317, column: 13, scope: !4012)
!4012 = distinct !DILexicalBlock(scope: !4008, file: !3, line: 1316, column: 5)
!4013 = !DILocation(line: 1317, column: 11, scope: !4012)
!4014 = !DILocation(line: 1318, column: 13, scope: !4012)
!4015 = !DILocation(line: 1318, column: 11, scope: !4012)
!4016 = !DILocation(line: 1319, column: 26, scope: !4012)
!4017 = !DILocation(line: 1319, column: 46, scope: !4012)
!4018 = !DILocation(line: 1319, column: 11, scope: !4012)
!4019 = !DILocation(line: 1319, column: 9, scope: !4012)
!4020 = !DILocation(line: 1320, column: 7, scope: !4012)
!4021 = !DILocation(line: 1321, column: 31, scope: !4012)
!4022 = !DILocation(line: 1321, column: 36, scope: !4012)
!4023 = !DILocation(line: 1321, column: 14, scope: !4012)
!4024 = !DILocation(line: 1321, column: 12, scope: !4012)
!4025 = !DILocation(line: 1322, column: 33, scope: !4012)
!4026 = !DILocation(line: 1322, column: 7, scope: !4012)
!4027 = !DILocation(line: 1322, column: 31, scope: !4012)
!4028 = !DILocation(line: 1323, column: 20, scope: !4012)
!4029 = !DILocation(line: 1323, column: 26, scope: !4012)
!4030 = !DILocation(line: 1323, column: 29, scope: !4012)
!4031 = !DILocation(line: 1323, column: 7, scope: !4012)
!4032 = !DILocation(line: 1325, column: 11, scope: !4033)
!4033 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 1325, column: 11)
!4034 = !DILocation(line: 1325, column: 18, scope: !4033)
!4035 = !DILocation(line: 1325, column: 15, scope: !4033)
!4036 = !DILocation(line: 1325, column: 11, scope: !4012)
!4037 = !DILocation(line: 1327, column: 25, scope: !4038)
!4038 = distinct !DILexicalBlock(scope: !4033, file: !3, line: 1326, column: 2)
!4039 = !DILocation(line: 1327, column: 36, scope: !4038)
!4040 = !DILocation(line: 1327, column: 4, scope: !4038)
!4041 = !DILocation(line: 1328, column: 17, scope: !4038)
!4042 = !DILocation(line: 1328, column: 4, scope: !4038)
!4043 = !DILocation(line: 1329, column: 14, scope: !4038)
!4044 = !DILocation(line: 1329, column: 12, scope: !4038)
!4045 = !DILocation(line: 1330, column: 2, scope: !4038)
!4046 = !DILocation(line: 1331, column: 5, scope: !4012)
!4047 = !DILocation(line: 1315, column: 63, scope: !4008)
!4048 = !DILocation(line: 1315, column: 3, scope: !4008)
!4049 = distinct !{!4049, !4010, !4050}
!4050 = !DILocation(line: 1331, column: 5, scope: !4003)
!4051 = !DILocation(line: 1332, column: 37, scope: !3934)
!4052 = !DILocation(line: 1332, column: 9, scope: !3934)
!4053 = !DILocation(line: 1332, column: 7, scope: !3934)
!4054 = !DILocation(line: 1334, column: 10, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !3934, file: !3, line: 1334, column: 3)
!4056 = !DILocation(line: 1334, column: 8, scope: !4055)
!4057 = !DILocation(line: 1334, column: 15, scope: !4058)
!4058 = distinct !DILexicalBlock(scope: !4055, file: !3, line: 1334, column: 3)
!4059 = !DILocation(line: 1334, column: 19, scope: !4058)
!4060 = !DILocation(line: 1334, column: 25, scope: !4058)
!4061 = !DILocation(line: 1334, column: 31, scope: !4058)
!4062 = !DILocation(line: 1334, column: 22, scope: !4058)
!4063 = !DILocation(line: 1334, column: 3, scope: !4055)
!4064 = !DILocation(line: 1335, column: 5, scope: !4058)
!4065 = !DILocation(line: 1334, column: 39, scope: !4058)
!4066 = !DILocation(line: 1334, column: 3, scope: !4058)
!4067 = distinct !{!4067, !4063, !4068}
!4068 = !DILocation(line: 1335, column: 5, scope: !4055)
!4069 = !DILocation(line: 1336, column: 10, scope: !3934)
!4070 = !DILocation(line: 1336, column: 8, scope: !3934)
!4071 = !DILocation(line: 1337, column: 54, scope: !3934)
!4072 = !DILocation(line: 1337, column: 60, scope: !3934)
!4073 = !DILocation(line: 1337, column: 36, scope: !3934)
!4074 = !DILocation(line: 1337, column: 69, scope: !3934)
!4075 = !DILocation(line: 1338, column: 8, scope: !3934)
!4076 = !DILocation(line: 1338, column: 12, scope: !3934)
!4077 = !DILocation(line: 1338, column: 17, scope: !3934)
!4078 = !DILocation(line: 1338, column: 20, scope: !3934)
!4079 = !DILocation(line: 1337, column: 8, scope: !3934)
!4080 = !DILocation(line: 1337, column: 6, scope: !3934)
!4081 = !DILocation(line: 1339, column: 3, scope: !3934)
!4082 = !DILocation(line: 1340, column: 9, scope: !3934)
!4083 = !DILocation(line: 1340, column: 3, scope: !3934)
!4084 = !DILocation(line: 1341, column: 11, scope: !3934)
!4085 = !DILocation(line: 1341, column: 9, scope: !3934)
!4086 = !DILocation(line: 1342, column: 9, scope: !3934)
!4087 = !DILocation(line: 1342, column: 3, scope: !3934)
!4088 = !DILocation(line: 1347, column: 16, scope: !3934)
!4089 = !DILocation(line: 1348, column: 30, scope: !4090)
!4090 = distinct !DILexicalBlock(scope: !3934, file: !3, line: 1348, column: 3)
!4091 = !DILocation(line: 1348, column: 14, scope: !4090)
!4092 = !DILocation(line: 1348, column: 8, scope: !4090)
!4093 = !DILocation(line: 1348, column: 39, scope: !4094)
!4094 = distinct !DILexicalBlock(scope: !4090, file: !3, line: 1348, column: 3)
!4095 = !DILocation(line: 1348, column: 38, scope: !4094)
!4096 = !DILocation(line: 1348, column: 3, scope: !4090)
!4097 = !DILocation(line: 1350, column: 13, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4094, file: !3, line: 1349, column: 5)
!4099 = !DILocation(line: 1350, column: 11, scope: !4098)
!4100 = !DILocation(line: 1351, column: 13, scope: !4098)
!4101 = !DILocation(line: 1351, column: 11, scope: !4098)
!4102 = !DILocation(line: 1352, column: 27, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !4098, file: !3, line: 1352, column: 11)
!4104 = !DILocation(line: 1352, column: 12, scope: !4103)
!4105 = !DILocation(line: 1352, column: 11, scope: !4098)
!4106 = !DILocation(line: 1354, column: 4, scope: !4107)
!4107 = distinct !DILexicalBlock(scope: !4103, file: !3, line: 1353, column: 2)
!4108 = !DILocation(line: 1355, column: 4, scope: !4107)
!4109 = distinct !{!4109, !4096, !4110}
!4110 = !DILocation(line: 1382, column: 5, scope: !4090)
!4111 = !DILocation(line: 1363, column: 31, scope: !4098)
!4112 = !DILocation(line: 1363, column: 14, scope: !4098)
!4113 = !DILocation(line: 1363, column: 12, scope: !4098)
!4114 = !DILocation(line: 1365, column: 26, scope: !4115)
!4115 = distinct !DILexicalBlock(scope: !4098, file: !3, line: 1365, column: 11)
!4116 = !DILocation(line: 1365, column: 11, scope: !4115)
!4117 = !DILocation(line: 1365, column: 42, scope: !4115)
!4118 = !DILocation(line: 1365, column: 11, scope: !4098)
!4119 = !DILocalVariable(name: "red", scope: !4120, file: !3, line: 1367, type: !2049)
!4120 = distinct !DILexicalBlock(scope: !4115, file: !3, line: 1366, column: 2)
!4121 = !DILocation(line: 1367, column: 27, scope: !4120)
!4122 = !DILocalVariable(name: "val", scope: !4120, file: !3, line: 1369, type: !859)
!4123 = !DILocation(line: 1369, column: 9, scope: !4120)
!4124 = !DILocation(line: 1369, column: 15, scope: !4120)
!4125 = !DILocation(line: 1370, column: 25, scope: !4120)
!4126 = !DILocation(line: 1370, column: 41, scope: !4120)
!4127 = !DILocation(line: 1370, column: 10, scope: !4120)
!4128 = !DILocation(line: 1370, column: 8, scope: !4120)
!4129 = !DILocation(line: 1371, column: 8, scope: !4130)
!4130 = distinct !DILexicalBlock(scope: !4120, file: !3, line: 1371, column: 8)
!4131 = !DILocation(line: 1371, column: 8, scope: !4120)
!4132 = !DILocation(line: 1373, column: 24, scope: !4133)
!4133 = distinct !DILexicalBlock(scope: !4130, file: !3, line: 1372, column: 6)
!4134 = !DILocation(line: 1373, column: 8, scope: !4133)
!4135 = !DILocation(line: 1373, column: 13, scope: !4133)
!4136 = !DILocation(line: 1373, column: 22, scope: !4133)
!4137 = !DILocation(line: 1374, column: 8, scope: !4133)
!4138 = !DILocation(line: 1375, column: 8, scope: !4133)
!4139 = !DILocation(line: 1377, column: 2, scope: !4120)
!4140 = !DILocation(line: 1378, column: 7, scope: !4098)
!4141 = !DILocation(line: 1380, column: 22, scope: !4098)
!4142 = !DILocation(line: 1380, column: 20, scope: !4098)
!4143 = !DILocation(line: 1381, column: 7, scope: !4098)
!4144 = !DILocation(line: 1348, column: 3, scope: !4094)
!4145 = !DILocation(line: 1383, column: 3, scope: !3934)
!4146 = !DILocation(line: 1387, column: 27, scope: !3934)
!4147 = !DILocation(line: 1387, column: 9, scope: !3934)
!4148 = !DILocation(line: 1388, column: 25, scope: !3934)
!4149 = !DILocation(line: 1388, column: 31, scope: !3934)
!4150 = !DILocation(line: 1388, column: 14, scope: !3934)
!4151 = !DILocation(line: 1388, column: 12, scope: !3934)
!4152 = !DILocation(line: 1389, column: 29, scope: !3934)
!4153 = !DILocation(line: 1389, column: 12, scope: !3934)
!4154 = !DILocation(line: 1389, column: 9, scope: !3934)
!4155 = !DILocation(line: 1391, column: 7, scope: !3934)
!4156 = !DILocation(line: 1390, column: 11, scope: !3934)
!4157 = !DILocation(line: 1390, column: 9, scope: !3934)
!4158 = !DILocation(line: 1393, column: 10, scope: !3934)
!4159 = !DILocation(line: 1393, column: 8, scope: !3934)
!4160 = !DILocation(line: 1394, column: 28, scope: !3934)
!4161 = !DILocation(line: 1394, column: 3, scope: !3934)
!4162 = !DILocation(line: 1395, column: 38, scope: !3934)
!4163 = !DILocation(line: 1395, column: 3, scope: !3934)
!4164 = !DILocation(line: 1395, column: 36, scope: !3934)
!4165 = !DILocation(line: 1396, column: 1, scope: !3934)
!4166 = distinct !DISubprogram(name: "initialize_reductions", scope: !3, file: !3, line: 384, type: !4167, scopeLine: 385, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!4167 = !DISubroutineType(types: !4168)
!4168 = !{!762, !1177, !849}
!4169 = !DILocalVariable(name: "slot", arg: 1, scope: !4166, file: !3, line: 384, type: !1177)
!4170 = !DILocation(line: 384, column: 31, scope: !4166)
!4171 = !DILocalVariable(name: "data", arg: 2, scope: !4166, file: !3, line: 384, type: !849)
!4172 = !DILocation(line: 384, column: 43, scope: !4166)
!4173 = !DILocalVariable(name: "init", scope: !4166, file: !3, line: 386, type: !859)
!4174 = !DILocation(line: 386, column: 8, scope: !4166)
!4175 = !DILocalVariable(name: "c", scope: !4166, file: !3, line: 386, type: !859)
!4176 = !DILocation(line: 386, column: 14, scope: !4166)
!4177 = !DILocalVariable(name: "bvar", scope: !4166, file: !3, line: 387, type: !859)
!4178 = !DILocation(line: 387, column: 8, scope: !4166)
!4179 = !DILocalVariable(name: "type", scope: !4166, file: !3, line: 387, type: !859)
!4180 = !DILocation(line: 387, column: 14, scope: !4166)
!4181 = !DILocalVariable(name: "arg", scope: !4166, file: !3, line: 387, type: !859)
!4182 = !DILocation(line: 387, column: 20, scope: !4166)
!4183 = !DILocalVariable(name: "e", scope: !4166, file: !3, line: 388, type: !713)
!4184 = !DILocation(line: 388, column: 8, scope: !4166)
!4185 = !DILocalVariable(name: "reduc", scope: !4166, file: !3, line: 390, type: !4186)
!4186 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2049)
!4187 = !DILocation(line: 390, column: 32, scope: !4166)
!4188 = !DILocation(line: 390, column: 67, scope: !4166)
!4189 = !DILocation(line: 390, column: 66, scope: !4166)
!4190 = !DILocation(line: 390, column: 40, scope: !4166)
!4191 = !DILocalVariable(name: "loop", scope: !4166, file: !3, line: 391, type: !1307)
!4192 = !DILocation(line: 391, column: 16, scope: !4166)
!4193 = !DILocation(line: 391, column: 39, scope: !4166)
!4194 = !DILocation(line: 391, column: 23, scope: !4166)
!4195 = !DILocation(line: 400, column: 10, scope: !4166)
!4196 = !DILocation(line: 400, column: 8, scope: !4166)
!4197 = !DILocation(line: 401, column: 26, scope: !4166)
!4198 = !DILocation(line: 401, column: 10, scope: !4166)
!4199 = !DILocation(line: 401, column: 8, scope: !4166)
!4200 = !DILocation(line: 402, column: 23, scope: !4166)
!4201 = !DILocation(line: 402, column: 3, scope: !4166)
!4202 = !DILocation(line: 404, column: 42, scope: !4166)
!4203 = !DILocation(line: 404, column: 49, scope: !4166)
!4204 = !DILocation(line: 404, column: 25, scope: !4166)
!4205 = !DILocation(line: 404, column: 7, scope: !4166)
!4206 = !DILocation(line: 404, column: 5, scope: !4166)
!4207 = !DILocation(line: 406, column: 35, scope: !4166)
!4208 = !DILocation(line: 406, column: 42, scope: !4166)
!4209 = !DILocation(line: 406, column: 3, scope: !4166)
!4210 = !DILocation(line: 406, column: 33, scope: !4166)
!4211 = !DILocation(line: 407, column: 25, scope: !4166)
!4212 = !DILocation(line: 407, column: 3, scope: !4166)
!4213 = !DILocation(line: 407, column: 23, scope: !4166)
!4214 = !DILocation(line: 409, column: 30, scope: !4166)
!4215 = !DILocation(line: 409, column: 33, scope: !4166)
!4216 = !DILocation(line: 409, column: 10, scope: !4166)
!4217 = !DILocation(line: 409, column: 8, scope: !4166)
!4218 = !DILocation(line: 410, column: 17, scope: !4166)
!4219 = !DILocation(line: 410, column: 3, scope: !4166)
!4220 = !DILocation(line: 410, column: 10, scope: !4166)
!4221 = !DILocation(line: 410, column: 15, scope: !4166)
!4222 = !DILocation(line: 420, column: 28, scope: !4166)
!4223 = !DILocation(line: 420, column: 7, scope: !4166)
!4224 = !DILocation(line: 420, column: 5, scope: !4166)
!4225 = !DILocation(line: 421, column: 9, scope: !4166)
!4226 = !DILocation(line: 421, column: 7, scope: !4166)
!4227 = !DILocation(line: 424, column: 3, scope: !4166)
!4228 = !DILocation(line: 426, column: 26, scope: !4166)
!4229 = !DILocation(line: 426, column: 3, scope: !4166)
!4230 = !DILocation(line: 426, column: 10, scope: !4166)
!4231 = !DILocation(line: 426, column: 24, scope: !4166)
!4232 = !DILocation(line: 427, column: 3, scope: !4166)
!4233 = distinct !DISubprogram(name: "eliminate_local_variables", scope: !3, file: !3, line: 540, type: !4234, scopeLine: 541, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!4234 = !DISubroutineType(types: !4235)
!4235 = !{null, !713, !713}
!4236 = !DILocalVariable(name: "entry", arg: 1, scope: !4233, file: !3, line: 540, type: !713)
!4237 = !DILocation(line: 540, column: 33, scope: !4233)
!4238 = !DILocalVariable(name: "exit", arg: 2, scope: !4233, file: !3, line: 540, type: !713)
!4239 = !DILocation(line: 540, column: 45, scope: !4233)
!4240 = !DILocalVariable(name: "bb", scope: !4233, file: !3, line: 542, type: !1122)
!4241 = !DILocation(line: 542, column: 15, scope: !4233)
!4242 = !DILocalVariable(name: "body", scope: !4233, file: !3, line: 543, type: !2188)
!4243 = !DILocation(line: 543, column: 28, scope: !4233)
!4244 = !DILocation(line: 543, column: 35, scope: !4233)
!4245 = !DILocalVariable(name: "i", scope: !4233, file: !3, line: 544, type: !7)
!4246 = !DILocation(line: 544, column: 12, scope: !4233)
!4247 = !DILocalVariable(name: "gsi", scope: !4233, file: !3, line: 545, type: !2200)
!4248 = !DILocation(line: 545, column: 24, scope: !4233)
!4249 = !DILocalVariable(name: "decl_address", scope: !4233, file: !3, line: 546, type: !1154)
!4250 = !DILocation(line: 546, column: 10, scope: !4233)
!4251 = !DILocation(line: 546, column: 25, scope: !4233)
!4252 = !DILocalVariable(name: "entry_bb", scope: !4233, file: !3, line: 548, type: !1122)
!4253 = !DILocation(line: 548, column: 15, scope: !4233)
!4254 = !DILocation(line: 548, column: 26, scope: !4233)
!4255 = !DILocation(line: 548, column: 33, scope: !4233)
!4256 = !DILocalVariable(name: "exit_bb", scope: !4233, file: !3, line: 549, type: !1122)
!4257 = !DILocation(line: 549, column: 15, scope: !4233)
!4258 = !DILocation(line: 549, column: 25, scope: !4233)
!4259 = !DILocation(line: 549, column: 31, scope: !4233)
!4260 = !DILocation(line: 551, column: 33, scope: !4233)
!4261 = !DILocation(line: 551, column: 43, scope: !4233)
!4262 = !DILocation(line: 551, column: 3, scope: !4233)
!4263 = !DILocation(line: 553, column: 10, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4233, file: !3, line: 553, column: 3)
!4265 = !DILocation(line: 553, column: 8, scope: !4264)
!4266 = !DILocation(line: 553, column: 15, scope: !4267)
!4267 = distinct !DILexicalBlock(scope: !4264, file: !3, line: 553, column: 3)
!4268 = !DILocation(line: 553, column: 3, scope: !4264)
!4269 = !DILocation(line: 554, column: 9, scope: !4270)
!4270 = distinct !DILexicalBlock(scope: !4267, file: !3, line: 554, column: 9)
!4271 = !DILocation(line: 554, column: 15, scope: !4270)
!4272 = !DILocation(line: 554, column: 12, scope: !4270)
!4273 = !DILocation(line: 554, column: 24, scope: !4270)
!4274 = !DILocation(line: 554, column: 27, scope: !4270)
!4275 = !DILocation(line: 554, column: 33, scope: !4270)
!4276 = !DILocation(line: 554, column: 30, scope: !4270)
!4277 = !DILocation(line: 554, column: 9, scope: !4267)
!4278 = !DILocation(line: 555, column: 32, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 555, column: 7)
!4280 = !DILocation(line: 555, column: 18, scope: !4279)
!4281 = !DILocation(line: 555, column: 12, scope: !4279)
!4282 = !DILocation(line: 555, column: 38, scope: !4283)
!4283 = distinct !DILexicalBlock(scope: !4279, file: !3, line: 555, column: 7)
!4284 = !DILocation(line: 555, column: 37, scope: !4283)
!4285 = !DILocation(line: 555, column: 7, scope: !4279)
!4286 = !DILocation(line: 556, column: 34, scope: !4283)
!4287 = !DILocation(line: 556, column: 41, scope: !4283)
!4288 = !DILocation(line: 557, column: 6, scope: !4283)
!4289 = !DILocation(line: 556, column: 2, scope: !4283)
!4290 = !DILocation(line: 555, column: 55, scope: !4283)
!4291 = !DILocation(line: 555, column: 7, scope: !4283)
!4292 = distinct !{!4292, !4285, !4293}
!4293 = !DILocation(line: 557, column: 18, scope: !4279)
!4294 = !DILocation(line: 553, column: 56, scope: !4267)
!4295 = !DILocation(line: 553, column: 3, scope: !4267)
!4296 = distinct !{!4296, !4268, !4297}
!4297 = !DILocation(line: 557, column: 18, scope: !4264)
!4298 = !DILocation(line: 559, column: 16, scope: !4233)
!4299 = !DILocation(line: 559, column: 3, scope: !4233)
!4300 = !DILocation(line: 560, column: 3, scope: !4233)
!4301 = !DILocation(line: 561, column: 1, scope: !4233)
!4302 = distinct !DISubprogram(name: "separate_decls_in_region", scope: !3, file: !3, line: 1073, type: !4303, scopeLine: 1077, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!4303 = !DISubroutineType(types: !4304)
!4304 = !{null, !713, !713, !1154, !1270, !1270, !2232}
!4305 = !DILocalVariable(name: "entry", arg: 1, scope: !4302, file: !3, line: 1073, type: !713)
!4306 = !DILocation(line: 1073, column: 32, scope: !4302)
!4307 = !DILocalVariable(name: "exit", arg: 2, scope: !4302, file: !3, line: 1073, type: !713)
!4308 = !DILocation(line: 1073, column: 44, scope: !4302)
!4309 = !DILocalVariable(name: "reduction_list", arg: 3, scope: !4302, file: !3, line: 1073, type: !1154)
!4310 = !DILocation(line: 1073, column: 57, scope: !4302)
!4311 = !DILocalVariable(name: "arg_struct", arg: 4, scope: !4302, file: !3, line: 1074, type: !1270)
!4312 = !DILocation(line: 1074, column: 12, scope: !4302)
!4313 = !DILocalVariable(name: "new_arg_struct", arg: 5, scope: !4302, file: !3, line: 1074, type: !1270)
!4314 = !DILocation(line: 1074, column: 30, scope: !4302)
!4315 = !DILocalVariable(name: "ld_st_data", arg: 6, scope: !4302, file: !3, line: 1075, type: !2232)
!4316 = !DILocation(line: 1075, column: 24, scope: !4302)
!4317 = !DILocalVariable(name: "bb1", scope: !4302, file: !3, line: 1078, type: !1122)
!4318 = !DILocation(line: 1078, column: 15, scope: !4302)
!4319 = !DILocation(line: 1078, column: 33, scope: !4302)
!4320 = !DILocation(line: 1078, column: 21, scope: !4302)
!4321 = !DILocalVariable(name: "bb0", scope: !4302, file: !3, line: 1079, type: !1122)
!4322 = !DILocation(line: 1079, column: 15, scope: !4302)
!4323 = !DILocation(line: 1079, column: 34, scope: !4302)
!4324 = !DILocation(line: 1079, column: 21, scope: !4302)
!4325 = !DILocalVariable(name: "name_copies", scope: !4302, file: !3, line: 1080, type: !1154)
!4326 = !DILocation(line: 1080, column: 10, scope: !4302)
!4327 = !DILocation(line: 1080, column: 24, scope: !4302)
!4328 = !DILocalVariable(name: "decl_copies", scope: !4302, file: !3, line: 1082, type: !1154)
!4329 = !DILocation(line: 1082, column: 10, scope: !4302)
!4330 = !DILocation(line: 1082, column: 24, scope: !4302)
!4331 = !DILocalVariable(name: "i", scope: !4302, file: !3, line: 1084, type: !7)
!4332 = !DILocation(line: 1084, column: 12, scope: !4302)
!4333 = !DILocalVariable(name: "type", scope: !4302, file: !3, line: 1085, type: !859)
!4334 = !DILocation(line: 1085, column: 8, scope: !4302)
!4335 = !DILocalVariable(name: "type_name", scope: !4302, file: !3, line: 1085, type: !859)
!4336 = !DILocation(line: 1085, column: 14, scope: !4302)
!4337 = !DILocalVariable(name: "nvar", scope: !4302, file: !3, line: 1085, type: !859)
!4338 = !DILocation(line: 1085, column: 25, scope: !4302)
!4339 = !DILocalVariable(name: "gsi", scope: !4302, file: !3, line: 1086, type: !2200)
!4340 = !DILocation(line: 1086, column: 24, scope: !4302)
!4341 = !DILocalVariable(name: "clsn_data", scope: !4302, file: !3, line: 1087, type: !2233)
!4342 = !DILocation(line: 1087, column: 20, scope: !4302)
!4343 = !DILocalVariable(name: "body", scope: !4302, file: !3, line: 1088, type: !2188)
!4344 = !DILocation(line: 1088, column: 28, scope: !4302)
!4345 = !DILocation(line: 1088, column: 35, scope: !4302)
!4346 = !DILocalVariable(name: "bb", scope: !4302, file: !3, line: 1089, type: !1122)
!4347 = !DILocation(line: 1089, column: 15, scope: !4302)
!4348 = !DILocalVariable(name: "entry_bb", scope: !4302, file: !3, line: 1090, type: !1122)
!4349 = !DILocation(line: 1090, column: 15, scope: !4302)
!4350 = !DILocation(line: 1090, column: 26, scope: !4302)
!4351 = !DILocalVariable(name: "exit_bb", scope: !4302, file: !3, line: 1091, type: !1122)
!4352 = !DILocation(line: 1091, column: 15, scope: !4302)
!4353 = !DILocation(line: 1091, column: 25, scope: !4302)
!4354 = !DILocation(line: 1091, column: 31, scope: !4302)
!4355 = !DILocalVariable(name: "has_debug_stmt", scope: !4302, file: !3, line: 1092, type: !972)
!4356 = !DILocation(line: 1092, column: 8, scope: !4302)
!4357 = !DILocation(line: 1094, column: 29, scope: !4302)
!4358 = !DILocation(line: 1094, column: 11, scope: !4302)
!4359 = !DILocation(line: 1094, column: 9, scope: !4302)
!4360 = !DILocation(line: 1095, column: 33, scope: !4302)
!4361 = !DILocation(line: 1095, column: 43, scope: !4302)
!4362 = !DILocation(line: 1095, column: 3, scope: !4302)
!4363 = !DILocation(line: 1097, column: 10, scope: !4364)
!4364 = distinct !DILexicalBlock(scope: !4302, file: !3, line: 1097, column: 3)
!4365 = !DILocation(line: 1097, column: 8, scope: !4364)
!4366 = !DILocation(line: 1097, column: 15, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4364, file: !3, line: 1097, column: 3)
!4368 = !DILocation(line: 1097, column: 3, scope: !4364)
!4369 = !DILocation(line: 1099, column: 11, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4371, file: !3, line: 1099, column: 11)
!4371 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 1098, column: 5)
!4372 = !DILocation(line: 1099, column: 17, scope: !4370)
!4373 = !DILocation(line: 1099, column: 14, scope: !4370)
!4374 = !DILocation(line: 1099, column: 26, scope: !4370)
!4375 = !DILocation(line: 1099, column: 29, scope: !4370)
!4376 = !DILocation(line: 1099, column: 35, scope: !4370)
!4377 = !DILocation(line: 1099, column: 32, scope: !4370)
!4378 = !DILocation(line: 1099, column: 11, scope: !4371)
!4379 = !DILocation(line: 1101, column: 31, scope: !4380)
!4380 = distinct !DILexicalBlock(scope: !4381, file: !3, line: 1101, column: 4)
!4381 = distinct !DILexicalBlock(scope: !4370, file: !3, line: 1100, column: 2)
!4382 = !DILocation(line: 1101, column: 15, scope: !4380)
!4383 = !DILocation(line: 1101, column: 9, scope: !4380)
!4384 = !DILocation(line: 1101, column: 37, scope: !4385)
!4385 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 1101, column: 4)
!4386 = !DILocation(line: 1101, column: 36, scope: !4385)
!4387 = !DILocation(line: 1101, column: 4, scope: !4380)
!4388 = !DILocation(line: 1102, column: 37, scope: !4385)
!4389 = !DILocation(line: 1102, column: 44, scope: !4385)
!4390 = !DILocation(line: 1102, column: 50, scope: !4385)
!4391 = !DILocation(line: 1103, column: 9, scope: !4385)
!4392 = !DILocation(line: 1103, column: 22, scope: !4385)
!4393 = !DILocation(line: 1102, column: 6, scope: !4385)
!4394 = !DILocation(line: 1101, column: 54, scope: !4385)
!4395 = !DILocation(line: 1101, column: 4, scope: !4385)
!4396 = distinct !{!4396, !4387, !4397}
!4397 = !DILocation(line: 1103, column: 33, scope: !4380)
!4398 = !DILocation(line: 1105, column: 29, scope: !4399)
!4399 = distinct !DILexicalBlock(scope: !4381, file: !3, line: 1105, column: 4)
!4400 = !DILocation(line: 1105, column: 15, scope: !4399)
!4401 = !DILocation(line: 1105, column: 9, scope: !4399)
!4402 = !DILocation(line: 1105, column: 35, scope: !4403)
!4403 = distinct !DILexicalBlock(scope: !4399, file: !3, line: 1105, column: 4)
!4404 = !DILocation(line: 1105, column: 34, scope: !4403)
!4405 = !DILocation(line: 1105, column: 4, scope: !4399)
!4406 = !DILocalVariable(name: "stmt", scope: !4407, file: !3, line: 1107, type: !674)
!4407 = distinct !DILexicalBlock(scope: !4403, file: !3, line: 1106, column: 6)
!4408 = !DILocation(line: 1107, column: 15, scope: !4407)
!4409 = !DILocation(line: 1107, column: 22, scope: !4407)
!4410 = !DILocation(line: 1109, column: 29, scope: !4411)
!4411 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 1109, column: 12)
!4412 = !DILocation(line: 1109, column: 12, scope: !4411)
!4413 = !DILocation(line: 1109, column: 12, scope: !4407)
!4414 = !DILocation(line: 1110, column: 18, scope: !4411)
!4415 = !DILocation(line: 1110, column: 3, scope: !4411)
!4416 = !DILocation(line: 1112, column: 34, scope: !4411)
!4417 = !DILocation(line: 1112, column: 41, scope: !4411)
!4418 = !DILocation(line: 1112, column: 47, scope: !4411)
!4419 = !DILocation(line: 1113, column: 13, scope: !4411)
!4420 = !DILocation(line: 1113, column: 26, scope: !4411)
!4421 = !DILocation(line: 1112, column: 3, scope: !4411)
!4422 = !DILocation(line: 1114, column: 6, scope: !4407)
!4423 = !DILocation(line: 1105, column: 52, scope: !4403)
!4424 = !DILocation(line: 1105, column: 4, scope: !4403)
!4425 = distinct !{!4425, !4405, !4426}
!4426 = !DILocation(line: 1114, column: 6, scope: !4399)
!4427 = !DILocation(line: 1115, column: 2, scope: !4381)
!4428 = !DILocation(line: 1116, column: 5, scope: !4371)
!4429 = !DILocation(line: 1097, column: 56, scope: !4367)
!4430 = !DILocation(line: 1097, column: 3, scope: !4367)
!4431 = distinct !{!4431, !4368, !4432}
!4432 = !DILocation(line: 1116, column: 5, scope: !4364)
!4433 = !DILocation(line: 1124, column: 7, scope: !4434)
!4434 = distinct !DILexicalBlock(scope: !4302, file: !3, line: 1124, column: 7)
!4435 = !DILocation(line: 1124, column: 7, scope: !4302)
!4436 = !DILocation(line: 1125, column: 12, scope: !4437)
!4437 = distinct !DILexicalBlock(scope: !4434, file: !3, line: 1125, column: 5)
!4438 = !DILocation(line: 1125, column: 10, scope: !4437)
!4439 = !DILocation(line: 1125, column: 17, scope: !4440)
!4440 = distinct !DILexicalBlock(scope: !4437, file: !3, line: 1125, column: 5)
!4441 = !DILocation(line: 1125, column: 5, scope: !4437)
!4442 = !DILocation(line: 1126, column: 11, scope: !4443)
!4443 = distinct !DILexicalBlock(scope: !4440, file: !3, line: 1126, column: 11)
!4444 = !DILocation(line: 1126, column: 17, scope: !4443)
!4445 = !DILocation(line: 1126, column: 14, scope: !4443)
!4446 = !DILocation(line: 1126, column: 26, scope: !4443)
!4447 = !DILocation(line: 1126, column: 29, scope: !4443)
!4448 = !DILocation(line: 1126, column: 35, scope: !4443)
!4449 = !DILocation(line: 1126, column: 32, scope: !4443)
!4450 = !DILocation(line: 1126, column: 11, scope: !4440)
!4451 = !DILocation(line: 1128, column: 29, scope: !4452)
!4452 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 1128, column: 4)
!4453 = distinct !DILexicalBlock(scope: !4443, file: !3, line: 1127, column: 2)
!4454 = !DILocation(line: 1128, column: 15, scope: !4452)
!4455 = !DILocation(line: 1128, column: 9, scope: !4452)
!4456 = !DILocation(line: 1128, column: 35, scope: !4457)
!4457 = distinct !DILexicalBlock(scope: !4452, file: !3, line: 1128, column: 4)
!4458 = !DILocation(line: 1128, column: 34, scope: !4457)
!4459 = !DILocation(line: 1128, column: 4, scope: !4452)
!4460 = !DILocalVariable(name: "stmt", scope: !4461, file: !3, line: 1130, type: !674)
!4461 = distinct !DILexicalBlock(scope: !4457, file: !3, line: 1129, column: 6)
!4462 = !DILocation(line: 1130, column: 15, scope: !4461)
!4463 = !DILocation(line: 1130, column: 22, scope: !4461)
!4464 = !DILocation(line: 1132, column: 33, scope: !4465)
!4465 = distinct !DILexicalBlock(scope: !4461, file: !3, line: 1132, column: 12)
!4466 = !DILocation(line: 1132, column: 12, scope: !4465)
!4467 = !DILocation(line: 1132, column: 12, scope: !4461)
!4468 = !DILocation(line: 1134, column: 46, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4470, file: !3, line: 1134, column: 9)
!4470 = distinct !DILexicalBlock(scope: !4465, file: !3, line: 1133, column: 3)
!4471 = !DILocation(line: 1135, column: 11, scope: !4469)
!4472 = !DILocation(line: 1136, column: 11, scope: !4469)
!4473 = !DILocation(line: 1134, column: 9, scope: !4469)
!4474 = !DILocation(line: 1134, column: 9, scope: !4470)
!4475 = !DILocation(line: 1138, column: 9, scope: !4476)
!4476 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 1137, column: 7)
!4477 = !DILocation(line: 1139, column: 9, scope: !4476)
!4478 = distinct !{!4478, !4459, !4479}
!4479 = !DILocation(line: 1144, column: 6, scope: !4452)
!4480 = !DILocation(line: 1141, column: 3, scope: !4470)
!4481 = !DILocation(line: 1143, column: 8, scope: !4461)
!4482 = !DILocation(line: 1128, column: 4, scope: !4457)
!4483 = !DILocation(line: 1145, column: 2, scope: !4453)
!4484 = !DILocation(line: 1125, column: 58, scope: !4440)
!4485 = !DILocation(line: 1125, column: 5, scope: !4440)
!4486 = distinct !{!4486, !4441, !4487}
!4487 = !DILocation(line: 1145, column: 2, scope: !4437)
!4488 = !DILocation(line: 1147, column: 3, scope: !4302)
!4489 = !DILocation(line: 1149, column: 22, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4302, file: !3, line: 1149, column: 7)
!4491 = !DILocation(line: 1149, column: 7, scope: !4490)
!4492 = !DILocation(line: 1149, column: 35, scope: !4490)
!4493 = !DILocation(line: 1149, column: 40, scope: !4490)
!4494 = !DILocation(line: 1149, column: 58, scope: !4490)
!4495 = !DILocation(line: 1149, column: 43, scope: !4490)
!4496 = !DILocation(line: 1149, column: 74, scope: !4490)
!4497 = !DILocation(line: 1149, column: 7, scope: !4302)
!4498 = !DILocation(line: 1153, column: 8, scope: !4499)
!4499 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 1150, column: 5)
!4500 = !DILocation(line: 1153, column: 19, scope: !4499)
!4501 = !DILocation(line: 1154, column: 8, scope: !4499)
!4502 = !DILocation(line: 1154, column: 23, scope: !4499)
!4503 = !DILocation(line: 1155, column: 5, scope: !4499)
!4504 = !DILocation(line: 1159, column: 31, scope: !4505)
!4505 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 1157, column: 5)
!4506 = !DILocation(line: 1159, column: 14, scope: !4505)
!4507 = !DILocation(line: 1159, column: 12, scope: !4505)
!4508 = !DILocation(line: 1160, column: 19, scope: !4505)
!4509 = !DILocation(line: 1160, column: 17, scope: !4505)
!4510 = !DILocation(line: 1163, column: 26, scope: !4505)
!4511 = !DILocation(line: 1163, column: 7, scope: !4505)
!4512 = !DILocation(line: 1163, column: 24, scope: !4505)
!4513 = !DILocation(line: 1165, column: 22, scope: !4505)
!4514 = !DILocation(line: 1165, column: 55, scope: !4505)
!4515 = !DILocation(line: 1165, column: 7, scope: !4505)
!4516 = !DILocation(line: 1166, column: 11, scope: !4517)
!4517 = distinct !DILexicalBlock(scope: !4505, file: !3, line: 1166, column: 11)
!4518 = !DILocation(line: 1166, column: 26, scope: !4517)
!4519 = !DILocation(line: 1166, column: 44, scope: !4517)
!4520 = !DILocation(line: 1166, column: 29, scope: !4517)
!4521 = !DILocation(line: 1166, column: 60, scope: !4517)
!4522 = !DILocation(line: 1166, column: 11, scope: !4505)
!4523 = !DILocation(line: 1169, column: 19, scope: !4524)
!4524 = distinct !DILexicalBlock(scope: !4517, file: !3, line: 1167, column: 2)
!4525 = !DILocation(line: 1170, column: 26, scope: !4524)
!4526 = !DILocation(line: 1169, column: 4, scope: !4524)
!4527 = !DILocation(line: 1171, column: 2, scope: !4524)
!4528 = !DILocation(line: 1172, column: 20, scope: !4505)
!4529 = !DILocation(line: 1172, column: 7, scope: !4505)
!4530 = !DILocation(line: 1175, column: 37, scope: !4505)
!4531 = !DILocation(line: 1175, column: 21, scope: !4505)
!4532 = !DILocation(line: 1175, column: 8, scope: !4505)
!4533 = !DILocation(line: 1175, column: 19, scope: !4505)
!4534 = !DILocation(line: 1176, column: 28, scope: !4505)
!4535 = !DILocation(line: 1176, column: 27, scope: !4505)
!4536 = !DILocation(line: 1176, column: 7, scope: !4505)
!4537 = !DILocation(line: 1177, column: 50, scope: !4505)
!4538 = !DILocation(line: 1177, column: 30, scope: !4505)
!4539 = !DILocation(line: 1177, column: 14, scope: !4505)
!4540 = !DILocation(line: 1177, column: 12, scope: !4505)
!4541 = !DILocation(line: 1178, column: 27, scope: !4505)
!4542 = !DILocation(line: 1178, column: 7, scope: !4505)
!4543 = !DILocation(line: 1179, column: 40, scope: !4505)
!4544 = !DILocation(line: 1179, column: 25, scope: !4505)
!4545 = !DILocation(line: 1179, column: 8, scope: !4505)
!4546 = !DILocation(line: 1179, column: 23, scope: !4505)
!4547 = !DILocation(line: 1181, column: 28, scope: !4505)
!4548 = !DILocation(line: 1181, column: 27, scope: !4505)
!4549 = !DILocation(line: 1181, column: 7, scope: !4505)
!4550 = !DILocation(line: 1181, column: 19, scope: !4505)
!4551 = !DILocation(line: 1181, column: 25, scope: !4505)
!4552 = !DILocation(line: 1182, column: 27, scope: !4505)
!4553 = !DILocation(line: 1182, column: 26, scope: !4505)
!4554 = !DILocation(line: 1182, column: 7, scope: !4505)
!4555 = !DILocation(line: 1182, column: 19, scope: !4505)
!4556 = !DILocation(line: 1182, column: 24, scope: !4505)
!4557 = !DILocation(line: 1183, column: 30, scope: !4505)
!4558 = !DILocation(line: 1183, column: 7, scope: !4505)
!4559 = !DILocation(line: 1183, column: 19, scope: !4505)
!4560 = !DILocation(line: 1183, column: 28, scope: !4505)
!4561 = !DILocation(line: 1184, column: 29, scope: !4505)
!4562 = !DILocation(line: 1184, column: 7, scope: !4505)
!4563 = !DILocation(line: 1184, column: 19, scope: !4505)
!4564 = !DILocation(line: 1184, column: 27, scope: !4505)
!4565 = !DILocation(line: 1186, column: 22, scope: !4505)
!4566 = !DILocation(line: 1187, column: 8, scope: !4505)
!4567 = !DILocation(line: 1186, column: 7, scope: !4505)
!4568 = !DILocation(line: 1191, column: 11, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4505, file: !3, line: 1191, column: 11)
!4570 = !DILocation(line: 1191, column: 26, scope: !4569)
!4571 = !DILocation(line: 1191, column: 44, scope: !4569)
!4572 = !DILocation(line: 1191, column: 29, scope: !4569)
!4573 = !DILocation(line: 1191, column: 60, scope: !4569)
!4574 = !DILocation(line: 1191, column: 11, scope: !4505)
!4575 = !DILocation(line: 1193, column: 19, scope: !4576)
!4576 = distinct !DILexicalBlock(scope: !4569, file: !3, line: 1192, column: 2)
!4577 = !DILocation(line: 1194, column: 25, scope: !4576)
!4578 = !DILocation(line: 1193, column: 4, scope: !4576)
!4579 = !DILocation(line: 1195, column: 36, scope: !4576)
!4580 = !DILocation(line: 1195, column: 21, scope: !4576)
!4581 = !DILocation(line: 1195, column: 14, scope: !4576)
!4582 = !DILocation(line: 1195, column: 19, scope: !4576)
!4583 = !DILocation(line: 1196, column: 24, scope: !4576)
!4584 = !DILocation(line: 1196, column: 30, scope: !4576)
!4585 = !DILocation(line: 1196, column: 14, scope: !4576)
!4586 = !DILocation(line: 1196, column: 22, scope: !4576)
!4587 = !DILocation(line: 1197, column: 22, scope: !4576)
!4588 = !DILocation(line: 1197, column: 34, scope: !4576)
!4589 = !DILocation(line: 1197, column: 14, scope: !4576)
!4590 = !DILocation(line: 1197, column: 20, scope: !4576)
!4591 = !DILocation(line: 1198, column: 38, scope: !4576)
!4592 = !DILocation(line: 1198, column: 4, scope: !4576)
!4593 = !DILocation(line: 1199, column: 2, scope: !4576)
!4594 = !DILocation(line: 1202, column: 16, scope: !4302)
!4595 = !DILocation(line: 1202, column: 3, scope: !4302)
!4596 = !DILocation(line: 1203, column: 16, scope: !4302)
!4597 = !DILocation(line: 1203, column: 3, scope: !4302)
!4598 = !DILocation(line: 1204, column: 1, scope: !4302)
!4599 = distinct !DISubprogram(name: "create_parallel_loop", scope: !3, file: !3, line: 1405, type: !4600, scopeLine: 1407, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!4600 = !DISubroutineType(types: !4601)
!4601 = !{!1122, !1307, !859, !859, !859, !7}
!4602 = !DILocalVariable(name: "loop", arg: 1, scope: !4599, file: !3, line: 1405, type: !1307)
!4603 = !DILocation(line: 1405, column: 36, scope: !4599)
!4604 = !DILocalVariable(name: "loop_fn", arg: 2, scope: !4599, file: !3, line: 1405, type: !859)
!4605 = !DILocation(line: 1405, column: 47, scope: !4599)
!4606 = !DILocalVariable(name: "data", arg: 3, scope: !4599, file: !3, line: 1405, type: !859)
!4607 = !DILocation(line: 1405, column: 61, scope: !4599)
!4608 = !DILocalVariable(name: "new_data", arg: 4, scope: !4599, file: !3, line: 1406, type: !859)
!4609 = !DILocation(line: 1406, column: 14, scope: !4599)
!4610 = !DILocalVariable(name: "n_threads", arg: 5, scope: !4599, file: !3, line: 1406, type: !7)
!4611 = !DILocation(line: 1406, column: 33, scope: !4599)
!4612 = !DILocalVariable(name: "gsi", scope: !4599, file: !3, line: 1408, type: !2200)
!4613 = !DILocation(line: 1408, column: 24, scope: !4599)
!4614 = !DILocalVariable(name: "bb", scope: !4599, file: !3, line: 1409, type: !1122)
!4615 = !DILocation(line: 1409, column: 15, scope: !4599)
!4616 = !DILocalVariable(name: "paral_bb", scope: !4599, file: !3, line: 1409, type: !1122)
!4617 = !DILocation(line: 1409, column: 19, scope: !4599)
!4618 = !DILocalVariable(name: "for_bb", scope: !4599, file: !3, line: 1409, type: !1122)
!4619 = !DILocation(line: 1409, column: 29, scope: !4599)
!4620 = !DILocalVariable(name: "ex_bb", scope: !4599, file: !3, line: 1409, type: !1122)
!4621 = !DILocation(line: 1409, column: 37, scope: !4599)
!4622 = !DILocalVariable(name: "t", scope: !4599, file: !3, line: 1410, type: !859)
!4623 = !DILocation(line: 1410, column: 8, scope: !4599)
!4624 = !DILocalVariable(name: "param", scope: !4599, file: !3, line: 1410, type: !859)
!4625 = !DILocation(line: 1410, column: 11, scope: !4599)
!4626 = !DILocalVariable(name: "stmt", scope: !4599, file: !3, line: 1411, type: !674)
!4627 = !DILocation(line: 1411, column: 10, scope: !4599)
!4628 = !DILocalVariable(name: "for_stmt", scope: !4599, file: !3, line: 1411, type: !674)
!4629 = !DILocation(line: 1411, column: 16, scope: !4599)
!4630 = !DILocalVariable(name: "phi", scope: !4599, file: !3, line: 1411, type: !674)
!4631 = !DILocation(line: 1411, column: 26, scope: !4599)
!4632 = !DILocalVariable(name: "cond_stmt", scope: !4599, file: !3, line: 1411, type: !674)
!4633 = !DILocation(line: 1411, column: 31, scope: !4599)
!4634 = !DILocalVariable(name: "cvar", scope: !4599, file: !3, line: 1412, type: !859)
!4635 = !DILocation(line: 1412, column: 8, scope: !4599)
!4636 = !DILocalVariable(name: "cvar_init", scope: !4599, file: !3, line: 1412, type: !859)
!4637 = !DILocation(line: 1412, column: 14, scope: !4599)
!4638 = !DILocalVariable(name: "initvar", scope: !4599, file: !3, line: 1412, type: !859)
!4639 = !DILocation(line: 1412, column: 25, scope: !4599)
!4640 = !DILocalVariable(name: "cvar_next", scope: !4599, file: !3, line: 1412, type: !859)
!4641 = !DILocation(line: 1412, column: 34, scope: !4599)
!4642 = !DILocalVariable(name: "cvar_base", scope: !4599, file: !3, line: 1412, type: !859)
!4643 = !DILocation(line: 1412, column: 45, scope: !4599)
!4644 = !DILocalVariable(name: "type", scope: !4599, file: !3, line: 1412, type: !859)
!4645 = !DILocation(line: 1412, column: 56, scope: !4599)
!4646 = !DILocalVariable(name: "exit", scope: !4599, file: !3, line: 1413, type: !713)
!4647 = !DILocation(line: 1413, column: 8, scope: !4599)
!4648 = !DILocalVariable(name: "nexit", scope: !4599, file: !3, line: 1413, type: !713)
!4649 = !DILocation(line: 1413, column: 14, scope: !4599)
!4650 = !DILocalVariable(name: "guard", scope: !4599, file: !3, line: 1413, type: !713)
!4651 = !DILocation(line: 1413, column: 21, scope: !4599)
!4652 = !DILocalVariable(name: "end", scope: !4599, file: !3, line: 1413, type: !713)
!4653 = !DILocation(line: 1413, column: 28, scope: !4599)
!4654 = !DILocalVariable(name: "e", scope: !4599, file: !3, line: 1413, type: !713)
!4655 = !DILocation(line: 1413, column: 33, scope: !4599)
!4656 = !DILocation(line: 1416, column: 29, scope: !4599)
!4657 = !DILocation(line: 1416, column: 8, scope: !4599)
!4658 = !DILocation(line: 1416, column: 36, scope: !4599)
!4659 = !DILocation(line: 1416, column: 6, scope: !4599)
!4660 = !DILocation(line: 1417, column: 27, scope: !4599)
!4661 = !DILocation(line: 1417, column: 14, scope: !4599)
!4662 = !DILocation(line: 1417, column: 12, scope: !4599)
!4663 = !DILocation(line: 1418, column: 22, scope: !4599)
!4664 = !DILocation(line: 1418, column: 9, scope: !4599)
!4665 = !DILocation(line: 1420, column: 7, scope: !4599)
!4666 = !DILocation(line: 1420, column: 5, scope: !4599)
!4667 = !DILocation(line: 1422, column: 22, scope: !4599)
!4668 = !DILocation(line: 1422, column: 41, scope: !4599)
!4669 = !DILocation(line: 1422, column: 7, scope: !4599)
!4670 = !DILocation(line: 1421, column: 3, scope: !4599)
!4671 = !DILocation(line: 1422, column: 5, scope: !4599)
!4672 = !DILocation(line: 1423, column: 43, scope: !4599)
!4673 = !DILocation(line: 1423, column: 46, scope: !4599)
!4674 = !DILocation(line: 1423, column: 55, scope: !4599)
!4675 = !DILocation(line: 1423, column: 10, scope: !4599)
!4676 = !DILocation(line: 1423, column: 8, scope: !4599)
!4677 = !DILocation(line: 1425, column: 27, scope: !4599)
!4678 = !DILocation(line: 1425, column: 3, scope: !4599)
!4679 = !DILocation(line: 1428, column: 7, scope: !4680)
!4680 = distinct !DILexicalBlock(scope: !4599, file: !3, line: 1428, column: 7)
!4681 = !DILocation(line: 1428, column: 7, scope: !4599)
!4682 = !DILocation(line: 1430, column: 31, scope: !4683)
!4683 = distinct !DILexicalBlock(scope: !4680, file: !3, line: 1429, column: 5)
!4684 = !DILocation(line: 1430, column: 13, scope: !4683)
!4685 = !DILocation(line: 1432, column: 30, scope: !4683)
!4686 = !DILocation(line: 1432, column: 15, scope: !4683)
!4687 = !DILocation(line: 1432, column: 13, scope: !4683)
!4688 = !DILocation(line: 1433, column: 14, scope: !4683)
!4689 = !DILocation(line: 1433, column: 12, scope: !4683)
!4690 = !DILocation(line: 1434, column: 32, scope: !4683)
!4691 = !DILocation(line: 1434, column: 7, scope: !4683)
!4692 = !DILocation(line: 1435, column: 35, scope: !4683)
!4693 = !DILocation(line: 1435, column: 7, scope: !4683)
!4694 = !DILocation(line: 1435, column: 33, scope: !4683)
!4695 = !DILocation(line: 1437, column: 14, scope: !4683)
!4696 = !DILocation(line: 1437, column: 12, scope: !4683)
!4697 = !DILocation(line: 1439, column: 32, scope: !4683)
!4698 = !DILocation(line: 1439, column: 7, scope: !4683)
!4699 = !DILocation(line: 1440, column: 38, scope: !4683)
!4700 = !DILocation(line: 1440, column: 7, scope: !4683)
!4701 = !DILocation(line: 1440, column: 36, scope: !4683)
!4702 = !DILocation(line: 1441, column: 5, scope: !4683)
!4703 = !DILocation(line: 1444, column: 47, scope: !4599)
!4704 = !DILocation(line: 1444, column: 30, scope: !4599)
!4705 = !DILocation(line: 1444, column: 8, scope: !4599)
!4706 = !DILocation(line: 1444, column: 6, scope: !4599)
!4707 = !DILocation(line: 1445, column: 22, scope: !4599)
!4708 = !DILocation(line: 1445, column: 9, scope: !4599)
!4709 = !DILocation(line: 1446, column: 27, scope: !4599)
!4710 = !DILocation(line: 1446, column: 3, scope: !4599)
!4711 = !DILocation(line: 1449, column: 3, scope: !4599)
!4712 = !DILocation(line: 1450, column: 26, scope: !4599)
!4713 = !DILocation(line: 1450, column: 32, scope: !4599)
!4714 = !DILocation(line: 1450, column: 15, scope: !4599)
!4715 = !DILocation(line: 1450, column: 13, scope: !4599)
!4716 = !DILocation(line: 1452, column: 27, scope: !4599)
!4717 = !DILocation(line: 1452, column: 10, scope: !4599)
!4718 = !DILocation(line: 1452, column: 8, scope: !4599)
!4719 = !DILocation(line: 1453, column: 15, scope: !4599)
!4720 = !DILocation(line: 1453, column: 13, scope: !4599)
!4721 = !DILocation(line: 1454, column: 9, scope: !4599)
!4722 = !DILocation(line: 1454, column: 7, scope: !4599)
!4723 = !DILocation(line: 1455, column: 15, scope: !4599)
!4724 = !DILocation(line: 1455, column: 13, scope: !4599)
!4725 = !DILocation(line: 1456, column: 28, scope: !4599)
!4726 = !DILocation(line: 1456, column: 13, scope: !4599)
!4727 = !DILocation(line: 1456, column: 11, scope: !4599)
!4728 = !DILocation(line: 1457, column: 3, scope: !4599)
!4729 = !DILocation(line: 1459, column: 15, scope: !4599)
!4730 = !DILocation(line: 1459, column: 13, scope: !4599)
!4731 = !DILocation(line: 1461, column: 22, scope: !4599)
!4732 = !DILocation(line: 1461, column: 28, scope: !4599)
!4733 = !DILocation(line: 1461, column: 9, scope: !4599)
!4734 = !DILocation(line: 1462, column: 3, scope: !4599)
!4735 = !DILocation(line: 1463, column: 3, scope: !4599)
!4736 = !DILocation(line: 1466, column: 45, scope: !4599)
!4737 = !DILocation(line: 1466, column: 24, scope: !4599)
!4738 = !DILocation(line: 1466, column: 12, scope: !4599)
!4739 = !DILocation(line: 1466, column: 10, scope: !4599)
!4740 = !DILocation(line: 1467, column: 50, scope: !4599)
!4741 = !DILocation(line: 1467, column: 33, scope: !4599)
!4742 = !DILocation(line: 1467, column: 11, scope: !4599)
!4743 = !DILocation(line: 1467, column: 9, scope: !4599)
!4744 = !DILocation(line: 1468, column: 40, scope: !4599)
!4745 = !DILocation(line: 1468, column: 46, scope: !4599)
!4746 = !DILocation(line: 1468, column: 3, scope: !4599)
!4747 = !DILocation(line: 1469, column: 3, scope: !4599)
!4748 = !DILocation(line: 1471, column: 22, scope: !4599)
!4749 = !DILocation(line: 1471, column: 30, scope: !4599)
!4750 = !DILocation(line: 1471, column: 11, scope: !4599)
!4751 = !DILocation(line: 1471, column: 9, scope: !4599)
!4752 = !DILocation(line: 1472, column: 21, scope: !4599)
!4753 = !DILocation(line: 1472, column: 27, scope: !4599)
!4754 = !DILocation(line: 1472, column: 3, scope: !4599)
!4755 = !DILocation(line: 1472, column: 35, scope: !4599)
!4756 = !DILocation(line: 1472, column: 41, scope: !4599)
!4757 = !DILocation(line: 1473, column: 20, scope: !4599)
!4758 = !DILocation(line: 1473, column: 26, scope: !4599)
!4759 = !DILocation(line: 1473, column: 33, scope: !4599)
!4760 = !DILocation(line: 1473, column: 9, scope: !4599)
!4761 = !DILocation(line: 1473, column: 7, scope: !4599)
!4762 = !DILocation(line: 1474, column: 30, scope: !4763)
!4763 = distinct !DILexicalBlock(scope: !4599, file: !3, line: 1474, column: 3)
!4764 = !DILocation(line: 1474, column: 14, scope: !4763)
!4765 = !DILocation(line: 1474, column: 8, scope: !4763)
!4766 = !DILocation(line: 1474, column: 39, scope: !4767)
!4767 = distinct !DILexicalBlock(scope: !4763, file: !3, line: 1474, column: 3)
!4768 = !DILocation(line: 1474, column: 38, scope: !4767)
!4769 = !DILocation(line: 1474, column: 3, scope: !4763)
!4770 = !DILocalVariable(name: "locus", scope: !4771, file: !3, line: 1476, type: !667)
!4771 = distinct !DILexicalBlock(scope: !4767, file: !3, line: 1475, column: 5)
!4772 = !DILocation(line: 1476, column: 23, scope: !4771)
!4773 = !DILocalVariable(name: "def", scope: !4771, file: !3, line: 1477, type: !859)
!4774 = !DILocation(line: 1477, column: 12, scope: !4771)
!4775 = !DILocation(line: 1478, column: 13, scope: !4771)
!4776 = !DILocation(line: 1478, column: 11, scope: !4771)
!4777 = !DILocation(line: 1479, column: 14, scope: !4771)
!4778 = !DILocation(line: 1479, column: 12, scope: !4771)
!4779 = !DILocation(line: 1481, column: 13, scope: !4771)
!4780 = !DILocation(line: 1481, column: 11, scope: !4771)
!4781 = !DILocation(line: 1482, column: 50, scope: !4771)
!4782 = !DILocation(line: 1483, column: 29, scope: !4771)
!4783 = !DILocation(line: 1483, column: 8, scope: !4771)
!4784 = !DILocation(line: 1482, column: 15, scope: !4771)
!4785 = !DILocation(line: 1482, column: 13, scope: !4771)
!4786 = !DILocation(line: 1484, column: 20, scope: !4771)
!4787 = !DILocation(line: 1484, column: 25, scope: !4771)
!4788 = !DILocation(line: 1484, column: 30, scope: !4771)
!4789 = !DILocation(line: 1484, column: 37, scope: !4771)
!4790 = !DILocation(line: 1484, column: 7, scope: !4771)
!4791 = !DILocation(line: 1486, column: 13, scope: !4771)
!4792 = !DILocation(line: 1486, column: 11, scope: !4771)
!4793 = !DILocation(line: 1487, column: 50, scope: !4771)
!4794 = !DILocation(line: 1487, column: 73, scope: !4771)
!4795 = !DILocation(line: 1487, column: 56, scope: !4771)
!4796 = !DILocation(line: 1487, column: 15, scope: !4771)
!4797 = !DILocation(line: 1487, column: 13, scope: !4771)
!4798 = !DILocation(line: 1488, column: 20, scope: !4771)
!4799 = !DILocation(line: 1488, column: 25, scope: !4771)
!4800 = !DILocation(line: 1488, column: 30, scope: !4771)
!4801 = !DILocation(line: 1488, column: 35, scope: !4771)
!4802 = !DILocation(line: 1488, column: 7, scope: !4771)
!4803 = !DILocation(line: 1489, column: 5, scope: !4771)
!4804 = !DILocation(line: 1474, column: 56, scope: !4767)
!4805 = !DILocation(line: 1474, column: 3, scope: !4767)
!4806 = distinct !{!4806, !4769, !4807}
!4807 = !DILocation(line: 1489, column: 5, scope: !4763)
!4808 = !DILocation(line: 1490, column: 33, scope: !4599)
!4809 = !DILocation(line: 1490, column: 39, scope: !4599)
!4810 = !DILocation(line: 1490, column: 46, scope: !4599)
!4811 = !DILocation(line: 1490, column: 7, scope: !4599)
!4812 = !DILocation(line: 1490, column: 5, scope: !4599)
!4813 = !DILocation(line: 1491, column: 3, scope: !4599)
!4814 = !DILocation(line: 1491, column: 20, scope: !4599)
!4815 = !DILocation(line: 1494, column: 24, scope: !4599)
!4816 = !DILocation(line: 1494, column: 35, scope: !4599)
!4817 = !DILocation(line: 1494, column: 3, scope: !4599)
!4818 = !DILocation(line: 1495, column: 10, scope: !4599)
!4819 = !DILocation(line: 1495, column: 8, scope: !4599)
!4820 = !DILocation(line: 1496, column: 7, scope: !4599)
!4821 = !DILocation(line: 1496, column: 5, scope: !4599)
!4822 = !DILocation(line: 1497, column: 3, scope: !4599)
!4823 = !DILocation(line: 1497, column: 32, scope: !4599)
!4824 = !DILocation(line: 1499, column: 42, scope: !4599)
!4825 = !DILocation(line: 1499, column: 14, scope: !4599)
!4826 = !DILocation(line: 1499, column: 12, scope: !4599)
!4827 = !DILocation(line: 1500, column: 29, scope: !4599)
!4828 = !DILocation(line: 1500, column: 42, scope: !4599)
!4829 = !DILocation(line: 1500, column: 3, scope: !4599)
!4830 = !DILocation(line: 1501, column: 31, scope: !4599)
!4831 = !DILocation(line: 1501, column: 44, scope: !4599)
!4832 = !DILocation(line: 1501, column: 3, scope: !4599)
!4833 = !DILocation(line: 1502, column: 29, scope: !4599)
!4834 = !DILocation(line: 1502, column: 59, scope: !4599)
!4835 = !DILocation(line: 1502, column: 42, scope: !4599)
!4836 = !DILocation(line: 1502, column: 3, scope: !4599)
!4837 = !DILocation(line: 1503, column: 28, scope: !4599)
!4838 = !DILocation(line: 1503, column: 59, scope: !4599)
!4839 = !DILocation(line: 1503, column: 41, scope: !4599)
!4840 = !DILocation(line: 1503, column: 3, scope: !4599)
!4841 = !DILocation(line: 1504, column: 28, scope: !4599)
!4842 = !DILocation(line: 1504, column: 41, scope: !4599)
!4843 = !DILocation(line: 1504, column: 3, scope: !4599)
!4844 = !DILocation(line: 1508, column: 22, scope: !4599)
!4845 = !DILocation(line: 1508, column: 9, scope: !4599)
!4846 = !DILocation(line: 1509, column: 27, scope: !4599)
!4847 = !DILocation(line: 1509, column: 3, scope: !4599)
!4848 = !DILocation(line: 1510, column: 33, scope: !4599)
!4849 = !DILocation(line: 1510, column: 3, scope: !4599)
!4850 = !DILocation(line: 1510, column: 31, scope: !4599)
!4851 = !DILocation(line: 1513, column: 22, scope: !4599)
!4852 = !DILocation(line: 1513, column: 28, scope: !4599)
!4853 = !DILocation(line: 1513, column: 9, scope: !4599)
!4854 = !DILocation(line: 1514, column: 37, scope: !4599)
!4855 = !DILocation(line: 1514, column: 48, scope: !4599)
!4856 = !DILocation(line: 1514, column: 10, scope: !4599)
!4857 = !DILocation(line: 1514, column: 8, scope: !4599)
!4858 = !DILocation(line: 1515, column: 27, scope: !4599)
!4859 = !DILocation(line: 1515, column: 3, scope: !4599)
!4860 = !DILocation(line: 1516, column: 35, scope: !4599)
!4861 = !DILocation(line: 1516, column: 3, scope: !4599)
!4862 = !DILocation(line: 1516, column: 33, scope: !4599)
!4863 = !DILocation(line: 1519, column: 22, scope: !4599)
!4864 = !DILocation(line: 1519, column: 9, scope: !4599)
!4865 = !DILocation(line: 1520, column: 27, scope: !4599)
!4866 = !DILocation(line: 1520, column: 3, scope: !4599)
!4867 = !DILocation(line: 1522, column: 10, scope: !4599)
!4868 = !DILocation(line: 1522, column: 3, scope: !4599)
!4869 = !DILocalVariable(name: "buf", scope: !2258, file: !3, line: 1229, type: !4870)
!4870 = !DICompositeType(tag: DW_TAG_array_type, baseType: !767, size: 800, elements: !4871)
!4871 = !{!4872}
!4872 = !DISubrange(count: 100)
!4873 = !DILocation(line: 1229, column: 8, scope: !2258)
!4874 = !DILocalVariable(name: "tname", scope: !2258, file: !3, line: 1230, type: !834)
!4875 = !DILocation(line: 1230, column: 9, scope: !2258)
!4876 = !DILocalVariable(name: "decl", scope: !2258, file: !3, line: 1231, type: !859)
!4877 = !DILocation(line: 1231, column: 8, scope: !2258)
!4878 = !DILocalVariable(name: "type", scope: !2258, file: !3, line: 1231, type: !859)
!4879 = !DILocation(line: 1231, column: 14, scope: !2258)
!4880 = !DILocalVariable(name: "name", scope: !2258, file: !3, line: 1231, type: !859)
!4881 = !DILocation(line: 1231, column: 20, scope: !2258)
!4882 = !DILocalVariable(name: "t", scope: !2258, file: !3, line: 1231, type: !859)
!4883 = !DILocation(line: 1231, column: 26, scope: !2258)
!4884 = !DILocalVariable(name: "act_cfun", scope: !2258, file: !3, line: 1232, type: !1110)
!4885 = !DILocation(line: 1232, column: 20, scope: !2258)
!4886 = !DILocation(line: 1232, column: 31, scope: !2258)
!4887 = !DILocation(line: 1235, column: 13, scope: !2258)
!4888 = !DILocation(line: 1235, column: 37, scope: !2258)
!4889 = !DILocation(line: 1235, column: 3, scope: !2258)
!4890 = !DILocation(line: 1236, column: 3, scope: !2258)
!4891 = !DILocalVariable(name: "name_", scope: !4892, file: !3, line: 1236, type: !4893)
!4892 = distinct !DILexicalBlock(scope: !2258, file: !3, line: 1236, column: 3)
!4893 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !765)
!4894 = !DILocation(line: 1236, column: 3, scope: !4892)
!4895 = !DILocalVariable(name: "output_", scope: !4892, file: !3, line: 1236, type: !4896)
!4896 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !834)
!4897 = !DILocation(line: 1237, column: 22, scope: !2258)
!4898 = !DILocation(line: 1237, column: 3, scope: !2258)
!4899 = !DILocation(line: 1238, column: 26, scope: !2258)
!4900 = !DILocation(line: 1238, column: 10, scope: !2258)
!4901 = !DILocation(line: 1238, column: 8, scope: !2258)
!4902 = !DILocation(line: 1239, column: 36, scope: !2258)
!4903 = !DILocation(line: 1239, column: 52, scope: !2258)
!4904 = !DILocation(line: 1239, column: 10, scope: !2258)
!4905 = !DILocation(line: 1239, column: 8, scope: !2258)
!4906 = !DILocation(line: 1241, column: 10, scope: !2258)
!4907 = !DILocation(line: 1241, column: 8, scope: !2258)
!4908 = !DILocation(line: 1243, column: 8, scope: !4909)
!4909 = distinct !DILexicalBlock(scope: !2258, file: !3, line: 1243, column: 7)
!4910 = !DILocation(line: 1243, column: 7, scope: !2258)
!4911 = !DILocation(line: 1244, column: 30, scope: !4909)
!4912 = !DILocation(line: 1244, column: 28, scope: !4909)
!4913 = !DILocation(line: 1244, column: 5, scope: !4909)
!4914 = !DILocation(line: 1245, column: 19, scope: !2258)
!4915 = !DILocation(line: 1245, column: 43, scope: !2258)
!4916 = !DILocation(line: 1245, column: 3, scope: !2258)
!4917 = !DILocation(line: 1247, column: 3, scope: !2258)
!4918 = !DILocation(line: 1247, column: 22, scope: !2258)
!4919 = !DILocation(line: 1248, column: 3, scope: !2258)
!4920 = !DILocation(line: 1248, column: 20, scope: !2258)
!4921 = !DILocation(line: 1249, column: 3, scope: !2258)
!4922 = !DILocation(line: 1249, column: 26, scope: !2258)
!4923 = !DILocation(line: 1250, column: 3, scope: !2258)
!4924 = !DILocation(line: 1250, column: 25, scope: !2258)
!4925 = !DILocation(line: 1251, column: 3, scope: !2258)
!4926 = !DILocation(line: 1251, column: 22, scope: !2258)
!4927 = !DILocation(line: 1252, column: 3, scope: !2258)
!4928 = !DILocation(line: 1252, column: 27, scope: !2258)
!4929 = !DILocation(line: 1253, column: 3, scope: !2258)
!4930 = !DILocation(line: 1253, column: 24, scope: !2258)
!4931 = !DILocation(line: 1254, column: 3, scope: !2258)
!4932 = !DILocation(line: 1254, column: 23, scope: !2258)
!4933 = !DILocation(line: 1255, column: 25, scope: !2258)
!4934 = !DILocation(line: 1255, column: 3, scope: !2258)
!4935 = !DILocation(line: 1255, column: 23, scope: !2258)
!4936 = !DILocation(line: 1257, column: 7, scope: !2258)
!4937 = !DILocation(line: 1257, column: 5, scope: !2258)
!4938 = !DILocation(line: 1259, column: 3, scope: !2258)
!4939 = !DILocation(line: 1259, column: 23, scope: !2258)
!4940 = !DILocation(line: 1260, column: 3, scope: !2258)
!4941 = !DILocation(line: 1260, column: 22, scope: !2258)
!4942 = !DILocation(line: 1261, column: 24, scope: !2258)
!4943 = !DILocation(line: 1261, column: 3, scope: !2258)
!4944 = !DILocation(line: 1261, column: 22, scope: !2258)
!4945 = !DILocation(line: 1263, column: 7, scope: !2258)
!4946 = !DILocation(line: 1263, column: 5, scope: !2258)
!4947 = !DILocation(line: 1266, column: 3, scope: !2258)
!4948 = !DILocation(line: 1266, column: 23, scope: !2258)
!4949 = !DILocation(line: 1267, column: 23, scope: !2258)
!4950 = !DILocation(line: 1267, column: 3, scope: !2258)
!4951 = !DILocation(line: 1267, column: 21, scope: !2258)
!4952 = !DILocation(line: 1268, column: 22, scope: !2258)
!4953 = !DILocation(line: 1268, column: 3, scope: !2258)
!4954 = !DILocation(line: 1268, column: 20, scope: !2258)
!4955 = !DILocation(line: 1269, column: 3, scope: !2258)
!4956 = !DILocation(line: 1269, column: 17, scope: !2258)
!4957 = !DILocation(line: 1270, column: 27, scope: !2258)
!4958 = !DILocation(line: 1270, column: 3, scope: !2258)
!4959 = !DILocation(line: 1270, column: 25, scope: !2258)
!4960 = !DILocation(line: 1272, column: 29, scope: !2258)
!4961 = !DILocation(line: 1272, column: 3, scope: !2258)
!4962 = !DILocation(line: 1276, column: 13, scope: !2258)
!4963 = !DILocation(line: 1276, column: 3, scope: !2258)
!4964 = !DILocation(line: 1278, column: 10, scope: !2258)
!4965 = !DILocation(line: 1278, column: 3, scope: !2258)
!4966 = distinct !DISubprogram(name: "create_call_for_reduction", scope: !3, file: !3, line: 909, type: !4967, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!4967 = !DISubroutineType(types: !4968)
!4968 = !{null, !1307, !1154, !2232}
!4969 = !DILocalVariable(name: "loop", arg: 1, scope: !4966, file: !3, line: 909, type: !1307)
!4970 = !DILocation(line: 909, column: 41, scope: !4966)
!4971 = !DILocalVariable(name: "reduction_list", arg: 2, scope: !4966, file: !3, line: 909, type: !1154)
!4972 = !DILocation(line: 909, column: 54, scope: !4966)
!4973 = !DILocalVariable(name: "ld_st_data", arg: 3, scope: !4966, file: !3, line: 910, type: !2232)
!4974 = !DILocation(line: 910, column: 25, scope: !4966)
!4975 = !DILocation(line: 912, column: 18, scope: !4966)
!4976 = !DILocation(line: 912, column: 63, scope: !4966)
!4977 = !DILocation(line: 912, column: 3, scope: !4966)
!4978 = !DILocation(line: 914, column: 25, scope: !4966)
!4979 = !DILocation(line: 914, column: 54, scope: !4966)
!4980 = !DILocation(line: 914, column: 3, scope: !4966)
!4981 = !DILocation(line: 914, column: 15, scope: !4966)
!4982 = !DILocation(line: 914, column: 23, scope: !4966)
!4983 = !DILocation(line: 915, column: 18, scope: !4966)
!4984 = !DILocation(line: 915, column: 63, scope: !4966)
!4985 = !DILocation(line: 915, column: 3, scope: !4966)
!4986 = !DILocation(line: 916, column: 1, scope: !4966)
!4987 = distinct !DISubprogram(name: "single_succ", scope: !135, file: !135, line: 663, type: !4988, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!4988 = !DISubroutineType(types: !4989)
!4989 = !{!1122, !4990}
!4990 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !675, line: 112, baseType: !4991)
!4991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4992, size: 64)
!4992 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !698)
!4993 = !DILocalVariable(name: "bb", arg: 1, scope: !4987, file: !135, line: 663, type: !4990)
!4994 = !DILocation(line: 663, column: 32, scope: !4987)
!4995 = !DILocation(line: 665, column: 28, scope: !4987)
!4996 = !DILocation(line: 665, column: 10, scope: !4987)
!4997 = !DILocation(line: 665, column: 33, scope: !4987)
!4998 = !DILocation(line: 665, column: 3, scope: !4987)
!4999 = distinct !DISubprogram(name: "single_succ_edge", scope: !135, file: !135, line: 643, type: !5000, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5000 = !DISubroutineType(types: !5001)
!5001 = !{!713, !4990}
!5002 = !DILocalVariable(name: "bb", arg: 1, scope: !4999, file: !135, line: 643, type: !4990)
!5003 = !DILocation(line: 643, column: 37, scope: !4999)
!5004 = !DILocation(line: 645, column: 3, scope: !4999)
!5005 = !DILocation(line: 646, column: 10, scope: !4999)
!5006 = !DILocation(line: 646, column: 3, scope: !4999)
!5007 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !419, file: !419, line: 2241, type: !3829, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5008 = !DILocalVariable(name: "gs", arg: 1, scope: !5007, file: !419, line: 2241, type: !3663)
!5009 = !DILocation(line: 2241, column: 31, scope: !5007)
!5010 = !DILocation(line: 2244, column: 21, scope: !5007)
!5011 = !DILocation(line: 2244, column: 10, scope: !5007)
!5012 = !DILocation(line: 2244, column: 3, scope: !5007)
!5013 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !419, file: !419, line: 2271, type: !3829, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5014 = !DILocalVariable(name: "gs", arg: 1, scope: !5013, file: !419, line: 2271, type: !3663)
!5015 = !DILocation(line: 2271, column: 31, scope: !5013)
!5016 = !DILocation(line: 2274, column: 21, scope: !5013)
!5017 = !DILocation(line: 2274, column: 10, scope: !5013)
!5018 = !DILocation(line: 2274, column: 3, scope: !5013)
!5019 = distinct !DISubprogram(name: "make_ssa_name", scope: !3408, file: !3408, line: 1245, type: !5020, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5020 = !DISubroutineType(types: !5021)
!5021 = !{!859, !859, !674}
!5022 = !DILocalVariable(name: "var", arg: 1, scope: !5019, file: !3408, line: 1245, type: !859)
!5023 = !DILocation(line: 1245, column: 21, scope: !5019)
!5024 = !DILocalVariable(name: "stmt", arg: 2, scope: !5019, file: !3408, line: 1245, type: !674)
!5025 = !DILocation(line: 1245, column: 33, scope: !5019)
!5026 = !DILocation(line: 1247, column: 28, scope: !5019)
!5027 = !DILocation(line: 1247, column: 34, scope: !5019)
!5028 = !DILocation(line: 1247, column: 39, scope: !5019)
!5029 = !DILocation(line: 1247, column: 10, scope: !5019)
!5030 = !DILocation(line: 1247, column: 3, scope: !5019)
!5031 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !419, file: !419, line: 2261, type: !5032, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5032 = !DISubroutineType(types: !5033)
!5033 = !{null, !674, !859}
!5034 = !DILocalVariable(name: "gs", arg: 1, scope: !5031, file: !419, line: 2261, type: !674)
!5035 = !DILocation(line: 2261, column: 29, scope: !5031)
!5036 = !DILocalVariable(name: "lhs", arg: 2, scope: !5031, file: !419, line: 2261, type: !859)
!5037 = !DILocation(line: 2261, column: 38, scope: !5031)
!5038 = !DILocation(line: 2264, column: 18, scope: !5031)
!5039 = !DILocation(line: 2264, column: 25, scope: !5031)
!5040 = !DILocation(line: 2264, column: 3, scope: !5031)
!5041 = !DILocation(line: 2265, column: 1, scope: !5031)
!5042 = distinct !DISubprogram(name: "update_stmt", scope: !419, file: !419, line: 1456, type: !5043, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5043 = !DISubroutineType(types: !5044)
!5044 = !{null, !674}
!5045 = !DILocalVariable(name: "s", arg: 1, scope: !5042, file: !419, line: 1456, type: !674)
!5046 = !DILocation(line: 1456, column: 21, scope: !5042)
!5047 = !DILocation(line: 1458, column: 23, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !5042, file: !419, line: 1458, column: 7)
!5049 = !DILocation(line: 1458, column: 7, scope: !5048)
!5050 = !DILocation(line: 1458, column: 7, scope: !5042)
!5051 = !DILocation(line: 1460, column: 28, scope: !5052)
!5052 = distinct !DILexicalBlock(scope: !5048, file: !419, line: 1459, column: 5)
!5053 = !DILocation(line: 1460, column: 7, scope: !5052)
!5054 = !DILocation(line: 1461, column: 29, scope: !5052)
!5055 = !DILocation(line: 1461, column: 7, scope: !5052)
!5056 = !DILocation(line: 1462, column: 5, scope: !5052)
!5057 = !DILocation(line: 1463, column: 1, scope: !5042)
!5058 = distinct !DISubprogram(name: "gsi_after_labels", scope: !419, file: !419, line: 4510, type: !5059, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5059 = !DISubroutineType(types: !5060)
!5060 = !{!2200, !1122}
!5061 = !DILocalVariable(name: "bb", arg: 1, scope: !5058, file: !419, line: 4510, type: !1122)
!5062 = !DILocation(line: 4510, column: 31, scope: !5058)
!5063 = !DILocalVariable(name: "gsi", scope: !5058, file: !419, line: 4512, type: !2200)
!5064 = !DILocation(line: 4512, column: 24, scope: !5058)
!5065 = !DILocation(line: 4512, column: 44, scope: !5058)
!5066 = !DILocation(line: 4512, column: 30, scope: !5058)
!5067 = !DILocation(line: 4514, column: 3, scope: !5058)
!5068 = !DILocation(line: 4514, column: 11, scope: !5058)
!5069 = !DILocation(line: 4514, column: 27, scope: !5058)
!5070 = !DILocation(line: 4514, column: 43, scope: !5058)
!5071 = !DILocation(line: 4514, column: 30, scope: !5058)
!5072 = !DILocation(line: 4514, column: 59, scope: !5058)
!5073 = !DILocation(line: 0, scope: !5058)
!5074 = !DILocation(line: 4515, column: 5, scope: !5058)
!5075 = distinct !{!5075, !5067, !5076}
!5076 = !DILocation(line: 4515, column: 19, scope: !5058)
!5077 = !DILocation(line: 4517, column: 3, scope: !5058)
!5078 = distinct !DISubprogram(name: "single_succ_p", scope: !135, file: !135, line: 626, type: !5079, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5079 = !DISubroutineType(types: !5080)
!5080 = !{!972, !4990}
!5081 = !DILocalVariable(name: "bb", arg: 1, scope: !5078, file: !135, line: 626, type: !4990)
!5082 = !DILocation(line: 626, column: 34, scope: !5078)
!5083 = !DILocation(line: 628, column: 10, scope: !5078)
!5084 = !DILocation(line: 628, column: 33, scope: !5078)
!5085 = !DILocation(line: 628, column: 3, scope: !5078)
!5086 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !135, file: !135, line: 150, type: !5087, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5087 = !DISubroutineType(types: !5088)
!5088 = !{!713, !5089, !7}
!5089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5090, size: 64)
!5090 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !706)
!5091 = !DILocalVariable(name: "vec_", arg: 1, scope: !5086, file: !135, line: 150, type: !5089)
!5092 = !DILocation(line: 150, column: 1, scope: !5086)
!5093 = !DILocalVariable(name: "ix_", arg: 2, scope: !5086, file: !135, line: 150, type: !7)
!5094 = !DILocation(line: 0, scope: !5086)
!5095 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !135, file: !135, line: 150, type: !5096, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5096 = !DISubroutineType(types: !5097)
!5097 = !{!7, !5089}
!5098 = !DILocalVariable(name: "vec_", arg: 1, scope: !5095, file: !135, line: 150, type: !5089)
!5099 = !DILocation(line: 150, column: 1, scope: !5095)
!5100 = distinct !DISubprogram(name: "gimple_set_op", scope: !419, file: !419, line: 1663, type: !5101, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5101 = !DISubroutineType(types: !5102)
!5102 = !{null, !674, !7, !859}
!5103 = !DILocalVariable(name: "gs", arg: 1, scope: !5100, file: !419, line: 1663, type: !674)
!5104 = !DILocation(line: 1663, column: 23, scope: !5100)
!5105 = !DILocalVariable(name: "i", arg: 2, scope: !5100, file: !419, line: 1663, type: !7)
!5106 = !DILocation(line: 1663, column: 36, scope: !5100)
!5107 = !DILocalVariable(name: "op", arg: 3, scope: !5100, file: !419, line: 1663, type: !859)
!5108 = !DILocation(line: 1663, column: 44, scope: !5100)
!5109 = !DILocation(line: 1665, column: 3, scope: !5100)
!5110 = !DILocation(line: 1671, column: 24, scope: !5100)
!5111 = !DILocation(line: 1671, column: 15, scope: !5100)
!5112 = !DILocation(line: 1671, column: 3, scope: !5100)
!5113 = !DILocation(line: 1671, column: 19, scope: !5100)
!5114 = !DILocation(line: 1671, column: 22, scope: !5100)
!5115 = !DILocation(line: 1672, column: 1, scope: !5100)
!5116 = distinct !DISubprogram(name: "gimple_num_ops", scope: !419, file: !419, line: 1596, type: !5117, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5117 = !DISubroutineType(types: !5118)
!5118 = !{!7, !3663}
!5119 = !DILocalVariable(name: "gs", arg: 1, scope: !5116, file: !419, line: 1596, type: !3663)
!5120 = !DILocation(line: 1596, column: 30, scope: !5116)
!5121 = !DILocation(line: 1598, column: 10, scope: !5116)
!5122 = !DILocation(line: 1598, column: 14, scope: !5116)
!5123 = !DILocation(line: 1598, column: 21, scope: !5116)
!5124 = !DILocation(line: 1598, column: 3, scope: !5116)
!5125 = distinct !DISubprogram(name: "gsi_start_bb", scope: !419, file: !419, line: 4418, type: !5059, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5126 = !DILocalVariable(name: "bb", arg: 1, scope: !5125, file: !419, line: 4418, type: !1122)
!5127 = !DILocation(line: 4418, column: 27, scope: !5125)
!5128 = !DILocalVariable(name: "i", scope: !5125, file: !419, line: 4420, type: !2200)
!5129 = !DILocation(line: 4420, column: 24, scope: !5125)
!5130 = !DILocalVariable(name: "seq", scope: !5125, file: !419, line: 4421, type: !723)
!5131 = !DILocation(line: 4421, column: 14, scope: !5125)
!5132 = !DILocation(line: 4423, column: 17, scope: !5125)
!5133 = !DILocation(line: 4423, column: 9, scope: !5125)
!5134 = !DILocation(line: 4423, column: 7, scope: !5125)
!5135 = !DILocation(line: 4424, column: 29, scope: !5125)
!5136 = !DILocation(line: 4424, column: 11, scope: !5125)
!5137 = !DILocation(line: 4424, column: 5, scope: !5125)
!5138 = !DILocation(line: 4424, column: 9, scope: !5125)
!5139 = !DILocation(line: 4425, column: 11, scope: !5125)
!5140 = !DILocation(line: 4425, column: 5, scope: !5125)
!5141 = !DILocation(line: 4425, column: 9, scope: !5125)
!5142 = !DILocation(line: 4426, column: 10, scope: !5125)
!5143 = !DILocation(line: 4426, column: 5, scope: !5125)
!5144 = !DILocation(line: 4426, column: 8, scope: !5125)
!5145 = !DILocation(line: 4428, column: 3, scope: !5125)
!5146 = distinct !DISubprogram(name: "bb_seq", scope: !419, file: !419, line: 237, type: !5147, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5147 = !DISubroutineType(types: !5148)
!5148 = !{!723, !4990}
!5149 = !DILocalVariable(name: "bb", arg: 1, scope: !5146, file: !419, line: 237, type: !4990)
!5150 = !DILocation(line: 237, column: 27, scope: !5146)
!5151 = !DILocation(line: 239, column: 13, scope: !5146)
!5152 = !DILocation(line: 239, column: 17, scope: !5146)
!5153 = !DILocation(line: 239, column: 23, scope: !5146)
!5154 = !DILocation(line: 239, column: 33, scope: !5146)
!5155 = !DILocation(line: 239, column: 36, scope: !5146)
!5156 = !DILocation(line: 239, column: 40, scope: !5146)
!5157 = !DILocation(line: 239, column: 43, scope: !5146)
!5158 = !DILocation(line: 239, column: 10, scope: !5146)
!5159 = !DILocation(line: 239, column: 53, scope: !5146)
!5160 = !DILocation(line: 239, column: 57, scope: !5146)
!5161 = !DILocation(line: 239, column: 60, scope: !5146)
!5162 = !DILocation(line: 239, column: 68, scope: !5146)
!5163 = !DILocation(line: 239, column: 3, scope: !5146)
!5164 = distinct !DISubprogram(name: "gimple_seq_first", scope: !419, file: !419, line: 159, type: !5165, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5165 = !DISubroutineType(types: !5166)
!5166 = !{!728, !5167}
!5167 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !675, line: 67, baseType: !5168)
!5168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5169, size: 64)
!5169 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !725)
!5170 = !DILocalVariable(name: "s", arg: 1, scope: !5164, file: !419, line: 159, type: !5167)
!5171 = !DILocation(line: 159, column: 36, scope: !5164)
!5172 = !DILocation(line: 161, column: 10, scope: !5164)
!5173 = !DILocation(line: 161, column: 14, scope: !5164)
!5174 = !DILocation(line: 161, column: 17, scope: !5164)
!5175 = !DILocation(line: 161, column: 3, scope: !5164)
!5176 = distinct !DISubprogram(name: "gimple_location", scope: !419, file: !419, line: 1139, type: !5177, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5177 = !DISubroutineType(types: !5178)
!5178 = !{!693, !3663}
!5179 = !DILocalVariable(name: "g", arg: 1, scope: !5176, file: !419, line: 1139, type: !3663)
!5180 = !DILocation(line: 1139, column: 31, scope: !5176)
!5181 = !DILocation(line: 1141, column: 10, scope: !5176)
!5182 = !DILocation(line: 1141, column: 13, scope: !5176)
!5183 = !DILocation(line: 1141, column: 20, scope: !5176)
!5184 = !DILocation(line: 1141, column: 3, scope: !5176)
!5185 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !419, file: !419, line: 1694, type: !3829, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5186 = !DILocalVariable(name: "gs", arg: 1, scope: !5185, file: !419, line: 1694, type: !3663)
!5187 = !DILocation(line: 1694, column: 33, scope: !5185)
!5188 = !DILocation(line: 1697, column: 21, scope: !5185)
!5189 = !DILocation(line: 1697, column: 10, scope: !5185)
!5190 = !DILocation(line: 1697, column: 3, scope: !5185)
!5191 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !3408, file: !3408, line: 233, type: !5192, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5192 = !DISubroutineType(types: !5193)
!5193 = !{null, !2052, !859}
!5194 = !DILocalVariable(name: "use", arg: 1, scope: !5191, file: !3408, line: 233, type: !2052)
!5195 = !DILocation(line: 233, column: 37, scope: !5191)
!5196 = !DILocalVariable(name: "val", arg: 2, scope: !5191, file: !3408, line: 233, type: !859)
!5197 = !DILocation(line: 233, column: 47, scope: !5191)
!5198 = !DILocation(line: 235, column: 19, scope: !5191)
!5199 = !DILocation(line: 235, column: 3, scope: !5191)
!5200 = !DILocation(line: 236, column: 17, scope: !5191)
!5201 = !DILocation(line: 236, column: 5, scope: !5191)
!5202 = !DILocation(line: 236, column: 10, scope: !5191)
!5203 = !DILocation(line: 236, column: 15, scope: !5191)
!5204 = !DILocation(line: 237, column: 17, scope: !5191)
!5205 = !DILocation(line: 237, column: 22, scope: !5191)
!5206 = !DILocation(line: 237, column: 3, scope: !5191)
!5207 = !DILocation(line: 238, column: 1, scope: !5191)
!5208 = distinct !DISubprogram(name: "delink_imm_use", scope: !3408, file: !3408, line: 188, type: !5209, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5209 = !DISubroutineType(types: !5210)
!5210 = !{null, !2053}
!5211 = !DILocalVariable(name: "linknode", arg: 1, scope: !5208, file: !3408, line: 188, type: !2053)
!5212 = !DILocation(line: 188, column: 36, scope: !5208)
!5213 = !DILocation(line: 191, column: 7, scope: !5214)
!5214 = distinct !DILexicalBlock(scope: !5208, file: !3408, line: 191, column: 7)
!5215 = !DILocation(line: 191, column: 17, scope: !5214)
!5216 = !DILocation(line: 191, column: 22, scope: !5214)
!5217 = !DILocation(line: 191, column: 7, scope: !5208)
!5218 = !DILocation(line: 192, column: 5, scope: !5214)
!5219 = !DILocation(line: 194, column: 26, scope: !5208)
!5220 = !DILocation(line: 194, column: 36, scope: !5208)
!5221 = !DILocation(line: 194, column: 3, scope: !5208)
!5222 = !DILocation(line: 194, column: 13, scope: !5208)
!5223 = !DILocation(line: 194, column: 19, scope: !5208)
!5224 = !DILocation(line: 194, column: 24, scope: !5208)
!5225 = !DILocation(line: 195, column: 26, scope: !5208)
!5226 = !DILocation(line: 195, column: 36, scope: !5208)
!5227 = !DILocation(line: 195, column: 3, scope: !5208)
!5228 = !DILocation(line: 195, column: 13, scope: !5208)
!5229 = !DILocation(line: 195, column: 19, scope: !5208)
!5230 = !DILocation(line: 195, column: 24, scope: !5208)
!5231 = !DILocation(line: 196, column: 3, scope: !5208)
!5232 = !DILocation(line: 196, column: 13, scope: !5208)
!5233 = !DILocation(line: 196, column: 18, scope: !5208)
!5234 = !DILocation(line: 197, column: 3, scope: !5208)
!5235 = !DILocation(line: 197, column: 13, scope: !5208)
!5236 = !DILocation(line: 197, column: 18, scope: !5208)
!5237 = !DILocation(line: 198, column: 1, scope: !5208)
!5238 = distinct !DISubprogram(name: "link_imm_use", scope: !3408, file: !3408, line: 214, type: !5239, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5239 = !DISubroutineType(types: !5240)
!5240 = !{null, !2053, !859}
!5241 = !DILocalVariable(name: "linknode", arg: 1, scope: !5238, file: !3408, line: 214, type: !2053)
!5242 = !DILocation(line: 214, column: 34, scope: !5238)
!5243 = !DILocalVariable(name: "def", arg: 2, scope: !5238, file: !3408, line: 214, type: !859)
!5244 = !DILocation(line: 214, column: 49, scope: !5238)
!5245 = !DILocalVariable(name: "root", scope: !5238, file: !3408, line: 216, type: !2053)
!5246 = !DILocation(line: 216, column: 22, scope: !5238)
!5247 = !DILocation(line: 218, column: 8, scope: !5248)
!5248 = distinct !DILexicalBlock(scope: !5238, file: !3408, line: 218, column: 7)
!5249 = !DILocation(line: 218, column: 12, scope: !5248)
!5250 = !DILocation(line: 218, column: 15, scope: !5248)
!5251 = !DILocation(line: 218, column: 31, scope: !5248)
!5252 = !DILocation(line: 218, column: 7, scope: !5238)
!5253 = !DILocation(line: 219, column: 5, scope: !5248)
!5254 = !DILocation(line: 219, column: 15, scope: !5248)
!5255 = !DILocation(line: 219, column: 20, scope: !5248)
!5256 = !DILocation(line: 222, column: 16, scope: !5257)
!5257 = distinct !DILexicalBlock(scope: !5248, file: !3408, line: 221, column: 5)
!5258 = !DILocation(line: 222, column: 12, scope: !5257)
!5259 = !DILocation(line: 227, column: 29, scope: !5257)
!5260 = !DILocation(line: 227, column: 39, scope: !5257)
!5261 = !DILocation(line: 227, column: 7, scope: !5257)
!5262 = !DILocation(line: 229, column: 1, scope: !5238)
!5263 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !3408, file: !3408, line: 202, type: !5264, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5264 = !DISubroutineType(types: !5265)
!5265 = !{null, !2053, !2053}
!5266 = !DILocalVariable(name: "linknode", arg: 1, scope: !5263, file: !3408, line: 202, type: !2053)
!5267 = !DILocation(line: 202, column: 42, scope: !5263)
!5268 = !DILocalVariable(name: "list", arg: 2, scope: !5263, file: !3408, line: 202, type: !2053)
!5269 = !DILocation(line: 202, column: 71, scope: !5263)
!5270 = !DILocation(line: 206, column: 20, scope: !5263)
!5271 = !DILocation(line: 206, column: 3, scope: !5263)
!5272 = !DILocation(line: 206, column: 13, scope: !5263)
!5273 = !DILocation(line: 206, column: 18, scope: !5263)
!5274 = !DILocation(line: 207, column: 20, scope: !5263)
!5275 = !DILocation(line: 207, column: 26, scope: !5263)
!5276 = !DILocation(line: 207, column: 3, scope: !5263)
!5277 = !DILocation(line: 207, column: 13, scope: !5263)
!5278 = !DILocation(line: 207, column: 18, scope: !5263)
!5279 = !DILocation(line: 208, column: 22, scope: !5263)
!5280 = !DILocation(line: 208, column: 3, scope: !5263)
!5281 = !DILocation(line: 208, column: 9, scope: !5263)
!5282 = !DILocation(line: 208, column: 15, scope: !5263)
!5283 = !DILocation(line: 208, column: 20, scope: !5263)
!5284 = !DILocation(line: 209, column: 16, scope: !5263)
!5285 = !DILocation(line: 209, column: 3, scope: !5263)
!5286 = !DILocation(line: 209, column: 9, scope: !5263)
!5287 = !DILocation(line: 209, column: 14, scope: !5263)
!5288 = !DILocation(line: 210, column: 1, scope: !5263)
!5289 = distinct !DISubprogram(name: "VEC_basic_block_heap_alloc", scope: !135, file: !135, line: 283, type: !5290, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5290 = !DISubroutineType(types: !5291)
!5291 = !{!2188, !762}
!5292 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5289, file: !135, line: 283, type: !762)
!5293 = !DILocation(line: 283, column: 1, scope: !5289)
!5294 = distinct !DISubprogram(name: "VEC_basic_block_base_iterate", scope: !135, file: !135, line: 281, type: !5295, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5295 = !DISubroutineType(types: !5296)
!5296 = !{!762, !5297, !7, !2187}
!5297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5298, size: 64)
!5298 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1130)
!5299 = !DILocalVariable(name: "vec_", arg: 1, scope: !5294, file: !135, line: 281, type: !5297)
!5300 = !DILocation(line: 281, column: 1, scope: !5294)
!5301 = !DILocalVariable(name: "ix_", arg: 2, scope: !5294, file: !135, line: 281, type: !7)
!5302 = !DILocalVariable(name: "ptr", arg: 3, scope: !5294, file: !135, line: 281, type: !2187)
!5303 = !DILocation(line: 281, column: 1, scope: !5304)
!5304 = distinct !DILexicalBlock(scope: !5294, file: !135, line: 281, column: 1)
!5305 = !DILocation(line: 281, column: 1, scope: !5306)
!5306 = distinct !DILexicalBlock(scope: !5304, file: !135, line: 281, column: 1)
!5307 = !DILocation(line: 281, column: 1, scope: !5308)
!5308 = distinct !DILexicalBlock(scope: !5304, file: !135, line: 281, column: 1)
!5309 = distinct !DISubprogram(name: "eliminate_local_variables_stmt", scope: !3, file: !3, line: 508, type: !5310, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5310 = !DISubroutineType(types: !5311)
!5311 = !{null, !713, !674, !1154}
!5312 = !DILocalVariable(name: "entry", arg: 1, scope: !5309, file: !3, line: 508, type: !713)
!5313 = !DILocation(line: 508, column: 38, scope: !5309)
!5314 = !DILocalVariable(name: "stmt", arg: 2, scope: !5309, file: !3, line: 508, type: !674)
!5315 = !DILocation(line: 508, column: 52, scope: !5309)
!5316 = !DILocalVariable(name: "decl_address", arg: 3, scope: !5309, file: !3, line: 509, type: !1154)
!5317 = !DILocation(line: 509, column: 12, scope: !5309)
!5318 = !DILocalVariable(name: "dta", scope: !5309, file: !3, line: 511, type: !2194)
!5319 = !DILocation(line: 511, column: 19, scope: !5309)
!5320 = !DILocation(line: 513, column: 16, scope: !5309)
!5321 = !DILocation(line: 513, column: 3, scope: !5309)
!5322 = !DILocation(line: 514, column: 15, scope: !5309)
!5323 = !DILocation(line: 514, column: 7, scope: !5309)
!5324 = !DILocation(line: 514, column: 13, scope: !5309)
!5325 = !DILocation(line: 515, column: 22, scope: !5309)
!5326 = !DILocation(line: 515, column: 7, scope: !5309)
!5327 = !DILocation(line: 515, column: 20, scope: !5309)
!5328 = !DILocation(line: 516, column: 7, scope: !5309)
!5329 = !DILocation(line: 516, column: 15, scope: !5309)
!5330 = !DILocation(line: 518, column: 28, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5309, file: !3, line: 518, column: 7)
!5332 = !DILocation(line: 518, column: 7, scope: !5331)
!5333 = !DILocation(line: 518, column: 7, scope: !5309)
!5334 = !DILocation(line: 519, column: 5, scope: !5331)
!5335 = !DILocation(line: 522, column: 21, scope: !5331)
!5336 = !DILocation(line: 522, column: 61, scope: !5331)
!5337 = !DILocation(line: 522, column: 5, scope: !5331)
!5338 = !DILocation(line: 524, column: 11, scope: !5339)
!5339 = distinct !DILexicalBlock(scope: !5309, file: !3, line: 524, column: 7)
!5340 = !DILocation(line: 524, column: 7, scope: !5339)
!5341 = !DILocation(line: 524, column: 7, scope: !5309)
!5342 = !DILocation(line: 525, column: 18, scope: !5339)
!5343 = !DILocation(line: 525, column: 5, scope: !5339)
!5344 = !DILocation(line: 526, column: 1, scope: !5309)
!5345 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !135, file: !135, line: 283, type: !5346, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5346 = !DISubroutineType(types: !5347)
!5347 = !{null, !5348}
!5348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2188, size: 64)
!5349 = !DILocalVariable(name: "vec_", arg: 1, scope: !5345, file: !135, line: 283, type: !5348)
!5350 = !DILocation(line: 283, column: 1, scope: !5345)
!5351 = !DILocation(line: 283, column: 1, scope: !5352)
!5352 = distinct !DILexicalBlock(scope: !5345, file: !135, line: 283, column: 1)
!5353 = distinct !DISubprogram(name: "gimple_debug_bind_p", scope: !419, file: !419, line: 3257, type: !3864, scopeLine: 3258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5354 = !DILocalVariable(name: "s", arg: 1, scope: !5353, file: !419, line: 3257, type: !3663)
!5355 = !DILocation(line: 3257, column: 35, scope: !5353)
!5356 = !DILocation(line: 3259, column: 24, scope: !5357)
!5357 = distinct !DILexicalBlock(scope: !5353, file: !419, line: 3259, column: 7)
!5358 = !DILocation(line: 3259, column: 7, scope: !5357)
!5359 = !DILocation(line: 3259, column: 7, scope: !5353)
!5360 = !DILocation(line: 3260, column: 12, scope: !5357)
!5361 = !DILocation(line: 3260, column: 15, scope: !5357)
!5362 = !DILocation(line: 3260, column: 22, scope: !5357)
!5363 = !DILocation(line: 3260, column: 30, scope: !5357)
!5364 = !DILocation(line: 3260, column: 5, scope: !5357)
!5365 = !DILocation(line: 3262, column: 3, scope: !5353)
!5366 = !DILocation(line: 3263, column: 1, scope: !5353)
!5367 = distinct !DISubprogram(name: "gimple_debug_bind_get_value_ptr", scope: !419, file: !419, line: 3294, type: !3417, scopeLine: 3295, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5368 = !DILocalVariable(name: "dbg", arg: 1, scope: !5367, file: !419, line: 3294, type: !674)
!5369 = !DILocation(line: 3294, column: 41, scope: !5367)
!5370 = !DILocation(line: 3300, column: 25, scope: !5367)
!5371 = !DILocation(line: 3300, column: 10, scope: !5367)
!5372 = !DILocation(line: 3300, column: 3, scope: !5367)
!5373 = distinct !DISubprogram(name: "eliminate_local_variables_1", scope: !3, file: !3, line: 445, type: !5374, scopeLine: 446, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5374 = !DISubroutineType(types: !5375)
!5375 = !{!859, !1270, !2126, !849}
!5376 = !DILocalVariable(name: "tp", arg: 1, scope: !5373, file: !3, line: 445, type: !1270)
!5377 = !DILocation(line: 445, column: 36, scope: !5373)
!5378 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !5373, file: !3, line: 445, type: !2126)
!5379 = !DILocation(line: 445, column: 45, scope: !5373)
!5380 = !DILocalVariable(name: "data", arg: 3, scope: !5373, file: !3, line: 445, type: !849)
!5381 = !DILocation(line: 445, column: 66, scope: !5373)
!5382 = !DILocalVariable(name: "dta", scope: !5373, file: !3, line: 447, type: !5383)
!5383 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2193)
!5384 = !DILocation(line: 447, column: 26, scope: !5373)
!5385 = !DILocation(line: 447, column: 52, scope: !5373)
!5386 = !DILocation(line: 447, column: 32, scope: !5373)
!5387 = !DILocalVariable(name: "t", scope: !5373, file: !3, line: 448, type: !859)
!5388 = !DILocation(line: 448, column: 8, scope: !5373)
!5389 = !DILocation(line: 448, column: 13, scope: !5373)
!5390 = !DILocation(line: 448, column: 12, scope: !5373)
!5391 = !DILocalVariable(name: "var", scope: !5373, file: !3, line: 448, type: !859)
!5392 = !DILocation(line: 448, column: 17, scope: !5373)
!5393 = !DILocalVariable(name: "addr", scope: !5373, file: !3, line: 448, type: !859)
!5394 = !DILocation(line: 448, column: 22, scope: !5373)
!5395 = !DILocalVariable(name: "addr_type", scope: !5373, file: !3, line: 448, type: !859)
!5396 = !DILocation(line: 448, column: 28, scope: !5373)
!5397 = !DILocalVariable(name: "type", scope: !5373, file: !3, line: 448, type: !859)
!5398 = !DILocation(line: 448, column: 39, scope: !5373)
!5399 = !DILocalVariable(name: "obj", scope: !5373, file: !3, line: 448, type: !859)
!5400 = !DILocation(line: 448, column: 45, scope: !5373)
!5401 = !DILocation(line: 450, column: 7, scope: !5402)
!5402 = distinct !DILexicalBlock(scope: !5373, file: !3, line: 450, column: 7)
!5403 = !DILocation(line: 450, column: 7, scope: !5373)
!5404 = !DILocation(line: 452, column: 8, scope: !5405)
!5405 = distinct !DILexicalBlock(scope: !5402, file: !3, line: 451, column: 5)
!5406 = !DILocation(line: 452, column: 22, scope: !5405)
!5407 = !DILocation(line: 454, column: 12, scope: !5408)
!5408 = distinct !DILexicalBlock(scope: !5405, file: !3, line: 454, column: 11)
!5409 = !DILocation(line: 454, column: 26, scope: !5408)
!5410 = !DILocation(line: 454, column: 29, scope: !5408)
!5411 = !DILocation(line: 454, column: 11, scope: !5405)
!5412 = !DILocation(line: 455, column: 2, scope: !5408)
!5413 = !DILocation(line: 457, column: 14, scope: !5405)
!5414 = !DILocation(line: 457, column: 12, scope: !5405)
!5415 = !DILocation(line: 458, column: 39, scope: !5405)
!5416 = !DILocation(line: 458, column: 19, scope: !5405)
!5417 = !DILocation(line: 458, column: 17, scope: !5405)
!5418 = !DILocation(line: 459, column: 31, scope: !5405)
!5419 = !DILocation(line: 459, column: 34, scope: !5405)
!5420 = !DILocation(line: 459, column: 45, scope: !5405)
!5421 = !DILocation(line: 459, column: 50, scope: !5405)
!5422 = !DILocation(line: 459, column: 57, scope: !5405)
!5423 = !DILocation(line: 459, column: 62, scope: !5405)
!5424 = !DILocation(line: 459, column: 14, scope: !5405)
!5425 = !DILocation(line: 459, column: 12, scope: !5405)
!5426 = !DILocation(line: 460, column: 13, scope: !5405)
!5427 = !DILocation(line: 460, column: 8, scope: !5405)
!5428 = !DILocation(line: 460, column: 11, scope: !5405)
!5429 = !DILocation(line: 462, column: 7, scope: !5405)
!5430 = !DILocation(line: 462, column: 12, scope: !5405)
!5431 = !DILocation(line: 462, column: 20, scope: !5405)
!5432 = !DILocation(line: 463, column: 7, scope: !5405)
!5433 = !DILocation(line: 466, column: 7, scope: !5434)
!5434 = distinct !DILexicalBlock(scope: !5373, file: !3, line: 466, column: 7)
!5435 = !DILocation(line: 466, column: 21, scope: !5434)
!5436 = !DILocation(line: 466, column: 7, scope: !5373)
!5437 = !DILocation(line: 479, column: 27, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5439, file: !3, line: 479, column: 11)
!5439 = distinct !DILexicalBlock(scope: !5434, file: !3, line: 467, column: 5)
!5440 = !DILocation(line: 479, column: 12, scope: !5438)
!5441 = !DILocation(line: 479, column: 11, scope: !5439)
!5442 = !DILocation(line: 480, column: 2, scope: !5438)
!5443 = !DILocation(line: 482, column: 8, scope: !5439)
!5444 = !DILocation(line: 482, column: 22, scope: !5439)
!5445 = !DILocation(line: 483, column: 13, scope: !5439)
!5446 = !DILocation(line: 483, column: 11, scope: !5439)
!5447 = !DILocation(line: 484, column: 31, scope: !5439)
!5448 = !DILocation(line: 484, column: 13, scope: !5439)
!5449 = !DILocation(line: 484, column: 11, scope: !5439)
!5450 = !DILocation(line: 485, column: 12, scope: !5451)
!5451 = distinct !DILexicalBlock(scope: !5439, file: !3, line: 485, column: 11)
!5452 = !DILocation(line: 485, column: 16, scope: !5451)
!5453 = !DILocation(line: 485, column: 20, scope: !5451)
!5454 = !DILocation(line: 485, column: 36, scope: !5451)
!5455 = !DILocation(line: 485, column: 39, scope: !5451)
!5456 = !DILocation(line: 485, column: 11, scope: !5439)
!5457 = !DILocation(line: 486, column: 2, scope: !5451)
!5458 = !DILocation(line: 488, column: 19, scope: !5439)
!5459 = !DILocation(line: 488, column: 17, scope: !5439)
!5460 = !DILocation(line: 489, column: 31, scope: !5439)
!5461 = !DILocation(line: 489, column: 36, scope: !5439)
!5462 = !DILocation(line: 489, column: 47, scope: !5439)
!5463 = !DILocation(line: 489, column: 52, scope: !5439)
!5464 = !DILocation(line: 489, column: 59, scope: !5439)
!5465 = !DILocation(line: 489, column: 64, scope: !5439)
!5466 = !DILocation(line: 489, column: 14, scope: !5439)
!5467 = !DILocation(line: 489, column: 12, scope: !5439)
!5468 = !DILocation(line: 490, column: 13, scope: !5439)
!5469 = !DILocation(line: 490, column: 8, scope: !5439)
!5470 = !DILocation(line: 490, column: 11, scope: !5439)
!5471 = !DILocation(line: 492, column: 7, scope: !5439)
!5472 = !DILocation(line: 492, column: 12, scope: !5439)
!5473 = !DILocation(line: 492, column: 20, scope: !5439)
!5474 = !DILocation(line: 493, column: 7, scope: !5439)
!5475 = !DILocation(line: 496, column: 8, scope: !5476)
!5476 = distinct !DILexicalBlock(scope: !5373, file: !3, line: 496, column: 7)
!5477 = !DILocation(line: 496, column: 7, scope: !5373)
!5478 = !DILocation(line: 497, column: 6, scope: !5476)
!5479 = !DILocation(line: 497, column: 20, scope: !5476)
!5480 = !DILocation(line: 497, column: 5, scope: !5476)
!5481 = !DILocation(line: 499, column: 3, scope: !5373)
!5482 = !DILocation(line: 500, column: 1, scope: !5373)
!5483 = distinct !DISubprogram(name: "is_gimple_debug", scope: !419, file: !419, line: 3249, type: !3864, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5484 = !DILocalVariable(name: "gs", arg: 1, scope: !5483, file: !419, line: 3249, type: !3663)
!5485 = !DILocation(line: 3249, column: 31, scope: !5483)
!5486 = !DILocation(line: 3251, column: 23, scope: !5483)
!5487 = !DILocation(line: 3251, column: 10, scope: !5483)
!5488 = !DILocation(line: 3251, column: 27, scope: !5483)
!5489 = !DILocation(line: 3251, column: 3, scope: !5483)
!5490 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !419, file: !419, line: 1647, type: !5491, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5491 = !DISubroutineType(types: !5492)
!5492 = !{!1270, !3663, !7}
!5493 = !DILocalVariable(name: "gs", arg: 1, scope: !5490, file: !419, line: 1647, type: !3663)
!5494 = !DILocation(line: 1647, column: 29, scope: !5490)
!5495 = !DILocalVariable(name: "i", arg: 2, scope: !5490, file: !419, line: 1647, type: !7)
!5496 = !DILocation(line: 1647, column: 42, scope: !5490)
!5497 = !DILocation(line: 1649, column: 23, scope: !5498)
!5498 = distinct !DILexicalBlock(scope: !5490, file: !419, line: 1649, column: 7)
!5499 = !DILocation(line: 1649, column: 7, scope: !5498)
!5500 = !DILocation(line: 1649, column: 7, scope: !5490)
!5501 = !DILocation(line: 1654, column: 26, scope: !5502)
!5502 = distinct !DILexicalBlock(scope: !5498, file: !419, line: 1650, column: 5)
!5503 = !DILocation(line: 1654, column: 14, scope: !5502)
!5504 = !DILocation(line: 1654, column: 52, scope: !5502)
!5505 = !DILocation(line: 1654, column: 50, scope: !5502)
!5506 = !DILocation(line: 1654, column: 7, scope: !5502)
!5507 = !DILocation(line: 1657, column: 5, scope: !5498)
!5508 = !DILocation(line: 1658, column: 1, scope: !5490)
!5509 = distinct !DISubprogram(name: "take_address_of", scope: !3, file: !3, line: 321, type: !5510, scopeLine: 322, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5510 = !DISubroutineType(types: !5511)
!5511 = !{!859, !859, !859, !713, !1154}
!5512 = !DILocalVariable(name: "obj", arg: 1, scope: !5509, file: !3, line: 321, type: !859)
!5513 = !DILocation(line: 321, column: 23, scope: !5509)
!5514 = !DILocalVariable(name: "type", arg: 2, scope: !5509, file: !3, line: 321, type: !859)
!5515 = !DILocation(line: 321, column: 33, scope: !5509)
!5516 = !DILocalVariable(name: "entry", arg: 3, scope: !5509, file: !3, line: 321, type: !713)
!5517 = !DILocation(line: 321, column: 44, scope: !5509)
!5518 = !DILocalVariable(name: "decl_address", arg: 4, scope: !5509, file: !3, line: 321, type: !1154)
!5519 = !DILocation(line: 321, column: 58, scope: !5509)
!5520 = !DILocalVariable(name: "uid", scope: !5509, file: !3, line: 323, type: !762)
!5521 = !DILocation(line: 323, column: 7, scope: !5509)
!5522 = !DILocalVariable(name: "dslot", scope: !5509, file: !3, line: 324, type: !1177)
!5523 = !DILocation(line: 324, column: 10, scope: !5509)
!5524 = !DILocalVariable(name: "ielt", scope: !5509, file: !3, line: 325, type: !2219)
!5525 = !DILocation(line: 325, column: 23, scope: !5509)
!5526 = !DILocalVariable(name: "nielt", scope: !5509, file: !3, line: 325, type: !2218)
!5527 = !DILocation(line: 325, column: 30, scope: !5509)
!5528 = !DILocalVariable(name: "var_p", scope: !5509, file: !3, line: 326, type: !1270)
!5529 = !DILocation(line: 326, column: 9, scope: !5509)
!5530 = !DILocalVariable(name: "name", scope: !5509, file: !3, line: 326, type: !859)
!5531 = !DILocation(line: 326, column: 16, scope: !5509)
!5532 = !DILocalVariable(name: "bvar", scope: !5509, file: !3, line: 326, type: !859)
!5533 = !DILocation(line: 326, column: 22, scope: !5509)
!5534 = !DILocalVariable(name: "addr", scope: !5509, file: !3, line: 326, type: !859)
!5535 = !DILocation(line: 326, column: 28, scope: !5509)
!5536 = !DILocalVariable(name: "stmt", scope: !5509, file: !3, line: 327, type: !674)
!5537 = !DILocation(line: 327, column: 10, scope: !5509)
!5538 = !DILocalVariable(name: "stmts", scope: !5509, file: !3, line: 328, type: !723)
!5539 = !DILocation(line: 328, column: 14, scope: !5509)
!5540 = !DILocation(line: 332, column: 23, scope: !5509)
!5541 = !DILocation(line: 332, column: 9, scope: !5509)
!5542 = !DILocation(line: 332, column: 7, scope: !5509)
!5543 = !DILocation(line: 333, column: 14, scope: !5544)
!5544 = distinct !DILexicalBlock(scope: !5509, file: !3, line: 333, column: 3)
!5545 = !DILocation(line: 333, column: 8, scope: !5544)
!5546 = !DILocation(line: 334, column: 30, scope: !5547)
!5547 = distinct !DILexicalBlock(scope: !5544, file: !3, line: 333, column: 3)
!5548 = !DILocation(line: 334, column: 29, scope: !5547)
!5549 = !DILocation(line: 334, column: 8, scope: !5547)
!5550 = !DILocation(line: 333, column: 3, scope: !5544)
!5551 = !DILocation(line: 336, column: 5, scope: !5547)
!5552 = !DILocation(line: 335, column: 17, scope: !5547)
!5553 = !DILocation(line: 335, column: 14, scope: !5547)
!5554 = !DILocation(line: 333, column: 3, scope: !5547)
!5555 = distinct !{!5555, !5550, !5556}
!5556 = !DILocation(line: 336, column: 5, scope: !5544)
!5557 = !DILocation(line: 337, column: 9, scope: !5509)
!5558 = !DILocation(line: 337, column: 7, scope: !5509)
!5559 = !DILocation(line: 339, column: 14, scope: !5509)
!5560 = !DILocation(line: 339, column: 8, scope: !5509)
!5561 = !DILocation(line: 339, column: 12, scope: !5509)
!5562 = !DILocation(line: 340, column: 37, scope: !5509)
!5563 = !DILocation(line: 340, column: 51, scope: !5509)
!5564 = !DILocation(line: 340, column: 58, scope: !5509)
!5565 = !DILocation(line: 340, column: 11, scope: !5509)
!5566 = !DILocation(line: 340, column: 9, scope: !5509)
!5567 = !DILocation(line: 341, column: 9, scope: !5568)
!5568 = distinct !DILexicalBlock(scope: !5509, file: !3, line: 341, column: 7)
!5569 = !DILocation(line: 341, column: 8, scope: !5568)
!5570 = !DILocation(line: 341, column: 7, scope: !5509)
!5571 = !DILocation(line: 343, column: 27, scope: !5572)
!5572 = distinct !DILexicalBlock(scope: !5568, file: !3, line: 342, column: 5)
!5573 = !DILocation(line: 343, column: 26, scope: !5572)
!5574 = !DILocation(line: 343, column: 34, scope: !5572)
!5575 = !DILocation(line: 343, column: 14, scope: !5572)
!5576 = !DILocation(line: 343, column: 12, scope: !5572)
!5577 = !DILocation(line: 344, column: 30, scope: !5572)
!5578 = !DILocation(line: 344, column: 59, scope: !5572)
!5579 = !DILocation(line: 344, column: 58, scope: !5572)
!5580 = !DILocation(line: 344, column: 48, scope: !5572)
!5581 = !DILocation(line: 344, column: 14, scope: !5572)
!5582 = !DILocation(line: 344, column: 12, scope: !5572)
!5583 = !DILocation(line: 345, column: 27, scope: !5572)
!5584 = !DILocation(line: 345, column: 7, scope: !5572)
!5585 = !DILocation(line: 346, column: 14, scope: !5572)
!5586 = !DILocation(line: 346, column: 12, scope: !5572)
!5587 = !DILocation(line: 347, column: 29, scope: !5572)
!5588 = !DILocation(line: 347, column: 35, scope: !5572)
!5589 = !DILocation(line: 347, column: 14, scope: !5572)
!5590 = !DILocation(line: 347, column: 12, scope: !5572)
!5591 = !DILocation(line: 348, column: 30, scope: !5572)
!5592 = !DILocation(line: 348, column: 36, scope: !5572)
!5593 = !DILocation(line: 348, column: 7, scope: !5572)
!5594 = !DILocation(line: 349, column: 37, scope: !5572)
!5595 = !DILocation(line: 349, column: 44, scope: !5572)
!5596 = !DILocation(line: 349, column: 7, scope: !5572)
!5597 = !DILocation(line: 351, column: 15, scope: !5572)
!5598 = !DILocation(line: 351, column: 13, scope: !5572)
!5599 = !DILocation(line: 352, column: 20, scope: !5572)
!5600 = !DILocation(line: 352, column: 7, scope: !5572)
!5601 = !DILocation(line: 352, column: 14, scope: !5572)
!5602 = !DILocation(line: 352, column: 18, scope: !5572)
!5603 = !DILocation(line: 353, column: 19, scope: !5572)
!5604 = !DILocation(line: 353, column: 7, scope: !5572)
!5605 = !DILocation(line: 353, column: 14, scope: !5572)
!5606 = !DILocation(line: 353, column: 17, scope: !5572)
!5607 = !DILocation(line: 354, column: 16, scope: !5572)
!5608 = !DILocation(line: 354, column: 8, scope: !5572)
!5609 = !DILocation(line: 354, column: 14, scope: !5572)
!5610 = !DILocation(line: 355, column: 5, scope: !5572)
!5611 = !DILocation(line: 357, column: 38, scope: !5568)
!5612 = !DILocation(line: 357, column: 37, scope: !5568)
!5613 = !DILocation(line: 357, column: 13, scope: !5568)
!5614 = !DILocation(line: 357, column: 46, scope: !5568)
!5615 = !DILocation(line: 357, column: 10, scope: !5568)
!5616 = !DILocation(line: 359, column: 7, scope: !5617)
!5617 = distinct !DILexicalBlock(scope: !5509, file: !3, line: 359, column: 7)
!5618 = !DILocation(line: 359, column: 13, scope: !5617)
!5619 = !DILocation(line: 359, column: 7, scope: !5509)
!5620 = !DILocation(line: 361, column: 16, scope: !5621)
!5621 = distinct !DILexicalBlock(scope: !5617, file: !3, line: 360, column: 5)
!5622 = !DILocation(line: 361, column: 8, scope: !5621)
!5623 = !DILocation(line: 361, column: 14, scope: !5621)
!5624 = !DILocation(line: 362, column: 48, scope: !5621)
!5625 = !DILocation(line: 362, column: 53, scope: !5621)
!5626 = !DILocation(line: 362, column: 36, scope: !5621)
!5627 = !DILocation(line: 362, column: 14, scope: !5621)
!5628 = !DILocation(line: 362, column: 12, scope: !5621)
!5629 = !DILocation(line: 364, column: 32, scope: !5630)
!5630 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 364, column: 11)
!5631 = !DILocation(line: 364, column: 12, scope: !5630)
!5632 = !DILocation(line: 364, column: 11, scope: !5621)
!5633 = !DILocation(line: 365, column: 36, scope: !5630)
!5634 = !DILocation(line: 365, column: 43, scope: !5630)
!5635 = !DILocation(line: 365, column: 2, scope: !5630)
!5636 = !DILocation(line: 366, column: 5, scope: !5621)
!5637 = !DILocation(line: 368, column: 7, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5509, file: !3, line: 368, column: 7)
!5639 = !DILocation(line: 368, column: 27, scope: !5638)
!5640 = !DILocation(line: 368, column: 24, scope: !5638)
!5641 = !DILocation(line: 368, column: 7, scope: !5509)
!5642 = !DILocation(line: 370, column: 36, scope: !5643)
!5643 = distinct !DILexicalBlock(scope: !5638, file: !3, line: 369, column: 5)
!5644 = !DILocation(line: 370, column: 14, scope: !5643)
!5645 = !DILocation(line: 370, column: 12, scope: !5643)
!5646 = !DILocation(line: 372, column: 32, scope: !5647)
!5647 = distinct !DILexicalBlock(scope: !5643, file: !3, line: 372, column: 11)
!5648 = !DILocation(line: 372, column: 12, scope: !5647)
!5649 = !DILocation(line: 372, column: 11, scope: !5643)
!5650 = !DILocation(line: 373, column: 36, scope: !5647)
!5651 = !DILocation(line: 373, column: 43, scope: !5647)
!5652 = !DILocation(line: 373, column: 2, scope: !5647)
!5653 = !DILocation(line: 374, column: 5, scope: !5643)
!5654 = !DILocation(line: 376, column: 10, scope: !5509)
!5655 = !DILocation(line: 376, column: 3, scope: !5509)
!5656 = distinct !DISubprogram(name: "handled_component_p", scope: !151, file: !151, line: 4551, type: !5657, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5657 = !DISubroutineType(types: !5658)
!5658 = !{!972, !5659}
!5659 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !675, line: 59, baseType: !5660)
!5660 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5661, size: 64)
!5661 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !861)
!5662 = !DILocalVariable(name: "t", arg: 1, scope: !5656, file: !151, line: 4551, type: !5659)
!5663 = !DILocation(line: 4551, column: 33, scope: !5656)
!5664 = !DILocation(line: 4553, column: 11, scope: !5656)
!5665 = !DILocation(line: 4553, column: 3, scope: !5656)
!5666 = !DILocation(line: 4562, column: 7, scope: !5667)
!5667 = distinct !DILexicalBlock(scope: !5656, file: !151, line: 4554, column: 5)
!5668 = !DILocation(line: 4565, column: 7, scope: !5667)
!5669 = !DILocation(line: 4567, column: 1, scope: !5656)
!5670 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !419, file: !419, line: 1714, type: !5032, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5671 = !DILocalVariable(name: "gs", arg: 1, scope: !5670, file: !419, line: 1714, type: !674)
!5672 = !DILocation(line: 1714, column: 31, scope: !5670)
!5673 = !DILocalVariable(name: "lhs", arg: 2, scope: !5670, file: !419, line: 1714, type: !859)
!5674 = !DILocation(line: 1714, column: 40, scope: !5670)
!5675 = !DILocation(line: 1717, column: 18, scope: !5670)
!5676 = !DILocation(line: 1717, column: 25, scope: !5670)
!5677 = !DILocation(line: 1717, column: 3, scope: !5670)
!5678 = !DILocation(line: 1719, column: 7, scope: !5679)
!5679 = distinct !DILexicalBlock(scope: !5670, file: !419, line: 1719, column: 7)
!5680 = !DILocation(line: 1719, column: 11, scope: !5679)
!5681 = !DILocation(line: 1719, column: 14, scope: !5679)
!5682 = !DILocation(line: 1719, column: 30, scope: !5679)
!5683 = !DILocation(line: 1719, column: 7, scope: !5670)
!5684 = !DILocation(line: 1720, column: 31, scope: !5679)
!5685 = !DILocation(line: 1720, column: 5, scope: !5679)
!5686 = !DILocation(line: 1720, column: 29, scope: !5679)
!5687 = !DILocation(line: 1721, column: 1, scope: !5670)
!5688 = distinct !DISubprogram(name: "gimple_seq_empty_p", scope: !419, file: !419, line: 215, type: !5689, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5689 = !DISubroutineType(types: !5690)
!5690 = !{!972, !5167}
!5691 = !DILocalVariable(name: "s", arg: 1, scope: !5688, file: !419, line: 215, type: !5167)
!5692 = !DILocation(line: 215, column: 38, scope: !5688)
!5693 = !DILocation(line: 217, column: 10, scope: !5688)
!5694 = !DILocation(line: 217, column: 12, scope: !5688)
!5695 = !DILocation(line: 217, column: 20, scope: !5688)
!5696 = !DILocation(line: 217, column: 23, scope: !5688)
!5697 = !DILocation(line: 217, column: 26, scope: !5688)
!5698 = !DILocation(line: 217, column: 32, scope: !5688)
!5699 = !DILocation(line: 217, column: 3, scope: !5688)
!5700 = distinct !DISubprogram(name: "single_pred", scope: !135, file: !135, line: 672, type: !4988, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5701 = !DILocalVariable(name: "bb", arg: 1, scope: !5700, file: !135, line: 672, type: !4990)
!5702 = !DILocation(line: 672, column: 32, scope: !5700)
!5703 = !DILocation(line: 674, column: 28, scope: !5700)
!5704 = !DILocation(line: 674, column: 10, scope: !5700)
!5705 = !DILocation(line: 674, column: 33, scope: !5700)
!5706 = !DILocation(line: 674, column: 3, scope: !5700)
!5707 = distinct !DISubprogram(name: "name_to_copy_elt_hash", scope: !3, file: !3, line: 238, type: !1161, scopeLine: 239, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5708 = !DILocalVariable(name: "aa", arg: 1, scope: !5707, file: !3, line: 238, type: !1164)
!5709 = !DILocation(line: 238, column: 36, scope: !5707)
!5710 = !DILocalVariable(name: "a", scope: !5707, file: !3, line: 240, type: !2223)
!5711 = !DILocation(line: 240, column: 34, scope: !5707)
!5712 = !DILocation(line: 240, column: 72, scope: !5707)
!5713 = !DILocation(line: 240, column: 38, scope: !5707)
!5714 = !DILocation(line: 242, column: 22, scope: !5707)
!5715 = !DILocation(line: 242, column: 25, scope: !5707)
!5716 = !DILocation(line: 242, column: 3, scope: !5707)
!5717 = distinct !DISubprogram(name: "name_to_copy_elt_eq", scope: !3, file: !3, line: 229, type: !1169, scopeLine: 230, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5718 = !DILocalVariable(name: "aa", arg: 1, scope: !5717, file: !3, line: 229, type: !1164)
!5719 = !DILocation(line: 229, column: 34, scope: !5717)
!5720 = !DILocalVariable(name: "bb", arg: 2, scope: !5717, file: !3, line: 229, type: !1164)
!5721 = !DILocation(line: 229, column: 50, scope: !5717)
!5722 = !DILocalVariable(name: "a", scope: !5717, file: !3, line: 231, type: !2223)
!5723 = !DILocation(line: 231, column: 34, scope: !5717)
!5724 = !DILocation(line: 231, column: 72, scope: !5717)
!5725 = !DILocation(line: 231, column: 38, scope: !5717)
!5726 = !DILocalVariable(name: "b", scope: !5717, file: !3, line: 232, type: !2223)
!5727 = !DILocation(line: 232, column: 34, scope: !5717)
!5728 = !DILocation(line: 232, column: 72, scope: !5717)
!5729 = !DILocation(line: 232, column: 38, scope: !5717)
!5730 = !DILocation(line: 234, column: 10, scope: !5717)
!5731 = !DILocation(line: 234, column: 13, scope: !5717)
!5732 = !DILocation(line: 234, column: 24, scope: !5717)
!5733 = !DILocation(line: 234, column: 27, scope: !5717)
!5734 = !DILocation(line: 234, column: 21, scope: !5717)
!5735 = !DILocation(line: 234, column: 3, scope: !5717)
!5736 = distinct !DISubprogram(name: "separate_decls_in_region_stmt", scope: !3, file: !3, line: 673, type: !5737, scopeLine: 675, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5737 = !DISubroutineType(types: !5738)
!5738 = !{null, !713, !713, !674, !1154, !1154}
!5739 = !DILocalVariable(name: "entry", arg: 1, scope: !5736, file: !3, line: 673, type: !713)
!5740 = !DILocation(line: 673, column: 37, scope: !5736)
!5741 = !DILocalVariable(name: "exit", arg: 2, scope: !5736, file: !3, line: 673, type: !713)
!5742 = !DILocation(line: 673, column: 49, scope: !5736)
!5743 = !DILocalVariable(name: "stmt", arg: 3, scope: !5736, file: !3, line: 673, type: !674)
!5744 = !DILocation(line: 673, column: 62, scope: !5736)
!5745 = !DILocalVariable(name: "name_copies", arg: 4, scope: !5736, file: !3, line: 674, type: !1154)
!5746 = !DILocation(line: 674, column: 18, scope: !5736)
!5747 = !DILocalVariable(name: "decl_copies", arg: 5, scope: !5736, file: !3, line: 674, type: !1154)
!5748 = !DILocation(line: 674, column: 38, scope: !5736)
!5749 = !DILocalVariable(name: "use", scope: !5736, file: !3, line: 676, type: !2052)
!5750 = !DILocation(line: 676, column: 17, scope: !5736)
!5751 = !DILocalVariable(name: "def", scope: !5736, file: !3, line: 677, type: !2230)
!5752 = !DILocation(line: 677, column: 17, scope: !5736)
!5753 = !DILocalVariable(name: "oi", scope: !5736, file: !3, line: 678, type: !5754)
!5754 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !645, line: 140, baseType: !5755)
!5755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !645, line: 131, size: 320, elements: !5756)
!5756 = !{!5757, !5758, !5759, !5761, !5763, !5764, !5765}
!5757 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !5755, file: !645, line: 133, baseType: !972, size: 8)
!5758 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !5755, file: !645, line: 134, baseType: !644, size: 32, offset: 32)
!5759 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !5755, file: !645, line: 135, baseType: !5760, size: 64, offset: 64)
!5760 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !645, line: 42, baseType: !1265)
!5761 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !5755, file: !645, line: 136, baseType: !5762, size: 64, offset: 128)
!5762 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !645, line: 50, baseType: !1272)
!5763 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !5755, file: !645, line: 137, baseType: !762, size: 32, offset: 192)
!5764 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !5755, file: !645, line: 138, baseType: !762, size: 32, offset: 224)
!5765 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !5755, file: !645, line: 139, baseType: !674, size: 64, offset: 256)
!5766 = !DILocation(line: 678, column: 15, scope: !5736)
!5767 = !DILocalVariable(name: "name", scope: !5736, file: !3, line: 679, type: !859)
!5768 = !DILocation(line: 679, column: 8, scope: !5736)
!5769 = !DILocalVariable(name: "copy", scope: !5736, file: !3, line: 679, type: !859)
!5770 = !DILocation(line: 679, column: 14, scope: !5736)
!5771 = !DILocalVariable(name: "copy_name_p", scope: !5736, file: !3, line: 680, type: !972)
!5772 = !DILocation(line: 680, column: 8, scope: !5736)
!5773 = !DILocation(line: 682, column: 34, scope: !5736)
!5774 = !DILocation(line: 682, column: 3, scope: !5736)
!5775 = !DILocation(line: 684, column: 3, scope: !5776)
!5776 = distinct !DILexicalBlock(scope: !5736, file: !3, line: 684, column: 3)
!5777 = !DILocation(line: 684, column: 3, scope: !5778)
!5778 = distinct !DILexicalBlock(scope: !5776, file: !3, line: 684, column: 3)
!5779 = !DILocation(line: 686, column: 12, scope: !5780)
!5780 = distinct !DILexicalBlock(scope: !5778, file: !3, line: 685, column: 3)
!5781 = !DILocation(line: 686, column: 10, scope: !5780)
!5782 = !DILocation(line: 687, column: 5, scope: !5780)
!5783 = !DILocation(line: 688, column: 43, scope: !5780)
!5784 = !DILocation(line: 688, column: 49, scope: !5780)
!5785 = !DILocation(line: 688, column: 62, scope: !5780)
!5786 = !DILocation(line: 688, column: 12, scope: !5780)
!5787 = !DILocation(line: 688, column: 10, scope: !5780)
!5788 = !DILocation(line: 690, column: 5, scope: !5780)
!5789 = !DILocation(line: 691, column: 3, scope: !5780)
!5790 = distinct !{!5790, !5775, !5791}
!5791 = !DILocation(line: 691, column: 3, scope: !5776)
!5792 = !DILocation(line: 693, column: 3, scope: !5793)
!5793 = distinct !DILexicalBlock(scope: !5736, file: !3, line: 693, column: 3)
!5794 = !DILocation(line: 693, column: 3, scope: !5795)
!5795 = distinct !DILexicalBlock(scope: !5793, file: !3, line: 693, column: 3)
!5796 = !DILocation(line: 695, column: 12, scope: !5797)
!5797 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 694, column: 3)
!5798 = !DILocation(line: 695, column: 10, scope: !5797)
!5799 = !DILocation(line: 696, column: 9, scope: !5800)
!5800 = distinct !DILexicalBlock(scope: !5797, file: !3, line: 696, column: 9)
!5801 = !DILocation(line: 696, column: 26, scope: !5800)
!5802 = !DILocation(line: 696, column: 9, scope: !5797)
!5803 = !DILocation(line: 697, column: 7, scope: !5800)
!5804 = !DILocation(line: 699, column: 47, scope: !5797)
!5805 = !DILocation(line: 699, column: 54, scope: !5797)
!5806 = !DILocation(line: 699, column: 60, scope: !5797)
!5807 = !DILocation(line: 699, column: 19, scope: !5797)
!5808 = !DILocation(line: 699, column: 17, scope: !5797)
!5809 = !DILocation(line: 700, column: 43, scope: !5797)
!5810 = !DILocation(line: 700, column: 49, scope: !5797)
!5811 = !DILocation(line: 700, column: 62, scope: !5797)
!5812 = !DILocation(line: 701, column: 8, scope: !5797)
!5813 = !DILocation(line: 700, column: 12, scope: !5797)
!5814 = !DILocation(line: 700, column: 10, scope: !5797)
!5815 = !DILocation(line: 702, column: 5, scope: !5797)
!5816 = !DILocation(line: 703, column: 3, scope: !5797)
!5817 = distinct !{!5817, !5792, !5818}
!5818 = !DILocation(line: 703, column: 3, scope: !5793)
!5819 = !DILocation(line: 704, column: 1, scope: !5736)
!5820 = distinct !DISubprogram(name: "separate_decls_in_region_debug_bind", scope: !3, file: !3, line: 714, type: !5821, scopeLine: 716, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5821 = !DISubroutineType(types: !5822)
!5822 = !{!972, !674, !1154, !1154}
!5823 = !DILocalVariable(name: "stmt", arg: 1, scope: !5820, file: !3, line: 714, type: !674)
!5824 = !DILocation(line: 714, column: 45, scope: !5820)
!5825 = !DILocalVariable(name: "name_copies", arg: 2, scope: !5820, file: !3, line: 715, type: !1154)
!5826 = !DILocation(line: 715, column: 17, scope: !5820)
!5827 = !DILocalVariable(name: "decl_copies", arg: 3, scope: !5820, file: !3, line: 715, type: !1154)
!5828 = !DILocation(line: 715, column: 37, scope: !5820)
!5829 = !DILocalVariable(name: "use", scope: !5820, file: !3, line: 717, type: !2052)
!5830 = !DILocation(line: 717, column: 17, scope: !5820)
!5831 = !DILocalVariable(name: "oi", scope: !5820, file: !3, line: 718, type: !5754)
!5832 = !DILocation(line: 718, column: 15, scope: !5820)
!5833 = !DILocalVariable(name: "var", scope: !5820, file: !3, line: 719, type: !859)
!5834 = !DILocation(line: 719, column: 8, scope: !5820)
!5835 = !DILocalVariable(name: "name", scope: !5820, file: !3, line: 719, type: !859)
!5836 = !DILocation(line: 719, column: 13, scope: !5820)
!5837 = !DILocalVariable(name: "ielt", scope: !5820, file: !3, line: 720, type: !2219)
!5838 = !DILocation(line: 720, column: 23, scope: !5820)
!5839 = !DILocalVariable(name: "elt", scope: !5820, file: !3, line: 721, type: !2225)
!5840 = !DILocation(line: 721, column: 27, scope: !5820)
!5841 = !DILocalVariable(name: "slot", scope: !5820, file: !3, line: 722, type: !1177)
!5842 = !DILocation(line: 722, column: 10, scope: !5820)
!5843 = !DILocalVariable(name: "dslot", scope: !5820, file: !3, line: 722, type: !1177)
!5844 = !DILocation(line: 722, column: 18, scope: !5820)
!5845 = !DILocation(line: 724, column: 36, scope: !5820)
!5846 = !DILocation(line: 724, column: 9, scope: !5820)
!5847 = !DILocation(line: 724, column: 7, scope: !5820)
!5848 = !DILocation(line: 725, column: 7, scope: !5849)
!5849 = distinct !DILexicalBlock(scope: !5820, file: !3, line: 725, column: 7)
!5850 = !DILocation(line: 725, column: 23, scope: !5849)
!5851 = !DILocation(line: 725, column: 7, scope: !5820)
!5852 = !DILocation(line: 726, column: 5, scope: !5849)
!5853 = !DILocation(line: 727, column: 3, scope: !5820)
!5854 = !DILocation(line: 728, column: 14, scope: !5820)
!5855 = !DILocation(line: 728, column: 8, scope: !5820)
!5856 = !DILocation(line: 728, column: 12, scope: !5820)
!5857 = !DILocation(line: 729, column: 37, scope: !5820)
!5858 = !DILocation(line: 729, column: 50, scope: !5820)
!5859 = !DILocation(line: 729, column: 62, scope: !5820)
!5860 = !DILocation(line: 729, column: 11, scope: !5820)
!5861 = !DILocation(line: 729, column: 9, scope: !5820)
!5862 = !DILocation(line: 730, column: 8, scope: !5863)
!5863 = distinct !DILexicalBlock(scope: !5820, file: !3, line: 730, column: 7)
!5864 = !DILocation(line: 730, column: 7, scope: !5820)
!5865 = !DILocation(line: 731, column: 5, scope: !5863)
!5866 = !DILocation(line: 732, column: 30, scope: !5820)
!5867 = !DILocation(line: 732, column: 62, scope: !5820)
!5868 = !DILocation(line: 732, column: 61, scope: !5820)
!5869 = !DILocation(line: 732, column: 37, scope: !5820)
!5870 = !DILocation(line: 732, column: 70, scope: !5820)
!5871 = !DILocation(line: 732, column: 3, scope: !5820)
!5872 = !DILocation(line: 734, column: 3, scope: !5873)
!5873 = distinct !DILexicalBlock(scope: !5820, file: !3, line: 734, column: 3)
!5874 = !DILocation(line: 734, column: 3, scope: !5875)
!5875 = distinct !DILexicalBlock(scope: !5873, file: !3, line: 734, column: 3)
!5876 = !DILocation(line: 736, column: 12, scope: !5877)
!5877 = distinct !DILexicalBlock(scope: !5875, file: !3, line: 735, column: 3)
!5878 = !DILocation(line: 736, column: 10, scope: !5877)
!5879 = !DILocation(line: 737, column: 9, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !5877, file: !3, line: 737, column: 9)
!5881 = !DILocation(line: 737, column: 26, scope: !5880)
!5882 = !DILocation(line: 737, column: 9, scope: !5877)
!5883 = !DILocation(line: 738, column: 7, scope: !5880)
!5884 = !DILocation(line: 740, column: 19, scope: !5877)
!5885 = !DILocation(line: 740, column: 9, scope: !5877)
!5886 = !DILocation(line: 740, column: 17, scope: !5877)
!5887 = !DILocation(line: 741, column: 38, scope: !5877)
!5888 = !DILocation(line: 741, column: 51, scope: !5877)
!5889 = !DILocation(line: 741, column: 61, scope: !5877)
!5890 = !DILocation(line: 741, column: 12, scope: !5877)
!5891 = !DILocation(line: 741, column: 10, scope: !5877)
!5892 = !DILocation(line: 742, column: 10, scope: !5893)
!5893 = distinct !DILexicalBlock(scope: !5877, file: !3, line: 742, column: 9)
!5894 = !DILocation(line: 742, column: 9, scope: !5877)
!5895 = !DILocation(line: 744, column: 33, scope: !5896)
!5896 = distinct !DILexicalBlock(scope: !5893, file: !3, line: 743, column: 7)
!5897 = !DILocation(line: 744, column: 2, scope: !5896)
!5898 = !DILocation(line: 745, column: 15, scope: !5896)
!5899 = !DILocation(line: 745, column: 2, scope: !5896)
!5900 = !DILocation(line: 746, column: 2, scope: !5896)
!5901 = !DILocation(line: 749, column: 5, scope: !5877)
!5902 = !DILocation(line: 750, column: 3, scope: !5877)
!5903 = distinct !{!5903, !5872, !5904}
!5904 = !DILocation(line: 750, column: 3, scope: !5873)
!5905 = !DILocation(line: 752, column: 3, scope: !5820)
!5906 = !DILocation(line: 753, column: 1, scope: !5820)
!5907 = distinct !DISubprogram(name: "add_field_for_name", scope: !3, file: !3, line: 779, type: !4167, scopeLine: 780, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5908 = !DILocalVariable(name: "slot", arg: 1, scope: !5907, file: !3, line: 779, type: !1177)
!5909 = !DILocation(line: 779, column: 28, scope: !5907)
!5910 = !DILocalVariable(name: "data", arg: 2, scope: !5907, file: !3, line: 779, type: !849)
!5911 = !DILocation(line: 779, column: 40, scope: !5907)
!5912 = !DILocalVariable(name: "elt", scope: !5907, file: !3, line: 781, type: !5913)
!5913 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2231)
!5914 = !DILocation(line: 781, column: 34, scope: !5907)
!5915 = !DILocation(line: 781, column: 69, scope: !5907)
!5916 = !DILocation(line: 781, column: 68, scope: !5907)
!5917 = !DILocation(line: 781, column: 40, scope: !5907)
!5918 = !DILocalVariable(name: "type", scope: !5907, file: !3, line: 782, type: !859)
!5919 = !DILocation(line: 782, column: 8, scope: !5907)
!5920 = !DILocation(line: 782, column: 22, scope: !5907)
!5921 = !DILocation(line: 782, column: 15, scope: !5907)
!5922 = !DILocalVariable(name: "name", scope: !5907, file: !3, line: 783, type: !859)
!5923 = !DILocation(line: 783, column: 8, scope: !5907)
!5924 = !DILocation(line: 783, column: 15, scope: !5907)
!5925 = !DILocalVariable(name: "var", scope: !5907, file: !3, line: 784, type: !859)
!5926 = !DILocation(line: 784, column: 8, scope: !5907)
!5927 = !DILocation(line: 784, column: 14, scope: !5907)
!5928 = !DILocalVariable(name: "field", scope: !5907, file: !3, line: 785, type: !859)
!5929 = !DILocation(line: 785, column: 8, scope: !5907)
!5930 = !DILocation(line: 785, column: 16, scope: !5907)
!5931 = !DILocation(line: 788, column: 29, scope: !5907)
!5932 = !DILocation(line: 788, column: 35, scope: !5907)
!5933 = !DILocation(line: 788, column: 3, scope: !5907)
!5934 = !DILocation(line: 789, column: 16, scope: !5907)
!5935 = !DILocation(line: 789, column: 3, scope: !5907)
!5936 = !DILocation(line: 789, column: 8, scope: !5907)
!5937 = !DILocation(line: 789, column: 14, scope: !5907)
!5938 = !DILocation(line: 791, column: 3, scope: !5907)
!5939 = distinct !DISubprogram(name: "add_field_for_reduction", scope: !3, file: !3, line: 759, type: !4167, scopeLine: 760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5940 = !DILocalVariable(name: "slot", arg: 1, scope: !5939, file: !3, line: 759, type: !1177)
!5941 = !DILocation(line: 759, column: 33, scope: !5939)
!5942 = !DILocalVariable(name: "data", arg: 2, scope: !5939, file: !3, line: 759, type: !849)
!5943 = !DILocation(line: 759, column: 45, scope: !5939)
!5944 = !DILocalVariable(name: "red", scope: !5939, file: !3, line: 762, type: !4186)
!5945 = !DILocation(line: 762, column: 32, scope: !5939)
!5946 = !DILocation(line: 762, column: 65, scope: !5939)
!5947 = !DILocation(line: 762, column: 64, scope: !5939)
!5948 = !DILocation(line: 762, column: 38, scope: !5939)
!5949 = !DILocalVariable(name: "type", scope: !5939, file: !3, line: 763, type: !5950)
!5950 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !859)
!5951 = !DILocation(line: 763, column: 14, scope: !5939)
!5952 = !DILocation(line: 763, column: 28, scope: !5939)
!5953 = !DILocation(line: 763, column: 21, scope: !5939)
!5954 = !DILocalVariable(name: "var", scope: !5939, file: !3, line: 764, type: !859)
!5955 = !DILocation(line: 764, column: 8, scope: !5939)
!5956 = !DILocation(line: 764, column: 14, scope: !5939)
!5957 = !DILocalVariable(name: "field", scope: !5939, file: !3, line: 765, type: !859)
!5958 = !DILocation(line: 765, column: 8, scope: !5939)
!5959 = !DILocation(line: 765, column: 16, scope: !5939)
!5960 = !DILocation(line: 768, column: 29, scope: !5939)
!5961 = !DILocation(line: 768, column: 35, scope: !5939)
!5962 = !DILocation(line: 768, column: 3, scope: !5939)
!5963 = !DILocation(line: 770, column: 16, scope: !5939)
!5964 = !DILocation(line: 770, column: 3, scope: !5939)
!5965 = !DILocation(line: 770, column: 8, scope: !5939)
!5966 = !DILocation(line: 770, column: 14, scope: !5939)
!5967 = !DILocation(line: 772, column: 3, scope: !5939)
!5968 = distinct !DISubprogram(name: "create_loads_and_stores_for_name", scope: !3, file: !3, line: 1011, type: !4167, scopeLine: 1012, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!5969 = !DILocalVariable(name: "slot", arg: 1, scope: !5968, file: !3, line: 1011, type: !1177)
!5970 = !DILocation(line: 1011, column: 42, scope: !5968)
!5971 = !DILocalVariable(name: "data", arg: 2, scope: !5968, file: !3, line: 1011, type: !849)
!5972 = !DILocation(line: 1011, column: 54, scope: !5968)
!5973 = !DILocalVariable(name: "elt", scope: !5968, file: !3, line: 1013, type: !5913)
!5974 = !DILocation(line: 1013, column: 34, scope: !5968)
!5975 = !DILocation(line: 1013, column: 69, scope: !5968)
!5976 = !DILocation(line: 1013, column: 68, scope: !5968)
!5977 = !DILocation(line: 1013, column: 40, scope: !5968)
!5978 = !DILocalVariable(name: "clsn_data", scope: !5968, file: !3, line: 1014, type: !5979)
!5979 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2232)
!5980 = !DILocation(line: 1014, column: 27, scope: !5968)
!5981 = !DILocation(line: 1014, column: 60, scope: !5968)
!5982 = !DILocation(line: 1014, column: 39, scope: !5968)
!5983 = !DILocalVariable(name: "t", scope: !5968, file: !3, line: 1015, type: !859)
!5984 = !DILocation(line: 1015, column: 8, scope: !5968)
!5985 = !DILocalVariable(name: "stmt", scope: !5968, file: !3, line: 1016, type: !674)
!5986 = !DILocation(line: 1016, column: 10, scope: !5968)
!5987 = !DILocalVariable(name: "gsi", scope: !5968, file: !3, line: 1017, type: !2200)
!5988 = !DILocation(line: 1017, column: 24, scope: !5968)
!5989 = !DILocalVariable(name: "type", scope: !5968, file: !3, line: 1018, type: !859)
!5990 = !DILocation(line: 1018, column: 8, scope: !5968)
!5991 = !DILocation(line: 1018, column: 15, scope: !5968)
!5992 = !DILocalVariable(name: "struct_type", scope: !5968, file: !3, line: 1019, type: !859)
!5993 = !DILocation(line: 1019, column: 8, scope: !5968)
!5994 = !DILocation(line: 1019, column: 22, scope: !5968)
!5995 = !DILocalVariable(name: "load_struct", scope: !5968, file: !3, line: 1020, type: !859)
!5996 = !DILocation(line: 1020, column: 8, scope: !5968)
!5997 = !DILocation(line: 1022, column: 22, scope: !5968)
!5998 = !DILocation(line: 1022, column: 33, scope: !5968)
!5999 = !DILocation(line: 1022, column: 9, scope: !5968)
!6000 = !DILocation(line: 1023, column: 7, scope: !5968)
!6001 = !DILocation(line: 1023, column: 5, scope: !5968)
!6002 = !DILocation(line: 1024, column: 10, scope: !5968)
!6003 = !DILocation(line: 1024, column: 8, scope: !5968)
!6004 = !DILocation(line: 1025, column: 34, scope: !5968)
!6005 = !DILocation(line: 1025, column: 3, scope: !5968)
!6006 = !DILocation(line: 1026, column: 27, scope: !5968)
!6007 = !DILocation(line: 1026, column: 3, scope: !5968)
!6008 = !DILocation(line: 1028, column: 22, scope: !5968)
!6009 = !DILocation(line: 1028, column: 33, scope: !5968)
!6010 = !DILocation(line: 1028, column: 9, scope: !5968)
!6011 = !DILocation(line: 1029, column: 17, scope: !5968)
!6012 = !DILocation(line: 1029, column: 15, scope: !5968)
!6013 = !DILocation(line: 1030, column: 7, scope: !5968)
!6014 = !DILocation(line: 1030, column: 5, scope: !5968)
!6015 = !DILocation(line: 1031, column: 10, scope: !5968)
!6016 = !DILocation(line: 1031, column: 8, scope: !5968)
!6017 = !DILocation(line: 1032, column: 39, scope: !5968)
!6018 = !DILocation(line: 1032, column: 3, scope: !5968)
!6019 = !DILocation(line: 1032, column: 37, scope: !5968)
!6020 = !DILocation(line: 1033, column: 27, scope: !5968)
!6021 = !DILocation(line: 1033, column: 3, scope: !5968)
!6022 = !DILocation(line: 1035, column: 3, scope: !5968)
!6023 = distinct !DISubprogram(name: "create_stores_for_reduction", scope: !3, file: !3, line: 988, type: !4167, scopeLine: 989, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6024 = !DILocalVariable(name: "slot", arg: 1, scope: !6023, file: !3, line: 988, type: !1177)
!6025 = !DILocation(line: 988, column: 37, scope: !6023)
!6026 = !DILocalVariable(name: "data", arg: 2, scope: !6023, file: !3, line: 988, type: !849)
!6027 = !DILocation(line: 988, column: 49, scope: !6023)
!6028 = !DILocalVariable(name: "red", scope: !6023, file: !3, line: 990, type: !4186)
!6029 = !DILocation(line: 990, column: 32, scope: !6023)
!6030 = !DILocation(line: 990, column: 65, scope: !6023)
!6031 = !DILocation(line: 990, column: 64, scope: !6023)
!6032 = !DILocation(line: 990, column: 38, scope: !6023)
!6033 = !DILocalVariable(name: "clsn_data", scope: !6023, file: !3, line: 991, type: !5979)
!6034 = !DILocation(line: 991, column: 27, scope: !6023)
!6035 = !DILocation(line: 991, column: 60, scope: !6023)
!6036 = !DILocation(line: 991, column: 39, scope: !6023)
!6037 = !DILocalVariable(name: "t", scope: !6023, file: !3, line: 992, type: !859)
!6038 = !DILocation(line: 992, column: 8, scope: !6023)
!6039 = !DILocalVariable(name: "stmt", scope: !6023, file: !3, line: 993, type: !674)
!6040 = !DILocation(line: 993, column: 10, scope: !6023)
!6041 = !DILocalVariable(name: "gsi", scope: !6023, file: !3, line: 994, type: !2200)
!6042 = !DILocation(line: 994, column: 24, scope: !6023)
!6043 = !DILocalVariable(name: "type", scope: !6023, file: !3, line: 995, type: !859)
!6044 = !DILocation(line: 995, column: 8, scope: !6023)
!6045 = !DILocation(line: 995, column: 15, scope: !6023)
!6046 = !DILocation(line: 997, column: 22, scope: !6023)
!6047 = !DILocation(line: 997, column: 33, scope: !6023)
!6048 = !DILocation(line: 997, column: 9, scope: !6023)
!6049 = !DILocation(line: 998, column: 7, scope: !6023)
!6050 = !DILocation(line: 998, column: 5, scope: !6023)
!6051 = !DILocation(line: 999, column: 10, scope: !6023)
!6052 = !DILocation(line: 999, column: 8, scope: !6023)
!6053 = !DILocation(line: 1000, column: 34, scope: !6023)
!6054 = !DILocation(line: 1000, column: 3, scope: !6023)
!6055 = !DILocation(line: 1001, column: 27, scope: !6023)
!6056 = !DILocation(line: 1001, column: 3, scope: !6023)
!6057 = !DILocation(line: 1003, column: 3, scope: !6023)
!6058 = distinct !DISubprogram(name: "create_final_loads_for_reduction", scope: !3, file: !3, line: 963, type: !6059, scopeLine: 965, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6059 = !DISubroutineType(types: !6060)
!6060 = !{null, !1154, !2232}
!6061 = !DILocalVariable(name: "reduction_list", arg: 1, scope: !6058, file: !3, line: 963, type: !1154)
!6062 = !DILocation(line: 963, column: 42, scope: !6058)
!6063 = !DILocalVariable(name: "ld_st_data", arg: 2, scope: !6058, file: !3, line: 964, type: !2232)
!6064 = !DILocation(line: 964, column: 25, scope: !6058)
!6065 = !DILocalVariable(name: "gsi", scope: !6058, file: !3, line: 966, type: !2200)
!6066 = !DILocation(line: 966, column: 24, scope: !6058)
!6067 = !DILocalVariable(name: "t", scope: !6058, file: !3, line: 967, type: !859)
!6068 = !DILocation(line: 967, column: 8, scope: !6058)
!6069 = !DILocalVariable(name: "stmt", scope: !6058, file: !3, line: 968, type: !674)
!6070 = !DILocation(line: 968, column: 10, scope: !6058)
!6071 = !DILocation(line: 970, column: 27, scope: !6058)
!6072 = !DILocation(line: 970, column: 39, scope: !6058)
!6073 = !DILocation(line: 970, column: 9, scope: !6058)
!6074 = !DILocation(line: 971, column: 7, scope: !6058)
!6075 = !DILocation(line: 971, column: 5, scope: !6058)
!6076 = !DILocation(line: 972, column: 10, scope: !6058)
!6077 = !DILocation(line: 972, column: 8, scope: !6058)
!6078 = !DILocation(line: 974, column: 28, scope: !6058)
!6079 = !DILocation(line: 974, column: 3, scope: !6058)
!6080 = !DILocation(line: 975, column: 42, scope: !6058)
!6081 = !DILocation(line: 975, column: 3, scope: !6058)
!6082 = !DILocation(line: 975, column: 40, scope: !6058)
!6083 = !DILocation(line: 977, column: 18, scope: !6058)
!6084 = !DILocation(line: 977, column: 63, scope: !6058)
!6085 = !DILocation(line: 977, column: 3, scope: !6058)
!6086 = !DILocation(line: 979, column: 1, scope: !6058)
!6087 = distinct !DISubprogram(name: "single_pred_edge", scope: !135, file: !135, line: 653, type: !5000, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6088 = !DILocalVariable(name: "bb", arg: 1, scope: !6087, file: !135, line: 653, type: !4990)
!6089 = !DILocation(line: 653, column: 37, scope: !6087)
!6090 = !DILocation(line: 655, column: 3, scope: !6087)
!6091 = !DILocation(line: 656, column: 10, scope: !6087)
!6092 = !DILocation(line: 656, column: 3, scope: !6087)
!6093 = distinct !DISubprogram(name: "single_pred_p", scope: !135, file: !135, line: 634, type: !5079, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6094 = !DILocalVariable(name: "bb", arg: 1, scope: !6093, file: !135, line: 634, type: !4990)
!6095 = !DILocation(line: 634, column: 34, scope: !6093)
!6096 = !DILocation(line: 636, column: 10, scope: !6093)
!6097 = !DILocation(line: 636, column: 33, scope: !6093)
!6098 = !DILocation(line: 636, column: 3, scope: !6093)
!6099 = distinct !DISubprogram(name: "op_iter_init_phidef", scope: !3408, file: !3408, line: 939, type: !6100, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6100 = !DISubroutineType(types: !6101)
!6101 = !{!2230, !6102, !674, !762}
!6102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5754, size: 64)
!6103 = !DILocalVariable(name: "ptr", arg: 1, scope: !6099, file: !3408, line: 939, type: !6102)
!6104 = !DILocation(line: 939, column: 35, scope: !6099)
!6105 = !DILocalVariable(name: "phi", arg: 2, scope: !6099, file: !3408, line: 939, type: !674)
!6106 = !DILocation(line: 939, column: 47, scope: !6099)
!6107 = !DILocalVariable(name: "flags", arg: 3, scope: !6099, file: !3408, line: 939, type: !762)
!6108 = !DILocation(line: 939, column: 56, scope: !6099)
!6109 = !DILocalVariable(name: "phi_def", scope: !6099, file: !3408, line: 941, type: !859)
!6110 = !DILocation(line: 941, column: 8, scope: !6099)
!6111 = !DILocation(line: 941, column: 18, scope: !6099)
!6112 = !DILocalVariable(name: "comp", scope: !6099, file: !3408, line: 942, type: !762)
!6113 = !DILocation(line: 942, column: 7, scope: !6099)
!6114 = !DILocation(line: 944, column: 28, scope: !6099)
!6115 = !DILocation(line: 944, column: 3, scope: !6099)
!6116 = !DILocation(line: 945, column: 3, scope: !6099)
!6117 = !DILocation(line: 945, column: 8, scope: !6099)
!6118 = !DILocation(line: 945, column: 13, scope: !6099)
!6119 = !DILocation(line: 947, column: 3, scope: !6099)
!6120 = !DILocation(line: 949, column: 26, scope: !6099)
!6121 = !DILocation(line: 949, column: 11, scope: !6099)
!6122 = !DILocation(line: 949, column: 8, scope: !6099)
!6123 = !DILocation(line: 953, column: 8, scope: !6124)
!6124 = distinct !DILexicalBlock(scope: !6099, file: !3408, line: 953, column: 7)
!6125 = !DILocation(line: 953, column: 16, scope: !6124)
!6126 = !DILocation(line: 953, column: 14, scope: !6124)
!6127 = !DILocation(line: 953, column: 22, scope: !6124)
!6128 = !DILocation(line: 953, column: 7, scope: !6099)
!6129 = !DILocation(line: 955, column: 7, scope: !6130)
!6130 = distinct !DILexicalBlock(scope: !6124, file: !3408, line: 954, column: 5)
!6131 = !DILocation(line: 955, column: 12, scope: !6130)
!6132 = !DILocation(line: 955, column: 17, scope: !6130)
!6133 = !DILocation(line: 956, column: 7, scope: !6130)
!6134 = !DILocation(line: 959, column: 3, scope: !6099)
!6135 = !DILocation(line: 959, column: 8, scope: !6099)
!6136 = !DILocation(line: 959, column: 18, scope: !6099)
!6137 = !DILocation(line: 963, column: 10, scope: !6099)
!6138 = !DILocation(line: 963, column: 3, scope: !6099)
!6139 = !DILocation(line: 964, column: 1, scope: !6099)
!6140 = distinct !DISubprogram(name: "op_iter_init_def", scope: !3408, file: !3408, line: 780, type: !6100, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6141 = !DILocalVariable(name: "ptr", arg: 1, scope: !6140, file: !3408, line: 780, type: !6102)
!6142 = !DILocation(line: 780, column: 32, scope: !6140)
!6143 = !DILocalVariable(name: "stmt", arg: 2, scope: !6140, file: !3408, line: 780, type: !674)
!6144 = !DILocation(line: 780, column: 44, scope: !6140)
!6145 = !DILocalVariable(name: "flags", arg: 3, scope: !6140, file: !3408, line: 780, type: !762)
!6146 = !DILocation(line: 780, column: 54, scope: !6140)
!6147 = !DILocation(line: 782, column: 3, scope: !6140)
!6148 = !DILocation(line: 784, column: 17, scope: !6140)
!6149 = !DILocation(line: 784, column: 22, scope: !6140)
!6150 = !DILocation(line: 784, column: 28, scope: !6140)
!6151 = !DILocation(line: 784, column: 3, scope: !6140)
!6152 = !DILocation(line: 785, column: 3, scope: !6140)
!6153 = !DILocation(line: 785, column: 8, scope: !6140)
!6154 = !DILocation(line: 785, column: 18, scope: !6140)
!6155 = !DILocation(line: 786, column: 28, scope: !6140)
!6156 = !DILocation(line: 786, column: 10, scope: !6140)
!6157 = !DILocation(line: 786, column: 3, scope: !6140)
!6158 = distinct !DISubprogram(name: "op_iter_done", scope: !3408, file: !3408, line: 652, type: !6159, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6159 = !DISubroutineType(types: !6160)
!6160 = !{!972, !6161}
!6161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6162, size: 64)
!6162 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5754)
!6163 = !DILocalVariable(name: "ptr", arg: 1, scope: !6158, file: !3408, line: 652, type: !6161)
!6164 = !DILocation(line: 652, column: 34, scope: !6158)
!6165 = !DILocation(line: 654, column: 10, scope: !6158)
!6166 = !DILocation(line: 654, column: 15, scope: !6158)
!6167 = !DILocation(line: 654, column: 3, scope: !6158)
!6168 = distinct !DISubprogram(name: "separate_decls_in_region_name", scope: !3, file: !3, line: 598, type: !6169, scopeLine: 601, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6169 = !DISubroutineType(types: !6170)
!6170 = !{!859, !859, !1154, !1154, !972}
!6171 = !DILocalVariable(name: "name", arg: 1, scope: !6168, file: !3, line: 598, type: !859)
!6172 = !DILocation(line: 598, column: 37, scope: !6168)
!6173 = !DILocalVariable(name: "name_copies", arg: 2, scope: !6168, file: !3, line: 599, type: !1154)
!6174 = !DILocation(line: 599, column: 18, scope: !6168)
!6175 = !DILocalVariable(name: "decl_copies", arg: 3, scope: !6168, file: !3, line: 599, type: !1154)
!6176 = !DILocation(line: 599, column: 38, scope: !6168)
!6177 = !DILocalVariable(name: "copy_name_p", arg: 4, scope: !6168, file: !3, line: 600, type: !972)
!6178 = !DILocation(line: 600, column: 16, scope: !6168)
!6179 = !DILocalVariable(name: "copy", scope: !6168, file: !3, line: 602, type: !859)
!6180 = !DILocation(line: 602, column: 8, scope: !6168)
!6181 = !DILocalVariable(name: "var", scope: !6168, file: !3, line: 602, type: !859)
!6182 = !DILocation(line: 602, column: 14, scope: !6168)
!6183 = !DILocalVariable(name: "var_copy", scope: !6168, file: !3, line: 602, type: !859)
!6184 = !DILocation(line: 602, column: 19, scope: !6168)
!6185 = !DILocalVariable(name: "idx", scope: !6168, file: !3, line: 603, type: !7)
!6186 = !DILocation(line: 603, column: 12, scope: !6168)
!6187 = !DILocalVariable(name: "uid", scope: !6168, file: !3, line: 603, type: !7)
!6188 = !DILocation(line: 603, column: 17, scope: !6168)
!6189 = !DILocalVariable(name: "nuid", scope: !6168, file: !3, line: 603, type: !7)
!6190 = !DILocation(line: 603, column: 22, scope: !6168)
!6191 = !DILocalVariable(name: "ielt", scope: !6168, file: !3, line: 604, type: !2219)
!6192 = !DILocation(line: 604, column: 23, scope: !6168)
!6193 = !DILocalVariable(name: "nielt", scope: !6168, file: !3, line: 604, type: !2218)
!6194 = !DILocation(line: 604, column: 30, scope: !6168)
!6195 = !DILocalVariable(name: "elt", scope: !6168, file: !3, line: 605, type: !2225)
!6196 = !DILocation(line: 605, column: 27, scope: !6168)
!6197 = !DILocalVariable(name: "nelt", scope: !6168, file: !3, line: 605, type: !2231)
!6198 = !DILocation(line: 605, column: 33, scope: !6168)
!6199 = !DILocalVariable(name: "slot", scope: !6168, file: !3, line: 606, type: !1177)
!6200 = !DILocation(line: 606, column: 10, scope: !6168)
!6201 = !DILocalVariable(name: "dslot", scope: !6168, file: !3, line: 606, type: !1177)
!6202 = !DILocation(line: 606, column: 18, scope: !6168)
!6203 = !DILocation(line: 608, column: 7, scope: !6204)
!6204 = distinct !DILexicalBlock(scope: !6168, file: !3, line: 608, column: 7)
!6205 = !DILocation(line: 608, column: 24, scope: !6204)
!6206 = !DILocation(line: 608, column: 7, scope: !6168)
!6207 = !DILocation(line: 609, column: 12, scope: !6204)
!6208 = !DILocation(line: 609, column: 5, scope: !6204)
!6209 = !DILocation(line: 611, column: 9, scope: !6168)
!6210 = !DILocation(line: 611, column: 7, scope: !6168)
!6211 = !DILocation(line: 612, column: 17, scope: !6168)
!6212 = !DILocation(line: 612, column: 7, scope: !6168)
!6213 = !DILocation(line: 612, column: 15, scope: !6168)
!6214 = !DILocation(line: 613, column: 36, scope: !6168)
!6215 = !DILocation(line: 613, column: 49, scope: !6168)
!6216 = !DILocation(line: 613, column: 55, scope: !6168)
!6217 = !DILocation(line: 614, column: 8, scope: !6168)
!6218 = !DILocation(line: 613, column: 10, scope: !6168)
!6219 = !DILocation(line: 613, column: 8, scope: !6168)
!6220 = !DILocation(line: 615, column: 7, scope: !6221)
!6221 = distinct !DILexicalBlock(scope: !6168, file: !3, line: 615, column: 7)
!6222 = !DILocation(line: 615, column: 12, scope: !6221)
!6223 = !DILocation(line: 615, column: 16, scope: !6221)
!6224 = !DILocation(line: 615, column: 15, scope: !6221)
!6225 = !DILocation(line: 615, column: 7, scope: !6168)
!6226 = !DILocation(line: 616, column: 42, scope: !6221)
!6227 = !DILocation(line: 616, column: 41, scope: !6221)
!6228 = !DILocation(line: 616, column: 13, scope: !6221)
!6229 = !DILocation(line: 616, column: 49, scope: !6221)
!6230 = !DILocation(line: 616, column: 5, scope: !6221)
!6231 = !DILocation(line: 618, column: 9, scope: !6168)
!6232 = !DILocation(line: 618, column: 7, scope: !6168)
!6233 = !DILocation(line: 619, column: 9, scope: !6168)
!6234 = !DILocation(line: 619, column: 7, scope: !6168)
!6235 = !DILocation(line: 620, column: 14, scope: !6168)
!6236 = !DILocation(line: 620, column: 8, scope: !6168)
!6237 = !DILocation(line: 620, column: 12, scope: !6168)
!6238 = !DILocation(line: 621, column: 37, scope: !6168)
!6239 = !DILocation(line: 621, column: 50, scope: !6168)
!6240 = !DILocation(line: 621, column: 57, scope: !6168)
!6241 = !DILocation(line: 621, column: 11, scope: !6168)
!6242 = !DILocation(line: 621, column: 9, scope: !6168)
!6243 = !DILocation(line: 622, column: 9, scope: !6244)
!6244 = distinct !DILexicalBlock(scope: !6168, file: !3, line: 622, column: 7)
!6245 = !DILocation(line: 622, column: 8, scope: !6244)
!6246 = !DILocation(line: 622, column: 7, scope: !6168)
!6247 = !DILocation(line: 624, column: 34, scope: !6248)
!6248 = distinct !DILexicalBlock(scope: !6244, file: !3, line: 623, column: 5)
!6249 = !DILocation(line: 624, column: 61, scope: !6248)
!6250 = !DILocation(line: 624, column: 51, scope: !6248)
!6251 = !DILocation(line: 624, column: 18, scope: !6248)
!6252 = !DILocation(line: 624, column: 16, scope: !6248)
!6253 = !DILocation(line: 625, column: 38, scope: !6248)
!6254 = !DILocation(line: 625, column: 7, scope: !6248)
!6255 = !DILocation(line: 625, column: 36, scope: !6248)
!6256 = !DILocation(line: 626, column: 27, scope: !6248)
!6257 = !DILocation(line: 626, column: 7, scope: !6248)
!6258 = !DILocation(line: 627, column: 15, scope: !6248)
!6259 = !DILocation(line: 627, column: 13, scope: !6248)
!6260 = !DILocation(line: 628, column: 20, scope: !6248)
!6261 = !DILocation(line: 628, column: 7, scope: !6248)
!6262 = !DILocation(line: 628, column: 14, scope: !6248)
!6263 = !DILocation(line: 628, column: 18, scope: !6248)
!6264 = !DILocation(line: 629, column: 19, scope: !6248)
!6265 = !DILocation(line: 629, column: 7, scope: !6248)
!6266 = !DILocation(line: 629, column: 14, scope: !6248)
!6267 = !DILocation(line: 629, column: 17, scope: !6248)
!6268 = !DILocation(line: 630, column: 16, scope: !6248)
!6269 = !DILocation(line: 630, column: 8, scope: !6248)
!6270 = !DILocation(line: 630, column: 14, scope: !6248)
!6271 = !DILocation(line: 634, column: 14, scope: !6248)
!6272 = !DILocation(line: 634, column: 12, scope: !6248)
!6273 = !DILocation(line: 635, column: 18, scope: !6248)
!6274 = !DILocation(line: 635, column: 12, scope: !6248)
!6275 = !DILocation(line: 635, column: 16, scope: !6248)
!6276 = !DILocation(line: 636, column: 41, scope: !6248)
!6277 = !DILocation(line: 636, column: 54, scope: !6248)
!6278 = !DILocation(line: 636, column: 61, scope: !6248)
!6279 = !DILocation(line: 636, column: 15, scope: !6248)
!6280 = !DILocation(line: 636, column: 13, scope: !6248)
!6281 = !DILocation(line: 637, column: 7, scope: !6248)
!6282 = !DILocation(line: 638, column: 15, scope: !6248)
!6283 = !DILocation(line: 638, column: 13, scope: !6248)
!6284 = !DILocation(line: 639, column: 20, scope: !6248)
!6285 = !DILocation(line: 639, column: 7, scope: !6248)
!6286 = !DILocation(line: 639, column: 14, scope: !6248)
!6287 = !DILocation(line: 639, column: 18, scope: !6248)
!6288 = !DILocation(line: 640, column: 19, scope: !6248)
!6289 = !DILocation(line: 640, column: 7, scope: !6248)
!6290 = !DILocation(line: 640, column: 14, scope: !6248)
!6291 = !DILocation(line: 640, column: 17, scope: !6248)
!6292 = !DILocation(line: 641, column: 16, scope: !6248)
!6293 = !DILocation(line: 641, column: 8, scope: !6248)
!6294 = !DILocation(line: 641, column: 14, scope: !6248)
!6295 = !DILocation(line: 642, column: 5, scope: !6248)
!6296 = !DILocation(line: 644, column: 42, scope: !6244)
!6297 = !DILocation(line: 644, column: 41, scope: !6244)
!6298 = !DILocation(line: 644, column: 17, scope: !6244)
!6299 = !DILocation(line: 644, column: 50, scope: !6244)
!6300 = !DILocation(line: 644, column: 14, scope: !6244)
!6301 = !DILocation(line: 646, column: 7, scope: !6302)
!6302 = distinct !DILexicalBlock(scope: !6168, file: !3, line: 646, column: 7)
!6303 = !DILocation(line: 646, column: 7, scope: !6168)
!6304 = !DILocation(line: 648, column: 34, scope: !6305)
!6305 = distinct !DILexicalBlock(scope: !6302, file: !3, line: 647, column: 5)
!6306 = !DILocation(line: 648, column: 14, scope: !6305)
!6307 = !DILocation(line: 648, column: 12, scope: !6305)
!6308 = !DILocation(line: 649, column: 14, scope: !6305)
!6309 = !DILocation(line: 649, column: 12, scope: !6305)
!6310 = !DILocation(line: 650, column: 23, scope: !6305)
!6311 = !DILocation(line: 650, column: 7, scope: !6305)
!6312 = !DILocation(line: 650, column: 13, scope: !6305)
!6313 = !DILocation(line: 650, column: 21, scope: !6305)
!6314 = !DILocation(line: 651, column: 24, scope: !6305)
!6315 = !DILocation(line: 651, column: 7, scope: !6305)
!6316 = !DILocation(line: 651, column: 13, scope: !6305)
!6317 = !DILocation(line: 651, column: 22, scope: !6305)
!6318 = !DILocation(line: 652, column: 7, scope: !6305)
!6319 = !DILocation(line: 652, column: 13, scope: !6305)
!6320 = !DILocation(line: 652, column: 19, scope: !6305)
!6321 = !DILocation(line: 653, column: 15, scope: !6305)
!6322 = !DILocation(line: 653, column: 8, scope: !6305)
!6323 = !DILocation(line: 653, column: 13, scope: !6305)
!6324 = !DILocation(line: 654, column: 5, scope: !6305)
!6325 = !DILocation(line: 657, column: 7, scope: !6326)
!6326 = distinct !DILexicalBlock(scope: !6302, file: !3, line: 656, column: 5)
!6327 = !DILocation(line: 658, column: 14, scope: !6326)
!6328 = !DILocation(line: 658, column: 12, scope: !6326)
!6329 = !DILocation(line: 661, column: 25, scope: !6168)
!6330 = !DILocation(line: 661, column: 3, scope: !6168)
!6331 = !DILocation(line: 661, column: 23, scope: !6168)
!6332 = !DILocation(line: 662, column: 10, scope: !6168)
!6333 = !DILocation(line: 662, column: 3, scope: !6168)
!6334 = !DILocation(line: 663, column: 1, scope: !6168)
!6335 = distinct !DISubprogram(name: "op_iter_next_def", scope: !3408, file: !3408, line: 681, type: !6336, scopeLine: 682, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6336 = !DISubroutineType(types: !6337)
!6337 = !{!2230, !6102}
!6338 = !DILocalVariable(name: "ptr", arg: 1, scope: !6335, file: !3408, line: 681, type: !6102)
!6339 = !DILocation(line: 681, column: 32, scope: !6335)
!6340 = !DILocalVariable(name: "def_p", scope: !6335, file: !3408, line: 683, type: !2230)
!6341 = !DILocation(line: 683, column: 17, scope: !6335)
!6342 = !DILocation(line: 687, column: 7, scope: !6343)
!6343 = distinct !DILexicalBlock(scope: !6335, file: !3408, line: 687, column: 7)
!6344 = !DILocation(line: 687, column: 12, scope: !6343)
!6345 = !DILocation(line: 687, column: 7, scope: !6335)
!6346 = !DILocation(line: 689, column: 15, scope: !6347)
!6347 = distinct !DILexicalBlock(scope: !6343, file: !3408, line: 688, column: 5)
!6348 = !DILocation(line: 689, column: 13, scope: !6347)
!6349 = !DILocation(line: 690, column: 19, scope: !6347)
!6350 = !DILocation(line: 690, column: 24, scope: !6347)
!6351 = !DILocation(line: 690, column: 30, scope: !6347)
!6352 = !DILocation(line: 690, column: 7, scope: !6347)
!6353 = !DILocation(line: 690, column: 12, scope: !6347)
!6354 = !DILocation(line: 690, column: 17, scope: !6347)
!6355 = !DILocation(line: 691, column: 14, scope: !6347)
!6356 = !DILocation(line: 691, column: 7, scope: !6347)
!6357 = !DILocation(line: 693, column: 3, scope: !6335)
!6358 = !DILocation(line: 693, column: 8, scope: !6335)
!6359 = !DILocation(line: 693, column: 13, scope: !6335)
!6360 = !DILocation(line: 694, column: 3, scope: !6335)
!6361 = !DILocation(line: 695, column: 1, scope: !6335)
!6362 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !3408, file: !3408, line: 910, type: !6363, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6363 = !DISubroutineType(types: !6364)
!6364 = !{!2052, !6102, !674, !762}
!6365 = !DILocalVariable(name: "ptr", arg: 1, scope: !6362, file: !3408, line: 910, type: !6102)
!6366 = !DILocation(line: 910, column: 35, scope: !6362)
!6367 = !DILocalVariable(name: "phi", arg: 2, scope: !6362, file: !3408, line: 910, type: !674)
!6368 = !DILocation(line: 910, column: 47, scope: !6362)
!6369 = !DILocalVariable(name: "flags", arg: 3, scope: !6362, file: !3408, line: 910, type: !762)
!6370 = !DILocation(line: 910, column: 56, scope: !6362)
!6371 = !DILocalVariable(name: "phi_def", scope: !6362, file: !3408, line: 912, type: !859)
!6372 = !DILocation(line: 912, column: 8, scope: !6362)
!6373 = !DILocation(line: 912, column: 37, scope: !6362)
!6374 = !DILocation(line: 912, column: 18, scope: !6362)
!6375 = !DILocalVariable(name: "comp", scope: !6362, file: !3408, line: 913, type: !762)
!6376 = !DILocation(line: 913, column: 7, scope: !6362)
!6377 = !DILocation(line: 915, column: 28, scope: !6362)
!6378 = !DILocation(line: 915, column: 3, scope: !6362)
!6379 = !DILocation(line: 916, column: 3, scope: !6362)
!6380 = !DILocation(line: 916, column: 8, scope: !6362)
!6381 = !DILocation(line: 916, column: 13, scope: !6362)
!6382 = !DILocation(line: 918, column: 3, scope: !6362)
!6383 = !DILocation(line: 920, column: 26, scope: !6362)
!6384 = !DILocation(line: 920, column: 11, scope: !6362)
!6385 = !DILocation(line: 920, column: 8, scope: !6362)
!6386 = !DILocation(line: 923, column: 8, scope: !6387)
!6387 = distinct !DILexicalBlock(scope: !6362, file: !3408, line: 923, column: 7)
!6388 = !DILocation(line: 923, column: 16, scope: !6387)
!6389 = !DILocation(line: 923, column: 14, scope: !6387)
!6390 = !DILocation(line: 923, column: 22, scope: !6387)
!6391 = !DILocation(line: 923, column: 7, scope: !6362)
!6392 = !DILocation(line: 925, column: 7, scope: !6393)
!6393 = distinct !DILexicalBlock(scope: !6387, file: !3408, line: 924, column: 5)
!6394 = !DILocation(line: 925, column: 12, scope: !6393)
!6395 = !DILocation(line: 925, column: 17, scope: !6393)
!6396 = !DILocation(line: 926, column: 7, scope: !6393)
!6397 = !DILocation(line: 929, column: 19, scope: !6362)
!6398 = !DILocation(line: 929, column: 3, scope: !6362)
!6399 = !DILocation(line: 929, column: 8, scope: !6362)
!6400 = !DILocation(line: 929, column: 17, scope: !6362)
!6401 = !DILocation(line: 930, column: 39, scope: !6362)
!6402 = !DILocation(line: 930, column: 18, scope: !6362)
!6403 = !DILocation(line: 930, column: 3, scope: !6362)
!6404 = !DILocation(line: 930, column: 8, scope: !6362)
!6405 = !DILocation(line: 930, column: 16, scope: !6362)
!6406 = !DILocation(line: 931, column: 3, scope: !6362)
!6407 = !DILocation(line: 931, column: 8, scope: !6362)
!6408 = !DILocation(line: 931, column: 18, scope: !6362)
!6409 = !DILocation(line: 932, column: 28, scope: !6362)
!6410 = !DILocation(line: 932, column: 10, scope: !6362)
!6411 = !DILocation(line: 932, column: 3, scope: !6362)
!6412 = !DILocation(line: 933, column: 1, scope: !6362)
!6413 = distinct !DISubprogram(name: "op_iter_init_use", scope: !3408, file: !3408, line: 768, type: !6363, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6414 = !DILocalVariable(name: "ptr", arg: 1, scope: !6413, file: !3408, line: 768, type: !6102)
!6415 = !DILocation(line: 768, column: 32, scope: !6413)
!6416 = !DILocalVariable(name: "stmt", arg: 2, scope: !6413, file: !3408, line: 768, type: !674)
!6417 = !DILocation(line: 768, column: 44, scope: !6413)
!6418 = !DILocalVariable(name: "flags", arg: 3, scope: !6413, file: !3408, line: 768, type: !762)
!6419 = !DILocation(line: 768, column: 54, scope: !6413)
!6420 = !DILocation(line: 770, column: 3, scope: !6413)
!6421 = !DILocation(line: 772, column: 17, scope: !6413)
!6422 = !DILocation(line: 772, column: 22, scope: !6413)
!6423 = !DILocation(line: 772, column: 28, scope: !6413)
!6424 = !DILocation(line: 772, column: 3, scope: !6413)
!6425 = !DILocation(line: 773, column: 3, scope: !6413)
!6426 = !DILocation(line: 773, column: 8, scope: !6413)
!6427 = !DILocation(line: 773, column: 18, scope: !6413)
!6428 = !DILocation(line: 774, column: 28, scope: !6413)
!6429 = !DILocation(line: 774, column: 10, scope: !6413)
!6430 = !DILocation(line: 774, column: 3, scope: !6413)
!6431 = distinct !DISubprogram(name: "expr_invariant_in_region_p", scope: !3, file: !3, line: 567, type: !6432, scopeLine: 568, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6432 = !DISubroutineType(types: !6433)
!6433 = !{!972, !713, !713, !859}
!6434 = !DILocalVariable(name: "entry", arg: 1, scope: !6431, file: !3, line: 567, type: !713)
!6435 = !DILocation(line: 567, column: 34, scope: !6431)
!6436 = !DILocalVariable(name: "exit", arg: 2, scope: !6431, file: !3, line: 567, type: !713)
!6437 = !DILocation(line: 567, column: 46, scope: !6431)
!6438 = !DILocalVariable(name: "expr", arg: 3, scope: !6431, file: !3, line: 567, type: !859)
!6439 = !DILocation(line: 567, column: 57, scope: !6431)
!6440 = !DILocalVariable(name: "entry_bb", scope: !6431, file: !3, line: 569, type: !1122)
!6441 = !DILocation(line: 569, column: 15, scope: !6431)
!6442 = !DILocation(line: 569, column: 26, scope: !6431)
!6443 = !DILocation(line: 569, column: 33, scope: !6431)
!6444 = !DILocalVariable(name: "exit_bb", scope: !6431, file: !3, line: 570, type: !1122)
!6445 = !DILocation(line: 570, column: 15, scope: !6431)
!6446 = !DILocation(line: 570, column: 25, scope: !6431)
!6447 = !DILocation(line: 570, column: 31, scope: !6431)
!6448 = !DILocalVariable(name: "def_bb", scope: !6431, file: !3, line: 571, type: !1122)
!6449 = !DILocation(line: 571, column: 15, scope: !6431)
!6450 = !DILocation(line: 573, column: 32, scope: !6451)
!6451 = distinct !DILexicalBlock(scope: !6431, file: !3, line: 573, column: 7)
!6452 = !DILocation(line: 573, column: 7, scope: !6451)
!6453 = !DILocation(line: 573, column: 7, scope: !6431)
!6454 = !DILocation(line: 574, column: 5, scope: !6451)
!6455 = !DILocation(line: 576, column: 7, scope: !6456)
!6456 = distinct !DILexicalBlock(scope: !6431, file: !3, line: 576, column: 7)
!6457 = !DILocation(line: 576, column: 24, scope: !6456)
!6458 = !DILocation(line: 576, column: 7, scope: !6431)
!6459 = !DILocation(line: 578, column: 27, scope: !6460)
!6460 = distinct !DILexicalBlock(scope: !6456, file: !3, line: 577, column: 5)
!6461 = !DILocation(line: 578, column: 16, scope: !6460)
!6462 = !DILocation(line: 578, column: 14, scope: !6460)
!6463 = !DILocation(line: 579, column: 11, scope: !6464)
!6464 = distinct !DILexicalBlock(scope: !6460, file: !3, line: 579, column: 11)
!6465 = !DILocation(line: 580, column: 4, scope: !6464)
!6466 = !DILocation(line: 580, column: 39, scope: !6464)
!6467 = !DILocation(line: 580, column: 47, scope: !6464)
!6468 = !DILocation(line: 580, column: 7, scope: !6464)
!6469 = !DILocation(line: 581, column: 4, scope: !6464)
!6470 = !DILocation(line: 581, column: 40, scope: !6464)
!6471 = !DILocation(line: 581, column: 48, scope: !6464)
!6472 = !DILocation(line: 581, column: 8, scope: !6464)
!6473 = !DILocation(line: 579, column: 11, scope: !6460)
!6474 = !DILocation(line: 582, column: 2, scope: !6464)
!6475 = !DILocation(line: 584, column: 7, scope: !6460)
!6476 = !DILocation(line: 587, column: 3, scope: !6431)
!6477 = !DILocation(line: 588, column: 1, scope: !6431)
!6478 = distinct !DISubprogram(name: "op_iter_next_use", scope: !3408, file: !3408, line: 659, type: !6479, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6479 = !DISubroutineType(types: !6480)
!6480 = !{!2052, !6102}
!6481 = !DILocalVariable(name: "ptr", arg: 1, scope: !6478, file: !3408, line: 659, type: !6102)
!6482 = !DILocation(line: 659, column: 32, scope: !6478)
!6483 = !DILocalVariable(name: "use_p", scope: !6478, file: !3408, line: 661, type: !2052)
!6484 = !DILocation(line: 661, column: 17, scope: !6478)
!6485 = !DILocation(line: 665, column: 7, scope: !6486)
!6486 = distinct !DILexicalBlock(scope: !6478, file: !3408, line: 665, column: 7)
!6487 = !DILocation(line: 665, column: 12, scope: !6486)
!6488 = !DILocation(line: 665, column: 7, scope: !6478)
!6489 = !DILocation(line: 667, column: 15, scope: !6490)
!6490 = distinct !DILexicalBlock(scope: !6486, file: !3408, line: 666, column: 5)
!6491 = !DILocation(line: 667, column: 13, scope: !6490)
!6492 = !DILocation(line: 668, column: 19, scope: !6490)
!6493 = !DILocation(line: 668, column: 24, scope: !6490)
!6494 = !DILocation(line: 668, column: 30, scope: !6490)
!6495 = !DILocation(line: 668, column: 7, scope: !6490)
!6496 = !DILocation(line: 668, column: 12, scope: !6490)
!6497 = !DILocation(line: 668, column: 17, scope: !6490)
!6498 = !DILocation(line: 669, column: 14, scope: !6490)
!6499 = !DILocation(line: 669, column: 7, scope: !6490)
!6500 = !DILocation(line: 671, column: 7, scope: !6501)
!6501 = distinct !DILexicalBlock(scope: !6478, file: !3408, line: 671, column: 7)
!6502 = !DILocation(line: 671, column: 12, scope: !6501)
!6503 = !DILocation(line: 671, column: 20, scope: !6501)
!6504 = !DILocation(line: 671, column: 25, scope: !6501)
!6505 = !DILocation(line: 671, column: 18, scope: !6501)
!6506 = !DILocation(line: 671, column: 7, scope: !6478)
!6507 = !DILocation(line: 673, column: 14, scope: !6508)
!6508 = distinct !DILexicalBlock(scope: !6501, file: !3408, line: 672, column: 5)
!6509 = !DILocation(line: 673, column: 7, scope: !6508)
!6510 = !DILocation(line: 675, column: 3, scope: !6478)
!6511 = !DILocation(line: 675, column: 8, scope: !6478)
!6512 = !DILocation(line: 675, column: 13, scope: !6478)
!6513 = !DILocation(line: 676, column: 3, scope: !6478)
!6514 = !DILocation(line: 677, column: 1, scope: !6478)
!6515 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !3408, file: !3408, line: 729, type: !6516, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6516 = !DISubroutineType(types: !6517)
!6517 = !{null, !6102}
!6518 = !DILocalVariable(name: "ptr", arg: 1, scope: !6515, file: !3408, line: 729, type: !6102)
!6519 = !DILocation(line: 729, column: 39, scope: !6515)
!6520 = !DILocation(line: 731, column: 3, scope: !6515)
!6521 = !DILocation(line: 731, column: 8, scope: !6515)
!6522 = !DILocation(line: 731, column: 13, scope: !6515)
!6523 = !DILocation(line: 732, column: 3, scope: !6515)
!6524 = !DILocation(line: 732, column: 8, scope: !6515)
!6525 = !DILocation(line: 732, column: 13, scope: !6515)
!6526 = !DILocation(line: 733, column: 3, scope: !6515)
!6527 = !DILocation(line: 733, column: 8, scope: !6515)
!6528 = !DILocation(line: 733, column: 18, scope: !6515)
!6529 = !DILocation(line: 734, column: 3, scope: !6515)
!6530 = !DILocation(line: 734, column: 8, scope: !6515)
!6531 = !DILocation(line: 734, column: 14, scope: !6515)
!6532 = !DILocation(line: 735, column: 3, scope: !6515)
!6533 = !DILocation(line: 735, column: 8, scope: !6515)
!6534 = !DILocation(line: 735, column: 16, scope: !6515)
!6535 = !DILocation(line: 736, column: 3, scope: !6515)
!6536 = !DILocation(line: 736, column: 8, scope: !6515)
!6537 = !DILocation(line: 736, column: 17, scope: !6515)
!6538 = !DILocation(line: 737, column: 3, scope: !6515)
!6539 = !DILocation(line: 737, column: 8, scope: !6515)
!6540 = !DILocation(line: 737, column: 13, scope: !6515)
!6541 = !DILocation(line: 738, column: 1, scope: !6515)
!6542 = distinct !DISubprogram(name: "op_iter_init", scope: !3408, file: !3408, line: 742, type: !6543, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6543 = !DISubroutineType(types: !6544)
!6544 = !{null, !6102, !674, !762}
!6545 = !DILocalVariable(name: "ptr", arg: 1, scope: !6542, file: !3408, line: 742, type: !6102)
!6546 = !DILocation(line: 742, column: 28, scope: !6542)
!6547 = !DILocalVariable(name: "stmt", arg: 2, scope: !6542, file: !3408, line: 742, type: !674)
!6548 = !DILocation(line: 742, column: 40, scope: !6542)
!6549 = !DILocalVariable(name: "flags", arg: 3, scope: !6542, file: !3408, line: 742, type: !762)
!6550 = !DILocation(line: 742, column: 50, scope: !6542)
!6551 = !DILocation(line: 746, column: 3, scope: !6542)
!6552 = !DILocation(line: 748, column: 16, scope: !6542)
!6553 = !DILocation(line: 748, column: 22, scope: !6542)
!6554 = !DILocation(line: 748, column: 15, scope: !6542)
!6555 = !DILocation(line: 748, column: 68, scope: !6542)
!6556 = !DILocation(line: 748, column: 52, scope: !6542)
!6557 = !DILocation(line: 748, column: 3, scope: !6542)
!6558 = !DILocation(line: 748, column: 8, scope: !6542)
!6559 = !DILocation(line: 748, column: 13, scope: !6542)
!6560 = !DILocation(line: 749, column: 9, scope: !6561)
!6561 = distinct !DILexicalBlock(scope: !6542, file: !3408, line: 749, column: 7)
!6562 = !DILocation(line: 749, column: 15, scope: !6561)
!6563 = !DILocation(line: 750, column: 7, scope: !6561)
!6564 = !DILocation(line: 750, column: 10, scope: !6561)
!6565 = !DILocation(line: 750, column: 15, scope: !6561)
!6566 = !DILocation(line: 751, column: 7, scope: !6561)
!6567 = !DILocation(line: 751, column: 23, scope: !6561)
!6568 = !DILocation(line: 751, column: 10, scope: !6561)
!6569 = !DILocation(line: 751, column: 29, scope: !6561)
!6570 = !DILocation(line: 749, column: 7, scope: !6542)
!6571 = !DILocation(line: 752, column: 17, scope: !6561)
!6572 = !DILocation(line: 752, column: 22, scope: !6561)
!6573 = !DILocation(line: 752, column: 28, scope: !6561)
!6574 = !DILocation(line: 752, column: 5, scope: !6561)
!6575 = !DILocation(line: 752, column: 10, scope: !6561)
!6576 = !DILocation(line: 752, column: 15, scope: !6561)
!6577 = !DILocation(line: 753, column: 16, scope: !6542)
!6578 = !DILocation(line: 753, column: 22, scope: !6542)
!6579 = !DILocation(line: 753, column: 15, scope: !6542)
!6580 = !DILocation(line: 753, column: 68, scope: !6542)
!6581 = !DILocation(line: 753, column: 52, scope: !6542)
!6582 = !DILocation(line: 753, column: 3, scope: !6542)
!6583 = !DILocation(line: 753, column: 8, scope: !6542)
!6584 = !DILocation(line: 753, column: 13, scope: !6542)
!6585 = !DILocation(line: 754, column: 9, scope: !6586)
!6586 = distinct !DILexicalBlock(scope: !6542, file: !3408, line: 754, column: 7)
!6587 = !DILocation(line: 754, column: 15, scope: !6586)
!6588 = !DILocation(line: 755, column: 7, scope: !6586)
!6589 = !DILocation(line: 755, column: 10, scope: !6586)
!6590 = !DILocation(line: 755, column: 15, scope: !6586)
!6591 = !DILocation(line: 756, column: 7, scope: !6586)
!6592 = !DILocation(line: 756, column: 23, scope: !6586)
!6593 = !DILocation(line: 756, column: 10, scope: !6586)
!6594 = !DILocation(line: 756, column: 29, scope: !6586)
!6595 = !DILocation(line: 754, column: 7, scope: !6542)
!6596 = !DILocation(line: 757, column: 17, scope: !6586)
!6597 = !DILocation(line: 757, column: 22, scope: !6586)
!6598 = !DILocation(line: 757, column: 28, scope: !6586)
!6599 = !DILocation(line: 757, column: 5, scope: !6586)
!6600 = !DILocation(line: 757, column: 10, scope: !6586)
!6601 = !DILocation(line: 757, column: 15, scope: !6586)
!6602 = !DILocation(line: 758, column: 3, scope: !6542)
!6603 = !DILocation(line: 758, column: 8, scope: !6542)
!6604 = !DILocation(line: 758, column: 13, scope: !6542)
!6605 = !DILocation(line: 760, column: 3, scope: !6542)
!6606 = !DILocation(line: 760, column: 8, scope: !6542)
!6607 = !DILocation(line: 760, column: 14, scope: !6542)
!6608 = !DILocation(line: 761, column: 3, scope: !6542)
!6609 = !DILocation(line: 761, column: 8, scope: !6542)
!6610 = !DILocation(line: 761, column: 16, scope: !6542)
!6611 = !DILocation(line: 762, column: 3, scope: !6542)
!6612 = !DILocation(line: 762, column: 8, scope: !6542)
!6613 = !DILocation(line: 762, column: 17, scope: !6542)
!6614 = !DILocation(line: 763, column: 1, scope: !6542)
!6615 = distinct !DISubprogram(name: "gimple_def_ops", scope: !419, file: !419, line: 1292, type: !6616, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6616 = !DISubroutineType(types: !6617)
!6617 = !{!1265, !3663}
!6618 = !DILocalVariable(name: "g", arg: 1, scope: !6615, file: !419, line: 1292, type: !3663)
!6619 = !DILocation(line: 1292, column: 30, scope: !6615)
!6620 = !DILocation(line: 1294, column: 24, scope: !6621)
!6621 = distinct !DILexicalBlock(scope: !6615, file: !419, line: 1294, column: 7)
!6622 = !DILocation(line: 1294, column: 8, scope: !6621)
!6623 = !DILocation(line: 1294, column: 7, scope: !6615)
!6624 = !DILocation(line: 1295, column: 5, scope: !6621)
!6625 = !DILocation(line: 1296, column: 10, scope: !6615)
!6626 = !DILocation(line: 1296, column: 13, scope: !6615)
!6627 = !DILocation(line: 1296, column: 19, scope: !6615)
!6628 = !DILocation(line: 1296, column: 26, scope: !6615)
!6629 = !DILocation(line: 1296, column: 3, scope: !6615)
!6630 = !DILocation(line: 1297, column: 1, scope: !6615)
!6631 = distinct !DISubprogram(name: "gimple_vdef", scope: !419, file: !419, line: 1375, type: !3829, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6632 = !DILocalVariable(name: "g", arg: 1, scope: !6631, file: !419, line: 1375, type: !3663)
!6633 = !DILocation(line: 1375, column: 27, scope: !6631)
!6634 = !DILocation(line: 1377, column: 28, scope: !6635)
!6635 = distinct !DILexicalBlock(scope: !6631, file: !419, line: 1377, column: 7)
!6636 = !DILocation(line: 1377, column: 8, scope: !6635)
!6637 = !DILocation(line: 1377, column: 7, scope: !6631)
!6638 = !DILocation(line: 1378, column: 5, scope: !6635)
!6639 = !DILocation(line: 1379, column: 10, scope: !6631)
!6640 = !DILocation(line: 1379, column: 13, scope: !6631)
!6641 = !DILocation(line: 1379, column: 23, scope: !6631)
!6642 = !DILocation(line: 1379, column: 3, scope: !6631)
!6643 = !DILocation(line: 1380, column: 1, scope: !6631)
!6644 = distinct !DISubprogram(name: "gimple_use_ops", scope: !419, file: !419, line: 1313, type: !6645, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6645 = !DISubroutineType(types: !6646)
!6646 = !{!1272, !3663}
!6647 = !DILocalVariable(name: "g", arg: 1, scope: !6644, file: !419, line: 1313, type: !3663)
!6648 = !DILocation(line: 1313, column: 30, scope: !6644)
!6649 = !DILocation(line: 1315, column: 24, scope: !6650)
!6650 = distinct !DILexicalBlock(scope: !6644, file: !419, line: 1315, column: 7)
!6651 = !DILocation(line: 1315, column: 8, scope: !6650)
!6652 = !DILocation(line: 1315, column: 7, scope: !6644)
!6653 = !DILocation(line: 1316, column: 5, scope: !6650)
!6654 = !DILocation(line: 1317, column: 10, scope: !6644)
!6655 = !DILocation(line: 1317, column: 13, scope: !6644)
!6656 = !DILocation(line: 1317, column: 19, scope: !6644)
!6657 = !DILocation(line: 1317, column: 26, scope: !6644)
!6658 = !DILocation(line: 1317, column: 3, scope: !6644)
!6659 = !DILocation(line: 1318, column: 1, scope: !6644)
!6660 = distinct !DISubprogram(name: "gimple_vuse", scope: !419, file: !419, line: 1365, type: !3829, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6661 = !DILocalVariable(name: "g", arg: 1, scope: !6660, file: !419, line: 1365, type: !3663)
!6662 = !DILocation(line: 1365, column: 27, scope: !6660)
!6663 = !DILocation(line: 1367, column: 28, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6660, file: !419, line: 1367, column: 7)
!6665 = !DILocation(line: 1367, column: 8, scope: !6664)
!6666 = !DILocation(line: 1367, column: 7, scope: !6660)
!6667 = !DILocation(line: 1368, column: 5, scope: !6664)
!6668 = !DILocation(line: 1369, column: 10, scope: !6660)
!6669 = !DILocation(line: 1369, column: 13, scope: !6660)
!6670 = !DILocation(line: 1369, column: 23, scope: !6660)
!6671 = !DILocation(line: 1369, column: 3, scope: !6660)
!6672 = !DILocation(line: 1370, column: 1, scope: !6660)
!6673 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !419, file: !419, line: 1283, type: !3864, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6674 = !DILocalVariable(name: "g", arg: 1, scope: !6673, file: !419, line: 1283, type: !3663)
!6675 = !DILocation(line: 1283, column: 34, scope: !6673)
!6676 = !DILocation(line: 1285, column: 23, scope: !6673)
!6677 = !DILocation(line: 1285, column: 10, scope: !6673)
!6678 = !DILocation(line: 1285, column: 26, scope: !6673)
!6679 = !DILocation(line: 1285, column: 43, scope: !6673)
!6680 = !DILocation(line: 1285, column: 59, scope: !6673)
!6681 = !DILocation(line: 1285, column: 46, scope: !6673)
!6682 = !DILocation(line: 1285, column: 62, scope: !6673)
!6683 = !DILocation(line: 0, scope: !6673)
!6684 = !DILocation(line: 1285, column: 3, scope: !6673)
!6685 = distinct !DISubprogram(name: "gimple_phi_result", scope: !419, file: !419, line: 3071, type: !3829, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6686 = !DILocalVariable(name: "gs", arg: 1, scope: !6685, file: !419, line: 3071, type: !3663)
!6687 = !DILocation(line: 3071, column: 33, scope: !6685)
!6688 = !DILocation(line: 3074, column: 10, scope: !6685)
!6689 = !DILocation(line: 3074, column: 14, scope: !6685)
!6690 = !DILocation(line: 3074, column: 25, scope: !6685)
!6691 = !DILocation(line: 3074, column: 3, scope: !6685)
!6692 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !419, file: !419, line: 3061, type: !5117, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6693 = !DILocalVariable(name: "gs", arg: 1, scope: !6692, file: !419, line: 3061, type: !3663)
!6694 = !DILocation(line: 3061, column: 35, scope: !6692)
!6695 = !DILocation(line: 3064, column: 10, scope: !6692)
!6696 = !DILocation(line: 3064, column: 14, scope: !6692)
!6697 = !DILocation(line: 3064, column: 25, scope: !6692)
!6698 = !DILocation(line: 3064, column: 3, scope: !6692)
!6699 = distinct !DISubprogram(name: "gimple_debug_bind_get_var", scope: !419, file: !419, line: 3268, type: !6700, scopeLine: 3269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6700 = !DISubroutineType(types: !6701)
!6701 = !{!859, !674}
!6702 = !DILocalVariable(name: "dbg", arg: 1, scope: !6699, file: !419, line: 3268, type: !674)
!6703 = !DILocation(line: 3268, column: 35, scope: !6699)
!6704 = !DILocation(line: 3274, column: 21, scope: !6699)
!6705 = !DILocation(line: 3274, column: 10, scope: !6699)
!6706 = !DILocation(line: 3274, column: 3, scope: !6699)
!6707 = distinct !DISubprogram(name: "gimple_debug_bind_set_var", scope: !419, file: !419, line: 3306, type: !5032, scopeLine: 3307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6708 = !DILocalVariable(name: "dbg", arg: 1, scope: !6707, file: !419, line: 3306, type: !674)
!6709 = !DILocation(line: 3306, column: 35, scope: !6707)
!6710 = !DILocalVariable(name: "var", arg: 2, scope: !6707, file: !419, line: 3306, type: !859)
!6711 = !DILocation(line: 3306, column: 45, scope: !6707)
!6712 = !DILocation(line: 3312, column: 18, scope: !6707)
!6713 = !DILocation(line: 3312, column: 26, scope: !6707)
!6714 = !DILocation(line: 3312, column: 3, scope: !6707)
!6715 = !DILocation(line: 3313, column: 1, scope: !6707)
!6716 = distinct !DISubprogram(name: "gimple_debug_bind_reset_value", scope: !419, file: !419, line: 3336, type: !5043, scopeLine: 3337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6717 = !DILocalVariable(name: "dbg", arg: 1, scope: !6716, file: !419, line: 3336, type: !674)
!6718 = !DILocation(line: 3336, column: 39, scope: !6716)
!6719 = !DILocation(line: 3342, column: 18, scope: !6716)
!6720 = !DILocation(line: 3342, column: 3, scope: !6716)
!6721 = !DILocation(line: 3343, column: 1, scope: !6716)
!6722 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !151, file: !151, line: 182, type: !6723, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6723 = !DISubroutineType(types: !6724)
!6724 = !{!859, !6725, !7}
!6725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6726, size: 64)
!6726 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1223)
!6727 = !DILocalVariable(name: "vec_", arg: 1, scope: !6722, file: !151, line: 182, type: !6725)
!6728 = !DILocation(line: 182, column: 1, scope: !6722)
!6729 = !DILocalVariable(name: "ix_", arg: 2, scope: !6722, file: !151, line: 182, type: !7)
!6730 = !DILocation(line: 0, scope: !6722)
!6731 = distinct !DISubprogram(name: "gsi_last_bb", scope: !419, file: !419, line: 4450, type: !5059, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6732 = !DILocalVariable(name: "bb", arg: 1, scope: !6731, file: !419, line: 4450, type: !1122)
!6733 = !DILocation(line: 4450, column: 26, scope: !6731)
!6734 = !DILocalVariable(name: "i", scope: !6731, file: !419, line: 4452, type: !2200)
!6735 = !DILocation(line: 4452, column: 24, scope: !6731)
!6736 = !DILocalVariable(name: "seq", scope: !6731, file: !419, line: 4453, type: !723)
!6737 = !DILocation(line: 4453, column: 14, scope: !6731)
!6738 = !DILocation(line: 4455, column: 17, scope: !6731)
!6739 = !DILocation(line: 4455, column: 9, scope: !6731)
!6740 = !DILocation(line: 4455, column: 7, scope: !6731)
!6741 = !DILocation(line: 4456, column: 28, scope: !6731)
!6742 = !DILocation(line: 4456, column: 11, scope: !6731)
!6743 = !DILocation(line: 4456, column: 5, scope: !6731)
!6744 = !DILocation(line: 4456, column: 9, scope: !6731)
!6745 = !DILocation(line: 4457, column: 11, scope: !6731)
!6746 = !DILocation(line: 4457, column: 5, scope: !6731)
!6747 = !DILocation(line: 4457, column: 9, scope: !6731)
!6748 = !DILocation(line: 4458, column: 10, scope: !6731)
!6749 = !DILocation(line: 4458, column: 5, scope: !6731)
!6750 = !DILocation(line: 4458, column: 8, scope: !6731)
!6751 = !DILocation(line: 4460, column: 3, scope: !6731)
!6752 = distinct !DISubprogram(name: "gimple_seq_last", scope: !419, file: !419, line: 178, type: !5165, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6753 = !DILocalVariable(name: "s", arg: 1, scope: !6752, file: !419, line: 178, type: !5167)
!6754 = !DILocation(line: 178, column: 35, scope: !6752)
!6755 = !DILocation(line: 180, column: 10, scope: !6752)
!6756 = !DILocation(line: 180, column: 14, scope: !6752)
!6757 = !DILocation(line: 180, column: 17, scope: !6752)
!6758 = !DILocation(line: 180, column: 3, scope: !6752)
!6759 = distinct !DISubprogram(name: "create_loads_for_reductions", scope: !3, file: !3, line: 922, type: !4167, scopeLine: 923, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6760 = !DILocalVariable(name: "slot", arg: 1, scope: !6759, file: !3, line: 922, type: !1177)
!6761 = !DILocation(line: 922, column: 37, scope: !6759)
!6762 = !DILocalVariable(name: "data", arg: 2, scope: !6759, file: !3, line: 922, type: !849)
!6763 = !DILocation(line: 922, column: 49, scope: !6759)
!6764 = !DILocalVariable(name: "red", scope: !6759, file: !3, line: 924, type: !4186)
!6765 = !DILocation(line: 924, column: 32, scope: !6759)
!6766 = !DILocation(line: 924, column: 65, scope: !6759)
!6767 = !DILocation(line: 924, column: 64, scope: !6759)
!6768 = !DILocation(line: 924, column: 38, scope: !6759)
!6769 = !DILocalVariable(name: "clsn_data", scope: !6759, file: !3, line: 925, type: !5979)
!6770 = !DILocation(line: 925, column: 27, scope: !6759)
!6771 = !DILocation(line: 925, column: 60, scope: !6759)
!6772 = !DILocation(line: 925, column: 39, scope: !6759)
!6773 = !DILocalVariable(name: "stmt", scope: !6759, file: !3, line: 926, type: !674)
!6774 = !DILocation(line: 926, column: 10, scope: !6759)
!6775 = !DILocalVariable(name: "gsi", scope: !6759, file: !3, line: 927, type: !2200)
!6776 = !DILocation(line: 927, column: 24, scope: !6759)
!6777 = !DILocalVariable(name: "type", scope: !6759, file: !3, line: 928, type: !859)
!6778 = !DILocation(line: 928, column: 8, scope: !6759)
!6779 = !DILocation(line: 928, column: 15, scope: !6759)
!6780 = !DILocalVariable(name: "struct_type", scope: !6759, file: !3, line: 929, type: !859)
!6781 = !DILocation(line: 929, column: 8, scope: !6759)
!6782 = !DILocation(line: 929, column: 22, scope: !6759)
!6783 = !DILocalVariable(name: "load_struct", scope: !6759, file: !3, line: 930, type: !859)
!6784 = !DILocation(line: 930, column: 8, scope: !6759)
!6785 = !DILocalVariable(name: "name", scope: !6759, file: !3, line: 931, type: !859)
!6786 = !DILocation(line: 931, column: 8, scope: !6759)
!6787 = !DILocalVariable(name: "x", scope: !6759, file: !3, line: 932, type: !859)
!6788 = !DILocation(line: 932, column: 8, scope: !6759)
!6789 = !DILocation(line: 934, column: 27, scope: !6759)
!6790 = !DILocation(line: 934, column: 38, scope: !6759)
!6791 = !DILocation(line: 934, column: 9, scope: !6759)
!6792 = !DILocation(line: 935, column: 17, scope: !6759)
!6793 = !DILocation(line: 935, column: 15, scope: !6759)
!6794 = !DILocation(line: 936, column: 17, scope: !6759)
!6795 = !DILocation(line: 936, column: 15, scope: !6759)
!6796 = !DILocation(line: 939, column: 7, scope: !6759)
!6797 = !DILocation(line: 939, column: 5, scope: !6759)
!6798 = !DILocation(line: 940, column: 10, scope: !6759)
!6799 = !DILocation(line: 940, column: 8, scope: !6759)
!6800 = !DILocation(line: 941, column: 10, scope: !6759)
!6801 = !DILocation(line: 941, column: 8, scope: !6759)
!6802 = !DILocation(line: 942, column: 30, scope: !6759)
!6803 = !DILocation(line: 942, column: 3, scope: !6759)
!6804 = !DILocation(line: 942, column: 28, scope: !6759)
!6805 = !DILocation(line: 944, column: 27, scope: !6759)
!6806 = !DILocation(line: 944, column: 3, scope: !6759)
!6807 = !DILocation(line: 946, column: 41, scope: !6808)
!6808 = distinct !DILexicalBlock(scope: !6759, file: !3, line: 946, column: 3)
!6809 = !DILocation(line: 946, column: 46, scope: !6808)
!6810 = !DILocation(line: 946, column: 30, scope: !6808)
!6811 = !DILocation(line: 946, column: 14, scope: !6808)
!6812 = !DILocation(line: 946, column: 8, scope: !6808)
!6813 = !DILocation(line: 947, column: 9, scope: !6814)
!6814 = distinct !DILexicalBlock(scope: !6808, file: !3, line: 946, column: 3)
!6815 = !DILocation(line: 947, column: 8, scope: !6814)
!6816 = !DILocation(line: 946, column: 3, scope: !6808)
!6817 = !DILocation(line: 948, column: 9, scope: !6818)
!6818 = distinct !DILexicalBlock(scope: !6814, file: !3, line: 948, column: 9)
!6819 = !DILocation(line: 948, column: 27, scope: !6818)
!6820 = !DILocation(line: 948, column: 32, scope: !6818)
!6821 = !DILocation(line: 948, column: 24, scope: !6818)
!6822 = !DILocation(line: 948, column: 9, scope: !6814)
!6823 = !DILocation(line: 950, column: 2, scope: !6824)
!6824 = distinct !DILexicalBlock(scope: !6818, file: !3, line: 949, column: 7)
!6825 = !DILocation(line: 951, column: 2, scope: !6824)
!6826 = !DILocation(line: 947, column: 26, scope: !6814)
!6827 = !DILocation(line: 946, column: 3, scope: !6814)
!6828 = distinct !{!6828, !6816, !6829}
!6829 = !DILocation(line: 952, column: 7, scope: !6808)
!6830 = !DILocation(line: 953, column: 3, scope: !6759)
!6831 = !DILocation(line: 955, column: 5, scope: !6759)
!6832 = !DILocation(line: 957, column: 1, scope: !6759)
!6833 = distinct !DISubprogram(name: "gimple_phi_arg_location_from_edge", scope: !3408, file: !3408, line: 483, type: !6834, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6834 = !DISubroutineType(types: !6835)
!6835 = !{!667, !674, !713}
!6836 = !DILocalVariable(name: "gs", arg: 1, scope: !6833, file: !3408, line: 483, type: !674)
!6837 = !DILocation(line: 483, column: 43, scope: !6833)
!6838 = !DILocalVariable(name: "e", arg: 2, scope: !6833, file: !3408, line: 483, type: !713)
!6839 = !DILocation(line: 483, column: 52, scope: !6833)
!6840 = !DILocation(line: 485, column: 26, scope: !6833)
!6841 = !DILocation(line: 485, column: 30, scope: !6833)
!6842 = !DILocation(line: 485, column: 33, scope: !6833)
!6843 = !DILocation(line: 485, column: 10, scope: !6833)
!6844 = !DILocation(line: 485, column: 44, scope: !6833)
!6845 = !DILocation(line: 485, column: 3, scope: !6833)
!6846 = distinct !DISubprogram(name: "gimple_omp_for_set_index", scope: !419, file: !419, line: 3472, type: !6847, scopeLine: 3473, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6847 = !DISubroutineType(types: !6848)
!6848 = !{null, !674, !1179, !859}
!6849 = !DILocalVariable(name: "gs", arg: 1, scope: !6846, file: !419, line: 3472, type: !674)
!6850 = !DILocation(line: 3472, column: 34, scope: !6846)
!6851 = !DILocalVariable(name: "i", arg: 2, scope: !6846, file: !419, line: 3472, type: !1179)
!6852 = !DILocation(line: 3472, column: 45, scope: !6846)
!6853 = !DILocalVariable(name: "index", arg: 3, scope: !6846, file: !419, line: 3472, type: !859)
!6854 = !DILocation(line: 3472, column: 53, scope: !6846)
!6855 = !DILocation(line: 3475, column: 3, scope: !6846)
!6856 = !DILocation(line: 3476, column: 38, scope: !6846)
!6857 = !DILocation(line: 3476, column: 3, scope: !6846)
!6858 = !DILocation(line: 3476, column: 7, scope: !6846)
!6859 = !DILocation(line: 3476, column: 22, scope: !6846)
!6860 = !DILocation(line: 3476, column: 27, scope: !6846)
!6861 = !DILocation(line: 3476, column: 30, scope: !6846)
!6862 = !DILocation(line: 3476, column: 36, scope: !6846)
!6863 = !DILocation(line: 3477, column: 1, scope: !6846)
!6864 = distinct !DISubprogram(name: "gimple_omp_for_set_initial", scope: !419, file: !419, line: 3505, type: !6847, scopeLine: 3506, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6865 = !DILocalVariable(name: "gs", arg: 1, scope: !6864, file: !419, line: 3505, type: !674)
!6866 = !DILocation(line: 3505, column: 36, scope: !6864)
!6867 = !DILocalVariable(name: "i", arg: 2, scope: !6864, file: !419, line: 3505, type: !1179)
!6868 = !DILocation(line: 3505, column: 47, scope: !6864)
!6869 = !DILocalVariable(name: "initial", arg: 3, scope: !6864, file: !419, line: 3505, type: !859)
!6870 = !DILocation(line: 3505, column: 55, scope: !6864)
!6871 = !DILocation(line: 3508, column: 3, scope: !6864)
!6872 = !DILocation(line: 3509, column: 40, scope: !6864)
!6873 = !DILocation(line: 3509, column: 3, scope: !6864)
!6874 = !DILocation(line: 3509, column: 7, scope: !6864)
!6875 = !DILocation(line: 3509, column: 22, scope: !6864)
!6876 = !DILocation(line: 3509, column: 27, scope: !6864)
!6877 = !DILocation(line: 3509, column: 30, scope: !6864)
!6878 = !DILocation(line: 3509, column: 38, scope: !6864)
!6879 = !DILocation(line: 3510, column: 1, scope: !6864)
!6880 = distinct !DISubprogram(name: "gimple_omp_for_set_final", scope: !419, file: !419, line: 3538, type: !6847, scopeLine: 3539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6881 = !DILocalVariable(name: "gs", arg: 1, scope: !6880, file: !419, line: 3538, type: !674)
!6882 = !DILocation(line: 3538, column: 34, scope: !6880)
!6883 = !DILocalVariable(name: "i", arg: 2, scope: !6880, file: !419, line: 3538, type: !1179)
!6884 = !DILocation(line: 3538, column: 45, scope: !6880)
!6885 = !DILocalVariable(name: "final", arg: 3, scope: !6880, file: !419, line: 3538, type: !859)
!6886 = !DILocation(line: 3538, column: 53, scope: !6880)
!6887 = !DILocation(line: 3541, column: 3, scope: !6880)
!6888 = !DILocation(line: 3542, column: 38, scope: !6880)
!6889 = !DILocation(line: 3542, column: 3, scope: !6880)
!6890 = !DILocation(line: 3542, column: 7, scope: !6880)
!6891 = !DILocation(line: 3542, column: 22, scope: !6880)
!6892 = !DILocation(line: 3542, column: 27, scope: !6880)
!6893 = !DILocation(line: 3542, column: 30, scope: !6880)
!6894 = !DILocation(line: 3542, column: 36, scope: !6880)
!6895 = !DILocation(line: 3543, column: 1, scope: !6880)
!6896 = distinct !DISubprogram(name: "gimple_omp_for_set_cond", scope: !419, file: !419, line: 4073, type: !6897, scopeLine: 4074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6897 = !DISubroutineType(types: !6898)
!6898 = !{null, !674, !1179, !183}
!6899 = !DILocalVariable(name: "gs", arg: 1, scope: !6896, file: !419, line: 4073, type: !674)
!6900 = !DILocation(line: 4073, column: 33, scope: !6896)
!6901 = !DILocalVariable(name: "i", arg: 2, scope: !6896, file: !419, line: 4073, type: !1179)
!6902 = !DILocation(line: 4073, column: 44, scope: !6896)
!6903 = !DILocalVariable(name: "cond", arg: 3, scope: !6896, file: !419, line: 4073, type: !183)
!6904 = !DILocation(line: 4073, column: 62, scope: !6896)
!6905 = !DILocation(line: 4076, column: 3, scope: !6896)
!6906 = !DILocation(line: 4077, column: 3, scope: !6896)
!6907 = !DILocation(line: 4078, column: 37, scope: !6896)
!6908 = !DILocation(line: 4078, column: 3, scope: !6896)
!6909 = !DILocation(line: 4078, column: 7, scope: !6896)
!6910 = !DILocation(line: 4078, column: 22, scope: !6896)
!6911 = !DILocation(line: 4078, column: 27, scope: !6896)
!6912 = !DILocation(line: 4078, column: 30, scope: !6896)
!6913 = !DILocation(line: 4078, column: 35, scope: !6896)
!6914 = !DILocation(line: 4079, column: 1, scope: !6896)
!6915 = distinct !DISubprogram(name: "gimple_cond_code", scope: !419, file: !419, line: 2221, type: !3774, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6916 = !DILocalVariable(name: "gs", arg: 1, scope: !6915, file: !419, line: 2221, type: !3663)
!6917 = !DILocation(line: 2221, column: 32, scope: !6915)
!6918 = !DILocation(line: 2224, column: 27, scope: !6915)
!6919 = !DILocation(line: 2224, column: 31, scope: !6915)
!6920 = !DILocation(line: 2224, column: 38, scope: !6915)
!6921 = !DILocation(line: 2224, column: 3, scope: !6915)
!6922 = distinct !DISubprogram(name: "gimple_omp_for_set_incr", scope: !419, file: !419, line: 3571, type: !6847, scopeLine: 3572, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6923 = !DILocalVariable(name: "gs", arg: 1, scope: !6922, file: !419, line: 3571, type: !674)
!6924 = !DILocation(line: 3571, column: 33, scope: !6922)
!6925 = !DILocalVariable(name: "i", arg: 2, scope: !6922, file: !419, line: 3571, type: !1179)
!6926 = !DILocation(line: 3571, column: 44, scope: !6922)
!6927 = !DILocalVariable(name: "incr", arg: 3, scope: !6922, file: !419, line: 3571, type: !859)
!6928 = !DILocation(line: 3571, column: 52, scope: !6922)
!6929 = !DILocation(line: 3574, column: 3, scope: !6922)
!6930 = !DILocation(line: 3575, column: 37, scope: !6922)
!6931 = !DILocation(line: 3575, column: 3, scope: !6922)
!6932 = !DILocation(line: 3575, column: 7, scope: !6922)
!6933 = !DILocation(line: 3575, column: 22, scope: !6922)
!6934 = !DILocation(line: 3575, column: 27, scope: !6922)
!6935 = !DILocation(line: 3575, column: 30, scope: !6922)
!6936 = !DILocation(line: 3575, column: 35, scope: !6922)
!6937 = !DILocation(line: 3576, column: 1, scope: !6922)
!6938 = distinct !DISubprogram(name: "create_phi_for_local_result", scope: !3, file: !3, line: 802, type: !4167, scopeLine: 803, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!6939 = !DILocalVariable(name: "slot", arg: 1, scope: !6938, file: !3, line: 802, type: !1177)
!6940 = !DILocation(line: 802, column: 37, scope: !6938)
!6941 = !DILocalVariable(name: "data", arg: 2, scope: !6938, file: !3, line: 802, type: !849)
!6942 = !DILocation(line: 802, column: 49, scope: !6938)
!6943 = !DILocalVariable(name: "reduc", scope: !6938, file: !3, line: 804, type: !4186)
!6944 = !DILocation(line: 804, column: 32, scope: !6938)
!6945 = !DILocation(line: 804, column: 67, scope: !6938)
!6946 = !DILocation(line: 804, column: 66, scope: !6938)
!6947 = !DILocation(line: 804, column: 40, scope: !6938)
!6948 = !DILocalVariable(name: "loop", scope: !6938, file: !3, line: 805, type: !6949)
!6949 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2239)
!6950 = !DILocation(line: 805, column: 28, scope: !6938)
!6951 = !DILocation(line: 805, column: 57, scope: !6938)
!6952 = !DILocation(line: 805, column: 35, scope: !6938)
!6953 = !DILocalVariable(name: "e", scope: !6938, file: !3, line: 806, type: !713)
!6954 = !DILocation(line: 806, column: 8, scope: !6938)
!6955 = !DILocalVariable(name: "new_phi", scope: !6938, file: !3, line: 807, type: !674)
!6956 = !DILocation(line: 807, column: 10, scope: !6938)
!6957 = !DILocalVariable(name: "store_bb", scope: !6938, file: !3, line: 808, type: !1122)
!6958 = !DILocation(line: 808, column: 15, scope: !6938)
!6959 = !DILocalVariable(name: "local_res", scope: !6938, file: !3, line: 809, type: !859)
!6960 = !DILocation(line: 809, column: 8, scope: !6938)
!6961 = !DILocalVariable(name: "locus", scope: !6938, file: !3, line: 810, type: !667)
!6962 = !DILocation(line: 810, column: 19, scope: !6938)
!6963 = !DILocation(line: 815, column: 14, scope: !6938)
!6964 = !DILocation(line: 815, column: 43, scope: !6938)
!6965 = !DILocation(line: 815, column: 12, scope: !6938)
!6966 = !DILocation(line: 822, column: 7, scope: !6967)
!6967 = distinct !DILexicalBlock(scope: !6938, file: !3, line: 822, column: 7)
!6968 = !DILocation(line: 822, column: 34, scope: !6967)
!6969 = !DILocation(line: 822, column: 31, scope: !6967)
!6970 = !DILocation(line: 822, column: 7, scope: !6938)
!6971 = !DILocation(line: 823, column: 9, scope: !6967)
!6972 = !DILocation(line: 823, column: 7, scope: !6967)
!6973 = !DILocation(line: 823, column: 5, scope: !6967)
!6974 = !DILocation(line: 825, column: 9, scope: !6967)
!6975 = !DILocation(line: 825, column: 7, scope: !6967)
!6976 = !DILocation(line: 827, column: 22, scope: !6938)
!6977 = !DILocation(line: 827, column: 7, scope: !6938)
!6978 = !DILocation(line: 827, column: 5, scope: !6938)
!6979 = !DILocation(line: 829, column: 28, scope: !6938)
!6980 = !DILocation(line: 829, column: 35, scope: !6938)
!6981 = !DILocation(line: 829, column: 11, scope: !6938)
!6982 = !DILocation(line: 829, column: 9, scope: !6938)
!6983 = !DILocation(line: 830, column: 30, scope: !6938)
!6984 = !DILocation(line: 830, column: 41, scope: !6938)
!6985 = !DILocation(line: 830, column: 13, scope: !6938)
!6986 = !DILocation(line: 830, column: 11, scope: !6938)
!6987 = !DILocation(line: 831, column: 35, scope: !6938)
!6988 = !DILocation(line: 831, column: 3, scope: !6938)
!6989 = !DILocation(line: 831, column: 33, scope: !6938)
!6990 = !DILocation(line: 832, column: 16, scope: !6938)
!6991 = !DILocation(line: 832, column: 25, scope: !6938)
!6992 = !DILocation(line: 832, column: 32, scope: !6938)
!6993 = !DILocation(line: 832, column: 38, scope: !6938)
!6994 = !DILocation(line: 832, column: 41, scope: !6938)
!6995 = !DILocation(line: 832, column: 3, scope: !6938)
!6996 = !DILocation(line: 833, column: 16, scope: !6938)
!6997 = !DILocation(line: 833, column: 44, scope: !6938)
!6998 = !DILocation(line: 833, column: 51, scope: !6938)
!6999 = !DILocation(line: 833, column: 25, scope: !6938)
!7000 = !DILocation(line: 834, column: 9, scope: !6938)
!7001 = !DILocation(line: 834, column: 38, scope: !6938)
!7002 = !DILocation(line: 833, column: 3, scope: !6938)
!7003 = !DILocation(line: 835, column: 20, scope: !6938)
!7004 = !DILocation(line: 835, column: 3, scope: !6938)
!7005 = !DILocation(line: 835, column: 10, scope: !6938)
!7006 = !DILocation(line: 835, column: 18, scope: !6938)
!7007 = !DILocation(line: 837, column: 3, scope: !6938)
!7008 = distinct !DISubprogram(name: "create_call_for_reduction_1", scope: !3, file: !3, line: 855, type: !4167, scopeLine: 856, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!7009 = !DILocalVariable(name: "slot", arg: 1, scope: !7008, file: !3, line: 855, type: !1177)
!7010 = !DILocation(line: 855, column: 37, scope: !7008)
!7011 = !DILocalVariable(name: "data", arg: 2, scope: !7008, file: !3, line: 855, type: !849)
!7012 = !DILocation(line: 855, column: 49, scope: !7008)
!7013 = !DILocalVariable(name: "reduc", scope: !7008, file: !3, line: 857, type: !4186)
!7014 = !DILocation(line: 857, column: 32, scope: !7008)
!7015 = !DILocation(line: 857, column: 67, scope: !7008)
!7016 = !DILocation(line: 857, column: 66, scope: !7008)
!7017 = !DILocation(line: 857, column: 40, scope: !7008)
!7018 = !DILocalVariable(name: "clsn_data", scope: !7008, file: !3, line: 858, type: !5979)
!7019 = !DILocation(line: 858, column: 27, scope: !7008)
!7020 = !DILocation(line: 858, column: 60, scope: !7008)
!7021 = !DILocation(line: 858, column: 39, scope: !7008)
!7022 = !DILocalVariable(name: "gsi", scope: !7008, file: !3, line: 859, type: !2200)
!7023 = !DILocation(line: 859, column: 24, scope: !7008)
!7024 = !DILocalVariable(name: "type", scope: !7008, file: !3, line: 860, type: !859)
!7025 = !DILocation(line: 860, column: 8, scope: !7008)
!7026 = !DILocation(line: 860, column: 15, scope: !7008)
!7027 = !DILocalVariable(name: "struct_type", scope: !7008, file: !3, line: 861, type: !859)
!7028 = !DILocation(line: 861, column: 8, scope: !7008)
!7029 = !DILocation(line: 861, column: 22, scope: !7008)
!7030 = !DILocalVariable(name: "load_struct", scope: !7008, file: !3, line: 862, type: !859)
!7031 = !DILocation(line: 862, column: 8, scope: !7008)
!7032 = !DILocalVariable(name: "bb", scope: !7008, file: !3, line: 863, type: !1122)
!7033 = !DILocation(line: 863, column: 15, scope: !7008)
!7034 = !DILocalVariable(name: "new_bb", scope: !7008, file: !3, line: 864, type: !1122)
!7035 = !DILocation(line: 864, column: 15, scope: !7008)
!7036 = !DILocalVariable(name: "e", scope: !7008, file: !3, line: 865, type: !713)
!7037 = !DILocation(line: 865, column: 8, scope: !7008)
!7038 = !DILocalVariable(name: "t", scope: !7008, file: !3, line: 866, type: !859)
!7039 = !DILocation(line: 866, column: 8, scope: !7008)
!7040 = !DILocalVariable(name: "addr", scope: !7008, file: !3, line: 866, type: !859)
!7041 = !DILocation(line: 866, column: 11, scope: !7008)
!7042 = !DILocalVariable(name: "ref", scope: !7008, file: !3, line: 866, type: !859)
!7043 = !DILocation(line: 866, column: 17, scope: !7008)
!7044 = !DILocalVariable(name: "x", scope: !7008, file: !3, line: 866, type: !859)
!7045 = !DILocation(line: 866, column: 22, scope: !7008)
!7046 = !DILocalVariable(name: "tmp_load", scope: !7008, file: !3, line: 867, type: !859)
!7047 = !DILocation(line: 867, column: 8, scope: !7008)
!7048 = !DILocalVariable(name: "name", scope: !7008, file: !3, line: 867, type: !859)
!7049 = !DILocation(line: 867, column: 18, scope: !7008)
!7050 = !DILocalVariable(name: "load", scope: !7008, file: !3, line: 868, type: !674)
!7051 = !DILocation(line: 868, column: 10, scope: !7008)
!7052 = !DILocation(line: 870, column: 17, scope: !7008)
!7053 = !DILocation(line: 870, column: 15, scope: !7008)
!7054 = !DILocation(line: 871, column: 7, scope: !7008)
!7055 = !DILocation(line: 871, column: 5, scope: !7008)
!7056 = !DILocation(line: 873, column: 22, scope: !7008)
!7057 = !DILocation(line: 873, column: 25, scope: !7008)
!7058 = !DILocation(line: 873, column: 10, scope: !7008)
!7059 = !DILocation(line: 873, column: 8, scope: !7008)
!7060 = !DILocation(line: 876, column: 8, scope: !7008)
!7061 = !DILocation(line: 876, column: 19, scope: !7008)
!7062 = !DILocation(line: 876, column: 6, scope: !7008)
!7063 = !DILocation(line: 878, column: 20, scope: !7008)
!7064 = !DILocation(line: 878, column: 24, scope: !7008)
!7065 = !DILocation(line: 878, column: 7, scope: !7008)
!7066 = !DILocation(line: 878, column: 5, scope: !7008)
!7067 = !DILocation(line: 879, column: 12, scope: !7008)
!7068 = !DILocation(line: 879, column: 15, scope: !7008)
!7069 = !DILocation(line: 879, column: 10, scope: !7008)
!7070 = !DILocation(line: 881, column: 30, scope: !7008)
!7071 = !DILocation(line: 881, column: 14, scope: !7008)
!7072 = !DILocation(line: 881, column: 12, scope: !7008)
!7073 = !DILocation(line: 882, column: 23, scope: !7008)
!7074 = !DILocation(line: 882, column: 3, scope: !7008)
!7075 = !DILocation(line: 883, column: 29, scope: !7008)
!7076 = !DILocation(line: 883, column: 14, scope: !7008)
!7077 = !DILocation(line: 883, column: 12, scope: !7008)
!7078 = !DILocation(line: 884, column: 40, scope: !7008)
!7079 = !DILocation(line: 884, column: 50, scope: !7008)
!7080 = !DILocation(line: 884, column: 10, scope: !7008)
!7081 = !DILocation(line: 884, column: 8, scope: !7008)
!7082 = !DILocation(line: 885, column: 34, scope: !7008)
!7083 = !DILocation(line: 885, column: 3, scope: !7008)
!7084 = !DILocation(line: 885, column: 32, scope: !7008)
!7085 = !DILocation(line: 886, column: 23, scope: !7008)
!7086 = !DILocation(line: 886, column: 9, scope: !7008)
!7087 = !DILocation(line: 887, column: 27, scope: !7008)
!7088 = !DILocation(line: 887, column: 3, scope: !7008)
!7089 = !DILocation(line: 889, column: 20, scope: !7008)
!7090 = !DILocation(line: 889, column: 28, scope: !7008)
!7091 = !DILocation(line: 889, column: 7, scope: !7008)
!7092 = !DILocation(line: 889, column: 5, scope: !7008)
!7093 = !DILocation(line: 890, column: 12, scope: !7008)
!7094 = !DILocation(line: 890, column: 15, scope: !7008)
!7095 = !DILocation(line: 890, column: 10, scope: !7008)
!7096 = !DILocation(line: 891, column: 23, scope: !7008)
!7097 = !DILocation(line: 891, column: 9, scope: !7008)
!7098 = !DILocation(line: 892, column: 9, scope: !7008)
!7099 = !DILocation(line: 892, column: 7, scope: !7008)
!7100 = !DILocation(line: 893, column: 7, scope: !7008)
!7101 = !DILocation(line: 893, column: 5, scope: !7008)
!7102 = !DILocation(line: 897, column: 42, scope: !7008)
!7103 = !DILocation(line: 897, column: 10, scope: !7008)
!7104 = !DILocation(line: 897, column: 8, scope: !7008)
!7105 = !DILocation(line: 900, column: 58, scope: !7008)
!7106 = !DILocation(line: 900, column: 27, scope: !7008)
!7107 = !DILocation(line: 900, column: 3, scope: !7008)
!7108 = !DILocation(line: 901, column: 3, scope: !7008)
!7109 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !2038, file: !2038, line: 31, type: !7110, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!7110 = !DISubroutineType(types: !7111)
!7111 = !{!762, !7112, !7, !2126}
!7112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7113, size: 64)
!7113 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2042)
!7114 = !DILocalVariable(name: "vec_", arg: 1, scope: !7109, file: !2038, line: 31, type: !7112)
!7115 = !DILocation(line: 31, column: 1, scope: !7109)
!7116 = !DILocalVariable(name: "ix_", arg: 2, scope: !7109, file: !2038, line: 31, type: !7)
!7117 = !DILocalVariable(name: "ptr", arg: 3, scope: !7109, file: !2038, line: 31, type: !2126)
!7118 = !DILocation(line: 31, column: 1, scope: !7119)
!7119 = distinct !DILexicalBlock(scope: !7109, file: !2038, line: 31, column: 1)
!7120 = !DILocation(line: 31, column: 1, scope: !7121)
!7121 = distinct !DILexicalBlock(scope: !7119, file: !2038, line: 31, column: 1)
!7122 = !DILocation(line: 31, column: 1, scope: !7123)
!7123 = distinct !DILexicalBlock(scope: !7119, file: !2038, line: 31, column: 1)
!7124 = distinct !DISubprogram(name: "get_loop", scope: !378, file: !378, line: 417, type: !7125, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!7125 = !DISubroutineType(types: !7126)
!7126 = !{!1307, !7}
!7127 = !DILocalVariable(name: "num", arg: 1, scope: !7124, file: !378, line: 417, type: !7)
!7128 = !DILocation(line: 417, column: 20, scope: !7124)
!7129 = !DILocation(line: 419, column: 10, scope: !7124)
!7130 = !DILocation(line: 419, column: 3, scope: !7124)
!7131 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2038, file: !2038, line: 32, type: !7132, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2261)
!7132 = !DISubroutineType(types: !7133)
!7133 = !{null, !7134}
!7134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2036, size: 64)
!7135 = !DILocalVariable(name: "vec_", arg: 1, scope: !7131, file: !2038, line: 32, type: !7134)
!7136 = !DILocation(line: 32, column: 1, scope: !7131)
!7137 = !DILocation(line: 32, column: 1, scope: !7138)
!7138 = distinct !DILexicalBlock(scope: !7131, file: !2038, line: 32, column: 1)
