; ModuleID = 'ira-color.c'
source_filename = "ira-color.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type opaque
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.ira_allocno = type { i32, i32, i32, i32, %struct.rtx_def*, %struct.ira_allocno*, %struct.ira_loop_tree_node*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.ira_allocno_copy*, %struct.ira_allocno*, %struct.ira_allocno*, %struct.ira_allocno*, %struct.ira_allocno*, %struct.ira_allocno_live_range*, i32, i32, i8*, i32, i32, i64, i64, i32, i32, i32, i16, %struct.ira_allocno*, i32*, i32*, i32*, i32*, i32, i32, %struct.ira_allocno*, %struct.ira_allocno*, i32 }
%struct.ira_loop_tree_node = type { %struct.basic_block_def*, %struct.loop*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node*, i32, i8, %struct.ira_allocno**, i8, [27 x i32], %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ira_allocno_copy = type { i32, %struct.ira_allocno*, %struct.ira_allocno*, i32, i8, %struct.rtx_def*, %struct.ira_allocno_copy*, %struct.ira_allocno_copy*, %struct.ira_allocno_copy*, %struct.ira_allocno_copy*, %struct.ira_loop_tree_node* }
%struct.ira_allocno_live_range = type { %struct.ira_allocno*, i32, i32, %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.ira_spilled_reg_stack_slot = type { %struct.bitmap_head_def, %struct.rtx_def*, i32 }
%struct.reg_info_t = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.df = type { [8 x %struct.dataflow*], [8 x %struct.dataflow*], %struct.bitmap_head_def*, %struct.df_ref_info, %struct.df_ref_info, %struct.df_reg_info**, %struct.df_reg_info**, %struct.df_reg_info**, i32, i32, %struct.df_insn_info**, i32, i32, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32*, i32*, i32, i32, i32*, i32, i8, i8, i8 }
%struct.dataflow = type { %struct.df_problem*, i8**, i32, %struct.alloc_pool_def*, %struct.bitmap_head_def*, i8*, i32, i8, i8, i8 }
%struct.df_problem = type { i32, i32, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.basic_block_def*, i8*)*, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.dataflow*, %struct.bitmap_head_def*, i32*, i32)*, void (%struct.basic_block_def*)*, void (%struct.edge_def*)*, i8 (i32)*, void (%struct.bitmap_head_def*)*, void ()*, void ()*, void (%struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void ()*, void ()*, %struct.df_problem*, i32, i8 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.df_ref_info = type { %union.df_ref_d**, i32*, i32*, i32, i32, i32, i32 }
%union.df_ref_d = type { %struct.df_extract_ref }
%struct.df_extract_ref = type { %struct.df_regular_ref, i32, i32, i32 }
%struct.df_regular_ref = type { %struct.df_base_ref, %struct.rtx_def** }
%struct.df_base_ref = type { i32, %struct.rtx_def*, %struct.df_link*, %struct.df_insn_info*, %union.df_ref_d*, %union.df_ref_d*, i32, i32, i32 }
%struct.df_link = type { %union.df_ref_d*, %struct.df_link* }
%struct.df_insn_info = type { %struct.rtx_def*, %union.df_ref_d**, %union.df_ref_d**, %union.df_ref_d**, %struct.df_mw_hardreg**, i32 }
%struct.df_mw_hardreg = type { %struct.rtx_def*, i32, i32, i32, i32 }
%struct.df_reg_info = type { %union.df_ref_d*, i32 }
%struct.VEC_ira_allocno_t_heap = type { %struct.VEC_ira_allocno_t_base }
%struct.VEC_ira_allocno_t_base = type { i32, i32, [1 x %struct.ira_allocno*] }
%struct.update_cost_queue_elem = type { i32, i32, %struct.ira_allocno* }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.regstat_n_sets_and_refs_t = type { i32, i32 }
%struct.splay_tree_s = type { %struct.splay_tree_node_s*, i32 (i64, i64)*, void (i64)*, void (i64)*, i8* (i32, i8*)*, void (i8*, i8*)*, i8* }
%struct.splay_tree_node_s = type { i64, i64, %struct.splay_tree_node_s*, %struct.splay_tree_node_s* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.df_lr_bb_info = type { %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.ira_allocno_conflict_iterator = type { i8, i8*, i32, i32, i32, i32, i64 }
%struct.ira_allocno_iterator = type { i32 }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }

@optimize_size = external dso_local global i32, align 4
@flag_branch_probabilities = external dso_local global i32, align 4
@cfun = external dso_local global %struct.function*, align 8
@sorted_allocnos = internal global %struct.ira_allocno** null, align 8, !dbg !0
@internal_flag_ira_verbose = external dso_local global i32, align 4
@ira_dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [58 x i8] c"      Secondary allocation: assign hard reg %d to reg %d\0A\00", align 1
@processed_coalesced_allocno_bitmap = internal global %struct.bitmap_head_def* null, align 8, !dbg !1870
@coloring_allocno_bitmap = internal global %struct.bitmap_head_def* null, align 8, !dbg !1864
@ira_regno_allocno_map = external dso_local global %struct.ira_allocno**, align 8
@allocno_coalesced_p = internal global i8 0, align 1, !dbg !1868
@regno_coalesced_allocno_cost = internal global i32* null, align 8, !dbg !1874
@regno_coalesced_allocno_num = internal global i32* null, align 8, !dbg !1876
@ira_allocnos_num = external dso_local global i32, align 4
@flag_ira_share_spill_slots = external dso_local global i32, align 4
@ira_reg_equiv_len = external dso_local global i32, align 4
@ira_reg_equiv_const = external dso_local global %struct.rtx_def**, align 8
@ira_reg_equiv_invariant_p = external dso_local global i8*, align 8
@.str.1 = private unnamed_addr constant [27 x i8] c"      Slot %d (freq,size):\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c" a%dr%d(%d,%d)\00", align 1
@mode_size = external dso_local global [87 x i8], align 16
@regno_reg_rtx = external dso_local global %struct.rtx_def**, align 8
@.str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@ira_spilled_reg_stack_slots_num = external dso_local global i32, align 4
@regno_max_ref_width = internal global i32* null, align 8, !dbg !1878
@reg_renumber = external dso_local global i16*, align 8
@ira_class_hard_reg_index = external dso_local global [27 x [53 x i16]], align 16
@ira_overall_cost = external dso_local global i32, align 4
@.str.4 = private unnamed_addr constant [12 x i8] c"ira-color.c\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"      Spill %d(a%d), cost=%d\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"      Spilled regs\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@consideration_allocno_bitmap = internal global %struct.bitmap_head_def* null, align 8, !dbg !1866
@.str.9 = private unnamed_addr constant [36 x i8] c"        Try assign %d(a%d), cost=%d\00", align 1
@ira_spilled_reg_stack_slots = external dso_local global %struct.ira_spilled_reg_stack_slot*, align 8
@.str.10 = private unnamed_addr constant [39 x i8] c"      Assigning %d(freq=%d) slot %d of\00", align 1
@reg_info_p = external dso_local global %struct.reg_info_t*, align 8
@reg_obstack = external dso_local global %struct.bitmap_obstack, align 8
@.str.11 = private unnamed_addr constant [43 x i8] c"      Assigning %d(freq=%d) a new slot %d\0A\00", align 1
@inv_reg_alloc_order = external dso_local global [53 x i32], align 16
@allocno_priorities = internal global i32* null, align 8, !dbg !1872
@ira_conflicts_p = external dso_local global i8, align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@df = external dso_local global %struct.df*, align 8
@ira_allocnos = external dso_local global %struct.ira_allocno**, align 8
@ira_conflict_id_allocno_map = external dso_local global %struct.ira_allocno**, align 8
@ira_reg_class_nregs = external dso_local global [27 x [87 x i32]], align 16
@ira_reg_classes_intersect_p = external dso_local global [27 x [27 x i8]], align 16
@regclass_map = external dso_local constant [53 x i32], align 16
@ira_register_move_cost = external dso_local global [87 x [27 x i16]*], align 16
@ira_class_hard_regs_num = external dso_local global [27 x i32], align 16
@assign_hard_reg.costs = internal global [53 x i32] zeroinitializer, align 16, !dbg !1881
@assign_hard_reg.full_costs = internal global [53 x i32] zeroinitializer, align 16, !dbg !1890
@ira_reg_mode_hard_regset = external dso_local global [53 x [87 x i64]], align 16
@reg_class_contents = external dso_local global [27 x i64], align 16
@ira_class_hard_regs = external dso_local global [27 x [53 x i16]], align 16
@prohibited_class_mode_regs = external dso_local global [27 x [87 x i64]], align 16
@allocated_hardreg_p = internal global [53 x i8] zeroinitializer, align 16, !dbg !1900
@call_used_reg_set = external dso_local global i64, align 8
@ira_memory_move_cost = external dso_local global [87 x [27 x [2 x i16]]], align 16
@.str.13 = private unnamed_addr constant [38 x i8] c"(memory is more profitable %d vs %d) \00", align 1
@flag_ira_algorithm = external dso_local global i32, align 4
@allocno_stack_vec = internal global %struct.VEC_ira_allocno_t_heap* null, align 8, !dbg !1903
@.str.14 = private unnamed_addr constant [16 x i8] c"        Pushing\00", align 1
@update_cost_check = internal global i32 0, align 4, !dbg !1892
@update_cost_queue = internal global %struct.ira_allocno* null, align 8, !dbg !1894
@update_cost_queue_elems = internal global %struct.update_cost_queue_elem* null, align 8, !dbg !1896
@update_cost_queue_tail = internal global %struct.update_cost_queue_elem* null, align 8, !dbg !1898
@hard_regno_nregs = external dso_local global [53 x [87 x i8]], align 16
@.str.15 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@ira_copies_num = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [50 x i8] c"      Coalescing copy %d:a%dr%d-a%dr%d (freq=%d)\0A\00", align 1
@slot_coalesced_allocnos_live_ranges = internal global %struct.ira_allocno_live_range** null, align 8, !dbg !1905
@.str.17 = private unnamed_addr constant [50 x i8] c"      Coalescing spilled allocnos a%dr%d->a%dr%d\0A\00", align 1
@x_rtl = external dso_local global %struct.rtl_data, align 8
@flag_caller_saves = external dso_local global i32, align 4
@caller_save_needed = external dso_local global i32, align 4
@.str.18 = private unnamed_addr constant [18 x i8] c": reassign to %d\0A\00", align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@regstat_n_sets_and_refs = external dso_local global %struct.regstat_n_sets_and_refs_t*, align 8
@removed_splay_allocno_vec = internal global %struct.VEC_ira_allocno_t_heap* null, align 8, !dbg !1907
@allocnos_for_spilling = internal global %struct.ira_allocno** null, align 8, !dbg !1909
@.str.19 = private unnamed_addr constant [17 x i8] c"splay tree nodes\00", align 1
@splay_tree_node_pool = internal global %struct.alloc_pool_def* null, align 8, !dbg !1911
@.str.20 = private unnamed_addr constant [27 x i8] c"\0A**** Allocnos coloring:\0A\0A\00", align 1
@ira_loop_tree_root = external dso_local global %struct.ira_loop_tree_node*, align 8
@flag_ira_region = external dso_local global i32, align 4
@ira_available_class_regs = external dso_local global [27 x i32], align 16
@.str.21 = private unnamed_addr constant [55 x i8] c"\0A  Loop %d (parent %d, header bb%d, depth %d)\0A    bbs:\00", align 1
@ira_bb_nodes = external dso_local global %struct.ira_loop_tree_node*, align 8
@.str.22 = private unnamed_addr constant [11 x i8] c"(->%d:l%d)\00", align 1
@.str.23 = private unnamed_addr constant [10 x i8] c"\0A    all:\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c" %dr%d\00", align 1
@.str.25 = private unnamed_addr constant [22 x i8] c"\0A    modified regnos:\00", align 1
@.str.26 = private unnamed_addr constant [13 x i8] c"\0A    border:\00", align 1
@.str.27 = private unnamed_addr constant [15 x i8] c"\0A    Pressure:\00", align 1
@ira_reg_class_cover_size = external dso_local global i32, align 4
@ira_reg_class_cover = external dso_local global [27 x i32], align 16
@.str.28 = private unnamed_addr constant [7 x i8] c" %s=%d\00", align 1
@reg_class_names = external dso_local global [0 x i8*], align 8
@flag_ira_coalesce = external dso_local global i32, align 4
@.str.29 = private unnamed_addr constant [12 x i8] c"      Spill\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"      \00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"  -- \00", align 1
@.str.32 = private unnamed_addr constant [20 x i8] c"assign hard reg %d\0A\00", align 1
@.str.33 = private unnamed_addr constant [15 x i8] c"assign memory\0A\00", align 1
@colorable_allocno_bucket = internal global %struct.ira_allocno* null, align 8, !dbg !1934
@uncolorable_allocno_bucket = internal global %struct.ira_allocno* null, align 8, !dbg !1936
@ira_no_alloc_regs = external dso_local global i64, align 8
@.str.34 = private unnamed_addr constant [35 x i8] c"    Reg %d of %s has %d regs less\0A\00", align 1
@uncolorable_allocnos_num = internal global [27 x i32] zeroinitializer, align 16, !dbg !1938
@uncolorable_allocnos_splay_tree = internal global [27 x %struct.splay_tree_s*] zeroinitializer, align 16, !dbg !1940
@.str.35 = private unnamed_addr constant [43 x i8] c"      Pushing p%d(%d) (spill for NO_REGS)\0A\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"      Pushing\00", align 1
@.str.37 = private unnamed_addr constant [38 x i8] c"(potential spill: %spri=%d, cost=%d)\0A\00", align 1
@.str.38 = private unnamed_addr constant [12 x i8] c"bad spill, \00", align 1
@.str.39 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.40 = private unnamed_addr constant [14 x i8] c"      Popping\00", align 1
@.str.41 = private unnamed_addr constant [15 x i8] c"assign reg %d\0A\00", align 1
@.str.42 = private unnamed_addr constant [7 x i8] c"spill\0A\00", align 1
@.str.43 = private unnamed_addr constant [37 x i8] c"New iteration of spill/restore move\0A\00", align 1
@.str.44 = private unnamed_addr constant [54 x i8] c"      Moving spill/restore for a%dr%d up from loop %d\00", align 1
@.str.45 = private unnamed_addr constant [14 x i8] c" - profit %d\0A\00", align 1
@ira_max_point = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %loop_node, i32 %regno, i8 zeroext %exit_p) #0 !dbg !1983 {
entry:
  %loop_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %regno.addr = alloca i32, align 4
  %exit_p.addr = alloca i8, align 1
  %freq = alloca i32, align 4
  %i = alloca i32, align 4
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %edges = alloca %struct.VEC_edge_heap*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.ira_loop_tree_node* %loop_node, %struct.ira_loop_tree_node** %loop_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_node.addr, metadata !1986, metadata !DIExpression()), !dbg !1987
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !1988, metadata !DIExpression()), !dbg !1989
  store i8 %exit_p, i8* %exit_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %exit_p.addr, metadata !1990, metadata !DIExpression()), !dbg !1991
  call void @llvm.dbg.declare(metadata i32* %freq, metadata !1992, metadata !DIExpression()), !dbg !1993
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1994, metadata !DIExpression()), !dbg !1995
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !1996, metadata !DIExpression()), !dbg !2003
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2004, metadata !DIExpression()), !dbg !2005
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %edges, metadata !2006, metadata !DIExpression()), !dbg !2012
  store i32 0, i32* %freq, align 4, !dbg !2013
  %0 = load i8, i8* %exit_p.addr, align 1, !dbg !2014
  %tobool = icmp ne i8 %0, 0, !dbg !2014
  br i1 %tobool, label %if.else, label %if.then, !dbg !2016

if.then:                                          ; preds = %entry
  %1 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !2017
  %loop = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %1, i32 0, i32 1, !dbg !2017
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2017
  %header = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 2, !dbg !2017
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2017
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !2017
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !2017
  %4 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2017
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !2017
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !2017
  store i32 %6, i32* %5, align 8, !dbg !2017
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !2017
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !2017
  store %struct.VEC_edge_gc** %8, %struct.VEC_edge_gc*** %7, align 8, !dbg !2017
  %9 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2017
  %10 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2017
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false), !dbg !2017
  br label %for.cond, !dbg !2017

for.cond:                                         ; preds = %for.inc, %if.then
  %11 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2020
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 0, !dbg !2020
  %13 = load i32, i32* %12, align 8, !dbg !2020
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 1, !dbg !2020
  %15 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %14, align 8, !dbg !2020
  %call1 = call zeroext i8 @ei_cond(i32 %13, %struct.VEC_edge_gc** %15, %struct.edge_def** %e), !dbg !2020
  %tobool2 = icmp ne i8 %call1, 0, !dbg !2017
  br i1 %tobool2, label %for.body, label %for.end, !dbg !2017

for.body:                                         ; preds = %for.cond
  %16 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2022
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 0, !dbg !2024
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2024
  %18 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !2025
  %loop3 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %18, i32 0, i32 1, !dbg !2026
  %19 = load %struct.loop*, %struct.loop** %loop3, align 8, !dbg !2026
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 3, !dbg !2027
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !2027
  %cmp = icmp ne %struct.basic_block_def* %17, %20, !dbg !2028
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !2029

land.lhs.true:                                    ; preds = %for.body
  %21 = load i32, i32* %regno.addr, align 4, !dbg !2030
  %cmp4 = icmp slt i32 %21, 0, !dbg !2031
  br i1 %cmp4, label %if.then14, label %lor.lhs.false, !dbg !2032

lor.lhs.false:                                    ; preds = %land.lhs.true
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2033
  %src5 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 0, !dbg !2033
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %src5, align 8, !dbg !2033
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !2033
  %24 = load i32, i32* %index, align 8, !dbg !2033
  %call6 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %24), !dbg !2033
  %out = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call6, i32 0, i32 3, !dbg !2033
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %out, align 8, !dbg !2033
  %26 = load i32, i32* %regno.addr, align 4, !dbg !2034
  %call7 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %25, i32 %26), !dbg !2035
  %tobool8 = icmp ne i32 %call7, 0, !dbg !2035
  br i1 %tobool8, label %land.lhs.true9, label %if.end, !dbg !2036

land.lhs.true9:                                   ; preds = %lor.lhs.false
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2037
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 1, !dbg !2037
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2037
  %index10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 9, !dbg !2037
  %29 = load i32, i32* %index10, align 8, !dbg !2037
  %call11 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %29), !dbg !2037
  %in = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call11, i32 0, i32 2, !dbg !2037
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %in, align 8, !dbg !2037
  %31 = load i32, i32* %regno.addr, align 4, !dbg !2038
  %call12 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %30, i32 %31), !dbg !2039
  %tobool13 = icmp ne i32 %call12, 0, !dbg !2039
  br i1 %tobool13, label %if.then14, label %if.end, !dbg !2040

if.then14:                                        ; preds = %land.lhs.true9, %land.lhs.true
  %32 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2041
  %src15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %32, i32 0, i32 0, !dbg !2041
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %src15, align 8, !dbg !2041
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 11, !dbg !2041
  %34 = load i32, i32* %frequency, align 8, !dbg !2041
  %35 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2041
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 8, !dbg !2041
  %36 = load i32, i32* %probability, align 4, !dbg !2041
  %mul = mul nsw i32 %34, %36, !dbg !2041
  %add = add nsw i32 %mul, 5000, !dbg !2041
  %div = sdiv i32 %add, 10000, !dbg !2041
  %37 = load i32, i32* %freq, align 4, !dbg !2042
  %add16 = add nsw i32 %37, %div, !dbg !2042
  store i32 %add16, i32* %freq, align 4, !dbg !2042
  br label %if.end, !dbg !2043

if.end:                                           ; preds = %if.then14, %land.lhs.true9, %lor.lhs.false, %for.body
  br label %for.inc, !dbg !2044

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2020
  br label %for.cond, !dbg !2020, !llvm.loop !2045

for.end:                                          ; preds = %for.cond
  br label %if.end50, !dbg !2047

if.else:                                          ; preds = %entry
  %38 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node.addr, align 8, !dbg !2048
  %loop17 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %38, i32 0, i32 1, !dbg !2050
  %39 = load %struct.loop*, %struct.loop** %loop17, align 8, !dbg !2050
  %call18 = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %39), !dbg !2051
  store %struct.VEC_edge_heap* %call18, %struct.VEC_edge_heap** %edges, align 8, !dbg !2052
  store i32 0, i32* %i, align 4, !dbg !2053
  br label %for.cond19, !dbg !2055

for.cond19:                                       ; preds = %for.inc48, %if.else
  %40 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !2056
  %tobool20 = icmp ne %struct.VEC_edge_heap* %40, null, !dbg !2056
  br i1 %tobool20, label %cond.true, label %cond.false, !dbg !2056

cond.true:                                        ; preds = %for.cond19
  %41 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !2056
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %41, i32 0, i32 0, !dbg !2056
  br label %cond.end, !dbg !2056

cond.false:                                       ; preds = %for.cond19
  br label %cond.end, !dbg !2056

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2056
  %42 = load i32, i32* %i, align 4, !dbg !2056
  %call21 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %42, %struct.edge_def** %e), !dbg !2056
  %tobool22 = icmp ne i32 %call21, 0, !dbg !2058
  br i1 %tobool22, label %for.body23, label %for.end49, !dbg !2058

for.body23:                                       ; preds = %cond.end
  %43 = load i32, i32* %regno.addr, align 4, !dbg !2059
  %cmp24 = icmp slt i32 %43, 0, !dbg !2061
  br i1 %cmp24, label %if.then39, label %lor.lhs.false25, !dbg !2062

lor.lhs.false25:                                  ; preds = %for.body23
  %44 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2063
  %src26 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %44, i32 0, i32 0, !dbg !2063
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %src26, align 8, !dbg !2063
  %index27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 9, !dbg !2063
  %46 = load i32, i32* %index27, align 8, !dbg !2063
  %call28 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %46), !dbg !2063
  %out29 = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call28, i32 0, i32 3, !dbg !2063
  %47 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %out29, align 8, !dbg !2063
  %48 = load i32, i32* %regno.addr, align 4, !dbg !2064
  %call30 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %47, i32 %48), !dbg !2065
  %tobool31 = icmp ne i32 %call30, 0, !dbg !2065
  br i1 %tobool31, label %land.lhs.true32, label %if.end47, !dbg !2066

land.lhs.true32:                                  ; preds = %lor.lhs.false25
  %49 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2067
  %dest33 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 1, !dbg !2067
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %dest33, align 8, !dbg !2067
  %index34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 9, !dbg !2067
  %51 = load i32, i32* %index34, align 8, !dbg !2067
  %call35 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %51), !dbg !2067
  %in36 = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call35, i32 0, i32 2, !dbg !2067
  %52 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %in36, align 8, !dbg !2067
  %53 = load i32, i32* %regno.addr, align 4, !dbg !2068
  %call37 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %52, i32 %53), !dbg !2069
  %tobool38 = icmp ne i32 %call37, 0, !dbg !2069
  br i1 %tobool38, label %if.then39, label %if.end47, !dbg !2070

if.then39:                                        ; preds = %land.lhs.true32, %for.body23
  %54 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2071
  %src40 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %54, i32 0, i32 0, !dbg !2071
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %src40, align 8, !dbg !2071
  %frequency41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 11, !dbg !2071
  %56 = load i32, i32* %frequency41, align 8, !dbg !2071
  %57 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2071
  %probability42 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %57, i32 0, i32 8, !dbg !2071
  %58 = load i32, i32* %probability42, align 4, !dbg !2071
  %mul43 = mul nsw i32 %56, %58, !dbg !2071
  %add44 = add nsw i32 %mul43, 5000, !dbg !2071
  %div45 = sdiv i32 %add44, 10000, !dbg !2071
  %59 = load i32, i32* %freq, align 4, !dbg !2072
  %add46 = add nsw i32 %59, %div45, !dbg !2072
  store i32 %add46, i32* %freq, align 4, !dbg !2072
  br label %if.end47, !dbg !2073

if.end47:                                         ; preds = %if.then39, %land.lhs.true32, %lor.lhs.false25
  br label %for.inc48, !dbg !2074

for.inc48:                                        ; preds = %if.end47
  %60 = load i32, i32* %i, align 4, !dbg !2075
  %inc = add nsw i32 %60, 1, !dbg !2075
  store i32 %inc, i32* %i, align 4, !dbg !2075
  br label %for.cond19, !dbg !2076, !llvm.loop !2077

for.end49:                                        ; preds = %cond.end
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %edges), !dbg !2079
  br label %if.end50

if.end50:                                         ; preds = %for.end49, %for.end
  %61 = load i32, i32* @optimize_size, align 4, !dbg !2080
  %tobool51 = icmp ne i32 %61, 0, !dbg !2080
  br i1 %tobool51, label %cond.true56, label %lor.lhs.false52, !dbg !2080

lor.lhs.false52:                                  ; preds = %if.end50
  %62 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !2080
  %tobool53 = icmp ne i32 %62, 0, !dbg !2080
  br i1 %tobool53, label %land.lhs.true54, label %cond.false57, !dbg !2080

land.lhs.true54:                                  ; preds = %lor.lhs.false52
  %63 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2080
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %63, i64 0, !dbg !2080
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2080
  %64 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2080
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %64, i32 0, i32 0, !dbg !2080
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2080
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 8, !dbg !2080
  %66 = load i64, i64* %count, align 8, !dbg !2080
  %tobool55 = icmp ne i64 %66, 0, !dbg !2080
  br i1 %tobool55, label %cond.false57, label %cond.true56, !dbg !2080

cond.true56:                                      ; preds = %land.lhs.true54, %if.end50
  br label %cond.end67, !dbg !2080

cond.false57:                                     ; preds = %land.lhs.true54, %lor.lhs.false52
  %67 = load i32, i32* %freq, align 4, !dbg !2080
  %mul58 = mul nsw i32 %67, 1000, !dbg !2080
  %div59 = sdiv i32 %mul58, 10000, !dbg !2080
  %tobool60 = icmp ne i32 %div59, 0, !dbg !2080
  br i1 %tobool60, label %cond.true61, label %cond.false64, !dbg !2080

cond.true61:                                      ; preds = %cond.false57
  %68 = load i32, i32* %freq, align 4, !dbg !2080
  %mul62 = mul nsw i32 %68, 1000, !dbg !2080
  %div63 = sdiv i32 %mul62, 10000, !dbg !2080
  br label %cond.end65, !dbg !2080

cond.false64:                                     ; preds = %cond.false57
  br label %cond.end65, !dbg !2080

cond.end65:                                       ; preds = %cond.false64, %cond.true61
  %cond66 = phi i32 [ %div63, %cond.true61 ], [ 1, %cond.false64 ], !dbg !2080
  br label %cond.end67, !dbg !2080

cond.end67:                                       ; preds = %cond.end65, %cond.true56
  %cond68 = phi i32 [ 1000, %cond.true56 ], [ %cond66, %cond.end65 ], !dbg !2080
  ret i32 %cond68, !dbg !2081
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !2082 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !2085, metadata !DIExpression()), !dbg !2086
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !2087, metadata !DIExpression()), !dbg !2088
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !2089
  store i32 0, i32* %index, align 8, !dbg !2090
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !2091
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !2092
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !2093
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !2094
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !2094
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !2094
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !2095 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2099, metadata !DIExpression()), !dbg !2100
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !2101, metadata !DIExpression()), !dbg !2102
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2103
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2103
  %5 = load i32, i32* %4, align 8, !dbg !2103
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2103
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2103
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2103
  %tobool = icmp ne i8 %call, 0, !dbg !2103
  br i1 %tobool, label %if.else, label %if.then, !dbg !2105

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2106
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !2106
  %10 = load i32, i32* %9, align 8, !dbg !2106
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !2106
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !2106
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !2106
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2108
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !2109
  store i8 1, i8* %retval, align 1, !dbg !2110
  br label %return, !dbg !2110

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2111
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !2113
  store i8 0, i8* %retval, align 1, !dbg !2114
  br label %return, !dbg !2114

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !2115
  ret i8 %15, !dbg !2115
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %index) #0 !dbg !2116 {
entry:
  %retval = alloca %struct.df_lr_bb_info*, align 8
  %index.addr = alloca i32, align 4
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !2119, metadata !DIExpression()), !dbg !2120
  %0 = load i32, i32* %index.addr, align 4, !dbg !2121
  %1 = load %struct.df*, %struct.df** @df, align 8, !dbg !2123
  %problems_by_index = getelementptr inbounds %struct.df, %struct.df* %1, i32 0, i32 1, !dbg !2123
  %arrayidx = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index, i64 0, i64 1, !dbg !2123
  %2 = load %struct.dataflow*, %struct.dataflow** %arrayidx, align 8, !dbg !2123
  %block_info_size = getelementptr inbounds %struct.dataflow, %struct.dataflow* %2, i32 0, i32 2, !dbg !2124
  %3 = load i32, i32* %block_info_size, align 8, !dbg !2124
  %cmp = icmp ult i32 %0, %3, !dbg !2125
  br i1 %cmp, label %if.then, label %if.else, !dbg !2126

if.then:                                          ; preds = %entry
  %4 = load %struct.df*, %struct.df** @df, align 8, !dbg !2127
  %problems_by_index1 = getelementptr inbounds %struct.df, %struct.df* %4, i32 0, i32 1, !dbg !2127
  %arrayidx2 = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index1, i64 0, i64 1, !dbg !2127
  %5 = load %struct.dataflow*, %struct.dataflow** %arrayidx2, align 8, !dbg !2127
  %block_info = getelementptr inbounds %struct.dataflow, %struct.dataflow* %5, i32 0, i32 1, !dbg !2128
  %6 = load i8**, i8*** %block_info, align 8, !dbg !2128
  %7 = load i32, i32* %index.addr, align 4, !dbg !2129
  %idxprom = zext i32 %7 to i64, !dbg !2127
  %arrayidx3 = getelementptr inbounds i8*, i8** %6, i64 %idxprom, !dbg !2127
  %8 = load i8*, i8** %arrayidx3, align 8, !dbg !2127
  %9 = bitcast i8* %8 to %struct.df_lr_bb_info*, !dbg !2130
  store %struct.df_lr_bb_info* %9, %struct.df_lr_bb_info** %retval, align 8, !dbg !2131
  br label %return, !dbg !2131

if.else:                                          ; preds = %entry
  store %struct.df_lr_bb_info* null, %struct.df_lr_bb_info** %retval, align 8, !dbg !2132
  br label %return, !dbg !2132

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.df_lr_bb_info*, %struct.df_lr_bb_info** %retval, align 8, !dbg !2133
  ret %struct.df_lr_bb_info* %10, !dbg !2133
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !2134 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !2138, metadata !DIExpression()), !dbg !2139
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2140
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !2140
  %1 = load i32, i32* %index, align 8, !dbg !2140
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2140
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !2140
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2140
  %5 = load i32, i32* %4, align 8, !dbg !2140
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2140
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2140
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2140
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !2140
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2140

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2140
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !2140
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !2140
  %11 = load i32, i32* %10, align 8, !dbg !2140
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !2140
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !2140
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !2140
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !2140
  br label %cond.end, !dbg !2140

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2140

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2140
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2140
  %cmp = icmp ult i32 %1, %call2, !dbg !2140
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !2140

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !2140
  br label %cond.end5, !dbg !2140

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2140

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !2140
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2141
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !2142
  %15 = load i32, i32* %index7, align 8, !dbg !2143
  %inc = add i32 %15, 1, !dbg !2143
  store i32 %inc, i32* %index7, align 8, !dbg !2143
  ret void, !dbg !2144
}

declare dso_local %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !2145 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !2150, metadata !DIExpression()), !dbg !2151
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2152, metadata !DIExpression()), !dbg !2151
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !2153, metadata !DIExpression()), !dbg !2151
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2154
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !2154
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2154

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2154
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2154
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !2154
  %3 = load i32, i32* %num, align 8, !dbg !2154
  %cmp = icmp ult i32 %1, %3, !dbg !2154
  br i1 %cmp, label %if.then, label %if.else, !dbg !2151

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2156
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !2156
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2156
  %idxprom = zext i32 %5 to i64, !dbg !2156
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !2156
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !2156
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !2156
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !2156
  store i32 1, i32* %retval, align 4, !dbg !2156
  br label %return, !dbg !2156

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !2158
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !2158
  store i32 0, i32* %retval, align 4, !dbg !2158
  br label %return, !dbg !2158

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2151
  ret i32 %9, !dbg !2151
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !2160 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !2164, metadata !DIExpression()), !dbg !2165
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !2166
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !2166
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !2166
  br i1 %tobool, label %if.then, label %if.end, !dbg !2165

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !2166
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !2166
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !2166
  call void @free(i8* %4), !dbg !2166
  br label %if.end, !dbg !2166

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !2165
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !2165
  ret void, !dbg !2165
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_reassign_conflict_allocnos(i32 %start_regno) #0 !dbg !2168 {
entry:
  %start_regno.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %allocnos_to_color_num = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %conflict_a = alloca %struct.ira_allocno*, align 8
  %aci = alloca %struct.ira_allocno_conflict_iterator, align 8
  %cover_class = alloca i32, align 4
  %allocnos_to_color = alloca %struct.bitmap_head_def*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  store i32 %start_regno, i32* %start_regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_regno.addr, metadata !2171, metadata !DIExpression()), !dbg !2172
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2173, metadata !DIExpression()), !dbg !2174
  call void @llvm.dbg.declare(metadata i32* %allocnos_to_color_num, metadata !2175, metadata !DIExpression()), !dbg !2176
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !2177, metadata !DIExpression()), !dbg !2178
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %conflict_a, metadata !2179, metadata !DIExpression()), !dbg !2180
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_conflict_iterator* %aci, metadata !2181, metadata !DIExpression()), !dbg !2192
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !2193, metadata !DIExpression()), !dbg !2194
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %allocnos_to_color, metadata !2195, metadata !DIExpression()), !dbg !2196
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !2197, metadata !DIExpression()), !dbg !2202
  %call = call %struct.bitmap_head_def* @ira_allocate_bitmap(), !dbg !2203
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %allocnos_to_color, align 8, !dbg !2204
  store i32 0, i32* %allocnos_to_color_num, align 4, !dbg !2205
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !2206
  br label %for.cond, !dbg !2206

for.cond:                                         ; preds = %for.end, %if.then16, %entry
  %call1 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !2208
  %tobool = icmp ne i8 %call1, 0, !dbg !2206
  br i1 %tobool, label %for.body, label %for.end32, !dbg !2206

for.body:                                         ; preds = %for.cond
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2210
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 31, !dbg !2210
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !2210
  %bf.lshr = lshr i16 %bf.load, 8, !dbg !2210
  %bf.clear = and i16 %bf.lshr, 1, !dbg !2210
  %bf.cast = zext i16 %bf.clear to i32, !dbg !2210
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !2210
  br i1 %tobool2, label %if.end12, label %land.lhs.true, !dbg !2213

land.lhs.true:                                    ; preds = %for.body
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %allocnos_to_color, align 8, !dbg !2214
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2215
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 0, !dbg !2215
  %3 = load i32, i32* %num, align 8, !dbg !2215
  %call3 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %1, i32 %3), !dbg !2216
  %tobool4 = icmp ne i32 %call3, 0, !dbg !2216
  br i1 %tobool4, label %if.end12, label %if.then, !dbg !2217

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2218
  %cover_class5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 9, !dbg !2218
  %5 = load i32, i32* %cover_class5, align 8, !dbg !2218
  %cmp = icmp ne i32 %5, 0, !dbg !2221
  br i1 %cmp, label %if.then6, label %if.else, !dbg !2222

if.then6:                                         ; preds = %if.then
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2223
  %7 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !2224
  %8 = load i32, i32* %allocnos_to_color_num, align 4, !dbg !2225
  %inc = add nsw i32 %8, 1, !dbg !2225
  store i32 %inc, i32* %allocnos_to_color_num, align 4, !dbg !2225
  %idxprom = sext i32 %8 to i64, !dbg !2224
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %7, i64 %idxprom, !dbg !2224
  store %struct.ira_allocno* %6, %struct.ira_allocno** %arrayidx, align 8, !dbg !2226
  br label %if.end, !dbg !2224

if.else:                                          ; preds = %if.then
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2227
  %assigned_p7 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 31, !dbg !2227
  %bf.load8 = load i16, i16* %assigned_p7, align 4, !dbg !2229
  %bf.clear9 = and i16 %bf.load8, -257, !dbg !2229
  %bf.set = or i16 %bf.clear9, 256, !dbg !2229
  store i16 %bf.set, i16* %assigned_p7, align 4, !dbg !2229
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2230
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 3, !dbg !2230
  store i32 -1, i32* %hard_regno, align 4, !dbg !2231
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then6
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %allocnos_to_color, align 8, !dbg !2232
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2233
  %num10 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 0, !dbg !2233
  %13 = load i32, i32* %num10, align 8, !dbg !2233
  %call11 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %11, i32 %13), !dbg !2234
  br label %if.end12, !dbg !2235

if.end12:                                         ; preds = %if.end, %land.lhs.true, %for.body
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2236
  %regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 1, !dbg !2236
  %15 = load i32, i32* %regno, align 4, !dbg !2236
  %16 = load i32, i32* %start_regno.addr, align 4, !dbg !2238
  %cmp13 = icmp slt i32 %15, %16, !dbg !2239
  br i1 %cmp13, label %if.then16, label %lor.lhs.false, !dbg !2240

lor.lhs.false:                                    ; preds = %if.end12
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2241
  %cover_class14 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 9, !dbg !2241
  %18 = load i32, i32* %cover_class14, align 8, !dbg !2241
  store i32 %18, i32* %cover_class, align 4, !dbg !2242
  %cmp15 = icmp eq i32 %18, 0, !dbg !2243
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !2244

if.then16:                                        ; preds = %lor.lhs.false, %if.end12
  br label %for.cond, !dbg !2245, !llvm.loop !2246

if.end17:                                         ; preds = %lor.lhs.false
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2248
  call void @ira_allocno_conflict_iter_init(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno* %19), !dbg !2248
  br label %for.cond18, !dbg !2248

for.cond18:                                       ; preds = %for.inc, %if.end17
  %call19 = call zeroext i8 @ira_allocno_conflict_iter_cond(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno** %conflict_a), !dbg !2250
  %tobool20 = icmp ne i8 %call19, 0, !dbg !2248
  br i1 %tobool20, label %for.body21, label %for.end, !dbg !2248

for.body21:                                       ; preds = %for.cond18
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %allocnos_to_color, align 8, !dbg !2252
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_a, align 8, !dbg !2255
  %num22 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 0, !dbg !2255
  %22 = load i32, i32* %num22, align 8, !dbg !2255
  %call23 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %20, i32 %22), !dbg !2256
  %tobool24 = icmp ne i32 %call23, 0, !dbg !2256
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !2257

if.then25:                                        ; preds = %for.body21
  br label %for.inc, !dbg !2258

if.end26:                                         ; preds = %for.body21
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %allocnos_to_color, align 8, !dbg !2259
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_a, align 8, !dbg !2260
  %num27 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 0, !dbg !2260
  %25 = load i32, i32* %num27, align 8, !dbg !2260
  %call28 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %23, i32 %25), !dbg !2261
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_a, align 8, !dbg !2262
  %27 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !2263
  %28 = load i32, i32* %allocnos_to_color_num, align 4, !dbg !2264
  %inc29 = add nsw i32 %28, 1, !dbg !2264
  store i32 %inc29, i32* %allocnos_to_color_num, align 4, !dbg !2264
  %idxprom30 = sext i32 %28 to i64, !dbg !2263
  %arrayidx31 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %27, i64 %idxprom30, !dbg !2263
  store %struct.ira_allocno* %26, %struct.ira_allocno** %arrayidx31, align 8, !dbg !2265
  br label %for.inc, !dbg !2266

for.inc:                                          ; preds = %if.end26, %if.then25
  call void @ira_allocno_conflict_iter_next(%struct.ira_allocno_conflict_iterator* %aci), !dbg !2250
  br label %for.cond18, !dbg !2250, !llvm.loop !2267

for.end:                                          ; preds = %for.cond18
  br label %for.cond, !dbg !2208, !llvm.loop !2246

for.end32:                                        ; preds = %for.cond
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %allocnos_to_color, align 8, !dbg !2269
  call void @ira_free_bitmap(%struct.bitmap_head_def* %29), !dbg !2270
  %30 = load i32, i32* %allocnos_to_color_num, align 4, !dbg !2271
  %cmp33 = icmp sgt i32 %30, 1, !dbg !2273
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !2274

if.then34:                                        ; preds = %for.end32
  %31 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !2275
  %32 = load i32, i32* %allocnos_to_color_num, align 4, !dbg !2277
  call void @setup_allocno_priorities(%struct.ira_allocno** %31, i32 %32), !dbg !2278
  %33 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !2279
  %34 = bitcast %struct.ira_allocno** %33 to i8*, !dbg !2279
  %35 = load i32, i32* %allocnos_to_color_num, align 4, !dbg !2280
  %conv = sext i32 %35 to i64, !dbg !2280
  call void @spec_qsort(i8* %34, i64 %conv, i64 8, i32 (i8*, i8*)* @allocno_priority_compare_func), !dbg !2281
  br label %if.end35, !dbg !2282

if.end35:                                         ; preds = %if.then34, %for.end32
  store i32 0, i32* %i, align 4, !dbg !2283
  br label %for.cond36, !dbg !2285

for.cond36:                                       ; preds = %for.inc45, %if.end35
  %36 = load i32, i32* %i, align 4, !dbg !2286
  %37 = load i32, i32* %allocnos_to_color_num, align 4, !dbg !2288
  %cmp37 = icmp slt i32 %36, %37, !dbg !2289
  br i1 %cmp37, label %for.body39, label %for.end47, !dbg !2290

for.body39:                                       ; preds = %for.cond36
  %38 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !2291
  %39 = load i32, i32* %i, align 4, !dbg !2293
  %idxprom40 = sext i32 %39 to i64, !dbg !2291
  %arrayidx41 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %38, i64 %idxprom40, !dbg !2291
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx41, align 8, !dbg !2291
  store %struct.ira_allocno* %40, %struct.ira_allocno** %a, align 8, !dbg !2294
  %41 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2295
  %assigned_p42 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %41, i32 0, i32 31, !dbg !2295
  %bf.load43 = load i16, i16* %assigned_p42, align 4, !dbg !2296
  %bf.clear44 = and i16 %bf.load43, -257, !dbg !2296
  store i16 %bf.clear44, i16* %assigned_p42, align 4, !dbg !2296
  %42 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2297
  call void @update_curr_costs(%struct.ira_allocno* %42), !dbg !2298
  br label %for.inc45, !dbg !2299

for.inc45:                                        ; preds = %for.body39
  %43 = load i32, i32* %i, align 4, !dbg !2300
  %inc46 = add nsw i32 %43, 1, !dbg !2300
  store i32 %inc46, i32* %i, align 4, !dbg !2300
  br label %for.cond36, !dbg !2301, !llvm.loop !2302

for.end47:                                        ; preds = %for.cond36
  store i32 0, i32* %i, align 4, !dbg !2304
  br label %for.cond48, !dbg !2306

for.cond48:                                       ; preds = %for.inc68, %for.end47
  %44 = load i32, i32* %i, align 4, !dbg !2307
  %45 = load i32, i32* %allocnos_to_color_num, align 4, !dbg !2309
  %cmp49 = icmp slt i32 %44, %45, !dbg !2310
  br i1 %cmp49, label %for.body51, label %for.end70, !dbg !2311

for.body51:                                       ; preds = %for.cond48
  %46 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !2312
  %47 = load i32, i32* %i, align 4, !dbg !2314
  %idxprom52 = sext i32 %47 to i64, !dbg !2312
  %arrayidx53 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %46, i64 %idxprom52, !dbg !2312
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx53, align 8, !dbg !2312
  store %struct.ira_allocno* %48, %struct.ira_allocno** %a, align 8, !dbg !2315
  %49 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2316
  %call54 = call zeroext i8 @assign_hard_reg(%struct.ira_allocno* %49, i8 zeroext 1), !dbg !2318
  %tobool55 = icmp ne i8 %call54, 0, !dbg !2318
  br i1 %tobool55, label %if.then56, label %if.end67, !dbg !2319

if.then56:                                        ; preds = %for.body51
  %50 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !2320
  %cmp57 = icmp sgt i32 %50, 3, !dbg !2323
  br i1 %cmp57, label %land.lhs.true59, label %if.end66, !dbg !2324

land.lhs.true59:                                  ; preds = %if.then56
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !2325
  %cmp60 = icmp ne %struct._IO_FILE* %51, null, !dbg !2326
  br i1 %cmp60, label %if.then62, label %if.end66, !dbg !2327

if.then62:                                        ; preds = %land.lhs.true59
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !2328
  %53 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2329
  %hard_regno63 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %53, i32 0, i32 3, !dbg !2329
  %54 = load i32, i32* %hard_regno63, align 4, !dbg !2329
  %55 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2330
  %regno64 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %55, i32 0, i32 1, !dbg !2330
  %56 = load i32, i32* %regno64, align 4, !dbg !2330
  %call65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0), i32 %54, i32 %56), !dbg !2331
  br label %if.end66, !dbg !2331

if.end66:                                         ; preds = %if.then62, %land.lhs.true59, %if.then56
  br label %if.end67, !dbg !2332

if.end67:                                         ; preds = %if.end66, %for.body51
  br label %for.inc68, !dbg !2333

for.inc68:                                        ; preds = %if.end67
  %57 = load i32, i32* %i, align 4, !dbg !2334
  %inc69 = add nsw i32 %57, 1, !dbg !2334
  store i32 %inc69, i32* %i, align 4, !dbg !2334
  br label %for.cond48, !dbg !2335, !llvm.loop !2336

for.end70:                                        ; preds = %for.cond48
  ret void, !dbg !2338
}

declare dso_local %struct.bitmap_head_def* @ira_allocate_bitmap() #3

; Function Attrs: noinline nounwind uwtable
define internal void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %i) #0 !dbg !2339 {
entry:
  %i.addr = alloca %struct.ira_allocno_iterator*, align 8
  store %struct.ira_allocno_iterator* %i, %struct.ira_allocno_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator** %i.addr, metadata !2343, metadata !DIExpression()), !dbg !2344
  %0 = load %struct.ira_allocno_iterator*, %struct.ira_allocno_iterator** %i.addr, align 8, !dbg !2345
  %n = getelementptr inbounds %struct.ira_allocno_iterator, %struct.ira_allocno_iterator* %0, i32 0, i32 0, !dbg !2346
  store i32 0, i32* %n, align 4, !dbg !2347
  ret void, !dbg !2348
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %i, %struct.ira_allocno** %a) #0 !dbg !2349 {
entry:
  %retval = alloca i8, align 1
  %i.addr = alloca %struct.ira_allocno_iterator*, align 8
  %a.addr = alloca %struct.ira_allocno**, align 8
  %n = alloca i32, align 4
  store %struct.ira_allocno_iterator* %i, %struct.ira_allocno_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator** %i.addr, metadata !2352, metadata !DIExpression()), !dbg !2353
  store %struct.ira_allocno** %a, %struct.ira_allocno*** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %a.addr, metadata !2354, metadata !DIExpression()), !dbg !2355
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2356, metadata !DIExpression()), !dbg !2357
  %0 = load %struct.ira_allocno_iterator*, %struct.ira_allocno_iterator** %i.addr, align 8, !dbg !2358
  %n1 = getelementptr inbounds %struct.ira_allocno_iterator, %struct.ira_allocno_iterator* %0, i32 0, i32 0, !dbg !2360
  %1 = load i32, i32* %n1, align 4, !dbg !2360
  store i32 %1, i32* %n, align 4, !dbg !2361
  br label %for.cond, !dbg !2362

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %n, align 4, !dbg !2363
  %3 = load i32, i32* @ira_allocnos_num, align 4, !dbg !2365
  %cmp = icmp slt i32 %2, %3, !dbg !2366
  br i1 %cmp, label %for.body, label %for.end, !dbg !2367

for.body:                                         ; preds = %for.cond
  %4 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !2368
  %5 = load i32, i32* %n, align 4, !dbg !2370
  %idxprom = sext i32 %5 to i64, !dbg !2368
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %4, i64 %idxprom, !dbg !2368
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !2368
  %cmp2 = icmp ne %struct.ira_allocno* %6, null, !dbg !2371
  br i1 %cmp2, label %if.then, label %if.end, !dbg !2372

if.then:                                          ; preds = %for.body
  %7 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !2373
  %8 = load i32, i32* %n, align 4, !dbg !2375
  %idxprom3 = sext i32 %8 to i64, !dbg !2373
  %arrayidx4 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %7, i64 %idxprom3, !dbg !2373
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx4, align 8, !dbg !2373
  %10 = load %struct.ira_allocno**, %struct.ira_allocno*** %a.addr, align 8, !dbg !2376
  store %struct.ira_allocno* %9, %struct.ira_allocno** %10, align 8, !dbg !2377
  %11 = load i32, i32* %n, align 4, !dbg !2378
  %add = add nsw i32 %11, 1, !dbg !2379
  %12 = load %struct.ira_allocno_iterator*, %struct.ira_allocno_iterator** %i.addr, align 8, !dbg !2380
  %n5 = getelementptr inbounds %struct.ira_allocno_iterator, %struct.ira_allocno_iterator* %12, i32 0, i32 0, !dbg !2381
  store i32 %add, i32* %n5, align 4, !dbg !2382
  store i8 1, i8* %retval, align 1, !dbg !2383
  br label %return, !dbg !2383

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !2384

for.inc:                                          ; preds = %if.end
  %13 = load i32, i32* %n, align 4, !dbg !2385
  %inc = add nsw i32 %13, 1, !dbg !2385
  store i32 %inc, i32* %n, align 4, !dbg !2385
  br label %for.cond, !dbg !2386, !llvm.loop !2387

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !2389
  br label %return, !dbg !2389

return:                                           ; preds = %for.end, %if.then
  %14 = load i8, i8* %retval, align 1, !dbg !2390
  ret i8 %14, !dbg !2390
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @ira_allocno_conflict_iter_init(%struct.ira_allocno_conflict_iterator* %i, %struct.ira_allocno* %allocno) #0 !dbg !2391 {
entry:
  %i.addr = alloca %struct.ira_allocno_conflict_iterator*, align 8
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno_conflict_iterator* %i, %struct.ira_allocno_conflict_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_conflict_iterator** %i.addr, metadata !2395, metadata !DIExpression()), !dbg !2396
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !2397, metadata !DIExpression()), !dbg !2398
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !2399
  %conflict_vec_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 31, !dbg !2399
  %bf.load = load i16, i16* %conflict_vec_p, align 4, !dbg !2399
  %bf.lshr = lshr i16 %bf.load, 11, !dbg !2399
  %bf.clear = and i16 %bf.lshr, 1, !dbg !2399
  %bf.cast = zext i16 %bf.clear to i32, !dbg !2399
  %conv = trunc i32 %bf.cast to i8, !dbg !2399
  %1 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2400
  %allocno_conflict_vec_p = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %1, i32 0, i32 0, !dbg !2401
  store i8 %conv, i8* %allocno_conflict_vec_p, align 8, !dbg !2402
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !2403
  %conflict_allocno_array = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 23, !dbg !2403
  %3 = load i8*, i8** %conflict_allocno_array, align 8, !dbg !2403
  %4 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2404
  %vec = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %4, i32 0, i32 1, !dbg !2405
  store i8* %3, i8** %vec, align 8, !dbg !2406
  %5 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2407
  %word_num = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %5, i32 0, i32 2, !dbg !2408
  store i32 0, i32* %word_num, align 8, !dbg !2409
  %6 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2410
  %allocno_conflict_vec_p1 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %6, i32 0, i32 0, !dbg !2412
  %7 = load i8, i8* %allocno_conflict_vec_p1, align 8, !dbg !2412
  %tobool = icmp ne i8 %7, 0, !dbg !2410
  br i1 %tobool, label %if.then, label %if.else, !dbg !2413

if.then:                                          ; preds = %entry
  %8 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2414
  %word = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %8, i32 0, i32 6, !dbg !2415
  store i64 0, i64* %word, align 8, !dbg !2416
  %9 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2417
  %base_conflict_id = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %9, i32 0, i32 5, !dbg !2418
  store i32 0, i32* %base_conflict_id, align 4, !dbg !2419
  %10 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2420
  %bit_num = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %10, i32 0, i32 4, !dbg !2421
  store i32 0, i32* %bit_num, align 8, !dbg !2422
  %11 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2423
  %size = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %11, i32 0, i32 3, !dbg !2424
  store i32 0, i32* %size, align 4, !dbg !2425
  br label %if.end19, !dbg !2423

if.else:                                          ; preds = %entry
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !2426
  %min = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 21, !dbg !2426
  %13 = load i32, i32* %min, align 8, !dbg !2426
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !2429
  %max = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 22, !dbg !2429
  %15 = load i32, i32* %max, align 4, !dbg !2429
  %cmp = icmp sgt i32 %13, %15, !dbg !2430
  br i1 %cmp, label %if.then3, label %if.else5, !dbg !2431

if.then3:                                         ; preds = %if.else
  %16 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2432
  %size4 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %16, i32 0, i32 3, !dbg !2433
  store i32 0, i32* %size4, align 4, !dbg !2434
  br label %if.end, !dbg !2432

if.else5:                                         ; preds = %if.else
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !2435
  %max6 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 22, !dbg !2435
  %18 = load i32, i32* %max6, align 4, !dbg !2435
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !2436
  %min7 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 21, !dbg !2436
  %20 = load i32, i32* %min7, align 8, !dbg !2436
  %sub = sub nsw i32 %18, %20, !dbg !2437
  %add = add nsw i32 %sub, 64, !dbg !2438
  %div = sdiv i32 %add, 64, !dbg !2439
  %conv8 = sext i32 %div to i64, !dbg !2440
  %mul = mul i64 %conv8, 8, !dbg !2441
  %conv9 = trunc i64 %mul to i32, !dbg !2440
  %21 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2442
  %size10 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %21, i32 0, i32 3, !dbg !2443
  store i32 %conv9, i32* %size10, align 4, !dbg !2444
  br label %if.end

if.end:                                           ; preds = %if.else5, %if.then3
  %22 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2445
  %bit_num11 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %22, i32 0, i32 4, !dbg !2446
  store i32 0, i32* %bit_num11, align 8, !dbg !2447
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !2448
  %min12 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 21, !dbg !2448
  %24 = load i32, i32* %min12, align 8, !dbg !2448
  %25 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2449
  %base_conflict_id13 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %25, i32 0, i32 5, !dbg !2450
  store i32 %24, i32* %base_conflict_id13, align 4, !dbg !2451
  %26 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2452
  %size14 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %26, i32 0, i32 3, !dbg !2453
  %27 = load i32, i32* %size14, align 4, !dbg !2453
  %cmp15 = icmp eq i32 %27, 0, !dbg !2454
  br i1 %cmp15, label %cond.true, label %cond.false, !dbg !2452

cond.true:                                        ; preds = %if.end
  br label %cond.end, !dbg !2452

cond.false:                                       ; preds = %if.end
  %28 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2455
  %vec17 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %28, i32 0, i32 1, !dbg !2456
  %29 = load i8*, i8** %vec17, align 8, !dbg !2456
  %30 = bitcast i8* %29 to i64*, !dbg !2457
  %arrayidx = getelementptr inbounds i64, i64* %30, i64 0, !dbg !2458
  %31 = load i64, i64* %arrayidx, align 8, !dbg !2458
  br label %cond.end, !dbg !2452

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %31, %cond.false ], !dbg !2452
  %32 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2459
  %word18 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %32, i32 0, i32 6, !dbg !2460
  store i64 %cond, i64* %word18, align 8, !dbg !2461
  br label %if.end19

if.end19:                                         ; preds = %cond.end, %if.then
  ret void, !dbg !2462
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ira_allocno_conflict_iter_cond(%struct.ira_allocno_conflict_iterator* %i, %struct.ira_allocno** %a) #0 !dbg !2463 {
entry:
  %retval = alloca i8, align 1
  %i.addr = alloca %struct.ira_allocno_conflict_iterator*, align 8
  %a.addr = alloca %struct.ira_allocno**, align 8
  %conflict_allocno = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno_conflict_iterator* %i, %struct.ira_allocno_conflict_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_conflict_iterator** %i.addr, metadata !2466, metadata !DIExpression()), !dbg !2467
  store %struct.ira_allocno** %a, %struct.ira_allocno*** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %a.addr, metadata !2468, metadata !DIExpression()), !dbg !2469
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %conflict_allocno, metadata !2470, metadata !DIExpression()), !dbg !2471
  %0 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2472
  %allocno_conflict_vec_p = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %0, i32 0, i32 0, !dbg !2474
  %1 = load i8, i8* %allocno_conflict_vec_p, align 8, !dbg !2474
  %tobool = icmp ne i8 %1, 0, !dbg !2472
  br i1 %tobool, label %if.then, label %if.else, !dbg !2475

if.then:                                          ; preds = %entry
  %2 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2476
  %vec = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %2, i32 0, i32 1, !dbg !2478
  %3 = load i8*, i8** %vec, align 8, !dbg !2478
  %4 = bitcast i8* %3 to %struct.ira_allocno**, !dbg !2479
  %5 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2480
  %word_num = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %5, i32 0, i32 2, !dbg !2481
  %6 = load i32, i32* %word_num, align 8, !dbg !2481
  %idxprom = zext i32 %6 to i64, !dbg !2482
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %4, i64 %idxprom, !dbg !2482
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !2482
  store %struct.ira_allocno* %7, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !2483
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !2484
  %cmp = icmp eq %struct.ira_allocno* %8, null, !dbg !2486
  br i1 %cmp, label %if.then1, label %if.end, !dbg !2487

if.then1:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !2488
  br label %return, !dbg !2488

if.end:                                           ; preds = %if.then
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !2489
  %10 = load %struct.ira_allocno**, %struct.ira_allocno*** %a.addr, align 8, !dbg !2490
  store %struct.ira_allocno* %9, %struct.ira_allocno** %10, align 8, !dbg !2491
  store i8 1, i8* %retval, align 1, !dbg !2492
  br label %return, !dbg !2492

if.else:                                          ; preds = %entry
  br label %for.cond, !dbg !2493

for.cond:                                         ; preds = %for.inc, %if.else
  %11 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2495
  %word = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %11, i32 0, i32 6, !dbg !2498
  %12 = load i64, i64* %word, align 8, !dbg !2498
  %cmp2 = icmp eq i64 %12, 0, !dbg !2499
  br i1 %cmp2, label %for.body, label %for.end, !dbg !2500

for.body:                                         ; preds = %for.cond
  %13 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2501
  %word_num3 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %13, i32 0, i32 2, !dbg !2503
  %14 = load i32, i32* %word_num3, align 8, !dbg !2504
  %inc = add i32 %14, 1, !dbg !2504
  store i32 %inc, i32* %word_num3, align 8, !dbg !2504
  %15 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2505
  %word_num4 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %15, i32 0, i32 2, !dbg !2507
  %16 = load i32, i32* %word_num4, align 8, !dbg !2507
  %conv = zext i32 %16 to i64, !dbg !2505
  %mul = mul i64 %conv, 8, !dbg !2508
  %17 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2509
  %size = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %17, i32 0, i32 3, !dbg !2510
  %18 = load i32, i32* %size, align 4, !dbg !2510
  %conv5 = zext i32 %18 to i64, !dbg !2509
  %cmp6 = icmp uge i64 %mul, %conv5, !dbg !2511
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !2512

if.then8:                                         ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !2513
  br label %return, !dbg !2513

if.end9:                                          ; preds = %for.body
  %19 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2514
  %word_num10 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %19, i32 0, i32 2, !dbg !2515
  %20 = load i32, i32* %word_num10, align 8, !dbg !2515
  %mul11 = mul i32 %20, 64, !dbg !2516
  %21 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2517
  %bit_num = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %21, i32 0, i32 4, !dbg !2518
  store i32 %mul11, i32* %bit_num, align 8, !dbg !2519
  br label %for.inc, !dbg !2520

for.inc:                                          ; preds = %if.end9
  %22 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2521
  %vec12 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %22, i32 0, i32 1, !dbg !2522
  %23 = load i8*, i8** %vec12, align 8, !dbg !2522
  %24 = bitcast i8* %23 to i64*, !dbg !2523
  %25 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2524
  %word_num13 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %25, i32 0, i32 2, !dbg !2525
  %26 = load i32, i32* %word_num13, align 8, !dbg !2525
  %idxprom14 = zext i32 %26 to i64, !dbg !2526
  %arrayidx15 = getelementptr inbounds i64, i64* %24, i64 %idxprom14, !dbg !2526
  %27 = load i64, i64* %arrayidx15, align 8, !dbg !2526
  %28 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2527
  %word16 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %28, i32 0, i32 6, !dbg !2528
  store i64 %27, i64* %word16, align 8, !dbg !2529
  br label %for.cond, !dbg !2530, !llvm.loop !2531

for.end:                                          ; preds = %for.cond
  br label %for.cond17, !dbg !2533

for.cond17:                                       ; preds = %for.inc24, %for.end
  %29 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2534
  %word18 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %29, i32 0, i32 6, !dbg !2537
  %30 = load i64, i64* %word18, align 8, !dbg !2537
  %and = and i64 %30, 1, !dbg !2538
  %cmp19 = icmp eq i64 %and, 0, !dbg !2539
  br i1 %cmp19, label %for.body21, label %for.end26, !dbg !2540

for.body21:                                       ; preds = %for.cond17
  %31 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2541
  %bit_num22 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %31, i32 0, i32 4, !dbg !2542
  %32 = load i32, i32* %bit_num22, align 8, !dbg !2543
  %inc23 = add i32 %32, 1, !dbg !2543
  store i32 %inc23, i32* %bit_num22, align 8, !dbg !2543
  br label %for.inc24, !dbg !2541

for.inc24:                                        ; preds = %for.body21
  %33 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2544
  %word25 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %33, i32 0, i32 6, !dbg !2545
  %34 = load i64, i64* %word25, align 8, !dbg !2546
  %shr = lshr i64 %34, 1, !dbg !2546
  store i64 %shr, i64* %word25, align 8, !dbg !2546
  br label %for.cond17, !dbg !2547, !llvm.loop !2548

for.end26:                                        ; preds = %for.cond17
  %35 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_conflict_id_allocno_map, align 8, !dbg !2550
  %36 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2551
  %bit_num27 = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %36, i32 0, i32 4, !dbg !2552
  %37 = load i32, i32* %bit_num27, align 8, !dbg !2552
  %38 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2553
  %base_conflict_id = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %38, i32 0, i32 5, !dbg !2554
  %39 = load i32, i32* %base_conflict_id, align 4, !dbg !2554
  %add = add i32 %37, %39, !dbg !2555
  %idxprom28 = zext i32 %add to i64, !dbg !2550
  %arrayidx29 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %35, i64 %idxprom28, !dbg !2550
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx29, align 8, !dbg !2550
  %41 = load %struct.ira_allocno**, %struct.ira_allocno*** %a.addr, align 8, !dbg !2556
  store %struct.ira_allocno* %40, %struct.ira_allocno** %41, align 8, !dbg !2557
  store i8 1, i8* %retval, align 1, !dbg !2558
  br label %return, !dbg !2558

return:                                           ; preds = %for.end26, %if.then8, %if.end, %if.then1
  %42 = load i8, i8* %retval, align 1, !dbg !2559
  ret i8 %42, !dbg !2559
}

; Function Attrs: noinline nounwind uwtable
define internal void @ira_allocno_conflict_iter_next(%struct.ira_allocno_conflict_iterator* %i) #0 !dbg !2560 {
entry:
  %i.addr = alloca %struct.ira_allocno_conflict_iterator*, align 8
  store %struct.ira_allocno_conflict_iterator* %i, %struct.ira_allocno_conflict_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_conflict_iterator** %i.addr, metadata !2563, metadata !DIExpression()), !dbg !2564
  %0 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2565
  %allocno_conflict_vec_p = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %0, i32 0, i32 0, !dbg !2567
  %1 = load i8, i8* %allocno_conflict_vec_p, align 8, !dbg !2567
  %tobool = icmp ne i8 %1, 0, !dbg !2565
  br i1 %tobool, label %if.then, label %if.else, !dbg !2568

if.then:                                          ; preds = %entry
  %2 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2569
  %word_num = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %2, i32 0, i32 2, !dbg !2570
  %3 = load i32, i32* %word_num, align 8, !dbg !2571
  %inc = add i32 %3, 1, !dbg !2571
  store i32 %inc, i32* %word_num, align 8, !dbg !2571
  br label %if.end, !dbg !2569

if.else:                                          ; preds = %entry
  %4 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2572
  %word = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %4, i32 0, i32 6, !dbg !2574
  %5 = load i64, i64* %word, align 8, !dbg !2575
  %shr = lshr i64 %5, 1, !dbg !2575
  store i64 %shr, i64* %word, align 8, !dbg !2575
  %6 = load %struct.ira_allocno_conflict_iterator*, %struct.ira_allocno_conflict_iterator** %i.addr, align 8, !dbg !2576
  %bit_num = getelementptr inbounds %struct.ira_allocno_conflict_iterator, %struct.ira_allocno_conflict_iterator* %6, i32 0, i32 4, !dbg !2577
  %7 = load i32, i32* %bit_num, align 8, !dbg !2578
  %inc1 = add i32 %7, 1, !dbg !2578
  store i32 %inc1, i32* %bit_num, align 8, !dbg !2578
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !2579
}

declare dso_local void @ira_free_bitmap(%struct.bitmap_head_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @setup_allocno_priorities(%struct.ira_allocno** %consideration_allocnos, i32 %n) #0 !dbg !2580 {
entry:
  %consideration_allocnos.addr = alloca %struct.ira_allocno**, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %length = alloca i32, align 4
  %nrefs = alloca i32, align 4
  %priority = alloca i32, align 4
  %max_priority = alloca i32, align 4
  %mult = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno** %consideration_allocnos, %struct.ira_allocno*** %consideration_allocnos.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %consideration_allocnos.addr, metadata !2583, metadata !DIExpression()), !dbg !2584
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !2585, metadata !DIExpression()), !dbg !2586
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2587, metadata !DIExpression()), !dbg !2588
  call void @llvm.dbg.declare(metadata i32* %length, metadata !2589, metadata !DIExpression()), !dbg !2590
  call void @llvm.dbg.declare(metadata i32* %nrefs, metadata !2591, metadata !DIExpression()), !dbg !2592
  call void @llvm.dbg.declare(metadata i32* %priority, metadata !2593, metadata !DIExpression()), !dbg !2594
  call void @llvm.dbg.declare(metadata i32* %max_priority, metadata !2595, metadata !DIExpression()), !dbg !2596
  call void @llvm.dbg.declare(metadata i32* %mult, metadata !2597, metadata !DIExpression()), !dbg !2598
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !2599, metadata !DIExpression()), !dbg !2600
  store i32 0, i32* %max_priority, align 4, !dbg !2601
  store i32 0, i32* %i, align 4, !dbg !2602
  br label %for.cond, !dbg !2604

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2605
  %1 = load i32, i32* %n.addr, align 4, !dbg !2607
  %cmp = icmp slt i32 %0, %1, !dbg !2608
  br i1 %cmp, label %for.body, label %for.end, !dbg !2609

for.body:                                         ; preds = %for.cond
  %2 = load %struct.ira_allocno**, %struct.ira_allocno*** %consideration_allocnos.addr, align 8, !dbg !2610
  %3 = load i32, i32* %i, align 4, !dbg !2612
  %idxprom = sext i32 %3 to i64, !dbg !2610
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %2, i64 %idxprom, !dbg !2610
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !2610
  store %struct.ira_allocno* %4, %struct.ira_allocno** %a, align 8, !dbg !2613
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2614
  %nrefs1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 7, !dbg !2614
  %6 = load i32, i32* %nrefs1, align 8, !dbg !2614
  store i32 %6, i32* %nrefs, align 4, !dbg !2615
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2616
  %nrefs2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 7, !dbg !2616
  %8 = load i32, i32* %nrefs2, align 8, !dbg !2616
  %conv = sext i32 %8 to i64, !dbg !2616
  %call = call i32 @floor_log2(i64 %conv), !dbg !2617
  %add = add nsw i32 %call, 1, !dbg !2618
  store i32 %add, i32* %mult, align 4, !dbg !2619
  %9 = load i32, i32* %mult, align 4, !dbg !2620
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2621
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 12, !dbg !2621
  %11 = load i32, i32* %memory_cost, align 4, !dbg !2621
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2622
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 10, !dbg !2622
  %13 = load i32, i32* %cover_class_cost, align 4, !dbg !2622
  %sub = sub nsw i32 %11, %13, !dbg !2623
  %mul = mul nsw i32 %9, %sub, !dbg !2624
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2625
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 9, !dbg !2625
  %15 = load i32, i32* %cover_class, align 8, !dbg !2625
  %idxprom3 = zext i32 %15 to i64, !dbg !2626
  %arrayidx4 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom3, !dbg !2626
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2627
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 2, !dbg !2627
  %17 = load i32, i32* %mode, align 8, !dbg !2627
  %idxprom5 = zext i32 %17 to i64, !dbg !2626
  %arrayidx6 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx4, i64 0, i64 %idxprom5, !dbg !2626
  %18 = load i32, i32* %arrayidx6, align 4, !dbg !2626
  %mul7 = mul nsw i32 %mul, %18, !dbg !2628
  store i32 %mul7, i32* %priority, align 4, !dbg !2629
  %19 = load i32*, i32** @allocno_priorities, align 8, !dbg !2630
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2631
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 0, !dbg !2631
  %21 = load i32, i32* %num, align 8, !dbg !2631
  %idxprom8 = sext i32 %21 to i64, !dbg !2630
  %arrayidx9 = getelementptr inbounds i32, i32* %19, i64 %idxprom8, !dbg !2630
  store i32 %mul7, i32* %arrayidx9, align 4, !dbg !2632
  %22 = load i32, i32* %priority, align 4, !dbg !2633
  %cmp10 = icmp slt i32 %22, 0, !dbg !2635
  br i1 %cmp10, label %if.then, label %if.end, !dbg !2636

if.then:                                          ; preds = %for.body
  %23 = load i32, i32* %priority, align 4, !dbg !2637
  %sub12 = sub nsw i32 0, %23, !dbg !2638
  store i32 %sub12, i32* %priority, align 4, !dbg !2639
  br label %if.end, !dbg !2640

if.end:                                           ; preds = %if.then, %for.body
  %24 = load i32, i32* %max_priority, align 4, !dbg !2641
  %25 = load i32, i32* %priority, align 4, !dbg !2643
  %cmp13 = icmp slt i32 %24, %25, !dbg !2644
  br i1 %cmp13, label %if.then15, label %if.end16, !dbg !2645

if.then15:                                        ; preds = %if.end
  %26 = load i32, i32* %priority, align 4, !dbg !2646
  store i32 %26, i32* %max_priority, align 4, !dbg !2647
  br label %if.end16, !dbg !2648

if.end16:                                         ; preds = %if.then15, %if.end
  br label %for.inc, !dbg !2649

for.inc:                                          ; preds = %if.end16
  %27 = load i32, i32* %i, align 4, !dbg !2650
  %inc = add nsw i32 %27, 1, !dbg !2650
  store i32 %inc, i32* %i, align 4, !dbg !2650
  br label %for.cond, !dbg !2651, !llvm.loop !2652

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %max_priority, align 4, !dbg !2654
  %cmp17 = icmp eq i32 %28, 0, !dbg !2655
  br i1 %cmp17, label %cond.true, label %cond.false, !dbg !2654

cond.true:                                        ; preds = %for.end
  br label %cond.end, !dbg !2654

cond.false:                                       ; preds = %for.end
  %29 = load i32, i32* %max_priority, align 4, !dbg !2656
  %div = sdiv i32 2147483647, %29, !dbg !2657
  br label %cond.end, !dbg !2654

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1, %cond.true ], [ %div, %cond.false ], !dbg !2654
  store i32 %cond, i32* %mult, align 4, !dbg !2658
  store i32 0, i32* %i, align 4, !dbg !2659
  br label %for.cond19, !dbg !2661

for.cond19:                                       ; preds = %for.inc37, %cond.end
  %30 = load i32, i32* %i, align 4, !dbg !2662
  %31 = load i32, i32* %n.addr, align 4, !dbg !2664
  %cmp20 = icmp slt i32 %30, %31, !dbg !2665
  br i1 %cmp20, label %for.body22, label %for.end39, !dbg !2666

for.body22:                                       ; preds = %for.cond19
  %32 = load %struct.ira_allocno**, %struct.ira_allocno*** %consideration_allocnos.addr, align 8, !dbg !2667
  %33 = load i32, i32* %i, align 4, !dbg !2669
  %idxprom23 = sext i32 %33 to i64, !dbg !2667
  %arrayidx24 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %32, i64 %idxprom23, !dbg !2667
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx24, align 8, !dbg !2667
  store %struct.ira_allocno* %34, %struct.ira_allocno** %a, align 8, !dbg !2670
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2671
  %excess_pressure_points_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %35, i32 0, i32 14, !dbg !2671
  %36 = load i32, i32* %excess_pressure_points_num, align 4, !dbg !2671
  store i32 %36, i32* %length, align 4, !dbg !2672
  %37 = load i32, i32* %length, align 4, !dbg !2673
  %cmp25 = icmp sle i32 %37, 0, !dbg !2675
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !2676

if.then27:                                        ; preds = %for.body22
  store i32 1, i32* %length, align 4, !dbg !2677
  br label %if.end28, !dbg !2678

if.end28:                                         ; preds = %if.then27, %for.body22
  %38 = load i32*, i32** @allocno_priorities, align 8, !dbg !2679
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2680
  %num29 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 0, !dbg !2680
  %40 = load i32, i32* %num29, align 8, !dbg !2680
  %idxprom30 = sext i32 %40 to i64, !dbg !2679
  %arrayidx31 = getelementptr inbounds i32, i32* %38, i64 %idxprom30, !dbg !2679
  %41 = load i32, i32* %arrayidx31, align 4, !dbg !2679
  %42 = load i32, i32* %mult, align 4, !dbg !2681
  %mul32 = mul nsw i32 %41, %42, !dbg !2682
  %43 = load i32, i32* %length, align 4, !dbg !2683
  %div33 = sdiv i32 %mul32, %43, !dbg !2684
  %44 = load i32*, i32** @allocno_priorities, align 8, !dbg !2685
  %45 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2686
  %num34 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %45, i32 0, i32 0, !dbg !2686
  %46 = load i32, i32* %num34, align 8, !dbg !2686
  %idxprom35 = sext i32 %46 to i64, !dbg !2685
  %arrayidx36 = getelementptr inbounds i32, i32* %44, i64 %idxprom35, !dbg !2685
  store i32 %div33, i32* %arrayidx36, align 4, !dbg !2687
  br label %for.inc37, !dbg !2688

for.inc37:                                        ; preds = %if.end28
  %47 = load i32, i32* %i, align 4, !dbg !2689
  %inc38 = add nsw i32 %47, 1, !dbg !2689
  store i32 %inc38, i32* %i, align 4, !dbg !2689
  br label %for.cond19, !dbg !2690, !llvm.loop !2691

for.end39:                                        ; preds = %for.cond19
  ret void, !dbg !2693
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @allocno_priority_compare_func(i8* %v1p, i8* %v2p) #0 !dbg !2694 {
entry:
  %retval = alloca i32, align 4
  %v1p.addr = alloca i8*, align 8
  %v2p.addr = alloca i8*, align 8
  %a1 = alloca %struct.ira_allocno*, align 8
  %a2 = alloca %struct.ira_allocno*, align 8
  %pri1 = alloca i32, align 4
  %pri2 = alloca i32, align 4
  store i8* %v1p, i8** %v1p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v1p.addr, metadata !2695, metadata !DIExpression()), !dbg !2696
  store i8* %v2p, i8** %v2p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v2p.addr, metadata !2697, metadata !DIExpression()), !dbg !2698
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1, metadata !2699, metadata !DIExpression()), !dbg !2700
  %0 = load i8*, i8** %v1p.addr, align 8, !dbg !2701
  %1 = bitcast i8* %0 to %struct.ira_allocno**, !dbg !2702
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %1, align 8, !dbg !2703
  store %struct.ira_allocno* %2, %struct.ira_allocno** %a1, align 8, !dbg !2700
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2, metadata !2704, metadata !DIExpression()), !dbg !2705
  %3 = load i8*, i8** %v2p.addr, align 8, !dbg !2706
  %4 = bitcast i8* %3 to %struct.ira_allocno**, !dbg !2707
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %4, align 8, !dbg !2708
  store %struct.ira_allocno* %5, %struct.ira_allocno** %a2, align 8, !dbg !2705
  call void @llvm.dbg.declare(metadata i32* %pri1, metadata !2709, metadata !DIExpression()), !dbg !2710
  call void @llvm.dbg.declare(metadata i32* %pri2, metadata !2711, metadata !DIExpression()), !dbg !2712
  %6 = load i32*, i32** @allocno_priorities, align 8, !dbg !2713
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !2714
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 0, !dbg !2714
  %8 = load i32, i32* %num, align 8, !dbg !2714
  %idxprom = sext i32 %8 to i64, !dbg !2713
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !2713
  %9 = load i32, i32* %arrayidx, align 4, !dbg !2713
  store i32 %9, i32* %pri1, align 4, !dbg !2715
  %10 = load i32*, i32** @allocno_priorities, align 8, !dbg !2716
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !2717
  %num1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 0, !dbg !2717
  %12 = load i32, i32* %num1, align 8, !dbg !2717
  %idxprom2 = sext i32 %12 to i64, !dbg !2716
  %arrayidx3 = getelementptr inbounds i32, i32* %10, i64 %idxprom2, !dbg !2716
  %13 = load i32, i32* %arrayidx3, align 4, !dbg !2716
  store i32 %13, i32* %pri2, align 4, !dbg !2718
  %14 = load i32, i32* %pri2, align 4, !dbg !2719
  %15 = load i32, i32* %pri1, align 4, !dbg !2721
  %sub = sub nsw i32 %14, %15, !dbg !2722
  %tobool = icmp ne i32 %sub, 0, !dbg !2722
  br i1 %tobool, label %if.then, label %if.end, !dbg !2723

if.then:                                          ; preds = %entry
  %16 = load i32, i32* %pri2, align 4, !dbg !2724
  %17 = load i32, i32* %pri1, align 4, !dbg !2725
  %sub4 = sub nsw i32 %16, %17, !dbg !2726
  store i32 %sub4, i32* %retval, align 4, !dbg !2727
  br label %return, !dbg !2727

if.end:                                           ; preds = %entry
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !2728
  %num5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 0, !dbg !2728
  %19 = load i32, i32* %num5, align 8, !dbg !2728
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !2729
  %num6 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 0, !dbg !2729
  %21 = load i32, i32* %num6, align 8, !dbg !2729
  %sub7 = sub nsw i32 %19, %21, !dbg !2730
  store i32 %sub7, i32* %retval, align 4, !dbg !2731
  br label %return, !dbg !2731

return:                                           ; preds = %if.end, %if.then
  %22 = load i32, i32* %retval, align 4, !dbg !2732
  ret i32 %22, !dbg !2732
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_curr_costs(%struct.ira_allocno* %a) #0 !dbg !2733 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %i = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %cost = alloca i32, align 4
  %mode = alloca i32, align 4
  %cover_class = alloca i32, align 4
  %rclass = alloca i32, align 4
  %another_a = alloca %struct.ira_allocno*, align 8
  %cp = alloca %struct.ira_allocno_copy*, align 8
  %next_cp = alloca %struct.ira_allocno_copy*, align 8
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !2736, metadata !DIExpression()), !dbg !2737
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2738, metadata !DIExpression()), !dbg !2739
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !2740, metadata !DIExpression()), !dbg !2741
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !2742, metadata !DIExpression()), !dbg !2743
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !2744, metadata !DIExpression()), !dbg !2745
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !2746, metadata !DIExpression()), !dbg !2747
  call void @llvm.dbg.declare(metadata i32* %rclass, metadata !2748, metadata !DIExpression()), !dbg !2749
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %another_a, metadata !2750, metadata !DIExpression()), !dbg !2751
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !2752, metadata !DIExpression()), !dbg !2753
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %next_cp, metadata !2754, metadata !DIExpression()), !dbg !2755
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2756
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 9, !dbg !2756
  %1 = load i32, i32* %cover_class1, align 8, !dbg !2756
  store i32 %1, i32* %cover_class, align 4, !dbg !2757
  %2 = load i32, i32* %cover_class, align 4, !dbg !2758
  %cmp = icmp eq i32 %2, 0, !dbg !2760
  br i1 %cmp, label %if.then, label %if.end, !dbg !2761

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !2762

if.end:                                           ; preds = %entry
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2763
  %mode2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 2, !dbg !2763
  %4 = load i32, i32* %mode2, align 8, !dbg !2763
  store i32 %4, i32* %mode, align 4, !dbg !2764
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2765
  %allocno_copies = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 15, !dbg !2765
  %6 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %allocno_copies, align 8, !dbg !2765
  store %struct.ira_allocno_copy* %6, %struct.ira_allocno_copy** %cp, align 8, !dbg !2767
  br label %for.cond, !dbg !2768

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !2769
  %cmp3 = icmp ne %struct.ira_allocno_copy* %7, null, !dbg !2771
  br i1 %cmp3, label %for.body, label %for.end, !dbg !2772

for.body:                                         ; preds = %for.cond
  %8 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !2773
  %first = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %8, i32 0, i32 1, !dbg !2776
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !2776
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2777
  %cmp4 = icmp eq %struct.ira_allocno* %9, %10, !dbg !2778
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !2779

if.then5:                                         ; preds = %for.body
  %11 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !2780
  %next_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %11, i32 0, i32 7, !dbg !2782
  %12 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy, align 8, !dbg !2782
  store %struct.ira_allocno_copy* %12, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !2783
  %13 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !2784
  %second = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %13, i32 0, i32 2, !dbg !2785
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !2785
  store %struct.ira_allocno* %14, %struct.ira_allocno** %another_a, align 8, !dbg !2786
  br label %if.end12, !dbg !2787

if.else:                                          ; preds = %for.body
  %15 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !2788
  %second6 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %15, i32 0, i32 2, !dbg !2790
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %second6, align 8, !dbg !2790
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2791
  %cmp7 = icmp eq %struct.ira_allocno* %16, %17, !dbg !2792
  br i1 %cmp7, label %if.then8, label %if.else10, !dbg !2793

if.then8:                                         ; preds = %if.else
  %18 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !2794
  %next_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %18, i32 0, i32 9, !dbg !2796
  %19 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy, align 8, !dbg !2796
  store %struct.ira_allocno_copy* %19, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !2797
  %20 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !2798
  %first9 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %20, i32 0, i32 1, !dbg !2799
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %first9, align 8, !dbg !2799
  store %struct.ira_allocno* %21, %struct.ira_allocno** %another_a, align 8, !dbg !2800
  br label %if.end11, !dbg !2801

if.else10:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i32 2265, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !2802
  br label %if.end11

if.end11:                                         ; preds = %if.else10, %if.then8
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then5
  %22 = load i32, i32* %cover_class, align 4, !dbg !2803
  %idxprom = zext i32 %22 to i64, !dbg !2805
  %arrayidx = getelementptr inbounds [27 x [27 x i8]], [27 x [27 x i8]]* @ira_reg_classes_intersect_p, i64 0, i64 %idxprom, !dbg !2805
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %another_a, align 8, !dbg !2806
  %cover_class13 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 9, !dbg !2806
  %24 = load i32, i32* %cover_class13, align 8, !dbg !2806
  %idxprom14 = zext i32 %24 to i64, !dbg !2805
  %arrayidx15 = getelementptr inbounds [27 x i8], [27 x i8]* %arrayidx, i64 0, i64 %idxprom14, !dbg !2805
  %25 = load i8, i8* %arrayidx15, align 1, !dbg !2805
  %tobool = icmp ne i8 %25, 0, !dbg !2805
  br i1 %tobool, label %lor.lhs.false, label %if.then20, !dbg !2807

lor.lhs.false:                                    ; preds = %if.end12
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %another_a, align 8, !dbg !2808
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %26, i32 0, i32 31, !dbg !2808
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !2808
  %bf.lshr = lshr i16 %bf.load, 8, !dbg !2808
  %bf.clear = and i16 %bf.lshr, 1, !dbg !2808
  %bf.cast = zext i16 %bf.clear to i32, !dbg !2808
  %tobool16 = icmp ne i32 %bf.cast, 0, !dbg !2808
  br i1 %tobool16, label %lor.lhs.false17, label %if.then20, !dbg !2809

lor.lhs.false17:                                  ; preds = %lor.lhs.false
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %another_a, align 8, !dbg !2810
  %hard_regno18 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 3, !dbg !2810
  %28 = load i32, i32* %hard_regno18, align 4, !dbg !2810
  store i32 %28, i32* %hard_regno, align 4, !dbg !2811
  %cmp19 = icmp slt i32 %28, 0, !dbg !2812
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !2813

if.then20:                                        ; preds = %lor.lhs.false17, %lor.lhs.false, %if.end12
  br label %for.inc, !dbg !2814

if.end21:                                         ; preds = %lor.lhs.false17
  %29 = load i32, i32* %hard_regno, align 4, !dbg !2815
  %idxprom22 = sext i32 %29 to i64, !dbg !2815
  %arrayidx23 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom22, !dbg !2815
  %30 = load i32, i32* %arrayidx23, align 4, !dbg !2815
  store i32 %30, i32* %rclass, align 4, !dbg !2816
  %31 = load i32, i32* %cover_class, align 4, !dbg !2817
  %idxprom24 = zext i32 %31 to i64, !dbg !2818
  %arrayidx25 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom24, !dbg !2818
  %32 = load i32, i32* %hard_regno, align 4, !dbg !2819
  %idxprom26 = sext i32 %32 to i64, !dbg !2818
  %arrayidx27 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx25, i64 0, i64 %idxprom26, !dbg !2818
  %33 = load i16, i16* %arrayidx27, align 2, !dbg !2818
  %conv = sext i16 %33 to i32, !dbg !2818
  store i32 %conv, i32* %i, align 4, !dbg !2820
  %34 = load i32, i32* %i, align 4, !dbg !2821
  %cmp28 = icmp slt i32 %34, 0, !dbg !2823
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !2824

if.then30:                                        ; preds = %if.end21
  br label %for.inc, !dbg !2825

if.end31:                                         ; preds = %if.end21
  %35 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !2826
  %first32 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %35, i32 0, i32 1, !dbg !2827
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %first32, align 8, !dbg !2827
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2828
  %cmp33 = icmp eq %struct.ira_allocno* %36, %37, !dbg !2829
  br i1 %cmp33, label %cond.true, label %cond.false, !dbg !2826

cond.true:                                        ; preds = %if.end31
  %38 = load i32, i32* %mode, align 4, !dbg !2830
  %39 = load i32, i32* %rclass, align 4, !dbg !2831
  %40 = load i32, i32* %cover_class, align 4, !dbg !2832
  %call = call i32 @ira_get_register_move_cost(i32 %38, i32 %39, i32 %40), !dbg !2833
  br label %cond.end, !dbg !2826

cond.false:                                       ; preds = %if.end31
  %41 = load i32, i32* %mode, align 4, !dbg !2834
  %42 = load i32, i32* %cover_class, align 4, !dbg !2835
  %43 = load i32, i32* %rclass, align 4, !dbg !2836
  %call35 = call i32 @ira_get_register_move_cost(i32 %41, i32 %42, i32 %43), !dbg !2837
  br label %cond.end, !dbg !2826

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %call35, %cond.false ], !dbg !2826
  store i32 %cond, i32* %cost, align 4, !dbg !2838
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2839
  %updated_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %44, i32 0, i32 34, !dbg !2839
  %45 = load i32, i32* %cover_class, align 4, !dbg !2840
  %46 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2841
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %46, i32 0, i32 10, !dbg !2841
  %47 = load i32, i32* %cover_class_cost, align 4, !dbg !2841
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2842
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 33, !dbg !2842
  %49 = load i32*, i32** %hard_reg_costs, align 8, !dbg !2842
  call void @ira_allocate_and_set_or_copy_costs(i32** %updated_hard_reg_costs, i32 %45, i32 %47, i32* %49), !dbg !2843
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2844
  %updated_conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %50, i32 0, i32 36, !dbg !2844
  %51 = load i32, i32* %cover_class, align 4, !dbg !2845
  %52 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2846
  %conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %52, i32 0, i32 35, !dbg !2846
  %53 = load i32*, i32** %conflict_hard_reg_costs, align 8, !dbg !2846
  call void @ira_allocate_and_set_or_copy_costs(i32** %updated_conflict_hard_reg_costs, i32 %51, i32 0, i32* %53), !dbg !2847
  %54 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !2848
  %freq = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %54, i32 0, i32 3, !dbg !2849
  %55 = load i32, i32* %freq, align 8, !dbg !2849
  %56 = load i32, i32* %cost, align 4, !dbg !2850
  %mul = mul nsw i32 %55, %56, !dbg !2851
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2852
  %updated_hard_reg_costs36 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %57, i32 0, i32 34, !dbg !2852
  %58 = load i32*, i32** %updated_hard_reg_costs36, align 8, !dbg !2852
  %59 = load i32, i32* %i, align 4, !dbg !2853
  %idxprom37 = sext i32 %59 to i64, !dbg !2852
  %arrayidx38 = getelementptr inbounds i32, i32* %58, i64 %idxprom37, !dbg !2852
  %60 = load i32, i32* %arrayidx38, align 4, !dbg !2854
  %sub = sub nsw i32 %60, %mul, !dbg !2854
  store i32 %sub, i32* %arrayidx38, align 4, !dbg !2854
  %61 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !2855
  %freq39 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %61, i32 0, i32 3, !dbg !2856
  %62 = load i32, i32* %freq39, align 8, !dbg !2856
  %63 = load i32, i32* %cost, align 4, !dbg !2857
  %mul40 = mul nsw i32 %62, %63, !dbg !2858
  %64 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !2859
  %updated_conflict_hard_reg_costs41 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %64, i32 0, i32 36, !dbg !2859
  %65 = load i32*, i32** %updated_conflict_hard_reg_costs41, align 8, !dbg !2859
  %66 = load i32, i32* %i, align 4, !dbg !2860
  %idxprom42 = sext i32 %66 to i64, !dbg !2859
  %arrayidx43 = getelementptr inbounds i32, i32* %65, i64 %idxprom42, !dbg !2859
  %67 = load i32, i32* %arrayidx43, align 4, !dbg !2861
  %sub44 = sub nsw i32 %67, %mul40, !dbg !2861
  store i32 %sub44, i32* %arrayidx43, align 4, !dbg !2861
  br label %for.inc, !dbg !2862

for.inc:                                          ; preds = %cond.end, %if.then30, %if.then20
  %68 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !2863
  store %struct.ira_allocno_copy* %68, %struct.ira_allocno_copy** %cp, align 8, !dbg !2864
  br label %for.cond, !dbg !2865, !llvm.loop !2866

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !2868
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @assign_hard_reg(%struct.ira_allocno* %allocno, i8 zeroext %retry_p) #0 !dbg !1883 {
entry:
  %retval = alloca i8, align 1
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %retry_p.addr = alloca i8, align 1
  %conflicting_regs = alloca i64, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %best_hard_regno = alloca i32, align 4
  %class_size = alloca i32, align 4
  %cost = alloca i32, align 4
  %mem_cost = alloca i32, align 4
  %min_cost = alloca i32, align 4
  %full_cost = alloca i32, align 4
  %min_full_cost = alloca i32, align 4
  %add_cost = alloca i32, align 4
  %a_costs = alloca i32*, align 8
  %conflict_costs = alloca i32*, align 8
  %cover_class = alloca i32, align 4
  %rclass = alloca i32, align 4
  %conflict_cover_class = alloca i32, align 4
  %mode = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %conflict_allocno = alloca %struct.ira_allocno*, align 8
  %aci = alloca %struct.ira_allocno_conflict_iterator, align 8
  %no_stack_reg_p = alloca i8, align 1
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !2869, metadata !DIExpression()), !dbg !2870
  store i8 %retry_p, i8* %retry_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %retry_p.addr, metadata !2871, metadata !DIExpression()), !dbg !2872
  call void @llvm.dbg.declare(metadata i64* %conflicting_regs, metadata !2873, metadata !DIExpression()), !dbg !2874
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2875, metadata !DIExpression()), !dbg !2876
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2877, metadata !DIExpression()), !dbg !2878
  call void @llvm.dbg.declare(metadata i32* %k, metadata !2879, metadata !DIExpression()), !dbg !2880
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !2881, metadata !DIExpression()), !dbg !2882
  call void @llvm.dbg.declare(metadata i32* %best_hard_regno, metadata !2883, metadata !DIExpression()), !dbg !2884
  call void @llvm.dbg.declare(metadata i32* %class_size, metadata !2885, metadata !DIExpression()), !dbg !2886
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !2887, metadata !DIExpression()), !dbg !2888
  call void @llvm.dbg.declare(metadata i32* %mem_cost, metadata !2889, metadata !DIExpression()), !dbg !2890
  call void @llvm.dbg.declare(metadata i32* %min_cost, metadata !2891, metadata !DIExpression()), !dbg !2892
  call void @llvm.dbg.declare(metadata i32* %full_cost, metadata !2893, metadata !DIExpression()), !dbg !2894
  call void @llvm.dbg.declare(metadata i32* %min_full_cost, metadata !2895, metadata !DIExpression()), !dbg !2896
  call void @llvm.dbg.declare(metadata i32* %add_cost, metadata !2897, metadata !DIExpression()), !dbg !2898
  call void @llvm.dbg.declare(metadata i32** %a_costs, metadata !2899, metadata !DIExpression()), !dbg !2900
  call void @llvm.dbg.declare(metadata i32** %conflict_costs, metadata !2901, metadata !DIExpression()), !dbg !2902
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !2903, metadata !DIExpression()), !dbg !2904
  call void @llvm.dbg.declare(metadata i32* %rclass, metadata !2905, metadata !DIExpression()), !dbg !2906
  call void @llvm.dbg.declare(metadata i32* %conflict_cover_class, metadata !2907, metadata !DIExpression()), !dbg !2908
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !2909, metadata !DIExpression()), !dbg !2910
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !2911, metadata !DIExpression()), !dbg !2912
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %conflict_allocno, metadata !2913, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_conflict_iterator* %aci, metadata !2915, metadata !DIExpression()), !dbg !2916
  call void @llvm.dbg.declare(metadata i8* %no_stack_reg_p, metadata !2917, metadata !DIExpression()), !dbg !2918
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !2919
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 9, !dbg !2919
  %1 = load i32, i32* %cover_class1, align 8, !dbg !2919
  store i32 %1, i32* %cover_class, align 4, !dbg !2920
  %2 = load i32, i32* %cover_class, align 4, !dbg !2921
  %idxprom = zext i32 %2 to i64, !dbg !2922
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom, !dbg !2922
  %3 = load i32, i32* %arrayidx, align 4, !dbg !2922
  store i32 %3, i32* %class_size, align 4, !dbg !2923
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !2924
  %mode2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 2, !dbg !2924
  %5 = load i32, i32* %mode2, align 8, !dbg !2924
  store i32 %5, i32* %mode, align 4, !dbg !2925
  store i64 0, i64* %conflicting_regs, align 8, !dbg !2926
  store i32 -1, i32* %best_hard_regno, align 4, !dbg !2927
  %6 = load i32, i32* %class_size, align 4, !dbg !2928
  %conv = sext i32 %6 to i64, !dbg !2928
  %mul = mul i64 4, %conv, !dbg !2929
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([53 x i32]* @assign_hard_reg.full_costs to i8*), i8 0, i64 %mul, i1 false), !dbg !2930
  store i32 0, i32* %mem_cost, align 4, !dbg !2931
  %7 = load i8, i8* @allocno_coalesced_p, align 1, !dbg !2932
  %tobool = icmp ne i8 %7, 0, !dbg !2932
  br i1 %tobool, label %if.then, label %if.end, !dbg !2934

if.then:                                          ; preds = %entry
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !2935
  call void @bitmap_clear(%struct.bitmap_head_def* %8), !dbg !2936
  br label %if.end, !dbg !2936

if.end:                                           ; preds = %if.then, %entry
  %9 = load i32, i32* %class_size, align 4, !dbg !2937
  %conv3 = sext i32 %9 to i64, !dbg !2937
  %mul4 = mul i64 4, %conv3, !dbg !2938
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([53 x i32]* @assign_hard_reg.costs to i8*), i8 0, i64 %mul4, i1 false), !dbg !2939
  %10 = load i32, i32* %class_size, align 4, !dbg !2940
  %conv5 = sext i32 %10 to i64, !dbg !2940
  %mul6 = mul i64 4, %conv5, !dbg !2941
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([53 x i32]* @assign_hard_reg.full_costs to i8*), i8 0, i64 %mul6, i1 false), !dbg !2942
  store i8 0, i8* %no_stack_reg_p, align 1, !dbg !2943
  call void @start_update_cost(), !dbg !2944
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !2945
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 19, !dbg !2945
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !2945
  store %struct.ira_allocno* %12, %struct.ira_allocno** %a, align 8, !dbg !2947
  br label %for.cond, !dbg !2948

for.cond:                                         ; preds = %for.inc129, %if.end
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2949
  %updated_memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 13, !dbg !2949
  %14 = load i32, i32* %updated_memory_cost, align 8, !dbg !2949
  %15 = load i32, i32* %mem_cost, align 4, !dbg !2952
  %add = add nsw i32 %15, %14, !dbg !2952
  store i32 %add, i32* %mem_cost, align 4, !dbg !2952
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2953
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 27, !dbg !2953
  %17 = load i64, i64* %total_conflict_hard_regs, align 8, !dbg !2953
  %18 = load i64, i64* %conflicting_regs, align 8, !dbg !2953
  %or = or i64 %18, %17, !dbg !2953
  store i64 %or, i64* %conflicting_regs, align 8, !dbg !2953
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2954
  %updated_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 34, !dbg !2954
  %20 = load i32, i32* %cover_class, align 4, !dbg !2955
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2956
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 33, !dbg !2956
  %22 = load i32*, i32** %hard_reg_costs, align 8, !dbg !2956
  call void @ira_allocate_and_copy_costs(i32** %updated_hard_reg_costs, i32 %20, i32* %22), !dbg !2957
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2958
  %updated_hard_reg_costs7 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 34, !dbg !2958
  %24 = load i32*, i32** %updated_hard_reg_costs7, align 8, !dbg !2958
  store i32* %24, i32** %a_costs, align 8, !dbg !2959
  %25 = load i8, i8* %no_stack_reg_p, align 1, !dbg !2960
  %conv8 = zext i8 %25 to i32, !dbg !2960
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !2960
  br i1 %tobool9, label %lor.end, label %lor.rhs, !dbg !2961

lor.rhs:                                          ; preds = %for.cond
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2962
  %total_no_stack_reg_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %26, i32 0, i32 31, !dbg !2962
  %bf.load = load i16, i16* %total_no_stack_reg_p, align 4, !dbg !2962
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !2962
  %bf.clear = and i16 %bf.lshr, 1, !dbg !2962
  %bf.cast = zext i16 %bf.clear to i32, !dbg !2962
  %tobool10 = icmp ne i32 %bf.cast, 0, !dbg !2961
  br label %lor.end, !dbg !2961

lor.end:                                          ; preds = %lor.rhs, %for.cond
  %27 = phi i1 [ true, %for.cond ], [ %tobool10, %lor.rhs ]
  %lor.ext = zext i1 %27 to i32, !dbg !2961
  %conv11 = trunc i32 %lor.ext to i8, !dbg !2960
  store i8 %conv11, i8* %no_stack_reg_p, align 1, !dbg !2963
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !2964
  %updated_cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %28, i32 0, i32 11, !dbg !2964
  %29 = load i32, i32* %updated_cover_class_cost, align 8, !dbg !2964
  store i32 %29, i32* %cost, align 4, !dbg !2966
  store i32 0, i32* %i, align 4, !dbg !2967
  br label %for.cond12, !dbg !2968

for.cond12:                                       ; preds = %for.inc, %lor.end
  %30 = load i32, i32* %i, align 4, !dbg !2969
  %31 = load i32, i32* %class_size, align 4, !dbg !2971
  %cmp = icmp slt i32 %30, %31, !dbg !2972
  br i1 %cmp, label %for.body, label %for.end, !dbg !2973

for.body:                                         ; preds = %for.cond12
  %32 = load i32*, i32** %a_costs, align 8, !dbg !2974
  %cmp14 = icmp ne i32* %32, null, !dbg !2976
  br i1 %cmp14, label %if.then16, label %if.else, !dbg !2977

if.then16:                                        ; preds = %for.body
  %33 = load i32*, i32** %a_costs, align 8, !dbg !2978
  %34 = load i32, i32* %i, align 4, !dbg !2980
  %idxprom17 = sext i32 %34 to i64, !dbg !2978
  %arrayidx18 = getelementptr inbounds i32, i32* %33, i64 %idxprom17, !dbg !2978
  %35 = load i32, i32* %arrayidx18, align 4, !dbg !2978
  %36 = load i32, i32* %i, align 4, !dbg !2981
  %idxprom19 = sext i32 %36 to i64, !dbg !2982
  %arrayidx20 = getelementptr inbounds [53 x i32], [53 x i32]* @assign_hard_reg.costs, i64 0, i64 %idxprom19, !dbg !2982
  %37 = load i32, i32* %arrayidx20, align 4, !dbg !2983
  %add21 = add nsw i32 %37, %35, !dbg !2983
  store i32 %add21, i32* %arrayidx20, align 4, !dbg !2983
  %38 = load i32*, i32** %a_costs, align 8, !dbg !2984
  %39 = load i32, i32* %i, align 4, !dbg !2985
  %idxprom22 = sext i32 %39 to i64, !dbg !2984
  %arrayidx23 = getelementptr inbounds i32, i32* %38, i64 %idxprom22, !dbg !2984
  %40 = load i32, i32* %arrayidx23, align 4, !dbg !2984
  %41 = load i32, i32* %i, align 4, !dbg !2986
  %idxprom24 = sext i32 %41 to i64, !dbg !2987
  %arrayidx25 = getelementptr inbounds [53 x i32], [53 x i32]* @assign_hard_reg.full_costs, i64 0, i64 %idxprom24, !dbg !2987
  %42 = load i32, i32* %arrayidx25, align 4, !dbg !2988
  %add26 = add nsw i32 %42, %40, !dbg !2988
  store i32 %add26, i32* %arrayidx25, align 4, !dbg !2988
  br label %if.end33, !dbg !2989

if.else:                                          ; preds = %for.body
  %43 = load i32, i32* %cost, align 4, !dbg !2990
  %44 = load i32, i32* %i, align 4, !dbg !2992
  %idxprom27 = sext i32 %44 to i64, !dbg !2993
  %arrayidx28 = getelementptr inbounds [53 x i32], [53 x i32]* @assign_hard_reg.costs, i64 0, i64 %idxprom27, !dbg !2993
  %45 = load i32, i32* %arrayidx28, align 4, !dbg !2994
  %add29 = add nsw i32 %45, %43, !dbg !2994
  store i32 %add29, i32* %arrayidx28, align 4, !dbg !2994
  %46 = load i32, i32* %cost, align 4, !dbg !2995
  %47 = load i32, i32* %i, align 4, !dbg !2996
  %idxprom30 = sext i32 %47 to i64, !dbg !2997
  %arrayidx31 = getelementptr inbounds [53 x i32], [53 x i32]* @assign_hard_reg.full_costs, i64 0, i64 %idxprom30, !dbg !2997
  %48 = load i32, i32* %arrayidx31, align 4, !dbg !2998
  %add32 = add nsw i32 %48, %46, !dbg !2998
  store i32 %add32, i32* %arrayidx31, align 4, !dbg !2998
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then16
  br label %for.inc, !dbg !2999

for.inc:                                          ; preds = %if.end33
  %49 = load i32, i32* %i, align 4, !dbg !3000
  %inc = add nsw i32 %49, 1, !dbg !3000
  store i32 %inc, i32* %i, align 4, !dbg !3000
  br label %for.cond12, !dbg !3001, !llvm.loop !3002

for.end:                                          ; preds = %for.cond12
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3004
  call void @ira_allocno_conflict_iter_init(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno* %50), !dbg !3004
  br label %for.cond34, !dbg !3004

for.cond34:                                       ; preds = %for.inc123, %for.end
  %call = call zeroext i8 @ira_allocno_conflict_iter_cond(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno** %conflict_allocno), !dbg !3006
  %tobool35 = icmp ne i8 %call, 0, !dbg !3004
  br i1 %tobool35, label %for.body36, label %for.end124, !dbg !3004

for.body36:                                       ; preds = %for.cond34
  %51 = load i8, i8* %retry_p.addr, align 1, !dbg !3008
  %conv37 = zext i8 %51 to i32, !dbg !3008
  %tobool38 = icmp ne i32 %conv37, 0, !dbg !3008
  br i1 %tobool38, label %if.then41, label %lor.lhs.false, !dbg !3010

lor.lhs.false:                                    ; preds = %for.body36
  %52 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @consideration_allocno_bitmap, align 8, !dbg !3011
  %53 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3012
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %53, i32 0, i32 0, !dbg !3012
  %54 = load i32, i32* %num, align 8, !dbg !3012
  %call39 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %52, i32 %54), !dbg !3013
  %tobool40 = icmp ne i32 %call39, 0, !dbg !3013
  br i1 %tobool40, label %if.then41, label %if.end122, !dbg !3014

if.then41:                                        ; preds = %lor.lhs.false, %for.body36
  %55 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3015
  %cover_class42 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %55, i32 0, i32 9, !dbg !3015
  %56 = load i32, i32* %cover_class42, align 8, !dbg !3015
  store i32 %56, i32* %conflict_cover_class, align 4, !dbg !3017
  %57 = load i8, i8* @allocno_coalesced_p, align 1, !dbg !3018
  %tobool43 = icmp ne i8 %57, 0, !dbg !3018
  br i1 %tobool43, label %if.then44, label %if.end52, !dbg !3020

if.then44:                                        ; preds = %if.then41
  %58 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !3021
  %59 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3024
  %num45 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %59, i32 0, i32 0, !dbg !3024
  %60 = load i32, i32* %num45, align 8, !dbg !3024
  %call46 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %58, i32 %60), !dbg !3025
  %tobool47 = icmp ne i32 %call46, 0, !dbg !3025
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !3026

if.then48:                                        ; preds = %if.then44
  br label %for.inc123, !dbg !3027

if.end49:                                         ; preds = %if.then44
  %61 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !3028
  %62 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3029
  %num50 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %62, i32 0, i32 0, !dbg !3029
  %63 = load i32, i32* %num50, align 8, !dbg !3029
  %call51 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %61, i32 %63), !dbg !3030
  br label %if.end52, !dbg !3031

if.end52:                                         ; preds = %if.end49, %if.then41
  %64 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3032
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %64, i32 0, i32 31, !dbg !3032
  %bf.load53 = load i16, i16* %assigned_p, align 4, !dbg !3032
  %bf.lshr54 = lshr i16 %bf.load53, 8, !dbg !3032
  %bf.clear55 = and i16 %bf.lshr54, 1, !dbg !3032
  %bf.cast56 = zext i16 %bf.clear55 to i32, !dbg !3032
  %tobool57 = icmp ne i32 %bf.cast56, 0, !dbg !3032
  br i1 %tobool57, label %if.then58, label %if.else83, !dbg !3034

if.then58:                                        ; preds = %if.end52
  %65 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3035
  %hard_regno59 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %65, i32 0, i32 3, !dbg !3035
  %66 = load i32, i32* %hard_regno59, align 4, !dbg !3035
  store i32 %66, i32* %hard_regno, align 4, !dbg !3038
  %cmp60 = icmp sge i32 %66, 0, !dbg !3039
  br i1 %cmp60, label %land.lhs.true, label %if.end82, !dbg !3040

land.lhs.true:                                    ; preds = %if.then58
  %67 = load i32, i32* %cover_class, align 4, !dbg !3041
  %idxprom62 = zext i32 %67 to i64, !dbg !3042
  %arrayidx63 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom62, !dbg !3042
  %68 = load i32, i32* %hard_regno, align 4, !dbg !3043
  %idxprom64 = sext i32 %68 to i64, !dbg !3042
  %arrayidx65 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx63, i64 0, i64 %idxprom64, !dbg !3042
  %69 = load i16, i16* %arrayidx65, align 2, !dbg !3042
  %conv66 = sext i16 %69 to i32, !dbg !3042
  %cmp67 = icmp sge i32 %conv66, 0, !dbg !3044
  br i1 %cmp67, label %if.then69, label %if.end82, !dbg !3045

if.then69:                                        ; preds = %land.lhs.true
  %70 = load i32, i32* %hard_regno, align 4, !dbg !3046
  %idxprom70 = sext i32 %70 to i64, !dbg !3046
  %arrayidx71 = getelementptr inbounds [53 x [87 x i64]], [53 x [87 x i64]]* @ira_reg_mode_hard_regset, i64 0, i64 %idxprom70, !dbg !3046
  %71 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3046
  %mode72 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %71, i32 0, i32 2, !dbg !3046
  %72 = load i32, i32* %mode72, align 8, !dbg !3046
  %idxprom73 = zext i32 %72 to i64, !dbg !3046
  %arrayidx74 = getelementptr inbounds [87 x i64], [87 x i64]* %arrayidx71, i64 0, i64 %idxprom73, !dbg !3046
  %73 = load i64, i64* %arrayidx74, align 8, !dbg !3046
  %74 = load i64, i64* %conflicting_regs, align 8, !dbg !3046
  %or75 = or i64 %74, %73, !dbg !3046
  store i64 %or75, i64* %conflicting_regs, align 8, !dbg !3046
  %75 = load i32, i32* %cover_class, align 4, !dbg !3048
  %idxprom76 = zext i32 %75 to i64, !dbg !3050
  %arrayidx77 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom76, !dbg !3050
  %76 = load i64, i64* %arrayidx77, align 8, !dbg !3050
  %77 = load i64, i64* %conflicting_regs, align 8, !dbg !3051
  %call78 = call zeroext i8 @hard_reg_set_subset_p(i64 %76, i64 %77), !dbg !3052
  %tobool79 = icmp ne i8 %call78, 0, !dbg !3052
  br i1 %tobool79, label %if.then80, label %if.end81, !dbg !3053

if.then80:                                        ; preds = %if.then69
  br label %fail, !dbg !3054

if.end81:                                         ; preds = %if.then69
  br label %if.end82, !dbg !3055

if.end82:                                         ; preds = %if.end81, %land.lhs.true, %if.then58
  br label %if.end121, !dbg !3056

if.else83:                                        ; preds = %if.end52
  %78 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3057
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %78, i32 0, i32 18, !dbg !3057
  %79 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !3057
  %may_be_spilled_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %79, i32 0, i32 31, !dbg !3057
  %bf.load84 = load i16, i16* %may_be_spilled_p, align 4, !dbg !3057
  %bf.lshr85 = lshr i16 %bf.load84, 9, !dbg !3057
  %bf.clear86 = and i16 %bf.lshr85, 1, !dbg !3057
  %bf.cast87 = zext i16 %bf.clear86 to i32, !dbg !3057
  %tobool88 = icmp ne i32 %bf.cast87, 0, !dbg !3057
  br i1 %tobool88, label %if.end120, label %if.then89, !dbg !3059

if.then89:                                        ; preds = %if.else83
  %80 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3060
  %updated_conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %80, i32 0, i32 36, !dbg !3060
  %81 = load i32, i32* %conflict_cover_class, align 4, !dbg !3062
  %82 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3063
  %conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %82, i32 0, i32 35, !dbg !3063
  %83 = load i32*, i32** %conflict_hard_reg_costs, align 8, !dbg !3063
  call void @ira_allocate_and_copy_costs(i32** %updated_conflict_hard_reg_costs, i32 %81, i32* %83), !dbg !3064
  %84 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3065
  %updated_conflict_hard_reg_costs90 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %84, i32 0, i32 36, !dbg !3065
  %85 = load i32*, i32** %updated_conflict_hard_reg_costs90, align 8, !dbg !3065
  store i32* %85, i32** %conflict_costs, align 8, !dbg !3066
  %86 = load i32*, i32** %conflict_costs, align 8, !dbg !3067
  %cmp91 = icmp ne i32* %86, null, !dbg !3069
  br i1 %cmp91, label %if.then93, label %if.end119, !dbg !3070

if.then93:                                        ; preds = %if.then89
  %87 = load i32, i32* %class_size, align 4, !dbg !3071
  %sub = sub nsw i32 %87, 1, !dbg !3073
  store i32 %sub, i32* %j, align 4, !dbg !3074
  br label %for.cond94, !dbg !3075

for.cond94:                                       ; preds = %for.inc117, %if.then93
  %88 = load i32, i32* %j, align 4, !dbg !3076
  %cmp95 = icmp sge i32 %88, 0, !dbg !3078
  br i1 %cmp95, label %for.body97, label %for.end118, !dbg !3079

for.body97:                                       ; preds = %for.cond94
  %89 = load i32, i32* %cover_class, align 4, !dbg !3080
  %idxprom98 = zext i32 %89 to i64, !dbg !3082
  %arrayidx99 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_regs, i64 0, i64 %idxprom98, !dbg !3082
  %90 = load i32, i32* %j, align 4, !dbg !3083
  %idxprom100 = sext i32 %90 to i64, !dbg !3082
  %arrayidx101 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx99, i64 0, i64 %idxprom100, !dbg !3082
  %91 = load i16, i16* %arrayidx101, align 2, !dbg !3082
  %conv102 = sext i16 %91 to i32, !dbg !3082
  store i32 %conv102, i32* %hard_regno, align 4, !dbg !3084
  %92 = load i32, i32* %conflict_cover_class, align 4, !dbg !3085
  %idxprom103 = zext i32 %92 to i64, !dbg !3086
  %arrayidx104 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom103, !dbg !3086
  %93 = load i32, i32* %hard_regno, align 4, !dbg !3087
  %idxprom105 = sext i32 %93 to i64, !dbg !3086
  %arrayidx106 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx104, i64 0, i64 %idxprom105, !dbg !3086
  %94 = load i16, i16* %arrayidx106, align 2, !dbg !3086
  %conv107 = sext i16 %94 to i32, !dbg !3088
  store i32 %conv107, i32* %k, align 4, !dbg !3089
  %95 = load i32, i32* %k, align 4, !dbg !3090
  %cmp108 = icmp slt i32 %95, 0, !dbg !3092
  br i1 %cmp108, label %if.then110, label %if.end111, !dbg !3093

if.then110:                                       ; preds = %for.body97
  br label %for.inc117, !dbg !3094

if.end111:                                        ; preds = %for.body97
  %96 = load i32*, i32** %conflict_costs, align 8, !dbg !3095
  %97 = load i32, i32* %k, align 4, !dbg !3096
  %idxprom112 = sext i32 %97 to i64, !dbg !3095
  %arrayidx113 = getelementptr inbounds i32, i32* %96, i64 %idxprom112, !dbg !3095
  %98 = load i32, i32* %arrayidx113, align 4, !dbg !3095
  %99 = load i32, i32* %j, align 4, !dbg !3097
  %idxprom114 = sext i32 %99 to i64, !dbg !3098
  %arrayidx115 = getelementptr inbounds [53 x i32], [53 x i32]* @assign_hard_reg.full_costs, i64 0, i64 %idxprom114, !dbg !3098
  %100 = load i32, i32* %arrayidx115, align 4, !dbg !3099
  %sub116 = sub nsw i32 %100, %98, !dbg !3099
  store i32 %sub116, i32* %arrayidx115, align 4, !dbg !3099
  br label %for.inc117, !dbg !3100

for.inc117:                                       ; preds = %if.end111, %if.then110
  %101 = load i32, i32* %j, align 4, !dbg !3101
  %dec = add nsw i32 %101, -1, !dbg !3101
  store i32 %dec, i32* %j, align 4, !dbg !3101
  br label %for.cond94, !dbg !3102, !llvm.loop !3103

for.end118:                                       ; preds = %for.cond94
  br label %if.end119, !dbg !3104

if.end119:                                        ; preds = %for.end118, %if.then89
  %102 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !3105
  call void @queue_update_cost(%struct.ira_allocno* %102, i32 4), !dbg !3106
  br label %if.end120, !dbg !3107

if.end120:                                        ; preds = %if.end119, %if.else83
  br label %if.end121

if.end121:                                        ; preds = %if.end120, %if.end82
  br label %if.end122, !dbg !3108

if.end122:                                        ; preds = %if.end121, %lor.lhs.false
  br label %for.inc123, !dbg !3109

for.inc123:                                       ; preds = %if.end122, %if.then48
  call void @ira_allocno_conflict_iter_next(%struct.ira_allocno_conflict_iterator* %aci), !dbg !3006
  br label %for.cond34, !dbg !3006, !llvm.loop !3110

for.end124:                                       ; preds = %for.cond34
  %103 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3112
  %104 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !3114
  %cmp125 = icmp eq %struct.ira_allocno* %103, %104, !dbg !3115
  br i1 %cmp125, label %if.then127, label %if.end128, !dbg !3116

if.then127:                                       ; preds = %for.end124
  br label %for.end131, !dbg !3117

if.end128:                                        ; preds = %for.end124
  br label %for.inc129, !dbg !3118

for.inc129:                                       ; preds = %if.end128
  %105 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3119
  %next_coalesced_allocno130 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %105, i32 0, i32 19, !dbg !3119
  %106 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno130, align 8, !dbg !3119
  store %struct.ira_allocno* %106, %struct.ira_allocno** %a, align 8, !dbg !3120
  br label %for.cond, !dbg !3121, !llvm.loop !3122

for.end131:                                       ; preds = %if.then127
  %107 = load i32, i32* %cover_class, align 4, !dbg !3125
  call void @update_conflict_hard_regno_costs(i32* getelementptr inbounds ([53 x i32], [53 x i32]* @assign_hard_reg.full_costs, i64 0, i64 0), i32 %107, i8 zeroext 1), !dbg !3126
  call void @start_update_cost(), !dbg !3127
  %108 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !3128
  %next_coalesced_allocno132 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %108, i32 0, i32 19, !dbg !3128
  %109 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno132, align 8, !dbg !3128
  store %struct.ira_allocno* %109, %struct.ira_allocno** %a, align 8, !dbg !3130
  br label %for.cond133, !dbg !3131

for.cond133:                                      ; preds = %for.inc138, %for.end131
  %110 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3132
  call void @queue_update_cost(%struct.ira_allocno* %110, i32 4), !dbg !3135
  %111 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3136
  %112 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !3138
  %cmp134 = icmp eq %struct.ira_allocno* %111, %112, !dbg !3139
  br i1 %cmp134, label %if.then136, label %if.end137, !dbg !3140

if.then136:                                       ; preds = %for.cond133
  br label %for.end140, !dbg !3141

if.end137:                                        ; preds = %for.cond133
  br label %for.inc138, !dbg !3142

for.inc138:                                       ; preds = %if.end137
  %113 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3143
  %next_coalesced_allocno139 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %113, i32 0, i32 19, !dbg !3143
  %114 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno139, align 8, !dbg !3143
  store %struct.ira_allocno* %114, %struct.ira_allocno** %a, align 8, !dbg !3144
  br label %for.cond133, !dbg !3145, !llvm.loop !3146

for.end140:                                       ; preds = %if.then136
  %115 = load i32, i32* %cover_class, align 4, !dbg !3149
  call void @update_conflict_hard_regno_costs(i32* getelementptr inbounds ([53 x i32], [53 x i32]* @assign_hard_reg.full_costs, i64 0, i64 0), i32 %115, i8 zeroext 0), !dbg !3150
  store i32 2147483647, i32* %min_full_cost, align 4, !dbg !3151
  store i32 2147483647, i32* %min_cost, align 4, !dbg !3152
  store i32 0, i32* %i, align 4, !dbg !3153
  br label %for.cond141, !dbg !3155

for.cond141:                                      ; preds = %for.inc209, %for.end140
  %116 = load i32, i32* %i, align 4, !dbg !3156
  %117 = load i32, i32* %class_size, align 4, !dbg !3158
  %cmp142 = icmp slt i32 %116, %117, !dbg !3159
  br i1 %cmp142, label %for.body144, label %for.end211, !dbg !3160

for.body144:                                      ; preds = %for.cond141
  %118 = load i32, i32* %cover_class, align 4, !dbg !3161
  %idxprom145 = zext i32 %118 to i64, !dbg !3163
  %arrayidx146 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_regs, i64 0, i64 %idxprom145, !dbg !3163
  %119 = load i32, i32* %i, align 4, !dbg !3164
  %idxprom147 = sext i32 %119 to i64, !dbg !3163
  %arrayidx148 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx146, i64 0, i64 %idxprom147, !dbg !3163
  %120 = load i16, i16* %arrayidx148, align 2, !dbg !3163
  %conv149 = sext i16 %120 to i32, !dbg !3163
  store i32 %conv149, i32* %hard_regno, align 4, !dbg !3165
  %121 = load i8, i8* %no_stack_reg_p, align 1, !dbg !3166
  %conv150 = zext i8 %121 to i32, !dbg !3166
  %tobool151 = icmp ne i32 %conv150, 0, !dbg !3166
  br i1 %tobool151, label %land.lhs.true152, label %if.end159, !dbg !3168

land.lhs.true152:                                 ; preds = %for.body144
  %122 = load i32, i32* %hard_regno, align 4, !dbg !3169
  %cmp153 = icmp sle i32 8, %122, !dbg !3170
  br i1 %cmp153, label %land.lhs.true155, label %if.end159, !dbg !3171

land.lhs.true155:                                 ; preds = %land.lhs.true152
  %123 = load i32, i32* %hard_regno, align 4, !dbg !3172
  %cmp156 = icmp sle i32 %123, 15, !dbg !3173
  br i1 %cmp156, label %if.then158, label %if.end159, !dbg !3174

if.then158:                                       ; preds = %land.lhs.true155
  br label %for.inc209, !dbg !3175

if.end159:                                        ; preds = %land.lhs.true155, %land.lhs.true152, %for.body144
  %124 = load i32, i32* %hard_regno, align 4, !dbg !3176
  %125 = load i32, i32* %mode, align 4, !dbg !3178
  %126 = load i64, i64* %conflicting_regs, align 8, !dbg !3179
  %call160 = call zeroext i8 @ira_hard_reg_not_in_set_p(i32 %124, i32 %125, i64 %126), !dbg !3180
  %tobool161 = icmp ne i8 %call160, 0, !dbg !3180
  br i1 %tobool161, label %lor.lhs.false162, label %if.then168, !dbg !3181

lor.lhs.false162:                                 ; preds = %if.end159
  %127 = load i32, i32* %cover_class, align 4, !dbg !3182
  %idxprom163 = zext i32 %127 to i64, !dbg !3182
  %arrayidx164 = getelementptr inbounds [27 x [87 x i64]], [27 x [87 x i64]]* @prohibited_class_mode_regs, i64 0, i64 %idxprom163, !dbg !3182
  %128 = load i32, i32* %mode, align 4, !dbg !3182
  %idxprom165 = zext i32 %128 to i64, !dbg !3182
  %arrayidx166 = getelementptr inbounds [87 x i64], [87 x i64]* %arrayidx164, i64 0, i64 %idxprom165, !dbg !3182
  %129 = load i64, i64* %arrayidx166, align 8, !dbg !3182
  %130 = load i32, i32* %hard_regno, align 4, !dbg !3182
  %sh_prom = zext i32 %130 to i64, !dbg !3182
  %shl = shl i64 1, %sh_prom, !dbg !3182
  %and = and i64 %129, %shl, !dbg !3182
  %tobool167 = icmp ne i64 %and, 0, !dbg !3182
  br i1 %tobool167, label %if.then168, label %if.end169, !dbg !3183

if.then168:                                       ; preds = %lor.lhs.false162, %if.end159
  br label %for.inc209, !dbg !3184

if.end169:                                        ; preds = %lor.lhs.false162
  %131 = load i32, i32* %i, align 4, !dbg !3185
  %idxprom170 = sext i32 %131 to i64, !dbg !3186
  %arrayidx171 = getelementptr inbounds [53 x i32], [53 x i32]* @assign_hard_reg.costs, i64 0, i64 %idxprom170, !dbg !3186
  %132 = load i32, i32* %arrayidx171, align 4, !dbg !3186
  store i32 %132, i32* %cost, align 4, !dbg !3187
  %133 = load i32, i32* %i, align 4, !dbg !3188
  %idxprom172 = sext i32 %133 to i64, !dbg !3189
  %arrayidx173 = getelementptr inbounds [53 x i32], [53 x i32]* @assign_hard_reg.full_costs, i64 0, i64 %idxprom172, !dbg !3189
  %134 = load i32, i32* %arrayidx173, align 4, !dbg !3189
  store i32 %134, i32* %full_cost, align 4, !dbg !3190
  %135 = load i32, i32* %hard_regno, align 4, !dbg !3191
  %idxprom174 = sext i32 %135 to i64, !dbg !3193
  %arrayidx175 = getelementptr inbounds [53 x i8], [53 x i8]* @allocated_hardreg_p, i64 0, i64 %idxprom174, !dbg !3193
  %136 = load i8, i8* %arrayidx175, align 1, !dbg !3193
  %tobool176 = icmp ne i8 %136, 0, !dbg !3193
  br i1 %tobool176, label %if.end200, label %land.lhs.true177, !dbg !3194

land.lhs.true177:                                 ; preds = %if.end169
  %137 = load i32, i32* %hard_regno, align 4, !dbg !3195
  %138 = load i32, i32* %mode, align 4, !dbg !3196
  %139 = load i64, i64* @call_used_reg_set, align 8, !dbg !3197
  %call178 = call zeroext i8 @ira_hard_reg_not_in_set_p(i32 %137, i32 %138, i64 %139), !dbg !3198
  %conv179 = zext i8 %call178 to i32, !dbg !3198
  %tobool180 = icmp ne i32 %conv179, 0, !dbg !3198
  br i1 %tobool180, label %if.then181, label %if.end200, !dbg !3199

if.then181:                                       ; preds = %land.lhs.true177
  %140 = load i32, i32* %hard_regno, align 4, !dbg !3200
  %idxprom182 = sext i32 %140 to i64, !dbg !3200
  %arrayidx183 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom182, !dbg !3200
  %141 = load i32, i32* %arrayidx183, align 4, !dbg !3200
  store i32 %141, i32* %rclass, align 4, !dbg !3202
  %142 = load i32, i32* %mode, align 4, !dbg !3203
  %idxprom184 = zext i32 %142 to i64, !dbg !3204
  %arrayidx185 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom184, !dbg !3204
  %143 = load i32, i32* %rclass, align 4, !dbg !3205
  %idxprom186 = zext i32 %143 to i64, !dbg !3204
  %arrayidx187 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx185, i64 0, i64 %idxprom186, !dbg !3204
  %arrayidx188 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx187, i64 0, i64 0, !dbg !3204
  %144 = load i16, i16* %arrayidx188, align 4, !dbg !3204
  %conv189 = sext i16 %144 to i32, !dbg !3204
  %145 = load i32, i32* %mode, align 4, !dbg !3206
  %idxprom190 = zext i32 %145 to i64, !dbg !3207
  %arrayidx191 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom190, !dbg !3207
  %146 = load i32, i32* %rclass, align 4, !dbg !3208
  %idxprom192 = zext i32 %146 to i64, !dbg !3207
  %arrayidx193 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx191, i64 0, i64 %idxprom192, !dbg !3207
  %arrayidx194 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx193, i64 0, i64 1, !dbg !3207
  %147 = load i16, i16* %arrayidx194, align 2, !dbg !3207
  %conv195 = sext i16 %147 to i32, !dbg !3207
  %add196 = add nsw i32 %conv189, %conv195, !dbg !3209
  %sub197 = sub nsw i32 %add196, 1, !dbg !3210
  store i32 %sub197, i32* %add_cost, align 4, !dbg !3211
  %148 = load i32, i32* %add_cost, align 4, !dbg !3212
  %149 = load i32, i32* %cost, align 4, !dbg !3213
  %add198 = add nsw i32 %149, %148, !dbg !3213
  store i32 %add198, i32* %cost, align 4, !dbg !3213
  %150 = load i32, i32* %add_cost, align 4, !dbg !3214
  %151 = load i32, i32* %full_cost, align 4, !dbg !3215
  %add199 = add nsw i32 %151, %150, !dbg !3215
  store i32 %add199, i32* %full_cost, align 4, !dbg !3215
  br label %if.end200, !dbg !3216

if.end200:                                        ; preds = %if.then181, %land.lhs.true177, %if.end169
  %152 = load i32, i32* %min_cost, align 4, !dbg !3217
  %153 = load i32, i32* %cost, align 4, !dbg !3219
  %cmp201 = icmp sgt i32 %152, %153, !dbg !3220
  br i1 %cmp201, label %if.then203, label %if.end204, !dbg !3221

if.then203:                                       ; preds = %if.end200
  %154 = load i32, i32* %cost, align 4, !dbg !3222
  store i32 %154, i32* %min_cost, align 4, !dbg !3223
  br label %if.end204, !dbg !3224

if.end204:                                        ; preds = %if.then203, %if.end200
  %155 = load i32, i32* %min_full_cost, align 4, !dbg !3225
  %156 = load i32, i32* %full_cost, align 4, !dbg !3227
  %cmp205 = icmp sgt i32 %155, %156, !dbg !3228
  br i1 %cmp205, label %if.then207, label %if.end208, !dbg !3229

if.then207:                                       ; preds = %if.end204
  %157 = load i32, i32* %full_cost, align 4, !dbg !3230
  store i32 %157, i32* %min_full_cost, align 4, !dbg !3232
  %158 = load i32, i32* %hard_regno, align 4, !dbg !3233
  store i32 %158, i32* %best_hard_regno, align 4, !dbg !3234
  br label %if.end208, !dbg !3235

if.end208:                                        ; preds = %if.then207, %if.end204
  br label %for.inc209, !dbg !3236

for.inc209:                                       ; preds = %if.end208, %if.then168, %if.then158
  %159 = load i32, i32* %i, align 4, !dbg !3237
  %inc210 = add nsw i32 %159, 1, !dbg !3237
  store i32 %inc210, i32* %i, align 4, !dbg !3237
  br label %for.cond141, !dbg !3238, !llvm.loop !3239

for.end211:                                       ; preds = %for.cond141
  %160 = load i32, i32* %min_full_cost, align 4, !dbg !3241
  %161 = load i32, i32* %mem_cost, align 4, !dbg !3243
  %cmp212 = icmp sgt i32 %160, %161, !dbg !3244
  br i1 %cmp212, label %if.then214, label %if.end225, !dbg !3245

if.then214:                                       ; preds = %for.end211
  %162 = load i8, i8* %retry_p.addr, align 1, !dbg !3246
  %tobool215 = icmp ne i8 %162, 0, !dbg !3246
  br i1 %tobool215, label %if.end224, label %land.lhs.true216, !dbg !3249

land.lhs.true216:                                 ; preds = %if.then214
  %163 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !3250
  %cmp217 = icmp sgt i32 %163, 3, !dbg !3251
  br i1 %cmp217, label %land.lhs.true219, label %if.end224, !dbg !3252

land.lhs.true219:                                 ; preds = %land.lhs.true216
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3253
  %cmp220 = icmp ne %struct._IO_FILE* %164, null, !dbg !3254
  br i1 %cmp220, label %if.then222, label %if.end224, !dbg !3255

if.then222:                                       ; preds = %land.lhs.true219
  %165 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3256
  %166 = load i32, i32* %mem_cost, align 4, !dbg !3257
  %167 = load i32, i32* %min_full_cost, align 4, !dbg !3258
  %call223 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %165, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.13, i64 0, i64 0), i32 %166, i32 %167), !dbg !3259
  br label %if.end224, !dbg !3259

if.end224:                                        ; preds = %if.then222, %land.lhs.true219, %land.lhs.true216, %if.then214
  store i32 -1, i32* %best_hard_regno, align 4, !dbg !3260
  br label %if.end225, !dbg !3261

if.end225:                                        ; preds = %if.end224, %for.end211
  br label %fail, !dbg !3243

fail:                                             ; preds = %if.end225, %if.then80
  call void @llvm.dbg.label(metadata !3262), !dbg !3263
  %168 = load i32, i32* @flag_ira_algorithm, align 4, !dbg !3264
  %cmp226 = icmp ne i32 %168, 1, !dbg !3266
  br i1 %cmp226, label %land.lhs.true228, label %if.end270, !dbg !3267

land.lhs.true228:                                 ; preds = %fail
  %169 = load i32, i32* %best_hard_regno, align 4, !dbg !3268
  %cmp229 = icmp slt i32 %169, 0, !dbg !3269
  br i1 %cmp229, label %land.lhs.true231, label %if.end270, !dbg !3270

land.lhs.true231:                                 ; preds = %land.lhs.true228
  %170 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !3271
  %next_coalesced_allocno232 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %170, i32 0, i32 19, !dbg !3271
  %171 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno232, align 8, !dbg !3271
  %172 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !3272
  %cmp233 = icmp ne %struct.ira_allocno* %171, %172, !dbg !3273
  br i1 %cmp233, label %if.then235, label %if.end270, !dbg !3274

if.then235:                                       ; preds = %land.lhs.true231
  store i32 0, i32* %j, align 4, !dbg !3275
  %173 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !3278
  %next_coalesced_allocno236 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %173, i32 0, i32 19, !dbg !3278
  %174 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno236, align 8, !dbg !3278
  store %struct.ira_allocno* %174, %struct.ira_allocno** %a, align 8, !dbg !3279
  br label %for.cond237, !dbg !3280

for.cond237:                                      ; preds = %for.inc245, %if.then235
  %175 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3281
  %176 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !3284
  %177 = load i32, i32* %j, align 4, !dbg !3285
  %inc238 = add nsw i32 %177, 1, !dbg !3285
  store i32 %inc238, i32* %j, align 4, !dbg !3285
  %idxprom239 = sext i32 %177 to i64, !dbg !3284
  %arrayidx240 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %176, i64 %idxprom239, !dbg !3284
  store %struct.ira_allocno* %175, %struct.ira_allocno** %arrayidx240, align 8, !dbg !3286
  %178 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3287
  %179 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !3289
  %cmp241 = icmp eq %struct.ira_allocno* %178, %179, !dbg !3290
  br i1 %cmp241, label %if.then243, label %if.end244, !dbg !3291

if.then243:                                       ; preds = %for.cond237
  br label %for.end247, !dbg !3292

if.end244:                                        ; preds = %for.cond237
  br label %for.inc245, !dbg !3293

for.inc245:                                       ; preds = %if.end244
  %180 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3294
  %next_coalesced_allocno246 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %180, i32 0, i32 19, !dbg !3294
  %181 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno246, align 8, !dbg !3294
  store %struct.ira_allocno* %181, %struct.ira_allocno** %a, align 8, !dbg !3295
  br label %for.cond237, !dbg !3296, !llvm.loop !3297

for.end247:                                       ; preds = %if.then243
  %182 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !3300
  %183 = bitcast %struct.ira_allocno** %182 to i8*, !dbg !3300
  %184 = load i32, i32* %j, align 4, !dbg !3301
  %conv248 = sext i32 %184 to i64, !dbg !3301
  call void @spec_qsort(i8* %183, i64 %conv248, i64 8, i32 (i8*, i8*)* @allocno_cost_compare_func), !dbg !3302
  store i32 0, i32* %i, align 4, !dbg !3303
  br label %for.cond249, !dbg !3305

for.cond249:                                      ; preds = %for.inc267, %for.end247
  %185 = load i32, i32* %i, align 4, !dbg !3306
  %186 = load i32, i32* %j, align 4, !dbg !3308
  %cmp250 = icmp slt i32 %185, %186, !dbg !3309
  br i1 %cmp250, label %for.body252, label %for.end269, !dbg !3310

for.body252:                                      ; preds = %for.cond249
  %187 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !3311
  %188 = load i32, i32* %i, align 4, !dbg !3313
  %idxprom253 = sext i32 %188 to i64, !dbg !3311
  %arrayidx254 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %187, i64 %idxprom253, !dbg !3311
  %189 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx254, align 8, !dbg !3311
  store %struct.ira_allocno* %189, %struct.ira_allocno** %a, align 8, !dbg !3314
  %190 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3315
  %191 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3316
  %first_coalesced_allocno255 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %191, i32 0, i32 18, !dbg !3316
  store %struct.ira_allocno* %190, %struct.ira_allocno** %first_coalesced_allocno255, align 8, !dbg !3317
  %192 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3318
  %193 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3319
  %next_coalesced_allocno256 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %193, i32 0, i32 19, !dbg !3319
  store %struct.ira_allocno* %192, %struct.ira_allocno** %next_coalesced_allocno256, align 8, !dbg !3320
  %194 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3321
  %call257 = call %struct.ira_allocno** @VEC_ira_allocno_t_heap_safe_push(%struct.VEC_ira_allocno_t_heap** @allocno_stack_vec, %struct.ira_allocno* %194), !dbg !3321
  %195 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !3322
  %cmp258 = icmp sgt i32 %195, 3, !dbg !3324
  br i1 %cmp258, label %land.lhs.true260, label %if.end266, !dbg !3325

land.lhs.true260:                                 ; preds = %for.body252
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3326
  %cmp261 = icmp ne %struct._IO_FILE* %196, null, !dbg !3327
  br i1 %cmp261, label %if.then263, label %if.end266, !dbg !3328

if.then263:                                       ; preds = %land.lhs.true260
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3329
  %call264 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %197, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.14, i64 0, i64 0)), !dbg !3331
  %198 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3332
  call void @print_coalesced_allocno(%struct.ira_allocno* %198), !dbg !3333
  %199 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3334
  %call265 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %199, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3335
  br label %if.end266, !dbg !3336

if.end266:                                        ; preds = %if.then263, %land.lhs.true260, %for.body252
  br label %for.inc267, !dbg !3337

for.inc267:                                       ; preds = %if.end266
  %200 = load i32, i32* %i, align 4, !dbg !3338
  %inc268 = add nsw i32 %200, 1, !dbg !3338
  store i32 %inc268, i32* %i, align 4, !dbg !3338
  br label %for.cond249, !dbg !3339, !llvm.loop !3340

for.end269:                                       ; preds = %for.cond249
  store i8 0, i8* %retval, align 1, !dbg !3342
  br label %return, !dbg !3342

if.end270:                                        ; preds = %land.lhs.true231, %land.lhs.true228, %fail
  %201 = load i32, i32* %best_hard_regno, align 4, !dbg !3343
  %cmp271 = icmp sge i32 %201, 0, !dbg !3345
  br i1 %cmp271, label %if.then273, label %if.end276, !dbg !3346

if.then273:                                       ; preds = %if.end270
  %202 = load i32, i32* %best_hard_regno, align 4, !dbg !3347
  %idxprom274 = sext i32 %202 to i64, !dbg !3348
  %arrayidx275 = getelementptr inbounds [53 x i8], [53 x i8]* @allocated_hardreg_p, i64 0, i64 %idxprom274, !dbg !3348
  store i8 1, i8* %arrayidx275, align 1, !dbg !3349
  br label %if.end276, !dbg !3348

if.end276:                                        ; preds = %if.then273, %if.end270
  %203 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !3350
  %next_coalesced_allocno277 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %203, i32 0, i32 19, !dbg !3350
  %204 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno277, align 8, !dbg !3350
  store %struct.ira_allocno* %204, %struct.ira_allocno** %a, align 8, !dbg !3352
  br label %for.cond278, !dbg !3353

for.cond278:                                      ; preds = %for.inc291, %if.end276
  %205 = load i32, i32* %best_hard_regno, align 4, !dbg !3354
  %206 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3357
  %hard_regno279 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %206, i32 0, i32 3, !dbg !3357
  store i32 %205, i32* %hard_regno279, align 4, !dbg !3358
  %207 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3359
  %assigned_p280 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %207, i32 0, i32 31, !dbg !3359
  %bf.load281 = load i16, i16* %assigned_p280, align 4, !dbg !3360
  %bf.clear282 = and i16 %bf.load281, -257, !dbg !3360
  %bf.set = or i16 %bf.clear282, 256, !dbg !3360
  store i16 %bf.set, i16* %assigned_p280, align 4, !dbg !3360
  %208 = load i32, i32* %best_hard_regno, align 4, !dbg !3361
  %cmp283 = icmp sge i32 %208, 0, !dbg !3363
  br i1 %cmp283, label %if.then285, label %if.end286, !dbg !3364

if.then285:                                       ; preds = %for.cond278
  %209 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3365
  call void @update_copy_costs(%struct.ira_allocno* %209, i8 zeroext 1), !dbg !3366
  br label %if.end286, !dbg !3366

if.end286:                                        ; preds = %if.then285, %for.cond278
  %210 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3367
  call void @ira_free_allocno_updated_costs(%struct.ira_allocno* %210), !dbg !3368
  %211 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3369
  %212 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !3371
  %cmp287 = icmp eq %struct.ira_allocno* %211, %212, !dbg !3372
  br i1 %cmp287, label %if.then289, label %if.end290, !dbg !3373

if.then289:                                       ; preds = %if.end286
  br label %for.end293, !dbg !3374

if.end290:                                        ; preds = %if.end286
  br label %for.inc291, !dbg !3375

for.inc291:                                       ; preds = %if.end290
  %213 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3376
  %next_coalesced_allocno292 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %213, i32 0, i32 19, !dbg !3376
  %214 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno292, align 8, !dbg !3376
  store %struct.ira_allocno* %214, %struct.ira_allocno** %a, align 8, !dbg !3377
  br label %for.cond278, !dbg !3378, !llvm.loop !3379

for.end293:                                       ; preds = %if.then289
  %215 = load i32, i32* %best_hard_regno, align 4, !dbg !3382
  %cmp294 = icmp sge i32 %215, 0, !dbg !3383
  %conv295 = zext i1 %cmp294 to i32, !dbg !3383
  %conv296 = trunc i32 %conv295 to i8, !dbg !3382
  store i8 %conv296, i8* %retval, align 1, !dbg !3384
  br label %return, !dbg !3384

return:                                           ; preds = %for.end293, %for.end269
  %216 = load i8, i8* %retval, align 1, !dbg !3385
  ret i8 %216, !dbg !3385
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_sort_regnos_for_alter_reg(i32* %pseudo_regnos, i32 %n, i32* %reg_max_ref_width) #0 !dbg !3386 {
entry:
  %pseudo_regnos.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %reg_max_ref_width.addr = alloca i32*, align 8
  %max_regno = alloca i32, align 4
  %i = alloca i32, align 4
  %regno = alloca i32, align 4
  %num = alloca i32, align 4
  %slot_num = alloca i32, align 4
  %allocno = alloca %struct.ira_allocno*, align 8
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  %spilled_coalesced_allocnos = alloca %struct.ira_allocno**, align 8
  store i32* %pseudo_regnos, i32** %pseudo_regnos.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pseudo_regnos.addr, metadata !3389, metadata !DIExpression()), !dbg !3390
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3391, metadata !DIExpression()), !dbg !3392
  store i32* %reg_max_ref_width, i32** %reg_max_ref_width.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %reg_max_ref_width.addr, metadata !3393, metadata !DIExpression()), !dbg !3394
  call void @llvm.dbg.declare(metadata i32* %max_regno, metadata !3395, metadata !DIExpression()), !dbg !3396
  %call = call i32 @max_reg_num(), !dbg !3397
  store i32 %call, i32* %max_regno, align 4, !dbg !3396
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3398, metadata !DIExpression()), !dbg !3399
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !3400, metadata !DIExpression()), !dbg !3401
  call void @llvm.dbg.declare(metadata i32* %num, metadata !3402, metadata !DIExpression()), !dbg !3403
  call void @llvm.dbg.declare(metadata i32* %slot_num, metadata !3404, metadata !DIExpression()), !dbg !3405
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno, metadata !3406, metadata !DIExpression()), !dbg !3407
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !3408, metadata !DIExpression()), !dbg !3409
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !3410, metadata !DIExpression()), !dbg !3411
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %spilled_coalesced_allocnos, metadata !3412, metadata !DIExpression()), !dbg !3413
  %call1 = call %struct.bitmap_head_def* @ira_allocate_bitmap(), !dbg !3414
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !3415
  %call2 = call %struct.bitmap_head_def* @ira_allocate_bitmap(), !dbg !3416
  store %struct.bitmap_head_def* %call2, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !3417
  store i32 0, i32* %i, align 4, !dbg !3418
  br label %for.cond, !dbg !3420

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3421
  %1 = load i32, i32* %n.addr, align 4, !dbg !3423
  %cmp = icmp slt i32 %0, %1, !dbg !3424
  br i1 %cmp, label %for.body, label %for.end, !dbg !3425

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %pseudo_regnos.addr, align 8, !dbg !3426
  %3 = load i32, i32* %i, align 4, !dbg !3428
  %idxprom = sext i32 %3 to i64, !dbg !3426
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !3426
  %4 = load i32, i32* %arrayidx, align 4, !dbg !3426
  store i32 %4, i32* %regno, align 4, !dbg !3429
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !3430
  %6 = load i32, i32* %regno, align 4, !dbg !3431
  %idxprom3 = sext i32 %6 to i64, !dbg !3430
  %arrayidx4 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %5, i64 %idxprom3, !dbg !3430
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx4, align 8, !dbg !3430
  store %struct.ira_allocno* %7, %struct.ira_allocno** %allocno, align 8, !dbg !3432
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3433
  %cmp5 = icmp ne %struct.ira_allocno* %8, null, !dbg !3435
  br i1 %cmp5, label %if.then, label %if.end, !dbg !3436

if.then:                                          ; preds = %for.body
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !3437
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3438
  %num6 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 0, !dbg !3438
  %11 = load i32, i32* %num6, align 8, !dbg !3438
  %call7 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %9, i32 %11), !dbg !3439
  br label %if.end, !dbg !3439

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3440

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !3441
  %inc = add nsw i32 %12, 1, !dbg !3441
  store i32 %inc, i32* %i, align 4, !dbg !3441
  br label %for.cond, !dbg !3442, !llvm.loop !3443

for.end:                                          ; preds = %for.cond
  store i8 0, i8* @allocno_coalesced_p, align 1, !dbg !3445
  call void @coalesce_allocnos(i8 zeroext 1), !dbg !3446
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !3447
  call void @ira_free_bitmap(%struct.bitmap_head_def* %13), !dbg !3448
  %14 = load i32, i32* %max_regno, align 4, !dbg !3449
  %conv = sext i32 %14 to i64, !dbg !3449
  %mul = mul i64 %conv, 4, !dbg !3450
  %call8 = call i8* @ira_allocate(i64 %mul), !dbg !3451
  %15 = bitcast i8* %call8 to i32*, !dbg !3452
  store i32* %15, i32** @regno_coalesced_allocno_cost, align 8, !dbg !3453
  %16 = load i32, i32* %max_regno, align 4, !dbg !3454
  %conv9 = sext i32 %16 to i64, !dbg !3454
  %mul10 = mul i64 %conv9, 4, !dbg !3455
  %call11 = call i8* @ira_allocate(i64 %mul10), !dbg !3456
  %17 = bitcast i8* %call11 to i32*, !dbg !3457
  store i32* %17, i32** @regno_coalesced_allocno_num, align 8, !dbg !3458
  %18 = load i32*, i32** @regno_coalesced_allocno_num, align 8, !dbg !3459
  %19 = bitcast i32* %18 to i8*, !dbg !3460
  %20 = load i32, i32* %max_regno, align 4, !dbg !3461
  %conv12 = sext i32 %20 to i64, !dbg !3461
  %mul13 = mul i64 %conv12, 4, !dbg !3462
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 %mul13, i1 false), !dbg !3460
  %21 = load i32*, i32** %pseudo_regnos.addr, align 8, !dbg !3463
  %22 = load i32, i32* %n.addr, align 4, !dbg !3464
  call void @setup_coalesced_allocno_costs_and_nums(i32* %21, i32 %22), !dbg !3465
  %23 = load i32*, i32** %pseudo_regnos.addr, align 8, !dbg !3466
  %24 = bitcast i32* %23 to i8*, !dbg !3466
  %25 = load i32, i32* %n.addr, align 4, !dbg !3467
  %conv14 = sext i32 %25 to i64, !dbg !3467
  call void @spec_qsort(i8* %24, i64 %conv14, i64 4, i32 (i8*, i8*)* @coalesced_pseudo_reg_freq_compare), !dbg !3468
  %26 = load i32, i32* @ira_allocnos_num, align 4, !dbg !3469
  %conv15 = sext i32 %26 to i64, !dbg !3469
  %mul16 = mul i64 %conv15, 8, !dbg !3470
  %call17 = call i8* @ira_allocate(i64 %mul16), !dbg !3471
  %27 = bitcast i8* %call17 to %struct.ira_allocno**, !dbg !3472
  store %struct.ira_allocno** %27, %struct.ira_allocno*** %spilled_coalesced_allocnos, align 8, !dbg !3473
  %28 = load i32*, i32** %pseudo_regnos.addr, align 8, !dbg !3474
  %29 = load i32, i32* %n.addr, align 4, !dbg !3475
  %30 = load %struct.ira_allocno**, %struct.ira_allocno*** %spilled_coalesced_allocnos, align 8, !dbg !3476
  %call18 = call i32 @collect_spilled_coalesced_allocnos(i32* %28, i32 %29, %struct.ira_allocno** %30), !dbg !3477
  store i32 %call18, i32* %num, align 4, !dbg !3478
  %31 = load i32, i32* @flag_ira_share_spill_slots, align 4, !dbg !3479
  %tobool = icmp ne i32 %31, 0, !dbg !3479
  br i1 %tobool, label %land.lhs.true, label %if.end25, !dbg !3481

land.lhs.true:                                    ; preds = %for.end
  %32 = load %struct.ira_allocno**, %struct.ira_allocno*** %spilled_coalesced_allocnos, align 8, !dbg !3482
  %33 = load i32, i32* %num, align 4, !dbg !3483
  %call19 = call zeroext i8 @coalesce_spill_slots(%struct.ira_allocno** %32, i32 %33), !dbg !3484
  %conv20 = zext i8 %call19 to i32, !dbg !3484
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !3484
  br i1 %tobool21, label %if.then22, label %if.end25, !dbg !3485

if.then22:                                        ; preds = %land.lhs.true
  %34 = load i32*, i32** %pseudo_regnos.addr, align 8, !dbg !3486
  %35 = load i32, i32* %n.addr, align 4, !dbg !3488
  call void @setup_coalesced_allocno_costs_and_nums(i32* %34, i32 %35), !dbg !3489
  %36 = load i32*, i32** %pseudo_regnos.addr, align 8, !dbg !3490
  %37 = bitcast i32* %36 to i8*, !dbg !3490
  %38 = load i32, i32* %n.addr, align 4, !dbg !3491
  %conv23 = sext i32 %38 to i64, !dbg !3491
  call void @spec_qsort(i8* %37, i64 %conv23, i64 4, i32 (i8*, i8*)* @coalesced_pseudo_reg_freq_compare), !dbg !3492
  %39 = load i32*, i32** %pseudo_regnos.addr, align 8, !dbg !3493
  %40 = load i32, i32* %n.addr, align 4, !dbg !3494
  %41 = load %struct.ira_allocno**, %struct.ira_allocno*** %spilled_coalesced_allocnos, align 8, !dbg !3495
  %call24 = call i32 @collect_spilled_coalesced_allocnos(i32* %39, i32 %40, %struct.ira_allocno** %41), !dbg !3496
  store i32 %call24, i32* %num, align 4, !dbg !3497
  br label %if.end25, !dbg !3498

if.end25:                                         ; preds = %if.then22, %land.lhs.true, %for.end
  %42 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !3499
  call void @ira_free_bitmap(%struct.bitmap_head_def* %42), !dbg !3500
  store i8 0, i8* @allocno_coalesced_p, align 1, !dbg !3501
  store i32 1, i32* %slot_num, align 4, !dbg !3502
  store i32 0, i32* %i, align 4, !dbg !3503
  br label %for.cond26, !dbg !3505

for.cond26:                                       ; preds = %for.inc115, %if.end25
  %43 = load i32, i32* %i, align 4, !dbg !3506
  %44 = load i32, i32* %num, align 4, !dbg !3508
  %cmp27 = icmp slt i32 %43, %44, !dbg !3509
  br i1 %cmp27, label %for.body29, label %for.end117, !dbg !3510

for.body29:                                       ; preds = %for.cond26
  %45 = load %struct.ira_allocno**, %struct.ira_allocno*** %spilled_coalesced_allocnos, align 8, !dbg !3511
  %46 = load i32, i32* %i, align 4, !dbg !3513
  %idxprom30 = sext i32 %46 to i64, !dbg !3511
  %arrayidx31 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %45, i64 %idxprom30, !dbg !3511
  %47 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx31, align 8, !dbg !3511
  store %struct.ira_allocno* %47, %struct.ira_allocno** %allocno, align 8, !dbg !3514
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3515
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 18, !dbg !3515
  %49 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !3515
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3517
  %cmp32 = icmp ne %struct.ira_allocno* %49, %50, !dbg !3518
  br i1 %cmp32, label %if.then52, label %lor.lhs.false, !dbg !3519

lor.lhs.false:                                    ; preds = %for.body29
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3520
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %51, i32 0, i32 3, !dbg !3520
  %52 = load i32, i32* %hard_regno, align 4, !dbg !3520
  %cmp34 = icmp sge i32 %52, 0, !dbg !3521
  br i1 %cmp34, label %if.then52, label %lor.lhs.false36, !dbg !3522

lor.lhs.false36:                                  ; preds = %lor.lhs.false
  %53 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3523
  %regno37 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %53, i32 0, i32 1, !dbg !3523
  %54 = load i32, i32* %regno37, align 4, !dbg !3523
  %55 = load i32, i32* @ira_reg_equiv_len, align 4, !dbg !3524
  %cmp38 = icmp slt i32 %54, %55, !dbg !3525
  br i1 %cmp38, label %land.lhs.true40, label %if.end53, !dbg !3526

land.lhs.true40:                                  ; preds = %lor.lhs.false36
  %56 = load %struct.rtx_def**, %struct.rtx_def*** @ira_reg_equiv_const, align 8, !dbg !3527
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3528
  %regno41 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %57, i32 0, i32 1, !dbg !3528
  %58 = load i32, i32* %regno41, align 4, !dbg !3528
  %idxprom42 = sext i32 %58 to i64, !dbg !3527
  %arrayidx43 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %56, i64 %idxprom42, !dbg !3527
  %59 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx43, align 8, !dbg !3527
  %cmp44 = icmp ne %struct.rtx_def* %59, null, !dbg !3529
  br i1 %cmp44, label %if.then52, label %lor.lhs.false46, !dbg !3530

lor.lhs.false46:                                  ; preds = %land.lhs.true40
  %60 = load i8*, i8** @ira_reg_equiv_invariant_p, align 8, !dbg !3531
  %61 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3532
  %regno47 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %61, i32 0, i32 1, !dbg !3532
  %62 = load i32, i32* %regno47, align 4, !dbg !3532
  %idxprom48 = sext i32 %62 to i64, !dbg !3531
  %arrayidx49 = getelementptr inbounds i8, i8* %60, i64 %idxprom48, !dbg !3531
  %63 = load i8, i8* %arrayidx49, align 1, !dbg !3531
  %conv50 = zext i8 %63 to i32, !dbg !3531
  %tobool51 = icmp ne i32 %conv50, 0, !dbg !3531
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !3533

if.then52:                                        ; preds = %lor.lhs.false46, %land.lhs.true40, %lor.lhs.false, %for.body29
  br label %for.inc115, !dbg !3534

if.end53:                                         ; preds = %lor.lhs.false46, %lor.lhs.false36
  %64 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !3535
  %cmp54 = icmp sgt i32 %64, 3, !dbg !3537
  br i1 %cmp54, label %land.lhs.true56, label %if.end61, !dbg !3538

land.lhs.true56:                                  ; preds = %if.end53
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3539
  %cmp57 = icmp ne %struct._IO_FILE* %65, null, !dbg !3540
  br i1 %cmp57, label %if.then59, label %if.end61, !dbg !3541

if.then59:                                        ; preds = %land.lhs.true56
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3542
  %67 = load i32, i32* %slot_num, align 4, !dbg !3543
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i32 %67), !dbg !3544
  br label %if.end61, !dbg !3544

if.end61:                                         ; preds = %if.then59, %land.lhs.true56, %if.end53
  %68 = load i32, i32* %slot_num, align 4, !dbg !3545
  %inc62 = add nsw i32 %68, 1, !dbg !3545
  store i32 %inc62, i32* %slot_num, align 4, !dbg !3545
  %69 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3546
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %69, i32 0, i32 19, !dbg !3546
  %70 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !3546
  store %struct.ira_allocno* %70, %struct.ira_allocno** %a, align 8, !dbg !3548
  br label %for.cond63, !dbg !3549

for.cond63:                                       ; preds = %for.inc104, %if.end61
  %71 = load i32, i32* %slot_num, align 4, !dbg !3550
  %sub = sub nsw i32 0, %71, !dbg !3553
  %72 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3554
  %hard_regno64 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %72, i32 0, i32 3, !dbg !3554
  store i32 %sub, i32* %hard_regno64, align 4, !dbg !3555
  %73 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !3556
  %cmp65 = icmp sgt i32 %73, 3, !dbg !3558
  br i1 %cmp65, label %land.lhs.true67, label %if.end99, !dbg !3559

land.lhs.true67:                                  ; preds = %for.cond63
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3560
  %cmp68 = icmp ne %struct._IO_FILE* %74, null, !dbg !3561
  br i1 %cmp68, label %if.then70, label %if.end99, !dbg !3562

if.then70:                                        ; preds = %land.lhs.true67
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3563
  %76 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3564
  %num71 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %76, i32 0, i32 0, !dbg !3564
  %77 = load i32, i32* %num71, align 8, !dbg !3564
  %78 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3565
  %regno72 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %78, i32 0, i32 1, !dbg !3565
  %79 = load i32, i32* %regno72, align 4, !dbg !3565
  %80 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3566
  %freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %80, i32 0, i32 8, !dbg !3566
  %81 = load i32, i32* %freq, align 4, !dbg !3566
  %82 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !3567
  %83 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3567
  %regno73 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %83, i32 0, i32 1, !dbg !3567
  %84 = load i32, i32* %regno73, align 4, !dbg !3567
  %idxprom74 = sext i32 %84 to i64, !dbg !3567
  %arrayidx75 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %82, i64 %idxprom74, !dbg !3567
  %85 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx75, align 8, !dbg !3567
  %86 = bitcast %struct.rtx_def* %85 to i32*, !dbg !3567
  %bf.load = load i32, i32* %86, align 8, !dbg !3567
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3567
  %bf.clear = and i32 %bf.lshr, 255, !dbg !3567
  %idxprom76 = zext i32 %bf.clear to i64, !dbg !3567
  %arrayidx77 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom76, !dbg !3567
  %87 = load i8, i8* %arrayidx77, align 1, !dbg !3567
  %conv78 = zext i8 %87 to i16, !dbg !3567
  %conv79 = zext i16 %conv78 to i32, !dbg !3567
  %88 = load i32*, i32** %reg_max_ref_width.addr, align 8, !dbg !3567
  %89 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3567
  %regno80 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %89, i32 0, i32 1, !dbg !3567
  %90 = load i32, i32* %regno80, align 4, !dbg !3567
  %idxprom81 = sext i32 %90 to i64, !dbg !3567
  %arrayidx82 = getelementptr inbounds i32, i32* %88, i64 %idxprom81, !dbg !3567
  %91 = load i32, i32* %arrayidx82, align 4, !dbg !3567
  %cmp83 = icmp ugt i32 %conv79, %91, !dbg !3567
  br i1 %cmp83, label %cond.true, label %cond.false, !dbg !3567

cond.true:                                        ; preds = %if.then70
  %92 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !3567
  %93 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3567
  %regno85 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %93, i32 0, i32 1, !dbg !3567
  %94 = load i32, i32* %regno85, align 4, !dbg !3567
  %idxprom86 = sext i32 %94 to i64, !dbg !3567
  %arrayidx87 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %92, i64 %idxprom86, !dbg !3567
  %95 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx87, align 8, !dbg !3567
  %96 = bitcast %struct.rtx_def* %95 to i32*, !dbg !3567
  %bf.load88 = load i32, i32* %96, align 8, !dbg !3567
  %bf.lshr89 = lshr i32 %bf.load88, 16, !dbg !3567
  %bf.clear90 = and i32 %bf.lshr89, 255, !dbg !3567
  %idxprom91 = zext i32 %bf.clear90 to i64, !dbg !3567
  %arrayidx92 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom91, !dbg !3567
  %97 = load i8, i8* %arrayidx92, align 1, !dbg !3567
  %conv93 = zext i8 %97 to i16, !dbg !3567
  %conv94 = zext i16 %conv93 to i32, !dbg !3567
  br label %cond.end, !dbg !3567

cond.false:                                       ; preds = %if.then70
  %98 = load i32*, i32** %reg_max_ref_width.addr, align 8, !dbg !3567
  %99 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3567
  %regno95 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %99, i32 0, i32 1, !dbg !3567
  %100 = load i32, i32* %regno95, align 4, !dbg !3567
  %idxprom96 = sext i32 %100 to i64, !dbg !3567
  %arrayidx97 = getelementptr inbounds i32, i32* %98, i64 %idxprom96, !dbg !3567
  %101 = load i32, i32* %arrayidx97, align 4, !dbg !3567
  br label %cond.end, !dbg !3567

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv94, %cond.true ], [ %101, %cond.false ], !dbg !3567
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 %77, i32 %79, i32 %81, i32 %cond), !dbg !3568
  br label %if.end99, !dbg !3568

if.end99:                                         ; preds = %cond.end, %land.lhs.true67, %for.cond63
  %102 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3569
  %103 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3571
  %cmp100 = icmp eq %struct.ira_allocno* %102, %103, !dbg !3572
  br i1 %cmp100, label %if.then102, label %if.end103, !dbg !3573

if.then102:                                       ; preds = %if.end99
  br label %for.end106, !dbg !3574

if.end103:                                        ; preds = %if.end99
  br label %for.inc104, !dbg !3575

for.inc104:                                       ; preds = %if.end103
  %104 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3576
  %next_coalesced_allocno105 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %104, i32 0, i32 19, !dbg !3576
  %105 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno105, align 8, !dbg !3576
  store %struct.ira_allocno* %105, %struct.ira_allocno** %a, align 8, !dbg !3577
  br label %for.cond63, !dbg !3578, !llvm.loop !3579

for.end106:                                       ; preds = %if.then102
  %106 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !3582
  %cmp107 = icmp sgt i32 %106, 3, !dbg !3584
  br i1 %cmp107, label %land.lhs.true109, label %if.end114, !dbg !3585

land.lhs.true109:                                 ; preds = %for.end106
  %107 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3586
  %cmp110 = icmp ne %struct._IO_FILE* %107, null, !dbg !3587
  br i1 %cmp110, label %if.then112, label %if.end114, !dbg !3588

if.then112:                                       ; preds = %land.lhs.true109
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3589
  %call113 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %108, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !3590
  br label %if.end114, !dbg !3590

if.end114:                                        ; preds = %if.then112, %land.lhs.true109, %for.end106
  br label %for.inc115, !dbg !3591

for.inc115:                                       ; preds = %if.end114, %if.then52
  %109 = load i32, i32* %i, align 4, !dbg !3592
  %inc116 = add nsw i32 %109, 1, !dbg !3592
  store i32 %inc116, i32* %i, align 4, !dbg !3592
  br label %for.cond26, !dbg !3593, !llvm.loop !3594

for.end117:                                       ; preds = %for.cond26
  %110 = load i32, i32* %slot_num, align 4, !dbg !3596
  %sub118 = sub nsw i32 %110, 1, !dbg !3597
  store i32 %sub118, i32* @ira_spilled_reg_stack_slots_num, align 4, !dbg !3598
  %111 = load %struct.ira_allocno**, %struct.ira_allocno*** %spilled_coalesced_allocnos, align 8, !dbg !3599
  %112 = bitcast %struct.ira_allocno** %111 to i8*, !dbg !3599
  call void @ira_free(i8* %112), !dbg !3600
  %113 = load i32*, i32** %reg_max_ref_width.addr, align 8, !dbg !3601
  store i32* %113, i32** @regno_max_ref_width, align 8, !dbg !3602
  %114 = load i32*, i32** %pseudo_regnos.addr, align 8, !dbg !3603
  %115 = bitcast i32* %114 to i8*, !dbg !3603
  %116 = load i32, i32* %n.addr, align 4, !dbg !3604
  %conv119 = sext i32 %116 to i64, !dbg !3604
  call void @spec_qsort(i8* %115, i64 %conv119, i64 4, i32 (i8*, i8*)* @coalesced_pseudo_reg_slot_compare), !dbg !3605
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !3606
  br label %for.cond120, !dbg !3606

for.cond120:                                      ; preds = %for.body123, %for.end117
  %call121 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !3608
  %tobool122 = icmp ne i8 %call121, 0, !dbg !3606
  br i1 %tobool122, label %for.body123, label %for.end126, !dbg !3606

for.body123:                                      ; preds = %for.cond120
  %117 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3610
  %118 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3612
  %first_coalesced_allocno124 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %118, i32 0, i32 18, !dbg !3612
  store %struct.ira_allocno* %117, %struct.ira_allocno** %first_coalesced_allocno124, align 8, !dbg !3613
  %119 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3614
  %120 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3615
  %next_coalesced_allocno125 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %120, i32 0, i32 19, !dbg !3615
  store %struct.ira_allocno* %119, %struct.ira_allocno** %next_coalesced_allocno125, align 8, !dbg !3616
  br label %for.cond120, !dbg !3608, !llvm.loop !3617

for.end126:                                       ; preds = %for.cond120
  %121 = load i32*, i32** @regno_coalesced_allocno_num, align 8, !dbg !3619
  %122 = bitcast i32* %121 to i8*, !dbg !3619
  call void @ira_free(i8* %122), !dbg !3620
  %123 = load i32*, i32** @regno_coalesced_allocno_cost, align 8, !dbg !3621
  %124 = bitcast i32* %123 to i8*, !dbg !3621
  call void @ira_free(i8* %124), !dbg !3622
  ret void, !dbg !3623
}

declare dso_local i32 @max_reg_num() #3

; Function Attrs: noinline nounwind uwtable
define internal void @coalesce_allocnos(i8 zeroext %reload_p) #0 !dbg !3624 {
entry:
  %reload_p.addr = alloca i8, align 1
  %a = alloca %struct.ira_allocno*, align 8
  %cp = alloca %struct.ira_allocno_copy*, align 8
  %next_cp = alloca %struct.ira_allocno_copy*, align 8
  %sorted_copies = alloca %struct.ira_allocno_copy**, align 8
  %cover_class = alloca i32, align 4
  %mode = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %cp_num = alloca i32, align 4
  %regno = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  store i8 %reload_p, i8* %reload_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %reload_p.addr, metadata !3627, metadata !DIExpression()), !dbg !3628
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !3629, metadata !DIExpression()), !dbg !3630
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !3631, metadata !DIExpression()), !dbg !3632
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %next_cp, metadata !3633, metadata !DIExpression()), !dbg !3634
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy*** %sorted_copies, metadata !3635, metadata !DIExpression()), !dbg !3636
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !3637, metadata !DIExpression()), !dbg !3638
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !3639, metadata !DIExpression()), !dbg !3640
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3641, metadata !DIExpression()), !dbg !3642
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3643, metadata !DIExpression()), !dbg !3644
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3645, metadata !DIExpression()), !dbg !3646
  call void @llvm.dbg.declare(metadata i32* %cp_num, metadata !3647, metadata !DIExpression()), !dbg !3648
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !3649, metadata !DIExpression()), !dbg !3650
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3651, metadata !DIExpression()), !dbg !3659
  %0 = load i32, i32* @ira_copies_num, align 4, !dbg !3660
  %conv = sext i32 %0 to i64, !dbg !3660
  %mul = mul i64 %conv, 8, !dbg !3661
  %call = call i8* @ira_allocate(i64 %mul), !dbg !3662
  %1 = bitcast i8* %call to %struct.ira_allocno_copy**, !dbg !3663
  store %struct.ira_allocno_copy** %1, %struct.ira_allocno_copy*** %sorted_copies, align 8, !dbg !3664
  store i32 0, i32* %cp_num, align 4, !dbg !3665
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !3666
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %2, i32 0, i32* %j), !dbg !3666
  br label %for.cond, !dbg !3666

for.cond:                                         ; preds = %for.inc106, %entry
  %call1 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !3668
  %tobool = icmp ne i8 %call1, 0, !dbg !3666
  br i1 %tobool, label %for.body, label %for.end107, !dbg !3666

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !3670
  %4 = load i32, i32* %j, align 4, !dbg !3672
  %idxprom = zext i32 %4 to i64, !dbg !3670
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %3, i64 %idxprom, !dbg !3670
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !3670
  store %struct.ira_allocno* %5, %struct.ira_allocno** %a, align 8, !dbg !3673
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3674
  %regno2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 1, !dbg !3674
  %7 = load i32, i32* %regno2, align 4, !dbg !3674
  store i32 %7, i32* %regno, align 4, !dbg !3675
  %8 = load i8, i8* %reload_p.addr, align 1, !dbg !3676
  %tobool3 = icmp ne i8 %8, 0, !dbg !3676
  br i1 %tobool3, label %lor.lhs.false, label %land.lhs.true, !dbg !3678

land.lhs.true:                                    ; preds = %for.body
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3679
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 31, !dbg !3679
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !3679
  %bf.lshr = lshr i16 %bf.load, 8, !dbg !3679
  %bf.clear = and i16 %bf.lshr, 1, !dbg !3679
  %bf.cast = zext i16 %bf.clear to i32, !dbg !3679
  %tobool4 = icmp ne i32 %bf.cast, 0, !dbg !3679
  br i1 %tobool4, label %if.then, label %lor.lhs.false, !dbg !3680

lor.lhs.false:                                    ; preds = %land.lhs.true, %for.body
  %10 = load i8, i8* %reload_p.addr, align 1, !dbg !3681
  %conv5 = zext i8 %10 to i32, !dbg !3681
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !3681
  br i1 %tobool6, label %land.lhs.true7, label %if.end, !dbg !3682

land.lhs.true7:                                   ; preds = %lor.lhs.false
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3683
  %assigned_p8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 31, !dbg !3683
  %bf.load9 = load i16, i16* %assigned_p8, align 4, !dbg !3683
  %bf.lshr10 = lshr i16 %bf.load9, 8, !dbg !3683
  %bf.clear11 = and i16 %bf.lshr10, 1, !dbg !3683
  %bf.cast12 = zext i16 %bf.clear11 to i32, !dbg !3683
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !3683
  br i1 %tobool13, label %lor.lhs.false14, label %if.then, !dbg !3684

lor.lhs.false14:                                  ; preds = %land.lhs.true7
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3685
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 3, !dbg !3685
  %13 = load i32, i32* %hard_regno, align 4, !dbg !3685
  %cmp = icmp sge i32 %13, 0, !dbg !3686
  br i1 %cmp, label %if.then, label %lor.lhs.false16, !dbg !3687

lor.lhs.false16:                                  ; preds = %lor.lhs.false14
  %14 = load i32, i32* %regno, align 4, !dbg !3688
  %15 = load i32, i32* @ira_reg_equiv_len, align 4, !dbg !3689
  %cmp17 = icmp slt i32 %14, %15, !dbg !3690
  br i1 %cmp17, label %land.lhs.true19, label %if.end, !dbg !3691

land.lhs.true19:                                  ; preds = %lor.lhs.false16
  %16 = load %struct.rtx_def**, %struct.rtx_def*** @ira_reg_equiv_const, align 8, !dbg !3692
  %17 = load i32, i32* %regno, align 4, !dbg !3693
  %idxprom20 = sext i32 %17 to i64, !dbg !3692
  %arrayidx21 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %16, i64 %idxprom20, !dbg !3692
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx21, align 8, !dbg !3692
  %cmp22 = icmp ne %struct.rtx_def* %18, null, !dbg !3694
  br i1 %cmp22, label %if.then, label %lor.lhs.false24, !dbg !3695

lor.lhs.false24:                                  ; preds = %land.lhs.true19
  %19 = load i8*, i8** @ira_reg_equiv_invariant_p, align 8, !dbg !3696
  %20 = load i32, i32* %regno, align 4, !dbg !3697
  %idxprom25 = sext i32 %20 to i64, !dbg !3696
  %arrayidx26 = getelementptr inbounds i8, i8* %19, i64 %idxprom25, !dbg !3696
  %21 = load i8, i8* %arrayidx26, align 1, !dbg !3696
  %conv27 = zext i8 %21 to i32, !dbg !3696
  %tobool28 = icmp ne i32 %conv27, 0, !dbg !3696
  br i1 %tobool28, label %if.then, label %if.end, !dbg !3698

if.then:                                          ; preds = %lor.lhs.false24, %land.lhs.true19, %lor.lhs.false14, %land.lhs.true7, %land.lhs.true
  br label %for.inc106, !dbg !3699

if.end:                                           ; preds = %lor.lhs.false24, %lor.lhs.false16, %lor.lhs.false
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3700
  %cover_class29 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 9, !dbg !3700
  %23 = load i32, i32* %cover_class29, align 8, !dbg !3700
  store i32 %23, i32* %cover_class, align 4, !dbg !3701
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3702
  %mode30 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 2, !dbg !3702
  %25 = load i32, i32* %mode30, align 8, !dbg !3702
  store i32 %25, i32* %mode, align 4, !dbg !3703
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3704
  %allocno_copies = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %26, i32 0, i32 15, !dbg !3704
  %27 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %allocno_copies, align 8, !dbg !3704
  store %struct.ira_allocno_copy* %27, %struct.ira_allocno_copy** %cp, align 8, !dbg !3706
  br label %for.cond31, !dbg !3707

for.cond31:                                       ; preds = %for.inc, %if.end
  %28 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3708
  %cmp32 = icmp ne %struct.ira_allocno_copy* %28, null, !dbg !3710
  br i1 %cmp32, label %for.body34, label %for.end, !dbg !3711

for.body34:                                       ; preds = %for.cond31
  %29 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3712
  %first = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %29, i32 0, i32 1, !dbg !3715
  %30 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !3715
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3716
  %cmp35 = icmp eq %struct.ira_allocno* %30, %31, !dbg !3717
  br i1 %cmp35, label %if.then37, label %if.else, !dbg !3718

if.then37:                                        ; preds = %for.body34
  %32 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3719
  %next_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %32, i32 0, i32 7, !dbg !3721
  %33 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy, align 8, !dbg !3721
  store %struct.ira_allocno_copy* %33, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !3722
  %34 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3723
  %second = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %34, i32 0, i32 2, !dbg !3723
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !3723
  %regno38 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %35, i32 0, i32 1, !dbg !3723
  %36 = load i32, i32* %regno38, align 4, !dbg !3723
  store i32 %36, i32* %regno, align 4, !dbg !3724
  %37 = load i8, i8* %reload_p.addr, align 1, !dbg !3725
  %conv39 = zext i8 %37 to i32, !dbg !3725
  %tobool40 = icmp ne i32 %conv39, 0, !dbg !3725
  br i1 %tobool40, label %land.lhs.true51, label %lor.lhs.false41, !dbg !3727

lor.lhs.false41:                                  ; preds = %if.then37
  %38 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3728
  %second42 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %38, i32 0, i32 2, !dbg !3728
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %second42, align 8, !dbg !3728
  %cover_class43 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 9, !dbg !3728
  %40 = load i32, i32* %cover_class43, align 8, !dbg !3728
  %41 = load i32, i32* %cover_class, align 4, !dbg !3729
  %cmp44 = icmp eq i32 %40, %41, !dbg !3730
  br i1 %cmp44, label %land.lhs.true46, label %if.end98, !dbg !3731

land.lhs.true46:                                  ; preds = %lor.lhs.false41
  %42 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3732
  %second47 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %42, i32 0, i32 2, !dbg !3732
  %43 = load %struct.ira_allocno*, %struct.ira_allocno** %second47, align 8, !dbg !3732
  %mode48 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %43, i32 0, i32 2, !dbg !3732
  %44 = load i32, i32* %mode48, align 8, !dbg !3732
  %45 = load i32, i32* %mode, align 4, !dbg !3733
  %cmp49 = icmp eq i32 %44, %45, !dbg !3734
  br i1 %cmp49, label %land.lhs.true51, label %if.end98, !dbg !3735

land.lhs.true51:                                  ; preds = %land.lhs.true46, %if.then37
  %46 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3736
  %insn = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %46, i32 0, i32 5, !dbg !3737
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3737
  %cmp52 = icmp ne %struct.rtx_def* %47, null, !dbg !3738
  br i1 %cmp52, label %land.lhs.true57, label %lor.lhs.false54, !dbg !3739

lor.lhs.false54:                                  ; preds = %land.lhs.true51
  %48 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3740
  %constraint_p = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %48, i32 0, i32 4, !dbg !3741
  %49 = load i8, i8* %constraint_p, align 4, !dbg !3741
  %conv55 = zext i8 %49 to i32, !dbg !3740
  %tobool56 = icmp ne i32 %conv55, 0, !dbg !3740
  br i1 %tobool56, label %land.lhs.true57, label %if.end98, !dbg !3742

land.lhs.true57:                                  ; preds = %lor.lhs.false54, %land.lhs.true51
  %50 = load i8, i8* %reload_p.addr, align 1, !dbg !3743
  %tobool58 = icmp ne i8 %50, 0, !dbg !3743
  br i1 %tobool58, label %lor.lhs.false67, label %land.lhs.true59, !dbg !3744

land.lhs.true59:                                  ; preds = %land.lhs.true57
  %51 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3745
  %second60 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %51, i32 0, i32 2, !dbg !3745
  %52 = load %struct.ira_allocno*, %struct.ira_allocno** %second60, align 8, !dbg !3745
  %assigned_p61 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %52, i32 0, i32 31, !dbg !3745
  %bf.load62 = load i16, i16* %assigned_p61, align 4, !dbg !3745
  %bf.lshr63 = lshr i16 %bf.load62, 8, !dbg !3745
  %bf.clear64 = and i16 %bf.lshr63, 1, !dbg !3745
  %bf.cast65 = zext i16 %bf.clear64 to i32, !dbg !3745
  %tobool66 = icmp ne i32 %bf.cast65, 0, !dbg !3745
  br i1 %tobool66, label %lor.lhs.false67, label %if.then95, !dbg !3746

lor.lhs.false67:                                  ; preds = %land.lhs.true59, %land.lhs.true57
  %53 = load i8, i8* %reload_p.addr, align 1, !dbg !3747
  %conv68 = zext i8 %53 to i32, !dbg !3747
  %tobool69 = icmp ne i32 %conv68, 0, !dbg !3747
  br i1 %tobool69, label %land.lhs.true70, label %if.end98, !dbg !3748

land.lhs.true70:                                  ; preds = %lor.lhs.false67
  %54 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3749
  %second71 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %54, i32 0, i32 2, !dbg !3749
  %55 = load %struct.ira_allocno*, %struct.ira_allocno** %second71, align 8, !dbg !3749
  %assigned_p72 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %55, i32 0, i32 31, !dbg !3749
  %bf.load73 = load i16, i16* %assigned_p72, align 4, !dbg !3749
  %bf.lshr74 = lshr i16 %bf.load73, 8, !dbg !3749
  %bf.clear75 = and i16 %bf.lshr74, 1, !dbg !3749
  %bf.cast76 = zext i16 %bf.clear75 to i32, !dbg !3749
  %tobool77 = icmp ne i32 %bf.cast76, 0, !dbg !3749
  br i1 %tobool77, label %land.lhs.true78, label %if.end98, !dbg !3750

land.lhs.true78:                                  ; preds = %land.lhs.true70
  %56 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3751
  %second79 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %56, i32 0, i32 2, !dbg !3751
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %second79, align 8, !dbg !3751
  %hard_regno80 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %57, i32 0, i32 3, !dbg !3751
  %58 = load i32, i32* %hard_regno80, align 4, !dbg !3751
  %cmp81 = icmp slt i32 %58, 0, !dbg !3752
  br i1 %cmp81, label %land.lhs.true83, label %if.end98, !dbg !3753

land.lhs.true83:                                  ; preds = %land.lhs.true78
  %59 = load i32, i32* %regno, align 4, !dbg !3754
  %60 = load i32, i32* @ira_reg_equiv_len, align 4, !dbg !3755
  %cmp84 = icmp sge i32 %59, %60, !dbg !3756
  br i1 %cmp84, label %if.then95, label %lor.lhs.false86, !dbg !3757

lor.lhs.false86:                                  ; preds = %land.lhs.true83
  %61 = load i8*, i8** @ira_reg_equiv_invariant_p, align 8, !dbg !3758
  %62 = load i32, i32* %regno, align 4, !dbg !3759
  %idxprom87 = sext i32 %62 to i64, !dbg !3758
  %arrayidx88 = getelementptr inbounds i8, i8* %61, i64 %idxprom87, !dbg !3758
  %63 = load i8, i8* %arrayidx88, align 1, !dbg !3758
  %tobool89 = icmp ne i8 %63, 0, !dbg !3758
  br i1 %tobool89, label %if.end98, label %land.lhs.true90, !dbg !3760

land.lhs.true90:                                  ; preds = %lor.lhs.false86
  %64 = load %struct.rtx_def**, %struct.rtx_def*** @ira_reg_equiv_const, align 8, !dbg !3761
  %65 = load i32, i32* %regno, align 4, !dbg !3762
  %idxprom91 = sext i32 %65 to i64, !dbg !3761
  %arrayidx92 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %64, i64 %idxprom91, !dbg !3761
  %66 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx92, align 8, !dbg !3761
  %cmp93 = icmp eq %struct.rtx_def* %66, null, !dbg !3763
  br i1 %cmp93, label %if.then95, label %if.end98, !dbg !3764

if.then95:                                        ; preds = %land.lhs.true90, %land.lhs.true83, %land.lhs.true59
  %67 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3765
  %68 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** %sorted_copies, align 8, !dbg !3766
  %69 = load i32, i32* %cp_num, align 4, !dbg !3767
  %inc = add nsw i32 %69, 1, !dbg !3767
  store i32 %inc, i32* %cp_num, align 4, !dbg !3767
  %idxprom96 = sext i32 %69 to i64, !dbg !3766
  %arrayidx97 = getelementptr inbounds %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %68, i64 %idxprom96, !dbg !3766
  store %struct.ira_allocno_copy* %67, %struct.ira_allocno_copy** %arrayidx97, align 8, !dbg !3768
  br label %if.end98, !dbg !3766

if.end98:                                         ; preds = %if.then95, %land.lhs.true90, %lor.lhs.false86, %land.lhs.true78, %land.lhs.true70, %lor.lhs.false67, %lor.lhs.false54, %land.lhs.true46, %lor.lhs.false41
  br label %if.end105, !dbg !3769

if.else:                                          ; preds = %for.body34
  %70 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3770
  %second99 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %70, i32 0, i32 2, !dbg !3772
  %71 = load %struct.ira_allocno*, %struct.ira_allocno** %second99, align 8, !dbg !3772
  %72 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3773
  %cmp100 = icmp eq %struct.ira_allocno* %71, %72, !dbg !3774
  br i1 %cmp100, label %if.then102, label %if.else103, !dbg !3775

if.then102:                                       ; preds = %if.else
  %73 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3776
  %next_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %73, i32 0, i32 9, !dbg !3777
  %74 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy, align 8, !dbg !3777
  store %struct.ira_allocno_copy* %74, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !3778
  br label %if.end104, !dbg !3779

if.else103:                                       ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i32 1667, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !3780
  br label %if.end104

if.end104:                                        ; preds = %if.else103, %if.then102
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.end98
  br label %for.inc, !dbg !3781

for.inc:                                          ; preds = %if.end105
  %75 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !3782
  store %struct.ira_allocno_copy* %75, %struct.ira_allocno_copy** %cp, align 8, !dbg !3783
  br label %for.cond31, !dbg !3784, !llvm.loop !3785

for.end:                                          ; preds = %for.cond31
  br label %for.inc106, !dbg !3787

for.inc106:                                       ; preds = %for.end, %if.then
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !3668
  br label %for.cond, !dbg !3668, !llvm.loop !3788

for.end107:                                       ; preds = %for.cond
  %76 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** %sorted_copies, align 8, !dbg !3790
  %77 = bitcast %struct.ira_allocno_copy** %76 to i8*, !dbg !3790
  %78 = load i32, i32* %cp_num, align 4, !dbg !3791
  %conv108 = sext i32 %78 to i64, !dbg !3791
  call void @spec_qsort(i8* %77, i64 %conv108, i64 8, i32 (i8*, i8*)* @copy_freq_compare_func), !dbg !3792
  br label %for.cond109, !dbg !3793

for.cond109:                                      ; preds = %for.end165, %for.end107
  %79 = load i32, i32* %cp_num, align 4, !dbg !3794
  %cmp110 = icmp ne i32 %79, 0, !dbg !3797
  br i1 %cmp110, label %for.body112, label %for.end166, !dbg !3798

for.body112:                                      ; preds = %for.cond109
  store i32 0, i32* %i, align 4, !dbg !3799
  br label %for.cond113, !dbg !3802

for.cond113:                                      ; preds = %for.inc144, %for.body112
  %80 = load i32, i32* %i, align 4, !dbg !3803
  %81 = load i32, i32* %cp_num, align 4, !dbg !3805
  %cmp114 = icmp slt i32 %80, %81, !dbg !3806
  br i1 %cmp114, label %for.body116, label %for.end146, !dbg !3807

for.body116:                                      ; preds = %for.cond113
  %82 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** %sorted_copies, align 8, !dbg !3808
  %83 = load i32, i32* %i, align 4, !dbg !3810
  %idxprom117 = sext i32 %83 to i64, !dbg !3808
  %arrayidx118 = getelementptr inbounds %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %82, i64 %idxprom117, !dbg !3808
  %84 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %arrayidx118, align 8, !dbg !3808
  store %struct.ira_allocno_copy* %84, %struct.ira_allocno_copy** %cp, align 8, !dbg !3811
  %85 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3812
  %first119 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %85, i32 0, i32 1, !dbg !3814
  %86 = load %struct.ira_allocno*, %struct.ira_allocno** %first119, align 8, !dbg !3814
  %87 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3815
  %second120 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %87, i32 0, i32 2, !dbg !3816
  %88 = load %struct.ira_allocno*, %struct.ira_allocno** %second120, align 8, !dbg !3816
  %89 = load i8, i8* %reload_p.addr, align 1, !dbg !3817
  %call121 = call zeroext i8 @coalesced_allocno_conflict_p(%struct.ira_allocno* %86, %struct.ira_allocno* %88, i8 zeroext %89), !dbg !3818
  %tobool122 = icmp ne i8 %call121, 0, !dbg !3818
  br i1 %tobool122, label %if.end143, label %if.then123, !dbg !3819

if.then123:                                       ; preds = %for.body116
  store i8 1, i8* @allocno_coalesced_p, align 1, !dbg !3820
  %90 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !3822
  %cmp124 = icmp sgt i32 %90, 3, !dbg !3824
  br i1 %cmp124, label %land.lhs.true126, label %if.end139, !dbg !3825

land.lhs.true126:                                 ; preds = %if.then123
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3826
  %cmp127 = icmp ne %struct._IO_FILE* %91, null, !dbg !3827
  br i1 %cmp127, label %if.then129, label %if.end139, !dbg !3828

if.then129:                                       ; preds = %land.lhs.true126
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !3829
  %93 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3830
  %num = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %93, i32 0, i32 0, !dbg !3831
  %94 = load i32, i32* %num, align 8, !dbg !3831
  %95 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3832
  %first130 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %95, i32 0, i32 1, !dbg !3832
  %96 = load %struct.ira_allocno*, %struct.ira_allocno** %first130, align 8, !dbg !3832
  %num131 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %96, i32 0, i32 0, !dbg !3832
  %97 = load i32, i32* %num131, align 8, !dbg !3832
  %98 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3833
  %first132 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %98, i32 0, i32 1, !dbg !3833
  %99 = load %struct.ira_allocno*, %struct.ira_allocno** %first132, align 8, !dbg !3833
  %regno133 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %99, i32 0, i32 1, !dbg !3833
  %100 = load i32, i32* %regno133, align 4, !dbg !3833
  %101 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3834
  %second134 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %101, i32 0, i32 2, !dbg !3834
  %102 = load %struct.ira_allocno*, %struct.ira_allocno** %second134, align 8, !dbg !3834
  %num135 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %102, i32 0, i32 0, !dbg !3834
  %103 = load i32, i32* %num135, align 8, !dbg !3834
  %104 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3835
  %second136 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %104, i32 0, i32 2, !dbg !3835
  %105 = load %struct.ira_allocno*, %struct.ira_allocno** %second136, align 8, !dbg !3835
  %regno137 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %105, i32 0, i32 1, !dbg !3835
  %106 = load i32, i32* %regno137, align 4, !dbg !3835
  %107 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3836
  %freq = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %107, i32 0, i32 3, !dbg !3837
  %108 = load i32, i32* %freq, align 8, !dbg !3837
  %call138 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %92, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.16, i64 0, i64 0), i32 %94, i32 %97, i32 %100, i32 %103, i32 %106, i32 %108), !dbg !3838
  br label %if.end139, !dbg !3838

if.end139:                                        ; preds = %if.then129, %land.lhs.true126, %if.then123
  %109 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3839
  %first140 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %109, i32 0, i32 1, !dbg !3840
  %110 = load %struct.ira_allocno*, %struct.ira_allocno** %first140, align 8, !dbg !3840
  %111 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3841
  %second141 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %111, i32 0, i32 2, !dbg !3842
  %112 = load %struct.ira_allocno*, %struct.ira_allocno** %second141, align 8, !dbg !3842
  call void @merge_allocnos(%struct.ira_allocno* %110, %struct.ira_allocno* %112), !dbg !3843
  %113 = load i32, i32* %i, align 4, !dbg !3844
  %inc142 = add nsw i32 %113, 1, !dbg !3844
  store i32 %inc142, i32* %i, align 4, !dbg !3844
  br label %for.end146, !dbg !3845

if.end143:                                        ; preds = %for.body116
  br label %for.inc144, !dbg !3846

for.inc144:                                       ; preds = %if.end143
  %114 = load i32, i32* %i, align 4, !dbg !3847
  %inc145 = add nsw i32 %114, 1, !dbg !3847
  store i32 %inc145, i32* %i, align 4, !dbg !3847
  br label %for.cond113, !dbg !3848, !llvm.loop !3849

for.end146:                                       ; preds = %if.end139, %for.cond113
  store i32 0, i32* %n, align 4, !dbg !3851
  br label %for.cond147, !dbg !3853

for.cond147:                                      ; preds = %for.inc163, %for.end146
  %115 = load i32, i32* %i, align 4, !dbg !3854
  %116 = load i32, i32* %cp_num, align 4, !dbg !3856
  %cmp148 = icmp slt i32 %115, %116, !dbg !3857
  br i1 %cmp148, label %for.body150, label %for.end165, !dbg !3858

for.body150:                                      ; preds = %for.cond147
  %117 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** %sorted_copies, align 8, !dbg !3859
  %118 = load i32, i32* %i, align 4, !dbg !3861
  %idxprom151 = sext i32 %118 to i64, !dbg !3859
  %arrayidx152 = getelementptr inbounds %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %117, i64 %idxprom151, !dbg !3859
  %119 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %arrayidx152, align 8, !dbg !3859
  store %struct.ira_allocno_copy* %119, %struct.ira_allocno_copy** %cp, align 8, !dbg !3862
  %120 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3863
  %first153 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %120, i32 0, i32 1, !dbg !3863
  %121 = load %struct.ira_allocno*, %struct.ira_allocno** %first153, align 8, !dbg !3863
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %121, i32 0, i32 18, !dbg !3863
  %122 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !3863
  %123 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3865
  %second154 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %123, i32 0, i32 2, !dbg !3865
  %124 = load %struct.ira_allocno*, %struct.ira_allocno** %second154, align 8, !dbg !3865
  %first_coalesced_allocno155 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %124, i32 0, i32 18, !dbg !3865
  %125 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno155, align 8, !dbg !3865
  %cmp156 = icmp ne %struct.ira_allocno* %122, %125, !dbg !3866
  br i1 %cmp156, label %if.then158, label %if.end162, !dbg !3867

if.then158:                                       ; preds = %for.body150
  %126 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !3868
  %127 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** %sorted_copies, align 8, !dbg !3869
  %128 = load i32, i32* %n, align 4, !dbg !3870
  %inc159 = add nsw i32 %128, 1, !dbg !3870
  store i32 %inc159, i32* %n, align 4, !dbg !3870
  %idxprom160 = sext i32 %128 to i64, !dbg !3869
  %arrayidx161 = getelementptr inbounds %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %127, i64 %idxprom160, !dbg !3869
  store %struct.ira_allocno_copy* %126, %struct.ira_allocno_copy** %arrayidx161, align 8, !dbg !3871
  br label %if.end162, !dbg !3869

if.end162:                                        ; preds = %if.then158, %for.body150
  br label %for.inc163, !dbg !3872

for.inc163:                                       ; preds = %if.end162
  %129 = load i32, i32* %i, align 4, !dbg !3873
  %inc164 = add nsw i32 %129, 1, !dbg !3873
  store i32 %inc164, i32* %i, align 4, !dbg !3873
  br label %for.cond147, !dbg !3874, !llvm.loop !3875

for.end165:                                       ; preds = %for.cond147
  %130 = load i32, i32* %n, align 4, !dbg !3877
  store i32 %130, i32* %cp_num, align 4, !dbg !3878
  br label %for.cond109, !dbg !3879, !llvm.loop !3880

for.end166:                                       ; preds = %for.cond109
  %131 = load %struct.ira_allocno_copy**, %struct.ira_allocno_copy*** %sorted_copies, align 8, !dbg !3882
  %132 = bitcast %struct.ira_allocno_copy** %131 to i8*, !dbg !3882
  call void @ira_free(i8* %132), !dbg !3883
  ret void, !dbg !3884
}

declare dso_local i8* @ira_allocate(i64) #3

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define internal void @setup_coalesced_allocno_costs_and_nums(i32* %pseudo_regnos, i32 %n) #0 !dbg !3885 {
entry:
  %pseudo_regnos.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %num = alloca i32, align 4
  %regno = alloca i32, align 4
  %cost = alloca i32, align 4
  %allocno = alloca %struct.ira_allocno*, align 8
  %a = alloca %struct.ira_allocno*, align 8
  store i32* %pseudo_regnos, i32** %pseudo_regnos.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pseudo_regnos.addr, metadata !3888, metadata !DIExpression()), !dbg !3889
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3890, metadata !DIExpression()), !dbg !3891
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3892, metadata !DIExpression()), !dbg !3893
  call void @llvm.dbg.declare(metadata i32* %num, metadata !3894, metadata !DIExpression()), !dbg !3895
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !3896, metadata !DIExpression()), !dbg !3897
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !3898, metadata !DIExpression()), !dbg !3899
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno, metadata !3900, metadata !DIExpression()), !dbg !3901
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !3902, metadata !DIExpression()), !dbg !3903
  store i32 0, i32* %i, align 4, !dbg !3904
  store i32 0, i32* %num, align 4, !dbg !3906
  br label %for.cond, !dbg !3907

for.cond:                                         ; preds = %for.inc31, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3908
  %1 = load i32, i32* %n.addr, align 4, !dbg !3910
  %cmp = icmp slt i32 %0, %1, !dbg !3911
  br i1 %cmp, label %for.body, label %for.end33, !dbg !3912

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %pseudo_regnos.addr, align 8, !dbg !3913
  %3 = load i32, i32* %i, align 4, !dbg !3915
  %idxprom = sext i32 %3 to i64, !dbg !3913
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !3913
  %4 = load i32, i32* %arrayidx, align 4, !dbg !3913
  store i32 %4, i32* %regno, align 4, !dbg !3916
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !3917
  %6 = load i32, i32* %regno, align 4, !dbg !3918
  %idxprom1 = sext i32 %6 to i64, !dbg !3917
  %arrayidx2 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %5, i64 %idxprom1, !dbg !3917
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx2, align 8, !dbg !3917
  store %struct.ira_allocno* %7, %struct.ira_allocno** %allocno, align 8, !dbg !3919
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3920
  %cmp3 = icmp eq %struct.ira_allocno* %8, null, !dbg !3922
  br i1 %cmp3, label %if.then, label %if.end, !dbg !3923

if.then:                                          ; preds = %for.body
  %9 = load i32*, i32** @regno_coalesced_allocno_cost, align 8, !dbg !3924
  %10 = load i32, i32* %regno, align 4, !dbg !3926
  %idxprom4 = sext i32 %10 to i64, !dbg !3924
  %arrayidx5 = getelementptr inbounds i32, i32* %9, i64 %idxprom4, !dbg !3924
  store i32 0, i32* %arrayidx5, align 4, !dbg !3927
  %11 = load i32, i32* %num, align 4, !dbg !3928
  %inc = add nsw i32 %11, 1, !dbg !3928
  store i32 %inc, i32* %num, align 4, !dbg !3928
  %12 = load i32*, i32** @regno_coalesced_allocno_num, align 8, !dbg !3929
  %13 = load i32, i32* %regno, align 4, !dbg !3930
  %idxprom6 = sext i32 %13 to i64, !dbg !3929
  %arrayidx7 = getelementptr inbounds i32, i32* %12, i64 %idxprom6, !dbg !3929
  store i32 %inc, i32* %arrayidx7, align 4, !dbg !3931
  br label %for.inc31, !dbg !3932

if.end:                                           ; preds = %for.body
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3933
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 18, !dbg !3933
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !3933
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3935
  %cmp8 = icmp ne %struct.ira_allocno* %15, %16, !dbg !3936
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !3937

if.then9:                                         ; preds = %if.end
  br label %for.inc31, !dbg !3938

if.end10:                                         ; preds = %if.end
  %17 = load i32, i32* %num, align 4, !dbg !3939
  %inc11 = add nsw i32 %17, 1, !dbg !3939
  store i32 %inc11, i32* %num, align 4, !dbg !3939
  store i32 0, i32* %cost, align 4, !dbg !3940
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3942
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 19, !dbg !3942
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !3942
  store %struct.ira_allocno* %19, %struct.ira_allocno** %a, align 8, !dbg !3943
  br label %for.cond12, !dbg !3944

for.cond12:                                       ; preds = %for.inc, %if.end10
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3945
  %freq = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 8, !dbg !3945
  %21 = load i32, i32* %freq, align 4, !dbg !3945
  %22 = load i32, i32* %cost, align 4, !dbg !3948
  %add = add nsw i32 %22, %21, !dbg !3948
  store i32 %add, i32* %cost, align 4, !dbg !3948
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3949
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3951
  %cmp13 = icmp eq %struct.ira_allocno* %23, %24, !dbg !3952
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !3953

if.then14:                                        ; preds = %for.cond12
  br label %for.end, !dbg !3954

if.end15:                                         ; preds = %for.cond12
  br label %for.inc, !dbg !3955

for.inc:                                          ; preds = %if.end15
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3956
  %next_coalesced_allocno16 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 19, !dbg !3956
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno16, align 8, !dbg !3956
  store %struct.ira_allocno* %26, %struct.ira_allocno** %a, align 8, !dbg !3957
  br label %for.cond12, !dbg !3958, !llvm.loop !3959

for.end:                                          ; preds = %if.then14
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3962
  %next_coalesced_allocno17 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 19, !dbg !3962
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno17, align 8, !dbg !3962
  store %struct.ira_allocno* %28, %struct.ira_allocno** %a, align 8, !dbg !3964
  br label %for.cond18, !dbg !3965

for.cond18:                                       ; preds = %for.inc28, %for.end
  %29 = load i32, i32* %num, align 4, !dbg !3966
  %30 = load i32*, i32** @regno_coalesced_allocno_num, align 8, !dbg !3969
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3970
  %regno19 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 1, !dbg !3970
  %32 = load i32, i32* %regno19, align 4, !dbg !3970
  %idxprom20 = sext i32 %32 to i64, !dbg !3969
  %arrayidx21 = getelementptr inbounds i32, i32* %30, i64 %idxprom20, !dbg !3969
  store i32 %29, i32* %arrayidx21, align 4, !dbg !3971
  %33 = load i32, i32* %cost, align 4, !dbg !3972
  %34 = load i32*, i32** @regno_coalesced_allocno_cost, align 8, !dbg !3973
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3974
  %regno22 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %35, i32 0, i32 1, !dbg !3974
  %36 = load i32, i32* %regno22, align 4, !dbg !3974
  %idxprom23 = sext i32 %36 to i64, !dbg !3973
  %arrayidx24 = getelementptr inbounds i32, i32* %34, i64 %idxprom23, !dbg !3973
  store i32 %33, i32* %arrayidx24, align 4, !dbg !3975
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3976
  %38 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !3978
  %cmp25 = icmp eq %struct.ira_allocno* %37, %38, !dbg !3979
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !3980

if.then26:                                        ; preds = %for.cond18
  br label %for.end30, !dbg !3981

if.end27:                                         ; preds = %for.cond18
  br label %for.inc28, !dbg !3982

for.inc28:                                        ; preds = %if.end27
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !3983
  %next_coalesced_allocno29 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 19, !dbg !3983
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno29, align 8, !dbg !3983
  store %struct.ira_allocno* %40, %struct.ira_allocno** %a, align 8, !dbg !3984
  br label %for.cond18, !dbg !3985, !llvm.loop !3986

for.end30:                                        ; preds = %if.then26
  br label %for.inc31, !dbg !3989

for.inc31:                                        ; preds = %for.end30, %if.then9, %if.then
  %41 = load i32, i32* %i, align 4, !dbg !3990
  %inc32 = add nsw i32 %41, 1, !dbg !3990
  store i32 %inc32, i32* %i, align 4, !dbg !3990
  br label %for.cond, !dbg !3991, !llvm.loop !3992

for.end33:                                        ; preds = %for.cond
  ret void, !dbg !3994
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @coalesced_pseudo_reg_freq_compare(i8* %v1p, i8* %v2p) #0 !dbg !3995 {
entry:
  %retval = alloca i32, align 4
  %v1p.addr = alloca i8*, align 8
  %v2p.addr = alloca i8*, align 8
  %regno1 = alloca i32, align 4
  %regno2 = alloca i32, align 4
  %diff = alloca i32, align 4
  store i8* %v1p, i8** %v1p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v1p.addr, metadata !3996, metadata !DIExpression()), !dbg !3997
  store i8* %v2p, i8** %v2p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v2p.addr, metadata !3998, metadata !DIExpression()), !dbg !3999
  call void @llvm.dbg.declare(metadata i32* %regno1, metadata !4000, metadata !DIExpression()), !dbg !4001
  %0 = load i8*, i8** %v1p.addr, align 8, !dbg !4002
  %1 = bitcast i8* %0 to i32*, !dbg !4003
  %2 = load i32, i32* %1, align 4, !dbg !4004
  store i32 %2, i32* %regno1, align 4, !dbg !4001
  call void @llvm.dbg.declare(metadata i32* %regno2, metadata !4005, metadata !DIExpression()), !dbg !4006
  %3 = load i8*, i8** %v2p.addr, align 8, !dbg !4007
  %4 = bitcast i8* %3 to i32*, !dbg !4008
  %5 = load i32, i32* %4, align 4, !dbg !4009
  store i32 %5, i32* %regno2, align 4, !dbg !4006
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !4010, metadata !DIExpression()), !dbg !4011
  %6 = load i32*, i32** @regno_coalesced_allocno_cost, align 8, !dbg !4012
  %7 = load i32, i32* %regno2, align 4, !dbg !4014
  %idxprom = sext i32 %7 to i64, !dbg !4012
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !4012
  %8 = load i32, i32* %arrayidx, align 4, !dbg !4012
  %9 = load i32*, i32** @regno_coalesced_allocno_cost, align 8, !dbg !4015
  %10 = load i32, i32* %regno1, align 4, !dbg !4016
  %idxprom1 = sext i32 %10 to i64, !dbg !4015
  %arrayidx2 = getelementptr inbounds i32, i32* %9, i64 %idxprom1, !dbg !4015
  %11 = load i32, i32* %arrayidx2, align 4, !dbg !4015
  %sub = sub nsw i32 %8, %11, !dbg !4017
  store i32 %sub, i32* %diff, align 4, !dbg !4018
  %cmp = icmp ne i32 %sub, 0, !dbg !4019
  br i1 %cmp, label %if.then, label %if.end, !dbg !4020

if.then:                                          ; preds = %entry
  %12 = load i32, i32* %diff, align 4, !dbg !4021
  store i32 %12, i32* %retval, align 4, !dbg !4022
  br label %return, !dbg !4022

if.end:                                           ; preds = %entry
  %13 = load i32*, i32** @regno_coalesced_allocno_num, align 8, !dbg !4023
  %14 = load i32, i32* %regno1, align 4, !dbg !4025
  %idxprom3 = sext i32 %14 to i64, !dbg !4023
  %arrayidx4 = getelementptr inbounds i32, i32* %13, i64 %idxprom3, !dbg !4023
  %15 = load i32, i32* %arrayidx4, align 4, !dbg !4023
  %16 = load i32*, i32** @regno_coalesced_allocno_num, align 8, !dbg !4026
  %17 = load i32, i32* %regno2, align 4, !dbg !4027
  %idxprom5 = sext i32 %17 to i64, !dbg !4026
  %arrayidx6 = getelementptr inbounds i32, i32* %16, i64 %idxprom5, !dbg !4026
  %18 = load i32, i32* %arrayidx6, align 4, !dbg !4026
  %sub7 = sub nsw i32 %15, %18, !dbg !4028
  store i32 %sub7, i32* %diff, align 4, !dbg !4029
  %cmp8 = icmp ne i32 %sub7, 0, !dbg !4030
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !4031

if.then9:                                         ; preds = %if.end
  %19 = load i32, i32* %diff, align 4, !dbg !4032
  store i32 %19, i32* %retval, align 4, !dbg !4033
  br label %return, !dbg !4033

if.end10:                                         ; preds = %if.end
  %20 = load i32, i32* %regno1, align 4, !dbg !4034
  %21 = load i32, i32* %regno2, align 4, !dbg !4035
  %sub11 = sub nsw i32 %20, %21, !dbg !4036
  store i32 %sub11, i32* %retval, align 4, !dbg !4037
  br label %return, !dbg !4037

return:                                           ; preds = %if.end10, %if.then9, %if.then
  %22 = load i32, i32* %retval, align 4, !dbg !4038
  ret i32 %22, !dbg !4038
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @collect_spilled_coalesced_allocnos(i32* %pseudo_regnos, i32 %n, %struct.ira_allocno** %spilled_coalesced_allocnos) #0 !dbg !4039 {
entry:
  %pseudo_regnos.addr = alloca i32*, align 8
  %n.addr = alloca i32, align 4
  %spilled_coalesced_allocnos.addr = alloca %struct.ira_allocno**, align 8
  %i = alloca i32, align 4
  %num = alloca i32, align 4
  %regno = alloca i32, align 4
  %allocno = alloca %struct.ira_allocno*, align 8
  store i32* %pseudo_regnos, i32** %pseudo_regnos.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pseudo_regnos.addr, metadata !4042, metadata !DIExpression()), !dbg !4043
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4044, metadata !DIExpression()), !dbg !4045
  store %struct.ira_allocno** %spilled_coalesced_allocnos, %struct.ira_allocno*** %spilled_coalesced_allocnos.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %spilled_coalesced_allocnos.addr, metadata !4046, metadata !DIExpression()), !dbg !4047
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4048, metadata !DIExpression()), !dbg !4049
  call void @llvm.dbg.declare(metadata i32* %num, metadata !4050, metadata !DIExpression()), !dbg !4051
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !4052, metadata !DIExpression()), !dbg !4053
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno, metadata !4054, metadata !DIExpression()), !dbg !4055
  store i32 0, i32* %i, align 4, !dbg !4056
  store i32 0, i32* %num, align 4, !dbg !4058
  br label %for.cond, !dbg !4059

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4060
  %1 = load i32, i32* %n.addr, align 4, !dbg !4062
  %cmp = icmp slt i32 %0, %1, !dbg !4063
  br i1 %cmp, label %for.body, label %for.end, !dbg !4064

for.body:                                         ; preds = %for.cond
  %2 = load i32*, i32** %pseudo_regnos.addr, align 8, !dbg !4065
  %3 = load i32, i32* %i, align 4, !dbg !4067
  %idxprom = sext i32 %3 to i64, !dbg !4065
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !4065
  %4 = load i32, i32* %arrayidx, align 4, !dbg !4065
  store i32 %4, i32* %regno, align 4, !dbg !4068
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4069
  %6 = load i32, i32* %regno, align 4, !dbg !4070
  %idxprom1 = sext i32 %6 to i64, !dbg !4069
  %arrayidx2 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %5, i64 %idxprom1, !dbg !4069
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx2, align 8, !dbg !4069
  store %struct.ira_allocno* %7, %struct.ira_allocno** %allocno, align 8, !dbg !4071
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4072
  %cmp3 = icmp eq %struct.ira_allocno* %8, null, !dbg !4074
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !4075

lor.lhs.false:                                    ; preds = %for.body
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4076
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 3, !dbg !4076
  %10 = load i32, i32* %hard_regno, align 4, !dbg !4076
  %cmp4 = icmp sge i32 %10, 0, !dbg !4077
  br i1 %cmp4, label %if.then, label %lor.lhs.false5, !dbg !4078

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4079
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 18, !dbg !4079
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !4079
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4080
  %cmp6 = icmp ne %struct.ira_allocno* %12, %13, !dbg !4081
  br i1 %cmp6, label %if.then, label %if.end, !dbg !4082

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false, %for.body
  br label %for.inc, !dbg !4083

if.end:                                           ; preds = %lor.lhs.false5
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4084
  %15 = load %struct.ira_allocno**, %struct.ira_allocno*** %spilled_coalesced_allocnos.addr, align 8, !dbg !4085
  %16 = load i32, i32* %num, align 4, !dbg !4086
  %inc = add nsw i32 %16, 1, !dbg !4086
  store i32 %inc, i32* %num, align 4, !dbg !4086
  %idxprom7 = sext i32 %16 to i64, !dbg !4085
  %arrayidx8 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %15, i64 %idxprom7, !dbg !4085
  store %struct.ira_allocno* %14, %struct.ira_allocno** %arrayidx8, align 8, !dbg !4087
  br label %for.inc, !dbg !4088

for.inc:                                          ; preds = %if.end, %if.then
  %17 = load i32, i32* %i, align 4, !dbg !4089
  %inc9 = add nsw i32 %17, 1, !dbg !4089
  store i32 %inc9, i32* %i, align 4, !dbg !4089
  br label %for.cond, !dbg !4090, !llvm.loop !4091

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %num, align 4, !dbg !4093
  ret i32 %18, !dbg !4094
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @coalesce_spill_slots(%struct.ira_allocno** %spilled_coalesced_allocnos, i32 %num) #0 !dbg !4095 {
entry:
  %spilled_coalesced_allocnos.addr = alloca %struct.ira_allocno**, align 8
  %num.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %last_coalesced_allocno_num = alloca i32, align 4
  %allocno = alloca %struct.ira_allocno*, align 8
  %a = alloca %struct.ira_allocno*, align 8
  %merged_p = alloca i8, align 1
  %set_jump_crosses = alloca %struct.bitmap_head_def*, align 8
  store %struct.ira_allocno** %spilled_coalesced_allocnos, %struct.ira_allocno*** %spilled_coalesced_allocnos.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %spilled_coalesced_allocnos.addr, metadata !4098, metadata !DIExpression()), !dbg !4099
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !4100, metadata !DIExpression()), !dbg !4101
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4102, metadata !DIExpression()), !dbg !4103
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4104, metadata !DIExpression()), !dbg !4105
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4106, metadata !DIExpression()), !dbg !4107
  call void @llvm.dbg.declare(metadata i32* %last_coalesced_allocno_num, metadata !4108, metadata !DIExpression()), !dbg !4109
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno, metadata !4110, metadata !DIExpression()), !dbg !4111
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !4112, metadata !DIExpression()), !dbg !4113
  call void @llvm.dbg.declare(metadata i8* %merged_p, metadata !4114, metadata !DIExpression()), !dbg !4115
  store i8 0, i8* %merged_p, align 1, !dbg !4115
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %set_jump_crosses, metadata !4116, metadata !DIExpression()), !dbg !4117
  %call = call %struct.bitmap_head_def* @regstat_get_setjmp_crosses(), !dbg !4118
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %set_jump_crosses, align 8, !dbg !4117
  %0 = load i32, i32* @ira_allocnos_num, align 4, !dbg !4119
  %conv = sext i32 %0 to i64, !dbg !4119
  %mul = mul i64 8, %conv, !dbg !4120
  %call1 = call i8* @ira_allocate(i64 %mul), !dbg !4121
  %1 = bitcast i8* %call1 to %struct.ira_allocno_live_range**, !dbg !4122
  store %struct.ira_allocno_live_range** %1, %struct.ira_allocno_live_range*** @slot_coalesced_allocnos_live_ranges, align 8, !dbg !4123
  %2 = load %struct.ira_allocno_live_range**, %struct.ira_allocno_live_range*** @slot_coalesced_allocnos_live_ranges, align 8, !dbg !4124
  %3 = bitcast %struct.ira_allocno_live_range** %2 to i8*, !dbg !4125
  %4 = load i32, i32* @ira_allocnos_num, align 4, !dbg !4126
  %conv2 = sext i32 %4 to i64, !dbg !4126
  %mul3 = mul i64 8, %conv2, !dbg !4127
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 %mul3, i1 false), !dbg !4125
  store i32 0, i32* %last_coalesced_allocno_num, align 4, !dbg !4128
  store i32 0, i32* %i, align 4, !dbg !4129
  br label %for.cond, !dbg !4131

for.cond:                                         ; preds = %for.inc76, %entry
  %5 = load i32, i32* %i, align 4, !dbg !4132
  %6 = load i32, i32* %num.addr, align 4, !dbg !4134
  %cmp = icmp slt i32 %5, %6, !dbg !4135
  br i1 %cmp, label %for.body, label %for.end78, !dbg !4136

for.body:                                         ; preds = %for.cond
  %7 = load %struct.ira_allocno**, %struct.ira_allocno*** %spilled_coalesced_allocnos.addr, align 8, !dbg !4137
  %8 = load i32, i32* %i, align 4, !dbg !4139
  %idxprom = sext i32 %8 to i64, !dbg !4137
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %7, i64 %idxprom, !dbg !4137
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !4137
  store %struct.ira_allocno* %9, %struct.ira_allocno** %allocno, align 8, !dbg !4140
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4141
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 18, !dbg !4141
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !4141
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4143
  %cmp5 = icmp ne %struct.ira_allocno* %11, %12, !dbg !4144
  br i1 %cmp5, label %if.then, label %lor.lhs.false, !dbg !4145

lor.lhs.false:                                    ; preds = %for.body
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set_jump_crosses, align 8, !dbg !4146
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4147
  %regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 1, !dbg !4147
  %15 = load i32, i32* %regno, align 4, !dbg !4147
  %call7 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %13, i32 %15), !dbg !4148
  %tobool = icmp ne i32 %call7, 0, !dbg !4148
  br i1 %tobool, label %if.then, label %lor.lhs.false8, !dbg !4149

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4150
  %regno9 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 1, !dbg !4150
  %17 = load i32, i32* %regno9, align 4, !dbg !4150
  %18 = load i32, i32* @ira_reg_equiv_len, align 4, !dbg !4151
  %cmp10 = icmp slt i32 %17, %18, !dbg !4152
  br i1 %cmp10, label %land.lhs.true, label %if.end, !dbg !4153

land.lhs.true:                                    ; preds = %lor.lhs.false8
  %19 = load %struct.rtx_def**, %struct.rtx_def*** @ira_reg_equiv_const, align 8, !dbg !4154
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4155
  %regno12 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 1, !dbg !4155
  %21 = load i32, i32* %regno12, align 4, !dbg !4155
  %idxprom13 = sext i32 %21 to i64, !dbg !4154
  %arrayidx14 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %19, i64 %idxprom13, !dbg !4154
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx14, align 8, !dbg !4154
  %cmp15 = icmp ne %struct.rtx_def* %22, null, !dbg !4156
  br i1 %cmp15, label %if.then, label %lor.lhs.false17, !dbg !4157

lor.lhs.false17:                                  ; preds = %land.lhs.true
  %23 = load i8*, i8** @ira_reg_equiv_invariant_p, align 8, !dbg !4158
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4159
  %regno18 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 1, !dbg !4159
  %25 = load i32, i32* %regno18, align 4, !dbg !4159
  %idxprom19 = sext i32 %25 to i64, !dbg !4158
  %arrayidx20 = getelementptr inbounds i8, i8* %23, i64 %idxprom19, !dbg !4158
  %26 = load i8, i8* %arrayidx20, align 1, !dbg !4158
  %conv21 = zext i8 %26 to i32, !dbg !4158
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !4158
  br i1 %tobool22, label %if.then, label %if.end, !dbg !4160

if.then:                                          ; preds = %lor.lhs.false17, %land.lhs.true, %lor.lhs.false, %for.body
  br label %for.inc76, !dbg !4161

if.end:                                           ; preds = %lor.lhs.false17, %lor.lhs.false8
  store i32 0, i32* %j, align 4, !dbg !4162
  br label %for.cond23, !dbg !4164

for.cond23:                                       ; preds = %for.inc, %if.end
  %27 = load i32, i32* %j, align 4, !dbg !4165
  %28 = load i32, i32* %i, align 4, !dbg !4167
  %cmp24 = icmp slt i32 %27, %28, !dbg !4168
  br i1 %cmp24, label %for.body26, label %for.end, !dbg !4169

for.body26:                                       ; preds = %for.cond23
  %29 = load %struct.ira_allocno**, %struct.ira_allocno*** %spilled_coalesced_allocnos.addr, align 8, !dbg !4170
  %30 = load i32, i32* %j, align 4, !dbg !4172
  %idxprom27 = sext i32 %30 to i64, !dbg !4170
  %arrayidx28 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %29, i64 %idxprom27, !dbg !4170
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx28, align 8, !dbg !4170
  store %struct.ira_allocno* %31, %struct.ira_allocno** %a, align 8, !dbg !4173
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4174
  %temp = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %32, i32 0, i32 41, !dbg !4174
  %33 = load i32, i32* %temp, align 8, !dbg !4174
  store i32 %33, i32* %n, align 4, !dbg !4175
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4176
  %first_coalesced_allocno29 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %34, i32 0, i32 18, !dbg !4176
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno29, align 8, !dbg !4176
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4178
  %cmp30 = icmp eq %struct.ira_allocno* %35, %36, !dbg !4179
  br i1 %cmp30, label %land.lhs.true32, label %if.end55, !dbg !4180

land.lhs.true32:                                  ; preds = %for.body26
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %set_jump_crosses, align 8, !dbg !4181
  %38 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4182
  %regno33 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %38, i32 0, i32 1, !dbg !4182
  %39 = load i32, i32* %regno33, align 4, !dbg !4182
  %call34 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %37, i32 %39), !dbg !4183
  %tobool35 = icmp ne i32 %call34, 0, !dbg !4183
  br i1 %tobool35, label %if.end55, label %land.lhs.true36, !dbg !4184

land.lhs.true36:                                  ; preds = %land.lhs.true32
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4185
  %regno37 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %40, i32 0, i32 1, !dbg !4185
  %41 = load i32, i32* %regno37, align 4, !dbg !4185
  %42 = load i32, i32* @ira_reg_equiv_len, align 4, !dbg !4186
  %cmp38 = icmp sge i32 %41, %42, !dbg !4187
  br i1 %cmp38, label %land.lhs.true51, label %lor.lhs.false40, !dbg !4188

lor.lhs.false40:                                  ; preds = %land.lhs.true36
  %43 = load i8*, i8** @ira_reg_equiv_invariant_p, align 8, !dbg !4189
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4190
  %regno41 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %44, i32 0, i32 1, !dbg !4190
  %45 = load i32, i32* %regno41, align 4, !dbg !4190
  %idxprom42 = sext i32 %45 to i64, !dbg !4189
  %arrayidx43 = getelementptr inbounds i8, i8* %43, i64 %idxprom42, !dbg !4189
  %46 = load i8, i8* %arrayidx43, align 1, !dbg !4189
  %tobool44 = icmp ne i8 %46, 0, !dbg !4189
  br i1 %tobool44, label %if.end55, label %land.lhs.true45, !dbg !4191

land.lhs.true45:                                  ; preds = %lor.lhs.false40
  %47 = load %struct.rtx_def**, %struct.rtx_def*** @ira_reg_equiv_const, align 8, !dbg !4192
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4193
  %regno46 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 1, !dbg !4193
  %49 = load i32, i32* %regno46, align 4, !dbg !4193
  %idxprom47 = sext i32 %49 to i64, !dbg !4192
  %arrayidx48 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %47, i64 %idxprom47, !dbg !4192
  %50 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx48, align 8, !dbg !4192
  %cmp49 = icmp eq %struct.rtx_def* %50, null, !dbg !4194
  br i1 %cmp49, label %land.lhs.true51, label %if.end55, !dbg !4195

land.lhs.true51:                                  ; preds = %land.lhs.true45, %land.lhs.true36
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4196
  %52 = load i32, i32* %n, align 4, !dbg !4197
  %call52 = call zeroext i8 @slot_coalesced_allocno_live_ranges_intersect_p(%struct.ira_allocno* %51, i32 %52), !dbg !4198
  %tobool53 = icmp ne i8 %call52, 0, !dbg !4198
  br i1 %tobool53, label %if.end55, label %if.then54, !dbg !4199

if.then54:                                        ; preds = %land.lhs.true51
  br label %for.end, !dbg !4200

if.end55:                                         ; preds = %land.lhs.true51, %land.lhs.true45, %lor.lhs.false40, %land.lhs.true32, %for.body26
  br label %for.inc, !dbg !4201

for.inc:                                          ; preds = %if.end55
  %53 = load i32, i32* %j, align 4, !dbg !4202
  %inc = add nsw i32 %53, 1, !dbg !4202
  store i32 %inc, i32* %j, align 4, !dbg !4202
  br label %for.cond23, !dbg !4203, !llvm.loop !4204

for.end:                                          ; preds = %if.then54, %for.cond23
  %54 = load i32, i32* %j, align 4, !dbg !4206
  %55 = load i32, i32* %i, align 4, !dbg !4208
  %cmp56 = icmp sge i32 %54, %55, !dbg !4209
  br i1 %cmp56, label %if.then58, label %if.else, !dbg !4210

if.then58:                                        ; preds = %for.end
  %56 = load i32, i32* %last_coalesced_allocno_num, align 4, !dbg !4211
  %inc59 = add nsw i32 %56, 1, !dbg !4211
  store i32 %inc59, i32* %last_coalesced_allocno_num, align 4, !dbg !4211
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4213
  %temp60 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %57, i32 0, i32 41, !dbg !4213
  store i32 %56, i32* %temp60, align 8, !dbg !4214
  %58 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4215
  call void @setup_slot_coalesced_allocno_live_ranges(%struct.ira_allocno* %58), !dbg !4216
  br label %if.end75, !dbg !4217

if.else:                                          ; preds = %for.end
  store i8 1, i8* @allocno_coalesced_p, align 1, !dbg !4218
  store i8 1, i8* %merged_p, align 1, !dbg !4220
  %59 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4221
  %cmp61 = icmp sgt i32 %59, 3, !dbg !4223
  br i1 %cmp61, label %land.lhs.true63, label %if.end72, !dbg !4224

land.lhs.true63:                                  ; preds = %if.else
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4225
  %cmp64 = icmp ne %struct._IO_FILE* %60, null, !dbg !4226
  br i1 %cmp64, label %if.then66, label %if.end72, !dbg !4227

if.then66:                                        ; preds = %land.lhs.true63
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4228
  %62 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4229
  %num67 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %62, i32 0, i32 0, !dbg !4229
  %63 = load i32, i32* %num67, align 8, !dbg !4229
  %64 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4230
  %regno68 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %64, i32 0, i32 1, !dbg !4230
  %65 = load i32, i32* %regno68, align 4, !dbg !4230
  %66 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4231
  %num69 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %66, i32 0, i32 0, !dbg !4231
  %67 = load i32, i32* %num69, align 8, !dbg !4231
  %68 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4232
  %regno70 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %68, i32 0, i32 1, !dbg !4232
  %69 = load i32, i32* %regno70, align 4, !dbg !4232
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.17, i64 0, i64 0), i32 %63, i32 %65, i32 %67, i32 %69), !dbg !4233
  br label %if.end72, !dbg !4233

if.end72:                                         ; preds = %if.then66, %land.lhs.true63, %if.else
  %70 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4234
  %temp73 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %70, i32 0, i32 41, !dbg !4234
  %71 = load i32, i32* %temp73, align 8, !dbg !4234
  %72 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4235
  %temp74 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %72, i32 0, i32 41, !dbg !4235
  store i32 %71, i32* %temp74, align 8, !dbg !4236
  %73 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4237
  call void @setup_slot_coalesced_allocno_live_ranges(%struct.ira_allocno* %73), !dbg !4238
  %74 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4239
  %75 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !4240
  call void @merge_allocnos(%struct.ira_allocno* %74, %struct.ira_allocno* %75), !dbg !4241
  br label %if.end75

if.end75:                                         ; preds = %if.end72, %if.then58
  br label %for.inc76, !dbg !4242

for.inc76:                                        ; preds = %if.end75, %if.then
  %76 = load i32, i32* %i, align 4, !dbg !4243
  %inc77 = add nsw i32 %76, 1, !dbg !4243
  store i32 %inc77, i32* %i, align 4, !dbg !4243
  br label %for.cond, !dbg !4244, !llvm.loop !4245

for.end78:                                        ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !4247
  br label %for.cond79, !dbg !4249

for.cond79:                                       ; preds = %for.inc85, %for.end78
  %77 = load i32, i32* %i, align 4, !dbg !4250
  %78 = load i32, i32* @ira_allocnos_num, align 4, !dbg !4252
  %cmp80 = icmp slt i32 %77, %78, !dbg !4253
  br i1 %cmp80, label %for.body82, label %for.end87, !dbg !4254

for.body82:                                       ; preds = %for.cond79
  %79 = load %struct.ira_allocno_live_range**, %struct.ira_allocno_live_range*** @slot_coalesced_allocnos_live_ranges, align 8, !dbg !4255
  %80 = load i32, i32* %i, align 4, !dbg !4256
  %idxprom83 = sext i32 %80 to i64, !dbg !4255
  %arrayidx84 = getelementptr inbounds %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %79, i64 %idxprom83, !dbg !4255
  %81 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %arrayidx84, align 8, !dbg !4255
  call void @ira_finish_allocno_live_range_list(%struct.ira_allocno_live_range* %81), !dbg !4257
  br label %for.inc85, !dbg !4257

for.inc85:                                        ; preds = %for.body82
  %82 = load i32, i32* %i, align 4, !dbg !4258
  %inc86 = add nsw i32 %82, 1, !dbg !4258
  store i32 %inc86, i32* %i, align 4, !dbg !4258
  br label %for.cond79, !dbg !4259, !llvm.loop !4260

for.end87:                                        ; preds = %for.cond79
  %83 = load %struct.ira_allocno_live_range**, %struct.ira_allocno_live_range*** @slot_coalesced_allocnos_live_ranges, align 8, !dbg !4262
  %84 = bitcast %struct.ira_allocno_live_range** %83 to i8*, !dbg !4262
  call void @ira_free(i8* %84), !dbg !4263
  %85 = load i8, i8* %merged_p, align 1, !dbg !4264
  ret i8 %85, !dbg !4265
}

declare dso_local void @ira_free(i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @coalesced_pseudo_reg_slot_compare(i8* %v1p, i8* %v2p) #0 !dbg !4266 {
entry:
  %retval = alloca i32, align 4
  %v1p.addr = alloca i8*, align 8
  %v2p.addr = alloca i8*, align 8
  %regno1 = alloca i32, align 4
  %regno2 = alloca i32, align 4
  %a1 = alloca %struct.ira_allocno*, align 8
  %a2 = alloca %struct.ira_allocno*, align 8
  %diff = alloca i32, align 4
  %slot_num1 = alloca i32, align 4
  %slot_num2 = alloca i32, align 4
  %total_size1 = alloca i32, align 4
  %total_size2 = alloca i32, align 4
  store i8* %v1p, i8** %v1p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v1p.addr, metadata !4267, metadata !DIExpression()), !dbg !4268
  store i8* %v2p, i8** %v2p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v2p.addr, metadata !4269, metadata !DIExpression()), !dbg !4270
  call void @llvm.dbg.declare(metadata i32* %regno1, metadata !4271, metadata !DIExpression()), !dbg !4272
  %0 = load i8*, i8** %v1p.addr, align 8, !dbg !4273
  %1 = bitcast i8* %0 to i32*, !dbg !4274
  %2 = load i32, i32* %1, align 4, !dbg !4275
  store i32 %2, i32* %regno1, align 4, !dbg !4272
  call void @llvm.dbg.declare(metadata i32* %regno2, metadata !4276, metadata !DIExpression()), !dbg !4277
  %3 = load i8*, i8** %v2p.addr, align 8, !dbg !4278
  %4 = bitcast i8* %3 to i32*, !dbg !4279
  %5 = load i32, i32* %4, align 4, !dbg !4280
  store i32 %5, i32* %regno2, align 4, !dbg !4277
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1, metadata !4281, metadata !DIExpression()), !dbg !4282
  %6 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4283
  %7 = load i32, i32* %regno1, align 4, !dbg !4284
  %idxprom = sext i32 %7 to i64, !dbg !4283
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %6, i64 %idxprom, !dbg !4283
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !4283
  store %struct.ira_allocno* %8, %struct.ira_allocno** %a1, align 8, !dbg !4282
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2, metadata !4285, metadata !DIExpression()), !dbg !4286
  %9 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4287
  %10 = load i32, i32* %regno2, align 4, !dbg !4288
  %idxprom1 = sext i32 %10 to i64, !dbg !4287
  %arrayidx2 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %9, i64 %idxprom1, !dbg !4287
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx2, align 8, !dbg !4287
  store %struct.ira_allocno* %11, %struct.ira_allocno** %a2, align 8, !dbg !4286
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !4289, metadata !DIExpression()), !dbg !4290
  call void @llvm.dbg.declare(metadata i32* %slot_num1, metadata !4291, metadata !DIExpression()), !dbg !4292
  call void @llvm.dbg.declare(metadata i32* %slot_num2, metadata !4293, metadata !DIExpression()), !dbg !4294
  call void @llvm.dbg.declare(metadata i32* %total_size1, metadata !4295, metadata !DIExpression()), !dbg !4296
  call void @llvm.dbg.declare(metadata i32* %total_size2, metadata !4297, metadata !DIExpression()), !dbg !4298
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !4299
  %cmp = icmp eq %struct.ira_allocno* %12, null, !dbg !4301
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4302

lor.lhs.false:                                    ; preds = %entry
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !4303
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 3, !dbg !4303
  %14 = load i32, i32* %hard_regno, align 4, !dbg !4303
  %cmp3 = icmp sge i32 %14, 0, !dbg !4304
  br i1 %cmp3, label %if.then, label %if.else, !dbg !4305

if.then:                                          ; preds = %lor.lhs.false, %entry
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !4306
  %cmp4 = icmp eq %struct.ira_allocno* %15, null, !dbg !4309
  br i1 %cmp4, label %if.then8, label %lor.lhs.false5, !dbg !4310

lor.lhs.false5:                                   ; preds = %if.then
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !4311
  %hard_regno6 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 3, !dbg !4311
  %17 = load i32, i32* %hard_regno6, align 4, !dbg !4311
  %cmp7 = icmp sge i32 %17, 0, !dbg !4312
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !4313

if.then8:                                         ; preds = %lor.lhs.false5, %if.then
  %18 = load i32, i32* %regno1, align 4, !dbg !4314
  %19 = load i32, i32* %regno2, align 4, !dbg !4315
  %sub = sub nsw i32 %18, %19, !dbg !4316
  store i32 %sub, i32* %retval, align 4, !dbg !4317
  br label %return, !dbg !4317

if.end:                                           ; preds = %lor.lhs.false5
  store i32 1, i32* %retval, align 4, !dbg !4318
  br label %return, !dbg !4318

if.else:                                          ; preds = %lor.lhs.false
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !4319
  %cmp9 = icmp eq %struct.ira_allocno* %20, null, !dbg !4321
  br i1 %cmp9, label %if.then13, label %lor.lhs.false10, !dbg !4322

lor.lhs.false10:                                  ; preds = %if.else
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !4323
  %hard_regno11 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 3, !dbg !4323
  %22 = load i32, i32* %hard_regno11, align 4, !dbg !4323
  %cmp12 = icmp sge i32 %22, 0, !dbg !4324
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !4325

if.then13:                                        ; preds = %lor.lhs.false10, %if.else
  store i32 -1, i32* %retval, align 4, !dbg !4326
  br label %return, !dbg !4326

if.end14:                                         ; preds = %lor.lhs.false10
  br label %if.end15

if.end15:                                         ; preds = %if.end14
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !4327
  %hard_regno16 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 3, !dbg !4327
  %24 = load i32, i32* %hard_regno16, align 4, !dbg !4327
  %sub17 = sub nsw i32 0, %24, !dbg !4328
  store i32 %sub17, i32* %slot_num1, align 4, !dbg !4329
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !4330
  %hard_regno18 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 3, !dbg !4330
  %26 = load i32, i32* %hard_regno18, align 4, !dbg !4330
  %sub19 = sub nsw i32 0, %26, !dbg !4331
  store i32 %sub19, i32* %slot_num2, align 4, !dbg !4332
  %27 = load i32, i32* %slot_num1, align 4, !dbg !4333
  %28 = load i32, i32* %slot_num2, align 4, !dbg !4335
  %sub20 = sub nsw i32 %27, %28, !dbg !4336
  store i32 %sub20, i32* %diff, align 4, !dbg !4337
  %cmp21 = icmp ne i32 %sub20, 0, !dbg !4338
  br i1 %cmp21, label %if.then22, label %if.end24, !dbg !4339

if.then22:                                        ; preds = %if.end15
  %29 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 41), align 1, !dbg !4340
  %conv = zext i8 %29 to i32, !dbg !4340
  %tobool = icmp ne i32 %conv, 0, !dbg !4340
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4340

cond.true:                                        ; preds = %if.then22
  %30 = load i32, i32* %diff, align 4, !dbg !4341
  br label %cond.end, !dbg !4340

cond.false:                                       ; preds = %if.then22
  %31 = load i32, i32* %diff, align 4, !dbg !4342
  %sub23 = sub nsw i32 0, %31, !dbg !4343
  br label %cond.end, !dbg !4340

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %30, %cond.true ], [ %sub23, %cond.false ], !dbg !4340
  store i32 %cond, i32* %retval, align 4, !dbg !4344
  br label %return, !dbg !4344

if.end24:                                         ; preds = %if.end15
  %32 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !4345
  %33 = load i32, i32* %regno1, align 4, !dbg !4345
  %idxprom25 = sext i32 %33 to i64, !dbg !4345
  %arrayidx26 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %32, i64 %idxprom25, !dbg !4345
  %34 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8, !dbg !4345
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !4345
  %bf.load = load i32, i32* %35, align 8, !dbg !4345
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4345
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4345
  %idxprom27 = zext i32 %bf.clear to i64, !dbg !4345
  %arrayidx28 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom27, !dbg !4345
  %36 = load i8, i8* %arrayidx28, align 1, !dbg !4345
  %conv29 = zext i8 %36 to i16, !dbg !4345
  %conv30 = zext i16 %conv29 to i32, !dbg !4345
  %37 = load i32*, i32** @regno_max_ref_width, align 8, !dbg !4345
  %38 = load i32, i32* %regno1, align 4, !dbg !4345
  %idxprom31 = sext i32 %38 to i64, !dbg !4345
  %arrayidx32 = getelementptr inbounds i32, i32* %37, i64 %idxprom31, !dbg !4345
  %39 = load i32, i32* %arrayidx32, align 4, !dbg !4345
  %cmp33 = icmp ugt i32 %conv30, %39, !dbg !4345
  br i1 %cmp33, label %cond.true35, label %cond.false45, !dbg !4345

cond.true35:                                      ; preds = %if.end24
  %40 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !4345
  %41 = load i32, i32* %regno1, align 4, !dbg !4345
  %idxprom36 = sext i32 %41 to i64, !dbg !4345
  %arrayidx37 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %40, i64 %idxprom36, !dbg !4345
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx37, align 8, !dbg !4345
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !4345
  %bf.load38 = load i32, i32* %43, align 8, !dbg !4345
  %bf.lshr39 = lshr i32 %bf.load38, 16, !dbg !4345
  %bf.clear40 = and i32 %bf.lshr39, 255, !dbg !4345
  %idxprom41 = zext i32 %bf.clear40 to i64, !dbg !4345
  %arrayidx42 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom41, !dbg !4345
  %44 = load i8, i8* %arrayidx42, align 1, !dbg !4345
  %conv43 = zext i8 %44 to i16, !dbg !4345
  %conv44 = zext i16 %conv43 to i32, !dbg !4345
  br label %cond.end48, !dbg !4345

cond.false45:                                     ; preds = %if.end24
  %45 = load i32*, i32** @regno_max_ref_width, align 8, !dbg !4345
  %46 = load i32, i32* %regno1, align 4, !dbg !4345
  %idxprom46 = sext i32 %46 to i64, !dbg !4345
  %arrayidx47 = getelementptr inbounds i32, i32* %45, i64 %idxprom46, !dbg !4345
  %47 = load i32, i32* %arrayidx47, align 4, !dbg !4345
  br label %cond.end48, !dbg !4345

cond.end48:                                       ; preds = %cond.false45, %cond.true35
  %cond49 = phi i32 [ %conv44, %cond.true35 ], [ %47, %cond.false45 ], !dbg !4345
  store i32 %cond49, i32* %total_size1, align 4, !dbg !4346
  %48 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !4347
  %49 = load i32, i32* %regno2, align 4, !dbg !4347
  %idxprom50 = sext i32 %49 to i64, !dbg !4347
  %arrayidx51 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %48, i64 %idxprom50, !dbg !4347
  %50 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx51, align 8, !dbg !4347
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !4347
  %bf.load52 = load i32, i32* %51, align 8, !dbg !4347
  %bf.lshr53 = lshr i32 %bf.load52, 16, !dbg !4347
  %bf.clear54 = and i32 %bf.lshr53, 255, !dbg !4347
  %idxprom55 = zext i32 %bf.clear54 to i64, !dbg !4347
  %arrayidx56 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom55, !dbg !4347
  %52 = load i8, i8* %arrayidx56, align 1, !dbg !4347
  %conv57 = zext i8 %52 to i16, !dbg !4347
  %conv58 = zext i16 %conv57 to i32, !dbg !4347
  %53 = load i32*, i32** @regno_max_ref_width, align 8, !dbg !4347
  %54 = load i32, i32* %regno2, align 4, !dbg !4347
  %idxprom59 = sext i32 %54 to i64, !dbg !4347
  %arrayidx60 = getelementptr inbounds i32, i32* %53, i64 %idxprom59, !dbg !4347
  %55 = load i32, i32* %arrayidx60, align 4, !dbg !4347
  %cmp61 = icmp ugt i32 %conv58, %55, !dbg !4347
  br i1 %cmp61, label %cond.true63, label %cond.false73, !dbg !4347

cond.true63:                                      ; preds = %cond.end48
  %56 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !4347
  %57 = load i32, i32* %regno2, align 4, !dbg !4347
  %idxprom64 = sext i32 %57 to i64, !dbg !4347
  %arrayidx65 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %56, i64 %idxprom64, !dbg !4347
  %58 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx65, align 8, !dbg !4347
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !4347
  %bf.load66 = load i32, i32* %59, align 8, !dbg !4347
  %bf.lshr67 = lshr i32 %bf.load66, 16, !dbg !4347
  %bf.clear68 = and i32 %bf.lshr67, 255, !dbg !4347
  %idxprom69 = zext i32 %bf.clear68 to i64, !dbg !4347
  %arrayidx70 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom69, !dbg !4347
  %60 = load i8, i8* %arrayidx70, align 1, !dbg !4347
  %conv71 = zext i8 %60 to i16, !dbg !4347
  %conv72 = zext i16 %conv71 to i32, !dbg !4347
  br label %cond.end76, !dbg !4347

cond.false73:                                     ; preds = %cond.end48
  %61 = load i32*, i32** @regno_max_ref_width, align 8, !dbg !4347
  %62 = load i32, i32* %regno2, align 4, !dbg !4347
  %idxprom74 = sext i32 %62 to i64, !dbg !4347
  %arrayidx75 = getelementptr inbounds i32, i32* %61, i64 %idxprom74, !dbg !4347
  %63 = load i32, i32* %arrayidx75, align 4, !dbg !4347
  br label %cond.end76, !dbg !4347

cond.end76:                                       ; preds = %cond.false73, %cond.true63
  %cond77 = phi i32 [ %conv72, %cond.true63 ], [ %63, %cond.false73 ], !dbg !4347
  store i32 %cond77, i32* %total_size2, align 4, !dbg !4348
  %64 = load i32, i32* %total_size2, align 4, !dbg !4349
  %65 = load i32, i32* %total_size1, align 4, !dbg !4351
  %sub78 = sub nsw i32 %64, %65, !dbg !4352
  store i32 %sub78, i32* %diff, align 4, !dbg !4353
  %cmp79 = icmp ne i32 %sub78, 0, !dbg !4354
  br i1 %cmp79, label %if.then81, label %if.end82, !dbg !4355

if.then81:                                        ; preds = %cond.end76
  %66 = load i32, i32* %diff, align 4, !dbg !4356
  store i32 %66, i32* %retval, align 4, !dbg !4357
  br label %return, !dbg !4357

if.end82:                                         ; preds = %cond.end76
  %67 = load i32, i32* %regno1, align 4, !dbg !4358
  %68 = load i32, i32* %regno2, align 4, !dbg !4359
  %sub83 = sub nsw i32 %67, %68, !dbg !4360
  store i32 %sub83, i32* %retval, align 4, !dbg !4361
  br label %return, !dbg !4361

return:                                           ; preds = %if.end82, %if.then81, %cond.end, %if.then13, %if.end, %if.then8
  %69 = load i32, i32* %retval, align 4, !dbg !4362
  ret i32 %69, !dbg !4362
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_mark_allocation_change(i32 %regno) #0 !dbg !4363 {
entry:
  %regno.addr = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %old_hard_regno = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %cost = alloca i32, align 4
  %cover_class = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !4364, metadata !DIExpression()), !dbg !4365
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !4366, metadata !DIExpression()), !dbg !4367
  %0 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4368
  %1 = load i32, i32* %regno.addr, align 4, !dbg !4369
  %idxprom = sext i32 %1 to i64, !dbg !4368
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %0, i64 %idxprom, !dbg !4368
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !4368
  store %struct.ira_allocno* %2, %struct.ira_allocno** %a, align 8, !dbg !4367
  call void @llvm.dbg.declare(metadata i32* %old_hard_regno, metadata !4370, metadata !DIExpression()), !dbg !4371
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !4372, metadata !DIExpression()), !dbg !4373
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !4374, metadata !DIExpression()), !dbg !4375
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !4376, metadata !DIExpression()), !dbg !4377
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4378
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 9, !dbg !4378
  %4 = load i32, i32* %cover_class1, align 8, !dbg !4378
  store i32 %4, i32* %cover_class, align 4, !dbg !4377
  %5 = load i16*, i16** @reg_renumber, align 8, !dbg !4379
  %6 = load i32, i32* %regno.addr, align 4, !dbg !4380
  %idxprom2 = sext i32 %6 to i64, !dbg !4379
  %arrayidx3 = getelementptr inbounds i16, i16* %5, i64 %idxprom2, !dbg !4379
  %7 = load i16, i16* %arrayidx3, align 2, !dbg !4379
  %conv = sext i16 %7 to i32, !dbg !4379
  store i32 %conv, i32* %hard_regno, align 4, !dbg !4381
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4382
  %hard_regno4 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 3, !dbg !4382
  %9 = load i32, i32* %hard_regno4, align 4, !dbg !4382
  store i32 %9, i32* %old_hard_regno, align 4, !dbg !4384
  %10 = load i32, i32* %hard_regno, align 4, !dbg !4385
  %cmp = icmp eq i32 %9, %10, !dbg !4386
  br i1 %cmp, label %if.then, label %if.end, !dbg !4387

if.then:                                          ; preds = %entry
  br label %return, !dbg !4388

if.end:                                           ; preds = %entry
  %11 = load i32, i32* %old_hard_regno, align 4, !dbg !4389
  %cmp6 = icmp slt i32 %11, 0, !dbg !4391
  br i1 %cmp6, label %if.then8, label %if.else, !dbg !4392

if.then8:                                         ; preds = %if.end
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4393
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 12, !dbg !4393
  %13 = load i32, i32* %memory_cost, align 4, !dbg !4393
  %sub = sub nsw i32 0, %13, !dbg !4394
  store i32 %sub, i32* %cost, align 4, !dbg !4395
  br label %if.end19, !dbg !4396

if.else:                                          ; preds = %if.end
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4397
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 33, !dbg !4397
  %15 = load i32*, i32** %hard_reg_costs, align 8, !dbg !4397
  %cmp9 = icmp eq i32* %15, null, !dbg !4399
  br i1 %cmp9, label %cond.true, label %cond.false, !dbg !4397

cond.true:                                        ; preds = %if.else
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4400
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 10, !dbg !4400
  %17 = load i32, i32* %cover_class_cost, align 4, !dbg !4400
  br label %cond.end, !dbg !4397

cond.false:                                       ; preds = %if.else
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4401
  %hard_reg_costs11 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 33, !dbg !4401
  %19 = load i32*, i32** %hard_reg_costs11, align 8, !dbg !4401
  %20 = load i32, i32* %cover_class, align 4, !dbg !4402
  %idxprom12 = zext i32 %20 to i64, !dbg !4403
  %arrayidx13 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom12, !dbg !4403
  %21 = load i32, i32* %old_hard_regno, align 4, !dbg !4404
  %idxprom14 = sext i32 %21 to i64, !dbg !4403
  %arrayidx15 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx13, i64 0, i64 %idxprom14, !dbg !4403
  %22 = load i16, i16* %arrayidx15, align 2, !dbg !4403
  %idxprom16 = sext i16 %22 to i64, !dbg !4401
  %arrayidx17 = getelementptr inbounds i32, i32* %19, i64 %idxprom16, !dbg !4401
  %23 = load i32, i32* %arrayidx17, align 4, !dbg !4401
  br label %cond.end, !dbg !4397

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %17, %cond.true ], [ %23, %cond.false ], !dbg !4397
  %sub18 = sub nsw i32 0, %cond, !dbg !4405
  store i32 %sub18, i32* %cost, align 4, !dbg !4406
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4407
  call void @update_copy_costs(%struct.ira_allocno* %24, i8 zeroext 0), !dbg !4408
  br label %if.end19

if.end19:                                         ; preds = %cond.end, %if.then8
  %25 = load i32, i32* %cost, align 4, !dbg !4409
  %26 = load i32, i32* @ira_overall_cost, align 4, !dbg !4410
  %sub20 = sub nsw i32 %26, %25, !dbg !4410
  store i32 %sub20, i32* @ira_overall_cost, align 4, !dbg !4410
  %27 = load i32, i32* %hard_regno, align 4, !dbg !4411
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4412
  %hard_regno21 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %28, i32 0, i32 3, !dbg !4412
  store i32 %27, i32* %hard_regno21, align 4, !dbg !4413
  %29 = load i32, i32* %hard_regno, align 4, !dbg !4414
  %cmp22 = icmp slt i32 %29, 0, !dbg !4416
  br i1 %cmp22, label %if.then24, label %if.else27, !dbg !4417

if.then24:                                        ; preds = %if.end19
  %30 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4418
  %hard_regno25 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %30, i32 0, i32 3, !dbg !4418
  store i32 -1, i32* %hard_regno25, align 4, !dbg !4420
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4421
  %memory_cost26 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 12, !dbg !4421
  %32 = load i32, i32* %memory_cost26, align 4, !dbg !4421
  %33 = load i32, i32* %cost, align 4, !dbg !4422
  %add = add nsw i32 %33, %32, !dbg !4422
  store i32 %add, i32* %cost, align 4, !dbg !4422
  br label %if.end54, !dbg !4423

if.else27:                                        ; preds = %if.end19
  %34 = load i32, i32* %cover_class, align 4, !dbg !4424
  %idxprom28 = zext i32 %34 to i64, !dbg !4426
  %arrayidx29 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom28, !dbg !4426
  %35 = load i32, i32* %hard_regno, align 4, !dbg !4427
  %idxprom30 = sext i32 %35 to i64, !dbg !4426
  %arrayidx31 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx29, i64 0, i64 %idxprom30, !dbg !4426
  %36 = load i16, i16* %arrayidx31, align 2, !dbg !4426
  %conv32 = sext i16 %36 to i32, !dbg !4426
  %cmp33 = icmp sge i32 %conv32, 0, !dbg !4428
  br i1 %cmp33, label %if.then35, label %if.else52, !dbg !4429

if.then35:                                        ; preds = %if.else27
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4430
  %hard_reg_costs36 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %37, i32 0, i32 33, !dbg !4430
  %38 = load i32*, i32** %hard_reg_costs36, align 8, !dbg !4430
  %cmp37 = icmp eq i32* %38, null, !dbg !4432
  br i1 %cmp37, label %cond.true39, label %cond.false41, !dbg !4430

cond.true39:                                      ; preds = %if.then35
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4433
  %cover_class_cost40 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 10, !dbg !4433
  %40 = load i32, i32* %cover_class_cost40, align 4, !dbg !4433
  br label %cond.end49, !dbg !4430

cond.false41:                                     ; preds = %if.then35
  %41 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4434
  %hard_reg_costs42 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %41, i32 0, i32 33, !dbg !4434
  %42 = load i32*, i32** %hard_reg_costs42, align 8, !dbg !4434
  %43 = load i32, i32* %cover_class, align 4, !dbg !4435
  %idxprom43 = zext i32 %43 to i64, !dbg !4436
  %arrayidx44 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom43, !dbg !4436
  %44 = load i32, i32* %hard_regno, align 4, !dbg !4437
  %idxprom45 = sext i32 %44 to i64, !dbg !4436
  %arrayidx46 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx44, i64 0, i64 %idxprom45, !dbg !4436
  %45 = load i16, i16* %arrayidx46, align 2, !dbg !4436
  %idxprom47 = sext i16 %45 to i64, !dbg !4434
  %arrayidx48 = getelementptr inbounds i32, i32* %42, i64 %idxprom47, !dbg !4434
  %46 = load i32, i32* %arrayidx48, align 4, !dbg !4434
  br label %cond.end49, !dbg !4430

cond.end49:                                       ; preds = %cond.false41, %cond.true39
  %cond50 = phi i32 [ %40, %cond.true39 ], [ %46, %cond.false41 ], !dbg !4430
  %47 = load i32, i32* %cost, align 4, !dbg !4438
  %add51 = add nsw i32 %47, %cond50, !dbg !4438
  store i32 %add51, i32* %cost, align 4, !dbg !4438
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4439
  call void @update_copy_costs(%struct.ira_allocno* %48, i8 zeroext 1), !dbg !4440
  br label %if.end53, !dbg !4441

if.else52:                                        ; preds = %if.else27
  store i32 0, i32* %cost, align 4, !dbg !4442
  br label %if.end53

if.end53:                                         ; preds = %if.else52, %cond.end49
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then24
  %49 = load i32, i32* %cost, align 4, !dbg !4443
  %50 = load i32, i32* @ira_overall_cost, align 4, !dbg !4444
  %add55 = add nsw i32 %50, %49, !dbg !4444
  store i32 %add55, i32* @ira_overall_cost, align 4, !dbg !4444
  br label %return, !dbg !4445

return:                                           ; preds = %if.end54, %if.then
  ret void, !dbg !4445
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_copy_costs(%struct.ira_allocno* %allocno, i8 zeroext %decr_p) #0 !dbg !4446 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %decr_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %cost = alloca i32, align 4
  %update_cost = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %divisor = alloca i32, align 4
  %mode = alloca i32, align 4
  %rclass = alloca i32, align 4
  %cover_class = alloca i32, align 4
  %another_allocno = alloca %struct.ira_allocno*, align 8
  %cp = alloca %struct.ira_allocno_copy*, align 8
  %next_cp = alloca %struct.ira_allocno_copy*, align 8
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !4449, metadata !DIExpression()), !dbg !4450
  store i8 %decr_p, i8* %decr_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %decr_p.addr, metadata !4451, metadata !DIExpression()), !dbg !4452
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4453, metadata !DIExpression()), !dbg !4454
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !4455, metadata !DIExpression()), !dbg !4456
  call void @llvm.dbg.declare(metadata i32* %update_cost, metadata !4457, metadata !DIExpression()), !dbg !4458
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !4459, metadata !DIExpression()), !dbg !4460
  call void @llvm.dbg.declare(metadata i32* %divisor, metadata !4461, metadata !DIExpression()), !dbg !4462
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !4463, metadata !DIExpression()), !dbg !4464
  call void @llvm.dbg.declare(metadata i32* %rclass, metadata !4465, metadata !DIExpression()), !dbg !4466
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !4467, metadata !DIExpression()), !dbg !4468
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %another_allocno, metadata !4469, metadata !DIExpression()), !dbg !4470
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !4471, metadata !DIExpression()), !dbg !4472
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %next_cp, metadata !4473, metadata !DIExpression()), !dbg !4474
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !4475
  %hard_regno1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 3, !dbg !4475
  %1 = load i32, i32* %hard_regno1, align 4, !dbg !4475
  store i32 %1, i32* %hard_regno, align 4, !dbg !4476
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !4477
  %cover_class2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 9, !dbg !4477
  %3 = load i32, i32* %cover_class2, align 8, !dbg !4477
  store i32 %3, i32* %cover_class, align 4, !dbg !4478
  %4 = load i32, i32* %cover_class, align 4, !dbg !4479
  %cmp = icmp eq i32 %4, 0, !dbg !4481
  br i1 %cmp, label %if.then, label %if.end, !dbg !4482

if.then:                                          ; preds = %entry
  br label %do.end, !dbg !4483

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %cover_class, align 4, !dbg !4484
  %idxprom = zext i32 %5 to i64, !dbg !4485
  %arrayidx = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom, !dbg !4485
  %6 = load i32, i32* %hard_regno, align 4, !dbg !4486
  %idxprom3 = sext i32 %6 to i64, !dbg !4485
  %arrayidx4 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx, i64 0, i64 %idxprom3, !dbg !4485
  %7 = load i16, i16* %arrayidx4, align 2, !dbg !4485
  %conv = sext i16 %7 to i32, !dbg !4485
  store i32 %conv, i32* %i, align 4, !dbg !4487
  %8 = load i32, i32* %hard_regno, align 4, !dbg !4488
  %idxprom5 = sext i32 %8 to i64, !dbg !4488
  %arrayidx6 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom5, !dbg !4488
  %9 = load i32, i32* %arrayidx6, align 4, !dbg !4488
  store i32 %9, i32* %rclass, align 4, !dbg !4489
  call void @start_update_cost(), !dbg !4490
  store i32 1, i32* %divisor, align 4, !dbg !4491
  br label %do.body, !dbg !4492

do.body:                                          ; preds = %do.cond, %if.end
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !4493
  %mode7 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 2, !dbg !4493
  %11 = load i32, i32* %mode7, align 8, !dbg !4493
  store i32 %11, i32* %mode, align 4, !dbg !4495
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !4496
  %allocno_copies = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 15, !dbg !4496
  %13 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %allocno_copies, align 8, !dbg !4496
  store %struct.ira_allocno_copy* %13, %struct.ira_allocno_copy** %cp, align 8, !dbg !4498
  br label %for.cond, !dbg !4499

for.cond:                                         ; preds = %for.inc, %do.body
  %14 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4500
  %cmp8 = icmp ne %struct.ira_allocno_copy* %14, null, !dbg !4502
  br i1 %cmp8, label %for.body, label %for.end, !dbg !4503

for.body:                                         ; preds = %for.cond
  %15 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4504
  %first = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %15, i32 0, i32 1, !dbg !4507
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !4507
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !4508
  %cmp10 = icmp eq %struct.ira_allocno* %16, %17, !dbg !4509
  br i1 %cmp10, label %if.then12, label %if.else, !dbg !4510

if.then12:                                        ; preds = %for.body
  %18 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4511
  %next_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %18, i32 0, i32 7, !dbg !4513
  %19 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy, align 8, !dbg !4513
  store %struct.ira_allocno_copy* %19, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !4514
  %20 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4515
  %second = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %20, i32 0, i32 2, !dbg !4516
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !4516
  store %struct.ira_allocno* %21, %struct.ira_allocno** %another_allocno, align 8, !dbg !4517
  br label %if.end20, !dbg !4518

if.else:                                          ; preds = %for.body
  %22 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4519
  %second13 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %22, i32 0, i32 2, !dbg !4521
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %second13, align 8, !dbg !4521
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !4522
  %cmp14 = icmp eq %struct.ira_allocno* %23, %24, !dbg !4523
  br i1 %cmp14, label %if.then16, label %if.else18, !dbg !4524

if.then16:                                        ; preds = %if.else
  %25 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4525
  %next_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %25, i32 0, i32 9, !dbg !4527
  %26 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy, align 8, !dbg !4527
  store %struct.ira_allocno_copy* %26, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !4528
  %27 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4529
  %first17 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %27, i32 0, i32 1, !dbg !4530
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %first17, align 8, !dbg !4530
  store %struct.ira_allocno* %28, %struct.ira_allocno** %another_allocno, align 8, !dbg !4531
  br label %if.end19, !dbg !4532

if.else18:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i32 280, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !4533
  br label %if.end19

if.end19:                                         ; preds = %if.else18, %if.then16
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.then12
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !4534
  %cover_class21 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %29, i32 0, i32 9, !dbg !4534
  %30 = load i32, i32* %cover_class21, align 8, !dbg !4534
  store i32 %30, i32* %cover_class, align 4, !dbg !4535
  %31 = load i32, i32* %rclass, align 4, !dbg !4536
  %idxprom22 = zext i32 %31 to i64, !dbg !4538
  %arrayidx23 = getelementptr inbounds [27 x [27 x i8]], [27 x [27 x i8]]* @ira_reg_classes_intersect_p, i64 0, i64 %idxprom22, !dbg !4538
  %32 = load i32, i32* %cover_class, align 4, !dbg !4539
  %idxprom24 = zext i32 %32 to i64, !dbg !4538
  %arrayidx25 = getelementptr inbounds [27 x i8], [27 x i8]* %arrayidx23, i64 0, i64 %idxprom24, !dbg !4538
  %33 = load i8, i8* %arrayidx25, align 1, !dbg !4538
  %tobool = icmp ne i8 %33, 0, !dbg !4538
  br i1 %tobool, label %lor.lhs.false, label %if.then27, !dbg !4540

lor.lhs.false:                                    ; preds = %if.end20
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !4541
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %34, i32 0, i32 31, !dbg !4541
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !4541
  %bf.lshr = lshr i16 %bf.load, 8, !dbg !4541
  %bf.clear = and i16 %bf.lshr, 1, !dbg !4541
  %bf.cast = zext i16 %bf.clear to i32, !dbg !4541
  %tobool26 = icmp ne i32 %bf.cast, 0, !dbg !4541
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !4542

if.then27:                                        ; preds = %lor.lhs.false, %if.end20
  br label %for.inc, !dbg !4543

if.end28:                                         ; preds = %lor.lhs.false
  %35 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4544
  %second29 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %35, i32 0, i32 2, !dbg !4545
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %second29, align 8, !dbg !4545
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !4546
  %cmp30 = icmp eq %struct.ira_allocno* %36, %37, !dbg !4547
  br i1 %cmp30, label %cond.true, label %cond.false, !dbg !4544

cond.true:                                        ; preds = %if.end28
  %38 = load i32, i32* %mode, align 4, !dbg !4548
  %39 = load i32, i32* %rclass, align 4, !dbg !4549
  %40 = load i32, i32* %cover_class, align 4, !dbg !4550
  %call = call i32 @ira_get_register_move_cost(i32 %38, i32 %39, i32 %40), !dbg !4551
  br label %cond.end, !dbg !4544

cond.false:                                       ; preds = %if.end28
  %41 = load i32, i32* %mode, align 4, !dbg !4552
  %42 = load i32, i32* %cover_class, align 4, !dbg !4553
  %43 = load i32, i32* %rclass, align 4, !dbg !4554
  %call32 = call i32 @ira_get_register_move_cost(i32 %41, i32 %42, i32 %43), !dbg !4555
  br label %cond.end, !dbg !4544

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %call32, %cond.false ], !dbg !4544
  store i32 %cond, i32* %cost, align 4, !dbg !4556
  %44 = load i8, i8* %decr_p.addr, align 1, !dbg !4557
  %tobool33 = icmp ne i8 %44, 0, !dbg !4557
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !4559

if.then34:                                        ; preds = %cond.end
  %45 = load i32, i32* %cost, align 4, !dbg !4560
  %sub = sub nsw i32 0, %45, !dbg !4561
  store i32 %sub, i32* %cost, align 4, !dbg !4562
  br label %if.end35, !dbg !4563

if.end35:                                         ; preds = %if.then34, %cond.end
  %46 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !4564
  %freq = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %46, i32 0, i32 3, !dbg !4565
  %47 = load i32, i32* %freq, align 8, !dbg !4565
  %48 = load i32, i32* %cost, align 4, !dbg !4566
  %mul = mul nsw i32 %47, %48, !dbg !4567
  %49 = load i32, i32* %divisor, align 4, !dbg !4568
  %div = sdiv i32 %mul, %49, !dbg !4569
  store i32 %div, i32* %update_cost, align 4, !dbg !4570
  %50 = load i32, i32* %update_cost, align 4, !dbg !4571
  %cmp36 = icmp eq i32 %50, 0, !dbg !4573
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !4574

if.then38:                                        ; preds = %if.end35
  br label %for.inc, !dbg !4575

if.end39:                                         ; preds = %if.end35
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !4576
  %updated_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %51, i32 0, i32 34, !dbg !4576
  %52 = load i32, i32* %cover_class, align 4, !dbg !4577
  %53 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !4578
  %updated_cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %53, i32 0, i32 11, !dbg !4578
  %54 = load i32, i32* %updated_cover_class_cost, align 8, !dbg !4578
  %55 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !4579
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %55, i32 0, i32 33, !dbg !4579
  %56 = load i32*, i32** %hard_reg_costs, align 8, !dbg !4579
  call void @ira_allocate_and_set_or_copy_costs(i32** %updated_hard_reg_costs, i32 %52, i32 %54, i32* %56), !dbg !4580
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !4581
  %updated_conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %57, i32 0, i32 36, !dbg !4581
  %58 = load i32, i32* %cover_class, align 4, !dbg !4582
  %59 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !4583
  %conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %59, i32 0, i32 35, !dbg !4583
  %60 = load i32*, i32** %conflict_hard_reg_costs, align 8, !dbg !4583
  call void @ira_allocate_and_set_or_copy_costs(i32** %updated_conflict_hard_reg_costs, i32 %58, i32 0, i32* %60), !dbg !4584
  %61 = load i32, i32* %cover_class, align 4, !dbg !4585
  %idxprom40 = zext i32 %61 to i64, !dbg !4586
  %arrayidx41 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom40, !dbg !4586
  %62 = load i32, i32* %hard_regno, align 4, !dbg !4587
  %idxprom42 = sext i32 %62 to i64, !dbg !4586
  %arrayidx43 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx41, i64 0, i64 %idxprom42, !dbg !4586
  %63 = load i16, i16* %arrayidx43, align 2, !dbg !4586
  %conv44 = sext i16 %63 to i32, !dbg !4586
  store i32 %conv44, i32* %i, align 4, !dbg !4588
  %64 = load i32, i32* %update_cost, align 4, !dbg !4589
  %65 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !4590
  %updated_hard_reg_costs45 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %65, i32 0, i32 34, !dbg !4590
  %66 = load i32*, i32** %updated_hard_reg_costs45, align 8, !dbg !4590
  %67 = load i32, i32* %i, align 4, !dbg !4591
  %idxprom46 = sext i32 %67 to i64, !dbg !4590
  %arrayidx47 = getelementptr inbounds i32, i32* %66, i64 %idxprom46, !dbg !4590
  %68 = load i32, i32* %arrayidx47, align 4, !dbg !4592
  %add = add nsw i32 %68, %64, !dbg !4592
  store i32 %add, i32* %arrayidx47, align 4, !dbg !4592
  %69 = load i32, i32* %update_cost, align 4, !dbg !4593
  %70 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !4594
  %updated_conflict_hard_reg_costs48 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %70, i32 0, i32 36, !dbg !4594
  %71 = load i32*, i32** %updated_conflict_hard_reg_costs48, align 8, !dbg !4594
  %72 = load i32, i32* %i, align 4, !dbg !4595
  %idxprom49 = sext i32 %72 to i64, !dbg !4594
  %arrayidx50 = getelementptr inbounds i32, i32* %71, i64 %idxprom49, !dbg !4594
  %73 = load i32, i32* %arrayidx50, align 4, !dbg !4596
  %add51 = add nsw i32 %73, %69, !dbg !4596
  store i32 %add51, i32* %arrayidx50, align 4, !dbg !4596
  %74 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !4597
  %75 = load i32, i32* %divisor, align 4, !dbg !4598
  %mul52 = mul nsw i32 %75, 4, !dbg !4599
  call void @queue_update_cost(%struct.ira_allocno* %74, i32 %mul52), !dbg !4600
  br label %for.inc, !dbg !4601

for.inc:                                          ; preds = %if.end39, %if.then38, %if.then27
  %76 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !4602
  store %struct.ira_allocno_copy* %76, %struct.ira_allocno_copy** %cp, align 8, !dbg !4603
  br label %for.cond, !dbg !4604, !llvm.loop !4605

for.end:                                          ; preds = %for.cond
  br label %do.cond, !dbg !4607

do.cond:                                          ; preds = %for.end
  %call53 = call zeroext i8 @get_next_update_cost(%struct.ira_allocno** %allocno.addr, i32* %divisor), !dbg !4608
  %tobool54 = icmp ne i8 %call53, 0, !dbg !4607
  br i1 %tobool54, label %do.body, label %do.end, !dbg !4607, !llvm.loop !4609

do.end:                                           ; preds = %if.then, %do.cond
  ret void, !dbg !4611
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_mark_memory_move_deletion(i32 %dst_regno, i32 %src_regno) #0 !dbg !4612 {
entry:
  %dst_regno.addr = alloca i32, align 4
  %src_regno.addr = alloca i32, align 4
  %dst = alloca %struct.ira_allocno*, align 8
  %src = alloca %struct.ira_allocno*, align 8
  store i32 %dst_regno, i32* %dst_regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dst_regno.addr, metadata !4615, metadata !DIExpression()), !dbg !4616
  store i32 %src_regno, i32* %src_regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_regno.addr, metadata !4617, metadata !DIExpression()), !dbg !4618
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %dst, metadata !4619, metadata !DIExpression()), !dbg !4620
  %0 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4621
  %1 = load i32, i32* %dst_regno.addr, align 4, !dbg !4622
  %idxprom = sext i32 %1 to i64, !dbg !4621
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %0, i64 %idxprom, !dbg !4621
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !4621
  store %struct.ira_allocno* %2, %struct.ira_allocno** %dst, align 8, !dbg !4620
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %src, metadata !4623, metadata !DIExpression()), !dbg !4624
  %3 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4625
  %4 = load i32, i32* %src_regno.addr, align 4, !dbg !4626
  %idxprom1 = sext i32 %4 to i64, !dbg !4625
  %arrayidx2 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %3, i64 %idxprom1, !dbg !4625
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx2, align 8, !dbg !4625
  store %struct.ira_allocno* %5, %struct.ira_allocno** %src, align 8, !dbg !4624
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %dst, align 8, !dbg !4627
  %dont_reassign_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 31, !dbg !4627
  %bf.load = load i16, i16* %dont_reassign_p, align 4, !dbg !4628
  %bf.clear = and i16 %bf.load, -9, !dbg !4628
  %bf.set = or i16 %bf.clear, 8, !dbg !4628
  store i16 %bf.set, i16* %dont_reassign_p, align 4, !dbg !4628
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %src, align 8, !dbg !4629
  %dont_reassign_p3 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 31, !dbg !4629
  %bf.load4 = load i16, i16* %dont_reassign_p3, align 4, !dbg !4630
  %bf.clear5 = and i16 %bf.load4, -9, !dbg !4630
  %bf.set6 = or i16 %bf.clear5, 8, !dbg !4630
  store i16 %bf.set6, i16* %dont_reassign_p3, align 4, !dbg !4630
  ret void, !dbg !4631
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ira_reassign_pseudos(i32* %spilled_pseudo_regs, i32 %num, i64 %bad_spill_regs, i64* %pseudo_forbidden_regs, i64* %pseudo_previous_regs, %struct.bitmap_head_def* %spilled) #0 !dbg !4632 {
entry:
  %retval = alloca i8, align 1
  %spilled_pseudo_regs.addr = alloca i32*, align 8
  %num.addr = alloca i32, align 4
  %bad_spill_regs.addr = alloca i64, align 8
  %pseudo_forbidden_regs.addr = alloca i64*, align 8
  %pseudo_previous_regs.addr = alloca i64*, align 8
  %spilled.addr = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %m = alloca i32, align 4
  %n = alloca i32, align 4
  %regno = alloca i32, align 4
  %changed_p = alloca i8, align 1
  %a = alloca %struct.ira_allocno*, align 8
  %conflict_a = alloca %struct.ira_allocno*, align 8
  %forbidden_regs = alloca i64, align 8
  %aci = alloca %struct.ira_allocno_conflict_iterator, align 8
  store i32* %spilled_pseudo_regs, i32** %spilled_pseudo_regs.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %spilled_pseudo_regs.addr, metadata !4635, metadata !DIExpression()), !dbg !4636
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !4637, metadata !DIExpression()), !dbg !4638
  store i64 %bad_spill_regs, i64* %bad_spill_regs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %bad_spill_regs.addr, metadata !4639, metadata !DIExpression()), !dbg !4640
  store i64* %pseudo_forbidden_regs, i64** %pseudo_forbidden_regs.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %pseudo_forbidden_regs.addr, metadata !4641, metadata !DIExpression()), !dbg !4642
  store i64* %pseudo_previous_regs, i64** %pseudo_previous_regs.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %pseudo_previous_regs.addr, metadata !4643, metadata !DIExpression()), !dbg !4644
  store %struct.bitmap_head_def* %spilled, %struct.bitmap_head_def** %spilled.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %spilled.addr, metadata !4645, metadata !DIExpression()), !dbg !4646
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4647, metadata !DIExpression()), !dbg !4648
  call void @llvm.dbg.declare(metadata i32* %m, metadata !4649, metadata !DIExpression()), !dbg !4650
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4651, metadata !DIExpression()), !dbg !4652
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !4653, metadata !DIExpression()), !dbg !4654
  call void @llvm.dbg.declare(metadata i8* %changed_p, metadata !4655, metadata !DIExpression()), !dbg !4656
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !4657, metadata !DIExpression()), !dbg !4658
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %conflict_a, metadata !4659, metadata !DIExpression()), !dbg !4660
  call void @llvm.dbg.declare(metadata i64* %forbidden_regs, metadata !4661, metadata !DIExpression()), !dbg !4662
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_conflict_iterator* %aci, metadata !4663, metadata !DIExpression()), !dbg !4664
  %0 = load i32, i32* %num.addr, align 4, !dbg !4665
  %cmp = icmp sgt i32 %0, 1, !dbg !4667
  br i1 %cmp, label %if.then, label %if.end, !dbg !4668

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %spilled_pseudo_regs.addr, align 8, !dbg !4669
  %2 = bitcast i32* %1 to i8*, !dbg !4669
  %3 = load i32, i32* %num.addr, align 4, !dbg !4670
  %conv = sext i32 %3 to i64, !dbg !4670
  call void @spec_qsort(i8* %2, i64 %conv, i64 4, i32 (i8*, i8*)* @pseudo_reg_compare), !dbg !4671
  br label %if.end, !dbg !4671

if.end:                                           ; preds = %if.then, %entry
  store i8 0, i8* %changed_p, align 1, !dbg !4672
  store i32 0, i32* %i, align 4, !dbg !4673
  store i32 0, i32* %m, align 4, !dbg !4675
  br label %for.cond, !dbg !4676

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4, !dbg !4677
  %5 = load i32, i32* %num.addr, align 4, !dbg !4679
  %cmp1 = icmp slt i32 %4, %5, !dbg !4680
  br i1 %cmp1, label %for.body, label %for.end, !dbg !4681

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %spilled_pseudo_regs.addr, align 8, !dbg !4682
  %7 = load i32, i32* %i, align 4, !dbg !4684
  %idxprom = sext i32 %7 to i64, !dbg !4682
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !4682
  %8 = load i32, i32* %arrayidx, align 4, !dbg !4682
  store i32 %8, i32* %regno, align 4, !dbg !4685
  %9 = load i64, i64* %bad_spill_regs.addr, align 8, !dbg !4686
  store i64 %9, i64* %forbidden_regs, align 8, !dbg !4686
  %10 = load i64*, i64** %pseudo_forbidden_regs.addr, align 8, !dbg !4687
  %11 = load i32, i32* %regno, align 4, !dbg !4687
  %idxprom3 = sext i32 %11 to i64, !dbg !4687
  %arrayidx4 = getelementptr inbounds i64, i64* %10, i64 %idxprom3, !dbg !4687
  %12 = load i64, i64* %arrayidx4, align 8, !dbg !4687
  %13 = load i64, i64* %forbidden_regs, align 8, !dbg !4687
  %or = or i64 %13, %12, !dbg !4687
  store i64 %or, i64* %forbidden_regs, align 8, !dbg !4687
  %14 = load i64*, i64** %pseudo_previous_regs.addr, align 8, !dbg !4688
  %15 = load i32, i32* %regno, align 4, !dbg !4688
  %idxprom5 = sext i32 %15 to i64, !dbg !4688
  %arrayidx6 = getelementptr inbounds i64, i64* %14, i64 %idxprom5, !dbg !4688
  %16 = load i64, i64* %arrayidx6, align 8, !dbg !4688
  %17 = load i64, i64* %forbidden_regs, align 8, !dbg !4688
  %or7 = or i64 %17, %16, !dbg !4688
  store i64 %or7, i64* %forbidden_regs, align 8, !dbg !4688
  %18 = load i16*, i16** @reg_renumber, align 8, !dbg !4689
  %19 = load i32, i32* %regno, align 4, !dbg !4689
  %idxprom8 = sext i32 %19 to i64, !dbg !4689
  %arrayidx9 = getelementptr inbounds i16, i16* %18, i64 %idxprom8, !dbg !4689
  %20 = load i16, i16* %arrayidx9, align 2, !dbg !4689
  %conv10 = sext i16 %20 to i32, !dbg !4689
  %cmp11 = icmp slt i32 %conv10, 0, !dbg !4689
  br i1 %cmp11, label %cond.false, label %cond.true, !dbg !4689

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i32 2929, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !4689
  br label %cond.end, !dbg !4689

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !4689

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4689
  %21 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4690
  %22 = load i32, i32* %regno, align 4, !dbg !4691
  %idxprom13 = sext i32 %22 to i64, !dbg !4690
  %arrayidx14 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %21, i64 %idxprom13, !dbg !4690
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx14, align 8, !dbg !4690
  store %struct.ira_allocno* %23, %struct.ira_allocno** %a, align 8, !dbg !4692
  %24 = load i32, i32* %regno, align 4, !dbg !4693
  call void @ira_mark_allocation_change(i32 %24), !dbg !4694
  %25 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4695
  %cmp15 = icmp sgt i32 %25, 3, !dbg !4697
  br i1 %cmp15, label %land.lhs.true, label %if.end21, !dbg !4698

land.lhs.true:                                    ; preds = %cond.end
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4699
  %cmp17 = icmp ne %struct._IO_FILE* %26, null, !dbg !4700
  br i1 %cmp17, label %if.then19, label %if.end21, !dbg !4701

if.then19:                                        ; preds = %land.lhs.true
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4702
  %28 = load i32, i32* %regno, align 4, !dbg !4703
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4704
  %num20 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %29, i32 0, i32 0, !dbg !4704
  %30 = load i32, i32* %num20, align 8, !dbg !4704
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4705
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 12, !dbg !4705
  %32 = load i32, i32* %memory_cost, align 4, !dbg !4705
  %33 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4706
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %33, i32 0, i32 10, !dbg !4706
  %34 = load i32, i32* %cover_class_cost, align 4, !dbg !4706
  %sub = sub nsw i32 %32, %34, !dbg !4707
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i32 %28, i32 %30, i32 %sub), !dbg !4708
  br label %if.end21, !dbg !4708

if.end21:                                         ; preds = %if.then19, %land.lhs.true, %cond.end
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4709
  %36 = load i64, i64* %forbidden_regs, align 8, !dbg !4710
  %call22 = call zeroext i8 @allocno_reload_assign(%struct.ira_allocno* %35, i64 %36), !dbg !4711
  %37 = load i16*, i16** @reg_renumber, align 8, !dbg !4712
  %38 = load i32, i32* %regno, align 4, !dbg !4714
  %idxprom23 = sext i32 %38 to i64, !dbg !4712
  %arrayidx24 = getelementptr inbounds i16, i16* %37, i64 %idxprom23, !dbg !4712
  %39 = load i16, i16* %arrayidx24, align 2, !dbg !4712
  %conv25 = sext i16 %39 to i32, !dbg !4712
  %cmp26 = icmp sge i32 %conv25, 0, !dbg !4715
  br i1 %cmp26, label %if.then28, label %if.else, !dbg !4716

if.then28:                                        ; preds = %if.end21
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %spilled.addr, align 8, !dbg !4717
  %41 = load i32, i32* %regno, align 4, !dbg !4717
  %call29 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %40, i32 %41), !dbg !4717
  store i8 1, i8* %changed_p, align 1, !dbg !4719
  br label %if.end32, !dbg !4720

if.else:                                          ; preds = %if.end21
  %42 = load i32, i32* %regno, align 4, !dbg !4721
  %43 = load i32*, i32** %spilled_pseudo_regs.addr, align 8, !dbg !4722
  %44 = load i32, i32* %m, align 4, !dbg !4723
  %inc = add nsw i32 %44, 1, !dbg !4723
  store i32 %inc, i32* %m, align 4, !dbg !4723
  %idxprom30 = sext i32 %44 to i64, !dbg !4722
  %arrayidx31 = getelementptr inbounds i32, i32* %43, i64 %idxprom30, !dbg !4722
  store i32 %42, i32* %arrayidx31, align 4, !dbg !4724
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.then28
  br label %for.inc, !dbg !4725

for.inc:                                          ; preds = %if.end32
  %45 = load i32, i32* %i, align 4, !dbg !4726
  %inc33 = add nsw i32 %45, 1, !dbg !4726
  store i32 %inc33, i32* %i, align 4, !dbg !4726
  br label %for.cond, !dbg !4727, !llvm.loop !4728

for.end:                                          ; preds = %for.cond
  %46 = load i32, i32* %m, align 4, !dbg !4730
  %cmp34 = icmp eq i32 %46, 0, !dbg !4732
  br i1 %cmp34, label %if.then36, label %if.end37, !dbg !4733

if.then36:                                        ; preds = %for.end
  %47 = load i8, i8* %changed_p, align 1, !dbg !4734
  store i8 %47, i8* %retval, align 1, !dbg !4735
  br label %return, !dbg !4735

if.end37:                                         ; preds = %for.end
  %48 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4736
  %cmp38 = icmp sgt i32 %48, 3, !dbg !4738
  br i1 %cmp38, label %land.lhs.true40, label %if.end56, !dbg !4739

land.lhs.true40:                                  ; preds = %if.end37
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4740
  %cmp41 = icmp ne %struct._IO_FILE* %49, null, !dbg !4741
  br i1 %cmp41, label %if.then43, label %if.end56, !dbg !4742

if.then43:                                        ; preds = %land.lhs.true40
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4743
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0)), !dbg !4745
  store i32 0, i32* %i, align 4, !dbg !4746
  br label %for.cond45, !dbg !4748

for.cond45:                                       ; preds = %for.inc52, %if.then43
  %51 = load i32, i32* %i, align 4, !dbg !4749
  %52 = load i32, i32* %m, align 4, !dbg !4751
  %cmp46 = icmp slt i32 %51, %52, !dbg !4752
  br i1 %cmp46, label %for.body48, label %for.end54, !dbg !4753

for.body48:                                       ; preds = %for.cond45
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4754
  %54 = load i32*, i32** %spilled_pseudo_regs.addr, align 8, !dbg !4755
  %55 = load i32, i32* %i, align 4, !dbg !4756
  %idxprom49 = sext i32 %55 to i64, !dbg !4755
  %arrayidx50 = getelementptr inbounds i32, i32* %54, i64 %idxprom49, !dbg !4755
  %56 = load i32, i32* %arrayidx50, align 4, !dbg !4755
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i32 %56), !dbg !4757
  br label %for.inc52, !dbg !4757

for.inc52:                                        ; preds = %for.body48
  %57 = load i32, i32* %i, align 4, !dbg !4758
  %inc53 = add nsw i32 %57, 1, !dbg !4758
  store i32 %inc53, i32* %i, align 4, !dbg !4758
  br label %for.cond45, !dbg !4759, !llvm.loop !4760

for.end54:                                        ; preds = %for.cond45
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4762
  %call55 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4763
  br label %if.end56, !dbg !4764

if.end56:                                         ; preds = %for.end54, %land.lhs.true40, %if.end37
  store i32 0, i32* %n, align 4, !dbg !4765
  store i32 0, i32* %i, align 4, !dbg !4767
  br label %for.cond57, !dbg !4768

for.cond57:                                       ; preds = %for.inc85, %if.end56
  %59 = load i32, i32* %i, align 4, !dbg !4769
  %60 = load i32, i32* %m, align 4, !dbg !4771
  %cmp58 = icmp slt i32 %59, %60, !dbg !4772
  br i1 %cmp58, label %for.body60, label %for.end87, !dbg !4773

for.body60:                                       ; preds = %for.cond57
  %61 = load i32*, i32** %spilled_pseudo_regs.addr, align 8, !dbg !4774
  %62 = load i32, i32* %i, align 4, !dbg !4776
  %idxprom61 = sext i32 %62 to i64, !dbg !4774
  %arrayidx62 = getelementptr inbounds i32, i32* %61, i64 %idxprom61, !dbg !4774
  %63 = load i32, i32* %arrayidx62, align 4, !dbg !4774
  store i32 %63, i32* %regno, align 4, !dbg !4777
  %64 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !4778
  %65 = load i32, i32* %regno, align 4, !dbg !4779
  %idxprom63 = sext i32 %65 to i64, !dbg !4778
  %arrayidx64 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %64, i64 %idxprom63, !dbg !4778
  %66 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx64, align 8, !dbg !4778
  store %struct.ira_allocno* %66, %struct.ira_allocno** %a, align 8, !dbg !4780
  %67 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4781
  call void @ira_allocno_conflict_iter_init(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno* %67), !dbg !4781
  br label %for.cond65, !dbg !4781

for.cond65:                                       ; preds = %for.inc83, %for.body60
  %call66 = call zeroext i8 @ira_allocno_conflict_iter_cond(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno** %conflict_a), !dbg !4783
  %tobool = icmp ne i8 %call66, 0, !dbg !4781
  br i1 %tobool, label %for.body67, label %for.end84, !dbg !4781

for.body67:                                       ; preds = %for.cond65
  %68 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_a, align 8, !dbg !4785
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %68, i32 0, i32 3, !dbg !4785
  %69 = load i32, i32* %hard_regno, align 4, !dbg !4785
  %cmp68 = icmp slt i32 %69, 0, !dbg !4787
  br i1 %cmp68, label %land.lhs.true70, label %if.end82, !dbg !4788

land.lhs.true70:                                  ; preds = %for.body67
  %70 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_a, align 8, !dbg !4789
  %dont_reassign_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %70, i32 0, i32 31, !dbg !4789
  %bf.load = load i16, i16* %dont_reassign_p, align 4, !dbg !4789
  %bf.lshr = lshr i16 %bf.load, 3, !dbg !4789
  %bf.clear = and i16 %bf.lshr, 1, !dbg !4789
  %bf.cast = zext i16 %bf.clear to i32, !dbg !4789
  %tobool71 = icmp ne i32 %bf.cast, 0, !dbg !4789
  br i1 %tobool71, label %if.end82, label %land.lhs.true72, !dbg !4790

land.lhs.true72:                                  ; preds = %land.lhs.true70
  %71 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @consideration_allocno_bitmap, align 8, !dbg !4791
  %72 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_a, align 8, !dbg !4792
  %num73 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %72, i32 0, i32 0, !dbg !4792
  %73 = load i32, i32* %num73, align 8, !dbg !4792
  %call74 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %71, i32 %73), !dbg !4793
  %tobool75 = icmp ne i32 %call74, 0, !dbg !4793
  br i1 %tobool75, label %if.end82, label %if.then76, !dbg !4794

if.then76:                                        ; preds = %land.lhs.true72
  %74 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_a, align 8, !dbg !4795
  %75 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !4797
  %76 = load i32, i32* %n, align 4, !dbg !4798
  %inc77 = add nsw i32 %76, 1, !dbg !4798
  store i32 %inc77, i32* %n, align 4, !dbg !4798
  %idxprom78 = sext i32 %76 to i64, !dbg !4797
  %arrayidx79 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %75, i64 %idxprom78, !dbg !4797
  store %struct.ira_allocno* %74, %struct.ira_allocno** %arrayidx79, align 8, !dbg !4799
  %77 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @consideration_allocno_bitmap, align 8, !dbg !4800
  %78 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_a, align 8, !dbg !4801
  %num80 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %78, i32 0, i32 0, !dbg !4801
  %79 = load i32, i32* %num80, align 8, !dbg !4801
  %call81 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %77, i32 %79), !dbg !4802
  br label %if.end82, !dbg !4803

if.end82:                                         ; preds = %if.then76, %land.lhs.true72, %land.lhs.true70, %for.body67
  br label %for.inc83, !dbg !4804

for.inc83:                                        ; preds = %if.end82
  call void @ira_allocno_conflict_iter_next(%struct.ira_allocno_conflict_iterator* %aci), !dbg !4783
  br label %for.cond65, !dbg !4783, !llvm.loop !4805

for.end84:                                        ; preds = %for.cond65
  br label %for.inc85, !dbg !4807

for.inc85:                                        ; preds = %for.end84
  %80 = load i32, i32* %i, align 4, !dbg !4808
  %inc86 = add nsw i32 %80, 1, !dbg !4808
  store i32 %inc86, i32* %i, align 4, !dbg !4808
  br label %for.cond57, !dbg !4809, !llvm.loop !4810

for.end87:                                        ; preds = %for.cond57
  %81 = load i32, i32* %n, align 4, !dbg !4812
  %cmp88 = icmp ne i32 %81, 0, !dbg !4814
  br i1 %cmp88, label %if.then90, label %if.end125, !dbg !4815

if.then90:                                        ; preds = %for.end87
  %82 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !4816
  %83 = load i32, i32* %n, align 4, !dbg !4818
  call void @setup_allocno_priorities(%struct.ira_allocno** %82, i32 %83), !dbg !4819
  %84 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !4820
  %85 = bitcast %struct.ira_allocno** %84 to i8*, !dbg !4820
  %86 = load i32, i32* %n, align 4, !dbg !4821
  %conv91 = sext i32 %86 to i64, !dbg !4821
  call void @spec_qsort(i8* %85, i64 %conv91, i64 8, i32 (i8*, i8*)* @allocno_priority_compare_func), !dbg !4822
  store i32 0, i32* %i, align 4, !dbg !4823
  br label %for.cond92, !dbg !4825

for.cond92:                                       ; preds = %for.inc122, %if.then90
  %87 = load i32, i32* %i, align 4, !dbg !4826
  %88 = load i32, i32* %n, align 4, !dbg !4828
  %cmp93 = icmp slt i32 %87, %88, !dbg !4829
  br i1 %cmp93, label %for.body95, label %for.end124, !dbg !4830

for.body95:                                       ; preds = %for.cond92
  %89 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !4831
  %90 = load i32, i32* %i, align 4, !dbg !4833
  %idxprom96 = sext i32 %90 to i64, !dbg !4831
  %arrayidx97 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %89, i64 %idxprom96, !dbg !4831
  %91 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx97, align 8, !dbg !4831
  store %struct.ira_allocno* %91, %struct.ira_allocno** %a, align 8, !dbg !4834
  %92 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4835
  %regno98 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %92, i32 0, i32 1, !dbg !4835
  %93 = load i32, i32* %regno98, align 4, !dbg !4835
  store i32 %93, i32* %regno, align 4, !dbg !4836
  %94 = load i64, i64* %bad_spill_regs.addr, align 8, !dbg !4837
  store i64 %94, i64* %forbidden_regs, align 8, !dbg !4837
  %95 = load i64*, i64** %pseudo_forbidden_regs.addr, align 8, !dbg !4838
  %96 = load i32, i32* %regno, align 4, !dbg !4838
  %idxprom99 = sext i32 %96 to i64, !dbg !4838
  %arrayidx100 = getelementptr inbounds i64, i64* %95, i64 %idxprom99, !dbg !4838
  %97 = load i64, i64* %arrayidx100, align 8, !dbg !4838
  %98 = load i64, i64* %forbidden_regs, align 8, !dbg !4838
  %or101 = or i64 %98, %97, !dbg !4838
  store i64 %or101, i64* %forbidden_regs, align 8, !dbg !4838
  %99 = load i64*, i64** %pseudo_previous_regs.addr, align 8, !dbg !4839
  %100 = load i32, i32* %regno, align 4, !dbg !4839
  %idxprom102 = sext i32 %100 to i64, !dbg !4839
  %arrayidx103 = getelementptr inbounds i64, i64* %99, i64 %idxprom102, !dbg !4839
  %101 = load i64, i64* %arrayidx103, align 8, !dbg !4839
  %102 = load i64, i64* %forbidden_regs, align 8, !dbg !4839
  %or104 = or i64 %102, %101, !dbg !4839
  store i64 %or104, i64* %forbidden_regs, align 8, !dbg !4839
  %103 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4840
  %cmp105 = icmp sgt i32 %103, 3, !dbg !4842
  br i1 %cmp105, label %land.lhs.true107, label %if.end116, !dbg !4843

land.lhs.true107:                                 ; preds = %for.body95
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4844
  %cmp108 = icmp ne %struct._IO_FILE* %104, null, !dbg !4845
  br i1 %cmp108, label %if.then110, label %if.end116, !dbg !4846

if.then110:                                       ; preds = %land.lhs.true107
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4847
  %106 = load i32, i32* %regno, align 4, !dbg !4848
  %107 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4849
  %num111 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %107, i32 0, i32 0, !dbg !4849
  %108 = load i32, i32* %num111, align 8, !dbg !4849
  %109 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4850
  %memory_cost112 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %109, i32 0, i32 12, !dbg !4850
  %110 = load i32, i32* %memory_cost112, align 4, !dbg !4850
  %111 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4851
  %cover_class_cost113 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %111, i32 0, i32 10, !dbg !4851
  %112 = load i32, i32* %cover_class_cost113, align 4, !dbg !4851
  %sub114 = sub nsw i32 %110, %112, !dbg !4852
  %call115 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %105, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i64 0, i64 0), i32 %106, i32 %108, i32 %sub114), !dbg !4853
  br label %if.end116, !dbg !4853

if.end116:                                        ; preds = %if.then110, %land.lhs.true107, %for.body95
  %113 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !4854
  %114 = load i64, i64* %forbidden_regs, align 8, !dbg !4856
  %call117 = call zeroext i8 @allocno_reload_assign(%struct.ira_allocno* %113, i64 %114), !dbg !4857
  %tobool118 = icmp ne i8 %call117, 0, !dbg !4857
  br i1 %tobool118, label %if.then119, label %if.end121, !dbg !4858

if.then119:                                       ; preds = %if.end116
  store i8 1, i8* %changed_p, align 1, !dbg !4859
  %115 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %spilled.addr, align 8, !dbg !4861
  %116 = load i32, i32* %regno, align 4, !dbg !4862
  %call120 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %115, i32 %116), !dbg !4863
  br label %if.end121, !dbg !4864

if.end121:                                        ; preds = %if.then119, %if.end116
  br label %for.inc122, !dbg !4865

for.inc122:                                       ; preds = %if.end121
  %117 = load i32, i32* %i, align 4, !dbg !4866
  %inc123 = add nsw i32 %117, 1, !dbg !4866
  store i32 %inc123, i32* %i, align 4, !dbg !4866
  br label %for.cond92, !dbg !4867, !llvm.loop !4868

for.end124:                                       ; preds = %for.cond92
  br label %if.end125, !dbg !4870

if.end125:                                        ; preds = %for.end124, %for.end87
  %118 = load i8, i8* %changed_p, align 1, !dbg !4871
  store i8 %118, i8* %retval, align 1, !dbg !4872
  br label %return, !dbg !4872

return:                                           ; preds = %if.end125, %if.then36
  %119 = load i8, i8* %retval, align 1, !dbg !4873
  ret i8 %119, !dbg !4873
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pseudo_reg_compare(i8* %v1p, i8* %v2p) #0 !dbg !4874 {
entry:
  %retval = alloca i32, align 4
  %v1p.addr = alloca i8*, align 8
  %v2p.addr = alloca i8*, align 8
  %regno1 = alloca i32, align 4
  %regno2 = alloca i32, align 4
  %diff = alloca i32, align 4
  store i8* %v1p, i8** %v1p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v1p.addr, metadata !4875, metadata !DIExpression()), !dbg !4876
  store i8* %v2p, i8** %v2p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v2p.addr, metadata !4877, metadata !DIExpression()), !dbg !4878
  call void @llvm.dbg.declare(metadata i32* %regno1, metadata !4879, metadata !DIExpression()), !dbg !4880
  %0 = load i8*, i8** %v1p.addr, align 8, !dbg !4881
  %1 = bitcast i8* %0 to i32*, !dbg !4882
  %2 = load i32, i32* %1, align 4, !dbg !4883
  store i32 %2, i32* %regno1, align 4, !dbg !4880
  call void @llvm.dbg.declare(metadata i32* %regno2, metadata !4884, metadata !DIExpression()), !dbg !4885
  %3 = load i8*, i8** %v2p.addr, align 8, !dbg !4886
  %4 = bitcast i8* %3 to i32*, !dbg !4887
  %5 = load i32, i32* %4, align 4, !dbg !4888
  store i32 %5, i32* %regno2, align 4, !dbg !4885
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !4889, metadata !DIExpression()), !dbg !4890
  %6 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !4891
  %7 = load i32, i32* %regno2, align 4, !dbg !4891
  %idxprom = sext i32 %7 to i64, !dbg !4891
  %arrayidx = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %6, i64 %idxprom, !dbg !4891
  %freq = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx, i32 0, i32 0, !dbg !4891
  %8 = load i32, i32* %freq, align 4, !dbg !4891
  %9 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !4893
  %10 = load i32, i32* %regno1, align 4, !dbg !4893
  %idxprom1 = sext i32 %10 to i64, !dbg !4893
  %arrayidx2 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %9, i64 %idxprom1, !dbg !4893
  %freq3 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx2, i32 0, i32 0, !dbg !4893
  %11 = load i32, i32* %freq3, align 4, !dbg !4893
  %sub = sub nsw i32 %8, %11, !dbg !4894
  store i32 %sub, i32* %diff, align 4, !dbg !4895
  %cmp = icmp ne i32 %sub, 0, !dbg !4896
  br i1 %cmp, label %if.then, label %if.end, !dbg !4897

if.then:                                          ; preds = %entry
  %12 = load i32, i32* %diff, align 4, !dbg !4898
  store i32 %12, i32* %retval, align 4, !dbg !4899
  br label %return, !dbg !4899

if.end:                                           ; preds = %entry
  %13 = load i32, i32* %regno1, align 4, !dbg !4900
  %14 = load i32, i32* %regno2, align 4, !dbg !4901
  %sub4 = sub nsw i32 %13, %14, !dbg !4902
  store i32 %sub4, i32* %retval, align 4, !dbg !4903
  br label %return, !dbg !4903

return:                                           ; preds = %if.end, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !4904
  ret i32 %15, !dbg !4904
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @allocno_reload_assign(%struct.ira_allocno* %a, i64 %forbidden_regs) #0 !dbg !4905 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  %forbidden_regs.addr = alloca i64, align 8
  %hard_regno = alloca i32, align 4
  %cover_class = alloca i32, align 4
  %regno = alloca i32, align 4
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !4908, metadata !DIExpression()), !dbg !4909
  store i64 %forbidden_regs, i64* %forbidden_regs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %forbidden_regs.addr, metadata !4910, metadata !DIExpression()), !dbg !4911
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !4912, metadata !DIExpression()), !dbg !4913
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !4914, metadata !DIExpression()), !dbg !4915
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !4916, metadata !DIExpression()), !dbg !4917
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4918
  %regno1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 1, !dbg !4918
  %1 = load i32, i32* %regno1, align 4, !dbg !4918
  store i32 %1, i32* %regno, align 4, !dbg !4917
  %2 = load i64, i64* %forbidden_regs.addr, align 8, !dbg !4919
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4919
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 27, !dbg !4919
  %4 = load i64, i64* %total_conflict_hard_regs, align 8, !dbg !4919
  %or = or i64 %4, %2, !dbg !4919
  store i64 %or, i64* %total_conflict_hard_regs, align 8, !dbg !4919
  %5 = load i32, i32* @flag_caller_saves, align 4, !dbg !4920
  %tobool = icmp ne i32 %5, 0, !dbg !4920
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4922

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4923
  %calls_crossed_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 30, !dbg !4923
  %7 = load i32, i32* %calls_crossed_num, align 8, !dbg !4923
  %cmp = icmp ne i32 %7, 0, !dbg !4924
  br i1 %cmp, label %if.then, label %if.end, !dbg !4925

if.then:                                          ; preds = %land.lhs.true
  %8 = load i64, i64* @call_used_reg_set, align 8, !dbg !4926
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4926
  %total_conflict_hard_regs2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 27, !dbg !4926
  %10 = load i64, i64* %total_conflict_hard_regs2, align 8, !dbg !4926
  %or3 = or i64 %10, %8, !dbg !4926
  store i64 %or3, i64* %total_conflict_hard_regs2, align 8, !dbg !4926
  br label %if.end, !dbg !4926

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4927
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 31, !dbg !4927
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !4928
  %bf.clear = and i16 %bf.load, -257, !dbg !4928
  store i16 %bf.clear, i16* %assigned_p, align 4, !dbg !4928
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4929
  %cover_class4 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 9, !dbg !4929
  %13 = load i32, i32* %cover_class4, align 8, !dbg !4929
  store i32 %13, i32* %cover_class, align 4, !dbg !4930
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4931
  call void @update_curr_costs(%struct.ira_allocno* %14), !dbg !4932
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4933
  %call = call zeroext i8 @assign_hard_reg(%struct.ira_allocno* %15, i8 zeroext 1), !dbg !4934
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4935
  %hard_regno5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 3, !dbg !4935
  %17 = load i32, i32* %hard_regno5, align 4, !dbg !4935
  store i32 %17, i32* %hard_regno, align 4, !dbg !4936
  %18 = load i32, i32* %hard_regno, align 4, !dbg !4937
  %conv = trunc i32 %18 to i16, !dbg !4937
  %19 = load i16*, i16** @reg_renumber, align 8, !dbg !4938
  %20 = load i32, i32* %regno, align 4, !dbg !4939
  %idxprom = sext i32 %20 to i64, !dbg !4938
  %arrayidx = getelementptr inbounds i16, i16* %19, i64 %idxprom, !dbg !4938
  store i16 %conv, i16* %arrayidx, align 2, !dbg !4940
  %21 = load i32, i32* %hard_regno, align 4, !dbg !4941
  %cmp6 = icmp slt i32 %21, 0, !dbg !4943
  br i1 %cmp6, label %if.then8, label %if.else, !dbg !4944

if.then8:                                         ; preds = %if.end
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4945
  %hard_regno9 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 3, !dbg !4945
  store i32 -1, i32* %hard_regno9, align 4, !dbg !4946
  br label %if.end28, !dbg !4945

if.else:                                          ; preds = %if.end
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4947
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 12, !dbg !4947
  %24 = load i32, i32* %memory_cost, align 4, !dbg !4947
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4949
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 33, !dbg !4949
  %26 = load i32*, i32** %hard_reg_costs, align 8, !dbg !4949
  %cmp10 = icmp eq i32* %26, null, !dbg !4950
  br i1 %cmp10, label %cond.true, label %cond.false, !dbg !4949

cond.true:                                        ; preds = %if.else
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4951
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 10, !dbg !4951
  %28 = load i32, i32* %cover_class_cost, align 4, !dbg !4951
  br label %cond.end, !dbg !4949

cond.false:                                       ; preds = %if.else
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4952
  %hard_reg_costs12 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %29, i32 0, i32 33, !dbg !4952
  %30 = load i32*, i32** %hard_reg_costs12, align 8, !dbg !4952
  %31 = load i32, i32* %cover_class, align 4, !dbg !4953
  %idxprom13 = zext i32 %31 to i64, !dbg !4954
  %arrayidx14 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom13, !dbg !4954
  %32 = load i32, i32* %hard_regno, align 4, !dbg !4955
  %idxprom15 = sext i32 %32 to i64, !dbg !4954
  %arrayidx16 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx14, i64 0, i64 %idxprom15, !dbg !4954
  %33 = load i16, i16* %arrayidx16, align 2, !dbg !4954
  %idxprom17 = sext i16 %33 to i64, !dbg !4952
  %arrayidx18 = getelementptr inbounds i32, i32* %30, i64 %idxprom17, !dbg !4952
  %34 = load i32, i32* %arrayidx18, align 4, !dbg !4952
  br label %cond.end, !dbg !4949

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %28, %cond.true ], [ %34, %cond.false ], !dbg !4949
  %sub = sub nsw i32 %24, %cond, !dbg !4956
  %35 = load i32, i32* @ira_overall_cost, align 4, !dbg !4957
  %sub19 = sub nsw i32 %35, %sub, !dbg !4957
  store i32 %sub19, i32* @ira_overall_cost, align 4, !dbg !4957
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4958
  %calls_crossed_num20 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %36, i32 0, i32 30, !dbg !4958
  %37 = load i32, i32* %calls_crossed_num20, align 8, !dbg !4958
  %cmp21 = icmp ne i32 %37, 0, !dbg !4960
  br i1 %cmp21, label %land.lhs.true23, label %if.end27, !dbg !4961

land.lhs.true23:                                  ; preds = %cond.end
  %38 = load i32, i32* %hard_regno, align 4, !dbg !4962
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !4963
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 2, !dbg !4963
  %40 = load i32, i32* %mode, align 8, !dbg !4963
  %41 = load i64, i64* @call_used_reg_set, align 8, !dbg !4964
  %call24 = call zeroext i8 @ira_hard_reg_not_in_set_p(i32 %38, i32 %40, i64 %41), !dbg !4965
  %tobool25 = icmp ne i8 %call24, 0, !dbg !4965
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !4966

if.then26:                                        ; preds = %land.lhs.true23
  store i32 1, i32* @caller_save_needed, align 4, !dbg !4967
  br label %if.end27, !dbg !4969

if.end27:                                         ; preds = %if.then26, %land.lhs.true23, %cond.end
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then8
  %42 = load i16*, i16** @reg_renumber, align 8, !dbg !4970
  %43 = load i32, i32* %regno, align 4, !dbg !4972
  %idxprom29 = sext i32 %43 to i64, !dbg !4970
  %arrayidx30 = getelementptr inbounds i16, i16* %42, i64 %idxprom29, !dbg !4970
  %44 = load i16, i16* %arrayidx30, align 2, !dbg !4970
  %conv31 = sext i16 %44 to i32, !dbg !4970
  %cmp32 = icmp sge i32 %conv31, 0, !dbg !4973
  br i1 %cmp32, label %if.then34, label %if.else60, !dbg !4974

if.then34:                                        ; preds = %if.end28
  %45 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4975
  %cmp35 = icmp sgt i32 %45, 3, !dbg !4978
  br i1 %cmp35, label %land.lhs.true37, label %if.end45, !dbg !4979

land.lhs.true37:                                  ; preds = %if.then34
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4980
  %cmp38 = icmp ne %struct._IO_FILE* %46, null, !dbg !4981
  br i1 %cmp38, label %if.then40, label %if.end45, !dbg !4982

if.then40:                                        ; preds = %land.lhs.true37
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4983
  %48 = load i16*, i16** @reg_renumber, align 8, !dbg !4984
  %49 = load i32, i32* %regno, align 4, !dbg !4985
  %idxprom41 = sext i32 %49 to i64, !dbg !4984
  %arrayidx42 = getelementptr inbounds i16, i16* %48, i64 %idxprom41, !dbg !4984
  %50 = load i16, i16* %arrayidx42, align 2, !dbg !4984
  %conv43 = sext i16 %50 to i32, !dbg !4984
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.18, i64 0, i64 0), i32 %conv43), !dbg !4986
  br label %if.end45, !dbg !4986

if.end45:                                         ; preds = %if.then40, %land.lhs.true37, %if.then34
  %51 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !4987
  %52 = load i32, i32* %regno, align 4, !dbg !4987
  %idxprom46 = sext i32 %52 to i64, !dbg !4987
  %arrayidx47 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %51, i64 %idxprom46, !dbg !4987
  %53 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx47, align 8, !dbg !4987
  %call48 = call i32 @rhs_regno(%struct.rtx_def* %53), !dbg !4987
  %54 = load i16*, i16** @reg_renumber, align 8, !dbg !4987
  %55 = load i32, i32* %regno, align 4, !dbg !4987
  %idxprom49 = sext i32 %55 to i64, !dbg !4987
  %arrayidx50 = getelementptr inbounds i16, i16* %54, i64 %idxprom49, !dbg !4987
  %56 = load i16, i16* %arrayidx50, align 2, !dbg !4987
  %conv51 = sext i16 %56 to i32, !dbg !4987
  %57 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !4987
  %58 = load i32, i32* %regno, align 4, !dbg !4987
  %idxprom52 = sext i32 %58 to i64, !dbg !4987
  %arrayidx53 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %57, i64 %idxprom52, !dbg !4987
  %59 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx53, align 8, !dbg !4987
  call void @df_ref_change_reg_with_loc(i32 %call48, i32 %conv51, %struct.rtx_def* %59), !dbg !4987
  %60 = load i16*, i16** @reg_renumber, align 8, !dbg !4987
  %61 = load i32, i32* %regno, align 4, !dbg !4987
  %idxprom54 = sext i32 %61 to i64, !dbg !4987
  %arrayidx55 = getelementptr inbounds i16, i16* %60, i64 %idxprom54, !dbg !4987
  %62 = load i16, i16* %arrayidx55, align 2, !dbg !4987
  %conv56 = sext i16 %62 to i32, !dbg !4987
  %63 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !4987
  %64 = load i32, i32* %regno, align 4, !dbg !4987
  %idxprom57 = sext i32 %64 to i64, !dbg !4987
  %arrayidx58 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %63, i64 %idxprom57, !dbg !4987
  %65 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx58, align 8, !dbg !4987
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !4987
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4987
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4987
  %rt_uint = bitcast %union.rtunion_def* %arrayidx59 to i32*, !dbg !4987
  store i32 %conv56, i32* %rt_uint, align 8, !dbg !4987
  %66 = load i32, i32* %regno, align 4, !dbg !4988
  call void @mark_home_live(i32 %66), !dbg !4989
  br label %if.end69, !dbg !4990

if.else60:                                        ; preds = %if.end28
  %67 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !4991
  %cmp61 = icmp sgt i32 %67, 3, !dbg !4993
  br i1 %cmp61, label %land.lhs.true63, label %if.end68, !dbg !4994

land.lhs.true63:                                  ; preds = %if.else60
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4995
  %cmp64 = icmp ne %struct._IO_FILE* %68, null, !dbg !4996
  br i1 %cmp64, label %if.then66, label %if.end68, !dbg !4997

if.then66:                                        ; preds = %land.lhs.true63
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !4998
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %69, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4999
  br label %if.end68, !dbg !4999

if.end68:                                         ; preds = %if.then66, %land.lhs.true63, %if.else60
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.end45
  %70 = load i16*, i16** @reg_renumber, align 8, !dbg !5000
  %71 = load i32, i32* %regno, align 4, !dbg !5001
  %idxprom70 = sext i32 %71 to i64, !dbg !5000
  %arrayidx71 = getelementptr inbounds i16, i16* %70, i64 %idxprom70, !dbg !5000
  %72 = load i16, i16* %arrayidx71, align 2, !dbg !5000
  %conv72 = sext i16 %72 to i32, !dbg !5000
  %cmp73 = icmp sge i32 %conv72, 0, !dbg !5002
  %conv74 = zext i1 %cmp73 to i32, !dbg !5002
  %conv75 = trunc i32 %conv74 to i8, !dbg !5000
  ret i8 %conv75, !dbg !5003
}

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @ira_reuse_stack_slot(i32 %regno, i32 %inherent_size, i32 %total_size) #0 !dbg !5004 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %regno.addr = alloca i32, align 4
  %inherent_size.addr = alloca i32, align 4
  %total_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %slot_num = alloca i32, align 4
  %best_slot_num = alloca i32, align 4
  %cost = alloca i32, align 4
  %best_cost = alloca i32, align 4
  %cp = alloca %struct.ira_allocno_copy*, align 8
  %next_cp = alloca %struct.ira_allocno_copy*, align 8
  %another_allocno = alloca %struct.ira_allocno*, align 8
  %allocno = alloca %struct.ira_allocno*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %slot = alloca %struct.ira_spilled_reg_stack_slot*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !5007, metadata !DIExpression()), !dbg !5008
  store i32 %inherent_size, i32* %inherent_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %inherent_size.addr, metadata !5009, metadata !DIExpression()), !dbg !5010
  store i32 %total_size, i32* %total_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %total_size.addr, metadata !5011, metadata !DIExpression()), !dbg !5012
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5013, metadata !DIExpression()), !dbg !5014
  call void @llvm.dbg.declare(metadata i32* %slot_num, metadata !5015, metadata !DIExpression()), !dbg !5016
  call void @llvm.dbg.declare(metadata i32* %best_slot_num, metadata !5017, metadata !DIExpression()), !dbg !5018
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !5019, metadata !DIExpression()), !dbg !5020
  call void @llvm.dbg.declare(metadata i32* %best_cost, metadata !5021, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !5023, metadata !DIExpression()), !dbg !5024
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %next_cp, metadata !5025, metadata !DIExpression()), !dbg !5026
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %another_allocno, metadata !5027, metadata !DIExpression()), !dbg !5028
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno, metadata !5029, metadata !DIExpression()), !dbg !5030
  %0 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !5031
  %1 = load i32, i32* %regno.addr, align 4, !dbg !5032
  %idxprom = sext i32 %1 to i64, !dbg !5031
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %0, i64 %idxprom, !dbg !5031
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !5031
  store %struct.ira_allocno* %2, %struct.ira_allocno** %allocno, align 8, !dbg !5030
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !5033, metadata !DIExpression()), !dbg !5034
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !5035, metadata !DIExpression()), !dbg !5036
  call void @llvm.dbg.declare(metadata %struct.ira_spilled_reg_stack_slot** %slot, metadata !5037, metadata !DIExpression()), !dbg !5046
  store %struct.ira_spilled_reg_stack_slot* null, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5046
  %3 = load i32, i32* @flag_ira_share_spill_slots, align 4, !dbg !5047
  %tobool = icmp ne i32 %3, 0, !dbg !5047
  br i1 %tobool, label %if.end, label %if.then, !dbg !5049

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !5050
  br label %return, !dbg !5050

if.end:                                           ; preds = %entry
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !5051
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 3, !dbg !5051
  %5 = load i32, i32* %hard_regno, align 4, !dbg !5051
  %sub = sub nsw i32 0, %5, !dbg !5052
  %sub1 = sub nsw i32 %sub, 2, !dbg !5053
  store i32 %sub1, i32* %slot_num, align 4, !dbg !5054
  %6 = load i32, i32* %slot_num, align 4, !dbg !5055
  %cmp = icmp ne i32 %6, -1, !dbg !5057
  br i1 %cmp, label %if.then2, label %if.else, !dbg !5058

if.then2:                                         ; preds = %if.end
  %7 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** @ira_spilled_reg_stack_slots, align 8, !dbg !5059
  %8 = load i32, i32* %slot_num, align 4, !dbg !5061
  %idxprom3 = sext i32 %8 to i64, !dbg !5059
  %arrayidx4 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %7, i64 %idxprom3, !dbg !5059
  store %struct.ira_spilled_reg_stack_slot* %arrayidx4, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5062
  %9 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5063
  %mem = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %9, i32 0, i32 1, !dbg !5064
  %10 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !5064
  store %struct.rtx_def* %10, %struct.rtx_def** %x, align 8, !dbg !5065
  br label %if.end76, !dbg !5066

if.else:                                          ; preds = %if.end
  store i32 -1, i32* %best_slot_num, align 4, !dbg !5067
  store i32 -1, i32* %best_cost, align 4, !dbg !5069
  store %struct.rtx_def* null, %struct.rtx_def** %x, align 8, !dbg !5070
  store i32 0, i32* %slot_num, align 4, !dbg !5071
  br label %for.cond, !dbg !5073

for.cond:                                         ; preds = %for.inc62, %if.else
  %11 = load i32, i32* %slot_num, align 4, !dbg !5074
  %12 = load i32, i32* @ira_spilled_reg_stack_slots_num, align 4, !dbg !5076
  %cmp5 = icmp slt i32 %11, %12, !dbg !5077
  br i1 %cmp5, label %for.body, label %for.end63, !dbg !5078

for.body:                                         ; preds = %for.cond
  %13 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** @ira_spilled_reg_stack_slots, align 8, !dbg !5079
  %14 = load i32, i32* %slot_num, align 4, !dbg !5081
  %idxprom6 = sext i32 %14 to i64, !dbg !5079
  %arrayidx7 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %13, i64 %idxprom6, !dbg !5079
  store %struct.ira_spilled_reg_stack_slot* %arrayidx7, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5082
  %15 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5083
  %mem8 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %15, i32 0, i32 1, !dbg !5085
  %16 = load %struct.rtx_def*, %struct.rtx_def** %mem8, align 8, !dbg !5085
  %cmp9 = icmp eq %struct.rtx_def* %16, null, !dbg !5086
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !5087

if.then10:                                        ; preds = %for.body
  br label %for.inc62, !dbg !5088

if.end11:                                         ; preds = %for.body
  %17 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5089
  %width = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %17, i32 0, i32 2, !dbg !5091
  %18 = load i32, i32* %width, align 8, !dbg !5091
  %19 = load i32, i32* %total_size.addr, align 4, !dbg !5092
  %cmp12 = icmp ult i32 %18, %19, !dbg !5093
  br i1 %cmp12, label %if.then19, label %lor.lhs.false, !dbg !5094

lor.lhs.false:                                    ; preds = %if.end11
  %20 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5095
  %mem13 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %20, i32 0, i32 1, !dbg !5095
  %21 = load %struct.rtx_def*, %struct.rtx_def** %mem13, align 8, !dbg !5095
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !5095
  %bf.load = load i32, i32* %22, align 8, !dbg !5095
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5095
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5095
  %idxprom14 = zext i32 %bf.clear to i64, !dbg !5095
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom14, !dbg !5095
  %23 = load i8, i8* %arrayidx15, align 1, !dbg !5095
  %conv = zext i8 %23 to i16, !dbg !5095
  %conv16 = zext i16 %conv to i32, !dbg !5095
  %24 = load i32, i32* %inherent_size.addr, align 4, !dbg !5096
  %cmp17 = icmp ult i32 %conv16, %24, !dbg !5097
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !5098

if.then19:                                        ; preds = %lor.lhs.false, %if.end11
  br label %for.inc62, !dbg !5099

if.end20:                                         ; preds = %lor.lhs.false
  %25 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5100
  %spilled_regs = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %25, i32 0, i32 0, !dbg !5100
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %spilled_regs, i32 53, i32* %i), !dbg !5100
  br label %for.cond21, !dbg !5100

for.cond21:                                       ; preds = %for.inc, %if.end20
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5102
  %tobool22 = icmp ne i8 %call, 0, !dbg !5100
  br i1 %tobool22, label %for.body23, label %for.end, !dbg !5100

for.body23:                                       ; preds = %for.cond21
  %26 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !5104
  %27 = load i32, i32* %i, align 4, !dbg !5106
  %idxprom24 = zext i32 %27 to i64, !dbg !5104
  %arrayidx25 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %26, i64 %idxprom24, !dbg !5104
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx25, align 8, !dbg !5104
  store %struct.ira_allocno* %28, %struct.ira_allocno** %another_allocno, align 8, !dbg !5107
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !5108
  %30 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !5110
  %call26 = call zeroext i8 @allocnos_have_intersected_live_ranges_p(%struct.ira_allocno* %29, %struct.ira_allocno* %30), !dbg !5111
  %tobool27 = icmp ne i8 %call26, 0, !dbg !5111
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !5112

if.then28:                                        ; preds = %for.body23
  br label %cont, !dbg !5113

if.end29:                                         ; preds = %for.body23
  br label %for.inc, !dbg !5114

for.inc:                                          ; preds = %if.end29
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5102
  br label %for.cond21, !dbg !5102, !llvm.loop !5115

for.end:                                          ; preds = %for.cond21
  store i32 0, i32* %cost, align 4, !dbg !5117
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !5119
  %allocno_copies = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 15, !dbg !5119
  %32 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %allocno_copies, align 8, !dbg !5119
  store %struct.ira_allocno_copy* %32, %struct.ira_allocno_copy** %cp, align 8, !dbg !5120
  br label %for.cond30, !dbg !5121

for.cond30:                                       ; preds = %for.inc56, %for.end
  %33 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !5122
  %cmp31 = icmp ne %struct.ira_allocno_copy* %33, null, !dbg !5124
  br i1 %cmp31, label %for.body33, label %for.end57, !dbg !5125

for.body33:                                       ; preds = %for.cond30
  %34 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !5126
  %first = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %34, i32 0, i32 1, !dbg !5129
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !5129
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !5130
  %cmp34 = icmp eq %struct.ira_allocno* %35, %36, !dbg !5131
  br i1 %cmp34, label %if.then36, label %if.else37, !dbg !5132

if.then36:                                        ; preds = %for.body33
  %37 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !5133
  %next_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %37, i32 0, i32 7, !dbg !5135
  %38 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy, align 8, !dbg !5135
  store %struct.ira_allocno_copy* %38, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !5136
  %39 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !5137
  %second = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %39, i32 0, i32 2, !dbg !5138
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !5138
  store %struct.ira_allocno* %40, %struct.ira_allocno** %another_allocno, align 8, !dbg !5139
  br label %if.end45, !dbg !5140

if.else37:                                        ; preds = %for.body33
  %41 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !5141
  %second38 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %41, i32 0, i32 2, !dbg !5143
  %42 = load %struct.ira_allocno*, %struct.ira_allocno** %second38, align 8, !dbg !5143
  %43 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !5144
  %cmp39 = icmp eq %struct.ira_allocno* %42, %43, !dbg !5145
  br i1 %cmp39, label %if.then41, label %if.else43, !dbg !5146

if.then41:                                        ; preds = %if.else37
  %44 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !5147
  %next_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %44, i32 0, i32 9, !dbg !5149
  %45 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy, align 8, !dbg !5149
  store %struct.ira_allocno_copy* %45, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !5150
  %46 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !5151
  %first42 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %46, i32 0, i32 1, !dbg !5152
  %47 = load %struct.ira_allocno*, %struct.ira_allocno** %first42, align 8, !dbg !5152
  store %struct.ira_allocno* %47, %struct.ira_allocno** %another_allocno, align 8, !dbg !5153
  br label %if.end44, !dbg !5154

if.else43:                                        ; preds = %if.else37
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i32 3074, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !5155
  br label %if.end44

if.end44:                                         ; preds = %if.else43, %if.then41
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then36
  %48 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !5156
  %insn = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %48, i32 0, i32 5, !dbg !5158
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5158
  %cmp46 = icmp eq %struct.rtx_def* %49, null, !dbg !5159
  br i1 %cmp46, label %if.then48, label %if.end49, !dbg !5160

if.then48:                                        ; preds = %if.end45
  br label %for.inc56, !dbg !5161

if.end49:                                         ; preds = %if.end45
  %50 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5162
  %spilled_regs50 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %50, i32 0, i32 0, !dbg !5164
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !5165
  %regno51 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %51, i32 0, i32 1, !dbg !5165
  %52 = load i32, i32* %regno51, align 4, !dbg !5165
  %call52 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %spilled_regs50, i32 %52), !dbg !5166
  %tobool53 = icmp ne i32 %call52, 0, !dbg !5166
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !5167

if.then54:                                        ; preds = %if.end49
  %53 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !5168
  %freq = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %53, i32 0, i32 3, !dbg !5169
  %54 = load i32, i32* %freq, align 8, !dbg !5169
  %55 = load i32, i32* %cost, align 4, !dbg !5170
  %add = add nsw i32 %55, %54, !dbg !5170
  store i32 %add, i32* %cost, align 4, !dbg !5170
  br label %if.end55, !dbg !5171

if.end55:                                         ; preds = %if.then54, %if.end49
  br label %for.inc56, !dbg !5172

for.inc56:                                        ; preds = %if.end55, %if.then48
  %56 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !5173
  store %struct.ira_allocno_copy* %56, %struct.ira_allocno_copy** %cp, align 8, !dbg !5174
  br label %for.cond30, !dbg !5175, !llvm.loop !5176

for.end57:                                        ; preds = %for.cond30
  %57 = load i32, i32* %cost, align 4, !dbg !5178
  %58 = load i32, i32* %best_cost, align 4, !dbg !5180
  %cmp58 = icmp sgt i32 %57, %58, !dbg !5181
  br i1 %cmp58, label %if.then60, label %if.end61, !dbg !5182

if.then60:                                        ; preds = %for.end57
  %59 = load i32, i32* %cost, align 4, !dbg !5183
  store i32 %59, i32* %best_cost, align 4, !dbg !5185
  %60 = load i32, i32* %slot_num, align 4, !dbg !5186
  store i32 %60, i32* %best_slot_num, align 4, !dbg !5187
  br label %if.end61, !dbg !5188

if.end61:                                         ; preds = %if.then60, %for.end57
  br label %cont, !dbg !5180

cont:                                             ; preds = %if.end61, %if.then28
  call void @llvm.dbg.label(metadata !5189), !dbg !5190
  br label %for.inc62, !dbg !5191

for.inc62:                                        ; preds = %cont, %if.then19, %if.then10
  %61 = load i32, i32* %slot_num, align 4, !dbg !5192
  %inc = add nsw i32 %61, 1, !dbg !5192
  store i32 %inc, i32* %slot_num, align 4, !dbg !5192
  br label %for.cond, !dbg !5193, !llvm.loop !5194

for.end63:                                        ; preds = %for.cond
  %62 = load i32, i32* %best_cost, align 4, !dbg !5196
  %cmp64 = icmp sge i32 %62, 0, !dbg !5198
  br i1 %cmp64, label %if.then66, label %if.end75, !dbg !5199

if.then66:                                        ; preds = %for.end63
  %63 = load i32, i32* %best_slot_num, align 4, !dbg !5200
  store i32 %63, i32* %slot_num, align 4, !dbg !5202
  %64 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** @ira_spilled_reg_stack_slots, align 8, !dbg !5203
  %65 = load i32, i32* %slot_num, align 4, !dbg !5204
  %idxprom67 = sext i32 %65 to i64, !dbg !5203
  %arrayidx68 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %64, i64 %idxprom67, !dbg !5203
  store %struct.ira_spilled_reg_stack_slot* %arrayidx68, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5205
  %66 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5206
  %spilled_regs69 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %66, i32 0, i32 0, !dbg !5206
  %67 = load i32, i32* %regno.addr, align 4, !dbg !5206
  %call70 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %spilled_regs69, i32 %67), !dbg !5206
  %68 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5207
  %mem71 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %68, i32 0, i32 1, !dbg !5208
  %69 = load %struct.rtx_def*, %struct.rtx_def** %mem71, align 8, !dbg !5208
  store %struct.rtx_def* %69, %struct.rtx_def** %x, align 8, !dbg !5209
  %70 = load i32, i32* %slot_num, align 4, !dbg !5210
  %sub72 = sub nsw i32 0, %70, !dbg !5211
  %sub73 = sub nsw i32 %sub72, 2, !dbg !5212
  %71 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !5213
  %hard_regno74 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %71, i32 0, i32 3, !dbg !5213
  store i32 %sub73, i32* %hard_regno74, align 4, !dbg !5214
  br label %if.end75, !dbg !5215

if.end75:                                         ; preds = %if.then66, %for.end63
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %if.then2
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5216
  %cmp77 = icmp ne %struct.rtx_def* %72, null, !dbg !5218
  br i1 %cmp77, label %if.then79, label %if.end104, !dbg !5219

if.then79:                                        ; preds = %if.end76
  %73 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5220
  %spilled_regs80 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %73, i32 0, i32 0, !dbg !5220
  %74 = load i32, i32* %regno.addr, align 4, !dbg !5220
  %call81 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %spilled_regs80, i32 %74), !dbg !5220
  %75 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !5222
  %cmp82 = icmp sgt i32 %75, 3, !dbg !5224
  br i1 %cmp82, label %land.lhs.true, label %if.end103, !dbg !5225

land.lhs.true:                                    ; preds = %if.then79
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5226
  %tobool84 = icmp ne %struct._IO_FILE* %76, null, !dbg !5226
  br i1 %tobool84, label %if.then85, label %if.end103, !dbg !5227

if.then85:                                        ; preds = %land.lhs.true
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5228
  %78 = load i32, i32* %regno.addr, align 4, !dbg !5230
  %79 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5231
  %80 = load i32, i32* %regno.addr, align 4, !dbg !5231
  %idxprom86 = sext i32 %80 to i64, !dbg !5231
  %arrayidx87 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %79, i64 %idxprom86, !dbg !5231
  %freq88 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx87, i32 0, i32 0, !dbg !5231
  %81 = load i32, i32* %freq88, align 4, !dbg !5231
  %82 = load i32, i32* %slot_num, align 4, !dbg !5232
  %call89 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %77, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i64 0, i64 0), i32 %78, i32 %81, i32 %82), !dbg !5233
  %83 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5234
  %spilled_regs90 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %83, i32 0, i32 0, !dbg !5234
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %spilled_regs90, i32 53, i32* %i), !dbg !5234
  br label %for.cond91, !dbg !5234

for.cond91:                                       ; preds = %for.inc100, %if.then85
  %call92 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5236
  %tobool93 = icmp ne i8 %call92, 0, !dbg !5234
  br i1 %tobool93, label %for.body94, label %for.end101, !dbg !5234

for.body94:                                       ; preds = %for.cond91
  %84 = load i32, i32* %regno.addr, align 4, !dbg !5238
  %85 = load i32, i32* %i, align 4, !dbg !5241
  %cmp95 = icmp ne i32 %84, %85, !dbg !5242
  br i1 %cmp95, label %if.then97, label %if.end99, !dbg !5243

if.then97:                                        ; preds = %for.body94
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5244
  %87 = load i32, i32* %i, align 4, !dbg !5245
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i32 %87), !dbg !5246
  br label %if.end99, !dbg !5246

if.end99:                                         ; preds = %if.then97, %for.body94
  br label %for.inc100, !dbg !5247

for.inc100:                                       ; preds = %if.end99
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !5236
  br label %for.cond91, !dbg !5236, !llvm.loop !5248

for.end101:                                       ; preds = %for.cond91
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5250
  %call102 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5251
  br label %if.end103, !dbg !5252

if.end103:                                        ; preds = %for.end101, %land.lhs.true, %if.then79
  br label %if.end104, !dbg !5253

if.end104:                                        ; preds = %if.end103, %if.end76
  %89 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5254
  store %struct.rtx_def* %89, %struct.rtx_def** %retval, align 8, !dbg !5255
  br label %return, !dbg !5255

return:                                           ; preds = %if.end104, %if.then
  %90 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5256
  ret %struct.rtx_def* %90, !dbg !5256
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !5257 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5264, metadata !DIExpression()), !dbg !5265
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !5266, metadata !DIExpression()), !dbg !5267
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !5268, metadata !DIExpression()), !dbg !5269
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5270, metadata !DIExpression()), !dbg !5271
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !5272
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !5273
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !5273
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5274
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !5275
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !5276
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5277
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !5278
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !5279
  br label %while.body, !dbg !5280

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5281
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !5284
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !5284
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !5281
  br i1 %tobool, label %if.end, label %if.then, !dbg !5285

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5286
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !5288
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !5289
  br label %while.end, !dbg !5290

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5291
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !5293
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !5293
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !5294
  %9 = load i32, i32* %indx, align 8, !dbg !5294
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !5295
  %div = udiv i32 %10, 128, !dbg !5296
  %cmp = icmp uge i32 %9, %div, !dbg !5297
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !5298

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !5299

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5300
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !5301
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !5301
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !5302
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5302
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5303
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !5304
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !5305
  br label %while.body, !dbg !5280, !llvm.loop !5306

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5308
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5310
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !5310
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !5311
  %17 = load i32, i32* %indx9, align 8, !dbg !5311
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !5312
  %div10 = udiv i32 %18, 128, !dbg !5313
  %cmp11 = icmp ne i32 %17, %div10, !dbg !5314
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !5315

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5316
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !5317
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !5317
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !5318
  %21 = load i32, i32* %indx14, align 8, !dbg !5318
  %mul = mul i32 %21, 128, !dbg !5319
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !5320
  br label %if.end15, !dbg !5321

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !5322
  %div16 = udiv i32 %22, 64, !dbg !5323
  %rem = urem i32 %div16, 2, !dbg !5324
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5325
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !5326
  store i32 %rem, i32* %word_no, align 8, !dbg !5327
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5328
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !5329
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !5329
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !5330
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5331
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !5332
  %27 = load i32, i32* %word_no18, align 8, !dbg !5332
  %idxprom = zext i32 %27 to i64, !dbg !5328
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !5328
  %28 = load i64, i64* %arrayidx, align 8, !dbg !5328
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5333
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !5334
  store i64 %28, i64* %bits19, align 8, !dbg !5335
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !5336
  %rem20 = urem i32 %30, 64, !dbg !5337
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5338
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !5339
  %32 = load i64, i64* %bits21, align 8, !dbg !5340
  %sh_prom = zext i32 %rem20 to i64, !dbg !5340
  %shr = lshr i64 %32, %sh_prom, !dbg !5340
  store i64 %shr, i64* %bits21, align 8, !dbg !5340
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5341
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !5342
  %34 = load i64, i64* %bits22, align 8, !dbg !5342
  %tobool23 = icmp ne i64 %34, 0, !dbg !5343
  %lnot = xor i1 %tobool23, true, !dbg !5343
  %lnot.ext = zext i1 %lnot to i32, !dbg !5343
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !5344
  %add = add i32 %35, %lnot.ext, !dbg !5344
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !5344
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !5345
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !5346
  store i32 %36, i32* %37, align 4, !dbg !5347
  ret void, !dbg !5348
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5349 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5352, metadata !DIExpression()), !dbg !5353
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5354, metadata !DIExpression()), !dbg !5355
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5356
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5358
  %1 = load i64, i64* %bits, align 8, !dbg !5358
  %tobool = icmp ne i64 %1, 0, !dbg !5356
  br i1 %tobool, label %if.then, label %if.end, !dbg !5359

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !5360

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !5361), !dbg !5363
  br label %while.cond, !dbg !5364

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5365
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !5366
  %3 = load i64, i64* %bits1, align 8, !dbg !5366
  %and = and i64 %3, 1, !dbg !5367
  %tobool2 = icmp ne i64 %and, 0, !dbg !5368
  %lnot = xor i1 %tobool2, true, !dbg !5368
  br i1 %lnot, label %while.body, label %while.end, !dbg !5364

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5369
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !5371
  %5 = load i64, i64* %bits3, align 8, !dbg !5372
  %shr = lshr i64 %5, 1, !dbg !5372
  store i64 %shr, i64* %bits3, align 8, !dbg !5372
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !5373
  %7 = load i32, i32* %6, align 4, !dbg !5374
  %add = add i32 %7, 1, !dbg !5374
  store i32 %add, i32* %6, align 4, !dbg !5374
  br label %while.cond, !dbg !5364, !llvm.loop !5375

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !5377
  br label %return, !dbg !5377

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !5378
  %9 = load i32, i32* %8, align 4, !dbg !5379
  %add4 = add i32 %9, 64, !dbg !5380
  %sub = sub i32 %add4, 1, !dbg !5381
  %div = udiv i32 %sub, 64, !dbg !5382
  %mul = mul i32 %div, 64, !dbg !5383
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !5384
  store i32 %mul, i32* %10, align 4, !dbg !5385
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5386
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !5387
  %12 = load i32, i32* %word_no, align 8, !dbg !5388
  %inc = add i32 %12, 1, !dbg !5388
  store i32 %inc, i32* %word_no, align 8, !dbg !5388
  br label %while.body6, !dbg !5389

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !5390

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5392
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !5393
  %14 = load i32, i32* %word_no8, align 8, !dbg !5393
  %cmp = icmp ne i32 %14, 2, !dbg !5394
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !5390

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5395
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5397
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !5397
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !5398
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5399
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !5400
  %18 = load i32, i32* %word_no11, align 8, !dbg !5400
  %idxprom = zext i32 %18 to i64, !dbg !5395
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !5395
  %19 = load i64, i64* %arrayidx, align 8, !dbg !5395
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5401
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !5402
  store i64 %19, i64* %bits12, align 8, !dbg !5403
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5404
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !5406
  %22 = load i64, i64* %bits13, align 8, !dbg !5406
  %tobool14 = icmp ne i64 %22, 0, !dbg !5404
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !5407

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !5408

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !5409
  %24 = load i32, i32* %23, align 4, !dbg !5410
  %add17 = add i32 %24, 64, !dbg !5410
  store i32 %add17, i32* %23, align 4, !dbg !5410
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5411
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !5412
  %26 = load i32, i32* %word_no18, align 8, !dbg !5413
  %inc19 = add i32 %26, 1, !dbg !5413
  store i32 %inc19, i32* %word_no18, align 8, !dbg !5413
  br label %while.cond7, !dbg !5390, !llvm.loop !5414

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5416
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !5417
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !5417
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !5418
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5418
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5419
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !5420
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !5421
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5422
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !5424
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !5424
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !5422
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !5425

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !5426
  br label %return, !dbg !5426

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5427
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !5428
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !5428
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !5429
  %35 = load i32, i32* %indx, align 8, !dbg !5429
  %mul28 = mul i32 %35, 128, !dbg !5430
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !5431
  store i32 %mul28, i32* %36, align 4, !dbg !5432
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5433
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !5434
  store i32 0, i32* %word_no29, align 8, !dbg !5435
  br label %while.body6, !dbg !5389, !llvm.loop !5436

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !5438
  ret i8 %38, !dbg !5438
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @allocnos_have_intersected_live_ranges_p(%struct.ira_allocno* %a1, %struct.ira_allocno* %a2) #0 !dbg !5439 {
entry:
  %retval = alloca i8, align 1
  %a1.addr = alloca %struct.ira_allocno*, align 8
  %a2.addr = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno* %a1, %struct.ira_allocno** %a1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1.addr, metadata !5442, metadata !DIExpression()), !dbg !5443
  store %struct.ira_allocno* %a2, %struct.ira_allocno** %a2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2.addr, metadata !5444, metadata !DIExpression()), !dbg !5445
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !5446
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !5448
  %cmp = icmp eq %struct.ira_allocno* %0, %1, !dbg !5449
  br i1 %cmp, label %if.then, label %if.end, !dbg !5450

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5451
  br label %return, !dbg !5451

if.end:                                           ; preds = %entry
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !5452
  %reg = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 4, !dbg !5452
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5452
  %cmp1 = icmp ne %struct.rtx_def* %3, null, !dbg !5454
  br i1 %cmp1, label %land.lhs.true, label %if.end13, !dbg !5455

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !5456
  %reg2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 4, !dbg !5456
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg2, align 8, !dbg !5456
  %cmp3 = icmp ne %struct.rtx_def* %5, null, !dbg !5457
  br i1 %cmp3, label %land.lhs.true4, label %if.end13, !dbg !5458

land.lhs.true4:                                   ; preds = %land.lhs.true
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !5459
  %reg5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 4, !dbg !5459
  %7 = load %struct.rtx_def*, %struct.rtx_def** %reg5, align 8, !dbg !5459
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !5459
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5459
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5459
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !5459
  %8 = load i32, i32* %rt_uint, align 8, !dbg !5459
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !5460
  %reg6 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 4, !dbg !5460
  %10 = load %struct.rtx_def*, %struct.rtx_def** %reg6, align 8, !dbg !5460
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5460
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !5460
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 1, !dbg !5460
  %rt_uint10 = bitcast %union.rtunion_def* %arrayidx9 to i32*, !dbg !5460
  %11 = load i32, i32* %rt_uint10, align 8, !dbg !5460
  %cmp11 = icmp eq i32 %8, %11, !dbg !5461
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !5462

if.then12:                                        ; preds = %land.lhs.true4
  store i8 0, i8* %retval, align 1, !dbg !5463
  br label %return, !dbg !5463

if.end13:                                         ; preds = %land.lhs.true4, %land.lhs.true, %if.end
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !5464
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 20, !dbg !5464
  %13 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !5464
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !5465
  %live_ranges14 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 20, !dbg !5465
  %15 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges14, align 8, !dbg !5465
  %call = call zeroext i8 @ira_allocno_live_ranges_intersect_p(%struct.ira_allocno_live_range* %13, %struct.ira_allocno_live_range* %15), !dbg !5466
  store i8 %call, i8* %retval, align 1, !dbg !5467
  br label %return, !dbg !5467

return:                                           ; preds = %if.end13, %if.then12, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !5468
  ret i8 %16, !dbg !5468
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5469 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5472, metadata !DIExpression()), !dbg !5473
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5474, metadata !DIExpression()), !dbg !5475
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5476
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5477
  %1 = load i64, i64* %bits, align 8, !dbg !5478
  %shr = lshr i64 %1, 1, !dbg !5478
  store i64 %shr, i64* %bits, align 8, !dbg !5478
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !5479
  %3 = load i32, i32* %2, align 4, !dbg !5480
  %add = add i32 %3, 1, !dbg !5480
  store i32 %add, i32* %2, align 4, !dbg !5480
  ret void, !dbg !5481
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_mark_new_stack_slot(%struct.rtx_def* %x, i32 %regno, i32 %total_size) #0 !dbg !5482 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %regno.addr = alloca i32, align 4
  %total_size.addr = alloca i32, align 4
  %slot = alloca %struct.ira_spilled_reg_stack_slot*, align 8
  %slot_num = alloca i32, align 4
  %allocno = alloca %struct.ira_allocno*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5485, metadata !DIExpression()), !dbg !5486
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !5487, metadata !DIExpression()), !dbg !5488
  store i32 %total_size, i32* %total_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %total_size.addr, metadata !5489, metadata !DIExpression()), !dbg !5490
  call void @llvm.dbg.declare(metadata %struct.ira_spilled_reg_stack_slot** %slot, metadata !5491, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.declare(metadata i32* %slot_num, metadata !5493, metadata !DIExpression()), !dbg !5494
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno, metadata !5495, metadata !DIExpression()), !dbg !5496
  %0 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !5497
  %1 = load i32, i32* %regno.addr, align 4, !dbg !5498
  %idxprom = sext i32 %1 to i64, !dbg !5497
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %0, i64 %idxprom, !dbg !5497
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !5497
  store %struct.ira_allocno* %2, %struct.ira_allocno** %allocno, align 8, !dbg !5499
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !5500
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 3, !dbg !5500
  %4 = load i32, i32* %hard_regno, align 4, !dbg !5500
  %sub = sub nsw i32 0, %4, !dbg !5501
  %sub1 = sub nsw i32 %sub, 2, !dbg !5502
  store i32 %sub1, i32* %slot_num, align 4, !dbg !5503
  %5 = load i32, i32* %slot_num, align 4, !dbg !5504
  %cmp = icmp eq i32 %5, -1, !dbg !5506
  br i1 %cmp, label %if.then, label %if.end, !dbg !5507

if.then:                                          ; preds = %entry
  %6 = load i32, i32* @ira_spilled_reg_stack_slots_num, align 4, !dbg !5508
  %inc = add nsw i32 %6, 1, !dbg !5508
  store i32 %inc, i32* @ira_spilled_reg_stack_slots_num, align 4, !dbg !5508
  store i32 %6, i32* %slot_num, align 4, !dbg !5510
  %7 = load i32, i32* %slot_num, align 4, !dbg !5511
  %sub2 = sub nsw i32 0, %7, !dbg !5512
  %sub3 = sub nsw i32 %sub2, 2, !dbg !5513
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !5514
  %hard_regno4 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 3, !dbg !5514
  store i32 %sub3, i32* %hard_regno4, align 4, !dbg !5515
  br label %if.end, !dbg !5516

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** @ira_spilled_reg_stack_slots, align 8, !dbg !5517
  %10 = load i32, i32* %slot_num, align 4, !dbg !5518
  %idxprom5 = sext i32 %10 to i64, !dbg !5517
  %arrayidx6 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %9, i64 %idxprom5, !dbg !5517
  store %struct.ira_spilled_reg_stack_slot* %arrayidx6, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5519
  %11 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5520
  %spilled_regs = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %11, i32 0, i32 0, !dbg !5520
  call void @bitmap_initialize_stat(%struct.bitmap_head_def* %spilled_regs, %struct.bitmap_obstack* @reg_obstack), !dbg !5520
  %12 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5521
  %spilled_regs7 = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %12, i32 0, i32 0, !dbg !5521
  %13 = load i32, i32* %regno.addr, align 4, !dbg !5521
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %spilled_regs7, i32 %13), !dbg !5521
  %14 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5522
  %15 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5523
  %mem = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %15, i32 0, i32 1, !dbg !5524
  store %struct.rtx_def* %14, %struct.rtx_def** %mem, align 8, !dbg !5525
  %16 = load i32, i32* %total_size.addr, align 4, !dbg !5526
  %17 = load %struct.ira_spilled_reg_stack_slot*, %struct.ira_spilled_reg_stack_slot** %slot, align 8, !dbg !5527
  %width = getelementptr inbounds %struct.ira_spilled_reg_stack_slot, %struct.ira_spilled_reg_stack_slot* %17, i32 0, i32 2, !dbg !5528
  store i32 %16, i32* %width, align 8, !dbg !5529
  %18 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !5530
  %cmp8 = icmp sgt i32 %18, 3, !dbg !5532
  br i1 %cmp8, label %land.lhs.true, label %if.end13, !dbg !5533

land.lhs.true:                                    ; preds = %if.end
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5534
  %tobool = icmp ne %struct._IO_FILE* %19, null, !dbg !5534
  br i1 %tobool, label %if.then9, label %if.end13, !dbg !5535

if.then9:                                         ; preds = %land.lhs.true
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !5536
  %21 = load i32, i32* %regno.addr, align 4, !dbg !5537
  %22 = load %struct.reg_info_t*, %struct.reg_info_t** @reg_info_p, align 8, !dbg !5538
  %23 = load i32, i32* %regno.addr, align 4, !dbg !5538
  %idxprom10 = sext i32 %23 to i64, !dbg !5538
  %arrayidx11 = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %22, i64 %idxprom10, !dbg !5538
  %freq = getelementptr inbounds %struct.reg_info_t, %struct.reg_info_t* %arrayidx11, i32 0, i32 0, !dbg !5538
  %24 = load i32, i32* %freq, align 4, !dbg !5538
  %25 = load i32, i32* %slot_num, align 4, !dbg !5539
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.11, i64 0, i64 0), i32 %21, i32 %24, i32 %25), !dbg !5540
  br label %if.end13, !dbg !5540

if.end13:                                         ; preds = %if.then9, %land.lhs.true, %if.end
  ret void, !dbg !5541
}

; Function Attrs: noinline nounwind uwtable
define internal void @bitmap_initialize_stat(%struct.bitmap_head_def* %head, %struct.bitmap_obstack* %obstack) #0 !dbg !5542 {
entry:
  %head.addr = alloca %struct.bitmap_head_def*, align 8
  %obstack.addr = alloca %struct.bitmap_obstack*, align 8
  store %struct.bitmap_head_def* %head, %struct.bitmap_head_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %head.addr, metadata !5545, metadata !DIExpression()), !dbg !5546
  store %struct.bitmap_obstack* %obstack, %struct.bitmap_obstack** %obstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_obstack** %obstack.addr, metadata !5547, metadata !DIExpression()), !dbg !5548
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !5549
  %current = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 1, !dbg !5550
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %current, align 8, !dbg !5551
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !5552
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %1, i32 0, i32 0, !dbg !5553
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %first, align 8, !dbg !5554
  %2 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** %obstack.addr, align 8, !dbg !5555
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %head.addr, align 8, !dbg !5556
  %obstack1 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 3, !dbg !5557
  store %struct.bitmap_obstack* %2, %struct.bitmap_obstack** %obstack1, align 8, !dbg !5558
  ret void, !dbg !5559
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @ira_better_spill_reload_regno_p(i32* %regnos, i32* %other_regnos, %struct.rtx_def* %in, %struct.rtx_def* %out, %struct.rtx_def* %insn) #0 !dbg !5560 {
entry:
  %retval = alloca i8, align 1
  %regnos.addr = alloca i32*, align 8
  %other_regnos.addr = alloca i32*, align 8
  %in.addr = alloca %struct.rtx_def*, align 8
  %out.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %cost = alloca i32, align 4
  %other_cost = alloca i32, align 4
  %length = alloca i32, align 4
  %other_length = alloca i32, align 4
  %nrefs = alloca i32, align 4
  %other_nrefs = alloca i32, align 4
  %call_used_count = alloca i32, align 4
  %other_call_used_count = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %other_hard_regno = alloca i32, align 4
  store i32* %regnos, i32** %regnos.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %regnos.addr, metadata !5563, metadata !DIExpression()), !dbg !5564
  store i32* %other_regnos, i32** %other_regnos.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %other_regnos.addr, metadata !5565, metadata !DIExpression()), !dbg !5566
  store %struct.rtx_def* %in, %struct.rtx_def** %in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %in.addr, metadata !5567, metadata !DIExpression()), !dbg !5568
  store %struct.rtx_def* %out, %struct.rtx_def** %out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %out.addr, metadata !5569, metadata !DIExpression()), !dbg !5570
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5571, metadata !DIExpression()), !dbg !5572
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !5573, metadata !DIExpression()), !dbg !5574
  call void @llvm.dbg.declare(metadata i32* %other_cost, metadata !5575, metadata !DIExpression()), !dbg !5576
  call void @llvm.dbg.declare(metadata i32* %length, metadata !5577, metadata !DIExpression()), !dbg !5578
  call void @llvm.dbg.declare(metadata i32* %other_length, metadata !5579, metadata !DIExpression()), !dbg !5580
  call void @llvm.dbg.declare(metadata i32* %nrefs, metadata !5581, metadata !DIExpression()), !dbg !5582
  call void @llvm.dbg.declare(metadata i32* %other_nrefs, metadata !5583, metadata !DIExpression()), !dbg !5584
  call void @llvm.dbg.declare(metadata i32* %call_used_count, metadata !5585, metadata !DIExpression()), !dbg !5586
  call void @llvm.dbg.declare(metadata i32* %other_call_used_count, metadata !5587, metadata !DIExpression()), !dbg !5588
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !5589, metadata !DIExpression()), !dbg !5590
  call void @llvm.dbg.declare(metadata i32* %other_hard_regno, metadata !5591, metadata !DIExpression()), !dbg !5592
  %0 = load i32*, i32** %regnos.addr, align 8, !dbg !5593
  %1 = load %struct.rtx_def*, %struct.rtx_def** %in.addr, align 8, !dbg !5594
  %2 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8, !dbg !5595
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5596
  %call = call i32 @calculate_spill_cost(i32* %0, %struct.rtx_def* %1, %struct.rtx_def* %2, %struct.rtx_def* %3, i32* %length, i32* %nrefs, i32* %call_used_count, i32* %hard_regno), !dbg !5597
  store i32 %call, i32* %cost, align 4, !dbg !5598
  %4 = load i32*, i32** %other_regnos.addr, align 8, !dbg !5599
  %5 = load %struct.rtx_def*, %struct.rtx_def** %in.addr, align 8, !dbg !5600
  %6 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8, !dbg !5601
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5602
  %call1 = call i32 @calculate_spill_cost(i32* %4, %struct.rtx_def* %5, %struct.rtx_def* %6, %struct.rtx_def* %7, i32* %other_length, i32* %other_nrefs, i32* %other_call_used_count, i32* %other_hard_regno), !dbg !5603
  store i32 %call1, i32* %other_cost, align 4, !dbg !5604
  %8 = load i32, i32* %nrefs, align 4, !dbg !5605
  %cmp = icmp eq i32 %8, 0, !dbg !5607
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5608

land.lhs.true:                                    ; preds = %entry
  %9 = load i32, i32* %other_nrefs, align 4, !dbg !5609
  %cmp2 = icmp ne i32 %9, 0, !dbg !5610
  br i1 %cmp2, label %if.then, label %if.end, !dbg !5611

if.then:                                          ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !5612
  br label %return, !dbg !5612

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load i32, i32* %nrefs, align 4, !dbg !5613
  %cmp3 = icmp ne i32 %10, 0, !dbg !5615
  br i1 %cmp3, label %land.lhs.true4, label %if.end7, !dbg !5616

land.lhs.true4:                                   ; preds = %if.end
  %11 = load i32, i32* %other_nrefs, align 4, !dbg !5617
  %cmp5 = icmp eq i32 %11, 0, !dbg !5618
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !5619

if.then6:                                         ; preds = %land.lhs.true4
  store i8 0, i8* %retval, align 1, !dbg !5620
  br label %return, !dbg !5620

if.end7:                                          ; preds = %land.lhs.true4, %if.end
  %12 = load i32, i32* %cost, align 4, !dbg !5621
  %13 = load i32, i32* %other_cost, align 4, !dbg !5623
  %cmp8 = icmp ne i32 %12, %13, !dbg !5624
  br i1 %cmp8, label %if.then9, label %if.end12, !dbg !5625

if.then9:                                         ; preds = %if.end7
  %14 = load i32, i32* %cost, align 4, !dbg !5626
  %15 = load i32, i32* %other_cost, align 4, !dbg !5627
  %cmp10 = icmp slt i32 %14, %15, !dbg !5628
  %conv = zext i1 %cmp10 to i32, !dbg !5628
  %conv11 = trunc i32 %conv to i8, !dbg !5626
  store i8 %conv11, i8* %retval, align 1, !dbg !5629
  br label %return, !dbg !5629

if.end12:                                         ; preds = %if.end7
  %16 = load i32, i32* %length, align 4, !dbg !5630
  %17 = load i32, i32* %other_length, align 4, !dbg !5632
  %cmp13 = icmp ne i32 %16, %17, !dbg !5633
  br i1 %cmp13, label %if.then15, label %if.end19, !dbg !5634

if.then15:                                        ; preds = %if.end12
  %18 = load i32, i32* %length, align 4, !dbg !5635
  %19 = load i32, i32* %other_length, align 4, !dbg !5636
  %cmp16 = icmp sgt i32 %18, %19, !dbg !5637
  %conv17 = zext i1 %cmp16 to i32, !dbg !5637
  %conv18 = trunc i32 %conv17 to i8, !dbg !5635
  store i8 %conv18, i8* %retval, align 1, !dbg !5638
  br label %return, !dbg !5638

if.end19:                                         ; preds = %if.end12
  %20 = load i32, i32* %hard_regno, align 4, !dbg !5639
  %cmp20 = icmp sge i32 %20, 0, !dbg !5641
  br i1 %cmp20, label %land.lhs.true22, label %if.end31, !dbg !5642

land.lhs.true22:                                  ; preds = %if.end19
  %21 = load i32, i32* %other_hard_regno, align 4, !dbg !5643
  %cmp23 = icmp sge i32 %21, 0, !dbg !5644
  br i1 %cmp23, label %if.then25, label %if.end31, !dbg !5645

if.then25:                                        ; preds = %land.lhs.true22
  %22 = load i32, i32* %hard_regno, align 4, !dbg !5646
  %idxprom = sext i32 %22 to i64, !dbg !5647
  %arrayidx = getelementptr inbounds [53 x i32], [53 x i32]* @inv_reg_alloc_order, i64 0, i64 %idxprom, !dbg !5647
  %23 = load i32, i32* %arrayidx, align 4, !dbg !5647
  %24 = load i32, i32* %other_hard_regno, align 4, !dbg !5648
  %idxprom26 = sext i32 %24 to i64, !dbg !5649
  %arrayidx27 = getelementptr inbounds [53 x i32], [53 x i32]* @inv_reg_alloc_order, i64 0, i64 %idxprom26, !dbg !5649
  %25 = load i32, i32* %arrayidx27, align 4, !dbg !5649
  %cmp28 = icmp slt i32 %23, %25, !dbg !5650
  %conv29 = zext i1 %cmp28 to i32, !dbg !5650
  %conv30 = trunc i32 %conv29 to i8, !dbg !5651
  store i8 %conv30, i8* %retval, align 1, !dbg !5652
  br label %return, !dbg !5652

if.end31:                                         ; preds = %land.lhs.true22, %if.end19
  store i8 0, i8* %retval, align 1, !dbg !5653
  br label %return, !dbg !5653

return:                                           ; preds = %if.end31, %if.then25, %if.then15, %if.then9, %if.then6, %if.then
  %26 = load i8, i8* %retval, align 1, !dbg !5654
  ret i8 %26, !dbg !5654
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @calculate_spill_cost(i32* %regnos, %struct.rtx_def* %in, %struct.rtx_def* %out, %struct.rtx_def* %insn, i32* %excess_pressure_live_length, i32* %nrefs, i32* %call_used_count, i32* %first_hard_regno) #0 !dbg !5655 {
entry:
  %regnos.addr = alloca i32*, align 8
  %in.addr = alloca %struct.rtx_def*, align 8
  %out.addr = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %excess_pressure_live_length.addr = alloca i32*, align 8
  %nrefs.addr = alloca i32*, align 8
  %call_used_count.addr = alloca i32*, align 8
  %first_hard_regno.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %cost = alloca i32, align 4
  %regno = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %j = alloca i32, align 4
  %count = alloca i32, align 4
  %saved_cost = alloca i32, align 4
  %nregs = alloca i32, align 4
  %in_p = alloca i8, align 1
  %out_p = alloca i8, align 1
  %length = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  store i32* %regnos, i32** %regnos.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %regnos.addr, metadata !5658, metadata !DIExpression()), !dbg !5659
  store %struct.rtx_def* %in, %struct.rtx_def** %in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %in.addr, metadata !5660, metadata !DIExpression()), !dbg !5661
  store %struct.rtx_def* %out, %struct.rtx_def** %out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %out.addr, metadata !5662, metadata !DIExpression()), !dbg !5663
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5664, metadata !DIExpression()), !dbg !5665
  store i32* %excess_pressure_live_length, i32** %excess_pressure_live_length.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %excess_pressure_live_length.addr, metadata !5666, metadata !DIExpression()), !dbg !5667
  store i32* %nrefs, i32** %nrefs.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %nrefs.addr, metadata !5668, metadata !DIExpression()), !dbg !5669
  store i32* %call_used_count, i32** %call_used_count.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %call_used_count.addr, metadata !5670, metadata !DIExpression()), !dbg !5671
  store i32* %first_hard_regno, i32** %first_hard_regno.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %first_hard_regno.addr, metadata !5672, metadata !DIExpression()), !dbg !5673
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5674, metadata !DIExpression()), !dbg !5675
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !5676, metadata !DIExpression()), !dbg !5677
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !5678, metadata !DIExpression()), !dbg !5679
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !5680, metadata !DIExpression()), !dbg !5681
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5682, metadata !DIExpression()), !dbg !5683
  call void @llvm.dbg.declare(metadata i32* %count, metadata !5684, metadata !DIExpression()), !dbg !5685
  call void @llvm.dbg.declare(metadata i32* %saved_cost, metadata !5686, metadata !DIExpression()), !dbg !5687
  call void @llvm.dbg.declare(metadata i32* %nregs, metadata !5688, metadata !DIExpression()), !dbg !5689
  call void @llvm.dbg.declare(metadata i8* %in_p, metadata !5690, metadata !DIExpression()), !dbg !5691
  call void @llvm.dbg.declare(metadata i8* %out_p, metadata !5692, metadata !DIExpression()), !dbg !5693
  call void @llvm.dbg.declare(metadata i32* %length, metadata !5694, metadata !DIExpression()), !dbg !5695
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !5696, metadata !DIExpression()), !dbg !5697
  %0 = load i32*, i32** %nrefs.addr, align 8, !dbg !5698
  store i32 0, i32* %0, align 4, !dbg !5699
  store i32 0, i32* %i, align 4, !dbg !5700
  store i32 0, i32* %cost, align 4, !dbg !5702
  store i32 0, i32* %count, align 4, !dbg !5703
  store i32 0, i32* %length, align 4, !dbg !5704
  br label %for.cond, !dbg !5705

for.cond:                                         ; preds = %for.inc97, %entry
  %1 = load i32*, i32** %regnos.addr, align 8, !dbg !5706
  %2 = load i32, i32* %i, align 4, !dbg !5709
  %idxprom = sext i32 %2 to i64, !dbg !5706
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !5706
  %3 = load i32, i32* %arrayidx, align 4, !dbg !5706
  store i32 %3, i32* %regno, align 4, !dbg !5710
  %4 = load i32, i32* %regno, align 4, !dbg !5711
  %cmp = icmp slt i32 %4, 0, !dbg !5713
  br i1 %cmp, label %if.then, label %if.end, !dbg !5714

if.then:                                          ; preds = %for.cond
  br label %for.end99, !dbg !5715

if.end:                                           ; preds = %for.cond
  %5 = load i32, i32* %regno, align 4, !dbg !5716
  %call = call i32 @REG_N_REFS(i32 %5), !dbg !5717
  %6 = load i32*, i32** %nrefs.addr, align 8, !dbg !5718
  %7 = load i32, i32* %6, align 4, !dbg !5719
  %add = add nsw i32 %7, %call, !dbg !5719
  store i32 %add, i32* %6, align 4, !dbg !5719
  %8 = load i16*, i16** @reg_renumber, align 8, !dbg !5720
  %9 = load i32, i32* %regno, align 4, !dbg !5721
  %idxprom1 = sext i32 %9 to i64, !dbg !5720
  %arrayidx2 = getelementptr inbounds i16, i16* %8, i64 %idxprom1, !dbg !5720
  %10 = load i16, i16* %arrayidx2, align 2, !dbg !5720
  %conv = sext i16 %10 to i32, !dbg !5720
  store i32 %conv, i32* %hard_regno, align 4, !dbg !5722
  %11 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_regno_allocno_map, align 8, !dbg !5723
  %12 = load i32, i32* %regno, align 4, !dbg !5724
  %idxprom3 = sext i32 %12 to i64, !dbg !5723
  %arrayidx4 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %11, i64 %idxprom3, !dbg !5723
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx4, align 8, !dbg !5723
  store %struct.ira_allocno* %13, %struct.ira_allocno** %a, align 8, !dbg !5725
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5726
  %excess_pressure_points_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 14, !dbg !5726
  %15 = load i32, i32* %excess_pressure_points_num, align 4, !dbg !5726
  %16 = load i32, i32* %length, align 4, !dbg !5727
  %add5 = add nsw i32 %16, %15, !dbg !5727
  store i32 %add5, i32* %length, align 4, !dbg !5727
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5728
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 12, !dbg !5728
  %18 = load i32, i32* %memory_cost, align 4, !dbg !5728
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5729
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 10, !dbg !5729
  %20 = load i32, i32* %cover_class_cost, align 4, !dbg !5729
  %sub = sub nsw i32 %18, %20, !dbg !5730
  %21 = load i32, i32* %cost, align 4, !dbg !5731
  %add6 = add nsw i32 %21, %sub, !dbg !5731
  store i32 %add6, i32* %cost, align 4, !dbg !5731
  %22 = load i32, i32* %hard_regno, align 4, !dbg !5732
  %idxprom7 = sext i32 %22 to i64, !dbg !5733
  %arrayidx8 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom7, !dbg !5733
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5734
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 2, !dbg !5734
  %24 = load i32, i32* %mode, align 8, !dbg !5734
  %idxprom9 = zext i32 %24 to i64, !dbg !5733
  %arrayidx10 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx8, i64 0, i64 %idxprom9, !dbg !5733
  %25 = load i8, i8* %arrayidx10, align 1, !dbg !5733
  %conv11 = zext i8 %25 to i32, !dbg !5733
  store i32 %conv11, i32* %nregs, align 4, !dbg !5735
  store i32 0, i32* %j, align 4, !dbg !5736
  br label %for.cond12, !dbg !5738

for.cond12:                                       ; preds = %for.inc, %if.end
  %26 = load i32, i32* %j, align 4, !dbg !5739
  %27 = load i32, i32* %nregs, align 4, !dbg !5741
  %cmp13 = icmp slt i32 %26, %27, !dbg !5742
  br i1 %cmp13, label %for.body, label %for.end, !dbg !5743

for.body:                                         ; preds = %for.cond12
  %28 = load i64, i64* @call_used_reg_set, align 8, !dbg !5744
  %29 = load i32, i32* %hard_regno, align 4, !dbg !5744
  %30 = load i32, i32* %j, align 4, !dbg !5744
  %add15 = add nsw i32 %29, %30, !dbg !5744
  %sh_prom = zext i32 %add15 to i64, !dbg !5744
  %shl = shl i64 1, %sh_prom, !dbg !5744
  %and = and i64 %28, %shl, !dbg !5744
  %tobool = icmp ne i64 %and, 0, !dbg !5744
  br i1 %tobool, label %if.end17, label %if.then16, !dbg !5746

if.then16:                                        ; preds = %for.body
  br label %for.end, !dbg !5747

if.end17:                                         ; preds = %for.body
  br label %for.inc, !dbg !5744

for.inc:                                          ; preds = %if.end17
  %31 = load i32, i32* %j, align 4, !dbg !5748
  %inc = add nsw i32 %31, 1, !dbg !5748
  store i32 %inc, i32* %j, align 4, !dbg !5748
  br label %for.cond12, !dbg !5749, !llvm.loop !5750

for.end:                                          ; preds = %if.then16, %for.cond12
  %32 = load i32, i32* %j, align 4, !dbg !5752
  %33 = load i32, i32* %nregs, align 4, !dbg !5754
  %cmp18 = icmp eq i32 %32, %33, !dbg !5755
  br i1 %cmp18, label %if.then20, label %if.end22, !dbg !5756

if.then20:                                        ; preds = %for.end
  %34 = load i32, i32* %count, align 4, !dbg !5757
  %inc21 = add nsw i32 %34, 1, !dbg !5757
  store i32 %inc21, i32* %count, align 4, !dbg !5757
  br label %if.end22, !dbg !5758

if.end22:                                         ; preds = %if.then20, %for.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %in.addr, align 8, !dbg !5759
  %tobool23 = icmp ne %struct.rtx_def* %35, null, !dbg !5759
  br i1 %tobool23, label %land.lhs.true, label %land.end, !dbg !5760

land.lhs.true:                                    ; preds = %if.end22
  %36 = load %struct.rtx_def*, %struct.rtx_def** %in.addr, align 8, !dbg !5761
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !5761
  %bf.load = load i32, i32* %37, align 8, !dbg !5761
  %bf.clear = and i32 %bf.load, 65535, !dbg !5761
  %cmp24 = icmp eq i32 %bf.clear, 37, !dbg !5761
  br i1 %cmp24, label %land.rhs, label %land.end, !dbg !5762

land.rhs:                                         ; preds = %land.lhs.true
  %38 = load %struct.rtx_def*, %struct.rtx_def** %in.addr, align 8, !dbg !5763
  %call26 = call i32 @rhs_regno(%struct.rtx_def* %38), !dbg !5763
  %39 = load i32, i32* %hard_regno, align 4, !dbg !5764
  %cmp27 = icmp eq i32 %call26, %39, !dbg !5765
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.end22
  %40 = phi i1 [ false, %land.lhs.true ], [ false, %if.end22 ], [ %cmp27, %land.rhs ], !dbg !5766
  %land.ext = zext i1 %40 to i32, !dbg !5762
  %conv29 = trunc i32 %land.ext to i8, !dbg !5759
  store i8 %conv29, i8* %in_p, align 1, !dbg !5767
  %41 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8, !dbg !5768
  %tobool30 = icmp ne %struct.rtx_def* %41, null, !dbg !5768
  br i1 %tobool30, label %land.lhs.true31, label %land.end40, !dbg !5769

land.lhs.true31:                                  ; preds = %land.end
  %42 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8, !dbg !5770
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !5770
  %bf.load32 = load i32, i32* %43, align 8, !dbg !5770
  %bf.clear33 = and i32 %bf.load32, 65535, !dbg !5770
  %cmp34 = icmp eq i32 %bf.clear33, 37, !dbg !5770
  br i1 %cmp34, label %land.rhs36, label %land.end40, !dbg !5771

land.rhs36:                                       ; preds = %land.lhs.true31
  %44 = load %struct.rtx_def*, %struct.rtx_def** %out.addr, align 8, !dbg !5772
  %call37 = call i32 @rhs_regno(%struct.rtx_def* %44), !dbg !5772
  %45 = load i32, i32* %hard_regno, align 4, !dbg !5773
  %cmp38 = icmp eq i32 %call37, %45, !dbg !5774
  br label %land.end40

land.end40:                                       ; preds = %land.rhs36, %land.lhs.true31, %land.end
  %46 = phi i1 [ false, %land.lhs.true31 ], [ false, %land.end ], [ %cmp38, %land.rhs36 ], !dbg !5766
  %land.ext41 = zext i1 %46 to i32, !dbg !5771
  %conv42 = trunc i32 %land.ext41 to i8, !dbg !5768
  store i8 %conv42, i8* %out_p, align 1, !dbg !5775
  %47 = load i8, i8* %in_p, align 1, !dbg !5776
  %conv43 = zext i8 %47 to i32, !dbg !5776
  %tobool44 = icmp ne i32 %conv43, 0, !dbg !5776
  br i1 %tobool44, label %land.lhs.true47, label %lor.lhs.false, !dbg !5778

lor.lhs.false:                                    ; preds = %land.end40
  %48 = load i8, i8* %out_p, align 1, !dbg !5779
  %conv45 = zext i8 %48 to i32, !dbg !5779
  %tobool46 = icmp ne i32 %conv45, 0, !dbg !5779
  br i1 %tobool46, label %land.lhs.true47, label %if.end96, !dbg !5780

land.lhs.true47:                                  ; preds = %lor.lhs.false, %land.end40
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5781
  %50 = load i32, i32* %hard_regno, align 4, !dbg !5782
  %call48 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %49, i32 1, i32 %50), !dbg !5783
  %cmp49 = icmp ne %struct.rtx_def* %call48, null, !dbg !5784
  br i1 %cmp49, label %if.then51, label %if.end96, !dbg !5785

if.then51:                                        ; preds = %land.lhs.true47
  store i32 0, i32* %saved_cost, align 4, !dbg !5786
  %51 = load i8, i8* %in_p, align 1, !dbg !5788
  %tobool52 = icmp ne i8 %51, 0, !dbg !5788
  br i1 %tobool52, label %if.then53, label %if.end62, !dbg !5790

if.then53:                                        ; preds = %if.then51
  %52 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5791
  %mode54 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %52, i32 0, i32 2, !dbg !5791
  %53 = load i32, i32* %mode54, align 8, !dbg !5791
  %idxprom55 = zext i32 %53 to i64, !dbg !5792
  %arrayidx56 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom55, !dbg !5792
  %54 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5793
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %54, i32 0, i32 9, !dbg !5793
  %55 = load i32, i32* %cover_class, align 8, !dbg !5793
  %idxprom57 = zext i32 %55 to i64, !dbg !5792
  %arrayidx58 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx56, i64 0, i64 %idxprom57, !dbg !5792
  %arrayidx59 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx58, i64 0, i64 1, !dbg !5792
  %56 = load i16, i16* %arrayidx59, align 2, !dbg !5792
  %conv60 = sext i16 %56 to i32, !dbg !5792
  %57 = load i32, i32* %saved_cost, align 4, !dbg !5794
  %add61 = add nsw i32 %57, %conv60, !dbg !5794
  store i32 %add61, i32* %saved_cost, align 4, !dbg !5794
  br label %if.end62, !dbg !5795

if.end62:                                         ; preds = %if.then53, %if.then51
  %58 = load i8, i8* %out_p, align 1, !dbg !5796
  %tobool63 = icmp ne i8 %58, 0, !dbg !5796
  br i1 %tobool63, label %if.then64, label %if.end74, !dbg !5798

if.then64:                                        ; preds = %if.end62
  %59 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5799
  %mode65 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %59, i32 0, i32 2, !dbg !5799
  %60 = load i32, i32* %mode65, align 8, !dbg !5799
  %idxprom66 = zext i32 %60 to i64, !dbg !5800
  %arrayidx67 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom66, !dbg !5800
  %61 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5801
  %cover_class68 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %61, i32 0, i32 9, !dbg !5801
  %62 = load i32, i32* %cover_class68, align 8, !dbg !5801
  %idxprom69 = zext i32 %62 to i64, !dbg !5800
  %arrayidx70 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx67, i64 0, i64 %idxprom69, !dbg !5800
  %arrayidx71 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx70, i64 0, i64 0, !dbg !5800
  %63 = load i16, i16* %arrayidx71, align 4, !dbg !5800
  %conv72 = sext i16 %63 to i32, !dbg !5800
  %64 = load i32, i32* %saved_cost, align 4, !dbg !5802
  %add73 = add nsw i32 %64, %conv72, !dbg !5802
  store i32 %add73, i32* %saved_cost, align 4, !dbg !5802
  br label %if.end74, !dbg !5803

if.end74:                                         ; preds = %if.then64, %if.end62
  %65 = load i32, i32* @optimize_size, align 4, !dbg !5804
  %tobool75 = icmp ne i32 %65, 0, !dbg !5804
  br i1 %tobool75, label %cond.true, label %lor.lhs.false76, !dbg !5804

lor.lhs.false76:                                  ; preds = %if.end74
  %66 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !5804
  %tobool77 = icmp ne i32 %66, 0, !dbg !5804
  br i1 %tobool77, label %land.lhs.true78, label %cond.false, !dbg !5804

land.lhs.true78:                                  ; preds = %lor.lhs.false76
  %67 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5804
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %67, i64 0, !dbg !5804
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5804
  %68 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5804
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %68, i32 0, i32 0, !dbg !5804
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5804
  %count79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 8, !dbg !5804
  %70 = load i64, i64* %count79, align 8, !dbg !5804
  %tobool80 = icmp ne i64 %70, 0, !dbg !5804
  br i1 %tobool80, label %cond.false, label %cond.true, !dbg !5804

cond.true:                                        ; preds = %land.lhs.true78, %if.end74
  br label %cond.end92, !dbg !5804

cond.false:                                       ; preds = %land.lhs.true78, %lor.lhs.false76
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5804
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !5804
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5804
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !5804
  %rt_bb = bitcast %union.rtunion_def* %arrayidx81 to %struct.basic_block_def**, !dbg !5804
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !5804
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %72, i32 0, i32 11, !dbg !5804
  %73 = load i32, i32* %frequency, align 8, !dbg !5804
  %mul = mul nsw i32 %73, 1000, !dbg !5804
  %div = sdiv i32 %mul, 10000, !dbg !5804
  %tobool82 = icmp ne i32 %div, 0, !dbg !5804
  br i1 %tobool82, label %cond.true83, label %cond.false91, !dbg !5804

cond.true83:                                      ; preds = %cond.false
  %74 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5804
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !5804
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !5804
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 3, !dbg !5804
  %rt_bb87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.basic_block_def**, !dbg !5804
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb87, align 8, !dbg !5804
  %frequency88 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 11, !dbg !5804
  %76 = load i32, i32* %frequency88, align 8, !dbg !5804
  %mul89 = mul nsw i32 %76, 1000, !dbg !5804
  %div90 = sdiv i32 %mul89, 10000, !dbg !5804
  br label %cond.end, !dbg !5804

cond.false91:                                     ; preds = %cond.false
  br label %cond.end, !dbg !5804

cond.end:                                         ; preds = %cond.false91, %cond.true83
  %cond = phi i32 [ %div90, %cond.true83 ], [ 1, %cond.false91 ], !dbg !5804
  br label %cond.end92, !dbg !5804

cond.end92:                                       ; preds = %cond.end, %cond.true
  %cond93 = phi i32 [ 1000, %cond.true ], [ %cond, %cond.end ], !dbg !5804
  %77 = load i32, i32* %saved_cost, align 4, !dbg !5805
  %mul94 = mul nsw i32 %cond93, %77, !dbg !5806
  %78 = load i32, i32* %cost, align 4, !dbg !5807
  %sub95 = sub nsw i32 %78, %mul94, !dbg !5807
  store i32 %sub95, i32* %cost, align 4, !dbg !5807
  br label %if.end96, !dbg !5808

if.end96:                                         ; preds = %cond.end92, %land.lhs.true47, %lor.lhs.false
  br label %for.inc97, !dbg !5809

for.inc97:                                        ; preds = %if.end96
  %79 = load i32, i32* %i, align 4, !dbg !5810
  %inc98 = add nsw i32 %79, 1, !dbg !5810
  store i32 %inc98, i32* %i, align 4, !dbg !5810
  br label %for.cond, !dbg !5811, !llvm.loop !5812

for.end99:                                        ; preds = %if.then
  %80 = load i32, i32* %length, align 4, !dbg !5815
  %81 = load i32*, i32** %excess_pressure_live_length.addr, align 8, !dbg !5816
  store i32 %80, i32* %81, align 4, !dbg !5817
  %82 = load i32, i32* %count, align 4, !dbg !5818
  %83 = load i32*, i32** %call_used_count.addr, align 8, !dbg !5819
  store i32 %82, i32* %83, align 4, !dbg !5820
  store i32 -1, i32* %hard_regno, align 4, !dbg !5821
  %84 = load i32*, i32** %regnos.addr, align 8, !dbg !5822
  %arrayidx100 = getelementptr inbounds i32, i32* %84, i64 0, !dbg !5822
  %85 = load i32, i32* %arrayidx100, align 4, !dbg !5822
  %cmp101 = icmp sge i32 %85, 0, !dbg !5824
  br i1 %cmp101, label %if.then103, label %if.end108, !dbg !5825

if.then103:                                       ; preds = %for.end99
  %86 = load i16*, i16** @reg_renumber, align 8, !dbg !5826
  %87 = load i32*, i32** %regnos.addr, align 8, !dbg !5828
  %arrayidx104 = getelementptr inbounds i32, i32* %87, i64 0, !dbg !5828
  %88 = load i32, i32* %arrayidx104, align 4, !dbg !5828
  %idxprom105 = sext i32 %88 to i64, !dbg !5826
  %arrayidx106 = getelementptr inbounds i16, i16* %86, i64 %idxprom105, !dbg !5826
  %89 = load i16, i16* %arrayidx106, align 2, !dbg !5826
  %conv107 = sext i16 %89 to i32, !dbg !5826
  store i32 %conv107, i32* %hard_regno, align 4, !dbg !5829
  br label %if.end108, !dbg !5830

if.end108:                                        ; preds = %if.then103, %for.end99
  %90 = load i32, i32* %hard_regno, align 4, !dbg !5831
  %91 = load i32*, i32** %first_hard_regno.addr, align 8, !dbg !5832
  store i32 %90, i32* %91, align 4, !dbg !5833
  %92 = load i32, i32* %cost, align 4, !dbg !5834
  ret i32 %92, !dbg !5835
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_initiate_assign() #0 !dbg !5836 {
entry:
  %0 = load i32, i32* @ira_allocnos_num, align 4, !dbg !5839
  %conv = sext i32 %0 to i64, !dbg !5839
  %mul = mul i64 8, %conv, !dbg !5840
  %call = call i8* @ira_allocate(i64 %mul), !dbg !5841
  %1 = bitcast i8* %call to %struct.ira_allocno**, !dbg !5842
  store %struct.ira_allocno** %1, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !5843
  %call1 = call %struct.bitmap_head_def* @ira_allocate_bitmap(), !dbg !5844
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** @consideration_allocno_bitmap, align 8, !dbg !5845
  call void @initiate_cost_update(), !dbg !5846
  %2 = load i32, i32* @ira_allocnos_num, align 4, !dbg !5847
  %conv2 = sext i32 %2 to i64, !dbg !5847
  %mul3 = mul i64 4, %conv2, !dbg !5848
  %call4 = call i8* @ira_allocate(i64 %mul3), !dbg !5849
  %3 = bitcast i8* %call4 to i32*, !dbg !5850
  store i32* %3, i32** @allocno_priorities, align 8, !dbg !5851
  ret void, !dbg !5852
}

; Function Attrs: noinline nounwind uwtable
define internal void @initiate_cost_update() #0 !dbg !5853 {
entry:
  %size = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size, metadata !5854, metadata !DIExpression()), !dbg !5855
  %0 = load i32, i32* @ira_allocnos_num, align 4, !dbg !5856
  %conv = sext i32 %0 to i64, !dbg !5856
  %mul = mul i64 %conv, 16, !dbg !5857
  store i64 %mul, i64* %size, align 8, !dbg !5858
  %1 = load i64, i64* %size, align 8, !dbg !5859
  %call = call i8* @ira_allocate(i64 %1), !dbg !5860
  %2 = bitcast i8* %call to %struct.update_cost_queue_elem*, !dbg !5861
  store %struct.update_cost_queue_elem* %2, %struct.update_cost_queue_elem** @update_cost_queue_elems, align 8, !dbg !5862
  %3 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** @update_cost_queue_elems, align 8, !dbg !5863
  %4 = bitcast %struct.update_cost_queue_elem* %3 to i8*, !dbg !5864
  %5 = load i64, i64* %size, align 8, !dbg !5865
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 %5, i1 false), !dbg !5864
  store i32 0, i32* @update_cost_check, align 4, !dbg !5866
  ret void, !dbg !5867
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_finish_assign() #0 !dbg !5868 {
entry:
  %0 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !5869
  %1 = bitcast %struct.ira_allocno** %0 to i8*, !dbg !5869
  call void @ira_free(i8* %1), !dbg !5870
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @consideration_allocno_bitmap, align 8, !dbg !5871
  call void @ira_free_bitmap(%struct.bitmap_head_def* %2), !dbg !5872
  call void @finish_cost_update(), !dbg !5873
  %3 = load i32*, i32** @allocno_priorities, align 8, !dbg !5874
  %4 = bitcast i32* %3 to i8*, !dbg !5874
  call void @ira_free(i8* %4), !dbg !5875
  ret void, !dbg !5876
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_cost_update() #0 !dbg !5877 {
entry:
  %0 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** @update_cost_queue_elems, align 8, !dbg !5878
  %1 = bitcast %struct.update_cost_queue_elem* %0 to i8*, !dbg !5878
  call void @ira_free(i8* %1), !dbg !5879
  ret void, !dbg !5880
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ira_color() #0 !dbg !5881 {
entry:
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !5882, metadata !DIExpression()), !dbg !5883
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !5884, metadata !DIExpression()), !dbg !5885
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !5886
  br label %for.cond, !dbg !5886

for.cond:                                         ; preds = %for.body, %entry
  %call = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !5888
  %tobool = icmp ne i8 %call, 0, !dbg !5886
  br i1 %tobool, label %for.body, label %for.end, !dbg !5886

for.body:                                         ; preds = %for.cond
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5890
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 12, !dbg !5890
  %1 = load i32, i32* %memory_cost, align 4, !dbg !5890
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5892
  %updated_memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 13, !dbg !5892
  store i32 %1, i32* %updated_memory_cost, align 8, !dbg !5893
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5894
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 10, !dbg !5894
  %4 = load i32, i32* %cover_class_cost, align 4, !dbg !5894
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5895
  %updated_cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 11, !dbg !5895
  store i32 %4, i32* %updated_cover_class_cost, align 8, !dbg !5896
  br label %for.cond, !dbg !5888, !llvm.loop !5897

for.end:                                          ; preds = %for.cond
  %6 = load i8, i8* @ira_conflicts_p, align 1, !dbg !5899
  %tobool1 = icmp ne i8 %6, 0, !dbg !5899
  br i1 %tobool1, label %if.then, label %if.else, !dbg !5901

if.then:                                          ; preds = %for.end
  call void @color(), !dbg !5902
  br label %if.end, !dbg !5902

if.else:                                          ; preds = %for.end
  call void @fast_allocation(), !dbg !5903
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5904
}

; Function Attrs: noinline nounwind uwtable
define internal void @color() #0 !dbg !5905 {
entry:
  %0 = load i32, i32* @ira_allocnos_num, align 4, !dbg !5906
  %call = call %struct.VEC_ira_allocno_t_heap* @VEC_ira_allocno_t_heap_alloc(i32 %0), !dbg !5906
  store %struct.VEC_ira_allocno_t_heap* %call, %struct.VEC_ira_allocno_t_heap** @allocno_stack_vec, align 8, !dbg !5907
  %1 = load i32, i32* @ira_allocnos_num, align 4, !dbg !5908
  %call1 = call %struct.VEC_ira_allocno_t_heap* @VEC_ira_allocno_t_heap_alloc(i32 %1), !dbg !5908
  store %struct.VEC_ira_allocno_t_heap* %call1, %struct.VEC_ira_allocno_t_heap** @removed_splay_allocno_vec, align 8, !dbg !5909
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([53 x i8], [53 x i8]* @allocated_hardreg_p, i64 0, i64 0), i8 0, i64 53, i1 false), !dbg !5910
  call void @ira_initiate_assign(), !dbg !5911
  call void @do_coloring(), !dbg !5912
  call void @ira_finish_assign(), !dbg !5913
  call void @VEC_ira_allocno_t_heap_free(%struct.VEC_ira_allocno_t_heap** @removed_splay_allocno_vec), !dbg !5914
  call void @VEC_ira_allocno_t_heap_free(%struct.VEC_ira_allocno_t_heap** @allocno_stack_vec), !dbg !5915
  call void @move_spill_restore(), !dbg !5916
  ret void, !dbg !5917
}

; Function Attrs: noinline nounwind uwtable
define internal void @fast_allocation() #0 !dbg !5918 {
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %num = alloca i32, align 4
  %class_size = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %no_stack_reg_p = alloca i8, align 1
  %cover_class = alloca i32, align 4
  %mode = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  %r = alloca %struct.ira_allocno_live_range*, align 8
  %conflict_hard_regs = alloca i64, align 8
  %used_hard_regs = alloca i64*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5919, metadata !DIExpression()), !dbg !5920
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5921, metadata !DIExpression()), !dbg !5922
  call void @llvm.dbg.declare(metadata i32* %k, metadata !5923, metadata !DIExpression()), !dbg !5924
  call void @llvm.dbg.declare(metadata i32* %num, metadata !5925, metadata !DIExpression()), !dbg !5926
  call void @llvm.dbg.declare(metadata i32* %class_size, metadata !5927, metadata !DIExpression()), !dbg !5928
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !5929, metadata !DIExpression()), !dbg !5930
  call void @llvm.dbg.declare(metadata i8* %no_stack_reg_p, metadata !5931, metadata !DIExpression()), !dbg !5932
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !5933, metadata !DIExpression()), !dbg !5934
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !5935, metadata !DIExpression()), !dbg !5936
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !5937, metadata !DIExpression()), !dbg !5938
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !5939, metadata !DIExpression()), !dbg !5940
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r, metadata !5941, metadata !DIExpression()), !dbg !5942
  call void @llvm.dbg.declare(metadata i64* %conflict_hard_regs, metadata !5943, metadata !DIExpression()), !dbg !5944
  call void @llvm.dbg.declare(metadata i64** %used_hard_regs, metadata !5945, metadata !DIExpression()), !dbg !5946
  %0 = load i32, i32* @ira_allocnos_num, align 4, !dbg !5947
  %conv = sext i32 %0 to i64, !dbg !5947
  %mul = mul i64 8, %conv, !dbg !5948
  %call = call i8* @ira_allocate(i64 %mul), !dbg !5949
  %1 = bitcast i8* %call to %struct.ira_allocno**, !dbg !5950
  store %struct.ira_allocno** %1, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !5951
  store i32 0, i32* %num, align 4, !dbg !5952
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !5953
  br label %for.cond, !dbg !5953

for.cond:                                         ; preds = %for.body, %entry
  %call1 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !5955
  %tobool = icmp ne i8 %call1, 0, !dbg !5953
  br i1 %tobool, label %for.body, label %for.end, !dbg !5953

for.body:                                         ; preds = %for.cond
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !5957
  %3 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !5958
  %4 = load i32, i32* %num, align 4, !dbg !5959
  %inc = add nsw i32 %4, 1, !dbg !5959
  store i32 %inc, i32* %num, align 4, !dbg !5959
  %idxprom = sext i32 %4 to i64, !dbg !5958
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %3, i64 %idxprom, !dbg !5958
  store %struct.ira_allocno* %2, %struct.ira_allocno** %arrayidx, align 8, !dbg !5960
  br label %for.cond, !dbg !5955, !llvm.loop !5961

for.end:                                          ; preds = %for.cond
  %5 = load i32, i32* @ira_allocnos_num, align 4, !dbg !5963
  %conv2 = sext i32 %5 to i64, !dbg !5963
  %mul3 = mul i64 4, %conv2, !dbg !5964
  %call4 = call i8* @ira_allocate(i64 %mul3), !dbg !5965
  %6 = bitcast i8* %call4 to i32*, !dbg !5966
  store i32* %6, i32** @allocno_priorities, align 8, !dbg !5967
  %7 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !5968
  %8 = load i32, i32* %num, align 4, !dbg !5969
  call void @setup_allocno_priorities(%struct.ira_allocno** %7, i32 %8), !dbg !5970
  %9 = load i32, i32* @ira_max_point, align 4, !dbg !5971
  %conv5 = sext i32 %9 to i64, !dbg !5971
  %mul6 = mul i64 8, %conv5, !dbg !5972
  %call7 = call i8* @ira_allocate(i64 %mul6), !dbg !5973
  %10 = bitcast i8* %call7 to i64*, !dbg !5974
  store i64* %10, i64** %used_hard_regs, align 8, !dbg !5975
  store i32 0, i32* %i, align 4, !dbg !5976
  br label %for.cond8, !dbg !5978

for.cond8:                                        ; preds = %for.inc, %for.end
  %11 = load i32, i32* %i, align 4, !dbg !5979
  %12 = load i32, i32* @ira_max_point, align 4, !dbg !5981
  %cmp = icmp slt i32 %11, %12, !dbg !5982
  br i1 %cmp, label %for.body10, label %for.end14, !dbg !5983

for.body10:                                       ; preds = %for.cond8
  %13 = load i64*, i64** %used_hard_regs, align 8, !dbg !5984
  %14 = load i32, i32* %i, align 4, !dbg !5984
  %idxprom11 = sext i32 %14 to i64, !dbg !5984
  %arrayidx12 = getelementptr inbounds i64, i64* %13, i64 %idxprom11, !dbg !5984
  store i64 0, i64* %arrayidx12, align 8, !dbg !5984
  br label %for.inc, !dbg !5984

for.inc:                                          ; preds = %for.body10
  %15 = load i32, i32* %i, align 4, !dbg !5985
  %inc13 = add nsw i32 %15, 1, !dbg !5985
  store i32 %inc13, i32* %i, align 4, !dbg !5985
  br label %for.cond8, !dbg !5986, !llvm.loop !5987

for.end14:                                        ; preds = %for.cond8
  %16 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !5989
  %17 = bitcast %struct.ira_allocno** %16 to i8*, !dbg !5989
  %18 = load i32, i32* %num, align 4, !dbg !5990
  %conv15 = sext i32 %18 to i64, !dbg !5990
  call void @spec_qsort(i8* %17, i64 %conv15, i64 8, i32 (i8*, i8*)* @allocno_priority_compare_func), !dbg !5991
  store i32 0, i32* %i, align 4, !dbg !5992
  br label %for.cond16, !dbg !5994

for.cond16:                                       ; preds = %for.inc106, %for.end14
  %19 = load i32, i32* %i, align 4, !dbg !5995
  %20 = load i32, i32* %num, align 4, !dbg !5997
  %cmp17 = icmp slt i32 %19, %20, !dbg !5998
  br i1 %cmp17, label %for.body19, label %for.end108, !dbg !5999

for.body19:                                       ; preds = %for.cond16
  %21 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !6000
  %22 = load i32, i32* %i, align 4, !dbg !6002
  %idxprom20 = sext i32 %22 to i64, !dbg !6000
  %arrayidx21 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %21, i64 %idxprom20, !dbg !6000
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx21, align 8, !dbg !6000
  store %struct.ira_allocno* %23, %struct.ira_allocno** %a, align 8, !dbg !6003
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6004
  %conflict_hard_regs22 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 26, !dbg !6004
  %25 = load i64, i64* %conflict_hard_regs22, align 8, !dbg !6004
  store i64 %25, i64* %conflict_hard_regs, align 8, !dbg !6004
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6005
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %26, i32 0, i32 20, !dbg !6005
  %27 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !6005
  store %struct.ira_allocno_live_range* %27, %struct.ira_allocno_live_range** %r, align 8, !dbg !6007
  br label %for.cond23, !dbg !6008

for.cond23:                                       ; preds = %for.inc36, %for.body19
  %28 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !6009
  %cmp24 = icmp ne %struct.ira_allocno_live_range* %28, null, !dbg !6011
  br i1 %cmp24, label %for.body26, label %for.end37, !dbg !6012

for.body26:                                       ; preds = %for.cond23
  %29 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !6013
  %start = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %29, i32 0, i32 1, !dbg !6015
  %30 = load i32, i32* %start, align 8, !dbg !6015
  store i32 %30, i32* %j, align 4, !dbg !6016
  br label %for.cond27, !dbg !6017

for.cond27:                                       ; preds = %for.inc33, %for.body26
  %31 = load i32, i32* %j, align 4, !dbg !6018
  %32 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !6020
  %finish = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %32, i32 0, i32 2, !dbg !6021
  %33 = load i32, i32* %finish, align 4, !dbg !6021
  %cmp28 = icmp sle i32 %31, %33, !dbg !6022
  br i1 %cmp28, label %for.body30, label %for.end35, !dbg !6023

for.body30:                                       ; preds = %for.cond27
  %34 = load i64*, i64** %used_hard_regs, align 8, !dbg !6024
  %35 = load i32, i32* %j, align 4, !dbg !6024
  %idxprom31 = sext i32 %35 to i64, !dbg !6024
  %arrayidx32 = getelementptr inbounds i64, i64* %34, i64 %idxprom31, !dbg !6024
  %36 = load i64, i64* %arrayidx32, align 8, !dbg !6024
  %37 = load i64, i64* %conflict_hard_regs, align 8, !dbg !6024
  %or = or i64 %37, %36, !dbg !6024
  store i64 %or, i64* %conflict_hard_regs, align 8, !dbg !6024
  br label %for.inc33, !dbg !6024

for.inc33:                                        ; preds = %for.body30
  %38 = load i32, i32* %j, align 4, !dbg !6025
  %inc34 = add nsw i32 %38, 1, !dbg !6025
  store i32 %inc34, i32* %j, align 4, !dbg !6025
  br label %for.cond27, !dbg !6026, !llvm.loop !6027

for.end35:                                        ; preds = %for.cond27
  br label %for.inc36, !dbg !6028

for.inc36:                                        ; preds = %for.end35
  %39 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !6029
  %next = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %39, i32 0, i32 3, !dbg !6030
  %40 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next, align 8, !dbg !6030
  store %struct.ira_allocno_live_range* %40, %struct.ira_allocno_live_range** %r, align 8, !dbg !6031
  br label %for.cond23, !dbg !6032, !llvm.loop !6033

for.end37:                                        ; preds = %for.cond23
  %41 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6035
  %cover_class38 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %41, i32 0, i32 9, !dbg !6035
  %42 = load i32, i32* %cover_class38, align 8, !dbg !6035
  store i32 %42, i32* %cover_class, align 4, !dbg !6036
  %43 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6037
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %43, i32 0, i32 31, !dbg !6037
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !6038
  %bf.clear = and i16 %bf.load, -257, !dbg !6038
  %bf.set = or i16 %bf.clear, 256, !dbg !6038
  store i16 %bf.set, i16* %assigned_p, align 4, !dbg !6038
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6039
  %hard_regno39 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %44, i32 0, i32 3, !dbg !6039
  store i32 -1, i32* %hard_regno39, align 4, !dbg !6040
  %45 = load i32, i32* %cover_class, align 4, !dbg !6041
  %idxprom40 = zext i32 %45 to i64, !dbg !6043
  %arrayidx41 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom40, !dbg !6043
  %46 = load i64, i64* %arrayidx41, align 8, !dbg !6043
  %47 = load i64, i64* %conflict_hard_regs, align 8, !dbg !6044
  %call42 = call zeroext i8 @hard_reg_set_subset_p(i64 %46, i64 %47), !dbg !6045
  %tobool43 = icmp ne i8 %call42, 0, !dbg !6045
  br i1 %tobool43, label %if.then, label %if.end, !dbg !6046

if.then:                                          ; preds = %for.end37
  br label %for.inc106, !dbg !6047

if.end:                                           ; preds = %for.end37
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6048
  %mode44 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 2, !dbg !6048
  %49 = load i32, i32* %mode44, align 8, !dbg !6048
  store i32 %49, i32* %mode, align 4, !dbg !6049
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6050
  %no_stack_reg_p45 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %50, i32 0, i32 31, !dbg !6050
  %bf.load46 = load i16, i16* %no_stack_reg_p45, align 4, !dbg !6050
  %bf.lshr = lshr i16 %bf.load46, 4, !dbg !6050
  %bf.clear47 = and i16 %bf.lshr, 1, !dbg !6050
  %bf.cast = zext i16 %bf.clear47 to i32, !dbg !6050
  %conv48 = trunc i32 %bf.cast to i8, !dbg !6050
  store i8 %conv48, i8* %no_stack_reg_p, align 1, !dbg !6051
  %51 = load i32, i32* %cover_class, align 4, !dbg !6052
  %idxprom49 = zext i32 %51 to i64, !dbg !6053
  %arrayidx50 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom49, !dbg !6053
  %52 = load i32, i32* %arrayidx50, align 4, !dbg !6053
  store i32 %52, i32* %class_size, align 4, !dbg !6054
  store i32 0, i32* %j, align 4, !dbg !6055
  br label %for.cond51, !dbg !6057

for.cond51:                                       ; preds = %for.inc103, %if.end
  %53 = load i32, i32* %j, align 4, !dbg !6058
  %54 = load i32, i32* %class_size, align 4, !dbg !6060
  %cmp52 = icmp slt i32 %53, %54, !dbg !6061
  br i1 %cmp52, label %for.body54, label %for.end105, !dbg !6062

for.body54:                                       ; preds = %for.cond51
  %55 = load i32, i32* %cover_class, align 4, !dbg !6063
  %idxprom55 = zext i32 %55 to i64, !dbg !6065
  %arrayidx56 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_regs, i64 0, i64 %idxprom55, !dbg !6065
  %56 = load i32, i32* %j, align 4, !dbg !6066
  %idxprom57 = sext i32 %56 to i64, !dbg !6065
  %arrayidx58 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx56, i64 0, i64 %idxprom57, !dbg !6065
  %57 = load i16, i16* %arrayidx58, align 2, !dbg !6065
  %conv59 = sext i16 %57 to i32, !dbg !6065
  store i32 %conv59, i32* %hard_regno, align 4, !dbg !6067
  %58 = load i8, i8* %no_stack_reg_p, align 1, !dbg !6068
  %conv60 = zext i8 %58 to i32, !dbg !6068
  %tobool61 = icmp ne i32 %conv60, 0, !dbg !6068
  br i1 %tobool61, label %land.lhs.true, label %if.end68, !dbg !6070

land.lhs.true:                                    ; preds = %for.body54
  %59 = load i32, i32* %hard_regno, align 4, !dbg !6071
  %cmp62 = icmp sle i32 8, %59, !dbg !6072
  br i1 %cmp62, label %land.lhs.true64, label %if.end68, !dbg !6073

land.lhs.true64:                                  ; preds = %land.lhs.true
  %60 = load i32, i32* %hard_regno, align 4, !dbg !6074
  %cmp65 = icmp sle i32 %60, 15, !dbg !6075
  br i1 %cmp65, label %if.then67, label %if.end68, !dbg !6076

if.then67:                                        ; preds = %land.lhs.true64
  br label %for.inc103, !dbg !6077

if.end68:                                         ; preds = %land.lhs.true64, %land.lhs.true, %for.body54
  %61 = load i32, i32* %hard_regno, align 4, !dbg !6078
  %62 = load i32, i32* %mode, align 4, !dbg !6080
  %63 = load i64, i64* %conflict_hard_regs, align 8, !dbg !6081
  %call69 = call zeroext i8 @ira_hard_reg_not_in_set_p(i32 %61, i32 %62, i64 %63), !dbg !6082
  %tobool70 = icmp ne i8 %call69, 0, !dbg !6082
  br i1 %tobool70, label %lor.lhs.false, label %if.then76, !dbg !6083

lor.lhs.false:                                    ; preds = %if.end68
  %64 = load i32, i32* %cover_class, align 4, !dbg !6084
  %idxprom71 = zext i32 %64 to i64, !dbg !6084
  %arrayidx72 = getelementptr inbounds [27 x [87 x i64]], [27 x [87 x i64]]* @prohibited_class_mode_regs, i64 0, i64 %idxprom71, !dbg !6084
  %65 = load i32, i32* %mode, align 4, !dbg !6084
  %idxprom73 = zext i32 %65 to i64, !dbg !6084
  %arrayidx74 = getelementptr inbounds [87 x i64], [87 x i64]* %arrayidx72, i64 0, i64 %idxprom73, !dbg !6084
  %66 = load i64, i64* %arrayidx74, align 8, !dbg !6084
  %67 = load i32, i32* %hard_regno, align 4, !dbg !6084
  %sh_prom = zext i32 %67 to i64, !dbg !6084
  %shl = shl i64 1, %sh_prom, !dbg !6084
  %and = and i64 %66, %shl, !dbg !6084
  %tobool75 = icmp ne i64 %and, 0, !dbg !6084
  br i1 %tobool75, label %if.then76, label %if.end77, !dbg !6085

if.then76:                                        ; preds = %lor.lhs.false, %if.end68
  br label %for.inc103, !dbg !6086

if.end77:                                         ; preds = %lor.lhs.false
  %68 = load i32, i32* %hard_regno, align 4, !dbg !6087
  %69 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6088
  %hard_regno78 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %69, i32 0, i32 3, !dbg !6088
  store i32 %68, i32* %hard_regno78, align 4, !dbg !6089
  %70 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6090
  %live_ranges79 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %70, i32 0, i32 20, !dbg !6090
  %71 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges79, align 8, !dbg !6090
  store %struct.ira_allocno_live_range* %71, %struct.ira_allocno_live_range** %r, align 8, !dbg !6092
  br label %for.cond80, !dbg !6093

for.cond80:                                       ; preds = %for.inc100, %if.end77
  %72 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !6094
  %cmp81 = icmp ne %struct.ira_allocno_live_range* %72, null, !dbg !6096
  br i1 %cmp81, label %for.body83, label %for.end102, !dbg !6097

for.body83:                                       ; preds = %for.cond80
  %73 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !6098
  %start84 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %73, i32 0, i32 1, !dbg !6100
  %74 = load i32, i32* %start84, align 8, !dbg !6100
  store i32 %74, i32* %k, align 4, !dbg !6101
  br label %for.cond85, !dbg !6102

for.cond85:                                       ; preds = %for.inc97, %for.body83
  %75 = load i32, i32* %k, align 4, !dbg !6103
  %76 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !6105
  %finish86 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %76, i32 0, i32 2, !dbg !6106
  %77 = load i32, i32* %finish86, align 4, !dbg !6106
  %cmp87 = icmp sle i32 %75, %77, !dbg !6107
  br i1 %cmp87, label %for.body89, label %for.end99, !dbg !6108

for.body89:                                       ; preds = %for.cond85
  %78 = load i32, i32* %hard_regno, align 4, !dbg !6109
  %idxprom90 = sext i32 %78 to i64, !dbg !6109
  %arrayidx91 = getelementptr inbounds [53 x [87 x i64]], [53 x [87 x i64]]* @ira_reg_mode_hard_regset, i64 0, i64 %idxprom90, !dbg !6109
  %79 = load i32, i32* %mode, align 4, !dbg !6109
  %idxprom92 = zext i32 %79 to i64, !dbg !6109
  %arrayidx93 = getelementptr inbounds [87 x i64], [87 x i64]* %arrayidx91, i64 0, i64 %idxprom92, !dbg !6109
  %80 = load i64, i64* %arrayidx93, align 8, !dbg !6109
  %81 = load i64*, i64** %used_hard_regs, align 8, !dbg !6109
  %82 = load i32, i32* %k, align 4, !dbg !6109
  %idxprom94 = sext i32 %82 to i64, !dbg !6109
  %arrayidx95 = getelementptr inbounds i64, i64* %81, i64 %idxprom94, !dbg !6109
  %83 = load i64, i64* %arrayidx95, align 8, !dbg !6109
  %or96 = or i64 %83, %80, !dbg !6109
  store i64 %or96, i64* %arrayidx95, align 8, !dbg !6109
  br label %for.inc97, !dbg !6109

for.inc97:                                        ; preds = %for.body89
  %84 = load i32, i32* %k, align 4, !dbg !6110
  %inc98 = add nsw i32 %84, 1, !dbg !6110
  store i32 %inc98, i32* %k, align 4, !dbg !6110
  br label %for.cond85, !dbg !6111, !llvm.loop !6112

for.end99:                                        ; preds = %for.cond85
  br label %for.inc100, !dbg !6113

for.inc100:                                       ; preds = %for.end99
  %85 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !6114
  %next101 = getelementptr inbounds %struct.ira_allocno_live_range, %struct.ira_allocno_live_range* %85, i32 0, i32 3, !dbg !6115
  %86 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %next101, align 8, !dbg !6115
  store %struct.ira_allocno_live_range* %86, %struct.ira_allocno_live_range** %r, align 8, !dbg !6116
  br label %for.cond80, !dbg !6117, !llvm.loop !6118

for.end102:                                       ; preds = %for.cond80
  br label %for.end105, !dbg !6120

for.inc103:                                       ; preds = %if.then76, %if.then67
  %87 = load i32, i32* %j, align 4, !dbg !6121
  %inc104 = add nsw i32 %87, 1, !dbg !6121
  store i32 %inc104, i32* %j, align 4, !dbg !6121
  br label %for.cond51, !dbg !6122, !llvm.loop !6123

for.end105:                                       ; preds = %for.end102, %for.cond51
  br label %for.inc106, !dbg !6125

for.inc106:                                       ; preds = %for.end105, %if.then
  %88 = load i32, i32* %i, align 4, !dbg !6126
  %inc107 = add nsw i32 %88, 1, !dbg !6126
  store i32 %inc107, i32* %i, align 4, !dbg !6126
  br label %for.cond16, !dbg !6127, !llvm.loop !6128

for.end108:                                       ; preds = %for.cond16
  %89 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !6130
  %90 = bitcast %struct.ira_allocno** %89 to i8*, !dbg !6130
  call void @ira_free(i8* %90), !dbg !6131
  %91 = load i64*, i64** %used_hard_regs, align 8, !dbg !6132
  %92 = bitcast i64* %91 to i8*, !dbg !6132
  call void @ira_free(i8* %92), !dbg !6133
  %93 = load i32*, i32** @allocno_priorities, align 8, !dbg !6134
  %94 = bitcast i32* %93 to i8*, !dbg !6134
  call void @ira_free(i8* %94), !dbg !6135
  %95 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !6136
  %cmp109 = icmp sgt i32 %95, 1, !dbg !6138
  br i1 %cmp109, label %land.lhs.true111, label %if.end115, !dbg !6139

land.lhs.true111:                                 ; preds = %for.end108
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !6140
  %cmp112 = icmp ne %struct._IO_FILE* %96, null, !dbg !6141
  br i1 %cmp112, label %if.then114, label %if.end115, !dbg !6142

if.then114:                                       ; preds = %land.lhs.true111
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !6143
  call void @ira_print_disposition(%struct._IO_FILE* %97), !dbg !6144
  br label %if.end115, !dbg !6144

if.end115:                                        ; preds = %if.then114, %land.lhs.true111, %for.end108
  ret void, !dbg !6145
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6146 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6149, metadata !DIExpression()), !dbg !6150
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6151
  %3 = load i32, i32* %index, align 8, !dbg !6151
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6152
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !6152
  %6 = load i32, i32* %5, align 8, !dbg !6152
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !6152
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !6152
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !6152
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6152
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6152

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6152
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6152
  %11 = load i32, i32* %10, align 8, !dbg !6152
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6152
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6152
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6152
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6152
  br label %cond.end, !dbg !6152

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6152

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6152
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6152
  %cmp = icmp eq i32 %3, %call2, !dbg !6153
  %conv = zext i1 %cmp to i32, !dbg !6153
  %conv3 = trunc i32 %conv to i8, !dbg !6154
  ret i8 %conv3, !dbg !6155
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6156 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6159, metadata !DIExpression()), !dbg !6160
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6161
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6161
  %5 = load i32, i32* %4, align 8, !dbg !6161
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6161
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6161
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6161
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6161
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6161

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !6161
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6161
  %10 = load i32, i32* %9, align 8, !dbg !6161
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6161
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6161
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6161
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6161
  br label %cond.end, !dbg !6161

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6161

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6161
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !6161
  %13 = load i32, i32* %index, align 8, !dbg !6161
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !6161
  ret %struct.edge_def* %call2, !dbg !6162
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !6163 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6166, metadata !DIExpression()), !dbg !6167
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6167
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6167
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6167

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6167
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !6167
  %2 = load i32, i32* %num, align 8, !dbg !6167
  br label %cond.end, !dbg !6167

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6167

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6167
  ret i32 %cond, !dbg !6167
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !6168 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !6171, metadata !DIExpression()), !dbg !6172
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6173
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !6173
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !6173
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6173

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6173
  br label %cond.end, !dbg !6173

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6173

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6173
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !6174
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !6174
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !6175
  ret %struct.VEC_edge_gc* %5, !dbg !6176
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !6177 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6180, metadata !DIExpression()), !dbg !6181
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6182, metadata !DIExpression()), !dbg !6181
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6181
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6181
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6181

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6181
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6181
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6181
  %3 = load i32, i32* %num, align 8, !dbg !6181
  %cmp = icmp ult i32 %1, %3, !dbg !6181
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6183
  %land.ext = zext i1 %4 to i32, !dbg !6181
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6181
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !6181
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6181
  %idxprom = zext i32 %6 to i64, !dbg !6181
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6181
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6181
  ret %struct.edge_def* %7, !dbg !6181
}

declare dso_local void @free(i8*) #3

declare dso_local i32 @floor_log2(i64) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @ira_get_register_move_cost(i32 %mode, i32 %from, i32 %to) #0 !dbg !6184 {
entry:
  %mode.addr = alloca i32, align 4
  %from.addr = alloca i32, align 4
  %to.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6187, metadata !DIExpression()), !dbg !6188
  store i32 %from, i32* %from.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %from.addr, metadata !6189, metadata !DIExpression()), !dbg !6190
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !6191, metadata !DIExpression()), !dbg !6192
  %0 = load i32, i32* %mode.addr, align 4, !dbg !6193
  %idxprom = zext i32 %0 to i64, !dbg !6195
  %arrayidx = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_register_move_cost, i64 0, i64 %idxprom, !dbg !6195
  %1 = load [27 x i16]*, [27 x i16]** %arrayidx, align 8, !dbg !6195
  %cmp = icmp eq [27 x i16]* %1, null, !dbg !6196
  br i1 %cmp, label %if.then, label %if.end, !dbg !6197

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %mode.addr, align 4, !dbg !6198
  call void @ira_init_register_move_cost(i32 %2), !dbg !6199
  br label %if.end, !dbg !6199

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !6200
  %idxprom1 = zext i32 %3 to i64, !dbg !6201
  %arrayidx2 = getelementptr inbounds [87 x [27 x i16]*], [87 x [27 x i16]*]* @ira_register_move_cost, i64 0, i64 %idxprom1, !dbg !6201
  %4 = load [27 x i16]*, [27 x i16]** %arrayidx2, align 8, !dbg !6201
  %5 = load i32, i32* %from.addr, align 4, !dbg !6202
  %idxprom3 = zext i32 %5 to i64, !dbg !6201
  %arrayidx4 = getelementptr inbounds [27 x i16], [27 x i16]* %4, i64 %idxprom3, !dbg !6201
  %6 = load i32, i32* %to.addr, align 4, !dbg !6203
  %idxprom5 = zext i32 %6 to i64, !dbg !6201
  %arrayidx6 = getelementptr inbounds [27 x i16], [27 x i16]* %arrayidx4, i64 0, i64 %idxprom5, !dbg !6201
  %7 = load i16, i16* %arrayidx6, align 2, !dbg !6201
  %conv = zext i16 %7 to i32, !dbg !6201
  ret i32 %conv, !dbg !6204
}

; Function Attrs: noinline nounwind uwtable
define internal void @ira_allocate_and_set_or_copy_costs(i32** %vec, i32 %cover_class, i32 %val, i32* %src) #0 !dbg !6205 {
entry:
  %vec.addr = alloca i32**, align 8
  %cover_class.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %src.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %reg_costs = alloca i32*, align 8
  %len = alloca i32, align 4
  store i32** %vec, i32*** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %vec.addr, metadata !6209, metadata !DIExpression()), !dbg !6210
  store i32 %cover_class, i32* %cover_class.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cover_class.addr, metadata !6211, metadata !DIExpression()), !dbg !6212
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6213, metadata !DIExpression()), !dbg !6214
  store i32* %src, i32** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %src.addr, metadata !6215, metadata !DIExpression()), !dbg !6216
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6217, metadata !DIExpression()), !dbg !6218
  call void @llvm.dbg.declare(metadata i32** %reg_costs, metadata !6219, metadata !DIExpression()), !dbg !6220
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6221, metadata !DIExpression()), !dbg !6222
  %0 = load i32**, i32*** %vec.addr, align 8, !dbg !6223
  %1 = load i32*, i32** %0, align 8, !dbg !6225
  %cmp = icmp ne i32* %1, null, !dbg !6226
  br i1 %cmp, label %if.then, label %if.end, !dbg !6227

if.then:                                          ; preds = %entry
  br label %if.end7, !dbg !6228

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %cover_class.addr, align 4, !dbg !6229
  %call = call i32* @ira_allocate_cost_vector(i32 %2), !dbg !6230
  store i32* %call, i32** %reg_costs, align 8, !dbg !6231
  %3 = load i32**, i32*** %vec.addr, align 8, !dbg !6232
  store i32* %call, i32** %3, align 8, !dbg !6233
  %4 = load i32, i32* %cover_class.addr, align 4, !dbg !6234
  %idxprom = zext i32 %4 to i64, !dbg !6235
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom, !dbg !6235
  %5 = load i32, i32* %arrayidx, align 4, !dbg !6235
  store i32 %5, i32* %len, align 4, !dbg !6236
  %6 = load i32*, i32** %src.addr, align 8, !dbg !6237
  %cmp1 = icmp ne i32* %6, null, !dbg !6239
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !6240

if.then2:                                         ; preds = %if.end
  %7 = load i32*, i32** %reg_costs, align 8, !dbg !6241
  %8 = bitcast i32* %7 to i8*, !dbg !6242
  %9 = load i32*, i32** %src.addr, align 8, !dbg !6243
  %10 = bitcast i32* %9 to i8*, !dbg !6242
  %11 = load i32, i32* %len, align 4, !dbg !6244
  %conv = sext i32 %11 to i64, !dbg !6244
  %mul = mul i64 4, %conv, !dbg !6245
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %10, i64 %mul, i1 false), !dbg !6242
  br label %if.end7, !dbg !6242

if.else:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !6246
  br label %for.cond, !dbg !6249

for.cond:                                         ; preds = %for.inc, %if.else
  %12 = load i32, i32* %i, align 4, !dbg !6250
  %13 = load i32, i32* %len, align 4, !dbg !6252
  %cmp3 = icmp slt i32 %12, %13, !dbg !6253
  br i1 %cmp3, label %for.body, label %for.end, !dbg !6254

for.body:                                         ; preds = %for.cond
  %14 = load i32, i32* %val.addr, align 4, !dbg !6255
  %15 = load i32*, i32** %reg_costs, align 8, !dbg !6256
  %16 = load i32, i32* %i, align 4, !dbg !6257
  %idxprom5 = sext i32 %16 to i64, !dbg !6256
  %arrayidx6 = getelementptr inbounds i32, i32* %15, i64 %idxprom5, !dbg !6256
  store i32 %14, i32* %arrayidx6, align 4, !dbg !6258
  br label %for.inc, !dbg !6256

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !6259
  %inc = add nsw i32 %17, 1, !dbg !6259
  store i32 %inc, i32* %i, align 4, !dbg !6259
  br label %for.cond, !dbg !6260, !llvm.loop !6261

for.end:                                          ; preds = %for.cond
  br label %if.end7

if.end7:                                          ; preds = %if.then, %for.end, %if.then2
  ret void, !dbg !6263
}

declare dso_local void @ira_init_register_move_cost(i32) #3

declare dso_local i32* @ira_allocate_cost_vector(i32) #3

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @start_update_cost() #0 !dbg !6264 {
entry:
  %0 = load i32, i32* @update_cost_check, align 4, !dbg !6265
  %inc = add nsw i32 %0, 1, !dbg !6265
  store i32 %inc, i32* @update_cost_check, align 4, !dbg !6265
  store %struct.ira_allocno* null, %struct.ira_allocno** @update_cost_queue, align 8, !dbg !6266
  ret void, !dbg !6267
}

; Function Attrs: noinline nounwind uwtable
define internal void @ira_allocate_and_copy_costs(i32** %vec, i32 %cover_class, i32* %src) #0 !dbg !6268 {
entry:
  %vec.addr = alloca i32**, align 8
  %cover_class.addr = alloca i32, align 4
  %src.addr = alloca i32*, align 8
  %len = alloca i32, align 4
  store i32** %vec, i32*** %vec.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %vec.addr, metadata !6271, metadata !DIExpression()), !dbg !6272
  store i32 %cover_class, i32* %cover_class.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cover_class.addr, metadata !6273, metadata !DIExpression()), !dbg !6274
  store i32* %src, i32** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %src.addr, metadata !6275, metadata !DIExpression()), !dbg !6276
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6277, metadata !DIExpression()), !dbg !6278
  %0 = load i32**, i32*** %vec.addr, align 8, !dbg !6279
  %1 = load i32*, i32** %0, align 8, !dbg !6281
  %cmp = icmp ne i32* %1, null, !dbg !6282
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6283

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32*, i32** %src.addr, align 8, !dbg !6284
  %cmp1 = icmp eq i32* %2, null, !dbg !6285
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6286

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !6287

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %cover_class.addr, align 4, !dbg !6288
  %call = call i32* @ira_allocate_cost_vector(i32 %3), !dbg !6289
  %4 = load i32**, i32*** %vec.addr, align 8, !dbg !6290
  store i32* %call, i32** %4, align 8, !dbg !6291
  %5 = load i32, i32* %cover_class.addr, align 4, !dbg !6292
  %idxprom = zext i32 %5 to i64, !dbg !6293
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom, !dbg !6293
  %6 = load i32, i32* %arrayidx, align 4, !dbg !6293
  store i32 %6, i32* %len, align 4, !dbg !6294
  %7 = load i32**, i32*** %vec.addr, align 8, !dbg !6295
  %8 = load i32*, i32** %7, align 8, !dbg !6296
  %9 = bitcast i32* %8 to i8*, !dbg !6297
  %10 = load i32*, i32** %src.addr, align 8, !dbg !6298
  %11 = bitcast i32* %10 to i8*, !dbg !6297
  %12 = load i32, i32* %len, align 4, !dbg !6299
  %conv = sext i32 %12 to i64, !dbg !6299
  %mul = mul i64 4, %conv, !dbg !6300
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %9, i8* align 4 %11, i64 %mul, i1 false), !dbg !6297
  br label %return, !dbg !6301

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !6301
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @hard_reg_set_subset_p(i64 %x, i64 %y) #0 !dbg !6302 {
entry:
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !6306, metadata !DIExpression()), !dbg !6307
  store i64 %y, i64* %y.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %y.addr, metadata !6308, metadata !DIExpression()), !dbg !6309
  %0 = load i64, i64* %x.addr, align 8, !dbg !6310
  %1 = load i64, i64* %y.addr, align 8, !dbg !6311
  %neg = xor i64 %1, -1, !dbg !6312
  %and = and i64 %0, %neg, !dbg !6313
  %cmp = icmp eq i64 %and, 0, !dbg !6314
  %conv = zext i1 %cmp to i32, !dbg !6314
  %conv1 = trunc i32 %conv to i8, !dbg !6315
  ret i8 %conv1, !dbg !6316
}

; Function Attrs: noinline nounwind uwtable
define internal void @queue_update_cost(%struct.ira_allocno* %allocno, i32 %divisor) #0 !dbg !6317 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %divisor.addr = alloca i32, align 4
  %elem = alloca %struct.update_cost_queue_elem*, align 8
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !6320, metadata !DIExpression()), !dbg !6321
  store i32 %divisor, i32* %divisor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %divisor.addr, metadata !6322, metadata !DIExpression()), !dbg !6323
  call void @llvm.dbg.declare(metadata %struct.update_cost_queue_elem** %elem, metadata !6324, metadata !DIExpression()), !dbg !6325
  %0 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** @update_cost_queue_elems, align 8, !dbg !6326
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !6327
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 0, !dbg !6327
  %2 = load i32, i32* %num, align 8, !dbg !6327
  %idxprom = sext i32 %2 to i64, !dbg !6326
  %arrayidx = getelementptr inbounds %struct.update_cost_queue_elem, %struct.update_cost_queue_elem* %0, i64 %idxprom, !dbg !6326
  store %struct.update_cost_queue_elem* %arrayidx, %struct.update_cost_queue_elem** %elem, align 8, !dbg !6328
  %3 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** %elem, align 8, !dbg !6329
  %check = getelementptr inbounds %struct.update_cost_queue_elem, %struct.update_cost_queue_elem* %3, i32 0, i32 0, !dbg !6331
  %4 = load i32, i32* %check, align 8, !dbg !6331
  %5 = load i32, i32* @update_cost_check, align 4, !dbg !6332
  %cmp = icmp ne i32 %4, %5, !dbg !6333
  br i1 %cmp, label %land.lhs.true, label %if.end7, !dbg !6334

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !6335
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 9, !dbg !6335
  %7 = load i32, i32* %cover_class, align 8, !dbg !6335
  %cmp1 = icmp ne i32 %7, 0, !dbg !6336
  br i1 %cmp1, label %if.then, label %if.end7, !dbg !6337

if.then:                                          ; preds = %land.lhs.true
  %8 = load i32, i32* @update_cost_check, align 4, !dbg !6338
  %9 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** %elem, align 8, !dbg !6340
  %check2 = getelementptr inbounds %struct.update_cost_queue_elem, %struct.update_cost_queue_elem* %9, i32 0, i32 0, !dbg !6341
  store i32 %8, i32* %check2, align 8, !dbg !6342
  %10 = load i32, i32* %divisor.addr, align 4, !dbg !6343
  %11 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** %elem, align 8, !dbg !6344
  %divisor3 = getelementptr inbounds %struct.update_cost_queue_elem, %struct.update_cost_queue_elem* %11, i32 0, i32 1, !dbg !6345
  store i32 %10, i32* %divisor3, align 4, !dbg !6346
  %12 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** %elem, align 8, !dbg !6347
  %next = getelementptr inbounds %struct.update_cost_queue_elem, %struct.update_cost_queue_elem* %12, i32 0, i32 2, !dbg !6348
  store %struct.ira_allocno* null, %struct.ira_allocno** %next, align 8, !dbg !6349
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** @update_cost_queue, align 8, !dbg !6350
  %cmp4 = icmp eq %struct.ira_allocno* %13, null, !dbg !6352
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !6353

if.then5:                                         ; preds = %if.then
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !6354
  store %struct.ira_allocno* %14, %struct.ira_allocno** @update_cost_queue, align 8, !dbg !6355
  br label %if.end, !dbg !6356

if.else:                                          ; preds = %if.then
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !6357
  %16 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** @update_cost_queue_tail, align 8, !dbg !6358
  %next6 = getelementptr inbounds %struct.update_cost_queue_elem, %struct.update_cost_queue_elem* %16, i32 0, i32 2, !dbg !6359
  store %struct.ira_allocno* %15, %struct.ira_allocno** %next6, align 8, !dbg !6360
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  %17 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** %elem, align 8, !dbg !6361
  store %struct.update_cost_queue_elem* %17, %struct.update_cost_queue_elem** @update_cost_queue_tail, align 8, !dbg !6362
  br label %if.end7, !dbg !6363

if.end7:                                          ; preds = %if.end, %land.lhs.true, %entry
  ret void, !dbg !6364
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_conflict_hard_regno_costs(i32* %costs, i32 %cover_class, i8 zeroext %decr_p) #0 !dbg !6365 {
entry:
  %costs.addr = alloca i32*, align 8
  %cover_class.addr = alloca i32, align 4
  %decr_p.addr = alloca i8, align 1
  %i = alloca i32, align 4
  %cost = alloca i32, align 4
  %class_size = alloca i32, align 4
  %freq = alloca i32, align 4
  %mult = alloca i32, align 4
  %div = alloca i32, align 4
  %divisor = alloca i32, align 4
  %index = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %conflict_costs = alloca i32*, align 8
  %cont_p = alloca i8, align 1
  %another_cover_class = alloca i32, align 4
  %allocno = alloca %struct.ira_allocno*, align 8
  %another_allocno = alloca %struct.ira_allocno*, align 8
  %cp = alloca %struct.ira_allocno_copy*, align 8
  %next_cp = alloca %struct.ira_allocno_copy*, align 8
  store i32* %costs, i32** %costs.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %costs.addr, metadata !6368, metadata !DIExpression()), !dbg !6369
  store i32 %cover_class, i32* %cover_class.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cover_class.addr, metadata !6370, metadata !DIExpression()), !dbg !6371
  store i8 %decr_p, i8* %decr_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %decr_p.addr, metadata !6372, metadata !DIExpression()), !dbg !6373
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6374, metadata !DIExpression()), !dbg !6375
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !6376, metadata !DIExpression()), !dbg !6377
  call void @llvm.dbg.declare(metadata i32* %class_size, metadata !6378, metadata !DIExpression()), !dbg !6379
  call void @llvm.dbg.declare(metadata i32* %freq, metadata !6380, metadata !DIExpression()), !dbg !6381
  call void @llvm.dbg.declare(metadata i32* %mult, metadata !6382, metadata !DIExpression()), !dbg !6383
  call void @llvm.dbg.declare(metadata i32* %div, metadata !6384, metadata !DIExpression()), !dbg !6385
  call void @llvm.dbg.declare(metadata i32* %divisor, metadata !6386, metadata !DIExpression()), !dbg !6387
  call void @llvm.dbg.declare(metadata i32* %index, metadata !6388, metadata !DIExpression()), !dbg !6389
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !6390, metadata !DIExpression()), !dbg !6391
  call void @llvm.dbg.declare(metadata i32** %conflict_costs, metadata !6392, metadata !DIExpression()), !dbg !6393
  call void @llvm.dbg.declare(metadata i8* %cont_p, metadata !6394, metadata !DIExpression()), !dbg !6395
  call void @llvm.dbg.declare(metadata i32* %another_cover_class, metadata !6396, metadata !DIExpression()), !dbg !6397
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno, metadata !6398, metadata !DIExpression()), !dbg !6399
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %another_allocno, metadata !6400, metadata !DIExpression()), !dbg !6401
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp, metadata !6402, metadata !DIExpression()), !dbg !6403
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %next_cp, metadata !6404, metadata !DIExpression()), !dbg !6405
  br label %while.cond, !dbg !6406

while.cond:                                       ; preds = %for.end71, %entry
  %call = call zeroext i8 @get_next_update_cost(%struct.ira_allocno** %allocno, i32* %divisor), !dbg !6407
  %tobool = icmp ne i8 %call, 0, !dbg !6406
  br i1 %tobool, label %while.body, label %while.end, !dbg !6406

while.body:                                       ; preds = %while.cond
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !6408
  %allocno_copies = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 15, !dbg !6408
  %1 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %allocno_copies, align 8, !dbg !6408
  store %struct.ira_allocno_copy* %1, %struct.ira_allocno_copy** %cp, align 8, !dbg !6410
  br label %for.cond, !dbg !6411

for.cond:                                         ; preds = %for.inc70, %while.body
  %2 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !6412
  %cmp = icmp ne %struct.ira_allocno_copy* %2, null, !dbg !6414
  br i1 %cmp, label %for.body, label %for.end71, !dbg !6415

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !6416
  %first = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %3, i32 0, i32 1, !dbg !6419
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !6419
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !6420
  %cmp1 = icmp eq %struct.ira_allocno* %4, %5, !dbg !6421
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6422

if.then:                                          ; preds = %for.body
  %6 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !6423
  %next_first_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %6, i32 0, i32 7, !dbg !6425
  %7 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_first_allocno_copy, align 8, !dbg !6425
  store %struct.ira_allocno_copy* %7, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !6426
  %8 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !6427
  %second = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %8, i32 0, i32 2, !dbg !6428
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %second, align 8, !dbg !6428
  store %struct.ira_allocno* %9, %struct.ira_allocno** %another_allocno, align 8, !dbg !6429
  br label %if.end7, !dbg !6430

if.else:                                          ; preds = %for.body
  %10 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !6431
  %second2 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %10, i32 0, i32 2, !dbg !6433
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %second2, align 8, !dbg !6433
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !6434
  %cmp3 = icmp eq %struct.ira_allocno* %11, %12, !dbg !6435
  br i1 %cmp3, label %if.then4, label %if.else6, !dbg !6436

if.then4:                                         ; preds = %if.else
  %13 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !6437
  %next_second_allocno_copy = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %13, i32 0, i32 9, !dbg !6439
  %14 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_second_allocno_copy, align 8, !dbg !6439
  store %struct.ira_allocno_copy* %14, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !6440
  %15 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !6441
  %first5 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %15, i32 0, i32 1, !dbg !6442
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %first5, align 8, !dbg !6442
  store %struct.ira_allocno* %16, %struct.ira_allocno** %another_allocno, align 8, !dbg !6443
  br label %if.end, !dbg !6444

if.else6:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i32 347, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !6445
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then4
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !6446
  %cover_class8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 9, !dbg !6446
  %18 = load i32, i32* %cover_class8, align 8, !dbg !6446
  store i32 %18, i32* %another_cover_class, align 4, !dbg !6447
  %19 = load i32, i32* %cover_class.addr, align 4, !dbg !6448
  %idxprom = zext i32 %19 to i64, !dbg !6450
  %arrayidx = getelementptr inbounds [27 x [27 x i8]], [27 x [27 x i8]]* @ira_reg_classes_intersect_p, i64 0, i64 %idxprom, !dbg !6450
  %20 = load i32, i32* %another_cover_class, align 4, !dbg !6451
  %idxprom9 = zext i32 %20 to i64, !dbg !6450
  %arrayidx10 = getelementptr inbounds [27 x i8], [27 x i8]* %arrayidx, i64 0, i64 %idxprom9, !dbg !6450
  %21 = load i8, i8* %arrayidx10, align 1, !dbg !6450
  %tobool11 = icmp ne i8 %21, 0, !dbg !6450
  br i1 %tobool11, label %lor.lhs.false, label %if.then19, !dbg !6452

lor.lhs.false:                                    ; preds = %if.end7
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !6453
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 31, !dbg !6453
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !6453
  %bf.lshr = lshr i16 %bf.load, 8, !dbg !6453
  %bf.clear = and i16 %bf.lshr, 1, !dbg !6453
  %bf.cast = zext i16 %bf.clear to i32, !dbg !6453
  %tobool12 = icmp ne i32 %bf.cast, 0, !dbg !6453
  br i1 %tobool12, label %if.then19, label %lor.lhs.false13, !dbg !6454

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !6455
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 18, !dbg !6455
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !6455
  %may_be_spilled_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 31, !dbg !6455
  %bf.load14 = load i16, i16* %may_be_spilled_p, align 4, !dbg !6455
  %bf.lshr15 = lshr i16 %bf.load14, 9, !dbg !6455
  %bf.clear16 = and i16 %bf.lshr15, 1, !dbg !6455
  %bf.cast17 = zext i16 %bf.clear16 to i32, !dbg !6455
  %tobool18 = icmp ne i32 %bf.cast17, 0, !dbg !6455
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !6456

if.then19:                                        ; preds = %lor.lhs.false13, %lor.lhs.false, %if.end7
  br label %for.inc70, !dbg !6457

if.end20:                                         ; preds = %lor.lhs.false13
  %25 = load i32, i32* %another_cover_class, align 4, !dbg !6458
  %idxprom21 = zext i32 %25 to i64, !dbg !6459
  %arrayidx22 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom21, !dbg !6459
  %26 = load i32, i32* %arrayidx22, align 4, !dbg !6459
  store i32 %26, i32* %class_size, align 4, !dbg !6460
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !6461
  %updated_conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 36, !dbg !6461
  %28 = load i32, i32* %another_cover_class, align 4, !dbg !6462
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !6463
  %conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %29, i32 0, i32 35, !dbg !6463
  %30 = load i32*, i32** %conflict_hard_reg_costs, align 8, !dbg !6463
  call void @ira_allocate_and_copy_costs(i32** %updated_conflict_hard_reg_costs, i32 %28, i32* %30), !dbg !6464
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !6465
  %updated_conflict_hard_reg_costs23 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 36, !dbg !6465
  %32 = load i32*, i32** %updated_conflict_hard_reg_costs23, align 8, !dbg !6465
  store i32* %32, i32** %conflict_costs, align 8, !dbg !6466
  %33 = load i32*, i32** %conflict_costs, align 8, !dbg !6467
  %cmp24 = icmp eq i32* %33, null, !dbg !6469
  br i1 %cmp24, label %if.then25, label %if.else26, !dbg !6470

if.then25:                                        ; preds = %if.end20
  store i8 1, i8* %cont_p, align 1, !dbg !6471
  br label %if.end62, !dbg !6472

if.else26:                                        ; preds = %if.end20
  %34 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp, align 8, !dbg !6473
  %freq27 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %34, i32 0, i32 3, !dbg !6475
  %35 = load i32, i32* %freq27, align 8, !dbg !6475
  store i32 %35, i32* %mult, align 4, !dbg !6476
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !6477
  %freq28 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %36, i32 0, i32 8, !dbg !6477
  %37 = load i32, i32* %freq28, align 4, !dbg !6477
  store i32 %37, i32* %freq, align 4, !dbg !6478
  %38 = load i32, i32* %freq, align 4, !dbg !6479
  %cmp29 = icmp eq i32 %38, 0, !dbg !6481
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !6482

if.then30:                                        ; preds = %if.else26
  store i32 1, i32* %freq, align 4, !dbg !6483
  br label %if.end31, !dbg !6484

if.end31:                                         ; preds = %if.then30, %if.else26
  %39 = load i32, i32* %freq, align 4, !dbg !6485
  %40 = load i32, i32* %divisor, align 4, !dbg !6486
  %mul = mul nsw i32 %39, %40, !dbg !6487
  store i32 %mul, i32* %div, align 4, !dbg !6488
  store i8 0, i8* %cont_p, align 1, !dbg !6489
  %41 = load i32, i32* %class_size, align 4, !dbg !6490
  %sub = sub nsw i32 %41, 1, !dbg !6492
  store i32 %sub, i32* %i, align 4, !dbg !6493
  br label %for.cond32, !dbg !6494

for.cond32:                                       ; preds = %for.inc, %if.end31
  %42 = load i32, i32* %i, align 4, !dbg !6495
  %cmp33 = icmp sge i32 %42, 0, !dbg !6497
  br i1 %cmp33, label %for.body34, label %for.end, !dbg !6498

for.body34:                                       ; preds = %for.cond32
  %43 = load i32, i32* %another_cover_class, align 4, !dbg !6499
  %idxprom35 = zext i32 %43 to i64, !dbg !6501
  %arrayidx36 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_regs, i64 0, i64 %idxprom35, !dbg !6501
  %44 = load i32, i32* %i, align 4, !dbg !6502
  %idxprom37 = sext i32 %44 to i64, !dbg !6501
  %arrayidx38 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx36, i64 0, i64 %idxprom37, !dbg !6501
  %45 = load i16, i16* %arrayidx38, align 2, !dbg !6501
  %conv = sext i16 %45 to i32, !dbg !6501
  store i32 %conv, i32* %hard_regno, align 4, !dbg !6503
  %46 = load i32, i32* %cover_class.addr, align 4, !dbg !6504
  %idxprom39 = zext i32 %46 to i64, !dbg !6505
  %arrayidx40 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom39, !dbg !6505
  %47 = load i32, i32* %hard_regno, align 4, !dbg !6506
  %idxprom41 = sext i32 %47 to i64, !dbg !6505
  %arrayidx42 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx40, i64 0, i64 %idxprom41, !dbg !6505
  %48 = load i16, i16* %arrayidx42, align 2, !dbg !6505
  %conv43 = sext i16 %48 to i32, !dbg !6505
  store i32 %conv43, i32* %index, align 4, !dbg !6507
  %49 = load i32, i32* %index, align 4, !dbg !6508
  %cmp44 = icmp slt i32 %49, 0, !dbg !6510
  br i1 %cmp44, label %if.then46, label %if.end47, !dbg !6511

if.then46:                                        ; preds = %for.body34
  br label %for.inc, !dbg !6512

if.end47:                                         ; preds = %for.body34
  %50 = load i32*, i32** %conflict_costs, align 8, !dbg !6513
  %51 = load i32, i32* %i, align 4, !dbg !6514
  %idxprom48 = sext i32 %51 to i64, !dbg !6513
  %arrayidx49 = getelementptr inbounds i32, i32* %50, i64 %idxprom48, !dbg !6513
  %52 = load i32, i32* %arrayidx49, align 4, !dbg !6513
  %53 = load i32, i32* %mult, align 4, !dbg !6515
  %mul50 = mul nsw i32 %52, %53, !dbg !6516
  %54 = load i32, i32* %div, align 4, !dbg !6517
  %div51 = sdiv i32 %mul50, %54, !dbg !6518
  store i32 %div51, i32* %cost, align 4, !dbg !6519
  %55 = load i32, i32* %cost, align 4, !dbg !6520
  %cmp52 = icmp eq i32 %55, 0, !dbg !6522
  br i1 %cmp52, label %if.then54, label %if.end55, !dbg !6523

if.then54:                                        ; preds = %if.end47
  br label %for.inc, !dbg !6524

if.end55:                                         ; preds = %if.end47
  store i8 1, i8* %cont_p, align 1, !dbg !6525
  %56 = load i8, i8* %decr_p.addr, align 1, !dbg !6526
  %tobool56 = icmp ne i8 %56, 0, !dbg !6526
  br i1 %tobool56, label %if.then57, label %if.end59, !dbg !6528

if.then57:                                        ; preds = %if.end55
  %57 = load i32, i32* %cost, align 4, !dbg !6529
  %sub58 = sub nsw i32 0, %57, !dbg !6530
  store i32 %sub58, i32* %cost, align 4, !dbg !6531
  br label %if.end59, !dbg !6532

if.end59:                                         ; preds = %if.then57, %if.end55
  %58 = load i32, i32* %cost, align 4, !dbg !6533
  %59 = load i32*, i32** %costs.addr, align 8, !dbg !6534
  %60 = load i32, i32* %index, align 4, !dbg !6535
  %idxprom60 = sext i32 %60 to i64, !dbg !6534
  %arrayidx61 = getelementptr inbounds i32, i32* %59, i64 %idxprom60, !dbg !6534
  %61 = load i32, i32* %arrayidx61, align 4, !dbg !6536
  %add = add nsw i32 %61, %58, !dbg !6536
  store i32 %add, i32* %arrayidx61, align 4, !dbg !6536
  br label %for.inc, !dbg !6537

for.inc:                                          ; preds = %if.end59, %if.then54, %if.then46
  %62 = load i32, i32* %i, align 4, !dbg !6538
  %dec = add nsw i32 %62, -1, !dbg !6538
  store i32 %dec, i32* %i, align 4, !dbg !6538
  br label %for.cond32, !dbg !6539, !llvm.loop !6540

for.end:                                          ; preds = %for.cond32
  br label %if.end62

if.end62:                                         ; preds = %for.end, %if.then25
  %63 = load i8, i8* %cont_p, align 1, !dbg !6542
  %conv63 = zext i8 %63 to i32, !dbg !6542
  %tobool64 = icmp ne i32 %conv63, 0, !dbg !6542
  br i1 %tobool64, label %land.lhs.true, label %if.end69, !dbg !6544

land.lhs.true:                                    ; preds = %if.end62
  %64 = load i32, i32* %divisor, align 4, !dbg !6545
  %cmp65 = icmp sle i32 %64, 256, !dbg !6546
  br i1 %cmp65, label %if.then67, label %if.end69, !dbg !6547

if.then67:                                        ; preds = %land.lhs.true
  %65 = load %struct.ira_allocno*, %struct.ira_allocno** %another_allocno, align 8, !dbg !6548
  %66 = load i32, i32* %divisor, align 4, !dbg !6549
  %mul68 = mul nsw i32 %66, 4, !dbg !6550
  call void @queue_update_cost(%struct.ira_allocno* %65, i32 %mul68), !dbg !6551
  br label %if.end69, !dbg !6551

if.end69:                                         ; preds = %if.then67, %land.lhs.true, %if.end62
  br label %for.inc70, !dbg !6552

for.inc70:                                        ; preds = %if.end69, %if.then19
  %67 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %next_cp, align 8, !dbg !6553
  store %struct.ira_allocno_copy* %67, %struct.ira_allocno_copy** %cp, align 8, !dbg !6554
  br label %for.cond, !dbg !6555, !llvm.loop !6556

for.end71:                                        ; preds = %for.cond
  br label %while.cond, !dbg !6406, !llvm.loop !6558

while.end:                                        ; preds = %while.cond
  ret void, !dbg !6560
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ira_hard_reg_not_in_set_p(i32 %hard_regno, i32 %mode, i64 %hard_regset) #0 !dbg !6561 {
entry:
  %retval = alloca i8, align 1
  %hard_regno.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %hard_regset.addr = alloca i64, align 8
  %i = alloca i32, align 4
  store i32 %hard_regno, i32* %hard_regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %hard_regno.addr, metadata !6564, metadata !DIExpression()), !dbg !6565
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6566, metadata !DIExpression()), !dbg !6567
  store i64 %hard_regset, i64* %hard_regset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %hard_regset.addr, metadata !6568, metadata !DIExpression()), !dbg !6569
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6570, metadata !DIExpression()), !dbg !6571
  %0 = load i32, i32* %hard_regno.addr, align 4, !dbg !6572
  %idxprom = sext i32 %0 to i64, !dbg !6574
  %arrayidx = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom, !dbg !6574
  %1 = load i32, i32* %mode.addr, align 4, !dbg !6575
  %idxprom1 = zext i32 %1 to i64, !dbg !6574
  %arrayidx2 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx, i64 0, i64 %idxprom1, !dbg !6574
  %2 = load i8, i8* %arrayidx2, align 1, !dbg !6574
  %conv = zext i8 %2 to i32, !dbg !6574
  %sub = sub nsw i32 %conv, 1, !dbg !6576
  store i32 %sub, i32* %i, align 4, !dbg !6577
  br label %for.cond, !dbg !6578

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !6579
  %cmp = icmp sge i32 %3, 0, !dbg !6581
  br i1 %cmp, label %for.body, label %for.end, !dbg !6582

for.body:                                         ; preds = %for.cond
  %4 = load i64, i64* %hard_regset.addr, align 8, !dbg !6583
  %5 = load i32, i32* %hard_regno.addr, align 4, !dbg !6583
  %6 = load i32, i32* %i, align 4, !dbg !6583
  %add = add nsw i32 %5, %6, !dbg !6583
  %sh_prom = zext i32 %add to i64, !dbg !6583
  %shl = shl i64 1, %sh_prom, !dbg !6583
  %and = and i64 %4, %shl, !dbg !6583
  %tobool = icmp ne i64 %and, 0, !dbg !6583
  br i1 %tobool, label %if.then, label %if.end, !dbg !6585

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !6586
  br label %return, !dbg !6586

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6583

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !6587
  %dec = add nsw i32 %7, -1, !dbg !6587
  store i32 %dec, i32* %i, align 4, !dbg !6587
  br label %for.cond, !dbg !6588, !llvm.loop !6589

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !6591
  br label %return, !dbg !6591

return:                                           ; preds = %for.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !6592
  ret i8 %8, !dbg !6592
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @allocno_cost_compare_func(i8* %v1p, i8* %v2p) #0 !dbg !6593 {
entry:
  %retval = alloca i32, align 4
  %v1p.addr = alloca i8*, align 8
  %v2p.addr = alloca i8*, align 8
  %p1 = alloca %struct.ira_allocno*, align 8
  %p2 = alloca %struct.ira_allocno*, align 8
  %c1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  store i8* %v1p, i8** %v1p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v1p.addr, metadata !6594, metadata !DIExpression()), !dbg !6595
  store i8* %v2p, i8** %v2p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v2p.addr, metadata !6596, metadata !DIExpression()), !dbg !6597
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %p1, metadata !6598, metadata !DIExpression()), !dbg !6599
  %0 = load i8*, i8** %v1p.addr, align 8, !dbg !6600
  %1 = bitcast i8* %0 to %struct.ira_allocno**, !dbg !6601
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %1, align 8, !dbg !6602
  store %struct.ira_allocno* %2, %struct.ira_allocno** %p1, align 8, !dbg !6599
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %p2, metadata !6603, metadata !DIExpression()), !dbg !6604
  %3 = load i8*, i8** %v2p.addr, align 8, !dbg !6605
  %4 = bitcast i8* %3 to %struct.ira_allocno**, !dbg !6606
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %4, align 8, !dbg !6607
  store %struct.ira_allocno* %5, %struct.ira_allocno** %p2, align 8, !dbg !6604
  call void @llvm.dbg.declare(metadata i32* %c1, metadata !6608, metadata !DIExpression()), !dbg !6609
  call void @llvm.dbg.declare(metadata i32* %c2, metadata !6610, metadata !DIExpression()), !dbg !6611
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %p1, align 8, !dbg !6612
  %updated_memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 13, !dbg !6612
  %7 = load i32, i32* %updated_memory_cost, align 8, !dbg !6612
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %p1, align 8, !dbg !6613
  %updated_cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 11, !dbg !6613
  %9 = load i32, i32* %updated_cover_class_cost, align 8, !dbg !6613
  %sub = sub nsw i32 %7, %9, !dbg !6614
  store i32 %sub, i32* %c1, align 4, !dbg !6615
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %p2, align 8, !dbg !6616
  %updated_memory_cost1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 13, !dbg !6616
  %11 = load i32, i32* %updated_memory_cost1, align 8, !dbg !6616
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %p2, align 8, !dbg !6617
  %updated_cover_class_cost2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 11, !dbg !6617
  %13 = load i32, i32* %updated_cover_class_cost2, align 8, !dbg !6617
  %sub3 = sub nsw i32 %11, %13, !dbg !6618
  store i32 %sub3, i32* %c2, align 4, !dbg !6619
  %14 = load i32, i32* %c1, align 4, !dbg !6620
  %15 = load i32, i32* %c2, align 4, !dbg !6622
  %sub4 = sub nsw i32 %14, %15, !dbg !6623
  %tobool = icmp ne i32 %sub4, 0, !dbg !6623
  br i1 %tobool, label %if.then, label %if.end, !dbg !6624

if.then:                                          ; preds = %entry
  %16 = load i32, i32* %c1, align 4, !dbg !6625
  %17 = load i32, i32* %c2, align 4, !dbg !6626
  %sub5 = sub nsw i32 %16, %17, !dbg !6627
  store i32 %sub5, i32* %retval, align 4, !dbg !6628
  br label %return, !dbg !6628

if.end:                                           ; preds = %entry
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %p1, align 8, !dbg !6629
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 0, !dbg !6629
  %19 = load i32, i32* %num, align 8, !dbg !6629
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %p2, align 8, !dbg !6630
  %num6 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 0, !dbg !6630
  %21 = load i32, i32* %num6, align 8, !dbg !6630
  %sub7 = sub nsw i32 %19, %21, !dbg !6631
  store i32 %sub7, i32* %retval, align 4, !dbg !6632
  br label %return, !dbg !6632

return:                                           ; preds = %if.end, %if.then
  %22 = load i32, i32* %retval, align 4, !dbg !6633
  ret i32 %22, !dbg !6633
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno** @VEC_ira_allocno_t_heap_safe_push(%struct.VEC_ira_allocno_t_heap** %vec_, %struct.ira_allocno* %obj_) #0 !dbg !6634 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_heap**, align 8
  %obj_.addr = alloca %struct.ira_allocno*, align 8
  store %struct.VEC_ira_allocno_t_heap** %vec_, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_heap*** %vec_.addr, metadata !6638, metadata !DIExpression()), !dbg !6639
  store %struct.ira_allocno* %obj_, %struct.ira_allocno** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %obj_.addr, metadata !6640, metadata !DIExpression()), !dbg !6639
  %0 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !6639
  %call = call i32 @VEC_ira_allocno_t_heap_reserve(%struct.VEC_ira_allocno_t_heap** %0, i32 1), !dbg !6639
  %1 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !6639
  %2 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %1, align 8, !dbg !6639
  %tobool = icmp ne %struct.VEC_ira_allocno_t_heap* %2, null, !dbg !6639
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6639

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !6639
  %4 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %3, align 8, !dbg !6639
  %base = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %4, i32 0, i32 0, !dbg !6639
  br label %cond.end, !dbg !6639

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6639

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_allocno_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6639
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %obj_.addr, align 8, !dbg !6639
  %call1 = call %struct.ira_allocno** @VEC_ira_allocno_t_base_quick_push(%struct.VEC_ira_allocno_t_base* %cond, %struct.ira_allocno* %5), !dbg !6639
  ret %struct.ira_allocno** %call1, !dbg !6639
}

; Function Attrs: noinline nounwind uwtable
define internal void @print_coalesced_allocno(%struct.ira_allocno* %allocno) #0 !dbg !6641 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %a = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !6642, metadata !DIExpression()), !dbg !6643
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !6644, metadata !DIExpression()), !dbg !6645
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !6646
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 19, !dbg !6646
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !6646
  store %struct.ira_allocno* %1, %struct.ira_allocno** %a, align 8, !dbg !6648
  br label %for.cond, !dbg !6649

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6650
  call void @ira_print_expanded_allocno(%struct.ira_allocno* %2), !dbg !6653
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6654
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !6656
  %cmp = icmp eq %struct.ira_allocno* %3, %4, !dbg !6657
  br i1 %cmp, label %if.then, label %if.end, !dbg !6658

if.then:                                          ; preds = %for.cond
  br label %for.end, !dbg !6659

if.end:                                           ; preds = %for.cond
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !6660
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !6661
  br label %for.inc, !dbg !6662

for.inc:                                          ; preds = %if.end
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6663
  %next_coalesced_allocno1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 19, !dbg !6663
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno1, align 8, !dbg !6663
  store %struct.ira_allocno* %7, %struct.ira_allocno** %a, align 8, !dbg !6664
  br label %for.cond, !dbg !6665, !llvm.loop !6666

for.end:                                          ; preds = %if.then
  ret void, !dbg !6669
}

declare dso_local void @ira_free_allocno_updated_costs(%struct.ira_allocno*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @get_next_update_cost(%struct.ira_allocno** %allocno, i32* %divisor) #0 !dbg !6670 {
entry:
  %retval = alloca i8, align 1
  %allocno.addr = alloca %struct.ira_allocno**, align 8
  %divisor.addr = alloca i32*, align 8
  %elem = alloca %struct.update_cost_queue_elem*, align 8
  store %struct.ira_allocno** %allocno, %struct.ira_allocno*** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %allocno.addr, metadata !6673, metadata !DIExpression()), !dbg !6674
  store i32* %divisor, i32** %divisor.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %divisor.addr, metadata !6675, metadata !DIExpression()), !dbg !6676
  call void @llvm.dbg.declare(metadata %struct.update_cost_queue_elem** %elem, metadata !6677, metadata !DIExpression()), !dbg !6678
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** @update_cost_queue, align 8, !dbg !6679
  %cmp = icmp eq %struct.ira_allocno* %0, null, !dbg !6681
  br i1 %cmp, label %if.then, label %if.end, !dbg !6682

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6683
  br label %return, !dbg !6683

if.end:                                           ; preds = %entry
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** @update_cost_queue, align 8, !dbg !6684
  %2 = load %struct.ira_allocno**, %struct.ira_allocno*** %allocno.addr, align 8, !dbg !6685
  store %struct.ira_allocno* %1, %struct.ira_allocno** %2, align 8, !dbg !6686
  %3 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** @update_cost_queue_elems, align 8, !dbg !6687
  %4 = load %struct.ira_allocno**, %struct.ira_allocno*** %allocno.addr, align 8, !dbg !6688
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %4, align 8, !dbg !6688
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 0, !dbg !6688
  %6 = load i32, i32* %num, align 8, !dbg !6688
  %idxprom = sext i32 %6 to i64, !dbg !6687
  %arrayidx = getelementptr inbounds %struct.update_cost_queue_elem, %struct.update_cost_queue_elem* %3, i64 %idxprom, !dbg !6687
  store %struct.update_cost_queue_elem* %arrayidx, %struct.update_cost_queue_elem** %elem, align 8, !dbg !6689
  %7 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** %elem, align 8, !dbg !6690
  %divisor1 = getelementptr inbounds %struct.update_cost_queue_elem, %struct.update_cost_queue_elem* %7, i32 0, i32 1, !dbg !6691
  %8 = load i32, i32* %divisor1, align 4, !dbg !6691
  %9 = load i32*, i32** %divisor.addr, align 8, !dbg !6692
  store i32 %8, i32* %9, align 4, !dbg !6693
  %10 = load %struct.update_cost_queue_elem*, %struct.update_cost_queue_elem** %elem, align 8, !dbg !6694
  %next = getelementptr inbounds %struct.update_cost_queue_elem, %struct.update_cost_queue_elem* %10, i32 0, i32 2, !dbg !6695
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %next, align 8, !dbg !6695
  store %struct.ira_allocno* %11, %struct.ira_allocno** @update_cost_queue, align 8, !dbg !6696
  store i8 1, i8* %retval, align 1, !dbg !6697
  br label %return, !dbg !6697

return:                                           ; preds = %if.end, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !6698
  ret i8 %12, !dbg !6698
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_allocno_t_heap_reserve(%struct.VEC_ira_allocno_t_heap** %vec_, i32 %alloc_) #0 !dbg !6699 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_ira_allocno_t_heap** %vec_, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_heap*** %vec_.addr, metadata !6702, metadata !DIExpression()), !dbg !6703
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6704, metadata !DIExpression()), !dbg !6703
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6705, metadata !DIExpression()), !dbg !6703
  %0 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !6703
  %1 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %0, align 8, !dbg !6703
  %tobool = icmp ne %struct.VEC_ira_allocno_t_heap* %1, null, !dbg !6703
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6703

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !6703
  %3 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %2, align 8, !dbg !6703
  %base = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %3, i32 0, i32 0, !dbg !6703
  br label %cond.end, !dbg !6703

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6703

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_allocno_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6703
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6703
  %call = call i32 @VEC_ira_allocno_t_base_space(%struct.VEC_ira_allocno_t_base* %cond, i32 %4), !dbg !6703
  %tobool1 = icmp ne i32 %call, 0, !dbg !6703
  %lnot = xor i1 %tobool1, true, !dbg !6703
  %lnot.ext = zext i1 %lnot to i32, !dbg !6703
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6703
  %5 = load i32, i32* %extend, align 4, !dbg !6706
  %tobool2 = icmp ne i32 %5, 0, !dbg !6706
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6703

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !6706
  %7 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %6, align 8, !dbg !6706
  %8 = bitcast %struct.VEC_ira_allocno_t_heap* %7 to i8*, !dbg !6706
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6706
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6706
  %10 = bitcast i8* %call3 to %struct.VEC_ira_allocno_t_heap*, !dbg !6706
  %11 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !6706
  store %struct.VEC_ira_allocno_t_heap* %10, %struct.VEC_ira_allocno_t_heap** %11, align 8, !dbg !6706
  br label %if.end, !dbg !6706

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6703
  ret i32 %12, !dbg !6703
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno** @VEC_ira_allocno_t_base_quick_push(%struct.VEC_ira_allocno_t_base* %vec_, %struct.ira_allocno* %obj_) #0 !dbg !6708 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_base*, align 8
  %obj_.addr = alloca %struct.ira_allocno*, align 8
  %slot_ = alloca %struct.ira_allocno**, align 8
  store %struct.VEC_ira_allocno_t_base* %vec_, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_base** %vec_.addr, metadata !6712, metadata !DIExpression()), !dbg !6713
  store %struct.ira_allocno* %obj_, %struct.ira_allocno** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %obj_.addr, metadata !6714, metadata !DIExpression()), !dbg !6713
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %slot_, metadata !6715, metadata !DIExpression()), !dbg !6713
  %0 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6713
  %num = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %0, i32 0, i32 0, !dbg !6713
  %1 = load i32, i32* %num, align 8, !dbg !6713
  %2 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6713
  %alloc = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %2, i32 0, i32 1, !dbg !6713
  %3 = load i32, i32* %alloc, align 4, !dbg !6713
  %cmp = icmp ult i32 %1, %3, !dbg !6713
  %conv = zext i1 %cmp to i32, !dbg !6713
  %4 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6713
  %vec = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %4, i32 0, i32 2, !dbg !6713
  %5 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6713
  %num1 = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %5, i32 0, i32 0, !dbg !6713
  %6 = load i32, i32* %num1, align 8, !dbg !6713
  %inc = add i32 %6, 1, !dbg !6713
  store i32 %inc, i32* %num1, align 8, !dbg !6713
  %idxprom = zext i32 %6 to i64, !dbg !6713
  %arrayidx = getelementptr inbounds [1 x %struct.ira_allocno*], [1 x %struct.ira_allocno*]* %vec, i64 0, i64 %idxprom, !dbg !6713
  store %struct.ira_allocno** %arrayidx, %struct.ira_allocno*** %slot_, align 8, !dbg !6713
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %obj_.addr, align 8, !dbg !6713
  %8 = load %struct.ira_allocno**, %struct.ira_allocno*** %slot_, align 8, !dbg !6713
  store %struct.ira_allocno* %7, %struct.ira_allocno** %8, align 8, !dbg !6713
  %9 = load %struct.ira_allocno**, %struct.ira_allocno*** %slot_, align 8, !dbg !6713
  ret %struct.ira_allocno** %9, !dbg !6713
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_allocno_t_base_space(%struct.VEC_ira_allocno_t_base* %vec_, i32 %alloc_) #0 !dbg !6716 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_ira_allocno_t_base* %vec_, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_base** %vec_.addr, metadata !6719, metadata !DIExpression()), !dbg !6720
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6721, metadata !DIExpression()), !dbg !6720
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6720
  %cmp = icmp sge i32 %0, 0, !dbg !6720
  %conv = zext i1 %cmp to i32, !dbg !6720
  %1 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6720
  %tobool = icmp ne %struct.VEC_ira_allocno_t_base* %1, null, !dbg !6720
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6720

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6720
  %alloc = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %2, i32 0, i32 1, !dbg !6720
  %3 = load i32, i32* %alloc, align 4, !dbg !6720
  %4 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !6720
  %num = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %4, i32 0, i32 0, !dbg !6720
  %5 = load i32, i32* %num, align 8, !dbg !6720
  %sub = sub i32 %3, %5, !dbg !6720
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6720
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6720
  %conv2 = zext i1 %cmp1 to i32, !dbg !6720
  br label %cond.end, !dbg !6720

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6720
  %tobool3 = icmp ne i32 %7, 0, !dbg !6720
  %lnot = xor i1 %tobool3, true, !dbg !6720
  %lnot.ext = zext i1 %lnot to i32, !dbg !6720
  br label %cond.end, !dbg !6720

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6720
  ret i32 %cond, !dbg !6720
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #3

declare dso_local void @ira_print_expanded_allocno(%struct.ira_allocno*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @copy_freq_compare_func(i8* %v1p, i8* %v2p) #0 !dbg !6722 {
entry:
  %retval = alloca i32, align 4
  %v1p.addr = alloca i8*, align 8
  %v2p.addr = alloca i8*, align 8
  %cp1 = alloca %struct.ira_allocno_copy*, align 8
  %cp2 = alloca %struct.ira_allocno_copy*, align 8
  %pri1 = alloca i32, align 4
  %pri2 = alloca i32, align 4
  store i8* %v1p, i8** %v1p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v1p.addr, metadata !6723, metadata !DIExpression()), !dbg !6724
  store i8* %v2p, i8** %v2p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v2p.addr, metadata !6725, metadata !DIExpression()), !dbg !6726
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp1, metadata !6727, metadata !DIExpression()), !dbg !6728
  %0 = load i8*, i8** %v1p.addr, align 8, !dbg !6729
  %1 = bitcast i8* %0 to %struct.ira_allocno_copy**, !dbg !6730
  %2 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %1, align 8, !dbg !6731
  store %struct.ira_allocno_copy* %2, %struct.ira_allocno_copy** %cp1, align 8, !dbg !6728
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_copy** %cp2, metadata !6732, metadata !DIExpression()), !dbg !6733
  %3 = load i8*, i8** %v2p.addr, align 8, !dbg !6734
  %4 = bitcast i8* %3 to %struct.ira_allocno_copy**, !dbg !6735
  %5 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %4, align 8, !dbg !6736
  store %struct.ira_allocno_copy* %5, %struct.ira_allocno_copy** %cp2, align 8, !dbg !6733
  call void @llvm.dbg.declare(metadata i32* %pri1, metadata !6737, metadata !DIExpression()), !dbg !6738
  call void @llvm.dbg.declare(metadata i32* %pri2, metadata !6739, metadata !DIExpression()), !dbg !6740
  %6 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp1, align 8, !dbg !6741
  %freq = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %6, i32 0, i32 3, !dbg !6742
  %7 = load i32, i32* %freq, align 8, !dbg !6742
  store i32 %7, i32* %pri1, align 4, !dbg !6743
  %8 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp2, align 8, !dbg !6744
  %freq1 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %8, i32 0, i32 3, !dbg !6745
  %9 = load i32, i32* %freq1, align 8, !dbg !6745
  store i32 %9, i32* %pri2, align 4, !dbg !6746
  %10 = load i32, i32* %pri2, align 4, !dbg !6747
  %11 = load i32, i32* %pri1, align 4, !dbg !6749
  %sub = sub nsw i32 %10, %11, !dbg !6750
  %tobool = icmp ne i32 %sub, 0, !dbg !6750
  br i1 %tobool, label %if.then, label %if.end, !dbg !6751

if.then:                                          ; preds = %entry
  %12 = load i32, i32* %pri2, align 4, !dbg !6752
  %13 = load i32, i32* %pri1, align 4, !dbg !6753
  %sub2 = sub nsw i32 %12, %13, !dbg !6754
  store i32 %sub2, i32* %retval, align 4, !dbg !6755
  br label %return, !dbg !6755

if.end:                                           ; preds = %entry
  %14 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp1, align 8, !dbg !6756
  %num = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %14, i32 0, i32 0, !dbg !6757
  %15 = load i32, i32* %num, align 8, !dbg !6757
  %16 = load %struct.ira_allocno_copy*, %struct.ira_allocno_copy** %cp2, align 8, !dbg !6758
  %num3 = getelementptr inbounds %struct.ira_allocno_copy, %struct.ira_allocno_copy* %16, i32 0, i32 0, !dbg !6759
  %17 = load i32, i32* %num3, align 8, !dbg !6759
  %sub4 = sub nsw i32 %15, %17, !dbg !6760
  store i32 %sub4, i32* %retval, align 4, !dbg !6761
  br label %return, !dbg !6761

return:                                           ; preds = %if.end, %if.then
  %18 = load i32, i32* %retval, align 4, !dbg !6762
  ret i32 %18, !dbg !6762
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @coalesced_allocno_conflict_p(%struct.ira_allocno* %a1, %struct.ira_allocno* %a2, i8 zeroext %reload_p) #0 !dbg !6763 {
entry:
  %retval = alloca i8, align 1
  %a1.addr = alloca %struct.ira_allocno*, align 8
  %a2.addr = alloca %struct.ira_allocno*, align 8
  %reload_p.addr = alloca i8, align 1
  %a = alloca %struct.ira_allocno*, align 8
  %conflict_allocno = alloca %struct.ira_allocno*, align 8
  %aci = alloca %struct.ira_allocno_conflict_iterator, align 8
  store %struct.ira_allocno* %a1, %struct.ira_allocno** %a1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1.addr, metadata !6766, metadata !DIExpression()), !dbg !6767
  store %struct.ira_allocno* %a2, %struct.ira_allocno** %a2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2.addr, metadata !6768, metadata !DIExpression()), !dbg !6769
  store i8 %reload_p, i8* %reload_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %reload_p.addr, metadata !6770, metadata !DIExpression()), !dbg !6771
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !6772, metadata !DIExpression()), !dbg !6773
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %conflict_allocno, metadata !6774, metadata !DIExpression()), !dbg !6775
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_conflict_iterator* %aci, metadata !6776, metadata !DIExpression()), !dbg !6777
  %0 = load i8, i8* @allocno_coalesced_p, align 1, !dbg !6778
  %tobool = icmp ne i8 %0, 0, !dbg !6778
  br i1 %tobool, label %if.then, label %if.end3, !dbg !6780

if.then:                                          ; preds = %entry
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !6781
  call void @bitmap_clear(%struct.bitmap_head_def* %1), !dbg !6783
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !6784
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 19, !dbg !6784
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !6784
  store %struct.ira_allocno* %3, %struct.ira_allocno** %a, align 8, !dbg !6786
  br label %for.cond, !dbg !6787

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !6788
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6791
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 0, !dbg !6791
  %6 = load i32, i32* %num, align 8, !dbg !6791
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %4, i32 %6), !dbg !6792
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6793
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !6795
  %cmp = icmp eq %struct.ira_allocno* %7, %8, !dbg !6796
  br i1 %cmp, label %if.then1, label %if.end, !dbg !6797

if.then1:                                         ; preds = %for.cond
  br label %for.end, !dbg !6798

if.end:                                           ; preds = %for.cond
  br label %for.inc, !dbg !6799

for.inc:                                          ; preds = %if.end
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6800
  %next_coalesced_allocno2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 19, !dbg !6800
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno2, align 8, !dbg !6800
  store %struct.ira_allocno* %10, %struct.ira_allocno** %a, align 8, !dbg !6801
  br label %for.cond, !dbg !6802, !llvm.loop !6803

for.end:                                          ; preds = %if.then1
  br label %if.end3, !dbg !6806

if.end3:                                          ; preds = %for.end, %entry
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !6807
  %next_coalesced_allocno4 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 19, !dbg !6807
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno4, align 8, !dbg !6807
  store %struct.ira_allocno* %12, %struct.ira_allocno** %a, align 8, !dbg !6809
  br label %for.cond5, !dbg !6810

for.cond5:                                        ; preds = %for.inc37, %if.end3
  %13 = load i8, i8* %reload_p.addr, align 1, !dbg !6811
  %tobool6 = icmp ne i8 %13, 0, !dbg !6811
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !6815

if.then7:                                         ; preds = %for.cond5
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !6816
  %next_coalesced_allocno8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 19, !dbg !6816
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno8, align 8, !dbg !6816
  store %struct.ira_allocno* %15, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !6819
  br label %for.cond9, !dbg !6820

for.cond9:                                        ; preds = %for.inc17, %if.then7
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6821
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !6825
  %call10 = call zeroext i8 @allocnos_have_intersected_live_ranges_p(%struct.ira_allocno* %16, %struct.ira_allocno* %17), !dbg !6826
  %tobool11 = icmp ne i8 %call10, 0, !dbg !6826
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !6827

if.then12:                                        ; preds = %for.cond9
  store i8 1, i8* %retval, align 1, !dbg !6828
  br label %return, !dbg !6828

if.end13:                                         ; preds = %for.cond9
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !6829
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !6831
  %cmp14 = icmp eq %struct.ira_allocno* %18, %19, !dbg !6832
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !6833

if.then15:                                        ; preds = %if.end13
  br label %for.end19, !dbg !6834

if.end16:                                         ; preds = %if.end13
  br label %for.inc17, !dbg !6835

for.inc17:                                        ; preds = %if.end16
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !6836
  %next_coalesced_allocno18 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 19, !dbg !6836
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno18, align 8, !dbg !6836
  store %struct.ira_allocno* %21, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !6837
  br label %for.cond9, !dbg !6838, !llvm.loop !6839

for.end19:                                        ; preds = %if.then15
  br label %if.end32, !dbg !6842

if.else:                                          ; preds = %for.cond5
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6843
  call void @ira_allocno_conflict_iter_init(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno* %22), !dbg !6843
  br label %for.cond20, !dbg !6843

for.cond20:                                       ; preds = %for.inc30, %if.else
  %call21 = call zeroext i8 @ira_allocno_conflict_iter_cond(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno** %conflict_allocno), !dbg !6846
  %tobool22 = icmp ne i8 %call21, 0, !dbg !6843
  br i1 %tobool22, label %for.body, label %for.end31, !dbg !6843

for.body:                                         ; preds = %for.cond20
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !6848
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !6850
  %cmp23 = icmp eq %struct.ira_allocno* %23, %24, !dbg !6851
  br i1 %cmp23, label %if.then28, label %lor.lhs.false, !dbg !6852

lor.lhs.false:                                    ; preds = %for.body
  %25 = load i8, i8* @allocno_coalesced_p, align 1, !dbg !6853
  %conv = zext i8 %25 to i32, !dbg !6853
  %tobool24 = icmp ne i32 %conv, 0, !dbg !6853
  br i1 %tobool24, label %land.lhs.true, label %if.end29, !dbg !6854

land.lhs.true:                                    ; preds = %lor.lhs.false
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !6855
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !6856
  %num25 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 0, !dbg !6856
  %28 = load i32, i32* %num25, align 8, !dbg !6856
  %call26 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %26, i32 %28), !dbg !6857
  %tobool27 = icmp ne i32 %call26, 0, !dbg !6857
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !6858

if.then28:                                        ; preds = %land.lhs.true, %for.body
  store i8 1, i8* %retval, align 1, !dbg !6859
  br label %return, !dbg !6859

if.end29:                                         ; preds = %land.lhs.true, %lor.lhs.false
  br label %for.inc30, !dbg !6860

for.inc30:                                        ; preds = %if.end29
  call void @ira_allocno_conflict_iter_next(%struct.ira_allocno_conflict_iterator* %aci), !dbg !6846
  br label %for.cond20, !dbg !6846, !llvm.loop !6861

for.end31:                                        ; preds = %for.cond20
  br label %if.end32

if.end32:                                         ; preds = %for.end31, %for.end19
  %29 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6863
  %30 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !6865
  %cmp33 = icmp eq %struct.ira_allocno* %29, %30, !dbg !6866
  br i1 %cmp33, label %if.then35, label %if.end36, !dbg !6867

if.then35:                                        ; preds = %if.end32
  br label %for.end39, !dbg !6868

if.end36:                                         ; preds = %if.end32
  br label %for.inc37, !dbg !6869

for.inc37:                                        ; preds = %if.end36
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6870
  %next_coalesced_allocno38 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 19, !dbg !6870
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno38, align 8, !dbg !6870
  store %struct.ira_allocno* %32, %struct.ira_allocno** %a, align 8, !dbg !6871
  br label %for.cond5, !dbg !6872, !llvm.loop !6873

for.end39:                                        ; preds = %if.then35
  store i8 0, i8* %retval, align 1, !dbg !6876
  br label %return, !dbg !6876

return:                                           ; preds = %for.end39, %if.then28, %if.then12
  %33 = load i8, i8* %retval, align 1, !dbg !6877
  ret i8 %33, !dbg !6877
}

; Function Attrs: noinline nounwind uwtable
define internal void @merge_allocnos(%struct.ira_allocno* %a1, %struct.ira_allocno* %a2) #0 !dbg !6878 {
entry:
  %a1.addr = alloca %struct.ira_allocno*, align 8
  %a2.addr = alloca %struct.ira_allocno*, align 8
  %a = alloca %struct.ira_allocno*, align 8
  %first = alloca %struct.ira_allocno*, align 8
  %last = alloca %struct.ira_allocno*, align 8
  %next = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno* %a1, %struct.ira_allocno** %a1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1.addr, metadata !6881, metadata !DIExpression()), !dbg !6882
  store %struct.ira_allocno* %a2, %struct.ira_allocno** %a2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2.addr, metadata !6883, metadata !DIExpression()), !dbg !6884
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !6885, metadata !DIExpression()), !dbg !6886
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %first, metadata !6887, metadata !DIExpression()), !dbg !6888
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %last, metadata !6889, metadata !DIExpression()), !dbg !6890
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %next, metadata !6891, metadata !DIExpression()), !dbg !6892
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a1.addr, align 8, !dbg !6893
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 18, !dbg !6893
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !6893
  store %struct.ira_allocno* %1, %struct.ira_allocno** %first, align 8, !dbg !6894
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !6895
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !6897
  %first_coalesced_allocno1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 18, !dbg !6897
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno1, align 8, !dbg !6897
  %cmp = icmp eq %struct.ira_allocno* %2, %4, !dbg !6898
  br i1 %cmp, label %if.then, label %if.end, !dbg !6899

if.then:                                          ; preds = %entry
  br label %return, !dbg !6900

if.end:                                           ; preds = %entry
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !6901
  store %struct.ira_allocno* %5, %struct.ira_allocno** %last, align 8, !dbg !6903
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !6904
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 19, !dbg !6904
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !6904
  store %struct.ira_allocno* %7, %struct.ira_allocno** %a, align 8, !dbg !6905
  br label %for.cond, !dbg !6906

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !6907
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6910
  %first_coalesced_allocno2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 18, !dbg !6910
  store %struct.ira_allocno* %8, %struct.ira_allocno** %first_coalesced_allocno2, align 8, !dbg !6911
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6912
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !6914
  %cmp3 = icmp eq %struct.ira_allocno* %10, %11, !dbg !6915
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !6916

if.then4:                                         ; preds = %for.cond
  br label %for.end, !dbg !6917

if.end5:                                          ; preds = %for.cond
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6918
  store %struct.ira_allocno* %12, %struct.ira_allocno** %last, align 8, !dbg !6919
  br label %for.inc, !dbg !6920

for.inc:                                          ; preds = %if.end5
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6921
  %next_coalesced_allocno6 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 19, !dbg !6921
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno6, align 8, !dbg !6921
  store %struct.ira_allocno* %14, %struct.ira_allocno** %a, align 8, !dbg !6922
  br label %for.cond, !dbg !6923, !llvm.loop !6924

for.end:                                          ; preds = %if.then4
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !6927
  %next_coalesced_allocno7 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %15, i32 0, i32 19, !dbg !6927
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno7, align 8, !dbg !6927
  store %struct.ira_allocno* %16, %struct.ira_allocno** %next, align 8, !dbg !6928
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a2.addr, align 8, !dbg !6929
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %first, align 8, !dbg !6930
  %next_coalesced_allocno8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 19, !dbg !6930
  store %struct.ira_allocno* %17, %struct.ira_allocno** %next_coalesced_allocno8, align 8, !dbg !6931
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %next, align 8, !dbg !6932
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %last, align 8, !dbg !6933
  %next_coalesced_allocno9 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %20, i32 0, i32 19, !dbg !6933
  store %struct.ira_allocno* %19, %struct.ira_allocno** %next_coalesced_allocno9, align 8, !dbg !6934
  br label %return, !dbg !6935

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !6935
}

declare dso_local %struct.bitmap_head_def* @regstat_get_setjmp_crosses() #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @slot_coalesced_allocno_live_ranges_intersect_p(%struct.ira_allocno* %allocno, i32 %n) #0 !dbg !6936 {
entry:
  %retval = alloca i8, align 1
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %n.addr = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !6939, metadata !DIExpression()), !dbg !6940
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !6941, metadata !DIExpression()), !dbg !6942
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !6943, metadata !DIExpression()), !dbg !6944
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !6945
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 19, !dbg !6945
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !6945
  store %struct.ira_allocno* %1, %struct.ira_allocno** %a, align 8, !dbg !6947
  br label %for.cond, !dbg !6948

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.ira_allocno_live_range**, %struct.ira_allocno_live_range*** @slot_coalesced_allocnos_live_ranges, align 8, !dbg !6949
  %3 = load i32, i32* %n.addr, align 4, !dbg !6953
  %idxprom = sext i32 %3 to i64, !dbg !6949
  %arrayidx = getelementptr inbounds %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %2, i64 %idxprom, !dbg !6949
  %4 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %arrayidx, align 8, !dbg !6949
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6954
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 20, !dbg !6954
  %6 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !6954
  %call = call zeroext i8 @ira_allocno_live_ranges_intersect_p(%struct.ira_allocno_live_range* %4, %struct.ira_allocno_live_range* %6), !dbg !6955
  %tobool = icmp ne i8 %call, 0, !dbg !6955
  br i1 %tobool, label %if.then, label %if.end, !dbg !6956

if.then:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !6957
  br label %return, !dbg !6957

if.end:                                           ; preds = %for.cond
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6958
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !6960
  %cmp = icmp eq %struct.ira_allocno* %7, %8, !dbg !6961
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !6962

if.then1:                                         ; preds = %if.end
  br label %for.end, !dbg !6963

if.end2:                                          ; preds = %if.end
  br label %for.inc, !dbg !6964

for.inc:                                          ; preds = %if.end2
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6965
  %next_coalesced_allocno3 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 19, !dbg !6965
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno3, align 8, !dbg !6965
  store %struct.ira_allocno* %10, %struct.ira_allocno** %a, align 8, !dbg !6966
  br label %for.cond, !dbg !6967, !llvm.loop !6968

for.end:                                          ; preds = %if.then1
  store i8 0, i8* %retval, align 1, !dbg !6971
  br label %return, !dbg !6971

return:                                           ; preds = %for.end, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !6972
  ret i8 %11, !dbg !6972
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_slot_coalesced_allocno_live_ranges(%struct.ira_allocno* %allocno) #0 !dbg !6973 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %n = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %r = alloca %struct.ira_allocno_live_range*, align 8
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !6974, metadata !DIExpression()), !dbg !6975
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6976, metadata !DIExpression()), !dbg !6977
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !6978, metadata !DIExpression()), !dbg !6979
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_live_range** %r, metadata !6980, metadata !DIExpression()), !dbg !6981
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !6982
  %temp = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 41, !dbg !6982
  %1 = load i32, i32* %temp, align 8, !dbg !6982
  store i32 %1, i32* %n, align 4, !dbg !6983
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !6984
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 19, !dbg !6984
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !6984
  store %struct.ira_allocno* %3, %struct.ira_allocno** %a, align 8, !dbg !6986
  br label %for.cond, !dbg !6987

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !6988
  %live_ranges = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 20, !dbg !6988
  %5 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %live_ranges, align 8, !dbg !6988
  %call = call %struct.ira_allocno_live_range* @ira_copy_allocno_live_range_list(%struct.ira_allocno_live_range* %5), !dbg !6991
  store %struct.ira_allocno_live_range* %call, %struct.ira_allocno_live_range** %r, align 8, !dbg !6992
  %6 = load %struct.ira_allocno_live_range**, %struct.ira_allocno_live_range*** @slot_coalesced_allocnos_live_ranges, align 8, !dbg !6993
  %7 = load i32, i32* %n, align 4, !dbg !6994
  %idxprom = sext i32 %7 to i64, !dbg !6993
  %arrayidx = getelementptr inbounds %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %6, i64 %idxprom, !dbg !6993
  %8 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %arrayidx, align 8, !dbg !6993
  %9 = load %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %r, align 8, !dbg !6995
  %call1 = call %struct.ira_allocno_live_range* @ira_merge_allocno_live_ranges(%struct.ira_allocno_live_range* %8, %struct.ira_allocno_live_range* %9), !dbg !6996
  %10 = load %struct.ira_allocno_live_range**, %struct.ira_allocno_live_range*** @slot_coalesced_allocnos_live_ranges, align 8, !dbg !6997
  %11 = load i32, i32* %n, align 4, !dbg !6998
  %idxprom2 = sext i32 %11 to i64, !dbg !6997
  %arrayidx3 = getelementptr inbounds %struct.ira_allocno_live_range*, %struct.ira_allocno_live_range** %10, i64 %idxprom2, !dbg !6997
  store %struct.ira_allocno_live_range* %call1, %struct.ira_allocno_live_range** %arrayidx3, align 8, !dbg !6999
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7000
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !7002
  %cmp = icmp eq %struct.ira_allocno* %12, %13, !dbg !7003
  br i1 %cmp, label %if.then, label %if.end, !dbg !7004

if.then:                                          ; preds = %for.cond
  br label %for.end, !dbg !7005

if.end:                                           ; preds = %for.cond
  br label %for.inc, !dbg !7006

for.inc:                                          ; preds = %if.end
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7007
  %next_coalesced_allocno4 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 19, !dbg !7007
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno4, align 8, !dbg !7007
  store %struct.ira_allocno* %15, %struct.ira_allocno** %a, align 8, !dbg !7008
  br label %for.cond, !dbg !7009, !llvm.loop !7010

for.end:                                          ; preds = %if.then
  ret void, !dbg !7013
}

declare dso_local void @ira_finish_allocno_live_range_list(%struct.ira_allocno_live_range*) #3

declare dso_local zeroext i8 @ira_allocno_live_ranges_intersect_p(%struct.ira_allocno_live_range*, %struct.ira_allocno_live_range*) #3

declare dso_local %struct.ira_allocno_live_range* @ira_copy_allocno_live_range_list(%struct.ira_allocno_live_range*) #3

declare dso_local %struct.ira_allocno_live_range* @ira_merge_allocno_live_ranges(%struct.ira_allocno_live_range*, %struct.ira_allocno_live_range*) #3

declare dso_local void @df_ref_change_reg_with_loc(i32, i32, %struct.rtx_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !7014 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !7020, metadata !DIExpression()), !dbg !7021
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !7022
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7022
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7022
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7022
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7022
  %1 = load i32, i32* %rt_uint, align 8, !dbg !7022
  ret i32 %1, !dbg !7023
}

declare dso_local void @mark_home_live(i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @REG_N_REFS(i32 %regno) #0 !dbg !7024 {
entry:
  %regno.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !7028, metadata !DIExpression()), !dbg !7029
  %0 = load %struct.regstat_n_sets_and_refs_t*, %struct.regstat_n_sets_and_refs_t** @regstat_n_sets_and_refs, align 8, !dbg !7030
  %1 = load i32, i32* %regno.addr, align 4, !dbg !7031
  %idxprom = sext i32 %1 to i64, !dbg !7030
  %arrayidx = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, %struct.regstat_n_sets_and_refs_t* %0, i64 %idxprom, !dbg !7030
  %refs = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, %struct.regstat_n_sets_and_refs_t* %arrayidx, i32 0, i32 1, !dbg !7032
  %2 = load i32, i32* %refs, align 4, !dbg !7032
  ret i32 %2, !dbg !7033
}

declare dso_local %struct.rtx_def* @find_regno_note(%struct.rtx_def*, i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ira_allocno_t_heap* @VEC_ira_allocno_t_heap_alloc(i32 %alloc_) #0 !dbg !7034 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7037, metadata !DIExpression()), !dbg !7038
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7038
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7038
  %1 = bitcast i8* %call to %struct.VEC_ira_allocno_t_heap*, !dbg !7038
  ret %struct.VEC_ira_allocno_t_heap* %1, !dbg !7038
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_coloring() #0 !dbg !7039 {
entry:
  %call = call %struct.bitmap_head_def* @ira_allocate_bitmap(), !dbg !7040
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !7041
  %0 = load i32, i32* @ira_allocnos_num, align 4, !dbg !7042
  %conv = sext i32 %0 to i64, !dbg !7042
  %mul = mul i64 8, %conv, !dbg !7043
  %call1 = call i8* @ira_allocate(i64 %mul), !dbg !7044
  %1 = bitcast i8* %call1 to %struct.ira_allocno**, !dbg !7045
  store %struct.ira_allocno** %1, %struct.ira_allocno*** @allocnos_for_spilling, align 8, !dbg !7046
  %call2 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i64 32, i64 100), !dbg !7047
  store %struct.alloc_pool_def* %call2, %struct.alloc_pool_def** @splay_tree_node_pool, align 8, !dbg !7048
  %2 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !7049
  %cmp = icmp sgt i32 %2, 0, !dbg !7051
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7052

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7053
  %cmp4 = icmp ne %struct._IO_FILE* %3, null, !dbg !7054
  br i1 %cmp4, label %if.then, label %if.end, !dbg !7055

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7056
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.20, i64 0, i64 0)), !dbg !7057
  br label %if.end, !dbg !7057

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_loop_tree_root, align 8, !dbg !7058
  call void @ira_traverse_loop_tree(i8 zeroext 0, %struct.ira_loop_tree_node* %5, void (%struct.ira_loop_tree_node*)* @color_pass, void (%struct.ira_loop_tree_node*)* null), !dbg !7059
  %6 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !7060
  %cmp7 = icmp sgt i32 %6, 1, !dbg !7062
  br i1 %cmp7, label %land.lhs.true9, label %if.end13, !dbg !7063

land.lhs.true9:                                   ; preds = %if.end
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7064
  %cmp10 = icmp ne %struct._IO_FILE* %7, null, !dbg !7065
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !7066

if.then12:                                        ; preds = %land.lhs.true9
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7067
  call void @ira_print_disposition(%struct._IO_FILE* %8), !dbg !7068
  br label %if.end13, !dbg !7068

if.end13:                                         ; preds = %if.then12, %land.lhs.true9, %if.end
  %9 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @splay_tree_node_pool, align 8, !dbg !7069
  call void @free_alloc_pool(%struct.alloc_pool_def* %9), !dbg !7070
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !7071
  call void @ira_free_bitmap(%struct.bitmap_head_def* %10), !dbg !7072
  %11 = load %struct.ira_allocno**, %struct.ira_allocno*** @allocnos_for_spilling, align 8, !dbg !7073
  %12 = bitcast %struct.ira_allocno** %11 to i8*, !dbg !7073
  call void @ira_free(i8* %12), !dbg !7074
  ret void, !dbg !7075
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ira_allocno_t_heap_free(%struct.VEC_ira_allocno_t_heap** %vec_) #0 !dbg !7076 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_heap**, align 8
  store %struct.VEC_ira_allocno_t_heap** %vec_, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_heap*** %vec_.addr, metadata !7079, metadata !DIExpression()), !dbg !7080
  %0 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !7081
  %1 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %0, align 8, !dbg !7081
  %tobool = icmp ne %struct.VEC_ira_allocno_t_heap* %1, null, !dbg !7081
  br i1 %tobool, label %if.then, label %if.end, !dbg !7080

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !7081
  %3 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** %2, align 8, !dbg !7081
  %4 = bitcast %struct.VEC_ira_allocno_t_heap* %3 to i8*, !dbg !7081
  call void @free(i8* %4), !dbg !7081
  br label %if.end, !dbg !7081

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ira_allocno_t_heap**, %struct.VEC_ira_allocno_t_heap*** %vec_.addr, align 8, !dbg !7080
  store %struct.VEC_ira_allocno_t_heap* null, %struct.VEC_ira_allocno_t_heap** %5, align 8, !dbg !7080
  ret void, !dbg !7080
}

; Function Attrs: noinline nounwind uwtable
define internal void @move_spill_restore() #0 !dbg !7083 {
entry:
  %cost = alloca i32, align 4
  %regno = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %hard_regno2 = alloca i32, align 4
  %index = alloca i32, align 4
  %changed_p = alloca i8, align 1
  %enter_freq = alloca i32, align 4
  %exit_freq = alloca i32, align 4
  %mode = alloca i32, align 4
  %rclass = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %parent_allocno = alloca %struct.ira_allocno*, align 8
  %subloop_allocno = alloca %struct.ira_allocno*, align 8
  %parent = alloca %struct.ira_loop_tree_node*, align 8
  %loop_node = alloca %struct.ira_loop_tree_node*, align 8
  %subloop_node = alloca %struct.ira_loop_tree_node*, align 8
  %ai = alloca %struct.ira_allocno_iterator, align 4
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !7084, metadata !DIExpression()), !dbg !7085
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !7086, metadata !DIExpression()), !dbg !7087
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !7088, metadata !DIExpression()), !dbg !7089
  call void @llvm.dbg.declare(metadata i32* %hard_regno2, metadata !7090, metadata !DIExpression()), !dbg !7091
  call void @llvm.dbg.declare(metadata i32* %index, metadata !7092, metadata !DIExpression()), !dbg !7093
  call void @llvm.dbg.declare(metadata i8* %changed_p, metadata !7094, metadata !DIExpression()), !dbg !7095
  call void @llvm.dbg.declare(metadata i32* %enter_freq, metadata !7096, metadata !DIExpression()), !dbg !7097
  call void @llvm.dbg.declare(metadata i32* %exit_freq, metadata !7098, metadata !DIExpression()), !dbg !7099
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !7100, metadata !DIExpression()), !dbg !7101
  call void @llvm.dbg.declare(metadata i32* %rclass, metadata !7102, metadata !DIExpression()), !dbg !7103
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !7104, metadata !DIExpression()), !dbg !7105
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %parent_allocno, metadata !7106, metadata !DIExpression()), !dbg !7107
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %subloop_allocno, metadata !7108, metadata !DIExpression()), !dbg !7109
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent, metadata !7110, metadata !DIExpression()), !dbg !7111
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_node, metadata !7112, metadata !DIExpression()), !dbg !7113
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %subloop_node, metadata !7114, metadata !DIExpression()), !dbg !7115
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_iterator* %ai, metadata !7116, metadata !DIExpression()), !dbg !7117
  br label %for.cond, !dbg !7118

for.cond:                                         ; preds = %if.end183, %entry
  store i8 0, i8* %changed_p, align 1, !dbg !7119
  %0 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !7123
  %cmp = icmp sgt i32 %0, 0, !dbg !7125
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7126

land.lhs.true:                                    ; preds = %for.cond
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7127
  %cmp1 = icmp ne %struct._IO_FILE* %1, null, !dbg !7128
  br i1 %cmp1, label %if.then, label %if.end, !dbg !7129

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7130
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.43, i64 0, i64 0)), !dbg !7131
  br label %if.end, !dbg !7131

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.cond
  call void @ira_allocno_iter_init(%struct.ira_allocno_iterator* %ai), !dbg !7132
  br label %for.cond2, !dbg !7132

for.cond2:                                        ; preds = %if.end179, %if.then22, %if.end
  %call3 = call zeroext i8 @ira_allocno_iter_cond(%struct.ira_allocno_iterator* %ai, %struct.ira_allocno** %a), !dbg !7134
  %tobool = icmp ne i8 %call3, 0, !dbg !7132
  br i1 %tobool, label %for.body, label %for.end180, !dbg !7132

for.body:                                         ; preds = %for.cond2
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7136
  %regno4 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %3, i32 0, i32 1, !dbg !7136
  %4 = load i32, i32* %regno4, align 4, !dbg !7136
  store i32 %4, i32* %regno, align 4, !dbg !7138
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7139
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 6, !dbg !7139
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !7139
  store %struct.ira_loop_tree_node* %6, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !7140
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7141
  %cap_member = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 17, !dbg !7141
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member, align 8, !dbg !7141
  %cmp5 = icmp ne %struct.ira_allocno* %8, null, !dbg !7143
  br i1 %cmp5, label %if.then22, label %lor.lhs.false, !dbg !7144

lor.lhs.false:                                    ; preds = %for.body
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7145
  %cap = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 16, !dbg !7145
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !7145
  %cmp6 = icmp ne %struct.ira_allocno* %10, null, !dbg !7146
  br i1 %cmp6, label %if.then22, label %lor.lhs.false7, !dbg !7147

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7148
  %hard_regno8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 3, !dbg !7148
  %12 = load i32, i32* %hard_regno8, align 4, !dbg !7148
  store i32 %12, i32* %hard_regno, align 4, !dbg !7149
  %cmp9 = icmp slt i32 %12, 0, !dbg !7150
  br i1 %cmp9, label %if.then22, label %lor.lhs.false10, !dbg !7151

lor.lhs.false10:                                  ; preds = %lor.lhs.false7
  %13 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !7152
  %children = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %13, i32 0, i32 5, !dbg !7153
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %children, align 8, !dbg !7153
  %cmp11 = icmp eq %struct.ira_loop_tree_node* %14, null, !dbg !7154
  br i1 %cmp11, label %if.then22, label %lor.lhs.false12, !dbg !7155

lor.lhs.false12:                                  ; preds = %lor.lhs.false10
  %15 = load i8*, i8** @ira_reg_equiv_invariant_p, align 8, !dbg !7156
  %16 = load i32, i32* %regno, align 4, !dbg !7157
  %idxprom = sext i32 %16 to i64, !dbg !7156
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 %idxprom, !dbg !7156
  %17 = load i8, i8* %arrayidx, align 1, !dbg !7156
  %conv = zext i8 %17 to i32, !dbg !7156
  %tobool13 = icmp ne i32 %conv, 0, !dbg !7156
  br i1 %tobool13, label %if.then22, label %lor.lhs.false14, !dbg !7158

lor.lhs.false14:                                  ; preds = %lor.lhs.false12
  %18 = load %struct.rtx_def**, %struct.rtx_def*** @ira_reg_equiv_const, align 8, !dbg !7159
  %19 = load i32, i32* %regno, align 4, !dbg !7160
  %idxprom15 = sext i32 %19 to i64, !dbg !7159
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %18, i64 %idxprom15, !dbg !7159
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8, !dbg !7159
  %cmp17 = icmp ne %struct.rtx_def* %20, null, !dbg !7161
  br i1 %cmp17, label %if.then22, label %lor.lhs.false19, !dbg !7162

lor.lhs.false19:                                  ; preds = %lor.lhs.false14
  %21 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !7163
  %border_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %21, i32 0, i32 13, !dbg !7164
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %border_allocnos, align 8, !dbg !7164
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7165
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 0, !dbg !7165
  %24 = load i32, i32* %num, align 8, !dbg !7165
  %call20 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %22, i32 %24), !dbg !7166
  %tobool21 = icmp ne i32 %call20, 0, !dbg !7166
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !7167

if.then22:                                        ; preds = %lor.lhs.false19, %lor.lhs.false14, %lor.lhs.false12, %lor.lhs.false10, %lor.lhs.false7, %lor.lhs.false, %for.body
  br label %for.cond2, !dbg !7168, !llvm.loop !7169

if.end23:                                         ; preds = %lor.lhs.false19
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7171
  %mode24 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 2, !dbg !7171
  %26 = load i32, i32* %mode24, align 8, !dbg !7171
  store i32 %26, i32* %mode, align 4, !dbg !7172
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7173
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 9, !dbg !7173
  %28 = load i32, i32* %cover_class, align 8, !dbg !7173
  store i32 %28, i32* %rclass, align 4, !dbg !7174
  %29 = load i32, i32* %rclass, align 4, !dbg !7175
  %idxprom25 = zext i32 %29 to i64, !dbg !7176
  %arrayidx26 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom25, !dbg !7176
  %30 = load i32, i32* %hard_regno, align 4, !dbg !7177
  %idxprom27 = sext i32 %30 to i64, !dbg !7176
  %arrayidx28 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx26, i64 0, i64 %idxprom27, !dbg !7176
  %31 = load i16, i16* %arrayidx28, align 2, !dbg !7176
  %conv29 = sext i16 %31 to i32, !dbg !7176
  store i32 %conv29, i32* %index, align 4, !dbg !7178
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7179
  %memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %32, i32 0, i32 12, !dbg !7179
  %33 = load i32, i32* %memory_cost, align 4, !dbg !7179
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7180
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %34, i32 0, i32 33, !dbg !7180
  %35 = load i32*, i32** %hard_reg_costs, align 8, !dbg !7180
  %cmp30 = icmp eq i32* %35, null, !dbg !7181
  br i1 %cmp30, label %cond.true, label %cond.false, !dbg !7180

cond.true:                                        ; preds = %if.end23
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7182
  %cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %36, i32 0, i32 10, !dbg !7182
  %37 = load i32, i32* %cover_class_cost, align 4, !dbg !7182
  br label %cond.end, !dbg !7180

cond.false:                                       ; preds = %if.end23
  %38 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7183
  %hard_reg_costs32 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %38, i32 0, i32 33, !dbg !7183
  %39 = load i32*, i32** %hard_reg_costs32, align 8, !dbg !7183
  %40 = load i32, i32* %index, align 4, !dbg !7184
  %idxprom33 = sext i32 %40 to i64, !dbg !7183
  %arrayidx34 = getelementptr inbounds i32, i32* %39, i64 %idxprom33, !dbg !7183
  %41 = load i32, i32* %arrayidx34, align 4, !dbg !7183
  br label %cond.end, !dbg !7180

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %37, %cond.true ], [ %41, %cond.false ], !dbg !7180
  %sub = sub nsw i32 %33, %cond, !dbg !7185
  store i32 %sub, i32* %cost, align 4, !dbg !7186
  %42 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !7187
  %subloops = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %42, i32 0, i32 4, !dbg !7189
  %43 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloops, align 8, !dbg !7189
  store %struct.ira_loop_tree_node* %43, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7190
  br label %for.cond35, !dbg !7191

for.cond35:                                       ; preds = %for.inc, %cond.end
  %44 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7192
  %cmp36 = icmp ne %struct.ira_loop_tree_node* %44, null, !dbg !7194
  br i1 %cmp36, label %for.body38, label %for.end, !dbg !7195

for.body38:                                       ; preds = %for.cond35
  %45 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7196
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %45, i32 0, i32 9, !dbg !7198
  %46 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !7198
  %47 = load i32, i32* %regno, align 4, !dbg !7199
  %idxprom39 = sext i32 %47 to i64, !dbg !7196
  %arrayidx40 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %46, i64 %idxprom39, !dbg !7196
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx40, align 8, !dbg !7196
  store %struct.ira_allocno* %48, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7200
  %49 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7201
  %cmp41 = icmp eq %struct.ira_allocno* %49, null, !dbg !7203
  br i1 %cmp41, label %if.then43, label %if.end44, !dbg !7204

if.then43:                                        ; preds = %for.body38
  br label %for.inc, !dbg !7205

if.end44:                                         ; preds = %for.body38
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7206
  %memory_cost45 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %50, i32 0, i32 12, !dbg !7206
  %51 = load i32, i32* %memory_cost45, align 4, !dbg !7206
  %52 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7207
  %hard_reg_costs46 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %52, i32 0, i32 33, !dbg !7207
  %53 = load i32*, i32** %hard_reg_costs46, align 8, !dbg !7207
  %cmp47 = icmp eq i32* %53, null, !dbg !7208
  br i1 %cmp47, label %cond.true49, label %cond.false51, !dbg !7207

cond.true49:                                      ; preds = %if.end44
  %54 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7209
  %cover_class_cost50 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %54, i32 0, i32 10, !dbg !7209
  %55 = load i32, i32* %cover_class_cost50, align 4, !dbg !7209
  br label %cond.end55, !dbg !7207

cond.false51:                                     ; preds = %if.end44
  %56 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7210
  %hard_reg_costs52 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %56, i32 0, i32 33, !dbg !7210
  %57 = load i32*, i32** %hard_reg_costs52, align 8, !dbg !7210
  %58 = load i32, i32* %index, align 4, !dbg !7211
  %idxprom53 = sext i32 %58 to i64, !dbg !7210
  %arrayidx54 = getelementptr inbounds i32, i32* %57, i64 %idxprom53, !dbg !7210
  %59 = load i32, i32* %arrayidx54, align 4, !dbg !7210
  br label %cond.end55, !dbg !7207

cond.end55:                                       ; preds = %cond.false51, %cond.true49
  %cond56 = phi i32 [ %55, %cond.true49 ], [ %59, %cond.false51 ], !dbg !7207
  %sub57 = sub nsw i32 %51, %cond56, !dbg !7212
  %60 = load i32, i32* %cost, align 4, !dbg !7213
  %sub58 = sub nsw i32 %60, %sub57, !dbg !7213
  store i32 %sub58, i32* %cost, align 4, !dbg !7213
  %61 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7214
  %62 = load i32, i32* %regno, align 4, !dbg !7215
  %call59 = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %61, i32 %62, i8 zeroext 1), !dbg !7216
  store i32 %call59, i32* %exit_freq, align 4, !dbg !7217
  %63 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7218
  %64 = load i32, i32* %regno, align 4, !dbg !7219
  %call60 = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %63, i32 %64, i8 zeroext 0), !dbg !7220
  store i32 %call60, i32* %enter_freq, align 4, !dbg !7221
  %65 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7222
  %hard_regno61 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %65, i32 0, i32 3, !dbg !7222
  %66 = load i32, i32* %hard_regno61, align 4, !dbg !7222
  store i32 %66, i32* %hard_regno2, align 4, !dbg !7224
  %cmp62 = icmp slt i32 %66, 0, !dbg !7225
  br i1 %cmp62, label %if.then64, label %if.else, !dbg !7226

if.then64:                                        ; preds = %cond.end55
  %67 = load i32, i32* %mode, align 4, !dbg !7227
  %idxprom65 = zext i32 %67 to i64, !dbg !7228
  %arrayidx66 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom65, !dbg !7228
  %68 = load i32, i32* %rclass, align 4, !dbg !7229
  %idxprom67 = zext i32 %68 to i64, !dbg !7228
  %arrayidx68 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx66, i64 0, i64 %idxprom67, !dbg !7228
  %arrayidx69 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx68, i64 0, i64 0, !dbg !7228
  %69 = load i16, i16* %arrayidx69, align 4, !dbg !7228
  %conv70 = sext i16 %69 to i32, !dbg !7228
  %70 = load i32, i32* %exit_freq, align 4, !dbg !7230
  %mul = mul nsw i32 %conv70, %70, !dbg !7231
  %71 = load i32, i32* %mode, align 4, !dbg !7232
  %idxprom71 = zext i32 %71 to i64, !dbg !7233
  %arrayidx72 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom71, !dbg !7233
  %72 = load i32, i32* %rclass, align 4, !dbg !7234
  %idxprom73 = zext i32 %72 to i64, !dbg !7233
  %arrayidx74 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx72, i64 0, i64 %idxprom73, !dbg !7233
  %arrayidx75 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx74, i64 0, i64 1, !dbg !7233
  %73 = load i16, i16* %arrayidx75, align 2, !dbg !7233
  %conv76 = sext i16 %73 to i32, !dbg !7233
  %74 = load i32, i32* %enter_freq, align 4, !dbg !7235
  %mul77 = mul nsw i32 %conv76, %74, !dbg !7236
  %add = add nsw i32 %mul, %mul77, !dbg !7237
  %75 = load i32, i32* %cost, align 4, !dbg !7238
  %sub78 = sub nsw i32 %75, %add, !dbg !7238
  store i32 %sub78, i32* %cost, align 4, !dbg !7238
  br label %if.end103, !dbg !7239

if.else:                                          ; preds = %cond.end55
  %76 = load i32, i32* %mode, align 4, !dbg !7240
  %idxprom79 = zext i32 %76 to i64, !dbg !7242
  %arrayidx80 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom79, !dbg !7242
  %77 = load i32, i32* %rclass, align 4, !dbg !7243
  %idxprom81 = zext i32 %77 to i64, !dbg !7242
  %arrayidx82 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx80, i64 0, i64 %idxprom81, !dbg !7242
  %arrayidx83 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx82, i64 0, i64 0, !dbg !7242
  %78 = load i16, i16* %arrayidx83, align 4, !dbg !7242
  %conv84 = sext i16 %78 to i32, !dbg !7242
  %79 = load i32, i32* %exit_freq, align 4, !dbg !7244
  %mul85 = mul nsw i32 %conv84, %79, !dbg !7245
  %80 = load i32, i32* %mode, align 4, !dbg !7246
  %idxprom86 = zext i32 %80 to i64, !dbg !7247
  %arrayidx87 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom86, !dbg !7247
  %81 = load i32, i32* %rclass, align 4, !dbg !7248
  %idxprom88 = zext i32 %81 to i64, !dbg !7247
  %arrayidx89 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx87, i64 0, i64 %idxprom88, !dbg !7247
  %arrayidx90 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx89, i64 0, i64 1, !dbg !7247
  %82 = load i16, i16* %arrayidx90, align 2, !dbg !7247
  %conv91 = sext i16 %82 to i32, !dbg !7247
  %83 = load i32, i32* %enter_freq, align 4, !dbg !7249
  %mul92 = mul nsw i32 %conv91, %83, !dbg !7250
  %add93 = add nsw i32 %mul85, %mul92, !dbg !7251
  %84 = load i32, i32* %cost, align 4, !dbg !7252
  %add94 = add nsw i32 %84, %add93, !dbg !7252
  store i32 %add94, i32* %cost, align 4, !dbg !7252
  %85 = load i32, i32* %hard_regno2, align 4, !dbg !7253
  %86 = load i32, i32* %hard_regno, align 4, !dbg !7255
  %cmp95 = icmp ne i32 %85, %86, !dbg !7256
  br i1 %cmp95, label %if.then97, label %if.end102, !dbg !7257

if.then97:                                        ; preds = %if.else
  %87 = load i32, i32* %mode, align 4, !dbg !7258
  %88 = load i32, i32* %rclass, align 4, !dbg !7259
  %89 = load i32, i32* %rclass, align 4, !dbg !7260
  %call98 = call i32 @ira_get_register_move_cost(i32 %87, i32 %88, i32 %89), !dbg !7261
  %90 = load i32, i32* %exit_freq, align 4, !dbg !7262
  %91 = load i32, i32* %enter_freq, align 4, !dbg !7263
  %add99 = add nsw i32 %90, %91, !dbg !7264
  %mul100 = mul nsw i32 %call98, %add99, !dbg !7265
  %92 = load i32, i32* %cost, align 4, !dbg !7266
  %sub101 = sub nsw i32 %92, %mul100, !dbg !7266
  store i32 %sub101, i32* %cost, align 4, !dbg !7266
  br label %if.end102, !dbg !7267

if.end102:                                        ; preds = %if.then97, %if.else
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then64
  br label %for.inc, !dbg !7268

for.inc:                                          ; preds = %if.end103, %if.then43
  %93 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7269
  %subloop_next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %93, i32 0, i32 2, !dbg !7270
  %94 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_next, align 8, !dbg !7270
  store %struct.ira_loop_tree_node* %94, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7271
  br label %for.cond35, !dbg !7272, !llvm.loop !7273

for.end:                                          ; preds = %for.cond35
  %95 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !7275
  %parent104 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %95, i32 0, i32 6, !dbg !7277
  %96 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent104, align 8, !dbg !7277
  store %struct.ira_loop_tree_node* %96, %struct.ira_loop_tree_node** %parent, align 8, !dbg !7278
  %cmp105 = icmp ne %struct.ira_loop_tree_node* %96, null, !dbg !7279
  br i1 %cmp105, label %land.lhs.true107, label %if.end162, !dbg !7280

land.lhs.true107:                                 ; preds = %for.end
  %97 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !7281
  %regno_allocno_map108 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %97, i32 0, i32 9, !dbg !7282
  %98 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map108, align 8, !dbg !7282
  %99 = load i32, i32* %regno, align 4, !dbg !7283
  %idxprom109 = sext i32 %99 to i64, !dbg !7281
  %arrayidx110 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %98, i64 %idxprom109, !dbg !7281
  %100 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx110, align 8, !dbg !7281
  store %struct.ira_allocno* %100, %struct.ira_allocno** %parent_allocno, align 8, !dbg !7284
  %cmp111 = icmp ne %struct.ira_allocno* %100, null, !dbg !7285
  br i1 %cmp111, label %if.then113, label %if.end162, !dbg !7286

if.then113:                                       ; preds = %land.lhs.true107
  %101 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !7287
  %102 = load i32, i32* %regno, align 4, !dbg !7289
  %call114 = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %101, i32 %102, i8 zeroext 1), !dbg !7290
  store i32 %call114, i32* %exit_freq, align 4, !dbg !7291
  %103 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !7292
  %104 = load i32, i32* %regno, align 4, !dbg !7293
  %call115 = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %103, i32 %104, i8 zeroext 0), !dbg !7294
  store i32 %call115, i32* %enter_freq, align 4, !dbg !7295
  %105 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_allocno, align 8, !dbg !7296
  %hard_regno116 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %105, i32 0, i32 3, !dbg !7296
  %106 = load i32, i32* %hard_regno116, align 4, !dbg !7296
  store i32 %106, i32* %hard_regno2, align 4, !dbg !7298
  %cmp117 = icmp slt i32 %106, 0, !dbg !7299
  br i1 %cmp117, label %if.then119, label %if.else136, !dbg !7300

if.then119:                                       ; preds = %if.then113
  %107 = load i32, i32* %mode, align 4, !dbg !7301
  %idxprom120 = zext i32 %107 to i64, !dbg !7302
  %arrayidx121 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom120, !dbg !7302
  %108 = load i32, i32* %rclass, align 4, !dbg !7303
  %idxprom122 = zext i32 %108 to i64, !dbg !7302
  %arrayidx123 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx121, i64 0, i64 %idxprom122, !dbg !7302
  %arrayidx124 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx123, i64 0, i64 0, !dbg !7302
  %109 = load i16, i16* %arrayidx124, align 4, !dbg !7302
  %conv125 = sext i16 %109 to i32, !dbg !7302
  %110 = load i32, i32* %exit_freq, align 4, !dbg !7304
  %mul126 = mul nsw i32 %conv125, %110, !dbg !7305
  %111 = load i32, i32* %mode, align 4, !dbg !7306
  %idxprom127 = zext i32 %111 to i64, !dbg !7307
  %arrayidx128 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom127, !dbg !7307
  %112 = load i32, i32* %rclass, align 4, !dbg !7308
  %idxprom129 = zext i32 %112 to i64, !dbg !7307
  %arrayidx130 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx128, i64 0, i64 %idxprom129, !dbg !7307
  %arrayidx131 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx130, i64 0, i64 1, !dbg !7307
  %113 = load i16, i16* %arrayidx131, align 2, !dbg !7307
  %conv132 = sext i16 %113 to i32, !dbg !7307
  %114 = load i32, i32* %enter_freq, align 4, !dbg !7309
  %mul133 = mul nsw i32 %conv132, %114, !dbg !7310
  %add134 = add nsw i32 %mul126, %mul133, !dbg !7311
  %115 = load i32, i32* %cost, align 4, !dbg !7312
  %sub135 = sub nsw i32 %115, %add134, !dbg !7312
  store i32 %sub135, i32* %cost, align 4, !dbg !7312
  br label %if.end161, !dbg !7313

if.else136:                                       ; preds = %if.then113
  %116 = load i32, i32* %mode, align 4, !dbg !7314
  %idxprom137 = zext i32 %116 to i64, !dbg !7316
  %arrayidx138 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom137, !dbg !7316
  %117 = load i32, i32* %rclass, align 4, !dbg !7317
  %idxprom139 = zext i32 %117 to i64, !dbg !7316
  %arrayidx140 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx138, i64 0, i64 %idxprom139, !dbg !7316
  %arrayidx141 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx140, i64 0, i64 1, !dbg !7316
  %118 = load i16, i16* %arrayidx141, align 2, !dbg !7316
  %conv142 = sext i16 %118 to i32, !dbg !7316
  %119 = load i32, i32* %exit_freq, align 4, !dbg !7318
  %mul143 = mul nsw i32 %conv142, %119, !dbg !7319
  %120 = load i32, i32* %mode, align 4, !dbg !7320
  %idxprom144 = zext i32 %120 to i64, !dbg !7321
  %arrayidx145 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom144, !dbg !7321
  %121 = load i32, i32* %rclass, align 4, !dbg !7322
  %idxprom146 = zext i32 %121 to i64, !dbg !7321
  %arrayidx147 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx145, i64 0, i64 %idxprom146, !dbg !7321
  %arrayidx148 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx147, i64 0, i64 0, !dbg !7321
  %122 = load i16, i16* %arrayidx148, align 4, !dbg !7321
  %conv149 = sext i16 %122 to i32, !dbg !7321
  %123 = load i32, i32* %enter_freq, align 4, !dbg !7323
  %mul150 = mul nsw i32 %conv149, %123, !dbg !7324
  %add151 = add nsw i32 %mul143, %mul150, !dbg !7325
  %124 = load i32, i32* %cost, align 4, !dbg !7326
  %add152 = add nsw i32 %124, %add151, !dbg !7326
  store i32 %add152, i32* %cost, align 4, !dbg !7326
  %125 = load i32, i32* %hard_regno2, align 4, !dbg !7327
  %126 = load i32, i32* %hard_regno, align 4, !dbg !7329
  %cmp153 = icmp ne i32 %125, %126, !dbg !7330
  br i1 %cmp153, label %if.then155, label %if.end160, !dbg !7331

if.then155:                                       ; preds = %if.else136
  %127 = load i32, i32* %mode, align 4, !dbg !7332
  %128 = load i32, i32* %rclass, align 4, !dbg !7333
  %129 = load i32, i32* %rclass, align 4, !dbg !7334
  %call156 = call i32 @ira_get_register_move_cost(i32 %127, i32 %128, i32 %129), !dbg !7335
  %130 = load i32, i32* %exit_freq, align 4, !dbg !7336
  %131 = load i32, i32* %enter_freq, align 4, !dbg !7337
  %add157 = add nsw i32 %130, %131, !dbg !7338
  %mul158 = mul nsw i32 %call156, %add157, !dbg !7339
  %132 = load i32, i32* %cost, align 4, !dbg !7340
  %sub159 = sub nsw i32 %132, %mul158, !dbg !7340
  store i32 %sub159, i32* %cost, align 4, !dbg !7340
  br label %if.end160, !dbg !7341

if.end160:                                        ; preds = %if.then155, %if.else136
  br label %if.end161

if.end161:                                        ; preds = %if.end160, %if.then119
  br label %if.end162, !dbg !7342

if.end162:                                        ; preds = %if.end161, %land.lhs.true107, %for.end
  %133 = load i32, i32* %cost, align 4, !dbg !7343
  %cmp163 = icmp slt i32 %133, 0, !dbg !7345
  br i1 %cmp163, label %if.then165, label %if.end179, !dbg !7346

if.then165:                                       ; preds = %if.end162
  %134 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7347
  %hard_regno166 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %134, i32 0, i32 3, !dbg !7347
  store i32 -1, i32* %hard_regno166, align 4, !dbg !7349
  %135 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !7350
  %cmp167 = icmp sgt i32 %135, 3, !dbg !7352
  br i1 %cmp167, label %land.lhs.true169, label %if.end178, !dbg !7353

land.lhs.true169:                                 ; preds = %if.then165
  %136 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7354
  %cmp170 = icmp ne %struct._IO_FILE* %136, null, !dbg !7355
  br i1 %cmp170, label %if.then172, label %if.end178, !dbg !7356

if.then172:                                       ; preds = %land.lhs.true169
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7357
  %138 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7359
  %num173 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %138, i32 0, i32 0, !dbg !7359
  %139 = load i32, i32* %num173, align 8, !dbg !7359
  %140 = load i32, i32* %regno, align 4, !dbg !7360
  %141 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !7361
  %loop = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %141, i32 0, i32 1, !dbg !7362
  %142 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7362
  %num174 = getelementptr inbounds %struct.loop, %struct.loop* %142, i32 0, i32 0, !dbg !7363
  %143 = load i32, i32* %num174, align 8, !dbg !7363
  %call175 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %137, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.44, i64 0, i64 0), i32 %139, i32 %140, i32 %143), !dbg !7364
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7365
  %145 = load i32, i32* %cost, align 4, !dbg !7366
  %sub176 = sub nsw i32 0, %145, !dbg !7367
  %call177 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %144, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.45, i64 0, i64 0), i32 %sub176), !dbg !7368
  br label %if.end178, !dbg !7369

if.end178:                                        ; preds = %if.then172, %land.lhs.true169, %if.then165
  store i8 1, i8* %changed_p, align 1, !dbg !7370
  br label %if.end179, !dbg !7371

if.end179:                                        ; preds = %if.end178, %if.end162
  br label %for.cond2, !dbg !7134, !llvm.loop !7169

for.end180:                                       ; preds = %for.cond2
  %146 = load i8, i8* %changed_p, align 1, !dbg !7372
  %tobool181 = icmp ne i8 %146, 0, !dbg !7372
  br i1 %tobool181, label %if.end183, label %if.then182, !dbg !7374

if.then182:                                       ; preds = %for.end180
  br label %for.end184, !dbg !7375

if.end183:                                        ; preds = %for.end180
  br label %for.cond, !dbg !7376, !llvm.loop !7377

for.end184:                                       ; preds = %if.then182
  ret void, !dbg !7380
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #3

declare dso_local %struct.alloc_pool_def* @create_alloc_pool(i8*, i64, i64) #3

declare dso_local void @ira_traverse_loop_tree(i8 zeroext, %struct.ira_loop_tree_node*, void (%struct.ira_loop_tree_node*)*, void (%struct.ira_loop_tree_node*)*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @color_pass(%struct.ira_loop_tree_node* %loop_tree_node) #0 !dbg !7381 {
entry:
  %loop_tree_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %regno = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %index = alloca i32, align 4
  %cost = alloca i32, align 4
  %exit_freq = alloca i32, align 4
  %enter_freq = alloca i32, align 4
  %j = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %mode = alloca i32, align 4
  %rclass = alloca i32, align 4
  %cover_class = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %subloop_allocno = alloca %struct.ira_allocno*, align 8
  %subloop_node = alloca %struct.ira_loop_tree_node*, align 8
  store %struct.ira_loop_tree_node* %loop_tree_node, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_tree_node.addr, metadata !7384, metadata !DIExpression()), !dbg !7385
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !7386, metadata !DIExpression()), !dbg !7387
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !7388, metadata !DIExpression()), !dbg !7389
  call void @llvm.dbg.declare(metadata i32* %index, metadata !7390, metadata !DIExpression()), !dbg !7391
  store i32 -1, i32* %index, align 4, !dbg !7391
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !7392, metadata !DIExpression()), !dbg !7393
  call void @llvm.dbg.declare(metadata i32* %exit_freq, metadata !7394, metadata !DIExpression()), !dbg !7395
  call void @llvm.dbg.declare(metadata i32* %enter_freq, metadata !7396, metadata !DIExpression()), !dbg !7397
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7398, metadata !DIExpression()), !dbg !7399
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7400, metadata !DIExpression()), !dbg !7401
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !7402, metadata !DIExpression()), !dbg !7403
  call void @llvm.dbg.declare(metadata i32* %rclass, metadata !7404, metadata !DIExpression()), !dbg !7405
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !7406, metadata !DIExpression()), !dbg !7407
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !7408, metadata !DIExpression()), !dbg !7409
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %subloop_allocno, metadata !7410, metadata !DIExpression()), !dbg !7411
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %subloop_node, metadata !7412, metadata !DIExpression()), !dbg !7413
  %0 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !7414
  %cmp = icmp sgt i32 %0, 1, !dbg !7416
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7417

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7418
  %cmp1 = icmp ne %struct._IO_FILE* %1, null, !dbg !7419
  br i1 %cmp1, label %if.then, label %if.end, !dbg !7420

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7421
  call void @print_loop_title(%struct.ira_loop_tree_node* %2), !dbg !7422
  br label %if.end, !dbg !7422

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !7423
  %4 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7424
  %all_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %4, i32 0, i32 12, !dbg !7425
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %all_allocnos, align 8, !dbg !7425
  call void @bitmap_copy(%struct.bitmap_head_def* %3, %struct.bitmap_head_def* %5), !dbg !7426
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @consideration_allocno_bitmap, align 8, !dbg !7427
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !7428
  call void @bitmap_copy(%struct.bitmap_head_def* %6, %struct.bitmap_head_def* %7), !dbg !7429
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @consideration_allocno_bitmap, align 8, !dbg !7430
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %8, i32 0, i32* %j), !dbg !7430
  br label %for.cond, !dbg !7430

for.cond:                                         ; preds = %for.inc, %if.end
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7432
  %tobool = icmp ne i8 %call, 0, !dbg !7430
  br i1 %tobool, label %for.body, label %for.end, !dbg !7430

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !7434
  %10 = load i32, i32* %j, align 4, !dbg !7436
  %idxprom = zext i32 %10 to i64, !dbg !7434
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %9, i64 %idxprom, !dbg !7434
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !7434
  store %struct.ira_allocno* %11, %struct.ira_allocno** %a, align 8, !dbg !7437
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7438
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 31, !dbg !7438
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !7438
  %bf.lshr = lshr i16 %bf.load, 8, !dbg !7438
  %bf.clear = and i16 %bf.lshr, 1, !dbg !7438
  %bf.cast = zext i16 %bf.clear to i32, !dbg !7438
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !7438
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !7440

if.then3:                                         ; preds = %for.body
  br label %for.inc, !dbg !7441

if.end4:                                          ; preds = %for.body
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !7442
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7443
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 0, !dbg !7443
  %15 = load i32, i32* %num, align 8, !dbg !7443
  %call5 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %13, i32 %15), !dbg !7444
  br label %for.inc, !dbg !7445

for.inc:                                          ; preds = %if.end4, %if.then3
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7432
  br label %for.cond, !dbg !7432, !llvm.loop !7446

for.end:                                          ; preds = %for.cond
  call void @color_allocnos(), !dbg !7448
  %16 = load i32, i32* @flag_ira_region, align 4, !dbg !7449
  %cmp6 = icmp eq i32 %16, 2, !dbg !7451
  br i1 %cmp6, label %if.then8, label %lor.lhs.false, !dbg !7452

lor.lhs.false:                                    ; preds = %for.end
  %17 = load i32, i32* @flag_ira_region, align 4, !dbg !7453
  %cmp7 = icmp eq i32 %17, 1, !dbg !7454
  br i1 %cmp7, label %if.then8, label %if.end52, !dbg !7455

if.then8:                                         ; preds = %lor.lhs.false, %for.end
  %18 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7456
  %all_allocnos9 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %18, i32 0, i32 12, !dbg !7456
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %all_allocnos9, align 8, !dbg !7456
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %19, i32 0, i32* %j), !dbg !7456
  br label %for.cond10, !dbg !7456

for.cond10:                                       ; preds = %for.inc50, %if.then8
  %call11 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7458
  %tobool12 = icmp ne i8 %call11, 0, !dbg !7456
  br i1 %tobool12, label %for.body13, label %for.end51, !dbg !7456

for.body13:                                       ; preds = %for.cond10
  %20 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !7460
  %21 = load i32, i32* %j, align 4, !dbg !7462
  %idxprom14 = zext i32 %21 to i64, !dbg !7460
  %arrayidx15 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %20, i64 %idxprom14, !dbg !7460
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx15, align 8, !dbg !7460
  store %struct.ira_allocno* %22, %struct.ira_allocno** %a, align 8, !dbg !7463
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7464
  %cap_member = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 17, !dbg !7464
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member, align 8, !dbg !7464
  %cmp16 = icmp eq %struct.ira_allocno* %24, null, !dbg !7466
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !7467

if.then17:                                        ; preds = %for.body13
  br label %for.inc50, !dbg !7468

if.end18:                                         ; preds = %for.body13
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @consideration_allocno_bitmap, align 8, !dbg !7469
  %26 = load i32, i32* %j, align 4, !dbg !7470
  %call19 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %25, i32 %26), !dbg !7471
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7472
  %cover_class20 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 9, !dbg !7472
  %28 = load i32, i32* %cover_class20, align 8, !dbg !7472
  store i32 %28, i32* %rclass, align 4, !dbg !7473
  %29 = load i32, i32* @flag_ira_region, align 4, !dbg !7474
  %cmp21 = icmp eq i32 %29, 2, !dbg !7476
  br i1 %cmp21, label %land.lhs.true22, label %if.end49, !dbg !7477

land.lhs.true22:                                  ; preds = %if.end18
  %30 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7478
  %reg_pressure = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %30, i32 0, i32 11, !dbg !7479
  %31 = load i32, i32* %rclass, align 4, !dbg !7480
  %idxprom23 = zext i32 %31 to i64, !dbg !7478
  %arrayidx24 = getelementptr inbounds [27 x i32], [27 x i32]* %reg_pressure, i64 0, i64 %idxprom23, !dbg !7478
  %32 = load i32, i32* %arrayidx24, align 4, !dbg !7478
  %33 = load i32, i32* %rclass, align 4, !dbg !7481
  %idxprom25 = zext i32 %33 to i64, !dbg !7482
  %arrayidx26 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_available_class_regs, i64 0, i64 %idxprom25, !dbg !7482
  %34 = load i32, i32* %arrayidx26, align 4, !dbg !7482
  %cmp27 = icmp sle i32 %32, %34, !dbg !7483
  br i1 %cmp27, label %if.then28, label %if.end49, !dbg !7484

if.then28:                                        ; preds = %land.lhs.true22
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7485
  %mode29 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %35, i32 0, i32 2, !dbg !7485
  %36 = load i32, i32* %mode29, align 8, !dbg !7485
  store i32 %36, i32* %mode, align 4, !dbg !7487
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7488
  %hard_regno30 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %37, i32 0, i32 3, !dbg !7488
  %38 = load i32, i32* %hard_regno30, align 4, !dbg !7488
  store i32 %38, i32* %hard_regno, align 4, !dbg !7489
  %39 = load i32, i32* %hard_regno, align 4, !dbg !7490
  %cmp31 = icmp sge i32 %39, 0, !dbg !7492
  br i1 %cmp31, label %if.then32, label %if.end37, !dbg !7493

if.then32:                                        ; preds = %if.then28
  %40 = load i32, i32* %rclass, align 4, !dbg !7494
  %idxprom33 = zext i32 %40 to i64, !dbg !7496
  %arrayidx34 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom33, !dbg !7496
  %41 = load i32, i32* %hard_regno, align 4, !dbg !7497
  %idxprom35 = sext i32 %41 to i64, !dbg !7496
  %arrayidx36 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx34, i64 0, i64 %idxprom35, !dbg !7496
  %42 = load i16, i16* %arrayidx36, align 2, !dbg !7496
  %conv = sext i16 %42 to i32, !dbg !7496
  store i32 %conv, i32* %index, align 4, !dbg !7498
  br label %if.end37, !dbg !7499

if.end37:                                         ; preds = %if.then32, %if.then28
  %43 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7500
  %regno38 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %43, i32 0, i32 1, !dbg !7500
  %44 = load i32, i32* %regno38, align 4, !dbg !7500
  store i32 %44, i32* %regno, align 4, !dbg !7501
  %45 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7502
  %cap_member39 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %45, i32 0, i32 17, !dbg !7502
  %46 = load %struct.ira_allocno*, %struct.ira_allocno** %cap_member39, align 8, !dbg !7502
  store %struct.ira_allocno* %46, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7503
  %47 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7504
  %loop_tree_node40 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %47, i32 0, i32 6, !dbg !7504
  %48 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node40, align 8, !dbg !7504
  store %struct.ira_loop_tree_node* %48, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7505
  %49 = load i32, i32* %hard_regno, align 4, !dbg !7506
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7507
  %hard_regno41 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %50, i32 0, i32 3, !dbg !7507
  store i32 %49, i32* %hard_regno41, align 4, !dbg !7508
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7509
  %assigned_p42 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %51, i32 0, i32 31, !dbg !7509
  %bf.load43 = load i16, i16* %assigned_p42, align 4, !dbg !7510
  %bf.clear44 = and i16 %bf.load43, -257, !dbg !7510
  %bf.set = or i16 %bf.clear44, 256, !dbg !7510
  store i16 %bf.set, i16* %assigned_p42, align 4, !dbg !7510
  %52 = load i32, i32* %hard_regno, align 4, !dbg !7511
  %cmp45 = icmp sge i32 %52, 0, !dbg !7513
  br i1 %cmp45, label %if.then47, label %if.end48, !dbg !7514

if.then47:                                        ; preds = %if.end37
  %53 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7515
  call void @update_copy_costs(%struct.ira_allocno* %53, i8 zeroext 1), !dbg !7516
  br label %if.end48, !dbg !7516

if.end48:                                         ; preds = %if.then47, %if.end37
  %54 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7517
  call void @ira_free_allocno_updated_costs(%struct.ira_allocno* %54), !dbg !7518
  br label %if.end49, !dbg !7519

if.end49:                                         ; preds = %if.end48, %land.lhs.true22, %if.end18
  br label %for.inc50, !dbg !7520

for.inc50:                                        ; preds = %if.end49, %if.then17
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7458
  br label %for.cond10, !dbg !7458, !llvm.loop !7521

for.end51:                                        ; preds = %for.cond10
  br label %if.end52, !dbg !7522

if.end52:                                         ; preds = %for.end51, %lor.lhs.false
  %55 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7523
  %subloops = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %55, i32 0, i32 4, !dbg !7525
  %56 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloops, align 8, !dbg !7525
  store %struct.ira_loop_tree_node* %56, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7526
  br label %for.cond53, !dbg !7527

for.cond53:                                       ; preds = %for.inc205, %if.end52
  %57 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7528
  %cmp54 = icmp ne %struct.ira_loop_tree_node* %57, null, !dbg !7530
  br i1 %cmp54, label %for.body56, label %for.end206, !dbg !7531

for.body56:                                       ; preds = %for.cond53
  %58 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @consideration_allocno_bitmap, align 8, !dbg !7532
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %58, i32 0, i32* %j), !dbg !7532
  br label %for.cond57, !dbg !7532

for.cond57:                                       ; preds = %for.inc203, %for.body56
  %call58 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7535
  %tobool59 = icmp ne i8 %call58, 0, !dbg !7532
  br i1 %tobool59, label %for.body60, label %for.end204, !dbg !7532

for.body60:                                       ; preds = %for.cond57
  %59 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !7537
  %60 = load i32, i32* %j, align 4, !dbg !7539
  %idxprom61 = zext i32 %60 to i64, !dbg !7537
  %arrayidx62 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %59, i64 %idxprom61, !dbg !7537
  %61 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx62, align 8, !dbg !7537
  store %struct.ira_allocno* %61, %struct.ira_allocno** %a, align 8, !dbg !7540
  %62 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7541
  %mode63 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %62, i32 0, i32 2, !dbg !7541
  %63 = load i32, i32* %mode63, align 8, !dbg !7541
  store i32 %63, i32* %mode, align 4, !dbg !7542
  %64 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7543
  %cover_class64 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %64, i32 0, i32 9, !dbg !7543
  %65 = load i32, i32* %cover_class64, align 8, !dbg !7543
  store i32 %65, i32* %rclass, align 4, !dbg !7544
  %66 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7545
  %hard_regno65 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %66, i32 0, i32 3, !dbg !7545
  %67 = load i32, i32* %hard_regno65, align 4, !dbg !7545
  store i32 %67, i32* %hard_regno, align 4, !dbg !7546
  %68 = load i32, i32* %hard_regno, align 4, !dbg !7547
  %cmp66 = icmp sge i32 %68, 0, !dbg !7549
  br i1 %cmp66, label %if.then68, label %if.end74, !dbg !7550

if.then68:                                        ; preds = %for.body60
  %69 = load i32, i32* %rclass, align 4, !dbg !7551
  %idxprom69 = zext i32 %69 to i64, !dbg !7553
  %arrayidx70 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_reg_index, i64 0, i64 %idxprom69, !dbg !7553
  %70 = load i32, i32* %hard_regno, align 4, !dbg !7554
  %idxprom71 = sext i32 %70 to i64, !dbg !7553
  %arrayidx72 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx70, i64 0, i64 %idxprom71, !dbg !7553
  %71 = load i16, i16* %arrayidx72, align 2, !dbg !7553
  %conv73 = sext i16 %71 to i32, !dbg !7553
  store i32 %conv73, i32* %index, align 4, !dbg !7555
  br label %if.end74, !dbg !7556

if.end74:                                         ; preds = %if.then68, %for.body60
  %72 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7557
  %regno75 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %72, i32 0, i32 1, !dbg !7557
  %73 = load i32, i32* %regno75, align 4, !dbg !7557
  store i32 %73, i32* %regno, align 4, !dbg !7558
  %74 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7559
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %74, i32 0, i32 9, !dbg !7560
  %75 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !7560
  %76 = load i32, i32* %regno, align 4, !dbg !7561
  %idxprom76 = sext i32 %76 to i64, !dbg !7559
  %arrayidx77 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %75, i64 %idxprom76, !dbg !7559
  %77 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx77, align 8, !dbg !7559
  store %struct.ira_allocno* %77, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7562
  %78 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7563
  %cmp78 = icmp eq %struct.ira_allocno* %78, null, !dbg !7565
  br i1 %cmp78, label %if.then83, label %lor.lhs.false80, !dbg !7566

lor.lhs.false80:                                  ; preds = %if.end74
  %79 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7567
  %cap = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %79, i32 0, i32 16, !dbg !7567
  %80 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !7567
  %cmp81 = icmp ne %struct.ira_allocno* %80, null, !dbg !7568
  br i1 %cmp81, label %if.then83, label %if.end84, !dbg !7569

if.then83:                                        ; preds = %lor.lhs.false80, %if.end74
  br label %for.inc203, !dbg !7570

if.end84:                                         ; preds = %lor.lhs.false80
  %81 = load i32, i32* @flag_ira_region, align 4, !dbg !7571
  %cmp85 = icmp eq i32 %81, 2, !dbg !7573
  br i1 %cmp85, label %land.lhs.true87, label %if.end113, !dbg !7574

land.lhs.true87:                                  ; preds = %if.end84
  %82 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7575
  %reg_pressure88 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %82, i32 0, i32 11, !dbg !7576
  %83 = load i32, i32* %rclass, align 4, !dbg !7577
  %idxprom89 = zext i32 %83 to i64, !dbg !7575
  %arrayidx90 = getelementptr inbounds [27 x i32], [27 x i32]* %reg_pressure88, i64 0, i64 %idxprom89, !dbg !7575
  %84 = load i32, i32* %arrayidx90, align 4, !dbg !7575
  %85 = load i32, i32* %rclass, align 4, !dbg !7578
  %idxprom91 = zext i32 %85 to i64, !dbg !7579
  %arrayidx92 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_available_class_regs, i64 0, i64 %idxprom91, !dbg !7579
  %86 = load i32, i32* %arrayidx92, align 4, !dbg !7579
  %cmp93 = icmp sle i32 %84, %86, !dbg !7580
  br i1 %cmp93, label %if.then95, label %if.end113, !dbg !7581

if.then95:                                        ; preds = %land.lhs.true87
  %87 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7582
  %assigned_p96 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %87, i32 0, i32 31, !dbg !7582
  %bf.load97 = load i16, i16* %assigned_p96, align 4, !dbg !7582
  %bf.lshr98 = lshr i16 %bf.load97, 8, !dbg !7582
  %bf.clear99 = and i16 %bf.lshr98, 1, !dbg !7582
  %bf.cast100 = zext i16 %bf.clear99 to i32, !dbg !7582
  %tobool101 = icmp ne i32 %bf.cast100, 0, !dbg !7582
  br i1 %tobool101, label %if.end112, label %if.then102, !dbg !7585

if.then102:                                       ; preds = %if.then95
  %88 = load i32, i32* %hard_regno, align 4, !dbg !7586
  %89 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7588
  %hard_regno103 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %89, i32 0, i32 3, !dbg !7588
  store i32 %88, i32* %hard_regno103, align 4, !dbg !7589
  %90 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7590
  %assigned_p104 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %90, i32 0, i32 31, !dbg !7590
  %bf.load105 = load i16, i16* %assigned_p104, align 4, !dbg !7591
  %bf.clear106 = and i16 %bf.load105, -257, !dbg !7591
  %bf.set107 = or i16 %bf.clear106, 256, !dbg !7591
  store i16 %bf.set107, i16* %assigned_p104, align 4, !dbg !7591
  %91 = load i32, i32* %hard_regno, align 4, !dbg !7592
  %cmp108 = icmp sge i32 %91, 0, !dbg !7594
  br i1 %cmp108, label %if.then110, label %if.end111, !dbg !7595

if.then110:                                       ; preds = %if.then102
  %92 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7596
  call void @update_copy_costs(%struct.ira_allocno* %92, i8 zeroext 1), !dbg !7597
  br label %if.end111, !dbg !7597

if.end111:                                        ; preds = %if.then110, %if.then102
  %93 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7598
  call void @ira_free_allocno_updated_costs(%struct.ira_allocno* %93), !dbg !7599
  br label %if.end112, !dbg !7600

if.end112:                                        ; preds = %if.end111, %if.then95
  br label %for.inc203, !dbg !7601

if.end113:                                        ; preds = %land.lhs.true87, %if.end84
  %94 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7602
  %95 = load i32, i32* %regno, align 4, !dbg !7603
  %call114 = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %94, i32 %95, i8 zeroext 1), !dbg !7604
  store i32 %call114, i32* %exit_freq, align 4, !dbg !7605
  %96 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7606
  %97 = load i32, i32* %regno, align 4, !dbg !7607
  %call115 = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %96, i32 %97, i8 zeroext 0), !dbg !7608
  store i32 %call115, i32* %enter_freq, align 4, !dbg !7609
  %98 = load i8*, i8** @ira_reg_equiv_invariant_p, align 8, !dbg !7610
  %99 = load i32, i32* %regno, align 4, !dbg !7612
  %idxprom116 = sext i32 %99 to i64, !dbg !7610
  %arrayidx117 = getelementptr inbounds i8, i8* %98, i64 %idxprom116, !dbg !7610
  %100 = load i8, i8* %arrayidx117, align 1, !dbg !7610
  %conv118 = zext i8 %100 to i32, !dbg !7610
  %tobool119 = icmp ne i32 %conv118, 0, !dbg !7610
  br i1 %tobool119, label %if.then125, label %lor.lhs.false120, !dbg !7613

lor.lhs.false120:                                 ; preds = %if.end113
  %101 = load %struct.rtx_def**, %struct.rtx_def*** @ira_reg_equiv_const, align 8, !dbg !7614
  %102 = load i32, i32* %regno, align 4, !dbg !7615
  %idxprom121 = sext i32 %102 to i64, !dbg !7614
  %arrayidx122 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %101, i64 %idxprom121, !dbg !7614
  %103 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx122, align 8, !dbg !7614
  %cmp123 = icmp ne %struct.rtx_def* %103, null, !dbg !7616
  br i1 %cmp123, label %if.then125, label %if.else, !dbg !7617

if.then125:                                       ; preds = %lor.lhs.false120, %if.end113
  %104 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7618
  %assigned_p126 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %104, i32 0, i32 31, !dbg !7618
  %bf.load127 = load i16, i16* %assigned_p126, align 4, !dbg !7618
  %bf.lshr128 = lshr i16 %bf.load127, 8, !dbg !7618
  %bf.clear129 = and i16 %bf.lshr128, 1, !dbg !7618
  %bf.cast130 = zext i16 %bf.clear129 to i32, !dbg !7618
  %tobool131 = icmp ne i32 %bf.cast130, 0, !dbg !7618
  br i1 %tobool131, label %if.end142, label %if.then132, !dbg !7621

if.then132:                                       ; preds = %if.then125
  %105 = load i32, i32* %hard_regno, align 4, !dbg !7622
  %106 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7624
  %hard_regno133 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %106, i32 0, i32 3, !dbg !7624
  store i32 %105, i32* %hard_regno133, align 4, !dbg !7625
  %107 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7626
  %assigned_p134 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %107, i32 0, i32 31, !dbg !7626
  %bf.load135 = load i16, i16* %assigned_p134, align 4, !dbg !7627
  %bf.clear136 = and i16 %bf.load135, -257, !dbg !7627
  %bf.set137 = or i16 %bf.clear136, 256, !dbg !7627
  store i16 %bf.set137, i16* %assigned_p134, align 4, !dbg !7627
  %108 = load i32, i32* %hard_regno, align 4, !dbg !7628
  %cmp138 = icmp sge i32 %108, 0, !dbg !7630
  br i1 %cmp138, label %if.then140, label %if.end141, !dbg !7631

if.then140:                                       ; preds = %if.then132
  %109 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7632
  call void @update_copy_costs(%struct.ira_allocno* %109, i8 zeroext 1), !dbg !7633
  br label %if.end141, !dbg !7633

if.end141:                                        ; preds = %if.then140, %if.then132
  %110 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7634
  call void @ira_free_allocno_updated_costs(%struct.ira_allocno* %110), !dbg !7635
  br label %if.end142, !dbg !7636

if.end142:                                        ; preds = %if.end141, %if.then125
  br label %if.end202, !dbg !7637

if.else:                                          ; preds = %lor.lhs.false120
  %111 = load i32, i32* %hard_regno, align 4, !dbg !7638
  %cmp143 = icmp slt i32 %111, 0, !dbg !7640
  br i1 %cmp143, label %if.then145, label %if.else159, !dbg !7641

if.then145:                                       ; preds = %if.else
  %112 = load i32, i32* %mode, align 4, !dbg !7642
  %idxprom146 = zext i32 %112 to i64, !dbg !7644
  %arrayidx147 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom146, !dbg !7644
  %113 = load i32, i32* %rclass, align 4, !dbg !7645
  %idxprom148 = zext i32 %113 to i64, !dbg !7644
  %arrayidx149 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx147, i64 0, i64 %idxprom148, !dbg !7644
  %arrayidx150 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx149, i64 0, i64 1, !dbg !7644
  %114 = load i16, i16* %arrayidx150, align 2, !dbg !7644
  %conv151 = sext i16 %114 to i32, !dbg !7644
  %115 = load i32, i32* %enter_freq, align 4, !dbg !7646
  %mul = mul nsw i32 %conv151, %115, !dbg !7647
  %116 = load i32, i32* %mode, align 4, !dbg !7648
  %idxprom152 = zext i32 %116 to i64, !dbg !7649
  %arrayidx153 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom152, !dbg !7649
  %117 = load i32, i32* %rclass, align 4, !dbg !7650
  %idxprom154 = zext i32 %117 to i64, !dbg !7649
  %arrayidx155 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx153, i64 0, i64 %idxprom154, !dbg !7649
  %arrayidx156 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx155, i64 0, i64 0, !dbg !7649
  %118 = load i16, i16* %arrayidx156, align 4, !dbg !7649
  %conv157 = sext i16 %118 to i32, !dbg !7649
  %119 = load i32, i32* %exit_freq, align 4, !dbg !7651
  %mul158 = mul nsw i32 %conv157, %119, !dbg !7652
  %add = add nsw i32 %mul, %mul158, !dbg !7653
  %120 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7654
  %updated_memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %120, i32 0, i32 13, !dbg !7654
  %121 = load i32, i32* %updated_memory_cost, align 8, !dbg !7655
  %sub = sub nsw i32 %121, %add, !dbg !7655
  store i32 %sub, i32* %updated_memory_cost, align 8, !dbg !7655
  br label %if.end201, !dbg !7656

if.else159:                                       ; preds = %if.else
  %122 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7657
  %cover_class160 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %122, i32 0, i32 9, !dbg !7657
  %123 = load i32, i32* %cover_class160, align 8, !dbg !7657
  store i32 %123, i32* %cover_class, align 4, !dbg !7659
  %124 = load i32, i32* %mode, align 4, !dbg !7660
  %125 = load i32, i32* %rclass, align 4, !dbg !7661
  %126 = load i32, i32* %rclass, align 4, !dbg !7662
  %call161 = call i32 @ira_get_register_move_cost(i32 %124, i32 %125, i32 %126), !dbg !7663
  %127 = load i32, i32* %exit_freq, align 4, !dbg !7664
  %128 = load i32, i32* %enter_freq, align 4, !dbg !7665
  %add162 = add nsw i32 %127, %128, !dbg !7666
  %mul163 = mul nsw i32 %call161, %add162, !dbg !7667
  store i32 %mul163, i32* %cost, align 4, !dbg !7668
  %129 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7669
  %updated_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %129, i32 0, i32 34, !dbg !7669
  %130 = load i32, i32* %cover_class, align 4, !dbg !7670
  %131 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7671
  %updated_cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %131, i32 0, i32 11, !dbg !7671
  %132 = load i32, i32* %updated_cover_class_cost, align 8, !dbg !7671
  %133 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7672
  %hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %133, i32 0, i32 33, !dbg !7672
  %134 = load i32*, i32** %hard_reg_costs, align 8, !dbg !7672
  call void @ira_allocate_and_set_or_copy_costs(i32** %updated_hard_reg_costs, i32 %130, i32 %132, i32* %134), !dbg !7673
  %135 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7674
  %updated_conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %135, i32 0, i32 36, !dbg !7674
  %136 = load i32, i32* %cover_class, align 4, !dbg !7675
  %137 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7676
  %conflict_hard_reg_costs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %137, i32 0, i32 35, !dbg !7676
  %138 = load i32*, i32** %conflict_hard_reg_costs, align 8, !dbg !7676
  call void @ira_allocate_and_set_or_copy_costs(i32** %updated_conflict_hard_reg_costs, i32 %136, i32 0, i32* %138), !dbg !7677
  %139 = load i32, i32* %cost, align 4, !dbg !7678
  %140 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7679
  %updated_hard_reg_costs164 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %140, i32 0, i32 34, !dbg !7679
  %141 = load i32*, i32** %updated_hard_reg_costs164, align 8, !dbg !7679
  %142 = load i32, i32* %index, align 4, !dbg !7680
  %idxprom165 = sext i32 %142 to i64, !dbg !7679
  %arrayidx166 = getelementptr inbounds i32, i32* %141, i64 %idxprom165, !dbg !7679
  %143 = load i32, i32* %arrayidx166, align 4, !dbg !7681
  %sub167 = sub nsw i32 %143, %139, !dbg !7681
  store i32 %sub167, i32* %arrayidx166, align 4, !dbg !7681
  %144 = load i32, i32* %cost, align 4, !dbg !7682
  %145 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7683
  %updated_conflict_hard_reg_costs168 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %145, i32 0, i32 36, !dbg !7683
  %146 = load i32*, i32** %updated_conflict_hard_reg_costs168, align 8, !dbg !7683
  %147 = load i32, i32* %index, align 4, !dbg !7684
  %idxprom169 = sext i32 %147 to i64, !dbg !7683
  %arrayidx170 = getelementptr inbounds i32, i32* %146, i64 %idxprom169, !dbg !7683
  %148 = load i32, i32* %arrayidx170, align 4, !dbg !7685
  %sub171 = sub nsw i32 %148, %144, !dbg !7685
  store i32 %sub171, i32* %arrayidx170, align 4, !dbg !7685
  %149 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7686
  %updated_cover_class_cost172 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %149, i32 0, i32 11, !dbg !7686
  %150 = load i32, i32* %updated_cover_class_cost172, align 8, !dbg !7686
  %151 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7688
  %updated_hard_reg_costs173 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %151, i32 0, i32 34, !dbg !7688
  %152 = load i32*, i32** %updated_hard_reg_costs173, align 8, !dbg !7688
  %153 = load i32, i32* %index, align 4, !dbg !7689
  %idxprom174 = sext i32 %153 to i64, !dbg !7688
  %arrayidx175 = getelementptr inbounds i32, i32* %152, i64 %idxprom174, !dbg !7688
  %154 = load i32, i32* %arrayidx175, align 4, !dbg !7688
  %cmp176 = icmp sgt i32 %150, %154, !dbg !7690
  br i1 %cmp176, label %if.then178, label %if.end183, !dbg !7691

if.then178:                                       ; preds = %if.else159
  %155 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7692
  %updated_hard_reg_costs179 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %155, i32 0, i32 34, !dbg !7692
  %156 = load i32*, i32** %updated_hard_reg_costs179, align 8, !dbg !7692
  %157 = load i32, i32* %index, align 4, !dbg !7693
  %idxprom180 = sext i32 %157 to i64, !dbg !7692
  %arrayidx181 = getelementptr inbounds i32, i32* %156, i64 %idxprom180, !dbg !7692
  %158 = load i32, i32* %arrayidx181, align 4, !dbg !7692
  %159 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7694
  %updated_cover_class_cost182 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %159, i32 0, i32 11, !dbg !7694
  store i32 %158, i32* %updated_cover_class_cost182, align 8, !dbg !7695
  br label %if.end183, !dbg !7694

if.end183:                                        ; preds = %if.then178, %if.else159
  %160 = load i32, i32* %mode, align 4, !dbg !7696
  %idxprom184 = zext i32 %160 to i64, !dbg !7697
  %arrayidx185 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom184, !dbg !7697
  %161 = load i32, i32* %rclass, align 4, !dbg !7698
  %idxprom186 = zext i32 %161 to i64, !dbg !7697
  %arrayidx187 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx185, i64 0, i64 %idxprom186, !dbg !7697
  %arrayidx188 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx187, i64 0, i64 0, !dbg !7697
  %162 = load i16, i16* %arrayidx188, align 4, !dbg !7697
  %conv189 = sext i16 %162 to i32, !dbg !7697
  %163 = load i32, i32* %enter_freq, align 4, !dbg !7699
  %mul190 = mul nsw i32 %conv189, %163, !dbg !7700
  %164 = load i32, i32* %mode, align 4, !dbg !7701
  %idxprom191 = zext i32 %164 to i64, !dbg !7702
  %arrayidx192 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom191, !dbg !7702
  %165 = load i32, i32* %rclass, align 4, !dbg !7703
  %idxprom193 = zext i32 %165 to i64, !dbg !7702
  %arrayidx194 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx192, i64 0, i64 %idxprom193, !dbg !7702
  %arrayidx195 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx194, i64 0, i64 1, !dbg !7702
  %166 = load i16, i16* %arrayidx195, align 2, !dbg !7702
  %conv196 = sext i16 %166 to i32, !dbg !7702
  %167 = load i32, i32* %exit_freq, align 4, !dbg !7704
  %mul197 = mul nsw i32 %conv196, %167, !dbg !7705
  %add198 = add nsw i32 %mul190, %mul197, !dbg !7706
  %168 = load %struct.ira_allocno*, %struct.ira_allocno** %subloop_allocno, align 8, !dbg !7707
  %updated_memory_cost199 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %168, i32 0, i32 13, !dbg !7707
  %169 = load i32, i32* %updated_memory_cost199, align 8, !dbg !7708
  %add200 = add nsw i32 %169, %add198, !dbg !7708
  store i32 %add200, i32* %updated_memory_cost199, align 8, !dbg !7708
  br label %if.end201

if.end201:                                        ; preds = %if.end183, %if.then145
  br label %if.end202

if.end202:                                        ; preds = %if.end201, %if.end142
  br label %for.inc203, !dbg !7709

for.inc203:                                       ; preds = %if.end202, %if.end112, %if.then83
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7535
  br label %for.cond57, !dbg !7535, !llvm.loop !7710

for.end204:                                       ; preds = %for.cond57
  br label %for.inc205, !dbg !7712

for.inc205:                                       ; preds = %for.end204
  %170 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7713
  %subloop_next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %170, i32 0, i32 2, !dbg !7714
  %171 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_next, align 8, !dbg !7714
  store %struct.ira_loop_tree_node* %171, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7715
  br label %for.cond53, !dbg !7716, !llvm.loop !7717

for.end206:                                       ; preds = %for.cond53
  ret void, !dbg !7719
}

declare dso_local void @ira_print_disposition(%struct._IO_FILE*) #3

declare dso_local void @free_alloc_pool(%struct.alloc_pool_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @print_loop_title(%struct.ira_loop_tree_node* %loop_tree_node) #0 !dbg !7720 {
entry:
  %loop_tree_node.addr = alloca %struct.ira_loop_tree_node*, align 8
  %j = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %subloop_node = alloca %struct.ira_loop_tree_node*, align 8
  %dest_loop_node = alloca %struct.ira_loop_tree_node*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %cover_class = alloca i32, align 4
  store %struct.ira_loop_tree_node* %loop_tree_node, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_tree_node.addr, metadata !7721, metadata !DIExpression()), !dbg !7722
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7723, metadata !DIExpression()), !dbg !7724
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7725, metadata !DIExpression()), !dbg !7726
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %subloop_node, metadata !7727, metadata !DIExpression()), !dbg !7728
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %dest_loop_node, metadata !7729, metadata !DIExpression()), !dbg !7730
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7731, metadata !DIExpression()), !dbg !7732
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7733, metadata !DIExpression()), !dbg !7734
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7735
  %1 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7736
  %loop = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %1, i32 0, i32 1, !dbg !7737
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !7737
  %num = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 0, !dbg !7738
  %3 = load i32, i32* %num, align 8, !dbg !7738
  %4 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7739
  %parent = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %4, i32 0, i32 6, !dbg !7740
  %5 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !7740
  %cmp = icmp eq %struct.ira_loop_tree_node* %5, null, !dbg !7741
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7739

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !7739

cond.false:                                       ; preds = %entry
  %6 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7742
  %parent1 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %6, i32 0, i32 6, !dbg !7743
  %7 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent1, align 8, !dbg !7743
  %loop2 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %7, i32 0, i32 1, !dbg !7744
  %8 = load %struct.loop*, %struct.loop** %loop2, align 8, !dbg !7744
  %num3 = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 0, !dbg !7745
  %9 = load i32, i32* %num3, align 8, !dbg !7745
  br label %cond.end, !dbg !7739

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ -1, %cond.true ], [ %9, %cond.false ], !dbg !7739
  %10 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7746
  %loop4 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %10, i32 0, i32 1, !dbg !7747
  %11 = load %struct.loop*, %struct.loop** %loop4, align 8, !dbg !7747
  %header = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 2, !dbg !7748
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !7748
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !7749
  %13 = load i32, i32* %index, align 8, !dbg !7749
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7750
  %loop5 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %14, i32 0, i32 1, !dbg !7751
  %15 = load %struct.loop*, %struct.loop** %loop5, align 8, !dbg !7751
  %call = call i32 @loop_depth(%struct.loop* %15), !dbg !7752
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.21, i64 0, i64 0), i32 %3, i32 %cond, i32 %13, i32 %call), !dbg !7753
  %16 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7754
  %children = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %16, i32 0, i32 5, !dbg !7756
  %17 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %children, align 8, !dbg !7756
  store %struct.ira_loop_tree_node* %17, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7757
  br label %for.cond, !dbg !7758

for.cond:                                         ; preds = %for.inc29, %cond.end
  %18 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7759
  %cmp7 = icmp ne %struct.ira_loop_tree_node* %18, null, !dbg !7761
  br i1 %cmp7, label %for.body, label %for.end30, !dbg !7762

for.body:                                         ; preds = %for.cond
  %19 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7763
  %bb = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %19, i32 0, i32 0, !dbg !7765
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7765
  %cmp8 = icmp ne %struct.basic_block_def* %20, null, !dbg !7766
  br i1 %cmp8, label %if.then, label %if.end28, !dbg !7767

if.then:                                          ; preds = %for.body
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7768
  %22 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7770
  %bb9 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %22, i32 0, i32 0, !dbg !7771
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb9, align 8, !dbg !7771
  %index10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !7772
  %24 = load i32, i32* %index10, align 8, !dbg !7772
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i32 %24), !dbg !7773
  %25 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7774
  %bb12 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %25, i32 0, i32 0, !dbg !7774
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb12, align 8, !dbg !7774
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 1, !dbg !7774
  %call13 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !7774
  %27 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7774
  %28 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %27, i32 0, i32 0, !dbg !7774
  %29 = extractvalue { i32, %struct.VEC_edge_gc** } %call13, 0, !dbg !7774
  store i32 %29, i32* %28, align 8, !dbg !7774
  %30 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %27, i32 0, i32 1, !dbg !7774
  %31 = extractvalue { i32, %struct.VEC_edge_gc** } %call13, 1, !dbg !7774
  store %struct.VEC_edge_gc** %31, %struct.VEC_edge_gc*** %30, align 8, !dbg !7774
  %32 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7774
  %33 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7774
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false), !dbg !7774
  br label %for.cond14, !dbg !7774

for.cond14:                                       ; preds = %for.inc, %if.then
  %34 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7776
  %35 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 0, !dbg !7776
  %36 = load i32, i32* %35, align 8, !dbg !7776
  %37 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %34, i32 0, i32 1, !dbg !7776
  %38 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %37, align 8, !dbg !7776
  %call15 = call zeroext i8 @ei_cond(i32 %36, %struct.VEC_edge_gc** %38, %struct.edge_def** %e), !dbg !7776
  %tobool = icmp ne i8 %call15, 0, !dbg !7774
  br i1 %tobool, label %for.body16, label %for.end, !dbg !7774

for.body16:                                       ; preds = %for.cond14
  %39 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7778
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 1, !dbg !7780
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7780
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7781
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, !dbg !7781
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7781
  %42 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7781
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %42, i32 0, i32 1, !dbg !7781
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7781
  %cmp17 = icmp ne %struct.basic_block_def* %40, %43, !dbg !7782
  br i1 %cmp17, label %land.lhs.true, label %if.end, !dbg !7783

land.lhs.true:                                    ; preds = %for.body16
  %44 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** @ira_bb_nodes, align 8, !dbg !7784
  %45 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7784
  %dest18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %45, i32 0, i32 1, !dbg !7784
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %dest18, align 8, !dbg !7784
  %index19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 9, !dbg !7784
  %47 = load i32, i32* %index19, align 8, !dbg !7784
  %idxprom = sext i32 %47 to i64, !dbg !7784
  %arrayidx = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %44, i64 %idxprom, !dbg !7784
  %parent20 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %arrayidx, i32 0, i32 6, !dbg !7785
  %48 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent20, align 8, !dbg !7785
  store %struct.ira_loop_tree_node* %48, %struct.ira_loop_tree_node** %dest_loop_node, align 8, !dbg !7786
  %49 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7787
  %cmp21 = icmp ne %struct.ira_loop_tree_node* %48, %49, !dbg !7788
  br i1 %cmp21, label %if.then22, label %if.end, !dbg !7789

if.then22:                                        ; preds = %land.lhs.true
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7790
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7791
  %dest23 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 1, !dbg !7792
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %dest23, align 8, !dbg !7792
  %index24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 9, !dbg !7793
  %53 = load i32, i32* %index24, align 8, !dbg !7793
  %54 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %dest_loop_node, align 8, !dbg !7794
  %loop25 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %54, i32 0, i32 1, !dbg !7795
  %55 = load %struct.loop*, %struct.loop** %loop25, align 8, !dbg !7795
  %num26 = getelementptr inbounds %struct.loop, %struct.loop* %55, i32 0, i32 0, !dbg !7796
  %56 = load i32, i32* %num26, align 8, !dbg !7796
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0), i32 %53, i32 %56), !dbg !7797
  br label %if.end, !dbg !7797

if.end:                                           ; preds = %if.then22, %land.lhs.true, %for.body16
  br label %for.inc, !dbg !7798

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7776
  br label %for.cond14, !dbg !7776, !llvm.loop !7799

for.end:                                          ; preds = %for.cond14
  br label %if.end28, !dbg !7801

if.end28:                                         ; preds = %for.end, %for.body
  br label %for.inc29, !dbg !7802

for.inc29:                                        ; preds = %if.end28
  %57 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7803
  %next = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %57, i32 0, i32 3, !dbg !7804
  %58 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %next, align 8, !dbg !7804
  store %struct.ira_loop_tree_node* %58, %struct.ira_loop_tree_node** %subloop_node, align 8, !dbg !7805
  br label %for.cond, !dbg !7806, !llvm.loop !7807

for.end30:                                        ; preds = %for.cond
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7809
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23, i64 0, i64 0)), !dbg !7810
  %60 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7811
  %all_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %60, i32 0, i32 12, !dbg !7811
  %61 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %all_allocnos, align 8, !dbg !7811
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %61, i32 0, i32* %j), !dbg !7811
  br label %for.cond32, !dbg !7811

for.cond32:                                       ; preds = %for.inc39, %for.end30
  %call33 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7813
  %tobool34 = icmp ne i8 %call33, 0, !dbg !7811
  br i1 %tobool34, label %for.body35, label %for.end40, !dbg !7811

for.body35:                                       ; preds = %for.cond32
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7815
  %63 = load i32, i32* %j, align 4, !dbg !7816
  %64 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !7817
  %65 = load i32, i32* %j, align 4, !dbg !7817
  %idxprom36 = zext i32 %65 to i64, !dbg !7817
  %arrayidx37 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %64, i64 %idxprom36, !dbg !7817
  %66 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx37, align 8, !dbg !7817
  %regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %66, i32 0, i32 1, !dbg !7817
  %67 = load i32, i32* %regno, align 4, !dbg !7817
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i64 0, i64 0), i32 %63, i32 %67), !dbg !7818
  br label %for.inc39, !dbg !7818

for.inc39:                                        ; preds = %for.body35
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7813
  br label %for.cond32, !dbg !7813, !llvm.loop !7819

for.end40:                                        ; preds = %for.cond32
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7821
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.25, i64 0, i64 0)), !dbg !7822
  %69 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7823
  %modified_regnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %69, i32 0, i32 14, !dbg !7823
  %70 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %modified_regnos, align 8, !dbg !7823
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %70, i32 0, i32* %j), !dbg !7823
  br label %for.cond42, !dbg !7823

for.cond42:                                       ; preds = %for.inc47, %for.end40
  %call43 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7825
  %tobool44 = icmp ne i8 %call43, 0, !dbg !7823
  br i1 %tobool44, label %for.body45, label %for.end48, !dbg !7823

for.body45:                                       ; preds = %for.cond42
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7827
  %72 = load i32, i32* %j, align 4, !dbg !7828
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i32 %72), !dbg !7829
  br label %for.inc47, !dbg !7829

for.inc47:                                        ; preds = %for.body45
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7825
  br label %for.cond42, !dbg !7825, !llvm.loop !7830

for.end48:                                        ; preds = %for.cond42
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7832
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %73, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.26, i64 0, i64 0)), !dbg !7833
  %74 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7834
  %border_allocnos = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %74, i32 0, i32 13, !dbg !7834
  %75 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %border_allocnos, align 8, !dbg !7834
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %75, i32 0, i32* %j), !dbg !7834
  br label %for.cond50, !dbg !7834

for.cond50:                                       ; preds = %for.inc58, %for.end48
  %call51 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7836
  %tobool52 = icmp ne i8 %call51, 0, !dbg !7834
  br i1 %tobool52, label %for.body53, label %for.end59, !dbg !7834

for.body53:                                       ; preds = %for.cond50
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7838
  %77 = load i32, i32* %j, align 4, !dbg !7839
  %78 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !7840
  %79 = load i32, i32* %j, align 4, !dbg !7840
  %idxprom54 = zext i32 %79 to i64, !dbg !7840
  %arrayidx55 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %78, i64 %idxprom54, !dbg !7840
  %80 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx55, align 8, !dbg !7840
  %regno56 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %80, i32 0, i32 1, !dbg !7840
  %81 = load i32, i32* %regno56, align 4, !dbg !7840
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %76, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i64 0, i64 0), i32 %77, i32 %81), !dbg !7841
  br label %for.inc58, !dbg !7841

for.inc58:                                        ; preds = %for.body53
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %j), !dbg !7836
  br label %for.cond50, !dbg !7836, !llvm.loop !7842

for.end59:                                        ; preds = %for.cond50
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7844
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.27, i64 0, i64 0)), !dbg !7845
  store i32 0, i32* %j, align 4, !dbg !7846
  br label %for.cond61, !dbg !7848

for.cond61:                                       ; preds = %for.inc77, %for.end59
  %83 = load i32, i32* %j, align 4, !dbg !7849
  %84 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !7851
  %cmp62 = icmp slt i32 %83, %84, !dbg !7852
  br i1 %cmp62, label %for.body63, label %for.end78, !dbg !7853

for.body63:                                       ; preds = %for.cond61
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !7854, metadata !DIExpression()), !dbg !7856
  %85 = load i32, i32* %j, align 4, !dbg !7857
  %idxprom64 = zext i32 %85 to i64, !dbg !7858
  %arrayidx65 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom64, !dbg !7858
  %86 = load i32, i32* %arrayidx65, align 4, !dbg !7858
  store i32 %86, i32* %cover_class, align 4, !dbg !7859
  %87 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7860
  %reg_pressure = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %87, i32 0, i32 11, !dbg !7862
  %88 = load i32, i32* %cover_class, align 4, !dbg !7863
  %idxprom66 = zext i32 %88 to i64, !dbg !7860
  %arrayidx67 = getelementptr inbounds [27 x i32], [27 x i32]* %reg_pressure, i64 0, i64 %idxprom66, !dbg !7860
  %89 = load i32, i32* %arrayidx67, align 4, !dbg !7860
  %cmp68 = icmp eq i32 %89, 0, !dbg !7864
  br i1 %cmp68, label %if.then69, label %if.end70, !dbg !7865

if.then69:                                        ; preds = %for.body63
  br label %for.inc77, !dbg !7866

if.end70:                                         ; preds = %for.body63
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7867
  %91 = load i32, i32* %cover_class, align 4, !dbg !7868
  %idxprom71 = zext i32 %91 to i64, !dbg !7869
  %arrayidx72 = getelementptr inbounds [0 x i8*], [0 x i8*]* @reg_class_names, i64 0, i64 %idxprom71, !dbg !7869
  %92 = load i8*, i8** %arrayidx72, align 8, !dbg !7869
  %93 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node.addr, align 8, !dbg !7870
  %reg_pressure73 = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %93, i32 0, i32 11, !dbg !7871
  %94 = load i32, i32* %cover_class, align 4, !dbg !7872
  %idxprom74 = zext i32 %94 to i64, !dbg !7870
  %arrayidx75 = getelementptr inbounds [27 x i32], [27 x i32]* %reg_pressure73, i64 0, i64 %idxprom74, !dbg !7870
  %95 = load i32, i32* %arrayidx75, align 4, !dbg !7870
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i64 0, i64 0), i8* %92, i32 %95), !dbg !7873
  br label %for.inc77, !dbg !7874

for.inc77:                                        ; preds = %if.end70, %if.then69
  %96 = load i32, i32* %j, align 4, !dbg !7875
  %inc = add i32 %96, 1, !dbg !7875
  store i32 %inc, i32* %j, align 4, !dbg !7875
  br label %for.cond61, !dbg !7876, !llvm.loop !7877

for.end78:                                        ; preds = %for.cond61
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7879
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %97, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7880
  ret void, !dbg !7881
}

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @color_allocnos() #0 !dbg !7882 {
entry:
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %a = alloca %struct.ira_allocno*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7883, metadata !DIExpression()), !dbg !7884
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7885, metadata !DIExpression()), !dbg !7886
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !7887, metadata !DIExpression()), !dbg !7888
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !7889, metadata !DIExpression()), !dbg !7890
  store i8 0, i8* @allocno_coalesced_p, align 1, !dbg !7891
  %call = call %struct.bitmap_head_def* @ira_allocate_bitmap(), !dbg !7892
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !7893
  %0 = load i32, i32* @flag_ira_coalesce, align 4, !dbg !7894
  %tobool = icmp ne i32 %0, 0, !dbg !7894
  br i1 %tobool, label %if.then, label %if.end, !dbg !7896

if.then:                                          ; preds = %entry
  call void @coalesce_allocnos(i8 zeroext 0), !dbg !7897
  br label %if.end, !dbg !7897

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* @flag_ira_algorithm, align 4, !dbg !7898
  %cmp = icmp eq i32 %1, 1, !dbg !7900
  br i1 %cmp, label %if.then1, label %if.else57, !dbg !7901

if.then1:                                         ; preds = %if.end
  store i32 0, i32* %n, align 4, !dbg !7902
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !7904
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %2, i32 0, i32* %i), !dbg !7904
  br label %for.cond, !dbg !7904

for.cond:                                         ; preds = %for.inc, %if.then1
  %call2 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7906
  %tobool3 = icmp ne i8 %call2, 0, !dbg !7904
  br i1 %tobool3, label %for.body, label %for.end, !dbg !7904

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !7908
  %4 = load i32, i32* %i, align 4, !dbg !7910
  %idxprom = zext i32 %4 to i64, !dbg !7908
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %3, i64 %idxprom, !dbg !7908
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !7908
  store %struct.ira_allocno* %5, %struct.ira_allocno** %a, align 8, !dbg !7911
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7912
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 9, !dbg !7912
  %7 = load i32, i32* %cover_class, align 8, !dbg !7912
  %cmp4 = icmp eq i32 %7, 0, !dbg !7914
  br i1 %cmp4, label %if.then5, label %if.end12, !dbg !7915

if.then5:                                         ; preds = %for.body
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7916
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 3, !dbg !7916
  store i32 -1, i32* %hard_regno, align 4, !dbg !7918
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7919
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 31, !dbg !7919
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !7920
  %bf.clear = and i16 %bf.load, -257, !dbg !7920
  %bf.set = or i16 %bf.clear, 256, !dbg !7920
  store i16 %bf.set, i16* %assigned_p, align 4, !dbg !7920
  %10 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !7921
  %cmp6 = icmp sgt i32 %10, 3, !dbg !7923
  br i1 %cmp6, label %land.lhs.true, label %if.end11, !dbg !7924

land.lhs.true:                                    ; preds = %if.then5
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7925
  %cmp7 = icmp ne %struct._IO_FILE* %11, null, !dbg !7926
  br i1 %cmp7, label %if.then8, label %if.end11, !dbg !7927

if.then8:                                         ; preds = %land.lhs.true
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7928
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0)), !dbg !7930
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7931
  call void @print_coalesced_allocno(%struct.ira_allocno* %13), !dbg !7932
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7933
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7934
  br label %if.end11, !dbg !7935

if.end11:                                         ; preds = %if.then8, %land.lhs.true, %if.then5
  br label %for.inc, !dbg !7936

if.end12:                                         ; preds = %for.body
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7937
  %16 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !7938
  %17 = load i32, i32* %n, align 4, !dbg !7939
  %inc = add i32 %17, 1, !dbg !7939
  store i32 %inc, i32* %n, align 4, !dbg !7939
  %idxprom13 = zext i32 %17 to i64, !dbg !7938
  %arrayidx14 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %16, i64 %idxprom13, !dbg !7938
  store %struct.ira_allocno* %15, %struct.ira_allocno** %arrayidx14, align 8, !dbg !7940
  br label %for.inc, !dbg !7941

for.inc:                                          ; preds = %if.end12, %if.end11
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !7906
  br label %for.cond, !dbg !7906, !llvm.loop !7942

for.end:                                          ; preds = %for.cond
  %18 = load i32, i32* %n, align 4, !dbg !7944
  %cmp15 = icmp ne i32 %18, 0, !dbg !7946
  br i1 %cmp15, label %if.then16, label %if.end56, !dbg !7947

if.then16:                                        ; preds = %for.end
  %19 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !7948
  %20 = load i32, i32* %n, align 4, !dbg !7950
  call void @setup_allocno_priorities(%struct.ira_allocno** %19, i32 %20), !dbg !7951
  %21 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !7952
  %22 = bitcast %struct.ira_allocno** %21 to i8*, !dbg !7952
  %23 = load i32, i32* %n, align 4, !dbg !7953
  %conv = zext i32 %23 to i64, !dbg !7953
  call void @spec_qsort(i8* %22, i64 %conv, i64 8, i32 (i8*, i8*)* @allocno_priority_compare_func), !dbg !7954
  store i32 0, i32* %i, align 4, !dbg !7955
  br label %for.cond17, !dbg !7957

for.cond17:                                       ; preds = %for.inc53, %if.then16
  %24 = load i32, i32* %i, align 4, !dbg !7958
  %25 = load i32, i32* %n, align 4, !dbg !7960
  %cmp18 = icmp ult i32 %24, %25, !dbg !7961
  br i1 %cmp18, label %for.body20, label %for.end55, !dbg !7962

for.body20:                                       ; preds = %for.cond17
  %26 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !7963
  %27 = load i32, i32* %i, align 4, !dbg !7965
  %idxprom21 = zext i32 %27 to i64, !dbg !7963
  %arrayidx22 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %26, i64 %idxprom21, !dbg !7963
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx22, align 8, !dbg !7963
  store %struct.ira_allocno* %28, %struct.ira_allocno** %a, align 8, !dbg !7966
  %29 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !7967
  %cmp23 = icmp sgt i32 %29, 3, !dbg !7969
  br i1 %cmp23, label %land.lhs.true25, label %if.end31, !dbg !7970

land.lhs.true25:                                  ; preds = %for.body20
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7971
  %cmp26 = icmp ne %struct._IO_FILE* %30, null, !dbg !7972
  br i1 %cmp26, label %if.then28, label %if.end31, !dbg !7973

if.then28:                                        ; preds = %land.lhs.true25
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7974
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i64 0, i64 0)), !dbg !7976
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7977
  call void @print_coalesced_allocno(%struct.ira_allocno* %32), !dbg !7978
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7979
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i64 0, i64 0)), !dbg !7980
  br label %if.end31, !dbg !7981

if.end31:                                         ; preds = %if.then28, %land.lhs.true25, %for.body20
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7982
  %call32 = call zeroext i8 @assign_hard_reg(%struct.ira_allocno* %34, i8 zeroext 0), !dbg !7984
  %tobool33 = icmp ne i8 %call32, 0, !dbg !7984
  br i1 %tobool33, label %if.then34, label %if.else, !dbg !7985

if.then34:                                        ; preds = %if.end31
  %35 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !7986
  %cmp35 = icmp sgt i32 %35, 3, !dbg !7989
  br i1 %cmp35, label %land.lhs.true37, label %if.end43, !dbg !7990

land.lhs.true37:                                  ; preds = %if.then34
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7991
  %cmp38 = icmp ne %struct._IO_FILE* %36, null, !dbg !7992
  br i1 %cmp38, label %if.then40, label %if.end43, !dbg !7993

if.then40:                                        ; preds = %land.lhs.true37
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !7994
  %38 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !7995
  %hard_regno41 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %38, i32 0, i32 3, !dbg !7995
  %39 = load i32, i32* %hard_regno41, align 4, !dbg !7995
  %call42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.32, i64 0, i64 0), i32 %39), !dbg !7996
  br label %if.end43, !dbg !7996

if.end43:                                         ; preds = %if.then40, %land.lhs.true37, %if.then34
  br label %if.end52, !dbg !7997

if.else:                                          ; preds = %if.end31
  %40 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !7998
  %cmp44 = icmp sgt i32 %40, 3, !dbg !8001
  br i1 %cmp44, label %land.lhs.true46, label %if.end51, !dbg !8002

land.lhs.true46:                                  ; preds = %if.else
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8003
  %cmp47 = icmp ne %struct._IO_FILE* %41, null, !dbg !8004
  br i1 %cmp47, label %if.then49, label %if.end51, !dbg !8005

if.then49:                                        ; preds = %land.lhs.true46
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8006
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i64 0, i64 0)), !dbg !8007
  br label %if.end51, !dbg !8007

if.end51:                                         ; preds = %if.then49, %land.lhs.true46, %if.else
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.end43
  br label %for.inc53, !dbg !8008

for.inc53:                                        ; preds = %if.end52
  %43 = load i32, i32* %i, align 4, !dbg !8009
  %inc54 = add i32 %43, 1, !dbg !8009
  store i32 %inc54, i32* %i, align 4, !dbg !8009
  br label %for.cond17, !dbg !8010, !llvm.loop !8011

for.end55:                                        ; preds = %for.cond17
  br label %if.end56, !dbg !8013

if.end56:                                         ; preds = %for.end55, %for.end
  br label %if.end85, !dbg !8014

if.else57:                                        ; preds = %if.end
  store %struct.ira_allocno* null, %struct.ira_allocno** @colorable_allocno_bucket, align 8, !dbg !8015
  store %struct.ira_allocno* null, %struct.ira_allocno** @uncolorable_allocno_bucket, align 8, !dbg !8017
  %44 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !8018
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %44, i32 0, i32* %i), !dbg !8018
  br label %for.cond58, !dbg !8018

for.cond58:                                       ; preds = %for.inc83, %if.else57
  %call59 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8020
  %tobool60 = icmp ne i8 %call59, 0, !dbg !8018
  br i1 %tobool60, label %for.body61, label %for.end84, !dbg !8018

for.body61:                                       ; preds = %for.cond58
  %45 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !8022
  %46 = load i32, i32* %i, align 4, !dbg !8024
  %idxprom62 = zext i32 %46 to i64, !dbg !8022
  %arrayidx63 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %45, i64 %idxprom62, !dbg !8022
  %47 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx63, align 8, !dbg !8022
  store %struct.ira_allocno* %47, %struct.ira_allocno** %a, align 8, !dbg !8025
  %48 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8026
  %cover_class64 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %48, i32 0, i32 9, !dbg !8026
  %49 = load i32, i32* %cover_class64, align 8, !dbg !8026
  %cmp65 = icmp eq i32 %49, 0, !dbg !8028
  br i1 %cmp65, label %if.then67, label %if.end82, !dbg !8029

if.then67:                                        ; preds = %for.body61
  %50 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8030
  %hard_regno68 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %50, i32 0, i32 3, !dbg !8030
  store i32 -1, i32* %hard_regno68, align 4, !dbg !8032
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8033
  %assigned_p69 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %51, i32 0, i32 31, !dbg !8033
  %bf.load70 = load i16, i16* %assigned_p69, align 4, !dbg !8034
  %bf.clear71 = and i16 %bf.load70, -257, !dbg !8034
  %bf.set72 = or i16 %bf.clear71, 256, !dbg !8034
  store i16 %bf.set72, i16* %assigned_p69, align 4, !dbg !8034
  %52 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !8035
  %cmp73 = icmp sgt i32 %52, 3, !dbg !8037
  br i1 %cmp73, label %land.lhs.true75, label %if.end81, !dbg !8038

land.lhs.true75:                                  ; preds = %if.then67
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8039
  %cmp76 = icmp ne %struct._IO_FILE* %53, null, !dbg !8040
  br i1 %cmp76, label %if.then78, label %if.end81, !dbg !8041

if.then78:                                        ; preds = %land.lhs.true75
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8042
  %call79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0)), !dbg !8044
  %55 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8045
  call void @print_coalesced_allocno(%struct.ira_allocno* %55), !dbg !8046
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8047
  %call80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8048
  br label %if.end81, !dbg !8049

if.end81:                                         ; preds = %if.then78, %land.lhs.true75, %if.then67
  br label %for.inc83, !dbg !8050

if.end82:                                         ; preds = %for.body61
  %57 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8051
  call void @put_allocno_into_bucket(%struct.ira_allocno* %57), !dbg !8052
  br label %for.inc83, !dbg !8053

for.inc83:                                        ; preds = %if.end82, %if.end81
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8020
  br label %for.cond58, !dbg !8020, !llvm.loop !8054

for.end84:                                        ; preds = %for.cond58
  call void @push_allocnos_to_stack(), !dbg !8056
  call void @pop_allocnos_from_stack(), !dbg !8057
  br label %if.end85

if.end85:                                         ; preds = %for.end84, %if.end56
  %58 = load i32, i32* @flag_ira_coalesce, align 4, !dbg !8058
  %tobool86 = icmp ne i32 %58, 0, !dbg !8058
  br i1 %tobool86, label %if.then87, label %if.end96, !dbg !8060

if.then87:                                        ; preds = %if.end85
  %59 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !8061
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %59, i32 0, i32* %i), !dbg !8061
  br label %for.cond88, !dbg !8061

for.cond88:                                       ; preds = %for.inc94, %if.then87
  %call89 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8063
  %tobool90 = icmp ne i8 %call89, 0, !dbg !8061
  br i1 %tobool90, label %for.body91, label %for.end95, !dbg !8061

for.body91:                                       ; preds = %for.cond88
  %60 = load %struct.ira_allocno**, %struct.ira_allocno*** @ira_allocnos, align 8, !dbg !8065
  %61 = load i32, i32* %i, align 4, !dbg !8067
  %idxprom92 = zext i32 %61 to i64, !dbg !8065
  %arrayidx93 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %60, i64 %idxprom92, !dbg !8065
  %62 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx93, align 8, !dbg !8065
  store %struct.ira_allocno* %62, %struct.ira_allocno** %a, align 8, !dbg !8068
  %63 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8069
  %64 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8070
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %64, i32 0, i32 18, !dbg !8070
  store %struct.ira_allocno* %63, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !8071
  %65 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8072
  %66 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8073
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %66, i32 0, i32 19, !dbg !8073
  store %struct.ira_allocno* %65, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !8074
  br label %for.inc94, !dbg !8075

for.inc94:                                        ; preds = %for.body91
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8063
  br label %for.cond88, !dbg !8063, !llvm.loop !8076

for.end95:                                        ; preds = %for.cond88
  br label %if.end96, !dbg !8077

if.end96:                                         ; preds = %for.end95, %if.end85
  %67 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !8078
  call void @ira_free_bitmap(%struct.bitmap_head_def* %67), !dbg !8079
  store i8 0, i8* @allocno_coalesced_p, align 1, !dbg !8080
  ret void, !dbg !8081
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_depth(%struct.loop* %loop) #0 !dbg !8082 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8087, metadata !DIExpression()), !dbg !8088
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8089
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !8089
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !8089
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !8089
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8089

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8089
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !8089
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !8089
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !8089
  br label %cond.end, !dbg !8089

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8089

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8089
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !8089
  ret i32 %call, !dbg !8090
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !8091 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !8096, metadata !DIExpression()), !dbg !8097
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !8097
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !8097
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8097

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !8097
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !8097
  %2 = load i32, i32* %num, align 8, !dbg !8097
  br label %cond.end, !dbg !8097

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8097

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8097
  ret i32 %cond, !dbg !8097
}

; Function Attrs: noinline nounwind uwtable
define internal void @put_allocno_into_bucket(%struct.ira_allocno* %allocno) #0 !dbg !8098 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %cover_class = alloca i32, align 4
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !8099, metadata !DIExpression()), !dbg !8100
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !8101, metadata !DIExpression()), !dbg !8102
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8103
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 9, !dbg !8103
  %1 = load i32, i32* %cover_class1, align 8, !dbg !8103
  store i32 %1, i32* %cover_class, align 4, !dbg !8104
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8105
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 18, !dbg !8105
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !8105
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8107
  %cmp = icmp ne %struct.ira_allocno* %3, %4, !dbg !8108
  br i1 %cmp, label %if.then, label %if.end, !dbg !8109

if.then:                                          ; preds = %entry
  br label %if.end6, !dbg !8110

if.end:                                           ; preds = %entry
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8111
  %in_graph_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 31, !dbg !8111
  %bf.load = load i16, i16* %in_graph_p, align 4, !dbg !8112
  %bf.clear = and i16 %bf.load, -129, !dbg !8112
  %bf.set = or i16 %bf.clear, 128, !dbg !8112
  store i16 %bf.set, i16* %in_graph_p, align 4, !dbg !8112
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8113
  call void @setup_allocno_left_conflicts_size(%struct.ira_allocno* %6), !dbg !8114
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8115
  call void @setup_allocno_available_regs_num(%struct.ira_allocno* %7), !dbg !8116
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8117
  %left_conflicts_size = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 37, !dbg !8117
  %9 = load i32, i32* %left_conflicts_size, align 8, !dbg !8117
  %10 = load i32, i32* %cover_class, align 4, !dbg !8119
  %idxprom = zext i32 %10 to i64, !dbg !8120
  %arrayidx = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom, !dbg !8120
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8121
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 2, !dbg !8121
  %12 = load i32, i32* %mode, align 8, !dbg !8121
  %idxprom2 = zext i32 %12 to i64, !dbg !8120
  %arrayidx3 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx, i64 0, i64 %idxprom2, !dbg !8120
  %13 = load i32, i32* %arrayidx3, align 4, !dbg !8120
  %add = add nsw i32 %9, %13, !dbg !8122
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8123
  %available_regs_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 38, !dbg !8123
  %15 = load i32, i32* %available_regs_num, align 4, !dbg !8123
  %cmp4 = icmp sle i32 %add, %15, !dbg !8124
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !8125

if.then5:                                         ; preds = %if.end
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8126
  call void @add_allocno_to_bucket(%struct.ira_allocno* %16, %struct.ira_allocno** @colorable_allocno_bucket), !dbg !8127
  br label %if.end6, !dbg !8127

if.else:                                          ; preds = %if.end
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8128
  call void @add_allocno_to_bucket(%struct.ira_allocno* %17, %struct.ira_allocno** @uncolorable_allocno_bucket), !dbg !8129
  br label %if.end6

if.end6:                                          ; preds = %if.then, %if.else, %if.then5
  ret void, !dbg !8130
}

; Function Attrs: noinline nounwind uwtable
define internal void @push_allocnos_to_stack() #0 !dbg !8131 {
entry:
  %allocno = alloca %struct.ira_allocno*, align 8
  %a = alloca %struct.ira_allocno*, align 8
  %i_allocno = alloca %struct.ira_allocno*, align 8
  %allocno_vec = alloca %struct.ira_allocno**, align 8
  %cover_class = alloca i32, align 4
  %rclass = alloca i32, align 4
  %allocno_pri = alloca i32, align 4
  %i_allocno_pri = alloca i32, align 4
  %allocno_cost = alloca i32, align 4
  %i_allocno_cost = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %num = alloca i32, align 4
  %cover_class_allocnos_num = alloca [27 x i32], align 16
  %cover_class_allocnos = alloca [27 x %struct.ira_allocno**], align 16
  %cost = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno, metadata !8132, metadata !DIExpression()), !dbg !8133
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !8134, metadata !DIExpression()), !dbg !8135
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %i_allocno, metadata !8136, metadata !DIExpression()), !dbg !8137
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %allocno_vec, metadata !8138, metadata !DIExpression()), !dbg !8139
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !8140, metadata !DIExpression()), !dbg !8141
  call void @llvm.dbg.declare(metadata i32* %rclass, metadata !8142, metadata !DIExpression()), !dbg !8143
  call void @llvm.dbg.declare(metadata i32* %allocno_pri, metadata !8144, metadata !DIExpression()), !dbg !8145
  call void @llvm.dbg.declare(metadata i32* %i_allocno_pri, metadata !8146, metadata !DIExpression()), !dbg !8147
  call void @llvm.dbg.declare(metadata i32* %allocno_cost, metadata !8148, metadata !DIExpression()), !dbg !8149
  call void @llvm.dbg.declare(metadata i32* %i_allocno_cost, metadata !8150, metadata !DIExpression()), !dbg !8151
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8152, metadata !DIExpression()), !dbg !8153
  call void @llvm.dbg.declare(metadata i32* %j, metadata !8154, metadata !DIExpression()), !dbg !8155
  call void @llvm.dbg.declare(metadata i32* %num, metadata !8156, metadata !DIExpression()), !dbg !8157
  call void @llvm.dbg.declare(metadata [27 x i32]* %cover_class_allocnos_num, metadata !8158, metadata !DIExpression()), !dbg !8159
  call void @llvm.dbg.declare(metadata [27 x %struct.ira_allocno**]* %cover_class_allocnos, metadata !8160, metadata !DIExpression()), !dbg !8162
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !8163, metadata !DIExpression()), !dbg !8164
  %0 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @removed_splay_allocno_vec, align 8, !dbg !8165
  %tobool = icmp ne %struct.VEC_ira_allocno_t_heap* %0, null, !dbg !8165
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8165

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @removed_splay_allocno_vec, align 8, !dbg !8165
  %base = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %1, i32 0, i32 0, !dbg !8165
  br label %cond.end, !dbg !8165

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8165

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_allocno_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8165
  call void @VEC_ira_allocno_t_base_truncate(%struct.VEC_ira_allocno_t_base* %cond, i32 0), !dbg !8165
  store i32 0, i32* %i, align 4, !dbg !8166
  br label %for.cond, !dbg !8168

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4, !dbg !8169
  %3 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !8171
  %cmp = icmp slt i32 %2, %3, !dbg !8172
  br i1 %cmp, label %for.body, label %for.end, !dbg !8173

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4, !dbg !8174
  %idxprom = sext i32 %4 to i64, !dbg !8176
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !8176
  %5 = load i32, i32* %arrayidx, align 4, !dbg !8176
  store i32 %5, i32* %cover_class, align 4, !dbg !8177
  %6 = load i32, i32* %cover_class, align 4, !dbg !8178
  %idxprom1 = zext i32 %6 to i64, !dbg !8179
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* %cover_class_allocnos_num, i64 0, i64 %idxprom1, !dbg !8179
  store i32 0, i32* %arrayidx2, align 4, !dbg !8180
  %7 = load i32, i32* %cover_class, align 4, !dbg !8181
  %idxprom3 = zext i32 %7 to i64, !dbg !8182
  %arrayidx4 = getelementptr inbounds [27 x %struct.ira_allocno**], [27 x %struct.ira_allocno**]* %cover_class_allocnos, i64 0, i64 %idxprom3, !dbg !8182
  store %struct.ira_allocno** null, %struct.ira_allocno*** %arrayidx4, align 8, !dbg !8183
  %8 = load i32, i32* %cover_class, align 4, !dbg !8184
  %idxprom5 = zext i32 %8 to i64, !dbg !8185
  %arrayidx6 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom5, !dbg !8185
  store %struct.splay_tree_s* null, %struct.splay_tree_s** %arrayidx6, align 8, !dbg !8186
  br label %for.inc, !dbg !8187

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !8188
  %inc = add nsw i32 %9, 1, !dbg !8188
  store i32 %inc, i32* %i, align 4, !dbg !8188
  br label %for.cond, !dbg !8189, !llvm.loop !8190

for.end:                                          ; preds = %for.cond
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** @uncolorable_allocno_bucket, align 8, !dbg !8192
  store %struct.ira_allocno* %10, %struct.ira_allocno** %allocno, align 8, !dbg !8194
  br label %for.cond7, !dbg !8195

for.cond7:                                        ; preds = %for.inc22, %for.end
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8196
  %cmp8 = icmp ne %struct.ira_allocno* %11, null, !dbg !8198
  br i1 %cmp8, label %for.body9, label %for.end23, !dbg !8199

for.body9:                                        ; preds = %for.cond7
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8200
  %cover_class10 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 9, !dbg !8200
  %13 = load i32, i32* %cover_class10, align 8, !dbg !8200
  store i32 %13, i32* %cover_class, align 4, !dbg !8202
  %cmp11 = icmp ne i32 %13, 0, !dbg !8203
  br i1 %cmp11, label %if.then, label %if.end21, !dbg !8204

if.then:                                          ; preds = %for.body9
  %14 = load i32, i32* %cover_class, align 4, !dbg !8205
  %idxprom12 = zext i32 %14 to i64, !dbg !8207
  %arrayidx13 = getelementptr inbounds [27 x i32], [27 x i32]* %cover_class_allocnos_num, i64 0, i64 %idxprom12, !dbg !8207
  %15 = load i32, i32* %arrayidx13, align 4, !dbg !8208
  %inc14 = add nsw i32 %15, 1, !dbg !8208
  store i32 %inc14, i32* %arrayidx13, align 4, !dbg !8208
  store i32 0, i32* %cost, align 4, !dbg !8209
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8210
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 19, !dbg !8210
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !8210
  store %struct.ira_allocno* %17, %struct.ira_allocno** %a, align 8, !dbg !8212
  br label %for.cond15, !dbg !8213

for.cond15:                                       ; preds = %for.inc18, %if.then
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8214
  %call = call i32 @calculate_allocno_spill_cost(%struct.ira_allocno* %18), !dbg !8217
  %19 = load i32, i32* %cost, align 4, !dbg !8218
  %add = add nsw i32 %19, %call, !dbg !8218
  store i32 %add, i32* %cost, align 4, !dbg !8218
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8219
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8221
  %cmp16 = icmp eq %struct.ira_allocno* %20, %21, !dbg !8222
  br i1 %cmp16, label %if.then17, label %if.end, !dbg !8223

if.then17:                                        ; preds = %for.cond15
  br label %for.end20, !dbg !8224

if.end:                                           ; preds = %for.cond15
  br label %for.inc18, !dbg !8225

for.inc18:                                        ; preds = %if.end
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8226
  %next_coalesced_allocno19 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 19, !dbg !8226
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno19, align 8, !dbg !8226
  store %struct.ira_allocno* %23, %struct.ira_allocno** %a, align 8, !dbg !8227
  br label %for.cond15, !dbg !8228, !llvm.loop !8229

for.end20:                                        ; preds = %if.then17
  %24 = load i32, i32* %cost, align 4, !dbg !8232
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8233
  %temp = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 41, !dbg !8233
  store i32 %24, i32* %temp, align 8, !dbg !8234
  br label %if.end21, !dbg !8235

if.end21:                                         ; preds = %for.end20, %for.body9
  br label %for.inc22, !dbg !8236

for.inc22:                                        ; preds = %if.end21
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8237
  %next_bucket_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %26, i32 0, i32 39, !dbg !8237
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %next_bucket_allocno, align 8, !dbg !8237
  store %struct.ira_allocno* %27, %struct.ira_allocno** %allocno, align 8, !dbg !8238
  br label %for.cond7, !dbg !8239, !llvm.loop !8240

for.end23:                                        ; preds = %for.cond7
  store i32 0, i32* %i, align 4, !dbg !8242
  store i32 0, i32* %num, align 4, !dbg !8244
  br label %for.cond24, !dbg !8245

for.cond24:                                       ; preds = %for.inc49, %for.end23
  %28 = load i32, i32* %i, align 4, !dbg !8246
  %29 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !8248
  %cmp25 = icmp slt i32 %28, %29, !dbg !8249
  br i1 %cmp25, label %for.body26, label %for.end51, !dbg !8250

for.body26:                                       ; preds = %for.cond24
  %30 = load i32, i32* %i, align 4, !dbg !8251
  %idxprom27 = sext i32 %30 to i64, !dbg !8253
  %arrayidx28 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom27, !dbg !8253
  %31 = load i32, i32* %arrayidx28, align 4, !dbg !8253
  store i32 %31, i32* %cover_class, align 4, !dbg !8254
  %32 = load i32, i32* %cover_class, align 4, !dbg !8255
  %idxprom29 = zext i32 %32 to i64, !dbg !8257
  %arrayidx30 = getelementptr inbounds [27 x i32], [27 x i32]* %cover_class_allocnos_num, i64 0, i64 %idxprom29, !dbg !8257
  %33 = load i32, i32* %arrayidx30, align 4, !dbg !8257
  %cmp31 = icmp ne i32 %33, 0, !dbg !8258
  br i1 %cmp31, label %if.then32, label %if.end40, !dbg !8259

if.then32:                                        ; preds = %for.body26
  %34 = load %struct.ira_allocno**, %struct.ira_allocno*** @allocnos_for_spilling, align 8, !dbg !8260
  %35 = load i32, i32* %num, align 4, !dbg !8262
  %idx.ext = sext i32 %35 to i64, !dbg !8263
  %add.ptr = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %34, i64 %idx.ext, !dbg !8263
  %36 = load i32, i32* %cover_class, align 4, !dbg !8264
  %idxprom33 = zext i32 %36 to i64, !dbg !8265
  %arrayidx34 = getelementptr inbounds [27 x %struct.ira_allocno**], [27 x %struct.ira_allocno**]* %cover_class_allocnos, i64 0, i64 %idxprom33, !dbg !8265
  store %struct.ira_allocno** %add.ptr, %struct.ira_allocno*** %arrayidx34, align 8, !dbg !8266
  %37 = load i32, i32* %cover_class, align 4, !dbg !8267
  %idxprom35 = zext i32 %37 to i64, !dbg !8268
  %arrayidx36 = getelementptr inbounds [27 x i32], [27 x i32]* %cover_class_allocnos_num, i64 0, i64 %idxprom35, !dbg !8268
  %38 = load i32, i32* %arrayidx36, align 4, !dbg !8268
  %39 = load i32, i32* %num, align 4, !dbg !8269
  %add37 = add nsw i32 %39, %38, !dbg !8269
  store i32 %add37, i32* %num, align 4, !dbg !8269
  %40 = load i32, i32* %cover_class, align 4, !dbg !8270
  %idxprom38 = zext i32 %40 to i64, !dbg !8271
  %arrayidx39 = getelementptr inbounds [27 x i32], [27 x i32]* %cover_class_allocnos_num, i64 0, i64 %idxprom38, !dbg !8271
  store i32 0, i32* %arrayidx39, align 4, !dbg !8272
  br label %if.end40, !dbg !8273

if.end40:                                         ; preds = %if.then32, %for.body26
  %41 = load i32, i32* %cover_class, align 4, !dbg !8274
  %idxprom41 = zext i32 %41 to i64, !dbg !8274
  %arrayidx42 = getelementptr inbounds [27 x i32], [27 x i32]* @uncolorable_allocnos_num, i64 0, i64 %idxprom41, !dbg !8274
  %42 = load i32, i32* %arrayidx42, align 4, !dbg !8274
  %cmp43 = icmp sgt i32 %42, 4000, !dbg !8274
  br i1 %cmp43, label %if.then44, label %if.end48, !dbg !8276

if.then44:                                        ; preds = %if.end40
  %call45 = call %struct.splay_tree_s* @splay_tree_new_with_allocator(i32 (i64, i64)* @allocno_spill_priority_compare, void (i64)* null, void (i64)* null, i8* (i32, i8*)* @splay_tree_allocate, void (i8*, i8*)* @splay_tree_free, i8* null), !dbg !8277
  %43 = load i32, i32* %cover_class, align 4, !dbg !8278
  %idxprom46 = zext i32 %43 to i64, !dbg !8279
  %arrayidx47 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom46, !dbg !8279
  store %struct.splay_tree_s* %call45, %struct.splay_tree_s** %arrayidx47, align 8, !dbg !8280
  br label %if.end48, !dbg !8279

if.end48:                                         ; preds = %if.then44, %if.end40
  br label %for.inc49, !dbg !8281

for.inc49:                                        ; preds = %if.end48
  %44 = load i32, i32* %i, align 4, !dbg !8282
  %inc50 = add nsw i32 %44, 1, !dbg !8282
  store i32 %inc50, i32* %i, align 4, !dbg !8282
  br label %for.cond24, !dbg !8283, !llvm.loop !8284

for.end51:                                        ; preds = %for.cond24
  %45 = load %struct.ira_allocno*, %struct.ira_allocno** @uncolorable_allocno_bucket, align 8, !dbg !8286
  store %struct.ira_allocno* %45, %struct.ira_allocno** %allocno, align 8, !dbg !8288
  br label %for.cond52, !dbg !8289

for.cond52:                                       ; preds = %for.inc74, %for.end51
  %46 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8290
  %cmp53 = icmp ne %struct.ira_allocno* %46, null, !dbg !8292
  br i1 %cmp53, label %for.body54, label %for.end76, !dbg !8293

for.body54:                                       ; preds = %for.cond52
  %47 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8294
  %cover_class55 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %47, i32 0, i32 9, !dbg !8294
  %48 = load i32, i32* %cover_class55, align 8, !dbg !8294
  store i32 %48, i32* %cover_class, align 4, !dbg !8296
  %cmp56 = icmp ne i32 %48, 0, !dbg !8297
  br i1 %cmp56, label %if.then57, label %if.end73, !dbg !8298

if.then57:                                        ; preds = %for.body54
  %49 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8299
  %50 = load i32, i32* %cover_class, align 4, !dbg !8301
  %idxprom58 = zext i32 %50 to i64, !dbg !8302
  %arrayidx59 = getelementptr inbounds [27 x %struct.ira_allocno**], [27 x %struct.ira_allocno**]* %cover_class_allocnos, i64 0, i64 %idxprom58, !dbg !8302
  %51 = load %struct.ira_allocno**, %struct.ira_allocno*** %arrayidx59, align 8, !dbg !8302
  %52 = load i32, i32* %cover_class, align 4, !dbg !8303
  %idxprom60 = zext i32 %52 to i64, !dbg !8304
  %arrayidx61 = getelementptr inbounds [27 x i32], [27 x i32]* %cover_class_allocnos_num, i64 0, i64 %idxprom60, !dbg !8304
  %53 = load i32, i32* %arrayidx61, align 4, !dbg !8305
  %inc62 = add nsw i32 %53, 1, !dbg !8305
  store i32 %inc62, i32* %arrayidx61, align 4, !dbg !8305
  %idxprom63 = sext i32 %53 to i64, !dbg !8302
  %arrayidx64 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %51, i64 %idxprom63, !dbg !8302
  store %struct.ira_allocno* %49, %struct.ira_allocno** %arrayidx64, align 8, !dbg !8306
  %54 = load i32, i32* %cover_class, align 4, !dbg !8307
  %idxprom65 = zext i32 %54 to i64, !dbg !8309
  %arrayidx66 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom65, !dbg !8309
  %55 = load %struct.splay_tree_s*, %struct.splay_tree_s** %arrayidx66, align 8, !dbg !8309
  %cmp67 = icmp ne %struct.splay_tree_s* %55, null, !dbg !8310
  br i1 %cmp67, label %if.then68, label %if.end72, !dbg !8311

if.then68:                                        ; preds = %if.then57
  %56 = load i32, i32* %cover_class, align 4, !dbg !8312
  %idxprom69 = zext i32 %56 to i64, !dbg !8313
  %arrayidx70 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom69, !dbg !8313
  %57 = load %struct.splay_tree_s*, %struct.splay_tree_s** %arrayidx70, align 8, !dbg !8313
  %58 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8314
  %59 = ptrtoint %struct.ira_allocno* %58 to i64, !dbg !8315
  %60 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8316
  %61 = ptrtoint %struct.ira_allocno* %60 to i64, !dbg !8317
  %call71 = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %57, i64 %59, i64 %61), !dbg !8318
  br label %if.end72, !dbg !8318

if.end72:                                         ; preds = %if.then68, %if.then57
  br label %if.end73, !dbg !8319

if.end73:                                         ; preds = %if.end72, %for.body54
  br label %for.inc74, !dbg !8320

for.inc74:                                        ; preds = %if.end73
  %62 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8321
  %next_bucket_allocno75 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %62, i32 0, i32 39, !dbg !8321
  %63 = load %struct.ira_allocno*, %struct.ira_allocno** %next_bucket_allocno75, align 8, !dbg !8321
  store %struct.ira_allocno* %63, %struct.ira_allocno** %allocno, align 8, !dbg !8322
  br label %for.cond52, !dbg !8323, !llvm.loop !8324

for.end76:                                        ; preds = %for.cond52
  br label %for.cond77, !dbg !8326

for.cond77:                                       ; preds = %if.end220, %if.then83, %for.end76
  call void @push_only_colorable(), !dbg !8327
  %64 = load %struct.ira_allocno*, %struct.ira_allocno** @uncolorable_allocno_bucket, align 8, !dbg !8331
  store %struct.ira_allocno* %64, %struct.ira_allocno** %allocno, align 8, !dbg !8332
  %65 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8333
  %cmp78 = icmp eq %struct.ira_allocno* %65, null, !dbg !8335
  br i1 %cmp78, label %if.then79, label %if.end80, !dbg !8336

if.then79:                                        ; preds = %for.cond77
  br label %for.end221, !dbg !8337

if.end80:                                         ; preds = %for.cond77
  %66 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8338
  %cover_class81 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %66, i32 0, i32 9, !dbg !8338
  %67 = load i32, i32* %cover_class81, align 8, !dbg !8338
  store i32 %67, i32* %cover_class, align 4, !dbg !8339
  %68 = load i32, i32* %cover_class, align 4, !dbg !8340
  %cmp82 = icmp eq i32 %68, 0, !dbg !8342
  br i1 %cmp82, label %if.then83, label %if.end84, !dbg !8343

if.then83:                                        ; preds = %if.end80
  %69 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8344
  call void @push_allocno_to_spill(%struct.ira_allocno* %69), !dbg !8346
  br label %for.cond77, !dbg !8347, !llvm.loop !8348

if.end84:                                         ; preds = %if.end80
  %70 = load i32, i32* %cover_class, align 4, !dbg !8351
  %idxprom85 = zext i32 %70 to i64, !dbg !8351
  %arrayidx86 = getelementptr inbounds [27 x i32], [27 x i32]* @uncolorable_allocnos_num, i64 0, i64 %idxprom85, !dbg !8351
  %71 = load i32, i32* %arrayidx86, align 4, !dbg !8351
  %cmp87 = icmp sgt i32 %71, 4000, !dbg !8351
  br i1 %cmp87, label %if.then88, label %if.else, !dbg !8353

if.then88:                                        ; preds = %if.end84
  br label %for.cond89, !dbg !8354

for.cond89:                                       ; preds = %if.end117, %if.then88
  %72 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @removed_splay_allocno_vec, align 8, !dbg !8356
  %tobool90 = icmp ne %struct.VEC_ira_allocno_t_heap* %72, null, !dbg !8356
  br i1 %tobool90, label %cond.true91, label %cond.false93, !dbg !8356

cond.true91:                                      ; preds = %for.cond89
  %73 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @removed_splay_allocno_vec, align 8, !dbg !8356
  %base92 = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %73, i32 0, i32 0, !dbg !8356
  br label %cond.end94, !dbg !8356

cond.false93:                                     ; preds = %for.cond89
  br label %cond.end94, !dbg !8356

cond.end94:                                       ; preds = %cond.false93, %cond.true91
  %cond95 = phi %struct.VEC_ira_allocno_t_base* [ %base92, %cond.true91 ], [ null, %cond.false93 ], !dbg !8356
  %call96 = call i32 @VEC_ira_allocno_t_base_length(%struct.VEC_ira_allocno_t_base* %cond95), !dbg !8356
  %cmp97 = icmp ne i32 %call96, 0, !dbg !8359
  br i1 %cmp97, label %for.body98, label %for.end118, !dbg !8360

for.body98:                                       ; preds = %cond.end94
  %74 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @removed_splay_allocno_vec, align 8, !dbg !8361
  %tobool99 = icmp ne %struct.VEC_ira_allocno_t_heap* %74, null, !dbg !8361
  br i1 %tobool99, label %cond.true100, label %cond.false102, !dbg !8361

cond.true100:                                     ; preds = %for.body98
  %75 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @removed_splay_allocno_vec, align 8, !dbg !8361
  %base101 = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %75, i32 0, i32 0, !dbg !8361
  br label %cond.end103, !dbg !8361

cond.false102:                                    ; preds = %for.body98
  br label %cond.end103, !dbg !8361

cond.end103:                                      ; preds = %cond.false102, %cond.true100
  %cond104 = phi %struct.VEC_ira_allocno_t_base* [ %base101, %cond.true100 ], [ null, %cond.false102 ], !dbg !8361
  %call105 = call %struct.ira_allocno* @VEC_ira_allocno_t_base_pop(%struct.VEC_ira_allocno_t_base* %cond104), !dbg !8361
  store %struct.ira_allocno* %call105, %struct.ira_allocno** %allocno, align 8, !dbg !8363
  %76 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8364
  %splay_removed_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %76, i32 0, i32 31, !dbg !8364
  %bf.load = load i16, i16* %splay_removed_p, align 4, !dbg !8365
  %bf.clear = and i16 %bf.load, -1025, !dbg !8365
  store i16 %bf.clear, i16* %splay_removed_p, align 4, !dbg !8365
  %77 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8366
  %cover_class106 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %77, i32 0, i32 9, !dbg !8366
  %78 = load i32, i32* %cover_class106, align 8, !dbg !8366
  store i32 %78, i32* %rclass, align 4, !dbg !8367
  %79 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8368
  %left_conflicts_size = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %79, i32 0, i32 37, !dbg !8368
  %80 = load i32, i32* %left_conflicts_size, align 8, !dbg !8368
  %81 = load i32, i32* %rclass, align 4, !dbg !8370
  %idxprom107 = zext i32 %81 to i64, !dbg !8371
  %arrayidx108 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom107, !dbg !8371
  %82 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8372
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %82, i32 0, i32 2, !dbg !8372
  %83 = load i32, i32* %mode, align 8, !dbg !8372
  %idxprom109 = zext i32 %83 to i64, !dbg !8371
  %arrayidx110 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx108, i64 0, i64 %idxprom109, !dbg !8371
  %84 = load i32, i32* %arrayidx110, align 4, !dbg !8371
  %add111 = add nsw i32 %80, %84, !dbg !8373
  %85 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8374
  %available_regs_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %85, i32 0, i32 38, !dbg !8374
  %86 = load i32, i32* %available_regs_num, align 4, !dbg !8374
  %cmp112 = icmp sgt i32 %add111, %86, !dbg !8375
  br i1 %cmp112, label %if.then113, label %if.end117, !dbg !8376

if.then113:                                       ; preds = %cond.end103
  %87 = load i32, i32* %rclass, align 4, !dbg !8377
  %idxprom114 = zext i32 %87 to i64, !dbg !8378
  %arrayidx115 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom114, !dbg !8378
  %88 = load %struct.splay_tree_s*, %struct.splay_tree_s** %arrayidx115, align 8, !dbg !8378
  %89 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8379
  %90 = ptrtoint %struct.ira_allocno* %89 to i64, !dbg !8380
  %91 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8381
  %92 = ptrtoint %struct.ira_allocno* %91 to i64, !dbg !8382
  %call116 = call %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s* %88, i64 %90, i64 %92), !dbg !8383
  br label %if.end117, !dbg !8383

if.end117:                                        ; preds = %if.then113, %cond.end103
  br label %for.cond89, !dbg !8384, !llvm.loop !8385

for.end118:                                       ; preds = %cond.end94
  %93 = load i32, i32* %cover_class, align 4, !dbg !8387
  %idxprom119 = zext i32 %93 to i64, !dbg !8388
  %arrayidx120 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom119, !dbg !8388
  %94 = load %struct.splay_tree_s*, %struct.splay_tree_s** %arrayidx120, align 8, !dbg !8388
  %call121 = call %struct.splay_tree_node_s* @splay_tree_min(%struct.splay_tree_s* %94), !dbg !8389
  %key = getelementptr inbounds %struct.splay_tree_node_s, %struct.splay_tree_node_s* %call121, i32 0, i32 0, !dbg !8390
  %95 = load i64, i64* %key, align 8, !dbg !8390
  %96 = inttoptr i64 %95 to %struct.ira_allocno*, !dbg !8391
  store %struct.ira_allocno* %96, %struct.ira_allocno** %allocno, align 8, !dbg !8392
  %97 = load i32, i32* %cover_class, align 4, !dbg !8393
  %idxprom122 = zext i32 %97 to i64, !dbg !8394
  %arrayidx123 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom122, !dbg !8394
  %98 = load %struct.splay_tree_s*, %struct.splay_tree_s** %arrayidx123, align 8, !dbg !8394
  %99 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8395
  %100 = ptrtoint %struct.ira_allocno* %99 to i64, !dbg !8396
  call void @splay_tree_remove(%struct.splay_tree_s* %98, i64 %100), !dbg !8397
  br label %if.end220, !dbg !8398

if.else:                                          ; preds = %if.end84
  %101 = load i32, i32* %cover_class, align 4, !dbg !8399
  %idxprom124 = zext i32 %101 to i64, !dbg !8401
  %arrayidx125 = getelementptr inbounds [27 x i32], [27 x i32]* %cover_class_allocnos_num, i64 0, i64 %idxprom124, !dbg !8401
  %102 = load i32, i32* %arrayidx125, align 4, !dbg !8401
  store i32 %102, i32* %num, align 4, !dbg !8402
  %103 = load i32, i32* %cover_class, align 4, !dbg !8403
  %idxprom126 = zext i32 %103 to i64, !dbg !8404
  %arrayidx127 = getelementptr inbounds [27 x %struct.ira_allocno**], [27 x %struct.ira_allocno**]* %cover_class_allocnos, i64 0, i64 %idxprom126, !dbg !8404
  %104 = load %struct.ira_allocno**, %struct.ira_allocno*** %arrayidx127, align 8, !dbg !8404
  store %struct.ira_allocno** %104, %struct.ira_allocno*** %allocno_vec, align 8, !dbg !8405
  store %struct.ira_allocno* null, %struct.ira_allocno** %allocno, align 8, !dbg !8406
  store i32 0, i32* %allocno_cost, align 4, !dbg !8407
  store i32 0, i32* %allocno_pri, align 4, !dbg !8408
  store i32 0, i32* %i, align 4, !dbg !8409
  %105 = load i32, i32* %num, align 4, !dbg !8411
  %sub = sub nsw i32 %105, 1, !dbg !8412
  store i32 %sub, i32* %j, align 4, !dbg !8413
  br label %for.cond128, !dbg !8414

for.cond128:                                      ; preds = %if.end215, %if.else
  %106 = load i32, i32* %i, align 4, !dbg !8415
  %107 = load i32, i32* %j, align 4, !dbg !8417
  %cmp129 = icmp sle i32 %106, %107, !dbg !8418
  br i1 %cmp129, label %for.body130, label %for.end216, !dbg !8419

for.body130:                                      ; preds = %for.cond128
  %108 = load %struct.ira_allocno**, %struct.ira_allocno*** %allocno_vec, align 8, !dbg !8420
  %109 = load i32, i32* %i, align 4, !dbg !8422
  %idxprom131 = sext i32 %109 to i64, !dbg !8420
  %arrayidx132 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %108, i64 %idxprom131, !dbg !8420
  %110 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx132, align 8, !dbg !8420
  store %struct.ira_allocno* %110, %struct.ira_allocno** %i_allocno, align 8, !dbg !8423
  %111 = load %struct.ira_allocno*, %struct.ira_allocno** %i_allocno, align 8, !dbg !8424
  %in_graph_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %111, i32 0, i32 31, !dbg !8424
  %bf.load133 = load i16, i16* %in_graph_p, align 4, !dbg !8424
  %bf.lshr = lshr i16 %bf.load133, 7, !dbg !8424
  %bf.clear134 = and i16 %bf.lshr, 1, !dbg !8424
  %bf.cast = zext i16 %bf.clear134 to i32, !dbg !8424
  %tobool135 = icmp ne i32 %bf.cast, 0, !dbg !8424
  br i1 %tobool135, label %if.end153, label %land.lhs.true, !dbg !8426

land.lhs.true:                                    ; preds = %for.body130
  %112 = load %struct.ira_allocno**, %struct.ira_allocno*** %allocno_vec, align 8, !dbg !8427
  %113 = load i32, i32* %j, align 4, !dbg !8427
  %idxprom136 = sext i32 %113 to i64, !dbg !8427
  %arrayidx137 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %112, i64 %idxprom136, !dbg !8427
  %114 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx137, align 8, !dbg !8427
  %in_graph_p138 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %114, i32 0, i32 31, !dbg !8427
  %bf.load139 = load i16, i16* %in_graph_p138, align 4, !dbg !8427
  %bf.lshr140 = lshr i16 %bf.load139, 7, !dbg !8427
  %bf.clear141 = and i16 %bf.lshr140, 1, !dbg !8427
  %bf.cast142 = zext i16 %bf.clear141 to i32, !dbg !8427
  %tobool143 = icmp ne i32 %bf.cast142, 0, !dbg !8427
  br i1 %tobool143, label %if.then144, label %if.end153, !dbg !8428

if.then144:                                       ; preds = %land.lhs.true
  %115 = load %struct.ira_allocno**, %struct.ira_allocno*** %allocno_vec, align 8, !dbg !8429
  %116 = load i32, i32* %j, align 4, !dbg !8431
  %idxprom145 = sext i32 %116 to i64, !dbg !8429
  %arrayidx146 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %115, i64 %idxprom145, !dbg !8429
  %117 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx146, align 8, !dbg !8429
  store %struct.ira_allocno* %117, %struct.ira_allocno** %i_allocno, align 8, !dbg !8432
  %118 = load %struct.ira_allocno**, %struct.ira_allocno*** %allocno_vec, align 8, !dbg !8433
  %119 = load i32, i32* %i, align 4, !dbg !8434
  %idxprom147 = sext i32 %119 to i64, !dbg !8433
  %arrayidx148 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %118, i64 %idxprom147, !dbg !8433
  %120 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx148, align 8, !dbg !8433
  %121 = load %struct.ira_allocno**, %struct.ira_allocno*** %allocno_vec, align 8, !dbg !8435
  %122 = load i32, i32* %j, align 4, !dbg !8436
  %idxprom149 = sext i32 %122 to i64, !dbg !8435
  %arrayidx150 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %121, i64 %idxprom149, !dbg !8435
  store %struct.ira_allocno* %120, %struct.ira_allocno** %arrayidx150, align 8, !dbg !8437
  %123 = load %struct.ira_allocno*, %struct.ira_allocno** %i_allocno, align 8, !dbg !8438
  %124 = load %struct.ira_allocno**, %struct.ira_allocno*** %allocno_vec, align 8, !dbg !8439
  %125 = load i32, i32* %i, align 4, !dbg !8440
  %idxprom151 = sext i32 %125 to i64, !dbg !8439
  %arrayidx152 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %124, i64 %idxprom151, !dbg !8439
  store %struct.ira_allocno* %123, %struct.ira_allocno** %arrayidx152, align 8, !dbg !8441
  br label %if.end153, !dbg !8442

if.end153:                                        ; preds = %if.then144, %land.lhs.true, %for.body130
  %126 = load %struct.ira_allocno*, %struct.ira_allocno** %i_allocno, align 8, !dbg !8443
  %in_graph_p154 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %126, i32 0, i32 31, !dbg !8443
  %bf.load155 = load i16, i16* %in_graph_p154, align 4, !dbg !8443
  %bf.lshr156 = lshr i16 %bf.load155, 7, !dbg !8443
  %bf.clear157 = and i16 %bf.lshr156, 1, !dbg !8443
  %bf.cast158 = zext i16 %bf.clear157 to i32, !dbg !8443
  %tobool159 = icmp ne i32 %bf.cast158, 0, !dbg !8443
  br i1 %tobool159, label %if.then160, label %if.end205, !dbg !8445

if.then160:                                       ; preds = %if.end153
  %127 = load i32, i32* %i, align 4, !dbg !8446
  %inc161 = add nsw i32 %127, 1, !dbg !8446
  store i32 %inc161, i32* %i, align 4, !dbg !8446
  %128 = load %struct.ira_allocno*, %struct.ira_allocno** %i_allocno, align 8, !dbg !8448
  %temp162 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %128, i32 0, i32 41, !dbg !8448
  %129 = load i32, i32* %temp162, align 8, !dbg !8448
  store i32 %129, i32* %i_allocno_cost, align 4, !dbg !8449
  %130 = load %struct.ira_allocno*, %struct.ira_allocno** %i_allocno, align 8, !dbg !8450
  %call163 = call i32 @allocno_spill_priority(%struct.ira_allocno* %130), !dbg !8451
  store i32 %call163, i32* %i_allocno_pri, align 4, !dbg !8452
  %131 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8453
  %cmp164 = icmp eq %struct.ira_allocno* %131, null, !dbg !8455
  br i1 %cmp164, label %if.then203, label %lor.lhs.false, !dbg !8456

lor.lhs.false:                                    ; preds = %if.then160
  %132 = load %struct.ira_allocno*, %struct.ira_allocno** %i_allocno, align 8, !dbg !8457
  %bad_spill_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %132, i32 0, i32 31, !dbg !8457
  %bf.load165 = load i16, i16* %bad_spill_p, align 4, !dbg !8457
  %bf.lshr166 = lshr i16 %bf.load165, 6, !dbg !8457
  %bf.clear167 = and i16 %bf.lshr166, 1, !dbg !8457
  %bf.cast168 = zext i16 %bf.clear167 to i32, !dbg !8457
  %tobool169 = icmp ne i32 %bf.cast168, 0, !dbg !8457
  br i1 %tobool169, label %lor.lhs.false177, label %land.lhs.true170, !dbg !8458

land.lhs.true170:                                 ; preds = %lor.lhs.false
  %133 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8459
  %bad_spill_p171 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %133, i32 0, i32 31, !dbg !8459
  %bf.load172 = load i16, i16* %bad_spill_p171, align 4, !dbg !8459
  %bf.lshr173 = lshr i16 %bf.load172, 6, !dbg !8459
  %bf.clear174 = and i16 %bf.lshr173, 1, !dbg !8459
  %bf.cast175 = zext i16 %bf.clear174 to i32, !dbg !8459
  %tobool176 = icmp ne i32 %bf.cast175, 0, !dbg !8459
  br i1 %tobool176, label %if.then203, label %lor.lhs.false177, !dbg !8460

lor.lhs.false177:                                 ; preds = %land.lhs.true170, %lor.lhs.false
  %134 = load %struct.ira_allocno*, %struct.ira_allocno** %i_allocno, align 8, !dbg !8461
  %bad_spill_p178 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %134, i32 0, i32 31, !dbg !8461
  %bf.load179 = load i16, i16* %bad_spill_p178, align 4, !dbg !8461
  %bf.lshr180 = lshr i16 %bf.load179, 6, !dbg !8461
  %bf.clear181 = and i16 %bf.lshr180, 1, !dbg !8461
  %bf.cast182 = zext i16 %bf.clear181 to i32, !dbg !8461
  %tobool183 = icmp ne i32 %bf.cast182, 0, !dbg !8461
  br i1 %tobool183, label %land.lhs.true184, label %land.lhs.true191, !dbg !8462

land.lhs.true184:                                 ; preds = %lor.lhs.false177
  %135 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8463
  %bad_spill_p185 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %135, i32 0, i32 31, !dbg !8463
  %bf.load186 = load i16, i16* %bad_spill_p185, align 4, !dbg !8463
  %bf.lshr187 = lshr i16 %bf.load186, 6, !dbg !8463
  %bf.clear188 = and i16 %bf.lshr187, 1, !dbg !8463
  %bf.cast189 = zext i16 %bf.clear188 to i32, !dbg !8463
  %tobool190 = icmp ne i32 %bf.cast189, 0, !dbg !8463
  br i1 %tobool190, label %land.lhs.true191, label %if.end204, !dbg !8464

land.lhs.true191:                                 ; preds = %land.lhs.true184, %lor.lhs.false177
  %136 = load i32, i32* %allocno_pri, align 4, !dbg !8465
  %137 = load i32, i32* %i_allocno_pri, align 4, !dbg !8466
  %cmp192 = icmp sgt i32 %136, %137, !dbg !8467
  br i1 %cmp192, label %if.then203, label %lor.lhs.false193, !dbg !8468

lor.lhs.false193:                                 ; preds = %land.lhs.true191
  %138 = load i32, i32* %allocno_pri, align 4, !dbg !8469
  %139 = load i32, i32* %i_allocno_pri, align 4, !dbg !8470
  %cmp194 = icmp eq i32 %138, %139, !dbg !8471
  br i1 %cmp194, label %land.lhs.true195, label %if.end204, !dbg !8472

land.lhs.true195:                                 ; preds = %lor.lhs.false193
  %140 = load i32, i32* %allocno_cost, align 4, !dbg !8473
  %141 = load i32, i32* %i_allocno_cost, align 4, !dbg !8474
  %cmp196 = icmp sgt i32 %140, %141, !dbg !8475
  br i1 %cmp196, label %if.then203, label %lor.lhs.false197, !dbg !8476

lor.lhs.false197:                                 ; preds = %land.lhs.true195
  %142 = load i32, i32* %allocno_cost, align 4, !dbg !8477
  %143 = load i32, i32* %i_allocno_cost, align 4, !dbg !8478
  %cmp198 = icmp eq i32 %142, %143, !dbg !8479
  br i1 %cmp198, label %land.lhs.true199, label %if.end204, !dbg !8480

land.lhs.true199:                                 ; preds = %lor.lhs.false197
  %144 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8481
  %num200 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %144, i32 0, i32 0, !dbg !8481
  %145 = load i32, i32* %num200, align 8, !dbg !8481
  %146 = load %struct.ira_allocno*, %struct.ira_allocno** %i_allocno, align 8, !dbg !8482
  %num201 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %146, i32 0, i32 0, !dbg !8482
  %147 = load i32, i32* %num201, align 8, !dbg !8482
  %cmp202 = icmp sgt i32 %145, %147, !dbg !8483
  br i1 %cmp202, label %if.then203, label %if.end204, !dbg !8484

if.then203:                                       ; preds = %land.lhs.true199, %land.lhs.true195, %land.lhs.true191, %land.lhs.true170, %if.then160
  %148 = load %struct.ira_allocno*, %struct.ira_allocno** %i_allocno, align 8, !dbg !8485
  store %struct.ira_allocno* %148, %struct.ira_allocno** %allocno, align 8, !dbg !8487
  %149 = load i32, i32* %i_allocno_cost, align 4, !dbg !8488
  store i32 %149, i32* %allocno_cost, align 4, !dbg !8489
  %150 = load i32, i32* %i_allocno_pri, align 4, !dbg !8490
  store i32 %150, i32* %allocno_pri, align 4, !dbg !8491
  br label %if.end204, !dbg !8492

if.end204:                                        ; preds = %if.then203, %land.lhs.true199, %lor.lhs.false197, %lor.lhs.false193, %land.lhs.true184
  br label %if.end205, !dbg !8493

if.end205:                                        ; preds = %if.end204, %if.end153
  %151 = load %struct.ira_allocno**, %struct.ira_allocno*** %allocno_vec, align 8, !dbg !8494
  %152 = load i32, i32* %j, align 4, !dbg !8494
  %idxprom206 = sext i32 %152 to i64, !dbg !8494
  %arrayidx207 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %151, i64 %idxprom206, !dbg !8494
  %153 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx207, align 8, !dbg !8494
  %in_graph_p208 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %153, i32 0, i32 31, !dbg !8494
  %bf.load209 = load i16, i16* %in_graph_p208, align 4, !dbg !8494
  %bf.lshr210 = lshr i16 %bf.load209, 7, !dbg !8494
  %bf.clear211 = and i16 %bf.lshr210, 1, !dbg !8494
  %bf.cast212 = zext i16 %bf.clear211 to i32, !dbg !8494
  %tobool213 = icmp ne i32 %bf.cast212, 0, !dbg !8494
  br i1 %tobool213, label %if.end215, label %if.then214, !dbg !8496

if.then214:                                       ; preds = %if.end205
  %154 = load i32, i32* %j, align 4, !dbg !8497
  %dec = add nsw i32 %154, -1, !dbg !8497
  store i32 %dec, i32* %j, align 4, !dbg !8497
  br label %if.end215, !dbg !8498

if.end215:                                        ; preds = %if.then214, %if.end205
  br label %for.cond128, !dbg !8499, !llvm.loop !8500

for.end216:                                       ; preds = %for.cond128
  %155 = load i32, i32* %j, align 4, !dbg !8502
  %add217 = add nsw i32 %155, 1, !dbg !8503
  %156 = load i32, i32* %cover_class, align 4, !dbg !8504
  %idxprom218 = zext i32 %156 to i64, !dbg !8505
  %arrayidx219 = getelementptr inbounds [27 x i32], [27 x i32]* %cover_class_allocnos_num, i64 0, i64 %idxprom218, !dbg !8505
  store i32 %add217, i32* %arrayidx219, align 4, !dbg !8506
  br label %if.end220

if.end220:                                        ; preds = %for.end216, %for.end118
  %157 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8507
  call void @remove_allocno_from_bucket_and_push(%struct.ira_allocno* %157, i8 zeroext 0), !dbg !8508
  br label %for.cond77, !dbg !8509, !llvm.loop !8348

for.end221:                                       ; preds = %if.then79
  store i32 0, i32* %i, align 4, !dbg !8510
  br label %for.cond222, !dbg !8512

for.cond222:                                      ; preds = %for.inc234, %for.end221
  %158 = load i32, i32* %i, align 4, !dbg !8513
  %159 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !8515
  %cmp223 = icmp slt i32 %158, %159, !dbg !8516
  br i1 %cmp223, label %for.body224, label %for.end236, !dbg !8517

for.body224:                                      ; preds = %for.cond222
  %160 = load i32, i32* %i, align 4, !dbg !8518
  %idxprom225 = sext i32 %160 to i64, !dbg !8520
  %arrayidx226 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom225, !dbg !8520
  %161 = load i32, i32* %arrayidx226, align 4, !dbg !8520
  store i32 %161, i32* %cover_class, align 4, !dbg !8521
  %162 = load i32, i32* %cover_class, align 4, !dbg !8522
  %idxprom227 = zext i32 %162 to i64, !dbg !8524
  %arrayidx228 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom227, !dbg !8524
  %163 = load %struct.splay_tree_s*, %struct.splay_tree_s** %arrayidx228, align 8, !dbg !8524
  %cmp229 = icmp ne %struct.splay_tree_s* %163, null, !dbg !8525
  br i1 %cmp229, label %if.then230, label %if.end233, !dbg !8526

if.then230:                                       ; preds = %for.body224
  %164 = load i32, i32* %cover_class, align 4, !dbg !8527
  %idxprom231 = zext i32 %164 to i64, !dbg !8528
  %arrayidx232 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom231, !dbg !8528
  %165 = load %struct.splay_tree_s*, %struct.splay_tree_s** %arrayidx232, align 8, !dbg !8528
  call void @splay_tree_delete(%struct.splay_tree_s* %165), !dbg !8529
  br label %if.end233, !dbg !8529

if.end233:                                        ; preds = %if.then230, %for.body224
  br label %for.inc234, !dbg !8530

for.inc234:                                       ; preds = %if.end233
  %166 = load i32, i32* %i, align 4, !dbg !8531
  %inc235 = add nsw i32 %166, 1, !dbg !8531
  store i32 %inc235, i32* %i, align 4, !dbg !8531
  br label %for.cond222, !dbg !8532, !llvm.loop !8533

for.end236:                                       ; preds = %for.cond222
  ret void, !dbg !8535
}

; Function Attrs: noinline nounwind uwtable
define internal void @pop_allocnos_from_stack() #0 !dbg !8536 {
entry:
  %allocno = alloca %struct.ira_allocno*, align 8
  %cover_class = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno, metadata !8537, metadata !DIExpression()), !dbg !8538
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !8539, metadata !DIExpression()), !dbg !8540
  br label %for.cond, !dbg !8541

for.cond:                                         ; preds = %if.end45, %entry
  %0 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @allocno_stack_vec, align 8, !dbg !8542
  %tobool = icmp ne %struct.VEC_ira_allocno_t_heap* %0, null, !dbg !8542
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8542

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @allocno_stack_vec, align 8, !dbg !8542
  %base = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %1, i32 0, i32 0, !dbg !8542
  br label %cond.end, !dbg !8542

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8542

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ira_allocno_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8542
  %call = call i32 @VEC_ira_allocno_t_base_length(%struct.VEC_ira_allocno_t_base* %cond), !dbg !8542
  %cmp = icmp ne i32 %call, 0, !dbg !8545
  br i1 %cmp, label %for.body, label %for.end, !dbg !8546

for.body:                                         ; preds = %cond.end
  %2 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @allocno_stack_vec, align 8, !dbg !8547
  %tobool1 = icmp ne %struct.VEC_ira_allocno_t_heap* %2, null, !dbg !8547
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8547

cond.true2:                                       ; preds = %for.body
  %3 = load %struct.VEC_ira_allocno_t_heap*, %struct.VEC_ira_allocno_t_heap** @allocno_stack_vec, align 8, !dbg !8547
  %base3 = getelementptr inbounds %struct.VEC_ira_allocno_t_heap, %struct.VEC_ira_allocno_t_heap* %3, i32 0, i32 0, !dbg !8547
  br label %cond.end5, !dbg !8547

cond.false4:                                      ; preds = %for.body
  br label %cond.end5, !dbg !8547

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_ira_allocno_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !8547
  %call7 = call %struct.ira_allocno* @VEC_ira_allocno_t_base_pop(%struct.VEC_ira_allocno_t_base* %cond6), !dbg !8547
  store %struct.ira_allocno* %call7, %struct.ira_allocno** %allocno, align 8, !dbg !8549
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8550
  %cover_class8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 9, !dbg !8550
  %5 = load i32, i32* %cover_class8, align 8, !dbg !8550
  store i32 %5, i32* %cover_class, align 4, !dbg !8551
  %6 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !8552
  %cmp9 = icmp sgt i32 %6, 3, !dbg !8554
  br i1 %cmp9, label %land.lhs.true, label %if.end, !dbg !8555

land.lhs.true:                                    ; preds = %cond.end5
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8556
  %cmp10 = icmp ne %struct._IO_FILE* %7, null, !dbg !8557
  br i1 %cmp10, label %if.then, label %if.end, !dbg !8558

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8559
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.40, i64 0, i64 0)), !dbg !8561
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8562
  call void @print_coalesced_allocno(%struct.ira_allocno* %9), !dbg !8563
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8564
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i64 0, i64 0)), !dbg !8565
  br label %if.end, !dbg !8566

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end5
  %11 = load i32, i32* %cover_class, align 4, !dbg !8567
  %cmp13 = icmp eq i32 %11, 0, !dbg !8569
  br i1 %cmp13, label %if.then14, label %if.else, !dbg !8570

if.then14:                                        ; preds = %if.end
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8571
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 3, !dbg !8571
  store i32 -1, i32* %hard_regno, align 4, !dbg !8573
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8574
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 31, !dbg !8574
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !8575
  %bf.clear = and i16 %bf.load, -257, !dbg !8575
  %bf.set = or i16 %bf.clear, 256, !dbg !8575
  store i16 %bf.set, i16* %assigned_p, align 4, !dbg !8575
  %14 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !8576
  %cmp15 = icmp sgt i32 %14, 3, !dbg !8578
  br i1 %cmp15, label %land.lhs.true16, label %if.end20, !dbg !8579

land.lhs.true16:                                  ; preds = %if.then14
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8580
  %cmp17 = icmp ne %struct._IO_FILE* %15, null, !dbg !8581
  br i1 %cmp17, label %if.then18, label %if.end20, !dbg !8582

if.then18:                                        ; preds = %land.lhs.true16
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8583
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i64 0, i64 0)), !dbg !8584
  br label %if.end20, !dbg !8584

if.end20:                                         ; preds = %if.then18, %land.lhs.true16, %if.then14
  br label %if.end45, !dbg !8585

if.else:                                          ; preds = %if.end
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8586
  %call21 = call zeroext i8 @assign_hard_reg(%struct.ira_allocno* %17, i8 zeroext 0), !dbg !8588
  %tobool22 = icmp ne i8 %call21, 0, !dbg !8588
  br i1 %tobool22, label %if.then23, label %if.else31, !dbg !8589

if.then23:                                        ; preds = %if.else
  %18 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !8590
  %cmp24 = icmp sgt i32 %18, 3, !dbg !8593
  br i1 %cmp24, label %land.lhs.true25, label %if.end30, !dbg !8594

land.lhs.true25:                                  ; preds = %if.then23
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8595
  %cmp26 = icmp ne %struct._IO_FILE* %19, null, !dbg !8596
  br i1 %cmp26, label %if.then27, label %if.end30, !dbg !8597

if.then27:                                        ; preds = %land.lhs.true25
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8598
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8599
  %hard_regno28 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 3, !dbg !8599
  %22 = load i32, i32* %hard_regno28, align 4, !dbg !8599
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.41, i64 0, i64 0), i32 %22), !dbg !8600
  br label %if.end30, !dbg !8600

if.end30:                                         ; preds = %if.then27, %land.lhs.true25, %if.then23
  br label %if.end44, !dbg !8601

if.else31:                                        ; preds = %if.else
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8602
  %assigned_p32 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 31, !dbg !8602
  %bf.load33 = load i16, i16* %assigned_p32, align 4, !dbg !8602
  %bf.lshr = lshr i16 %bf.load33, 8, !dbg !8602
  %bf.clear34 = and i16 %bf.lshr, 1, !dbg !8602
  %bf.cast = zext i16 %bf.clear34 to i32, !dbg !8602
  %tobool35 = icmp ne i32 %bf.cast, 0, !dbg !8602
  br i1 %tobool35, label %if.then36, label %if.end43, !dbg !8604

if.then36:                                        ; preds = %if.else31
  %24 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !8605
  %cmp37 = icmp sgt i32 %24, 3, !dbg !8608
  br i1 %cmp37, label %land.lhs.true38, label %if.end42, !dbg !8609

land.lhs.true38:                                  ; preds = %if.then36
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8610
  %cmp39 = icmp ne %struct._IO_FILE* %25, null, !dbg !8611
  br i1 %cmp39, label %if.then40, label %if.end42, !dbg !8612

if.then40:                                        ; preds = %land.lhs.true38
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8613
  %call41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.42, i64 0, i64 0)), !dbg !8614
  br label %if.end42, !dbg !8614

if.end42:                                         ; preds = %if.then40, %land.lhs.true38, %if.then36
  br label %if.end43, !dbg !8615

if.end43:                                         ; preds = %if.end42, %if.else31
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.end30
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end20
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno, align 8, !dbg !8616
  %in_graph_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 31, !dbg !8616
  %bf.load46 = load i16, i16* %in_graph_p, align 4, !dbg !8617
  %bf.clear47 = and i16 %bf.load46, -129, !dbg !8617
  %bf.set48 = or i16 %bf.clear47, 128, !dbg !8617
  store i16 %bf.set48, i16* %in_graph_p, align 4, !dbg !8617
  br label %for.cond, !dbg !8618, !llvm.loop !8619

for.end:                                          ; preds = %cond.end
  ret void, !dbg !8621
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_allocno_left_conflicts_size(%struct.ira_allocno* %allocno) #0 !dbg !8622 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %i = alloca i32, align 4
  %hard_regs_num = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %conflict_allocnos_size = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %conflict_allocno = alloca %struct.ira_allocno*, align 8
  %cover_class = alloca i32, align 4
  %temp_set = alloca i64, align 8
  %aci = alloca %struct.ira_allocno_conflict_iterator, align 8
  %last = alloca i32, align 4
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !8623, metadata !DIExpression()), !dbg !8624
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8625, metadata !DIExpression()), !dbg !8626
  call void @llvm.dbg.declare(metadata i32* %hard_regs_num, metadata !8627, metadata !DIExpression()), !dbg !8628
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !8629, metadata !DIExpression()), !dbg !8630
  call void @llvm.dbg.declare(metadata i32* %conflict_allocnos_size, metadata !8631, metadata !DIExpression()), !dbg !8632
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !8633, metadata !DIExpression()), !dbg !8634
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %conflict_allocno, metadata !8635, metadata !DIExpression()), !dbg !8636
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !8637, metadata !DIExpression()), !dbg !8638
  call void @llvm.dbg.declare(metadata i64* %temp_set, metadata !8639, metadata !DIExpression()), !dbg !8640
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_conflict_iterator* %aci, metadata !8641, metadata !DIExpression()), !dbg !8642
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8643
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 9, !dbg !8643
  %1 = load i32, i32* %cover_class1, align 8, !dbg !8643
  store i32 %1, i32* %cover_class, align 4, !dbg !8644
  %2 = load i32, i32* %cover_class, align 4, !dbg !8645
  %idxprom = zext i32 %2 to i64, !dbg !8646
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom, !dbg !8646
  %3 = load i32, i32* %arrayidx, align 4, !dbg !8646
  store i32 %3, i32* %hard_regs_num, align 4, !dbg !8647
  store i64 0, i64* %temp_set, align 8, !dbg !8648
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8649
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 19, !dbg !8649
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !8649
  store %struct.ira_allocno* %5, %struct.ira_allocno** %a, align 8, !dbg !8651
  br label %for.cond, !dbg !8652

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8653
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 27, !dbg !8653
  %7 = load i64, i64* %total_conflict_hard_regs, align 8, !dbg !8653
  %8 = load i64, i64* %temp_set, align 8, !dbg !8653
  %or = or i64 %8, %7, !dbg !8653
  store i64 %or, i64* %temp_set, align 8, !dbg !8653
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8656
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8658
  %cmp = icmp eq %struct.ira_allocno* %9, %10, !dbg !8659
  br i1 %cmp, label %if.then, label %if.end, !dbg !8660

if.then:                                          ; preds = %for.cond
  br label %for.end, !dbg !8661

if.end:                                           ; preds = %for.cond
  br label %for.inc, !dbg !8662

for.inc:                                          ; preds = %if.end
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8663
  %next_coalesced_allocno2 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 19, !dbg !8663
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno2, align 8, !dbg !8663
  store %struct.ira_allocno* %12, %struct.ira_allocno** %a, align 8, !dbg !8664
  br label %for.cond, !dbg !8665, !llvm.loop !8666

for.end:                                          ; preds = %if.then
  %13 = load i32, i32* %cover_class, align 4, !dbg !8669
  %idxprom3 = zext i32 %13 to i64, !dbg !8669
  %arrayidx4 = getelementptr inbounds [27 x i64], [27 x i64]* @reg_class_contents, i64 0, i64 %idxprom3, !dbg !8669
  %14 = load i64, i64* %arrayidx4, align 8, !dbg !8669
  %15 = load i64, i64* %temp_set, align 8, !dbg !8669
  %and = and i64 %15, %14, !dbg !8669
  store i64 %and, i64* %temp_set, align 8, !dbg !8669
  %16 = load i64, i64* @ira_no_alloc_regs, align 8, !dbg !8670
  %neg = xor i64 %16, -1, !dbg !8670
  %17 = load i64, i64* %temp_set, align 8, !dbg !8670
  %and5 = and i64 %17, %neg, !dbg !8670
  store i64 %and5, i64* %temp_set, align 8, !dbg !8670
  store i32 0, i32* %conflict_allocnos_size, align 4, !dbg !8671
  %18 = load i64, i64* %temp_set, align 8, !dbg !8672
  %call = call zeroext i8 @hard_reg_set_empty_p(i64 %18), !dbg !8674
  %tobool = icmp ne i8 %call, 0, !dbg !8674
  br i1 %tobool, label %if.end28, label %if.then6, !dbg !8675

if.then6:                                         ; preds = %for.end
  store i32 0, i32* %i, align 4, !dbg !8676
  br label %for.cond7, !dbg !8678

for.cond7:                                        ; preds = %for.inc25, %if.then6
  %19 = load i32, i32* %i, align 4, !dbg !8679
  %20 = load i32, i32* %hard_regs_num, align 4, !dbg !8681
  %cmp8 = icmp slt i32 %19, %20, !dbg !8682
  br i1 %cmp8, label %for.body, label %for.end27, !dbg !8683

for.body:                                         ; preds = %for.cond7
  %21 = load i32, i32* %cover_class, align 4, !dbg !8684
  %idxprom9 = zext i32 %21 to i64, !dbg !8686
  %arrayidx10 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_regs, i64 0, i64 %idxprom9, !dbg !8686
  %22 = load i32, i32* %i, align 4, !dbg !8687
  %idxprom11 = sext i32 %22 to i64, !dbg !8686
  %arrayidx12 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx10, i64 0, i64 %idxprom11, !dbg !8686
  %23 = load i16, i16* %arrayidx12, align 2, !dbg !8686
  %conv = sext i16 %23 to i32, !dbg !8686
  store i32 %conv, i32* %hard_regno, align 4, !dbg !8688
  %24 = load i64, i64* %temp_set, align 8, !dbg !8689
  %25 = load i32, i32* %hard_regno, align 4, !dbg !8689
  %sh_prom = zext i32 %25 to i64, !dbg !8689
  %shl = shl i64 1, %sh_prom, !dbg !8689
  %and13 = and i64 %24, %shl, !dbg !8689
  %tobool14 = icmp ne i64 %and13, 0, !dbg !8689
  br i1 %tobool14, label %if.then15, label %if.end24, !dbg !8691

if.then15:                                        ; preds = %for.body
  %26 = load i32, i32* %conflict_allocnos_size, align 4, !dbg !8692
  %inc = add nsw i32 %26, 1, !dbg !8692
  store i32 %inc, i32* %conflict_allocnos_size, align 4, !dbg !8692
  %27 = load i32, i32* %hard_regno, align 4, !dbg !8694
  %sh_prom16 = zext i32 %27 to i64, !dbg !8694
  %shl17 = shl i64 1, %sh_prom16, !dbg !8694
  %neg18 = xor i64 %shl17, -1, !dbg !8694
  %28 = load i64, i64* %temp_set, align 8, !dbg !8694
  %and19 = and i64 %28, %neg18, !dbg !8694
  store i64 %and19, i64* %temp_set, align 8, !dbg !8694
  %29 = load i64, i64* %temp_set, align 8, !dbg !8695
  %call20 = call zeroext i8 @hard_reg_set_empty_p(i64 %29), !dbg !8697
  %tobool21 = icmp ne i8 %call20, 0, !dbg !8697
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !8698

if.then22:                                        ; preds = %if.then15
  br label %for.end27, !dbg !8699

if.end23:                                         ; preds = %if.then15
  br label %if.end24, !dbg !8700

if.end24:                                         ; preds = %if.end23, %for.body
  br label %for.inc25, !dbg !8701

for.inc25:                                        ; preds = %if.end24
  %30 = load i32, i32* %i, align 4, !dbg !8702
  %inc26 = add nsw i32 %30, 1, !dbg !8702
  store i32 %inc26, i32* %i, align 4, !dbg !8702
  br label %for.cond7, !dbg !8703, !llvm.loop !8704

for.end27:                                        ; preds = %if.then22, %for.cond7
  br label %if.end28, !dbg !8705

if.end28:                                         ; preds = %for.end27, %for.end
  store i64 0, i64* %temp_set, align 8, !dbg !8706
  %31 = load i8, i8* @allocno_coalesced_p, align 1, !dbg !8707
  %tobool29 = icmp ne i8 %31, 0, !dbg !8707
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !8709

if.then30:                                        ; preds = %if.end28
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !8710
  call void @bitmap_clear(%struct.bitmap_head_def* %32), !dbg !8711
  br label %if.end31, !dbg !8711

if.end31:                                         ; preds = %if.then30, %if.end28
  %33 = load i32, i32* %cover_class, align 4, !dbg !8712
  %cmp32 = icmp ne i32 %33, 0, !dbg !8714
  br i1 %cmp32, label %if.then34, label %if.end96, !dbg !8715

if.then34:                                        ; preds = %if.end31
  %34 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8716
  %next_coalesced_allocno35 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %34, i32 0, i32 19, !dbg !8716
  %35 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno35, align 8, !dbg !8716
  store %struct.ira_allocno* %35, %struct.ira_allocno** %a, align 8, !dbg !8718
  br label %for.cond36, !dbg !8719

for.cond36:                                       ; preds = %for.inc93, %if.then34
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8720
  call void @ira_allocno_conflict_iter_init(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno* %36), !dbg !8720
  br label %for.cond37, !dbg !8720

for.cond37:                                       ; preds = %for.inc87, %for.cond36
  %call38 = call zeroext i8 @ira_allocno_conflict_iter_cond(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno** %conflict_allocno), !dbg !8724
  %tobool39 = icmp ne i8 %call38, 0, !dbg !8720
  br i1 %tobool39, label %for.body40, label %for.end88, !dbg !8720

for.body40:                                       ; preds = %for.cond37
  %37 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !8726
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %37, i32 0, i32 18, !dbg !8726
  %38 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !8726
  store %struct.ira_allocno* %38, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !8728
  %39 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @consideration_allocno_bitmap, align 8, !dbg !8729
  %40 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !8731
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %40, i32 0, i32 0, !dbg !8731
  %41 = load i32, i32* %num, align 8, !dbg !8731
  %call41 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %39, i32 %41), !dbg !8732
  %tobool42 = icmp ne i32 %call41, 0, !dbg !8732
  br i1 %tobool42, label %if.then43, label %if.end86, !dbg !8733

if.then43:                                        ; preds = %for.body40
  %42 = load i8, i8* @allocno_coalesced_p, align 1, !dbg !8734
  %tobool44 = icmp ne i8 %42, 0, !dbg !8734
  br i1 %tobool44, label %if.then45, label %if.end53, !dbg !8737

if.then45:                                        ; preds = %if.then43
  %43 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !8738
  %44 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !8741
  %num46 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %44, i32 0, i32 0, !dbg !8741
  %45 = load i32, i32* %num46, align 8, !dbg !8741
  %call47 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %43, i32 %45), !dbg !8742
  %tobool48 = icmp ne i32 %call47, 0, !dbg !8742
  br i1 %tobool48, label %if.then49, label %if.end50, !dbg !8743

if.then49:                                        ; preds = %if.then45
  br label %for.inc87, !dbg !8744

if.end50:                                         ; preds = %if.then45
  %46 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !8745
  %47 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !8746
  %num51 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %47, i32 0, i32 0, !dbg !8746
  %48 = load i32, i32* %num51, align 8, !dbg !8746
  %call52 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %46, i32 %48), !dbg !8747
  br label %if.end53, !dbg !8748

if.end53:                                         ; preds = %if.end50, %if.then43
  %49 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !8749
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %49, i32 0, i32 31, !dbg !8749
  %bf.load = load i16, i16* %assigned_p, align 4, !dbg !8749
  %bf.lshr = lshr i16 %bf.load, 8, !dbg !8749
  %bf.clear = and i16 %bf.lshr, 1, !dbg !8749
  %bf.cast = zext i16 %bf.clear to i32, !dbg !8749
  %tobool54 = icmp ne i32 %bf.cast, 0, !dbg !8749
  br i1 %tobool54, label %if.else, label %if.then55, !dbg !8751

if.then55:                                        ; preds = %if.end53
  %50 = load i32, i32* %cover_class, align 4, !dbg !8752
  %idxprom56 = zext i32 %50 to i64, !dbg !8753
  %arrayidx57 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom56, !dbg !8753
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !8754
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %51, i32 0, i32 2, !dbg !8754
  %52 = load i32, i32* %mode, align 8, !dbg !8754
  %idxprom58 = zext i32 %52 to i64, !dbg !8753
  %arrayidx59 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx57, i64 0, i64 %idxprom58, !dbg !8753
  %53 = load i32, i32* %arrayidx59, align 4, !dbg !8753
  %54 = load i32, i32* %conflict_allocnos_size, align 4, !dbg !8755
  %add = add nsw i32 %54, %53, !dbg !8755
  store i32 %add, i32* %conflict_allocnos_size, align 4, !dbg !8755
  br label %if.end85, !dbg !8756

if.else:                                          ; preds = %if.end53
  %55 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !8757
  %hard_regno60 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %55, i32 0, i32 3, !dbg !8757
  %56 = load i32, i32* %hard_regno60, align 4, !dbg !8757
  store i32 %56, i32* %hard_regno, align 4, !dbg !8759
  %cmp61 = icmp sge i32 %56, 0, !dbg !8760
  br i1 %cmp61, label %if.then63, label %if.end84, !dbg !8761

if.then63:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %last, metadata !8762, metadata !DIExpression()), !dbg !8764
  %57 = load i32, i32* %hard_regno, align 4, !dbg !8765
  %58 = load i32, i32* %hard_regno, align 4, !dbg !8766
  %idxprom64 = sext i32 %58 to i64, !dbg !8767
  %arrayidx65 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom64, !dbg !8767
  %59 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !8768
  %mode66 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %59, i32 0, i32 2, !dbg !8768
  %60 = load i32, i32* %mode66, align 8, !dbg !8768
  %idxprom67 = zext i32 %60 to i64, !dbg !8767
  %arrayidx68 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx65, i64 0, i64 %idxprom67, !dbg !8767
  %61 = load i8, i8* %arrayidx68, align 1, !dbg !8767
  %conv69 = zext i8 %61 to i32, !dbg !8767
  %add70 = add nsw i32 %57, %conv69, !dbg !8769
  store i32 %add70, i32* %last, align 4, !dbg !8764
  br label %while.cond, !dbg !8770

while.cond:                                       ; preds = %if.end82, %if.then63
  %62 = load i32, i32* %hard_regno, align 4, !dbg !8771
  %63 = load i32, i32* %last, align 4, !dbg !8772
  %cmp71 = icmp slt i32 %62, %63, !dbg !8773
  br i1 %cmp71, label %while.body, label %while.end, !dbg !8770

while.body:                                       ; preds = %while.cond
  %64 = load i64, i64* %temp_set, align 8, !dbg !8774
  %65 = load i32, i32* %hard_regno, align 4, !dbg !8774
  %sh_prom73 = zext i32 %65 to i64, !dbg !8774
  %shl74 = shl i64 1, %sh_prom73, !dbg !8774
  %and75 = and i64 %64, %shl74, !dbg !8774
  %tobool76 = icmp ne i64 %and75, 0, !dbg !8774
  br i1 %tobool76, label %if.end82, label %if.then77, !dbg !8777

if.then77:                                        ; preds = %while.body
  %66 = load i32, i32* %conflict_allocnos_size, align 4, !dbg !8778
  %inc78 = add nsw i32 %66, 1, !dbg !8778
  store i32 %inc78, i32* %conflict_allocnos_size, align 4, !dbg !8778
  %67 = load i32, i32* %hard_regno, align 4, !dbg !8780
  %sh_prom79 = zext i32 %67 to i64, !dbg !8780
  %shl80 = shl i64 1, %sh_prom79, !dbg !8780
  %68 = load i64, i64* %temp_set, align 8, !dbg !8780
  %or81 = or i64 %68, %shl80, !dbg !8780
  store i64 %or81, i64* %temp_set, align 8, !dbg !8780
  br label %if.end82, !dbg !8781

if.end82:                                         ; preds = %if.then77, %while.body
  %69 = load i32, i32* %hard_regno, align 4, !dbg !8782
  %inc83 = add nsw i32 %69, 1, !dbg !8782
  store i32 %inc83, i32* %hard_regno, align 4, !dbg !8782
  br label %while.cond, !dbg !8770, !llvm.loop !8783

while.end:                                        ; preds = %while.cond
  br label %if.end84, !dbg !8785

if.end84:                                         ; preds = %while.end, %if.else
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.then55
  br label %if.end86, !dbg !8786

if.end86:                                         ; preds = %if.end85, %for.body40
  br label %for.inc87, !dbg !8787

for.inc87:                                        ; preds = %if.end86, %if.then49
  call void @ira_allocno_conflict_iter_next(%struct.ira_allocno_conflict_iterator* %aci), !dbg !8724
  br label %for.cond37, !dbg !8724, !llvm.loop !8788

for.end88:                                        ; preds = %for.cond37
  %70 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8790
  %71 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8792
  %cmp89 = icmp eq %struct.ira_allocno* %70, %71, !dbg !8793
  br i1 %cmp89, label %if.then91, label %if.end92, !dbg !8794

if.then91:                                        ; preds = %for.end88
  br label %for.end95, !dbg !8795

if.end92:                                         ; preds = %for.end88
  br label %for.inc93, !dbg !8796

for.inc93:                                        ; preds = %if.end92
  %72 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8797
  %next_coalesced_allocno94 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %72, i32 0, i32 19, !dbg !8797
  %73 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno94, align 8, !dbg !8797
  store %struct.ira_allocno* %73, %struct.ira_allocno** %a, align 8, !dbg !8798
  br label %for.cond36, !dbg !8799, !llvm.loop !8800

for.end95:                                        ; preds = %if.then91
  br label %if.end96, !dbg !8802

if.end96:                                         ; preds = %for.end95, %if.end31
  %74 = load i32, i32* %conflict_allocnos_size, align 4, !dbg !8803
  %75 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8804
  %left_conflicts_size = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %75, i32 0, i32 37, !dbg !8804
  store i32 %74, i32* %left_conflicts_size, align 8, !dbg !8805
  ret void, !dbg !8806
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_allocno_available_regs_num(%struct.ira_allocno* %allocno) #0 !dbg !8807 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %hard_regs_num = alloca i32, align 4
  %hard_regno = alloca i32, align 4
  %mode = alloca i32, align 4
  %cover_class = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %temp_set = alloca i64, align 8
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !8808, metadata !DIExpression()), !dbg !8809
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8810, metadata !DIExpression()), !dbg !8811
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8812, metadata !DIExpression()), !dbg !8813
  call void @llvm.dbg.declare(metadata i32* %hard_regs_num, metadata !8814, metadata !DIExpression()), !dbg !8815
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !8816, metadata !DIExpression()), !dbg !8817
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !8818, metadata !DIExpression()), !dbg !8819
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !8820, metadata !DIExpression()), !dbg !8821
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !8822, metadata !DIExpression()), !dbg !8823
  call void @llvm.dbg.declare(metadata i64* %temp_set, metadata !8824, metadata !DIExpression()), !dbg !8825
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8826
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 9, !dbg !8826
  %1 = load i32, i32* %cover_class1, align 8, !dbg !8826
  store i32 %1, i32* %cover_class, align 4, !dbg !8827
  %2 = load i32, i32* %cover_class, align 4, !dbg !8828
  %idxprom = zext i32 %2 to i64, !dbg !8829
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_available_class_regs, i64 0, i64 %idxprom, !dbg !8829
  %3 = load i32, i32* %arrayidx, align 4, !dbg !8829
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8830
  %available_regs_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 38, !dbg !8830
  store i32 %3, i32* %available_regs_num, align 4, !dbg !8831
  %5 = load i32, i32* %cover_class, align 4, !dbg !8832
  %cmp = icmp eq i32 %5, 0, !dbg !8834
  br i1 %cmp, label %if.then, label %if.end, !dbg !8835

if.then:                                          ; preds = %entry
  br label %return, !dbg !8836

if.end:                                           ; preds = %entry
  store i64 0, i64* %temp_set, align 8, !dbg !8837
  %6 = load i32, i32* %cover_class, align 4, !dbg !8838
  %idxprom2 = zext i32 %6 to i64, !dbg !8839
  %arrayidx3 = getelementptr inbounds [27 x i32], [27 x i32]* @ira_class_hard_regs_num, i64 0, i64 %idxprom2, !dbg !8839
  %7 = load i32, i32* %arrayidx3, align 4, !dbg !8839
  store i32 %7, i32* %hard_regs_num, align 4, !dbg !8840
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8841
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 19, !dbg !8841
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !8841
  store %struct.ira_allocno* %9, %struct.ira_allocno** %a, align 8, !dbg !8843
  br label %for.cond, !dbg !8844

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8845
  %total_conflict_hard_regs = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 27, !dbg !8845
  %11 = load i64, i64* %total_conflict_hard_regs, align 8, !dbg !8845
  %12 = load i64, i64* %temp_set, align 8, !dbg !8845
  %or = or i64 %12, %11, !dbg !8845
  store i64 %or, i64* %temp_set, align 8, !dbg !8845
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8848
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8850
  %cmp4 = icmp eq %struct.ira_allocno* %13, %14, !dbg !8851
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !8852

if.then5:                                         ; preds = %for.cond
  br label %for.end, !dbg !8853

if.end6:                                          ; preds = %for.cond
  br label %for.inc, !dbg !8854

for.inc:                                          ; preds = %if.end6
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !8855
  %next_coalesced_allocno7 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %15, i32 0, i32 19, !dbg !8855
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno7, align 8, !dbg !8855
  store %struct.ira_allocno* %16, %struct.ira_allocno** %a, align 8, !dbg !8856
  br label %for.cond, !dbg !8857, !llvm.loop !8858

for.end:                                          ; preds = %if.then5
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8861
  %mode8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 2, !dbg !8861
  %18 = load i32, i32* %mode8, align 8, !dbg !8861
  store i32 %18, i32* %mode, align 4, !dbg !8862
  store i32 0, i32* %n, align 4, !dbg !8863
  %19 = load i32, i32* %hard_regs_num, align 4, !dbg !8865
  %sub = sub nsw i32 %19, 1, !dbg !8866
  store i32 %sub, i32* %i, align 4, !dbg !8867
  br label %for.cond9, !dbg !8868

for.cond9:                                        ; preds = %for.inc25, %for.end
  %20 = load i32, i32* %i, align 4, !dbg !8869
  %cmp10 = icmp sge i32 %20, 0, !dbg !8871
  br i1 %cmp10, label %for.body, label %for.end26, !dbg !8872

for.body:                                         ; preds = %for.cond9
  %21 = load i32, i32* %cover_class, align 4, !dbg !8873
  %idxprom11 = zext i32 %21 to i64, !dbg !8875
  %arrayidx12 = getelementptr inbounds [27 x [53 x i16]], [27 x [53 x i16]]* @ira_class_hard_regs, i64 0, i64 %idxprom11, !dbg !8875
  %22 = load i32, i32* %i, align 4, !dbg !8876
  %idxprom13 = sext i32 %22 to i64, !dbg !8875
  %arrayidx14 = getelementptr inbounds [53 x i16], [53 x i16]* %arrayidx12, i64 0, i64 %idxprom13, !dbg !8875
  %23 = load i16, i16* %arrayidx14, align 2, !dbg !8875
  %conv = sext i16 %23 to i32, !dbg !8875
  store i32 %conv, i32* %hard_regno, align 4, !dbg !8877
  %24 = load i64, i64* %temp_set, align 8, !dbg !8878
  %25 = load i32, i32* %hard_regno, align 4, !dbg !8878
  %sh_prom = zext i32 %25 to i64, !dbg !8878
  %shl = shl i64 1, %sh_prom, !dbg !8878
  %and = and i64 %24, %shl, !dbg !8878
  %tobool = icmp ne i64 %and, 0, !dbg !8878
  br i1 %tobool, label %if.then23, label %lor.lhs.false, !dbg !8880

lor.lhs.false:                                    ; preds = %for.body
  %26 = load i32, i32* %cover_class, align 4, !dbg !8881
  %idxprom15 = zext i32 %26 to i64, !dbg !8881
  %arrayidx16 = getelementptr inbounds [27 x [87 x i64]], [27 x [87 x i64]]* @prohibited_class_mode_regs, i64 0, i64 %idxprom15, !dbg !8881
  %27 = load i32, i32* %mode, align 4, !dbg !8881
  %idxprom17 = zext i32 %27 to i64, !dbg !8881
  %arrayidx18 = getelementptr inbounds [87 x i64], [87 x i64]* %arrayidx16, i64 0, i64 %idxprom17, !dbg !8881
  %28 = load i64, i64* %arrayidx18, align 8, !dbg !8881
  %29 = load i32, i32* %hard_regno, align 4, !dbg !8881
  %sh_prom19 = zext i32 %29 to i64, !dbg !8881
  %shl20 = shl i64 1, %sh_prom19, !dbg !8881
  %and21 = and i64 %28, %shl20, !dbg !8881
  %tobool22 = icmp ne i64 %and21, 0, !dbg !8881
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !8882

if.then23:                                        ; preds = %lor.lhs.false, %for.body
  %30 = load i32, i32* %n, align 4, !dbg !8883
  %inc = add nsw i32 %30, 1, !dbg !8883
  store i32 %inc, i32* %n, align 4, !dbg !8883
  br label %if.end24, !dbg !8884

if.end24:                                         ; preds = %if.then23, %lor.lhs.false
  br label %for.inc25, !dbg !8885

for.inc25:                                        ; preds = %if.end24
  %31 = load i32, i32* %i, align 4, !dbg !8886
  %dec = add nsw i32 %31, -1, !dbg !8886
  store i32 %dec, i32* %i, align 4, !dbg !8886
  br label %for.cond9, !dbg !8887, !llvm.loop !8888

for.end26:                                        ; preds = %for.cond9
  %32 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !8890
  %cmp27 = icmp sgt i32 %32, 2, !dbg !8892
  br i1 %cmp27, label %land.lhs.true, label %if.end37, !dbg !8893

land.lhs.true:                                    ; preds = %for.end26
  %33 = load i32, i32* %n, align 4, !dbg !8894
  %cmp29 = icmp sgt i32 %33, 0, !dbg !8895
  br i1 %cmp29, label %land.lhs.true31, label %if.end37, !dbg !8896

land.lhs.true31:                                  ; preds = %land.lhs.true
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8897
  %cmp32 = icmp ne %struct._IO_FILE* %34, null, !dbg !8898
  br i1 %cmp32, label %if.then34, label %if.end37, !dbg !8899

if.then34:                                        ; preds = %land.lhs.true31
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !8900
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8901
  %regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %36, i32 0, i32 1, !dbg !8901
  %37 = load i32, i32* %regno, align 4, !dbg !8901
  %38 = load i32, i32* %cover_class, align 4, !dbg !8902
  %idxprom35 = zext i32 %38 to i64, !dbg !8903
  %arrayidx36 = getelementptr inbounds [0 x i8*], [0 x i8*]* @reg_class_names, i64 0, i64 %idxprom35, !dbg !8903
  %39 = load i8*, i8** %arrayidx36, align 8, !dbg !8903
  %40 = load i32, i32* %n, align 4, !dbg !8904
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.34, i64 0, i64 0), i32 %37, i8* %39, i32 %40), !dbg !8905
  br label %if.end37, !dbg !8905

if.end37:                                         ; preds = %if.then34, %land.lhs.true31, %land.lhs.true, %for.end26
  %41 = load i32, i32* %n, align 4, !dbg !8906
  %42 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8907
  %available_regs_num38 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %42, i32 0, i32 38, !dbg !8907
  %43 = load i32, i32* %available_regs_num38, align 4, !dbg !8908
  %sub39 = sub nsw i32 %43, %41, !dbg !8908
  store i32 %sub39, i32* %available_regs_num38, align 4, !dbg !8908
  br label %return, !dbg !8909

return:                                           ; preds = %if.end37, %if.then
  ret void, !dbg !8909
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_allocno_to_bucket(%struct.ira_allocno* %allocno, %struct.ira_allocno** %bucket_ptr) #0 !dbg !8910 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %bucket_ptr.addr = alloca %struct.ira_allocno**, align 8
  %first_allocno = alloca %struct.ira_allocno*, align 8
  %cover_class = alloca i32, align 4
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !8913, metadata !DIExpression()), !dbg !8914
  store %struct.ira_allocno** %bucket_ptr, %struct.ira_allocno*** %bucket_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %bucket_ptr.addr, metadata !8915, metadata !DIExpression()), !dbg !8916
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %first_allocno, metadata !8917, metadata !DIExpression()), !dbg !8918
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !8919, metadata !DIExpression()), !dbg !8920
  %0 = load %struct.ira_allocno**, %struct.ira_allocno*** %bucket_ptr.addr, align 8, !dbg !8921
  %cmp = icmp eq %struct.ira_allocno** %0, @uncolorable_allocno_bucket, !dbg !8923
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8924

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8925
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 9, !dbg !8925
  %2 = load i32, i32* %cover_class1, align 8, !dbg !8925
  store i32 %2, i32* %cover_class, align 4, !dbg !8926
  %cmp2 = icmp ne i32 %2, 0, !dbg !8927
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8928

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32, i32* %cover_class, align 4, !dbg !8929
  %idxprom = zext i32 %3 to i64, !dbg !8931
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @uncolorable_allocnos_num, i64 0, i64 %idxprom, !dbg !8931
  %4 = load i32, i32* %arrayidx, align 4, !dbg !8932
  %inc = add nsw i32 %4, 1, !dbg !8932
  store i32 %inc, i32* %arrayidx, align 4, !dbg !8932
  br label %if.end, !dbg !8933

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** %bucket_ptr.addr, align 8, !dbg !8934
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %5, align 8, !dbg !8935
  store %struct.ira_allocno* %6, %struct.ira_allocno** %first_allocno, align 8, !dbg !8936
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %first_allocno, align 8, !dbg !8937
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8938
  %next_bucket_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 39, !dbg !8938
  store %struct.ira_allocno* %7, %struct.ira_allocno** %next_bucket_allocno, align 8, !dbg !8939
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8940
  %prev_bucket_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 40, !dbg !8940
  store %struct.ira_allocno* null, %struct.ira_allocno** %prev_bucket_allocno, align 8, !dbg !8941
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %first_allocno, align 8, !dbg !8942
  %cmp3 = icmp ne %struct.ira_allocno* %10, null, !dbg !8944
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !8945

if.then4:                                         ; preds = %if.end
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8946
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %first_allocno, align 8, !dbg !8947
  %prev_bucket_allocno5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %12, i32 0, i32 40, !dbg !8947
  store %struct.ira_allocno* %11, %struct.ira_allocno** %prev_bucket_allocno5, align 8, !dbg !8948
  br label %if.end6, !dbg !8947

if.end6:                                          ; preds = %if.then4, %if.end
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !8949
  %14 = load %struct.ira_allocno**, %struct.ira_allocno*** %bucket_ptr.addr, align 8, !dbg !8950
  store %struct.ira_allocno* %13, %struct.ira_allocno** %14, align 8, !dbg !8951
  ret void, !dbg !8952
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @hard_reg_set_empty_p(i64 %x) #0 !dbg !8953 {
entry:
  %x.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !8956, metadata !DIExpression()), !dbg !8957
  %0 = load i64, i64* %x.addr, align 8, !dbg !8958
  %cmp = icmp eq i64 %0, 0, !dbg !8959
  %conv = zext i1 %cmp to i32, !dbg !8959
  %conv1 = trunc i32 %conv to i8, !dbg !8958
  ret i8 %conv1, !dbg !8960
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ira_allocno_t_base_truncate(%struct.VEC_ira_allocno_t_base* %vec_, i32 %size_) #0 !dbg !8961 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_base*, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_ira_allocno_t_base* %vec_, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_base** %vec_.addr, metadata !8964, metadata !DIExpression()), !dbg !8965
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !8966, metadata !DIExpression()), !dbg !8965
  %0 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !8965
  %tobool = icmp ne %struct.VEC_ira_allocno_t_base* %0, null, !dbg !8965
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8965

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !8965
  %num = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %1, i32 0, i32 0, !dbg !8965
  %2 = load i32, i32* %num, align 8, !dbg !8965
  %3 = load i32, i32* %size_.addr, align 4, !dbg !8965
  %cmp = icmp uge i32 %2, %3, !dbg !8965
  %conv = zext i1 %cmp to i32, !dbg !8965
  br label %cond.end, !dbg !8965

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %size_.addr, align 4, !dbg !8965
  %tobool1 = icmp ne i32 %4, 0, !dbg !8965
  %lnot = xor i1 %tobool1, true, !dbg !8965
  %lnot.ext = zext i1 %lnot to i32, !dbg !8965
  br label %cond.end, !dbg !8965

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !8965
  %5 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !8967
  %tobool2 = icmp ne %struct.VEC_ira_allocno_t_base* %5, null, !dbg !8967
  br i1 %tobool2, label %if.then, label %if.end, !dbg !8965

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* %size_.addr, align 4, !dbg !8967
  %7 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !8967
  %num3 = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %7, i32 0, i32 0, !dbg !8967
  store i32 %6, i32* %num3, align 8, !dbg !8967
  br label %if.end, !dbg !8967

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !8965
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @calculate_allocno_spill_cost(%struct.ira_allocno* %a) #0 !dbg !8969 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.ira_allocno*, align 8
  %regno = alloca i32, align 4
  %cost = alloca i32, align 4
  %mode = alloca i32, align 4
  %rclass = alloca i32, align 4
  %parent_allocno = alloca %struct.ira_allocno*, align 8
  %parent_node = alloca %struct.ira_loop_tree_node*, align 8
  %loop_node = alloca %struct.ira_loop_tree_node*, align 8
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !8972, metadata !DIExpression()), !dbg !8973
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !8974, metadata !DIExpression()), !dbg !8975
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !8976, metadata !DIExpression()), !dbg !8977
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !8978, metadata !DIExpression()), !dbg !8979
  call void @llvm.dbg.declare(metadata i32* %rclass, metadata !8980, metadata !DIExpression()), !dbg !8981
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %parent_allocno, metadata !8982, metadata !DIExpression()), !dbg !8983
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %parent_node, metadata !8984, metadata !DIExpression()), !dbg !8985
  call void @llvm.dbg.declare(metadata %struct.ira_loop_tree_node** %loop_node, metadata !8986, metadata !DIExpression()), !dbg !8987
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8988
  %regno1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 1, !dbg !8988
  %1 = load i32, i32* %regno1, align 4, !dbg !8988
  store i32 %1, i32* %regno, align 4, !dbg !8989
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8990
  %updated_memory_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 13, !dbg !8990
  %3 = load i32, i32* %updated_memory_cost, align 8, !dbg !8990
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8991
  %updated_cover_class_cost = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 11, !dbg !8991
  %5 = load i32, i32* %updated_cover_class_cost, align 8, !dbg !8991
  %sub = sub nsw i32 %3, %5, !dbg !8992
  store i32 %sub, i32* %cost, align 4, !dbg !8993
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !8994
  %cap = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 16, !dbg !8994
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %cap, align 8, !dbg !8994
  %cmp = icmp ne %struct.ira_allocno* %7, null, !dbg !8996
  br i1 %cmp, label %if.then, label %if.end, !dbg !8997

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %cost, align 4, !dbg !8998
  store i32 %8, i32* %retval, align 4, !dbg !8999
  br label %return, !dbg !8999

if.end:                                           ; preds = %entry
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !9000
  %loop_tree_node = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %9, i32 0, i32 6, !dbg !9000
  %10 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_tree_node, align 8, !dbg !9000
  store %struct.ira_loop_tree_node* %10, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !9001
  %11 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !9002
  %parent = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %11, i32 0, i32 6, !dbg !9004
  %12 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent, align 8, !dbg !9004
  store %struct.ira_loop_tree_node* %12, %struct.ira_loop_tree_node** %parent_node, align 8, !dbg !9005
  %cmp2 = icmp eq %struct.ira_loop_tree_node* %12, null, !dbg !9006
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !9007

if.then3:                                         ; preds = %if.end
  %13 = load i32, i32* %cost, align 4, !dbg !9008
  store i32 %13, i32* %retval, align 4, !dbg !9009
  br label %return, !dbg !9009

if.end4:                                          ; preds = %if.end
  %14 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %parent_node, align 8, !dbg !9010
  %regno_allocno_map = getelementptr inbounds %struct.ira_loop_tree_node, %struct.ira_loop_tree_node* %14, i32 0, i32 9, !dbg !9012
  %15 = load %struct.ira_allocno**, %struct.ira_allocno*** %regno_allocno_map, align 8, !dbg !9012
  %16 = load i32, i32* %regno, align 4, !dbg !9013
  %idxprom = sext i32 %16 to i64, !dbg !9010
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %15, i64 %idxprom, !dbg !9010
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !9010
  store %struct.ira_allocno* %17, %struct.ira_allocno** %parent_allocno, align 8, !dbg !9014
  %cmp5 = icmp eq %struct.ira_allocno* %17, null, !dbg !9015
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !9016

if.then6:                                         ; preds = %if.end4
  %18 = load i32, i32* %cost, align 4, !dbg !9017
  store i32 %18, i32* %retval, align 4, !dbg !9018
  br label %return, !dbg !9018

if.end7:                                          ; preds = %if.end4
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !9019
  %mode8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 2, !dbg !9019
  %20 = load i32, i32* %mode8, align 8, !dbg !9019
  store i32 %20, i32* %mode, align 4, !dbg !9020
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !9021
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 9, !dbg !9021
  %22 = load i32, i32* %cover_class, align 8, !dbg !9021
  store i32 %22, i32* %rclass, align 4, !dbg !9022
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %parent_allocno, align 8, !dbg !9023
  %hard_regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %23, i32 0, i32 3, !dbg !9023
  %24 = load i32, i32* %hard_regno, align 4, !dbg !9023
  %cmp9 = icmp slt i32 %24, 0, !dbg !9025
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !9026

if.then10:                                        ; preds = %if.end7
  %25 = load i32, i32* %mode, align 4, !dbg !9027
  %idxprom11 = zext i32 %25 to i64, !dbg !9028
  %arrayidx12 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom11, !dbg !9028
  %26 = load i32, i32* %rclass, align 4, !dbg !9029
  %idxprom13 = zext i32 %26 to i64, !dbg !9028
  %arrayidx14 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx12, i64 0, i64 %idxprom13, !dbg !9028
  %arrayidx15 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx14, i64 0, i64 0, !dbg !9028
  %27 = load i16, i16* %arrayidx15, align 4, !dbg !9028
  %conv = sext i16 %27 to i32, !dbg !9028
  %28 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !9030
  %29 = load i32, i32* %regno, align 4, !dbg !9031
  %call = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %28, i32 %29, i8 zeroext 1), !dbg !9032
  %mul = mul nsw i32 %conv, %call, !dbg !9033
  %30 = load i32, i32* %mode, align 4, !dbg !9034
  %idxprom16 = zext i32 %30 to i64, !dbg !9035
  %arrayidx17 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom16, !dbg !9035
  %31 = load i32, i32* %rclass, align 4, !dbg !9036
  %idxprom18 = zext i32 %31 to i64, !dbg !9035
  %arrayidx19 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx17, i64 0, i64 %idxprom18, !dbg !9035
  %arrayidx20 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx19, i64 0, i64 1, !dbg !9035
  %32 = load i16, i16* %arrayidx20, align 2, !dbg !9035
  %conv21 = sext i16 %32 to i32, !dbg !9035
  %33 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !9037
  %34 = load i32, i32* %regno, align 4, !dbg !9038
  %call22 = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %33, i32 %34, i8 zeroext 0), !dbg !9039
  %mul23 = mul nsw i32 %conv21, %call22, !dbg !9040
  %add = add nsw i32 %mul, %mul23, !dbg !9041
  %35 = load i32, i32* %cost, align 4, !dbg !9042
  %sub24 = sub nsw i32 %35, %add, !dbg !9042
  store i32 %sub24, i32* %cost, align 4, !dbg !9042
  br label %if.end49, !dbg !9043

if.else:                                          ; preds = %if.end7
  %36 = load i32, i32* %mode, align 4, !dbg !9044
  %idxprom25 = zext i32 %36 to i64, !dbg !9045
  %arrayidx26 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom25, !dbg !9045
  %37 = load i32, i32* %rclass, align 4, !dbg !9046
  %idxprom27 = zext i32 %37 to i64, !dbg !9045
  %arrayidx28 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx26, i64 0, i64 %idxprom27, !dbg !9045
  %arrayidx29 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx28, i64 0, i64 1, !dbg !9045
  %38 = load i16, i16* %arrayidx29, align 2, !dbg !9045
  %conv30 = sext i16 %38 to i32, !dbg !9045
  %39 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !9047
  %40 = load i32, i32* %regno, align 4, !dbg !9048
  %call31 = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %39, i32 %40, i8 zeroext 1), !dbg !9049
  %mul32 = mul nsw i32 %conv30, %call31, !dbg !9050
  %41 = load i32, i32* %mode, align 4, !dbg !9051
  %idxprom33 = zext i32 %41 to i64, !dbg !9052
  %arrayidx34 = getelementptr inbounds [87 x [27 x [2 x i16]]], [87 x [27 x [2 x i16]]]* @ira_memory_move_cost, i64 0, i64 %idxprom33, !dbg !9052
  %42 = load i32, i32* %rclass, align 4, !dbg !9053
  %idxprom35 = zext i32 %42 to i64, !dbg !9052
  %arrayidx36 = getelementptr inbounds [27 x [2 x i16]], [27 x [2 x i16]]* %arrayidx34, i64 0, i64 %idxprom35, !dbg !9052
  %arrayidx37 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx36, i64 0, i64 0, !dbg !9052
  %43 = load i16, i16* %arrayidx37, align 4, !dbg !9052
  %conv38 = sext i16 %43 to i32, !dbg !9052
  %44 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !9054
  %45 = load i32, i32* %regno, align 4, !dbg !9055
  %call39 = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %44, i32 %45, i8 zeroext 0), !dbg !9056
  %mul40 = mul nsw i32 %conv38, %call39, !dbg !9057
  %add41 = add nsw i32 %mul32, %mul40, !dbg !9058
  %46 = load i32, i32* %mode, align 4, !dbg !9059
  %47 = load i32, i32* %rclass, align 4, !dbg !9060
  %48 = load i32, i32* %rclass, align 4, !dbg !9061
  %call42 = call i32 @ira_get_register_move_cost(i32 %46, i32 %47, i32 %48), !dbg !9062
  %49 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !9063
  %50 = load i32, i32* %regno, align 4, !dbg !9064
  %call43 = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %49, i32 %50, i8 zeroext 0), !dbg !9065
  %51 = load %struct.ira_loop_tree_node*, %struct.ira_loop_tree_node** %loop_node, align 8, !dbg !9066
  %52 = load i32, i32* %regno, align 4, !dbg !9067
  %call44 = call i32 @ira_loop_edge_freq(%struct.ira_loop_tree_node* %51, i32 %52, i8 zeroext 1), !dbg !9068
  %add45 = add nsw i32 %call43, %call44, !dbg !9069
  %mul46 = mul nsw i32 %call42, %add45, !dbg !9070
  %sub47 = sub nsw i32 %add41, %mul46, !dbg !9071
  %53 = load i32, i32* %cost, align 4, !dbg !9072
  %add48 = add nsw i32 %53, %sub47, !dbg !9072
  store i32 %add48, i32* %cost, align 4, !dbg !9072
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.then10
  %54 = load i32, i32* %cost, align 4, !dbg !9073
  store i32 %54, i32* %retval, align 4, !dbg !9074
  br label %return, !dbg !9074

return:                                           ; preds = %if.end49, %if.then6, %if.then3, %if.then
  %55 = load i32, i32* %retval, align 4, !dbg !9075
  ret i32 %55, !dbg !9075
}

declare dso_local %struct.splay_tree_s* @splay_tree_new_with_allocator(i32 (i64, i64)*, void (i64)*, void (i64)*, i8* (i32, i8*)*, void (i8*, i8*)*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @allocno_spill_priority_compare(i64 %k1, i64 %k2) #0 !dbg !9076 {
entry:
  %retval = alloca i32, align 4
  %k1.addr = alloca i64, align 8
  %k2.addr = alloca i64, align 8
  %pri1 = alloca i32, align 4
  %pri2 = alloca i32, align 4
  %diff = alloca i32, align 4
  %a1 = alloca %struct.ira_allocno*, align 8
  %a2 = alloca %struct.ira_allocno*, align 8
  store i64 %k1, i64* %k1.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %k1.addr, metadata !9077, metadata !DIExpression()), !dbg !9078
  store i64 %k2, i64* %k2.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %k2.addr, metadata !9079, metadata !DIExpression()), !dbg !9080
  call void @llvm.dbg.declare(metadata i32* %pri1, metadata !9081, metadata !DIExpression()), !dbg !9082
  call void @llvm.dbg.declare(metadata i32* %pri2, metadata !9083, metadata !DIExpression()), !dbg !9084
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !9085, metadata !DIExpression()), !dbg !9086
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1, metadata !9087, metadata !DIExpression()), !dbg !9088
  %0 = load i64, i64* %k1.addr, align 8, !dbg !9089
  %1 = inttoptr i64 %0 to %struct.ira_allocno*, !dbg !9090
  store %struct.ira_allocno* %1, %struct.ira_allocno** %a1, align 8, !dbg !9088
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2, metadata !9091, metadata !DIExpression()), !dbg !9092
  %2 = load i64, i64* %k2.addr, align 8, !dbg !9093
  %3 = inttoptr i64 %2 to %struct.ira_allocno*, !dbg !9094
  store %struct.ira_allocno* %3, %struct.ira_allocno** %a2, align 8, !dbg !9092
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !9095
  %temp = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 41, !dbg !9095
  %5 = load i32, i32* %temp, align 8, !dbg !9095
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !9096
  %left_conflicts_size = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 37, !dbg !9096
  %7 = load i32, i32* %left_conflicts_size, align 8, !dbg !9096
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !9097
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 9, !dbg !9097
  %9 = load i32, i32* %cover_class, align 8, !dbg !9097
  %idxprom = zext i32 %9 to i64, !dbg !9098
  %arrayidx = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom, !dbg !9098
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !9099
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 2, !dbg !9099
  %11 = load i32, i32* %mode, align 8, !dbg !9099
  %idxprom1 = zext i32 %11 to i64, !dbg !9098
  %arrayidx2 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx, i64 0, i64 %idxprom1, !dbg !9098
  %12 = load i32, i32* %arrayidx2, align 4, !dbg !9098
  %mul = mul nsw i32 %7, %12, !dbg !9100
  %add = add nsw i32 %mul, 1, !dbg !9101
  %div = sdiv i32 %5, %add, !dbg !9102
  store i32 %div, i32* %pri1, align 4, !dbg !9103
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !9104
  %temp3 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 41, !dbg !9104
  %14 = load i32, i32* %temp3, align 8, !dbg !9104
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !9105
  %left_conflicts_size4 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %15, i32 0, i32 37, !dbg !9105
  %16 = load i32, i32* %left_conflicts_size4, align 8, !dbg !9105
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !9106
  %cover_class5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 9, !dbg !9106
  %18 = load i32, i32* %cover_class5, align 8, !dbg !9106
  %idxprom6 = zext i32 %18 to i64, !dbg !9107
  %arrayidx7 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom6, !dbg !9107
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !9108
  %mode8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 2, !dbg !9108
  %20 = load i32, i32* %mode8, align 8, !dbg !9108
  %idxprom9 = zext i32 %20 to i64, !dbg !9107
  %arrayidx10 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx7, i64 0, i64 %idxprom9, !dbg !9107
  %21 = load i32, i32* %arrayidx10, align 4, !dbg !9107
  %mul11 = mul nsw i32 %16, %21, !dbg !9109
  %add12 = add nsw i32 %mul11, 1, !dbg !9110
  %div13 = sdiv i32 %14, %add12, !dbg !9111
  store i32 %div13, i32* %pri2, align 4, !dbg !9112
  %22 = load i32, i32* %pri1, align 4, !dbg !9113
  %23 = load i32, i32* %pri2, align 4, !dbg !9115
  %sub = sub nsw i32 %22, %23, !dbg !9116
  store i32 %sub, i32* %diff, align 4, !dbg !9117
  %cmp = icmp ne i32 %sub, 0, !dbg !9118
  br i1 %cmp, label %if.then, label %if.end, !dbg !9119

if.then:                                          ; preds = %entry
  %24 = load i32, i32* %diff, align 4, !dbg !9120
  store i32 %24, i32* %retval, align 4, !dbg !9121
  br label %return, !dbg !9121

if.end:                                           ; preds = %entry
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !9122
  %temp14 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %25, i32 0, i32 41, !dbg !9122
  %26 = load i32, i32* %temp14, align 8, !dbg !9122
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !9124
  %temp15 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 41, !dbg !9124
  %28 = load i32, i32* %temp15, align 8, !dbg !9124
  %sub16 = sub nsw i32 %26, %28, !dbg !9125
  store i32 %sub16, i32* %diff, align 4, !dbg !9126
  %cmp17 = icmp ne i32 %sub16, 0, !dbg !9127
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !9128

if.then18:                                        ; preds = %if.end
  %29 = load i32, i32* %diff, align 4, !dbg !9129
  store i32 %29, i32* %retval, align 4, !dbg !9130
  br label %return, !dbg !9130

if.end19:                                         ; preds = %if.end
  %30 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !9131
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %30, i32 0, i32 0, !dbg !9131
  %31 = load i32, i32* %num, align 8, !dbg !9131
  %32 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !9132
  %num20 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %32, i32 0, i32 0, !dbg !9132
  %33 = load i32, i32* %num20, align 8, !dbg !9132
  %sub21 = sub nsw i32 %31, %33, !dbg !9133
  store i32 %sub21, i32* %retval, align 4, !dbg !9134
  br label %return, !dbg !9134

return:                                           ; preds = %if.end19, %if.then18, %if.then
  %34 = load i32, i32* %retval, align 4, !dbg !9135
  ret i32 %34, !dbg !9135
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @splay_tree_allocate(i32 %size, i8* %data) #0 !dbg !9136 {
entry:
  %retval = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !9137, metadata !DIExpression()), !dbg !9138
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9139, metadata !DIExpression()), !dbg !9140
  %0 = load i32, i32* %size.addr, align 4, !dbg !9141
  %conv = sext i32 %0 to i64, !dbg !9141
  %cmp = icmp ne i64 %conv, 32, !dbg !9143
  br i1 %cmp, label %if.then, label %if.end, !dbg !9144

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %size.addr, align 4, !dbg !9145
  %conv2 = sext i32 %1 to i64, !dbg !9145
  %call = call i8* @ira_allocate(i64 %conv2), !dbg !9146
  store i8* %call, i8** %retval, align 8, !dbg !9147
  br label %return, !dbg !9147

if.end:                                           ; preds = %entry
  %2 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @splay_tree_node_pool, align 8, !dbg !9148
  %call3 = call i8* @pool_alloc(%struct.alloc_pool_def* %2), !dbg !9149
  store i8* %call3, i8** %retval, align 8, !dbg !9150
  br label %return, !dbg !9150

return:                                           ; preds = %if.end, %if.then
  %3 = load i8*, i8** %retval, align 8, !dbg !9151
  ret i8* %3, !dbg !9151
}

; Function Attrs: noinline nounwind uwtable
define internal void @splay_tree_free(i8* %node, i8* %data) #0 !dbg !9152 {
entry:
  %node.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %cover_class = alloca i32, align 4
  store i8* %node, i8** %node.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %node.addr, metadata !9153, metadata !DIExpression()), !dbg !9154
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !9155, metadata !DIExpression()), !dbg !9156
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9157, metadata !DIExpression()), !dbg !9158
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !9159, metadata !DIExpression()), !dbg !9160
  store i32 0, i32* %i, align 4, !dbg !9161
  br label %for.cond, !dbg !9163

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9164
  %1 = load i32, i32* @ira_reg_class_cover_size, align 4, !dbg !9166
  %cmp = icmp slt i32 %0, %1, !dbg !9167
  br i1 %cmp, label %for.body, label %for.end, !dbg !9168

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !9169
  %idxprom = sext i32 %2 to i64, !dbg !9171
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @ira_reg_class_cover, i64 0, i64 %idxprom, !dbg !9171
  %3 = load i32, i32* %arrayidx, align 4, !dbg !9171
  store i32 %3, i32* %cover_class, align 4, !dbg !9172
  %4 = load i8*, i8** %node.addr, align 8, !dbg !9173
  %5 = load i32, i32* %cover_class, align 4, !dbg !9175
  %idxprom1 = zext i32 %5 to i64, !dbg !9176
  %arrayidx2 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom1, !dbg !9176
  %6 = load %struct.splay_tree_s*, %struct.splay_tree_s** %arrayidx2, align 8, !dbg !9176
  %7 = bitcast %struct.splay_tree_s* %6 to i8*, !dbg !9176
  %cmp3 = icmp eq i8* %4, %7, !dbg !9177
  br i1 %cmp3, label %if.then, label %if.end, !dbg !9178

if.then:                                          ; preds = %for.body
  %8 = load i8*, i8** %node.addr, align 8, !dbg !9179
  call void @ira_free(i8* %8), !dbg !9181
  br label %return, !dbg !9182

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9183

for.inc:                                          ; preds = %if.end
  %9 = load i32, i32* %i, align 4, !dbg !9184
  %inc = add nsw i32 %9, 1, !dbg !9184
  store i32 %inc, i32* %i, align 4, !dbg !9184
  br label %for.cond, !dbg !9185, !llvm.loop !9186

for.end:                                          ; preds = %for.cond
  %10 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @splay_tree_node_pool, align 8, !dbg !9188
  %11 = load i8*, i8** %node.addr, align 8, !dbg !9189
  call void @pool_free(%struct.alloc_pool_def* %10, i8* %11), !dbg !9190
  br label %return, !dbg !9191

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !9191
}

declare dso_local %struct.splay_tree_node_s* @splay_tree_insert(%struct.splay_tree_s*, i64, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal void @push_only_colorable() #0 !dbg !9192 {
entry:
  call void @sort_bucket(%struct.ira_allocno** @colorable_allocno_bucket), !dbg !9193
  br label %for.cond, !dbg !9194

for.cond:                                         ; preds = %for.body, %entry
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** @colorable_allocno_bucket, align 8, !dbg !9195
  %cmp = icmp ne %struct.ira_allocno* %0, null, !dbg !9198
  br i1 %cmp, label %for.body, label %for.end, !dbg !9199

for.body:                                         ; preds = %for.cond
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** @colorable_allocno_bucket, align 8, !dbg !9200
  call void @remove_allocno_from_bucket_and_push(%struct.ira_allocno* %1, i8 zeroext 1), !dbg !9201
  br label %for.cond, !dbg !9202, !llvm.loop !9203

for.end:                                          ; preds = %for.cond
  ret void, !dbg !9205
}

; Function Attrs: noinline nounwind uwtable
define internal void @push_allocno_to_spill(%struct.ira_allocno* %allocno) #0 !dbg !9206 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !9207, metadata !DIExpression()), !dbg !9208
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9209
  call void @delete_allocno_from_bucket(%struct.ira_allocno* %0, %struct.ira_allocno** @uncolorable_allocno_bucket), !dbg !9210
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9211
  %may_be_spilled_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 31, !dbg !9211
  %bf.load = load i16, i16* %may_be_spilled_p, align 4, !dbg !9212
  %bf.clear = and i16 %bf.load, -513, !dbg !9212
  %bf.set = or i16 %bf.clear, 512, !dbg !9212
  store i16 %bf.set, i16* %may_be_spilled_p, align 4, !dbg !9212
  %2 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !9213
  %cmp = icmp sgt i32 %2, 3, !dbg !9215
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9216

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !9217
  %cmp1 = icmp ne %struct._IO_FILE* %3, null, !dbg !9218
  br i1 %cmp1, label %if.then, label %if.end, !dbg !9219

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !9220
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9221
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 0, !dbg !9221
  %6 = load i32, i32* %num, align 8, !dbg !9221
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9222
  %regno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 1, !dbg !9222
  %8 = load i32, i32* %regno, align 4, !dbg !9222
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.35, i64 0, i64 0), i32 %6, i32 %8), !dbg !9223
  br label %if.end, !dbg !9223

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9224
  call void @push_allocno_to_stack(%struct.ira_allocno* %9), !dbg !9225
  ret void, !dbg !9226
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ira_allocno_t_base_length(%struct.VEC_ira_allocno_t_base* %vec_) #0 !dbg !9227 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_base*, align 8
  store %struct.VEC_ira_allocno_t_base* %vec_, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_base** %vec_.addr, metadata !9232, metadata !DIExpression()), !dbg !9233
  %0 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !9233
  %tobool = icmp ne %struct.VEC_ira_allocno_t_base* %0, null, !dbg !9233
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9233

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !9233
  %num = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %1, i32 0, i32 0, !dbg !9233
  %2 = load i32, i32* %num, align 8, !dbg !9233
  br label %cond.end, !dbg !9233

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9233

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9233
  ret i32 %cond, !dbg !9233
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ira_allocno* @VEC_ira_allocno_t_base_pop(%struct.VEC_ira_allocno_t_base* %vec_) #0 !dbg !9234 {
entry:
  %vec_.addr = alloca %struct.VEC_ira_allocno_t_base*, align 8
  %obj_ = alloca %struct.ira_allocno*, align 8
  store %struct.VEC_ira_allocno_t_base* %vec_, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ira_allocno_t_base** %vec_.addr, metadata !9237, metadata !DIExpression()), !dbg !9238
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %obj_, metadata !9239, metadata !DIExpression()), !dbg !9238
  %0 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !9238
  %num = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %0, i32 0, i32 0, !dbg !9238
  %1 = load i32, i32* %num, align 8, !dbg !9238
  %2 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !9238
  %vec = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %2, i32 0, i32 2, !dbg !9238
  %3 = load %struct.VEC_ira_allocno_t_base*, %struct.VEC_ira_allocno_t_base** %vec_.addr, align 8, !dbg !9238
  %num1 = getelementptr inbounds %struct.VEC_ira_allocno_t_base, %struct.VEC_ira_allocno_t_base* %3, i32 0, i32 0, !dbg !9238
  %4 = load i32, i32* %num1, align 8, !dbg !9238
  %dec = add i32 %4, -1, !dbg !9238
  store i32 %dec, i32* %num1, align 8, !dbg !9238
  %idxprom = zext i32 %dec to i64, !dbg !9238
  %arrayidx = getelementptr inbounds [1 x %struct.ira_allocno*], [1 x %struct.ira_allocno*]* %vec, i64 0, i64 %idxprom, !dbg !9238
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx, align 8, !dbg !9238
  store %struct.ira_allocno* %5, %struct.ira_allocno** %obj_, align 8, !dbg !9238
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %obj_, align 8, !dbg !9238
  ret %struct.ira_allocno* %6, !dbg !9238
}

declare dso_local %struct.splay_tree_node_s* @splay_tree_min(%struct.splay_tree_s*) #3

declare dso_local void @splay_tree_remove(%struct.splay_tree_s*, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @allocno_spill_priority(%struct.ira_allocno* %a) #0 !dbg !9240 {
entry:
  %a.addr = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno* %a, %struct.ira_allocno** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a.addr, metadata !9241, metadata !DIExpression()), !dbg !9242
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !9243
  %temp = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 41, !dbg !9243
  %1 = load i32, i32* %temp, align 8, !dbg !9243
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !9244
  %left_conflicts_size = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 37, !dbg !9244
  %3 = load i32, i32* %left_conflicts_size, align 8, !dbg !9244
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !9245
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 9, !dbg !9245
  %5 = load i32, i32* %cover_class, align 8, !dbg !9245
  %idxprom = zext i32 %5 to i64, !dbg !9246
  %arrayidx = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom, !dbg !9246
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a.addr, align 8, !dbg !9247
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 2, !dbg !9247
  %7 = load i32, i32* %mode, align 8, !dbg !9247
  %idxprom1 = zext i32 %7 to i64, !dbg !9246
  %arrayidx2 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx, i64 0, i64 %idxprom1, !dbg !9246
  %8 = load i32, i32* %arrayidx2, align 4, !dbg !9246
  %mul = mul nsw i32 %3, %8, !dbg !9248
  %add = add nsw i32 %mul, 1, !dbg !9249
  %div = sdiv i32 %1, %add, !dbg !9250
  ret i32 %div, !dbg !9251
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_allocno_from_bucket_and_push(%struct.ira_allocno* %allocno, i8 zeroext %colorable_p) #0 !dbg !9252 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %colorable_p.addr = alloca i8, align 1
  %cover_class = alloca i32, align 4
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !9253, metadata !DIExpression()), !dbg !9254
  store i8 %colorable_p, i8* %colorable_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %colorable_p.addr, metadata !9255, metadata !DIExpression()), !dbg !9256
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !9257, metadata !DIExpression()), !dbg !9258
  %0 = load i8, i8* %colorable_p.addr, align 1, !dbg !9259
  %tobool = icmp ne i8 %0, 0, !dbg !9259
  br i1 %tobool, label %if.then, label %if.else, !dbg !9261

if.then:                                          ; preds = %entry
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9262
  call void @delete_allocno_from_bucket(%struct.ira_allocno* %1, %struct.ira_allocno** @colorable_allocno_bucket), !dbg !9263
  br label %if.end, !dbg !9263

if.else:                                          ; preds = %entry
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9264
  call void @delete_allocno_from_bucket(%struct.ira_allocno* %2, %struct.ira_allocno** @uncolorable_allocno_bucket), !dbg !9265
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %3 = load i32, i32* @internal_flag_ira_verbose, align 4, !dbg !9266
  %cmp = icmp sgt i32 %3, 3, !dbg !9268
  br i1 %cmp, label %land.lhs.true, label %if.end11, !dbg !9269

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !9270
  %cmp1 = icmp ne %struct._IO_FILE* %4, null, !dbg !9271
  br i1 %cmp1, label %if.then2, label %if.end11, !dbg !9272

if.then2:                                         ; preds = %land.lhs.true
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !9273
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.36, i64 0, i64 0)), !dbg !9275
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9276
  call void @print_coalesced_allocno(%struct.ira_allocno* %6), !dbg !9277
  %7 = load i8, i8* %colorable_p.addr, align 1, !dbg !9278
  %tobool3 = icmp ne i8 %7, 0, !dbg !9278
  br i1 %tobool3, label %if.then4, label %if.else6, !dbg !9280

if.then4:                                         ; preds = %if.then2
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !9281
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !9282
  br label %if.end10, !dbg !9282

if.else6:                                         ; preds = %if.then2
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @ira_dump_file, align 8, !dbg !9283
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9284
  %bad_spill_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %10, i32 0, i32 31, !dbg !9284
  %bf.load = load i16, i16* %bad_spill_p, align 4, !dbg !9284
  %bf.lshr = lshr i16 %bf.load, 6, !dbg !9284
  %bf.clear = and i16 %bf.lshr, 1, !dbg !9284
  %bf.cast = zext i16 %bf.clear to i32, !dbg !9284
  %tobool7 = icmp ne i32 %bf.cast, 0, !dbg !9284
  %11 = zext i1 %tobool7 to i64, !dbg !9284
  %cond = select i1 %tobool7, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.39, i64 0, i64 0), !dbg !9284
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9285
  %call8 = call i32 @allocno_spill_priority(%struct.ira_allocno* %12), !dbg !9286
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9287
  %temp = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %13, i32 0, i32 41, !dbg !9287
  %14 = load i32, i32* %temp, align 8, !dbg !9287
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.37, i64 0, i64 0), i8* %cond, i32 %call8, i32 %14), !dbg !9288
  br label %if.end10

if.end10:                                         ; preds = %if.else6, %if.then4
  br label %if.end11, !dbg !9289

if.end11:                                         ; preds = %if.end10, %land.lhs.true, %if.end
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9290
  %cover_class12 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %15, i32 0, i32 9, !dbg !9290
  %16 = load i32, i32* %cover_class12, align 8, !dbg !9290
  store i32 %16, i32* %cover_class, align 4, !dbg !9291
  %17 = load i8, i8* %colorable_p.addr, align 1, !dbg !9292
  %tobool13 = icmp ne i8 %17, 0, !dbg !9292
  br i1 %tobool13, label %if.end17, label %if.then14, !dbg !9294

if.then14:                                        ; preds = %if.end11
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9295
  %may_be_spilled_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 31, !dbg !9295
  %bf.load15 = load i16, i16* %may_be_spilled_p, align 4, !dbg !9296
  %bf.clear16 = and i16 %bf.load15, -513, !dbg !9296
  %bf.set = or i16 %bf.clear16, 512, !dbg !9296
  store i16 %bf.set, i16* %may_be_spilled_p, align 4, !dbg !9296
  br label %if.end17, !dbg !9295

if.end17:                                         ; preds = %if.then14, %if.end11
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9297
  call void @push_allocno_to_stack(%struct.ira_allocno* %19), !dbg !9298
  ret void, !dbg !9299
}

declare dso_local void @splay_tree_delete(%struct.splay_tree_s*) #3

declare dso_local i8* @pool_alloc(%struct.alloc_pool_def*) #3

declare dso_local void @pool_free(%struct.alloc_pool_def*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @sort_bucket(%struct.ira_allocno** %bucket_ptr) #0 !dbg !9300 {
entry:
  %bucket_ptr.addr = alloca %struct.ira_allocno**, align 8
  %a = alloca %struct.ira_allocno*, align 8
  %head = alloca %struct.ira_allocno*, align 8
  %n = alloca i32, align 4
  store %struct.ira_allocno** %bucket_ptr, %struct.ira_allocno*** %bucket_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %bucket_ptr.addr, metadata !9303, metadata !DIExpression()), !dbg !9304
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !9305, metadata !DIExpression()), !dbg !9306
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %head, metadata !9307, metadata !DIExpression()), !dbg !9308
  call void @llvm.dbg.declare(metadata i32* %n, metadata !9309, metadata !DIExpression()), !dbg !9310
  store i32 0, i32* %n, align 4, !dbg !9311
  %0 = load %struct.ira_allocno**, %struct.ira_allocno*** %bucket_ptr.addr, align 8, !dbg !9313
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %0, align 8, !dbg !9314
  store %struct.ira_allocno* %1, %struct.ira_allocno** %a, align 8, !dbg !9315
  br label %for.cond, !dbg !9316

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9317
  %cmp = icmp ne %struct.ira_allocno* %2, null, !dbg !9319
  br i1 %cmp, label %for.body, label %for.end, !dbg !9320

for.body:                                         ; preds = %for.cond
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9321
  %4 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !9322
  %5 = load i32, i32* %n, align 4, !dbg !9323
  %inc = add nsw i32 %5, 1, !dbg !9323
  store i32 %inc, i32* %n, align 4, !dbg !9323
  %idxprom = sext i32 %5 to i64, !dbg !9322
  %arrayidx = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %4, i64 %idxprom, !dbg !9322
  store %struct.ira_allocno* %3, %struct.ira_allocno** %arrayidx, align 8, !dbg !9324
  br label %for.inc, !dbg !9322

for.inc:                                          ; preds = %for.body
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9325
  %next_bucket_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 39, !dbg !9325
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %next_bucket_allocno, align 8, !dbg !9325
  store %struct.ira_allocno* %7, %struct.ira_allocno** %a, align 8, !dbg !9326
  br label %for.cond, !dbg !9327, !llvm.loop !9328

for.end:                                          ; preds = %for.cond
  %8 = load i32, i32* %n, align 4, !dbg !9330
  %cmp1 = icmp sle i32 %8, 1, !dbg !9332
  br i1 %cmp1, label %if.then, label %if.end, !dbg !9333

if.then:                                          ; preds = %for.end
  br label %return, !dbg !9334

if.end:                                           ; preds = %for.end
  %9 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !9335
  %10 = bitcast %struct.ira_allocno** %9 to i8*, !dbg !9335
  %11 = load i32, i32* %n, align 4, !dbg !9336
  %conv = sext i32 %11 to i64, !dbg !9336
  call void @spec_qsort(i8* %10, i64 %conv, i64 8, i32 (i8*, i8*)* @bucket_allocno_compare_func), !dbg !9337
  store %struct.ira_allocno* null, %struct.ira_allocno** %head, align 8, !dbg !9338
  %12 = load i32, i32* %n, align 4, !dbg !9339
  %dec = add nsw i32 %12, -1, !dbg !9339
  store i32 %dec, i32* %n, align 4, !dbg !9339
  br label %for.cond2, !dbg !9341

for.cond2:                                        ; preds = %for.inc14, %if.end
  %13 = load i32, i32* %n, align 4, !dbg !9342
  %cmp3 = icmp sge i32 %13, 0, !dbg !9344
  br i1 %cmp3, label %for.body5, label %for.end16, !dbg !9345

for.body5:                                        ; preds = %for.cond2
  %14 = load %struct.ira_allocno**, %struct.ira_allocno*** @sorted_allocnos, align 8, !dbg !9346
  %15 = load i32, i32* %n, align 4, !dbg !9348
  %idxprom6 = sext i32 %15 to i64, !dbg !9346
  %arrayidx7 = getelementptr inbounds %struct.ira_allocno*, %struct.ira_allocno** %14, i64 %idxprom6, !dbg !9346
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %arrayidx7, align 8, !dbg !9346
  store %struct.ira_allocno* %16, %struct.ira_allocno** %a, align 8, !dbg !9349
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %head, align 8, !dbg !9350
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9351
  %next_bucket_allocno8 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %18, i32 0, i32 39, !dbg !9351
  store %struct.ira_allocno* %17, %struct.ira_allocno** %next_bucket_allocno8, align 8, !dbg !9352
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9353
  %prev_bucket_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 40, !dbg !9353
  store %struct.ira_allocno* null, %struct.ira_allocno** %prev_bucket_allocno, align 8, !dbg !9354
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %head, align 8, !dbg !9355
  %cmp9 = icmp ne %struct.ira_allocno* %20, null, !dbg !9357
  br i1 %cmp9, label %if.then11, label %if.end13, !dbg !9358

if.then11:                                        ; preds = %for.body5
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9359
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %head, align 8, !dbg !9360
  %prev_bucket_allocno12 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %22, i32 0, i32 40, !dbg !9360
  store %struct.ira_allocno* %21, %struct.ira_allocno** %prev_bucket_allocno12, align 8, !dbg !9361
  br label %if.end13, !dbg !9360

if.end13:                                         ; preds = %if.then11, %for.body5
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9362
  store %struct.ira_allocno* %23, %struct.ira_allocno** %head, align 8, !dbg !9363
  br label %for.inc14, !dbg !9364

for.inc14:                                        ; preds = %if.end13
  %24 = load i32, i32* %n, align 4, !dbg !9365
  %dec15 = add nsw i32 %24, -1, !dbg !9365
  store i32 %dec15, i32* %n, align 4, !dbg !9365
  br label %for.cond2, !dbg !9366, !llvm.loop !9367

for.end16:                                        ; preds = %for.cond2
  %25 = load %struct.ira_allocno*, %struct.ira_allocno** %head, align 8, !dbg !9369
  %26 = load %struct.ira_allocno**, %struct.ira_allocno*** %bucket_ptr.addr, align 8, !dbg !9370
  store %struct.ira_allocno* %25, %struct.ira_allocno** %26, align 8, !dbg !9371
  br label %return, !dbg !9372

return:                                           ; preds = %for.end16, %if.then
  ret void, !dbg !9372
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @bucket_allocno_compare_func(i8* %v1p, i8* %v2p) #0 !dbg !9373 {
entry:
  %retval = alloca i32, align 4
  %v1p.addr = alloca i8*, align 8
  %v2p.addr = alloca i8*, align 8
  %a1 = alloca %struct.ira_allocno*, align 8
  %a2 = alloca %struct.ira_allocno*, align 8
  %diff = alloca i32, align 4
  %a1_freq = alloca i32, align 4
  %a2_freq = alloca i32, align 4
  %a1_num = alloca i32, align 4
  %a2_num = alloca i32, align 4
  store i8* %v1p, i8** %v1p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v1p.addr, metadata !9374, metadata !DIExpression()), !dbg !9375
  store i8* %v2p, i8** %v2p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %v2p.addr, metadata !9376, metadata !DIExpression()), !dbg !9377
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a1, metadata !9378, metadata !DIExpression()), !dbg !9379
  %0 = load i8*, i8** %v1p.addr, align 8, !dbg !9380
  %1 = bitcast i8* %0 to %struct.ira_allocno**, !dbg !9381
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %1, align 8, !dbg !9382
  store %struct.ira_allocno* %2, %struct.ira_allocno** %a1, align 8, !dbg !9379
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a2, metadata !9383, metadata !DIExpression()), !dbg !9384
  %3 = load i8*, i8** %v2p.addr, align 8, !dbg !9385
  %4 = bitcast i8* %3 to %struct.ira_allocno**, !dbg !9386
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %4, align 8, !dbg !9387
  store %struct.ira_allocno* %5, %struct.ira_allocno** %a2, align 8, !dbg !9384
  call void @llvm.dbg.declare(metadata i32* %diff, metadata !9388, metadata !DIExpression()), !dbg !9389
  call void @llvm.dbg.declare(metadata i32* %a1_freq, metadata !9390, metadata !DIExpression()), !dbg !9391
  call void @llvm.dbg.declare(metadata i32* %a2_freq, metadata !9392, metadata !DIExpression()), !dbg !9393
  call void @llvm.dbg.declare(metadata i32* %a1_num, metadata !9394, metadata !DIExpression()), !dbg !9395
  call void @llvm.dbg.declare(metadata i32* %a2_num, metadata !9396, metadata !DIExpression()), !dbg !9397
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !9398
  %cover_class = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 9, !dbg !9398
  %7 = load i32, i32* %cover_class, align 8, !dbg !9398
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !9400
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 9, !dbg !9400
  %9 = load i32, i32* %cover_class1, align 8, !dbg !9400
  %sub = sub i32 %7, %9, !dbg !9401
  store i32 %sub, i32* %diff, align 4, !dbg !9402
  %cmp = icmp ne i32 %sub, 0, !dbg !9403
  br i1 %cmp, label %if.then, label %if.end, !dbg !9404

if.then:                                          ; preds = %entry
  %10 = load i32, i32* %diff, align 4, !dbg !9405
  store i32 %10, i32* %retval, align 4, !dbg !9406
  br label %return, !dbg !9406

if.end:                                           ; preds = %entry
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !9407
  call void @get_coalesced_allocnos_attributes(%struct.ira_allocno* %11, i32* %a1_freq, i32* %a1_num), !dbg !9408
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !9409
  call void @get_coalesced_allocnos_attributes(%struct.ira_allocno* %12, i32* %a2_freq, i32* %a2_num), !dbg !9410
  %13 = load i32, i32* %a2_num, align 4, !dbg !9411
  %14 = load i32, i32* %a1_num, align 4, !dbg !9413
  %sub2 = sub nsw i32 %13, %14, !dbg !9414
  store i32 %sub2, i32* %diff, align 4, !dbg !9415
  %cmp3 = icmp ne i32 %sub2, 0, !dbg !9416
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !9417

if.then4:                                         ; preds = %if.end
  %15 = load i32, i32* %diff, align 4, !dbg !9418
  store i32 %15, i32* %retval, align 4, !dbg !9419
  br label %return, !dbg !9419

if.else:                                          ; preds = %if.end
  %16 = load i32, i32* %a1_freq, align 4, !dbg !9420
  %17 = load i32, i32* %a2_freq, align 4, !dbg !9422
  %sub5 = sub nsw i32 %16, %17, !dbg !9423
  store i32 %sub5, i32* %diff, align 4, !dbg !9424
  %cmp6 = icmp ne i32 %sub5, 0, !dbg !9425
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !9426

if.then7:                                         ; preds = %if.else
  %18 = load i32, i32* %diff, align 4, !dbg !9427
  store i32 %18, i32* %retval, align 4, !dbg !9428
  br label %return, !dbg !9428

if.end8:                                          ; preds = %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8
  %19 = load %struct.ira_allocno*, %struct.ira_allocno** %a2, align 8, !dbg !9429
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %19, i32 0, i32 0, !dbg !9429
  %20 = load i32, i32* %num, align 8, !dbg !9429
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %a1, align 8, !dbg !9430
  %num10 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 0, !dbg !9430
  %22 = load i32, i32* %num10, align 8, !dbg !9430
  %sub11 = sub nsw i32 %20, %22, !dbg !9431
  store i32 %sub11, i32* %retval, align 4, !dbg !9432
  br label %return, !dbg !9432

return:                                           ; preds = %if.end9, %if.then7, %if.then4, %if.then
  %23 = load i32, i32* %retval, align 4, !dbg !9433
  ret i32 %23, !dbg !9433
}

; Function Attrs: noinline nounwind uwtable
define internal void @get_coalesced_allocnos_attributes(%struct.ira_allocno* %allocno, i32* %freq, i32* %num) #0 !dbg !9434 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %freq.addr = alloca i32*, align 8
  %num.addr = alloca i32*, align 8
  %a = alloca %struct.ira_allocno*, align 8
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !9437, metadata !DIExpression()), !dbg !9438
  store i32* %freq, i32** %freq.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %freq.addr, metadata !9439, metadata !DIExpression()), !dbg !9440
  store i32* %num, i32** %num.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %num.addr, metadata !9441, metadata !DIExpression()), !dbg !9442
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !9443, metadata !DIExpression()), !dbg !9444
  %0 = load i32*, i32** %freq.addr, align 8, !dbg !9445
  store i32 0, i32* %0, align 4, !dbg !9446
  %1 = load i32*, i32** %num.addr, align 8, !dbg !9447
  store i32 0, i32* %1, align 4, !dbg !9448
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9449
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 19, !dbg !9449
  %3 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !9449
  store %struct.ira_allocno* %3, %struct.ira_allocno** %a, align 8, !dbg !9451
  br label %for.cond, !dbg !9452

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9453
  %freq1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %4, i32 0, i32 8, !dbg !9453
  %5 = load i32, i32* %freq1, align 4, !dbg !9453
  %6 = load i32*, i32** %freq.addr, align 8, !dbg !9456
  %7 = load i32, i32* %6, align 4, !dbg !9457
  %add = add nsw i32 %7, %5, !dbg !9457
  store i32 %add, i32* %6, align 4, !dbg !9457
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9458
  %available_regs_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %8, i32 0, i32 38, !dbg !9458
  %9 = load i32, i32* %available_regs_num, align 4, !dbg !9458
  %10 = load i32*, i32** %num.addr, align 8, !dbg !9459
  %11 = load i32, i32* %10, align 4, !dbg !9460
  %add2 = add nsw i32 %11, %9, !dbg !9460
  store i32 %add2, i32* %10, align 4, !dbg !9460
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9461
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9463
  %cmp = icmp eq %struct.ira_allocno* %12, %13, !dbg !9464
  br i1 %cmp, label %if.then, label %if.end, !dbg !9465

if.then:                                          ; preds = %for.cond
  br label %for.end, !dbg !9466

if.end:                                           ; preds = %for.cond
  br label %for.inc, !dbg !9467

for.inc:                                          ; preds = %if.end
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9468
  %next_coalesced_allocno3 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 19, !dbg !9468
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno3, align 8, !dbg !9468
  store %struct.ira_allocno* %15, %struct.ira_allocno** %a, align 8, !dbg !9469
  br label %for.cond, !dbg !9470, !llvm.loop !9471

for.end:                                          ; preds = %if.then
  ret void, !dbg !9474
}

; Function Attrs: noinline nounwind uwtable
define internal void @delete_allocno_from_bucket(%struct.ira_allocno* %allocno, %struct.ira_allocno** %bucket_ptr) #0 !dbg !9475 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %bucket_ptr.addr = alloca %struct.ira_allocno**, align 8
  %prev_allocno = alloca %struct.ira_allocno*, align 8
  %next_allocno = alloca %struct.ira_allocno*, align 8
  %cover_class = alloca i32, align 4
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !9476, metadata !DIExpression()), !dbg !9477
  store %struct.ira_allocno** %bucket_ptr, %struct.ira_allocno*** %bucket_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %bucket_ptr.addr, metadata !9478, metadata !DIExpression()), !dbg !9479
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %prev_allocno, metadata !9480, metadata !DIExpression()), !dbg !9481
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %next_allocno, metadata !9482, metadata !DIExpression()), !dbg !9483
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !9484, metadata !DIExpression()), !dbg !9485
  %0 = load %struct.ira_allocno**, %struct.ira_allocno*** %bucket_ptr.addr, align 8, !dbg !9486
  %cmp = icmp eq %struct.ira_allocno** %0, @uncolorable_allocno_bucket, !dbg !9488
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9489

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9490
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 9, !dbg !9490
  %2 = load i32, i32* %cover_class1, align 8, !dbg !9490
  store i32 %2, i32* %cover_class, align 4, !dbg !9491
  %cmp2 = icmp ne i32 %2, 0, !dbg !9492
  br i1 %cmp2, label %if.then, label %if.end, !dbg !9493

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32, i32* %cover_class, align 4, !dbg !9494
  %idxprom = zext i32 %3 to i64, !dbg !9496
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @uncolorable_allocnos_num, i64 0, i64 %idxprom, !dbg !9496
  %4 = load i32, i32* %arrayidx, align 4, !dbg !9497
  %dec = add nsw i32 %4, -1, !dbg !9497
  store i32 %dec, i32* %arrayidx, align 4, !dbg !9497
  br label %if.end, !dbg !9498

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9499
  %prev_bucket_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %5, i32 0, i32 40, !dbg !9499
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %prev_bucket_allocno, align 8, !dbg !9499
  store %struct.ira_allocno* %6, %struct.ira_allocno** %prev_allocno, align 8, !dbg !9500
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9501
  %next_bucket_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %7, i32 0, i32 39, !dbg !9501
  %8 = load %struct.ira_allocno*, %struct.ira_allocno** %next_bucket_allocno, align 8, !dbg !9501
  store %struct.ira_allocno* %8, %struct.ira_allocno** %next_allocno, align 8, !dbg !9502
  %9 = load %struct.ira_allocno*, %struct.ira_allocno** %prev_allocno, align 8, !dbg !9503
  %cmp3 = icmp ne %struct.ira_allocno* %9, null, !dbg !9505
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !9506

if.then4:                                         ; preds = %if.end
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %next_allocno, align 8, !dbg !9507
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %prev_allocno, align 8, !dbg !9508
  %next_bucket_allocno5 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 39, !dbg !9508
  store %struct.ira_allocno* %10, %struct.ira_allocno** %next_bucket_allocno5, align 8, !dbg !9509
  br label %if.end6, !dbg !9508

if.else:                                          ; preds = %if.end
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %next_allocno, align 8, !dbg !9510
  %13 = load %struct.ira_allocno**, %struct.ira_allocno*** %bucket_ptr.addr, align 8, !dbg !9512
  store %struct.ira_allocno* %12, %struct.ira_allocno** %13, align 8, !dbg !9513
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then4
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %next_allocno, align 8, !dbg !9514
  %cmp7 = icmp ne %struct.ira_allocno* %14, null, !dbg !9516
  br i1 %cmp7, label %if.then8, label %if.end10, !dbg !9517

if.then8:                                         ; preds = %if.end6
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %prev_allocno, align 8, !dbg !9518
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %next_allocno, align 8, !dbg !9519
  %prev_bucket_allocno9 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 40, !dbg !9519
  store %struct.ira_allocno* %15, %struct.ira_allocno** %prev_bucket_allocno9, align 8, !dbg !9520
  br label %if.end10, !dbg !9519

if.end10:                                         ; preds = %if.then8, %if.end6
  ret void, !dbg !9521
}

; Function Attrs: noinline nounwind uwtable
define internal void @push_allocno_to_stack(%struct.ira_allocno* %allocno) #0 !dbg !9522 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %left_conflicts_size = alloca i32, align 4
  %conflict_size = alloca i32, align 4
  %size = alloca i32, align 4
  %a = alloca %struct.ira_allocno*, align 8
  %conflict_allocno = alloca %struct.ira_allocno*, align 8
  %cover_class = alloca i32, align 4
  %aci = alloca %struct.ira_allocno_conflict_iterator, align 8
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !9523, metadata !DIExpression()), !dbg !9524
  call void @llvm.dbg.declare(metadata i32* %left_conflicts_size, metadata !9525, metadata !DIExpression()), !dbg !9526
  call void @llvm.dbg.declare(metadata i32* %conflict_size, metadata !9527, metadata !DIExpression()), !dbg !9528
  call void @llvm.dbg.declare(metadata i32* %size, metadata !9529, metadata !DIExpression()), !dbg !9530
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %a, metadata !9531, metadata !DIExpression()), !dbg !9532
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %conflict_allocno, metadata !9533, metadata !DIExpression()), !dbg !9534
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !9535, metadata !DIExpression()), !dbg !9536
  call void @llvm.dbg.declare(metadata %struct.ira_allocno_conflict_iterator* %aci, metadata !9537, metadata !DIExpression()), !dbg !9538
  %0 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9539
  %in_graph_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %0, i32 0, i32 31, !dbg !9539
  %bf.load = load i16, i16* %in_graph_p, align 4, !dbg !9540
  %bf.clear = and i16 %bf.load, -129, !dbg !9540
  store i16 %bf.clear, i16* %in_graph_p, align 4, !dbg !9540
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9541
  %call = call %struct.ira_allocno** @VEC_ira_allocno_t_heap_safe_push(%struct.VEC_ira_allocno_t_heap** @allocno_stack_vec, %struct.ira_allocno* %1), !dbg !9541
  %2 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9542
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %2, i32 0, i32 9, !dbg !9542
  %3 = load i32, i32* %cover_class1, align 8, !dbg !9542
  store i32 %3, i32* %cover_class, align 4, !dbg !9543
  %4 = load i32, i32* %cover_class, align 4, !dbg !9544
  %cmp = icmp eq i32 %4, 0, !dbg !9546
  br i1 %cmp, label %if.then, label %if.end, !dbg !9547

if.then:                                          ; preds = %entry
  br label %for.end78, !dbg !9548

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %cover_class, align 4, !dbg !9549
  %idxprom = zext i32 %5 to i64, !dbg !9550
  %arrayidx = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom, !dbg !9550
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9551
  %mode = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %6, i32 0, i32 2, !dbg !9551
  %7 = load i32, i32* %mode, align 8, !dbg !9551
  %idxprom2 = zext i32 %7 to i64, !dbg !9550
  %arrayidx3 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx, i64 0, i64 %idxprom2, !dbg !9550
  %8 = load i32, i32* %arrayidx3, align 4, !dbg !9550
  store i32 %8, i32* %size, align 4, !dbg !9552
  %9 = load i8, i8* @allocno_coalesced_p, align 1, !dbg !9553
  %tobool = icmp ne i8 %9, 0, !dbg !9553
  br i1 %tobool, label %if.then4, label %if.end5, !dbg !9555

if.then4:                                         ; preds = %if.end
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !9556
  call void @bitmap_clear(%struct.bitmap_head_def* %10), !dbg !9557
  br label %if.end5, !dbg !9557

if.end5:                                          ; preds = %if.then4, %if.end
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9558
  %next_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 19, !dbg !9558
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno, align 8, !dbg !9558
  store %struct.ira_allocno* %12, %struct.ira_allocno** %a, align 8, !dbg !9560
  br label %for.cond, !dbg !9561

for.cond:                                         ; preds = %for.inc76, %if.end5
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9562
  call void @ira_allocno_conflict_iter_init(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno* %13), !dbg !9562
  br label %for.cond6, !dbg !9562

for.cond6:                                        ; preds = %for.inc, %for.cond
  %call7 = call zeroext i8 @ira_allocno_conflict_iter_cond(%struct.ira_allocno_conflict_iterator* %aci, %struct.ira_allocno** %conflict_allocno), !dbg !9566
  %tobool8 = icmp ne i8 %call7, 0, !dbg !9562
  br i1 %tobool8, label %for.body, label %for.end, !dbg !9562

for.body:                                         ; preds = %for.cond6
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9568
  %first_coalesced_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 18, !dbg !9568
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %first_coalesced_allocno, align 8, !dbg !9568
  store %struct.ira_allocno* %15, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9570
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @coloring_allocno_bitmap, align 8, !dbg !9571
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9573
  %num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %17, i32 0, i32 0, !dbg !9573
  %18 = load i32, i32* %num, align 8, !dbg !9573
  %call9 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %16, i32 %18), !dbg !9574
  %tobool10 = icmp ne i32 %call9, 0, !dbg !9574
  br i1 %tobool10, label %if.then11, label %if.end72, !dbg !9575

if.then11:                                        ; preds = %for.body
  %19 = load i8, i8* @allocno_coalesced_p, align 1, !dbg !9576
  %tobool12 = icmp ne i8 %19, 0, !dbg !9576
  br i1 %tobool12, label %if.then13, label %if.end21, !dbg !9579

if.then13:                                        ; preds = %if.then11
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !9580
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9583
  %num14 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 0, !dbg !9583
  %22 = load i32, i32* %num14, align 8, !dbg !9583
  %call15 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %20, i32 %22), !dbg !9584
  %tobool16 = icmp ne i32 %call15, 0, !dbg !9584
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !9585

if.then17:                                        ; preds = %if.then13
  br label %for.inc, !dbg !9586

if.end18:                                         ; preds = %if.then13
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @processed_coalesced_allocno_bitmap, align 8, !dbg !9587
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9588
  %num19 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 0, !dbg !9588
  %25 = load i32, i32* %num19, align 8, !dbg !9588
  %call20 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %23, i32 %25), !dbg !9589
  br label %if.end21, !dbg !9590

if.end21:                                         ; preds = %if.end18, %if.then11
  %26 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9591
  %in_graph_p22 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %26, i32 0, i32 31, !dbg !9591
  %bf.load23 = load i16, i16* %in_graph_p22, align 4, !dbg !9591
  %bf.lshr = lshr i16 %bf.load23, 7, !dbg !9591
  %bf.clear24 = and i16 %bf.lshr, 1, !dbg !9591
  %bf.cast = zext i16 %bf.clear24 to i32, !dbg !9591
  %tobool25 = icmp ne i32 %bf.cast, 0, !dbg !9591
  br i1 %tobool25, label %land.lhs.true, label %if.end71, !dbg !9593

land.lhs.true:                                    ; preds = %if.end21
  %27 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9594
  %assigned_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %27, i32 0, i32 31, !dbg !9594
  %bf.load26 = load i16, i16* %assigned_p, align 4, !dbg !9594
  %bf.lshr27 = lshr i16 %bf.load26, 8, !dbg !9594
  %bf.clear28 = and i16 %bf.lshr27, 1, !dbg !9594
  %bf.cast29 = zext i16 %bf.clear28 to i32, !dbg !9594
  %tobool30 = icmp ne i32 %bf.cast29, 0, !dbg !9594
  br i1 %tobool30, label %if.end71, label %if.then31, !dbg !9595

if.then31:                                        ; preds = %land.lhs.true
  %28 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9596
  %left_conflicts_size32 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %28, i32 0, i32 37, !dbg !9596
  %29 = load i32, i32* %left_conflicts_size32, align 8, !dbg !9596
  store i32 %29, i32* %left_conflicts_size, align 4, !dbg !9598
  %30 = load i32, i32* %cover_class, align 4, !dbg !9599
  %idxprom33 = zext i32 %30 to i64, !dbg !9600
  %arrayidx34 = getelementptr inbounds [27 x [87 x i32]], [27 x [87 x i32]]* @ira_reg_class_nregs, i64 0, i64 %idxprom33, !dbg !9600
  %31 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9601
  %mode35 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %31, i32 0, i32 2, !dbg !9601
  %32 = load i32, i32* %mode35, align 8, !dbg !9601
  %idxprom36 = zext i32 %32 to i64, !dbg !9600
  %arrayidx37 = getelementptr inbounds [87 x i32], [87 x i32]* %arrayidx34, i64 0, i64 %idxprom36, !dbg !9600
  %33 = load i32, i32* %arrayidx37, align 4, !dbg !9600
  store i32 %33, i32* %conflict_size, align 4, !dbg !9602
  %34 = load i32, i32* %left_conflicts_size, align 4, !dbg !9603
  %35 = load i32, i32* %conflict_size, align 4, !dbg !9605
  %add = add nsw i32 %34, %35, !dbg !9606
  %36 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9607
  %available_regs_num = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %36, i32 0, i32 38, !dbg !9607
  %37 = load i32, i32* %available_regs_num, align 4, !dbg !9607
  %cmp38 = icmp sle i32 %add, %37, !dbg !9608
  br i1 %cmp38, label %if.then39, label %if.end41, !dbg !9609

if.then39:                                        ; preds = %if.then31
  %38 = load i32, i32* %size, align 4, !dbg !9610
  %39 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9612
  %left_conflicts_size40 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %39, i32 0, i32 37, !dbg !9612
  %40 = load i32, i32* %left_conflicts_size40, align 8, !dbg !9613
  %sub = sub nsw i32 %40, %38, !dbg !9613
  store i32 %sub, i32* %left_conflicts_size40, align 8, !dbg !9613
  br label %for.inc, !dbg !9614

if.end41:                                         ; preds = %if.then31
  %41 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9615
  %left_conflicts_size42 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %41, i32 0, i32 37, !dbg !9615
  %42 = load i32, i32* %left_conflicts_size42, align 8, !dbg !9615
  %43 = load i32, i32* %size, align 4, !dbg !9616
  %sub43 = sub nsw i32 %42, %43, !dbg !9617
  store i32 %sub43, i32* %left_conflicts_size, align 4, !dbg !9618
  %44 = load i32, i32* %cover_class, align 4, !dbg !9619
  %idxprom44 = zext i32 %44 to i64, !dbg !9621
  %arrayidx45 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom44, !dbg !9621
  %45 = load %struct.splay_tree_s*, %struct.splay_tree_s** %arrayidx45, align 8, !dbg !9621
  %cmp46 = icmp ne %struct.splay_tree_s* %45, null, !dbg !9622
  br i1 %cmp46, label %land.lhs.true47, label %if.end64, !dbg !9623

land.lhs.true47:                                  ; preds = %if.end41
  %46 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9624
  %splay_removed_p = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %46, i32 0, i32 31, !dbg !9624
  %bf.load48 = load i16, i16* %splay_removed_p, align 4, !dbg !9624
  %bf.lshr49 = lshr i16 %bf.load48, 10, !dbg !9624
  %bf.clear50 = and i16 %bf.lshr49, 1, !dbg !9624
  %bf.cast51 = zext i16 %bf.clear50 to i32, !dbg !9624
  %tobool52 = icmp ne i32 %bf.cast51, 0, !dbg !9624
  br i1 %tobool52, label %if.end64, label %land.lhs.true53, !dbg !9625

land.lhs.true53:                                  ; preds = %land.lhs.true47
  %47 = load i32, i32* %cover_class, align 4, !dbg !9626
  %idxprom54 = zext i32 %47 to i64, !dbg !9626
  %arrayidx55 = getelementptr inbounds [27 x i32], [27 x i32]* @uncolorable_allocnos_num, i64 0, i64 %idxprom54, !dbg !9626
  %48 = load i32, i32* %arrayidx55, align 4, !dbg !9626
  %cmp56 = icmp sgt i32 %48, 4000, !dbg !9626
  br i1 %cmp56, label %if.then57, label %if.end64, !dbg !9627

if.then57:                                        ; preds = %land.lhs.true53
  %49 = load i32, i32* %cover_class, align 4, !dbg !9628
  %idxprom58 = zext i32 %49 to i64, !dbg !9630
  %arrayidx59 = getelementptr inbounds [27 x %struct.splay_tree_s*], [27 x %struct.splay_tree_s*]* @uncolorable_allocnos_splay_tree, i64 0, i64 %idxprom58, !dbg !9630
  %50 = load %struct.splay_tree_s*, %struct.splay_tree_s** %arrayidx59, align 8, !dbg !9630
  %51 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9631
  %52 = ptrtoint %struct.ira_allocno* %51 to i64, !dbg !9632
  call void @splay_tree_remove(%struct.splay_tree_s* %50, i64 %52), !dbg !9633
  %53 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9634
  %splay_removed_p60 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %53, i32 0, i32 31, !dbg !9634
  %bf.load61 = load i16, i16* %splay_removed_p60, align 4, !dbg !9635
  %bf.clear62 = and i16 %bf.load61, -1025, !dbg !9635
  %bf.set = or i16 %bf.clear62, 1024, !dbg !9635
  store i16 %bf.set, i16* %splay_removed_p60, align 4, !dbg !9635
  %54 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9636
  %call63 = call %struct.ira_allocno** @VEC_ira_allocno_t_heap_safe_push(%struct.VEC_ira_allocno_t_heap** @removed_splay_allocno_vec, %struct.ira_allocno* %54), !dbg !9636
  br label %if.end64, !dbg !9637

if.end64:                                         ; preds = %if.then57, %land.lhs.true53, %land.lhs.true47, %if.end41
  %55 = load i32, i32* %left_conflicts_size, align 4, !dbg !9638
  %56 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9639
  %left_conflicts_size65 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %56, i32 0, i32 37, !dbg !9639
  store i32 %55, i32* %left_conflicts_size65, align 8, !dbg !9640
  %57 = load i32, i32* %left_conflicts_size, align 4, !dbg !9641
  %58 = load i32, i32* %conflict_size, align 4, !dbg !9643
  %add66 = add nsw i32 %57, %58, !dbg !9644
  %59 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9645
  %available_regs_num67 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %59, i32 0, i32 38, !dbg !9645
  %60 = load i32, i32* %available_regs_num67, align 4, !dbg !9645
  %cmp68 = icmp sle i32 %add66, %60, !dbg !9646
  br i1 %cmp68, label %if.then69, label %if.end70, !dbg !9647

if.then69:                                        ; preds = %if.end64
  %61 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9648
  call void @delete_allocno_from_bucket(%struct.ira_allocno* %61, %struct.ira_allocno** @uncolorable_allocno_bucket), !dbg !9650
  %62 = load %struct.ira_allocno*, %struct.ira_allocno** %conflict_allocno, align 8, !dbg !9651
  call void @add_allocno_to_ordered_bucket(%struct.ira_allocno* %62, %struct.ira_allocno** @colorable_allocno_bucket), !dbg !9652
  br label %if.end70, !dbg !9653

if.end70:                                         ; preds = %if.then69, %if.end64
  br label %if.end71, !dbg !9654

if.end71:                                         ; preds = %if.end70, %land.lhs.true, %if.end21
  br label %if.end72, !dbg !9655

if.end72:                                         ; preds = %if.end71, %for.body
  br label %for.inc, !dbg !9656

for.inc:                                          ; preds = %if.end72, %if.then39, %if.then17
  call void @ira_allocno_conflict_iter_next(%struct.ira_allocno_conflict_iterator* %aci), !dbg !9566
  br label %for.cond6, !dbg !9566, !llvm.loop !9657

for.end:                                          ; preds = %for.cond6
  %63 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9659
  %64 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9661
  %cmp73 = icmp eq %struct.ira_allocno* %63, %64, !dbg !9662
  br i1 %cmp73, label %if.then74, label %if.end75, !dbg !9663

if.then74:                                        ; preds = %for.end
  br label %for.end78, !dbg !9664

if.end75:                                         ; preds = %for.end
  br label %for.inc76, !dbg !9665

for.inc76:                                        ; preds = %if.end75
  %65 = load %struct.ira_allocno*, %struct.ira_allocno** %a, align 8, !dbg !9666
  %next_coalesced_allocno77 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %65, i32 0, i32 19, !dbg !9666
  %66 = load %struct.ira_allocno*, %struct.ira_allocno** %next_coalesced_allocno77, align 8, !dbg !9666
  store %struct.ira_allocno* %66, %struct.ira_allocno** %a, align 8, !dbg !9667
  br label %for.cond, !dbg !9668, !llvm.loop !9669

for.end78:                                        ; preds = %if.then, %if.then74
  ret void, !dbg !9672
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_allocno_to_ordered_bucket(%struct.ira_allocno* %allocno, %struct.ira_allocno** %bucket_ptr) #0 !dbg !9673 {
entry:
  %allocno.addr = alloca %struct.ira_allocno*, align 8
  %bucket_ptr.addr = alloca %struct.ira_allocno**, align 8
  %before = alloca %struct.ira_allocno*, align 8
  %after = alloca %struct.ira_allocno*, align 8
  %cover_class = alloca i32, align 4
  store %struct.ira_allocno* %allocno, %struct.ira_allocno** %allocno.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %allocno.addr, metadata !9674, metadata !DIExpression()), !dbg !9675
  store %struct.ira_allocno** %bucket_ptr, %struct.ira_allocno*** %bucket_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ira_allocno*** %bucket_ptr.addr, metadata !9676, metadata !DIExpression()), !dbg !9677
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %before, metadata !9678, metadata !DIExpression()), !dbg !9679
  call void @llvm.dbg.declare(metadata %struct.ira_allocno** %after, metadata !9680, metadata !DIExpression()), !dbg !9681
  call void @llvm.dbg.declare(metadata i32* %cover_class, metadata !9682, metadata !DIExpression()), !dbg !9683
  %0 = load %struct.ira_allocno**, %struct.ira_allocno*** %bucket_ptr.addr, align 8, !dbg !9684
  %cmp = icmp eq %struct.ira_allocno** %0, @uncolorable_allocno_bucket, !dbg !9686
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9687

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9688
  %cover_class1 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %1, i32 0, i32 9, !dbg !9688
  %2 = load i32, i32* %cover_class1, align 8, !dbg !9688
  store i32 %2, i32* %cover_class, align 4, !dbg !9689
  %cmp2 = icmp ne i32 %2, 0, !dbg !9690
  br i1 %cmp2, label %if.then, label %if.end, !dbg !9691

if.then:                                          ; preds = %land.lhs.true
  %3 = load i32, i32* %cover_class, align 4, !dbg !9692
  %idxprom = zext i32 %3 to i64, !dbg !9694
  %arrayidx = getelementptr inbounds [27 x i32], [27 x i32]* @uncolorable_allocnos_num, i64 0, i64 %idxprom, !dbg !9694
  %4 = load i32, i32* %arrayidx, align 4, !dbg !9695
  %inc = add nsw i32 %4, 1, !dbg !9695
  store i32 %inc, i32* %arrayidx, align 4, !dbg !9695
  br label %if.end, !dbg !9696

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load %struct.ira_allocno**, %struct.ira_allocno*** %bucket_ptr.addr, align 8, !dbg !9697
  %6 = load %struct.ira_allocno*, %struct.ira_allocno** %5, align 8, !dbg !9699
  store %struct.ira_allocno* %6, %struct.ira_allocno** %before, align 8, !dbg !9700
  store %struct.ira_allocno* null, %struct.ira_allocno** %after, align 8, !dbg !9701
  br label %for.cond, !dbg !9702

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load %struct.ira_allocno*, %struct.ira_allocno** %before, align 8, !dbg !9703
  %cmp3 = icmp ne %struct.ira_allocno* %7, null, !dbg !9705
  br i1 %cmp3, label %for.body, label %for.end, !dbg !9706

for.body:                                         ; preds = %for.cond
  %8 = bitcast %struct.ira_allocno** %allocno.addr to i8*, !dbg !9707
  %9 = bitcast %struct.ira_allocno** %before to i8*, !dbg !9709
  %call = call i32 @bucket_allocno_compare_func(i8* %8, i8* %9), !dbg !9710
  %cmp4 = icmp slt i32 %call, 0, !dbg !9711
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !9712

if.then5:                                         ; preds = %for.body
  br label %for.end, !dbg !9713

if.end6:                                          ; preds = %for.body
  br label %for.inc, !dbg !9714

for.inc:                                          ; preds = %if.end6
  %10 = load %struct.ira_allocno*, %struct.ira_allocno** %before, align 8, !dbg !9715
  store %struct.ira_allocno* %10, %struct.ira_allocno** %after, align 8, !dbg !9716
  %11 = load %struct.ira_allocno*, %struct.ira_allocno** %before, align 8, !dbg !9717
  %next_bucket_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %11, i32 0, i32 39, !dbg !9717
  %12 = load %struct.ira_allocno*, %struct.ira_allocno** %next_bucket_allocno, align 8, !dbg !9717
  store %struct.ira_allocno* %12, %struct.ira_allocno** %before, align 8, !dbg !9718
  br label %for.cond, !dbg !9719, !llvm.loop !9720

for.end:                                          ; preds = %if.then5, %for.cond
  %13 = load %struct.ira_allocno*, %struct.ira_allocno** %before, align 8, !dbg !9722
  %14 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9723
  %next_bucket_allocno7 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %14, i32 0, i32 39, !dbg !9723
  store %struct.ira_allocno* %13, %struct.ira_allocno** %next_bucket_allocno7, align 8, !dbg !9724
  %15 = load %struct.ira_allocno*, %struct.ira_allocno** %after, align 8, !dbg !9725
  %16 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9726
  %prev_bucket_allocno = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %16, i32 0, i32 40, !dbg !9726
  store %struct.ira_allocno* %15, %struct.ira_allocno** %prev_bucket_allocno, align 8, !dbg !9727
  %17 = load %struct.ira_allocno*, %struct.ira_allocno** %after, align 8, !dbg !9728
  %cmp8 = icmp eq %struct.ira_allocno* %17, null, !dbg !9730
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !9731

if.then9:                                         ; preds = %for.end
  %18 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9732
  %19 = load %struct.ira_allocno**, %struct.ira_allocno*** %bucket_ptr.addr, align 8, !dbg !9733
  store %struct.ira_allocno* %18, %struct.ira_allocno** %19, align 8, !dbg !9734
  br label %if.end11, !dbg !9735

if.else:                                          ; preds = %for.end
  %20 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9736
  %21 = load %struct.ira_allocno*, %struct.ira_allocno** %after, align 8, !dbg !9737
  %next_bucket_allocno10 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %21, i32 0, i32 39, !dbg !9737
  store %struct.ira_allocno* %20, %struct.ira_allocno** %next_bucket_allocno10, align 8, !dbg !9738
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.then9
  %22 = load %struct.ira_allocno*, %struct.ira_allocno** %before, align 8, !dbg !9739
  %cmp12 = icmp ne %struct.ira_allocno* %22, null, !dbg !9741
  br i1 %cmp12, label %if.then13, label %if.end15, !dbg !9742

if.then13:                                        ; preds = %if.end11
  %23 = load %struct.ira_allocno*, %struct.ira_allocno** %allocno.addr, align 8, !dbg !9743
  %24 = load %struct.ira_allocno*, %struct.ira_allocno** %before, align 8, !dbg !9744
  %prev_bucket_allocno14 = getelementptr inbounds %struct.ira_allocno, %struct.ira_allocno* %24, i32 0, i32 40, !dbg !9744
  store %struct.ira_allocno* %23, %struct.ira_allocno** %prev_bucket_allocno14, align 8, !dbg !9745
  br label %if.end15, !dbg !9744

if.end15:                                         ; preds = %if.then13, %if.end11
  ret void, !dbg !9746
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!1979, !1980, !1981}
!llvm.ident = !{!1982}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "sorted_allocnos", scope: !2, file: !3, line: 66, type: !611, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !607, globals: !1863, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "ira-color.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !154, !158, !163, !182, !189, !196, !390, !420, !425, !568, !602}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !146, line: 31, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149, !150, !151, !152, !153}
!148 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!150 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!151 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!152 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!153 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !146, line: 91, baseType: !7, size: 32, elements: !155)
!155 = !{!156, !157}
!156 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!157 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!158 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !159, line: 474, baseType: !7, size: 32, elements: !160)
!159 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!160 = !{!161, !162}
!161 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!162 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!163 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !164, line: 280, baseType: !7, size: 32, elements: !165)
!164 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!165 = !{!166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181}
!166 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!182 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !164, line: 1817, baseType: !7, size: 32, elements: !183)
!183 = !{!184, !185, !186, !187, !188}
!184 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !164, line: 1805, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !164, line: 39, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389}
!198 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!203 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!204 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!205 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!206 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!207 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!208 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!209 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!210 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!213 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!214 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!215 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!216 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!217 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!218 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!219 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!220 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!221 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!222 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!223 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!224 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!225 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!226 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!227 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!228 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!229 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!230 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!231 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!232 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!233 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!234 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!235 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!236 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!237 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!238 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!239 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!240 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!241 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!242 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!243 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!244 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!245 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!246 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!247 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!248 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!249 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!250 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!251 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!252 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!253 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!254 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!255 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!256 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!257 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!258 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!259 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!260 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!261 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!262 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!263 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!264 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!265 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!266 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!267 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!268 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!269 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!270 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!271 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!272 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!273 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!274 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!275 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!276 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!277 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!278 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!280 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!281 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!282 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!283 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!284 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!285 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!286 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!287 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!288 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!289 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!290 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!291 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!292 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!293 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!294 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!295 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!296 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!297 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!298 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!299 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!300 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!301 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!302 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!303 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!304 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!305 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!306 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!307 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!308 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!309 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!310 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!311 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!312 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!313 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!314 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!315 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!316 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!317 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!318 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!320 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!321 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!322 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!323 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!324 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!325 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!326 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!327 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!328 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!329 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!330 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!331 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!332 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!333 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!334 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!335 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!336 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!337 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!338 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!339 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!340 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!341 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!342 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!343 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!344 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!345 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!346 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!347 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!348 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!349 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!350 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!362 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!363 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!364 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!365 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!366 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!367 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!383 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!384 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!385 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!386 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!387 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!388 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!389 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_class", file: !159, line: 1188, baseType: !7, size: 32, elements: !391)
!391 = !{!392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419}
!392 = !DIEnumerator(name: "NO_REGS", value: 0, isUnsigned: true)
!393 = !DIEnumerator(name: "AREG", value: 1, isUnsigned: true)
!394 = !DIEnumerator(name: "DREG", value: 2, isUnsigned: true)
!395 = !DIEnumerator(name: "CREG", value: 3, isUnsigned: true)
!396 = !DIEnumerator(name: "BREG", value: 4, isUnsigned: true)
!397 = !DIEnumerator(name: "SIREG", value: 5, isUnsigned: true)
!398 = !DIEnumerator(name: "DIREG", value: 6, isUnsigned: true)
!399 = !DIEnumerator(name: "AD_REGS", value: 7, isUnsigned: true)
!400 = !DIEnumerator(name: "CLOBBERED_REGS", value: 8, isUnsigned: true)
!401 = !DIEnumerator(name: "Q_REGS", value: 9, isUnsigned: true)
!402 = !DIEnumerator(name: "NON_Q_REGS", value: 10, isUnsigned: true)
!403 = !DIEnumerator(name: "INDEX_REGS", value: 11, isUnsigned: true)
!404 = !DIEnumerator(name: "LEGACY_REGS", value: 12, isUnsigned: true)
!405 = !DIEnumerator(name: "GENERAL_REGS", value: 13, isUnsigned: true)
!406 = !DIEnumerator(name: "FP_TOP_REG", value: 14, isUnsigned: true)
!407 = !DIEnumerator(name: "FP_SECOND_REG", value: 15, isUnsigned: true)
!408 = !DIEnumerator(name: "FLOAT_REGS", value: 16, isUnsigned: true)
!409 = !DIEnumerator(name: "SSE_FIRST_REG", value: 17, isUnsigned: true)
!410 = !DIEnumerator(name: "SSE_REGS", value: 18, isUnsigned: true)
!411 = !DIEnumerator(name: "MMX_REGS", value: 19, isUnsigned: true)
!412 = !DIEnumerator(name: "FP_TOP_SSE_REGS", value: 20, isUnsigned: true)
!413 = !DIEnumerator(name: "FP_SECOND_SSE_REGS", value: 21, isUnsigned: true)
!414 = !DIEnumerator(name: "FLOAT_SSE_REGS", value: 22, isUnsigned: true)
!415 = !DIEnumerator(name: "FLOAT_INT_REGS", value: 23, isUnsigned: true)
!416 = !DIEnumerator(name: "INT_SSE_REGS", value: 24, isUnsigned: true)
!417 = !DIEnumerator(name: "FLOAT_INT_SSE_REGS", value: 25, isUnsigned: true)
!418 = !DIEnumerator(name: "ALL_REGS", value: 26, isUnsigned: true)
!419 = !DIEnumerator(name: "LIM_REG_CLASSES", value: 27, isUnsigned: true)
!420 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ira_algorithm", file: !421, line: 219, baseType: !7, size: 32, elements: !422)
!421 = !DIFile(filename: "./flags.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!422 = !{!423, !424}
!423 = !DIEnumerator(name: "IRA_ALGORITHM_CB", value: 0, isUnsigned: true)
!424 = !DIEnumerator(name: "IRA_ALGORITHM_PRIORITY", value: 1, isUnsigned: true)
!425 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !426, line: 45, baseType: !7, size: 32, elements: !427)
!426 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!427 = !{!428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567}
!428 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!429 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!430 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!431 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!432 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!433 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!434 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!435 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!436 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!437 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!438 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!439 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!440 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!441 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!442 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!443 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!444 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!445 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!446 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!447 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!448 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!449 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!450 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!451 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!452 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!453 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!454 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!455 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!456 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!457 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!458 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!459 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!460 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!461 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!462 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!463 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!464 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!465 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!466 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!467 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!468 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!469 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!470 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!471 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!472 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!473 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!474 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!475 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!476 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!477 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!478 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!479 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!480 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!481 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!482 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!483 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!484 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!485 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!486 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!487 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!488 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!489 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!490 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!491 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!492 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!493 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!494 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!495 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!496 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!497 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!498 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!499 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!500 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!501 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!502 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!503 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!504 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!505 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!506 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!507 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!508 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!509 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!510 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!511 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!512 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!513 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!514 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!515 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!516 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!517 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!518 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!519 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!520 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!521 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!522 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!523 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!524 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!525 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!526 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!527 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!528 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!529 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!530 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!531 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!532 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!533 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!534 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!535 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!536 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!537 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!538 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!539 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!540 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!541 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!542 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!543 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!544 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!545 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!546 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!547 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!548 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!549 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!550 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!551 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!552 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!553 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!554 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!555 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!556 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!557 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!558 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!559 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!560 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!561 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!562 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!563 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!564 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!565 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!566 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!567 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!568 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !426, line: 836, baseType: !7, size: 32, elements: !569)
!569 = !{!570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601}
!570 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!571 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!572 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!573 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!574 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!575 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!576 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!577 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!578 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!579 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!580 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!581 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!582 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!583 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!584 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!585 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!586 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!587 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!588 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!589 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!590 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!591 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!592 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!593 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!594 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!595 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!596 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!597 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!598 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!599 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!600 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!601 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!602 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ira_region", file: !421, line: 228, baseType: !7, size: 32, elements: !603)
!603 = !{!604, !605, !606}
!604 = !DIEnumerator(name: "IRA_REGION_ONE", value: 0, isUnsigned: true)
!605 = !DIEnumerator(name: "IRA_REGION_ALL", value: 1, isUnsigned: true)
!606 = !DIEnumerator(name: "IRA_REGION_MIXED", value: 2, isUnsigned: true)
!607 = !{!608, !609, !611, !622, !1822, !5, !7, !1823, !1017, !1831, !1832, !1794, !1834, !1846, !1847, !1849, !1851, !425, !610, !1852, !1858, !1861, !612, !1862}
!608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !610, size: 64)
!610 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!611 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !612, size: 64)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_allocno_t", file: !613, line: 63, baseType: !614)
!613 = !DIFile(filename: "./ira-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !615, size: 64)
!615 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_allocno", file: !613, line: 232, size: 1984, elements: !616)
!616 = !{!617, !618, !619, !620, !621, !1723, !1724, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1773, !1774, !1775, !1776, !1777, !1788, !1789, !1790, !1791, !1792, !1793, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821}
!617 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !615, file: !613, line: 237, baseType: !610, size: 32)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !615, file: !613, line: 239, baseType: !610, size: 32, offset: 32)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !615, file: !613, line: 242, baseType: !5, size: 32, offset: 64)
!620 = !DIDerivedType(tag: DW_TAG_member, name: "hard_regno", scope: !615, file: !613, line: 249, baseType: !610, size: 32, offset: 96)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !615, file: !613, line: 251, baseType: !622, size: 64, offset: 128)
!622 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !623, line: 50, baseType: !624)
!623 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!624 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !625, size: 64)
!625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !426, line: 240, size: 384, elements: !626)
!626 = !{!627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637}
!627 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !625, file: !426, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!628 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !625, file: !426, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!629 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !625, file: !426, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!630 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !625, file: !426, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !625, file: !426, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !625, file: !426, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!633 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !625, file: !426, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!634 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !625, file: !426, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!635 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !625, file: !426, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!636 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !625, file: !426, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!637 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !625, file: !426, line: 321, baseType: !638, size: 320, offset: 64)
!638 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !426, line: 315, size: 320, elements: !639)
!639 = !{!640, !1690, !1692, !1721, !1722}
!640 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !638, file: !426, line: 316, baseType: !641, size: 64)
!641 = !DICompositeType(tag: DW_TAG_array_type, baseType: !642, size: 64, elements: !660)
!642 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !426, line: 183, baseType: !643)
!643 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !426, line: 166, size: 64, elements: !644)
!644 = !{!645, !646, !647, !651, !652, !662, !663, !675, !678, !741, !1668, !1669, !1680, !1687}
!645 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !643, file: !426, line: 168, baseType: !610, size: 32)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !643, file: !426, line: 169, baseType: !7, size: 32)
!647 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !643, file: !426, line: 170, baseType: !648, size: 64)
!648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !649, size: 64)
!649 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !650)
!650 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!651 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !643, file: !426, line: 171, baseType: !622, size: 64)
!652 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !643, file: !426, line: 172, baseType: !653, size: 64)
!653 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !623, line: 53, baseType: !654)
!654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !655, size: 64)
!655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !426, line: 359, size: 128, elements: !656)
!656 = !{!657, !658}
!657 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !655, file: !426, line: 360, baseType: !610, size: 32)
!658 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !655, file: !426, line: 361, baseType: !659, size: 64, offset: 64)
!659 = !DICompositeType(tag: DW_TAG_array_type, baseType: !622, size: 64, elements: !660)
!660 = !{!661}
!661 = !DISubrange(count: 1)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !643, file: !426, line: 173, baseType: !5, size: 32)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !643, file: !426, line: 174, baseType: !664, size: 32)
!664 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !426, line: 133, baseType: !665)
!665 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !426, line: 115, size: 32, elements: !666)
!666 = !{!667, !668, !669, !670, !671, !672, !673, !674}
!667 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !665, file: !426, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !665, file: !426, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!669 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !665, file: !426, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !665, file: !426, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!671 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !665, file: !426, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!672 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !665, file: !426, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!673 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !665, file: !426, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !665, file: !426, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !643, file: !426, line: 175, baseType: !676, size: 64)
!676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !677, size: 64)
!677 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !426, line: 175, flags: DIFlagFwdDecl)
!678 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !643, file: !426, line: 176, baseType: !679, size: 64)
!679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !680, size: 64)
!680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !681, line: 75, size: 256, elements: !682)
!681 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!682 = !{!683, !698, !699, !700}
!683 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !680, file: !681, line: 76, baseType: !684, size: 64)
!684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !685, size: 64)
!685 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !681, line: 68, baseType: !686)
!686 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !681, line: 63, size: 320, elements: !687)
!687 = !{!688, !690, !691, !692}
!688 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !686, file: !681, line: 64, baseType: !689, size: 64)
!689 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !686, size: 64)
!690 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !686, file: !681, line: 65, baseType: !689, size: 64, offset: 64)
!691 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !686, file: !681, line: 66, baseType: !7, size: 32, offset: 128)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !686, file: !681, line: 67, baseType: !693, size: 128, offset: 192)
!693 = !DICompositeType(tag: DW_TAG_array_type, baseType: !694, size: 128, elements: !696)
!694 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !681, line: 29, baseType: !695)
!695 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!696 = !{!697}
!697 = !DISubrange(count: 2)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !680, file: !681, line: 77, baseType: !684, size: 64, offset: 64)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !680, file: !681, line: 78, baseType: !7, size: 32, offset: 128)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !680, file: !681, line: 79, baseType: !701, size: 64, offset: 192)
!701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !702, size: 64)
!702 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !681, line: 49, baseType: !703)
!703 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !681, line: 45, size: 832, elements: !704)
!704 = !{!705, !706, !707}
!705 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !703, file: !681, line: 46, baseType: !689, size: 64)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !703, file: !681, line: 47, baseType: !679, size: 64, offset: 64)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !703, file: !681, line: 48, baseType: !708, size: 704, offset: 128)
!708 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !709, line: 164, size: 704, elements: !710)
!709 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!710 = !{!711, !713, !724, !725, !726, !727, !728, !729, !733, !737, !738, !739, !740}
!711 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !708, file: !709, line: 166, baseType: !712, size: 64)
!712 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !708, file: !709, line: 167, baseType: !714, size: 64, offset: 64)
!714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !715, size: 64)
!715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !709, line: 157, size: 192, elements: !716)
!716 = !{!717, !719, !720}
!717 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !715, file: !709, line: 159, baseType: !718, size: 64)
!718 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !650, size: 64)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !715, file: !709, line: 160, baseType: !714, size: 64, offset: 64)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !715, file: !709, line: 161, baseType: !721, size: 32, offset: 128)
!721 = !DICompositeType(tag: DW_TAG_array_type, baseType: !650, size: 32, elements: !722)
!722 = !{!723}
!723 = !DISubrange(count: 4)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !708, file: !709, line: 168, baseType: !718, size: 64, offset: 128)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !708, file: !709, line: 169, baseType: !718, size: 64, offset: 192)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !708, file: !709, line: 170, baseType: !718, size: 64, offset: 256)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !708, file: !709, line: 171, baseType: !712, size: 64, offset: 320)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !708, file: !709, line: 172, baseType: !610, size: 32, offset: 384)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !708, file: !709, line: 176, baseType: !730, size: 64, offset: 448)
!730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !731, size: 64)
!731 = !DISubroutineType(types: !732)
!732 = !{!714, !608, !712}
!733 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !708, file: !709, line: 177, baseType: !734, size: 64, offset: 512)
!734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !735, size: 64)
!735 = !DISubroutineType(types: !736)
!736 = !{null, !608, !714}
!737 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !708, file: !709, line: 178, baseType: !608, size: 64, offset: 576)
!738 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !708, file: !709, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !708, file: !709, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !708, file: !709, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !643, file: !426, line: 177, baseType: !742, size: 64)
!742 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !623, line: 56, baseType: !743)
!743 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !744, size: 64)
!744 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !164, line: 3371, size: 1792, elements: !745)
!745 = !{!746, !779, !785, !796, !815, !826, !831, !838, !844, !858, !870, !908, !913, !941, !949, !950, !955, !964, !970, !975, !979, !983, !1295, !1344, !1350, !1357, !1364, !1387, !1412, !1429, !1441, !1463, !1478, !1650}
!746 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !744, file: !164, line: 3372, baseType: !747, size: 64)
!747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !164, line: 360, size: 64, elements: !748)
!748 = !{!749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778}
!749 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !747, file: !164, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !747, file: !164, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!751 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !747, file: !164, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !747, file: !164, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!753 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !747, file: !164, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !747, file: !164, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !747, file: !164, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!756 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !747, file: !164, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !747, file: !164, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!758 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !747, file: !164, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !747, file: !164, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !747, file: !164, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !747, file: !164, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !747, file: !164, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !747, file: !164, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !747, file: !164, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !747, file: !164, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !747, file: !164, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !747, file: !164, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !747, file: !164, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !747, file: !164, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !747, file: !164, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !747, file: !164, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !747, file: !164, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !747, file: !164, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !747, file: !164, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !747, file: !164, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !747, file: !164, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !747, file: !164, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !747, file: !164, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !744, file: !164, line: 3373, baseType: !780, size: 192)
!780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !164, line: 402, size: 192, elements: !781)
!781 = !{!782, !783, !784}
!782 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !780, file: !164, line: 403, baseType: !747, size: 64)
!783 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !780, file: !164, line: 404, baseType: !742, size: 64, offset: 64)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !780, file: !164, line: 405, baseType: !742, size: 64, offset: 128)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !744, file: !164, line: 3374, baseType: !786, size: 320)
!786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !164, line: 1384, size: 320, elements: !787)
!787 = !{!788, !789}
!788 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !786, file: !164, line: 1385, baseType: !780, size: 192)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !786, file: !164, line: 1386, baseType: !790, size: 128, offset: 192)
!790 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !791, line: 58, baseType: !792)
!791 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!792 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !791, line: 54, size: 128, elements: !793)
!793 = !{!794, !795}
!794 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !792, file: !791, line: 56, baseType: !695, size: 64)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !792, file: !791, line: 57, baseType: !712, size: 64, offset: 64)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !744, file: !164, line: 3375, baseType: !797, size: 256)
!797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !164, line: 1397, size: 256, elements: !798)
!798 = !{!799, !800}
!799 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !797, file: !164, line: 1398, baseType: !780, size: 192)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !797, file: !164, line: 1399, baseType: !801, size: 64, offset: 192)
!801 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !802, size: 64)
!802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !803, line: 52, size: 256, elements: !804)
!803 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!804 = !{!805, !806, !807, !808, !809, !810, !811}
!805 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !802, file: !803, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!806 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !802, file: !803, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !802, file: !803, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !802, file: !803, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !802, file: !803, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !802, file: !803, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !802, file: !803, line: 62, baseType: !812, size: 192, offset: 64)
!812 = !DICompositeType(tag: DW_TAG_array_type, baseType: !695, size: 192, elements: !813)
!813 = !{!814}
!814 = !DISubrange(count: 3)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !744, file: !164, line: 3376, baseType: !816, size: 256)
!816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !164, line: 1408, size: 256, elements: !817)
!817 = !{!818, !819}
!818 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !816, file: !164, line: 1409, baseType: !780, size: 192)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !816, file: !164, line: 1410, baseType: !820, size: 64, offset: 192)
!820 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !821, size: 64)
!821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !822, line: 27, size: 192, elements: !823)
!822 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!823 = !{!824, !825}
!824 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !821, file: !822, line: 29, baseType: !790, size: 128)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !821, file: !822, line: 30, baseType: !5, size: 32, offset: 128)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !744, file: !164, line: 3377, baseType: !827, size: 256)
!827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !164, line: 1437, size: 256, elements: !828)
!828 = !{!829, !830}
!829 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !827, file: !164, line: 1438, baseType: !780, size: 192)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !827, file: !164, line: 1439, baseType: !742, size: 64, offset: 192)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !744, file: !164, line: 3378, baseType: !832, size: 256)
!832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !164, line: 1418, size: 256, elements: !833)
!833 = !{!834, !835, !836}
!834 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !832, file: !164, line: 1419, baseType: !780, size: 192)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !832, file: !164, line: 1420, baseType: !610, size: 32, offset: 192)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !832, file: !164, line: 1421, baseType: !837, size: 8, offset: 224)
!837 = !DICompositeType(tag: DW_TAG_array_type, baseType: !650, size: 8, elements: !660)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !744, file: !164, line: 3379, baseType: !839, size: 320)
!839 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !164, line: 1428, size: 320, elements: !840)
!840 = !{!841, !842, !843}
!841 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !839, file: !164, line: 1429, baseType: !780, size: 192)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !839, file: !164, line: 1430, baseType: !742, size: 64, offset: 192)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !839, file: !164, line: 1431, baseType: !742, size: 64, offset: 256)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !744, file: !164, line: 3380, baseType: !845, size: 320)
!845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !164, line: 1460, size: 320, elements: !846)
!846 = !{!847, !848}
!847 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !845, file: !164, line: 1461, baseType: !780, size: 192)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !845, file: !164, line: 1462, baseType: !849, size: 128, offset: 192)
!849 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !850, line: 31, size: 128, elements: !851)
!850 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!851 = !{!852, !856, !857}
!852 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !849, file: !850, line: 32, baseType: !853, size: 64)
!853 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !854, size: 64)
!854 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !855)
!855 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !849, file: !850, line: 33, baseType: !7, size: 32, offset: 64)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !849, file: !850, line: 34, baseType: !7, size: 32, offset: 96)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !744, file: !164, line: 3381, baseType: !859, size: 384)
!859 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !164, line: 2507, size: 384, elements: !860)
!860 = !{!861, !862, !867, !868, !869}
!861 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !859, file: !164, line: 2508, baseType: !780, size: 192)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !859, file: !164, line: 2509, baseType: !863, size: 32, offset: 192)
!863 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !864, line: 58, baseType: !865)
!864 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!865 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !866, line: 44, baseType: !7)
!866 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!867 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !859, file: !164, line: 2510, baseType: !7, size: 32, offset: 224)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !859, file: !164, line: 2511, baseType: !742, size: 64, offset: 256)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !859, file: !164, line: 2512, baseType: !742, size: 64, offset: 320)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !744, file: !164, line: 3382, baseType: !871, size: 896)
!871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !164, line: 2652, size: 896, elements: !872)
!872 = !{!873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905}
!873 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !871, file: !164, line: 2653, baseType: !859, size: 384)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !871, file: !164, line: 2654, baseType: !742, size: 64, offset: 384)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !871, file: !164, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !871, file: !164, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !871, file: !164, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !871, file: !164, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !871, file: !164, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !871, file: !164, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !871, file: !164, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !871, file: !164, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !871, file: !164, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !871, file: !164, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !871, file: !164, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !871, file: !164, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !871, file: !164, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !871, file: !164, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !871, file: !164, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !871, file: !164, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !871, file: !164, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !871, file: !164, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !871, file: !164, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !871, file: !164, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !871, file: !164, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !871, file: !164, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !871, file: !164, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !871, file: !164, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !871, file: !164, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !871, file: !164, line: 2703, baseType: !7, size: 32, offset: 512)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !871, file: !164, line: 2705, baseType: !742, size: 64, offset: 576)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !871, file: !164, line: 2706, baseType: !742, size: 64, offset: 640)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !871, file: !164, line: 2707, baseType: !742, size: 64, offset: 704)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !871, file: !164, line: 2708, baseType: !742, size: 64, offset: 768)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !871, file: !164, line: 2711, baseType: !906, size: 64, offset: 832)
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !907, size: 64)
!907 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !164, line: 2711, flags: DIFlagFwdDecl)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !744, file: !164, line: 3383, baseType: !909, size: 960)
!909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !164, line: 2756, size: 960, elements: !910)
!910 = !{!911, !912}
!911 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !909, file: !164, line: 2757, baseType: !871, size: 896)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !909, file: !164, line: 2758, baseType: !622, size: 64, offset: 896)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !744, file: !164, line: 3384, baseType: !914, size: 1472)
!914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !164, line: 3114, size: 1472, elements: !915)
!915 = !{!916, !937, !938, !939, !940}
!916 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !914, file: !164, line: 3115, baseType: !917, size: 1216)
!917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !164, line: 2984, size: 1216, elements: !918)
!918 = !{!919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936}
!919 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !917, file: !164, line: 2985, baseType: !909, size: 960)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !917, file: !164, line: 2986, baseType: !742, size: 64, offset: 960)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !917, file: !164, line: 2987, baseType: !742, size: 64, offset: 1024)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !917, file: !164, line: 2988, baseType: !742, size: 64, offset: 1088)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !917, file: !164, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !917, file: !164, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !917, file: !164, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !917, file: !164, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !917, file: !164, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !917, file: !164, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !917, file: !164, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !917, file: !164, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !917, file: !164, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !917, file: !164, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !917, file: !164, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !917, file: !164, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !917, file: !164, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !917, file: !164, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !914, file: !164, line: 3117, baseType: !742, size: 64, offset: 1216)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !914, file: !164, line: 3119, baseType: !742, size: 64, offset: 1280)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !914, file: !164, line: 3121, baseType: !742, size: 64, offset: 1344)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !914, file: !164, line: 3123, baseType: !742, size: 64, offset: 1408)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !744, file: !164, line: 3385, baseType: !942, size: 1088)
!942 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !164, line: 2874, size: 1088, elements: !943)
!943 = !{!944, !945, !946}
!944 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !942, file: !164, line: 2875, baseType: !909, size: 960)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !942, file: !164, line: 2876, baseType: !622, size: 64, offset: 960)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !942, file: !164, line: 2877, baseType: !947, size: 64, offset: 1024)
!947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !948, size: 64)
!948 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !164, line: 2856, flags: DIFlagFwdDecl)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !744, file: !164, line: 3386, baseType: !917, size: 1216)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !744, file: !164, line: 3387, baseType: !951, size: 1280)
!951 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !164, line: 3093, size: 1280, elements: !952)
!952 = !{!953, !954}
!953 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !951, file: !164, line: 3094, baseType: !917, size: 1216)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !951, file: !164, line: 3095, baseType: !947, size: 64, offset: 1216)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !744, file: !164, line: 3388, baseType: !956, size: 1216)
!956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !164, line: 2824, size: 1216, elements: !957)
!957 = !{!958, !959, !960, !961, !962, !963}
!958 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !956, file: !164, line: 2825, baseType: !871, size: 896)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !956, file: !164, line: 2827, baseType: !742, size: 64, offset: 896)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !956, file: !164, line: 2828, baseType: !742, size: 64, offset: 960)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !956, file: !164, line: 2829, baseType: !742, size: 64, offset: 1024)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !956, file: !164, line: 2830, baseType: !742, size: 64, offset: 1088)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !956, file: !164, line: 2831, baseType: !742, size: 64, offset: 1152)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !744, file: !164, line: 3389, baseType: !965, size: 1024)
!965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !164, line: 2850, size: 1024, elements: !966)
!966 = !{!967, !968, !969}
!967 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !965, file: !164, line: 2851, baseType: !909, size: 960)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !965, file: !164, line: 2852, baseType: !610, size: 32, offset: 960)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !965, file: !164, line: 2853, baseType: !610, size: 32, offset: 992)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !744, file: !164, line: 3390, baseType: !971, size: 1024)
!971 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !164, line: 2857, size: 1024, elements: !972)
!972 = !{!973, !974}
!973 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !971, file: !164, line: 2858, baseType: !909, size: 960)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !971, file: !164, line: 2859, baseType: !947, size: 64, offset: 960)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !744, file: !164, line: 3391, baseType: !976, size: 960)
!976 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !164, line: 2862, size: 960, elements: !977)
!977 = !{!978}
!978 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !976, file: !164, line: 2863, baseType: !909, size: 960)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !744, file: !164, line: 3392, baseType: !980, size: 1472)
!980 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !164, line: 3304, size: 1472, elements: !981)
!981 = !{!982}
!982 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !980, file: !164, line: 3305, baseType: !914, size: 1472)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !744, file: !164, line: 3393, baseType: !984, size: 1792)
!984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !164, line: 3248, size: 1792, elements: !985)
!985 = !{!986, !987, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294}
!986 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !984, file: !164, line: 3249, baseType: !914, size: 1472)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !984, file: !164, line: 3251, baseType: !988, size: 64, offset: 1472)
!988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !989, size: 64)
!989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !990, line: 463, size: 1152, elements: !991)
!990 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!991 = !{!992, !995, !1155, !1156, !1159, !1218, !1219, !1220, !1221, !1222, !1223, !1247, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273}
!992 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !989, file: !990, line: 464, baseType: !993, size: 64)
!993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !994, size: 64)
!994 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !990, line: 464, flags: DIFlagFwdDecl)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !989, file: !990, line: 467, baseType: !996, size: 64, offset: 64)
!996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !997, size: 64)
!997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !998)
!998 = !{!999, !1130, !1131, !1144, !1145, !1146, !1147, !1148, !1149, !1151, !1153, !1154}
!999 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !997, file: !135, line: 377, baseType: !1000, size: 64)
!1000 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !623, line: 111, baseType: !1001)
!1001 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1002, size: 64)
!1002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !1003)
!1003 = !{!1004, !1039, !1040, !1041, !1100, !1104, !1105, !1106, !1124, !1125, !1126, !1127, !1128, !1129}
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1002, file: !135, line: 219, baseType: !1005, size: 64)
!1005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1006, size: 64)
!1006 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !1007)
!1007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !1008)
!1008 = !{!1009}
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1007, file: !135, line: 151, baseType: !1010, size: 128)
!1010 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !1011)
!1011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !1012)
!1012 = !{!1013, !1014, !1015}
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1011, file: !135, line: 150, baseType: !7, size: 32)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1011, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1011, file: !135, line: 150, baseType: !1016, size: 64, offset: 64)
!1016 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1017, size: 64, elements: !660)
!1017 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !623, line: 108, baseType: !1018)
!1018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1019, size: 64)
!1019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !1020)
!1020 = !{!1021, !1022, !1023, !1031, !1032, !1033, !1034, !1035, !1036, !1037}
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1019, file: !135, line: 124, baseType: !1001, size: 64)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1019, file: !135, line: 125, baseType: !1001, size: 64, offset: 64)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1019, file: !135, line: 131, baseType: !1024, size: 64, offset: 128)
!1024 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !1025)
!1025 = !{!1026, !1030}
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1024, file: !135, line: 129, baseType: !1027, size: 64)
!1027 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !623, line: 66, baseType: !1028)
!1028 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1029, size: 64)
!1029 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !623, line: 65, flags: DIFlagFwdDecl)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1024, file: !135, line: 130, baseType: !622, size: 64)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1019, file: !135, line: 134, baseType: !608, size: 64, offset: 192)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1019, file: !135, line: 137, baseType: !742, size: 64, offset: 256)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1019, file: !135, line: 138, baseType: !863, size: 32, offset: 320)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1019, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1019, file: !135, line: 144, baseType: !610, size: 32, offset: 384)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1019, file: !135, line: 145, baseType: !610, size: 32, offset: 416)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1019, file: !135, line: 146, baseType: !1038, size: 64, offset: 448)
!1038 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !712)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1002, file: !135, line: 220, baseType: !1005, size: 64, offset: 64)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1002, file: !135, line: 223, baseType: !608, size: 64, offset: 128)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1002, file: !135, line: 226, baseType: !1042, size: 64, offset: 192)
!1042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1043, size: 64)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !146, line: 100, size: 1216, elements: !1044)
!1044 = !{!1045, !1046, !1047, !1048, !1049, !1054, !1055, !1056, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1090, !1098, !1099}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1043, file: !146, line: 102, baseType: !610, size: 32)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1043, file: !146, line: 105, baseType: !7, size: 32, offset: 32)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1043, file: !146, line: 108, baseType: !1001, size: 64, offset: 64)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1043, file: !146, line: 111, baseType: !1001, size: 64, offset: 128)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1043, file: !146, line: 114, baseType: !1050, size: 64, offset: 192)
!1050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !146, line: 41, size: 64, elements: !1051)
!1051 = !{!1052, !1053}
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1050, file: !146, line: 42, baseType: !145, size: 32)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1050, file: !146, line: 43, baseType: !7, size: 32, offset: 32)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1043, file: !146, line: 117, baseType: !7, size: 32, offset: 256)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1043, file: !146, line: 120, baseType: !7, size: 32, offset: 288)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1043, file: !146, line: 123, baseType: !1057, size: 64, offset: 320)
!1057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1058, size: 64)
!1058 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !146, line: 87, baseType: !1059)
!1059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !146, line: 87, size: 128, elements: !1060)
!1060 = !{!1061}
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1059, file: !146, line: 87, baseType: !1062, size: 128)
!1062 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !146, line: 85, baseType: !1063)
!1063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !146, line: 85, size: 128, elements: !1064)
!1064 = !{!1065, !1066, !1067}
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1063, file: !146, line: 85, baseType: !7, size: 32)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1063, file: !146, line: 85, baseType: !7, size: 32, offset: 32)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1063, file: !146, line: 85, baseType: !1068, size: 64, offset: 64)
!1068 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1069, size: 64, elements: !660)
!1069 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !146, line: 84, baseType: !1042)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1043, file: !146, line: 126, baseType: !1042, size: 64, offset: 384)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1043, file: !146, line: 129, baseType: !1042, size: 64, offset: 448)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1043, file: !146, line: 132, baseType: !608, size: 64, offset: 512)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1043, file: !146, line: 139, baseType: !742, size: 64, offset: 576)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1043, file: !146, line: 143, baseType: !790, size: 128, offset: 640)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1043, file: !146, line: 146, baseType: !790, size: 128, offset: 768)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1043, file: !146, line: 148, baseType: !855, size: 8, offset: 896)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1043, file: !146, line: 149, baseType: !855, size: 8, offset: 904)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1043, file: !146, line: 153, baseType: !154, size: 32, offset: 928)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1043, file: !146, line: 156, baseType: !1080, size: 64, offset: 960)
!1080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1081, size: 64)
!1081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !146, line: 48, size: 320, elements: !1082)
!1082 = !{!1083, !1087, !1088, !1089}
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1081, file: !146, line: 50, baseType: !1084, size: 64)
!1084 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !623, line: 58, baseType: !1085)
!1085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1086, size: 64)
!1086 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !623, line: 57, flags: DIFlagFwdDecl)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1081, file: !146, line: 59, baseType: !790, size: 128, offset: 64)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1081, file: !146, line: 64, baseType: !855, size: 8, offset: 192)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1081, file: !146, line: 67, baseType: !1080, size: 64, offset: 256)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1043, file: !146, line: 159, baseType: !1091, size: 64, offset: 1024)
!1091 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1092, size: 64)
!1092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !146, line: 72, size: 256, elements: !1093)
!1093 = !{!1094, !1095, !1096, !1097}
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1092, file: !146, line: 74, baseType: !1018, size: 64)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1092, file: !146, line: 77, baseType: !1091, size: 64, offset: 64)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1092, file: !146, line: 78, baseType: !1091, size: 64, offset: 128)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1092, file: !146, line: 81, baseType: !1091, size: 64, offset: 192)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1043, file: !146, line: 162, baseType: !855, size: 8, offset: 1088)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1043, file: !146, line: 166, baseType: !742, size: 64, offset: 1152)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1002, file: !135, line: 229, baseType: !1101, size: 128, offset: 256)
!1101 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1102, size: 128, elements: !696)
!1102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1103, size: 64)
!1103 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1002, file: !135, line: 232, baseType: !1001, size: 64, offset: 384)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1002, file: !135, line: 233, baseType: !1001, size: 64, offset: 448)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1002, file: !135, line: 238, baseType: !1107, size: 64, offset: 512)
!1107 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !1108)
!1108 = !{!1109, !1115}
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1107, file: !135, line: 236, baseType: !1110, size: 64)
!1110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1111, size: 64)
!1111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !1112)
!1112 = !{!1113, !1114}
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1111, file: !135, line: 275, baseType: !1027, size: 64)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1111, file: !135, line: 278, baseType: !1027, size: 64, offset: 64)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1107, file: !135, line: 237, baseType: !1116, size: 64)
!1116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1117, size: 64)
!1117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !1118)
!1118 = !{!1119, !1120, !1121, !1122, !1123}
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1117, file: !135, line: 261, baseType: !622, size: 64)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1117, file: !135, line: 262, baseType: !622, size: 64, offset: 64)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1117, file: !135, line: 266, baseType: !622, size: 64, offset: 128)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1117, file: !135, line: 267, baseType: !622, size: 64, offset: 192)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1117, file: !135, line: 270, baseType: !610, size: 32, offset: 256)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1002, file: !135, line: 241, baseType: !1038, size: 64, offset: 576)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1002, file: !135, line: 244, baseType: !610, size: 32, offset: 640)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1002, file: !135, line: 247, baseType: !610, size: 32, offset: 672)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1002, file: !135, line: 250, baseType: !610, size: 32, offset: 704)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1002, file: !135, line: 253, baseType: !610, size: 32, offset: 736)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1002, file: !135, line: 256, baseType: !610, size: 32, offset: 768)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !997, file: !135, line: 378, baseType: !1000, size: 64, offset: 64)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !997, file: !135, line: 381, baseType: !1132, size: 64, offset: 128)
!1132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1133, size: 64)
!1133 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !1134)
!1134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !1135)
!1135 = !{!1136}
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1134, file: !135, line: 282, baseType: !1137, size: 128)
!1137 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !1138)
!1138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !1139)
!1139 = !{!1140, !1141, !1142}
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1138, file: !135, line: 281, baseType: !7, size: 32)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1138, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1138, file: !135, line: 281, baseType: !1143, size: 64, offset: 64)
!1143 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1000, size: 64, elements: !660)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !997, file: !135, line: 384, baseType: !610, size: 32, offset: 192)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !997, file: !135, line: 387, baseType: !610, size: 32, offset: 224)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !997, file: !135, line: 390, baseType: !610, size: 32, offset: 256)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !997, file: !135, line: 394, baseType: !1132, size: 64, offset: 320)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !997, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !997, file: !135, line: 399, baseType: !1150, size: 64, offset: 416)
!1150 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !696)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !997, file: !135, line: 402, baseType: !1152, size: 64, offset: 480)
!1152 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !696)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !997, file: !135, line: 406, baseType: !610, size: 32, offset: 544)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !997, file: !135, line: 409, baseType: !610, size: 32, offset: 576)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !989, file: !990, line: 470, baseType: !1028, size: 64, offset: 128)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !989, file: !990, line: 473, baseType: !1157, size: 64, offset: 192)
!1157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1158, size: 64)
!1158 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !990, line: 166, flags: DIFlagFwdDecl)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !989, file: !990, line: 476, baseType: !1160, size: 64, offset: 256)
!1160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1161, size: 64)
!1161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !146, line: 187, size: 256, elements: !1162)
!1162 = !{!1163, !1164, !1165, !1217}
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1161, file: !146, line: 189, baseType: !610, size: 32)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1161, file: !146, line: 192, baseType: !1057, size: 64, offset: 64)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1161, file: !146, line: 197, baseType: !1166, size: 64, offset: 128)
!1166 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1167, line: 144, baseType: !1168)
!1167 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1169, size: 64)
!1169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1167, line: 100, size: 896, elements: !1170)
!1170 = !{!1171, !1179, !1184, !1189, !1191, !1194, !1195, !1196, !1197, !1198, !1203, !1205, !1206, !1211, !1216}
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1169, file: !1167, line: 102, baseType: !1172, size: 64)
!1172 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1167, line: 52, baseType: !1173)
!1173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1174, size: 64)
!1174 = !DISubroutineType(types: !1175)
!1175 = !{!1176, !1177}
!1176 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1167, line: 47, baseType: !7)
!1177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1178, size: 64)
!1178 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1169, file: !1167, line: 105, baseType: !1180, size: 64, offset: 64)
!1180 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1167, line: 59, baseType: !1181)
!1181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1182, size: 64)
!1182 = !DISubroutineType(types: !1183)
!1183 = !{!610, !1177, !1177}
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1169, file: !1167, line: 108, baseType: !1185, size: 64, offset: 128)
!1185 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1167, line: 63, baseType: !1186)
!1186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1187, size: 64)
!1187 = !DISubroutineType(types: !1188)
!1188 = !{null, !608}
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1169, file: !1167, line: 111, baseType: !1190, size: 64, offset: 192)
!1190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !608, size: 64)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1169, file: !1167, line: 114, baseType: !1192, size: 64, offset: 256)
!1192 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1193, line: 46, baseType: !695)
!1193 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1169, file: !1167, line: 117, baseType: !1192, size: 64, offset: 320)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1169, file: !1167, line: 120, baseType: !1192, size: 64, offset: 384)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1169, file: !1167, line: 124, baseType: !7, size: 32, offset: 448)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1169, file: !1167, line: 128, baseType: !7, size: 32, offset: 480)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1169, file: !1167, line: 131, baseType: !1199, size: 64, offset: 512)
!1199 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1167, line: 75, baseType: !1200)
!1200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1201, size: 64)
!1201 = !DISubroutineType(types: !1202)
!1202 = !{!608, !1192, !1192}
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1169, file: !1167, line: 132, baseType: !1204, size: 64, offset: 576)
!1204 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1167, line: 78, baseType: !1186)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1169, file: !1167, line: 135, baseType: !608, size: 64, offset: 640)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1169, file: !1167, line: 136, baseType: !1207, size: 64, offset: 704)
!1207 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1167, line: 82, baseType: !1208)
!1208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1209, size: 64)
!1209 = !DISubroutineType(types: !1210)
!1210 = !{!608, !608, !1192, !1192}
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1169, file: !1167, line: 137, baseType: !1212, size: 64, offset: 768)
!1212 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1167, line: 83, baseType: !1213)
!1213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1214, size: 64)
!1214 = !DISubroutineType(types: !1215)
!1215 = !{null, !608, !608}
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1169, file: !1167, line: 141, baseType: !7, size: 32, offset: 832)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1161, file: !146, line: 200, baseType: !1042, size: 64, offset: 192)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !989, file: !990, line: 479, baseType: !1166, size: 64, offset: 320)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !989, file: !990, line: 484, baseType: !742, size: 64, offset: 384)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !989, file: !990, line: 488, baseType: !742, size: 64, offset: 448)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !989, file: !990, line: 493, baseType: !742, size: 64, offset: 512)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !989, file: !990, line: 496, baseType: !742, size: 64, offset: 576)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !989, file: !990, line: 501, baseType: !1224, size: 64, offset: 640)
!1224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1225, size: 64)
!1225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !159, line: 2355, size: 576, elements: !1226)
!1226 = !{!1227, !1230, !1231, !1232, !1233, !1235, !1236, !1241, !1242, !1243, !1244, !1245, !1246}
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1225, file: !159, line: 2356, baseType: !1228, size: 64)
!1228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1229, size: 64)
!1229 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !159, line: 2356, flags: DIFlagFwdDecl)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1225, file: !159, line: 2357, baseType: !648, size: 64, offset: 64)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1225, file: !159, line: 2358, baseType: !610, size: 32, offset: 128)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1225, file: !159, line: 2359, baseType: !610, size: 32, offset: 160)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1225, file: !159, line: 2360, baseType: !1234, size: 128, offset: 192)
!1234 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 128, elements: !722)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1225, file: !159, line: 2364, baseType: !610, size: 32, offset: 320)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1225, file: !159, line: 2367, baseType: !1237, size: 128, offset: 384)
!1237 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !159, line: 2349, size: 128, elements: !1238)
!1238 = !{!1239, !1240}
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1237, file: !159, line: 2351, baseType: !622, size: 64)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1237, file: !159, line: 2352, baseType: !712, size: 64, offset: 64)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1225, file: !159, line: 2371, baseType: !158, size: 32, offset: 512)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1225, file: !159, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1225, file: !159, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1225, file: !159, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1225, file: !159, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1225, file: !159, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !989, file: !990, line: 504, baseType: !1248, size: 64, offset: 704)
!1248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1249, size: 64)
!1249 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !990, line: 504, flags: DIFlagFwdDecl)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !989, file: !990, line: 507, baseType: !1166, size: 64, offset: 768)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !989, file: !990, line: 510, baseType: !610, size: 32, offset: 832)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !989, file: !990, line: 513, baseType: !610, size: 32, offset: 864)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !989, file: !990, line: 516, baseType: !863, size: 32, offset: 896)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !989, file: !990, line: 519, baseType: !863, size: 32, offset: 928)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !989, file: !990, line: 522, baseType: !7, size: 32, offset: 960)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !989, file: !990, line: 523, baseType: !7, size: 32, offset: 992)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !989, file: !990, line: 528, baseType: !648, size: 64, offset: 1024)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !989, file: !990, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !989, file: !990, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !989, file: !990, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !989, file: !990, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !989, file: !990, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !989, file: !990, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !989, file: !990, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !989, file: !990, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !989, file: !990, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !989, file: !990, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !989, file: !990, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !989, file: !990, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !989, file: !990, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !989, file: !990, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !989, file: !990, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !989, file: !990, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !984, file: !164, line: 3254, baseType: !742, size: 64, offset: 1536)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !984, file: !164, line: 3257, baseType: !742, size: 64, offset: 1600)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !984, file: !164, line: 3258, baseType: !742, size: 64, offset: 1664)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !984, file: !164, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !984, file: !164, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !984, file: !164, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !984, file: !164, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !984, file: !164, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !984, file: !164, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !984, file: !164, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !984, file: !164, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !984, file: !164, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !984, file: !164, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !984, file: !164, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !984, file: !164, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !984, file: !164, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !984, file: !164, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !984, file: !164, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !984, file: !164, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !984, file: !164, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !984, file: !164, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !744, file: !164, line: 3394, baseType: !1296, size: 1344)
!1296 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !164, line: 2279, size: 1344, elements: !1297)
!1297 = !{!1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1323, !1324, !1325, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341}
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1296, file: !164, line: 2280, baseType: !780, size: 192)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1296, file: !164, line: 2281, baseType: !742, size: 64, offset: 192)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1296, file: !164, line: 2282, baseType: !742, size: 64, offset: 256)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1296, file: !164, line: 2283, baseType: !742, size: 64, offset: 320)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1296, file: !164, line: 2284, baseType: !742, size: 64, offset: 384)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1296, file: !164, line: 2285, baseType: !7, size: 32, offset: 448)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1296, file: !164, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1296, file: !164, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1296, file: !164, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1296, file: !164, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1296, file: !164, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1296, file: !164, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1296, file: !164, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1296, file: !164, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1296, file: !164, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1296, file: !164, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1296, file: !164, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1296, file: !164, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1296, file: !164, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1296, file: !164, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1296, file: !164, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1296, file: !164, line: 2305, baseType: !7, size: 32, offset: 512)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1296, file: !164, line: 2306, baseType: !1321, size: 32, offset: 544)
!1321 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1322, line: 31, baseType: !610)
!1322 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1296, file: !164, line: 2307, baseType: !742, size: 64, offset: 576)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1296, file: !164, line: 2308, baseType: !742, size: 64, offset: 640)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1296, file: !164, line: 2314, baseType: !1326, size: 64, offset: 704)
!1326 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !164, line: 2309, size: 64, elements: !1327)
!1327 = !{!1328, !1329, !1330}
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1326, file: !164, line: 2310, baseType: !610, size: 32)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1326, file: !164, line: 2311, baseType: !648, size: 64)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1326, file: !164, line: 2312, baseType: !1331, size: 64)
!1331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1332, size: 64)
!1332 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !164, line: 2277, flags: DIFlagFwdDecl)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1296, file: !164, line: 2315, baseType: !742, size: 64, offset: 768)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1296, file: !164, line: 2316, baseType: !742, size: 64, offset: 832)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1296, file: !164, line: 2317, baseType: !742, size: 64, offset: 896)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1296, file: !164, line: 2318, baseType: !742, size: 64, offset: 960)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1296, file: !164, line: 2319, baseType: !742, size: 64, offset: 1024)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1296, file: !164, line: 2320, baseType: !742, size: 64, offset: 1088)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1296, file: !164, line: 2321, baseType: !742, size: 64, offset: 1152)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1296, file: !164, line: 2322, baseType: !742, size: 64, offset: 1216)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1296, file: !164, line: 2324, baseType: !1342, size: 64, offset: 1280)
!1342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1343, size: 64)
!1343 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !164, line: 2324, flags: DIFlagFwdDecl)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !744, file: !164, line: 3395, baseType: !1345, size: 320)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !164, line: 1469, size: 320, elements: !1346)
!1346 = !{!1347, !1348, !1349}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1345, file: !164, line: 1470, baseType: !780, size: 192)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1345, file: !164, line: 1471, baseType: !742, size: 64, offset: 192)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1345, file: !164, line: 1472, baseType: !742, size: 64, offset: 256)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !744, file: !164, line: 3396, baseType: !1351, size: 320)
!1351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !164, line: 1482, size: 320, elements: !1352)
!1352 = !{!1353, !1354, !1355}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1351, file: !164, line: 1483, baseType: !780, size: 192)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1351, file: !164, line: 1484, baseType: !610, size: 32, offset: 192)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1351, file: !164, line: 1485, baseType: !1356, size: 64, offset: 256)
!1356 = !DICompositeType(tag: DW_TAG_array_type, baseType: !742, size: 64, elements: !660)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !744, file: !164, line: 3397, baseType: !1358, size: 384)
!1358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !164, line: 1829, size: 384, elements: !1359)
!1359 = !{!1360, !1361, !1362, !1363}
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1358, file: !164, line: 1830, baseType: !780, size: 192)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1358, file: !164, line: 1831, baseType: !863, size: 32, offset: 192)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1358, file: !164, line: 1832, baseType: !742, size: 64, offset: 256)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1358, file: !164, line: 1835, baseType: !1356, size: 64, offset: 320)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !744, file: !164, line: 3398, baseType: !1365, size: 704)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !164, line: 1898, size: 704, elements: !1366)
!1366 = !{!1367, !1368, !1369, !1370, !1371, !1374}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1365, file: !164, line: 1899, baseType: !780, size: 192)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1365, file: !164, line: 1902, baseType: !742, size: 64, offset: 192)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1365, file: !164, line: 1905, baseType: !1084, size: 64, offset: 256)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1365, file: !164, line: 1908, baseType: !7, size: 32, offset: 320)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1365, file: !164, line: 1911, baseType: !1372, size: 64, offset: 384)
!1372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1373, size: 64)
!1373 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !164, line: 1876, flags: DIFlagFwdDecl)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1365, file: !164, line: 1914, baseType: !1375, size: 256, offset: 448)
!1375 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !164, line: 1883, size: 256, elements: !1376)
!1376 = !{!1377, !1379, !1380, !1385}
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1375, file: !164, line: 1884, baseType: !1378, size: 64)
!1378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1375, size: 64)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1375, file: !164, line: 1885, baseType: !1378, size: 64, offset: 64)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1375, file: !164, line: 1891, baseType: !1381, size: 64, offset: 128)
!1381 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1375, file: !164, line: 1891, size: 64, elements: !1382)
!1382 = !{!1383, !1384}
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1381, file: !164, line: 1891, baseType: !1084, size: 64)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1381, file: !164, line: 1891, baseType: !742, size: 64)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1375, file: !164, line: 1892, baseType: !1386, size: 64, offset: 192)
!1386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !742, size: 64)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !744, file: !164, line: 3399, baseType: !1388, size: 704)
!1388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !164, line: 2008, size: 704, elements: !1389)
!1389 = !{!1390, !1391, !1392, !1393, !1394, !1395, !1407, !1408, !1409, !1410, !1411}
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1388, file: !164, line: 2009, baseType: !780, size: 192)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1388, file: !164, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1388, file: !164, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1388, file: !164, line: 2014, baseType: !863, size: 32, offset: 224)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1388, file: !164, line: 2016, baseType: !742, size: 64, offset: 256)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1388, file: !164, line: 2017, baseType: !1396, size: 64, offset: 320)
!1396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1397, size: 64)
!1397 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !164, line: 183, baseType: !1398)
!1398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !164, line: 183, size: 128, elements: !1399)
!1399 = !{!1400}
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1398, file: !164, line: 183, baseType: !1401, size: 128)
!1401 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !164, line: 182, baseType: !1402)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !164, line: 182, size: 128, elements: !1403)
!1403 = !{!1404, !1405, !1406}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1402, file: !164, line: 182, baseType: !7, size: 32)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1402, file: !164, line: 182, baseType: !7, size: 32, offset: 32)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1402, file: !164, line: 182, baseType: !1356, size: 64, offset: 64)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1388, file: !164, line: 2019, baseType: !742, size: 64, offset: 384)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1388, file: !164, line: 2020, baseType: !742, size: 64, offset: 448)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1388, file: !164, line: 2021, baseType: !742, size: 64, offset: 512)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1388, file: !164, line: 2022, baseType: !742, size: 64, offset: 576)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1388, file: !164, line: 2023, baseType: !742, size: 64, offset: 640)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !744, file: !164, line: 3400, baseType: !1413, size: 832)
!1413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !164, line: 2430, size: 832, elements: !1414)
!1414 = !{!1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424}
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1413, file: !164, line: 2431, baseType: !780, size: 192)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1413, file: !164, line: 2433, baseType: !742, size: 64, offset: 192)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1413, file: !164, line: 2434, baseType: !742, size: 64, offset: 256)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1413, file: !164, line: 2435, baseType: !742, size: 64, offset: 320)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1413, file: !164, line: 2436, baseType: !742, size: 64, offset: 384)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1413, file: !164, line: 2437, baseType: !1396, size: 64, offset: 448)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1413, file: !164, line: 2438, baseType: !742, size: 64, offset: 512)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1413, file: !164, line: 2440, baseType: !742, size: 64, offset: 576)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1413, file: !164, line: 2441, baseType: !742, size: 64, offset: 640)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1413, file: !164, line: 2443, baseType: !1425, size: 128, offset: 704)
!1425 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !164, line: 182, baseType: !1426)
!1426 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !164, line: 182, size: 128, elements: !1427)
!1427 = !{!1428}
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1426, file: !164, line: 182, baseType: !1401, size: 128)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !744, file: !164, line: 3401, baseType: !1430, size: 320)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !164, line: 3327, size: 320, elements: !1431)
!1431 = !{!1432, !1433, !1440}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1430, file: !164, line: 3329, baseType: !780, size: 192)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1430, file: !164, line: 3330, baseType: !1434, size: 64, offset: 192)
!1434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1435, size: 64)
!1435 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !164, line: 3320, size: 192, elements: !1436)
!1436 = !{!1437, !1438, !1439}
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1435, file: !164, line: 3322, baseType: !1434, size: 64)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1435, file: !164, line: 3323, baseType: !1434, size: 64, offset: 64)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1435, file: !164, line: 3324, baseType: !742, size: 64, offset: 128)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1430, file: !164, line: 3331, baseType: !1434, size: 64, offset: 256)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !744, file: !164, line: 3402, baseType: !1442, size: 256)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !164, line: 1540, size: 256, elements: !1443)
!1443 = !{!1444, !1445}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1442, file: !164, line: 1541, baseType: !780, size: 192)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1442, file: !164, line: 1542, baseType: !1446, size: 64, offset: 192)
!1446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1447, size: 64)
!1447 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !164, line: 1538, baseType: !1448)
!1448 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !164, line: 1538, size: 192, elements: !1449)
!1449 = !{!1450}
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1448, file: !164, line: 1538, baseType: !1451, size: 192)
!1451 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !164, line: 1537, baseType: !1452)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !164, line: 1537, size: 192, elements: !1453)
!1453 = !{!1454, !1455, !1456}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1452, file: !164, line: 1537, baseType: !7, size: 32)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1452, file: !164, line: 1537, baseType: !7, size: 32, offset: 32)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1452, file: !164, line: 1537, baseType: !1457, size: 128, offset: 64)
!1457 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1458, size: 128, elements: !660)
!1458 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !164, line: 1535, baseType: !1459)
!1459 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !164, line: 1532, size: 128, elements: !1460)
!1460 = !{!1461, !1462}
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1459, file: !164, line: 1533, baseType: !742, size: 64)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1459, file: !164, line: 1534, baseType: !742, size: 64, offset: 64)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !744, file: !164, line: 3403, baseType: !1464, size: 512)
!1464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !164, line: 1938, size: 512, elements: !1465)
!1465 = !{!1466, !1467, !1468, !1469, !1475, !1476, !1477}
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1464, file: !164, line: 1939, baseType: !780, size: 192)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1464, file: !164, line: 1940, baseType: !863, size: 32, offset: 192)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1464, file: !164, line: 1941, baseType: !163, size: 32, offset: 224)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1464, file: !164, line: 1946, baseType: !1470, size: 32, offset: 256)
!1470 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !164, line: 1942, size: 32, elements: !1471)
!1471 = !{!1472, !1473, !1474}
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1470, file: !164, line: 1943, baseType: !182, size: 32)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1470, file: !164, line: 1944, baseType: !189, size: 32)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1470, file: !164, line: 1945, baseType: !196, size: 32)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1464, file: !164, line: 1950, baseType: !1027, size: 64, offset: 320)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1464, file: !164, line: 1951, baseType: !1027, size: 64, offset: 384)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1464, file: !164, line: 1953, baseType: !1356, size: 64, offset: 448)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !744, file: !164, line: 3404, baseType: !1479, size: 1664)
!1479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !164, line: 3337, size: 1664, elements: !1480)
!1480 = !{!1481, !1482}
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1479, file: !164, line: 3338, baseType: !780, size: 192)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1479, file: !164, line: 3341, baseType: !1483, size: 1472, offset: 192)
!1483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1484, line: 410, size: 1472, elements: !1485)
!1484 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1485 = !{!1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649}
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1483, file: !1484, line: 412, baseType: !610, size: 32)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1483, file: !1484, line: 413, baseType: !610, size: 32, offset: 32)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1483, file: !1484, line: 414, baseType: !610, size: 32, offset: 64)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1483, file: !1484, line: 415, baseType: !610, size: 32, offset: 96)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1483, file: !1484, line: 416, baseType: !610, size: 32, offset: 128)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1483, file: !1484, line: 417, baseType: !610, size: 32, offset: 160)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1483, file: !1484, line: 418, baseType: !855, size: 8, offset: 192)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1483, file: !1484, line: 419, baseType: !855, size: 8, offset: 200)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1483, file: !1484, line: 420, baseType: !1495, size: 8, offset: 208)
!1495 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1483, file: !1484, line: 421, baseType: !1495, size: 8, offset: 216)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1483, file: !1484, line: 422, baseType: !1495, size: 8, offset: 224)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1483, file: !1484, line: 423, baseType: !1495, size: 8, offset: 232)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1483, file: !1484, line: 424, baseType: !1495, size: 8, offset: 240)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1483, file: !1484, line: 425, baseType: !1495, size: 8, offset: 248)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1483, file: !1484, line: 426, baseType: !1495, size: 8, offset: 256)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1483, file: !1484, line: 427, baseType: !1495, size: 8, offset: 264)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1483, file: !1484, line: 428, baseType: !1495, size: 8, offset: 272)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1483, file: !1484, line: 429, baseType: !1495, size: 8, offset: 280)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1483, file: !1484, line: 430, baseType: !1495, size: 8, offset: 288)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1483, file: !1484, line: 431, baseType: !1495, size: 8, offset: 296)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1483, file: !1484, line: 432, baseType: !1495, size: 8, offset: 304)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1483, file: !1484, line: 433, baseType: !1495, size: 8, offset: 312)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1483, file: !1484, line: 434, baseType: !1495, size: 8, offset: 320)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1483, file: !1484, line: 435, baseType: !1495, size: 8, offset: 328)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1483, file: !1484, line: 436, baseType: !1495, size: 8, offset: 336)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1483, file: !1484, line: 437, baseType: !1495, size: 8, offset: 344)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1483, file: !1484, line: 438, baseType: !1495, size: 8, offset: 352)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1483, file: !1484, line: 439, baseType: !1495, size: 8, offset: 360)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1483, file: !1484, line: 440, baseType: !1495, size: 8, offset: 368)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1483, file: !1484, line: 441, baseType: !1495, size: 8, offset: 376)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1483, file: !1484, line: 442, baseType: !1495, size: 8, offset: 384)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1483, file: !1484, line: 443, baseType: !1495, size: 8, offset: 392)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1483, file: !1484, line: 444, baseType: !1495, size: 8, offset: 400)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1483, file: !1484, line: 445, baseType: !1495, size: 8, offset: 408)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1483, file: !1484, line: 446, baseType: !1495, size: 8, offset: 416)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1483, file: !1484, line: 447, baseType: !1495, size: 8, offset: 424)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1483, file: !1484, line: 448, baseType: !1495, size: 8, offset: 432)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1483, file: !1484, line: 449, baseType: !1495, size: 8, offset: 440)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1483, file: !1484, line: 450, baseType: !1495, size: 8, offset: 448)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1483, file: !1484, line: 451, baseType: !1495, size: 8, offset: 456)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1483, file: !1484, line: 452, baseType: !1495, size: 8, offset: 464)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1483, file: !1484, line: 453, baseType: !1495, size: 8, offset: 472)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1483, file: !1484, line: 454, baseType: !1495, size: 8, offset: 480)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1483, file: !1484, line: 455, baseType: !1495, size: 8, offset: 488)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1483, file: !1484, line: 456, baseType: !1495, size: 8, offset: 496)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1483, file: !1484, line: 457, baseType: !1495, size: 8, offset: 504)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1483, file: !1484, line: 458, baseType: !1495, size: 8, offset: 512)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1483, file: !1484, line: 459, baseType: !1495, size: 8, offset: 520)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1483, file: !1484, line: 460, baseType: !1495, size: 8, offset: 528)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1483, file: !1484, line: 461, baseType: !1495, size: 8, offset: 536)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1483, file: !1484, line: 462, baseType: !1495, size: 8, offset: 544)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1483, file: !1484, line: 463, baseType: !1495, size: 8, offset: 552)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1483, file: !1484, line: 464, baseType: !1495, size: 8, offset: 560)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1483, file: !1484, line: 465, baseType: !1495, size: 8, offset: 568)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1483, file: !1484, line: 466, baseType: !1495, size: 8, offset: 576)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1483, file: !1484, line: 467, baseType: !1495, size: 8, offset: 584)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1483, file: !1484, line: 468, baseType: !1495, size: 8, offset: 592)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1483, file: !1484, line: 469, baseType: !1495, size: 8, offset: 600)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1483, file: !1484, line: 470, baseType: !1495, size: 8, offset: 608)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1483, file: !1484, line: 471, baseType: !1495, size: 8, offset: 616)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1483, file: !1484, line: 472, baseType: !1495, size: 8, offset: 624)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1483, file: !1484, line: 473, baseType: !1495, size: 8, offset: 632)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1483, file: !1484, line: 474, baseType: !1495, size: 8, offset: 640)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1483, file: !1484, line: 475, baseType: !1495, size: 8, offset: 648)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1483, file: !1484, line: 476, baseType: !1495, size: 8, offset: 656)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1483, file: !1484, line: 477, baseType: !1495, size: 8, offset: 664)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1483, file: !1484, line: 478, baseType: !1495, size: 8, offset: 672)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1483, file: !1484, line: 479, baseType: !1495, size: 8, offset: 680)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1483, file: !1484, line: 480, baseType: !1495, size: 8, offset: 688)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1483, file: !1484, line: 481, baseType: !1495, size: 8, offset: 696)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1483, file: !1484, line: 482, baseType: !1495, size: 8, offset: 704)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1483, file: !1484, line: 483, baseType: !1495, size: 8, offset: 712)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1483, file: !1484, line: 484, baseType: !1495, size: 8, offset: 720)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1483, file: !1484, line: 485, baseType: !1495, size: 8, offset: 728)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1483, file: !1484, line: 486, baseType: !1495, size: 8, offset: 736)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1483, file: !1484, line: 487, baseType: !1495, size: 8, offset: 744)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1483, file: !1484, line: 488, baseType: !1495, size: 8, offset: 752)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1483, file: !1484, line: 489, baseType: !1495, size: 8, offset: 760)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1483, file: !1484, line: 490, baseType: !1495, size: 8, offset: 768)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1483, file: !1484, line: 491, baseType: !1495, size: 8, offset: 776)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1483, file: !1484, line: 492, baseType: !1495, size: 8, offset: 784)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1483, file: !1484, line: 493, baseType: !1495, size: 8, offset: 792)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1483, file: !1484, line: 494, baseType: !1495, size: 8, offset: 800)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1483, file: !1484, line: 495, baseType: !1495, size: 8, offset: 808)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1483, file: !1484, line: 496, baseType: !1495, size: 8, offset: 816)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1483, file: !1484, line: 497, baseType: !1495, size: 8, offset: 824)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1483, file: !1484, line: 498, baseType: !1495, size: 8, offset: 832)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1483, file: !1484, line: 499, baseType: !1495, size: 8, offset: 840)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1483, file: !1484, line: 500, baseType: !1495, size: 8, offset: 848)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1483, file: !1484, line: 501, baseType: !1495, size: 8, offset: 856)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1483, file: !1484, line: 502, baseType: !1495, size: 8, offset: 864)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1483, file: !1484, line: 503, baseType: !1495, size: 8, offset: 872)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1483, file: !1484, line: 504, baseType: !1495, size: 8, offset: 880)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1483, file: !1484, line: 505, baseType: !1495, size: 8, offset: 888)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1483, file: !1484, line: 506, baseType: !1495, size: 8, offset: 896)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1483, file: !1484, line: 507, baseType: !1495, size: 8, offset: 904)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1483, file: !1484, line: 508, baseType: !1495, size: 8, offset: 912)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1483, file: !1484, line: 509, baseType: !1495, size: 8, offset: 920)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1483, file: !1484, line: 510, baseType: !1495, size: 8, offset: 928)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1483, file: !1484, line: 511, baseType: !1495, size: 8, offset: 936)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1483, file: !1484, line: 512, baseType: !1495, size: 8, offset: 944)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1483, file: !1484, line: 513, baseType: !1495, size: 8, offset: 952)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1483, file: !1484, line: 514, baseType: !1495, size: 8, offset: 960)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1483, file: !1484, line: 515, baseType: !1495, size: 8, offset: 968)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1483, file: !1484, line: 516, baseType: !1495, size: 8, offset: 976)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1483, file: !1484, line: 517, baseType: !1495, size: 8, offset: 984)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1483, file: !1484, line: 518, baseType: !1495, size: 8, offset: 992)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1483, file: !1484, line: 519, baseType: !1495, size: 8, offset: 1000)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1483, file: !1484, line: 520, baseType: !1495, size: 8, offset: 1008)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1483, file: !1484, line: 521, baseType: !1495, size: 8, offset: 1016)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1483, file: !1484, line: 522, baseType: !1495, size: 8, offset: 1024)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1483, file: !1484, line: 523, baseType: !1495, size: 8, offset: 1032)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1483, file: !1484, line: 524, baseType: !1495, size: 8, offset: 1040)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1483, file: !1484, line: 525, baseType: !1495, size: 8, offset: 1048)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1483, file: !1484, line: 526, baseType: !1495, size: 8, offset: 1056)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1483, file: !1484, line: 527, baseType: !1495, size: 8, offset: 1064)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1483, file: !1484, line: 528, baseType: !1495, size: 8, offset: 1072)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1483, file: !1484, line: 529, baseType: !1495, size: 8, offset: 1080)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1483, file: !1484, line: 530, baseType: !1495, size: 8, offset: 1088)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1483, file: !1484, line: 531, baseType: !1495, size: 8, offset: 1096)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1483, file: !1484, line: 532, baseType: !1495, size: 8, offset: 1104)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1483, file: !1484, line: 533, baseType: !1495, size: 8, offset: 1112)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1483, file: !1484, line: 534, baseType: !1495, size: 8, offset: 1120)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1483, file: !1484, line: 535, baseType: !1495, size: 8, offset: 1128)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1483, file: !1484, line: 536, baseType: !1495, size: 8, offset: 1136)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1483, file: !1484, line: 537, baseType: !1495, size: 8, offset: 1144)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1483, file: !1484, line: 538, baseType: !1495, size: 8, offset: 1152)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1483, file: !1484, line: 539, baseType: !1495, size: 8, offset: 1160)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1483, file: !1484, line: 540, baseType: !1495, size: 8, offset: 1168)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1483, file: !1484, line: 541, baseType: !1495, size: 8, offset: 1176)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1483, file: !1484, line: 542, baseType: !1495, size: 8, offset: 1184)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1483, file: !1484, line: 543, baseType: !1495, size: 8, offset: 1192)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1483, file: !1484, line: 544, baseType: !1495, size: 8, offset: 1200)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1483, file: !1484, line: 545, baseType: !1495, size: 8, offset: 1208)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1483, file: !1484, line: 546, baseType: !1495, size: 8, offset: 1216)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1483, file: !1484, line: 547, baseType: !1495, size: 8, offset: 1224)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1483, file: !1484, line: 548, baseType: !1495, size: 8, offset: 1232)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1483, file: !1484, line: 549, baseType: !1495, size: 8, offset: 1240)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1483, file: !1484, line: 550, baseType: !1495, size: 8, offset: 1248)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1483, file: !1484, line: 551, baseType: !1495, size: 8, offset: 1256)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1483, file: !1484, line: 552, baseType: !1495, size: 8, offset: 1264)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1483, file: !1484, line: 553, baseType: !1495, size: 8, offset: 1272)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1483, file: !1484, line: 554, baseType: !1495, size: 8, offset: 1280)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1483, file: !1484, line: 555, baseType: !1495, size: 8, offset: 1288)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1483, file: !1484, line: 556, baseType: !1495, size: 8, offset: 1296)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1483, file: !1484, line: 557, baseType: !1495, size: 8, offset: 1304)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1483, file: !1484, line: 558, baseType: !1495, size: 8, offset: 1312)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1483, file: !1484, line: 559, baseType: !1495, size: 8, offset: 1320)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1483, file: !1484, line: 560, baseType: !1495, size: 8, offset: 1328)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1483, file: !1484, line: 561, baseType: !1495, size: 8, offset: 1336)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1483, file: !1484, line: 562, baseType: !1495, size: 8, offset: 1344)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1483, file: !1484, line: 563, baseType: !1495, size: 8, offset: 1352)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1483, file: !1484, line: 564, baseType: !1495, size: 8, offset: 1360)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1483, file: !1484, line: 565, baseType: !1495, size: 8, offset: 1368)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1483, file: !1484, line: 566, baseType: !1495, size: 8, offset: 1376)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1483, file: !1484, line: 567, baseType: !1495, size: 8, offset: 1384)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1483, file: !1484, line: 568, baseType: !1495, size: 8, offset: 1392)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1483, file: !1484, line: 569, baseType: !1495, size: 8, offset: 1400)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1483, file: !1484, line: 570, baseType: !1495, size: 8, offset: 1408)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1483, file: !1484, line: 571, baseType: !1495, size: 8, offset: 1416)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1483, file: !1484, line: 572, baseType: !1495, size: 8, offset: 1424)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1483, file: !1484, line: 573, baseType: !1495, size: 8, offset: 1432)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1483, file: !1484, line: 574, baseType: !1495, size: 8, offset: 1440)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !744, file: !164, line: 3405, baseType: !1651, size: 384)
!1651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !164, line: 3352, size: 384, elements: !1652)
!1652 = !{!1653, !1654}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1651, file: !164, line: 3353, baseType: !780, size: 192)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1651, file: !164, line: 3356, baseType: !1655, size: 192, offset: 192)
!1655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1484, line: 578, size: 192, elements: !1656)
!1656 = !{!1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667}
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1655, file: !1484, line: 580, baseType: !610, size: 32)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1655, file: !1484, line: 581, baseType: !610, size: 32, offset: 32)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1655, file: !1484, line: 582, baseType: !610, size: 32, offset: 64)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1655, file: !1484, line: 583, baseType: !610, size: 32, offset: 96)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1655, file: !1484, line: 584, baseType: !855, size: 8, offset: 128)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1655, file: !1484, line: 585, baseType: !855, size: 8, offset: 136)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1655, file: !1484, line: 586, baseType: !855, size: 8, offset: 144)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1655, file: !1484, line: 587, baseType: !855, size: 8, offset: 152)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1655, file: !1484, line: 588, baseType: !855, size: 8, offset: 160)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1655, file: !1484, line: 589, baseType: !855, size: 8, offset: 168)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1655, file: !1484, line: 590, baseType: !855, size: 8, offset: 176)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !643, file: !426, line: 178, baseType: !1001, size: 64)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !643, file: !426, line: 179, baseType: !1670, size: 64)
!1670 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1671, size: 64)
!1671 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !426, line: 150, baseType: !1672)
!1672 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !426, line: 142, size: 320, elements: !1673)
!1673 = !{!1674, !1675, !1676, !1677, !1678, !1679}
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1672, file: !426, line: 144, baseType: !742, size: 64)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1672, file: !426, line: 145, baseType: !622, size: 64, offset: 64)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1672, file: !426, line: 146, baseType: !622, size: 64, offset: 128)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1672, file: !426, line: 147, baseType: !1321, size: 32, offset: 192)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1672, file: !426, line: 148, baseType: !7, size: 32, offset: 224)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1672, file: !426, line: 149, baseType: !855, size: 8, offset: 256)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !643, file: !426, line: 180, baseType: !1681, size: 64)
!1681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1682, size: 64)
!1682 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !426, line: 162, baseType: !1683)
!1683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !426, line: 159, size: 128, elements: !1684)
!1684 = !{!1685, !1686}
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1683, file: !426, line: 160, baseType: !742, size: 64)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1683, file: !426, line: 161, baseType: !712, size: 64, offset: 64)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !643, file: !426, line: 181, baseType: !1688, size: 64)
!1688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1689, size: 64)
!1689 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !426, line: 181, flags: DIFlagFwdDecl)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !638, file: !426, line: 317, baseType: !1691, size: 64)
!1691 = !DICompositeType(tag: DW_TAG_array_type, baseType: !712, size: 64, elements: !660)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !638, file: !426, line: 318, baseType: !1693, size: 320)
!1693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !426, line: 188, size: 320, elements: !1694)
!1694 = !{!1695, !1697, !1720}
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1693, file: !426, line: 190, baseType: !1696, size: 192)
!1696 = !DICompositeType(tag: DW_TAG_array_type, baseType: !642, size: 192, elements: !813)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1693, file: !426, line: 193, baseType: !1698, size: 64, offset: 192)
!1698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1699, size: 64)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !426, line: 206, size: 320, elements: !1700)
!1700 = !{!1701, !1705, !1706, !1707, !1719}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1699, file: !426, line: 208, baseType: !1702, size: 64)
!1702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1703, size: 64)
!1703 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !623, line: 62, baseType: !1704)
!1704 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !623, line: 61, flags: DIFlagFwdDecl)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1699, file: !426, line: 211, baseType: !7, size: 32, offset: 64)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1699, file: !426, line: 214, baseType: !712, size: 64, offset: 128)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1699, file: !426, line: 224, baseType: !1708, size: 64, offset: 192)
!1708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1709, size: 64)
!1709 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !426, line: 202, baseType: !1710)
!1710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !426, line: 202, size: 128, elements: !1711)
!1711 = !{!1712}
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1710, file: !426, line: 202, baseType: !1713, size: 128)
!1713 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !426, line: 200, baseType: !1714)
!1714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !426, line: 200, size: 128, elements: !1715)
!1715 = !{!1716, !1717, !1718}
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1714, file: !426, line: 200, baseType: !7, size: 32)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1714, file: !426, line: 200, baseType: !7, size: 32, offset: 32)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1714, file: !426, line: 200, baseType: !659, size: 64, offset: 64)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1699, file: !426, line: 234, baseType: !1708, size: 64, offset: 256)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1693, file: !426, line: 197, baseType: !712, size: 64, offset: 256)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !638, file: !426, line: 319, baseType: !802, size: 256)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !638, file: !426, line: 320, baseType: !821, size: 192)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "next_regno_allocno", scope: !615, file: !613, line: 255, baseType: !612, size: 64, offset: 192)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "loop_tree_node", scope: !615, file: !613, line: 260, baseType: !1725, size: 64, offset: 256)
!1725 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_loop_tree_node_t", file: !613, line: 73, baseType: !1726)
!1726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1727, size: 64)
!1727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_loop_tree_node", file: !613, line: 83, size: 1728, elements: !1728)
!1728 = !{!1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1744, !1746, !1747, !1748}
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1727, file: !613, line: 86, baseType: !1000, size: 64)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "loop", scope: !1727, file: !613, line: 87, baseType: !1042, size: 64, offset: 64)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "subloop_next", scope: !1727, file: !613, line: 90, baseType: !1725, size: 64, offset: 128)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1727, file: !613, line: 90, baseType: !1725, size: 64, offset: 192)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "subloops", scope: !1727, file: !613, line: 93, baseType: !1725, size: 64, offset: 256)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "children", scope: !1727, file: !613, line: 93, baseType: !1725, size: 64, offset: 320)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !1727, file: !613, line: 95, baseType: !1725, size: 64, offset: 384)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !1727, file: !613, line: 98, baseType: !610, size: 32, offset: 448)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "to_remove_p", scope: !1727, file: !613, line: 105, baseType: !855, size: 8, offset: 480)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "regno_allocno_map", scope: !1727, file: !613, line: 114, baseType: !611, size: 64, offset: 512)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "entered_from_non_parent_p", scope: !1727, file: !613, line: 119, baseType: !855, size: 8, offset: 576)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "reg_pressure", scope: !1727, file: !613, line: 123, baseType: !1741, size: 864, offset: 608)
!1741 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 864, elements: !1742)
!1742 = !{!1743}
!1743 = !DISubrange(count: 27)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "all_allocnos", scope: !1727, file: !613, line: 127, baseType: !1745, size: 64, offset: 1472)
!1745 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !623, line: 47, baseType: !679)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "border_allocnos", scope: !1727, file: !613, line: 130, baseType: !1745, size: 64, offset: 1536)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "modified_regnos", scope: !1727, file: !613, line: 134, baseType: !1745, size: 64, offset: 1600)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "local_copies", scope: !1727, file: !613, line: 137, baseType: !1745, size: 64, offset: 1664)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "nrefs", scope: !615, file: !613, line: 266, baseType: !610, size: 32, offset: 320)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "freq", scope: !615, file: !613, line: 268, baseType: !610, size: 32, offset: 352)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "cover_class", scope: !615, file: !613, line: 271, baseType: !390, size: 32, offset: 384)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "cover_class_cost", scope: !615, file: !613, line: 274, baseType: !610, size: 32, offset: 416)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "updated_cover_class_cost", scope: !615, file: !613, line: 274, baseType: !610, size: 32, offset: 448)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "memory_cost", scope: !615, file: !613, line: 282, baseType: !610, size: 32, offset: 480)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "updated_memory_cost", scope: !615, file: !613, line: 282, baseType: !610, size: 32, offset: 512)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "excess_pressure_points_num", scope: !615, file: !613, line: 288, baseType: !610, size: 32, offset: 544)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "allocno_copies", scope: !615, file: !613, line: 292, baseType: !1758, size: 64, offset: 576)
!1758 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_copy_t", file: !613, line: 64, baseType: !1759)
!1759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1760, size: 64)
!1760 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_allocno_copy", file: !613, line: 506, size: 640, elements: !1761)
!1761 = !{!1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772}
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1760, file: !613, line: 509, baseType: !610, size: 32)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1760, file: !613, line: 512, baseType: !612, size: 64, offset: 64)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "second", scope: !1760, file: !613, line: 512, baseType: !612, size: 64, offset: 128)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "freq", scope: !1760, file: !613, line: 514, baseType: !610, size: 32, offset: 192)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "constraint_p", scope: !1760, file: !613, line: 515, baseType: !855, size: 8, offset: 224)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !1760, file: !613, line: 521, baseType: !622, size: 64, offset: 256)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "prev_first_allocno_copy", scope: !1760, file: !613, line: 524, baseType: !1758, size: 64, offset: 320)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "next_first_allocno_copy", scope: !1760, file: !613, line: 524, baseType: !1758, size: 64, offset: 384)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "prev_second_allocno_copy", scope: !1760, file: !613, line: 527, baseType: !1758, size: 64, offset: 448)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "next_second_allocno_copy", scope: !1760, file: !613, line: 527, baseType: !1758, size: 64, offset: 512)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "loop_tree_node", scope: !1760, file: !613, line: 529, baseType: !1725, size: 64, offset: 576)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "cap", scope: !615, file: !613, line: 295, baseType: !612, size: 64, offset: 640)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "cap_member", scope: !615, file: !613, line: 298, baseType: !612, size: 64, offset: 704)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "first_coalesced_allocno", scope: !615, file: !613, line: 302, baseType: !612, size: 64, offset: 768)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "next_coalesced_allocno", scope: !615, file: !613, line: 303, baseType: !612, size: 64, offset: 832)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "live_ranges", scope: !615, file: !613, line: 308, baseType: !1778, size: 64, offset: 896)
!1778 = !DIDerivedType(tag: DW_TAG_typedef, name: "allocno_live_range_t", file: !613, line: 62, baseType: !1779)
!1779 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1780, size: 64)
!1780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_allocno_live_range", file: !613, line: 199, size: 320, elements: !1781)
!1781 = !{!1782, !1783, !1784, !1785, !1786, !1787}
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "allocno", scope: !1780, file: !613, line: 202, baseType: !612, size: 64)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !1780, file: !613, line: 204, baseType: !610, size: 32, offset: 64)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "finish", scope: !1780, file: !613, line: 204, baseType: !610, size: 32, offset: 96)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1780, file: !613, line: 207, baseType: !1778, size: 64, offset: 128)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "start_next", scope: !1780, file: !613, line: 209, baseType: !1778, size: 64, offset: 192)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "finish_next", scope: !1780, file: !613, line: 209, baseType: !1778, size: 64, offset: 256)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "min", scope: !615, file: !613, line: 314, baseType: !610, size: 32, offset: 960)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !615, file: !613, line: 314, baseType: !610, size: 32, offset: 992)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_allocno_array", scope: !615, file: !613, line: 319, baseType: !608, size: 64, offset: 1024)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_id", scope: !615, file: !613, line: 322, baseType: !610, size: 32, offset: 1088)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_allocno_array_size", scope: !615, file: !613, line: 324, baseType: !7, size: 32, offset: 1120)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_hard_regs", scope: !615, file: !613, line: 329, baseType: !1794, size: 64, offset: 1152)
!1794 = !DIDerivedType(tag: DW_TAG_typedef, name: "HARD_REG_ELT_TYPE", file: !1795, line: 42, baseType: !695)
!1795 = !DIFile(filename: "./hard-reg-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "total_conflict_hard_regs", scope: !615, file: !613, line: 329, baseType: !1794, size: 64, offset: 1216)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_allocnos_num", scope: !615, file: !613, line: 332, baseType: !610, size: 32, offset: 1280)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "call_freq", scope: !615, file: !613, line: 335, baseType: !610, size: 32, offset: 1312)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "calls_crossed_num", scope: !615, file: !613, line: 337, baseType: !610, size: 32, offset: 1344)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "mem_optimized_dest_p", scope: !615, file: !613, line: 342, baseType: !7, size: 1, offset: 1376, flags: DIFlagBitField, extraData: i64 1376)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "somewhere_renamed_p", scope: !615, file: !613, line: 346, baseType: !7, size: 1, offset: 1377, flags: DIFlagBitField, extraData: i64 1376)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "child_renamed_p", scope: !615, file: !613, line: 349, baseType: !7, size: 1, offset: 1378, flags: DIFlagBitField, extraData: i64 1376)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "dont_reassign_p", scope: !615, file: !613, line: 354, baseType: !7, size: 1, offset: 1379, flags: DIFlagBitField, extraData: i64 1376)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "no_stack_reg_p", scope: !615, file: !613, line: 359, baseType: !7, size: 1, offset: 1380, flags: DIFlagBitField, extraData: i64 1376)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "total_no_stack_reg_p", scope: !615, file: !613, line: 359, baseType: !7, size: 1, offset: 1381, flags: DIFlagBitField, extraData: i64 1376)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "bad_spill_p", scope: !615, file: !613, line: 364, baseType: !7, size: 1, offset: 1382, flags: DIFlagBitField, extraData: i64 1376)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "in_graph_p", scope: !615, file: !613, line: 367, baseType: !7, size: 1, offset: 1383, flags: DIFlagBitField, extraData: i64 1376)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "assigned_p", scope: !615, file: !613, line: 370, baseType: !7, size: 1, offset: 1384, flags: DIFlagBitField, extraData: i64 1376)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "may_be_spilled_p", scope: !615, file: !613, line: 373, baseType: !7, size: 1, offset: 1385, flags: DIFlagBitField, extraData: i64 1376)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "splay_removed_p", scope: !615, file: !613, line: 376, baseType: !7, size: 1, offset: 1386, flags: DIFlagBitField, extraData: i64 1376)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_vec_p", scope: !615, file: !613, line: 381, baseType: !7, size: 1, offset: 1387, flags: DIFlagBitField, extraData: i64 1376)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "mem_optimized_dest", scope: !615, file: !613, line: 385, baseType: !612, size: 64, offset: 1408)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "hard_reg_costs", scope: !615, file: !613, line: 400, baseType: !609, size: 64, offset: 1472)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "updated_hard_reg_costs", scope: !615, file: !613, line: 400, baseType: !609, size: 64, offset: 1536)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "conflict_hard_reg_costs", scope: !615, file: !613, line: 407, baseType: !609, size: 64, offset: 1600)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "updated_conflict_hard_reg_costs", scope: !615, file: !613, line: 407, baseType: !609, size: 64, offset: 1664)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "left_conflicts_size", scope: !615, file: !613, line: 411, baseType: !610, size: 32, offset: 1728)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "available_regs_num", scope: !615, file: !613, line: 414, baseType: !610, size: 32, offset: 1760)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "next_bucket_allocno", scope: !615, file: !613, line: 417, baseType: !612, size: 64, offset: 1792)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bucket_allocno", scope: !615, file: !613, line: 418, baseType: !612, size: 64, offset: 1856)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !615, file: !613, line: 420, baseType: !610, size: 32, offset: 1920)
!1822 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!1823 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1824, size: 64)
!1824 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_lr_bb_info", file: !1825, line: 826, size: 256, elements: !1826)
!1825 = !DIFile(filename: "./df.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1826 = !{!1827, !1828, !1829, !1830}
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1824, file: !1825, line: 829, baseType: !1745, size: 64)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1824, file: !1825, line: 831, baseType: !1745, size: 64, offset: 64)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !1824, file: !1825, line: 834, baseType: !1745, size: 64, offset: 128)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !1824, file: !1825, line: 835, baseType: !1745, size: 64, offset: 192)
!1831 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !712, size: 64)
!1832 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1833, size: 64)
!1833 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !612)
!1834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1835, size: 64)
!1835 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ira_allocno_t_heap", file: !613, line: 68, baseType: !1836)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ira_allocno_t_heap", file: !613, line: 68, size: 128, elements: !1837)
!1837 = !{!1838}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1836, file: !613, line: 68, baseType: !1839, size: 128)
!1839 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ira_allocno_t_base", file: !613, line: 67, baseType: !1840)
!1840 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ira_allocno_t_base", file: !613, line: 67, size: 128, elements: !1841)
!1841 = !{!1842, !1843, !1844}
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1840, file: !613, line: 67, baseType: !7, size: 32)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1840, file: !613, line: 67, baseType: !7, size: 32, offset: 32)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1840, file: !613, line: 67, baseType: !1845, size: 64, offset: 64)
!1845 = !DICompositeType(tag: DW_TAG_array_type, baseType: !612, size: 64, elements: !660)
!1846 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1758, size: 64)
!1847 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1848, size: 64)
!1848 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1758)
!1849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1850, size: 64)
!1850 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !610)
!1851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1778, size: 64)
!1852 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1853, size: 64)
!1853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "update_cost_queue_elem", file: !3, line: 139, size: 128, elements: !1854)
!1854 = !{!1855, !1856, !1857}
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "check", scope: !1853, file: !3, line: 142, baseType: !610, size: 32)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "divisor", scope: !1853, file: !3, line: 146, baseType: !610, size: 32, offset: 32)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1853, file: !3, line: 149, baseType: !612, size: 64, offset: 64)
!1858 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_key", file: !1859, line: 62, baseType: !1860)
!1859 = !DIFile(filename: "./include/splay-tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1860 = !DIDerivedType(tag: DW_TAG_typedef, name: "libi_uhostptr_t", file: !1859, line: 41, baseType: !695)
!1861 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_value", file: !1859, line: 63, baseType: !1860)
!1862 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1794, size: 64)
!1863 = !{!1864, !1866, !1868, !1870, !0, !1872, !1874, !1876, !1878, !1881, !1890, !1892, !1894, !1896, !1898, !1900, !1903, !1905, !1907, !1909, !1911, !1934, !1936, !1938, !1940}
!1864 = !DIGlobalVariableExpression(var: !1865, expr: !DIExpression())
!1865 = distinct !DIGlobalVariable(name: "coloring_allocno_bitmap", scope: !2, file: !3, line: 48, type: !1745, isLocal: true, isDefinition: true)
!1866 = !DIGlobalVariableExpression(var: !1867, expr: !DIExpression())
!1867 = distinct !DIGlobalVariable(name: "consideration_allocno_bitmap", scope: !2, file: !3, line: 54, type: !1745, isLocal: true, isDefinition: true)
!1868 = !DIGlobalVariableExpression(var: !1869, expr: !DIExpression())
!1869 = distinct !DIGlobalVariable(name: "allocno_coalesced_p", scope: !2, file: !3, line: 59, type: !855, isLocal: true, isDefinition: true)
!1870 = !DIGlobalVariableExpression(var: !1871, expr: !DIExpression())
!1871 = distinct !DIGlobalVariable(name: "processed_coalesced_allocno_bitmap", scope: !2, file: !3, line: 63, type: !1745, isLocal: true, isDefinition: true)
!1872 = !DIGlobalVariableExpression(var: !1873, expr: !DIExpression())
!1873 = distinct !DIGlobalVariable(name: "allocno_priorities", scope: !2, file: !3, line: 1710, type: !609, isLocal: true, isDefinition: true)
!1874 = !DIGlobalVariableExpression(var: !1875, expr: !DIExpression())
!1875 = distinct !DIGlobalVariable(name: "regno_coalesced_allocno_cost", scope: !2, file: !3, line: 2382, type: !609, isLocal: true, isDefinition: true)
!1876 = !DIGlobalVariableExpression(var: !1877, expr: !DIExpression())
!1877 = distinct !DIGlobalVariable(name: "regno_coalesced_allocno_num", scope: !2, file: !3, line: 2383, type: !609, isLocal: true, isDefinition: true)
!1878 = !DIGlobalVariableExpression(var: !1879, expr: !DIExpression())
!1879 = distinct !DIGlobalVariable(name: "regno_max_ref_width", scope: !2, file: !3, line: 2406, type: !1880, isLocal: true, isDefinition: true)
!1880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!1881 = !DIGlobalVariableExpression(var: !1882, expr: !DIExpression())
!1882 = distinct !DIGlobalVariable(name: "costs", scope: !1883, file: !3, line: 451, type: !1887, isLocal: true, isDefinition: true)
!1883 = distinct !DISubprogram(name: "assign_hard_reg", scope: !3, file: !3, line: 440, type: !1884, scopeLine: 441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!1884 = !DISubroutineType(types: !1885)
!1885 = !{!855, !612, !855}
!1886 = !{}
!1887 = !DICompositeType(tag: DW_TAG_array_type, baseType: !610, size: 1696, elements: !1888)
!1888 = !{!1889}
!1889 = !DISubrange(count: 53)
!1890 = !DIGlobalVariableExpression(var: !1891, expr: !DIExpression())
!1891 = distinct !DIGlobalVariable(name: "full_costs", scope: !1883, file: !3, line: 451, type: !1887, isLocal: true, isDefinition: true)
!1892 = !DIGlobalVariableExpression(var: !1893, expr: !DIExpression())
!1893 = distinct !DIGlobalVariable(name: "update_cost_check", scope: !2, file: !3, line: 165, type: !610, isLocal: true, isDefinition: true)
!1894 = !DIGlobalVariableExpression(var: !1895, expr: !DIExpression())
!1895 = distinct !DIGlobalVariable(name: "update_cost_queue", scope: !2, file: !3, line: 154, type: !612, isLocal: true, isDefinition: true)
!1896 = !DIGlobalVariableExpression(var: !1897, expr: !DIExpression())
!1897 = distinct !DIGlobalVariable(name: "update_cost_queue_elems", scope: !2, file: !3, line: 162, type: !1852, isLocal: true, isDefinition: true)
!1898 = !DIGlobalVariableExpression(var: !1899, expr: !DIExpression())
!1899 = distinct !DIGlobalVariable(name: "update_cost_queue_tail", scope: !2, file: !3, line: 158, type: !1852, isLocal: true, isDefinition: true)
!1900 = !DIGlobalVariableExpression(var: !1901, expr: !DIExpression())
!1901 = distinct !DIGlobalVariable(name: "allocated_hardreg_p", scope: !2, file: !3, line: 135, type: !1902, isLocal: true, isDefinition: true)
!1902 = !DICompositeType(tag: DW_TAG_array_type, baseType: !855, size: 424, elements: !1888)
!1903 = !DIGlobalVariableExpression(var: !1904, expr: !DIExpression())
!1904 = distinct !DIGlobalVariable(name: "allocno_stack_vec", scope: !2, file: !3, line: 69, type: !1834, isLocal: true, isDefinition: true)
!1905 = !DIGlobalVariableExpression(var: !1906, expr: !DIExpression())
!1906 = distinct !DIGlobalVariable(name: "slot_coalesced_allocnos_live_ranges", scope: !2, file: !3, line: 2522, type: !1851, isLocal: true, isDefinition: true)
!1907 = !DIGlobalVariableExpression(var: !1908, expr: !DIExpression())
!1908 = distinct !DIGlobalVariable(name: "removed_splay_allocno_vec", scope: !2, file: !3, line: 83, type: !1834, isLocal: true, isDefinition: true)
!1909 = !DIGlobalVariableExpression(var: !1910, expr: !DIExpression())
!1910 = distinct !DIGlobalVariable(name: "allocnos_for_spilling", scope: !2, file: !3, line: 72, type: !611, isLocal: true, isDefinition: true)
!1911 = !DIGlobalVariableExpression(var: !1912, expr: !DIExpression())
!1912 = distinct !DIGlobalVariable(name: "splay_tree_node_pool", scope: !2, file: !3, line: 75, type: !1913, isLocal: true, isDefinition: true)
!1913 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !1914, line: 58, baseType: !1915)
!1914 = !DIFile(filename: "./alloc-pool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1915 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1916, size: 64)
!1916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !1914, line: 32, size: 704, elements: !1917)
!1917 = !{!1918, !1919, !1920, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933}
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1916, file: !1914, line: 34, baseType: !648, size: 64)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !1916, file: !1914, line: 38, baseType: !1192, size: 64, offset: 64)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !1916, file: !1914, line: 41, baseType: !1921, size: 64, offset: 128)
!1921 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !1914, line: 30, baseType: !1922)
!1922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1923, size: 64)
!1923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !1914, line: 26, size: 64, elements: !1924)
!1924 = !{!1925}
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1923, file: !1914, line: 28, baseType: !1922, size: 64)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !1916, file: !1914, line: 45, baseType: !718, size: 64, offset: 192)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !1916, file: !1914, line: 49, baseType: !1192, size: 64, offset: 256)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !1916, file: !1914, line: 51, baseType: !1192, size: 64, offset: 320)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !1916, file: !1914, line: 52, baseType: !1192, size: 64, offset: 384)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !1916, file: !1914, line: 53, baseType: !1192, size: 64, offset: 448)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !1916, file: !1914, line: 54, baseType: !1921, size: 64, offset: 512)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !1916, file: !1914, line: 55, baseType: !1192, size: 64, offset: 576)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !1916, file: !1914, line: 56, baseType: !1192, size: 64, offset: 640)
!1934 = !DIGlobalVariableExpression(var: !1935, expr: !DIExpression())
!1935 = distinct !DIGlobalVariable(name: "colorable_allocno_bucket", scope: !2, file: !3, line: 675, type: !612, isLocal: true, isDefinition: true)
!1936 = !DIGlobalVariableExpression(var: !1937, expr: !DIExpression())
!1937 = distinct !DIGlobalVariable(name: "uncolorable_allocno_bucket", scope: !2, file: !3, line: 679, type: !612, isLocal: true, isDefinition: true)
!1938 = !DIGlobalVariableExpression(var: !1939, expr: !DIExpression())
!1939 = distinct !DIGlobalVariable(name: "uncolorable_allocnos_num", scope: !2, file: !3, line: 683, type: !1741, isLocal: true, isDefinition: true)
!1940 = !DIGlobalVariableExpression(var: !1941, expr: !DIExpression())
!1941 = distinct !DIGlobalVariable(name: "uncolorable_allocnos_splay_tree", scope: !2, file: !3, line: 855, type: !1942, isLocal: true, isDefinition: true)
!1942 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1943, size: 1728, elements: !1742)
!1943 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree", file: !1859, line: 128, baseType: !1944)
!1944 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1945, size: 64)
!1945 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "splay_tree_s", file: !1859, line: 109, size: 448, elements: !1946)
!1946 = !{!1947, !1956, !1961, !1966, !1971, !1976, !1978}
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !1945, file: !1859, line: 111, baseType: !1948, size: 64)
!1948 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_node", file: !1859, line: 66, baseType: !1949)
!1949 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1950, size: 64)
!1950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "splay_tree_node_s", file: !1859, line: 96, size: 256, elements: !1951)
!1951 = !{!1952, !1953, !1954, !1955}
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !1950, file: !1859, line: 98, baseType: !1858, size: 64)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1950, file: !1859, line: 101, baseType: !1861, size: 64, offset: 64)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !1950, file: !1859, line: 104, baseType: !1948, size: 64, offset: 128)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !1950, file: !1859, line: 105, baseType: !1948, size: 64, offset: 192)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "comp", scope: !1945, file: !1859, line: 114, baseType: !1957, size: 64, offset: 64)
!1957 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_compare_fn", file: !1859, line: 70, baseType: !1958)
!1958 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1959, size: 64)
!1959 = !DISubroutineType(types: !1960)
!1960 = !{!610, !1858, !1858}
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "delete_key", scope: !1945, file: !1859, line: 117, baseType: !1962, size: 64, offset: 128)
!1962 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_delete_key_fn", file: !1859, line: 74, baseType: !1963)
!1963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1964, size: 64)
!1964 = !DISubroutineType(types: !1965)
!1965 = !{null, !1858}
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "delete_value", scope: !1945, file: !1859, line: 120, baseType: !1967, size: 64, offset: 192)
!1967 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_delete_value_fn", file: !1859, line: 78, baseType: !1968)
!1968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1969, size: 64)
!1969 = !DISubroutineType(types: !1970)
!1970 = !{null, !1861}
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "allocate", scope: !1945, file: !1859, line: 123, baseType: !1972, size: 64, offset: 256)
!1972 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_allocate_fn", file: !1859, line: 87, baseType: !1973)
!1973 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1974, size: 64)
!1974 = !DISubroutineType(types: !1975)
!1975 = !{!608, !610, !608}
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "deallocate", scope: !1945, file: !1859, line: 124, baseType: !1977, size: 64, offset: 320)
!1977 = !DIDerivedType(tag: DW_TAG_typedef, name: "splay_tree_deallocate_fn", file: !1859, line: 93, baseType: !1213)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "allocate_data", scope: !1945, file: !1859, line: 125, baseType: !608, size: 64, offset: 384)
!1979 = !{i32 7, !"Dwarf Version", i32 4}
!1980 = !{i32 2, !"Debug Info Version", i32 3}
!1981 = !{i32 1, !"wchar_size", i32 4}
!1982 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!1983 = distinct !DISubprogram(name: "ira_loop_edge_freq", scope: !3, file: !3, line: 1020, type: !1984, scopeLine: 1021, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!1984 = !DISubroutineType(types: !1985)
!1985 = !{!610, !1725, !610, !855}
!1986 = !DILocalVariable(name: "loop_node", arg: 1, scope: !1983, file: !3, line: 1020, type: !1725)
!1987 = !DILocation(line: 1020, column: 42, scope: !1983)
!1988 = !DILocalVariable(name: "regno", arg: 2, scope: !1983, file: !3, line: 1020, type: !610)
!1989 = !DILocation(line: 1020, column: 57, scope: !1983)
!1990 = !DILocalVariable(name: "exit_p", arg: 3, scope: !1983, file: !3, line: 1020, type: !855)
!1991 = !DILocation(line: 1020, column: 69, scope: !1983)
!1992 = !DILocalVariable(name: "freq", scope: !1983, file: !3, line: 1022, type: !610)
!1993 = !DILocation(line: 1022, column: 7, scope: !1983)
!1994 = !DILocalVariable(name: "i", scope: !1983, file: !3, line: 1022, type: !610)
!1995 = !DILocation(line: 1022, column: 13, scope: !1983)
!1996 = !DILocalVariable(name: "ei", scope: !1983, file: !3, line: 1023, type: !1997)
!1997 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !135, line: 682, baseType: !1998)
!1998 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !135, line: 679, size: 128, elements: !1999)
!1999 = !{!2000, !2001}
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1998, file: !135, line: 680, baseType: !7, size: 32)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !1998, file: !135, line: 681, baseType: !2002, size: 64, offset: 64)
!2002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1005, size: 64)
!2003 = !DILocation(line: 1023, column: 17, scope: !1983)
!2004 = !DILocalVariable(name: "e", scope: !1983, file: !3, line: 1024, type: !1017)
!2005 = !DILocation(line: 1024, column: 8, scope: !1983)
!2006 = !DILocalVariable(name: "edges", scope: !1983, file: !3, line: 1025, type: !2007)
!2007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2008, size: 64)
!2008 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !135, line: 152, baseType: !2009)
!2009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !135, line: 152, size: 128, elements: !2010)
!2010 = !{!2011}
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2009, file: !135, line: 152, baseType: !1010, size: 128)
!2012 = !DILocation(line: 1025, column: 21, scope: !1983)
!2013 = !DILocation(line: 1029, column: 8, scope: !1983)
!2014 = !DILocation(line: 1030, column: 9, scope: !2015)
!2015 = distinct !DILexicalBlock(scope: !1983, file: !3, line: 1030, column: 7)
!2016 = !DILocation(line: 1030, column: 7, scope: !1983)
!2017 = !DILocation(line: 1032, column: 7, scope: !2018)
!2018 = distinct !DILexicalBlock(scope: !2019, file: !3, line: 1032, column: 7)
!2019 = distinct !DILexicalBlock(scope: !2015, file: !3, line: 1031, column: 5)
!2020 = !DILocation(line: 1032, column: 7, scope: !2021)
!2021 = distinct !DILexicalBlock(scope: !2018, file: !3, line: 1032, column: 7)
!2022 = !DILocation(line: 1033, column: 6, scope: !2023)
!2023 = distinct !DILexicalBlock(scope: !2021, file: !3, line: 1033, column: 6)
!2024 = !DILocation(line: 1033, column: 9, scope: !2023)
!2025 = !DILocation(line: 1033, column: 16, scope: !2023)
!2026 = !DILocation(line: 1033, column: 27, scope: !2023)
!2027 = !DILocation(line: 1033, column: 33, scope: !2023)
!2028 = !DILocation(line: 1033, column: 13, scope: !2023)
!2029 = !DILocation(line: 1034, column: 6, scope: !2023)
!2030 = !DILocation(line: 1034, column: 10, scope: !2023)
!2031 = !DILocation(line: 1034, column: 16, scope: !2023)
!2032 = !DILocation(line: 1035, column: 3, scope: !2023)
!2033 = !DILocation(line: 1035, column: 21, scope: !2023)
!2034 = !DILocation(line: 1035, column: 41, scope: !2023)
!2035 = !DILocation(line: 1035, column: 7, scope: !2023)
!2036 = !DILocation(line: 1036, column: 7, scope: !2023)
!2037 = !DILocation(line: 1036, column: 24, scope: !2023)
!2038 = !DILocation(line: 1036, column: 44, scope: !2023)
!2039 = !DILocation(line: 1036, column: 10, scope: !2023)
!2040 = !DILocation(line: 1033, column: 6, scope: !2021)
!2041 = !DILocation(line: 1037, column: 12, scope: !2023)
!2042 = !DILocation(line: 1037, column: 9, scope: !2023)
!2043 = !DILocation(line: 1037, column: 4, scope: !2023)
!2044 = !DILocation(line: 1036, column: 51, scope: !2023)
!2045 = distinct !{!2045, !2017, !2046}
!2046 = !DILocation(line: 1037, column: 12, scope: !2018)
!2047 = !DILocation(line: 1038, column: 5, scope: !2019)
!2048 = !DILocation(line: 1041, column: 36, scope: !2049)
!2049 = distinct !DILexicalBlock(scope: !2015, file: !3, line: 1040, column: 5)
!2050 = !DILocation(line: 1041, column: 47, scope: !2049)
!2051 = !DILocation(line: 1041, column: 15, scope: !2049)
!2052 = !DILocation(line: 1041, column: 13, scope: !2049)
!2053 = !DILocation(line: 1042, column: 14, scope: !2054)
!2054 = distinct !DILexicalBlock(scope: !2049, file: !3, line: 1042, column: 7)
!2055 = !DILocation(line: 1042, column: 12, scope: !2054)
!2056 = !DILocation(line: 1042, column: 19, scope: !2057)
!2057 = distinct !DILexicalBlock(scope: !2054, file: !3, line: 1042, column: 7)
!2058 = !DILocation(line: 1042, column: 7, scope: !2054)
!2059 = !DILocation(line: 1043, column: 6, scope: !2060)
!2060 = distinct !DILexicalBlock(scope: !2057, file: !3, line: 1043, column: 6)
!2061 = !DILocation(line: 1043, column: 12, scope: !2060)
!2062 = !DILocation(line: 1044, column: 6, scope: !2060)
!2063 = !DILocation(line: 1044, column: 24, scope: !2060)
!2064 = !DILocation(line: 1044, column: 44, scope: !2060)
!2065 = !DILocation(line: 1044, column: 10, scope: !2060)
!2066 = !DILocation(line: 1045, column: 3, scope: !2060)
!2067 = !DILocation(line: 1045, column: 20, scope: !2060)
!2068 = !DILocation(line: 1045, column: 40, scope: !2060)
!2069 = !DILocation(line: 1045, column: 6, scope: !2060)
!2070 = !DILocation(line: 1043, column: 6, scope: !2057)
!2071 = !DILocation(line: 1046, column: 12, scope: !2060)
!2072 = !DILocation(line: 1046, column: 9, scope: !2060)
!2073 = !DILocation(line: 1046, column: 4, scope: !2060)
!2074 = !DILocation(line: 1045, column: 46, scope: !2060)
!2075 = !DILocation(line: 1042, column: 53, scope: !2057)
!2076 = !DILocation(line: 1042, column: 7, scope: !2057)
!2077 = distinct !{!2077, !2058, !2078}
!2078 = !DILocation(line: 1046, column: 12, scope: !2054)
!2079 = !DILocation(line: 1047, column: 7, scope: !2049)
!2080 = !DILocation(line: 1050, column: 10, scope: !1983)
!2081 = !DILocation(line: 1050, column: 3, scope: !1983)
!2082 = distinct !DISubprogram(name: "ei_start_1", scope: !135, file: !135, line: 696, type: !2083, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2083 = !DISubroutineType(types: !2084)
!2084 = !{!1997, !2002}
!2085 = !DILocalVariable(name: "ev", arg: 1, scope: !2082, file: !135, line: 696, type: !2002)
!2086 = !DILocation(line: 696, column: 28, scope: !2082)
!2087 = !DILocalVariable(name: "i", scope: !2082, file: !135, line: 698, type: !1997)
!2088 = !DILocation(line: 698, column: 17, scope: !2082)
!2089 = !DILocation(line: 700, column: 5, scope: !2082)
!2090 = !DILocation(line: 700, column: 11, scope: !2082)
!2091 = !DILocation(line: 701, column: 17, scope: !2082)
!2092 = !DILocation(line: 701, column: 5, scope: !2082)
!2093 = !DILocation(line: 701, column: 15, scope: !2082)
!2094 = !DILocation(line: 703, column: 3, scope: !2082)
!2095 = distinct !DISubprogram(name: "ei_cond", scope: !135, file: !135, line: 771, type: !2096, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2096 = !DISubroutineType(types: !2097)
!2097 = !{!855, !1997, !2098}
!2098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1017, size: 64)
!2099 = !DILocalVariable(name: "ei", arg: 1, scope: !2095, file: !135, line: 771, type: !1997)
!2100 = !DILocation(line: 771, column: 24, scope: !2095)
!2101 = !DILocalVariable(name: "p", arg: 2, scope: !2095, file: !135, line: 771, type: !2098)
!2102 = !DILocation(line: 771, column: 34, scope: !2095)
!2103 = !DILocation(line: 773, column: 8, scope: !2104)
!2104 = distinct !DILexicalBlock(scope: !2095, file: !135, line: 773, column: 7)
!2105 = !DILocation(line: 773, column: 7, scope: !2095)
!2106 = !DILocation(line: 775, column: 12, scope: !2107)
!2107 = distinct !DILexicalBlock(scope: !2104, file: !135, line: 774, column: 5)
!2108 = !DILocation(line: 775, column: 8, scope: !2107)
!2109 = !DILocation(line: 775, column: 10, scope: !2107)
!2110 = !DILocation(line: 776, column: 7, scope: !2107)
!2111 = !DILocation(line: 780, column: 8, scope: !2112)
!2112 = distinct !DILexicalBlock(scope: !2104, file: !135, line: 779, column: 5)
!2113 = !DILocation(line: 780, column: 10, scope: !2112)
!2114 = !DILocation(line: 781, column: 7, scope: !2112)
!2115 = !DILocation(line: 783, column: 1, scope: !2095)
!2116 = distinct !DISubprogram(name: "df_lr_get_bb_info", scope: !1825, file: !1825, line: 1052, type: !2117, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2117 = !DISubroutineType(types: !2118)
!2118 = !{!1823, !7}
!2119 = !DILocalVariable(name: "index", arg: 1, scope: !2116, file: !1825, line: 1052, type: !7)
!2120 = !DILocation(line: 1052, column: 33, scope: !2116)
!2121 = !DILocation(line: 1054, column: 7, scope: !2122)
!2122 = distinct !DILexicalBlock(scope: !2116, file: !1825, line: 1054, column: 7)
!2123 = !DILocation(line: 1054, column: 15, scope: !2122)
!2124 = !DILocation(line: 1054, column: 22, scope: !2122)
!2125 = !DILocation(line: 1054, column: 13, scope: !2122)
!2126 = !DILocation(line: 1054, column: 7, scope: !2116)
!2127 = !DILocation(line: 1055, column: 37, scope: !2122)
!2128 = !DILocation(line: 1055, column: 44, scope: !2122)
!2129 = !DILocation(line: 1055, column: 55, scope: !2122)
!2130 = !DILocation(line: 1055, column: 12, scope: !2122)
!2131 = !DILocation(line: 1055, column: 5, scope: !2122)
!2132 = !DILocation(line: 1057, column: 5, scope: !2122)
!2133 = !DILocation(line: 1058, column: 1, scope: !2116)
!2134 = distinct !DISubprogram(name: "ei_next", scope: !135, file: !135, line: 736, type: !2135, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2135 = !DISubroutineType(types: !2136)
!2136 = !{null, !2137}
!2137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1997, size: 64)
!2138 = !DILocalVariable(name: "i", arg: 1, scope: !2134, file: !135, line: 736, type: !2137)
!2139 = !DILocation(line: 736, column: 25, scope: !2134)
!2140 = !DILocation(line: 738, column: 3, scope: !2134)
!2141 = !DILocation(line: 739, column: 3, scope: !2134)
!2142 = !DILocation(line: 739, column: 6, scope: !2134)
!2143 = !DILocation(line: 739, column: 11, scope: !2134)
!2144 = !DILocation(line: 740, column: 1, scope: !2134)
!2145 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !135, file: !135, line: 150, type: !2146, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2146 = !DISubroutineType(types: !2147)
!2147 = !{!610, !2148, !7, !2098}
!2148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2149, size: 64)
!2149 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1010)
!2150 = !DILocalVariable(name: "vec_", arg: 1, scope: !2145, file: !135, line: 150, type: !2148)
!2151 = !DILocation(line: 150, column: 1, scope: !2145)
!2152 = !DILocalVariable(name: "ix_", arg: 2, scope: !2145, file: !135, line: 150, type: !7)
!2153 = !DILocalVariable(name: "ptr", arg: 3, scope: !2145, file: !135, line: 150, type: !2098)
!2154 = !DILocation(line: 150, column: 1, scope: !2155)
!2155 = distinct !DILexicalBlock(scope: !2145, file: !135, line: 150, column: 1)
!2156 = !DILocation(line: 150, column: 1, scope: !2157)
!2157 = distinct !DILexicalBlock(scope: !2155, file: !135, line: 150, column: 1)
!2158 = !DILocation(line: 150, column: 1, scope: !2159)
!2159 = distinct !DILexicalBlock(scope: !2155, file: !135, line: 150, column: 1)
!2160 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !135, file: !135, line: 152, type: !2161, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2161 = !DISubroutineType(types: !2162)
!2162 = !{null, !2163}
!2163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2007, size: 64)
!2164 = !DILocalVariable(name: "vec_", arg: 1, scope: !2160, file: !135, line: 152, type: !2163)
!2165 = !DILocation(line: 152, column: 1, scope: !2160)
!2166 = !DILocation(line: 152, column: 1, scope: !2167)
!2167 = distinct !DILexicalBlock(scope: !2160, file: !135, line: 152, column: 1)
!2168 = distinct !DISubprogram(name: "ira_reassign_conflict_allocnos", scope: !3, file: !3, line: 2297, type: !2169, scopeLine: 2298, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2169 = !DISubroutineType(types: !2170)
!2170 = !{null, !610}
!2171 = !DILocalVariable(name: "start_regno", arg: 1, scope: !2168, file: !3, line: 2297, type: !610)
!2172 = !DILocation(line: 2297, column: 37, scope: !2168)
!2173 = !DILocalVariable(name: "i", scope: !2168, file: !3, line: 2299, type: !610)
!2174 = !DILocation(line: 2299, column: 7, scope: !2168)
!2175 = !DILocalVariable(name: "allocnos_to_color_num", scope: !2168, file: !3, line: 2299, type: !610)
!2176 = !DILocation(line: 2299, column: 10, scope: !2168)
!2177 = !DILocalVariable(name: "a", scope: !2168, file: !3, line: 2300, type: !612)
!2178 = !DILocation(line: 2300, column: 17, scope: !2168)
!2179 = !DILocalVariable(name: "conflict_a", scope: !2168, file: !3, line: 2300, type: !612)
!2180 = !DILocation(line: 2300, column: 20, scope: !2168)
!2181 = !DILocalVariable(name: "aci", scope: !2168, file: !3, line: 2301, type: !2182)
!2182 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_allocno_conflict_iterator", file: !613, line: 1040, baseType: !2183)
!2183 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !613, line: 1012, size: 320, elements: !2184)
!2184 = !{!2185, !2186, !2187, !2188, !2189, !2190, !2191}
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "allocno_conflict_vec_p", scope: !2183, file: !613, line: 1015, baseType: !855, size: 8)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2183, file: !613, line: 1018, baseType: !608, size: 64, offset: 64)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "word_num", scope: !2183, file: !613, line: 1022, baseType: !7, size: 32, offset: 128)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2183, file: !613, line: 1026, baseType: !7, size: 32, offset: 160)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "bit_num", scope: !2183, file: !613, line: 1030, baseType: !7, size: 32, offset: 192)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "base_conflict_id", scope: !2183, file: !613, line: 1035, baseType: !610, size: 32, offset: 224)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !2183, file: !613, line: 1039, baseType: !695, size: 64, offset: 256)
!2192 = !DILocation(line: 2301, column: 33, scope: !2168)
!2193 = !DILocalVariable(name: "cover_class", scope: !2168, file: !3, line: 2302, type: !390)
!2194 = !DILocation(line: 2302, column: 18, scope: !2168)
!2195 = !DILocalVariable(name: "allocnos_to_color", scope: !2168, file: !3, line: 2303, type: !1745)
!2196 = !DILocation(line: 2303, column: 10, scope: !2168)
!2197 = !DILocalVariable(name: "ai", scope: !2168, file: !3, line: 2304, type: !2198)
!2198 = !DIDerivedType(tag: DW_TAG_typedef, name: "ira_allocno_iterator", file: !613, line: 935, baseType: !2199)
!2199 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !613, line: 932, size: 32, elements: !2200)
!2200 = !{!2201}
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !2199, file: !613, line: 934, baseType: !610, size: 32)
!2202 = !DILocation(line: 2304, column: 24, scope: !2168)
!2203 = !DILocation(line: 2306, column: 23, scope: !2168)
!2204 = !DILocation(line: 2306, column: 21, scope: !2168)
!2205 = !DILocation(line: 2307, column: 25, scope: !2168)
!2206 = !DILocation(line: 2308, column: 3, scope: !2207)
!2207 = distinct !DILexicalBlock(scope: !2168, file: !3, line: 2308, column: 3)
!2208 = !DILocation(line: 2308, column: 3, scope: !2209)
!2209 = distinct !DILexicalBlock(scope: !2207, file: !3, line: 2308, column: 3)
!2210 = !DILocation(line: 2310, column: 13, scope: !2211)
!2211 = distinct !DILexicalBlock(scope: !2212, file: !3, line: 2310, column: 11)
!2212 = distinct !DILexicalBlock(scope: !2209, file: !3, line: 2309, column: 5)
!2213 = !DILocation(line: 2311, column: 4, scope: !2211)
!2214 = !DILocation(line: 2311, column: 23, scope: !2211)
!2215 = !DILocation(line: 2311, column: 42, scope: !2211)
!2216 = !DILocation(line: 2311, column: 9, scope: !2211)
!2217 = !DILocation(line: 2310, column: 11, scope: !2212)
!2218 = !DILocation(line: 2313, column: 8, scope: !2219)
!2219 = distinct !DILexicalBlock(scope: !2220, file: !3, line: 2313, column: 8)
!2220 = distinct !DILexicalBlock(scope: !2211, file: !3, line: 2312, column: 2)
!2221 = !DILocation(line: 2313, column: 32, scope: !2219)
!2222 = !DILocation(line: 2313, column: 8, scope: !2220)
!2223 = !DILocation(line: 2314, column: 49, scope: !2219)
!2224 = !DILocation(line: 2314, column: 6, scope: !2219)
!2225 = !DILocation(line: 2314, column: 43, scope: !2219)
!2226 = !DILocation(line: 2314, column: 47, scope: !2219)
!2227 = !DILocation(line: 2317, column: 8, scope: !2228)
!2228 = distinct !DILexicalBlock(scope: !2219, file: !3, line: 2316, column: 6)
!2229 = !DILocation(line: 2317, column: 31, scope: !2228)
!2230 = !DILocation(line: 2318, column: 8, scope: !2228)
!2231 = !DILocation(line: 2318, column: 31, scope: !2228)
!2232 = !DILocation(line: 2322, column: 20, scope: !2220)
!2233 = !DILocation(line: 2322, column: 39, scope: !2220)
!2234 = !DILocation(line: 2322, column: 4, scope: !2220)
!2235 = !DILocation(line: 2323, column: 2, scope: !2220)
!2236 = !DILocation(line: 2324, column: 11, scope: !2237)
!2237 = distinct !DILexicalBlock(scope: !2212, file: !3, line: 2324, column: 11)
!2238 = !DILocation(line: 2324, column: 31, scope: !2237)
!2239 = !DILocation(line: 2324, column: 29, scope: !2237)
!2240 = !DILocation(line: 2325, column: 4, scope: !2237)
!2241 = !DILocation(line: 2325, column: 22, scope: !2237)
!2242 = !DILocation(line: 2325, column: 20, scope: !2237)
!2243 = !DILocation(line: 2325, column: 47, scope: !2237)
!2244 = !DILocation(line: 2324, column: 11, scope: !2212)
!2245 = !DILocation(line: 2326, column: 2, scope: !2237)
!2246 = distinct !{!2246, !2206, !2247}
!2247 = !DILocation(line: 2336, column: 5, scope: !2207)
!2248 = !DILocation(line: 2327, column: 7, scope: !2249)
!2249 = distinct !DILexicalBlock(scope: !2212, file: !3, line: 2327, column: 7)
!2250 = !DILocation(line: 2327, column: 7, scope: !2251)
!2251 = distinct !DILexicalBlock(scope: !2249, file: !3, line: 2327, column: 7)
!2252 = !DILocation(line: 2331, column: 22, scope: !2253)
!2253 = distinct !DILexicalBlock(scope: !2254, file: !3, line: 2331, column: 8)
!2254 = distinct !DILexicalBlock(scope: !2251, file: !3, line: 2328, column: 2)
!2255 = !DILocation(line: 2331, column: 41, scope: !2253)
!2256 = !DILocation(line: 2331, column: 8, scope: !2253)
!2257 = !DILocation(line: 2331, column: 8, scope: !2254)
!2258 = !DILocation(line: 2332, column: 6, scope: !2253)
!2259 = !DILocation(line: 2333, column: 20, scope: !2254)
!2260 = !DILocation(line: 2333, column: 39, scope: !2254)
!2261 = !DILocation(line: 2333, column: 4, scope: !2254)
!2262 = !DILocation(line: 2334, column: 47, scope: !2254)
!2263 = !DILocation(line: 2334, column: 4, scope: !2254)
!2264 = !DILocation(line: 2334, column: 41, scope: !2254)
!2265 = !DILocation(line: 2334, column: 45, scope: !2254)
!2266 = !DILocation(line: 2335, column: 2, scope: !2254)
!2267 = distinct !{!2267, !2248, !2268}
!2268 = !DILocation(line: 2335, column: 2, scope: !2249)
!2269 = !DILocation(line: 2337, column: 20, scope: !2168)
!2270 = !DILocation(line: 2337, column: 3, scope: !2168)
!2271 = !DILocation(line: 2338, column: 7, scope: !2272)
!2272 = distinct !DILexicalBlock(scope: !2168, file: !3, line: 2338, column: 7)
!2273 = !DILocation(line: 2338, column: 29, scope: !2272)
!2274 = !DILocation(line: 2338, column: 7, scope: !2168)
!2275 = !DILocation(line: 2340, column: 33, scope: !2276)
!2276 = distinct !DILexicalBlock(scope: !2272, file: !3, line: 2339, column: 5)
!2277 = !DILocation(line: 2340, column: 50, scope: !2276)
!2278 = !DILocation(line: 2340, column: 7, scope: !2276)
!2279 = !DILocation(line: 2342, column: 19, scope: !2276)
!2280 = !DILocation(line: 2342, column: 36, scope: !2276)
!2281 = !DILocation(line: 2342, column: 7, scope: !2276)
!2282 = !DILocation(line: 2348, column: 5, scope: !2276)
!2283 = !DILocation(line: 2349, column: 10, scope: !2284)
!2284 = distinct !DILexicalBlock(scope: !2168, file: !3, line: 2349, column: 3)
!2285 = !DILocation(line: 2349, column: 8, scope: !2284)
!2286 = !DILocation(line: 2349, column: 15, scope: !2287)
!2287 = distinct !DILexicalBlock(scope: !2284, file: !3, line: 2349, column: 3)
!2288 = !DILocation(line: 2349, column: 19, scope: !2287)
!2289 = !DILocation(line: 2349, column: 17, scope: !2287)
!2290 = !DILocation(line: 2349, column: 3, scope: !2284)
!2291 = !DILocation(line: 2351, column: 11, scope: !2292)
!2292 = distinct !DILexicalBlock(scope: !2287, file: !3, line: 2350, column: 5)
!2293 = !DILocation(line: 2351, column: 27, scope: !2292)
!2294 = !DILocation(line: 2351, column: 9, scope: !2292)
!2295 = !DILocation(line: 2352, column: 7, scope: !2292)
!2296 = !DILocation(line: 2352, column: 30, scope: !2292)
!2297 = !DILocation(line: 2355, column: 26, scope: !2292)
!2298 = !DILocation(line: 2355, column: 7, scope: !2292)
!2299 = !DILocation(line: 2356, column: 5, scope: !2292)
!2300 = !DILocation(line: 2349, column: 43, scope: !2287)
!2301 = !DILocation(line: 2349, column: 3, scope: !2287)
!2302 = distinct !{!2302, !2290, !2303}
!2303 = !DILocation(line: 2356, column: 5, scope: !2284)
!2304 = !DILocation(line: 2357, column: 10, scope: !2305)
!2305 = distinct !DILexicalBlock(scope: !2168, file: !3, line: 2357, column: 3)
!2306 = !DILocation(line: 2357, column: 8, scope: !2305)
!2307 = !DILocation(line: 2357, column: 15, scope: !2308)
!2308 = distinct !DILexicalBlock(scope: !2305, file: !3, line: 2357, column: 3)
!2309 = !DILocation(line: 2357, column: 19, scope: !2308)
!2310 = !DILocation(line: 2357, column: 17, scope: !2308)
!2311 = !DILocation(line: 2357, column: 3, scope: !2305)
!2312 = !DILocation(line: 2359, column: 11, scope: !2313)
!2313 = distinct !DILexicalBlock(scope: !2308, file: !3, line: 2358, column: 5)
!2314 = !DILocation(line: 2359, column: 27, scope: !2313)
!2315 = !DILocation(line: 2359, column: 9, scope: !2313)
!2316 = !DILocation(line: 2360, column: 28, scope: !2317)
!2317 = distinct !DILexicalBlock(scope: !2313, file: !3, line: 2360, column: 11)
!2318 = !DILocation(line: 2360, column: 11, scope: !2317)
!2319 = !DILocation(line: 2360, column: 11, scope: !2313)
!2320 = !DILocation(line: 2362, column: 8, scope: !2321)
!2321 = distinct !DILexicalBlock(scope: !2322, file: !3, line: 2362, column: 8)
!2322 = distinct !DILexicalBlock(scope: !2317, file: !3, line: 2361, column: 2)
!2323 = !DILocation(line: 2362, column: 34, scope: !2321)
!2324 = !DILocation(line: 2362, column: 38, scope: !2321)
!2325 = !DILocation(line: 2362, column: 41, scope: !2321)
!2326 = !DILocation(line: 2362, column: 55, scope: !2321)
!2327 = !DILocation(line: 2362, column: 8, scope: !2322)
!2328 = !DILocation(line: 2364, column: 9, scope: !2321)
!2329 = !DILocation(line: 2366, column: 9, scope: !2321)
!2330 = !DILocation(line: 2366, column: 33, scope: !2321)
!2331 = !DILocation(line: 2363, column: 6, scope: !2321)
!2332 = !DILocation(line: 2367, column: 2, scope: !2322)
!2333 = !DILocation(line: 2368, column: 5, scope: !2313)
!2334 = !DILocation(line: 2357, column: 43, scope: !2308)
!2335 = !DILocation(line: 2357, column: 3, scope: !2308)
!2336 = distinct !{!2336, !2311, !2337}
!2337 = !DILocation(line: 2368, column: 5, scope: !2305)
!2338 = !DILocation(line: 2369, column: 1, scope: !2168)
!2339 = distinct !DISubprogram(name: "ira_allocno_iter_init", scope: !613, file: !613, line: 939, type: !2340, scopeLine: 940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2340 = !DISubroutineType(types: !2341)
!2341 = !{null, !2342}
!2342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2198, size: 64)
!2343 = !DILocalVariable(name: "i", arg: 1, scope: !2339, file: !613, line: 939, type: !2342)
!2344 = !DILocation(line: 939, column: 46, scope: !2339)
!2345 = !DILocation(line: 941, column: 3, scope: !2339)
!2346 = !DILocation(line: 941, column: 6, scope: !2339)
!2347 = !DILocation(line: 941, column: 8, scope: !2339)
!2348 = !DILocation(line: 942, column: 1, scope: !2339)
!2349 = distinct !DISubprogram(name: "ira_allocno_iter_cond", scope: !613, file: !613, line: 947, type: !2350, scopeLine: 948, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2350 = !DISubroutineType(types: !2351)
!2351 = !{!855, !2342, !611}
!2352 = !DILocalVariable(name: "i", arg: 1, scope: !2349, file: !613, line: 947, type: !2342)
!2353 = !DILocation(line: 947, column: 46, scope: !2349)
!2354 = !DILocalVariable(name: "a", arg: 2, scope: !2349, file: !613, line: 947, type: !611)
!2355 = !DILocation(line: 947, column: 64, scope: !2349)
!2356 = !DILocalVariable(name: "n", scope: !2349, file: !613, line: 949, type: !610)
!2357 = !DILocation(line: 949, column: 7, scope: !2349)
!2358 = !DILocation(line: 951, column: 12, scope: !2359)
!2359 = distinct !DILexicalBlock(scope: !2349, file: !613, line: 951, column: 3)
!2360 = !DILocation(line: 951, column: 15, scope: !2359)
!2361 = !DILocation(line: 951, column: 10, scope: !2359)
!2362 = !DILocation(line: 951, column: 8, scope: !2359)
!2363 = !DILocation(line: 951, column: 18, scope: !2364)
!2364 = distinct !DILexicalBlock(scope: !2359, file: !613, line: 951, column: 3)
!2365 = !DILocation(line: 951, column: 22, scope: !2364)
!2366 = !DILocation(line: 951, column: 20, scope: !2364)
!2367 = !DILocation(line: 951, column: 3, scope: !2359)
!2368 = !DILocation(line: 952, column: 9, scope: !2369)
!2369 = distinct !DILexicalBlock(scope: !2364, file: !613, line: 952, column: 9)
!2370 = !DILocation(line: 952, column: 22, scope: !2369)
!2371 = !DILocation(line: 952, column: 25, scope: !2369)
!2372 = !DILocation(line: 952, column: 9, scope: !2364)
!2373 = !DILocation(line: 954, column: 7, scope: !2374)
!2374 = distinct !DILexicalBlock(scope: !2369, file: !613, line: 953, column: 7)
!2375 = !DILocation(line: 954, column: 20, scope: !2374)
!2376 = !DILocation(line: 954, column: 3, scope: !2374)
!2377 = !DILocation(line: 954, column: 5, scope: !2374)
!2378 = !DILocation(line: 955, column: 9, scope: !2374)
!2379 = !DILocation(line: 955, column: 11, scope: !2374)
!2380 = !DILocation(line: 955, column: 2, scope: !2374)
!2381 = !DILocation(line: 955, column: 5, scope: !2374)
!2382 = !DILocation(line: 955, column: 7, scope: !2374)
!2383 = !DILocation(line: 956, column: 2, scope: !2374)
!2384 = !DILocation(line: 952, column: 28, scope: !2369)
!2385 = !DILocation(line: 951, column: 41, scope: !2364)
!2386 = !DILocation(line: 951, column: 3, scope: !2364)
!2387 = distinct !{!2387, !2367, !2388}
!2388 = !DILocation(line: 957, column: 7, scope: !2359)
!2389 = !DILocation(line: 958, column: 3, scope: !2349)
!2390 = !DILocation(line: 959, column: 1, scope: !2349)
!2391 = distinct !DISubprogram(name: "ira_allocno_conflict_iter_init", scope: !613, file: !613, line: 1044, type: !2392, scopeLine: 1046, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2392 = !DISubroutineType(types: !2393)
!2393 = !{null, !2394, !612}
!2394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2182, size: 64)
!2395 = !DILocalVariable(name: "i", arg: 1, scope: !2391, file: !613, line: 1044, type: !2394)
!2396 = !DILocation(line: 1044, column: 64, scope: !2391)
!2397 = !DILocalVariable(name: "allocno", arg: 2, scope: !2391, file: !613, line: 1045, type: !612)
!2398 = !DILocation(line: 1045, column: 19, scope: !2391)
!2399 = !DILocation(line: 1047, column: 31, scope: !2391)
!2400 = !DILocation(line: 1047, column: 3, scope: !2391)
!2401 = !DILocation(line: 1047, column: 6, scope: !2391)
!2402 = !DILocation(line: 1047, column: 29, scope: !2391)
!2403 = !DILocation(line: 1048, column: 12, scope: !2391)
!2404 = !DILocation(line: 1048, column: 3, scope: !2391)
!2405 = !DILocation(line: 1048, column: 6, scope: !2391)
!2406 = !DILocation(line: 1048, column: 10, scope: !2391)
!2407 = !DILocation(line: 1049, column: 3, scope: !2391)
!2408 = !DILocation(line: 1049, column: 6, scope: !2391)
!2409 = !DILocation(line: 1049, column: 15, scope: !2391)
!2410 = !DILocation(line: 1050, column: 7, scope: !2411)
!2411 = distinct !DILexicalBlock(scope: !2391, file: !613, line: 1050, column: 7)
!2412 = !DILocation(line: 1050, column: 10, scope: !2411)
!2413 = !DILocation(line: 1050, column: 7, scope: !2391)
!2414 = !DILocation(line: 1051, column: 50, scope: !2411)
!2415 = !DILocation(line: 1051, column: 53, scope: !2411)
!2416 = !DILocation(line: 1051, column: 58, scope: !2411)
!2417 = !DILocation(line: 1051, column: 28, scope: !2411)
!2418 = !DILocation(line: 1051, column: 31, scope: !2411)
!2419 = !DILocation(line: 1051, column: 48, scope: !2411)
!2420 = !DILocation(line: 1051, column: 15, scope: !2411)
!2421 = !DILocation(line: 1051, column: 18, scope: !2411)
!2422 = !DILocation(line: 1051, column: 26, scope: !2411)
!2423 = !DILocation(line: 1051, column: 5, scope: !2411)
!2424 = !DILocation(line: 1051, column: 8, scope: !2411)
!2425 = !DILocation(line: 1051, column: 13, scope: !2411)
!2426 = !DILocation(line: 1054, column: 11, scope: !2427)
!2427 = distinct !DILexicalBlock(scope: !2428, file: !613, line: 1054, column: 11)
!2428 = distinct !DILexicalBlock(scope: !2411, file: !613, line: 1053, column: 5)
!2429 = !DILocation(line: 1054, column: 35, scope: !2427)
!2430 = !DILocation(line: 1054, column: 33, scope: !2427)
!2431 = !DILocation(line: 1054, column: 11, scope: !2428)
!2432 = !DILocation(line: 1055, column: 2, scope: !2427)
!2433 = !DILocation(line: 1055, column: 5, scope: !2427)
!2434 = !DILocation(line: 1055, column: 10, scope: !2427)
!2435 = !DILocation(line: 1057, column: 14, scope: !2427)
!2436 = !DILocation(line: 1057, column: 38, scope: !2427)
!2437 = !DILocation(line: 1057, column: 36, scope: !2427)
!2438 = !DILocation(line: 1058, column: 7, scope: !2427)
!2439 = !DILocation(line: 1059, column: 6, scope: !2427)
!2440 = !DILocation(line: 1057, column: 12, scope: !2427)
!2441 = !DILocation(line: 1059, column: 22, scope: !2427)
!2442 = !DILocation(line: 1057, column: 2, scope: !2427)
!2443 = !DILocation(line: 1057, column: 5, scope: !2427)
!2444 = !DILocation(line: 1057, column: 10, scope: !2427)
!2445 = !DILocation(line: 1060, column: 7, scope: !2428)
!2446 = !DILocation(line: 1060, column: 10, scope: !2428)
!2447 = !DILocation(line: 1060, column: 18, scope: !2428)
!2448 = !DILocation(line: 1061, column: 29, scope: !2428)
!2449 = !DILocation(line: 1061, column: 7, scope: !2428)
!2450 = !DILocation(line: 1061, column: 10, scope: !2428)
!2451 = !DILocation(line: 1061, column: 27, scope: !2428)
!2452 = !DILocation(line: 1062, column: 18, scope: !2428)
!2453 = !DILocation(line: 1062, column: 21, scope: !2428)
!2454 = !DILocation(line: 1062, column: 26, scope: !2428)
!2455 = !DILocation(line: 1062, column: 55, scope: !2428)
!2456 = !DILocation(line: 1062, column: 58, scope: !2428)
!2457 = !DILocation(line: 1062, column: 38, scope: !2428)
!2458 = !DILocation(line: 1062, column: 37, scope: !2428)
!2459 = !DILocation(line: 1062, column: 7, scope: !2428)
!2460 = !DILocation(line: 1062, column: 10, scope: !2428)
!2461 = !DILocation(line: 1062, column: 15, scope: !2428)
!2462 = !DILocation(line: 1064, column: 1, scope: !2391)
!2463 = distinct !DISubprogram(name: "ira_allocno_conflict_iter_cond", scope: !613, file: !613, line: 1070, type: !2464, scopeLine: 1072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2464 = !DISubroutineType(types: !2465)
!2465 = !{!855, !2394, !611}
!2466 = !DILocalVariable(name: "i", arg: 1, scope: !2463, file: !613, line: 1070, type: !2394)
!2467 = !DILocation(line: 1070, column: 64, scope: !2463)
!2468 = !DILocalVariable(name: "a", arg: 2, scope: !2463, file: !613, line: 1071, type: !611)
!2469 = !DILocation(line: 1071, column: 20, scope: !2463)
!2470 = !DILocalVariable(name: "conflict_allocno", scope: !2463, file: !613, line: 1073, type: !612)
!2471 = !DILocation(line: 1073, column: 17, scope: !2463)
!2472 = !DILocation(line: 1075, column: 7, scope: !2473)
!2473 = distinct !DILexicalBlock(scope: !2463, file: !613, line: 1075, column: 7)
!2474 = !DILocation(line: 1075, column: 10, scope: !2473)
!2475 = !DILocation(line: 1075, column: 7, scope: !2463)
!2476 = !DILocation(line: 1077, column: 45, scope: !2477)
!2477 = distinct !DILexicalBlock(scope: !2473, file: !613, line: 1076, column: 5)
!2478 = !DILocation(line: 1077, column: 48, scope: !2477)
!2479 = !DILocation(line: 1077, column: 27, scope: !2477)
!2480 = !DILocation(line: 1077, column: 53, scope: !2477)
!2481 = !DILocation(line: 1077, column: 56, scope: !2477)
!2482 = !DILocation(line: 1077, column: 26, scope: !2477)
!2483 = !DILocation(line: 1077, column: 24, scope: !2477)
!2484 = !DILocation(line: 1078, column: 11, scope: !2485)
!2485 = distinct !DILexicalBlock(scope: !2477, file: !613, line: 1078, column: 11)
!2486 = !DILocation(line: 1078, column: 28, scope: !2485)
!2487 = !DILocation(line: 1078, column: 11, scope: !2477)
!2488 = !DILocation(line: 1079, column: 2, scope: !2485)
!2489 = !DILocation(line: 1080, column: 12, scope: !2477)
!2490 = !DILocation(line: 1080, column: 8, scope: !2477)
!2491 = !DILocation(line: 1080, column: 10, scope: !2477)
!2492 = !DILocation(line: 1081, column: 7, scope: !2477)
!2493 = !DILocation(line: 1086, column: 7, scope: !2494)
!2494 = distinct !DILexicalBlock(scope: !2473, file: !613, line: 1084, column: 5)
!2495 = !DILocation(line: 1086, column: 14, scope: !2496)
!2496 = distinct !DILexicalBlock(scope: !2497, file: !613, line: 1086, column: 7)
!2497 = distinct !DILexicalBlock(scope: !2494, file: !613, line: 1086, column: 7)
!2498 = !DILocation(line: 1086, column: 17, scope: !2496)
!2499 = !DILocation(line: 1086, column: 22, scope: !2496)
!2500 = !DILocation(line: 1086, column: 7, scope: !2497)
!2501 = !DILocation(line: 1088, column: 4, scope: !2502)
!2502 = distinct !DILexicalBlock(scope: !2496, file: !613, line: 1087, column: 2)
!2503 = !DILocation(line: 1088, column: 7, scope: !2502)
!2504 = !DILocation(line: 1088, column: 15, scope: !2502)
!2505 = !DILocation(line: 1091, column: 8, scope: !2506)
!2506 = distinct !DILexicalBlock(scope: !2502, file: !613, line: 1091, column: 8)
!2507 = !DILocation(line: 1091, column: 11, scope: !2506)
!2508 = !DILocation(line: 1091, column: 20, scope: !2506)
!2509 = !DILocation(line: 1091, column: 47, scope: !2506)
!2510 = !DILocation(line: 1091, column: 50, scope: !2506)
!2511 = !DILocation(line: 1091, column: 44, scope: !2506)
!2512 = !DILocation(line: 1091, column: 8, scope: !2502)
!2513 = !DILocation(line: 1092, column: 6, scope: !2506)
!2514 = !DILocation(line: 1094, column: 17, scope: !2502)
!2515 = !DILocation(line: 1094, column: 20, scope: !2502)
!2516 = !DILocation(line: 1094, column: 29, scope: !2502)
!2517 = !DILocation(line: 1094, column: 4, scope: !2502)
!2518 = !DILocation(line: 1094, column: 7, scope: !2502)
!2519 = !DILocation(line: 1094, column: 15, scope: !2502)
!2520 = !DILocation(line: 1095, column: 2, scope: !2502)
!2521 = !DILocation(line: 1086, column: 56, scope: !2496)
!2522 = !DILocation(line: 1086, column: 59, scope: !2496)
!2523 = !DILocation(line: 1086, column: 39, scope: !2496)
!2524 = !DILocation(line: 1086, column: 64, scope: !2496)
!2525 = !DILocation(line: 1086, column: 67, scope: !2496)
!2526 = !DILocation(line: 1086, column: 38, scope: !2496)
!2527 = !DILocation(line: 1086, column: 28, scope: !2496)
!2528 = !DILocation(line: 1086, column: 31, scope: !2496)
!2529 = !DILocation(line: 1086, column: 36, scope: !2496)
!2530 = !DILocation(line: 1086, column: 7, scope: !2496)
!2531 = distinct !{!2531, !2500, !2532}
!2532 = !DILocation(line: 1095, column: 2, scope: !2497)
!2533 = !DILocation(line: 1098, column: 7, scope: !2494)
!2534 = !DILocation(line: 1098, column: 15, scope: !2535)
!2535 = distinct !DILexicalBlock(scope: !2536, file: !613, line: 1098, column: 7)
!2536 = distinct !DILexicalBlock(scope: !2494, file: !613, line: 1098, column: 7)
!2537 = !DILocation(line: 1098, column: 18, scope: !2535)
!2538 = !DILocation(line: 1098, column: 23, scope: !2535)
!2539 = !DILocation(line: 1098, column: 28, scope: !2535)
!2540 = !DILocation(line: 1098, column: 7, scope: !2536)
!2541 = !DILocation(line: 1099, column: 2, scope: !2535)
!2542 = !DILocation(line: 1099, column: 5, scope: !2535)
!2543 = !DILocation(line: 1099, column: 12, scope: !2535)
!2544 = !DILocation(line: 1098, column: 34, scope: !2535)
!2545 = !DILocation(line: 1098, column: 37, scope: !2535)
!2546 = !DILocation(line: 1098, column: 42, scope: !2535)
!2547 = !DILocation(line: 1098, column: 7, scope: !2535)
!2548 = distinct !{!2548, !2540, !2549}
!2549 = !DILocation(line: 1099, column: 12, scope: !2536)
!2550 = !DILocation(line: 1101, column: 12, scope: !2494)
!2551 = !DILocation(line: 1101, column: 40, scope: !2494)
!2552 = !DILocation(line: 1101, column: 43, scope: !2494)
!2553 = !DILocation(line: 1101, column: 53, scope: !2494)
!2554 = !DILocation(line: 1101, column: 56, scope: !2494)
!2555 = !DILocation(line: 1101, column: 51, scope: !2494)
!2556 = !DILocation(line: 1101, column: 8, scope: !2494)
!2557 = !DILocation(line: 1101, column: 10, scope: !2494)
!2558 = !DILocation(line: 1103, column: 7, scope: !2494)
!2559 = !DILocation(line: 1105, column: 1, scope: !2463)
!2560 = distinct !DISubprogram(name: "ira_allocno_conflict_iter_next", scope: !613, file: !613, line: 1109, type: !2561, scopeLine: 1110, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2561 = !DISubroutineType(types: !2562)
!2562 = !{null, !2394}
!2563 = !DILocalVariable(name: "i", arg: 1, scope: !2560, file: !613, line: 1109, type: !2394)
!2564 = !DILocation(line: 1109, column: 64, scope: !2560)
!2565 = !DILocation(line: 1111, column: 7, scope: !2566)
!2566 = distinct !DILexicalBlock(scope: !2560, file: !613, line: 1111, column: 7)
!2567 = !DILocation(line: 1111, column: 10, scope: !2566)
!2568 = !DILocation(line: 1111, column: 7, scope: !2560)
!2569 = !DILocation(line: 1112, column: 5, scope: !2566)
!2570 = !DILocation(line: 1112, column: 8, scope: !2566)
!2571 = !DILocation(line: 1112, column: 16, scope: !2566)
!2572 = !DILocation(line: 1115, column: 7, scope: !2573)
!2573 = distinct !DILexicalBlock(scope: !2566, file: !613, line: 1114, column: 5)
!2574 = !DILocation(line: 1115, column: 10, scope: !2573)
!2575 = !DILocation(line: 1115, column: 15, scope: !2573)
!2576 = !DILocation(line: 1116, column: 7, scope: !2573)
!2577 = !DILocation(line: 1116, column: 10, scope: !2573)
!2578 = !DILocation(line: 1116, column: 17, scope: !2573)
!2579 = !DILocation(line: 1118, column: 1, scope: !2560)
!2580 = distinct !DISubprogram(name: "setup_allocno_priorities", scope: !3, file: !3, line: 1715, type: !2581, scopeLine: 1716, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2581 = !DISubroutineType(types: !2582)
!2582 = !{null, !611, !610}
!2583 = !DILocalVariable(name: "consideration_allocnos", arg: 1, scope: !2580, file: !3, line: 1715, type: !611)
!2584 = !DILocation(line: 1715, column: 42, scope: !2580)
!2585 = !DILocalVariable(name: "n", arg: 2, scope: !2580, file: !3, line: 1715, type: !610)
!2586 = !DILocation(line: 1715, column: 70, scope: !2580)
!2587 = !DILocalVariable(name: "i", scope: !2580, file: !3, line: 1717, type: !610)
!2588 = !DILocation(line: 1717, column: 7, scope: !2580)
!2589 = !DILocalVariable(name: "length", scope: !2580, file: !3, line: 1717, type: !610)
!2590 = !DILocation(line: 1717, column: 10, scope: !2580)
!2591 = !DILocalVariable(name: "nrefs", scope: !2580, file: !3, line: 1717, type: !610)
!2592 = !DILocation(line: 1717, column: 18, scope: !2580)
!2593 = !DILocalVariable(name: "priority", scope: !2580, file: !3, line: 1717, type: !610)
!2594 = !DILocation(line: 1717, column: 25, scope: !2580)
!2595 = !DILocalVariable(name: "max_priority", scope: !2580, file: !3, line: 1717, type: !610)
!2596 = !DILocation(line: 1717, column: 35, scope: !2580)
!2597 = !DILocalVariable(name: "mult", scope: !2580, file: !3, line: 1717, type: !610)
!2598 = !DILocation(line: 1717, column: 49, scope: !2580)
!2599 = !DILocalVariable(name: "a", scope: !2580, file: !3, line: 1718, type: !612)
!2600 = !DILocation(line: 1718, column: 17, scope: !2580)
!2601 = !DILocation(line: 1720, column: 16, scope: !2580)
!2602 = !DILocation(line: 1721, column: 10, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !2580, file: !3, line: 1721, column: 3)
!2604 = !DILocation(line: 1721, column: 8, scope: !2603)
!2605 = !DILocation(line: 1721, column: 15, scope: !2606)
!2606 = distinct !DILexicalBlock(scope: !2603, file: !3, line: 1721, column: 3)
!2607 = !DILocation(line: 1721, column: 19, scope: !2606)
!2608 = !DILocation(line: 1721, column: 17, scope: !2606)
!2609 = !DILocation(line: 1721, column: 3, scope: !2603)
!2610 = !DILocation(line: 1723, column: 11, scope: !2611)
!2611 = distinct !DILexicalBlock(scope: !2606, file: !3, line: 1722, column: 5)
!2612 = !DILocation(line: 1723, column: 34, scope: !2611)
!2613 = !DILocation(line: 1723, column: 9, scope: !2611)
!2614 = !DILocation(line: 1724, column: 15, scope: !2611)
!2615 = !DILocation(line: 1724, column: 13, scope: !2611)
!2616 = !DILocation(line: 1726, column: 26, scope: !2611)
!2617 = !DILocation(line: 1726, column: 14, scope: !2611)
!2618 = !DILocation(line: 1726, column: 45, scope: !2611)
!2619 = !DILocation(line: 1726, column: 12, scope: !2611)
!2620 = !DILocation(line: 1730, column: 5, scope: !2611)
!2621 = !DILocation(line: 1731, column: 8, scope: !2611)
!2622 = !DILocation(line: 1731, column: 34, scope: !2611)
!2623 = !DILocation(line: 1731, column: 32, scope: !2611)
!2624 = !DILocation(line: 1731, column: 5, scope: !2611)
!2625 = !DILocation(line: 1732, column: 27, scope: !2611)
!2626 = !DILocation(line: 1732, column: 7, scope: !2611)
!2627 = !DILocation(line: 1732, column: 52, scope: !2611)
!2628 = !DILocation(line: 1732, column: 5, scope: !2611)
!2629 = !DILocation(line: 1730, column: 2, scope: !2611)
!2630 = !DILocation(line: 1728, column: 7, scope: !2611)
!2631 = !DILocation(line: 1728, column: 26, scope: !2611)
!2632 = !DILocation(line: 1729, column: 2, scope: !2611)
!2633 = !DILocation(line: 1733, column: 11, scope: !2634)
!2634 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1733, column: 11)
!2635 = !DILocation(line: 1733, column: 20, scope: !2634)
!2636 = !DILocation(line: 1733, column: 11, scope: !2611)
!2637 = !DILocation(line: 1734, column: 14, scope: !2634)
!2638 = !DILocation(line: 1734, column: 13, scope: !2634)
!2639 = !DILocation(line: 1734, column: 11, scope: !2634)
!2640 = !DILocation(line: 1734, column: 2, scope: !2634)
!2641 = !DILocation(line: 1735, column: 11, scope: !2642)
!2642 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 1735, column: 11)
!2643 = !DILocation(line: 1735, column: 26, scope: !2642)
!2644 = !DILocation(line: 1735, column: 24, scope: !2642)
!2645 = !DILocation(line: 1735, column: 11, scope: !2611)
!2646 = !DILocation(line: 1736, column: 17, scope: !2642)
!2647 = !DILocation(line: 1736, column: 15, scope: !2642)
!2648 = !DILocation(line: 1736, column: 2, scope: !2642)
!2649 = !DILocation(line: 1737, column: 5, scope: !2611)
!2650 = !DILocation(line: 1721, column: 23, scope: !2606)
!2651 = !DILocation(line: 1721, column: 3, scope: !2606)
!2652 = distinct !{!2652, !2609, !2653}
!2653 = !DILocation(line: 1737, column: 5, scope: !2603)
!2654 = !DILocation(line: 1738, column: 10, scope: !2580)
!2655 = !DILocation(line: 1738, column: 23, scope: !2580)
!2656 = !DILocation(line: 1738, column: 44, scope: !2580)
!2657 = !DILocation(line: 1738, column: 42, scope: !2580)
!2658 = !DILocation(line: 1738, column: 8, scope: !2580)
!2659 = !DILocation(line: 1739, column: 10, scope: !2660)
!2660 = distinct !DILexicalBlock(scope: !2580, file: !3, line: 1739, column: 3)
!2661 = !DILocation(line: 1739, column: 8, scope: !2660)
!2662 = !DILocation(line: 1739, column: 15, scope: !2663)
!2663 = distinct !DILexicalBlock(scope: !2660, file: !3, line: 1739, column: 3)
!2664 = !DILocation(line: 1739, column: 19, scope: !2663)
!2665 = !DILocation(line: 1739, column: 17, scope: !2663)
!2666 = !DILocation(line: 1739, column: 3, scope: !2660)
!2667 = !DILocation(line: 1741, column: 11, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2663, file: !3, line: 1740, column: 5)
!2669 = !DILocation(line: 1741, column: 34, scope: !2668)
!2670 = !DILocation(line: 1741, column: 9, scope: !2668)
!2671 = !DILocation(line: 1742, column: 16, scope: !2668)
!2672 = !DILocation(line: 1742, column: 14, scope: !2668)
!2673 = !DILocation(line: 1743, column: 11, scope: !2674)
!2674 = distinct !DILexicalBlock(scope: !2668, file: !3, line: 1743, column: 11)
!2675 = !DILocation(line: 1743, column: 18, scope: !2674)
!2676 = !DILocation(line: 1743, column: 11, scope: !2668)
!2677 = !DILocation(line: 1744, column: 9, scope: !2674)
!2678 = !DILocation(line: 1744, column: 2, scope: !2674)
!2679 = !DILocation(line: 1746, column: 4, scope: !2668)
!2680 = !DILocation(line: 1746, column: 23, scope: !2668)
!2681 = !DILocation(line: 1746, column: 42, scope: !2668)
!2682 = !DILocation(line: 1746, column: 40, scope: !2668)
!2683 = !DILocation(line: 1746, column: 49, scope: !2668)
!2684 = !DILocation(line: 1746, column: 47, scope: !2668)
!2685 = !DILocation(line: 1745, column: 7, scope: !2668)
!2686 = !DILocation(line: 1745, column: 26, scope: !2668)
!2687 = !DILocation(line: 1746, column: 2, scope: !2668)
!2688 = !DILocation(line: 1747, column: 5, scope: !2668)
!2689 = !DILocation(line: 1739, column: 23, scope: !2663)
!2690 = !DILocation(line: 1739, column: 3, scope: !2663)
!2691 = distinct !{!2691, !2666, !2692}
!2692 = !DILocation(line: 1747, column: 5, scope: !2660)
!2693 = !DILocation(line: 1748, column: 1, scope: !2580)
!2694 = distinct !DISubprogram(name: "allocno_priority_compare_func", scope: !3, file: !3, line: 1753, type: !1182, scopeLine: 1754, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2695 = !DILocalVariable(name: "v1p", arg: 1, scope: !2694, file: !3, line: 1753, type: !1177)
!2696 = !DILocation(line: 1753, column: 44, scope: !2694)
!2697 = !DILocalVariable(name: "v2p", arg: 2, scope: !2694, file: !3, line: 1753, type: !1177)
!2698 = !DILocation(line: 1753, column: 61, scope: !2694)
!2699 = !DILocalVariable(name: "a1", scope: !2694, file: !3, line: 1755, type: !612)
!2700 = !DILocation(line: 1755, column: 17, scope: !2694)
!2701 = !DILocation(line: 1755, column: 47, scope: !2694)
!2702 = !DILocation(line: 1755, column: 23, scope: !2694)
!2703 = !DILocation(line: 1755, column: 22, scope: !2694)
!2704 = !DILocalVariable(name: "a2", scope: !2694, file: !3, line: 1756, type: !612)
!2705 = !DILocation(line: 1756, column: 17, scope: !2694)
!2706 = !DILocation(line: 1756, column: 47, scope: !2694)
!2707 = !DILocation(line: 1756, column: 23, scope: !2694)
!2708 = !DILocation(line: 1756, column: 22, scope: !2694)
!2709 = !DILocalVariable(name: "pri1", scope: !2694, file: !3, line: 1757, type: !610)
!2710 = !DILocation(line: 1757, column: 7, scope: !2694)
!2711 = !DILocalVariable(name: "pri2", scope: !2694, file: !3, line: 1757, type: !610)
!2712 = !DILocation(line: 1757, column: 13, scope: !2694)
!2713 = !DILocation(line: 1759, column: 10, scope: !2694)
!2714 = !DILocation(line: 1759, column: 29, scope: !2694)
!2715 = !DILocation(line: 1759, column: 8, scope: !2694)
!2716 = !DILocation(line: 1760, column: 10, scope: !2694)
!2717 = !DILocation(line: 1760, column: 29, scope: !2694)
!2718 = !DILocation(line: 1760, column: 8, scope: !2694)
!2719 = !DILocation(line: 1761, column: 7, scope: !2720)
!2720 = distinct !DILexicalBlock(scope: !2694, file: !3, line: 1761, column: 7)
!2721 = !DILocation(line: 1761, column: 14, scope: !2720)
!2722 = !DILocation(line: 1761, column: 12, scope: !2720)
!2723 = !DILocation(line: 1761, column: 7, scope: !2694)
!2724 = !DILocation(line: 1762, column: 12, scope: !2720)
!2725 = !DILocation(line: 1762, column: 19, scope: !2720)
!2726 = !DILocation(line: 1762, column: 17, scope: !2720)
!2727 = !DILocation(line: 1762, column: 5, scope: !2720)
!2728 = !DILocation(line: 1766, column: 10, scope: !2694)
!2729 = !DILocation(line: 1766, column: 29, scope: !2694)
!2730 = !DILocation(line: 1766, column: 27, scope: !2694)
!2731 = !DILocation(line: 1766, column: 3, scope: !2694)
!2732 = !DILocation(line: 1767, column: 1, scope: !2694)
!2733 = distinct !DISubprogram(name: "update_curr_costs", scope: !3, file: !3, line: 2239, type: !2734, scopeLine: 2240, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!2734 = !DISubroutineType(types: !2735)
!2735 = !{null, !612}
!2736 = !DILocalVariable(name: "a", arg: 1, scope: !2733, file: !3, line: 2239, type: !612)
!2737 = !DILocation(line: 2239, column: 34, scope: !2733)
!2738 = !DILocalVariable(name: "i", scope: !2733, file: !3, line: 2241, type: !610)
!2739 = !DILocation(line: 2241, column: 7, scope: !2733)
!2740 = !DILocalVariable(name: "hard_regno", scope: !2733, file: !3, line: 2241, type: !610)
!2741 = !DILocation(line: 2241, column: 10, scope: !2733)
!2742 = !DILocalVariable(name: "cost", scope: !2733, file: !3, line: 2241, type: !610)
!2743 = !DILocation(line: 2241, column: 22, scope: !2733)
!2744 = !DILocalVariable(name: "mode", scope: !2733, file: !3, line: 2242, type: !5)
!2745 = !DILocation(line: 2242, column: 21, scope: !2733)
!2746 = !DILocalVariable(name: "cover_class", scope: !2733, file: !3, line: 2243, type: !390)
!2747 = !DILocation(line: 2243, column: 18, scope: !2733)
!2748 = !DILocalVariable(name: "rclass", scope: !2733, file: !3, line: 2243, type: !390)
!2749 = !DILocation(line: 2243, column: 31, scope: !2733)
!2750 = !DILocalVariable(name: "another_a", scope: !2733, file: !3, line: 2244, type: !612)
!2751 = !DILocation(line: 2244, column: 17, scope: !2733)
!2752 = !DILocalVariable(name: "cp", scope: !2733, file: !3, line: 2245, type: !1758)
!2753 = !DILocation(line: 2245, column: 14, scope: !2733)
!2754 = !DILocalVariable(name: "next_cp", scope: !2733, file: !3, line: 2245, type: !1758)
!2755 = !DILocation(line: 2245, column: 18, scope: !2733)
!2756 = !DILocation(line: 2248, column: 17, scope: !2733)
!2757 = !DILocation(line: 2248, column: 15, scope: !2733)
!2758 = !DILocation(line: 2249, column: 7, scope: !2759)
!2759 = distinct !DILexicalBlock(scope: !2733, file: !3, line: 2249, column: 7)
!2760 = !DILocation(line: 2249, column: 19, scope: !2759)
!2761 = !DILocation(line: 2249, column: 7, scope: !2733)
!2762 = !DILocation(line: 2250, column: 5, scope: !2759)
!2763 = !DILocation(line: 2251, column: 10, scope: !2733)
!2764 = !DILocation(line: 2251, column: 8, scope: !2733)
!2765 = !DILocation(line: 2252, column: 13, scope: !2766)
!2766 = distinct !DILexicalBlock(scope: !2733, file: !3, line: 2252, column: 3)
!2767 = !DILocation(line: 2252, column: 11, scope: !2766)
!2768 = !DILocation(line: 2252, column: 8, scope: !2766)
!2769 = !DILocation(line: 2252, column: 33, scope: !2770)
!2770 = distinct !DILexicalBlock(scope: !2766, file: !3, line: 2252, column: 3)
!2771 = !DILocation(line: 2252, column: 36, scope: !2770)
!2772 = !DILocation(line: 2252, column: 3, scope: !2766)
!2773 = !DILocation(line: 2254, column: 11, scope: !2774)
!2774 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 2254, column: 11)
!2775 = distinct !DILexicalBlock(scope: !2770, file: !3, line: 2253, column: 5)
!2776 = !DILocation(line: 2254, column: 15, scope: !2774)
!2777 = !DILocation(line: 2254, column: 24, scope: !2774)
!2778 = !DILocation(line: 2254, column: 21, scope: !2774)
!2779 = !DILocation(line: 2254, column: 11, scope: !2775)
!2780 = !DILocation(line: 2256, column: 14, scope: !2781)
!2781 = distinct !DILexicalBlock(scope: !2774, file: !3, line: 2255, column: 2)
!2782 = !DILocation(line: 2256, column: 18, scope: !2781)
!2783 = !DILocation(line: 2256, column: 12, scope: !2781)
!2784 = !DILocation(line: 2257, column: 16, scope: !2781)
!2785 = !DILocation(line: 2257, column: 20, scope: !2781)
!2786 = !DILocation(line: 2257, column: 14, scope: !2781)
!2787 = !DILocation(line: 2258, column: 2, scope: !2781)
!2788 = !DILocation(line: 2259, column: 16, scope: !2789)
!2789 = distinct !DILexicalBlock(scope: !2774, file: !3, line: 2259, column: 16)
!2790 = !DILocation(line: 2259, column: 20, scope: !2789)
!2791 = !DILocation(line: 2259, column: 30, scope: !2789)
!2792 = !DILocation(line: 2259, column: 27, scope: !2789)
!2793 = !DILocation(line: 2259, column: 16, scope: !2774)
!2794 = !DILocation(line: 2261, column: 14, scope: !2795)
!2795 = distinct !DILexicalBlock(scope: !2789, file: !3, line: 2260, column: 2)
!2796 = !DILocation(line: 2261, column: 18, scope: !2795)
!2797 = !DILocation(line: 2261, column: 12, scope: !2795)
!2798 = !DILocation(line: 2262, column: 16, scope: !2795)
!2799 = !DILocation(line: 2262, column: 20, scope: !2795)
!2800 = !DILocation(line: 2262, column: 14, scope: !2795)
!2801 = !DILocation(line: 2263, column: 2, scope: !2795)
!2802 = !DILocation(line: 2265, column: 2, scope: !2789)
!2803 = !DILocation(line: 2266, column: 41, scope: !2804)
!2804 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 2266, column: 11)
!2805 = !DILocation(line: 2266, column: 13, scope: !2804)
!2806 = !DILocation(line: 2266, column: 54, scope: !2804)
!2807 = !DILocation(line: 2268, column: 4, scope: !2804)
!2808 = !DILocation(line: 2268, column: 9, scope: !2804)
!2809 = !DILocation(line: 2269, column: 4, scope: !2804)
!2810 = !DILocation(line: 2269, column: 21, scope: !2804)
!2811 = !DILocation(line: 2269, column: 19, scope: !2804)
!2812 = !DILocation(line: 2269, column: 53, scope: !2804)
!2813 = !DILocation(line: 2266, column: 11, scope: !2775)
!2814 = !DILocation(line: 2270, column: 2, scope: !2804)
!2815 = !DILocation(line: 2271, column: 16, scope: !2775)
!2816 = !DILocation(line: 2271, column: 14, scope: !2775)
!2817 = !DILocation(line: 2272, column: 36, scope: !2775)
!2818 = !DILocation(line: 2272, column: 11, scope: !2775)
!2819 = !DILocation(line: 2272, column: 49, scope: !2775)
!2820 = !DILocation(line: 2272, column: 9, scope: !2775)
!2821 = !DILocation(line: 2273, column: 11, scope: !2822)
!2822 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 2273, column: 11)
!2823 = !DILocation(line: 2273, column: 13, scope: !2822)
!2824 = !DILocation(line: 2273, column: 11, scope: !2775)
!2825 = !DILocation(line: 2274, column: 2, scope: !2822)
!2826 = !DILocation(line: 2275, column: 15, scope: !2775)
!2827 = !DILocation(line: 2275, column: 19, scope: !2775)
!2828 = !DILocation(line: 2275, column: 28, scope: !2775)
!2829 = !DILocation(line: 2275, column: 25, scope: !2775)
!2830 = !DILocation(line: 2276, column: 38, scope: !2775)
!2831 = !DILocation(line: 2276, column: 44, scope: !2775)
!2832 = !DILocation(line: 2276, column: 52, scope: !2775)
!2833 = !DILocation(line: 2276, column: 10, scope: !2775)
!2834 = !DILocation(line: 2277, column: 38, scope: !2775)
!2835 = !DILocation(line: 2277, column: 44, scope: !2775)
!2836 = !DILocation(line: 2277, column: 57, scope: !2775)
!2837 = !DILocation(line: 2277, column: 10, scope: !2775)
!2838 = !DILocation(line: 2275, column: 12, scope: !2775)
!2839 = !DILocation(line: 2279, column: 4, scope: !2775)
!2840 = !DILocation(line: 2280, column: 3, scope: !2775)
!2841 = !DILocation(line: 2280, column: 16, scope: !2775)
!2842 = !DILocation(line: 2281, column: 3, scope: !2775)
!2843 = !DILocation(line: 2278, column: 7, scope: !2775)
!2844 = !DILocation(line: 2283, column: 4, scope: !2775)
!2845 = !DILocation(line: 2284, column: 3, scope: !2775)
!2846 = !DILocation(line: 2284, column: 19, scope: !2775)
!2847 = !DILocation(line: 2282, column: 7, scope: !2775)
!2848 = !DILocation(line: 2285, column: 48, scope: !2775)
!2849 = !DILocation(line: 2285, column: 52, scope: !2775)
!2850 = !DILocation(line: 2285, column: 59, scope: !2775)
!2851 = !DILocation(line: 2285, column: 57, scope: !2775)
!2852 = !DILocation(line: 2285, column: 7, scope: !2775)
!2853 = !DILocation(line: 2285, column: 42, scope: !2775)
!2854 = !DILocation(line: 2285, column: 45, scope: !2775)
!2855 = !DILocation(line: 2286, column: 57, scope: !2775)
!2856 = !DILocation(line: 2286, column: 61, scope: !2775)
!2857 = !DILocation(line: 2286, column: 68, scope: !2775)
!2858 = !DILocation(line: 2286, column: 66, scope: !2775)
!2859 = !DILocation(line: 2286, column: 7, scope: !2775)
!2860 = !DILocation(line: 2286, column: 51, scope: !2775)
!2861 = !DILocation(line: 2286, column: 54, scope: !2775)
!2862 = !DILocation(line: 2287, column: 5, scope: !2775)
!2863 = !DILocation(line: 2252, column: 50, scope: !2770)
!2864 = !DILocation(line: 2252, column: 48, scope: !2770)
!2865 = !DILocation(line: 2252, column: 3, scope: !2770)
!2866 = distinct !{!2866, !2772, !2867}
!2867 = !DILocation(line: 2287, column: 5, scope: !2766)
!2868 = !DILocation(line: 2288, column: 1, scope: !2733)
!2869 = !DILocalVariable(name: "allocno", arg: 1, scope: !1883, file: !3, line: 440, type: !612)
!2870 = !DILocation(line: 440, column: 32, scope: !1883)
!2871 = !DILocalVariable(name: "retry_p", arg: 2, scope: !1883, file: !3, line: 440, type: !855)
!2872 = !DILocation(line: 440, column: 46, scope: !1883)
!2873 = !DILocalVariable(name: "conflicting_regs", scope: !1883, file: !3, line: 442, type: !1794)
!2874 = !DILocation(line: 442, column: 16, scope: !1883)
!2875 = !DILocalVariable(name: "i", scope: !1883, file: !3, line: 443, type: !610)
!2876 = !DILocation(line: 443, column: 7, scope: !1883)
!2877 = !DILocalVariable(name: "j", scope: !1883, file: !3, line: 443, type: !610)
!2878 = !DILocation(line: 443, column: 10, scope: !1883)
!2879 = !DILocalVariable(name: "k", scope: !1883, file: !3, line: 443, type: !610)
!2880 = !DILocation(line: 443, column: 13, scope: !1883)
!2881 = !DILocalVariable(name: "hard_regno", scope: !1883, file: !3, line: 443, type: !610)
!2882 = !DILocation(line: 443, column: 16, scope: !1883)
!2883 = !DILocalVariable(name: "best_hard_regno", scope: !1883, file: !3, line: 443, type: !610)
!2884 = !DILocation(line: 443, column: 28, scope: !1883)
!2885 = !DILocalVariable(name: "class_size", scope: !1883, file: !3, line: 443, type: !610)
!2886 = !DILocation(line: 443, column: 45, scope: !1883)
!2887 = !DILocalVariable(name: "cost", scope: !1883, file: !3, line: 444, type: !610)
!2888 = !DILocation(line: 444, column: 7, scope: !1883)
!2889 = !DILocalVariable(name: "mem_cost", scope: !1883, file: !3, line: 444, type: !610)
!2890 = !DILocation(line: 444, column: 13, scope: !1883)
!2891 = !DILocalVariable(name: "min_cost", scope: !1883, file: !3, line: 444, type: !610)
!2892 = !DILocation(line: 444, column: 23, scope: !1883)
!2893 = !DILocalVariable(name: "full_cost", scope: !1883, file: !3, line: 444, type: !610)
!2894 = !DILocation(line: 444, column: 33, scope: !1883)
!2895 = !DILocalVariable(name: "min_full_cost", scope: !1883, file: !3, line: 444, type: !610)
!2896 = !DILocation(line: 444, column: 44, scope: !1883)
!2897 = !DILocalVariable(name: "add_cost", scope: !1883, file: !3, line: 444, type: !610)
!2898 = !DILocation(line: 444, column: 59, scope: !1883)
!2899 = !DILocalVariable(name: "a_costs", scope: !1883, file: !3, line: 445, type: !609)
!2900 = !DILocation(line: 445, column: 8, scope: !1883)
!2901 = !DILocalVariable(name: "conflict_costs", scope: !1883, file: !3, line: 446, type: !609)
!2902 = !DILocation(line: 446, column: 8, scope: !1883)
!2903 = !DILocalVariable(name: "cover_class", scope: !1883, file: !3, line: 447, type: !390)
!2904 = !DILocation(line: 447, column: 18, scope: !1883)
!2905 = !DILocalVariable(name: "rclass", scope: !1883, file: !3, line: 447, type: !390)
!2906 = !DILocation(line: 447, column: 31, scope: !1883)
!2907 = !DILocalVariable(name: "conflict_cover_class", scope: !1883, file: !3, line: 447, type: !390)
!2908 = !DILocation(line: 447, column: 39, scope: !1883)
!2909 = !DILocalVariable(name: "mode", scope: !1883, file: !3, line: 448, type: !5)
!2910 = !DILocation(line: 448, column: 21, scope: !1883)
!2911 = !DILocalVariable(name: "a", scope: !1883, file: !3, line: 449, type: !612)
!2912 = !DILocation(line: 449, column: 17, scope: !1883)
!2913 = !DILocalVariable(name: "conflict_allocno", scope: !1883, file: !3, line: 449, type: !612)
!2914 = !DILocation(line: 449, column: 20, scope: !1883)
!2915 = !DILocalVariable(name: "aci", scope: !1883, file: !3, line: 450, type: !2182)
!2916 = !DILocation(line: 450, column: 33, scope: !1883)
!2917 = !DILocalVariable(name: "no_stack_reg_p", scope: !1883, file: !3, line: 453, type: !855)
!2918 = !DILocation(line: 453, column: 8, scope: !1883)
!2919 = !DILocation(line: 457, column: 17, scope: !1883)
!2920 = !DILocation(line: 457, column: 15, scope: !1883)
!2921 = !DILocation(line: 458, column: 40, scope: !1883)
!2922 = !DILocation(line: 458, column: 16, scope: !1883)
!2923 = !DILocation(line: 458, column: 14, scope: !1883)
!2924 = !DILocation(line: 459, column: 10, scope: !1883)
!2925 = !DILocation(line: 459, column: 8, scope: !1883)
!2926 = !DILocation(line: 460, column: 3, scope: !1883)
!2927 = !DILocation(line: 461, column: 19, scope: !1883)
!2928 = !DILocation(line: 462, column: 41, scope: !1883)
!2929 = !DILocation(line: 462, column: 39, scope: !1883)
!2930 = !DILocation(line: 462, column: 3, scope: !1883)
!2931 = !DILocation(line: 463, column: 12, scope: !1883)
!2932 = !DILocation(line: 464, column: 7, scope: !2933)
!2933 = distinct !DILexicalBlock(scope: !1883, file: !3, line: 464, column: 7)
!2934 = !DILocation(line: 464, column: 7, scope: !1883)
!2935 = !DILocation(line: 465, column: 19, scope: !2933)
!2936 = !DILocation(line: 465, column: 5, scope: !2933)
!2937 = !DILocation(line: 466, column: 36, scope: !1883)
!2938 = !DILocation(line: 466, column: 34, scope: !1883)
!2939 = !DILocation(line: 466, column: 3, scope: !1883)
!2940 = !DILocation(line: 467, column: 41, scope: !1883)
!2941 = !DILocation(line: 467, column: 39, scope: !1883)
!2942 = !DILocation(line: 467, column: 3, scope: !1883)
!2943 = !DILocation(line: 469, column: 18, scope: !1883)
!2944 = !DILocation(line: 471, column: 3, scope: !1883)
!2945 = !DILocation(line: 472, column: 12, scope: !2946)
!2946 = distinct !DILexicalBlock(scope: !1883, file: !3, line: 472, column: 3)
!2947 = !DILocation(line: 472, column: 10, scope: !2946)
!2948 = !DILocation(line: 472, column: 8, scope: !2946)
!2949 = !DILocation(line: 475, column: 19, scope: !2950)
!2950 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 474, column: 5)
!2951 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 472, column: 3)
!2952 = !DILocation(line: 475, column: 16, scope: !2950)
!2953 = !DILocation(line: 476, column: 7, scope: !2950)
!2954 = !DILocation(line: 478, column: 37, scope: !2950)
!2955 = !DILocation(line: 479, column: 8, scope: !2950)
!2956 = !DILocation(line: 479, column: 21, scope: !2950)
!2957 = !DILocation(line: 478, column: 7, scope: !2950)
!2958 = !DILocation(line: 480, column: 17, scope: !2950)
!2959 = !DILocation(line: 480, column: 15, scope: !2950)
!2960 = !DILocation(line: 482, column: 24, scope: !2950)
!2961 = !DILocation(line: 482, column: 39, scope: !2950)
!2962 = !DILocation(line: 482, column: 42, scope: !2950)
!2963 = !DILocation(line: 482, column: 22, scope: !2950)
!2964 = !DILocation(line: 484, column: 19, scope: !2965)
!2965 = distinct !DILexicalBlock(scope: !2950, file: !3, line: 484, column: 7)
!2966 = !DILocation(line: 484, column: 17, scope: !2965)
!2967 = !DILocation(line: 484, column: 59, scope: !2965)
!2968 = !DILocation(line: 484, column: 12, scope: !2965)
!2969 = !DILocation(line: 485, column: 5, scope: !2970)
!2970 = distinct !DILexicalBlock(scope: !2965, file: !3, line: 484, column: 7)
!2971 = !DILocation(line: 485, column: 9, scope: !2970)
!2972 = !DILocation(line: 485, column: 7, scope: !2970)
!2973 = !DILocation(line: 484, column: 7, scope: !2965)
!2974 = !DILocation(line: 487, column: 6, scope: !2975)
!2975 = distinct !DILexicalBlock(scope: !2970, file: !3, line: 487, column: 6)
!2976 = !DILocation(line: 487, column: 14, scope: !2975)
!2977 = !DILocation(line: 487, column: 6, scope: !2970)
!2978 = !DILocation(line: 489, column: 18, scope: !2979)
!2979 = distinct !DILexicalBlock(scope: !2975, file: !3, line: 488, column: 4)
!2980 = !DILocation(line: 489, column: 26, scope: !2979)
!2981 = !DILocation(line: 489, column: 12, scope: !2979)
!2982 = !DILocation(line: 489, column: 6, scope: !2979)
!2983 = !DILocation(line: 489, column: 15, scope: !2979)
!2984 = !DILocation(line: 490, column: 23, scope: !2979)
!2985 = !DILocation(line: 490, column: 31, scope: !2979)
!2986 = !DILocation(line: 490, column: 17, scope: !2979)
!2987 = !DILocation(line: 490, column: 6, scope: !2979)
!2988 = !DILocation(line: 490, column: 20, scope: !2979)
!2989 = !DILocation(line: 491, column: 4, scope: !2979)
!2990 = !DILocation(line: 494, column: 18, scope: !2991)
!2991 = distinct !DILexicalBlock(scope: !2975, file: !3, line: 493, column: 4)
!2992 = !DILocation(line: 494, column: 12, scope: !2991)
!2993 = !DILocation(line: 494, column: 6, scope: !2991)
!2994 = !DILocation(line: 494, column: 15, scope: !2991)
!2995 = !DILocation(line: 495, column: 23, scope: !2991)
!2996 = !DILocation(line: 495, column: 17, scope: !2991)
!2997 = !DILocation(line: 495, column: 6, scope: !2991)
!2998 = !DILocation(line: 495, column: 20, scope: !2991)
!2999 = !DILocation(line: 487, column: 17, scope: !2975)
!3000 = !DILocation(line: 486, column: 6, scope: !2970)
!3001 = !DILocation(line: 484, column: 7, scope: !2970)
!3002 = distinct !{!3002, !2973, !3003}
!3003 = !DILocation(line: 496, column: 4, scope: !2965)
!3004 = !DILocation(line: 498, column: 7, scope: !3005)
!3005 = distinct !DILexicalBlock(scope: !2950, file: !3, line: 498, column: 7)
!3006 = !DILocation(line: 498, column: 7, scope: !3007)
!3007 = distinct !DILexicalBlock(scope: !3005, file: !3, line: 498, column: 7)
!3008 = !DILocation(line: 501, column: 6, scope: !3009)
!3009 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 501, column: 6)
!3010 = !DILocation(line: 501, column: 14, scope: !3009)
!3011 = !DILocation(line: 501, column: 31, scope: !3009)
!3012 = !DILocation(line: 502, column: 10, scope: !3009)
!3013 = !DILocation(line: 501, column: 17, scope: !3009)
!3014 = !DILocation(line: 501, column: 6, scope: !3007)
!3015 = !DILocation(line: 504, column: 29, scope: !3016)
!3016 = distinct !DILexicalBlock(scope: !3009, file: !3, line: 503, column: 4)
!3017 = !DILocation(line: 504, column: 27, scope: !3016)
!3018 = !DILocation(line: 507, column: 10, scope: !3019)
!3019 = distinct !DILexicalBlock(scope: !3016, file: !3, line: 507, column: 10)
!3020 = !DILocation(line: 507, column: 10, scope: !3016)
!3021 = !DILocation(line: 509, column: 21, scope: !3022)
!3022 = distinct !DILexicalBlock(scope: !3023, file: !3, line: 509, column: 7)
!3023 = distinct !DILexicalBlock(scope: !3019, file: !3, line: 508, column: 8)
!3024 = !DILocation(line: 510, column: 7, scope: !3022)
!3025 = !DILocation(line: 509, column: 7, scope: !3022)
!3026 = !DILocation(line: 509, column: 7, scope: !3023)
!3027 = !DILocation(line: 511, column: 5, scope: !3022)
!3028 = !DILocation(line: 512, column: 19, scope: !3023)
!3029 = !DILocation(line: 513, column: 5, scope: !3023)
!3030 = !DILocation(line: 512, column: 3, scope: !3023)
!3031 = !DILocation(line: 514, column: 8, scope: !3023)
!3032 = !DILocation(line: 515, column: 10, scope: !3033)
!3033 = distinct !DILexicalBlock(scope: !3016, file: !3, line: 515, column: 10)
!3034 = !DILocation(line: 515, column: 10, scope: !3016)
!3035 = !DILocation(line: 517, column: 21, scope: !3036)
!3036 = distinct !DILexicalBlock(scope: !3037, file: !3, line: 517, column: 7)
!3037 = distinct !DILexicalBlock(scope: !3033, file: !3, line: 516, column: 8)
!3038 = !DILocation(line: 517, column: 19, scope: !3036)
!3039 = !DILocation(line: 517, column: 60, scope: !3036)
!3040 = !DILocation(line: 518, column: 7, scope: !3036)
!3041 = !DILocation(line: 518, column: 35, scope: !3036)
!3042 = !DILocation(line: 518, column: 10, scope: !3036)
!3043 = !DILocation(line: 518, column: 48, scope: !3036)
!3044 = !DILocation(line: 518, column: 60, scope: !3036)
!3045 = !DILocation(line: 517, column: 7, scope: !3037)
!3046 = !DILocation(line: 520, column: 7, scope: !3047)
!3047 = distinct !DILexicalBlock(scope: !3036, file: !3, line: 519, column: 5)
!3048 = !DILocation(line: 524, column: 53, scope: !3049)
!3049 = distinct !DILexicalBlock(scope: !3047, file: !3, line: 524, column: 11)
!3050 = !DILocation(line: 524, column: 34, scope: !3049)
!3051 = !DILocation(line: 525, column: 13, scope: !3049)
!3052 = !DILocation(line: 524, column: 11, scope: !3049)
!3053 = !DILocation(line: 524, column: 11, scope: !3047)
!3054 = !DILocation(line: 526, column: 9, scope: !3049)
!3055 = !DILocation(line: 527, column: 5, scope: !3047)
!3056 = !DILocation(line: 528, column: 8, scope: !3037)
!3057 = !DILocation(line: 529, column: 17, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !3033, file: !3, line: 529, column: 15)
!3059 = !DILocation(line: 529, column: 15, scope: !3033)
!3060 = !DILocation(line: 533, column: 7, scope: !3061)
!3061 = distinct !DILexicalBlock(scope: !3058, file: !3, line: 531, column: 8)
!3062 = !DILocation(line: 534, column: 6, scope: !3061)
!3063 = !DILocation(line: 535, column: 6, scope: !3061)
!3064 = !DILocation(line: 532, column: 3, scope: !3061)
!3065 = !DILocation(line: 537, column: 7, scope: !3061)
!3066 = !DILocation(line: 537, column: 5, scope: !3061)
!3067 = !DILocation(line: 538, column: 7, scope: !3068)
!3068 = distinct !DILexicalBlock(scope: !3061, file: !3, line: 538, column: 7)
!3069 = !DILocation(line: 538, column: 22, scope: !3068)
!3070 = !DILocation(line: 538, column: 7, scope: !3061)
!3071 = !DILocation(line: 539, column: 14, scope: !3072)
!3072 = distinct !DILexicalBlock(scope: !3068, file: !3, line: 539, column: 5)
!3073 = !DILocation(line: 539, column: 25, scope: !3072)
!3074 = !DILocation(line: 539, column: 12, scope: !3072)
!3075 = !DILocation(line: 539, column: 10, scope: !3072)
!3076 = !DILocation(line: 539, column: 30, scope: !3077)
!3077 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 539, column: 5)
!3078 = !DILocation(line: 539, column: 32, scope: !3077)
!3079 = !DILocation(line: 539, column: 5, scope: !3072)
!3080 = !DILocation(line: 541, column: 43, scope: !3081)
!3081 = distinct !DILexicalBlock(scope: !3077, file: !3, line: 540, column: 8)
!3082 = !DILocation(line: 541, column: 23, scope: !3081)
!3083 = !DILocation(line: 541, column: 56, scope: !3081)
!3084 = !DILocation(line: 541, column: 21, scope: !3081)
!3085 = !DILocation(line: 544, column: 9, scope: !3081)
!3086 = !DILocation(line: 543, column: 15, scope: !3081)
!3087 = !DILocation(line: 544, column: 31, scope: !3081)
!3088 = !DILocation(line: 543, column: 14, scope: !3081)
!3089 = !DILocation(line: 543, column: 12, scope: !3081)
!3090 = !DILocation(line: 545, column: 14, scope: !3091)
!3091 = distinct !DILexicalBlock(scope: !3081, file: !3, line: 545, column: 14)
!3092 = !DILocation(line: 545, column: 16, scope: !3091)
!3093 = !DILocation(line: 545, column: 14, scope: !3081)
!3094 = !DILocation(line: 546, column: 5, scope: !3091)
!3095 = !DILocation(line: 547, column: 27, scope: !3081)
!3096 = !DILocation(line: 547, column: 42, scope: !3081)
!3097 = !DILocation(line: 547, column: 21, scope: !3081)
!3098 = !DILocation(line: 547, column: 10, scope: !3081)
!3099 = !DILocation(line: 547, column: 24, scope: !3081)
!3100 = !DILocation(line: 548, column: 8, scope: !3081)
!3101 = !DILocation(line: 539, column: 39, scope: !3077)
!3102 = !DILocation(line: 539, column: 5, scope: !3077)
!3103 = distinct !{!3103, !3079, !3104}
!3104 = !DILocation(line: 548, column: 8, scope: !3072)
!3105 = !DILocation(line: 549, column: 22, scope: !3061)
!3106 = !DILocation(line: 549, column: 3, scope: !3061)
!3107 = !DILocation(line: 550, column: 8, scope: !3061)
!3108 = !DILocation(line: 551, column: 4, scope: !3016)
!3109 = !DILocation(line: 502, column: 40, scope: !3009)
!3110 = distinct !{!3110, !3004, !3111}
!3111 = !DILocation(line: 551, column: 4, scope: !3005)
!3112 = !DILocation(line: 552, column: 11, scope: !3113)
!3113 = distinct !DILexicalBlock(scope: !2950, file: !3, line: 552, column: 11)
!3114 = !DILocation(line: 552, column: 16, scope: !3113)
!3115 = !DILocation(line: 552, column: 13, scope: !3113)
!3116 = !DILocation(line: 552, column: 11, scope: !2950)
!3117 = !DILocation(line: 553, column: 2, scope: !3113)
!3118 = !DILocation(line: 554, column: 5, scope: !2950)
!3119 = !DILocation(line: 473, column: 12, scope: !2951)
!3120 = !DILocation(line: 473, column: 10, scope: !2951)
!3121 = !DILocation(line: 472, column: 3, scope: !2951)
!3122 = distinct !{!3122, !3123, !3124}
!3123 = !DILocation(line: 472, column: 3, scope: !2946)
!3124 = !DILocation(line: 554, column: 5, scope: !2946)
!3125 = !DILocation(line: 557, column: 49, scope: !1883)
!3126 = !DILocation(line: 557, column: 3, scope: !1883)
!3127 = !DILocation(line: 561, column: 3, scope: !1883)
!3128 = !DILocation(line: 562, column: 12, scope: !3129)
!3129 = distinct !DILexicalBlock(scope: !1883, file: !3, line: 562, column: 3)
!3130 = !DILocation(line: 562, column: 10, scope: !3129)
!3131 = !DILocation(line: 562, column: 8, scope: !3129)
!3132 = !DILocation(line: 565, column: 26, scope: !3133)
!3133 = distinct !DILexicalBlock(scope: !3134, file: !3, line: 564, column: 5)
!3134 = distinct !DILexicalBlock(scope: !3129, file: !3, line: 562, column: 3)
!3135 = !DILocation(line: 565, column: 7, scope: !3133)
!3136 = !DILocation(line: 566, column: 11, scope: !3137)
!3137 = distinct !DILexicalBlock(scope: !3133, file: !3, line: 566, column: 11)
!3138 = !DILocation(line: 566, column: 16, scope: !3137)
!3139 = !DILocation(line: 566, column: 13, scope: !3137)
!3140 = !DILocation(line: 566, column: 11, scope: !3133)
!3141 = !DILocation(line: 567, column: 2, scope: !3137)
!3142 = !DILocation(line: 568, column: 5, scope: !3133)
!3143 = !DILocation(line: 563, column: 12, scope: !3134)
!3144 = !DILocation(line: 563, column: 10, scope: !3134)
!3145 = !DILocation(line: 562, column: 3, scope: !3134)
!3146 = distinct !{!3146, !3147, !3148}
!3147 = !DILocation(line: 562, column: 3, scope: !3129)
!3148 = !DILocation(line: 568, column: 5, scope: !3129)
!3149 = !DILocation(line: 569, column: 49, scope: !1883)
!3150 = !DILocation(line: 569, column: 3, scope: !1883)
!3151 = !DILocation(line: 570, column: 28, scope: !1883)
!3152 = !DILocation(line: 570, column: 12, scope: !1883)
!3153 = !DILocation(line: 575, column: 10, scope: !3154)
!3154 = distinct !DILexicalBlock(scope: !1883, file: !3, line: 575, column: 3)
!3155 = !DILocation(line: 575, column: 8, scope: !3154)
!3156 = !DILocation(line: 575, column: 15, scope: !3157)
!3157 = distinct !DILexicalBlock(scope: !3154, file: !3, line: 575, column: 3)
!3158 = !DILocation(line: 575, column: 19, scope: !3157)
!3159 = !DILocation(line: 575, column: 17, scope: !3157)
!3160 = !DILocation(line: 575, column: 3, scope: !3154)
!3161 = !DILocation(line: 577, column: 40, scope: !3162)
!3162 = distinct !DILexicalBlock(scope: !3157, file: !3, line: 576, column: 5)
!3163 = !DILocation(line: 577, column: 20, scope: !3162)
!3164 = !DILocation(line: 577, column: 53, scope: !3162)
!3165 = !DILocation(line: 577, column: 18, scope: !3162)
!3166 = !DILocation(line: 579, column: 11, scope: !3167)
!3167 = distinct !DILexicalBlock(scope: !3162, file: !3, line: 579, column: 11)
!3168 = !DILocation(line: 580, column: 4, scope: !3167)
!3169 = !DILocation(line: 580, column: 26, scope: !3167)
!3170 = !DILocation(line: 580, column: 23, scope: !3167)
!3171 = !DILocation(line: 580, column: 37, scope: !3167)
!3172 = !DILocation(line: 580, column: 40, scope: !3167)
!3173 = !DILocation(line: 580, column: 51, scope: !3167)
!3174 = !DILocation(line: 579, column: 11, scope: !3162)
!3175 = !DILocation(line: 581, column: 2, scope: !3167)
!3176 = !DILocation(line: 583, column: 40, scope: !3177)
!3177 = distinct !DILexicalBlock(scope: !3162, file: !3, line: 583, column: 11)
!3178 = !DILocation(line: 583, column: 52, scope: !3177)
!3179 = !DILocation(line: 583, column: 58, scope: !3177)
!3180 = !DILocation(line: 583, column: 13, scope: !3177)
!3181 = !DILocation(line: 584, column: 4, scope: !3177)
!3182 = !DILocation(line: 584, column: 7, scope: !3177)
!3183 = !DILocation(line: 583, column: 11, scope: !3162)
!3184 = !DILocation(line: 586, column: 2, scope: !3177)
!3185 = !DILocation(line: 587, column: 20, scope: !3162)
!3186 = !DILocation(line: 587, column: 14, scope: !3162)
!3187 = !DILocation(line: 587, column: 12, scope: !3162)
!3188 = !DILocation(line: 588, column: 30, scope: !3162)
!3189 = !DILocation(line: 588, column: 19, scope: !3162)
!3190 = !DILocation(line: 588, column: 17, scope: !3162)
!3191 = !DILocation(line: 589, column: 33, scope: !3192)
!3192 = distinct !DILexicalBlock(scope: !3162, file: !3, line: 589, column: 11)
!3193 = !DILocation(line: 589, column: 13, scope: !3192)
!3194 = !DILocation(line: 590, column: 4, scope: !3192)
!3195 = !DILocation(line: 590, column: 34, scope: !3192)
!3196 = !DILocation(line: 590, column: 46, scope: !3192)
!3197 = !DILocation(line: 590, column: 52, scope: !3192)
!3198 = !DILocation(line: 590, column: 7, scope: !3192)
!3199 = !DILocation(line: 589, column: 11, scope: !3162)
!3200 = !DILocation(line: 595, column: 13, scope: !3201)
!3201 = distinct !DILexicalBlock(scope: !3192, file: !3, line: 593, column: 2)
!3202 = !DILocation(line: 595, column: 11, scope: !3201)
!3203 = !DILocation(line: 596, column: 37, scope: !3201)
!3204 = !DILocation(line: 596, column: 16, scope: !3201)
!3205 = !DILocation(line: 596, column: 43, scope: !3201)
!3206 = !DILocation(line: 597, column: 32, scope: !3201)
!3207 = !DILocation(line: 597, column: 11, scope: !3201)
!3208 = !DILocation(line: 597, column: 38, scope: !3201)
!3209 = !DILocation(line: 597, column: 9, scope: !3201)
!3210 = !DILocation(line: 597, column: 49, scope: !3201)
!3211 = !DILocation(line: 596, column: 13, scope: !3201)
!3212 = !DILocation(line: 598, column: 12, scope: !3201)
!3213 = !DILocation(line: 598, column: 9, scope: !3201)
!3214 = !DILocation(line: 599, column: 17, scope: !3201)
!3215 = !DILocation(line: 599, column: 14, scope: !3201)
!3216 = !DILocation(line: 600, column: 2, scope: !3201)
!3217 = !DILocation(line: 601, column: 11, scope: !3218)
!3218 = distinct !DILexicalBlock(scope: !3162, file: !3, line: 601, column: 11)
!3219 = !DILocation(line: 601, column: 22, scope: !3218)
!3220 = !DILocation(line: 601, column: 20, scope: !3218)
!3221 = !DILocation(line: 601, column: 11, scope: !3162)
!3222 = !DILocation(line: 602, column: 13, scope: !3218)
!3223 = !DILocation(line: 602, column: 11, scope: !3218)
!3224 = !DILocation(line: 602, column: 2, scope: !3218)
!3225 = !DILocation(line: 603, column: 11, scope: !3226)
!3226 = distinct !DILexicalBlock(scope: !3162, file: !3, line: 603, column: 11)
!3227 = !DILocation(line: 603, column: 27, scope: !3226)
!3228 = !DILocation(line: 603, column: 25, scope: !3226)
!3229 = !DILocation(line: 603, column: 11, scope: !3162)
!3230 = !DILocation(line: 605, column: 20, scope: !3231)
!3231 = distinct !DILexicalBlock(scope: !3226, file: !3, line: 604, column: 2)
!3232 = !DILocation(line: 605, column: 18, scope: !3231)
!3233 = !DILocation(line: 606, column: 22, scope: !3231)
!3234 = !DILocation(line: 606, column: 20, scope: !3231)
!3235 = !DILocation(line: 608, column: 2, scope: !3231)
!3236 = !DILocation(line: 609, column: 5, scope: !3162)
!3237 = !DILocation(line: 575, column: 32, scope: !3157)
!3238 = !DILocation(line: 575, column: 3, scope: !3157)
!3239 = distinct !{!3239, !3160, !3240}
!3240 = !DILocation(line: 609, column: 5, scope: !3154)
!3241 = !DILocation(line: 610, column: 7, scope: !3242)
!3242 = distinct !DILexicalBlock(scope: !1883, file: !3, line: 610, column: 7)
!3243 = !DILocation(line: 610, column: 23, scope: !3242)
!3244 = !DILocation(line: 610, column: 21, scope: !3242)
!3245 = !DILocation(line: 610, column: 7, scope: !1883)
!3246 = !DILocation(line: 612, column: 13, scope: !3247)
!3247 = distinct !DILexicalBlock(scope: !3248, file: !3, line: 612, column: 11)
!3248 = distinct !DILexicalBlock(scope: !3242, file: !3, line: 611, column: 5)
!3249 = !DILocation(line: 612, column: 21, scope: !3247)
!3250 = !DILocation(line: 612, column: 24, scope: !3247)
!3251 = !DILocation(line: 612, column: 50, scope: !3247)
!3252 = !DILocation(line: 612, column: 54, scope: !3247)
!3253 = !DILocation(line: 612, column: 57, scope: !3247)
!3254 = !DILocation(line: 612, column: 71, scope: !3247)
!3255 = !DILocation(line: 612, column: 11, scope: !3248)
!3256 = !DILocation(line: 613, column: 11, scope: !3247)
!3257 = !DILocation(line: 614, column: 4, scope: !3247)
!3258 = !DILocation(line: 614, column: 14, scope: !3247)
!3259 = !DILocation(line: 613, column: 2, scope: !3247)
!3260 = !DILocation(line: 615, column: 23, scope: !3248)
!3261 = !DILocation(line: 616, column: 5, scope: !3248)
!3262 = !DILabel(scope: !1883, name: "fail", file: !3, line: 617)
!3263 = !DILocation(line: 617, column: 2, scope: !1883)
!3264 = !DILocation(line: 618, column: 7, scope: !3265)
!3265 = distinct !DILexicalBlock(scope: !1883, file: !3, line: 618, column: 7)
!3266 = !DILocation(line: 618, column: 26, scope: !3265)
!3267 = !DILocation(line: 619, column: 7, scope: !3265)
!3268 = !DILocation(line: 619, column: 10, scope: !3265)
!3269 = !DILocation(line: 619, column: 26, scope: !3265)
!3270 = !DILocation(line: 620, column: 7, scope: !3265)
!3271 = !DILocation(line: 620, column: 10, scope: !3265)
!3272 = !DILocation(line: 620, column: 54, scope: !3265)
!3273 = !DILocation(line: 620, column: 51, scope: !3265)
!3274 = !DILocation(line: 618, column: 7, scope: !1883)
!3275 = !DILocation(line: 622, column: 14, scope: !3276)
!3276 = distinct !DILexicalBlock(scope: !3277, file: !3, line: 622, column: 7)
!3277 = distinct !DILexicalBlock(scope: !3265, file: !3, line: 621, column: 5)
!3278 = !DILocation(line: 622, column: 23, scope: !3276)
!3279 = !DILocation(line: 622, column: 21, scope: !3276)
!3280 = !DILocation(line: 622, column: 12, scope: !3276)
!3281 = !DILocation(line: 626, column: 27, scope: !3282)
!3282 = distinct !DILexicalBlock(scope: !3283, file: !3, line: 624, column: 2)
!3283 = distinct !DILexicalBlock(scope: !3276, file: !3, line: 622, column: 7)
!3284 = !DILocation(line: 626, column: 4, scope: !3282)
!3285 = !DILocation(line: 626, column: 21, scope: !3282)
!3286 = !DILocation(line: 626, column: 25, scope: !3282)
!3287 = !DILocation(line: 627, column: 8, scope: !3288)
!3288 = distinct !DILexicalBlock(scope: !3282, file: !3, line: 627, column: 8)
!3289 = !DILocation(line: 627, column: 13, scope: !3288)
!3290 = !DILocation(line: 627, column: 10, scope: !3288)
!3291 = !DILocation(line: 627, column: 8, scope: !3282)
!3292 = !DILocation(line: 628, column: 6, scope: !3288)
!3293 = !DILocation(line: 629, column: 2, scope: !3282)
!3294 = !DILocation(line: 623, column: 9, scope: !3283)
!3295 = !DILocation(line: 623, column: 7, scope: !3283)
!3296 = !DILocation(line: 622, column: 7, scope: !3283)
!3297 = distinct !{!3297, !3298, !3299}
!3298 = !DILocation(line: 622, column: 7, scope: !3276)
!3299 = !DILocation(line: 629, column: 2, scope: !3276)
!3300 = !DILocation(line: 631, column: 19, scope: !3277)
!3301 = !DILocation(line: 631, column: 36, scope: !3277)
!3302 = !DILocation(line: 631, column: 7, scope: !3277)
!3303 = !DILocation(line: 637, column: 14, scope: !3304)
!3304 = distinct !DILexicalBlock(scope: !3277, file: !3, line: 637, column: 7)
!3305 = !DILocation(line: 637, column: 12, scope: !3304)
!3306 = !DILocation(line: 637, column: 19, scope: !3307)
!3307 = distinct !DILexicalBlock(scope: !3304, file: !3, line: 637, column: 7)
!3308 = !DILocation(line: 637, column: 23, scope: !3307)
!3309 = !DILocation(line: 637, column: 21, scope: !3307)
!3310 = !DILocation(line: 637, column: 7, scope: !3304)
!3311 = !DILocation(line: 639, column: 8, scope: !3312)
!3312 = distinct !DILexicalBlock(scope: !3307, file: !3, line: 638, column: 2)
!3313 = !DILocation(line: 639, column: 24, scope: !3312)
!3314 = !DILocation(line: 639, column: 6, scope: !3312)
!3315 = !DILocation(line: 640, column: 42, scope: !3312)
!3316 = !DILocation(line: 640, column: 4, scope: !3312)
!3317 = !DILocation(line: 640, column: 40, scope: !3312)
!3318 = !DILocation(line: 641, column: 41, scope: !3312)
!3319 = !DILocation(line: 641, column: 4, scope: !3312)
!3320 = !DILocation(line: 641, column: 39, scope: !3312)
!3321 = !DILocation(line: 642, column: 4, scope: !3312)
!3322 = !DILocation(line: 643, column: 8, scope: !3323)
!3323 = distinct !DILexicalBlock(scope: !3312, file: !3, line: 643, column: 8)
!3324 = !DILocation(line: 643, column: 34, scope: !3323)
!3325 = !DILocation(line: 643, column: 38, scope: !3323)
!3326 = !DILocation(line: 643, column: 41, scope: !3323)
!3327 = !DILocation(line: 643, column: 55, scope: !3323)
!3328 = !DILocation(line: 643, column: 8, scope: !3312)
!3329 = !DILocation(line: 645, column: 17, scope: !3330)
!3330 = distinct !DILexicalBlock(scope: !3323, file: !3, line: 644, column: 6)
!3331 = !DILocation(line: 645, column: 8, scope: !3330)
!3332 = !DILocation(line: 646, column: 33, scope: !3330)
!3333 = !DILocation(line: 646, column: 8, scope: !3330)
!3334 = !DILocation(line: 647, column: 17, scope: !3330)
!3335 = !DILocation(line: 647, column: 8, scope: !3330)
!3336 = !DILocation(line: 648, column: 6, scope: !3330)
!3337 = !DILocation(line: 649, column: 2, scope: !3312)
!3338 = !DILocation(line: 637, column: 27, scope: !3307)
!3339 = !DILocation(line: 637, column: 7, scope: !3307)
!3340 = distinct !{!3340, !3310, !3341}
!3341 = !DILocation(line: 649, column: 2, scope: !3304)
!3342 = !DILocation(line: 650, column: 7, scope: !3277)
!3343 = !DILocation(line: 652, column: 7, scope: !3344)
!3344 = distinct !DILexicalBlock(scope: !1883, file: !3, line: 652, column: 7)
!3345 = !DILocation(line: 652, column: 23, scope: !3344)
!3346 = !DILocation(line: 652, column: 7, scope: !1883)
!3347 = !DILocation(line: 653, column: 25, scope: !3344)
!3348 = !DILocation(line: 653, column: 5, scope: !3344)
!3349 = !DILocation(line: 653, column: 42, scope: !3344)
!3350 = !DILocation(line: 654, column: 12, scope: !3351)
!3351 = distinct !DILexicalBlock(scope: !1883, file: !3, line: 654, column: 3)
!3352 = !DILocation(line: 654, column: 10, scope: !3351)
!3353 = !DILocation(line: 654, column: 8, scope: !3351)
!3354 = !DILocation(line: 657, column: 32, scope: !3355)
!3355 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 656, column: 5)
!3356 = distinct !DILexicalBlock(scope: !3351, file: !3, line: 654, column: 3)
!3357 = !DILocation(line: 657, column: 7, scope: !3355)
!3358 = !DILocation(line: 657, column: 30, scope: !3355)
!3359 = !DILocation(line: 658, column: 7, scope: !3355)
!3360 = !DILocation(line: 658, column: 30, scope: !3355)
!3361 = !DILocation(line: 659, column: 11, scope: !3362)
!3362 = distinct !DILexicalBlock(scope: !3355, file: !3, line: 659, column: 11)
!3363 = !DILocation(line: 659, column: 27, scope: !3362)
!3364 = !DILocation(line: 659, column: 11, scope: !3355)
!3365 = !DILocation(line: 660, column: 21, scope: !3362)
!3366 = !DILocation(line: 660, column: 2, scope: !3362)
!3367 = !DILocation(line: 663, column: 39, scope: !3355)
!3368 = !DILocation(line: 663, column: 7, scope: !3355)
!3369 = !DILocation(line: 664, column: 11, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3355, file: !3, line: 664, column: 11)
!3371 = !DILocation(line: 664, column: 16, scope: !3370)
!3372 = !DILocation(line: 664, column: 13, scope: !3370)
!3373 = !DILocation(line: 664, column: 11, scope: !3355)
!3374 = !DILocation(line: 665, column: 2, scope: !3370)
!3375 = !DILocation(line: 666, column: 5, scope: !3355)
!3376 = !DILocation(line: 655, column: 12, scope: !3356)
!3377 = !DILocation(line: 655, column: 10, scope: !3356)
!3378 = !DILocation(line: 654, column: 3, scope: !3356)
!3379 = distinct !{!3379, !3380, !3381}
!3380 = !DILocation(line: 654, column: 3, scope: !3351)
!3381 = !DILocation(line: 666, column: 5, scope: !3351)
!3382 = !DILocation(line: 667, column: 10, scope: !1883)
!3383 = !DILocation(line: 667, column: 26, scope: !1883)
!3384 = !DILocation(line: 667, column: 3, scope: !1883)
!3385 = !DILocation(line: 668, column: 1, scope: !1883)
!3386 = distinct !DISubprogram(name: "ira_sort_regnos_for_alter_reg", scope: !3, file: !3, line: 2643, type: !3387, scopeLine: 2645, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!3387 = !DISubroutineType(types: !3388)
!3388 = !{null, !609, !610, !1880}
!3389 = !DILocalVariable(name: "pseudo_regnos", arg: 1, scope: !3386, file: !3, line: 2643, type: !609)
!3390 = !DILocation(line: 2643, column: 37, scope: !3386)
!3391 = !DILocalVariable(name: "n", arg: 2, scope: !3386, file: !3, line: 2643, type: !610)
!3392 = !DILocation(line: 2643, column: 56, scope: !3386)
!3393 = !DILocalVariable(name: "reg_max_ref_width", arg: 3, scope: !3386, file: !3, line: 2644, type: !1880)
!3394 = !DILocation(line: 2644, column: 25, scope: !3386)
!3395 = !DILocalVariable(name: "max_regno", scope: !3386, file: !3, line: 2646, type: !610)
!3396 = !DILocation(line: 2646, column: 7, scope: !3386)
!3397 = !DILocation(line: 2646, column: 19, scope: !3386)
!3398 = !DILocalVariable(name: "i", scope: !3386, file: !3, line: 2647, type: !610)
!3399 = !DILocation(line: 2647, column: 7, scope: !3386)
!3400 = !DILocalVariable(name: "regno", scope: !3386, file: !3, line: 2647, type: !610)
!3401 = !DILocation(line: 2647, column: 10, scope: !3386)
!3402 = !DILocalVariable(name: "num", scope: !3386, file: !3, line: 2647, type: !610)
!3403 = !DILocation(line: 2647, column: 17, scope: !3386)
!3404 = !DILocalVariable(name: "slot_num", scope: !3386, file: !3, line: 2647, type: !610)
!3405 = !DILocation(line: 2647, column: 22, scope: !3386)
!3406 = !DILocalVariable(name: "allocno", scope: !3386, file: !3, line: 2648, type: !612)
!3407 = !DILocation(line: 2648, column: 17, scope: !3386)
!3408 = !DILocalVariable(name: "a", scope: !3386, file: !3, line: 2648, type: !612)
!3409 = !DILocation(line: 2648, column: 26, scope: !3386)
!3410 = !DILocalVariable(name: "ai", scope: !3386, file: !3, line: 2649, type: !2198)
!3411 = !DILocation(line: 2649, column: 24, scope: !3386)
!3412 = !DILocalVariable(name: "spilled_coalesced_allocnos", scope: !3386, file: !3, line: 2650, type: !611)
!3413 = !DILocation(line: 2650, column: 18, scope: !3386)
!3414 = !DILocation(line: 2652, column: 40, scope: !3386)
!3415 = !DILocation(line: 2652, column: 38, scope: !3386)
!3416 = !DILocation(line: 2654, column: 29, scope: !3386)
!3417 = !DILocation(line: 2654, column: 27, scope: !3386)
!3418 = !DILocation(line: 2655, column: 10, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3386, file: !3, line: 2655, column: 3)
!3420 = !DILocation(line: 2655, column: 8, scope: !3419)
!3421 = !DILocation(line: 2655, column: 15, scope: !3422)
!3422 = distinct !DILexicalBlock(scope: !3419, file: !3, line: 2655, column: 3)
!3423 = !DILocation(line: 2655, column: 19, scope: !3422)
!3424 = !DILocation(line: 2655, column: 17, scope: !3422)
!3425 = !DILocation(line: 2655, column: 3, scope: !3419)
!3426 = !DILocation(line: 2657, column: 15, scope: !3427)
!3427 = distinct !DILexicalBlock(scope: !3422, file: !3, line: 2656, column: 5)
!3428 = !DILocation(line: 2657, column: 29, scope: !3427)
!3429 = !DILocation(line: 2657, column: 13, scope: !3427)
!3430 = !DILocation(line: 2658, column: 17, scope: !3427)
!3431 = !DILocation(line: 2658, column: 39, scope: !3427)
!3432 = !DILocation(line: 2658, column: 15, scope: !3427)
!3433 = !DILocation(line: 2659, column: 11, scope: !3434)
!3434 = distinct !DILexicalBlock(scope: !3427, file: !3, line: 2659, column: 11)
!3435 = !DILocation(line: 2659, column: 19, scope: !3434)
!3436 = !DILocation(line: 2659, column: 11, scope: !3427)
!3437 = !DILocation(line: 2660, column: 18, scope: !3434)
!3438 = !DILocation(line: 2661, column: 4, scope: !3434)
!3439 = !DILocation(line: 2660, column: 2, scope: !3434)
!3440 = !DILocation(line: 2662, column: 5, scope: !3427)
!3441 = !DILocation(line: 2655, column: 23, scope: !3422)
!3442 = !DILocation(line: 2655, column: 3, scope: !3422)
!3443 = distinct !{!3443, !3425, !3444}
!3444 = !DILocation(line: 2662, column: 5, scope: !3419)
!3445 = !DILocation(line: 2663, column: 23, scope: !3386)
!3446 = !DILocation(line: 2664, column: 3, scope: !3386)
!3447 = !DILocation(line: 2665, column: 20, scope: !3386)
!3448 = !DILocation(line: 2665, column: 3, scope: !3386)
!3449 = !DILocation(line: 2667, column: 29, scope: !3386)
!3450 = !DILocation(line: 2667, column: 39, scope: !3386)
!3451 = !DILocation(line: 2667, column: 15, scope: !3386)
!3452 = !DILocation(line: 2667, column: 7, scope: !3386)
!3453 = !DILocation(line: 2667, column: 5, scope: !3386)
!3454 = !DILocation(line: 2669, column: 29, scope: !3386)
!3455 = !DILocation(line: 2669, column: 39, scope: !3386)
!3456 = !DILocation(line: 2669, column: 15, scope: !3386)
!3457 = !DILocation(line: 2669, column: 7, scope: !3386)
!3458 = !DILocation(line: 2669, column: 5, scope: !3386)
!3459 = !DILocation(line: 2670, column: 11, scope: !3386)
!3460 = !DILocation(line: 2670, column: 3, scope: !3386)
!3461 = !DILocation(line: 2670, column: 43, scope: !3386)
!3462 = !DILocation(line: 2670, column: 53, scope: !3386)
!3463 = !DILocation(line: 2671, column: 43, scope: !3386)
!3464 = !DILocation(line: 2671, column: 58, scope: !3386)
!3465 = !DILocation(line: 2671, column: 3, scope: !3386)
!3466 = !DILocation(line: 2675, column: 15, scope: !3386)
!3467 = !DILocation(line: 2675, column: 30, scope: !3386)
!3468 = !DILocation(line: 2675, column: 3, scope: !3386)
!3469 = !DILocation(line: 2680, column: 39, scope: !3386)
!3470 = !DILocation(line: 2681, column: 11, scope: !3386)
!3471 = !DILocation(line: 2680, column: 25, scope: !3386)
!3472 = !DILocation(line: 2680, column: 7, scope: !3386)
!3473 = !DILocation(line: 2680, column: 5, scope: !3386)
!3474 = !DILocation(line: 2684, column: 45, scope: !3386)
!3475 = !DILocation(line: 2684, column: 60, scope: !3386)
!3476 = !DILocation(line: 2685, column: 10, scope: !3386)
!3477 = !DILocation(line: 2684, column: 9, scope: !3386)
!3478 = !DILocation(line: 2684, column: 7, scope: !3386)
!3479 = !DILocation(line: 2686, column: 7, scope: !3480)
!3480 = distinct !DILexicalBlock(scope: !3386, file: !3, line: 2686, column: 7)
!3481 = !DILocation(line: 2687, column: 7, scope: !3480)
!3482 = !DILocation(line: 2687, column: 32, scope: !3480)
!3483 = !DILocation(line: 2687, column: 60, scope: !3480)
!3484 = !DILocation(line: 2687, column: 10, scope: !3480)
!3485 = !DILocation(line: 2686, column: 7, scope: !3386)
!3486 = !DILocation(line: 2689, column: 47, scope: !3487)
!3487 = distinct !DILexicalBlock(scope: !3480, file: !3, line: 2688, column: 5)
!3488 = !DILocation(line: 2689, column: 62, scope: !3487)
!3489 = !DILocation(line: 2689, column: 7, scope: !3487)
!3490 = !DILocation(line: 2691, column: 19, scope: !3487)
!3491 = !DILocation(line: 2691, column: 34, scope: !3487)
!3492 = !DILocation(line: 2691, column: 7, scope: !3487)
!3493 = !DILocation(line: 2697, column: 49, scope: !3487)
!3494 = !DILocation(line: 2697, column: 64, scope: !3487)
!3495 = !DILocation(line: 2698, column: 7, scope: !3487)
!3496 = !DILocation(line: 2697, column: 13, scope: !3487)
!3497 = !DILocation(line: 2697, column: 11, scope: !3487)
!3498 = !DILocation(line: 2699, column: 5, scope: !3487)
!3499 = !DILocation(line: 2700, column: 20, scope: !3386)
!3500 = !DILocation(line: 2700, column: 3, scope: !3386)
!3501 = !DILocation(line: 2701, column: 23, scope: !3386)
!3502 = !DILocation(line: 2706, column: 12, scope: !3386)
!3503 = !DILocation(line: 2707, column: 10, scope: !3504)
!3504 = distinct !DILexicalBlock(scope: !3386, file: !3, line: 2707, column: 3)
!3505 = !DILocation(line: 2707, column: 8, scope: !3504)
!3506 = !DILocation(line: 2707, column: 15, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 2707, column: 3)
!3508 = !DILocation(line: 2707, column: 19, scope: !3507)
!3509 = !DILocation(line: 2707, column: 17, scope: !3507)
!3510 = !DILocation(line: 2707, column: 3, scope: !3504)
!3511 = !DILocation(line: 2709, column: 17, scope: !3512)
!3512 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 2708, column: 5)
!3513 = !DILocation(line: 2709, column: 44, scope: !3512)
!3514 = !DILocation(line: 2709, column: 15, scope: !3512)
!3515 = !DILocation(line: 2710, column: 11, scope: !3516)
!3516 = distinct !DILexicalBlock(scope: !3512, file: !3, line: 2710, column: 11)
!3517 = !DILocation(line: 2710, column: 56, scope: !3516)
!3518 = !DILocation(line: 2710, column: 53, scope: !3516)
!3519 = !DILocation(line: 2711, column: 4, scope: !3516)
!3520 = !DILocation(line: 2711, column: 7, scope: !3516)
!3521 = !DILocation(line: 2711, column: 36, scope: !3516)
!3522 = !DILocation(line: 2712, column: 4, scope: !3516)
!3523 = !DILocation(line: 2712, column: 8, scope: !3516)
!3524 = !DILocation(line: 2712, column: 34, scope: !3516)
!3525 = !DILocation(line: 2712, column: 32, scope: !3516)
!3526 = !DILocation(line: 2713, column: 8, scope: !3516)
!3527 = !DILocation(line: 2713, column: 12, scope: !3516)
!3528 = !DILocation(line: 2713, column: 32, scope: !3516)
!3529 = !DILocation(line: 2713, column: 57, scope: !3516)
!3530 = !DILocation(line: 2714, column: 5, scope: !3516)
!3531 = !DILocation(line: 2714, column: 8, scope: !3516)
!3532 = !DILocation(line: 2714, column: 34, scope: !3516)
!3533 = !DILocation(line: 2710, column: 11, scope: !3512)
!3534 = !DILocation(line: 2715, column: 2, scope: !3516)
!3535 = !DILocation(line: 2716, column: 11, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3512, file: !3, line: 2716, column: 11)
!3537 = !DILocation(line: 2716, column: 37, scope: !3536)
!3538 = !DILocation(line: 2716, column: 41, scope: !3536)
!3539 = !DILocation(line: 2716, column: 44, scope: !3536)
!3540 = !DILocation(line: 2716, column: 58, scope: !3536)
!3541 = !DILocation(line: 2716, column: 11, scope: !3512)
!3542 = !DILocation(line: 2717, column: 11, scope: !3536)
!3543 = !DILocation(line: 2717, column: 56, scope: !3536)
!3544 = !DILocation(line: 2717, column: 2, scope: !3536)
!3545 = !DILocation(line: 2718, column: 15, scope: !3512)
!3546 = !DILocation(line: 2719, column: 16, scope: !3547)
!3547 = distinct !DILexicalBlock(scope: !3512, file: !3, line: 2719, column: 7)
!3548 = !DILocation(line: 2719, column: 14, scope: !3547)
!3549 = !DILocation(line: 2719, column: 12, scope: !3547)
!3550 = !DILocation(line: 2723, column: 30, scope: !3551)
!3551 = distinct !DILexicalBlock(scope: !3552, file: !3, line: 2721, column: 2)
!3552 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 2719, column: 7)
!3553 = !DILocation(line: 2723, column: 29, scope: !3551)
!3554 = !DILocation(line: 2723, column: 4, scope: !3551)
!3555 = !DILocation(line: 2723, column: 27, scope: !3551)
!3556 = !DILocation(line: 2724, column: 8, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 2724, column: 8)
!3558 = !DILocation(line: 2724, column: 34, scope: !3557)
!3559 = !DILocation(line: 2724, column: 38, scope: !3557)
!3560 = !DILocation(line: 2724, column: 41, scope: !3557)
!3561 = !DILocation(line: 2724, column: 55, scope: !3557)
!3562 = !DILocation(line: 2724, column: 8, scope: !3551)
!3563 = !DILocation(line: 2725, column: 15, scope: !3557)
!3564 = !DILocation(line: 2726, column: 8, scope: !3557)
!3565 = !DILocation(line: 2726, column: 25, scope: !3557)
!3566 = !DILocation(line: 2726, column: 44, scope: !3557)
!3567 = !DILocation(line: 2727, column: 8, scope: !3557)
!3568 = !DILocation(line: 2725, column: 6, scope: !3557)
!3569 = !DILocation(line: 2730, column: 8, scope: !3570)
!3570 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 2730, column: 8)
!3571 = !DILocation(line: 2730, column: 13, scope: !3570)
!3572 = !DILocation(line: 2730, column: 10, scope: !3570)
!3573 = !DILocation(line: 2730, column: 8, scope: !3551)
!3574 = !DILocation(line: 2731, column: 6, scope: !3570)
!3575 = !DILocation(line: 2732, column: 2, scope: !3551)
!3576 = !DILocation(line: 2720, column: 9, scope: !3552)
!3577 = !DILocation(line: 2720, column: 7, scope: !3552)
!3578 = !DILocation(line: 2719, column: 7, scope: !3552)
!3579 = distinct !{!3579, !3580, !3581}
!3580 = !DILocation(line: 2719, column: 7, scope: !3547)
!3581 = !DILocation(line: 2732, column: 2, scope: !3547)
!3582 = !DILocation(line: 2733, column: 11, scope: !3583)
!3583 = distinct !DILexicalBlock(scope: !3512, file: !3, line: 2733, column: 11)
!3584 = !DILocation(line: 2733, column: 37, scope: !3583)
!3585 = !DILocation(line: 2733, column: 41, scope: !3583)
!3586 = !DILocation(line: 2733, column: 44, scope: !3583)
!3587 = !DILocation(line: 2733, column: 58, scope: !3583)
!3588 = !DILocation(line: 2733, column: 11, scope: !3512)
!3589 = !DILocation(line: 2734, column: 11, scope: !3583)
!3590 = !DILocation(line: 2734, column: 2, scope: !3583)
!3591 = !DILocation(line: 2735, column: 5, scope: !3512)
!3592 = !DILocation(line: 2707, column: 25, scope: !3507)
!3593 = !DILocation(line: 2707, column: 3, scope: !3507)
!3594 = distinct !{!3594, !3510, !3595}
!3595 = !DILocation(line: 2735, column: 5, scope: !3504)
!3596 = !DILocation(line: 2736, column: 37, scope: !3386)
!3597 = !DILocation(line: 2736, column: 46, scope: !3386)
!3598 = !DILocation(line: 2736, column: 35, scope: !3386)
!3599 = !DILocation(line: 2737, column: 13, scope: !3386)
!3600 = !DILocation(line: 2737, column: 3, scope: !3386)
!3601 = !DILocation(line: 2739, column: 25, scope: !3386)
!3602 = !DILocation(line: 2739, column: 23, scope: !3386)
!3603 = !DILocation(line: 2741, column: 15, scope: !3386)
!3604 = !DILocation(line: 2741, column: 30, scope: !3386)
!3605 = !DILocation(line: 2741, column: 3, scope: !3386)
!3606 = !DILocation(line: 2747, column: 3, scope: !3607)
!3607 = distinct !DILexicalBlock(scope: !3386, file: !3, line: 2747, column: 3)
!3608 = !DILocation(line: 2747, column: 3, scope: !3609)
!3609 = distinct !DILexicalBlock(scope: !3607, file: !3, line: 2747, column: 3)
!3610 = !DILocation(line: 2749, column: 45, scope: !3611)
!3611 = distinct !DILexicalBlock(scope: !3609, file: !3, line: 2748, column: 5)
!3612 = !DILocation(line: 2749, column: 7, scope: !3611)
!3613 = !DILocation(line: 2749, column: 43, scope: !3611)
!3614 = !DILocation(line: 2750, column: 44, scope: !3611)
!3615 = !DILocation(line: 2750, column: 7, scope: !3611)
!3616 = !DILocation(line: 2750, column: 42, scope: !3611)
!3617 = distinct !{!3617, !3606, !3618}
!3618 = !DILocation(line: 2751, column: 5, scope: !3607)
!3619 = !DILocation(line: 2752, column: 13, scope: !3386)
!3620 = !DILocation(line: 2752, column: 3, scope: !3386)
!3621 = !DILocation(line: 2753, column: 13, scope: !3386)
!3622 = !DILocation(line: 2753, column: 3, scope: !3386)
!3623 = !DILocation(line: 2754, column: 1, scope: !3386)
!3624 = distinct !DISubprogram(name: "coalesce_allocnos", scope: !3, file: !3, line: 1614, type: !3625, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!3625 = !DISubroutineType(types: !3626)
!3626 = !{null, !855}
!3627 = !DILocalVariable(name: "reload_p", arg: 1, scope: !3624, file: !3, line: 1614, type: !855)
!3628 = !DILocation(line: 1614, column: 25, scope: !3624)
!3629 = !DILocalVariable(name: "a", scope: !3624, file: !3, line: 1616, type: !612)
!3630 = !DILocation(line: 1616, column: 17, scope: !3624)
!3631 = !DILocalVariable(name: "cp", scope: !3624, file: !3, line: 1617, type: !1758)
!3632 = !DILocation(line: 1617, column: 14, scope: !3624)
!3633 = !DILocalVariable(name: "next_cp", scope: !3624, file: !3, line: 1617, type: !1758)
!3634 = !DILocation(line: 1617, column: 18, scope: !3624)
!3635 = !DILocalVariable(name: "sorted_copies", scope: !3624, file: !3, line: 1617, type: !1846)
!3636 = !DILocation(line: 1617, column: 28, scope: !3624)
!3637 = !DILocalVariable(name: "cover_class", scope: !3624, file: !3, line: 1618, type: !390)
!3638 = !DILocation(line: 1618, column: 18, scope: !3624)
!3639 = !DILocalVariable(name: "mode", scope: !3624, file: !3, line: 1619, type: !5)
!3640 = !DILocation(line: 1619, column: 21, scope: !3624)
!3641 = !DILocalVariable(name: "j", scope: !3624, file: !3, line: 1620, type: !7)
!3642 = !DILocation(line: 1620, column: 16, scope: !3624)
!3643 = !DILocalVariable(name: "i", scope: !3624, file: !3, line: 1621, type: !610)
!3644 = !DILocation(line: 1621, column: 7, scope: !3624)
!3645 = !DILocalVariable(name: "n", scope: !3624, file: !3, line: 1621, type: !610)
!3646 = !DILocation(line: 1621, column: 10, scope: !3624)
!3647 = !DILocalVariable(name: "cp_num", scope: !3624, file: !3, line: 1621, type: !610)
!3648 = !DILocation(line: 1621, column: 13, scope: !3624)
!3649 = !DILocalVariable(name: "regno", scope: !3624, file: !3, line: 1621, type: !610)
!3650 = !DILocation(line: 1621, column: 21, scope: !3624)
!3651 = !DILocalVariable(name: "bi", scope: !3624, file: !3, line: 1622, type: !3652)
!3652 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !681, line: 218, baseType: !3653)
!3653 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !681, line: 203, size: 256, elements: !3654)
!3654 = !{!3655, !3656, !3657, !3658}
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !3653, file: !681, line: 206, baseType: !684, size: 64)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !3653, file: !681, line: 209, baseType: !684, size: 64, offset: 64)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !3653, file: !681, line: 212, baseType: !7, size: 32, offset: 128)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !3653, file: !681, line: 217, baseType: !694, size: 64, offset: 192)
!3659 = !DILocation(line: 1622, column: 19, scope: !3624)
!3660 = !DILocation(line: 1624, column: 48, scope: !3624)
!3661 = !DILocation(line: 1625, column: 13, scope: !3624)
!3662 = !DILocation(line: 1624, column: 34, scope: !3624)
!3663 = !DILocation(line: 1624, column: 19, scope: !3624)
!3664 = !DILocation(line: 1624, column: 17, scope: !3624)
!3665 = !DILocation(line: 1626, column: 10, scope: !3624)
!3666 = !DILocation(line: 1628, column: 3, scope: !3667)
!3667 = distinct !DILexicalBlock(scope: !3624, file: !3, line: 1628, column: 3)
!3668 = !DILocation(line: 1628, column: 3, scope: !3669)
!3669 = distinct !DILexicalBlock(scope: !3667, file: !3, line: 1628, column: 3)
!3670 = !DILocation(line: 1630, column: 11, scope: !3671)
!3671 = distinct !DILexicalBlock(scope: !3669, file: !3, line: 1629, column: 5)
!3672 = !DILocation(line: 1630, column: 24, scope: !3671)
!3673 = !DILocation(line: 1630, column: 9, scope: !3671)
!3674 = !DILocation(line: 1631, column: 15, scope: !3671)
!3675 = !DILocation(line: 1631, column: 13, scope: !3671)
!3676 = !DILocation(line: 1632, column: 14, scope: !3677)
!3677 = distinct !DILexicalBlock(scope: !3671, file: !3, line: 1632, column: 11)
!3678 = !DILocation(line: 1632, column: 23, scope: !3677)
!3679 = !DILocation(line: 1632, column: 26, scope: !3677)
!3680 = !DILocation(line: 1633, column: 4, scope: !3677)
!3681 = !DILocation(line: 1633, column: 8, scope: !3677)
!3682 = !DILocation(line: 1634, column: 8, scope: !3677)
!3683 = !DILocation(line: 1634, column: 14, scope: !3677)
!3684 = !DILocation(line: 1634, column: 37, scope: !3677)
!3685 = !DILocation(line: 1634, column: 40, scope: !3677)
!3686 = !DILocation(line: 1634, column: 63, scope: !3677)
!3687 = !DILocation(line: 1635, column: 5, scope: !3677)
!3688 = !DILocation(line: 1635, column: 9, scope: !3677)
!3689 = !DILocation(line: 1635, column: 17, scope: !3677)
!3690 = !DILocation(line: 1635, column: 15, scope: !3677)
!3691 = !DILocation(line: 1636, column: 9, scope: !3677)
!3692 = !DILocation(line: 1636, column: 13, scope: !3677)
!3693 = !DILocation(line: 1636, column: 33, scope: !3677)
!3694 = !DILocation(line: 1636, column: 40, scope: !3677)
!3695 = !DILocation(line: 1637, column: 6, scope: !3677)
!3696 = !DILocation(line: 1637, column: 9, scope: !3677)
!3697 = !DILocation(line: 1637, column: 35, scope: !3677)
!3698 = !DILocation(line: 1632, column: 11, scope: !3671)
!3699 = !DILocation(line: 1638, column: 2, scope: !3677)
!3700 = !DILocation(line: 1639, column: 21, scope: !3671)
!3701 = !DILocation(line: 1639, column: 19, scope: !3671)
!3702 = !DILocation(line: 1640, column: 14, scope: !3671)
!3703 = !DILocation(line: 1640, column: 12, scope: !3671)
!3704 = !DILocation(line: 1641, column: 17, scope: !3705)
!3705 = distinct !DILexicalBlock(scope: !3671, file: !3, line: 1641, column: 7)
!3706 = !DILocation(line: 1641, column: 15, scope: !3705)
!3707 = !DILocation(line: 1641, column: 12, scope: !3705)
!3708 = !DILocation(line: 1641, column: 37, scope: !3709)
!3709 = distinct !DILexicalBlock(scope: !3705, file: !3, line: 1641, column: 7)
!3710 = !DILocation(line: 1641, column: 40, scope: !3709)
!3711 = !DILocation(line: 1641, column: 7, scope: !3705)
!3712 = !DILocation(line: 1643, column: 8, scope: !3713)
!3713 = distinct !DILexicalBlock(scope: !3714, file: !3, line: 1643, column: 8)
!3714 = distinct !DILexicalBlock(scope: !3709, file: !3, line: 1642, column: 2)
!3715 = !DILocation(line: 1643, column: 12, scope: !3713)
!3716 = !DILocation(line: 1643, column: 21, scope: !3713)
!3717 = !DILocation(line: 1643, column: 18, scope: !3713)
!3718 = !DILocation(line: 1643, column: 8, scope: !3714)
!3719 = !DILocation(line: 1645, column: 18, scope: !3720)
!3720 = distinct !DILexicalBlock(scope: !3713, file: !3, line: 1644, column: 6)
!3721 = !DILocation(line: 1645, column: 22, scope: !3720)
!3722 = !DILocation(line: 1645, column: 16, scope: !3720)
!3723 = !DILocation(line: 1646, column: 16, scope: !3720)
!3724 = !DILocation(line: 1646, column: 14, scope: !3720)
!3725 = !DILocation(line: 1651, column: 13, scope: !3726)
!3726 = distinct !DILexicalBlock(scope: !3720, file: !3, line: 1651, column: 12)
!3727 = !DILocation(line: 1652, column: 6, scope: !3726)
!3728 = !DILocation(line: 1652, column: 10, scope: !3726)
!3729 = !DILocation(line: 1652, column: 46, scope: !3726)
!3730 = !DILocation(line: 1652, column: 43, scope: !3726)
!3731 = !DILocation(line: 1653, column: 10, scope: !3726)
!3732 = !DILocation(line: 1653, column: 13, scope: !3726)
!3733 = !DILocation(line: 1653, column: 42, scope: !3726)
!3734 = !DILocation(line: 1653, column: 39, scope: !3726)
!3735 = !DILocation(line: 1654, column: 5, scope: !3726)
!3736 = !DILocation(line: 1654, column: 9, scope: !3726)
!3737 = !DILocation(line: 1654, column: 13, scope: !3726)
!3738 = !DILocation(line: 1654, column: 18, scope: !3726)
!3739 = !DILocation(line: 1654, column: 26, scope: !3726)
!3740 = !DILocation(line: 1654, column: 29, scope: !3726)
!3741 = !DILocation(line: 1654, column: 33, scope: !3726)
!3742 = !DILocation(line: 1655, column: 5, scope: !3726)
!3743 = !DILocation(line: 1655, column: 12, scope: !3726)
!3744 = !DILocation(line: 1655, column: 21, scope: !3726)
!3745 = !DILocation(line: 1655, column: 26, scope: !3726)
!3746 = !DILocation(line: 1656, column: 9, scope: !3726)
!3747 = !DILocation(line: 1656, column: 13, scope: !3726)
!3748 = !DILocation(line: 1657, column: 6, scope: !3726)
!3749 = !DILocation(line: 1657, column: 9, scope: !3726)
!3750 = !DILocation(line: 1658, column: 6, scope: !3726)
!3751 = !DILocation(line: 1658, column: 9, scope: !3726)
!3752 = !DILocation(line: 1658, column: 41, scope: !3726)
!3753 = !DILocation(line: 1659, column: 6, scope: !3726)
!3754 = !DILocation(line: 1659, column: 10, scope: !3726)
!3755 = !DILocation(line: 1659, column: 19, scope: !3726)
!3756 = !DILocation(line: 1659, column: 16, scope: !3726)
!3757 = !DILocation(line: 1660, column: 10, scope: !3726)
!3758 = !DILocation(line: 1660, column: 16, scope: !3726)
!3759 = !DILocation(line: 1660, column: 42, scope: !3726)
!3760 = !DILocation(line: 1661, column: 7, scope: !3726)
!3761 = !DILocation(line: 1661, column: 10, scope: !3726)
!3762 = !DILocation(line: 1661, column: 30, scope: !3726)
!3763 = !DILocation(line: 1661, column: 37, scope: !3726)
!3764 = !DILocation(line: 1651, column: 12, scope: !3720)
!3765 = !DILocation(line: 1662, column: 29, scope: !3726)
!3766 = !DILocation(line: 1662, column: 3, scope: !3726)
!3767 = !DILocation(line: 1662, column: 23, scope: !3726)
!3768 = !DILocation(line: 1662, column: 27, scope: !3726)
!3769 = !DILocation(line: 1663, column: 6, scope: !3720)
!3770 = !DILocation(line: 1664, column: 13, scope: !3771)
!3771 = distinct !DILexicalBlock(scope: !3713, file: !3, line: 1664, column: 13)
!3772 = !DILocation(line: 1664, column: 17, scope: !3771)
!3773 = !DILocation(line: 1664, column: 27, scope: !3771)
!3774 = !DILocation(line: 1664, column: 24, scope: !3771)
!3775 = !DILocation(line: 1664, column: 13, scope: !3713)
!3776 = !DILocation(line: 1665, column: 16, scope: !3771)
!3777 = !DILocation(line: 1665, column: 20, scope: !3771)
!3778 = !DILocation(line: 1665, column: 14, scope: !3771)
!3779 = !DILocation(line: 1665, column: 6, scope: !3771)
!3780 = !DILocation(line: 1667, column: 6, scope: !3771)
!3781 = !DILocation(line: 1668, column: 2, scope: !3714)
!3782 = !DILocation(line: 1641, column: 54, scope: !3709)
!3783 = !DILocation(line: 1641, column: 52, scope: !3709)
!3784 = !DILocation(line: 1641, column: 7, scope: !3709)
!3785 = distinct !{!3785, !3711, !3786}
!3786 = !DILocation(line: 1668, column: 2, scope: !3705)
!3787 = !DILocation(line: 1669, column: 5, scope: !3671)
!3788 = distinct !{!3788, !3666, !3789}
!3789 = !DILocation(line: 1669, column: 5, scope: !3667)
!3790 = !DILocation(line: 1671, column: 15, scope: !3624)
!3791 = !DILocation(line: 1671, column: 30, scope: !3624)
!3792 = !DILocation(line: 1671, column: 3, scope: !3624)
!3793 = !DILocation(line: 1676, column: 3, scope: !3624)
!3794 = !DILocation(line: 1676, column: 10, scope: !3795)
!3795 = distinct !DILexicalBlock(scope: !3796, file: !3, line: 1676, column: 3)
!3796 = distinct !DILexicalBlock(scope: !3624, file: !3, line: 1676, column: 3)
!3797 = !DILocation(line: 1676, column: 17, scope: !3795)
!3798 = !DILocation(line: 1676, column: 3, scope: !3796)
!3799 = !DILocation(line: 1678, column: 14, scope: !3800)
!3800 = distinct !DILexicalBlock(scope: !3801, file: !3, line: 1678, column: 7)
!3801 = distinct !DILexicalBlock(scope: !3795, file: !3, line: 1677, column: 5)
!3802 = !DILocation(line: 1678, column: 12, scope: !3800)
!3803 = !DILocation(line: 1678, column: 19, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !3800, file: !3, line: 1678, column: 7)
!3805 = !DILocation(line: 1678, column: 23, scope: !3804)
!3806 = !DILocation(line: 1678, column: 21, scope: !3804)
!3807 = !DILocation(line: 1678, column: 7, scope: !3800)
!3808 = !DILocation(line: 1680, column: 9, scope: !3809)
!3809 = distinct !DILexicalBlock(scope: !3804, file: !3, line: 1679, column: 2)
!3810 = !DILocation(line: 1680, column: 23, scope: !3809)
!3811 = !DILocation(line: 1680, column: 7, scope: !3809)
!3812 = !DILocation(line: 1681, column: 40, scope: !3813)
!3813 = distinct !DILexicalBlock(scope: !3809, file: !3, line: 1681, column: 8)
!3814 = !DILocation(line: 1681, column: 44, scope: !3813)
!3815 = !DILocation(line: 1681, column: 51, scope: !3813)
!3816 = !DILocation(line: 1681, column: 55, scope: !3813)
!3817 = !DILocation(line: 1681, column: 63, scope: !3813)
!3818 = !DILocation(line: 1681, column: 10, scope: !3813)
!3819 = !DILocation(line: 1681, column: 8, scope: !3809)
!3820 = !DILocation(line: 1683, column: 28, scope: !3821)
!3821 = distinct !DILexicalBlock(scope: !3813, file: !3, line: 1682, column: 6)
!3822 = !DILocation(line: 1684, column: 12, scope: !3823)
!3823 = distinct !DILexicalBlock(scope: !3821, file: !3, line: 1684, column: 12)
!3824 = !DILocation(line: 1684, column: 38, scope: !3823)
!3825 = !DILocation(line: 1684, column: 42, scope: !3823)
!3826 = !DILocation(line: 1684, column: 45, scope: !3823)
!3827 = !DILocation(line: 1684, column: 59, scope: !3823)
!3828 = !DILocation(line: 1684, column: 12, scope: !3821)
!3829 = !DILocation(line: 1686, column: 6, scope: !3823)
!3830 = !DILocation(line: 1688, column: 6, scope: !3823)
!3831 = !DILocation(line: 1688, column: 10, scope: !3823)
!3832 = !DILocation(line: 1688, column: 15, scope: !3823)
!3833 = !DILocation(line: 1688, column: 40, scope: !3823)
!3834 = !DILocation(line: 1689, column: 6, scope: !3823)
!3835 = !DILocation(line: 1689, column: 32, scope: !3823)
!3836 = !DILocation(line: 1690, column: 6, scope: !3823)
!3837 = !DILocation(line: 1690, column: 10, scope: !3823)
!3838 = !DILocation(line: 1685, column: 3, scope: !3823)
!3839 = !DILocation(line: 1691, column: 24, scope: !3821)
!3840 = !DILocation(line: 1691, column: 28, scope: !3821)
!3841 = !DILocation(line: 1691, column: 35, scope: !3821)
!3842 = !DILocation(line: 1691, column: 39, scope: !3821)
!3843 = !DILocation(line: 1691, column: 8, scope: !3821)
!3844 = !DILocation(line: 1692, column: 9, scope: !3821)
!3845 = !DILocation(line: 1693, column: 8, scope: !3821)
!3846 = !DILocation(line: 1695, column: 2, scope: !3809)
!3847 = !DILocation(line: 1678, column: 32, scope: !3804)
!3848 = !DILocation(line: 1678, column: 7, scope: !3804)
!3849 = distinct !{!3849, !3807, !3850}
!3850 = !DILocation(line: 1695, column: 2, scope: !3800)
!3851 = !DILocation(line: 1697, column: 14, scope: !3852)
!3852 = distinct !DILexicalBlock(scope: !3801, file: !3, line: 1697, column: 7)
!3853 = !DILocation(line: 1697, column: 12, scope: !3852)
!3854 = !DILocation(line: 1697, column: 19, scope: !3855)
!3855 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 1697, column: 7)
!3856 = !DILocation(line: 1697, column: 23, scope: !3855)
!3857 = !DILocation(line: 1697, column: 21, scope: !3855)
!3858 = !DILocation(line: 1697, column: 7, scope: !3852)
!3859 = !DILocation(line: 1699, column: 9, scope: !3860)
!3860 = distinct !DILexicalBlock(scope: !3855, file: !3, line: 1698, column: 2)
!3861 = !DILocation(line: 1699, column: 23, scope: !3860)
!3862 = !DILocation(line: 1699, column: 7, scope: !3860)
!3863 = !DILocation(line: 1700, column: 8, scope: !3864)
!3864 = distinct !DILexicalBlock(scope: !3860, file: !3, line: 1700, column: 8)
!3865 = !DILocation(line: 1701, column: 11, scope: !3864)
!3866 = !DILocation(line: 1701, column: 8, scope: !3864)
!3867 = !DILocation(line: 1700, column: 8, scope: !3860)
!3868 = !DILocation(line: 1702, column: 27, scope: !3864)
!3869 = !DILocation(line: 1702, column: 6, scope: !3864)
!3870 = !DILocation(line: 1702, column: 21, scope: !3864)
!3871 = !DILocation(line: 1702, column: 25, scope: !3864)
!3872 = !DILocation(line: 1703, column: 2, scope: !3860)
!3873 = !DILocation(line: 1697, column: 32, scope: !3855)
!3874 = !DILocation(line: 1697, column: 7, scope: !3855)
!3875 = distinct !{!3875, !3858, !3876}
!3876 = !DILocation(line: 1703, column: 2, scope: !3852)
!3877 = !DILocation(line: 1704, column: 16, scope: !3801)
!3878 = !DILocation(line: 1704, column: 14, scope: !3801)
!3879 = !DILocation(line: 1676, column: 3, scope: !3795)
!3880 = distinct !{!3880, !3798, !3881}
!3881 = !DILocation(line: 1705, column: 5, scope: !3796)
!3882 = !DILocation(line: 1706, column: 13, scope: !3624)
!3883 = !DILocation(line: 1706, column: 3, scope: !3624)
!3884 = !DILocation(line: 1707, column: 1, scope: !3624)
!3885 = distinct !DISubprogram(name: "setup_coalesced_allocno_costs_and_nums", scope: !3, file: !3, line: 2459, type: !3886, scopeLine: 2460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!3886 = !DISubroutineType(types: !3887)
!3887 = !{null, !609, !610}
!3888 = !DILocalVariable(name: "pseudo_regnos", arg: 1, scope: !3885, file: !3, line: 2459, type: !609)
!3889 = !DILocation(line: 2459, column: 46, scope: !3885)
!3890 = !DILocalVariable(name: "n", arg: 2, scope: !3885, file: !3, line: 2459, type: !610)
!3891 = !DILocation(line: 2459, column: 65, scope: !3885)
!3892 = !DILocalVariable(name: "i", scope: !3885, file: !3, line: 2461, type: !610)
!3893 = !DILocation(line: 2461, column: 7, scope: !3885)
!3894 = !DILocalVariable(name: "num", scope: !3885, file: !3, line: 2461, type: !610)
!3895 = !DILocation(line: 2461, column: 10, scope: !3885)
!3896 = !DILocalVariable(name: "regno", scope: !3885, file: !3, line: 2461, type: !610)
!3897 = !DILocation(line: 2461, column: 15, scope: !3885)
!3898 = !DILocalVariable(name: "cost", scope: !3885, file: !3, line: 2461, type: !610)
!3899 = !DILocation(line: 2461, column: 22, scope: !3885)
!3900 = !DILocalVariable(name: "allocno", scope: !3885, file: !3, line: 2462, type: !612)
!3901 = !DILocation(line: 2462, column: 17, scope: !3885)
!3902 = !DILocalVariable(name: "a", scope: !3885, file: !3, line: 2462, type: !612)
!3903 = !DILocation(line: 2462, column: 26, scope: !3885)
!3904 = !DILocation(line: 2464, column: 16, scope: !3905)
!3905 = distinct !DILexicalBlock(scope: !3885, file: !3, line: 2464, column: 3)
!3906 = !DILocation(line: 2464, column: 12, scope: !3905)
!3907 = !DILocation(line: 2464, column: 8, scope: !3905)
!3908 = !DILocation(line: 2464, column: 21, scope: !3909)
!3909 = distinct !DILexicalBlock(scope: !3905, file: !3, line: 2464, column: 3)
!3910 = !DILocation(line: 2464, column: 25, scope: !3909)
!3911 = !DILocation(line: 2464, column: 23, scope: !3909)
!3912 = !DILocation(line: 2464, column: 3, scope: !3905)
!3913 = !DILocation(line: 2466, column: 15, scope: !3914)
!3914 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 2465, column: 5)
!3915 = !DILocation(line: 2466, column: 29, scope: !3914)
!3916 = !DILocation(line: 2466, column: 13, scope: !3914)
!3917 = !DILocation(line: 2467, column: 17, scope: !3914)
!3918 = !DILocation(line: 2467, column: 39, scope: !3914)
!3919 = !DILocation(line: 2467, column: 15, scope: !3914)
!3920 = !DILocation(line: 2468, column: 11, scope: !3921)
!3921 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 2468, column: 11)
!3922 = !DILocation(line: 2468, column: 19, scope: !3921)
!3923 = !DILocation(line: 2468, column: 11, scope: !3914)
!3924 = !DILocation(line: 2470, column: 4, scope: !3925)
!3925 = distinct !DILexicalBlock(scope: !3921, file: !3, line: 2469, column: 2)
!3926 = !DILocation(line: 2470, column: 33, scope: !3925)
!3927 = !DILocation(line: 2470, column: 40, scope: !3925)
!3928 = !DILocation(line: 2471, column: 41, scope: !3925)
!3929 = !DILocation(line: 2471, column: 4, scope: !3925)
!3930 = !DILocation(line: 2471, column: 32, scope: !3925)
!3931 = !DILocation(line: 2471, column: 39, scope: !3925)
!3932 = !DILocation(line: 2472, column: 4, scope: !3925)
!3933 = !DILocation(line: 2474, column: 11, scope: !3934)
!3934 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 2474, column: 11)
!3935 = !DILocation(line: 2474, column: 56, scope: !3934)
!3936 = !DILocation(line: 2474, column: 53, scope: !3934)
!3937 = !DILocation(line: 2474, column: 11, scope: !3914)
!3938 = !DILocation(line: 2475, column: 2, scope: !3934)
!3939 = !DILocation(line: 2476, column: 10, scope: !3914)
!3940 = !DILocation(line: 2477, column: 17, scope: !3941)
!3941 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 2477, column: 7)
!3942 = !DILocation(line: 2477, column: 26, scope: !3941)
!3943 = !DILocation(line: 2477, column: 24, scope: !3941)
!3944 = !DILocation(line: 2477, column: 12, scope: !3941)
!3945 = !DILocation(line: 2480, column: 12, scope: !3946)
!3946 = distinct !DILexicalBlock(scope: !3947, file: !3, line: 2479, column: 2)
!3947 = distinct !DILexicalBlock(scope: !3941, file: !3, line: 2477, column: 7)
!3948 = !DILocation(line: 2480, column: 9, scope: !3946)
!3949 = !DILocation(line: 2481, column: 8, scope: !3950)
!3950 = distinct !DILexicalBlock(scope: !3946, file: !3, line: 2481, column: 8)
!3951 = !DILocation(line: 2481, column: 13, scope: !3950)
!3952 = !DILocation(line: 2481, column: 10, scope: !3950)
!3953 = !DILocation(line: 2481, column: 8, scope: !3946)
!3954 = !DILocation(line: 2482, column: 6, scope: !3950)
!3955 = !DILocation(line: 2483, column: 2, scope: !3946)
!3956 = !DILocation(line: 2478, column: 9, scope: !3947)
!3957 = !DILocation(line: 2478, column: 7, scope: !3947)
!3958 = !DILocation(line: 2477, column: 7, scope: !3947)
!3959 = distinct !{!3959, !3960, !3961}
!3960 = !DILocation(line: 2477, column: 7, scope: !3941)
!3961 = !DILocation(line: 2483, column: 2, scope: !3941)
!3962 = !DILocation(line: 2484, column: 16, scope: !3963)
!3963 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 2484, column: 7)
!3964 = !DILocation(line: 2484, column: 14, scope: !3963)
!3965 = !DILocation(line: 2484, column: 12, scope: !3963)
!3966 = !DILocation(line: 2487, column: 53, scope: !3967)
!3967 = distinct !DILexicalBlock(scope: !3968, file: !3, line: 2486, column: 2)
!3968 = distinct !DILexicalBlock(scope: !3963, file: !3, line: 2484, column: 7)
!3969 = !DILocation(line: 2487, column: 4, scope: !3967)
!3970 = !DILocation(line: 2487, column: 32, scope: !3967)
!3971 = !DILocation(line: 2487, column: 51, scope: !3967)
!3972 = !DILocation(line: 2488, column: 54, scope: !3967)
!3973 = !DILocation(line: 2488, column: 4, scope: !3967)
!3974 = !DILocation(line: 2488, column: 33, scope: !3967)
!3975 = !DILocation(line: 2488, column: 52, scope: !3967)
!3976 = !DILocation(line: 2489, column: 8, scope: !3977)
!3977 = distinct !DILexicalBlock(scope: !3967, file: !3, line: 2489, column: 8)
!3978 = !DILocation(line: 2489, column: 13, scope: !3977)
!3979 = !DILocation(line: 2489, column: 10, scope: !3977)
!3980 = !DILocation(line: 2489, column: 8, scope: !3967)
!3981 = !DILocation(line: 2490, column: 6, scope: !3977)
!3982 = !DILocation(line: 2491, column: 2, scope: !3967)
!3983 = !DILocation(line: 2485, column: 9, scope: !3968)
!3984 = !DILocation(line: 2485, column: 7, scope: !3968)
!3985 = !DILocation(line: 2484, column: 7, scope: !3968)
!3986 = distinct !{!3986, !3987, !3988}
!3987 = !DILocation(line: 2484, column: 7, scope: !3963)
!3988 = !DILocation(line: 2491, column: 2, scope: !3963)
!3989 = !DILocation(line: 2492, column: 5, scope: !3914)
!3990 = !DILocation(line: 2464, column: 29, scope: !3909)
!3991 = !DILocation(line: 2464, column: 3, scope: !3909)
!3992 = distinct !{!3992, !3912, !3993}
!3993 = !DILocation(line: 2492, column: 5, scope: !3905)
!3994 = !DILocation(line: 2493, column: 1, scope: !3885)
!3995 = distinct !DISubprogram(name: "coalesced_pseudo_reg_freq_compare", scope: !3, file: !3, line: 2389, type: !1182, scopeLine: 2390, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!3996 = !DILocalVariable(name: "v1p", arg: 1, scope: !3995, file: !3, line: 2389, type: !1177)
!3997 = !DILocation(line: 2389, column: 48, scope: !3995)
!3998 = !DILocalVariable(name: "v2p", arg: 2, scope: !3995, file: !3, line: 2389, type: !1177)
!3999 = !DILocation(line: 2389, column: 65, scope: !3995)
!4000 = !DILocalVariable(name: "regno1", scope: !3995, file: !3, line: 2391, type: !1850)
!4001 = !DILocation(line: 2391, column: 13, scope: !3995)
!4002 = !DILocation(line: 2391, column: 37, scope: !3995)
!4003 = !DILocation(line: 2391, column: 23, scope: !3995)
!4004 = !DILocation(line: 2391, column: 22, scope: !3995)
!4005 = !DILocalVariable(name: "regno2", scope: !3995, file: !3, line: 2392, type: !1850)
!4006 = !DILocation(line: 2392, column: 13, scope: !3995)
!4007 = !DILocation(line: 2392, column: 37, scope: !3995)
!4008 = !DILocation(line: 2392, column: 23, scope: !3995)
!4009 = !DILocation(line: 2392, column: 22, scope: !3995)
!4010 = !DILocalVariable(name: "diff", scope: !3995, file: !3, line: 2393, type: !610)
!4011 = !DILocation(line: 2393, column: 7, scope: !3995)
!4012 = !DILocation(line: 2395, column: 16, scope: !4013)
!4013 = distinct !DILexicalBlock(scope: !3995, file: !3, line: 2395, column: 7)
!4014 = !DILocation(line: 2395, column: 45, scope: !4013)
!4015 = !DILocation(line: 2396, column: 11, scope: !4013)
!4016 = !DILocation(line: 2396, column: 40, scope: !4013)
!4017 = !DILocation(line: 2396, column: 9, scope: !4013)
!4018 = !DILocation(line: 2395, column: 13, scope: !4013)
!4019 = !DILocation(line: 2396, column: 50, scope: !4013)
!4020 = !DILocation(line: 2395, column: 7, scope: !3995)
!4021 = !DILocation(line: 2397, column: 12, scope: !4013)
!4022 = !DILocation(line: 2397, column: 5, scope: !4013)
!4023 = !DILocation(line: 2398, column: 16, scope: !4024)
!4024 = distinct !DILexicalBlock(scope: !3995, file: !3, line: 2398, column: 7)
!4025 = !DILocation(line: 2398, column: 44, scope: !4024)
!4026 = !DILocation(line: 2399, column: 11, scope: !4024)
!4027 = !DILocation(line: 2399, column: 39, scope: !4024)
!4028 = !DILocation(line: 2399, column: 9, scope: !4024)
!4029 = !DILocation(line: 2398, column: 13, scope: !4024)
!4030 = !DILocation(line: 2399, column: 49, scope: !4024)
!4031 = !DILocation(line: 2398, column: 7, scope: !3995)
!4032 = !DILocation(line: 2400, column: 12, scope: !4024)
!4033 = !DILocation(line: 2400, column: 5, scope: !4024)
!4034 = !DILocation(line: 2401, column: 10, scope: !3995)
!4035 = !DILocation(line: 2401, column: 19, scope: !3995)
!4036 = !DILocation(line: 2401, column: 17, scope: !3995)
!4037 = !DILocation(line: 2401, column: 3, scope: !3995)
!4038 = !DILocation(line: 2402, column: 1, scope: !3995)
!4039 = distinct !DISubprogram(name: "collect_spilled_coalesced_allocnos", scope: !3, file: !3, line: 2501, type: !4040, scopeLine: 2503, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!4040 = !DISubroutineType(types: !4041)
!4041 = !{!610, !609, !610, !611}
!4042 = !DILocalVariable(name: "pseudo_regnos", arg: 1, scope: !4039, file: !3, line: 2501, type: !609)
!4043 = !DILocation(line: 2501, column: 42, scope: !4039)
!4044 = !DILocalVariable(name: "n", arg: 2, scope: !4039, file: !3, line: 2501, type: !610)
!4045 = !DILocation(line: 2501, column: 61, scope: !4039)
!4046 = !DILocalVariable(name: "spilled_coalesced_allocnos", arg: 3, scope: !4039, file: !3, line: 2502, type: !611)
!4047 = !DILocation(line: 2502, column: 24, scope: !4039)
!4048 = !DILocalVariable(name: "i", scope: !4039, file: !3, line: 2504, type: !610)
!4049 = !DILocation(line: 2504, column: 7, scope: !4039)
!4050 = !DILocalVariable(name: "num", scope: !4039, file: !3, line: 2504, type: !610)
!4051 = !DILocation(line: 2504, column: 10, scope: !4039)
!4052 = !DILocalVariable(name: "regno", scope: !4039, file: !3, line: 2504, type: !610)
!4053 = !DILocation(line: 2504, column: 15, scope: !4039)
!4054 = !DILocalVariable(name: "allocno", scope: !4039, file: !3, line: 2505, type: !612)
!4055 = !DILocation(line: 2505, column: 17, scope: !4039)
!4056 = !DILocation(line: 2507, column: 16, scope: !4057)
!4057 = distinct !DILexicalBlock(scope: !4039, file: !3, line: 2507, column: 3)
!4058 = !DILocation(line: 2507, column: 12, scope: !4057)
!4059 = !DILocation(line: 2507, column: 8, scope: !4057)
!4060 = !DILocation(line: 2507, column: 21, scope: !4061)
!4061 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 2507, column: 3)
!4062 = !DILocation(line: 2507, column: 25, scope: !4061)
!4063 = !DILocation(line: 2507, column: 23, scope: !4061)
!4064 = !DILocation(line: 2507, column: 3, scope: !4057)
!4065 = !DILocation(line: 2509, column: 15, scope: !4066)
!4066 = distinct !DILexicalBlock(scope: !4061, file: !3, line: 2508, column: 5)
!4067 = !DILocation(line: 2509, column: 29, scope: !4066)
!4068 = !DILocation(line: 2509, column: 13, scope: !4066)
!4069 = !DILocation(line: 2510, column: 17, scope: !4066)
!4070 = !DILocation(line: 2510, column: 39, scope: !4066)
!4071 = !DILocation(line: 2510, column: 15, scope: !4066)
!4072 = !DILocation(line: 2511, column: 11, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !4066, file: !3, line: 2511, column: 11)
!4074 = !DILocation(line: 2511, column: 19, scope: !4073)
!4075 = !DILocation(line: 2511, column: 27, scope: !4073)
!4076 = !DILocation(line: 2511, column: 30, scope: !4073)
!4077 = !DILocation(line: 2511, column: 59, scope: !4073)
!4078 = !DILocation(line: 2512, column: 4, scope: !4073)
!4079 = !DILocation(line: 2512, column: 7, scope: !4073)
!4080 = !DILocation(line: 2512, column: 52, scope: !4073)
!4081 = !DILocation(line: 2512, column: 49, scope: !4073)
!4082 = !DILocation(line: 2511, column: 11, scope: !4066)
!4083 = !DILocation(line: 2513, column: 2, scope: !4073)
!4084 = !DILocation(line: 2514, column: 43, scope: !4066)
!4085 = !DILocation(line: 2514, column: 7, scope: !4066)
!4086 = !DILocation(line: 2514, column: 37, scope: !4066)
!4087 = !DILocation(line: 2514, column: 41, scope: !4066)
!4088 = !DILocation(line: 2515, column: 5, scope: !4066)
!4089 = !DILocation(line: 2507, column: 29, scope: !4061)
!4090 = !DILocation(line: 2507, column: 3, scope: !4061)
!4091 = distinct !{!4091, !4064, !4092}
!4092 = !DILocation(line: 2515, column: 5, scope: !4057)
!4093 = !DILocation(line: 2516, column: 10, scope: !4039)
!4094 = !DILocation(line: 2516, column: 3, scope: !4039)
!4095 = distinct !DISubprogram(name: "coalesce_spill_slots", scope: !3, file: !3, line: 2572, type: !4096, scopeLine: 2573, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!4096 = !DISubroutineType(types: !4097)
!4097 = !{!855, !611, !610}
!4098 = !DILocalVariable(name: "spilled_coalesced_allocnos", arg: 1, scope: !4095, file: !3, line: 2572, type: !611)
!4099 = !DILocation(line: 2572, column: 38, scope: !4095)
!4100 = !DILocalVariable(name: "num", arg: 2, scope: !4095, file: !3, line: 2572, type: !610)
!4101 = !DILocation(line: 2572, column: 70, scope: !4095)
!4102 = !DILocalVariable(name: "i", scope: !4095, file: !3, line: 2574, type: !610)
!4103 = !DILocation(line: 2574, column: 7, scope: !4095)
!4104 = !DILocalVariable(name: "j", scope: !4095, file: !3, line: 2574, type: !610)
!4105 = !DILocation(line: 2574, column: 10, scope: !4095)
!4106 = !DILocalVariable(name: "n", scope: !4095, file: !3, line: 2574, type: !610)
!4107 = !DILocation(line: 2574, column: 13, scope: !4095)
!4108 = !DILocalVariable(name: "last_coalesced_allocno_num", scope: !4095, file: !3, line: 2574, type: !610)
!4109 = !DILocation(line: 2574, column: 16, scope: !4095)
!4110 = !DILocalVariable(name: "allocno", scope: !4095, file: !3, line: 2575, type: !612)
!4111 = !DILocation(line: 2575, column: 17, scope: !4095)
!4112 = !DILocalVariable(name: "a", scope: !4095, file: !3, line: 2575, type: !612)
!4113 = !DILocation(line: 2575, column: 26, scope: !4095)
!4114 = !DILocalVariable(name: "merged_p", scope: !4095, file: !3, line: 2576, type: !855)
!4115 = !DILocation(line: 2576, column: 8, scope: !4095)
!4116 = !DILocalVariable(name: "set_jump_crosses", scope: !4095, file: !3, line: 2577, type: !1745)
!4117 = !DILocation(line: 2577, column: 10, scope: !4095)
!4118 = !DILocation(line: 2577, column: 29, scope: !4095)
!4119 = !DILocation(line: 2581, column: 13, scope: !4095)
!4120 = !DILocation(line: 2581, column: 11, scope: !4095)
!4121 = !DILocation(line: 2580, column: 32, scope: !4095)
!4122 = !DILocation(line: 2580, column: 7, scope: !4095)
!4123 = !DILocation(line: 2580, column: 5, scope: !4095)
!4124 = !DILocation(line: 2582, column: 11, scope: !4095)
!4125 = !DILocation(line: 2582, column: 3, scope: !4095)
!4126 = !DILocation(line: 2583, column: 36, scope: !4095)
!4127 = !DILocation(line: 2583, column: 34, scope: !4095)
!4128 = !DILocation(line: 2584, column: 30, scope: !4095)
!4129 = !DILocation(line: 2587, column: 10, scope: !4130)
!4130 = distinct !DILexicalBlock(scope: !4095, file: !3, line: 2587, column: 3)
!4131 = !DILocation(line: 2587, column: 8, scope: !4130)
!4132 = !DILocation(line: 2587, column: 15, scope: !4133)
!4133 = distinct !DILexicalBlock(scope: !4130, file: !3, line: 2587, column: 3)
!4134 = !DILocation(line: 2587, column: 19, scope: !4133)
!4135 = !DILocation(line: 2587, column: 17, scope: !4133)
!4136 = !DILocation(line: 2587, column: 3, scope: !4130)
!4137 = !DILocation(line: 2589, column: 17, scope: !4138)
!4138 = distinct !DILexicalBlock(scope: !4133, file: !3, line: 2588, column: 5)
!4139 = !DILocation(line: 2589, column: 44, scope: !4138)
!4140 = !DILocation(line: 2589, column: 15, scope: !4138)
!4141 = !DILocation(line: 2590, column: 11, scope: !4142)
!4142 = distinct !DILexicalBlock(scope: !4138, file: !3, line: 2590, column: 11)
!4143 = !DILocation(line: 2590, column: 56, scope: !4142)
!4144 = !DILocation(line: 2590, column: 53, scope: !4142)
!4145 = !DILocation(line: 2591, column: 4, scope: !4142)
!4146 = !DILocation(line: 2591, column: 21, scope: !4142)
!4147 = !DILocation(line: 2591, column: 39, scope: !4142)
!4148 = !DILocation(line: 2591, column: 7, scope: !4142)
!4149 = !DILocation(line: 2592, column: 4, scope: !4142)
!4150 = !DILocation(line: 2592, column: 8, scope: !4142)
!4151 = !DILocation(line: 2592, column: 34, scope: !4142)
!4152 = !DILocation(line: 2592, column: 32, scope: !4142)
!4153 = !DILocation(line: 2593, column: 8, scope: !4142)
!4154 = !DILocation(line: 2593, column: 12, scope: !4142)
!4155 = !DILocation(line: 2593, column: 32, scope: !4142)
!4156 = !DILocation(line: 2593, column: 57, scope: !4142)
!4157 = !DILocation(line: 2594, column: 5, scope: !4142)
!4158 = !DILocation(line: 2594, column: 8, scope: !4142)
!4159 = !DILocation(line: 2594, column: 34, scope: !4142)
!4160 = !DILocation(line: 2590, column: 11, scope: !4138)
!4161 = !DILocation(line: 2595, column: 2, scope: !4142)
!4162 = !DILocation(line: 2596, column: 14, scope: !4163)
!4163 = distinct !DILexicalBlock(scope: !4138, file: !3, line: 2596, column: 7)
!4164 = !DILocation(line: 2596, column: 12, scope: !4163)
!4165 = !DILocation(line: 2596, column: 19, scope: !4166)
!4166 = distinct !DILexicalBlock(scope: !4163, file: !3, line: 2596, column: 7)
!4167 = !DILocation(line: 2596, column: 23, scope: !4166)
!4168 = !DILocation(line: 2596, column: 21, scope: !4166)
!4169 = !DILocation(line: 2596, column: 7, scope: !4163)
!4170 = !DILocation(line: 2598, column: 8, scope: !4171)
!4171 = distinct !DILexicalBlock(scope: !4166, file: !3, line: 2597, column: 2)
!4172 = !DILocation(line: 2598, column: 35, scope: !4171)
!4173 = !DILocation(line: 2598, column: 6, scope: !4171)
!4174 = !DILocation(line: 2599, column: 8, scope: !4171)
!4175 = !DILocation(line: 2599, column: 6, scope: !4171)
!4176 = !DILocation(line: 2600, column: 8, scope: !4177)
!4177 = distinct !DILexicalBlock(scope: !4171, file: !3, line: 2600, column: 8)
!4178 = !DILocation(line: 2600, column: 47, scope: !4177)
!4179 = !DILocation(line: 2600, column: 44, scope: !4177)
!4180 = !DILocation(line: 2601, column: 8, scope: !4177)
!4181 = !DILocation(line: 2601, column: 27, scope: !4177)
!4182 = !DILocation(line: 2601, column: 45, scope: !4177)
!4183 = !DILocation(line: 2601, column: 13, scope: !4177)
!4184 = !DILocation(line: 2602, column: 8, scope: !4177)
!4185 = !DILocation(line: 2602, column: 12, scope: !4177)
!4186 = !DILocation(line: 2602, column: 33, scope: !4177)
!4187 = !DILocation(line: 2602, column: 30, scope: !4177)
!4188 = !DILocation(line: 2603, column: 5, scope: !4177)
!4189 = !DILocation(line: 2603, column: 11, scope: !4177)
!4190 = !DILocation(line: 2603, column: 37, scope: !4177)
!4191 = !DILocation(line: 2604, column: 9, scope: !4177)
!4192 = !DILocation(line: 2604, column: 12, scope: !4177)
!4193 = !DILocation(line: 2604, column: 32, scope: !4177)
!4194 = !DILocation(line: 2604, column: 51, scope: !4177)
!4195 = !DILocation(line: 2605, column: 8, scope: !4177)
!4196 = !DILocation(line: 2605, column: 61, scope: !4177)
!4197 = !DILocation(line: 2605, column: 70, scope: !4177)
!4198 = !DILocation(line: 2605, column: 13, scope: !4177)
!4199 = !DILocation(line: 2600, column: 8, scope: !4171)
!4200 = !DILocation(line: 2606, column: 6, scope: !4177)
!4201 = !DILocation(line: 2607, column: 2, scope: !4171)
!4202 = !DILocation(line: 2596, column: 27, scope: !4166)
!4203 = !DILocation(line: 2596, column: 7, scope: !4166)
!4204 = distinct !{!4204, !4169, !4205}
!4205 = !DILocation(line: 2607, column: 2, scope: !4163)
!4206 = !DILocation(line: 2608, column: 11, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4138, file: !3, line: 2608, column: 11)
!4208 = !DILocation(line: 2608, column: 16, scope: !4207)
!4209 = !DILocation(line: 2608, column: 13, scope: !4207)
!4210 = !DILocation(line: 2608, column: 11, scope: !4138)
!4211 = !DILocation(line: 2612, column: 55, scope: !4212)
!4212 = distinct !DILexicalBlock(scope: !4207, file: !3, line: 2609, column: 2)
!4213 = !DILocation(line: 2612, column: 4, scope: !4212)
!4214 = !DILocation(line: 2612, column: 27, scope: !4212)
!4215 = !DILocation(line: 2613, column: 46, scope: !4212)
!4216 = !DILocation(line: 2613, column: 4, scope: !4212)
!4217 = !DILocation(line: 2614, column: 2, scope: !4212)
!4218 = !DILocation(line: 2617, column: 24, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4207, file: !3, line: 2616, column: 2)
!4220 = !DILocation(line: 2618, column: 13, scope: !4219)
!4221 = !DILocation(line: 2619, column: 8, scope: !4222)
!4222 = distinct !DILexicalBlock(scope: !4219, file: !3, line: 2619, column: 8)
!4223 = !DILocation(line: 2619, column: 34, scope: !4222)
!4224 = !DILocation(line: 2619, column: 38, scope: !4222)
!4225 = !DILocation(line: 2619, column: 41, scope: !4222)
!4226 = !DILocation(line: 2619, column: 55, scope: !4222)
!4227 = !DILocation(line: 2619, column: 8, scope: !4219)
!4228 = !DILocation(line: 2620, column: 15, scope: !4222)
!4229 = !DILocation(line: 2622, column: 8, scope: !4222)
!4230 = !DILocation(line: 2622, column: 31, scope: !4222)
!4231 = !DILocation(line: 2623, column: 8, scope: !4222)
!4232 = !DILocation(line: 2623, column: 25, scope: !4222)
!4233 = !DILocation(line: 2620, column: 6, scope: !4222)
!4234 = !DILocation(line: 2624, column: 29, scope: !4219)
!4235 = !DILocation(line: 2624, column: 4, scope: !4219)
!4236 = !DILocation(line: 2624, column: 27, scope: !4219)
!4237 = !DILocation(line: 2625, column: 46, scope: !4219)
!4238 = !DILocation(line: 2625, column: 4, scope: !4219)
!4239 = !DILocation(line: 2626, column: 20, scope: !4219)
!4240 = !DILocation(line: 2626, column: 23, scope: !4219)
!4241 = !DILocation(line: 2626, column: 4, scope: !4219)
!4242 = !DILocation(line: 2629, column: 5, scope: !4138)
!4243 = !DILocation(line: 2587, column: 25, scope: !4133)
!4244 = !DILocation(line: 2587, column: 3, scope: !4133)
!4245 = distinct !{!4245, !4136, !4246}
!4246 = !DILocation(line: 2629, column: 5, scope: !4130)
!4247 = !DILocation(line: 2630, column: 10, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4095, file: !3, line: 2630, column: 3)
!4249 = !DILocation(line: 2630, column: 8, scope: !4248)
!4250 = !DILocation(line: 2630, column: 15, scope: !4251)
!4251 = distinct !DILexicalBlock(scope: !4248, file: !3, line: 2630, column: 3)
!4252 = !DILocation(line: 2630, column: 19, scope: !4251)
!4253 = !DILocation(line: 2630, column: 17, scope: !4251)
!4254 = !DILocation(line: 2630, column: 3, scope: !4248)
!4255 = !DILocation(line: 2632, column: 8, scope: !4251)
!4256 = !DILocation(line: 2632, column: 44, scope: !4251)
!4257 = !DILocation(line: 2631, column: 5, scope: !4251)
!4258 = !DILocation(line: 2630, column: 38, scope: !4251)
!4259 = !DILocation(line: 2630, column: 3, scope: !4251)
!4260 = distinct !{!4260, !4254, !4261}
!4261 = !DILocation(line: 2632, column: 46, scope: !4248)
!4262 = !DILocation(line: 2633, column: 13, scope: !4095)
!4263 = !DILocation(line: 2633, column: 3, scope: !4095)
!4264 = !DILocation(line: 2634, column: 10, scope: !4095)
!4265 = !DILocation(line: 2634, column: 3, scope: !4095)
!4266 = distinct !DISubprogram(name: "coalesced_pseudo_reg_slot_compare", scope: !3, file: !3, line: 2420, type: !1182, scopeLine: 2421, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!4267 = !DILocalVariable(name: "v1p", arg: 1, scope: !4266, file: !3, line: 2420, type: !1177)
!4268 = !DILocation(line: 2420, column: 48, scope: !4266)
!4269 = !DILocalVariable(name: "v2p", arg: 2, scope: !4266, file: !3, line: 2420, type: !1177)
!4270 = !DILocation(line: 2420, column: 65, scope: !4266)
!4271 = !DILocalVariable(name: "regno1", scope: !4266, file: !3, line: 2422, type: !1850)
!4272 = !DILocation(line: 2422, column: 13, scope: !4266)
!4273 = !DILocation(line: 2422, column: 37, scope: !4266)
!4274 = !DILocation(line: 2422, column: 23, scope: !4266)
!4275 = !DILocation(line: 2422, column: 22, scope: !4266)
!4276 = !DILocalVariable(name: "regno2", scope: !4266, file: !3, line: 2423, type: !1850)
!4277 = !DILocation(line: 2423, column: 13, scope: !4266)
!4278 = !DILocation(line: 2423, column: 37, scope: !4266)
!4279 = !DILocation(line: 2423, column: 23, scope: !4266)
!4280 = !DILocation(line: 2423, column: 22, scope: !4266)
!4281 = !DILocalVariable(name: "a1", scope: !4266, file: !3, line: 2424, type: !612)
!4282 = !DILocation(line: 2424, column: 17, scope: !4266)
!4283 = !DILocation(line: 2424, column: 22, scope: !4266)
!4284 = !DILocation(line: 2424, column: 44, scope: !4266)
!4285 = !DILocalVariable(name: "a2", scope: !4266, file: !3, line: 2425, type: !612)
!4286 = !DILocation(line: 2425, column: 17, scope: !4266)
!4287 = !DILocation(line: 2425, column: 22, scope: !4266)
!4288 = !DILocation(line: 2425, column: 44, scope: !4266)
!4289 = !DILocalVariable(name: "diff", scope: !4266, file: !3, line: 2426, type: !610)
!4290 = !DILocation(line: 2426, column: 7, scope: !4266)
!4291 = !DILocalVariable(name: "slot_num1", scope: !4266, file: !3, line: 2426, type: !610)
!4292 = !DILocation(line: 2426, column: 13, scope: !4266)
!4293 = !DILocalVariable(name: "slot_num2", scope: !4266, file: !3, line: 2426, type: !610)
!4294 = !DILocation(line: 2426, column: 24, scope: !4266)
!4295 = !DILocalVariable(name: "total_size1", scope: !4266, file: !3, line: 2427, type: !610)
!4296 = !DILocation(line: 2427, column: 7, scope: !4266)
!4297 = !DILocalVariable(name: "total_size2", scope: !4266, file: !3, line: 2427, type: !610)
!4298 = !DILocation(line: 2427, column: 20, scope: !4266)
!4299 = !DILocation(line: 2429, column: 7, scope: !4300)
!4300 = distinct !DILexicalBlock(scope: !4266, file: !3, line: 2429, column: 7)
!4301 = !DILocation(line: 2429, column: 10, scope: !4300)
!4302 = !DILocation(line: 2429, column: 18, scope: !4300)
!4303 = !DILocation(line: 2429, column: 21, scope: !4300)
!4304 = !DILocation(line: 2429, column: 45, scope: !4300)
!4305 = !DILocation(line: 2429, column: 7, scope: !4266)
!4306 = !DILocation(line: 2431, column: 11, scope: !4307)
!4307 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 2431, column: 11)
!4308 = distinct !DILexicalBlock(scope: !4300, file: !3, line: 2430, column: 5)
!4309 = !DILocation(line: 2431, column: 14, scope: !4307)
!4310 = !DILocation(line: 2431, column: 22, scope: !4307)
!4311 = !DILocation(line: 2431, column: 25, scope: !4307)
!4312 = !DILocation(line: 2431, column: 49, scope: !4307)
!4313 = !DILocation(line: 2431, column: 11, scope: !4308)
!4314 = !DILocation(line: 2432, column: 9, scope: !4307)
!4315 = !DILocation(line: 2432, column: 18, scope: !4307)
!4316 = !DILocation(line: 2432, column: 16, scope: !4307)
!4317 = !DILocation(line: 2432, column: 2, scope: !4307)
!4318 = !DILocation(line: 2433, column: 7, scope: !4308)
!4319 = !DILocation(line: 2435, column: 12, scope: !4320)
!4320 = distinct !DILexicalBlock(scope: !4300, file: !3, line: 2435, column: 12)
!4321 = !DILocation(line: 2435, column: 15, scope: !4320)
!4322 = !DILocation(line: 2435, column: 23, scope: !4320)
!4323 = !DILocation(line: 2435, column: 26, scope: !4320)
!4324 = !DILocation(line: 2435, column: 50, scope: !4320)
!4325 = !DILocation(line: 2435, column: 12, scope: !4300)
!4326 = !DILocation(line: 2436, column: 5, scope: !4320)
!4327 = !DILocation(line: 2437, column: 16, scope: !4266)
!4328 = !DILocation(line: 2437, column: 15, scope: !4266)
!4329 = !DILocation(line: 2437, column: 13, scope: !4266)
!4330 = !DILocation(line: 2438, column: 16, scope: !4266)
!4331 = !DILocation(line: 2438, column: 15, scope: !4266)
!4332 = !DILocation(line: 2438, column: 13, scope: !4266)
!4333 = !DILocation(line: 2439, column: 15, scope: !4334)
!4334 = distinct !DILexicalBlock(scope: !4266, file: !3, line: 2439, column: 7)
!4335 = !DILocation(line: 2439, column: 27, scope: !4334)
!4336 = !DILocation(line: 2439, column: 25, scope: !4334)
!4337 = !DILocation(line: 2439, column: 13, scope: !4334)
!4338 = !DILocation(line: 2439, column: 38, scope: !4334)
!4339 = !DILocation(line: 2439, column: 7, scope: !4266)
!4340 = !DILocation(line: 2442, column: 13, scope: !4334)
!4341 = !DILocation(line: 2443, column: 59, scope: !4334)
!4342 = !DILocation(line: 2443, column: 67, scope: !4334)
!4343 = !DILocation(line: 2443, column: 66, scope: !4334)
!4344 = !DILocation(line: 2442, column: 5, scope: !4334)
!4345 = !DILocation(line: 2448, column: 17, scope: !4266)
!4346 = !DILocation(line: 2448, column: 15, scope: !4266)
!4347 = !DILocation(line: 2449, column: 17, scope: !4266)
!4348 = !DILocation(line: 2449, column: 15, scope: !4266)
!4349 = !DILocation(line: 2450, column: 15, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4266, file: !3, line: 2450, column: 7)
!4351 = !DILocation(line: 2450, column: 29, scope: !4350)
!4352 = !DILocation(line: 2450, column: 27, scope: !4350)
!4353 = !DILocation(line: 2450, column: 13, scope: !4350)
!4354 = !DILocation(line: 2450, column: 42, scope: !4350)
!4355 = !DILocation(line: 2450, column: 7, scope: !4266)
!4356 = !DILocation(line: 2451, column: 12, scope: !4350)
!4357 = !DILocation(line: 2451, column: 5, scope: !4350)
!4358 = !DILocation(line: 2452, column: 10, scope: !4266)
!4359 = !DILocation(line: 2452, column: 19, scope: !4266)
!4360 = !DILocation(line: 2452, column: 17, scope: !4266)
!4361 = !DILocation(line: 2452, column: 3, scope: !4266)
!4362 = !DILocation(line: 2453, column: 1, scope: !4266)
!4363 = distinct !DISubprogram(name: "ira_mark_allocation_change", scope: !3, file: !3, line: 2765, type: !2169, scopeLine: 2766, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!4364 = !DILocalVariable(name: "regno", arg: 1, scope: !4363, file: !3, line: 2765, type: !610)
!4365 = !DILocation(line: 2765, column: 33, scope: !4363)
!4366 = !DILocalVariable(name: "a", scope: !4363, file: !3, line: 2767, type: !612)
!4367 = !DILocation(line: 2767, column: 17, scope: !4363)
!4368 = !DILocation(line: 2767, column: 21, scope: !4363)
!4369 = !DILocation(line: 2767, column: 43, scope: !4363)
!4370 = !DILocalVariable(name: "old_hard_regno", scope: !4363, file: !3, line: 2768, type: !610)
!4371 = !DILocation(line: 2768, column: 7, scope: !4363)
!4372 = !DILocalVariable(name: "hard_regno", scope: !4363, file: !3, line: 2768, type: !610)
!4373 = !DILocation(line: 2768, column: 23, scope: !4363)
!4374 = !DILocalVariable(name: "cost", scope: !4363, file: !3, line: 2768, type: !610)
!4375 = !DILocation(line: 2768, column: 35, scope: !4363)
!4376 = !DILocalVariable(name: "cover_class", scope: !4363, file: !3, line: 2769, type: !390)
!4377 = !DILocation(line: 2769, column: 18, scope: !4363)
!4378 = !DILocation(line: 2769, column: 32, scope: !4363)
!4379 = !DILocation(line: 2772, column: 16, scope: !4363)
!4380 = !DILocation(line: 2772, column: 29, scope: !4363)
!4381 = !DILocation(line: 2772, column: 14, scope: !4363)
!4382 = !DILocation(line: 2773, column: 25, scope: !4383)
!4383 = distinct !DILexicalBlock(scope: !4363, file: !3, line: 2773, column: 7)
!4384 = !DILocation(line: 2773, column: 23, scope: !4383)
!4385 = !DILocation(line: 2773, column: 52, scope: !4383)
!4386 = !DILocation(line: 2773, column: 49, scope: !4383)
!4387 = !DILocation(line: 2773, column: 7, scope: !4363)
!4388 = !DILocation(line: 2774, column: 5, scope: !4383)
!4389 = !DILocation(line: 2775, column: 7, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !4363, file: !3, line: 2775, column: 7)
!4391 = !DILocation(line: 2775, column: 22, scope: !4390)
!4392 = !DILocation(line: 2775, column: 7, scope: !4363)
!4393 = !DILocation(line: 2776, column: 13, scope: !4390)
!4394 = !DILocation(line: 2776, column: 12, scope: !4390)
!4395 = !DILocation(line: 2776, column: 10, scope: !4390)
!4396 = !DILocation(line: 2776, column: 5, scope: !4390)
!4397 = !DILocation(line: 2780, column: 16, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4390, file: !3, line: 2778, column: 5)
!4399 = !DILocation(line: 2780, column: 43, scope: !4398)
!4400 = !DILocation(line: 2781, column: 11, scope: !4398)
!4401 = !DILocation(line: 2782, column: 11, scope: !4398)
!4402 = !DILocation(line: 2783, column: 37, scope: !4398)
!4403 = !DILocation(line: 2783, column: 12, scope: !4398)
!4404 = !DILocation(line: 2783, column: 50, scope: !4398)
!4405 = !DILocation(line: 2780, column: 14, scope: !4398)
!4406 = !DILocation(line: 2780, column: 12, scope: !4398)
!4407 = !DILocation(line: 2784, column: 26, scope: !4398)
!4408 = !DILocation(line: 2784, column: 7, scope: !4398)
!4409 = !DILocation(line: 2786, column: 23, scope: !4363)
!4410 = !DILocation(line: 2786, column: 20, scope: !4363)
!4411 = !DILocation(line: 2787, column: 28, scope: !4363)
!4412 = !DILocation(line: 2787, column: 3, scope: !4363)
!4413 = !DILocation(line: 2787, column: 26, scope: !4363)
!4414 = !DILocation(line: 2788, column: 7, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4363, file: !3, line: 2788, column: 7)
!4416 = !DILocation(line: 2788, column: 18, scope: !4415)
!4417 = !DILocation(line: 2788, column: 7, scope: !4363)
!4418 = !DILocation(line: 2790, column: 7, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4415, file: !3, line: 2789, column: 5)
!4420 = !DILocation(line: 2790, column: 30, scope: !4419)
!4421 = !DILocation(line: 2791, column: 15, scope: !4419)
!4422 = !DILocation(line: 2791, column: 12, scope: !4419)
!4423 = !DILocation(line: 2792, column: 5, scope: !4419)
!4424 = !DILocation(line: 2793, column: 37, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4415, file: !3, line: 2793, column: 12)
!4426 = !DILocation(line: 2793, column: 12, scope: !4425)
!4427 = !DILocation(line: 2793, column: 50, scope: !4425)
!4428 = !DILocation(line: 2793, column: 62, scope: !4425)
!4429 = !DILocation(line: 2793, column: 12, scope: !4415)
!4430 = !DILocation(line: 2795, column: 16, scope: !4431)
!4431 = distinct !DILexicalBlock(scope: !4425, file: !3, line: 2794, column: 5)
!4432 = !DILocation(line: 2795, column: 43, scope: !4431)
!4433 = !DILocation(line: 2796, column: 11, scope: !4431)
!4434 = !DILocation(line: 2797, column: 11, scope: !4431)
!4435 = !DILocation(line: 2798, column: 37, scope: !4431)
!4436 = !DILocation(line: 2798, column: 12, scope: !4431)
!4437 = !DILocation(line: 2798, column: 50, scope: !4431)
!4438 = !DILocation(line: 2795, column: 12, scope: !4431)
!4439 = !DILocation(line: 2799, column: 26, scope: !4431)
!4440 = !DILocation(line: 2799, column: 7, scope: !4431)
!4441 = !DILocation(line: 2800, column: 5, scope: !4431)
!4442 = !DILocation(line: 2803, column: 10, scope: !4425)
!4443 = !DILocation(line: 2804, column: 23, scope: !4363)
!4444 = !DILocation(line: 2804, column: 20, scope: !4363)
!4445 = !DILocation(line: 2805, column: 1, scope: !4363)
!4446 = distinct !DISubprogram(name: "update_copy_costs", scope: !3, file: !3, line: 244, type: !4447, scopeLine: 245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!4447 = !DISubroutineType(types: !4448)
!4448 = !{null, !612, !855}
!4449 = !DILocalVariable(name: "allocno", arg: 1, scope: !4446, file: !3, line: 244, type: !612)
!4450 = !DILocation(line: 244, column: 34, scope: !4446)
!4451 = !DILocalVariable(name: "decr_p", arg: 2, scope: !4446, file: !3, line: 244, type: !855)
!4452 = !DILocation(line: 244, column: 48, scope: !4446)
!4453 = !DILocalVariable(name: "i", scope: !4446, file: !3, line: 246, type: !610)
!4454 = !DILocation(line: 246, column: 7, scope: !4446)
!4455 = !DILocalVariable(name: "cost", scope: !4446, file: !3, line: 246, type: !610)
!4456 = !DILocation(line: 246, column: 10, scope: !4446)
!4457 = !DILocalVariable(name: "update_cost", scope: !4446, file: !3, line: 246, type: !610)
!4458 = !DILocation(line: 246, column: 16, scope: !4446)
!4459 = !DILocalVariable(name: "hard_regno", scope: !4446, file: !3, line: 246, type: !610)
!4460 = !DILocation(line: 246, column: 29, scope: !4446)
!4461 = !DILocalVariable(name: "divisor", scope: !4446, file: !3, line: 246, type: !610)
!4462 = !DILocation(line: 246, column: 41, scope: !4446)
!4463 = !DILocalVariable(name: "mode", scope: !4446, file: !3, line: 247, type: !5)
!4464 = !DILocation(line: 247, column: 21, scope: !4446)
!4465 = !DILocalVariable(name: "rclass", scope: !4446, file: !3, line: 248, type: !390)
!4466 = !DILocation(line: 248, column: 18, scope: !4446)
!4467 = !DILocalVariable(name: "cover_class", scope: !4446, file: !3, line: 248, type: !390)
!4468 = !DILocation(line: 248, column: 26, scope: !4446)
!4469 = !DILocalVariable(name: "another_allocno", scope: !4446, file: !3, line: 249, type: !612)
!4470 = !DILocation(line: 249, column: 17, scope: !4446)
!4471 = !DILocalVariable(name: "cp", scope: !4446, file: !3, line: 250, type: !1758)
!4472 = !DILocation(line: 250, column: 14, scope: !4446)
!4473 = !DILocalVariable(name: "next_cp", scope: !4446, file: !3, line: 250, type: !1758)
!4474 = !DILocation(line: 250, column: 18, scope: !4446)
!4475 = !DILocation(line: 252, column: 16, scope: !4446)
!4476 = !DILocation(line: 252, column: 14, scope: !4446)
!4477 = !DILocation(line: 255, column: 17, scope: !4446)
!4478 = !DILocation(line: 255, column: 15, scope: !4446)
!4479 = !DILocation(line: 256, column: 7, scope: !4480)
!4480 = distinct !DILexicalBlock(scope: !4446, file: !3, line: 256, column: 7)
!4481 = !DILocation(line: 256, column: 19, scope: !4480)
!4482 = !DILocation(line: 256, column: 7, scope: !4446)
!4483 = !DILocation(line: 257, column: 5, scope: !4480)
!4484 = !DILocation(line: 258, column: 32, scope: !4446)
!4485 = !DILocation(line: 258, column: 7, scope: !4446)
!4486 = !DILocation(line: 258, column: 45, scope: !4446)
!4487 = !DILocation(line: 258, column: 5, scope: !4446)
!4488 = !DILocation(line: 260, column: 12, scope: !4446)
!4489 = !DILocation(line: 260, column: 10, scope: !4446)
!4490 = !DILocation(line: 262, column: 3, scope: !4446)
!4491 = !DILocation(line: 263, column: 11, scope: !4446)
!4492 = !DILocation(line: 264, column: 3, scope: !4446)
!4493 = !DILocation(line: 266, column: 14, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4446, file: !3, line: 265, column: 5)
!4495 = !DILocation(line: 266, column: 12, scope: !4494)
!4496 = !DILocation(line: 267, column: 17, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4494, file: !3, line: 267, column: 7)
!4498 = !DILocation(line: 267, column: 15, scope: !4497)
!4499 = !DILocation(line: 267, column: 12, scope: !4497)
!4500 = !DILocation(line: 267, column: 43, scope: !4501)
!4501 = distinct !DILexicalBlock(scope: !4497, file: !3, line: 267, column: 7)
!4502 = !DILocation(line: 267, column: 46, scope: !4501)
!4503 = !DILocation(line: 267, column: 7, scope: !4497)
!4504 = !DILocation(line: 269, column: 8, scope: !4505)
!4505 = distinct !DILexicalBlock(scope: !4506, file: !3, line: 269, column: 8)
!4506 = distinct !DILexicalBlock(scope: !4501, file: !3, line: 268, column: 2)
!4507 = !DILocation(line: 269, column: 12, scope: !4505)
!4508 = !DILocation(line: 269, column: 21, scope: !4505)
!4509 = !DILocation(line: 269, column: 18, scope: !4505)
!4510 = !DILocation(line: 269, column: 8, scope: !4506)
!4511 = !DILocation(line: 271, column: 18, scope: !4512)
!4512 = distinct !DILexicalBlock(scope: !4505, file: !3, line: 270, column: 6)
!4513 = !DILocation(line: 271, column: 22, scope: !4512)
!4514 = !DILocation(line: 271, column: 16, scope: !4512)
!4515 = !DILocation(line: 272, column: 26, scope: !4512)
!4516 = !DILocation(line: 272, column: 30, scope: !4512)
!4517 = !DILocation(line: 272, column: 24, scope: !4512)
!4518 = !DILocation(line: 273, column: 6, scope: !4512)
!4519 = !DILocation(line: 274, column: 13, scope: !4520)
!4520 = distinct !DILexicalBlock(scope: !4505, file: !3, line: 274, column: 13)
!4521 = !DILocation(line: 274, column: 17, scope: !4520)
!4522 = !DILocation(line: 274, column: 27, scope: !4520)
!4523 = !DILocation(line: 274, column: 24, scope: !4520)
!4524 = !DILocation(line: 274, column: 13, scope: !4505)
!4525 = !DILocation(line: 276, column: 18, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4520, file: !3, line: 275, column: 6)
!4527 = !DILocation(line: 276, column: 22, scope: !4526)
!4528 = !DILocation(line: 276, column: 16, scope: !4526)
!4529 = !DILocation(line: 277, column: 26, scope: !4526)
!4530 = !DILocation(line: 277, column: 30, scope: !4526)
!4531 = !DILocation(line: 277, column: 24, scope: !4526)
!4532 = !DILocation(line: 278, column: 6, scope: !4526)
!4533 = !DILocation(line: 280, column: 6, scope: !4520)
!4534 = !DILocation(line: 282, column: 18, scope: !4506)
!4535 = !DILocation(line: 282, column: 16, scope: !4506)
!4536 = !DILocation(line: 283, column: 38, scope: !4537)
!4537 = distinct !DILexicalBlock(scope: !4506, file: !3, line: 283, column: 8)
!4538 = !DILocation(line: 283, column: 10, scope: !4537)
!4539 = !DILocation(line: 283, column: 46, scope: !4537)
!4540 = !DILocation(line: 284, column: 8, scope: !4537)
!4541 = !DILocation(line: 284, column: 11, scope: !4537)
!4542 = !DILocation(line: 283, column: 8, scope: !4506)
!4543 = !DILocation(line: 285, column: 6, scope: !4537)
!4544 = !DILocation(line: 287, column: 12, scope: !4506)
!4545 = !DILocation(line: 287, column: 16, scope: !4506)
!4546 = !DILocation(line: 287, column: 26, scope: !4506)
!4547 = !DILocation(line: 287, column: 23, scope: !4506)
!4548 = !DILocation(line: 288, column: 35, scope: !4506)
!4549 = !DILocation(line: 288, column: 41, scope: !4506)
!4550 = !DILocation(line: 288, column: 49, scope: !4506)
!4551 = !DILocation(line: 288, column: 7, scope: !4506)
!4552 = !DILocation(line: 289, column: 35, scope: !4506)
!4553 = !DILocation(line: 289, column: 41, scope: !4506)
!4554 = !DILocation(line: 289, column: 54, scope: !4506)
!4555 = !DILocation(line: 289, column: 7, scope: !4506)
!4556 = !DILocation(line: 287, column: 9, scope: !4506)
!4557 = !DILocation(line: 290, column: 8, scope: !4558)
!4558 = distinct !DILexicalBlock(scope: !4506, file: !3, line: 290, column: 8)
!4559 = !DILocation(line: 290, column: 8, scope: !4506)
!4560 = !DILocation(line: 291, column: 14, scope: !4558)
!4561 = !DILocation(line: 291, column: 13, scope: !4558)
!4562 = !DILocation(line: 291, column: 11, scope: !4558)
!4563 = !DILocation(line: 291, column: 6, scope: !4558)
!4564 = !DILocation(line: 293, column: 18, scope: !4506)
!4565 = !DILocation(line: 293, column: 22, scope: !4506)
!4566 = !DILocation(line: 293, column: 29, scope: !4506)
!4567 = !DILocation(line: 293, column: 27, scope: !4506)
!4568 = !DILocation(line: 293, column: 36, scope: !4506)
!4569 = !DILocation(line: 293, column: 34, scope: !4506)
!4570 = !DILocation(line: 293, column: 16, scope: !4506)
!4571 = !DILocation(line: 294, column: 8, scope: !4572)
!4572 = distinct !DILexicalBlock(scope: !4506, file: !3, line: 294, column: 8)
!4573 = !DILocation(line: 294, column: 20, scope: !4572)
!4574 = !DILocation(line: 294, column: 8, scope: !4506)
!4575 = !DILocation(line: 295, column: 6, scope: !4572)
!4576 = !DILocation(line: 298, column: 8, scope: !4506)
!4577 = !DILocation(line: 298, column: 58, scope: !4506)
!4578 = !DILocation(line: 299, column: 7, scope: !4506)
!4579 = !DILocation(line: 300, column: 7, scope: !4506)
!4580 = !DILocation(line: 297, column: 4, scope: !4506)
!4581 = !DILocation(line: 302, column: 8, scope: !4506)
!4582 = !DILocation(line: 303, column: 7, scope: !4506)
!4583 = !DILocation(line: 304, column: 7, scope: !4506)
!4584 = !DILocation(line: 301, column: 4, scope: !4506)
!4585 = !DILocation(line: 305, column: 33, scope: !4506)
!4586 = !DILocation(line: 305, column: 8, scope: !4506)
!4587 = !DILocation(line: 305, column: 46, scope: !4506)
!4588 = !DILocation(line: 305, column: 6, scope: !4506)
!4589 = !DILocation(line: 307, column: 59, scope: !4506)
!4590 = !DILocation(line: 307, column: 4, scope: !4506)
!4591 = !DILocation(line: 307, column: 53, scope: !4506)
!4592 = !DILocation(line: 307, column: 56, scope: !4506)
!4593 = !DILocation(line: 309, column: 9, scope: !4506)
!4594 = !DILocation(line: 308, column: 4, scope: !4506)
!4595 = !DILocation(line: 308, column: 62, scope: !4506)
!4596 = !DILocation(line: 309, column: 6, scope: !4506)
!4597 = !DILocation(line: 311, column: 23, scope: !4506)
!4598 = !DILocation(line: 311, column: 40, scope: !4506)
!4599 = !DILocation(line: 311, column: 48, scope: !4506)
!4600 = !DILocation(line: 311, column: 4, scope: !4506)
!4601 = !DILocation(line: 312, column: 2, scope: !4506)
!4602 = !DILocation(line: 267, column: 60, scope: !4501)
!4603 = !DILocation(line: 267, column: 58, scope: !4501)
!4604 = !DILocation(line: 267, column: 7, scope: !4501)
!4605 = distinct !{!4605, !4503, !4606}
!4606 = !DILocation(line: 312, column: 2, scope: !4497)
!4607 = !DILocation(line: 313, column: 5, scope: !4494)
!4608 = !DILocation(line: 314, column: 10, scope: !4446)
!4609 = distinct !{!4609, !4492, !4610}
!4610 = !DILocation(line: 314, column: 51, scope: !4446)
!4611 = !DILocation(line: 315, column: 1, scope: !4446)
!4612 = distinct !DISubprogram(name: "ira_mark_memory_move_deletion", scope: !3, file: !3, line: 2812, type: !4613, scopeLine: 2813, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!4613 = !DISubroutineType(types: !4614)
!4614 = !{null, !610, !610}
!4615 = !DILocalVariable(name: "dst_regno", arg: 1, scope: !4612, file: !3, line: 2812, type: !610)
!4616 = !DILocation(line: 2812, column: 36, scope: !4612)
!4617 = !DILocalVariable(name: "src_regno", arg: 2, scope: !4612, file: !3, line: 2812, type: !610)
!4618 = !DILocation(line: 2812, column: 51, scope: !4612)
!4619 = !DILocalVariable(name: "dst", scope: !4612, file: !3, line: 2814, type: !612)
!4620 = !DILocation(line: 2814, column: 17, scope: !4612)
!4621 = !DILocation(line: 2814, column: 23, scope: !4612)
!4622 = !DILocation(line: 2814, column: 45, scope: !4612)
!4623 = !DILocalVariable(name: "src", scope: !4612, file: !3, line: 2815, type: !612)
!4624 = !DILocation(line: 2815, column: 17, scope: !4612)
!4625 = !DILocation(line: 2815, column: 23, scope: !4612)
!4626 = !DILocation(line: 2815, column: 45, scope: !4612)
!4627 = !DILocation(line: 2820, column: 3, scope: !4612)
!4628 = !DILocation(line: 2820, column: 33, scope: !4612)
!4629 = !DILocation(line: 2821, column: 3, scope: !4612)
!4630 = !DILocation(line: 2821, column: 33, scope: !4612)
!4631 = !DILocation(line: 2822, column: 1, scope: !4612)
!4632 = distinct !DISubprogram(name: "ira_reassign_pseudos", scope: !3, file: !3, line: 2903, type: !4633, scopeLine: 2907, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!4633 = !DISubroutineType(types: !4634)
!4634 = !{!855, !609, !610, !1794, !1862, !1862, !1745}
!4635 = !DILocalVariable(name: "spilled_pseudo_regs", arg: 1, scope: !4632, file: !3, line: 2903, type: !609)
!4636 = !DILocation(line: 2903, column: 28, scope: !4632)
!4637 = !DILocalVariable(name: "num", arg: 2, scope: !4632, file: !3, line: 2903, type: !610)
!4638 = !DILocation(line: 2903, column: 53, scope: !4632)
!4639 = !DILocalVariable(name: "bad_spill_regs", arg: 3, scope: !4632, file: !3, line: 2904, type: !1794)
!4640 = !DILocation(line: 2904, column: 22, scope: !4632)
!4641 = !DILocalVariable(name: "pseudo_forbidden_regs", arg: 4, scope: !4632, file: !3, line: 2905, type: !1862)
!4642 = !DILocation(line: 2905, column: 23, scope: !4632)
!4643 = !DILocalVariable(name: "pseudo_previous_regs", arg: 5, scope: !4632, file: !3, line: 2906, type: !1862)
!4644 = !DILocation(line: 2906, column: 23, scope: !4632)
!4645 = !DILocalVariable(name: "spilled", arg: 6, scope: !4632, file: !3, line: 2906, type: !1745)
!4646 = !DILocation(line: 2906, column: 53, scope: !4632)
!4647 = !DILocalVariable(name: "i", scope: !4632, file: !3, line: 2908, type: !610)
!4648 = !DILocation(line: 2908, column: 7, scope: !4632)
!4649 = !DILocalVariable(name: "m", scope: !4632, file: !3, line: 2908, type: !610)
!4650 = !DILocation(line: 2908, column: 10, scope: !4632)
!4651 = !DILocalVariable(name: "n", scope: !4632, file: !3, line: 2908, type: !610)
!4652 = !DILocation(line: 2908, column: 13, scope: !4632)
!4653 = !DILocalVariable(name: "regno", scope: !4632, file: !3, line: 2908, type: !610)
!4654 = !DILocation(line: 2908, column: 16, scope: !4632)
!4655 = !DILocalVariable(name: "changed_p", scope: !4632, file: !3, line: 2909, type: !855)
!4656 = !DILocation(line: 2909, column: 8, scope: !4632)
!4657 = !DILocalVariable(name: "a", scope: !4632, file: !3, line: 2910, type: !612)
!4658 = !DILocation(line: 2910, column: 17, scope: !4632)
!4659 = !DILocalVariable(name: "conflict_a", scope: !4632, file: !3, line: 2910, type: !612)
!4660 = !DILocation(line: 2910, column: 20, scope: !4632)
!4661 = !DILocalVariable(name: "forbidden_regs", scope: !4632, file: !3, line: 2911, type: !1794)
!4662 = !DILocation(line: 2911, column: 16, scope: !4632)
!4663 = !DILocalVariable(name: "aci", scope: !4632, file: !3, line: 2912, type: !2182)
!4664 = !DILocation(line: 2912, column: 33, scope: !4632)
!4665 = !DILocation(line: 2914, column: 7, scope: !4666)
!4666 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 2914, column: 7)
!4667 = !DILocation(line: 2914, column: 11, scope: !4666)
!4668 = !DILocation(line: 2914, column: 7, scope: !4632)
!4669 = !DILocation(line: 2916, column: 17, scope: !4666)
!4670 = !DILocation(line: 2916, column: 38, scope: !4666)
!4671 = !DILocation(line: 2916, column: 5, scope: !4666)
!4672 = !DILocation(line: 2920, column: 13, scope: !4632)
!4673 = !DILocation(line: 2923, column: 14, scope: !4674)
!4674 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 2923, column: 3)
!4675 = !DILocation(line: 2923, column: 10, scope: !4674)
!4676 = !DILocation(line: 2923, column: 8, scope: !4674)
!4677 = !DILocation(line: 2923, column: 19, scope: !4678)
!4678 = distinct !DILexicalBlock(scope: !4674, file: !3, line: 2923, column: 3)
!4679 = !DILocation(line: 2923, column: 23, scope: !4678)
!4680 = !DILocation(line: 2923, column: 21, scope: !4678)
!4681 = !DILocation(line: 2923, column: 3, scope: !4674)
!4682 = !DILocation(line: 2925, column: 15, scope: !4683)
!4683 = distinct !DILexicalBlock(scope: !4678, file: !3, line: 2924, column: 5)
!4684 = !DILocation(line: 2925, column: 35, scope: !4683)
!4685 = !DILocation(line: 2925, column: 13, scope: !4683)
!4686 = !DILocation(line: 2926, column: 7, scope: !4683)
!4687 = !DILocation(line: 2927, column: 7, scope: !4683)
!4688 = !DILocation(line: 2928, column: 7, scope: !4683)
!4689 = !DILocation(line: 2929, column: 7, scope: !4683)
!4690 = !DILocation(line: 2930, column: 11, scope: !4683)
!4691 = !DILocation(line: 2930, column: 33, scope: !4683)
!4692 = !DILocation(line: 2930, column: 9, scope: !4683)
!4693 = !DILocation(line: 2931, column: 35, scope: !4683)
!4694 = !DILocation(line: 2931, column: 7, scope: !4683)
!4695 = !DILocation(line: 2933, column: 11, scope: !4696)
!4696 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 2933, column: 11)
!4697 = !DILocation(line: 2933, column: 37, scope: !4696)
!4698 = !DILocation(line: 2933, column: 41, scope: !4696)
!4699 = !DILocation(line: 2933, column: 44, scope: !4696)
!4700 = !DILocation(line: 2933, column: 58, scope: !4696)
!4701 = !DILocation(line: 2933, column: 11, scope: !4683)
!4702 = !DILocation(line: 2934, column: 11, scope: !4696)
!4703 = !DILocation(line: 2935, column: 36, scope: !4696)
!4704 = !DILocation(line: 2935, column: 43, scope: !4696)
!4705 = !DILocation(line: 2936, column: 4, scope: !4696)
!4706 = !DILocation(line: 2937, column: 6, scope: !4696)
!4707 = !DILocation(line: 2937, column: 4, scope: !4696)
!4708 = !DILocation(line: 2934, column: 2, scope: !4696)
!4709 = !DILocation(line: 2938, column: 30, scope: !4683)
!4710 = !DILocation(line: 2938, column: 33, scope: !4683)
!4711 = !DILocation(line: 2938, column: 7, scope: !4683)
!4712 = !DILocation(line: 2939, column: 11, scope: !4713)
!4713 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 2939, column: 11)
!4714 = !DILocation(line: 2939, column: 24, scope: !4713)
!4715 = !DILocation(line: 2939, column: 31, scope: !4713)
!4716 = !DILocation(line: 2939, column: 11, scope: !4683)
!4717 = !DILocation(line: 2941, column: 4, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4713, file: !3, line: 2940, column: 2)
!4719 = !DILocation(line: 2942, column: 14, scope: !4718)
!4720 = !DILocation(line: 2943, column: 2, scope: !4718)
!4721 = !DILocation(line: 2945, column: 29, scope: !4713)
!4722 = !DILocation(line: 2945, column: 2, scope: !4713)
!4723 = !DILocation(line: 2945, column: 23, scope: !4713)
!4724 = !DILocation(line: 2945, column: 27, scope: !4713)
!4725 = !DILocation(line: 2946, column: 5, scope: !4683)
!4726 = !DILocation(line: 2923, column: 29, scope: !4678)
!4727 = !DILocation(line: 2923, column: 3, scope: !4678)
!4728 = distinct !{!4728, !4681, !4729}
!4729 = !DILocation(line: 2946, column: 5, scope: !4674)
!4730 = !DILocation(line: 2947, column: 7, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 2947, column: 7)
!4732 = !DILocation(line: 2947, column: 9, scope: !4731)
!4733 = !DILocation(line: 2947, column: 7, scope: !4632)
!4734 = !DILocation(line: 2948, column: 12, scope: !4731)
!4735 = !DILocation(line: 2948, column: 5, scope: !4731)
!4736 = !DILocation(line: 2949, column: 7, scope: !4737)
!4737 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 2949, column: 7)
!4738 = !DILocation(line: 2949, column: 33, scope: !4737)
!4739 = !DILocation(line: 2949, column: 37, scope: !4737)
!4740 = !DILocation(line: 2949, column: 40, scope: !4737)
!4741 = !DILocation(line: 2949, column: 54, scope: !4737)
!4742 = !DILocation(line: 2949, column: 7, scope: !4632)
!4743 = !DILocation(line: 2951, column: 16, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 2950, column: 5)
!4745 = !DILocation(line: 2951, column: 7, scope: !4744)
!4746 = !DILocation(line: 2952, column: 14, scope: !4747)
!4747 = distinct !DILexicalBlock(scope: !4744, file: !3, line: 2952, column: 7)
!4748 = !DILocation(line: 2952, column: 12, scope: !4747)
!4749 = !DILocation(line: 2952, column: 19, scope: !4750)
!4750 = distinct !DILexicalBlock(scope: !4747, file: !3, line: 2952, column: 7)
!4751 = !DILocation(line: 2952, column: 23, scope: !4750)
!4752 = !DILocation(line: 2952, column: 21, scope: !4750)
!4753 = !DILocation(line: 2952, column: 7, scope: !4747)
!4754 = !DILocation(line: 2953, column: 11, scope: !4750)
!4755 = !DILocation(line: 2953, column: 33, scope: !4750)
!4756 = !DILocation(line: 2953, column: 53, scope: !4750)
!4757 = !DILocation(line: 2953, column: 2, scope: !4750)
!4758 = !DILocation(line: 2952, column: 27, scope: !4750)
!4759 = !DILocation(line: 2952, column: 7, scope: !4750)
!4760 = distinct !{!4760, !4753, !4761}
!4761 = !DILocation(line: 2953, column: 55, scope: !4747)
!4762 = !DILocation(line: 2954, column: 16, scope: !4744)
!4763 = !DILocation(line: 2954, column: 7, scope: !4744)
!4764 = !DILocation(line: 2955, column: 5, scope: !4744)
!4765 = !DILocation(line: 2958, column: 14, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 2958, column: 3)
!4767 = !DILocation(line: 2958, column: 10, scope: !4766)
!4768 = !DILocation(line: 2958, column: 8, scope: !4766)
!4769 = !DILocation(line: 2958, column: 19, scope: !4770)
!4770 = distinct !DILexicalBlock(scope: !4766, file: !3, line: 2958, column: 3)
!4771 = !DILocation(line: 2958, column: 23, scope: !4770)
!4772 = !DILocation(line: 2958, column: 21, scope: !4770)
!4773 = !DILocation(line: 2958, column: 3, scope: !4766)
!4774 = !DILocation(line: 2960, column: 15, scope: !4775)
!4775 = distinct !DILexicalBlock(scope: !4770, file: !3, line: 2959, column: 5)
!4776 = !DILocation(line: 2960, column: 35, scope: !4775)
!4777 = !DILocation(line: 2960, column: 13, scope: !4775)
!4778 = !DILocation(line: 2961, column: 11, scope: !4775)
!4779 = !DILocation(line: 2961, column: 33, scope: !4775)
!4780 = !DILocation(line: 2961, column: 9, scope: !4775)
!4781 = !DILocation(line: 2962, column: 7, scope: !4782)
!4782 = distinct !DILexicalBlock(scope: !4775, file: !3, line: 2962, column: 7)
!4783 = !DILocation(line: 2962, column: 7, scope: !4784)
!4784 = distinct !DILexicalBlock(scope: !4782, file: !3, line: 2962, column: 7)
!4785 = !DILocation(line: 2963, column: 6, scope: !4786)
!4786 = distinct !DILexicalBlock(scope: !4784, file: !3, line: 2963, column: 6)
!4787 = !DILocation(line: 2963, column: 38, scope: !4786)
!4788 = !DILocation(line: 2964, column: 6, scope: !4786)
!4789 = !DILocation(line: 2964, column: 11, scope: !4786)
!4790 = !DILocation(line: 2965, column: 6, scope: !4786)
!4791 = !DILocation(line: 2965, column: 25, scope: !4786)
!4792 = !DILocation(line: 2966, column: 11, scope: !4786)
!4793 = !DILocation(line: 2965, column: 11, scope: !4786)
!4794 = !DILocation(line: 2963, column: 6, scope: !4784)
!4795 = !DILocation(line: 2968, column: 29, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4786, file: !3, line: 2967, column: 4)
!4797 = !DILocation(line: 2968, column: 6, scope: !4796)
!4798 = !DILocation(line: 2968, column: 23, scope: !4796)
!4799 = !DILocation(line: 2968, column: 27, scope: !4796)
!4800 = !DILocation(line: 2969, column: 22, scope: !4796)
!4801 = !DILocation(line: 2970, column: 8, scope: !4796)
!4802 = !DILocation(line: 2969, column: 6, scope: !4796)
!4803 = !DILocation(line: 2971, column: 4, scope: !4796)
!4804 = !DILocation(line: 2966, column: 35, scope: !4786)
!4805 = distinct !{!4805, !4781, !4806}
!4806 = !DILocation(line: 2971, column: 4, scope: !4782)
!4807 = !DILocation(line: 2972, column: 5, scope: !4775)
!4808 = !DILocation(line: 2958, column: 27, scope: !4770)
!4809 = !DILocation(line: 2958, column: 3, scope: !4770)
!4810 = distinct !{!4810, !4773, !4811}
!4811 = !DILocation(line: 2972, column: 5, scope: !4766)
!4812 = !DILocation(line: 2973, column: 7, scope: !4813)
!4813 = distinct !DILexicalBlock(scope: !4632, file: !3, line: 2973, column: 7)
!4814 = !DILocation(line: 2973, column: 9, scope: !4813)
!4815 = !DILocation(line: 2973, column: 7, scope: !4632)
!4816 = !DILocation(line: 2975, column: 33, scope: !4817)
!4817 = distinct !DILexicalBlock(scope: !4813, file: !3, line: 2974, column: 5)
!4818 = !DILocation(line: 2975, column: 50, scope: !4817)
!4819 = !DILocation(line: 2975, column: 7, scope: !4817)
!4820 = !DILocation(line: 2977, column: 19, scope: !4817)
!4821 = !DILocation(line: 2977, column: 36, scope: !4817)
!4822 = !DILocation(line: 2977, column: 7, scope: !4817)
!4823 = !DILocation(line: 2983, column: 14, scope: !4824)
!4824 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 2983, column: 7)
!4825 = !DILocation(line: 2983, column: 12, scope: !4824)
!4826 = !DILocation(line: 2983, column: 19, scope: !4827)
!4827 = distinct !DILexicalBlock(scope: !4824, file: !3, line: 2983, column: 7)
!4828 = !DILocation(line: 2983, column: 23, scope: !4827)
!4829 = !DILocation(line: 2983, column: 21, scope: !4827)
!4830 = !DILocation(line: 2983, column: 7, scope: !4824)
!4831 = !DILocation(line: 2985, column: 8, scope: !4832)
!4832 = distinct !DILexicalBlock(scope: !4827, file: !3, line: 2984, column: 2)
!4833 = !DILocation(line: 2985, column: 24, scope: !4832)
!4834 = !DILocation(line: 2985, column: 6, scope: !4832)
!4835 = !DILocation(line: 2986, column: 12, scope: !4832)
!4836 = !DILocation(line: 2986, column: 10, scope: !4832)
!4837 = !DILocation(line: 2987, column: 4, scope: !4832)
!4838 = !DILocation(line: 2988, column: 4, scope: !4832)
!4839 = !DILocation(line: 2989, column: 4, scope: !4832)
!4840 = !DILocation(line: 2990, column: 8, scope: !4841)
!4841 = distinct !DILexicalBlock(scope: !4832, file: !3, line: 2990, column: 8)
!4842 = !DILocation(line: 2990, column: 34, scope: !4841)
!4843 = !DILocation(line: 2990, column: 38, scope: !4841)
!4844 = !DILocation(line: 2990, column: 41, scope: !4841)
!4845 = !DILocation(line: 2990, column: 55, scope: !4841)
!4846 = !DILocation(line: 2990, column: 8, scope: !4832)
!4847 = !DILocation(line: 2991, column: 15, scope: !4841)
!4848 = !DILocation(line: 2993, column: 8, scope: !4841)
!4849 = !DILocation(line: 2993, column: 15, scope: !4841)
!4850 = !DILocation(line: 2994, column: 8, scope: !4841)
!4851 = !DILocation(line: 2995, column: 10, scope: !4841)
!4852 = !DILocation(line: 2995, column: 8, scope: !4841)
!4853 = !DILocation(line: 2991, column: 6, scope: !4841)
!4854 = !DILocation(line: 2996, column: 31, scope: !4855)
!4855 = distinct !DILexicalBlock(scope: !4832, file: !3, line: 2996, column: 8)
!4856 = !DILocation(line: 2996, column: 34, scope: !4855)
!4857 = !DILocation(line: 2996, column: 8, scope: !4855)
!4858 = !DILocation(line: 2996, column: 8, scope: !4832)
!4859 = !DILocation(line: 2998, column: 18, scope: !4860)
!4860 = distinct !DILexicalBlock(scope: !4855, file: !3, line: 2997, column: 6)
!4861 = !DILocation(line: 2999, column: 26, scope: !4860)
!4862 = !DILocation(line: 2999, column: 35, scope: !4860)
!4863 = !DILocation(line: 2999, column: 8, scope: !4860)
!4864 = !DILocation(line: 3000, column: 6, scope: !4860)
!4865 = !DILocation(line: 3001, column: 2, scope: !4832)
!4866 = !DILocation(line: 2983, column: 27, scope: !4827)
!4867 = !DILocation(line: 2983, column: 7, scope: !4827)
!4868 = distinct !{!4868, !4830, !4869}
!4869 = !DILocation(line: 3001, column: 2, scope: !4824)
!4870 = !DILocation(line: 3002, column: 5, scope: !4817)
!4871 = !DILocation(line: 3003, column: 10, scope: !4632)
!4872 = !DILocation(line: 3003, column: 3, scope: !4632)
!4873 = !DILocation(line: 3004, column: 1, scope: !4632)
!4874 = distinct !DISubprogram(name: "pseudo_reg_compare", scope: !3, file: !3, line: 2883, type: !1182, scopeLine: 2884, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!4875 = !DILocalVariable(name: "v1p", arg: 1, scope: !4874, file: !3, line: 2883, type: !1177)
!4876 = !DILocation(line: 2883, column: 33, scope: !4874)
!4877 = !DILocalVariable(name: "v2p", arg: 2, scope: !4874, file: !3, line: 2883, type: !1177)
!4878 = !DILocation(line: 2883, column: 50, scope: !4874)
!4879 = !DILocalVariable(name: "regno1", scope: !4874, file: !3, line: 2885, type: !610)
!4880 = !DILocation(line: 2885, column: 7, scope: !4874)
!4881 = !DILocation(line: 2885, column: 31, scope: !4874)
!4882 = !DILocation(line: 2885, column: 17, scope: !4874)
!4883 = !DILocation(line: 2885, column: 16, scope: !4874)
!4884 = !DILocalVariable(name: "regno2", scope: !4874, file: !3, line: 2886, type: !610)
!4885 = !DILocation(line: 2886, column: 7, scope: !4874)
!4886 = !DILocation(line: 2886, column: 31, scope: !4874)
!4887 = !DILocation(line: 2886, column: 17, scope: !4874)
!4888 = !DILocation(line: 2886, column: 16, scope: !4874)
!4889 = !DILocalVariable(name: "diff", scope: !4874, file: !3, line: 2887, type: !610)
!4890 = !DILocation(line: 2887, column: 7, scope: !4874)
!4891 = !DILocation(line: 2889, column: 15, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 2889, column: 7)
!4893 = !DILocation(line: 2889, column: 35, scope: !4892)
!4894 = !DILocation(line: 2889, column: 33, scope: !4892)
!4895 = !DILocation(line: 2889, column: 13, scope: !4892)
!4896 = !DILocation(line: 2889, column: 54, scope: !4892)
!4897 = !DILocation(line: 2889, column: 7, scope: !4874)
!4898 = !DILocation(line: 2890, column: 12, scope: !4892)
!4899 = !DILocation(line: 2890, column: 5, scope: !4892)
!4900 = !DILocation(line: 2891, column: 10, scope: !4874)
!4901 = !DILocation(line: 2891, column: 19, scope: !4874)
!4902 = !DILocation(line: 2891, column: 17, scope: !4874)
!4903 = !DILocation(line: 2891, column: 3, scope: !4874)
!4904 = !DILocation(line: 2892, column: 1, scope: !4874)
!4905 = distinct !DISubprogram(name: "allocno_reload_assign", scope: !3, file: !3, line: 2827, type: !4906, scopeLine: 2828, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!4906 = !DISubroutineType(types: !4907)
!4907 = !{!855, !612, !1794}
!4908 = !DILocalVariable(name: "a", arg: 1, scope: !4905, file: !3, line: 2827, type: !612)
!4909 = !DILocation(line: 2827, column: 38, scope: !4905)
!4910 = !DILocalVariable(name: "forbidden_regs", arg: 2, scope: !4905, file: !3, line: 2827, type: !1794)
!4911 = !DILocation(line: 2827, column: 54, scope: !4905)
!4912 = !DILocalVariable(name: "hard_regno", scope: !4905, file: !3, line: 2829, type: !610)
!4913 = !DILocation(line: 2829, column: 7, scope: !4905)
!4914 = !DILocalVariable(name: "cover_class", scope: !4905, file: !3, line: 2830, type: !390)
!4915 = !DILocation(line: 2830, column: 18, scope: !4905)
!4916 = !DILocalVariable(name: "regno", scope: !4905, file: !3, line: 2831, type: !610)
!4917 = !DILocation(line: 2831, column: 7, scope: !4905)
!4918 = !DILocation(line: 2831, column: 15, scope: !4905)
!4919 = !DILocation(line: 2833, column: 3, scope: !4905)
!4920 = !DILocation(line: 2834, column: 9, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !4905, file: !3, line: 2834, column: 7)
!4922 = !DILocation(line: 2834, column: 27, scope: !4921)
!4923 = !DILocation(line: 2834, column: 30, scope: !4921)
!4924 = !DILocation(line: 2834, column: 60, scope: !4921)
!4925 = !DILocation(line: 2834, column: 7, scope: !4905)
!4926 = !DILocation(line: 2835, column: 5, scope: !4921)
!4927 = !DILocation(line: 2836, column: 3, scope: !4905)
!4928 = !DILocation(line: 2836, column: 26, scope: !4905)
!4929 = !DILocation(line: 2839, column: 17, scope: !4905)
!4930 = !DILocation(line: 2839, column: 15, scope: !4905)
!4931 = !DILocation(line: 2840, column: 22, scope: !4905)
!4932 = !DILocation(line: 2840, column: 3, scope: !4905)
!4933 = !DILocation(line: 2841, column: 20, scope: !4905)
!4934 = !DILocation(line: 2841, column: 3, scope: !4905)
!4935 = !DILocation(line: 2842, column: 16, scope: !4905)
!4936 = !DILocation(line: 2842, column: 14, scope: !4905)
!4937 = !DILocation(line: 2843, column: 25, scope: !4905)
!4938 = !DILocation(line: 2843, column: 3, scope: !4905)
!4939 = !DILocation(line: 2843, column: 16, scope: !4905)
!4940 = !DILocation(line: 2843, column: 23, scope: !4905)
!4941 = !DILocation(line: 2844, column: 7, scope: !4942)
!4942 = distinct !DILexicalBlock(scope: !4905, file: !3, line: 2844, column: 7)
!4943 = !DILocation(line: 2844, column: 18, scope: !4942)
!4944 = !DILocation(line: 2844, column: 7, scope: !4905)
!4945 = !DILocation(line: 2845, column: 5, scope: !4942)
!4946 = !DILocation(line: 2845, column: 28, scope: !4942)
!4947 = !DILocation(line: 2849, column: 28, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4942, file: !3, line: 2847, column: 5)
!4949 = !DILocation(line: 2850, column: 10, scope: !4948)
!4950 = !DILocation(line: 2850, column: 37, scope: !4948)
!4951 = !DILocation(line: 2851, column: 12, scope: !4948)
!4952 = !DILocation(line: 2852, column: 12, scope: !4948)
!4953 = !DILocation(line: 2854, column: 7, scope: !4948)
!4954 = !DILocation(line: 2853, column: 13, scope: !4948)
!4955 = !DILocation(line: 2854, column: 20, scope: !4948)
!4956 = !DILocation(line: 2850, column: 7, scope: !4948)
!4957 = !DILocation(line: 2849, column: 24, scope: !4948)
!4958 = !DILocation(line: 2855, column: 11, scope: !4959)
!4959 = distinct !DILexicalBlock(scope: !4948, file: !3, line: 2855, column: 11)
!4960 = !DILocation(line: 2855, column: 41, scope: !4959)
!4961 = !DILocation(line: 2856, column: 4, scope: !4959)
!4962 = !DILocation(line: 2856, column: 36, scope: !4959)
!4963 = !DILocation(line: 2856, column: 48, scope: !4959)
!4964 = !DILocation(line: 2857, column: 8, scope: !4959)
!4965 = !DILocation(line: 2856, column: 9, scope: !4959)
!4966 = !DILocation(line: 2855, column: 11, scope: !4948)
!4967 = !DILocation(line: 2860, column: 23, scope: !4968)
!4968 = distinct !DILexicalBlock(scope: !4959, file: !3, line: 2858, column: 2)
!4969 = !DILocation(line: 2861, column: 2, scope: !4968)
!4970 = !DILocation(line: 2867, column: 7, scope: !4971)
!4971 = distinct !DILexicalBlock(scope: !4905, file: !3, line: 2867, column: 7)
!4972 = !DILocation(line: 2867, column: 20, scope: !4971)
!4973 = !DILocation(line: 2867, column: 27, scope: !4971)
!4974 = !DILocation(line: 2867, column: 7, scope: !4905)
!4975 = !DILocation(line: 2869, column: 11, scope: !4976)
!4976 = distinct !DILexicalBlock(scope: !4977, file: !3, line: 2869, column: 11)
!4977 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 2868, column: 5)
!4978 = !DILocation(line: 2869, column: 37, scope: !4976)
!4979 = !DILocation(line: 2869, column: 41, scope: !4976)
!4980 = !DILocation(line: 2869, column: 44, scope: !4976)
!4981 = !DILocation(line: 2869, column: 58, scope: !4976)
!4982 = !DILocation(line: 2869, column: 11, scope: !4977)
!4983 = !DILocation(line: 2870, column: 11, scope: !4976)
!4984 = !DILocation(line: 2870, column: 48, scope: !4976)
!4985 = !DILocation(line: 2870, column: 61, scope: !4976)
!4986 = !DILocation(line: 2870, column: 2, scope: !4976)
!4987 = !DILocation(line: 2871, column: 7, scope: !4977)
!4988 = !DILocation(line: 2872, column: 23, scope: !4977)
!4989 = !DILocation(line: 2872, column: 7, scope: !4977)
!4990 = !DILocation(line: 2873, column: 5, scope: !4977)
!4991 = !DILocation(line: 2874, column: 12, scope: !4992)
!4992 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 2874, column: 12)
!4993 = !DILocation(line: 2874, column: 38, scope: !4992)
!4994 = !DILocation(line: 2874, column: 42, scope: !4992)
!4995 = !DILocation(line: 2874, column: 45, scope: !4992)
!4996 = !DILocation(line: 2874, column: 59, scope: !4992)
!4997 = !DILocation(line: 2874, column: 12, scope: !4971)
!4998 = !DILocation(line: 2875, column: 14, scope: !4992)
!4999 = !DILocation(line: 2875, column: 5, scope: !4992)
!5000 = !DILocation(line: 2877, column: 10, scope: !4905)
!5001 = !DILocation(line: 2877, column: 23, scope: !4905)
!5002 = !DILocation(line: 2877, column: 30, scope: !4905)
!5003 = !DILocation(line: 2877, column: 3, scope: !4905)
!5004 = distinct !DISubprogram(name: "ira_reuse_stack_slot", scope: !3, file: !3, line: 3011, type: !5005, scopeLine: 3013, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5005 = !DISubroutineType(types: !5006)
!5006 = !{!622, !610, !7, !7}
!5007 = !DILocalVariable(name: "regno", arg: 1, scope: !5004, file: !3, line: 3011, type: !610)
!5008 = !DILocation(line: 3011, column: 27, scope: !5004)
!5009 = !DILocalVariable(name: "inherent_size", arg: 2, scope: !5004, file: !3, line: 3011, type: !7)
!5010 = !DILocation(line: 3011, column: 47, scope: !5004)
!5011 = !DILocalVariable(name: "total_size", arg: 3, scope: !5004, file: !3, line: 3012, type: !7)
!5012 = !DILocation(line: 3012, column: 22, scope: !5004)
!5013 = !DILocalVariable(name: "i", scope: !5004, file: !3, line: 3014, type: !7)
!5014 = !DILocation(line: 3014, column: 16, scope: !5004)
!5015 = !DILocalVariable(name: "slot_num", scope: !5004, file: !3, line: 3015, type: !610)
!5016 = !DILocation(line: 3015, column: 7, scope: !5004)
!5017 = !DILocalVariable(name: "best_slot_num", scope: !5004, file: !3, line: 3015, type: !610)
!5018 = !DILocation(line: 3015, column: 17, scope: !5004)
!5019 = !DILocalVariable(name: "cost", scope: !5004, file: !3, line: 3016, type: !610)
!5020 = !DILocation(line: 3016, column: 7, scope: !5004)
!5021 = !DILocalVariable(name: "best_cost", scope: !5004, file: !3, line: 3016, type: !610)
!5022 = !DILocation(line: 3016, column: 13, scope: !5004)
!5023 = !DILocalVariable(name: "cp", scope: !5004, file: !3, line: 3017, type: !1758)
!5024 = !DILocation(line: 3017, column: 14, scope: !5004)
!5025 = !DILocalVariable(name: "next_cp", scope: !5004, file: !3, line: 3017, type: !1758)
!5026 = !DILocation(line: 3017, column: 18, scope: !5004)
!5027 = !DILocalVariable(name: "another_allocno", scope: !5004, file: !3, line: 3018, type: !612)
!5028 = !DILocation(line: 3018, column: 17, scope: !5004)
!5029 = !DILocalVariable(name: "allocno", scope: !5004, file: !3, line: 3018, type: !612)
!5030 = !DILocation(line: 3018, column: 34, scope: !5004)
!5031 = !DILocation(line: 3018, column: 44, scope: !5004)
!5032 = !DILocation(line: 3018, column: 66, scope: !5004)
!5033 = !DILocalVariable(name: "x", scope: !5004, file: !3, line: 3019, type: !622)
!5034 = !DILocation(line: 3019, column: 7, scope: !5004)
!5035 = !DILocalVariable(name: "bi", scope: !5004, file: !3, line: 3020, type: !3652)
!5036 = !DILocation(line: 3020, column: 19, scope: !5004)
!5037 = !DILocalVariable(name: "slot", scope: !5004, file: !3, line: 3021, type: !5038)
!5038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5039, size: 64)
!5039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ira_spilled_reg_stack_slot", file: !613, line: 542, size: 384, elements: !5040)
!5040 = !{!5041, !5044, !5045}
!5041 = !DIDerivedType(tag: DW_TAG_member, name: "spilled_regs", scope: !5039, file: !613, line: 545, baseType: !5042, size: 256)
!5042 = !DIDerivedType(tag: DW_TAG_typedef, name: "regset_head", file: !135, line: 34, baseType: !5043)
!5043 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_head", file: !681, line: 84, baseType: !680)
!5044 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !5039, file: !613, line: 547, baseType: !622, size: 64, offset: 256)
!5045 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !5039, file: !613, line: 549, baseType: !7, size: 32, offset: 320)
!5046 = !DILocation(line: 3021, column: 38, scope: !5004)
!5047 = !DILocation(line: 3026, column: 9, scope: !5048)
!5048 = distinct !DILexicalBlock(scope: !5004, file: !3, line: 3026, column: 7)
!5049 = !DILocation(line: 3026, column: 7, scope: !5004)
!5050 = !DILocation(line: 3027, column: 5, scope: !5048)
!5051 = !DILocation(line: 3028, column: 15, scope: !5004)
!5052 = !DILocation(line: 3028, column: 14, scope: !5004)
!5053 = !DILocation(line: 3028, column: 44, scope: !5004)
!5054 = !DILocation(line: 3028, column: 12, scope: !5004)
!5055 = !DILocation(line: 3029, column: 7, scope: !5056)
!5056 = distinct !DILexicalBlock(scope: !5004, file: !3, line: 3029, column: 7)
!5057 = !DILocation(line: 3029, column: 16, scope: !5056)
!5058 = !DILocation(line: 3029, column: 7, scope: !5004)
!5059 = !DILocation(line: 3031, column: 15, scope: !5060)
!5060 = distinct !DILexicalBlock(scope: !5056, file: !3, line: 3030, column: 5)
!5061 = !DILocation(line: 3031, column: 43, scope: !5060)
!5062 = !DILocation(line: 3031, column: 12, scope: !5060)
!5063 = !DILocation(line: 3032, column: 11, scope: !5060)
!5064 = !DILocation(line: 3032, column: 17, scope: !5060)
!5065 = !DILocation(line: 3032, column: 9, scope: !5060)
!5066 = !DILocation(line: 3033, column: 5, scope: !5060)
!5067 = !DILocation(line: 3036, column: 33, scope: !5068)
!5068 = distinct !DILexicalBlock(scope: !5056, file: !3, line: 3035, column: 5)
!5069 = !DILocation(line: 3036, column: 17, scope: !5068)
!5070 = !DILocation(line: 3037, column: 9, scope: !5068)
!5071 = !DILocation(line: 3040, column: 21, scope: !5072)
!5072 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 3040, column: 7)
!5073 = !DILocation(line: 3040, column: 12, scope: !5072)
!5074 = !DILocation(line: 3041, column: 5, scope: !5075)
!5075 = distinct !DILexicalBlock(scope: !5072, file: !3, line: 3040, column: 7)
!5076 = !DILocation(line: 3041, column: 16, scope: !5075)
!5077 = !DILocation(line: 3041, column: 14, scope: !5075)
!5078 = !DILocation(line: 3040, column: 7, scope: !5072)
!5079 = !DILocation(line: 3044, column: 12, scope: !5080)
!5080 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 3043, column: 2)
!5081 = !DILocation(line: 3044, column: 40, scope: !5080)
!5082 = !DILocation(line: 3044, column: 9, scope: !5080)
!5083 = !DILocation(line: 3045, column: 8, scope: !5084)
!5084 = distinct !DILexicalBlock(scope: !5080, file: !3, line: 3045, column: 8)
!5085 = !DILocation(line: 3045, column: 14, scope: !5084)
!5086 = !DILocation(line: 3045, column: 18, scope: !5084)
!5087 = !DILocation(line: 3045, column: 8, scope: !5080)
!5088 = !DILocation(line: 3046, column: 6, scope: !5084)
!5089 = !DILocation(line: 3047, column: 8, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !5080, file: !3, line: 3047, column: 8)
!5091 = !DILocation(line: 3047, column: 14, scope: !5090)
!5092 = !DILocation(line: 3047, column: 22, scope: !5090)
!5093 = !DILocation(line: 3047, column: 20, scope: !5090)
!5094 = !DILocation(line: 3048, column: 8, scope: !5090)
!5095 = !DILocation(line: 3048, column: 11, scope: !5090)
!5096 = !DILocation(line: 3048, column: 50, scope: !5090)
!5097 = !DILocation(line: 3048, column: 48, scope: !5090)
!5098 = !DILocation(line: 3047, column: 8, scope: !5080)
!5099 = !DILocation(line: 3049, column: 6, scope: !5090)
!5100 = !DILocation(line: 3051, column: 4, scope: !5101)
!5101 = distinct !DILexicalBlock(scope: !5080, file: !3, line: 3051, column: 4)
!5102 = !DILocation(line: 3051, column: 4, scope: !5103)
!5103 = distinct !DILexicalBlock(scope: !5101, file: !3, line: 3051, column: 4)
!5104 = !DILocation(line: 3054, column: 26, scope: !5105)
!5105 = distinct !DILexicalBlock(scope: !5103, file: !3, line: 3053, column: 6)
!5106 = !DILocation(line: 3054, column: 48, scope: !5105)
!5107 = !DILocation(line: 3054, column: 24, scope: !5105)
!5108 = !DILocation(line: 3055, column: 53, scope: !5109)
!5109 = distinct !DILexicalBlock(scope: !5105, file: !3, line: 3055, column: 12)
!5110 = !DILocation(line: 3056, column: 11, scope: !5109)
!5111 = !DILocation(line: 3055, column: 12, scope: !5109)
!5112 = !DILocation(line: 3055, column: 12, scope: !5105)
!5113 = !DILocation(line: 3057, column: 3, scope: !5109)
!5114 = !DILocation(line: 3058, column: 6, scope: !5105)
!5115 = distinct !{!5115, !5100, !5116}
!5116 = !DILocation(line: 3058, column: 6, scope: !5101)
!5117 = !DILocation(line: 3059, column: 14, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5080, file: !3, line: 3059, column: 4)
!5119 = !DILocation(line: 3059, column: 24, scope: !5118)
!5120 = !DILocation(line: 3059, column: 22, scope: !5118)
!5121 = !DILocation(line: 3059, column: 9, scope: !5118)
!5122 = !DILocation(line: 3060, column: 9, scope: !5123)
!5123 = distinct !DILexicalBlock(scope: !5118, file: !3, line: 3059, column: 4)
!5124 = !DILocation(line: 3060, column: 12, scope: !5123)
!5125 = !DILocation(line: 3059, column: 4, scope: !5118)
!5126 = !DILocation(line: 3063, column: 12, scope: !5127)
!5127 = distinct !DILexicalBlock(scope: !5128, file: !3, line: 3063, column: 12)
!5128 = distinct !DILexicalBlock(scope: !5123, file: !3, line: 3062, column: 6)
!5129 = !DILocation(line: 3063, column: 16, scope: !5127)
!5130 = !DILocation(line: 3063, column: 25, scope: !5127)
!5131 = !DILocation(line: 3063, column: 22, scope: !5127)
!5132 = !DILocation(line: 3063, column: 12, scope: !5128)
!5133 = !DILocation(line: 3065, column: 15, scope: !5134)
!5134 = distinct !DILexicalBlock(scope: !5127, file: !3, line: 3064, column: 3)
!5135 = !DILocation(line: 3065, column: 19, scope: !5134)
!5136 = !DILocation(line: 3065, column: 13, scope: !5134)
!5137 = !DILocation(line: 3066, column: 23, scope: !5134)
!5138 = !DILocation(line: 3066, column: 27, scope: !5134)
!5139 = !DILocation(line: 3066, column: 21, scope: !5134)
!5140 = !DILocation(line: 3067, column: 3, scope: !5134)
!5141 = !DILocation(line: 3068, column: 17, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5127, file: !3, line: 3068, column: 17)
!5143 = !DILocation(line: 3068, column: 21, scope: !5142)
!5144 = !DILocation(line: 3068, column: 31, scope: !5142)
!5145 = !DILocation(line: 3068, column: 28, scope: !5142)
!5146 = !DILocation(line: 3068, column: 17, scope: !5127)
!5147 = !DILocation(line: 3070, column: 15, scope: !5148)
!5148 = distinct !DILexicalBlock(scope: !5142, file: !3, line: 3069, column: 3)
!5149 = !DILocation(line: 3070, column: 19, scope: !5148)
!5150 = !DILocation(line: 3070, column: 13, scope: !5148)
!5151 = !DILocation(line: 3071, column: 23, scope: !5148)
!5152 = !DILocation(line: 3071, column: 27, scope: !5148)
!5153 = !DILocation(line: 3071, column: 21, scope: !5148)
!5154 = !DILocation(line: 3072, column: 3, scope: !5148)
!5155 = !DILocation(line: 3074, column: 3, scope: !5142)
!5156 = !DILocation(line: 3075, column: 12, scope: !5157)
!5157 = distinct !DILexicalBlock(scope: !5128, file: !3, line: 3075, column: 12)
!5158 = !DILocation(line: 3075, column: 16, scope: !5157)
!5159 = !DILocation(line: 3075, column: 21, scope: !5157)
!5160 = !DILocation(line: 3075, column: 12, scope: !5128)
!5161 = !DILocation(line: 3076, column: 3, scope: !5157)
!5162 = !DILocation(line: 3077, column: 27, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5128, file: !3, line: 3077, column: 12)
!5164 = !DILocation(line: 3077, column: 33, scope: !5163)
!5165 = !DILocation(line: 3078, column: 5, scope: !5163)
!5166 = !DILocation(line: 3077, column: 12, scope: !5163)
!5167 = !DILocation(line: 3077, column: 12, scope: !5128)
!5168 = !DILocation(line: 3079, column: 11, scope: !5163)
!5169 = !DILocation(line: 3079, column: 15, scope: !5163)
!5170 = !DILocation(line: 3079, column: 8, scope: !5163)
!5171 = !DILocation(line: 3079, column: 3, scope: !5163)
!5172 = !DILocation(line: 3080, column: 6, scope: !5128)
!5173 = !DILocation(line: 3061, column: 14, scope: !5123)
!5174 = !DILocation(line: 3061, column: 12, scope: !5123)
!5175 = !DILocation(line: 3059, column: 4, scope: !5123)
!5176 = distinct !{!5176, !5125, !5177}
!5177 = !DILocation(line: 3080, column: 6, scope: !5118)
!5178 = !DILocation(line: 3081, column: 8, scope: !5179)
!5179 = distinct !DILexicalBlock(scope: !5080, file: !3, line: 3081, column: 8)
!5180 = !DILocation(line: 3081, column: 15, scope: !5179)
!5181 = !DILocation(line: 3081, column: 13, scope: !5179)
!5182 = !DILocation(line: 3081, column: 8, scope: !5080)
!5183 = !DILocation(line: 3083, column: 20, scope: !5184)
!5184 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 3082, column: 6)
!5185 = !DILocation(line: 3083, column: 18, scope: !5184)
!5186 = !DILocation(line: 3084, column: 24, scope: !5184)
!5187 = !DILocation(line: 3084, column: 22, scope: !5184)
!5188 = !DILocation(line: 3085, column: 6, scope: !5184)
!5189 = !DILabel(scope: !5080, name: "cont", file: !3, line: 3086)
!5190 = !DILocation(line: 3086, column: 2, scope: !5080)
!5191 = !DILocation(line: 3088, column: 2, scope: !5080)
!5192 = !DILocation(line: 3042, column: 13, scope: !5075)
!5193 = !DILocation(line: 3040, column: 7, scope: !5075)
!5194 = distinct !{!5194, !5078, !5195}
!5195 = !DILocation(line: 3088, column: 2, scope: !5072)
!5196 = !DILocation(line: 3089, column: 11, scope: !5197)
!5197 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 3089, column: 11)
!5198 = !DILocation(line: 3089, column: 21, scope: !5197)
!5199 = !DILocation(line: 3089, column: 11, scope: !5068)
!5200 = !DILocation(line: 3091, column: 15, scope: !5201)
!5201 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 3090, column: 2)
!5202 = !DILocation(line: 3091, column: 13, scope: !5201)
!5203 = !DILocation(line: 3092, column: 12, scope: !5201)
!5204 = !DILocation(line: 3092, column: 40, scope: !5201)
!5205 = !DILocation(line: 3092, column: 9, scope: !5201)
!5206 = !DILocation(line: 3093, column: 4, scope: !5201)
!5207 = !DILocation(line: 3094, column: 8, scope: !5201)
!5208 = !DILocation(line: 3094, column: 14, scope: !5201)
!5209 = !DILocation(line: 3094, column: 6, scope: !5201)
!5210 = !DILocation(line: 3095, column: 36, scope: !5201)
!5211 = !DILocation(line: 3095, column: 35, scope: !5201)
!5212 = !DILocation(line: 3095, column: 45, scope: !5201)
!5213 = !DILocation(line: 3095, column: 4, scope: !5201)
!5214 = !DILocation(line: 3095, column: 33, scope: !5201)
!5215 = !DILocation(line: 3096, column: 2, scope: !5201)
!5216 = !DILocation(line: 3098, column: 7, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5004, file: !3, line: 3098, column: 7)
!5218 = !DILocation(line: 3098, column: 9, scope: !5217)
!5219 = !DILocation(line: 3098, column: 7, scope: !5004)
!5220 = !DILocation(line: 3108, column: 7, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5217, file: !3, line: 3099, column: 5)
!5222 = !DILocation(line: 3109, column: 11, scope: !5223)
!5223 = distinct !DILexicalBlock(scope: !5221, file: !3, line: 3109, column: 11)
!5224 = !DILocation(line: 3109, column: 37, scope: !5223)
!5225 = !DILocation(line: 3109, column: 41, scope: !5223)
!5226 = !DILocation(line: 3109, column: 44, scope: !5223)
!5227 = !DILocation(line: 3109, column: 11, scope: !5221)
!5228 = !DILocation(line: 3111, column: 13, scope: !5229)
!5229 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 3110, column: 2)
!5230 = !DILocation(line: 3112, column: 6, scope: !5229)
!5231 = !DILocation(line: 3112, column: 13, scope: !5229)
!5232 = !DILocation(line: 3112, column: 31, scope: !5229)
!5233 = !DILocation(line: 3111, column: 4, scope: !5229)
!5234 = !DILocation(line: 3113, column: 4, scope: !5235)
!5235 = distinct !DILexicalBlock(scope: !5229, file: !3, line: 3113, column: 4)
!5236 = !DILocation(line: 3113, column: 4, scope: !5237)
!5237 = distinct !DILexicalBlock(scope: !5235, file: !3, line: 3113, column: 4)
!5238 = !DILocation(line: 3116, column: 23, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5240, file: !3, line: 3116, column: 12)
!5240 = distinct !DILexicalBlock(scope: !5237, file: !3, line: 3115, column: 6)
!5241 = !DILocation(line: 3116, column: 32, scope: !5239)
!5242 = !DILocation(line: 3116, column: 29, scope: !5239)
!5243 = !DILocation(line: 3116, column: 12, scope: !5240)
!5244 = !DILocation(line: 3117, column: 12, scope: !5239)
!5245 = !DILocation(line: 3117, column: 34, scope: !5239)
!5246 = !DILocation(line: 3117, column: 3, scope: !5239)
!5247 = !DILocation(line: 3118, column: 6, scope: !5240)
!5248 = distinct !{!5248, !5234, !5249}
!5249 = !DILocation(line: 3118, column: 6, scope: !5235)
!5250 = !DILocation(line: 3119, column: 13, scope: !5229)
!5251 = !DILocation(line: 3119, column: 4, scope: !5229)
!5252 = !DILocation(line: 3120, column: 2, scope: !5229)
!5253 = !DILocation(line: 3121, column: 5, scope: !5221)
!5254 = !DILocation(line: 3122, column: 10, scope: !5004)
!5255 = !DILocation(line: 3122, column: 3, scope: !5004)
!5256 = !DILocation(line: 3123, column: 1, scope: !5004)
!5257 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !681, file: !681, line: 224, type: !5258, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5258 = !DISubroutineType(types: !5259)
!5259 = !{null, !5260, !5261, !7, !1880}
!5260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3652, size: 64)
!5261 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !623, line: 48, baseType: !5262)
!5262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5263, size: 64)
!5263 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !680)
!5264 = !DILocalVariable(name: "bi", arg: 1, scope: !5257, file: !681, line: 224, type: !5260)
!5265 = !DILocation(line: 224, column: 37, scope: !5257)
!5266 = !DILocalVariable(name: "map", arg: 2, scope: !5257, file: !681, line: 224, type: !5261)
!5267 = !DILocation(line: 224, column: 54, scope: !5257)
!5268 = !DILocalVariable(name: "start_bit", arg: 3, scope: !5257, file: !681, line: 225, type: !7)
!5269 = !DILocation(line: 225, column: 15, scope: !5257)
!5270 = !DILocalVariable(name: "bit_no", arg: 4, scope: !5257, file: !681, line: 225, type: !1880)
!5271 = !DILocation(line: 225, column: 36, scope: !5257)
!5272 = !DILocation(line: 227, column: 14, scope: !5257)
!5273 = !DILocation(line: 227, column: 19, scope: !5257)
!5274 = !DILocation(line: 227, column: 3, scope: !5257)
!5275 = !DILocation(line: 227, column: 7, scope: !5257)
!5276 = !DILocation(line: 227, column: 12, scope: !5257)
!5277 = !DILocation(line: 228, column: 3, scope: !5257)
!5278 = !DILocation(line: 228, column: 7, scope: !5257)
!5279 = !DILocation(line: 228, column: 12, scope: !5257)
!5280 = !DILocation(line: 231, column: 3, scope: !5257)
!5281 = !DILocation(line: 233, column: 12, scope: !5282)
!5282 = distinct !DILexicalBlock(scope: !5283, file: !681, line: 233, column: 11)
!5283 = distinct !DILexicalBlock(scope: !5257, file: !681, line: 232, column: 5)
!5284 = !DILocation(line: 233, column: 16, scope: !5282)
!5285 = !DILocation(line: 233, column: 11, scope: !5283)
!5286 = !DILocation(line: 235, column: 4, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !5282, file: !681, line: 234, column: 2)
!5288 = !DILocation(line: 235, column: 8, scope: !5287)
!5289 = !DILocation(line: 235, column: 13, scope: !5287)
!5290 = !DILocation(line: 236, column: 4, scope: !5287)
!5291 = !DILocation(line: 239, column: 11, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5283, file: !681, line: 239, column: 11)
!5293 = !DILocation(line: 239, column: 15, scope: !5292)
!5294 = !DILocation(line: 239, column: 21, scope: !5292)
!5295 = !DILocation(line: 239, column: 29, scope: !5292)
!5296 = !DILocation(line: 239, column: 39, scope: !5292)
!5297 = !DILocation(line: 239, column: 26, scope: !5292)
!5298 = !DILocation(line: 239, column: 11, scope: !5283)
!5299 = !DILocation(line: 240, column: 2, scope: !5292)
!5300 = !DILocation(line: 241, column: 18, scope: !5283)
!5301 = !DILocation(line: 241, column: 22, scope: !5283)
!5302 = !DILocation(line: 241, column: 28, scope: !5283)
!5303 = !DILocation(line: 241, column: 7, scope: !5283)
!5304 = !DILocation(line: 241, column: 11, scope: !5283)
!5305 = !DILocation(line: 241, column: 16, scope: !5283)
!5306 = distinct !{!5306, !5280, !5307}
!5307 = !DILocation(line: 242, column: 5, scope: !5257)
!5308 = !DILocation(line: 245, column: 7, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !5257, file: !681, line: 245, column: 7)
!5310 = !DILocation(line: 245, column: 11, scope: !5309)
!5311 = !DILocation(line: 245, column: 17, scope: !5309)
!5312 = !DILocation(line: 245, column: 25, scope: !5309)
!5313 = !DILocation(line: 245, column: 35, scope: !5309)
!5314 = !DILocation(line: 245, column: 22, scope: !5309)
!5315 = !DILocation(line: 245, column: 7, scope: !5257)
!5316 = !DILocation(line: 246, column: 17, scope: !5309)
!5317 = !DILocation(line: 246, column: 21, scope: !5309)
!5318 = !DILocation(line: 246, column: 27, scope: !5309)
!5319 = !DILocation(line: 246, column: 32, scope: !5309)
!5320 = !DILocation(line: 246, column: 15, scope: !5309)
!5321 = !DILocation(line: 246, column: 5, scope: !5309)
!5322 = !DILocation(line: 249, column: 17, scope: !5257)
!5323 = !DILocation(line: 249, column: 27, scope: !5257)
!5324 = !DILocation(line: 249, column: 46, scope: !5257)
!5325 = !DILocation(line: 249, column: 3, scope: !5257)
!5326 = !DILocation(line: 249, column: 7, scope: !5257)
!5327 = !DILocation(line: 249, column: 15, scope: !5257)
!5328 = !DILocation(line: 250, column: 14, scope: !5257)
!5329 = !DILocation(line: 250, column: 18, scope: !5257)
!5330 = !DILocation(line: 250, column: 24, scope: !5257)
!5331 = !DILocation(line: 250, column: 29, scope: !5257)
!5332 = !DILocation(line: 250, column: 33, scope: !5257)
!5333 = !DILocation(line: 250, column: 3, scope: !5257)
!5334 = !DILocation(line: 250, column: 7, scope: !5257)
!5335 = !DILocation(line: 250, column: 12, scope: !5257)
!5336 = !DILocation(line: 251, column: 16, scope: !5257)
!5337 = !DILocation(line: 251, column: 26, scope: !5257)
!5338 = !DILocation(line: 251, column: 3, scope: !5257)
!5339 = !DILocation(line: 251, column: 7, scope: !5257)
!5340 = !DILocation(line: 251, column: 12, scope: !5257)
!5341 = !DILocation(line: 257, column: 17, scope: !5257)
!5342 = !DILocation(line: 257, column: 21, scope: !5257)
!5343 = !DILocation(line: 257, column: 16, scope: !5257)
!5344 = !DILocation(line: 257, column: 13, scope: !5257)
!5345 = !DILocation(line: 259, column: 13, scope: !5257)
!5346 = !DILocation(line: 259, column: 4, scope: !5257)
!5347 = !DILocation(line: 259, column: 11, scope: !5257)
!5348 = !DILocation(line: 260, column: 1, scope: !5257)
!5349 = distinct !DISubprogram(name: "bmp_iter_set", scope: !681, file: !681, line: 393, type: !5350, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5350 = !DISubroutineType(types: !5351)
!5351 = !{!855, !5260, !1880}
!5352 = !DILocalVariable(name: "bi", arg: 1, scope: !5349, file: !681, line: 393, type: !5260)
!5353 = !DILocation(line: 393, column: 32, scope: !5349)
!5354 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5349, file: !681, line: 393, type: !1880)
!5355 = !DILocation(line: 393, column: 46, scope: !5349)
!5356 = !DILocation(line: 396, column: 7, scope: !5357)
!5357 = distinct !DILexicalBlock(scope: !5349, file: !681, line: 396, column: 7)
!5358 = !DILocation(line: 396, column: 11, scope: !5357)
!5359 = !DILocation(line: 396, column: 7, scope: !5349)
!5360 = !DILocation(line: 397, column: 5, scope: !5357)
!5361 = !DILabel(scope: !5362, name: "next_bit", file: !681, line: 398)
!5362 = distinct !DILexicalBlock(scope: !5357, file: !681, line: 397, column: 5)
!5363 = !DILocation(line: 398, column: 5, scope: !5362)
!5364 = !DILocation(line: 399, column: 7, scope: !5362)
!5365 = !DILocation(line: 399, column: 16, scope: !5362)
!5366 = !DILocation(line: 399, column: 20, scope: !5362)
!5367 = !DILocation(line: 399, column: 25, scope: !5362)
!5368 = !DILocation(line: 399, column: 14, scope: !5362)
!5369 = !DILocation(line: 401, column: 4, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5362, file: !681, line: 400, column: 2)
!5371 = !DILocation(line: 401, column: 8, scope: !5370)
!5372 = !DILocation(line: 401, column: 13, scope: !5370)
!5373 = !DILocation(line: 402, column: 5, scope: !5370)
!5374 = !DILocation(line: 402, column: 12, scope: !5370)
!5375 = distinct !{!5375, !5364, !5376}
!5376 = !DILocation(line: 403, column: 2, scope: !5362)
!5377 = !DILocation(line: 404, column: 7, scope: !5362)
!5378 = !DILocation(line: 410, column: 16, scope: !5349)
!5379 = !DILocation(line: 410, column: 15, scope: !5349)
!5380 = !DILocation(line: 410, column: 23, scope: !5349)
!5381 = !DILocation(line: 410, column: 42, scope: !5349)
!5382 = !DILocation(line: 411, column: 7, scope: !5349)
!5383 = !DILocation(line: 411, column: 26, scope: !5349)
!5384 = !DILocation(line: 410, column: 4, scope: !5349)
!5385 = !DILocation(line: 410, column: 11, scope: !5349)
!5386 = !DILocation(line: 412, column: 3, scope: !5349)
!5387 = !DILocation(line: 412, column: 7, scope: !5349)
!5388 = !DILocation(line: 412, column: 14, scope: !5349)
!5389 = !DILocation(line: 414, column: 3, scope: !5349)
!5390 = !DILocation(line: 417, column: 7, scope: !5391)
!5391 = distinct !DILexicalBlock(scope: !5349, file: !681, line: 415, column: 5)
!5392 = !DILocation(line: 417, column: 14, scope: !5391)
!5393 = !DILocation(line: 417, column: 18, scope: !5391)
!5394 = !DILocation(line: 417, column: 26, scope: !5391)
!5395 = !DILocation(line: 419, column: 15, scope: !5396)
!5396 = distinct !DILexicalBlock(scope: !5391, file: !681, line: 418, column: 2)
!5397 = !DILocation(line: 419, column: 19, scope: !5396)
!5398 = !DILocation(line: 419, column: 25, scope: !5396)
!5399 = !DILocation(line: 419, column: 30, scope: !5396)
!5400 = !DILocation(line: 419, column: 34, scope: !5396)
!5401 = !DILocation(line: 419, column: 4, scope: !5396)
!5402 = !DILocation(line: 419, column: 8, scope: !5396)
!5403 = !DILocation(line: 419, column: 13, scope: !5396)
!5404 = !DILocation(line: 420, column: 8, scope: !5405)
!5405 = distinct !DILexicalBlock(scope: !5396, file: !681, line: 420, column: 8)
!5406 = !DILocation(line: 420, column: 12, scope: !5405)
!5407 = !DILocation(line: 420, column: 8, scope: !5396)
!5408 = !DILocation(line: 421, column: 6, scope: !5405)
!5409 = !DILocation(line: 422, column: 5, scope: !5396)
!5410 = !DILocation(line: 422, column: 12, scope: !5396)
!5411 = !DILocation(line: 423, column: 4, scope: !5396)
!5412 = !DILocation(line: 423, column: 8, scope: !5396)
!5413 = !DILocation(line: 423, column: 15, scope: !5396)
!5414 = distinct !{!5414, !5390, !5415}
!5415 = !DILocation(line: 424, column: 2, scope: !5391)
!5416 = !DILocation(line: 427, column: 18, scope: !5391)
!5417 = !DILocation(line: 427, column: 22, scope: !5391)
!5418 = !DILocation(line: 427, column: 28, scope: !5391)
!5419 = !DILocation(line: 427, column: 7, scope: !5391)
!5420 = !DILocation(line: 427, column: 11, scope: !5391)
!5421 = !DILocation(line: 427, column: 16, scope: !5391)
!5422 = !DILocation(line: 428, column: 12, scope: !5423)
!5423 = distinct !DILexicalBlock(scope: !5391, file: !681, line: 428, column: 11)
!5424 = !DILocation(line: 428, column: 16, scope: !5423)
!5425 = !DILocation(line: 428, column: 11, scope: !5391)
!5426 = !DILocation(line: 429, column: 2, scope: !5423)
!5427 = !DILocation(line: 430, column: 17, scope: !5391)
!5428 = !DILocation(line: 430, column: 21, scope: !5391)
!5429 = !DILocation(line: 430, column: 27, scope: !5391)
!5430 = !DILocation(line: 430, column: 32, scope: !5391)
!5431 = !DILocation(line: 430, column: 8, scope: !5391)
!5432 = !DILocation(line: 430, column: 15, scope: !5391)
!5433 = !DILocation(line: 431, column: 7, scope: !5391)
!5434 = !DILocation(line: 431, column: 11, scope: !5391)
!5435 = !DILocation(line: 431, column: 19, scope: !5391)
!5436 = distinct !{!5436, !5389, !5437}
!5437 = !DILocation(line: 432, column: 5, scope: !5349)
!5438 = !DILocation(line: 433, column: 1, scope: !5349)
!5439 = distinct !DISubprogram(name: "allocnos_have_intersected_live_ranges_p", scope: !3, file: !3, line: 94, type: !5440, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5440 = !DISubroutineType(types: !5441)
!5441 = !{!855, !612, !612}
!5442 = !DILocalVariable(name: "a1", arg: 1, scope: !5439, file: !3, line: 94, type: !612)
!5443 = !DILocation(line: 94, column: 56, scope: !5439)
!5444 = !DILocalVariable(name: "a2", arg: 2, scope: !5439, file: !3, line: 94, type: !612)
!5445 = !DILocation(line: 94, column: 74, scope: !5439)
!5446 = !DILocation(line: 96, column: 7, scope: !5447)
!5447 = distinct !DILexicalBlock(scope: !5439, file: !3, line: 96, column: 7)
!5448 = !DILocation(line: 96, column: 13, scope: !5447)
!5449 = !DILocation(line: 96, column: 10, scope: !5447)
!5450 = !DILocation(line: 96, column: 7, scope: !5439)
!5451 = !DILocation(line: 97, column: 5, scope: !5447)
!5452 = !DILocation(line: 98, column: 7, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !5439, file: !3, line: 98, column: 7)
!5454 = !DILocation(line: 98, column: 24, scope: !5453)
!5455 = !DILocation(line: 98, column: 32, scope: !5453)
!5456 = !DILocation(line: 98, column: 35, scope: !5453)
!5457 = !DILocation(line: 98, column: 52, scope: !5453)
!5458 = !DILocation(line: 99, column: 7, scope: !5453)
!5459 = !DILocation(line: 99, column: 11, scope: !5453)
!5460 = !DILocation(line: 100, column: 7, scope: !5453)
!5461 = !DILocation(line: 100, column: 4, scope: !5453)
!5462 = !DILocation(line: 98, column: 7, scope: !5439)
!5463 = !DILocation(line: 101, column: 5, scope: !5453)
!5464 = !DILocation(line: 102, column: 47, scope: !5439)
!5465 = !DILocation(line: 103, column: 12, scope: !5439)
!5466 = !DILocation(line: 102, column: 10, scope: !5439)
!5467 = !DILocation(line: 102, column: 3, scope: !5439)
!5468 = !DILocation(line: 104, column: 1, scope: !5439)
!5469 = distinct !DISubprogram(name: "bmp_iter_next", scope: !681, file: !681, line: 382, type: !5470, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5470 = !DISubroutineType(types: !5471)
!5471 = !{null, !5260, !1880}
!5472 = !DILocalVariable(name: "bi", arg: 1, scope: !5469, file: !681, line: 382, type: !5260)
!5473 = !DILocation(line: 382, column: 33, scope: !5469)
!5474 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5469, file: !681, line: 382, type: !1880)
!5475 = !DILocation(line: 382, column: 47, scope: !5469)
!5476 = !DILocation(line: 384, column: 3, scope: !5469)
!5477 = !DILocation(line: 384, column: 7, scope: !5469)
!5478 = !DILocation(line: 384, column: 12, scope: !5469)
!5479 = !DILocation(line: 385, column: 4, scope: !5469)
!5480 = !DILocation(line: 385, column: 11, scope: !5469)
!5481 = !DILocation(line: 386, column: 1, scope: !5469)
!5482 = distinct !DISubprogram(name: "ira_mark_new_stack_slot", scope: !3, file: !3, line: 3129, type: !5483, scopeLine: 3130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5483 = !DISubroutineType(types: !5484)
!5484 = !{null, !622, !610, !7}
!5485 = !DILocalVariable(name: "x", arg: 1, scope: !5482, file: !3, line: 3129, type: !622)
!5486 = !DILocation(line: 3129, column: 30, scope: !5482)
!5487 = !DILocalVariable(name: "regno", arg: 2, scope: !5482, file: !3, line: 3129, type: !610)
!5488 = !DILocation(line: 3129, column: 37, scope: !5482)
!5489 = !DILocalVariable(name: "total_size", arg: 3, scope: !5482, file: !3, line: 3129, type: !7)
!5490 = !DILocation(line: 3129, column: 57, scope: !5482)
!5491 = !DILocalVariable(name: "slot", scope: !5482, file: !3, line: 3131, type: !5038)
!5492 = !DILocation(line: 3131, column: 38, scope: !5482)
!5493 = !DILocalVariable(name: "slot_num", scope: !5482, file: !3, line: 3132, type: !610)
!5494 = !DILocation(line: 3132, column: 7, scope: !5482)
!5495 = !DILocalVariable(name: "allocno", scope: !5482, file: !3, line: 3133, type: !612)
!5496 = !DILocation(line: 3133, column: 17, scope: !5482)
!5497 = !DILocation(line: 3136, column: 13, scope: !5482)
!5498 = !DILocation(line: 3136, column: 35, scope: !5482)
!5499 = !DILocation(line: 3136, column: 11, scope: !5482)
!5500 = !DILocation(line: 3137, column: 15, scope: !5482)
!5501 = !DILocation(line: 3137, column: 14, scope: !5482)
!5502 = !DILocation(line: 3137, column: 44, scope: !5482)
!5503 = !DILocation(line: 3137, column: 12, scope: !5482)
!5504 = !DILocation(line: 3138, column: 7, scope: !5505)
!5505 = distinct !DILexicalBlock(scope: !5482, file: !3, line: 3138, column: 7)
!5506 = !DILocation(line: 3138, column: 16, scope: !5505)
!5507 = !DILocation(line: 3138, column: 7, scope: !5482)
!5508 = !DILocation(line: 3140, column: 49, scope: !5509)
!5509 = distinct !DILexicalBlock(scope: !5505, file: !3, line: 3139, column: 5)
!5510 = !DILocation(line: 3140, column: 16, scope: !5509)
!5511 = !DILocation(line: 3141, column: 39, scope: !5509)
!5512 = !DILocation(line: 3141, column: 38, scope: !5509)
!5513 = !DILocation(line: 3141, column: 48, scope: !5509)
!5514 = !DILocation(line: 3141, column: 7, scope: !5509)
!5515 = !DILocation(line: 3141, column: 36, scope: !5509)
!5516 = !DILocation(line: 3142, column: 5, scope: !5509)
!5517 = !DILocation(line: 3143, column: 11, scope: !5482)
!5518 = !DILocation(line: 3143, column: 39, scope: !5482)
!5519 = !DILocation(line: 3143, column: 8, scope: !5482)
!5520 = !DILocation(line: 3144, column: 3, scope: !5482)
!5521 = !DILocation(line: 3145, column: 3, scope: !5482)
!5522 = !DILocation(line: 3146, column: 15, scope: !5482)
!5523 = !DILocation(line: 3146, column: 3, scope: !5482)
!5524 = !DILocation(line: 3146, column: 9, scope: !5482)
!5525 = !DILocation(line: 3146, column: 13, scope: !5482)
!5526 = !DILocation(line: 3147, column: 17, scope: !5482)
!5527 = !DILocation(line: 3147, column: 3, scope: !5482)
!5528 = !DILocation(line: 3147, column: 9, scope: !5482)
!5529 = !DILocation(line: 3147, column: 15, scope: !5482)
!5530 = !DILocation(line: 3148, column: 7, scope: !5531)
!5531 = distinct !DILexicalBlock(scope: !5482, file: !3, line: 3148, column: 7)
!5532 = !DILocation(line: 3148, column: 33, scope: !5531)
!5533 = !DILocation(line: 3148, column: 37, scope: !5531)
!5534 = !DILocation(line: 3148, column: 40, scope: !5531)
!5535 = !DILocation(line: 3148, column: 7, scope: !5482)
!5536 = !DILocation(line: 3149, column: 14, scope: !5531)
!5537 = !DILocation(line: 3150, column: 7, scope: !5531)
!5538 = !DILocation(line: 3150, column: 14, scope: !5531)
!5539 = !DILocation(line: 3150, column: 32, scope: !5531)
!5540 = !DILocation(line: 3149, column: 5, scope: !5531)
!5541 = !DILocation(line: 3151, column: 1, scope: !5482)
!5542 = distinct !DISubprogram(name: "bitmap_initialize_stat", scope: !681, file: !681, line: 165, type: !5543, scopeLine: 166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5543 = !DISubroutineType(types: !5544)
!5544 = !{null, !1745, !701}
!5545 = !DILocalVariable(name: "head", arg: 1, scope: !5542, file: !681, line: 165, type: !1745)
!5546 = !DILocation(line: 165, column: 32, scope: !5542)
!5547 = !DILocalVariable(name: "obstack", arg: 2, scope: !5542, file: !681, line: 165, type: !701)
!5548 = !DILocation(line: 165, column: 54, scope: !5542)
!5549 = !DILocation(line: 167, column: 17, scope: !5542)
!5550 = !DILocation(line: 167, column: 23, scope: !5542)
!5551 = !DILocation(line: 167, column: 31, scope: !5542)
!5552 = !DILocation(line: 167, column: 3, scope: !5542)
!5553 = !DILocation(line: 167, column: 9, scope: !5542)
!5554 = !DILocation(line: 167, column: 15, scope: !5542)
!5555 = !DILocation(line: 168, column: 19, scope: !5542)
!5556 = !DILocation(line: 168, column: 3, scope: !5542)
!5557 = !DILocation(line: 168, column: 9, scope: !5542)
!5558 = !DILocation(line: 168, column: 17, scope: !5542)
!5559 = !DILocation(line: 172, column: 1, scope: !5542)
!5560 = distinct !DISubprogram(name: "ira_better_spill_reload_regno_p", scope: !3, file: !3, line: 3224, type: !5561, scopeLine: 3226, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5561 = !DISubroutineType(types: !5562)
!5562 = !{!855, !609, !609, !622, !622, !622}
!5563 = !DILocalVariable(name: "regnos", arg: 1, scope: !5560, file: !3, line: 3224, type: !609)
!5564 = !DILocation(line: 3224, column: 39, scope: !5560)
!5565 = !DILocalVariable(name: "other_regnos", arg: 2, scope: !5560, file: !3, line: 3224, type: !609)
!5566 = !DILocation(line: 3224, column: 52, scope: !5560)
!5567 = !DILocalVariable(name: "in", arg: 3, scope: !5560, file: !3, line: 3225, type: !622)
!5568 = !DILocation(line: 3225, column: 10, scope: !5560)
!5569 = !DILocalVariable(name: "out", arg: 4, scope: !5560, file: !3, line: 3225, type: !622)
!5570 = !DILocation(line: 3225, column: 18, scope: !5560)
!5571 = !DILocalVariable(name: "insn", arg: 5, scope: !5560, file: !3, line: 3225, type: !622)
!5572 = !DILocation(line: 3225, column: 27, scope: !5560)
!5573 = !DILocalVariable(name: "cost", scope: !5560, file: !3, line: 3227, type: !610)
!5574 = !DILocation(line: 3227, column: 7, scope: !5560)
!5575 = !DILocalVariable(name: "other_cost", scope: !5560, file: !3, line: 3227, type: !610)
!5576 = !DILocation(line: 3227, column: 13, scope: !5560)
!5577 = !DILocalVariable(name: "length", scope: !5560, file: !3, line: 3228, type: !610)
!5578 = !DILocation(line: 3228, column: 7, scope: !5560)
!5579 = !DILocalVariable(name: "other_length", scope: !5560, file: !3, line: 3228, type: !610)
!5580 = !DILocation(line: 3228, column: 15, scope: !5560)
!5581 = !DILocalVariable(name: "nrefs", scope: !5560, file: !3, line: 3229, type: !610)
!5582 = !DILocation(line: 3229, column: 7, scope: !5560)
!5583 = !DILocalVariable(name: "other_nrefs", scope: !5560, file: !3, line: 3229, type: !610)
!5584 = !DILocation(line: 3229, column: 14, scope: !5560)
!5585 = !DILocalVariable(name: "call_used_count", scope: !5560, file: !3, line: 3230, type: !610)
!5586 = !DILocation(line: 3230, column: 7, scope: !5560)
!5587 = !DILocalVariable(name: "other_call_used_count", scope: !5560, file: !3, line: 3230, type: !610)
!5588 = !DILocation(line: 3230, column: 24, scope: !5560)
!5589 = !DILocalVariable(name: "hard_regno", scope: !5560, file: !3, line: 3231, type: !610)
!5590 = !DILocation(line: 3231, column: 7, scope: !5560)
!5591 = !DILocalVariable(name: "other_hard_regno", scope: !5560, file: !3, line: 3231, type: !610)
!5592 = !DILocation(line: 3231, column: 19, scope: !5560)
!5593 = !DILocation(line: 3233, column: 32, scope: !5560)
!5594 = !DILocation(line: 3233, column: 40, scope: !5560)
!5595 = !DILocation(line: 3233, column: 44, scope: !5560)
!5596 = !DILocation(line: 3233, column: 49, scope: !5560)
!5597 = !DILocation(line: 3233, column: 10, scope: !5560)
!5598 = !DILocation(line: 3233, column: 8, scope: !5560)
!5599 = !DILocation(line: 3235, column: 38, scope: !5560)
!5600 = !DILocation(line: 3235, column: 52, scope: !5560)
!5601 = !DILocation(line: 3235, column: 56, scope: !5560)
!5602 = !DILocation(line: 3235, column: 61, scope: !5560)
!5603 = !DILocation(line: 3235, column: 16, scope: !5560)
!5604 = !DILocation(line: 3235, column: 14, scope: !5560)
!5605 = !DILocation(line: 3239, column: 7, scope: !5606)
!5606 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 3239, column: 7)
!5607 = !DILocation(line: 3239, column: 13, scope: !5606)
!5608 = !DILocation(line: 3239, column: 18, scope: !5606)
!5609 = !DILocation(line: 3239, column: 21, scope: !5606)
!5610 = !DILocation(line: 3239, column: 33, scope: !5606)
!5611 = !DILocation(line: 3239, column: 7, scope: !5560)
!5612 = !DILocation(line: 3240, column: 5, scope: !5606)
!5613 = !DILocation(line: 3241, column: 7, scope: !5614)
!5614 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 3241, column: 7)
!5615 = !DILocation(line: 3241, column: 13, scope: !5614)
!5616 = !DILocation(line: 3241, column: 18, scope: !5614)
!5617 = !DILocation(line: 3241, column: 21, scope: !5614)
!5618 = !DILocation(line: 3241, column: 33, scope: !5614)
!5619 = !DILocation(line: 3241, column: 7, scope: !5560)
!5620 = !DILocation(line: 3242, column: 5, scope: !5614)
!5621 = !DILocation(line: 3243, column: 7, scope: !5622)
!5622 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 3243, column: 7)
!5623 = !DILocation(line: 3243, column: 15, scope: !5622)
!5624 = !DILocation(line: 3243, column: 12, scope: !5622)
!5625 = !DILocation(line: 3243, column: 7, scope: !5560)
!5626 = !DILocation(line: 3244, column: 12, scope: !5622)
!5627 = !DILocation(line: 3244, column: 19, scope: !5622)
!5628 = !DILocation(line: 3244, column: 17, scope: !5622)
!5629 = !DILocation(line: 3244, column: 5, scope: !5622)
!5630 = !DILocation(line: 3245, column: 7, scope: !5631)
!5631 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 3245, column: 7)
!5632 = !DILocation(line: 3245, column: 17, scope: !5631)
!5633 = !DILocation(line: 3245, column: 14, scope: !5631)
!5634 = !DILocation(line: 3245, column: 7, scope: !5560)
!5635 = !DILocation(line: 3246, column: 12, scope: !5631)
!5636 = !DILocation(line: 3246, column: 21, scope: !5631)
!5637 = !DILocation(line: 3246, column: 19, scope: !5631)
!5638 = !DILocation(line: 3246, column: 5, scope: !5631)
!5639 = !DILocation(line: 3248, column: 7, scope: !5640)
!5640 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 3248, column: 7)
!5641 = !DILocation(line: 3248, column: 18, scope: !5640)
!5642 = !DILocation(line: 3248, column: 23, scope: !5640)
!5643 = !DILocation(line: 3248, column: 26, scope: !5640)
!5644 = !DILocation(line: 3248, column: 43, scope: !5640)
!5645 = !DILocation(line: 3248, column: 7, scope: !5560)
!5646 = !DILocation(line: 3249, column: 33, scope: !5640)
!5647 = !DILocation(line: 3249, column: 13, scope: !5640)
!5648 = !DILocation(line: 3250, column: 28, scope: !5640)
!5649 = !DILocation(line: 3250, column: 8, scope: !5640)
!5650 = !DILocation(line: 3250, column: 6, scope: !5640)
!5651 = !DILocation(line: 3249, column: 12, scope: !5640)
!5652 = !DILocation(line: 3249, column: 5, scope: !5640)
!5653 = !DILocation(line: 3255, column: 3, scope: !5560)
!5654 = !DILocation(line: 3256, column: 1, scope: !5560)
!5655 = distinct !DISubprogram(name: "calculate_spill_cost", scope: !3, file: !3, line: 3164, type: !5656, scopeLine: 3167, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5656 = !DISubroutineType(types: !5657)
!5657 = !{!610, !609, !622, !622, !622, !609, !609, !609, !609}
!5658 = !DILocalVariable(name: "regnos", arg: 1, scope: !5655, file: !3, line: 3164, type: !609)
!5659 = !DILocation(line: 3164, column: 28, scope: !5655)
!5660 = !DILocalVariable(name: "in", arg: 2, scope: !5655, file: !3, line: 3164, type: !622)
!5661 = !DILocation(line: 3164, column: 40, scope: !5655)
!5662 = !DILocalVariable(name: "out", arg: 3, scope: !5655, file: !3, line: 3164, type: !622)
!5663 = !DILocation(line: 3164, column: 48, scope: !5655)
!5664 = !DILocalVariable(name: "insn", arg: 4, scope: !5655, file: !3, line: 3164, type: !622)
!5665 = !DILocation(line: 3164, column: 57, scope: !5655)
!5666 = !DILocalVariable(name: "excess_pressure_live_length", arg: 5, scope: !5655, file: !3, line: 3165, type: !609)
!5667 = !DILocation(line: 3165, column: 14, scope: !5655)
!5668 = !DILocalVariable(name: "nrefs", arg: 6, scope: !5655, file: !3, line: 3166, type: !609)
!5669 = !DILocation(line: 3166, column: 14, scope: !5655)
!5670 = !DILocalVariable(name: "call_used_count", arg: 7, scope: !5655, file: !3, line: 3166, type: !609)
!5671 = !DILocation(line: 3166, column: 26, scope: !5655)
!5672 = !DILocalVariable(name: "first_hard_regno", arg: 8, scope: !5655, file: !3, line: 3166, type: !609)
!5673 = !DILocation(line: 3166, column: 48, scope: !5655)
!5674 = !DILocalVariable(name: "i", scope: !5655, file: !3, line: 3168, type: !610)
!5675 = !DILocation(line: 3168, column: 7, scope: !5655)
!5676 = !DILocalVariable(name: "cost", scope: !5655, file: !3, line: 3168, type: !610)
!5677 = !DILocation(line: 3168, column: 10, scope: !5655)
!5678 = !DILocalVariable(name: "regno", scope: !5655, file: !3, line: 3168, type: !610)
!5679 = !DILocation(line: 3168, column: 16, scope: !5655)
!5680 = !DILocalVariable(name: "hard_regno", scope: !5655, file: !3, line: 3168, type: !610)
!5681 = !DILocation(line: 3168, column: 23, scope: !5655)
!5682 = !DILocalVariable(name: "j", scope: !5655, file: !3, line: 3168, type: !610)
!5683 = !DILocation(line: 3168, column: 35, scope: !5655)
!5684 = !DILocalVariable(name: "count", scope: !5655, file: !3, line: 3168, type: !610)
!5685 = !DILocation(line: 3168, column: 38, scope: !5655)
!5686 = !DILocalVariable(name: "saved_cost", scope: !5655, file: !3, line: 3168, type: !610)
!5687 = !DILocation(line: 3168, column: 45, scope: !5655)
!5688 = !DILocalVariable(name: "nregs", scope: !5655, file: !3, line: 3168, type: !610)
!5689 = !DILocation(line: 3168, column: 57, scope: !5655)
!5690 = !DILocalVariable(name: "in_p", scope: !5655, file: !3, line: 3169, type: !855)
!5691 = !DILocation(line: 3169, column: 8, scope: !5655)
!5692 = !DILocalVariable(name: "out_p", scope: !5655, file: !3, line: 3169, type: !855)
!5693 = !DILocation(line: 3169, column: 14, scope: !5655)
!5694 = !DILocalVariable(name: "length", scope: !5655, file: !3, line: 3170, type: !610)
!5695 = !DILocation(line: 3170, column: 7, scope: !5655)
!5696 = !DILocalVariable(name: "a", scope: !5655, file: !3, line: 3171, type: !612)
!5697 = !DILocation(line: 3171, column: 17, scope: !5655)
!5698 = !DILocation(line: 3173, column: 4, scope: !5655)
!5699 = !DILocation(line: 3173, column: 10, scope: !5655)
!5700 = !DILocation(line: 3174, column: 34, scope: !5701)
!5701 = distinct !DILexicalBlock(scope: !5655, file: !3, line: 3174, column: 3)
!5702 = !DILocation(line: 3174, column: 30, scope: !5701)
!5703 = !DILocation(line: 3174, column: 23, scope: !5701)
!5704 = !DILocation(line: 3174, column: 15, scope: !5701)
!5705 = !DILocation(line: 3174, column: 8, scope: !5701)
!5706 = !DILocation(line: 3176, column: 15, scope: !5707)
!5707 = distinct !DILexicalBlock(scope: !5708, file: !3, line: 3175, column: 5)
!5708 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 3174, column: 3)
!5709 = !DILocation(line: 3176, column: 22, scope: !5707)
!5710 = !DILocation(line: 3176, column: 13, scope: !5707)
!5711 = !DILocation(line: 3177, column: 11, scope: !5712)
!5712 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 3177, column: 11)
!5713 = !DILocation(line: 3177, column: 17, scope: !5712)
!5714 = !DILocation(line: 3177, column: 11, scope: !5707)
!5715 = !DILocation(line: 3178, column: 2, scope: !5712)
!5716 = !DILocation(line: 3179, column: 29, scope: !5707)
!5717 = !DILocation(line: 3179, column: 17, scope: !5707)
!5718 = !DILocation(line: 3179, column: 8, scope: !5707)
!5719 = !DILocation(line: 3179, column: 14, scope: !5707)
!5720 = !DILocation(line: 3180, column: 20, scope: !5707)
!5721 = !DILocation(line: 3180, column: 33, scope: !5707)
!5722 = !DILocation(line: 3180, column: 18, scope: !5707)
!5723 = !DILocation(line: 3182, column: 11, scope: !5707)
!5724 = !DILocation(line: 3182, column: 33, scope: !5707)
!5725 = !DILocation(line: 3182, column: 9, scope: !5707)
!5726 = !DILocation(line: 3183, column: 17, scope: !5707)
!5727 = !DILocation(line: 3183, column: 14, scope: !5707)
!5728 = !DILocation(line: 3184, column: 15, scope: !5707)
!5729 = !DILocation(line: 3184, column: 41, scope: !5707)
!5730 = !DILocation(line: 3184, column: 39, scope: !5707)
!5731 = !DILocation(line: 3184, column: 12, scope: !5707)
!5732 = !DILocation(line: 3185, column: 32, scope: !5707)
!5733 = !DILocation(line: 3185, column: 15, scope: !5707)
!5734 = !DILocation(line: 3185, column: 44, scope: !5707)
!5735 = !DILocation(line: 3185, column: 13, scope: !5707)
!5736 = !DILocation(line: 3186, column: 14, scope: !5737)
!5737 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 3186, column: 7)
!5738 = !DILocation(line: 3186, column: 12, scope: !5737)
!5739 = !DILocation(line: 3186, column: 19, scope: !5740)
!5740 = distinct !DILexicalBlock(scope: !5737, file: !3, line: 3186, column: 7)
!5741 = !DILocation(line: 3186, column: 23, scope: !5740)
!5742 = !DILocation(line: 3186, column: 21, scope: !5740)
!5743 = !DILocation(line: 3186, column: 7, scope: !5737)
!5744 = !DILocation(line: 3187, column: 8, scope: !5745)
!5745 = distinct !DILexicalBlock(scope: !5740, file: !3, line: 3187, column: 6)
!5746 = !DILocation(line: 3187, column: 6, scope: !5740)
!5747 = !DILocation(line: 3188, column: 4, scope: !5745)
!5748 = !DILocation(line: 3186, column: 31, scope: !5740)
!5749 = !DILocation(line: 3186, column: 7, scope: !5740)
!5750 = distinct !{!5750, !5743, !5751}
!5751 = !DILocation(line: 3188, column: 4, scope: !5737)
!5752 = !DILocation(line: 3189, column: 11, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 3189, column: 11)
!5754 = !DILocation(line: 3189, column: 16, scope: !5753)
!5755 = !DILocation(line: 3189, column: 13, scope: !5753)
!5756 = !DILocation(line: 3189, column: 11, scope: !5707)
!5757 = !DILocation(line: 3190, column: 7, scope: !5753)
!5758 = !DILocation(line: 3190, column: 2, scope: !5753)
!5759 = !DILocation(line: 3191, column: 14, scope: !5707)
!5760 = !DILocation(line: 3191, column: 17, scope: !5707)
!5761 = !DILocation(line: 3191, column: 20, scope: !5707)
!5762 = !DILocation(line: 3191, column: 31, scope: !5707)
!5763 = !DILocation(line: 3191, column: 40, scope: !5707)
!5764 = !DILocation(line: 3191, column: 54, scope: !5707)
!5765 = !DILocation(line: 3191, column: 51, scope: !5707)
!5766 = !DILocation(line: 0, scope: !5707)
!5767 = !DILocation(line: 3191, column: 12, scope: !5707)
!5768 = !DILocation(line: 3192, column: 15, scope: !5707)
!5769 = !DILocation(line: 3192, column: 19, scope: !5707)
!5770 = !DILocation(line: 3192, column: 22, scope: !5707)
!5771 = !DILocation(line: 3192, column: 34, scope: !5707)
!5772 = !DILocation(line: 3192, column: 43, scope: !5707)
!5773 = !DILocation(line: 3192, column: 58, scope: !5707)
!5774 = !DILocation(line: 3192, column: 55, scope: !5707)
!5775 = !DILocation(line: 3192, column: 13, scope: !5707)
!5776 = !DILocation(line: 3193, column: 12, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5707, file: !3, line: 3193, column: 11)
!5778 = !DILocation(line: 3193, column: 17, scope: !5777)
!5779 = !DILocation(line: 3193, column: 20, scope: !5777)
!5780 = !DILocation(line: 3194, column: 4, scope: !5777)
!5781 = !DILocation(line: 3194, column: 24, scope: !5777)
!5782 = !DILocation(line: 3194, column: 40, scope: !5777)
!5783 = !DILocation(line: 3194, column: 7, scope: !5777)
!5784 = !DILocation(line: 3194, column: 52, scope: !5777)
!5785 = !DILocation(line: 3193, column: 11, scope: !5707)
!5786 = !DILocation(line: 3196, column: 15, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5777, file: !3, line: 3195, column: 2)
!5788 = !DILocation(line: 3197, column: 8, scope: !5789)
!5789 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 3197, column: 8)
!5790 = !DILocation(line: 3197, column: 8, scope: !5787)
!5791 = !DILocation(line: 3199, column: 21, scope: !5789)
!5792 = !DILocation(line: 3198, column: 20, scope: !5789)
!5793 = !DILocation(line: 3199, column: 39, scope: !5789)
!5794 = !DILocation(line: 3198, column: 17, scope: !5789)
!5795 = !DILocation(line: 3198, column: 6, scope: !5789)
!5796 = !DILocation(line: 3200, column: 8, scope: !5797)
!5797 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 3200, column: 8)
!5798 = !DILocation(line: 3200, column: 8, scope: !5787)
!5799 = !DILocation(line: 3203, column: 12, scope: !5797)
!5800 = !DILocation(line: 3202, column: 11, scope: !5797)
!5801 = !DILocation(line: 3203, column: 30, scope: !5797)
!5802 = !DILocation(line: 3202, column: 8, scope: !5797)
!5803 = !DILocation(line: 3201, column: 6, scope: !5797)
!5804 = !DILocation(line: 3204, column: 12, scope: !5787)
!5805 = !DILocation(line: 3204, column: 55, scope: !5787)
!5806 = !DILocation(line: 3204, column: 53, scope: !5787)
!5807 = !DILocation(line: 3204, column: 9, scope: !5787)
!5808 = !DILocation(line: 3205, column: 2, scope: !5787)
!5809 = !DILocation(line: 3206, column: 5, scope: !5707)
!5810 = !DILocation(line: 3174, column: 41, scope: !5708)
!5811 = !DILocation(line: 3174, column: 3, scope: !5708)
!5812 = distinct !{!5812, !5813, !5814}
!5813 = !DILocation(line: 3174, column: 3, scope: !5701)
!5814 = !DILocation(line: 3206, column: 5, scope: !5701)
!5815 = !DILocation(line: 3207, column: 34, scope: !5655)
!5816 = !DILocation(line: 3207, column: 4, scope: !5655)
!5817 = !DILocation(line: 3207, column: 32, scope: !5655)
!5818 = !DILocation(line: 3208, column: 22, scope: !5655)
!5819 = !DILocation(line: 3208, column: 4, scope: !5655)
!5820 = !DILocation(line: 3208, column: 20, scope: !5655)
!5821 = !DILocation(line: 3209, column: 14, scope: !5655)
!5822 = !DILocation(line: 3210, column: 7, scope: !5823)
!5823 = distinct !DILexicalBlock(scope: !5655, file: !3, line: 3210, column: 7)
!5824 = !DILocation(line: 3210, column: 17, scope: !5823)
!5825 = !DILocation(line: 3210, column: 7, scope: !5655)
!5826 = !DILocation(line: 3212, column: 20, scope: !5827)
!5827 = distinct !DILexicalBlock(scope: !5823, file: !3, line: 3211, column: 5)
!5828 = !DILocation(line: 3212, column: 33, scope: !5827)
!5829 = !DILocation(line: 3212, column: 18, scope: !5827)
!5830 = !DILocation(line: 3213, column: 5, scope: !5827)
!5831 = !DILocation(line: 3214, column: 23, scope: !5655)
!5832 = !DILocation(line: 3214, column: 4, scope: !5655)
!5833 = !DILocation(line: 3214, column: 21, scope: !5655)
!5834 = !DILocation(line: 3215, column: 10, scope: !5655)
!5835 = !DILocation(line: 3215, column: 3, scope: !5655)
!5836 = distinct !DISubprogram(name: "ira_initiate_assign", scope: !3, file: !3, line: 3262, type: !5837, scopeLine: 3263, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5837 = !DISubroutineType(types: !5838)
!5838 = !{null}
!5839 = !DILocation(line: 3266, column: 13, scope: !5836)
!5840 = !DILocation(line: 3266, column: 11, scope: !5836)
!5841 = !DILocation(line: 3265, column: 25, scope: !5836)
!5842 = !DILocation(line: 3265, column: 7, scope: !5836)
!5843 = !DILocation(line: 3265, column: 5, scope: !5836)
!5844 = !DILocation(line: 3267, column: 34, scope: !5836)
!5845 = !DILocation(line: 3267, column: 32, scope: !5836)
!5846 = !DILocation(line: 3268, column: 3, scope: !5836)
!5847 = !DILocation(line: 3269, column: 61, scope: !5836)
!5848 = !DILocation(line: 3269, column: 59, scope: !5836)
!5849 = !DILocation(line: 3269, column: 32, scope: !5836)
!5850 = !DILocation(line: 3269, column: 24, scope: !5836)
!5851 = !DILocation(line: 3269, column: 22, scope: !5836)
!5852 = !DILocation(line: 3270, column: 1, scope: !5836)
!5853 = distinct !DISubprogram(name: "initiate_cost_update", scope: !3, file: !3, line: 170, type: !5837, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5854 = !DILocalVariable(name: "size", scope: !5853, file: !3, line: 172, type: !1192)
!5855 = !DILocation(line: 172, column: 10, scope: !5853)
!5856 = !DILocation(line: 174, column: 10, scope: !5853)
!5857 = !DILocation(line: 174, column: 27, scope: !5853)
!5858 = !DILocation(line: 174, column: 8, scope: !5853)
!5859 = !DILocation(line: 176, column: 55, scope: !5853)
!5860 = !DILocation(line: 176, column: 41, scope: !5853)
!5861 = !DILocation(line: 176, column: 7, scope: !5853)
!5862 = !DILocation(line: 176, column: 5, scope: !5853)
!5863 = !DILocation(line: 177, column: 11, scope: !5853)
!5864 = !DILocation(line: 177, column: 3, scope: !5853)
!5865 = !DILocation(line: 177, column: 39, scope: !5853)
!5866 = !DILocation(line: 178, column: 21, scope: !5853)
!5867 = !DILocation(line: 179, column: 1, scope: !5853)
!5868 = distinct !DISubprogram(name: "ira_finish_assign", scope: !3, file: !3, line: 3274, type: !5837, scopeLine: 3275, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5869 = !DILocation(line: 3276, column: 13, scope: !5868)
!5870 = !DILocation(line: 3276, column: 3, scope: !5868)
!5871 = !DILocation(line: 3277, column: 20, scope: !5868)
!5872 = !DILocation(line: 3277, column: 3, scope: !5868)
!5873 = !DILocation(line: 3278, column: 3, scope: !5868)
!5874 = !DILocation(line: 3279, column: 13, scope: !5868)
!5875 = !DILocation(line: 3279, column: 3, scope: !5868)
!5876 = !DILocation(line: 3280, column: 1, scope: !5868)
!5877 = distinct !DISubprogram(name: "finish_cost_update", scope: !3, file: !3, line: 183, type: !5837, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5878 = !DILocation(line: 185, column: 13, scope: !5877)
!5879 = !DILocation(line: 185, column: 3, scope: !5877)
!5880 = !DILocation(line: 186, column: 1, scope: !5877)
!5881 = distinct !DISubprogram(name: "ira_color", scope: !3, file: !3, line: 3389, type: !5837, scopeLine: 3390, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5882 = !DILocalVariable(name: "a", scope: !5881, file: !3, line: 3391, type: !612)
!5883 = !DILocation(line: 3391, column: 17, scope: !5881)
!5884 = !DILocalVariable(name: "ai", scope: !5881, file: !3, line: 3392, type: !2198)
!5885 = !DILocation(line: 3392, column: 24, scope: !5881)
!5886 = !DILocation(line: 3395, column: 3, scope: !5887)
!5887 = distinct !DILexicalBlock(scope: !5881, file: !3, line: 3395, column: 3)
!5888 = !DILocation(line: 3395, column: 3, scope: !5889)
!5889 = distinct !DILexicalBlock(scope: !5887, file: !3, line: 3395, column: 3)
!5890 = !DILocation(line: 3397, column: 41, scope: !5891)
!5891 = distinct !DILexicalBlock(scope: !5889, file: !3, line: 3396, column: 5)
!5892 = !DILocation(line: 3397, column: 7, scope: !5891)
!5893 = !DILocation(line: 3397, column: 39, scope: !5891)
!5894 = !DILocation(line: 3398, column: 46, scope: !5891)
!5895 = !DILocation(line: 3398, column: 7, scope: !5891)
!5896 = !DILocation(line: 3398, column: 44, scope: !5891)
!5897 = distinct !{!5897, !5886, !5898}
!5898 = !DILocation(line: 3399, column: 5, scope: !5887)
!5899 = !DILocation(line: 3400, column: 7, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5881, file: !3, line: 3400, column: 7)
!5901 = !DILocation(line: 3400, column: 7, scope: !5881)
!5902 = !DILocation(line: 3401, column: 5, scope: !5900)
!5903 = !DILocation(line: 3403, column: 5, scope: !5900)
!5904 = !DILocation(line: 3404, column: 1, scope: !5881)
!5905 = distinct !DISubprogram(name: "color", scope: !3, file: !3, line: 3286, type: !5837, scopeLine: 3287, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5906 = !DILocation(line: 3288, column: 23, scope: !5905)
!5907 = !DILocation(line: 3288, column: 21, scope: !5905)
!5908 = !DILocation(line: 3290, column: 7, scope: !5905)
!5909 = !DILocation(line: 3290, column: 5, scope: !5905)
!5910 = !DILocation(line: 3291, column: 3, scope: !5905)
!5911 = !DILocation(line: 3292, column: 3, scope: !5905)
!5912 = !DILocation(line: 3293, column: 3, scope: !5905)
!5913 = !DILocation(line: 3294, column: 3, scope: !5905)
!5914 = !DILocation(line: 3295, column: 3, scope: !5905)
!5915 = !DILocation(line: 3296, column: 3, scope: !5905)
!5916 = !DILocation(line: 3297, column: 3, scope: !5905)
!5917 = !DILocation(line: 3298, column: 1, scope: !5905)
!5918 = distinct !DISubprogram(name: "fast_allocation", scope: !3, file: !3, line: 3309, type: !5837, scopeLine: 3310, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!5919 = !DILocalVariable(name: "i", scope: !5918, file: !3, line: 3311, type: !610)
!5920 = !DILocation(line: 3311, column: 7, scope: !5918)
!5921 = !DILocalVariable(name: "j", scope: !5918, file: !3, line: 3311, type: !610)
!5922 = !DILocation(line: 3311, column: 10, scope: !5918)
!5923 = !DILocalVariable(name: "k", scope: !5918, file: !3, line: 3311, type: !610)
!5924 = !DILocation(line: 3311, column: 13, scope: !5918)
!5925 = !DILocalVariable(name: "num", scope: !5918, file: !3, line: 3311, type: !610)
!5926 = !DILocation(line: 3311, column: 16, scope: !5918)
!5927 = !DILocalVariable(name: "class_size", scope: !5918, file: !3, line: 3311, type: !610)
!5928 = !DILocation(line: 3311, column: 21, scope: !5918)
!5929 = !DILocalVariable(name: "hard_regno", scope: !5918, file: !3, line: 3311, type: !610)
!5930 = !DILocation(line: 3311, column: 33, scope: !5918)
!5931 = !DILocalVariable(name: "no_stack_reg_p", scope: !5918, file: !3, line: 3313, type: !855)
!5932 = !DILocation(line: 3313, column: 8, scope: !5918)
!5933 = !DILocalVariable(name: "cover_class", scope: !5918, file: !3, line: 3315, type: !390)
!5934 = !DILocation(line: 3315, column: 18, scope: !5918)
!5935 = !DILocalVariable(name: "mode", scope: !5918, file: !3, line: 3316, type: !5)
!5936 = !DILocation(line: 3316, column: 21, scope: !5918)
!5937 = !DILocalVariable(name: "a", scope: !5918, file: !3, line: 3317, type: !612)
!5938 = !DILocation(line: 3317, column: 17, scope: !5918)
!5939 = !DILocalVariable(name: "ai", scope: !5918, file: !3, line: 3318, type: !2198)
!5940 = !DILocation(line: 3318, column: 24, scope: !5918)
!5941 = !DILocalVariable(name: "r", scope: !5918, file: !3, line: 3319, type: !1778)
!5942 = !DILocation(line: 3319, column: 24, scope: !5918)
!5943 = !DILocalVariable(name: "conflict_hard_regs", scope: !5918, file: !3, line: 3320, type: !1794)
!5944 = !DILocation(line: 3320, column: 16, scope: !5918)
!5945 = !DILocalVariable(name: "used_hard_regs", scope: !5918, file: !3, line: 3320, type: !1862)
!5946 = !DILocation(line: 3320, column: 37, scope: !5918)
!5947 = !DILocation(line: 3323, column: 13, scope: !5918)
!5948 = !DILocation(line: 3323, column: 11, scope: !5918)
!5949 = !DILocation(line: 3322, column: 39, scope: !5918)
!5950 = !DILocation(line: 3322, column: 21, scope: !5918)
!5951 = !DILocation(line: 3322, column: 19, scope: !5918)
!5952 = !DILocation(line: 3324, column: 7, scope: !5918)
!5953 = !DILocation(line: 3325, column: 3, scope: !5954)
!5954 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 3325, column: 3)
!5955 = !DILocation(line: 3325, column: 3, scope: !5956)
!5956 = distinct !DILexicalBlock(scope: !5954, file: !3, line: 3325, column: 3)
!5957 = !DILocation(line: 3326, column: 30, scope: !5956)
!5958 = !DILocation(line: 3326, column: 5, scope: !5956)
!5959 = !DILocation(line: 3326, column: 24, scope: !5956)
!5960 = !DILocation(line: 3326, column: 28, scope: !5956)
!5961 = distinct !{!5961, !5953, !5962}
!5962 = !DILocation(line: 3326, column: 30, scope: !5954)
!5963 = !DILocation(line: 3327, column: 61, scope: !5918)
!5964 = !DILocation(line: 3327, column: 59, scope: !5918)
!5965 = !DILocation(line: 3327, column: 32, scope: !5918)
!5966 = !DILocation(line: 3327, column: 24, scope: !5918)
!5967 = !DILocation(line: 3327, column: 22, scope: !5918)
!5968 = !DILocation(line: 3328, column: 29, scope: !5918)
!5969 = !DILocation(line: 3328, column: 46, scope: !5918)
!5970 = !DILocation(line: 3328, column: 3, scope: !5918)
!5971 = !DILocation(line: 3330, column: 11, scope: !5918)
!5972 = !DILocation(line: 3330, column: 9, scope: !5918)
!5973 = !DILocation(line: 3329, column: 37, scope: !5918)
!5974 = !DILocation(line: 3329, column: 20, scope: !5918)
!5975 = !DILocation(line: 3329, column: 18, scope: !5918)
!5976 = !DILocation(line: 3331, column: 10, scope: !5977)
!5977 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 3331, column: 3)
!5978 = !DILocation(line: 3331, column: 8, scope: !5977)
!5979 = !DILocation(line: 3331, column: 15, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !5977, file: !3, line: 3331, column: 3)
!5981 = !DILocation(line: 3331, column: 19, scope: !5980)
!5982 = !DILocation(line: 3331, column: 17, scope: !5980)
!5983 = !DILocation(line: 3331, column: 3, scope: !5977)
!5984 = !DILocation(line: 3332, column: 5, scope: !5980)
!5985 = !DILocation(line: 3331, column: 35, scope: !5980)
!5986 = !DILocation(line: 3331, column: 3, scope: !5980)
!5987 = distinct !{!5987, !5983, !5988}
!5988 = !DILocation(line: 3332, column: 5, scope: !5977)
!5989 = !DILocation(line: 3334, column: 15, scope: !5918)
!5990 = !DILocation(line: 3334, column: 32, scope: !5918)
!5991 = !DILocation(line: 3334, column: 3, scope: !5918)
!5992 = !DILocation(line: 3340, column: 10, scope: !5993)
!5993 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 3340, column: 3)
!5994 = !DILocation(line: 3340, column: 8, scope: !5993)
!5995 = !DILocation(line: 3340, column: 15, scope: !5996)
!5996 = distinct !DILexicalBlock(scope: !5993, file: !3, line: 3340, column: 3)
!5997 = !DILocation(line: 3340, column: 19, scope: !5996)
!5998 = !DILocation(line: 3340, column: 17, scope: !5996)
!5999 = !DILocation(line: 3340, column: 3, scope: !5993)
!6000 = !DILocation(line: 3342, column: 11, scope: !6001)
!6001 = distinct !DILexicalBlock(scope: !5996, file: !3, line: 3341, column: 5)
!6002 = !DILocation(line: 3342, column: 27, scope: !6001)
!6003 = !DILocation(line: 3342, column: 9, scope: !6001)
!6004 = !DILocation(line: 3343, column: 7, scope: !6001)
!6005 = !DILocation(line: 3344, column: 16, scope: !6006)
!6006 = distinct !DILexicalBlock(scope: !6001, file: !3, line: 3344, column: 7)
!6007 = !DILocation(line: 3344, column: 14, scope: !6006)
!6008 = !DILocation(line: 3344, column: 12, scope: !6006)
!6009 = !DILocation(line: 3344, column: 41, scope: !6010)
!6010 = distinct !DILexicalBlock(scope: !6006, file: !3, line: 3344, column: 7)
!6011 = !DILocation(line: 3344, column: 43, scope: !6010)
!6012 = !DILocation(line: 3344, column: 7, scope: !6006)
!6013 = !DILocation(line: 3345, column: 12, scope: !6014)
!6014 = distinct !DILexicalBlock(scope: !6010, file: !3, line: 3345, column: 2)
!6015 = !DILocation(line: 3345, column: 15, scope: !6014)
!6016 = !DILocation(line: 3345, column: 9, scope: !6014)
!6017 = !DILocation(line: 3345, column: 7, scope: !6014)
!6018 = !DILocation(line: 3345, column: 22, scope: !6019)
!6019 = distinct !DILexicalBlock(scope: !6014, file: !3, line: 3345, column: 2)
!6020 = !DILocation(line: 3345, column: 27, scope: !6019)
!6021 = !DILocation(line: 3345, column: 30, scope: !6019)
!6022 = !DILocation(line: 3345, column: 24, scope: !6019)
!6023 = !DILocation(line: 3345, column: 2, scope: !6014)
!6024 = !DILocation(line: 3346, column: 4, scope: !6019)
!6025 = !DILocation(line: 3345, column: 39, scope: !6019)
!6026 = !DILocation(line: 3345, column: 2, scope: !6019)
!6027 = distinct !{!6027, !6023, !6028}
!6028 = !DILocation(line: 3346, column: 4, scope: !6014)
!6029 = !DILocation(line: 3344, column: 56, scope: !6010)
!6030 = !DILocation(line: 3344, column: 59, scope: !6010)
!6031 = !DILocation(line: 3344, column: 54, scope: !6010)
!6032 = !DILocation(line: 3344, column: 7, scope: !6010)
!6033 = distinct !{!6033, !6012, !6034}
!6034 = !DILocation(line: 3346, column: 4, scope: !6006)
!6035 = !DILocation(line: 3347, column: 21, scope: !6001)
!6036 = !DILocation(line: 3347, column: 19, scope: !6001)
!6037 = !DILocation(line: 3348, column: 7, scope: !6001)
!6038 = !DILocation(line: 3348, column: 30, scope: !6001)
!6039 = !DILocation(line: 3349, column: 7, scope: !6001)
!6040 = !DILocation(line: 3349, column: 30, scope: !6001)
!6041 = !DILocation(line: 3350, column: 53, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !6001, file: !3, line: 3350, column: 11)
!6043 = !DILocation(line: 3350, column: 34, scope: !6042)
!6044 = !DILocation(line: 3351, column: 6, scope: !6042)
!6045 = !DILocation(line: 3350, column: 11, scope: !6042)
!6046 = !DILocation(line: 3350, column: 11, scope: !6001)
!6047 = !DILocation(line: 3352, column: 2, scope: !6042)
!6048 = !DILocation(line: 3353, column: 14, scope: !6001)
!6049 = !DILocation(line: 3353, column: 12, scope: !6001)
!6050 = !DILocation(line: 3355, column: 24, scope: !6001)
!6051 = !DILocation(line: 3355, column: 22, scope: !6001)
!6052 = !DILocation(line: 3357, column: 44, scope: !6001)
!6053 = !DILocation(line: 3357, column: 20, scope: !6001)
!6054 = !DILocation(line: 3357, column: 18, scope: !6001)
!6055 = !DILocation(line: 3358, column: 14, scope: !6056)
!6056 = distinct !DILexicalBlock(scope: !6001, file: !3, line: 3358, column: 7)
!6057 = !DILocation(line: 3358, column: 12, scope: !6056)
!6058 = !DILocation(line: 3358, column: 19, scope: !6059)
!6059 = distinct !DILexicalBlock(scope: !6056, file: !3, line: 3358, column: 7)
!6060 = !DILocation(line: 3358, column: 23, scope: !6059)
!6061 = !DILocation(line: 3358, column: 21, scope: !6059)
!6062 = !DILocation(line: 3358, column: 7, scope: !6056)
!6063 = !DILocation(line: 3360, column: 37, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6059, file: !3, line: 3359, column: 2)
!6065 = !DILocation(line: 3360, column: 17, scope: !6064)
!6066 = !DILocation(line: 3360, column: 50, scope: !6064)
!6067 = !DILocation(line: 3360, column: 15, scope: !6064)
!6068 = !DILocation(line: 3362, column: 8, scope: !6069)
!6069 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 3362, column: 8)
!6070 = !DILocation(line: 3362, column: 23, scope: !6069)
!6071 = !DILocation(line: 3362, column: 45, scope: !6069)
!6072 = !DILocation(line: 3362, column: 42, scope: !6069)
!6073 = !DILocation(line: 3363, column: 8, scope: !6069)
!6074 = !DILocation(line: 3363, column: 11, scope: !6069)
!6075 = !DILocation(line: 3363, column: 22, scope: !6069)
!6076 = !DILocation(line: 3362, column: 8, scope: !6064)
!6077 = !DILocation(line: 3364, column: 6, scope: !6069)
!6078 = !DILocation(line: 3366, column: 36, scope: !6079)
!6079 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 3366, column: 8)
!6080 = !DILocation(line: 3366, column: 48, scope: !6079)
!6081 = !DILocation(line: 3366, column: 54, scope: !6079)
!6082 = !DILocation(line: 3366, column: 9, scope: !6079)
!6083 = !DILocation(line: 3367, column: 8, scope: !6079)
!6084 = !DILocation(line: 3367, column: 12, scope: !6079)
!6085 = !DILocation(line: 3366, column: 8, scope: !6064)
!6086 = !DILocation(line: 3369, column: 6, scope: !6079)
!6087 = !DILocation(line: 3370, column: 29, scope: !6064)
!6088 = !DILocation(line: 3370, column: 4, scope: !6064)
!6089 = !DILocation(line: 3370, column: 27, scope: !6064)
!6090 = !DILocation(line: 3371, column: 13, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 3371, column: 4)
!6092 = !DILocation(line: 3371, column: 11, scope: !6091)
!6093 = !DILocation(line: 3371, column: 9, scope: !6091)
!6094 = !DILocation(line: 3371, column: 38, scope: !6095)
!6095 = distinct !DILexicalBlock(scope: !6091, file: !3, line: 3371, column: 4)
!6096 = !DILocation(line: 3371, column: 40, scope: !6095)
!6097 = !DILocation(line: 3371, column: 4, scope: !6091)
!6098 = !DILocation(line: 3372, column: 15, scope: !6099)
!6099 = distinct !DILexicalBlock(scope: !6095, file: !3, line: 3372, column: 6)
!6100 = !DILocation(line: 3372, column: 18, scope: !6099)
!6101 = !DILocation(line: 3372, column: 13, scope: !6099)
!6102 = !DILocation(line: 3372, column: 11, scope: !6099)
!6103 = !DILocation(line: 3372, column: 25, scope: !6104)
!6104 = distinct !DILexicalBlock(scope: !6099, file: !3, line: 3372, column: 6)
!6105 = !DILocation(line: 3372, column: 30, scope: !6104)
!6106 = !DILocation(line: 3372, column: 33, scope: !6104)
!6107 = !DILocation(line: 3372, column: 27, scope: !6104)
!6108 = !DILocation(line: 3372, column: 6, scope: !6099)
!6109 = !DILocation(line: 3373, column: 8, scope: !6104)
!6110 = !DILocation(line: 3372, column: 42, scope: !6104)
!6111 = !DILocation(line: 3372, column: 6, scope: !6104)
!6112 = distinct !{!6112, !6108, !6113}
!6113 = !DILocation(line: 3373, column: 8, scope: !6099)
!6114 = !DILocation(line: 3371, column: 53, scope: !6095)
!6115 = !DILocation(line: 3371, column: 56, scope: !6095)
!6116 = !DILocation(line: 3371, column: 51, scope: !6095)
!6117 = !DILocation(line: 3371, column: 4, scope: !6095)
!6118 = distinct !{!6118, !6097, !6119}
!6119 = !DILocation(line: 3373, column: 8, scope: !6091)
!6120 = !DILocation(line: 3375, column: 4, scope: !6064)
!6121 = !DILocation(line: 3358, column: 36, scope: !6059)
!6122 = !DILocation(line: 3358, column: 7, scope: !6059)
!6123 = distinct !{!6123, !6062, !6124}
!6124 = !DILocation(line: 3376, column: 2, scope: !6056)
!6125 = !DILocation(line: 3377, column: 5, scope: !6001)
!6126 = !DILocation(line: 3340, column: 25, scope: !5996)
!6127 = !DILocation(line: 3340, column: 3, scope: !5996)
!6128 = distinct !{!6128, !5999, !6129}
!6129 = !DILocation(line: 3377, column: 5, scope: !5993)
!6130 = !DILocation(line: 3378, column: 13, scope: !5918)
!6131 = !DILocation(line: 3378, column: 3, scope: !5918)
!6132 = !DILocation(line: 3379, column: 13, scope: !5918)
!6133 = !DILocation(line: 3379, column: 3, scope: !5918)
!6134 = !DILocation(line: 3380, column: 13, scope: !5918)
!6135 = !DILocation(line: 3380, column: 3, scope: !5918)
!6136 = !DILocation(line: 3381, column: 7, scope: !6137)
!6137 = distinct !DILexicalBlock(scope: !5918, file: !3, line: 3381, column: 7)
!6138 = !DILocation(line: 3381, column: 33, scope: !6137)
!6139 = !DILocation(line: 3381, column: 37, scope: !6137)
!6140 = !DILocation(line: 3381, column: 40, scope: !6137)
!6141 = !DILocation(line: 3381, column: 54, scope: !6137)
!6142 = !DILocation(line: 3381, column: 7, scope: !5918)
!6143 = !DILocation(line: 3382, column: 28, scope: !6137)
!6144 = !DILocation(line: 3382, column: 5, scope: !6137)
!6145 = !DILocation(line: 3383, column: 1, scope: !5918)
!6146 = distinct !DISubprogram(name: "ei_end_p", scope: !135, file: !135, line: 721, type: !6147, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6147 = !DISubroutineType(types: !6148)
!6148 = !{!855, !1997}
!6149 = !DILocalVariable(name: "i", arg: 1, scope: !6146, file: !135, line: 721, type: !1997)
!6150 = !DILocation(line: 721, column: 25, scope: !6146)
!6151 = !DILocation(line: 723, column: 13, scope: !6146)
!6152 = !DILocation(line: 723, column: 22, scope: !6146)
!6153 = !DILocation(line: 723, column: 19, scope: !6146)
!6154 = !DILocation(line: 723, column: 10, scope: !6146)
!6155 = !DILocation(line: 723, column: 3, scope: !6146)
!6156 = distinct !DISubprogram(name: "ei_edge", scope: !135, file: !135, line: 752, type: !6157, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6157 = !DISubroutineType(types: !6158)
!6158 = !{!1017, !1997}
!6159 = !DILocalVariable(name: "i", arg: 1, scope: !6156, file: !135, line: 752, type: !1997)
!6160 = !DILocation(line: 752, column: 24, scope: !6156)
!6161 = !DILocation(line: 754, column: 10, scope: !6156)
!6162 = !DILocation(line: 754, column: 3, scope: !6156)
!6163 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !135, file: !135, line: 150, type: !6164, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6164 = !DISubroutineType(types: !6165)
!6165 = !{!7, !2148}
!6166 = !DILocalVariable(name: "vec_", arg: 1, scope: !6163, file: !135, line: 150, type: !2148)
!6167 = !DILocation(line: 150, column: 1, scope: !6163)
!6168 = distinct !DISubprogram(name: "ei_container", scope: !135, file: !135, line: 685, type: !6169, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6169 = !DISubroutineType(types: !6170)
!6170 = !{!1005, !1997}
!6171 = !DILocalVariable(name: "i", arg: 1, scope: !6168, file: !135, line: 685, type: !1997)
!6172 = !DILocation(line: 685, column: 29, scope: !6168)
!6173 = !DILocation(line: 687, column: 3, scope: !6168)
!6174 = !DILocation(line: 688, column: 13, scope: !6168)
!6175 = !DILocation(line: 688, column: 10, scope: !6168)
!6176 = !DILocation(line: 688, column: 3, scope: !6168)
!6177 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !135, file: !135, line: 150, type: !6178, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6178 = !DISubroutineType(types: !6179)
!6179 = !{!1017, !2148, !7}
!6180 = !DILocalVariable(name: "vec_", arg: 1, scope: !6177, file: !135, line: 150, type: !2148)
!6181 = !DILocation(line: 150, column: 1, scope: !6177)
!6182 = !DILocalVariable(name: "ix_", arg: 2, scope: !6177, file: !135, line: 150, type: !7)
!6183 = !DILocation(line: 0, scope: !6177)
!6184 = distinct !DISubprogram(name: "ira_get_register_move_cost", scope: !613, file: !613, line: 906, type: !6185, scopeLine: 908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6185 = !DISubroutineType(types: !6186)
!6186 = !{!610, !5, !390, !390}
!6187 = !DILocalVariable(name: "mode", arg: 1, scope: !6184, file: !613, line: 906, type: !5)
!6188 = !DILocation(line: 906, column: 47, scope: !6184)
!6189 = !DILocalVariable(name: "from", arg: 2, scope: !6184, file: !613, line: 907, type: !390)
!6190 = !DILocation(line: 907, column: 23, scope: !6184)
!6191 = !DILocalVariable(name: "to", arg: 3, scope: !6184, file: !613, line: 907, type: !390)
!6192 = !DILocation(line: 907, column: 44, scope: !6184)
!6193 = !DILocation(line: 909, column: 30, scope: !6194)
!6194 = distinct !DILexicalBlock(scope: !6184, file: !613, line: 909, column: 7)
!6195 = !DILocation(line: 909, column: 7, scope: !6194)
!6196 = !DILocation(line: 909, column: 36, scope: !6194)
!6197 = !DILocation(line: 909, column: 7, scope: !6184)
!6198 = !DILocation(line: 910, column: 34, scope: !6194)
!6199 = !DILocation(line: 910, column: 5, scope: !6194)
!6200 = !DILocation(line: 911, column: 33, scope: !6184)
!6201 = !DILocation(line: 911, column: 10, scope: !6184)
!6202 = !DILocation(line: 911, column: 39, scope: !6184)
!6203 = !DILocation(line: 911, column: 45, scope: !6184)
!6204 = !DILocation(line: 911, column: 3, scope: !6184)
!6205 = distinct !DISubprogram(name: "ira_allocate_and_set_or_copy_costs", scope: !613, file: !613, line: 1207, type: !6206, scopeLine: 1209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6206 = !DISubroutineType(types: !6207)
!6207 = !{null, !6208, !390, !610, !609}
!6208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !609, size: 64)
!6209 = !DILocalVariable(name: "vec", arg: 1, scope: !6205, file: !613, line: 1207, type: !6208)
!6210 = !DILocation(line: 1207, column: 43, scope: !6205)
!6211 = !DILocalVariable(name: "cover_class", arg: 2, scope: !6205, file: !613, line: 1207, type: !390)
!6212 = !DILocation(line: 1207, column: 63, scope: !6205)
!6213 = !DILocalVariable(name: "val", arg: 3, scope: !6205, file: !613, line: 1208, type: !610)
!6214 = !DILocation(line: 1208, column: 13, scope: !6205)
!6215 = !DILocalVariable(name: "src", arg: 4, scope: !6205, file: !613, line: 1208, type: !609)
!6216 = !DILocation(line: 1208, column: 23, scope: !6205)
!6217 = !DILocalVariable(name: "i", scope: !6205, file: !613, line: 1210, type: !610)
!6218 = !DILocation(line: 1210, column: 7, scope: !6205)
!6219 = !DILocalVariable(name: "reg_costs", scope: !6205, file: !613, line: 1210, type: !609)
!6220 = !DILocation(line: 1210, column: 11, scope: !6205)
!6221 = !DILocalVariable(name: "len", scope: !6205, file: !613, line: 1211, type: !610)
!6222 = !DILocation(line: 1211, column: 7, scope: !6205)
!6223 = !DILocation(line: 1213, column: 8, scope: !6224)
!6224 = distinct !DILexicalBlock(scope: !6205, file: !613, line: 1213, column: 7)
!6225 = !DILocation(line: 1213, column: 7, scope: !6224)
!6226 = !DILocation(line: 1213, column: 12, scope: !6224)
!6227 = !DILocation(line: 1213, column: 7, scope: !6205)
!6228 = !DILocation(line: 1214, column: 5, scope: !6224)
!6229 = !DILocation(line: 1215, column: 48, scope: !6205)
!6230 = !DILocation(line: 1215, column: 22, scope: !6205)
!6231 = !DILocation(line: 1215, column: 20, scope: !6205)
!6232 = !DILocation(line: 1215, column: 4, scope: !6205)
!6233 = !DILocation(line: 1215, column: 8, scope: !6205)
!6234 = !DILocation(line: 1216, column: 33, scope: !6205)
!6235 = !DILocation(line: 1216, column: 9, scope: !6205)
!6236 = !DILocation(line: 1216, column: 7, scope: !6205)
!6237 = !DILocation(line: 1217, column: 7, scope: !6238)
!6238 = distinct !DILexicalBlock(scope: !6205, file: !613, line: 1217, column: 7)
!6239 = !DILocation(line: 1217, column: 11, scope: !6238)
!6240 = !DILocation(line: 1217, column: 7, scope: !6205)
!6241 = !DILocation(line: 1218, column: 13, scope: !6238)
!6242 = !DILocation(line: 1218, column: 5, scope: !6238)
!6243 = !DILocation(line: 1218, column: 24, scope: !6238)
!6244 = !DILocation(line: 1218, column: 44, scope: !6238)
!6245 = !DILocation(line: 1218, column: 42, scope: !6238)
!6246 = !DILocation(line: 1221, column: 14, scope: !6247)
!6247 = distinct !DILexicalBlock(scope: !6248, file: !613, line: 1221, column: 7)
!6248 = distinct !DILexicalBlock(scope: !6238, file: !613, line: 1220, column: 5)
!6249 = !DILocation(line: 1221, column: 12, scope: !6247)
!6250 = !DILocation(line: 1221, column: 19, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !6247, file: !613, line: 1221, column: 7)
!6252 = !DILocation(line: 1221, column: 23, scope: !6251)
!6253 = !DILocation(line: 1221, column: 21, scope: !6251)
!6254 = !DILocation(line: 1221, column: 7, scope: !6247)
!6255 = !DILocation(line: 1222, column: 17, scope: !6251)
!6256 = !DILocation(line: 1222, column: 2, scope: !6251)
!6257 = !DILocation(line: 1222, column: 12, scope: !6251)
!6258 = !DILocation(line: 1222, column: 15, scope: !6251)
!6259 = !DILocation(line: 1221, column: 29, scope: !6251)
!6260 = !DILocation(line: 1221, column: 7, scope: !6251)
!6261 = distinct !{!6261, !6254, !6262}
!6262 = !DILocation(line: 1222, column: 17, scope: !6247)
!6263 = !DILocation(line: 1224, column: 1, scope: !6205)
!6264 = distinct !DISubprogram(name: "start_update_cost", scope: !3, file: !3, line: 195, type: !5837, scopeLine: 196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6265 = !DILocation(line: 197, column: 20, scope: !6264)
!6266 = !DILocation(line: 198, column: 21, scope: !6264)
!6267 = !DILocation(line: 199, column: 1, scope: !6264)
!6268 = distinct !DISubprogram(name: "ira_allocate_and_copy_costs", scope: !613, file: !613, line: 1172, type: !6269, scopeLine: 1173, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6269 = !DISubroutineType(types: !6270)
!6270 = !{null, !6208, !390, !609}
!6271 = !DILocalVariable(name: "vec", arg: 1, scope: !6268, file: !613, line: 1172, type: !6208)
!6272 = !DILocation(line: 1172, column: 36, scope: !6268)
!6273 = !DILocalVariable(name: "cover_class", arg: 2, scope: !6268, file: !613, line: 1172, type: !390)
!6274 = !DILocation(line: 1172, column: 56, scope: !6268)
!6275 = !DILocalVariable(name: "src", arg: 3, scope: !6268, file: !613, line: 1172, type: !609)
!6276 = !DILocation(line: 1172, column: 74, scope: !6268)
!6277 = !DILocalVariable(name: "len", scope: !6268, file: !613, line: 1174, type: !610)
!6278 = !DILocation(line: 1174, column: 7, scope: !6268)
!6279 = !DILocation(line: 1176, column: 8, scope: !6280)
!6280 = distinct !DILexicalBlock(scope: !6268, file: !613, line: 1176, column: 7)
!6281 = !DILocation(line: 1176, column: 7, scope: !6280)
!6282 = !DILocation(line: 1176, column: 12, scope: !6280)
!6283 = !DILocation(line: 1176, column: 20, scope: !6280)
!6284 = !DILocation(line: 1176, column: 23, scope: !6280)
!6285 = !DILocation(line: 1176, column: 27, scope: !6280)
!6286 = !DILocation(line: 1176, column: 7, scope: !6268)
!6287 = !DILocation(line: 1177, column: 5, scope: !6280)
!6288 = !DILocation(line: 1178, column: 36, scope: !6268)
!6289 = !DILocation(line: 1178, column: 10, scope: !6268)
!6290 = !DILocation(line: 1178, column: 4, scope: !6268)
!6291 = !DILocation(line: 1178, column: 8, scope: !6268)
!6292 = !DILocation(line: 1179, column: 33, scope: !6268)
!6293 = !DILocation(line: 1179, column: 9, scope: !6268)
!6294 = !DILocation(line: 1179, column: 7, scope: !6268)
!6295 = !DILocation(line: 1180, column: 12, scope: !6268)
!6296 = !DILocation(line: 1180, column: 11, scope: !6268)
!6297 = !DILocation(line: 1180, column: 3, scope: !6268)
!6298 = !DILocation(line: 1180, column: 17, scope: !6268)
!6299 = !DILocation(line: 1180, column: 37, scope: !6268)
!6300 = !DILocation(line: 1180, column: 35, scope: !6268)
!6301 = !DILocation(line: 1181, column: 1, scope: !6268)
!6302 = distinct !DISubprogram(name: "hard_reg_set_subset_p", scope: !1795, file: !1795, line: 115, type: !6303, scopeLine: 116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6303 = !DISubroutineType(types: !6304)
!6304 = !{!855, !6305, !6305}
!6305 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1794)
!6306 = !DILocalVariable(name: "x", arg: 1, scope: !6302, file: !1795, line: 115, type: !6305)
!6307 = !DILocation(line: 115, column: 43, scope: !6302)
!6308 = !DILocalVariable(name: "y", arg: 2, scope: !6302, file: !1795, line: 115, type: !6305)
!6309 = !DILocation(line: 115, column: 65, scope: !6302)
!6310 = !DILocation(line: 117, column: 11, scope: !6302)
!6311 = !DILocation(line: 117, column: 16, scope: !6302)
!6312 = !DILocation(line: 117, column: 15, scope: !6302)
!6313 = !DILocation(line: 117, column: 13, scope: !6302)
!6314 = !DILocation(line: 117, column: 19, scope: !6302)
!6315 = !DILocation(line: 117, column: 10, scope: !6302)
!6316 = !DILocation(line: 117, column: 3, scope: !6302)
!6317 = distinct !DISubprogram(name: "queue_update_cost", scope: !3, file: !3, line: 204, type: !6318, scopeLine: 205, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6318 = !DISubroutineType(types: !6319)
!6319 = !{null, !612, !610}
!6320 = !DILocalVariable(name: "allocno", arg: 1, scope: !6317, file: !3, line: 204, type: !612)
!6321 = !DILocation(line: 204, column: 34, scope: !6317)
!6322 = !DILocalVariable(name: "divisor", arg: 2, scope: !6317, file: !3, line: 204, type: !610)
!6323 = !DILocation(line: 204, column: 47, scope: !6317)
!6324 = !DILocalVariable(name: "elem", scope: !6317, file: !3, line: 206, type: !1852)
!6325 = !DILocation(line: 206, column: 34, scope: !6317)
!6326 = !DILocation(line: 208, column: 11, scope: !6317)
!6327 = !DILocation(line: 208, column: 35, scope: !6317)
!6328 = !DILocation(line: 208, column: 8, scope: !6317)
!6329 = !DILocation(line: 209, column: 7, scope: !6330)
!6330 = distinct !DILexicalBlock(scope: !6317, file: !3, line: 209, column: 7)
!6331 = !DILocation(line: 209, column: 13, scope: !6330)
!6332 = !DILocation(line: 209, column: 22, scope: !6330)
!6333 = !DILocation(line: 209, column: 19, scope: !6330)
!6334 = !DILocation(line: 210, column: 7, scope: !6330)
!6335 = !DILocation(line: 210, column: 10, scope: !6330)
!6336 = !DILocation(line: 210, column: 40, scope: !6330)
!6337 = !DILocation(line: 209, column: 7, scope: !6317)
!6338 = !DILocation(line: 212, column: 21, scope: !6339)
!6339 = distinct !DILexicalBlock(scope: !6330, file: !3, line: 211, column: 5)
!6340 = !DILocation(line: 212, column: 7, scope: !6339)
!6341 = !DILocation(line: 212, column: 13, scope: !6339)
!6342 = !DILocation(line: 212, column: 19, scope: !6339)
!6343 = !DILocation(line: 213, column: 23, scope: !6339)
!6344 = !DILocation(line: 213, column: 7, scope: !6339)
!6345 = !DILocation(line: 213, column: 13, scope: !6339)
!6346 = !DILocation(line: 213, column: 21, scope: !6339)
!6347 = !DILocation(line: 214, column: 7, scope: !6339)
!6348 = !DILocation(line: 214, column: 13, scope: !6339)
!6349 = !DILocation(line: 214, column: 18, scope: !6339)
!6350 = !DILocation(line: 215, column: 11, scope: !6351)
!6351 = distinct !DILexicalBlock(scope: !6339, file: !3, line: 215, column: 11)
!6352 = !DILocation(line: 215, column: 29, scope: !6351)
!6353 = !DILocation(line: 215, column: 11, scope: !6339)
!6354 = !DILocation(line: 216, column: 22, scope: !6351)
!6355 = !DILocation(line: 216, column: 20, scope: !6351)
!6356 = !DILocation(line: 216, column: 2, scope: !6351)
!6357 = !DILocation(line: 218, column: 33, scope: !6351)
!6358 = !DILocation(line: 218, column: 2, scope: !6351)
!6359 = !DILocation(line: 218, column: 26, scope: !6351)
!6360 = !DILocation(line: 218, column: 31, scope: !6351)
!6361 = !DILocation(line: 219, column: 32, scope: !6339)
!6362 = !DILocation(line: 219, column: 30, scope: !6339)
!6363 = !DILocation(line: 220, column: 5, scope: !6339)
!6364 = !DILocation(line: 221, column: 1, scope: !6317)
!6365 = distinct !DISubprogram(name: "update_conflict_hard_regno_costs", scope: !3, file: !3, line: 322, type: !6366, scopeLine: 324, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6366 = !DISubroutineType(types: !6367)
!6367 = !{null, !609, !390, !855}
!6368 = !DILocalVariable(name: "costs", arg: 1, scope: !6365, file: !3, line: 322, type: !609)
!6369 = !DILocation(line: 322, column: 40, scope: !6365)
!6370 = !DILocalVariable(name: "cover_class", arg: 2, scope: !6365, file: !3, line: 322, type: !390)
!6371 = !DILocation(line: 322, column: 62, scope: !6365)
!6372 = !DILocalVariable(name: "decr_p", arg: 3, scope: !6365, file: !3, line: 323, type: !855)
!6373 = !DILocation(line: 323, column: 12, scope: !6365)
!6374 = !DILocalVariable(name: "i", scope: !6365, file: !3, line: 325, type: !610)
!6375 = !DILocation(line: 325, column: 7, scope: !6365)
!6376 = !DILocalVariable(name: "cost", scope: !6365, file: !3, line: 325, type: !610)
!6377 = !DILocation(line: 325, column: 10, scope: !6365)
!6378 = !DILocalVariable(name: "class_size", scope: !6365, file: !3, line: 325, type: !610)
!6379 = !DILocation(line: 325, column: 16, scope: !6365)
!6380 = !DILocalVariable(name: "freq", scope: !6365, file: !3, line: 325, type: !610)
!6381 = !DILocation(line: 325, column: 28, scope: !6365)
!6382 = !DILocalVariable(name: "mult", scope: !6365, file: !3, line: 325, type: !610)
!6383 = !DILocation(line: 325, column: 34, scope: !6365)
!6384 = !DILocalVariable(name: "div", scope: !6365, file: !3, line: 325, type: !610)
!6385 = !DILocation(line: 325, column: 40, scope: !6365)
!6386 = !DILocalVariable(name: "divisor", scope: !6365, file: !3, line: 325, type: !610)
!6387 = !DILocation(line: 325, column: 45, scope: !6365)
!6388 = !DILocalVariable(name: "index", scope: !6365, file: !3, line: 326, type: !610)
!6389 = !DILocation(line: 326, column: 7, scope: !6365)
!6390 = !DILocalVariable(name: "hard_regno", scope: !6365, file: !3, line: 326, type: !610)
!6391 = !DILocation(line: 326, column: 14, scope: !6365)
!6392 = !DILocalVariable(name: "conflict_costs", scope: !6365, file: !3, line: 327, type: !609)
!6393 = !DILocation(line: 327, column: 8, scope: !6365)
!6394 = !DILocalVariable(name: "cont_p", scope: !6365, file: !3, line: 328, type: !855)
!6395 = !DILocation(line: 328, column: 8, scope: !6365)
!6396 = !DILocalVariable(name: "another_cover_class", scope: !6365, file: !3, line: 329, type: !390)
!6397 = !DILocation(line: 329, column: 18, scope: !6365)
!6398 = !DILocalVariable(name: "allocno", scope: !6365, file: !3, line: 330, type: !612)
!6399 = !DILocation(line: 330, column: 17, scope: !6365)
!6400 = !DILocalVariable(name: "another_allocno", scope: !6365, file: !3, line: 330, type: !612)
!6401 = !DILocation(line: 330, column: 26, scope: !6365)
!6402 = !DILocalVariable(name: "cp", scope: !6365, file: !3, line: 331, type: !1758)
!6403 = !DILocation(line: 331, column: 14, scope: !6365)
!6404 = !DILocalVariable(name: "next_cp", scope: !6365, file: !3, line: 331, type: !1758)
!6405 = !DILocation(line: 331, column: 18, scope: !6365)
!6406 = !DILocation(line: 333, column: 3, scope: !6365)
!6407 = !DILocation(line: 333, column: 10, scope: !6365)
!6408 = !DILocation(line: 334, column: 15, scope: !6409)
!6409 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 334, column: 5)
!6410 = !DILocation(line: 334, column: 13, scope: !6409)
!6411 = !DILocation(line: 334, column: 10, scope: !6409)
!6412 = !DILocation(line: 334, column: 41, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6409, file: !3, line: 334, column: 5)
!6414 = !DILocation(line: 334, column: 44, scope: !6413)
!6415 = !DILocation(line: 334, column: 5, scope: !6409)
!6416 = !DILocation(line: 336, column: 6, scope: !6417)
!6417 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 336, column: 6)
!6418 = distinct !DILexicalBlock(scope: !6413, file: !3, line: 335, column: 7)
!6419 = !DILocation(line: 336, column: 10, scope: !6417)
!6420 = !DILocation(line: 336, column: 19, scope: !6417)
!6421 = !DILocation(line: 336, column: 16, scope: !6417)
!6422 = !DILocation(line: 336, column: 6, scope: !6418)
!6423 = !DILocation(line: 338, column: 16, scope: !6424)
!6424 = distinct !DILexicalBlock(scope: !6417, file: !3, line: 337, column: 4)
!6425 = !DILocation(line: 338, column: 20, scope: !6424)
!6426 = !DILocation(line: 338, column: 14, scope: !6424)
!6427 = !DILocation(line: 339, column: 24, scope: !6424)
!6428 = !DILocation(line: 339, column: 28, scope: !6424)
!6429 = !DILocation(line: 339, column: 22, scope: !6424)
!6430 = !DILocation(line: 340, column: 4, scope: !6424)
!6431 = !DILocation(line: 341, column: 11, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6417, file: !3, line: 341, column: 11)
!6433 = !DILocation(line: 341, column: 15, scope: !6432)
!6434 = !DILocation(line: 341, column: 25, scope: !6432)
!6435 = !DILocation(line: 341, column: 22, scope: !6432)
!6436 = !DILocation(line: 341, column: 11, scope: !6417)
!6437 = !DILocation(line: 343, column: 16, scope: !6438)
!6438 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 342, column: 4)
!6439 = !DILocation(line: 343, column: 20, scope: !6438)
!6440 = !DILocation(line: 343, column: 14, scope: !6438)
!6441 = !DILocation(line: 344, column: 24, scope: !6438)
!6442 = !DILocation(line: 344, column: 28, scope: !6438)
!6443 = !DILocation(line: 344, column: 22, scope: !6438)
!6444 = !DILocation(line: 345, column: 4, scope: !6438)
!6445 = !DILocation(line: 347, column: 4, scope: !6432)
!6446 = !DILocation(line: 348, column: 25, scope: !6418)
!6447 = !DILocation(line: 348, column: 23, scope: !6418)
!6448 = !DILocation(line: 349, column: 37, scope: !6449)
!6449 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 349, column: 7)
!6450 = !DILocation(line: 349, column: 9, scope: !6449)
!6451 = !DILocation(line: 349, column: 50, scope: !6449)
!6452 = !DILocation(line: 350, column: 6, scope: !6449)
!6453 = !DILocation(line: 350, column: 9, scope: !6449)
!6454 = !DILocation(line: 351, column: 6, scope: !6449)
!6455 = !DILocation(line: 351, column: 9, scope: !6449)
!6456 = !DILocation(line: 349, column: 7, scope: !6418)
!6457 = !DILocation(line: 353, column: 4, scope: !6449)
!6458 = !DILocation(line: 354, column: 39, scope: !6418)
!6459 = !DILocation(line: 354, column: 15, scope: !6418)
!6460 = !DILocation(line: 354, column: 13, scope: !6418)
!6461 = !DILocation(line: 356, column: 6, scope: !6418)
!6462 = !DILocation(line: 357, column: 5, scope: !6418)
!6463 = !DILocation(line: 358, column: 5, scope: !6418)
!6464 = !DILocation(line: 355, column: 2, scope: !6418)
!6465 = !DILocation(line: 360, column: 6, scope: !6418)
!6466 = !DILocation(line: 360, column: 4, scope: !6418)
!6467 = !DILocation(line: 361, column: 6, scope: !6468)
!6468 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 361, column: 6)
!6469 = !DILocation(line: 361, column: 21, scope: !6468)
!6470 = !DILocation(line: 361, column: 6, scope: !6418)
!6471 = !DILocation(line: 362, column: 11, scope: !6468)
!6472 = !DILocation(line: 362, column: 4, scope: !6468)
!6473 = !DILocation(line: 365, column: 13, scope: !6474)
!6474 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 364, column: 4)
!6475 = !DILocation(line: 365, column: 17, scope: !6474)
!6476 = !DILocation(line: 365, column: 11, scope: !6474)
!6477 = !DILocation(line: 366, column: 13, scope: !6474)
!6478 = !DILocation(line: 366, column: 11, scope: !6474)
!6479 = !DILocation(line: 367, column: 10, scope: !6480)
!6480 = distinct !DILexicalBlock(scope: !6474, file: !3, line: 367, column: 10)
!6481 = !DILocation(line: 367, column: 15, scope: !6480)
!6482 = !DILocation(line: 367, column: 10, scope: !6474)
!6483 = !DILocation(line: 368, column: 13, scope: !6480)
!6484 = !DILocation(line: 368, column: 8, scope: !6480)
!6485 = !DILocation(line: 369, column: 12, scope: !6474)
!6486 = !DILocation(line: 369, column: 19, scope: !6474)
!6487 = !DILocation(line: 369, column: 17, scope: !6474)
!6488 = !DILocation(line: 369, column: 10, scope: !6474)
!6489 = !DILocation(line: 370, column: 13, scope: !6474)
!6490 = !DILocation(line: 371, column: 15, scope: !6491)
!6491 = distinct !DILexicalBlock(scope: !6474, file: !3, line: 371, column: 6)
!6492 = !DILocation(line: 371, column: 26, scope: !6491)
!6493 = !DILocation(line: 371, column: 13, scope: !6491)
!6494 = !DILocation(line: 371, column: 11, scope: !6491)
!6495 = !DILocation(line: 371, column: 31, scope: !6496)
!6496 = distinct !DILexicalBlock(scope: !6491, file: !3, line: 371, column: 6)
!6497 = !DILocation(line: 371, column: 33, scope: !6496)
!6498 = !DILocation(line: 371, column: 6, scope: !6491)
!6499 = !DILocation(line: 373, column: 36, scope: !6500)
!6500 = distinct !DILexicalBlock(scope: !6496, file: !3, line: 372, column: 8)
!6501 = !DILocation(line: 373, column: 16, scope: !6500)
!6502 = !DILocation(line: 373, column: 57, scope: !6500)
!6503 = !DILocation(line: 373, column: 14, scope: !6500)
!6504 = !DILocation(line: 375, column: 36, scope: !6500)
!6505 = !DILocation(line: 375, column: 11, scope: !6500)
!6506 = !DILocation(line: 375, column: 49, scope: !6500)
!6507 = !DILocation(line: 375, column: 9, scope: !6500)
!6508 = !DILocation(line: 376, column: 7, scope: !6509)
!6509 = distinct !DILexicalBlock(scope: !6500, file: !3, line: 376, column: 7)
!6510 = !DILocation(line: 376, column: 13, scope: !6509)
!6511 = !DILocation(line: 376, column: 7, scope: !6500)
!6512 = !DILocation(line: 377, column: 5, scope: !6509)
!6513 = !DILocation(line: 378, column: 10, scope: !6500)
!6514 = !DILocation(line: 378, column: 26, scope: !6500)
!6515 = !DILocation(line: 378, column: 31, scope: !6500)
!6516 = !DILocation(line: 378, column: 29, scope: !6500)
!6517 = !DILocation(line: 378, column: 38, scope: !6500)
!6518 = !DILocation(line: 378, column: 36, scope: !6500)
!6519 = !DILocation(line: 378, column: 8, scope: !6500)
!6520 = !DILocation(line: 379, column: 7, scope: !6521)
!6521 = distinct !DILexicalBlock(scope: !6500, file: !3, line: 379, column: 7)
!6522 = !DILocation(line: 379, column: 12, scope: !6521)
!6523 = !DILocation(line: 379, column: 7, scope: !6500)
!6524 = !DILocation(line: 380, column: 5, scope: !6521)
!6525 = !DILocation(line: 381, column: 10, scope: !6500)
!6526 = !DILocation(line: 382, column: 7, scope: !6527)
!6527 = distinct !DILexicalBlock(scope: !6500, file: !3, line: 382, column: 7)
!6528 = !DILocation(line: 382, column: 7, scope: !6500)
!6529 = !DILocation(line: 383, column: 13, scope: !6527)
!6530 = !DILocation(line: 383, column: 12, scope: !6527)
!6531 = !DILocation(line: 383, column: 10, scope: !6527)
!6532 = !DILocation(line: 383, column: 5, scope: !6527)
!6533 = !DILocation(line: 384, column: 19, scope: !6500)
!6534 = !DILocation(line: 384, column: 3, scope: !6500)
!6535 = !DILocation(line: 384, column: 9, scope: !6500)
!6536 = !DILocation(line: 384, column: 16, scope: !6500)
!6537 = !DILocation(line: 385, column: 8, scope: !6500)
!6538 = !DILocation(line: 371, column: 40, scope: !6496)
!6539 = !DILocation(line: 371, column: 6, scope: !6496)
!6540 = distinct !{!6540, !6498, !6541}
!6541 = !DILocation(line: 385, column: 8, scope: !6491)
!6542 = !DILocation(line: 388, column: 6, scope: !6543)
!6543 = distinct !DILexicalBlock(scope: !6418, file: !3, line: 388, column: 6)
!6544 = !DILocation(line: 389, column: 6, scope: !6543)
!6545 = !DILocation(line: 389, column: 9, scope: !6543)
!6546 = !DILocation(line: 389, column: 17, scope: !6543)
!6547 = !DILocation(line: 388, column: 6, scope: !6418)
!6548 = !DILocation(line: 393, column: 23, scope: !6543)
!6549 = !DILocation(line: 393, column: 40, scope: !6543)
!6550 = !DILocation(line: 393, column: 48, scope: !6543)
!6551 = !DILocation(line: 393, column: 4, scope: !6543)
!6552 = !DILocation(line: 394, column: 7, scope: !6418)
!6553 = !DILocation(line: 334, column: 58, scope: !6413)
!6554 = !DILocation(line: 334, column: 56, scope: !6413)
!6555 = !DILocation(line: 334, column: 5, scope: !6413)
!6556 = distinct !{!6556, !6415, !6557}
!6557 = !DILocation(line: 394, column: 7, scope: !6409)
!6558 = distinct !{!6558, !6406, !6559}
!6559 = !DILocation(line: 394, column: 7, scope: !6365)
!6560 = !DILocation(line: 395, column: 1, scope: !6365)
!6561 = distinct !DISubprogram(name: "ira_hard_reg_not_in_set_p", scope: !613, file: !613, line: 1135, type: !6562, scopeLine: 1137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6562 = !DISubroutineType(types: !6563)
!6563 = !{!855, !610, !5, !1794}
!6564 = !DILocalVariable(name: "hard_regno", arg: 1, scope: !6561, file: !613, line: 1135, type: !610)
!6565 = !DILocation(line: 1135, column: 32, scope: !6561)
!6566 = !DILocalVariable(name: "mode", arg: 2, scope: !6561, file: !613, line: 1135, type: !5)
!6567 = !DILocation(line: 1135, column: 62, scope: !6561)
!6568 = !DILocalVariable(name: "hard_regset", arg: 3, scope: !6561, file: !613, line: 1136, type: !1794)
!6569 = !DILocation(line: 1136, column: 20, scope: !6561)
!6570 = !DILocalVariable(name: "i", scope: !6561, file: !613, line: 1138, type: !610)
!6571 = !DILocation(line: 1138, column: 7, scope: !6561)
!6572 = !DILocation(line: 1141, column: 29, scope: !6573)
!6573 = distinct !DILexicalBlock(scope: !6561, file: !613, line: 1141, column: 3)
!6574 = !DILocation(line: 1141, column: 12, scope: !6573)
!6575 = !DILocation(line: 1141, column: 41, scope: !6573)
!6576 = !DILocation(line: 1141, column: 47, scope: !6573)
!6577 = !DILocation(line: 1141, column: 10, scope: !6573)
!6578 = !DILocation(line: 1141, column: 8, scope: !6573)
!6579 = !DILocation(line: 1141, column: 52, scope: !6580)
!6580 = distinct !DILexicalBlock(scope: !6573, file: !613, line: 1141, column: 3)
!6581 = !DILocation(line: 1141, column: 54, scope: !6580)
!6582 = !DILocation(line: 1141, column: 3, scope: !6573)
!6583 = !DILocation(line: 1142, column: 9, scope: !6584)
!6584 = distinct !DILexicalBlock(scope: !6580, file: !613, line: 1142, column: 9)
!6585 = !DILocation(line: 1142, column: 9, scope: !6580)
!6586 = !DILocation(line: 1143, column: 7, scope: !6584)
!6587 = !DILocation(line: 1141, column: 61, scope: !6580)
!6588 = !DILocation(line: 1141, column: 3, scope: !6580)
!6589 = distinct !{!6589, !6582, !6590}
!6590 = !DILocation(line: 1143, column: 14, scope: !6573)
!6591 = !DILocation(line: 1144, column: 3, scope: !6561)
!6592 = !DILocation(line: 1145, column: 1, scope: !6561)
!6593 = distinct !DISubprogram(name: "allocno_cost_compare_func", scope: !3, file: !3, line: 400, type: !1182, scopeLine: 401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6594 = !DILocalVariable(name: "v1p", arg: 1, scope: !6593, file: !3, line: 400, type: !1177)
!6595 = !DILocation(line: 400, column: 40, scope: !6593)
!6596 = !DILocalVariable(name: "v2p", arg: 2, scope: !6593, file: !3, line: 400, type: !1177)
!6597 = !DILocation(line: 400, column: 57, scope: !6593)
!6598 = !DILocalVariable(name: "p1", scope: !6593, file: !3, line: 402, type: !612)
!6599 = !DILocation(line: 402, column: 17, scope: !6593)
!6600 = !DILocation(line: 402, column: 47, scope: !6593)
!6601 = !DILocation(line: 402, column: 23, scope: !6593)
!6602 = !DILocation(line: 402, column: 22, scope: !6593)
!6603 = !DILocalVariable(name: "p2", scope: !6593, file: !3, line: 403, type: !612)
!6604 = !DILocation(line: 403, column: 17, scope: !6593)
!6605 = !DILocation(line: 403, column: 47, scope: !6593)
!6606 = !DILocation(line: 403, column: 23, scope: !6593)
!6607 = !DILocation(line: 403, column: 22, scope: !6593)
!6608 = !DILocalVariable(name: "c1", scope: !6593, file: !3, line: 404, type: !610)
!6609 = !DILocation(line: 404, column: 7, scope: !6593)
!6610 = !DILocalVariable(name: "c2", scope: !6593, file: !3, line: 404, type: !610)
!6611 = !DILocation(line: 404, column: 11, scope: !6593)
!6612 = !DILocation(line: 406, column: 8, scope: !6593)
!6613 = !DILocation(line: 406, column: 43, scope: !6593)
!6614 = !DILocation(line: 406, column: 41, scope: !6593)
!6615 = !DILocation(line: 406, column: 6, scope: !6593)
!6616 = !DILocation(line: 407, column: 8, scope: !6593)
!6617 = !DILocation(line: 407, column: 43, scope: !6593)
!6618 = !DILocation(line: 407, column: 41, scope: !6593)
!6619 = !DILocation(line: 407, column: 6, scope: !6593)
!6620 = !DILocation(line: 408, column: 7, scope: !6621)
!6621 = distinct !DILexicalBlock(scope: !6593, file: !3, line: 408, column: 7)
!6622 = !DILocation(line: 408, column: 12, scope: !6621)
!6623 = !DILocation(line: 408, column: 10, scope: !6621)
!6624 = !DILocation(line: 408, column: 7, scope: !6593)
!6625 = !DILocation(line: 409, column: 12, scope: !6621)
!6626 = !DILocation(line: 409, column: 17, scope: !6621)
!6627 = !DILocation(line: 409, column: 15, scope: !6621)
!6628 = !DILocation(line: 409, column: 5, scope: !6621)
!6629 = !DILocation(line: 413, column: 10, scope: !6593)
!6630 = !DILocation(line: 413, column: 29, scope: !6593)
!6631 = !DILocation(line: 413, column: 27, scope: !6593)
!6632 = !DILocation(line: 413, column: 3, scope: !6593)
!6633 = !DILocation(line: 414, column: 1, scope: !6593)
!6634 = distinct !DISubprogram(name: "VEC_ira_allocno_t_heap_safe_push", scope: !613, file: !613, line: 68, type: !6635, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6635 = !DISubroutineType(types: !6636)
!6636 = !{!611, !6637, !612}
!6637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1834, size: 64)
!6638 = !DILocalVariable(name: "vec_", arg: 1, scope: !6634, file: !613, line: 68, type: !6637)
!6639 = !DILocation(line: 68, column: 1, scope: !6634)
!6640 = !DILocalVariable(name: "obj_", arg: 2, scope: !6634, file: !613, line: 68, type: !612)
!6641 = distinct !DISubprogram(name: "print_coalesced_allocno", scope: !3, file: !3, line: 418, type: !2734, scopeLine: 419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6642 = !DILocalVariable(name: "allocno", arg: 1, scope: !6641, file: !3, line: 418, type: !612)
!6643 = !DILocation(line: 418, column: 40, scope: !6641)
!6644 = !DILocalVariable(name: "a", scope: !6641, file: !3, line: 420, type: !612)
!6645 = !DILocation(line: 420, column: 17, scope: !6641)
!6646 = !DILocation(line: 422, column: 12, scope: !6647)
!6647 = distinct !DILexicalBlock(scope: !6641, file: !3, line: 422, column: 3)
!6648 = !DILocation(line: 422, column: 10, scope: !6647)
!6649 = !DILocation(line: 422, column: 8, scope: !6647)
!6650 = !DILocation(line: 425, column: 35, scope: !6651)
!6651 = distinct !DILexicalBlock(scope: !6652, file: !3, line: 424, column: 5)
!6652 = distinct !DILexicalBlock(scope: !6647, file: !3, line: 422, column: 3)
!6653 = !DILocation(line: 425, column: 7, scope: !6651)
!6654 = !DILocation(line: 426, column: 11, scope: !6655)
!6655 = distinct !DILexicalBlock(scope: !6651, file: !3, line: 426, column: 11)
!6656 = !DILocation(line: 426, column: 16, scope: !6655)
!6657 = !DILocation(line: 426, column: 13, scope: !6655)
!6658 = !DILocation(line: 426, column: 11, scope: !6651)
!6659 = !DILocation(line: 427, column: 2, scope: !6655)
!6660 = !DILocation(line: 428, column: 16, scope: !6651)
!6661 = !DILocation(line: 428, column: 7, scope: !6651)
!6662 = !DILocation(line: 429, column: 5, scope: !6651)
!6663 = !DILocation(line: 423, column: 12, scope: !6652)
!6664 = !DILocation(line: 423, column: 10, scope: !6652)
!6665 = !DILocation(line: 422, column: 3, scope: !6652)
!6666 = distinct !{!6666, !6667, !6668}
!6667 = !DILocation(line: 422, column: 3, scope: !6647)
!6668 = !DILocation(line: 429, column: 5, scope: !6647)
!6669 = !DILocation(line: 430, column: 1, scope: !6641)
!6670 = distinct !DISubprogram(name: "get_next_update_cost", scope: !3, file: !3, line: 227, type: !6671, scopeLine: 228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6671 = !DISubroutineType(types: !6672)
!6672 = !{!855, !611, !609}
!6673 = !DILocalVariable(name: "allocno", arg: 1, scope: !6670, file: !3, line: 227, type: !611)
!6674 = !DILocation(line: 227, column: 38, scope: !6670)
!6675 = !DILocalVariable(name: "divisor", arg: 2, scope: !6670, file: !3, line: 227, type: !609)
!6676 = !DILocation(line: 227, column: 52, scope: !6670)
!6677 = !DILocalVariable(name: "elem", scope: !6670, file: !3, line: 229, type: !1852)
!6678 = !DILocation(line: 229, column: 34, scope: !6670)
!6679 = !DILocation(line: 231, column: 7, scope: !6680)
!6680 = distinct !DILexicalBlock(scope: !6670, file: !3, line: 231, column: 7)
!6681 = !DILocation(line: 231, column: 25, scope: !6680)
!6682 = !DILocation(line: 231, column: 7, scope: !6670)
!6683 = !DILocation(line: 232, column: 5, scope: !6680)
!6684 = !DILocation(line: 234, column: 14, scope: !6670)
!6685 = !DILocation(line: 234, column: 4, scope: !6670)
!6686 = !DILocation(line: 234, column: 12, scope: !6670)
!6687 = !DILocation(line: 235, column: 11, scope: !6670)
!6688 = !DILocation(line: 235, column: 35, scope: !6670)
!6689 = !DILocation(line: 235, column: 8, scope: !6670)
!6690 = !DILocation(line: 236, column: 14, scope: !6670)
!6691 = !DILocation(line: 236, column: 20, scope: !6670)
!6692 = !DILocation(line: 236, column: 4, scope: !6670)
!6693 = !DILocation(line: 236, column: 12, scope: !6670)
!6694 = !DILocation(line: 237, column: 23, scope: !6670)
!6695 = !DILocation(line: 237, column: 29, scope: !6670)
!6696 = !DILocation(line: 237, column: 21, scope: !6670)
!6697 = !DILocation(line: 238, column: 3, scope: !6670)
!6698 = !DILocation(line: 239, column: 1, scope: !6670)
!6699 = distinct !DISubprogram(name: "VEC_ira_allocno_t_heap_reserve", scope: !613, file: !613, line: 68, type: !6700, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6700 = !DISubroutineType(types: !6701)
!6701 = !{!610, !6637, !610}
!6702 = !DILocalVariable(name: "vec_", arg: 1, scope: !6699, file: !613, line: 68, type: !6637)
!6703 = !DILocation(line: 68, column: 1, scope: !6699)
!6704 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6699, file: !613, line: 68, type: !610)
!6705 = !DILocalVariable(name: "extend", scope: !6699, file: !613, line: 68, type: !610)
!6706 = !DILocation(line: 68, column: 1, scope: !6707)
!6707 = distinct !DILexicalBlock(scope: !6699, file: !613, line: 68, column: 1)
!6708 = distinct !DISubprogram(name: "VEC_ira_allocno_t_base_quick_push", scope: !613, file: !613, line: 67, type: !6709, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6709 = !DISubroutineType(types: !6710)
!6710 = !{!611, !6711, !612}
!6711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1839, size: 64)
!6712 = !DILocalVariable(name: "vec_", arg: 1, scope: !6708, file: !613, line: 67, type: !6711)
!6713 = !DILocation(line: 67, column: 1, scope: !6708)
!6714 = !DILocalVariable(name: "obj_", arg: 2, scope: !6708, file: !613, line: 67, type: !612)
!6715 = !DILocalVariable(name: "slot_", scope: !6708, file: !613, line: 67, type: !611)
!6716 = distinct !DISubprogram(name: "VEC_ira_allocno_t_base_space", scope: !613, file: !613, line: 67, type: !6717, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6717 = !DISubroutineType(types: !6718)
!6718 = !{!610, !6711, !610}
!6719 = !DILocalVariable(name: "vec_", arg: 1, scope: !6716, file: !613, line: 67, type: !6711)
!6720 = !DILocation(line: 67, column: 1, scope: !6716)
!6721 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6716, file: !613, line: 67, type: !610)
!6722 = distinct !DISubprogram(name: "copy_freq_compare_func", scope: !3, file: !3, line: 1515, type: !1182, scopeLine: 1516, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6723 = !DILocalVariable(name: "v1p", arg: 1, scope: !6722, file: !3, line: 1515, type: !1177)
!6724 = !DILocation(line: 1515, column: 37, scope: !6722)
!6725 = !DILocalVariable(name: "v2p", arg: 2, scope: !6722, file: !3, line: 1515, type: !1177)
!6726 = !DILocation(line: 1515, column: 54, scope: !6722)
!6727 = !DILocalVariable(name: "cp1", scope: !6722, file: !3, line: 1517, type: !1758)
!6728 = !DILocation(line: 1517, column: 14, scope: !6722)
!6729 = !DILocation(line: 1517, column: 42, scope: !6722)
!6730 = !DILocation(line: 1517, column: 21, scope: !6722)
!6731 = !DILocation(line: 1517, column: 20, scope: !6722)
!6732 = !DILocalVariable(name: "cp2", scope: !6722, file: !3, line: 1517, type: !1758)
!6733 = !DILocation(line: 1517, column: 47, scope: !6722)
!6734 = !DILocation(line: 1517, column: 75, scope: !6722)
!6735 = !DILocation(line: 1517, column: 54, scope: !6722)
!6736 = !DILocation(line: 1517, column: 53, scope: !6722)
!6737 = !DILocalVariable(name: "pri1", scope: !6722, file: !3, line: 1518, type: !610)
!6738 = !DILocation(line: 1518, column: 7, scope: !6722)
!6739 = !DILocalVariable(name: "pri2", scope: !6722, file: !3, line: 1518, type: !610)
!6740 = !DILocation(line: 1518, column: 13, scope: !6722)
!6741 = !DILocation(line: 1520, column: 10, scope: !6722)
!6742 = !DILocation(line: 1520, column: 15, scope: !6722)
!6743 = !DILocation(line: 1520, column: 8, scope: !6722)
!6744 = !DILocation(line: 1521, column: 10, scope: !6722)
!6745 = !DILocation(line: 1521, column: 15, scope: !6722)
!6746 = !DILocation(line: 1521, column: 8, scope: !6722)
!6747 = !DILocation(line: 1522, column: 7, scope: !6748)
!6748 = distinct !DILexicalBlock(scope: !6722, file: !3, line: 1522, column: 7)
!6749 = !DILocation(line: 1522, column: 14, scope: !6748)
!6750 = !DILocation(line: 1522, column: 12, scope: !6748)
!6751 = !DILocation(line: 1522, column: 7, scope: !6722)
!6752 = !DILocation(line: 1523, column: 12, scope: !6748)
!6753 = !DILocation(line: 1523, column: 19, scope: !6748)
!6754 = !DILocation(line: 1523, column: 17, scope: !6748)
!6755 = !DILocation(line: 1523, column: 5, scope: !6748)
!6756 = !DILocation(line: 1527, column: 10, scope: !6722)
!6757 = !DILocation(line: 1527, column: 15, scope: !6722)
!6758 = !DILocation(line: 1527, column: 21, scope: !6722)
!6759 = !DILocation(line: 1527, column: 26, scope: !6722)
!6760 = !DILocation(line: 1527, column: 19, scope: !6722)
!6761 = !DILocation(line: 1527, column: 3, scope: !6722)
!6762 = !DILocation(line: 1528, column: 1, scope: !6722)
!6763 = distinct !DISubprogram(name: "coalesced_allocno_conflict_p", scope: !3, file: !3, line: 1561, type: !6764, scopeLine: 1563, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6764 = !DISubroutineType(types: !6765)
!6765 = !{!855, !612, !612, !855}
!6766 = !DILocalVariable(name: "a1", arg: 1, scope: !6763, file: !3, line: 1561, type: !612)
!6767 = !DILocation(line: 1561, column: 45, scope: !6763)
!6768 = !DILocalVariable(name: "a2", arg: 2, scope: !6763, file: !3, line: 1561, type: !612)
!6769 = !DILocation(line: 1561, column: 63, scope: !6763)
!6770 = !DILocalVariable(name: "reload_p", arg: 3, scope: !6763, file: !3, line: 1562, type: !855)
!6771 = !DILocation(line: 1562, column: 15, scope: !6763)
!6772 = !DILocalVariable(name: "a", scope: !6763, file: !3, line: 1564, type: !612)
!6773 = !DILocation(line: 1564, column: 17, scope: !6763)
!6774 = !DILocalVariable(name: "conflict_allocno", scope: !6763, file: !3, line: 1564, type: !612)
!6775 = !DILocation(line: 1564, column: 20, scope: !6763)
!6776 = !DILocalVariable(name: "aci", scope: !6763, file: !3, line: 1565, type: !2182)
!6777 = !DILocation(line: 1565, column: 33, scope: !6763)
!6778 = !DILocation(line: 1567, column: 7, scope: !6779)
!6779 = distinct !DILexicalBlock(scope: !6763, file: !3, line: 1567, column: 7)
!6780 = !DILocation(line: 1567, column: 7, scope: !6763)
!6781 = !DILocation(line: 1569, column: 21, scope: !6782)
!6782 = distinct !DILexicalBlock(scope: !6779, file: !3, line: 1568, column: 5)
!6783 = !DILocation(line: 1569, column: 7, scope: !6782)
!6784 = !DILocation(line: 1570, column: 16, scope: !6785)
!6785 = distinct !DILexicalBlock(scope: !6782, file: !3, line: 1570, column: 7)
!6786 = !DILocation(line: 1570, column: 14, scope: !6785)
!6787 = !DILocation(line: 1570, column: 12, scope: !6785)
!6788 = !DILocation(line: 1573, column: 20, scope: !6789)
!6789 = distinct !DILexicalBlock(scope: !6790, file: !3, line: 1572, column: 2)
!6790 = distinct !DILexicalBlock(scope: !6785, file: !3, line: 1570, column: 7)
!6791 = !DILocation(line: 1573, column: 56, scope: !6789)
!6792 = !DILocation(line: 1573, column: 4, scope: !6789)
!6793 = !DILocation(line: 1574, column: 8, scope: !6794)
!6794 = distinct !DILexicalBlock(scope: !6789, file: !3, line: 1574, column: 8)
!6795 = !DILocation(line: 1574, column: 13, scope: !6794)
!6796 = !DILocation(line: 1574, column: 10, scope: !6794)
!6797 = !DILocation(line: 1574, column: 8, scope: !6789)
!6798 = !DILocation(line: 1575, column: 6, scope: !6794)
!6799 = !DILocation(line: 1576, column: 2, scope: !6789)
!6800 = !DILocation(line: 1571, column: 9, scope: !6790)
!6801 = !DILocation(line: 1571, column: 7, scope: !6790)
!6802 = !DILocation(line: 1570, column: 7, scope: !6790)
!6803 = distinct !{!6803, !6804, !6805}
!6804 = !DILocation(line: 1570, column: 7, scope: !6785)
!6805 = !DILocation(line: 1576, column: 2, scope: !6785)
!6806 = !DILocation(line: 1577, column: 5, scope: !6782)
!6807 = !DILocation(line: 1578, column: 12, scope: !6808)
!6808 = distinct !DILexicalBlock(scope: !6763, file: !3, line: 1578, column: 3)
!6809 = !DILocation(line: 1578, column: 10, scope: !6808)
!6810 = !DILocation(line: 1578, column: 8, scope: !6808)
!6811 = !DILocation(line: 1581, column: 11, scope: !6812)
!6812 = distinct !DILexicalBlock(scope: !6813, file: !3, line: 1581, column: 11)
!6813 = distinct !DILexicalBlock(scope: !6814, file: !3, line: 1580, column: 5)
!6814 = distinct !DILexicalBlock(scope: !6808, file: !3, line: 1578, column: 3)
!6815 = !DILocation(line: 1581, column: 11, scope: !6813)
!6816 = !DILocation(line: 1583, column: 28, scope: !6817)
!6817 = distinct !DILexicalBlock(scope: !6818, file: !3, line: 1583, column: 4)
!6818 = distinct !DILexicalBlock(scope: !6812, file: !3, line: 1582, column: 2)
!6819 = !DILocation(line: 1583, column: 26, scope: !6817)
!6820 = !DILocation(line: 1583, column: 9, scope: !6817)
!6821 = !DILocation(line: 1587, column: 53, scope: !6822)
!6822 = distinct !DILexicalBlock(scope: !6823, file: !3, line: 1587, column: 12)
!6823 = distinct !DILexicalBlock(scope: !6824, file: !3, line: 1586, column: 6)
!6824 = distinct !DILexicalBlock(scope: !6817, file: !3, line: 1583, column: 4)
!6825 = !DILocation(line: 1588, column: 11, scope: !6822)
!6826 = !DILocation(line: 1587, column: 12, scope: !6822)
!6827 = !DILocation(line: 1587, column: 12, scope: !6823)
!6828 = !DILocation(line: 1589, column: 3, scope: !6822)
!6829 = !DILocation(line: 1590, column: 12, scope: !6830)
!6830 = distinct !DILexicalBlock(scope: !6823, file: !3, line: 1590, column: 12)
!6831 = !DILocation(line: 1590, column: 32, scope: !6830)
!6832 = !DILocation(line: 1590, column: 29, scope: !6830)
!6833 = !DILocation(line: 1590, column: 12, scope: !6823)
!6834 = !DILocation(line: 1591, column: 3, scope: !6830)
!6835 = !DILocation(line: 1592, column: 6, scope: !6823)
!6836 = !DILocation(line: 1585, column: 6, scope: !6824)
!6837 = !DILocation(line: 1585, column: 4, scope: !6824)
!6838 = !DILocation(line: 1583, column: 4, scope: !6824)
!6839 = distinct !{!6839, !6840, !6841}
!6840 = !DILocation(line: 1583, column: 4, scope: !6817)
!6841 = !DILocation(line: 1592, column: 6, scope: !6817)
!6842 = !DILocation(line: 1593, column: 2, scope: !6818)
!6843 = !DILocation(line: 1596, column: 4, scope: !6844)
!6844 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 1596, column: 4)
!6845 = distinct !DILexicalBlock(scope: !6812, file: !3, line: 1595, column: 2)
!6846 = !DILocation(line: 1596, column: 4, scope: !6847)
!6847 = distinct !DILexicalBlock(scope: !6844, file: !3, line: 1596, column: 4)
!6848 = !DILocation(line: 1597, column: 10, scope: !6849)
!6849 = distinct !DILexicalBlock(scope: !6847, file: !3, line: 1597, column: 10)
!6850 = !DILocation(line: 1597, column: 30, scope: !6849)
!6851 = !DILocation(line: 1597, column: 27, scope: !6849)
!6852 = !DILocation(line: 1598, column: 3, scope: !6849)
!6853 = !DILocation(line: 1598, column: 7, scope: !6849)
!6854 = !DILocation(line: 1599, column: 7, scope: !6849)
!6855 = !DILocation(line: 1599, column: 24, scope: !6849)
!6856 = !DILocation(line: 1600, column: 10, scope: !6849)
!6857 = !DILocation(line: 1599, column: 10, scope: !6849)
!6858 = !DILocation(line: 1597, column: 10, scope: !6847)
!6859 = !DILocation(line: 1601, column: 8, scope: !6849)
!6860 = !DILocation(line: 1600, column: 41, scope: !6849)
!6861 = distinct !{!6861, !6843, !6862}
!6862 = !DILocation(line: 1601, column: 15, scope: !6844)
!6863 = !DILocation(line: 1603, column: 11, scope: !6864)
!6864 = distinct !DILexicalBlock(scope: !6813, file: !3, line: 1603, column: 11)
!6865 = !DILocation(line: 1603, column: 16, scope: !6864)
!6866 = !DILocation(line: 1603, column: 13, scope: !6864)
!6867 = !DILocation(line: 1603, column: 11, scope: !6813)
!6868 = !DILocation(line: 1604, column: 2, scope: !6864)
!6869 = !DILocation(line: 1605, column: 5, scope: !6813)
!6870 = !DILocation(line: 1579, column: 12, scope: !6814)
!6871 = !DILocation(line: 1579, column: 10, scope: !6814)
!6872 = !DILocation(line: 1578, column: 3, scope: !6814)
!6873 = distinct !{!6873, !6874, !6875}
!6874 = !DILocation(line: 1578, column: 3, scope: !6808)
!6875 = !DILocation(line: 1605, column: 5, scope: !6808)
!6876 = !DILocation(line: 1606, column: 3, scope: !6763)
!6877 = !DILocation(line: 1607, column: 1, scope: !6763)
!6878 = distinct !DISubprogram(name: "merge_allocnos", scope: !3, file: !3, line: 1534, type: !6879, scopeLine: 1535, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6879 = !DISubroutineType(types: !6880)
!6880 = !{null, !612, !612}
!6881 = !DILocalVariable(name: "a1", arg: 1, scope: !6878, file: !3, line: 1534, type: !612)
!6882 = !DILocation(line: 1534, column: 31, scope: !6878)
!6883 = !DILocalVariable(name: "a2", arg: 2, scope: !6878, file: !3, line: 1534, type: !612)
!6884 = !DILocation(line: 1534, column: 49, scope: !6878)
!6885 = !DILocalVariable(name: "a", scope: !6878, file: !3, line: 1536, type: !612)
!6886 = !DILocation(line: 1536, column: 17, scope: !6878)
!6887 = !DILocalVariable(name: "first", scope: !6878, file: !3, line: 1536, type: !612)
!6888 = !DILocation(line: 1536, column: 20, scope: !6878)
!6889 = !DILocalVariable(name: "last", scope: !6878, file: !3, line: 1536, type: !612)
!6890 = !DILocation(line: 1536, column: 27, scope: !6878)
!6891 = !DILocalVariable(name: "next", scope: !6878, file: !3, line: 1536, type: !612)
!6892 = !DILocation(line: 1536, column: 33, scope: !6878)
!6893 = !DILocation(line: 1538, column: 11, scope: !6878)
!6894 = !DILocation(line: 1538, column: 9, scope: !6878)
!6895 = !DILocation(line: 1539, column: 7, scope: !6896)
!6896 = distinct !DILexicalBlock(scope: !6878, file: !3, line: 1539, column: 7)
!6897 = !DILocation(line: 1539, column: 16, scope: !6896)
!6898 = !DILocation(line: 1539, column: 13, scope: !6896)
!6899 = !DILocation(line: 1539, column: 7, scope: !6878)
!6900 = !DILocation(line: 1540, column: 5, scope: !6896)
!6901 = !DILocation(line: 1541, column: 15, scope: !6902)
!6902 = distinct !DILexicalBlock(scope: !6878, file: !3, line: 1541, column: 3)
!6903 = !DILocation(line: 1541, column: 13, scope: !6902)
!6904 = !DILocation(line: 1541, column: 23, scope: !6902)
!6905 = !DILocation(line: 1541, column: 21, scope: !6902)
!6906 = !DILocation(line: 1541, column: 8, scope: !6902)
!6907 = !DILocation(line: 1544, column: 45, scope: !6908)
!6908 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 1543, column: 5)
!6909 = distinct !DILexicalBlock(scope: !6902, file: !3, line: 1541, column: 3)
!6910 = !DILocation(line: 1544, column: 7, scope: !6908)
!6911 = !DILocation(line: 1544, column: 43, scope: !6908)
!6912 = !DILocation(line: 1545, column: 11, scope: !6913)
!6913 = distinct !DILexicalBlock(scope: !6908, file: !3, line: 1545, column: 11)
!6914 = !DILocation(line: 1545, column: 16, scope: !6913)
!6915 = !DILocation(line: 1545, column: 13, scope: !6913)
!6916 = !DILocation(line: 1545, column: 11, scope: !6908)
!6917 = !DILocation(line: 1546, column: 2, scope: !6913)
!6918 = !DILocation(line: 1547, column: 14, scope: !6908)
!6919 = !DILocation(line: 1547, column: 12, scope: !6908)
!6920 = !DILocation(line: 1548, column: 5, scope: !6908)
!6921 = !DILocation(line: 1542, column: 12, scope: !6909)
!6922 = !DILocation(line: 1542, column: 10, scope: !6909)
!6923 = !DILocation(line: 1541, column: 3, scope: !6909)
!6924 = distinct !{!6924, !6925, !6926}
!6925 = !DILocation(line: 1541, column: 3, scope: !6902)
!6926 = !DILocation(line: 1548, column: 5, scope: !6902)
!6927 = !DILocation(line: 1549, column: 10, scope: !6878)
!6928 = !DILocation(line: 1549, column: 8, scope: !6878)
!6929 = !DILocation(line: 1550, column: 44, scope: !6878)
!6930 = !DILocation(line: 1550, column: 3, scope: !6878)
!6931 = !DILocation(line: 1550, column: 42, scope: !6878)
!6932 = !DILocation(line: 1551, column: 43, scope: !6878)
!6933 = !DILocation(line: 1551, column: 3, scope: !6878)
!6934 = !DILocation(line: 1551, column: 41, scope: !6878)
!6935 = !DILocation(line: 1552, column: 1, scope: !6878)
!6936 = distinct !DISubprogram(name: "slot_coalesced_allocno_live_ranges_intersect_p", scope: !3, file: !3, line: 2528, type: !6937, scopeLine: 2529, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6937 = !DISubroutineType(types: !6938)
!6938 = !{!855, !612, !610}
!6939 = !DILocalVariable(name: "allocno", arg: 1, scope: !6936, file: !3, line: 2528, type: !612)
!6940 = !DILocation(line: 2528, column: 63, scope: !6936)
!6941 = !DILocalVariable(name: "n", arg: 2, scope: !6936, file: !3, line: 2528, type: !610)
!6942 = !DILocation(line: 2528, column: 76, scope: !6936)
!6943 = !DILocalVariable(name: "a", scope: !6936, file: !3, line: 2530, type: !612)
!6944 = !DILocation(line: 2530, column: 17, scope: !6936)
!6945 = !DILocation(line: 2532, column: 12, scope: !6946)
!6946 = distinct !DILexicalBlock(scope: !6936, file: !3, line: 2532, column: 3)
!6947 = !DILocation(line: 2532, column: 10, scope: !6946)
!6948 = !DILocation(line: 2532, column: 8, scope: !6946)
!6949 = !DILocation(line: 2536, column: 5, scope: !6950)
!6950 = distinct !DILexicalBlock(scope: !6951, file: !3, line: 2535, column: 11)
!6951 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 2534, column: 5)
!6952 = distinct !DILexicalBlock(scope: !6946, file: !3, line: 2532, column: 3)
!6953 = !DILocation(line: 2536, column: 41, scope: !6950)
!6954 = !DILocation(line: 2536, column: 45, scope: !6950)
!6955 = !DILocation(line: 2535, column: 11, scope: !6950)
!6956 = !DILocation(line: 2535, column: 11, scope: !6951)
!6957 = !DILocation(line: 2537, column: 2, scope: !6950)
!6958 = !DILocation(line: 2538, column: 11, scope: !6959)
!6959 = distinct !DILexicalBlock(scope: !6951, file: !3, line: 2538, column: 11)
!6960 = !DILocation(line: 2538, column: 16, scope: !6959)
!6961 = !DILocation(line: 2538, column: 13, scope: !6959)
!6962 = !DILocation(line: 2538, column: 11, scope: !6951)
!6963 = !DILocation(line: 2539, column: 2, scope: !6959)
!6964 = !DILocation(line: 2540, column: 5, scope: !6951)
!6965 = !DILocation(line: 2533, column: 12, scope: !6952)
!6966 = !DILocation(line: 2533, column: 10, scope: !6952)
!6967 = !DILocation(line: 2532, column: 3, scope: !6952)
!6968 = distinct !{!6968, !6969, !6970}
!6969 = !DILocation(line: 2532, column: 3, scope: !6946)
!6970 = !DILocation(line: 2540, column: 5, scope: !6946)
!6971 = !DILocation(line: 2541, column: 3, scope: !6936)
!6972 = !DILocation(line: 2542, column: 1, scope: !6936)
!6973 = distinct !DISubprogram(name: "setup_slot_coalesced_allocno_live_ranges", scope: !3, file: !3, line: 2547, type: !2734, scopeLine: 2548, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!6974 = !DILocalVariable(name: "allocno", arg: 1, scope: !6973, file: !3, line: 2547, type: !612)
!6975 = !DILocation(line: 2547, column: 57, scope: !6973)
!6976 = !DILocalVariable(name: "n", scope: !6973, file: !3, line: 2549, type: !610)
!6977 = !DILocation(line: 2549, column: 7, scope: !6973)
!6978 = !DILocalVariable(name: "a", scope: !6973, file: !3, line: 2550, type: !612)
!6979 = !DILocation(line: 2550, column: 17, scope: !6973)
!6980 = !DILocalVariable(name: "r", scope: !6973, file: !3, line: 2551, type: !1778)
!6981 = !DILocation(line: 2551, column: 24, scope: !6973)
!6982 = !DILocation(line: 2553, column: 7, scope: !6973)
!6983 = !DILocation(line: 2553, column: 5, scope: !6973)
!6984 = !DILocation(line: 2554, column: 12, scope: !6985)
!6985 = distinct !DILexicalBlock(scope: !6973, file: !3, line: 2554, column: 3)
!6986 = !DILocation(line: 2554, column: 10, scope: !6985)
!6987 = !DILocation(line: 2554, column: 8, scope: !6985)
!6988 = !DILocation(line: 2557, column: 45, scope: !6989)
!6989 = distinct !DILexicalBlock(scope: !6990, file: !3, line: 2556, column: 5)
!6990 = distinct !DILexicalBlock(scope: !6985, file: !3, line: 2554, column: 3)
!6991 = !DILocation(line: 2557, column: 11, scope: !6989)
!6992 = !DILocation(line: 2557, column: 9, scope: !6989)
!6993 = !DILocation(line: 2560, column: 5, scope: !6989)
!6994 = !DILocation(line: 2560, column: 41, scope: !6989)
!6995 = !DILocation(line: 2560, column: 45, scope: !6989)
!6996 = !DILocation(line: 2559, column: 4, scope: !6989)
!6997 = !DILocation(line: 2558, column: 7, scope: !6989)
!6998 = !DILocation(line: 2558, column: 43, scope: !6989)
!6999 = !DILocation(line: 2559, column: 2, scope: !6989)
!7000 = !DILocation(line: 2561, column: 11, scope: !7001)
!7001 = distinct !DILexicalBlock(scope: !6989, file: !3, line: 2561, column: 11)
!7002 = !DILocation(line: 2561, column: 16, scope: !7001)
!7003 = !DILocation(line: 2561, column: 13, scope: !7001)
!7004 = !DILocation(line: 2561, column: 11, scope: !6989)
!7005 = !DILocation(line: 2562, column: 2, scope: !7001)
!7006 = !DILocation(line: 2563, column: 5, scope: !6989)
!7007 = !DILocation(line: 2555, column: 12, scope: !6990)
!7008 = !DILocation(line: 2555, column: 10, scope: !6990)
!7009 = !DILocation(line: 2554, column: 3, scope: !6990)
!7010 = distinct !{!7010, !7011, !7012}
!7011 = !DILocation(line: 2554, column: 3, scope: !6985)
!7012 = !DILocation(line: 2563, column: 5, scope: !6985)
!7013 = !DILocation(line: 2564, column: 1, scope: !6973)
!7014 = distinct !DISubprogram(name: "rhs_regno", scope: !426, file: !426, line: 1051, type: !7015, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!7015 = !DISubroutineType(types: !7016)
!7016 = !{!7, !7017}
!7017 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !623, line: 51, baseType: !7018)
!7018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7019, size: 64)
!7019 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !625)
!7020 = !DILocalVariable(name: "x", arg: 1, scope: !7014, file: !426, line: 1051, type: !7017)
!7021 = !DILocation(line: 1051, column: 22, scope: !7014)
!7022 = !DILocation(line: 1053, column: 10, scope: !7014)
!7023 = !DILocation(line: 1053, column: 3, scope: !7014)
!7024 = distinct !DISubprogram(name: "REG_N_REFS", scope: !7025, file: !7025, line: 79, type: !7026, scopeLine: 80, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!7025 = !DIFile(filename: "./regs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7026 = !DISubroutineType(types: !7027)
!7027 = !{!610, !610}
!7028 = !DILocalVariable(name: "regno", arg: 1, scope: !7024, file: !7025, line: 79, type: !610)
!7029 = !DILocation(line: 79, column: 16, scope: !7024)
!7030 = !DILocation(line: 81, column: 10, scope: !7024)
!7031 = !DILocation(line: 81, column: 34, scope: !7024)
!7032 = !DILocation(line: 81, column: 41, scope: !7024)
!7033 = !DILocation(line: 81, column: 3, scope: !7024)
!7034 = distinct !DISubprogram(name: "VEC_ira_allocno_t_heap_alloc", scope: !613, file: !613, line: 68, type: !7035, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!7035 = !DISubroutineType(types: !7036)
!7036 = !{!1834, !610}
!7037 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7034, file: !613, line: 68, type: !610)
!7038 = !DILocation(line: 68, column: 1, scope: !7034)
!7039 = distinct !DISubprogram(name: "do_coloring", scope: !3, file: !3, line: 2094, type: !5837, scopeLine: 2095, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!7040 = !DILocation(line: 2096, column: 29, scope: !7039)
!7041 = !DILocation(line: 2096, column: 27, scope: !7039)
!7042 = !DILocation(line: 2099, column: 13, scope: !7039)
!7043 = !DILocation(line: 2099, column: 11, scope: !7039)
!7044 = !DILocation(line: 2098, column: 25, scope: !7039)
!7045 = !DILocation(line: 2098, column: 7, scope: !7039)
!7046 = !DILocation(line: 2098, column: 5, scope: !7039)
!7047 = !DILocation(line: 2100, column: 26, scope: !7039)
!7048 = !DILocation(line: 2100, column: 24, scope: !7039)
!7049 = !DILocation(line: 2103, column: 7, scope: !7050)
!7050 = distinct !DILexicalBlock(scope: !7039, file: !3, line: 2103, column: 7)
!7051 = !DILocation(line: 2103, column: 33, scope: !7050)
!7052 = !DILocation(line: 2103, column: 37, scope: !7050)
!7053 = !DILocation(line: 2103, column: 40, scope: !7050)
!7054 = !DILocation(line: 2103, column: 54, scope: !7050)
!7055 = !DILocation(line: 2103, column: 7, scope: !7039)
!7056 = !DILocation(line: 2104, column: 14, scope: !7050)
!7057 = !DILocation(line: 2104, column: 5, scope: !7050)
!7058 = !DILocation(line: 2106, column: 34, scope: !7039)
!7059 = !DILocation(line: 2106, column: 3, scope: !7039)
!7060 = !DILocation(line: 2108, column: 7, scope: !7061)
!7061 = distinct !DILexicalBlock(scope: !7039, file: !3, line: 2108, column: 7)
!7062 = !DILocation(line: 2108, column: 33, scope: !7061)
!7063 = !DILocation(line: 2108, column: 37, scope: !7061)
!7064 = !DILocation(line: 2108, column: 40, scope: !7061)
!7065 = !DILocation(line: 2108, column: 54, scope: !7061)
!7066 = !DILocation(line: 2108, column: 7, scope: !7039)
!7067 = !DILocation(line: 2109, column: 28, scope: !7061)
!7068 = !DILocation(line: 2109, column: 5, scope: !7061)
!7069 = !DILocation(line: 2111, column: 20, scope: !7039)
!7070 = !DILocation(line: 2111, column: 3, scope: !7039)
!7071 = !DILocation(line: 2112, column: 20, scope: !7039)
!7072 = !DILocation(line: 2112, column: 3, scope: !7039)
!7073 = !DILocation(line: 2113, column: 13, scope: !7039)
!7074 = !DILocation(line: 2113, column: 3, scope: !7039)
!7075 = !DILocation(line: 2114, column: 1, scope: !7039)
!7076 = distinct !DISubprogram(name: "VEC_ira_allocno_t_heap_free", scope: !613, file: !613, line: 68, type: !7077, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!7077 = !DISubroutineType(types: !7078)
!7078 = !{null, !6637}
!7079 = !DILocalVariable(name: "vec_", arg: 1, scope: !7076, file: !613, line: 68, type: !6637)
!7080 = !DILocation(line: 68, column: 1, scope: !7076)
!7081 = !DILocation(line: 68, column: 1, scope: !7082)
!7082 = distinct !DILexicalBlock(scope: !7076, file: !613, line: 68, column: 1)
!7083 = distinct !DISubprogram(name: "move_spill_restore", scope: !3, file: !3, line: 2124, type: !5837, scopeLine: 2125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!7084 = !DILocalVariable(name: "cost", scope: !7083, file: !3, line: 2126, type: !610)
!7085 = !DILocation(line: 2126, column: 7, scope: !7083)
!7086 = !DILocalVariable(name: "regno", scope: !7083, file: !3, line: 2126, type: !610)
!7087 = !DILocation(line: 2126, column: 13, scope: !7083)
!7088 = !DILocalVariable(name: "hard_regno", scope: !7083, file: !3, line: 2126, type: !610)
!7089 = !DILocation(line: 2126, column: 20, scope: !7083)
!7090 = !DILocalVariable(name: "hard_regno2", scope: !7083, file: !3, line: 2126, type: !610)
!7091 = !DILocation(line: 2126, column: 32, scope: !7083)
!7092 = !DILocalVariable(name: "index", scope: !7083, file: !3, line: 2126, type: !610)
!7093 = !DILocation(line: 2126, column: 45, scope: !7083)
!7094 = !DILocalVariable(name: "changed_p", scope: !7083, file: !3, line: 2127, type: !855)
!7095 = !DILocation(line: 2127, column: 8, scope: !7083)
!7096 = !DILocalVariable(name: "enter_freq", scope: !7083, file: !3, line: 2128, type: !610)
!7097 = !DILocation(line: 2128, column: 7, scope: !7083)
!7098 = !DILocalVariable(name: "exit_freq", scope: !7083, file: !3, line: 2128, type: !610)
!7099 = !DILocation(line: 2128, column: 19, scope: !7083)
!7100 = !DILocalVariable(name: "mode", scope: !7083, file: !3, line: 2129, type: !5)
!7101 = !DILocation(line: 2129, column: 21, scope: !7083)
!7102 = !DILocalVariable(name: "rclass", scope: !7083, file: !3, line: 2130, type: !390)
!7103 = !DILocation(line: 2130, column: 18, scope: !7083)
!7104 = !DILocalVariable(name: "a", scope: !7083, file: !3, line: 2131, type: !612)
!7105 = !DILocation(line: 2131, column: 17, scope: !7083)
!7106 = !DILocalVariable(name: "parent_allocno", scope: !7083, file: !3, line: 2131, type: !612)
!7107 = !DILocation(line: 2131, column: 20, scope: !7083)
!7108 = !DILocalVariable(name: "subloop_allocno", scope: !7083, file: !3, line: 2131, type: !612)
!7109 = !DILocation(line: 2131, column: 36, scope: !7083)
!7110 = !DILocalVariable(name: "parent", scope: !7083, file: !3, line: 2132, type: !1725)
!7111 = !DILocation(line: 2132, column: 24, scope: !7083)
!7112 = !DILocalVariable(name: "loop_node", scope: !7083, file: !3, line: 2132, type: !1725)
!7113 = !DILocation(line: 2132, column: 32, scope: !7083)
!7114 = !DILocalVariable(name: "subloop_node", scope: !7083, file: !3, line: 2132, type: !1725)
!7115 = !DILocation(line: 2132, column: 43, scope: !7083)
!7116 = !DILocalVariable(name: "ai", scope: !7083, file: !3, line: 2133, type: !2198)
!7117 = !DILocation(line: 2133, column: 24, scope: !7083)
!7118 = !DILocation(line: 2135, column: 3, scope: !7083)
!7119 = !DILocation(line: 2137, column: 17, scope: !7120)
!7120 = distinct !DILexicalBlock(scope: !7121, file: !3, line: 2136, column: 5)
!7121 = distinct !DILexicalBlock(scope: !7122, file: !3, line: 2135, column: 3)
!7122 = distinct !DILexicalBlock(scope: !7083, file: !3, line: 2135, column: 3)
!7123 = !DILocation(line: 2138, column: 11, scope: !7124)
!7124 = distinct !DILexicalBlock(scope: !7120, file: !3, line: 2138, column: 11)
!7125 = !DILocation(line: 2138, column: 37, scope: !7124)
!7126 = !DILocation(line: 2138, column: 41, scope: !7124)
!7127 = !DILocation(line: 2138, column: 44, scope: !7124)
!7128 = !DILocation(line: 2138, column: 58, scope: !7124)
!7129 = !DILocation(line: 2138, column: 11, scope: !7120)
!7130 = !DILocation(line: 2139, column: 11, scope: !7124)
!7131 = !DILocation(line: 2139, column: 2, scope: !7124)
!7132 = !DILocation(line: 2140, column: 7, scope: !7133)
!7133 = distinct !DILexicalBlock(scope: !7120, file: !3, line: 2140, column: 7)
!7134 = !DILocation(line: 2140, column: 7, scope: !7135)
!7135 = distinct !DILexicalBlock(scope: !7133, file: !3, line: 2140, column: 7)
!7136 = !DILocation(line: 2142, column: 12, scope: !7137)
!7137 = distinct !DILexicalBlock(scope: !7135, file: !3, line: 2141, column: 2)
!7138 = !DILocation(line: 2142, column: 10, scope: !7137)
!7139 = !DILocation(line: 2143, column: 16, scope: !7137)
!7140 = !DILocation(line: 2143, column: 14, scope: !7137)
!7141 = !DILocation(line: 2144, column: 8, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !7137, file: !3, line: 2144, column: 8)
!7143 = !DILocation(line: 2144, column: 31, scope: !7142)
!7144 = !DILocation(line: 2145, column: 8, scope: !7142)
!7145 = !DILocation(line: 2145, column: 11, scope: !7142)
!7146 = !DILocation(line: 2145, column: 27, scope: !7142)
!7147 = !DILocation(line: 2146, column: 8, scope: !7142)
!7148 = !DILocation(line: 2146, column: 25, scope: !7142)
!7149 = !DILocation(line: 2146, column: 23, scope: !7142)
!7150 = !DILocation(line: 2146, column: 49, scope: !7142)
!7151 = !DILocation(line: 2147, column: 8, scope: !7142)
!7152 = !DILocation(line: 2147, column: 11, scope: !7142)
!7153 = !DILocation(line: 2147, column: 22, scope: !7142)
!7154 = !DILocation(line: 2147, column: 31, scope: !7142)
!7155 = !DILocation(line: 2152, column: 8, scope: !7142)
!7156 = !DILocation(line: 2152, column: 11, scope: !7142)
!7157 = !DILocation(line: 2152, column: 37, scope: !7142)
!7158 = !DILocation(line: 2153, column: 8, scope: !7142)
!7159 = !DILocation(line: 2153, column: 11, scope: !7142)
!7160 = !DILocation(line: 2153, column: 31, scope: !7142)
!7161 = !DILocation(line: 2153, column: 38, scope: !7142)
!7162 = !DILocation(line: 2154, column: 8, scope: !7142)
!7163 = !DILocation(line: 2154, column: 26, scope: !7142)
!7164 = !DILocation(line: 2154, column: 37, scope: !7142)
!7165 = !DILocation(line: 2154, column: 54, scope: !7142)
!7166 = !DILocation(line: 2154, column: 12, scope: !7142)
!7167 = !DILocation(line: 2144, column: 8, scope: !7137)
!7168 = !DILocation(line: 2155, column: 6, scope: !7142)
!7169 = distinct !{!7169, !7132, !7170}
!7170 = !DILocation(line: 2227, column: 2, scope: !7133)
!7171 = !DILocation(line: 2156, column: 11, scope: !7137)
!7172 = !DILocation(line: 2156, column: 9, scope: !7137)
!7173 = !DILocation(line: 2157, column: 13, scope: !7137)
!7174 = !DILocation(line: 2157, column: 11, scope: !7137)
!7175 = !DILocation(line: 2158, column: 37, scope: !7137)
!7176 = !DILocation(line: 2158, column: 12, scope: !7137)
!7177 = !DILocation(line: 2158, column: 45, scope: !7137)
!7178 = !DILocation(line: 2158, column: 10, scope: !7137)
!7179 = !DILocation(line: 2160, column: 12, scope: !7137)
!7180 = !DILocation(line: 2161, column: 8, scope: !7137)
!7181 = !DILocation(line: 2161, column: 35, scope: !7137)
!7182 = !DILocation(line: 2162, column: 10, scope: !7137)
!7183 = !DILocation(line: 2163, column: 10, scope: !7137)
!7184 = !DILocation(line: 2163, column: 37, scope: !7137)
!7185 = !DILocation(line: 2161, column: 5, scope: !7137)
!7186 = !DILocation(line: 2160, column: 9, scope: !7137)
!7187 = !DILocation(line: 2164, column: 24, scope: !7188)
!7188 = distinct !DILexicalBlock(scope: !7137, file: !3, line: 2164, column: 4)
!7189 = !DILocation(line: 2164, column: 35, scope: !7188)
!7190 = !DILocation(line: 2164, column: 22, scope: !7188)
!7191 = !DILocation(line: 2164, column: 9, scope: !7188)
!7192 = !DILocation(line: 2165, column: 9, scope: !7193)
!7193 = distinct !DILexicalBlock(scope: !7188, file: !3, line: 2164, column: 4)
!7194 = !DILocation(line: 2165, column: 22, scope: !7193)
!7195 = !DILocation(line: 2164, column: 4, scope: !7188)
!7196 = !DILocation(line: 2169, column: 26, scope: !7197)
!7197 = distinct !DILexicalBlock(scope: !7193, file: !3, line: 2167, column: 6)
!7198 = !DILocation(line: 2169, column: 40, scope: !7197)
!7199 = !DILocation(line: 2169, column: 58, scope: !7197)
!7200 = !DILocation(line: 2169, column: 24, scope: !7197)
!7201 = !DILocation(line: 2170, column: 12, scope: !7202)
!7202 = distinct !DILexicalBlock(scope: !7197, file: !3, line: 2170, column: 12)
!7203 = !DILocation(line: 2170, column: 28, scope: !7202)
!7204 = !DILocation(line: 2170, column: 12, scope: !7197)
!7205 = !DILocation(line: 2171, column: 3, scope: !7202)
!7206 = !DILocation(line: 2176, column: 17, scope: !7197)
!7207 = !DILocation(line: 2177, column: 13, scope: !7197)
!7208 = !DILocation(line: 2177, column: 54, scope: !7197)
!7209 = !DILocation(line: 2178, column: 8, scope: !7197)
!7210 = !DILocation(line: 2179, column: 8, scope: !7197)
!7211 = !DILocation(line: 2179, column: 49, scope: !7197)
!7212 = !DILocation(line: 2177, column: 10, scope: !7197)
!7213 = !DILocation(line: 2176, column: 13, scope: !7197)
!7214 = !DILocation(line: 2180, column: 40, scope: !7197)
!7215 = !DILocation(line: 2180, column: 54, scope: !7197)
!7216 = !DILocation(line: 2180, column: 20, scope: !7197)
!7217 = !DILocation(line: 2180, column: 18, scope: !7197)
!7218 = !DILocation(line: 2181, column: 41, scope: !7197)
!7219 = !DILocation(line: 2181, column: 55, scope: !7197)
!7220 = !DILocation(line: 2181, column: 21, scope: !7197)
!7221 = !DILocation(line: 2181, column: 19, scope: !7197)
!7222 = !DILocation(line: 2182, column: 27, scope: !7223)
!7223 = distinct !DILexicalBlock(scope: !7197, file: !3, line: 2182, column: 12)
!7224 = !DILocation(line: 2182, column: 25, scope: !7223)
!7225 = !DILocation(line: 2182, column: 65, scope: !7223)
!7226 = !DILocation(line: 2182, column: 12, scope: !7197)
!7227 = !DILocation(line: 2183, column: 33, scope: !7223)
!7228 = !DILocation(line: 2183, column: 12, scope: !7223)
!7229 = !DILocation(line: 2183, column: 39, scope: !7223)
!7230 = !DILocation(line: 2183, column: 52, scope: !7223)
!7231 = !DILocation(line: 2183, column: 50, scope: !7223)
!7232 = !DILocation(line: 2184, column: 28, scope: !7223)
!7233 = !DILocation(line: 2184, column: 7, scope: !7223)
!7234 = !DILocation(line: 2184, column: 34, scope: !7223)
!7235 = !DILocation(line: 2184, column: 47, scope: !7223)
!7236 = !DILocation(line: 2184, column: 45, scope: !7223)
!7237 = !DILocation(line: 2184, column: 5, scope: !7223)
!7238 = !DILocation(line: 2183, column: 8, scope: !7223)
!7239 = !DILocation(line: 2183, column: 3, scope: !7223)
!7240 = !DILocation(line: 2188, column: 32, scope: !7241)
!7241 = distinct !DILexicalBlock(scope: !7223, file: !3, line: 2186, column: 3)
!7242 = !DILocation(line: 2188, column: 11, scope: !7241)
!7243 = !DILocation(line: 2188, column: 38, scope: !7241)
!7244 = !DILocation(line: 2188, column: 51, scope: !7241)
!7245 = !DILocation(line: 2188, column: 49, scope: !7241)
!7246 = !DILocation(line: 2189, column: 27, scope: !7241)
!7247 = !DILocation(line: 2189, column: 6, scope: !7241)
!7248 = !DILocation(line: 2189, column: 33, scope: !7241)
!7249 = !DILocation(line: 2189, column: 46, scope: !7241)
!7250 = !DILocation(line: 2189, column: 44, scope: !7241)
!7251 = !DILocation(line: 2189, column: 4, scope: !7241)
!7252 = !DILocation(line: 2188, column: 7, scope: !7241)
!7253 = !DILocation(line: 2190, column: 9, scope: !7254)
!7254 = distinct !DILexicalBlock(scope: !7241, file: !3, line: 2190, column: 9)
!7255 = !DILocation(line: 2190, column: 24, scope: !7254)
!7256 = !DILocation(line: 2190, column: 21, scope: !7254)
!7257 = !DILocation(line: 2190, column: 9, scope: !7241)
!7258 = !DILocation(line: 2191, column: 44, scope: !7254)
!7259 = !DILocation(line: 2191, column: 50, scope: !7254)
!7260 = !DILocation(line: 2191, column: 58, scope: !7254)
!7261 = !DILocation(line: 2191, column: 16, scope: !7254)
!7262 = !DILocation(line: 2192, column: 12, scope: !7254)
!7263 = !DILocation(line: 2192, column: 24, scope: !7254)
!7264 = !DILocation(line: 2192, column: 22, scope: !7254)
!7265 = !DILocation(line: 2192, column: 9, scope: !7254)
!7266 = !DILocation(line: 2191, column: 12, scope: !7254)
!7267 = !DILocation(line: 2191, column: 7, scope: !7254)
!7268 = !DILocation(line: 2194, column: 6, scope: !7197)
!7269 = !DILocation(line: 2166, column: 24, scope: !7193)
!7270 = !DILocation(line: 2166, column: 38, scope: !7193)
!7271 = !DILocation(line: 2166, column: 22, scope: !7193)
!7272 = !DILocation(line: 2164, column: 4, scope: !7193)
!7273 = distinct !{!7273, !7195, !7274}
!7274 = !DILocation(line: 2194, column: 6, scope: !7188)
!7275 = !DILocation(line: 2195, column: 18, scope: !7276)
!7276 = distinct !DILexicalBlock(scope: !7137, file: !3, line: 2195, column: 8)
!7277 = !DILocation(line: 2195, column: 29, scope: !7276)
!7278 = !DILocation(line: 2195, column: 16, scope: !7276)
!7279 = !DILocation(line: 2195, column: 37, scope: !7276)
!7280 = !DILocation(line: 2196, column: 8, scope: !7276)
!7281 = !DILocation(line: 2196, column: 29, scope: !7276)
!7282 = !DILocation(line: 2196, column: 37, scope: !7276)
!7283 = !DILocation(line: 2196, column: 55, scope: !7276)
!7284 = !DILocation(line: 2196, column: 27, scope: !7276)
!7285 = !DILocation(line: 2196, column: 63, scope: !7276)
!7286 = !DILocation(line: 2195, column: 8, scope: !7137)
!7287 = !DILocation(line: 2199, column: 40, scope: !7288)
!7288 = distinct !DILexicalBlock(scope: !7276, file: !3, line: 2197, column: 6)
!7289 = !DILocation(line: 2199, column: 51, scope: !7288)
!7290 = !DILocation(line: 2199, column: 20, scope: !7288)
!7291 = !DILocation(line: 2199, column: 18, scope: !7288)
!7292 = !DILocation(line: 2200, column: 41, scope: !7288)
!7293 = !DILocation(line: 2200, column: 52, scope: !7288)
!7294 = !DILocation(line: 2200, column: 21, scope: !7288)
!7295 = !DILocation(line: 2200, column: 19, scope: !7288)
!7296 = !DILocation(line: 2201, column: 27, scope: !7297)
!7297 = distinct !DILexicalBlock(scope: !7288, file: !3, line: 2201, column: 12)
!7298 = !DILocation(line: 2201, column: 25, scope: !7297)
!7299 = !DILocation(line: 2201, column: 64, scope: !7297)
!7300 = !DILocation(line: 2201, column: 12, scope: !7288)
!7301 = !DILocation(line: 2202, column: 33, scope: !7297)
!7302 = !DILocation(line: 2202, column: 12, scope: !7297)
!7303 = !DILocation(line: 2202, column: 39, scope: !7297)
!7304 = !DILocation(line: 2202, column: 52, scope: !7297)
!7305 = !DILocation(line: 2202, column: 50, scope: !7297)
!7306 = !DILocation(line: 2203, column: 28, scope: !7297)
!7307 = !DILocation(line: 2203, column: 7, scope: !7297)
!7308 = !DILocation(line: 2203, column: 34, scope: !7297)
!7309 = !DILocation(line: 2203, column: 47, scope: !7297)
!7310 = !DILocation(line: 2203, column: 45, scope: !7297)
!7311 = !DILocation(line: 2203, column: 5, scope: !7297)
!7312 = !DILocation(line: 2202, column: 8, scope: !7297)
!7313 = !DILocation(line: 2202, column: 3, scope: !7297)
!7314 = !DILocation(line: 2207, column: 32, scope: !7315)
!7315 = distinct !DILexicalBlock(scope: !7297, file: !3, line: 2205, column: 3)
!7316 = !DILocation(line: 2207, column: 11, scope: !7315)
!7317 = !DILocation(line: 2207, column: 38, scope: !7315)
!7318 = !DILocation(line: 2207, column: 51, scope: !7315)
!7319 = !DILocation(line: 2207, column: 49, scope: !7315)
!7320 = !DILocation(line: 2208, column: 27, scope: !7315)
!7321 = !DILocation(line: 2208, column: 6, scope: !7315)
!7322 = !DILocation(line: 2208, column: 33, scope: !7315)
!7323 = !DILocation(line: 2208, column: 46, scope: !7315)
!7324 = !DILocation(line: 2208, column: 44, scope: !7315)
!7325 = !DILocation(line: 2208, column: 4, scope: !7315)
!7326 = !DILocation(line: 2207, column: 7, scope: !7315)
!7327 = !DILocation(line: 2209, column: 9, scope: !7328)
!7328 = distinct !DILexicalBlock(scope: !7315, file: !3, line: 2209, column: 9)
!7329 = !DILocation(line: 2209, column: 24, scope: !7328)
!7330 = !DILocation(line: 2209, column: 21, scope: !7328)
!7331 = !DILocation(line: 2209, column: 9, scope: !7315)
!7332 = !DILocation(line: 2210, column: 44, scope: !7328)
!7333 = !DILocation(line: 2210, column: 50, scope: !7328)
!7334 = !DILocation(line: 2210, column: 58, scope: !7328)
!7335 = !DILocation(line: 2210, column: 16, scope: !7328)
!7336 = !DILocation(line: 2211, column: 12, scope: !7328)
!7337 = !DILocation(line: 2211, column: 24, scope: !7328)
!7338 = !DILocation(line: 2211, column: 22, scope: !7328)
!7339 = !DILocation(line: 2211, column: 9, scope: !7328)
!7340 = !DILocation(line: 2210, column: 12, scope: !7328)
!7341 = !DILocation(line: 2210, column: 7, scope: !7328)
!7342 = !DILocation(line: 2213, column: 6, scope: !7288)
!7343 = !DILocation(line: 2214, column: 8, scope: !7344)
!7344 = distinct !DILexicalBlock(scope: !7137, file: !3, line: 2214, column: 8)
!7345 = !DILocation(line: 2214, column: 13, scope: !7344)
!7346 = !DILocation(line: 2214, column: 8, scope: !7137)
!7347 = !DILocation(line: 2216, column: 8, scope: !7348)
!7348 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 2215, column: 6)
!7349 = !DILocation(line: 2216, column: 31, scope: !7348)
!7350 = !DILocation(line: 2217, column: 12, scope: !7351)
!7351 = distinct !DILexicalBlock(scope: !7348, file: !3, line: 2217, column: 12)
!7352 = !DILocation(line: 2217, column: 38, scope: !7351)
!7353 = !DILocation(line: 2217, column: 42, scope: !7351)
!7354 = !DILocation(line: 2217, column: 45, scope: !7351)
!7355 = !DILocation(line: 2217, column: 59, scope: !7351)
!7356 = !DILocation(line: 2217, column: 12, scope: !7348)
!7357 = !DILocation(line: 2220, column: 8, scope: !7358)
!7358 = distinct !DILexicalBlock(scope: !7351, file: !3, line: 2218, column: 3)
!7359 = !DILocation(line: 2222, column: 8, scope: !7358)
!7360 = !DILocation(line: 2222, column: 25, scope: !7358)
!7361 = !DILocation(line: 2222, column: 32, scope: !7358)
!7362 = !DILocation(line: 2222, column: 43, scope: !7358)
!7363 = !DILocation(line: 2222, column: 49, scope: !7358)
!7364 = !DILocation(line: 2219, column: 5, scope: !7358)
!7365 = !DILocation(line: 2223, column: 14, scope: !7358)
!7366 = !DILocation(line: 2223, column: 48, scope: !7358)
!7367 = !DILocation(line: 2223, column: 47, scope: !7358)
!7368 = !DILocation(line: 2223, column: 5, scope: !7358)
!7369 = !DILocation(line: 2224, column: 3, scope: !7358)
!7370 = !DILocation(line: 2225, column: 18, scope: !7348)
!7371 = !DILocation(line: 2226, column: 6, scope: !7348)
!7372 = !DILocation(line: 2228, column: 13, scope: !7373)
!7373 = distinct !DILexicalBlock(scope: !7120, file: !3, line: 2228, column: 11)
!7374 = !DILocation(line: 2228, column: 11, scope: !7120)
!7375 = !DILocation(line: 2229, column: 2, scope: !7373)
!7376 = !DILocation(line: 2135, column: 3, scope: !7121)
!7377 = distinct !{!7377, !7378, !7379}
!7378 = !DILocation(line: 2135, column: 3, scope: !7122)
!7379 = !DILocation(line: 2230, column: 5, scope: !7122)
!7380 = !DILocation(line: 2231, column: 1, scope: !7083)
!7381 = distinct !DISubprogram(name: "color_pass", scope: !3, file: !3, line: 1937, type: !7382, scopeLine: 1938, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!7382 = !DISubroutineType(types: !7383)
!7383 = !{null, !1725}
!7384 = !DILocalVariable(name: "loop_tree_node", arg: 1, scope: !7381, file: !3, line: 1937, type: !1725)
!7385 = !DILocation(line: 1937, column: 34, scope: !7381)
!7386 = !DILocalVariable(name: "regno", scope: !7381, file: !3, line: 1939, type: !610)
!7387 = !DILocation(line: 1939, column: 7, scope: !7381)
!7388 = !DILocalVariable(name: "hard_regno", scope: !7381, file: !3, line: 1939, type: !610)
!7389 = !DILocation(line: 1939, column: 14, scope: !7381)
!7390 = !DILocalVariable(name: "index", scope: !7381, file: !3, line: 1939, type: !610)
!7391 = !DILocation(line: 1939, column: 26, scope: !7381)
!7392 = !DILocalVariable(name: "cost", scope: !7381, file: !3, line: 1940, type: !610)
!7393 = !DILocation(line: 1940, column: 7, scope: !7381)
!7394 = !DILocalVariable(name: "exit_freq", scope: !7381, file: !3, line: 1940, type: !610)
!7395 = !DILocation(line: 1940, column: 13, scope: !7381)
!7396 = !DILocalVariable(name: "enter_freq", scope: !7381, file: !3, line: 1940, type: !610)
!7397 = !DILocation(line: 1940, column: 24, scope: !7381)
!7398 = !DILocalVariable(name: "j", scope: !7381, file: !3, line: 1941, type: !7)
!7399 = !DILocation(line: 1941, column: 16, scope: !7381)
!7400 = !DILocalVariable(name: "bi", scope: !7381, file: !3, line: 1942, type: !3652)
!7401 = !DILocation(line: 1942, column: 19, scope: !7381)
!7402 = !DILocalVariable(name: "mode", scope: !7381, file: !3, line: 1943, type: !5)
!7403 = !DILocation(line: 1943, column: 21, scope: !7381)
!7404 = !DILocalVariable(name: "rclass", scope: !7381, file: !3, line: 1944, type: !390)
!7405 = !DILocation(line: 1944, column: 18, scope: !7381)
!7406 = !DILocalVariable(name: "cover_class", scope: !7381, file: !3, line: 1944, type: !390)
!7407 = !DILocation(line: 1944, column: 26, scope: !7381)
!7408 = !DILocalVariable(name: "a", scope: !7381, file: !3, line: 1945, type: !612)
!7409 = !DILocation(line: 1945, column: 17, scope: !7381)
!7410 = !DILocalVariable(name: "subloop_allocno", scope: !7381, file: !3, line: 1945, type: !612)
!7411 = !DILocation(line: 1945, column: 20, scope: !7381)
!7412 = !DILocalVariable(name: "subloop_node", scope: !7381, file: !3, line: 1946, type: !1725)
!7413 = !DILocation(line: 1946, column: 24, scope: !7381)
!7414 = !DILocation(line: 1949, column: 7, scope: !7415)
!7415 = distinct !DILexicalBlock(scope: !7381, file: !3, line: 1949, column: 7)
!7416 = !DILocation(line: 1949, column: 33, scope: !7415)
!7417 = !DILocation(line: 1949, column: 37, scope: !7415)
!7418 = !DILocation(line: 1949, column: 40, scope: !7415)
!7419 = !DILocation(line: 1949, column: 54, scope: !7415)
!7420 = !DILocation(line: 1949, column: 7, scope: !7381)
!7421 = !DILocation(line: 1950, column: 23, scope: !7415)
!7422 = !DILocation(line: 1950, column: 5, scope: !7415)
!7423 = !DILocation(line: 1952, column: 16, scope: !7381)
!7424 = !DILocation(line: 1952, column: 41, scope: !7381)
!7425 = !DILocation(line: 1952, column: 57, scope: !7381)
!7426 = !DILocation(line: 1952, column: 3, scope: !7381)
!7427 = !DILocation(line: 1953, column: 16, scope: !7381)
!7428 = !DILocation(line: 1953, column: 46, scope: !7381)
!7429 = !DILocation(line: 1953, column: 3, scope: !7381)
!7430 = !DILocation(line: 1954, column: 3, scope: !7431)
!7431 = distinct !DILexicalBlock(scope: !7381, file: !3, line: 1954, column: 3)
!7432 = !DILocation(line: 1954, column: 3, scope: !7433)
!7433 = distinct !DILexicalBlock(scope: !7431, file: !3, line: 1954, column: 3)
!7434 = !DILocation(line: 1956, column: 11, scope: !7435)
!7435 = distinct !DILexicalBlock(scope: !7433, file: !3, line: 1955, column: 5)
!7436 = !DILocation(line: 1956, column: 24, scope: !7435)
!7437 = !DILocation(line: 1956, column: 9, scope: !7435)
!7438 = !DILocation(line: 1957, column: 13, scope: !7439)
!7439 = distinct !DILexicalBlock(scope: !7435, file: !3, line: 1957, column: 11)
!7440 = !DILocation(line: 1957, column: 11, scope: !7435)
!7441 = !DILocation(line: 1958, column: 2, scope: !7439)
!7442 = !DILocation(line: 1959, column: 25, scope: !7435)
!7443 = !DILocation(line: 1959, column: 50, scope: !7435)
!7444 = !DILocation(line: 1959, column: 7, scope: !7435)
!7445 = !DILocation(line: 1960, column: 5, scope: !7435)
!7446 = distinct !{!7446, !7430, !7447}
!7447 = !DILocation(line: 1960, column: 5, scope: !7431)
!7448 = !DILocation(line: 1962, column: 3, scope: !7381)
!7449 = !DILocation(line: 1964, column: 7, scope: !7450)
!7450 = distinct !DILexicalBlock(scope: !7381, file: !3, line: 1964, column: 7)
!7451 = !DILocation(line: 1964, column: 23, scope: !7450)
!7452 = !DILocation(line: 1965, column: 7, scope: !7450)
!7453 = !DILocation(line: 1965, column: 10, scope: !7450)
!7454 = !DILocation(line: 1965, column: 26, scope: !7450)
!7455 = !DILocation(line: 1964, column: 7, scope: !7381)
!7456 = !DILocation(line: 1966, column: 5, scope: !7457)
!7457 = distinct !DILexicalBlock(scope: !7450, file: !3, line: 1966, column: 5)
!7458 = !DILocation(line: 1966, column: 5, scope: !7459)
!7459 = distinct !DILexicalBlock(scope: !7457, file: !3, line: 1966, column: 5)
!7460 = !DILocation(line: 1968, column: 6, scope: !7461)
!7461 = distinct !DILexicalBlock(scope: !7459, file: !3, line: 1967, column: 7)
!7462 = !DILocation(line: 1968, column: 19, scope: !7461)
!7463 = !DILocation(line: 1968, column: 4, scope: !7461)
!7464 = !DILocation(line: 1969, column: 6, scope: !7465)
!7465 = distinct !DILexicalBlock(scope: !7461, file: !3, line: 1969, column: 6)
!7466 = !DILocation(line: 1969, column: 29, scope: !7465)
!7467 = !DILocation(line: 1969, column: 6, scope: !7461)
!7468 = !DILocation(line: 1970, column: 4, scope: !7465)
!7469 = !DILocation(line: 1972, column: 20, scope: !7461)
!7470 = !DILocation(line: 1972, column: 50, scope: !7461)
!7471 = !DILocation(line: 1972, column: 2, scope: !7461)
!7472 = !DILocation(line: 1973, column: 11, scope: !7461)
!7473 = !DILocation(line: 1973, column: 9, scope: !7461)
!7474 = !DILocation(line: 1974, column: 6, scope: !7475)
!7475 = distinct !DILexicalBlock(scope: !7461, file: !3, line: 1974, column: 6)
!7476 = !DILocation(line: 1974, column: 22, scope: !7475)
!7477 = !DILocation(line: 1975, column: 6, scope: !7475)
!7478 = !DILocation(line: 1975, column: 10, scope: !7475)
!7479 = !DILocation(line: 1975, column: 26, scope: !7475)
!7480 = !DILocation(line: 1975, column: 39, scope: !7475)
!7481 = !DILocation(line: 1976, column: 31, scope: !7475)
!7482 = !DILocation(line: 1976, column: 6, scope: !7475)
!7483 = !DILocation(line: 1976, column: 3, scope: !7475)
!7484 = !DILocation(line: 1974, column: 6, scope: !7461)
!7485 = !DILocation(line: 1978, column: 13, scope: !7486)
!7486 = distinct !DILexicalBlock(scope: !7475, file: !3, line: 1977, column: 4)
!7487 = !DILocation(line: 1978, column: 11, scope: !7486)
!7488 = !DILocation(line: 1979, column: 19, scope: !7486)
!7489 = !DILocation(line: 1979, column: 17, scope: !7486)
!7490 = !DILocation(line: 1980, column: 10, scope: !7491)
!7491 = distinct !DILexicalBlock(scope: !7486, file: !3, line: 1980, column: 10)
!7492 = !DILocation(line: 1980, column: 21, scope: !7491)
!7493 = !DILocation(line: 1980, column: 10, scope: !7486)
!7494 = !DILocation(line: 1982, column: 36, scope: !7495)
!7495 = distinct !DILexicalBlock(scope: !7491, file: !3, line: 1981, column: 8)
!7496 = !DILocation(line: 1982, column: 11, scope: !7495)
!7497 = !DILocation(line: 1982, column: 44, scope: !7495)
!7498 = !DILocation(line: 1982, column: 9, scope: !7495)
!7499 = !DILocation(line: 1984, column: 8, scope: !7495)
!7500 = !DILocation(line: 1985, column: 14, scope: !7486)
!7501 = !DILocation(line: 1985, column: 12, scope: !7486)
!7502 = !DILocation(line: 1986, column: 24, scope: !7486)
!7503 = !DILocation(line: 1986, column: 22, scope: !7486)
!7504 = !DILocation(line: 1987, column: 21, scope: !7486)
!7505 = !DILocation(line: 1987, column: 19, scope: !7486)
!7506 = !DILocation(line: 1989, column: 45, scope: !7486)
!7507 = !DILocation(line: 1989, column: 6, scope: !7486)
!7508 = !DILocation(line: 1989, column: 43, scope: !7486)
!7509 = !DILocation(line: 1990, column: 6, scope: !7486)
!7510 = !DILocation(line: 1990, column: 43, scope: !7486)
!7511 = !DILocation(line: 1991, column: 10, scope: !7512)
!7512 = distinct !DILexicalBlock(scope: !7486, file: !3, line: 1991, column: 10)
!7513 = !DILocation(line: 1991, column: 21, scope: !7512)
!7514 = !DILocation(line: 1991, column: 10, scope: !7486)
!7515 = !DILocation(line: 1992, column: 27, scope: !7512)
!7516 = !DILocation(line: 1992, column: 8, scope: !7512)
!7517 = !DILocation(line: 1994, column: 38, scope: !7486)
!7518 = !DILocation(line: 1994, column: 6, scope: !7486)
!7519 = !DILocation(line: 1995, column: 4, scope: !7486)
!7520 = !DILocation(line: 1996, column: 7, scope: !7461)
!7521 = distinct !{!7521, !7456, !7522}
!7522 = !DILocation(line: 1996, column: 7, scope: !7457)
!7523 = !DILocation(line: 1999, column: 23, scope: !7524)
!7524 = distinct !DILexicalBlock(scope: !7381, file: !3, line: 1999, column: 3)
!7525 = !DILocation(line: 1999, column: 39, scope: !7524)
!7526 = !DILocation(line: 1999, column: 21, scope: !7524)
!7527 = !DILocation(line: 1999, column: 8, scope: !7524)
!7528 = !DILocation(line: 2000, column: 8, scope: !7529)
!7529 = distinct !DILexicalBlock(scope: !7524, file: !3, line: 1999, column: 3)
!7530 = !DILocation(line: 2000, column: 21, scope: !7529)
!7531 = !DILocation(line: 1999, column: 3, scope: !7524)
!7532 = !DILocation(line: 2004, column: 7, scope: !7533)
!7533 = distinct !DILexicalBlock(scope: !7534, file: !3, line: 2004, column: 7)
!7534 = distinct !DILexicalBlock(scope: !7529, file: !3, line: 2002, column: 5)
!7535 = !DILocation(line: 2004, column: 7, scope: !7536)
!7536 = distinct !DILexicalBlock(scope: !7533, file: !3, line: 2004, column: 7)
!7537 = !DILocation(line: 2006, column: 8, scope: !7538)
!7538 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 2005, column: 9)
!7539 = !DILocation(line: 2006, column: 21, scope: !7538)
!7540 = !DILocation(line: 2006, column: 6, scope: !7538)
!7541 = !DILocation(line: 2008, column: 11, scope: !7538)
!7542 = !DILocation(line: 2008, column: 9, scope: !7538)
!7543 = !DILocation(line: 2009, column: 13, scope: !7538)
!7544 = !DILocation(line: 2009, column: 11, scope: !7538)
!7545 = !DILocation(line: 2010, column: 17, scope: !7538)
!7546 = !DILocation(line: 2010, column: 15, scope: !7538)
!7547 = !DILocation(line: 2012, column: 8, scope: !7548)
!7548 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2012, column: 8)
!7549 = !DILocation(line: 2012, column: 19, scope: !7548)
!7550 = !DILocation(line: 2012, column: 8, scope: !7538)
!7551 = !DILocation(line: 2014, column: 41, scope: !7552)
!7552 = distinct !DILexicalBlock(scope: !7548, file: !3, line: 2013, column: 6)
!7553 = !DILocation(line: 2014, column: 16, scope: !7552)
!7554 = !DILocation(line: 2014, column: 49, scope: !7552)
!7555 = !DILocation(line: 2014, column: 14, scope: !7552)
!7556 = !DILocation(line: 2016, column: 6, scope: !7552)
!7557 = !DILocation(line: 2017, column: 12, scope: !7538)
!7558 = !DILocation(line: 2017, column: 10, scope: !7538)
!7559 = !DILocation(line: 2019, column: 22, scope: !7538)
!7560 = !DILocation(line: 2019, column: 36, scope: !7538)
!7561 = !DILocation(line: 2019, column: 54, scope: !7538)
!7562 = !DILocation(line: 2019, column: 20, scope: !7538)
!7563 = !DILocation(line: 2020, column: 8, scope: !7564)
!7564 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2020, column: 8)
!7565 = !DILocation(line: 2020, column: 24, scope: !7564)
!7566 = !DILocation(line: 2021, column: 8, scope: !7564)
!7567 = !DILocation(line: 2021, column: 11, scope: !7564)
!7568 = !DILocation(line: 2021, column: 41, scope: !7564)
!7569 = !DILocation(line: 2020, column: 8, scope: !7538)
!7570 = !DILocation(line: 2022, column: 6, scope: !7564)
!7571 = !DILocation(line: 2026, column: 9, scope: !7572)
!7572 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2026, column: 8)
!7573 = !DILocation(line: 2026, column: 25, scope: !7572)
!7574 = !DILocation(line: 2027, column: 8, scope: !7572)
!7575 = !DILocation(line: 2027, column: 12, scope: !7572)
!7576 = !DILocation(line: 2027, column: 28, scope: !7572)
!7577 = !DILocation(line: 2027, column: 41, scope: !7572)
!7578 = !DILocation(line: 2028, column: 33, scope: !7572)
!7579 = !DILocation(line: 2028, column: 8, scope: !7572)
!7580 = !DILocation(line: 2028, column: 5, scope: !7572)
!7581 = !DILocation(line: 2026, column: 8, scope: !7538)
!7582 = !DILocation(line: 2030, column: 14, scope: !7583)
!7583 = distinct !DILexicalBlock(scope: !7584, file: !3, line: 2030, column: 12)
!7584 = distinct !DILexicalBlock(scope: !7572, file: !3, line: 2029, column: 6)
!7585 = !DILocation(line: 2030, column: 12, scope: !7584)
!7586 = !DILocation(line: 2032, column: 44, scope: !7587)
!7587 = distinct !DILexicalBlock(scope: !7583, file: !3, line: 2031, column: 3)
!7588 = !DILocation(line: 2032, column: 5, scope: !7587)
!7589 = !DILocation(line: 2032, column: 42, scope: !7587)
!7590 = !DILocation(line: 2033, column: 5, scope: !7587)
!7591 = !DILocation(line: 2033, column: 42, scope: !7587)
!7592 = !DILocation(line: 2034, column: 9, scope: !7593)
!7593 = distinct !DILexicalBlock(scope: !7587, file: !3, line: 2034, column: 9)
!7594 = !DILocation(line: 2034, column: 20, scope: !7593)
!7595 = !DILocation(line: 2034, column: 9, scope: !7587)
!7596 = !DILocation(line: 2035, column: 26, scope: !7593)
!7597 = !DILocation(line: 2035, column: 7, scope: !7593)
!7598 = !DILocation(line: 2037, column: 37, scope: !7587)
!7599 = !DILocation(line: 2037, column: 5, scope: !7587)
!7600 = !DILocation(line: 2038, column: 3, scope: !7587)
!7601 = !DILocation(line: 2039, column: 8, scope: !7584)
!7602 = !DILocation(line: 2041, column: 36, scope: !7538)
!7603 = !DILocation(line: 2041, column: 50, scope: !7538)
!7604 = !DILocation(line: 2041, column: 16, scope: !7538)
!7605 = !DILocation(line: 2041, column: 14, scope: !7538)
!7606 = !DILocation(line: 2042, column: 37, scope: !7538)
!7607 = !DILocation(line: 2042, column: 51, scope: !7538)
!7608 = !DILocation(line: 2042, column: 17, scope: !7538)
!7609 = !DILocation(line: 2042, column: 15, scope: !7538)
!7610 = !DILocation(line: 2044, column: 8, scope: !7611)
!7611 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 2044, column: 8)
!7612 = !DILocation(line: 2044, column: 34, scope: !7611)
!7613 = !DILocation(line: 2045, column: 8, scope: !7611)
!7614 = !DILocation(line: 2045, column: 11, scope: !7611)
!7615 = !DILocation(line: 2045, column: 31, scope: !7611)
!7616 = !DILocation(line: 2045, column: 38, scope: !7611)
!7617 = !DILocation(line: 2044, column: 8, scope: !7538)
!7618 = !DILocation(line: 2047, column: 14, scope: !7619)
!7619 = distinct !DILexicalBlock(scope: !7620, file: !3, line: 2047, column: 12)
!7620 = distinct !DILexicalBlock(scope: !7611, file: !3, line: 2046, column: 6)
!7621 = !DILocation(line: 2047, column: 12, scope: !7620)
!7622 = !DILocation(line: 2049, column: 44, scope: !7623)
!7623 = distinct !DILexicalBlock(scope: !7619, file: !3, line: 2048, column: 3)
!7624 = !DILocation(line: 2049, column: 5, scope: !7623)
!7625 = !DILocation(line: 2049, column: 42, scope: !7623)
!7626 = !DILocation(line: 2050, column: 5, scope: !7623)
!7627 = !DILocation(line: 2050, column: 42, scope: !7623)
!7628 = !DILocation(line: 2051, column: 9, scope: !7629)
!7629 = distinct !DILexicalBlock(scope: !7623, file: !3, line: 2051, column: 9)
!7630 = !DILocation(line: 2051, column: 20, scope: !7629)
!7631 = !DILocation(line: 2051, column: 9, scope: !7623)
!7632 = !DILocation(line: 2052, column: 26, scope: !7629)
!7633 = !DILocation(line: 2052, column: 7, scope: !7629)
!7634 = !DILocation(line: 2054, column: 37, scope: !7623)
!7635 = !DILocation(line: 2054, column: 5, scope: !7623)
!7636 = !DILocation(line: 2055, column: 3, scope: !7623)
!7637 = !DILocation(line: 2056, column: 6, scope: !7620)
!7638 = !DILocation(line: 2057, column: 13, scope: !7639)
!7639 = distinct !DILexicalBlock(scope: !7611, file: !3, line: 2057, column: 13)
!7640 = !DILocation(line: 2057, column: 24, scope: !7639)
!7641 = !DILocation(line: 2057, column: 13, scope: !7611)
!7642 = !DILocation(line: 2060, column: 29, scope: !7643)
!7643 = distinct !DILexicalBlock(scope: !7639, file: !3, line: 2058, column: 6)
!7644 = !DILocation(line: 2060, column: 8, scope: !7643)
!7645 = !DILocation(line: 2060, column: 35, scope: !7643)
!7646 = !DILocation(line: 2060, column: 48, scope: !7643)
!7647 = !DILocation(line: 2060, column: 46, scope: !7643)
!7648 = !DILocation(line: 2061, column: 31, scope: !7643)
!7649 = !DILocation(line: 2061, column: 10, scope: !7643)
!7650 = !DILocation(line: 2061, column: 37, scope: !7643)
!7651 = !DILocation(line: 2061, column: 50, scope: !7643)
!7652 = !DILocation(line: 2061, column: 48, scope: !7643)
!7653 = !DILocation(line: 2061, column: 7, scope: !7643)
!7654 = !DILocation(line: 2059, column: 8, scope: !7643)
!7655 = !DILocation(line: 2060, column: 3, scope: !7643)
!7656 = !DILocation(line: 2062, column: 6, scope: !7643)
!7657 = !DILocation(line: 2065, column: 22, scope: !7658)
!7658 = distinct !DILexicalBlock(scope: !7639, file: !3, line: 2064, column: 6)
!7659 = !DILocation(line: 2065, column: 20, scope: !7658)
!7660 = !DILocation(line: 2066, column: 44, scope: !7658)
!7661 = !DILocation(line: 2066, column: 50, scope: !7658)
!7662 = !DILocation(line: 2066, column: 58, scope: !7658)
!7663 = !DILocation(line: 2066, column: 16, scope: !7658)
!7664 = !DILocation(line: 2067, column: 12, scope: !7658)
!7665 = !DILocation(line: 2067, column: 24, scope: !7658)
!7666 = !DILocation(line: 2067, column: 22, scope: !7658)
!7667 = !DILocation(line: 2067, column: 9, scope: !7658)
!7668 = !DILocation(line: 2066, column: 13, scope: !7658)
!7669 = !DILocation(line: 2069, column: 5, scope: !7658)
!7670 = !DILocation(line: 2069, column: 55, scope: !7658)
!7671 = !DILocation(line: 2070, column: 4, scope: !7658)
!7672 = !DILocation(line: 2071, column: 4, scope: !7658)
!7673 = !DILocation(line: 2068, column: 8, scope: !7658)
!7674 = !DILocation(line: 2073, column: 5, scope: !7658)
!7675 = !DILocation(line: 2074, column: 4, scope: !7658)
!7676 = !DILocation(line: 2075, column: 4, scope: !7658)
!7677 = !DILocation(line: 2072, column: 8, scope: !7658)
!7678 = !DILocation(line: 2076, column: 67, scope: !7658)
!7679 = !DILocation(line: 2076, column: 8, scope: !7658)
!7680 = !DILocation(line: 2076, column: 57, scope: !7658)
!7681 = !DILocation(line: 2076, column: 64, scope: !7658)
!7682 = !DILocation(line: 2078, column: 6, scope: !7658)
!7683 = !DILocation(line: 2077, column: 8, scope: !7658)
!7684 = !DILocation(line: 2077, column: 66, scope: !7658)
!7685 = !DILocation(line: 2078, column: 3, scope: !7658)
!7686 = !DILocation(line: 2079, column: 12, scope: !7687)
!7687 = distinct !DILexicalBlock(scope: !7658, file: !3, line: 2079, column: 12)
!7688 = !DILocation(line: 2080, column: 7, scope: !7687)
!7689 = !DILocation(line: 2080, column: 56, scope: !7687)
!7690 = !DILocation(line: 2080, column: 5, scope: !7687)
!7691 = !DILocation(line: 2079, column: 12, scope: !7658)
!7692 = !DILocation(line: 2082, column: 7, scope: !7687)
!7693 = !DILocation(line: 2082, column: 56, scope: !7687)
!7694 = !DILocation(line: 2081, column: 3, scope: !7687)
!7695 = !DILocation(line: 2082, column: 5, scope: !7687)
!7696 = !DILocation(line: 2084, column: 28, scope: !7658)
!7697 = !DILocation(line: 2084, column: 7, scope: !7658)
!7698 = !DILocation(line: 2084, column: 34, scope: !7658)
!7699 = !DILocation(line: 2084, column: 47, scope: !7658)
!7700 = !DILocation(line: 2084, column: 45, scope: !7658)
!7701 = !DILocation(line: 2085, column: 30, scope: !7658)
!7702 = !DILocation(line: 2085, column: 9, scope: !7658)
!7703 = !DILocation(line: 2085, column: 36, scope: !7658)
!7704 = !DILocation(line: 2085, column: 49, scope: !7658)
!7705 = !DILocation(line: 2085, column: 47, scope: !7658)
!7706 = !DILocation(line: 2085, column: 7, scope: !7658)
!7707 = !DILocation(line: 2083, column: 8, scope: !7658)
!7708 = !DILocation(line: 2084, column: 3, scope: !7658)
!7709 = !DILocation(line: 2087, column: 2, scope: !7538)
!7710 = distinct !{!7710, !7532, !7711}
!7711 = !DILocation(line: 2087, column: 2, scope: !7533)
!7712 = !DILocation(line: 2088, column: 5, scope: !7534)
!7713 = !DILocation(line: 2001, column: 23, scope: !7529)
!7714 = !DILocation(line: 2001, column: 37, scope: !7529)
!7715 = !DILocation(line: 2001, column: 21, scope: !7529)
!7716 = !DILocation(line: 1999, column: 3, scope: !7529)
!7717 = distinct !{!7717, !7531, !7718}
!7718 = !DILocation(line: 2088, column: 5, scope: !7524)
!7719 = !DILocation(line: 2089, column: 1, scope: !7381)
!7720 = distinct !DISubprogram(name: "print_loop_title", scope: !3, file: !3, line: 1880, type: !7382, scopeLine: 1881, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!7721 = !DILocalVariable(name: "loop_tree_node", arg: 1, scope: !7720, file: !3, line: 1880, type: !1725)
!7722 = !DILocation(line: 1880, column: 40, scope: !7720)
!7723 = !DILocalVariable(name: "j", scope: !7720, file: !3, line: 1882, type: !7)
!7724 = !DILocation(line: 1882, column: 16, scope: !7720)
!7725 = !DILocalVariable(name: "bi", scope: !7720, file: !3, line: 1883, type: !3652)
!7726 = !DILocation(line: 1883, column: 19, scope: !7720)
!7727 = !DILocalVariable(name: "subloop_node", scope: !7720, file: !3, line: 1884, type: !1725)
!7728 = !DILocation(line: 1884, column: 24, scope: !7720)
!7729 = !DILocalVariable(name: "dest_loop_node", scope: !7720, file: !3, line: 1884, type: !1725)
!7730 = !DILocation(line: 1884, column: 38, scope: !7720)
!7731 = !DILocalVariable(name: "e", scope: !7720, file: !3, line: 1885, type: !1017)
!7732 = !DILocation(line: 1885, column: 8, scope: !7720)
!7733 = !DILocalVariable(name: "ei", scope: !7720, file: !3, line: 1886, type: !1997)
!7734 = !DILocation(line: 1886, column: 17, scope: !7720)
!7735 = !DILocation(line: 1889, column: 12, scope: !7720)
!7736 = !DILocation(line: 1891, column: 5, scope: !7720)
!7737 = !DILocation(line: 1891, column: 21, scope: !7720)
!7738 = !DILocation(line: 1891, column: 27, scope: !7720)
!7739 = !DILocation(line: 1892, column: 6, scope: !7720)
!7740 = !DILocation(line: 1892, column: 22, scope: !7720)
!7741 = !DILocation(line: 1892, column: 29, scope: !7720)
!7742 = !DILocation(line: 1893, column: 13, scope: !7720)
!7743 = !DILocation(line: 1893, column: 29, scope: !7720)
!7744 = !DILocation(line: 1893, column: 37, scope: !7720)
!7745 = !DILocation(line: 1893, column: 43, scope: !7720)
!7746 = !DILocation(line: 1894, column: 5, scope: !7720)
!7747 = !DILocation(line: 1894, column: 21, scope: !7720)
!7748 = !DILocation(line: 1894, column: 27, scope: !7720)
!7749 = !DILocation(line: 1894, column: 35, scope: !7720)
!7750 = !DILocation(line: 1895, column: 17, scope: !7720)
!7751 = !DILocation(line: 1895, column: 33, scope: !7720)
!7752 = !DILocation(line: 1895, column: 5, scope: !7720)
!7753 = !DILocation(line: 1889, column: 3, scope: !7720)
!7754 = !DILocation(line: 1896, column: 23, scope: !7755)
!7755 = distinct !DILexicalBlock(scope: !7720, file: !3, line: 1896, column: 3)
!7756 = !DILocation(line: 1896, column: 39, scope: !7755)
!7757 = !DILocation(line: 1896, column: 21, scope: !7755)
!7758 = !DILocation(line: 1896, column: 8, scope: !7755)
!7759 = !DILocation(line: 1897, column: 8, scope: !7760)
!7760 = distinct !DILexicalBlock(scope: !7755, file: !3, line: 1896, column: 3)
!7761 = !DILocation(line: 1897, column: 21, scope: !7760)
!7762 = !DILocation(line: 1896, column: 3, scope: !7755)
!7763 = !DILocation(line: 1899, column: 9, scope: !7764)
!7764 = distinct !DILexicalBlock(scope: !7760, file: !3, line: 1899, column: 9)
!7765 = !DILocation(line: 1899, column: 23, scope: !7764)
!7766 = !DILocation(line: 1899, column: 26, scope: !7764)
!7767 = !DILocation(line: 1899, column: 9, scope: !7760)
!7768 = !DILocation(line: 1901, column: 11, scope: !7769)
!7769 = distinct !DILexicalBlock(scope: !7764, file: !3, line: 1900, column: 7)
!7770 = !DILocation(line: 1901, column: 33, scope: !7769)
!7771 = !DILocation(line: 1901, column: 47, scope: !7769)
!7772 = !DILocation(line: 1901, column: 51, scope: !7769)
!7773 = !DILocation(line: 1901, column: 2, scope: !7769)
!7774 = !DILocation(line: 1902, column: 2, scope: !7775)
!7775 = distinct !DILexicalBlock(scope: !7769, file: !3, line: 1902, column: 2)
!7776 = !DILocation(line: 1902, column: 2, scope: !7777)
!7777 = distinct !DILexicalBlock(scope: !7775, file: !3, line: 1902, column: 2)
!7778 = !DILocation(line: 1903, column: 8, scope: !7779)
!7779 = distinct !DILexicalBlock(scope: !7777, file: !3, line: 1903, column: 8)
!7780 = !DILocation(line: 1903, column: 11, scope: !7779)
!7781 = !DILocation(line: 1903, column: 19, scope: !7779)
!7782 = !DILocation(line: 1903, column: 16, scope: !7779)
!7783 = !DILocation(line: 1904, column: 8, scope: !7779)
!7784 = !DILocation(line: 1904, column: 30, scope: !7779)
!7785 = !DILocation(line: 1904, column: 53, scope: !7779)
!7786 = !DILocation(line: 1904, column: 28, scope: !7779)
!7787 = !DILocation(line: 1905, column: 8, scope: !7779)
!7788 = !DILocation(line: 1905, column: 5, scope: !7779)
!7789 = !DILocation(line: 1903, column: 8, scope: !7777)
!7790 = !DILocation(line: 1906, column: 15, scope: !7779)
!7791 = !DILocation(line: 1907, column: 8, scope: !7779)
!7792 = !DILocation(line: 1907, column: 11, scope: !7779)
!7793 = !DILocation(line: 1907, column: 17, scope: !7779)
!7794 = !DILocation(line: 1907, column: 24, scope: !7779)
!7795 = !DILocation(line: 1907, column: 40, scope: !7779)
!7796 = !DILocation(line: 1907, column: 46, scope: !7779)
!7797 = !DILocation(line: 1906, column: 6, scope: !7779)
!7798 = !DILocation(line: 1905, column: 22, scope: !7779)
!7799 = distinct !{!7799, !7774, !7800}
!7800 = !DILocation(line: 1907, column: 49, scope: !7775)
!7801 = !DILocation(line: 1908, column: 7, scope: !7769)
!7802 = !DILocation(line: 1899, column: 29, scope: !7764)
!7803 = !DILocation(line: 1898, column: 23, scope: !7760)
!7804 = !DILocation(line: 1898, column: 37, scope: !7760)
!7805 = !DILocation(line: 1898, column: 21, scope: !7760)
!7806 = !DILocation(line: 1896, column: 3, scope: !7760)
!7807 = distinct !{!7807, !7762, !7808}
!7808 = !DILocation(line: 1908, column: 7, scope: !7755)
!7809 = !DILocation(line: 1909, column: 12, scope: !7720)
!7810 = !DILocation(line: 1909, column: 3, scope: !7720)
!7811 = !DILocation(line: 1910, column: 3, scope: !7812)
!7812 = distinct !DILexicalBlock(scope: !7720, file: !3, line: 1910, column: 3)
!7813 = !DILocation(line: 1910, column: 3, scope: !7814)
!7814 = distinct !DILexicalBlock(scope: !7812, file: !3, line: 1910, column: 3)
!7815 = !DILocation(line: 1911, column: 14, scope: !7814)
!7816 = !DILocation(line: 1911, column: 39, scope: !7814)
!7817 = !DILocation(line: 1911, column: 42, scope: !7814)
!7818 = !DILocation(line: 1911, column: 5, scope: !7814)
!7819 = distinct !{!7819, !7811, !7820}
!7820 = !DILocation(line: 1911, column: 73, scope: !7812)
!7821 = !DILocation(line: 1912, column: 12, scope: !7720)
!7822 = !DILocation(line: 1912, column: 3, scope: !7720)
!7823 = !DILocation(line: 1913, column: 3, scope: !7824)
!7824 = distinct !DILexicalBlock(scope: !7720, file: !3, line: 1913, column: 3)
!7825 = !DILocation(line: 1913, column: 3, scope: !7826)
!7826 = distinct !DILexicalBlock(scope: !7824, file: !3, line: 1913, column: 3)
!7827 = !DILocation(line: 1914, column: 14, scope: !7826)
!7828 = !DILocation(line: 1914, column: 36, scope: !7826)
!7829 = !DILocation(line: 1914, column: 5, scope: !7826)
!7830 = distinct !{!7830, !7823, !7831}
!7831 = !DILocation(line: 1914, column: 37, scope: !7824)
!7832 = !DILocation(line: 1915, column: 12, scope: !7720)
!7833 = !DILocation(line: 1915, column: 3, scope: !7720)
!7834 = !DILocation(line: 1916, column: 3, scope: !7835)
!7835 = distinct !DILexicalBlock(scope: !7720, file: !3, line: 1916, column: 3)
!7836 = !DILocation(line: 1916, column: 3, scope: !7837)
!7837 = distinct !DILexicalBlock(scope: !7835, file: !3, line: 1916, column: 3)
!7838 = !DILocation(line: 1917, column: 14, scope: !7837)
!7839 = !DILocation(line: 1917, column: 39, scope: !7837)
!7840 = !DILocation(line: 1917, column: 42, scope: !7837)
!7841 = !DILocation(line: 1917, column: 5, scope: !7837)
!7842 = distinct !{!7842, !7834, !7843}
!7843 = !DILocation(line: 1917, column: 73, scope: !7835)
!7844 = !DILocation(line: 1918, column: 12, scope: !7720)
!7845 = !DILocation(line: 1918, column: 3, scope: !7720)
!7846 = !DILocation(line: 1919, column: 10, scope: !7847)
!7847 = distinct !DILexicalBlock(scope: !7720, file: !3, line: 1919, column: 3)
!7848 = !DILocation(line: 1919, column: 8, scope: !7847)
!7849 = !DILocation(line: 1919, column: 21, scope: !7850)
!7850 = distinct !DILexicalBlock(scope: !7847, file: !3, line: 1919, column: 3)
!7851 = !DILocation(line: 1919, column: 25, scope: !7850)
!7852 = !DILocation(line: 1919, column: 23, scope: !7850)
!7853 = !DILocation(line: 1919, column: 3, scope: !7847)
!7854 = !DILocalVariable(name: "cover_class", scope: !7855, file: !3, line: 1921, type: !390)
!7855 = distinct !DILexicalBlock(scope: !7850, file: !3, line: 1920, column: 5)
!7856 = !DILocation(line: 1921, column: 22, scope: !7855)
!7857 = !DILocation(line: 1923, column: 41, scope: !7855)
!7858 = !DILocation(line: 1923, column: 21, scope: !7855)
!7859 = !DILocation(line: 1923, column: 19, scope: !7855)
!7860 = !DILocation(line: 1924, column: 11, scope: !7861)
!7861 = distinct !DILexicalBlock(scope: !7855, file: !3, line: 1924, column: 11)
!7862 = !DILocation(line: 1924, column: 27, scope: !7861)
!7863 = !DILocation(line: 1924, column: 40, scope: !7861)
!7864 = !DILocation(line: 1924, column: 53, scope: !7861)
!7865 = !DILocation(line: 1924, column: 11, scope: !7855)
!7866 = !DILocation(line: 1925, column: 2, scope: !7861)
!7867 = !DILocation(line: 1926, column: 16, scope: !7855)
!7868 = !DILocation(line: 1926, column: 57, scope: !7855)
!7869 = !DILocation(line: 1926, column: 41, scope: !7855)
!7870 = !DILocation(line: 1927, column: 9, scope: !7855)
!7871 = !DILocation(line: 1927, column: 25, scope: !7855)
!7872 = !DILocation(line: 1927, column: 38, scope: !7855)
!7873 = !DILocation(line: 1926, column: 7, scope: !7855)
!7874 = !DILocation(line: 1928, column: 5, scope: !7855)
!7875 = !DILocation(line: 1919, column: 52, scope: !7850)
!7876 = !DILocation(line: 1919, column: 3, scope: !7850)
!7877 = distinct !{!7877, !7853, !7878}
!7878 = !DILocation(line: 1928, column: 5, scope: !7847)
!7879 = !DILocation(line: 1929, column: 12, scope: !7720)
!7880 = !DILocation(line: 1929, column: 3, scope: !7720)
!7881 = !DILocation(line: 1930, column: 1, scope: !7720)
!7882 = distinct !DISubprogram(name: "color_allocnos", scope: !3, file: !3, line: 1772, type: !5837, scopeLine: 1773, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!7883 = !DILocalVariable(name: "i", scope: !7882, file: !3, line: 1774, type: !7)
!7884 = !DILocation(line: 1774, column: 16, scope: !7882)
!7885 = !DILocalVariable(name: "n", scope: !7882, file: !3, line: 1774, type: !7)
!7886 = !DILocation(line: 1774, column: 19, scope: !7882)
!7887 = !DILocalVariable(name: "bi", scope: !7882, file: !3, line: 1775, type: !3652)
!7888 = !DILocation(line: 1775, column: 19, scope: !7882)
!7889 = !DILocalVariable(name: "a", scope: !7882, file: !3, line: 1776, type: !612)
!7890 = !DILocation(line: 1776, column: 17, scope: !7882)
!7891 = !DILocation(line: 1778, column: 23, scope: !7882)
!7892 = !DILocation(line: 1779, column: 40, scope: !7882)
!7893 = !DILocation(line: 1779, column: 38, scope: !7882)
!7894 = !DILocation(line: 1780, column: 7, scope: !7895)
!7895 = distinct !DILexicalBlock(scope: !7882, file: !3, line: 1780, column: 7)
!7896 = !DILocation(line: 1780, column: 7, scope: !7882)
!7897 = !DILocation(line: 1781, column: 5, scope: !7895)
!7898 = !DILocation(line: 1782, column: 7, scope: !7899)
!7899 = distinct !DILexicalBlock(scope: !7882, file: !3, line: 1782, column: 7)
!7900 = !DILocation(line: 1782, column: 26, scope: !7899)
!7901 = !DILocation(line: 1782, column: 7, scope: !7882)
!7902 = !DILocation(line: 1784, column: 9, scope: !7903)
!7903 = distinct !DILexicalBlock(scope: !7899, file: !3, line: 1783, column: 5)
!7904 = !DILocation(line: 1785, column: 7, scope: !7905)
!7905 = distinct !DILexicalBlock(scope: !7903, file: !3, line: 1785, column: 7)
!7906 = !DILocation(line: 1785, column: 7, scope: !7907)
!7907 = distinct !DILexicalBlock(scope: !7905, file: !3, line: 1785, column: 7)
!7908 = !DILocation(line: 1787, column: 8, scope: !7909)
!7909 = distinct !DILexicalBlock(scope: !7907, file: !3, line: 1786, column: 2)
!7910 = !DILocation(line: 1787, column: 21, scope: !7909)
!7911 = !DILocation(line: 1787, column: 6, scope: !7909)
!7912 = !DILocation(line: 1788, column: 8, scope: !7913)
!7913 = distinct !DILexicalBlock(scope: !7909, file: !3, line: 1788, column: 8)
!7914 = !DILocation(line: 1788, column: 32, scope: !7913)
!7915 = !DILocation(line: 1788, column: 8, scope: !7909)
!7916 = !DILocation(line: 1790, column: 8, scope: !7917)
!7917 = distinct !DILexicalBlock(scope: !7913, file: !3, line: 1789, column: 6)
!7918 = !DILocation(line: 1790, column: 31, scope: !7917)
!7919 = !DILocation(line: 1791, column: 8, scope: !7917)
!7920 = !DILocation(line: 1791, column: 31, scope: !7917)
!7921 = !DILocation(line: 1794, column: 12, scope: !7922)
!7922 = distinct !DILexicalBlock(scope: !7917, file: !3, line: 1794, column: 12)
!7923 = !DILocation(line: 1794, column: 38, scope: !7922)
!7924 = !DILocation(line: 1794, column: 42, scope: !7922)
!7925 = !DILocation(line: 1794, column: 45, scope: !7922)
!7926 = !DILocation(line: 1794, column: 59, scope: !7922)
!7927 = !DILocation(line: 1794, column: 12, scope: !7917)
!7928 = !DILocation(line: 1796, column: 14, scope: !7929)
!7929 = distinct !DILexicalBlock(scope: !7922, file: !3, line: 1795, column: 3)
!7930 = !DILocation(line: 1796, column: 5, scope: !7929)
!7931 = !DILocation(line: 1797, column: 30, scope: !7929)
!7932 = !DILocation(line: 1797, column: 5, scope: !7929)
!7933 = !DILocation(line: 1798, column: 14, scope: !7929)
!7934 = !DILocation(line: 1798, column: 5, scope: !7929)
!7935 = !DILocation(line: 1799, column: 3, scope: !7929)
!7936 = !DILocation(line: 1800, column: 8, scope: !7917)
!7937 = !DILocation(line: 1802, column: 27, scope: !7909)
!7938 = !DILocation(line: 1802, column: 4, scope: !7909)
!7939 = !DILocation(line: 1802, column: 21, scope: !7909)
!7940 = !DILocation(line: 1802, column: 25, scope: !7909)
!7941 = !DILocation(line: 1803, column: 2, scope: !7909)
!7942 = distinct !{!7942, !7904, !7943}
!7943 = !DILocation(line: 1803, column: 2, scope: !7905)
!7944 = !DILocation(line: 1804, column: 11, scope: !7945)
!7945 = distinct !DILexicalBlock(scope: !7903, file: !3, line: 1804, column: 11)
!7946 = !DILocation(line: 1804, column: 13, scope: !7945)
!7947 = !DILocation(line: 1804, column: 11, scope: !7903)
!7948 = !DILocation(line: 1806, column: 30, scope: !7949)
!7949 = distinct !DILexicalBlock(scope: !7945, file: !3, line: 1805, column: 2)
!7950 = !DILocation(line: 1806, column: 47, scope: !7949)
!7951 = !DILocation(line: 1806, column: 4, scope: !7949)
!7952 = !DILocation(line: 1808, column: 16, scope: !7949)
!7953 = !DILocation(line: 1808, column: 33, scope: !7949)
!7954 = !DILocation(line: 1808, column: 4, scope: !7949)
!7955 = !DILocation(line: 1814, column: 11, scope: !7956)
!7956 = distinct !DILexicalBlock(scope: !7949, file: !3, line: 1814, column: 4)
!7957 = !DILocation(line: 1814, column: 9, scope: !7956)
!7958 = !DILocation(line: 1814, column: 16, scope: !7959)
!7959 = distinct !DILexicalBlock(scope: !7956, file: !3, line: 1814, column: 4)
!7960 = !DILocation(line: 1814, column: 20, scope: !7959)
!7961 = !DILocation(line: 1814, column: 18, scope: !7959)
!7962 = !DILocation(line: 1814, column: 4, scope: !7956)
!7963 = !DILocation(line: 1816, column: 12, scope: !7964)
!7964 = distinct !DILexicalBlock(scope: !7959, file: !3, line: 1815, column: 6)
!7965 = !DILocation(line: 1816, column: 28, scope: !7964)
!7966 = !DILocation(line: 1816, column: 10, scope: !7964)
!7967 = !DILocation(line: 1817, column: 12, scope: !7968)
!7968 = distinct !DILexicalBlock(scope: !7964, file: !3, line: 1817, column: 12)
!7969 = !DILocation(line: 1817, column: 38, scope: !7968)
!7970 = !DILocation(line: 1817, column: 42, scope: !7968)
!7971 = !DILocation(line: 1817, column: 45, scope: !7968)
!7972 = !DILocation(line: 1817, column: 59, scope: !7968)
!7973 = !DILocation(line: 1817, column: 12, scope: !7964)
!7974 = !DILocation(line: 1819, column: 14, scope: !7975)
!7975 = distinct !DILexicalBlock(scope: !7968, file: !3, line: 1818, column: 3)
!7976 = !DILocation(line: 1819, column: 5, scope: !7975)
!7977 = !DILocation(line: 1820, column: 30, scope: !7975)
!7978 = !DILocation(line: 1820, column: 5, scope: !7975)
!7979 = !DILocation(line: 1821, column: 14, scope: !7975)
!7980 = !DILocation(line: 1821, column: 5, scope: !7975)
!7981 = !DILocation(line: 1822, column: 3, scope: !7975)
!7982 = !DILocation(line: 1823, column: 29, scope: !7983)
!7983 = distinct !DILexicalBlock(scope: !7964, file: !3, line: 1823, column: 12)
!7984 = !DILocation(line: 1823, column: 12, scope: !7983)
!7985 = !DILocation(line: 1823, column: 12, scope: !7964)
!7986 = !DILocation(line: 1825, column: 9, scope: !7987)
!7987 = distinct !DILexicalBlock(scope: !7988, file: !3, line: 1825, column: 9)
!7988 = distinct !DILexicalBlock(scope: !7983, file: !3, line: 1824, column: 3)
!7989 = !DILocation(line: 1825, column: 35, scope: !7987)
!7990 = !DILocation(line: 1825, column: 39, scope: !7987)
!7991 = !DILocation(line: 1825, column: 42, scope: !7987)
!7992 = !DILocation(line: 1825, column: 56, scope: !7987)
!7993 = !DILocation(line: 1825, column: 9, scope: !7988)
!7994 = !DILocation(line: 1826, column: 16, scope: !7987)
!7995 = !DILocation(line: 1827, column: 9, scope: !7987)
!7996 = !DILocation(line: 1826, column: 7, scope: !7987)
!7997 = !DILocation(line: 1828, column: 3, scope: !7988)
!7998 = !DILocation(line: 1831, column: 9, scope: !7999)
!7999 = distinct !DILexicalBlock(scope: !8000, file: !3, line: 1831, column: 9)
!8000 = distinct !DILexicalBlock(scope: !7983, file: !3, line: 1830, column: 3)
!8001 = !DILocation(line: 1831, column: 35, scope: !7999)
!8002 = !DILocation(line: 1831, column: 39, scope: !7999)
!8003 = !DILocation(line: 1831, column: 42, scope: !7999)
!8004 = !DILocation(line: 1831, column: 56, scope: !7999)
!8005 = !DILocation(line: 1831, column: 9, scope: !8000)
!8006 = !DILocation(line: 1832, column: 16, scope: !7999)
!8007 = !DILocation(line: 1832, column: 7, scope: !7999)
!8008 = !DILocation(line: 1834, column: 6, scope: !7964)
!8009 = !DILocation(line: 1814, column: 24, scope: !7959)
!8010 = !DILocation(line: 1814, column: 4, scope: !7959)
!8011 = distinct !{!8011, !7962, !8012}
!8012 = !DILocation(line: 1834, column: 6, scope: !7956)
!8013 = !DILocation(line: 1835, column: 2, scope: !7949)
!8014 = !DILocation(line: 1836, column: 5, scope: !7903)
!8015 = !DILocation(line: 1840, column: 32, scope: !8016)
!8016 = distinct !DILexicalBlock(scope: !7899, file: !3, line: 1838, column: 5)
!8017 = !DILocation(line: 1841, column: 34, scope: !8016)
!8018 = !DILocation(line: 1842, column: 7, scope: !8019)
!8019 = distinct !DILexicalBlock(scope: !8016, file: !3, line: 1842, column: 7)
!8020 = !DILocation(line: 1842, column: 7, scope: !8021)
!8021 = distinct !DILexicalBlock(scope: !8019, file: !3, line: 1842, column: 7)
!8022 = !DILocation(line: 1844, column: 8, scope: !8023)
!8023 = distinct !DILexicalBlock(scope: !8021, file: !3, line: 1843, column: 2)
!8024 = !DILocation(line: 1844, column: 21, scope: !8023)
!8025 = !DILocation(line: 1844, column: 6, scope: !8023)
!8026 = !DILocation(line: 1845, column: 8, scope: !8027)
!8027 = distinct !DILexicalBlock(scope: !8023, file: !3, line: 1845, column: 8)
!8028 = !DILocation(line: 1845, column: 32, scope: !8027)
!8029 = !DILocation(line: 1845, column: 8, scope: !8023)
!8030 = !DILocation(line: 1847, column: 8, scope: !8031)
!8031 = distinct !DILexicalBlock(scope: !8027, file: !3, line: 1846, column: 6)
!8032 = !DILocation(line: 1847, column: 31, scope: !8031)
!8033 = !DILocation(line: 1848, column: 8, scope: !8031)
!8034 = !DILocation(line: 1848, column: 31, scope: !8031)
!8035 = !DILocation(line: 1851, column: 12, scope: !8036)
!8036 = distinct !DILexicalBlock(scope: !8031, file: !3, line: 1851, column: 12)
!8037 = !DILocation(line: 1851, column: 38, scope: !8036)
!8038 = !DILocation(line: 1851, column: 42, scope: !8036)
!8039 = !DILocation(line: 1851, column: 45, scope: !8036)
!8040 = !DILocation(line: 1851, column: 59, scope: !8036)
!8041 = !DILocation(line: 1851, column: 12, scope: !8031)
!8042 = !DILocation(line: 1853, column: 14, scope: !8043)
!8043 = distinct !DILexicalBlock(scope: !8036, file: !3, line: 1852, column: 3)
!8044 = !DILocation(line: 1853, column: 5, scope: !8043)
!8045 = !DILocation(line: 1854, column: 30, scope: !8043)
!8046 = !DILocation(line: 1854, column: 5, scope: !8043)
!8047 = !DILocation(line: 1855, column: 14, scope: !8043)
!8048 = !DILocation(line: 1855, column: 5, scope: !8043)
!8049 = !DILocation(line: 1856, column: 3, scope: !8043)
!8050 = !DILocation(line: 1857, column: 8, scope: !8031)
!8051 = !DILocation(line: 1859, column: 29, scope: !8023)
!8052 = !DILocation(line: 1859, column: 4, scope: !8023)
!8053 = !DILocation(line: 1860, column: 2, scope: !8023)
!8054 = distinct !{!8054, !8018, !8055}
!8055 = !DILocation(line: 1860, column: 2, scope: !8019)
!8056 = !DILocation(line: 1861, column: 7, scope: !8016)
!8057 = !DILocation(line: 1862, column: 7, scope: !8016)
!8058 = !DILocation(line: 1864, column: 7, scope: !8059)
!8059 = distinct !DILexicalBlock(scope: !7882, file: !3, line: 1864, column: 7)
!8060 = !DILocation(line: 1864, column: 7, scope: !7882)
!8061 = !DILocation(line: 1866, column: 5, scope: !8062)
!8062 = distinct !DILexicalBlock(scope: !8059, file: !3, line: 1866, column: 5)
!8063 = !DILocation(line: 1866, column: 5, scope: !8064)
!8064 = distinct !DILexicalBlock(scope: !8062, file: !3, line: 1866, column: 5)
!8065 = !DILocation(line: 1868, column: 6, scope: !8066)
!8066 = distinct !DILexicalBlock(scope: !8064, file: !3, line: 1867, column: 7)
!8067 = !DILocation(line: 1868, column: 19, scope: !8066)
!8068 = !DILocation(line: 1868, column: 4, scope: !8066)
!8069 = !DILocation(line: 1869, column: 40, scope: !8066)
!8070 = !DILocation(line: 1869, column: 2, scope: !8066)
!8071 = !DILocation(line: 1869, column: 38, scope: !8066)
!8072 = !DILocation(line: 1870, column: 39, scope: !8066)
!8073 = !DILocation(line: 1870, column: 2, scope: !8066)
!8074 = !DILocation(line: 1870, column: 37, scope: !8066)
!8075 = !DILocation(line: 1871, column: 7, scope: !8066)
!8076 = distinct !{!8076, !8061, !8077}
!8077 = !DILocation(line: 1871, column: 7, scope: !8062)
!8078 = !DILocation(line: 1872, column: 20, scope: !7882)
!8079 = !DILocation(line: 1872, column: 3, scope: !7882)
!8080 = !DILocation(line: 1873, column: 23, scope: !7882)
!8081 = !DILocation(line: 1874, column: 1, scope: !7882)
!8082 = distinct !DISubprogram(name: "loop_depth", scope: !146, file: !146, line: 425, type: !8083, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!8083 = !DISubroutineType(types: !8084)
!8084 = !{!7, !8085}
!8085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8086, size: 64)
!8086 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1043)
!8087 = !DILocalVariable(name: "loop", arg: 1, scope: !8082, file: !146, line: 425, type: !8085)
!8088 = !DILocation(line: 425, column: 32, scope: !8082)
!8089 = !DILocation(line: 427, column: 10, scope: !8082)
!8090 = !DILocation(line: 427, column: 3, scope: !8082)
!8091 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !146, file: !146, line: 85, type: !8092, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!8092 = !DISubroutineType(types: !8093)
!8093 = !{!7, !8094}
!8094 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8095, size: 64)
!8095 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1062)
!8096 = !DILocalVariable(name: "vec_", arg: 1, scope: !8091, file: !146, line: 85, type: !8094)
!8097 = !DILocation(line: 85, column: 1, scope: !8091)
!8098 = distinct !DISubprogram(name: "put_allocno_into_bucket", scope: !3, file: !3, line: 1494, type: !2734, scopeLine: 1495, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!8099 = !DILocalVariable(name: "allocno", arg: 1, scope: !8098, file: !3, line: 1494, type: !612)
!8100 = !DILocation(line: 1494, column: 40, scope: !8098)
!8101 = !DILocalVariable(name: "cover_class", scope: !8098, file: !3, line: 1496, type: !390)
!8102 = !DILocation(line: 1496, column: 18, scope: !8098)
!8103 = !DILocation(line: 1498, column: 17, scope: !8098)
!8104 = !DILocation(line: 1498, column: 15, scope: !8098)
!8105 = !DILocation(line: 1499, column: 7, scope: !8106)
!8106 = distinct !DILexicalBlock(scope: !8098, file: !3, line: 1499, column: 7)
!8107 = !DILocation(line: 1499, column: 52, scope: !8106)
!8108 = !DILocation(line: 1499, column: 49, scope: !8106)
!8109 = !DILocation(line: 1499, column: 7, scope: !8098)
!8110 = !DILocation(line: 1500, column: 5, scope: !8106)
!8111 = !DILocation(line: 1501, column: 3, scope: !8098)
!8112 = !DILocation(line: 1501, column: 32, scope: !8098)
!8113 = !DILocation(line: 1502, column: 38, scope: !8098)
!8114 = !DILocation(line: 1502, column: 3, scope: !8098)
!8115 = !DILocation(line: 1503, column: 37, scope: !8098)
!8116 = !DILocation(line: 1503, column: 3, scope: !8098)
!8117 = !DILocation(line: 1504, column: 7, scope: !8118)
!8118 = distinct !DILexicalBlock(scope: !8098, file: !3, line: 1504, column: 7)
!8119 = !DILocation(line: 1505, column: 29, scope: !8118)
!8120 = !DILocation(line: 1505, column: 9, scope: !8118)
!8121 = !DILocation(line: 1505, column: 42, scope: !8118)
!8122 = !DILocation(line: 1505, column: 7, scope: !8118)
!8123 = !DILocation(line: 1506, column: 10, scope: !8118)
!8124 = !DILocation(line: 1506, column: 7, scope: !8118)
!8125 = !DILocation(line: 1504, column: 7, scope: !8098)
!8126 = !DILocation(line: 1507, column: 28, scope: !8118)
!8127 = !DILocation(line: 1507, column: 5, scope: !8118)
!8128 = !DILocation(line: 1509, column: 28, scope: !8118)
!8129 = !DILocation(line: 1509, column: 5, scope: !8118)
!8130 = !DILocation(line: 1510, column: 1, scope: !8098)
!8131 = distinct !DISubprogram(name: "push_allocnos_to_stack", scope: !3, file: !3, line: 1148, type: !5837, scopeLine: 1149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!8132 = !DILocalVariable(name: "allocno", scope: !8131, file: !3, line: 1150, type: !612)
!8133 = !DILocation(line: 1150, column: 17, scope: !8131)
!8134 = !DILocalVariable(name: "a", scope: !8131, file: !3, line: 1150, type: !612)
!8135 = !DILocation(line: 1150, column: 26, scope: !8131)
!8136 = !DILocalVariable(name: "i_allocno", scope: !8131, file: !3, line: 1150, type: !612)
!8137 = !DILocation(line: 1150, column: 29, scope: !8131)
!8138 = !DILocalVariable(name: "allocno_vec", scope: !8131, file: !3, line: 1150, type: !611)
!8139 = !DILocation(line: 1150, column: 41, scope: !8131)
!8140 = !DILocalVariable(name: "cover_class", scope: !8131, file: !3, line: 1151, type: !390)
!8141 = !DILocation(line: 1151, column: 18, scope: !8131)
!8142 = !DILocalVariable(name: "rclass", scope: !8131, file: !3, line: 1151, type: !390)
!8143 = !DILocation(line: 1151, column: 31, scope: !8131)
!8144 = !DILocalVariable(name: "allocno_pri", scope: !8131, file: !3, line: 1152, type: !610)
!8145 = !DILocation(line: 1152, column: 7, scope: !8131)
!8146 = !DILocalVariable(name: "i_allocno_pri", scope: !8131, file: !3, line: 1152, type: !610)
!8147 = !DILocation(line: 1152, column: 20, scope: !8131)
!8148 = !DILocalVariable(name: "allocno_cost", scope: !8131, file: !3, line: 1152, type: !610)
!8149 = !DILocation(line: 1152, column: 35, scope: !8131)
!8150 = !DILocalVariable(name: "i_allocno_cost", scope: !8131, file: !3, line: 1152, type: !610)
!8151 = !DILocation(line: 1152, column: 49, scope: !8131)
!8152 = !DILocalVariable(name: "i", scope: !8131, file: !3, line: 1153, type: !610)
!8153 = !DILocation(line: 1153, column: 7, scope: !8131)
!8154 = !DILocalVariable(name: "j", scope: !8131, file: !3, line: 1153, type: !610)
!8155 = !DILocation(line: 1153, column: 10, scope: !8131)
!8156 = !DILocalVariable(name: "num", scope: !8131, file: !3, line: 1153, type: !610)
!8157 = !DILocation(line: 1153, column: 13, scope: !8131)
!8158 = !DILocalVariable(name: "cover_class_allocnos_num", scope: !8131, file: !3, line: 1153, type: !1741)
!8159 = !DILocation(line: 1153, column: 18, scope: !8131)
!8160 = !DILocalVariable(name: "cover_class_allocnos", scope: !8131, file: !3, line: 1154, type: !8161)
!8161 = !DICompositeType(tag: DW_TAG_array_type, baseType: !611, size: 1728, elements: !1742)
!8162 = !DILocation(line: 1154, column: 18, scope: !8131)
!8163 = !DILocalVariable(name: "cost", scope: !8131, file: !3, line: 1155, type: !610)
!8164 = !DILocation(line: 1155, column: 7, scope: !8131)
!8165 = !DILocation(line: 1158, column: 3, scope: !8131)
!8166 = !DILocation(line: 1159, column: 10, scope: !8167)
!8167 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 1159, column: 3)
!8168 = !DILocation(line: 1159, column: 8, scope: !8167)
!8169 = !DILocation(line: 1159, column: 15, scope: !8170)
!8170 = distinct !DILexicalBlock(scope: !8167, file: !3, line: 1159, column: 3)
!8171 = !DILocation(line: 1159, column: 19, scope: !8170)
!8172 = !DILocation(line: 1159, column: 17, scope: !8170)
!8173 = !DILocation(line: 1159, column: 3, scope: !8167)
!8174 = !DILocation(line: 1161, column: 41, scope: !8175)
!8175 = distinct !DILexicalBlock(scope: !8170, file: !3, line: 1160, column: 5)
!8176 = !DILocation(line: 1161, column: 21, scope: !8175)
!8177 = !DILocation(line: 1161, column: 19, scope: !8175)
!8178 = !DILocation(line: 1162, column: 32, scope: !8175)
!8179 = !DILocation(line: 1162, column: 7, scope: !8175)
!8180 = !DILocation(line: 1162, column: 45, scope: !8175)
!8181 = !DILocation(line: 1163, column: 28, scope: !8175)
!8182 = !DILocation(line: 1163, column: 7, scope: !8175)
!8183 = !DILocation(line: 1163, column: 41, scope: !8175)
!8184 = !DILocation(line: 1164, column: 39, scope: !8175)
!8185 = !DILocation(line: 1164, column: 7, scope: !8175)
!8186 = !DILocation(line: 1164, column: 52, scope: !8175)
!8187 = !DILocation(line: 1165, column: 5, scope: !8175)
!8188 = !DILocation(line: 1159, column: 46, scope: !8170)
!8189 = !DILocation(line: 1159, column: 3, scope: !8170)
!8190 = distinct !{!8190, !8173, !8191}
!8191 = !DILocation(line: 1165, column: 5, scope: !8167)
!8192 = !DILocation(line: 1167, column: 18, scope: !8193)
!8193 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 1167, column: 3)
!8194 = !DILocation(line: 1167, column: 16, scope: !8193)
!8195 = !DILocation(line: 1167, column: 8, scope: !8193)
!8196 = !DILocation(line: 1168, column: 8, scope: !8197)
!8197 = distinct !DILexicalBlock(scope: !8193, file: !3, line: 1167, column: 3)
!8198 = !DILocation(line: 1168, column: 16, scope: !8197)
!8199 = !DILocation(line: 1167, column: 3, scope: !8193)
!8200 = !DILocation(line: 1170, column: 24, scope: !8201)
!8201 = distinct !DILexicalBlock(scope: !8197, file: !3, line: 1170, column: 9)
!8202 = !DILocation(line: 1170, column: 22, scope: !8201)
!8203 = !DILocation(line: 1170, column: 55, scope: !8201)
!8204 = !DILocation(line: 1170, column: 9, scope: !8197)
!8205 = !DILocation(line: 1172, column: 27, scope: !8206)
!8206 = distinct !DILexicalBlock(scope: !8201, file: !3, line: 1171, column: 7)
!8207 = !DILocation(line: 1172, column: 2, scope: !8206)
!8208 = !DILocation(line: 1172, column: 39, scope: !8206)
!8209 = !DILocation(line: 1173, column: 7, scope: !8206)
!8210 = !DILocation(line: 1174, column: 11, scope: !8211)
!8211 = distinct !DILexicalBlock(scope: !8206, file: !3, line: 1174, column: 2)
!8212 = !DILocation(line: 1174, column: 9, scope: !8211)
!8213 = !DILocation(line: 1174, column: 7, scope: !8211)
!8214 = !DILocation(line: 1177, column: 44, scope: !8215)
!8215 = distinct !DILexicalBlock(scope: !8216, file: !3, line: 1176, column: 4)
!8216 = distinct !DILexicalBlock(scope: !8211, file: !3, line: 1174, column: 2)
!8217 = !DILocation(line: 1177, column: 14, scope: !8215)
!8218 = !DILocation(line: 1177, column: 11, scope: !8215)
!8219 = !DILocation(line: 1178, column: 10, scope: !8220)
!8220 = distinct !DILexicalBlock(scope: !8215, file: !3, line: 1178, column: 10)
!8221 = !DILocation(line: 1178, column: 15, scope: !8220)
!8222 = !DILocation(line: 1178, column: 12, scope: !8220)
!8223 = !DILocation(line: 1178, column: 10, scope: !8215)
!8224 = !DILocation(line: 1179, column: 8, scope: !8220)
!8225 = !DILocation(line: 1180, column: 4, scope: !8215)
!8226 = !DILocation(line: 1175, column: 11, scope: !8216)
!8227 = !DILocation(line: 1175, column: 9, scope: !8216)
!8228 = !DILocation(line: 1174, column: 2, scope: !8216)
!8229 = distinct !{!8229, !8230, !8231}
!8230 = !DILocation(line: 1174, column: 2, scope: !8211)
!8231 = !DILocation(line: 1180, column: 4, scope: !8211)
!8232 = !DILocation(line: 1183, column: 27, scope: !8206)
!8233 = !DILocation(line: 1183, column: 2, scope: !8206)
!8234 = !DILocation(line: 1183, column: 25, scope: !8206)
!8235 = !DILocation(line: 1184, column: 7, scope: !8206)
!8236 = !DILocation(line: 1170, column: 58, scope: !8201)
!8237 = !DILocation(line: 1169, column: 18, scope: !8197)
!8238 = !DILocation(line: 1169, column: 16, scope: !8197)
!8239 = !DILocation(line: 1167, column: 3, scope: !8197)
!8240 = distinct !{!8240, !8199, !8241}
!8241 = !DILocation(line: 1184, column: 7, scope: !8193)
!8242 = !DILocation(line: 1187, column: 16, scope: !8243)
!8243 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 1187, column: 3)
!8244 = !DILocation(line: 1187, column: 12, scope: !8243)
!8245 = !DILocation(line: 1187, column: 8, scope: !8243)
!8246 = !DILocation(line: 1187, column: 21, scope: !8247)
!8247 = distinct !DILexicalBlock(scope: !8243, file: !3, line: 1187, column: 3)
!8248 = !DILocation(line: 1187, column: 25, scope: !8247)
!8249 = !DILocation(line: 1187, column: 23, scope: !8247)
!8250 = !DILocation(line: 1187, column: 3, scope: !8243)
!8251 = !DILocation(line: 1189, column: 41, scope: !8252)
!8252 = distinct !DILexicalBlock(scope: !8247, file: !3, line: 1188, column: 5)
!8253 = !DILocation(line: 1189, column: 21, scope: !8252)
!8254 = !DILocation(line: 1189, column: 19, scope: !8252)
!8255 = !DILocation(line: 1192, column: 36, scope: !8256)
!8256 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 1192, column: 11)
!8257 = !DILocation(line: 1192, column: 11, scope: !8256)
!8258 = !DILocation(line: 1192, column: 49, scope: !8256)
!8259 = !DILocation(line: 1192, column: 11, scope: !8252)
!8260 = !DILocation(line: 1194, column: 40, scope: !8261)
!8261 = distinct !DILexicalBlock(scope: !8256, file: !3, line: 1193, column: 3)
!8262 = !DILocation(line: 1194, column: 64, scope: !8261)
!8263 = !DILocation(line: 1194, column: 62, scope: !8261)
!8264 = !DILocation(line: 1194, column: 25, scope: !8261)
!8265 = !DILocation(line: 1194, column: 4, scope: !8261)
!8266 = !DILocation(line: 1194, column: 38, scope: !8261)
!8267 = !DILocation(line: 1195, column: 36, scope: !8261)
!8268 = !DILocation(line: 1195, column: 11, scope: !8261)
!8269 = !DILocation(line: 1195, column: 8, scope: !8261)
!8270 = !DILocation(line: 1196, column: 29, scope: !8261)
!8271 = !DILocation(line: 1196, column: 4, scope: !8261)
!8272 = !DILocation(line: 1196, column: 42, scope: !8261)
!8273 = !DILocation(line: 1197, column: 2, scope: !8261)
!8274 = !DILocation(line: 1198, column: 11, scope: !8275)
!8275 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 1198, column: 11)
!8276 = !DILocation(line: 1198, column: 11, scope: !8252)
!8277 = !DILocation(line: 1200, column: 6, scope: !8275)
!8278 = !DILocation(line: 1199, column: 34, scope: !8275)
!8279 = !DILocation(line: 1199, column: 2, scope: !8275)
!8280 = !DILocation(line: 1200, column: 4, scope: !8275)
!8281 = !DILocation(line: 1203, column: 5, scope: !8252)
!8282 = !DILocation(line: 1187, column: 52, scope: !8247)
!8283 = !DILocation(line: 1187, column: 3, scope: !8247)
!8284 = distinct !{!8284, !8250, !8285}
!8285 = !DILocation(line: 1203, column: 5, scope: !8243)
!8286 = !DILocation(line: 1206, column: 18, scope: !8287)
!8287 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 1206, column: 3)
!8288 = !DILocation(line: 1206, column: 16, scope: !8287)
!8289 = !DILocation(line: 1206, column: 8, scope: !8287)
!8290 = !DILocation(line: 1207, column: 8, scope: !8291)
!8291 = distinct !DILexicalBlock(scope: !8287, file: !3, line: 1206, column: 3)
!8292 = !DILocation(line: 1207, column: 16, scope: !8291)
!8293 = !DILocation(line: 1206, column: 3, scope: !8287)
!8294 = !DILocation(line: 1209, column: 24, scope: !8295)
!8295 = distinct !DILexicalBlock(scope: !8291, file: !3, line: 1209, column: 9)
!8296 = !DILocation(line: 1209, column: 22, scope: !8295)
!8297 = !DILocation(line: 1209, column: 55, scope: !8295)
!8298 = !DILocation(line: 1209, column: 9, scope: !8291)
!8299 = !DILocation(line: 1212, column: 61, scope: !8300)
!8300 = distinct !DILexicalBlock(scope: !8295, file: !3, line: 1210, column: 7)
!8301 = !DILocation(line: 1212, column: 5, scope: !8300)
!8302 = !DILocation(line: 1211, column: 2, scope: !8300)
!8303 = !DILocation(line: 1212, column: 43, scope: !8300)
!8304 = !DILocation(line: 1212, column: 18, scope: !8300)
!8305 = !DILocation(line: 1212, column: 55, scope: !8300)
!8306 = !DILocation(line: 1212, column: 59, scope: !8300)
!8307 = !DILocation(line: 1213, column: 38, scope: !8308)
!8308 = distinct !DILexicalBlock(scope: !8300, file: !3, line: 1213, column: 6)
!8309 = !DILocation(line: 1213, column: 6, scope: !8308)
!8310 = !DILocation(line: 1213, column: 51, scope: !8308)
!8311 = !DILocation(line: 1213, column: 6, scope: !8300)
!8312 = !DILocation(line: 1214, column: 55, scope: !8308)
!8313 = !DILocation(line: 1214, column: 23, scope: !8308)
!8314 = !DILocation(line: 1215, column: 26, scope: !8308)
!8315 = !DILocation(line: 1215, column: 9, scope: !8308)
!8316 = !DILocation(line: 1216, column: 28, scope: !8308)
!8317 = !DILocation(line: 1216, column: 9, scope: !8308)
!8318 = !DILocation(line: 1214, column: 4, scope: !8308)
!8319 = !DILocation(line: 1217, column: 7, scope: !8300)
!8320 = !DILocation(line: 1209, column: 58, scope: !8295)
!8321 = !DILocation(line: 1208, column: 18, scope: !8291)
!8322 = !DILocation(line: 1208, column: 16, scope: !8291)
!8323 = !DILocation(line: 1206, column: 3, scope: !8291)
!8324 = distinct !{!8324, !8293, !8325}
!8325 = !DILocation(line: 1217, column: 7, scope: !8287)
!8326 = !DILocation(line: 1218, column: 3, scope: !8131)
!8327 = !DILocation(line: 1220, column: 7, scope: !8328)
!8328 = distinct !DILexicalBlock(scope: !8329, file: !3, line: 1219, column: 5)
!8329 = distinct !DILexicalBlock(scope: !8330, file: !3, line: 1218, column: 3)
!8330 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 1218, column: 3)
!8331 = !DILocation(line: 1221, column: 17, scope: !8328)
!8332 = !DILocation(line: 1221, column: 15, scope: !8328)
!8333 = !DILocation(line: 1222, column: 11, scope: !8334)
!8334 = distinct !DILexicalBlock(scope: !8328, file: !3, line: 1222, column: 11)
!8335 = !DILocation(line: 1222, column: 19, scope: !8334)
!8336 = !DILocation(line: 1222, column: 11, scope: !8328)
!8337 = !DILocation(line: 1223, column: 2, scope: !8334)
!8338 = !DILocation(line: 1224, column: 21, scope: !8328)
!8339 = !DILocation(line: 1224, column: 19, scope: !8328)
!8340 = !DILocation(line: 1225, column: 11, scope: !8341)
!8341 = distinct !DILexicalBlock(scope: !8328, file: !3, line: 1225, column: 11)
!8342 = !DILocation(line: 1225, column: 23, scope: !8341)
!8343 = !DILocation(line: 1225, column: 11, scope: !8328)
!8344 = !DILocation(line: 1227, column: 27, scope: !8345)
!8345 = distinct !DILexicalBlock(scope: !8341, file: !3, line: 1226, column: 2)
!8346 = !DILocation(line: 1227, column: 4, scope: !8345)
!8347 = !DILocation(line: 1228, column: 4, scope: !8345)
!8348 = distinct !{!8348, !8349, !8350}
!8349 = !DILocation(line: 1218, column: 3, scope: !8330)
!8350 = !DILocation(line: 1308, column: 5, scope: !8330)
!8351 = !DILocation(line: 1233, column: 11, scope: !8352)
!8352 = distinct !DILexicalBlock(scope: !8328, file: !3, line: 1233, column: 11)
!8353 = !DILocation(line: 1233, column: 11, scope: !8328)
!8354 = !DILocation(line: 1235, column: 4, scope: !8355)
!8355 = distinct !DILexicalBlock(scope: !8352, file: !3, line: 1234, column: 2)
!8356 = !DILocation(line: 1235, column: 10, scope: !8357)
!8357 = distinct !DILexicalBlock(scope: !8358, file: !3, line: 1235, column: 4)
!8358 = distinct !DILexicalBlock(scope: !8355, file: !3, line: 1235, column: 4)
!8359 = !DILocation(line: 1235, column: 64, scope: !8357)
!8360 = !DILocation(line: 1235, column: 4, scope: !8358)
!8361 = !DILocation(line: 1237, column: 18, scope: !8362)
!8362 = distinct !DILexicalBlock(scope: !8357, file: !3, line: 1236, column: 6)
!8363 = !DILocation(line: 1237, column: 16, scope: !8362)
!8364 = !DILocation(line: 1238, column: 8, scope: !8362)
!8365 = !DILocation(line: 1238, column: 42, scope: !8362)
!8366 = !DILocation(line: 1239, column: 17, scope: !8362)
!8367 = !DILocation(line: 1239, column: 15, scope: !8362)
!8368 = !DILocation(line: 1240, column: 12, scope: !8369)
!8369 = distinct !DILexicalBlock(scope: !8362, file: !3, line: 1240, column: 12)
!8370 = !DILocation(line: 1241, column: 28, scope: !8369)
!8371 = !DILocation(line: 1241, column: 7, scope: !8369)
!8372 = !DILocation(line: 1241, column: 36, scope: !8369)
!8373 = !DILocation(line: 1241, column: 5, scope: !8369)
!8374 = !DILocation(line: 1242, column: 7, scope: !8369)
!8375 = !DILocation(line: 1242, column: 5, scope: !8369)
!8376 = !DILocation(line: 1240, column: 12, scope: !8362)
!8377 = !DILocation(line: 1244, column: 38, scope: !8369)
!8378 = !DILocation(line: 1244, column: 6, scope: !8369)
!8379 = !DILocation(line: 1245, column: 23, scope: !8369)
!8380 = !DILocation(line: 1245, column: 6, scope: !8369)
!8381 = !DILocation(line: 1245, column: 51, scope: !8369)
!8382 = !DILocation(line: 1245, column: 32, scope: !8369)
!8383 = !DILocation(line: 1243, column: 3, scope: !8369)
!8384 = !DILocation(line: 1235, column: 4, scope: !8357)
!8385 = distinct !{!8385, !8360, !8386}
!8386 = !DILocation(line: 1246, column: 6, scope: !8358)
!8387 = !DILocation(line: 1249, column: 41, scope: !8355)
!8388 = !DILocation(line: 1249, column: 9, scope: !8355)
!8389 = !DILocation(line: 1248, column: 8, scope: !8355)
!8390 = !DILocation(line: 1249, column: 56, scope: !8355)
!8391 = !DILocation(line: 1247, column: 15, scope: !8355)
!8392 = !DILocation(line: 1247, column: 12, scope: !8355)
!8393 = !DILocation(line: 1250, column: 55, scope: !8355)
!8394 = !DILocation(line: 1250, column: 23, scope: !8355)
!8395 = !DILocation(line: 1251, column: 26, scope: !8355)
!8396 = !DILocation(line: 1251, column: 9, scope: !8355)
!8397 = !DILocation(line: 1250, column: 4, scope: !8355)
!8398 = !DILocation(line: 1252, column: 2, scope: !8355)
!8399 = !DILocation(line: 1255, column: 35, scope: !8400)
!8400 = distinct !DILexicalBlock(scope: !8352, file: !3, line: 1254, column: 2)
!8401 = !DILocation(line: 1255, column: 10, scope: !8400)
!8402 = !DILocation(line: 1255, column: 8, scope: !8400)
!8403 = !DILocation(line: 1257, column: 39, scope: !8400)
!8404 = !DILocation(line: 1257, column: 18, scope: !8400)
!8405 = !DILocation(line: 1257, column: 16, scope: !8400)
!8406 = !DILocation(line: 1258, column: 12, scope: !8400)
!8407 = !DILocation(line: 1259, column: 31, scope: !8400)
!8408 = !DILocation(line: 1259, column: 16, scope: !8400)
!8409 = !DILocation(line: 1262, column: 11, scope: !8410)
!8410 = distinct !DILexicalBlock(scope: !8400, file: !3, line: 1262, column: 4)
!8411 = !DILocation(line: 1262, column: 20, scope: !8410)
!8412 = !DILocation(line: 1262, column: 24, scope: !8410)
!8413 = !DILocation(line: 1262, column: 18, scope: !8410)
!8414 = !DILocation(line: 1262, column: 9, scope: !8410)
!8415 = !DILocation(line: 1262, column: 29, scope: !8416)
!8416 = distinct !DILexicalBlock(scope: !8410, file: !3, line: 1262, column: 4)
!8417 = !DILocation(line: 1262, column: 34, scope: !8416)
!8418 = !DILocation(line: 1262, column: 31, scope: !8416)
!8419 = !DILocation(line: 1262, column: 4, scope: !8410)
!8420 = !DILocation(line: 1264, column: 20, scope: !8421)
!8421 = distinct !DILexicalBlock(scope: !8416, file: !3, line: 1263, column: 6)
!8422 = !DILocation(line: 1264, column: 32, scope: !8421)
!8423 = !DILocation(line: 1264, column: 18, scope: !8421)
!8424 = !DILocation(line: 1265, column: 14, scope: !8425)
!8425 = distinct !DILexicalBlock(scope: !8421, file: !3, line: 1265, column: 12)
!8426 = !DILocation(line: 1266, column: 5, scope: !8425)
!8427 = !DILocation(line: 1266, column: 8, scope: !8425)
!8428 = !DILocation(line: 1265, column: 12, scope: !8421)
!8429 = !DILocation(line: 1268, column: 17, scope: !8430)
!8430 = distinct !DILexicalBlock(scope: !8425, file: !3, line: 1267, column: 3)
!8431 = !DILocation(line: 1268, column: 29, scope: !8430)
!8432 = !DILocation(line: 1268, column: 15, scope: !8430)
!8433 = !DILocation(line: 1269, column: 22, scope: !8430)
!8434 = !DILocation(line: 1269, column: 34, scope: !8430)
!8435 = !DILocation(line: 1269, column: 5, scope: !8430)
!8436 = !DILocation(line: 1269, column: 17, scope: !8430)
!8437 = !DILocation(line: 1269, column: 20, scope: !8430)
!8438 = !DILocation(line: 1270, column: 22, scope: !8430)
!8439 = !DILocation(line: 1270, column: 5, scope: !8430)
!8440 = !DILocation(line: 1270, column: 17, scope: !8430)
!8441 = !DILocation(line: 1270, column: 20, scope: !8430)
!8442 = !DILocation(line: 1271, column: 3, scope: !8430)
!8443 = !DILocation(line: 1272, column: 12, scope: !8444)
!8444 = distinct !DILexicalBlock(scope: !8421, file: !3, line: 1272, column: 12)
!8445 = !DILocation(line: 1272, column: 12, scope: !8421)
!8446 = !DILocation(line: 1274, column: 6, scope: !8447)
!8447 = distinct !DILexicalBlock(scope: !8444, file: !3, line: 1273, column: 3)
!8448 = !DILocation(line: 1276, column: 22, scope: !8447)
!8449 = !DILocation(line: 1276, column: 20, scope: !8447)
!8450 = !DILocation(line: 1277, column: 45, scope: !8447)
!8451 = !DILocation(line: 1277, column: 21, scope: !8447)
!8452 = !DILocation(line: 1277, column: 19, scope: !8447)
!8453 = !DILocation(line: 1278, column: 9, scope: !8454)
!8454 = distinct !DILexicalBlock(scope: !8447, file: !3, line: 1278, column: 9)
!8455 = !DILocation(line: 1278, column: 17, scope: !8454)
!8456 = !DILocation(line: 1279, column: 9, scope: !8454)
!8457 = !DILocation(line: 1279, column: 15, scope: !8454)
!8458 = !DILocation(line: 1280, column: 6, scope: !8454)
!8459 = !DILocation(line: 1280, column: 9, scope: !8454)
!8460 = !DILocation(line: 1281, column: 9, scope: !8454)
!8461 = !DILocation(line: 1281, column: 16, scope: !8454)
!8462 = !DILocation(line: 1282, column: 9, scope: !8454)
!8463 = !DILocation(line: 1282, column: 14, scope: !8454)
!8464 = !DILocation(line: 1283, column: 6, scope: !8454)
!8465 = !DILocation(line: 1283, column: 10, scope: !8454)
!8466 = !DILocation(line: 1283, column: 24, scope: !8454)
!8467 = !DILocation(line: 1283, column: 22, scope: !8454)
!8468 = !DILocation(line: 1284, column: 10, scope: !8454)
!8469 = !DILocation(line: 1284, column: 14, scope: !8454)
!8470 = !DILocation(line: 1284, column: 29, scope: !8454)
!8471 = !DILocation(line: 1284, column: 26, scope: !8454)
!8472 = !DILocation(line: 1285, column: 7, scope: !8454)
!8473 = !DILocation(line: 1285, column: 11, scope: !8454)
!8474 = !DILocation(line: 1285, column: 26, scope: !8454)
!8475 = !DILocation(line: 1285, column: 24, scope: !8454)
!8476 = !DILocation(line: 1286, column: 11, scope: !8454)
!8477 = !DILocation(line: 1286, column: 15, scope: !8454)
!8478 = !DILocation(line: 1286, column: 31, scope: !8454)
!8479 = !DILocation(line: 1286, column: 28, scope: !8454)
!8480 = !DILocation(line: 1287, column: 8, scope: !8454)
!8481 = !DILocation(line: 1287, column: 12, scope: !8454)
!8482 = !DILocation(line: 1288, column: 14, scope: !8454)
!8483 = !DILocation(line: 1288, column: 12, scope: !8454)
!8484 = !DILocation(line: 1278, column: 9, scope: !8447)
!8485 = !DILocation(line: 1290, column: 19, scope: !8486)
!8486 = distinct !DILexicalBlock(scope: !8454, file: !3, line: 1289, column: 7)
!8487 = !DILocation(line: 1290, column: 17, scope: !8486)
!8488 = !DILocation(line: 1291, column: 24, scope: !8486)
!8489 = !DILocation(line: 1291, column: 22, scope: !8486)
!8490 = !DILocation(line: 1292, column: 23, scope: !8486)
!8491 = !DILocation(line: 1292, column: 21, scope: !8486)
!8492 = !DILocation(line: 1293, column: 7, scope: !8486)
!8493 = !DILocation(line: 1294, column: 3, scope: !8447)
!8494 = !DILocation(line: 1295, column: 14, scope: !8495)
!8495 = distinct !DILexicalBlock(scope: !8421, file: !3, line: 1295, column: 12)
!8496 = !DILocation(line: 1295, column: 12, scope: !8421)
!8497 = !DILocation(line: 1296, column: 4, scope: !8495)
!8498 = !DILocation(line: 1296, column: 3, scope: !8495)
!8499 = !DILocation(line: 1262, column: 4, scope: !8416)
!8500 = distinct !{!8500, !8419, !8501}
!8501 = !DILocation(line: 1297, column: 6, scope: !8410)
!8502 = !DILocation(line: 1299, column: 44, scope: !8400)
!8503 = !DILocation(line: 1299, column: 46, scope: !8400)
!8504 = !DILocation(line: 1299, column: 29, scope: !8400)
!8505 = !DILocation(line: 1299, column: 4, scope: !8400)
!8506 = !DILocation(line: 1299, column: 42, scope: !8400)
!8507 = !DILocation(line: 1307, column: 44, scope: !8328)
!8508 = !DILocation(line: 1307, column: 7, scope: !8328)
!8509 = !DILocation(line: 1218, column: 3, scope: !8329)
!8510 = !DILocation(line: 1311, column: 10, scope: !8511)
!8511 = distinct !DILexicalBlock(scope: !8131, file: !3, line: 1311, column: 3)
!8512 = !DILocation(line: 1311, column: 8, scope: !8511)
!8513 = !DILocation(line: 1311, column: 15, scope: !8514)
!8514 = distinct !DILexicalBlock(scope: !8511, file: !3, line: 1311, column: 3)
!8515 = !DILocation(line: 1311, column: 19, scope: !8514)
!8516 = !DILocation(line: 1311, column: 17, scope: !8514)
!8517 = !DILocation(line: 1311, column: 3, scope: !8511)
!8518 = !DILocation(line: 1313, column: 41, scope: !8519)
!8519 = distinct !DILexicalBlock(scope: !8514, file: !3, line: 1312, column: 5)
!8520 = !DILocation(line: 1313, column: 21, scope: !8519)
!8521 = !DILocation(line: 1313, column: 19, scope: !8519)
!8522 = !DILocation(line: 1315, column: 43, scope: !8523)
!8523 = distinct !DILexicalBlock(scope: !8519, file: !3, line: 1315, column: 11)
!8524 = !DILocation(line: 1315, column: 11, scope: !8523)
!8525 = !DILocation(line: 1315, column: 56, scope: !8523)
!8526 = !DILocation(line: 1315, column: 11, scope: !8519)
!8527 = !DILocation(line: 1316, column: 53, scope: !8523)
!8528 = !DILocation(line: 1316, column: 21, scope: !8523)
!8529 = !DILocation(line: 1316, column: 2, scope: !8523)
!8530 = !DILocation(line: 1317, column: 5, scope: !8519)
!8531 = !DILocation(line: 1311, column: 46, scope: !8514)
!8532 = !DILocation(line: 1311, column: 3, scope: !8514)
!8533 = distinct !{!8533, !8517, !8534}
!8534 = !DILocation(line: 1317, column: 5, scope: !8511)
!8535 = !DILocation(line: 1318, column: 1, scope: !8131)
!8536 = distinct !DISubprogram(name: "pop_allocnos_from_stack", scope: !3, file: !3, line: 1323, type: !5837, scopeLine: 1324, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!8537 = !DILocalVariable(name: "allocno", scope: !8536, file: !3, line: 1325, type: !612)
!8538 = !DILocation(line: 1325, column: 17, scope: !8536)
!8539 = !DILocalVariable(name: "cover_class", scope: !8536, file: !3, line: 1326, type: !390)
!8540 = !DILocation(line: 1326, column: 18, scope: !8536)
!8541 = !DILocation(line: 1328, column: 3, scope: !8536)
!8542 = !DILocation(line: 1328, column: 9, scope: !8543)
!8543 = distinct !DILexicalBlock(scope: !8544, file: !3, line: 1328, column: 3)
!8544 = distinct !DILexicalBlock(scope: !8536, file: !3, line: 1328, column: 3)
!8545 = !DILocation(line: 1328, column: 55, scope: !8543)
!8546 = !DILocation(line: 1328, column: 3, scope: !8544)
!8547 = !DILocation(line: 1330, column: 17, scope: !8548)
!8548 = distinct !DILexicalBlock(scope: !8543, file: !3, line: 1329, column: 5)
!8549 = !DILocation(line: 1330, column: 15, scope: !8548)
!8550 = !DILocation(line: 1331, column: 21, scope: !8548)
!8551 = !DILocation(line: 1331, column: 19, scope: !8548)
!8552 = !DILocation(line: 1332, column: 11, scope: !8553)
!8553 = distinct !DILexicalBlock(scope: !8548, file: !3, line: 1332, column: 11)
!8554 = !DILocation(line: 1332, column: 37, scope: !8553)
!8555 = !DILocation(line: 1332, column: 41, scope: !8553)
!8556 = !DILocation(line: 1332, column: 44, scope: !8553)
!8557 = !DILocation(line: 1332, column: 58, scope: !8553)
!8558 = !DILocation(line: 1332, column: 11, scope: !8548)
!8559 = !DILocation(line: 1334, column: 13, scope: !8560)
!8560 = distinct !DILexicalBlock(scope: !8553, file: !3, line: 1333, column: 2)
!8561 = !DILocation(line: 1334, column: 4, scope: !8560)
!8562 = !DILocation(line: 1335, column: 29, scope: !8560)
!8563 = !DILocation(line: 1335, column: 4, scope: !8560)
!8564 = !DILocation(line: 1336, column: 13, scope: !8560)
!8565 = !DILocation(line: 1336, column: 4, scope: !8560)
!8566 = !DILocation(line: 1337, column: 2, scope: !8560)
!8567 = !DILocation(line: 1338, column: 11, scope: !8568)
!8568 = distinct !DILexicalBlock(scope: !8548, file: !3, line: 1338, column: 11)
!8569 = !DILocation(line: 1338, column: 23, scope: !8568)
!8570 = !DILocation(line: 1338, column: 11, scope: !8548)
!8571 = !DILocation(line: 1340, column: 4, scope: !8572)
!8572 = distinct !DILexicalBlock(scope: !8568, file: !3, line: 1339, column: 2)
!8573 = !DILocation(line: 1340, column: 33, scope: !8572)
!8574 = !DILocation(line: 1341, column: 4, scope: !8572)
!8575 = !DILocation(line: 1341, column: 33, scope: !8572)
!8576 = !DILocation(line: 1345, column: 8, scope: !8577)
!8577 = distinct !DILexicalBlock(scope: !8572, file: !3, line: 1345, column: 8)
!8578 = !DILocation(line: 1345, column: 34, scope: !8577)
!8579 = !DILocation(line: 1345, column: 38, scope: !8577)
!8580 = !DILocation(line: 1345, column: 41, scope: !8577)
!8581 = !DILocation(line: 1345, column: 55, scope: !8577)
!8582 = !DILocation(line: 1345, column: 8, scope: !8572)
!8583 = !DILocation(line: 1346, column: 15, scope: !8577)
!8584 = !DILocation(line: 1346, column: 6, scope: !8577)
!8585 = !DILocation(line: 1347, column: 2, scope: !8572)
!8586 = !DILocation(line: 1348, column: 33, scope: !8587)
!8587 = distinct !DILexicalBlock(scope: !8568, file: !3, line: 1348, column: 16)
!8588 = !DILocation(line: 1348, column: 16, scope: !8587)
!8589 = !DILocation(line: 1348, column: 16, scope: !8568)
!8590 = !DILocation(line: 1350, column: 8, scope: !8591)
!8591 = distinct !DILexicalBlock(scope: !8592, file: !3, line: 1350, column: 8)
!8592 = distinct !DILexicalBlock(scope: !8587, file: !3, line: 1349, column: 2)
!8593 = !DILocation(line: 1350, column: 34, scope: !8591)
!8594 = !DILocation(line: 1350, column: 38, scope: !8591)
!8595 = !DILocation(line: 1350, column: 41, scope: !8591)
!8596 = !DILocation(line: 1350, column: 55, scope: !8591)
!8597 = !DILocation(line: 1350, column: 8, scope: !8592)
!8598 = !DILocation(line: 1351, column: 15, scope: !8591)
!8599 = !DILocation(line: 1352, column: 8, scope: !8591)
!8600 = !DILocation(line: 1351, column: 6, scope: !8591)
!8601 = !DILocation(line: 1353, column: 2, scope: !8592)
!8602 = !DILocation(line: 1354, column: 16, scope: !8603)
!8603 = distinct !DILexicalBlock(scope: !8587, file: !3, line: 1354, column: 16)
!8604 = !DILocation(line: 1354, column: 16, scope: !8587)
!8605 = !DILocation(line: 1356, column: 8, scope: !8606)
!8606 = distinct !DILexicalBlock(scope: !8607, file: !3, line: 1356, column: 8)
!8607 = distinct !DILexicalBlock(scope: !8603, file: !3, line: 1355, column: 2)
!8608 = !DILocation(line: 1356, column: 34, scope: !8606)
!8609 = !DILocation(line: 1356, column: 38, scope: !8606)
!8610 = !DILocation(line: 1356, column: 41, scope: !8606)
!8611 = !DILocation(line: 1356, column: 55, scope: !8606)
!8612 = !DILocation(line: 1356, column: 8, scope: !8607)
!8613 = !DILocation(line: 1357, column: 15, scope: !8606)
!8614 = !DILocation(line: 1357, column: 6, scope: !8606)
!8615 = !DILocation(line: 1358, column: 2, scope: !8607)
!8616 = !DILocation(line: 1359, column: 7, scope: !8548)
!8617 = !DILocation(line: 1359, column: 36, scope: !8548)
!8618 = !DILocation(line: 1328, column: 3, scope: !8543)
!8619 = distinct !{!8619, !8546, !8620}
!8620 = !DILocation(line: 1360, column: 5, scope: !8544)
!8621 = !DILocation(line: 1361, column: 1, scope: !8536)
!8622 = distinct !DISubprogram(name: "setup_allocno_left_conflicts_size", scope: !3, file: !3, line: 1404, type: !2734, scopeLine: 1405, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!8623 = !DILocalVariable(name: "allocno", arg: 1, scope: !8622, file: !3, line: 1404, type: !612)
!8624 = !DILocation(line: 1404, column: 50, scope: !8622)
!8625 = !DILocalVariable(name: "i", scope: !8622, file: !3, line: 1406, type: !610)
!8626 = !DILocation(line: 1406, column: 7, scope: !8622)
!8627 = !DILocalVariable(name: "hard_regs_num", scope: !8622, file: !3, line: 1406, type: !610)
!8628 = !DILocation(line: 1406, column: 10, scope: !8622)
!8629 = !DILocalVariable(name: "hard_regno", scope: !8622, file: !3, line: 1406, type: !610)
!8630 = !DILocation(line: 1406, column: 25, scope: !8622)
!8631 = !DILocalVariable(name: "conflict_allocnos_size", scope: !8622, file: !3, line: 1406, type: !610)
!8632 = !DILocation(line: 1406, column: 37, scope: !8622)
!8633 = !DILocalVariable(name: "a", scope: !8622, file: !3, line: 1407, type: !612)
!8634 = !DILocation(line: 1407, column: 17, scope: !8622)
!8635 = !DILocalVariable(name: "conflict_allocno", scope: !8622, file: !3, line: 1407, type: !612)
!8636 = !DILocation(line: 1407, column: 20, scope: !8622)
!8637 = !DILocalVariable(name: "cover_class", scope: !8622, file: !3, line: 1408, type: !390)
!8638 = !DILocation(line: 1408, column: 18, scope: !8622)
!8639 = !DILocalVariable(name: "temp_set", scope: !8622, file: !3, line: 1409, type: !1794)
!8640 = !DILocation(line: 1409, column: 16, scope: !8622)
!8641 = !DILocalVariable(name: "aci", scope: !8622, file: !3, line: 1410, type: !2182)
!8642 = !DILocation(line: 1410, column: 33, scope: !8622)
!8643 = !DILocation(line: 1412, column: 17, scope: !8622)
!8644 = !DILocation(line: 1412, column: 15, scope: !8622)
!8645 = !DILocation(line: 1413, column: 43, scope: !8622)
!8646 = !DILocation(line: 1413, column: 19, scope: !8622)
!8647 = !DILocation(line: 1413, column: 17, scope: !8622)
!8648 = !DILocation(line: 1414, column: 3, scope: !8622)
!8649 = !DILocation(line: 1416, column: 12, scope: !8650)
!8650 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 1416, column: 3)
!8651 = !DILocation(line: 1416, column: 10, scope: !8650)
!8652 = !DILocation(line: 1416, column: 8, scope: !8650)
!8653 = !DILocation(line: 1419, column: 7, scope: !8654)
!8654 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 1418, column: 5)
!8655 = distinct !DILexicalBlock(scope: !8650, file: !3, line: 1416, column: 3)
!8656 = !DILocation(line: 1420, column: 11, scope: !8657)
!8657 = distinct !DILexicalBlock(scope: !8654, file: !3, line: 1420, column: 11)
!8658 = !DILocation(line: 1420, column: 16, scope: !8657)
!8659 = !DILocation(line: 1420, column: 13, scope: !8657)
!8660 = !DILocation(line: 1420, column: 11, scope: !8654)
!8661 = !DILocation(line: 1421, column: 2, scope: !8657)
!8662 = !DILocation(line: 1422, column: 5, scope: !8654)
!8663 = !DILocation(line: 1417, column: 12, scope: !8655)
!8664 = !DILocation(line: 1417, column: 10, scope: !8655)
!8665 = !DILocation(line: 1416, column: 3, scope: !8655)
!8666 = distinct !{!8666, !8667, !8668}
!8667 = !DILocation(line: 1416, column: 3, scope: !8650)
!8668 = !DILocation(line: 1422, column: 5, scope: !8650)
!8669 = !DILocation(line: 1423, column: 3, scope: !8622)
!8670 = !DILocation(line: 1424, column: 3, scope: !8622)
!8671 = !DILocation(line: 1425, column: 26, scope: !8622)
!8672 = !DILocation(line: 1426, column: 31, scope: !8673)
!8673 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 1426, column: 7)
!8674 = !DILocation(line: 1426, column: 9, scope: !8673)
!8675 = !DILocation(line: 1426, column: 7, scope: !8622)
!8676 = !DILocation(line: 1427, column: 12, scope: !8677)
!8677 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 1427, column: 5)
!8678 = !DILocation(line: 1427, column: 10, scope: !8677)
!8679 = !DILocation(line: 1427, column: 17, scope: !8680)
!8680 = distinct !DILexicalBlock(scope: !8677, file: !3, line: 1427, column: 5)
!8681 = !DILocation(line: 1427, column: 27, scope: !8680)
!8682 = !DILocation(line: 1427, column: 19, scope: !8680)
!8683 = !DILocation(line: 1427, column: 5, scope: !8677)
!8684 = !DILocation(line: 1429, column: 35, scope: !8685)
!8685 = distinct !DILexicalBlock(scope: !8680, file: !3, line: 1428, column: 7)
!8686 = !DILocation(line: 1429, column: 15, scope: !8685)
!8687 = !DILocation(line: 1429, column: 48, scope: !8685)
!8688 = !DILocation(line: 1429, column: 13, scope: !8685)
!8689 = !DILocation(line: 1430, column: 6, scope: !8690)
!8690 = distinct !DILexicalBlock(scope: !8685, file: !3, line: 1430, column: 6)
!8691 = !DILocation(line: 1430, column: 6, scope: !8685)
!8692 = !DILocation(line: 1432, column: 28, scope: !8693)
!8693 = distinct !DILexicalBlock(scope: !8690, file: !3, line: 1431, column: 4)
!8694 = !DILocation(line: 1433, column: 6, scope: !8693)
!8695 = !DILocation(line: 1434, column: 32, scope: !8696)
!8696 = distinct !DILexicalBlock(scope: !8693, file: !3, line: 1434, column: 10)
!8697 = !DILocation(line: 1434, column: 10, scope: !8696)
!8698 = !DILocation(line: 1434, column: 10, scope: !8693)
!8699 = !DILocation(line: 1435, column: 8, scope: !8696)
!8700 = !DILocation(line: 1436, column: 4, scope: !8693)
!8701 = !DILocation(line: 1437, column: 7, scope: !8685)
!8702 = !DILocation(line: 1427, column: 43, scope: !8680)
!8703 = !DILocation(line: 1427, column: 5, scope: !8680)
!8704 = distinct !{!8704, !8683, !8705}
!8705 = !DILocation(line: 1437, column: 7, scope: !8677)
!8706 = !DILocation(line: 1438, column: 3, scope: !8622)
!8707 = !DILocation(line: 1439, column: 7, scope: !8708)
!8708 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 1439, column: 7)
!8709 = !DILocation(line: 1439, column: 7, scope: !8622)
!8710 = !DILocation(line: 1440, column: 19, scope: !8708)
!8711 = !DILocation(line: 1440, column: 5, scope: !8708)
!8712 = !DILocation(line: 1441, column: 7, scope: !8713)
!8713 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 1441, column: 7)
!8714 = !DILocation(line: 1441, column: 19, scope: !8713)
!8715 = !DILocation(line: 1441, column: 7, scope: !8622)
!8716 = !DILocation(line: 1442, column: 14, scope: !8717)
!8717 = distinct !DILexicalBlock(scope: !8713, file: !3, line: 1442, column: 5)
!8718 = !DILocation(line: 1442, column: 12, scope: !8717)
!8719 = !DILocation(line: 1442, column: 10, scope: !8717)
!8720 = !DILocation(line: 1445, column: 2, scope: !8721)
!8721 = distinct !DILexicalBlock(scope: !8722, file: !3, line: 1445, column: 2)
!8722 = distinct !DILexicalBlock(scope: !8723, file: !3, line: 1444, column: 7)
!8723 = distinct !DILexicalBlock(scope: !8717, file: !3, line: 1442, column: 5)
!8724 = !DILocation(line: 1445, column: 2, scope: !8725)
!8725 = distinct !DILexicalBlock(scope: !8721, file: !3, line: 1445, column: 2)
!8726 = !DILocation(line: 1448, column: 10, scope: !8727)
!8727 = distinct !DILexicalBlock(scope: !8725, file: !3, line: 1446, column: 4)
!8728 = !DILocation(line: 1448, column: 8, scope: !8727)
!8729 = !DILocation(line: 1449, column: 24, scope: !8730)
!8730 = distinct !DILexicalBlock(scope: !8727, file: !3, line: 1449, column: 10)
!8731 = !DILocation(line: 1450, column: 10, scope: !8730)
!8732 = !DILocation(line: 1449, column: 10, scope: !8730)
!8733 = !DILocation(line: 1449, column: 10, scope: !8727)
!8734 = !DILocation(line: 1454, column: 7, scope: !8735)
!8735 = distinct !DILexicalBlock(scope: !8736, file: !3, line: 1454, column: 7)
!8736 = distinct !DILexicalBlock(scope: !8730, file: !3, line: 1451, column: 8)
!8737 = !DILocation(line: 1454, column: 7, scope: !8736)
!8738 = !DILocation(line: 1456, column: 25, scope: !8739)
!8739 = distinct !DILexicalBlock(scope: !8740, file: !3, line: 1456, column: 11)
!8740 = distinct !DILexicalBlock(scope: !8735, file: !3, line: 1455, column: 5)
!8741 = !DILocation(line: 1457, column: 11, scope: !8739)
!8742 = !DILocation(line: 1456, column: 11, scope: !8739)
!8743 = !DILocation(line: 1456, column: 11, scope: !8740)
!8744 = !DILocation(line: 1458, column: 9, scope: !8739)
!8745 = !DILocation(line: 1459, column: 23, scope: !8740)
!8746 = !DILocation(line: 1460, column: 9, scope: !8740)
!8747 = !DILocation(line: 1459, column: 7, scope: !8740)
!8748 = !DILocation(line: 1461, column: 5, scope: !8740)
!8749 = !DILocation(line: 1462, column: 9, scope: !8750)
!8750 = distinct !DILexicalBlock(scope: !8736, file: !3, line: 1462, column: 7)
!8751 = !DILocation(line: 1462, column: 7, scope: !8736)
!8752 = !DILocation(line: 1465, column: 5, scope: !8750)
!8753 = !DILocation(line: 1464, column: 11, scope: !8750)
!8754 = !DILocation(line: 1465, column: 18, scope: !8750)
!8755 = !DILocation(line: 1464, column: 7, scope: !8750)
!8756 = !DILocation(line: 1463, column: 5, scope: !8750)
!8757 = !DILocation(line: 1466, column: 26, scope: !8758)
!8758 = distinct !DILexicalBlock(scope: !8750, file: !3, line: 1466, column: 12)
!8759 = !DILocation(line: 1466, column: 24, scope: !8758)
!8760 = !DILocation(line: 1467, column: 5, scope: !8758)
!8761 = !DILocation(line: 1466, column: 12, scope: !8750)
!8762 = !DILocalVariable(name: "last", scope: !8763, file: !3, line: 1469, type: !610)
!8763 = distinct !DILexicalBlock(scope: !8758, file: !3, line: 1468, column: 5)
!8764 = !DILocation(line: 1469, column: 11, scope: !8763)
!8765 = !DILocation(line: 1469, column: 19, scope: !8763)
!8766 = !DILocation(line: 1471, column: 13, scope: !8763)
!8767 = !DILocation(line: 1470, column: 7, scope: !8763)
!8768 = !DILocation(line: 1471, column: 25, scope: !8763)
!8769 = !DILocation(line: 1470, column: 5, scope: !8763)
!8770 = !DILocation(line: 1473, column: 7, scope: !8763)
!8771 = !DILocation(line: 1473, column: 14, scope: !8763)
!8772 = !DILocation(line: 1473, column: 27, scope: !8763)
!8773 = !DILocation(line: 1473, column: 25, scope: !8763)
!8774 = !DILocation(line: 1475, column: 10, scope: !8775)
!8775 = distinct !DILexicalBlock(scope: !8776, file: !3, line: 1475, column: 8)
!8776 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 1474, column: 9)
!8777 = !DILocation(line: 1475, column: 8, scope: !8776)
!8778 = !DILocation(line: 1477, column: 30, scope: !8779)
!8779 = distinct !DILexicalBlock(scope: !8775, file: !3, line: 1476, column: 6)
!8780 = !DILocation(line: 1478, column: 8, scope: !8779)
!8781 = !DILocation(line: 1479, column: 6, scope: !8779)
!8782 = !DILocation(line: 1480, column: 14, scope: !8776)
!8783 = distinct !{!8783, !8770, !8784}
!8784 = !DILocation(line: 1481, column: 9, scope: !8763)
!8785 = !DILocation(line: 1482, column: 5, scope: !8763)
!8786 = !DILocation(line: 1483, column: 8, scope: !8736)
!8787 = !DILocation(line: 1484, column: 4, scope: !8727)
!8788 = distinct !{!8788, !8720, !8789}
!8789 = !DILocation(line: 1484, column: 4, scope: !8721)
!8790 = !DILocation(line: 1485, column: 13, scope: !8791)
!8791 = distinct !DILexicalBlock(scope: !8722, file: !3, line: 1485, column: 13)
!8792 = !DILocation(line: 1485, column: 18, scope: !8791)
!8793 = !DILocation(line: 1485, column: 15, scope: !8791)
!8794 = !DILocation(line: 1485, column: 13, scope: !8722)
!8795 = !DILocation(line: 1486, column: 4, scope: !8791)
!8796 = !DILocation(line: 1487, column: 7, scope: !8722)
!8797 = !DILocation(line: 1443, column: 7, scope: !8723)
!8798 = !DILocation(line: 1443, column: 5, scope: !8723)
!8799 = !DILocation(line: 1442, column: 5, scope: !8723)
!8800 = distinct !{!8800, !8801, !8802}
!8801 = !DILocation(line: 1442, column: 5, scope: !8717)
!8802 = !DILocation(line: 1487, column: 7, scope: !8717)
!8803 = !DILocation(line: 1488, column: 43, scope: !8622)
!8804 = !DILocation(line: 1488, column: 3, scope: !8622)
!8805 = !DILocation(line: 1488, column: 41, scope: !8622)
!8806 = !DILocation(line: 1489, column: 1, scope: !8622)
!8807 = distinct !DISubprogram(name: "setup_allocno_available_regs_num", scope: !3, file: !3, line: 1365, type: !2734, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!8808 = !DILocalVariable(name: "allocno", arg: 1, scope: !8807, file: !3, line: 1365, type: !612)
!8809 = !DILocation(line: 1365, column: 49, scope: !8807)
!8810 = !DILocalVariable(name: "i", scope: !8807, file: !3, line: 1367, type: !610)
!8811 = !DILocation(line: 1367, column: 7, scope: !8807)
!8812 = !DILocalVariable(name: "n", scope: !8807, file: !3, line: 1367, type: !610)
!8813 = !DILocation(line: 1367, column: 10, scope: !8807)
!8814 = !DILocalVariable(name: "hard_regs_num", scope: !8807, file: !3, line: 1367, type: !610)
!8815 = !DILocation(line: 1367, column: 13, scope: !8807)
!8816 = !DILocalVariable(name: "hard_regno", scope: !8807, file: !3, line: 1367, type: !610)
!8817 = !DILocation(line: 1367, column: 28, scope: !8807)
!8818 = !DILocalVariable(name: "mode", scope: !8807, file: !3, line: 1368, type: !5)
!8819 = !DILocation(line: 1368, column: 21, scope: !8807)
!8820 = !DILocalVariable(name: "cover_class", scope: !8807, file: !3, line: 1369, type: !390)
!8821 = !DILocation(line: 1369, column: 18, scope: !8807)
!8822 = !DILocalVariable(name: "a", scope: !8807, file: !3, line: 1370, type: !612)
!8823 = !DILocation(line: 1370, column: 17, scope: !8807)
!8824 = !DILocalVariable(name: "temp_set", scope: !8807, file: !3, line: 1371, type: !1794)
!8825 = !DILocation(line: 1371, column: 16, scope: !8807)
!8826 = !DILocation(line: 1373, column: 17, scope: !8807)
!8827 = !DILocation(line: 1373, column: 15, scope: !8807)
!8828 = !DILocation(line: 1374, column: 67, scope: !8807)
!8829 = !DILocation(line: 1374, column: 42, scope: !8807)
!8830 = !DILocation(line: 1374, column: 3, scope: !8807)
!8831 = !DILocation(line: 1374, column: 40, scope: !8807)
!8832 = !DILocation(line: 1375, column: 7, scope: !8833)
!8833 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 1375, column: 7)
!8834 = !DILocation(line: 1375, column: 19, scope: !8833)
!8835 = !DILocation(line: 1375, column: 7, scope: !8807)
!8836 = !DILocation(line: 1376, column: 5, scope: !8833)
!8837 = !DILocation(line: 1377, column: 3, scope: !8807)
!8838 = !DILocation(line: 1379, column: 43, scope: !8807)
!8839 = !DILocation(line: 1379, column: 19, scope: !8807)
!8840 = !DILocation(line: 1379, column: 17, scope: !8807)
!8841 = !DILocation(line: 1380, column: 12, scope: !8842)
!8842 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 1380, column: 3)
!8843 = !DILocation(line: 1380, column: 10, scope: !8842)
!8844 = !DILocation(line: 1380, column: 8, scope: !8842)
!8845 = !DILocation(line: 1383, column: 7, scope: !8846)
!8846 = distinct !DILexicalBlock(scope: !8847, file: !3, line: 1382, column: 5)
!8847 = distinct !DILexicalBlock(scope: !8842, file: !3, line: 1380, column: 3)
!8848 = !DILocation(line: 1384, column: 11, scope: !8849)
!8849 = distinct !DILexicalBlock(scope: !8846, file: !3, line: 1384, column: 11)
!8850 = !DILocation(line: 1384, column: 16, scope: !8849)
!8851 = !DILocation(line: 1384, column: 13, scope: !8849)
!8852 = !DILocation(line: 1384, column: 11, scope: !8846)
!8853 = !DILocation(line: 1385, column: 2, scope: !8849)
!8854 = !DILocation(line: 1386, column: 5, scope: !8846)
!8855 = !DILocation(line: 1381, column: 12, scope: !8847)
!8856 = !DILocation(line: 1381, column: 10, scope: !8847)
!8857 = !DILocation(line: 1380, column: 3, scope: !8847)
!8858 = distinct !{!8858, !8859, !8860}
!8859 = !DILocation(line: 1380, column: 3, scope: !8842)
!8860 = !DILocation(line: 1386, column: 5, scope: !8842)
!8861 = !DILocation(line: 1387, column: 10, scope: !8807)
!8862 = !DILocation(line: 1387, column: 8, scope: !8807)
!8863 = !DILocation(line: 1388, column: 10, scope: !8864)
!8864 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 1388, column: 3)
!8865 = !DILocation(line: 1388, column: 19, scope: !8864)
!8866 = !DILocation(line: 1388, column: 33, scope: !8864)
!8867 = !DILocation(line: 1388, column: 17, scope: !8864)
!8868 = !DILocation(line: 1388, column: 8, scope: !8864)
!8869 = !DILocation(line: 1388, column: 38, scope: !8870)
!8870 = distinct !DILexicalBlock(scope: !8864, file: !3, line: 1388, column: 3)
!8871 = !DILocation(line: 1388, column: 40, scope: !8870)
!8872 = !DILocation(line: 1388, column: 3, scope: !8864)
!8873 = !DILocation(line: 1390, column: 40, scope: !8874)
!8874 = distinct !DILexicalBlock(scope: !8870, file: !3, line: 1389, column: 5)
!8875 = !DILocation(line: 1390, column: 20, scope: !8874)
!8876 = !DILocation(line: 1390, column: 53, scope: !8874)
!8877 = !DILocation(line: 1390, column: 18, scope: !8874)
!8878 = !DILocation(line: 1391, column: 11, scope: !8879)
!8879 = distinct !DILexicalBlock(scope: !8874, file: !3, line: 1391, column: 11)
!8880 = !DILocation(line: 1392, column: 4, scope: !8879)
!8881 = !DILocation(line: 1392, column: 7, scope: !8879)
!8882 = !DILocation(line: 1391, column: 11, scope: !8874)
!8883 = !DILocation(line: 1394, column: 3, scope: !8879)
!8884 = !DILocation(line: 1394, column: 2, scope: !8879)
!8885 = !DILocation(line: 1395, column: 5, scope: !8874)
!8886 = !DILocation(line: 1388, column: 47, scope: !8870)
!8887 = !DILocation(line: 1388, column: 3, scope: !8870)
!8888 = distinct !{!8888, !8872, !8889}
!8889 = !DILocation(line: 1395, column: 5, scope: !8864)
!8890 = !DILocation(line: 1396, column: 7, scope: !8891)
!8891 = distinct !DILexicalBlock(scope: !8807, file: !3, line: 1396, column: 7)
!8892 = !DILocation(line: 1396, column: 33, scope: !8891)
!8893 = !DILocation(line: 1396, column: 37, scope: !8891)
!8894 = !DILocation(line: 1396, column: 40, scope: !8891)
!8895 = !DILocation(line: 1396, column: 42, scope: !8891)
!8896 = !DILocation(line: 1396, column: 46, scope: !8891)
!8897 = !DILocation(line: 1396, column: 49, scope: !8891)
!8898 = !DILocation(line: 1396, column: 63, scope: !8891)
!8899 = !DILocation(line: 1396, column: 7, scope: !8807)
!8900 = !DILocation(line: 1397, column: 14, scope: !8891)
!8901 = !DILocation(line: 1398, column: 7, scope: !8891)
!8902 = !DILocation(line: 1398, column: 48, scope: !8891)
!8903 = !DILocation(line: 1398, column: 32, scope: !8891)
!8904 = !DILocation(line: 1398, column: 62, scope: !8891)
!8905 = !DILocation(line: 1397, column: 5, scope: !8891)
!8906 = !DILocation(line: 1399, column: 43, scope: !8807)
!8907 = !DILocation(line: 1399, column: 3, scope: !8807)
!8908 = !DILocation(line: 1399, column: 40, scope: !8807)
!8909 = !DILocation(line: 1400, column: 1, scope: !8807)
!8910 = distinct !DISubprogram(name: "add_allocno_to_bucket", scope: !3, file: !3, line: 699, type: !8911, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!8911 = !DISubroutineType(types: !8912)
!8912 = !{null, !612, !611}
!8913 = !DILocalVariable(name: "allocno", arg: 1, scope: !8910, file: !3, line: 699, type: !612)
!8914 = !DILocation(line: 699, column: 38, scope: !8910)
!8915 = !DILocalVariable(name: "bucket_ptr", arg: 2, scope: !8910, file: !3, line: 699, type: !611)
!8916 = !DILocation(line: 699, column: 62, scope: !8910)
!8917 = !DILocalVariable(name: "first_allocno", scope: !8910, file: !3, line: 701, type: !612)
!8918 = !DILocation(line: 701, column: 17, scope: !8910)
!8919 = !DILocalVariable(name: "cover_class", scope: !8910, file: !3, line: 702, type: !390)
!8920 = !DILocation(line: 702, column: 18, scope: !8910)
!8921 = !DILocation(line: 704, column: 7, scope: !8922)
!8922 = distinct !DILexicalBlock(scope: !8910, file: !3, line: 704, column: 7)
!8923 = !DILocation(line: 704, column: 18, scope: !8922)
!8924 = !DILocation(line: 705, column: 7, scope: !8922)
!8925 = !DILocation(line: 705, column: 25, scope: !8922)
!8926 = !DILocation(line: 705, column: 23, scope: !8922)
!8927 = !DILocation(line: 705, column: 56, scope: !8922)
!8928 = !DILocation(line: 704, column: 7, scope: !8910)
!8929 = !DILocation(line: 707, column: 32, scope: !8930)
!8930 = distinct !DILexicalBlock(scope: !8922, file: !3, line: 706, column: 5)
!8931 = !DILocation(line: 707, column: 7, scope: !8930)
!8932 = !DILocation(line: 707, column: 44, scope: !8930)
!8933 = !DILocation(line: 709, column: 5, scope: !8930)
!8934 = !DILocation(line: 710, column: 20, scope: !8910)
!8935 = !DILocation(line: 710, column: 19, scope: !8910)
!8936 = !DILocation(line: 710, column: 17, scope: !8910)
!8937 = !DILocation(line: 711, column: 43, scope: !8910)
!8938 = !DILocation(line: 711, column: 3, scope: !8910)
!8939 = !DILocation(line: 711, column: 41, scope: !8910)
!8940 = !DILocation(line: 712, column: 3, scope: !8910)
!8941 = !DILocation(line: 712, column: 41, scope: !8910)
!8942 = !DILocation(line: 713, column: 7, scope: !8943)
!8943 = distinct !DILexicalBlock(scope: !8910, file: !3, line: 713, column: 7)
!8944 = !DILocation(line: 713, column: 21, scope: !8943)
!8945 = !DILocation(line: 713, column: 7, scope: !8910)
!8946 = !DILocation(line: 714, column: 51, scope: !8943)
!8947 = !DILocation(line: 714, column: 5, scope: !8943)
!8948 = !DILocation(line: 714, column: 49, scope: !8943)
!8949 = !DILocation(line: 715, column: 17, scope: !8910)
!8950 = !DILocation(line: 715, column: 4, scope: !8910)
!8951 = !DILocation(line: 715, column: 15, scope: !8910)
!8952 = !DILocation(line: 716, column: 1, scope: !8910)
!8953 = distinct !DISubprogram(name: "hard_reg_set_empty_p", scope: !1795, file: !1795, line: 133, type: !8954, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!8954 = !DISubroutineType(types: !8955)
!8955 = !{!855, !6305}
!8956 = !DILocalVariable(name: "x", arg: 1, scope: !8953, file: !1795, line: 133, type: !6305)
!8957 = !DILocation(line: 133, column: 42, scope: !8953)
!8958 = !DILocation(line: 135, column: 10, scope: !8953)
!8959 = !DILocation(line: 135, column: 12, scope: !8953)
!8960 = !DILocation(line: 135, column: 3, scope: !8953)
!8961 = distinct !DISubprogram(name: "VEC_ira_allocno_t_base_truncate", scope: !613, file: !613, line: 67, type: !8962, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!8962 = !DISubroutineType(types: !8963)
!8963 = !{null, !6711, !7}
!8964 = !DILocalVariable(name: "vec_", arg: 1, scope: !8961, file: !613, line: 67, type: !6711)
!8965 = !DILocation(line: 67, column: 1, scope: !8961)
!8966 = !DILocalVariable(name: "size_", arg: 2, scope: !8961, file: !613, line: 67, type: !7)
!8967 = !DILocation(line: 67, column: 1, scope: !8968)
!8968 = distinct !DILexicalBlock(scope: !8961, file: !613, line: 67, column: 1)
!8969 = distinct !DISubprogram(name: "calculate_allocno_spill_cost", scope: !3, file: !3, line: 1055, type: !8970, scopeLine: 1056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!8970 = !DISubroutineType(types: !8971)
!8971 = !{!610, !612}
!8972 = !DILocalVariable(name: "a", arg: 1, scope: !8969, file: !3, line: 1055, type: !612)
!8973 = !DILocation(line: 1055, column: 45, scope: !8969)
!8974 = !DILocalVariable(name: "regno", scope: !8969, file: !3, line: 1057, type: !610)
!8975 = !DILocation(line: 1057, column: 7, scope: !8969)
!8976 = !DILocalVariable(name: "cost", scope: !8969, file: !3, line: 1057, type: !610)
!8977 = !DILocation(line: 1057, column: 14, scope: !8969)
!8978 = !DILocalVariable(name: "mode", scope: !8969, file: !3, line: 1058, type: !5)
!8979 = !DILocation(line: 1058, column: 21, scope: !8969)
!8980 = !DILocalVariable(name: "rclass", scope: !8969, file: !3, line: 1059, type: !390)
!8981 = !DILocation(line: 1059, column: 18, scope: !8969)
!8982 = !DILocalVariable(name: "parent_allocno", scope: !8969, file: !3, line: 1060, type: !612)
!8983 = !DILocation(line: 1060, column: 17, scope: !8969)
!8984 = !DILocalVariable(name: "parent_node", scope: !8969, file: !3, line: 1061, type: !1725)
!8985 = !DILocation(line: 1061, column: 24, scope: !8969)
!8986 = !DILocalVariable(name: "loop_node", scope: !8969, file: !3, line: 1061, type: !1725)
!8987 = !DILocation(line: 1061, column: 37, scope: !8969)
!8988 = !DILocation(line: 1063, column: 11, scope: !8969)
!8989 = !DILocation(line: 1063, column: 9, scope: !8969)
!8990 = !DILocation(line: 1064, column: 10, scope: !8969)
!8991 = !DILocation(line: 1064, column: 44, scope: !8969)
!8992 = !DILocation(line: 1064, column: 42, scope: !8969)
!8993 = !DILocation(line: 1064, column: 8, scope: !8969)
!8994 = !DILocation(line: 1065, column: 7, scope: !8995)
!8995 = distinct !DILexicalBlock(scope: !8969, file: !3, line: 1065, column: 7)
!8996 = !DILocation(line: 1065, column: 23, scope: !8995)
!8997 = !DILocation(line: 1065, column: 7, scope: !8969)
!8998 = !DILocation(line: 1066, column: 12, scope: !8995)
!8999 = !DILocation(line: 1066, column: 5, scope: !8995)
!9000 = !DILocation(line: 1067, column: 15, scope: !8969)
!9001 = !DILocation(line: 1067, column: 13, scope: !8969)
!9002 = !DILocation(line: 1068, column: 22, scope: !9003)
!9003 = distinct !DILexicalBlock(scope: !8969, file: !3, line: 1068, column: 7)
!9004 = !DILocation(line: 1068, column: 33, scope: !9003)
!9005 = !DILocation(line: 1068, column: 20, scope: !9003)
!9006 = !DILocation(line: 1068, column: 41, scope: !9003)
!9007 = !DILocation(line: 1068, column: 7, scope: !8969)
!9008 = !DILocation(line: 1069, column: 12, scope: !9003)
!9009 = !DILocation(line: 1069, column: 5, scope: !9003)
!9010 = !DILocation(line: 1070, column: 25, scope: !9011)
!9011 = distinct !DILexicalBlock(scope: !8969, file: !3, line: 1070, column: 7)
!9012 = !DILocation(line: 1070, column: 38, scope: !9011)
!9013 = !DILocation(line: 1070, column: 56, scope: !9011)
!9014 = !DILocation(line: 1070, column: 23, scope: !9011)
!9015 = !DILocation(line: 1070, column: 64, scope: !9011)
!9016 = !DILocation(line: 1070, column: 7, scope: !8969)
!9017 = !DILocation(line: 1071, column: 12, scope: !9011)
!9018 = !DILocation(line: 1071, column: 5, scope: !9011)
!9019 = !DILocation(line: 1072, column: 10, scope: !8969)
!9020 = !DILocation(line: 1072, column: 8, scope: !8969)
!9021 = !DILocation(line: 1073, column: 12, scope: !8969)
!9022 = !DILocation(line: 1073, column: 10, scope: !8969)
!9023 = !DILocation(line: 1074, column: 7, scope: !9024)
!9024 = distinct !DILexicalBlock(scope: !8969, file: !3, line: 1074, column: 7)
!9025 = !DILocation(line: 1074, column: 43, scope: !9024)
!9026 = !DILocation(line: 1074, column: 7, scope: !8969)
!9027 = !DILocation(line: 1075, column: 35, scope: !9024)
!9028 = !DILocation(line: 1075, column: 14, scope: !9024)
!9029 = !DILocation(line: 1075, column: 41, scope: !9024)
!9030 = !DILocation(line: 1076, column: 29, scope: !9024)
!9031 = !DILocation(line: 1076, column: 40, scope: !9024)
!9032 = !DILocation(line: 1076, column: 9, scope: !9024)
!9033 = !DILocation(line: 1076, column: 7, scope: !9024)
!9034 = !DILocation(line: 1077, column: 30, scope: !9024)
!9035 = !DILocation(line: 1077, column: 9, scope: !9024)
!9036 = !DILocation(line: 1077, column: 36, scope: !9024)
!9037 = !DILocation(line: 1078, column: 29, scope: !9024)
!9038 = !DILocation(line: 1078, column: 40, scope: !9024)
!9039 = !DILocation(line: 1078, column: 9, scope: !9024)
!9040 = !DILocation(line: 1078, column: 7, scope: !9024)
!9041 = !DILocation(line: 1077, column: 7, scope: !9024)
!9042 = !DILocation(line: 1075, column: 10, scope: !9024)
!9043 = !DILocation(line: 1075, column: 5, scope: !9024)
!9044 = !DILocation(line: 1080, column: 36, scope: !9024)
!9045 = !DILocation(line: 1080, column: 15, scope: !9024)
!9046 = !DILocation(line: 1080, column: 42, scope: !9024)
!9047 = !DILocation(line: 1081, column: 30, scope: !9024)
!9048 = !DILocation(line: 1081, column: 41, scope: !9024)
!9049 = !DILocation(line: 1081, column: 10, scope: !9024)
!9050 = !DILocation(line: 1081, column: 8, scope: !9024)
!9051 = !DILocation(line: 1082, column: 31, scope: !9024)
!9052 = !DILocation(line: 1082, column: 10, scope: !9024)
!9053 = !DILocation(line: 1082, column: 37, scope: !9024)
!9054 = !DILocation(line: 1083, column: 30, scope: !9024)
!9055 = !DILocation(line: 1083, column: 41, scope: !9024)
!9056 = !DILocation(line: 1083, column: 10, scope: !9024)
!9057 = !DILocation(line: 1083, column: 8, scope: !9024)
!9058 = !DILocation(line: 1082, column: 8, scope: !9024)
!9059 = !DILocation(line: 1084, column: 38, scope: !9024)
!9060 = !DILocation(line: 1084, column: 44, scope: !9024)
!9061 = !DILocation(line: 1084, column: 52, scope: !9024)
!9062 = !DILocation(line: 1084, column: 10, scope: !9024)
!9063 = !DILocation(line: 1085, column: 26, scope: !9024)
!9064 = !DILocation(line: 1085, column: 37, scope: !9024)
!9065 = !DILocation(line: 1085, column: 6, scope: !9024)
!9066 = !DILocation(line: 1086, column: 28, scope: !9024)
!9067 = !DILocation(line: 1086, column: 39, scope: !9024)
!9068 = !DILocation(line: 1086, column: 8, scope: !9024)
!9069 = !DILocation(line: 1086, column: 6, scope: !9024)
!9070 = !DILocation(line: 1085, column: 3, scope: !9024)
!9071 = !DILocation(line: 1084, column: 7, scope: !9024)
!9072 = !DILocation(line: 1080, column: 10, scope: !9024)
!9073 = !DILocation(line: 1087, column: 10, scope: !8969)
!9074 = !DILocation(line: 1087, column: 3, scope: !8969)
!9075 = !DILocation(line: 1088, column: 1, scope: !8969)
!9076 = distinct !DISubprogram(name: "allocno_spill_priority_compare", scope: !3, file: !3, line: 1093, type: !1959, scopeLine: 1094, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9077 = !DILocalVariable(name: "k1", arg: 1, scope: !9076, file: !3, line: 1093, type: !1858)
!9078 = !DILocation(line: 1093, column: 48, scope: !9076)
!9079 = !DILocalVariable(name: "k2", arg: 2, scope: !9076, file: !3, line: 1093, type: !1858)
!9080 = !DILocation(line: 1093, column: 67, scope: !9076)
!9081 = !DILocalVariable(name: "pri1", scope: !9076, file: !3, line: 1095, type: !610)
!9082 = !DILocation(line: 1095, column: 7, scope: !9076)
!9083 = !DILocalVariable(name: "pri2", scope: !9076, file: !3, line: 1095, type: !610)
!9084 = !DILocation(line: 1095, column: 13, scope: !9076)
!9085 = !DILocalVariable(name: "diff", scope: !9076, file: !3, line: 1095, type: !610)
!9086 = !DILocation(line: 1095, column: 19, scope: !9076)
!9087 = !DILocalVariable(name: "a1", scope: !9076, file: !3, line: 1096, type: !612)
!9088 = !DILocation(line: 1096, column: 17, scope: !9076)
!9089 = !DILocation(line: 1096, column: 38, scope: !9076)
!9090 = !DILocation(line: 1096, column: 22, scope: !9076)
!9091 = !DILocalVariable(name: "a2", scope: !9076, file: !3, line: 1096, type: !612)
!9092 = !DILocation(line: 1096, column: 42, scope: !9076)
!9093 = !DILocation(line: 1096, column: 63, scope: !9076)
!9094 = !DILocation(line: 1096, column: 47, scope: !9076)
!9095 = !DILocation(line: 1098, column: 11, scope: !9076)
!9096 = !DILocation(line: 1099, column: 7, scope: !9076)
!9097 = !DILocation(line: 1100, column: 29, scope: !9076)
!9098 = !DILocation(line: 1100, column: 9, scope: !9076)
!9099 = !DILocation(line: 1100, column: 55, scope: !9076)
!9100 = !DILocation(line: 1100, column: 7, scope: !9076)
!9101 = !DILocation(line: 1101, column: 7, scope: !9076)
!9102 = !DILocation(line: 1099, column: 4, scope: !9076)
!9103 = !DILocation(line: 1098, column: 8, scope: !9076)
!9104 = !DILocation(line: 1102, column: 11, scope: !9076)
!9105 = !DILocation(line: 1103, column: 7, scope: !9076)
!9106 = !DILocation(line: 1104, column: 29, scope: !9076)
!9107 = !DILocation(line: 1104, column: 9, scope: !9076)
!9108 = !DILocation(line: 1104, column: 55, scope: !9076)
!9109 = !DILocation(line: 1104, column: 7, scope: !9076)
!9110 = !DILocation(line: 1105, column: 7, scope: !9076)
!9111 = !DILocation(line: 1103, column: 4, scope: !9076)
!9112 = !DILocation(line: 1102, column: 8, scope: !9076)
!9113 = !DILocation(line: 1106, column: 15, scope: !9114)
!9114 = distinct !DILexicalBlock(scope: !9076, file: !3, line: 1106, column: 7)
!9115 = !DILocation(line: 1106, column: 22, scope: !9114)
!9116 = !DILocation(line: 1106, column: 20, scope: !9114)
!9117 = !DILocation(line: 1106, column: 13, scope: !9114)
!9118 = !DILocation(line: 1106, column: 28, scope: !9114)
!9119 = !DILocation(line: 1106, column: 7, scope: !9076)
!9120 = !DILocation(line: 1107, column: 12, scope: !9114)
!9121 = !DILocation(line: 1107, column: 5, scope: !9114)
!9122 = !DILocation(line: 1108, column: 15, scope: !9123)
!9123 = distinct !DILexicalBlock(scope: !9076, file: !3, line: 1108, column: 7)
!9124 = !DILocation(line: 1108, column: 35, scope: !9123)
!9125 = !DILocation(line: 1108, column: 33, scope: !9123)
!9126 = !DILocation(line: 1108, column: 13, scope: !9123)
!9127 = !DILocation(line: 1108, column: 54, scope: !9123)
!9128 = !DILocation(line: 1108, column: 7, scope: !9076)
!9129 = !DILocation(line: 1109, column: 12, scope: !9123)
!9130 = !DILocation(line: 1109, column: 5, scope: !9123)
!9131 = !DILocation(line: 1110, column: 10, scope: !9076)
!9132 = !DILocation(line: 1110, column: 29, scope: !9076)
!9133 = !DILocation(line: 1110, column: 27, scope: !9076)
!9134 = !DILocation(line: 1110, column: 3, scope: !9076)
!9135 = !DILocation(line: 1111, column: 1, scope: !9076)
!9136 = distinct !DISubprogram(name: "splay_tree_allocate", scope: !3, file: !3, line: 1117, type: !1974, scopeLine: 1118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9137 = !DILocalVariable(name: "size", arg: 1, scope: !9136, file: !3, line: 1117, type: !610)
!9138 = !DILocation(line: 1117, column: 26, scope: !9136)
!9139 = !DILocalVariable(name: "data", arg: 2, scope: !9136, file: !3, line: 1117, type: !608)
!9140 = !DILocation(line: 1117, column: 38, scope: !9136)
!9141 = !DILocation(line: 1119, column: 7, scope: !9142)
!9142 = distinct !DILexicalBlock(scope: !9136, file: !3, line: 1119, column: 7)
!9143 = !DILocation(line: 1119, column: 12, scope: !9142)
!9144 = !DILocation(line: 1119, column: 7, scope: !9136)
!9145 = !DILocation(line: 1120, column: 26, scope: !9142)
!9146 = !DILocation(line: 1120, column: 12, scope: !9142)
!9147 = !DILocation(line: 1120, column: 5, scope: !9142)
!9148 = !DILocation(line: 1121, column: 22, scope: !9136)
!9149 = !DILocation(line: 1121, column: 10, scope: !9136)
!9150 = !DILocation(line: 1121, column: 3, scope: !9136)
!9151 = !DILocation(line: 1122, column: 1, scope: !9136)
!9152 = distinct !DISubprogram(name: "splay_tree_free", scope: !3, file: !3, line: 1128, type: !1214, scopeLine: 1129, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9153 = !DILocalVariable(name: "node", arg: 1, scope: !9152, file: !3, line: 1128, type: !608)
!9154 = !DILocation(line: 1128, column: 24, scope: !9152)
!9155 = !DILocalVariable(name: "data", arg: 2, scope: !9152, file: !3, line: 1128, type: !608)
!9156 = !DILocation(line: 1128, column: 36, scope: !9152)
!9157 = !DILocalVariable(name: "i", scope: !9152, file: !3, line: 1130, type: !610)
!9158 = !DILocation(line: 1130, column: 7, scope: !9152)
!9159 = !DILocalVariable(name: "cover_class", scope: !9152, file: !3, line: 1131, type: !390)
!9160 = !DILocation(line: 1131, column: 18, scope: !9152)
!9161 = !DILocation(line: 1133, column: 10, scope: !9162)
!9162 = distinct !DILexicalBlock(scope: !9152, file: !3, line: 1133, column: 3)
!9163 = !DILocation(line: 1133, column: 8, scope: !9162)
!9164 = !DILocation(line: 1133, column: 15, scope: !9165)
!9165 = distinct !DILexicalBlock(scope: !9162, file: !3, line: 1133, column: 3)
!9166 = !DILocation(line: 1133, column: 19, scope: !9165)
!9167 = !DILocation(line: 1133, column: 17, scope: !9165)
!9168 = !DILocation(line: 1133, column: 3, scope: !9162)
!9169 = !DILocation(line: 1135, column: 41, scope: !9170)
!9170 = distinct !DILexicalBlock(scope: !9165, file: !3, line: 1134, column: 5)
!9171 = !DILocation(line: 1135, column: 21, scope: !9170)
!9172 = !DILocation(line: 1135, column: 19, scope: !9170)
!9173 = !DILocation(line: 1136, column: 11, scope: !9174)
!9174 = distinct !DILexicalBlock(scope: !9170, file: !3, line: 1136, column: 11)
!9175 = !DILocation(line: 1136, column: 51, scope: !9174)
!9176 = !DILocation(line: 1136, column: 19, scope: !9174)
!9177 = !DILocation(line: 1136, column: 16, scope: !9174)
!9178 = !DILocation(line: 1136, column: 11, scope: !9170)
!9179 = !DILocation(line: 1138, column: 14, scope: !9180)
!9180 = distinct !DILexicalBlock(scope: !9174, file: !3, line: 1137, column: 2)
!9181 = !DILocation(line: 1138, column: 4, scope: !9180)
!9182 = !DILocation(line: 1139, column: 4, scope: !9180)
!9183 = !DILocation(line: 1141, column: 5, scope: !9170)
!9184 = !DILocation(line: 1133, column: 46, scope: !9165)
!9185 = !DILocation(line: 1133, column: 3, scope: !9165)
!9186 = distinct !{!9186, !9168, !9187}
!9187 = !DILocation(line: 1141, column: 5, scope: !9162)
!9188 = !DILocation(line: 1142, column: 14, scope: !9152)
!9189 = !DILocation(line: 1142, column: 36, scope: !9152)
!9190 = !DILocation(line: 1142, column: 3, scope: !9152)
!9191 = !DILocation(line: 1143, column: 1, scope: !9152)
!9192 = distinct !DISubprogram(name: "push_only_colorable", scope: !3, file: !3, line: 997, type: !5837, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9193 = !DILocation(line: 999, column: 3, scope: !9192)
!9194 = !DILocation(line: 1000, column: 3, scope: !9192)
!9195 = !DILocation(line: 1000, column: 9, scope: !9196)
!9196 = distinct !DILexicalBlock(scope: !9197, file: !3, line: 1000, column: 3)
!9197 = distinct !DILexicalBlock(scope: !9192, file: !3, line: 1000, column: 3)
!9198 = !DILocation(line: 1000, column: 34, scope: !9196)
!9199 = !DILocation(line: 1000, column: 3, scope: !9197)
!9200 = !DILocation(line: 1001, column: 42, scope: !9196)
!9201 = !DILocation(line: 1001, column: 5, scope: !9196)
!9202 = !DILocation(line: 1000, column: 3, scope: !9196)
!9203 = distinct !{!9203, !9199, !9204}
!9204 = !DILocation(line: 1001, column: 72, scope: !9197)
!9205 = !DILocation(line: 1002, column: 1, scope: !9192)
!9206 = distinct !DISubprogram(name: "push_allocno_to_spill", scope: !3, file: !3, line: 1007, type: !2734, scopeLine: 1008, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9207 = !DILocalVariable(name: "allocno", arg: 1, scope: !9206, file: !3, line: 1007, type: !612)
!9208 = !DILocation(line: 1007, column: 38, scope: !9206)
!9209 = !DILocation(line: 1009, column: 31, scope: !9206)
!9210 = !DILocation(line: 1009, column: 3, scope: !9206)
!9211 = !DILocation(line: 1010, column: 3, scope: !9206)
!9212 = !DILocation(line: 1010, column: 38, scope: !9206)
!9213 = !DILocation(line: 1011, column: 7, scope: !9214)
!9214 = distinct !DILexicalBlock(scope: !9206, file: !3, line: 1011, column: 7)
!9215 = !DILocation(line: 1011, column: 33, scope: !9214)
!9216 = !DILocation(line: 1011, column: 37, scope: !9214)
!9217 = !DILocation(line: 1011, column: 40, scope: !9214)
!9218 = !DILocation(line: 1011, column: 54, scope: !9214)
!9219 = !DILocation(line: 1011, column: 7, scope: !9206)
!9220 = !DILocation(line: 1012, column: 14, scope: !9214)
!9221 = !DILocation(line: 1013, column: 7, scope: !9214)
!9222 = !DILocation(line: 1013, column: 30, scope: !9214)
!9223 = !DILocation(line: 1012, column: 5, scope: !9214)
!9224 = !DILocation(line: 1014, column: 26, scope: !9206)
!9225 = !DILocation(line: 1014, column: 3, scope: !9206)
!9226 = !DILocation(line: 1015, column: 1, scope: !9206)
!9227 = distinct !DISubprogram(name: "VEC_ira_allocno_t_base_length", scope: !613, file: !613, line: 67, type: !9228, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9228 = !DISubroutineType(types: !9229)
!9229 = !{!7, !9230}
!9230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9231, size: 64)
!9231 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1839)
!9232 = !DILocalVariable(name: "vec_", arg: 1, scope: !9227, file: !613, line: 67, type: !9230)
!9233 = !DILocation(line: 67, column: 1, scope: !9227)
!9234 = distinct !DISubprogram(name: "VEC_ira_allocno_t_base_pop", scope: !613, file: !613, line: 67, type: !9235, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9235 = !DISubroutineType(types: !9236)
!9236 = !{!612, !6711}
!9237 = !DILocalVariable(name: "vec_", arg: 1, scope: !9234, file: !613, line: 67, type: !6711)
!9238 = !DILocation(line: 67, column: 1, scope: !9234)
!9239 = !DILocalVariable(name: "obj_", scope: !9234, file: !613, line: 67, type: !612)
!9240 = distinct !DISubprogram(name: "allocno_spill_priority", scope: !3, file: !3, line: 688, type: !8970, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9241 = !DILocalVariable(name: "a", arg: 1, scope: !9240, file: !3, line: 688, type: !612)
!9242 = !DILocation(line: 688, column: 39, scope: !9240)
!9243 = !DILocation(line: 690, column: 11, scope: !9240)
!9244 = !DILocation(line: 691, column: 7, scope: !9240)
!9245 = !DILocation(line: 692, column: 29, scope: !9240)
!9246 = !DILocation(line: 692, column: 9, scope: !9240)
!9247 = !DILocation(line: 692, column: 54, scope: !9240)
!9248 = !DILocation(line: 692, column: 7, scope: !9240)
!9249 = !DILocation(line: 693, column: 7, scope: !9240)
!9250 = !DILocation(line: 691, column: 4, scope: !9240)
!9251 = !DILocation(line: 690, column: 3, scope: !9240)
!9252 = distinct !DISubprogram(name: "remove_allocno_from_bucket_and_push", scope: !3, file: !3, line: 961, type: !4447, scopeLine: 962, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9253 = !DILocalVariable(name: "allocno", arg: 1, scope: !9252, file: !3, line: 961, type: !612)
!9254 = !DILocation(line: 961, column: 52, scope: !9252)
!9255 = !DILocalVariable(name: "colorable_p", arg: 2, scope: !9252, file: !3, line: 961, type: !855)
!9256 = !DILocation(line: 961, column: 66, scope: !9252)
!9257 = !DILocalVariable(name: "cover_class", scope: !9252, file: !3, line: 963, type: !390)
!9258 = !DILocation(line: 963, column: 18, scope: !9252)
!9259 = !DILocation(line: 965, column: 7, scope: !9260)
!9260 = distinct !DILexicalBlock(scope: !9252, file: !3, line: 965, column: 7)
!9261 = !DILocation(line: 965, column: 7, scope: !9252)
!9262 = !DILocation(line: 966, column: 33, scope: !9260)
!9263 = !DILocation(line: 966, column: 5, scope: !9260)
!9264 = !DILocation(line: 968, column: 33, scope: !9260)
!9265 = !DILocation(line: 968, column: 5, scope: !9260)
!9266 = !DILocation(line: 969, column: 7, scope: !9267)
!9267 = distinct !DILexicalBlock(scope: !9252, file: !3, line: 969, column: 7)
!9268 = !DILocation(line: 969, column: 33, scope: !9267)
!9269 = !DILocation(line: 969, column: 37, scope: !9267)
!9270 = !DILocation(line: 969, column: 40, scope: !9267)
!9271 = !DILocation(line: 969, column: 54, scope: !9267)
!9272 = !DILocation(line: 969, column: 7, scope: !9252)
!9273 = !DILocation(line: 971, column: 16, scope: !9274)
!9274 = distinct !DILexicalBlock(scope: !9267, file: !3, line: 970, column: 5)
!9275 = !DILocation(line: 971, column: 7, scope: !9274)
!9276 = !DILocation(line: 972, column: 32, scope: !9274)
!9277 = !DILocation(line: 972, column: 7, scope: !9274)
!9278 = !DILocation(line: 973, column: 11, scope: !9279)
!9279 = distinct !DILexicalBlock(scope: !9274, file: !3, line: 973, column: 11)
!9280 = !DILocation(line: 973, column: 11, scope: !9274)
!9281 = !DILocation(line: 974, column: 11, scope: !9279)
!9282 = !DILocation(line: 974, column: 2, scope: !9279)
!9283 = !DILocation(line: 976, column: 11, scope: !9279)
!9284 = !DILocation(line: 977, column: 4, scope: !9279)
!9285 = !DILocation(line: 978, column: 28, scope: !9279)
!9286 = !DILocation(line: 978, column: 4, scope: !9279)
!9287 = !DILocation(line: 978, column: 38, scope: !9279)
!9288 = !DILocation(line: 976, column: 2, scope: !9279)
!9289 = !DILocation(line: 979, column: 5, scope: !9274)
!9290 = !DILocation(line: 980, column: 17, scope: !9252)
!9291 = !DILocation(line: 980, column: 15, scope: !9252)
!9292 = !DILocation(line: 990, column: 9, scope: !9293)
!9293 = distinct !DILexicalBlock(scope: !9252, file: !3, line: 990, column: 7)
!9294 = !DILocation(line: 990, column: 7, scope: !9252)
!9295 = !DILocation(line: 991, column: 5, scope: !9293)
!9296 = !DILocation(line: 991, column: 40, scope: !9293)
!9297 = !DILocation(line: 992, column: 26, scope: !9252)
!9298 = !DILocation(line: 992, column: 3, scope: !9252)
!9299 = !DILocation(line: 993, column: 1, scope: !9252)
!9300 = distinct !DISubprogram(name: "sort_bucket", scope: !3, file: !3, line: 765, type: !9301, scopeLine: 766, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9301 = !DISubroutineType(types: !9302)
!9302 = !{null, !611}
!9303 = !DILocalVariable(name: "bucket_ptr", arg: 1, scope: !9300, file: !3, line: 765, type: !611)
!9304 = !DILocation(line: 765, column: 29, scope: !9300)
!9305 = !DILocalVariable(name: "a", scope: !9300, file: !3, line: 767, type: !612)
!9306 = !DILocation(line: 767, column: 17, scope: !9300)
!9307 = !DILocalVariable(name: "head", scope: !9300, file: !3, line: 767, type: !612)
!9308 = !DILocation(line: 767, column: 20, scope: !9300)
!9309 = !DILocalVariable(name: "n", scope: !9300, file: !3, line: 768, type: !610)
!9310 = !DILocation(line: 768, column: 7, scope: !9300)
!9311 = !DILocation(line: 770, column: 10, scope: !9312)
!9312 = distinct !DILexicalBlock(scope: !9300, file: !3, line: 770, column: 3)
!9313 = !DILocation(line: 770, column: 20, scope: !9312)
!9314 = !DILocation(line: 770, column: 19, scope: !9312)
!9315 = !DILocation(line: 770, column: 17, scope: !9312)
!9316 = !DILocation(line: 770, column: 8, scope: !9312)
!9317 = !DILocation(line: 770, column: 32, scope: !9318)
!9318 = distinct !DILexicalBlock(scope: !9312, file: !3, line: 770, column: 3)
!9319 = !DILocation(line: 770, column: 34, scope: !9318)
!9320 = !DILocation(line: 770, column: 3, scope: !9312)
!9321 = !DILocation(line: 771, column: 28, scope: !9318)
!9322 = !DILocation(line: 771, column: 5, scope: !9318)
!9323 = !DILocation(line: 771, column: 22, scope: !9318)
!9324 = !DILocation(line: 771, column: 26, scope: !9318)
!9325 = !DILocation(line: 770, column: 47, scope: !9318)
!9326 = !DILocation(line: 770, column: 45, scope: !9318)
!9327 = !DILocation(line: 770, column: 3, scope: !9318)
!9328 = distinct !{!9328, !9320, !9329}
!9329 = !DILocation(line: 771, column: 28, scope: !9312)
!9330 = !DILocation(line: 772, column: 7, scope: !9331)
!9331 = distinct !DILexicalBlock(scope: !9300, file: !3, line: 772, column: 7)
!9332 = !DILocation(line: 772, column: 9, scope: !9331)
!9333 = !DILocation(line: 772, column: 7, scope: !9300)
!9334 = !DILocation(line: 773, column: 5, scope: !9331)
!9335 = !DILocation(line: 775, column: 15, scope: !9300)
!9336 = !DILocation(line: 775, column: 32, scope: !9300)
!9337 = !DILocation(line: 775, column: 3, scope: !9300)
!9338 = !DILocation(line: 781, column: 8, scope: !9300)
!9339 = !DILocation(line: 782, column: 9, scope: !9340)
!9340 = distinct !DILexicalBlock(scope: !9300, file: !3, line: 782, column: 3)
!9341 = !DILocation(line: 782, column: 8, scope: !9340)
!9342 = !DILocation(line: 782, column: 13, scope: !9343)
!9343 = distinct !DILexicalBlock(scope: !9340, file: !3, line: 782, column: 3)
!9344 = !DILocation(line: 782, column: 15, scope: !9343)
!9345 = !DILocation(line: 782, column: 3, scope: !9340)
!9346 = !DILocation(line: 784, column: 11, scope: !9347)
!9347 = distinct !DILexicalBlock(scope: !9343, file: !3, line: 783, column: 5)
!9348 = !DILocation(line: 784, column: 27, scope: !9347)
!9349 = !DILocation(line: 784, column: 9, scope: !9347)
!9350 = !DILocation(line: 785, column: 41, scope: !9347)
!9351 = !DILocation(line: 785, column: 7, scope: !9347)
!9352 = !DILocation(line: 785, column: 39, scope: !9347)
!9353 = !DILocation(line: 786, column: 7, scope: !9347)
!9354 = !DILocation(line: 786, column: 39, scope: !9347)
!9355 = !DILocation(line: 787, column: 11, scope: !9356)
!9356 = distinct !DILexicalBlock(scope: !9347, file: !3, line: 787, column: 11)
!9357 = !DILocation(line: 787, column: 16, scope: !9356)
!9358 = !DILocation(line: 787, column: 11, scope: !9347)
!9359 = !DILocation(line: 788, column: 39, scope: !9356)
!9360 = !DILocation(line: 788, column: 2, scope: !9356)
!9361 = !DILocation(line: 788, column: 37, scope: !9356)
!9362 = !DILocation(line: 789, column: 14, scope: !9347)
!9363 = !DILocation(line: 789, column: 12, scope: !9347)
!9364 = !DILocation(line: 790, column: 5, scope: !9347)
!9365 = !DILocation(line: 782, column: 22, scope: !9343)
!9366 = !DILocation(line: 782, column: 3, scope: !9343)
!9367 = distinct !{!9367, !9345, !9368}
!9368 = !DILocation(line: 790, column: 5, scope: !9340)
!9369 = !DILocation(line: 791, column: 17, scope: !9300)
!9370 = !DILocation(line: 791, column: 4, scope: !9300)
!9371 = !DILocation(line: 791, column: 15, scope: !9300)
!9372 = !DILocation(line: 792, column: 1, scope: !9300)
!9373 = distinct !DISubprogram(name: "bucket_allocno_compare_func", scope: !3, file: !3, line: 745, type: !1182, scopeLine: 746, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9374 = !DILocalVariable(name: "v1p", arg: 1, scope: !9373, file: !3, line: 745, type: !1177)
!9375 = !DILocation(line: 745, column: 42, scope: !9373)
!9376 = !DILocalVariable(name: "v2p", arg: 2, scope: !9373, file: !3, line: 745, type: !1177)
!9377 = !DILocation(line: 745, column: 59, scope: !9373)
!9378 = !DILocalVariable(name: "a1", scope: !9373, file: !3, line: 747, type: !612)
!9379 = !DILocation(line: 747, column: 17, scope: !9373)
!9380 = !DILocation(line: 747, column: 47, scope: !9373)
!9381 = !DILocation(line: 747, column: 23, scope: !9373)
!9382 = !DILocation(line: 747, column: 22, scope: !9373)
!9383 = !DILocalVariable(name: "a2", scope: !9373, file: !3, line: 748, type: !612)
!9384 = !DILocation(line: 748, column: 17, scope: !9373)
!9385 = !DILocation(line: 748, column: 47, scope: !9373)
!9386 = !DILocation(line: 748, column: 23, scope: !9373)
!9387 = !DILocation(line: 748, column: 22, scope: !9373)
!9388 = !DILocalVariable(name: "diff", scope: !9373, file: !3, line: 749, type: !610)
!9389 = !DILocation(line: 749, column: 7, scope: !9373)
!9390 = !DILocalVariable(name: "a1_freq", scope: !9373, file: !3, line: 749, type: !610)
!9391 = !DILocation(line: 749, column: 13, scope: !9373)
!9392 = !DILocalVariable(name: "a2_freq", scope: !9373, file: !3, line: 749, type: !610)
!9393 = !DILocation(line: 749, column: 22, scope: !9373)
!9394 = !DILocalVariable(name: "a1_num", scope: !9373, file: !3, line: 749, type: !610)
!9395 = !DILocation(line: 749, column: 31, scope: !9373)
!9396 = !DILocalVariable(name: "a2_num", scope: !9373, file: !3, line: 749, type: !610)
!9397 = !DILocation(line: 749, column: 39, scope: !9373)
!9398 = !DILocation(line: 751, column: 21, scope: !9399)
!9399 = distinct !DILexicalBlock(scope: !9373, file: !3, line: 751, column: 7)
!9400 = !DILocation(line: 751, column: 48, scope: !9399)
!9401 = !DILocation(line: 751, column: 46, scope: !9399)
!9402 = !DILocation(line: 751, column: 13, scope: !9399)
!9403 = !DILocation(line: 751, column: 74, scope: !9399)
!9404 = !DILocation(line: 751, column: 7, scope: !9373)
!9405 = !DILocation(line: 752, column: 12, scope: !9399)
!9406 = !DILocation(line: 752, column: 5, scope: !9399)
!9407 = !DILocation(line: 753, column: 38, scope: !9373)
!9408 = !DILocation(line: 753, column: 3, scope: !9373)
!9409 = !DILocation(line: 754, column: 38, scope: !9373)
!9410 = !DILocation(line: 754, column: 3, scope: !9373)
!9411 = !DILocation(line: 755, column: 15, scope: !9412)
!9412 = distinct !DILexicalBlock(scope: !9373, file: !3, line: 755, column: 7)
!9413 = !DILocation(line: 755, column: 24, scope: !9412)
!9414 = !DILocation(line: 755, column: 22, scope: !9412)
!9415 = !DILocation(line: 755, column: 13, scope: !9412)
!9416 = !DILocation(line: 755, column: 32, scope: !9412)
!9417 = !DILocation(line: 755, column: 7, scope: !9373)
!9418 = !DILocation(line: 756, column: 12, scope: !9412)
!9419 = !DILocation(line: 756, column: 5, scope: !9412)
!9420 = !DILocation(line: 757, column: 20, scope: !9421)
!9421 = distinct !DILexicalBlock(scope: !9412, file: !3, line: 757, column: 12)
!9422 = !DILocation(line: 757, column: 30, scope: !9421)
!9423 = !DILocation(line: 757, column: 28, scope: !9421)
!9424 = !DILocation(line: 757, column: 18, scope: !9421)
!9425 = !DILocation(line: 757, column: 39, scope: !9421)
!9426 = !DILocation(line: 757, column: 12, scope: !9412)
!9427 = !DILocation(line: 758, column: 12, scope: !9421)
!9428 = !DILocation(line: 758, column: 5, scope: !9421)
!9429 = !DILocation(line: 759, column: 10, scope: !9373)
!9430 = !DILocation(line: 759, column: 29, scope: !9373)
!9431 = !DILocation(line: 759, column: 27, scope: !9373)
!9432 = !DILocation(line: 759, column: 3, scope: !9373)
!9433 = !DILocation(line: 760, column: 1, scope: !9373)
!9434 = distinct !DISubprogram(name: "get_coalesced_allocnos_attributes", scope: !3, file: !3, line: 721, type: !9435, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9435 = !DISubroutineType(types: !9436)
!9436 = !{null, !612, !609, !609}
!9437 = !DILocalVariable(name: "allocno", arg: 1, scope: !9434, file: !3, line: 721, type: !612)
!9438 = !DILocation(line: 721, column: 50, scope: !9434)
!9439 = !DILocalVariable(name: "freq", arg: 2, scope: !9434, file: !3, line: 721, type: !609)
!9440 = !DILocation(line: 721, column: 64, scope: !9434)
!9441 = !DILocalVariable(name: "num", arg: 3, scope: !9434, file: !3, line: 721, type: !609)
!9442 = !DILocation(line: 721, column: 75, scope: !9434)
!9443 = !DILocalVariable(name: "a", scope: !9434, file: !3, line: 723, type: !612)
!9444 = !DILocation(line: 723, column: 17, scope: !9434)
!9445 = !DILocation(line: 725, column: 4, scope: !9434)
!9446 = !DILocation(line: 725, column: 9, scope: !9434)
!9447 = !DILocation(line: 726, column: 4, scope: !9434)
!9448 = !DILocation(line: 726, column: 8, scope: !9434)
!9449 = !DILocation(line: 727, column: 12, scope: !9450)
!9450 = distinct !DILexicalBlock(scope: !9434, file: !3, line: 727, column: 3)
!9451 = !DILocation(line: 727, column: 10, scope: !9450)
!9452 = !DILocation(line: 727, column: 8, scope: !9450)
!9453 = !DILocation(line: 730, column: 16, scope: !9454)
!9454 = distinct !DILexicalBlock(scope: !9455, file: !3, line: 729, column: 5)
!9455 = distinct !DILexicalBlock(scope: !9450, file: !3, line: 727, column: 3)
!9456 = !DILocation(line: 730, column: 8, scope: !9454)
!9457 = !DILocation(line: 730, column: 13, scope: !9454)
!9458 = !DILocation(line: 731, column: 15, scope: !9454)
!9459 = !DILocation(line: 731, column: 8, scope: !9454)
!9460 = !DILocation(line: 731, column: 12, scope: !9454)
!9461 = !DILocation(line: 732, column: 11, scope: !9462)
!9462 = distinct !DILexicalBlock(scope: !9454, file: !3, line: 732, column: 11)
!9463 = !DILocation(line: 732, column: 16, scope: !9462)
!9464 = !DILocation(line: 732, column: 13, scope: !9462)
!9465 = !DILocation(line: 732, column: 11, scope: !9454)
!9466 = !DILocation(line: 733, column: 2, scope: !9462)
!9467 = !DILocation(line: 734, column: 5, scope: !9454)
!9468 = !DILocation(line: 728, column: 12, scope: !9455)
!9469 = !DILocation(line: 728, column: 10, scope: !9455)
!9470 = !DILocation(line: 727, column: 3, scope: !9455)
!9471 = distinct !{!9471, !9472, !9473}
!9472 = !DILocation(line: 727, column: 3, scope: !9450)
!9473 = !DILocation(line: 734, column: 5, scope: !9450)
!9474 = !DILocation(line: 735, column: 1, scope: !9434)
!9475 = distinct !DISubprogram(name: "delete_allocno_from_bucket", scope: !3, file: !3, line: 828, type: !8911, scopeLine: 829, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9476 = !DILocalVariable(name: "allocno", arg: 1, scope: !9475, file: !3, line: 828, type: !612)
!9477 = !DILocation(line: 828, column: 43, scope: !9475)
!9478 = !DILocalVariable(name: "bucket_ptr", arg: 2, scope: !9475, file: !3, line: 828, type: !611)
!9479 = !DILocation(line: 828, column: 67, scope: !9475)
!9480 = !DILocalVariable(name: "prev_allocno", scope: !9475, file: !3, line: 830, type: !612)
!9481 = !DILocation(line: 830, column: 17, scope: !9475)
!9482 = !DILocalVariable(name: "next_allocno", scope: !9475, file: !3, line: 830, type: !612)
!9483 = !DILocation(line: 830, column: 31, scope: !9475)
!9484 = !DILocalVariable(name: "cover_class", scope: !9475, file: !3, line: 831, type: !390)
!9485 = !DILocation(line: 831, column: 18, scope: !9475)
!9486 = !DILocation(line: 833, column: 7, scope: !9487)
!9487 = distinct !DILexicalBlock(scope: !9475, file: !3, line: 833, column: 7)
!9488 = !DILocation(line: 833, column: 18, scope: !9487)
!9489 = !DILocation(line: 834, column: 7, scope: !9487)
!9490 = !DILocation(line: 834, column: 25, scope: !9487)
!9491 = !DILocation(line: 834, column: 23, scope: !9487)
!9492 = !DILocation(line: 834, column: 56, scope: !9487)
!9493 = !DILocation(line: 833, column: 7, scope: !9475)
!9494 = !DILocation(line: 836, column: 32, scope: !9495)
!9495 = distinct !DILexicalBlock(scope: !9487, file: !3, line: 835, column: 5)
!9496 = !DILocation(line: 836, column: 7, scope: !9495)
!9497 = !DILocation(line: 836, column: 44, scope: !9495)
!9498 = !DILocation(line: 838, column: 5, scope: !9495)
!9499 = !DILocation(line: 839, column: 18, scope: !9475)
!9500 = !DILocation(line: 839, column: 16, scope: !9475)
!9501 = !DILocation(line: 840, column: 18, scope: !9475)
!9502 = !DILocation(line: 840, column: 16, scope: !9475)
!9503 = !DILocation(line: 841, column: 7, scope: !9504)
!9504 = distinct !DILexicalBlock(scope: !9475, file: !3, line: 841, column: 7)
!9505 = !DILocation(line: 841, column: 20, scope: !9504)
!9506 = !DILocation(line: 841, column: 7, scope: !9475)
!9507 = !DILocation(line: 842, column: 50, scope: !9504)
!9508 = !DILocation(line: 842, column: 5, scope: !9504)
!9509 = !DILocation(line: 842, column: 48, scope: !9504)
!9510 = !DILocation(line: 846, column: 21, scope: !9511)
!9511 = distinct !DILexicalBlock(scope: !9504, file: !3, line: 844, column: 5)
!9512 = !DILocation(line: 846, column: 8, scope: !9511)
!9513 = !DILocation(line: 846, column: 19, scope: !9511)
!9514 = !DILocation(line: 848, column: 7, scope: !9515)
!9515 = distinct !DILexicalBlock(scope: !9475, file: !3, line: 848, column: 7)
!9516 = !DILocation(line: 848, column: 20, scope: !9515)
!9517 = !DILocation(line: 848, column: 7, scope: !9475)
!9518 = !DILocation(line: 849, column: 50, scope: !9515)
!9519 = !DILocation(line: 849, column: 5, scope: !9515)
!9520 = !DILocation(line: 849, column: 48, scope: !9515)
!9521 = !DILocation(line: 850, column: 1, scope: !9475)
!9522 = distinct !DISubprogram(name: "push_allocno_to_stack", scope: !3, file: !3, line: 872, type: !2734, scopeLine: 873, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9523 = !DILocalVariable(name: "allocno", arg: 1, scope: !9522, file: !3, line: 872, type: !612)
!9524 = !DILocation(line: 872, column: 38, scope: !9522)
!9525 = !DILocalVariable(name: "left_conflicts_size", scope: !9522, file: !3, line: 874, type: !610)
!9526 = !DILocation(line: 874, column: 7, scope: !9522)
!9527 = !DILocalVariable(name: "conflict_size", scope: !9522, file: !3, line: 874, type: !610)
!9528 = !DILocation(line: 874, column: 28, scope: !9522)
!9529 = !DILocalVariable(name: "size", scope: !9522, file: !3, line: 874, type: !610)
!9530 = !DILocation(line: 874, column: 43, scope: !9522)
!9531 = !DILocalVariable(name: "a", scope: !9522, file: !3, line: 875, type: !612)
!9532 = !DILocation(line: 875, column: 17, scope: !9522)
!9533 = !DILocalVariable(name: "conflict_allocno", scope: !9522, file: !3, line: 875, type: !612)
!9534 = !DILocation(line: 875, column: 20, scope: !9522)
!9535 = !DILocalVariable(name: "cover_class", scope: !9522, file: !3, line: 876, type: !390)
!9536 = !DILocation(line: 876, column: 18, scope: !9522)
!9537 = !DILocalVariable(name: "aci", scope: !9522, file: !3, line: 877, type: !2182)
!9538 = !DILocation(line: 877, column: 33, scope: !9522)
!9539 = !DILocation(line: 879, column: 3, scope: !9522)
!9540 = !DILocation(line: 879, column: 32, scope: !9522)
!9541 = !DILocation(line: 880, column: 3, scope: !9522)
!9542 = !DILocation(line: 881, column: 17, scope: !9522)
!9543 = !DILocation(line: 881, column: 15, scope: !9522)
!9544 = !DILocation(line: 882, column: 7, scope: !9545)
!9545 = distinct !DILexicalBlock(scope: !9522, file: !3, line: 882, column: 7)
!9546 = !DILocation(line: 882, column: 19, scope: !9545)
!9547 = !DILocation(line: 882, column: 7, scope: !9522)
!9548 = !DILocation(line: 883, column: 5, scope: !9545)
!9549 = !DILocation(line: 884, column: 30, scope: !9522)
!9550 = !DILocation(line: 884, column: 10, scope: !9522)
!9551 = !DILocation(line: 884, column: 43, scope: !9522)
!9552 = !DILocation(line: 884, column: 8, scope: !9522)
!9553 = !DILocation(line: 885, column: 7, scope: !9554)
!9554 = distinct !DILexicalBlock(scope: !9522, file: !3, line: 885, column: 7)
!9555 = !DILocation(line: 885, column: 7, scope: !9522)
!9556 = !DILocation(line: 886, column: 19, scope: !9554)
!9557 = !DILocation(line: 886, column: 5, scope: !9554)
!9558 = !DILocation(line: 887, column: 12, scope: !9559)
!9559 = distinct !DILexicalBlock(scope: !9522, file: !3, line: 887, column: 3)
!9560 = !DILocation(line: 887, column: 10, scope: !9559)
!9561 = !DILocation(line: 887, column: 8, scope: !9559)
!9562 = !DILocation(line: 890, column: 7, scope: !9563)
!9563 = distinct !DILexicalBlock(scope: !9564, file: !3, line: 890, column: 7)
!9564 = distinct !DILexicalBlock(scope: !9565, file: !3, line: 889, column: 5)
!9565 = distinct !DILexicalBlock(scope: !9559, file: !3, line: 887, column: 3)
!9566 = !DILocation(line: 890, column: 7, scope: !9567)
!9567 = distinct !DILexicalBlock(scope: !9563, file: !3, line: 890, column: 7)
!9568 = !DILocation(line: 892, column: 23, scope: !9569)
!9569 = distinct !DILexicalBlock(scope: !9567, file: !3, line: 891, column: 2)
!9570 = !DILocation(line: 892, column: 21, scope: !9569)
!9571 = !DILocation(line: 893, column: 22, scope: !9572)
!9572 = distinct !DILexicalBlock(scope: !9569, file: !3, line: 893, column: 8)
!9573 = !DILocation(line: 894, column: 8, scope: !9572)
!9574 = !DILocation(line: 893, column: 8, scope: !9572)
!9575 = !DILocation(line: 893, column: 8, scope: !9569)
!9576 = !DILocation(line: 898, column: 12, scope: !9577)
!9577 = distinct !DILexicalBlock(scope: !9578, file: !3, line: 898, column: 12)
!9578 = distinct !DILexicalBlock(scope: !9572, file: !3, line: 895, column: 6)
!9579 = !DILocation(line: 898, column: 12, scope: !9578)
!9580 = !DILocation(line: 900, column: 23, scope: !9581)
!9581 = distinct !DILexicalBlock(scope: !9582, file: !3, line: 900, column: 9)
!9582 = distinct !DILexicalBlock(scope: !9577, file: !3, line: 899, column: 3)
!9583 = !DILocation(line: 901, column: 9, scope: !9581)
!9584 = !DILocation(line: 900, column: 9, scope: !9581)
!9585 = !DILocation(line: 900, column: 9, scope: !9582)
!9586 = !DILocation(line: 902, column: 7, scope: !9581)
!9587 = !DILocation(line: 903, column: 21, scope: !9582)
!9588 = !DILocation(line: 904, column: 7, scope: !9582)
!9589 = !DILocation(line: 903, column: 5, scope: !9582)
!9590 = !DILocation(line: 905, column: 3, scope: !9582)
!9591 = !DILocation(line: 906, column: 12, scope: !9592)
!9592 = distinct !DILexicalBlock(scope: !9578, file: !3, line: 906, column: 12)
!9593 = !DILocation(line: 907, column: 5, scope: !9592)
!9594 = !DILocation(line: 907, column: 10, scope: !9592)
!9595 = !DILocation(line: 906, column: 12, scope: !9578)
!9596 = !DILocation(line: 910, column: 9, scope: !9597)
!9597 = distinct !DILexicalBlock(scope: !9592, file: !3, line: 908, column: 3)
!9598 = !DILocation(line: 910, column: 7, scope: !9597)
!9599 = !DILocation(line: 913, column: 11, scope: !9597)
!9600 = !DILocation(line: 912, column: 10, scope: !9597)
!9601 = !DILocation(line: 913, column: 24, scope: !9597)
!9602 = !DILocation(line: 912, column: 7, scope: !9597)
!9603 = !DILocation(line: 916, column: 9, scope: !9604)
!9604 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 916, column: 9)
!9605 = !DILocation(line: 916, column: 31, scope: !9604)
!9606 = !DILocation(line: 916, column: 29, scope: !9604)
!9607 = !DILocation(line: 917, column: 12, scope: !9604)
!9608 = !DILocation(line: 917, column: 9, scope: !9604)
!9609 = !DILocation(line: 916, column: 9, scope: !9597)
!9610 = !DILocation(line: 919, column: 59, scope: !9611)
!9611 = distinct !DILexicalBlock(scope: !9604, file: !3, line: 918, column: 7)
!9612 = !DILocation(line: 919, column: 9, scope: !9611)
!9613 = !DILocation(line: 919, column: 56, scope: !9611)
!9614 = !DILocation(line: 920, column: 9, scope: !9611)
!9615 = !DILocation(line: 923, column: 9, scope: !9597)
!9616 = !DILocation(line: 923, column: 58, scope: !9597)
!9617 = !DILocation(line: 923, column: 56, scope: !9597)
!9618 = !DILocation(line: 923, column: 7, scope: !9597)
!9619 = !DILocation(line: 924, column: 41, scope: !9620)
!9620 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 924, column: 9)
!9621 = !DILocation(line: 924, column: 9, scope: !9620)
!9622 = !DILocation(line: 924, column: 54, scope: !9620)
!9623 = !DILocation(line: 925, column: 9, scope: !9620)
!9624 = !DILocation(line: 925, column: 13, scope: !9620)
!9625 = !DILocation(line: 926, column: 9, scope: !9620)
!9626 = !DILocation(line: 926, column: 12, scope: !9620)
!9627 = !DILocation(line: 924, column: 9, scope: !9597)
!9628 = !DILocation(line: 933, column: 37, scope: !9629)
!9629 = distinct !DILexicalBlock(scope: !9620, file: !3, line: 927, column: 7)
!9630 = !DILocation(line: 933, column: 5, scope: !9629)
!9631 = !DILocation(line: 934, column: 22, scope: !9629)
!9632 = !DILocation(line: 934, column: 5, scope: !9629)
!9633 = !DILocation(line: 932, column: 9, scope: !9629)
!9634 = !DILocation(line: 935, column: 9, scope: !9629)
!9635 = !DILocation(line: 935, column: 52, scope: !9629)
!9636 = !DILocation(line: 936, column: 9, scope: !9629)
!9637 = !DILocation(line: 939, column: 7, scope: !9629)
!9638 = !DILocation(line: 941, column: 9, scope: !9597)
!9639 = !DILocation(line: 940, column: 5, scope: !9597)
!9640 = !DILocation(line: 941, column: 7, scope: !9597)
!9641 = !DILocation(line: 942, column: 9, scope: !9642)
!9642 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 942, column: 9)
!9643 = !DILocation(line: 942, column: 31, scope: !9642)
!9644 = !DILocation(line: 942, column: 29, scope: !9642)
!9645 = !DILocation(line: 943, column: 12, scope: !9642)
!9646 = !DILocation(line: 943, column: 9, scope: !9642)
!9647 = !DILocation(line: 942, column: 9, scope: !9597)
!9648 = !DILocation(line: 946, column: 5, scope: !9649)
!9649 = distinct !DILexicalBlock(scope: !9642, file: !3, line: 944, column: 7)
!9650 = !DILocation(line: 945, column: 9, scope: !9649)
!9651 = !DILocation(line: 948, column: 5, scope: !9649)
!9652 = !DILocation(line: 947, column: 9, scope: !9649)
!9653 = !DILocation(line: 949, column: 7, scope: !9649)
!9654 = !DILocation(line: 950, column: 3, scope: !9597)
!9655 = !DILocation(line: 951, column: 6, scope: !9578)
!9656 = !DILocation(line: 952, column: 2, scope: !9569)
!9657 = distinct !{!9657, !9562, !9658}
!9658 = !DILocation(line: 952, column: 2, scope: !9563)
!9659 = !DILocation(line: 953, column: 11, scope: !9660)
!9660 = distinct !DILexicalBlock(scope: !9564, file: !3, line: 953, column: 11)
!9661 = !DILocation(line: 953, column: 16, scope: !9660)
!9662 = !DILocation(line: 953, column: 13, scope: !9660)
!9663 = !DILocation(line: 953, column: 11, scope: !9564)
!9664 = !DILocation(line: 954, column: 2, scope: !9660)
!9665 = !DILocation(line: 955, column: 5, scope: !9564)
!9666 = !DILocation(line: 888, column: 12, scope: !9565)
!9667 = !DILocation(line: 888, column: 10, scope: !9565)
!9668 = !DILocation(line: 887, column: 3, scope: !9565)
!9669 = distinct !{!9669, !9670, !9671}
!9670 = !DILocation(line: 887, column: 3, scope: !9559)
!9671 = !DILocation(line: 955, column: 5, scope: !9559)
!9672 = !DILocation(line: 956, column: 1, scope: !9522)
!9673 = distinct !DISubprogram(name: "add_allocno_to_ordered_bucket", scope: !3, file: !3, line: 798, type: !8911, scopeLine: 800, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1886)
!9674 = !DILocalVariable(name: "allocno", arg: 1, scope: !9673, file: !3, line: 798, type: !612)
!9675 = !DILocation(line: 798, column: 46, scope: !9673)
!9676 = !DILocalVariable(name: "bucket_ptr", arg: 2, scope: !9673, file: !3, line: 799, type: !611)
!9677 = !DILocation(line: 799, column: 26, scope: !9673)
!9678 = !DILocalVariable(name: "before", scope: !9673, file: !3, line: 801, type: !612)
!9679 = !DILocation(line: 801, column: 17, scope: !9673)
!9680 = !DILocalVariable(name: "after", scope: !9673, file: !3, line: 801, type: !612)
!9681 = !DILocation(line: 801, column: 25, scope: !9673)
!9682 = !DILocalVariable(name: "cover_class", scope: !9673, file: !3, line: 802, type: !390)
!9683 = !DILocation(line: 802, column: 18, scope: !9673)
!9684 = !DILocation(line: 804, column: 7, scope: !9685)
!9685 = distinct !DILexicalBlock(scope: !9673, file: !3, line: 804, column: 7)
!9686 = !DILocation(line: 804, column: 18, scope: !9685)
!9687 = !DILocation(line: 805, column: 7, scope: !9685)
!9688 = !DILocation(line: 805, column: 25, scope: !9685)
!9689 = !DILocation(line: 805, column: 23, scope: !9685)
!9690 = !DILocation(line: 805, column: 56, scope: !9685)
!9691 = !DILocation(line: 804, column: 7, scope: !9673)
!9692 = !DILocation(line: 807, column: 32, scope: !9693)
!9693 = distinct !DILexicalBlock(scope: !9685, file: !3, line: 806, column: 5)
!9694 = !DILocation(line: 807, column: 7, scope: !9693)
!9695 = !DILocation(line: 807, column: 44, scope: !9693)
!9696 = !DILocation(line: 809, column: 5, scope: !9693)
!9697 = !DILocation(line: 810, column: 18, scope: !9698)
!9698 = distinct !DILexicalBlock(scope: !9673, file: !3, line: 810, column: 3)
!9699 = !DILocation(line: 810, column: 17, scope: !9698)
!9700 = !DILocation(line: 810, column: 15, scope: !9698)
!9701 = !DILocation(line: 810, column: 36, scope: !9698)
!9702 = !DILocation(line: 810, column: 8, scope: !9698)
!9703 = !DILocation(line: 811, column: 8, scope: !9704)
!9704 = distinct !DILexicalBlock(scope: !9698, file: !3, line: 810, column: 3)
!9705 = !DILocation(line: 811, column: 15, scope: !9704)
!9706 = !DILocation(line: 810, column: 3, scope: !9698)
!9707 = !DILocation(line: 813, column: 38, scope: !9708)
!9708 = distinct !DILexicalBlock(scope: !9704, file: !3, line: 813, column: 9)
!9709 = !DILocation(line: 813, column: 48, scope: !9708)
!9710 = !DILocation(line: 813, column: 9, scope: !9708)
!9711 = !DILocation(line: 813, column: 57, scope: !9708)
!9712 = !DILocation(line: 813, column: 9, scope: !9704)
!9713 = !DILocation(line: 814, column: 7, scope: !9708)
!9714 = !DILocation(line: 813, column: 59, scope: !9708)
!9715 = !DILocation(line: 812, column: 16, scope: !9704)
!9716 = !DILocation(line: 812, column: 14, scope: !9704)
!9717 = !DILocation(line: 812, column: 33, scope: !9704)
!9718 = !DILocation(line: 812, column: 31, scope: !9704)
!9719 = !DILocation(line: 810, column: 3, scope: !9704)
!9720 = distinct !{!9720, !9706, !9721}
!9721 = !DILocation(line: 814, column: 7, scope: !9698)
!9722 = !DILocation(line: 815, column: 43, scope: !9673)
!9723 = !DILocation(line: 815, column: 3, scope: !9673)
!9724 = !DILocation(line: 815, column: 41, scope: !9673)
!9725 = !DILocation(line: 816, column: 43, scope: !9673)
!9726 = !DILocation(line: 816, column: 3, scope: !9673)
!9727 = !DILocation(line: 816, column: 41, scope: !9673)
!9728 = !DILocation(line: 817, column: 7, scope: !9729)
!9729 = distinct !DILexicalBlock(scope: !9673, file: !3, line: 817, column: 7)
!9730 = !DILocation(line: 817, column: 13, scope: !9729)
!9731 = !DILocation(line: 817, column: 7, scope: !9673)
!9732 = !DILocation(line: 818, column: 19, scope: !9729)
!9733 = !DILocation(line: 818, column: 6, scope: !9729)
!9734 = !DILocation(line: 818, column: 17, scope: !9729)
!9735 = !DILocation(line: 818, column: 5, scope: !9729)
!9736 = !DILocation(line: 820, column: 43, scope: !9729)
!9737 = !DILocation(line: 820, column: 5, scope: !9729)
!9738 = !DILocation(line: 820, column: 41, scope: !9729)
!9739 = !DILocation(line: 821, column: 7, scope: !9740)
!9740 = distinct !DILexicalBlock(scope: !9673, file: !3, line: 821, column: 7)
!9741 = !DILocation(line: 821, column: 14, scope: !9740)
!9742 = !DILocation(line: 821, column: 7, scope: !9673)
!9743 = !DILocation(line: 822, column: 44, scope: !9740)
!9744 = !DILocation(line: 822, column: 5, scope: !9740)
!9745 = !DILocation(line: 822, column: 42, scope: !9740)
!9746 = !DILocation(line: 823, column: 1, scope: !9673)
