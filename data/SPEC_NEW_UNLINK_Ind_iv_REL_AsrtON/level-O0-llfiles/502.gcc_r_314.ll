; ModuleID = 'tree-predcom.c'
source_filename = "tree-predcom.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.dref_d = type { %struct.data_reference*, %union.gimple_statement_d*, %union.tree_node*, i32, %struct.double_int, i32, i8 }
%struct.data_reference = type { %union.gimple_statement_d*, %union.tree_node*, i8*, i8, %struct.innermost_loop_behavior, %struct.indices, %struct.dr_alias, %struct.access_matrix* }
%struct.innermost_loop_behavior = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.indices = type { %union.tree_node*, %struct.VEC_tree_heap* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.dr_alias = type { %struct.ptr_info_def*, %struct.bitmap_head_def* }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.access_matrix = type { %struct.VEC_loop_p_heap*, i32, %struct.VEC_tree_heap*, %struct.VEC_lambda_vector_gc* }
%struct.VEC_loop_p_heap = type { %struct.VEC_loop_p_base }
%struct.VEC_lambda_vector_gc = type { %struct.VEC_lambda_vector_base }
%struct.VEC_lambda_vector_base = type { i32, i32, [1 x i32*] }
%struct.chain = type { i32, i32, %union.tree_node*, %struct.chain*, %struct.chain*, %struct.VEC_dref_heap*, i32, %struct.VEC_tree_heap*, %struct.VEC_tree_heap*, i8 }
%struct.VEC_dref_heap = type { %struct.VEC_dref_base }
%struct.VEC_dref_base = type { i32, i32, [1 x %struct.dref_d*] }
%struct.VEC_chain_p_heap = type { %struct.VEC_chain_p_base }
%struct.VEC_chain_p_base = type { i32, i32, [1 x %struct.chain*] }
%struct.component = type { %struct.VEC_dref_heap*, i32, %struct.component* }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.VEC_data_reference_p_heap = type { %struct.VEC_data_reference_p_base }
%struct.VEC_data_reference_p_base = type { i32, i32, [1 x %struct.data_reference*] }
%struct.VEC_ddr_p_heap = type { %struct.VEC_ddr_p_base }
%struct.VEC_ddr_p_base = type { i32, i32, [1 x %struct.data_dependence_relation*] }
%struct.data_dependence_relation = type { %struct.data_reference*, %struct.data_reference*, %union.tree_node*, %struct.VEC_subscript_p_heap*, %struct.VEC_loop_p_heap*, %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap*, i32, i8, i8, i8 }
%struct.VEC_subscript_p_heap = type { %struct.VEC_subscript_p_base }
%struct.VEC_subscript_p_base = type { i32, i32, [1 x %struct.subscript*] }
%struct.subscript = type { %struct.conflict_function*, %struct.conflict_function*, %union.tree_node*, %union.tree_node* }
%struct.conflict_function = type { i32, [2 x %struct.VEC_tree_heap*] }
%struct.VEC_lambda_vector_heap = type { %struct.VEC_lambda_vector_base }
%struct.tree_niter_desc = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.double_int, %struct.affine_iv, %union.tree_node*, i32 }
%struct.affine_iv = type { %union.tree_node*, %union.tree_node*, i8 }
%struct.epcc_data = type { %struct.VEC_chain_p_heap*, %struct.bitmap_head_def* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.affine_tree_combination = type { %union.tree_node*, %struct.double_int, i32, [8 x %struct.aff_comb_elt], %union.tree_node* }
%struct.aff_comb_elt = type { %union.tree_node*, %struct.double_int }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }

@.str = private unnamed_addr constant [5 x i8] c"    \00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c" (id %u%s)\0A\00", align 1
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [8 x i8] c", write\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"      offset \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"      distance %u\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"    looparound ref\0A\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"    combination ref\0A\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c"      in statement \00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"Load motion\00", align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"Loads-only\00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"Store-loads\00", align 1
@.str.13 = private unnamed_addr constant [12 x i8] c"Combination\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"tree-predcom.c\00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"%s chain %p%s\0A\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c" (combined)\00", align 1
@.str.18 = private unnamed_addr constant [21 x i8] c"  max distance %u%s\0A\00", align 1
@.str.19 = private unnamed_addr constant [18 x i8] c", may reuse first\00", align 1
@.str.20 = private unnamed_addr constant [29 x i8] c"  equal to %p %s %p in type \00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"  vars\00", align 1
@.str.22 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.23 = private unnamed_addr constant [8 x i8] c"  inits\00", align 1
@.str.24 = private unnamed_addr constant [15 x i8] c"  references:\0A\00", align 1
@.str.25 = private unnamed_addr constant [14 x i8] c"Component%s:\0A\00", align 1
@.str.26 = private unnamed_addr constant [13 x i8] c" (invariant)\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.27 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.28 = private unnamed_addr constant [20 x i8] c"Processing loop %d\0A\00", align 1
@.str.29 = private unnamed_addr constant [17 x i8] c"Initial state:\0A\0A\00", align 1
@looparound_phis = internal global %struct.bitmap_head_def* null, align 8, !dbg !0
@.str.30 = private unnamed_addr constant [49 x i8] c"Predictive commoning failed: no suitable chains\0A\00", align 1
@.str.31 = private unnamed_addr constant [20 x i8] c"Before commoning:\0A\0A\00", align 1
@.str.32 = private unnamed_addr constant [21 x i8] c"Unrolling %u times.\0A\00", align 1
@.str.33 = private unnamed_addr constant [51 x i8] c"Executing predictive commoning without unrolling.\0A\00", align 1
@name_expansions = internal global %struct.pointer_map_t* null, align 8, !dbg !2227
@chrec_known = external dso_local global %union.tree_node*, align 8
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@target_avail_regs = external dso_local global i32, align 4
@tree_code_type = external dso_local constant [0 x i32], align 4
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.34 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@flag_unsafe_math_optimizations = external dso_local global i32, align 4
@.str.35 = private unnamed_addr constant [12 x i8] c"predreastmp\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_dref(%struct._IO_FILE* %file, %struct.dref_d* %ref) #0 !dbg !2233 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %ref.addr = alloca %struct.dref_d*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2288, metadata !DIExpression()), !dbg !2289
  store %struct.dref_d* %ref, %struct.dref_d** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %ref.addr, metadata !2290, metadata !DIExpression()), !dbg !2291
  %0 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !2292
  %ref1 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %0, i32 0, i32 0, !dbg !2294
  %1 = load %struct.data_reference*, %struct.data_reference** %ref1, align 8, !dbg !2294
  %tobool = icmp ne %struct.data_reference* %1, null, !dbg !2292
  br i1 %tobool, label %if.then, label %if.else, !dbg !2295

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2296
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0)), !dbg !2298
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2299
  %4 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !2300
  %ref2 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %4, i32 0, i32 0, !dbg !2300
  %5 = load %struct.data_reference*, %struct.data_reference** %ref2, align 8, !dbg !2300
  %ref3 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %5, i32 0, i32 1, !dbg !2300
  %6 = load %union.tree_node*, %union.tree_node** %ref3, align 8, !dbg !2300
  call void @print_generic_expr(%struct._IO_FILE* %3, %union.tree_node* %6, i32 2), !dbg !2301
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2302
  %8 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !2303
  %pos = getelementptr inbounds %struct.dref_d, %struct.dref_d* %8, i32 0, i32 5, !dbg !2304
  %9 = load i32, i32* %pos, align 8, !dbg !2304
  %10 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !2305
  %ref4 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %10, i32 0, i32 0, !dbg !2305
  %11 = load %struct.data_reference*, %struct.data_reference** %ref4, align 8, !dbg !2305
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %11, i32 0, i32 3, !dbg !2305
  %12 = load i8, i8* %is_read, align 8, !dbg !2305
  %conv = zext i8 %12 to i32, !dbg !2305
  %tobool5 = icmp ne i32 %conv, 0, !dbg !2305
  %13 = zext i1 %tobool5 to i64, !dbg !2305
  %cond = select i1 %tobool5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), !dbg !2305
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32 %9, i8* %cond), !dbg !2306
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2307
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0)), !dbg !2308
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2309
  %16 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !2310
  %offset = getelementptr inbounds %struct.dref_d, %struct.dref_d* %16, i32 0, i32 4, !dbg !2311
  %17 = bitcast %struct.double_int* %offset to { i64, i64 }*, !dbg !2312
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 0, !dbg !2312
  %19 = load i64, i64* %18, align 8, !dbg !2312
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 1, !dbg !2312
  %21 = load i64, i64* %20, align 8, !dbg !2312
  call void @dump_double_int(%struct._IO_FILE* %15, i64 %19, i64 %21, i8 zeroext 0), !dbg !2312
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2313
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !2314
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2315
  %24 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !2316
  %distance = getelementptr inbounds %struct.dref_d, %struct.dref_d* %24, i32 0, i32 3, !dbg !2317
  %25 = load i32, i32* %distance, align 8, !dbg !2317
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 %25), !dbg !2318
  br label %if.end21, !dbg !2319

if.else:                                          ; preds = %entry
  %26 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !2320
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %26, i32 0, i32 1, !dbg !2323
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2323
  %call10 = call i32 @gimple_code(%union.gimple_statement_d* %27), !dbg !2324
  %cmp = icmp eq i32 %call10, 16, !dbg !2325
  br i1 %cmp, label %if.then12, label %if.else14, !dbg !2326

if.then12:                                        ; preds = %if.else
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2327
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0)), !dbg !2328
  br label %if.end, !dbg !2328

if.else14:                                        ; preds = %if.else
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2329
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0)), !dbg !2330
  br label %if.end

if.end:                                           ; preds = %if.else14, %if.then12
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2331
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i64 0, i64 0)), !dbg !2332
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2333
  %32 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !2334
  %stmt17 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %32, i32 0, i32 1, !dbg !2335
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt17, align 8, !dbg !2335
  call void @print_gimple_stmt(%struct._IO_FILE* %31, %union.gimple_statement_d* %33, i32 0, i32 2), !dbg !2336
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2337
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !2338
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2339
  %36 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !2340
  %distance19 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %36, i32 0, i32 3, !dbg !2341
  %37 = load i32, i32* %distance19, align 8, !dbg !2341
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i32 %37), !dbg !2342
  br label %if.end21

if.end21:                                         ; preds = %if.end, %if.then
  ret void, !dbg !2343
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local void @dump_double_int(%struct._IO_FILE*, i64, i64, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !2344 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !2348, metadata !DIExpression()), !dbg !2349
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !2350
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !2351
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !2352
  %bf.load = load i32, i32* %1, align 8, !dbg !2352
  %bf.clear = and i32 %bf.load, 255, !dbg !2352
  ret i32 %bf.clear, !dbg !2353
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_chain(%struct._IO_FILE* %file, %struct.chain* %chain) #0 !dbg !2354 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %chain.addr = alloca %struct.chain*, align 8
  %a = alloca %struct.dref_d*, align 8
  %chain_type = alloca i8*, align 8
  %i = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2357, metadata !DIExpression()), !dbg !2358
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !2359, metadata !DIExpression()), !dbg !2360
  call void @llvm.dbg.declare(metadata %struct.dref_d** %a, metadata !2361, metadata !DIExpression()), !dbg !2362
  call void @llvm.dbg.declare(metadata i8** %chain_type, metadata !2363, metadata !DIExpression()), !dbg !2364
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2365, metadata !DIExpression()), !dbg !2366
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !2367, metadata !DIExpression()), !dbg !2368
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2369
  %type = getelementptr inbounds %struct.chain, %struct.chain* %0, i32 0, i32 0, !dbg !2370
  %1 = load i32, i32* %type, align 8, !dbg !2370
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
  ], !dbg !2371

sw.bb:                                            ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0), i8** %chain_type, align 8, !dbg !2372
  br label %sw.epilog, !dbg !2374

sw.bb1:                                           ; preds = %entry
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i8** %chain_type, align 8, !dbg !2375
  br label %sw.epilog, !dbg !2376

sw.bb2:                                           ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i64 0, i64 0), i8** %chain_type, align 8, !dbg !2377
  br label %sw.epilog, !dbg !2378

sw.bb3:                                           ; preds = %entry
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13, i64 0, i64 0), i8** %chain_type, align 8, !dbg !2379
  br label %sw.epilog, !dbg !2380

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 401, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !2381
  br label %sw.epilog, !dbg !2382

sw.epilog:                                        ; preds = %sw.default, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2383
  %3 = load i8*, i8** %chain_type, align 8, !dbg !2384
  %4 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2385
  %5 = bitcast %struct.chain* %4 to i8*, !dbg !2386
  %6 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2387
  %combined = getelementptr inbounds %struct.chain, %struct.chain* %6, i32 0, i32 9, !dbg !2388
  %bf.load = load i8, i8* %combined, align 8, !dbg !2388
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !2388
  %bf.clear = and i8 %bf.lshr, 1, !dbg !2388
  %bf.cast = zext i8 %bf.clear to i32, !dbg !2388
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !2387
  %7 = zext i1 %tobool to i64, !dbg !2387
  %cond = select i1 %tobool, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), !dbg !2387
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i64 0, i64 0), i8* %3, i8* %5, i8* %cond), !dbg !2389
  %8 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2390
  %type4 = getelementptr inbounds %struct.chain, %struct.chain* %8, i32 0, i32 0, !dbg !2392
  %9 = load i32, i32* %type4, align 8, !dbg !2392
  %cmp = icmp ne i32 %9, 0, !dbg !2393
  br i1 %cmp, label %if.then, label %if.end, !dbg !2394

if.then:                                          ; preds = %sw.epilog
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2395
  %11 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2396
  %length = getelementptr inbounds %struct.chain, %struct.chain* %11, i32 0, i32 6, !dbg !2397
  %12 = load i32, i32* %length, align 8, !dbg !2397
  %13 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2398
  %has_max_use_after = getelementptr inbounds %struct.chain, %struct.chain* %13, i32 0, i32 9, !dbg !2399
  %bf.load5 = load i8, i8* %has_max_use_after, align 8, !dbg !2399
  %bf.clear6 = and i8 %bf.load5, 1, !dbg !2399
  %bf.cast7 = zext i8 %bf.clear6 to i32, !dbg !2399
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !2398
  %14 = zext i1 %tobool8 to i64, !dbg !2398
  %cond9 = select i1 %tobool8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.19, i64 0, i64 0), !dbg !2398
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i64 0, i64 0), i32 %12, i8* %cond9), !dbg !2400
  br label %if.end, !dbg !2400

if.end:                                           ; preds = %if.then, %sw.epilog
  %15 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2401
  %type11 = getelementptr inbounds %struct.chain, %struct.chain* %15, i32 0, i32 0, !dbg !2403
  %16 = load i32, i32* %type11, align 8, !dbg !2403
  %cmp12 = icmp eq i32 %16, 3, !dbg !2404
  br i1 %cmp12, label %if.then13, label %if.end17, !dbg !2405

if.then13:                                        ; preds = %if.end
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2406
  %18 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2408
  %ch1 = getelementptr inbounds %struct.chain, %struct.chain* %18, i32 0, i32 3, !dbg !2409
  %19 = load %struct.chain*, %struct.chain** %ch1, align 8, !dbg !2409
  %20 = bitcast %struct.chain* %19 to i8*, !dbg !2410
  %21 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2411
  %op = getelementptr inbounds %struct.chain, %struct.chain* %21, i32 0, i32 1, !dbg !2412
  %22 = load i32, i32* %op, align 4, !dbg !2412
  %call14 = call i8* @op_symbol_code(i32 %22), !dbg !2413
  %23 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2414
  %ch2 = getelementptr inbounds %struct.chain, %struct.chain* %23, i32 0, i32 4, !dbg !2415
  %24 = load %struct.chain*, %struct.chain** %ch2, align 8, !dbg !2415
  %25 = bitcast %struct.chain* %24 to i8*, !dbg !2416
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.20, i64 0, i64 0), i8* %20, i8* %call14, i8* %25), !dbg !2417
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2418
  %27 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2419
  %rslt_type = getelementptr inbounds %struct.chain, %struct.chain* %27, i32 0, i32 2, !dbg !2420
  %28 = load %union.tree_node*, %union.tree_node** %rslt_type, align 8, !dbg !2420
  call void @print_generic_expr(%struct._IO_FILE* %26, %union.tree_node* %28, i32 2), !dbg !2421
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2422
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !2423
  br label %if.end17, !dbg !2424

if.end17:                                         ; preds = %if.then13, %if.end
  %30 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2425
  %vars = getelementptr inbounds %struct.chain, %struct.chain* %30, i32 0, i32 7, !dbg !2427
  %31 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars, align 8, !dbg !2427
  %tobool18 = icmp ne %struct.VEC_tree_heap* %31, null, !dbg !2425
  br i1 %tobool18, label %if.then19, label %if.end29, !dbg !2428

if.then19:                                        ; preds = %if.end17
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2429
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i64 0, i64 0)), !dbg !2431
  store i32 0, i32* %i, align 4, !dbg !2432
  br label %for.cond, !dbg !2434

for.cond:                                         ; preds = %for.inc, %if.then19
  %33 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2435
  %vars21 = getelementptr inbounds %struct.chain, %struct.chain* %33, i32 0, i32 7, !dbg !2435
  %34 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars21, align 8, !dbg !2435
  %tobool22 = icmp ne %struct.VEC_tree_heap* %34, null, !dbg !2435
  br i1 %tobool22, label %cond.true, label %cond.false, !dbg !2435

cond.true:                                        ; preds = %for.cond
  %35 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2435
  %vars23 = getelementptr inbounds %struct.chain, %struct.chain* %35, i32 0, i32 7, !dbg !2435
  %36 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars23, align 8, !dbg !2435
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %36, i32 0, i32 0, !dbg !2435
  br label %cond.end, !dbg !2435

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2435

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond24 = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2435
  %37 = load i32, i32* %i, align 4, !dbg !2435
  %call25 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond24, i32 %37, %union.tree_node** %var), !dbg !2435
  %tobool26 = icmp ne i32 %call25, 0, !dbg !2437
  br i1 %tobool26, label %for.body, label %for.end, !dbg !2437

for.body:                                         ; preds = %cond.end
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2438
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i64 0, i64 0)), !dbg !2440
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2441
  %40 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !2442
  call void @print_generic_expr(%struct._IO_FILE* %39, %union.tree_node* %40, i32 2), !dbg !2443
  br label %for.inc, !dbg !2444

for.inc:                                          ; preds = %for.body
  %41 = load i32, i32* %i, align 4, !dbg !2445
  %inc = add i32 %41, 1, !dbg !2445
  store i32 %inc, i32* %i, align 4, !dbg !2445
  br label %for.cond, !dbg !2446, !llvm.loop !2447

for.end:                                          ; preds = %cond.end
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2449
  %call28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !2450
  br label %if.end29, !dbg !2451

if.end29:                                         ; preds = %for.end, %if.end17
  %43 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2452
  %inits = getelementptr inbounds %struct.chain, %struct.chain* %43, i32 0, i32 8, !dbg !2454
  %44 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits, align 8, !dbg !2454
  %tobool30 = icmp ne %struct.VEC_tree_heap* %44, null, !dbg !2452
  br i1 %tobool30, label %if.then31, label %if.end50, !dbg !2455

if.then31:                                        ; preds = %if.end29
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2456
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.23, i64 0, i64 0)), !dbg !2458
  store i32 0, i32* %i, align 4, !dbg !2459
  br label %for.cond33, !dbg !2461

for.cond33:                                       ; preds = %for.inc46, %if.then31
  %46 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2462
  %inits34 = getelementptr inbounds %struct.chain, %struct.chain* %46, i32 0, i32 8, !dbg !2462
  %47 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits34, align 8, !dbg !2462
  %tobool35 = icmp ne %struct.VEC_tree_heap* %47, null, !dbg !2462
  br i1 %tobool35, label %cond.true36, label %cond.false39, !dbg !2462

cond.true36:                                      ; preds = %for.cond33
  %48 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2462
  %inits37 = getelementptr inbounds %struct.chain, %struct.chain* %48, i32 0, i32 8, !dbg !2462
  %49 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits37, align 8, !dbg !2462
  %base38 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %49, i32 0, i32 0, !dbg !2462
  br label %cond.end40, !dbg !2462

cond.false39:                                     ; preds = %for.cond33
  br label %cond.end40, !dbg !2462

cond.end40:                                       ; preds = %cond.false39, %cond.true36
  %cond41 = phi %struct.VEC_tree_base* [ %base38, %cond.true36 ], [ null, %cond.false39 ], !dbg !2462
  %50 = load i32, i32* %i, align 4, !dbg !2462
  %call42 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond41, i32 %50, %union.tree_node** %var), !dbg !2462
  %tobool43 = icmp ne i32 %call42, 0, !dbg !2464
  br i1 %tobool43, label %for.body44, label %for.end48, !dbg !2464

for.body44:                                       ; preds = %cond.end40
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2465
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.22, i64 0, i64 0)), !dbg !2467
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2468
  %53 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !2469
  call void @print_generic_expr(%struct._IO_FILE* %52, %union.tree_node* %53, i32 2), !dbg !2470
  br label %for.inc46, !dbg !2471

for.inc46:                                        ; preds = %for.body44
  %54 = load i32, i32* %i, align 4, !dbg !2472
  %inc47 = add i32 %54, 1, !dbg !2472
  store i32 %inc47, i32* %i, align 4, !dbg !2472
  br label %for.cond33, !dbg !2473, !llvm.loop !2474

for.end48:                                        ; preds = %cond.end40
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2476
  %call49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !2477
  br label %if.end50, !dbg !2478

if.end50:                                         ; preds = %for.end48, %if.end29
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2479
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.24, i64 0, i64 0)), !dbg !2480
  store i32 0, i32* %i, align 4, !dbg !2481
  br label %for.cond52, !dbg !2483

for.cond52:                                       ; preds = %for.inc63, %if.end50
  %57 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2484
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %57, i32 0, i32 5, !dbg !2484
  %58 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !2484
  %tobool53 = icmp ne %struct.VEC_dref_heap* %58, null, !dbg !2484
  br i1 %tobool53, label %cond.true54, label %cond.false57, !dbg !2484

cond.true54:                                      ; preds = %for.cond52
  %59 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !2484
  %refs55 = getelementptr inbounds %struct.chain, %struct.chain* %59, i32 0, i32 5, !dbg !2484
  %60 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs55, align 8, !dbg !2484
  %base56 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %60, i32 0, i32 0, !dbg !2484
  br label %cond.end58, !dbg !2484

cond.false57:                                     ; preds = %for.cond52
  br label %cond.end58, !dbg !2484

cond.end58:                                       ; preds = %cond.false57, %cond.true54
  %cond59 = phi %struct.VEC_dref_base* [ %base56, %cond.true54 ], [ null, %cond.false57 ], !dbg !2484
  %61 = load i32, i32* %i, align 4, !dbg !2484
  %call60 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond59, i32 %61, %struct.dref_d** %a), !dbg !2484
  %tobool61 = icmp ne i32 %call60, 0, !dbg !2486
  br i1 %tobool61, label %for.body62, label %for.end65, !dbg !2486

for.body62:                                       ; preds = %cond.end58
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2487
  %63 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !2488
  call void @dump_dref(%struct._IO_FILE* %62, %struct.dref_d* %63), !dbg !2489
  br label %for.inc63, !dbg !2489

for.inc63:                                        ; preds = %for.body62
  %64 = load i32, i32* %i, align 4, !dbg !2490
  %inc64 = add i32 %64, 1, !dbg !2490
  store i32 %inc64, i32* %i, align 4, !dbg !2490
  br label %for.cond52, !dbg !2491, !llvm.loop !2492

for.end65:                                        ; preds = %cond.end58
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2494
  %call66 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !2495
  ret void, !dbg !2496
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local i8* @op_symbol_code(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !2497 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !2502, metadata !DIExpression()), !dbg !2503
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2504, metadata !DIExpression()), !dbg !2503
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !2505, metadata !DIExpression()), !dbg !2503
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2506
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !2506
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2506

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2506
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2506
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !2506
  %3 = load i32, i32* %num, align 8, !dbg !2506
  %cmp = icmp ult i32 %1, %3, !dbg !2506
  br i1 %cmp, label %if.then, label %if.else, !dbg !2503

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !2508
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !2508
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2508
  %idxprom = zext i32 %5 to i64, !dbg !2508
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !2508
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2508
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !2508
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !2508
  store i32 1, i32* %retval, align 4, !dbg !2508
  br label %return, !dbg !2508

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !2510
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !2510
  store i32 0, i32* %retval, align 4, !dbg !2510
  br label %return, !dbg !2510

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2503
  ret i32 %9, !dbg !2503
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %vec_, i32 %ix_, %struct.dref_d** %ptr) #0 !dbg !2512 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_dref_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.dref_d**, align 8
  store %struct.VEC_dref_base* %vec_, %struct.VEC_dref_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_dref_base** %vec_.addr, metadata !2518, metadata !DIExpression()), !dbg !2519
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2520, metadata !DIExpression()), !dbg !2519
  store %struct.dref_d** %ptr, %struct.dref_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d*** %ptr.addr, metadata !2521, metadata !DIExpression()), !dbg !2519
  %0 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !2522
  %tobool = icmp ne %struct.VEC_dref_base* %0, null, !dbg !2522
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2522

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2522
  %2 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !2522
  %num = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %2, i32 0, i32 0, !dbg !2522
  %3 = load i32, i32* %num, align 8, !dbg !2522
  %cmp = icmp ult i32 %1, %3, !dbg !2522
  br i1 %cmp, label %if.then, label %if.else, !dbg !2519

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !2524
  %vec = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %4, i32 0, i32 2, !dbg !2524
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2524
  %idxprom = zext i32 %5 to i64, !dbg !2524
  %arrayidx = getelementptr inbounds [1 x %struct.dref_d*], [1 x %struct.dref_d*]* %vec, i64 0, i64 %idxprom, !dbg !2524
  %6 = load %struct.dref_d*, %struct.dref_d** %arrayidx, align 8, !dbg !2524
  %7 = load %struct.dref_d**, %struct.dref_d*** %ptr.addr, align 8, !dbg !2524
  store %struct.dref_d* %6, %struct.dref_d** %7, align 8, !dbg !2524
  store i32 1, i32* %retval, align 4, !dbg !2524
  br label %return, !dbg !2524

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.dref_d**, %struct.dref_d*** %ptr.addr, align 8, !dbg !2526
  store %struct.dref_d* null, %struct.dref_d** %8, align 8, !dbg !2526
  store i32 0, i32* %retval, align 4, !dbg !2526
  br label %return, !dbg !2526

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2519
  ret i32 %9, !dbg !2519
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_chains(%struct._IO_FILE* %file, %struct.VEC_chain_p_heap* %chains) #0 !dbg !2528 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %chains.addr = alloca %struct.VEC_chain_p_heap*, align 8
  %chain = alloca %struct.chain*, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2531, metadata !DIExpression()), !dbg !2532
  store %struct.VEC_chain_p_heap* %chains, %struct.VEC_chain_p_heap** %chains.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap** %chains.addr, metadata !2533, metadata !DIExpression()), !dbg !2534
  call void @llvm.dbg.declare(metadata %struct.chain** %chain, metadata !2535, metadata !DIExpression()), !dbg !2536
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2537, metadata !DIExpression()), !dbg !2538
  store i32 0, i32* %i, align 4, !dbg !2539
  br label %for.cond, !dbg !2541

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !2542
  %tobool = icmp ne %struct.VEC_chain_p_heap* %0, null, !dbg !2542
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2542

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !2542
  %base = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %1, i32 0, i32 0, !dbg !2542
  br label %cond.end, !dbg !2542

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2542

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_chain_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2542
  %2 = load i32, i32* %i, align 4, !dbg !2542
  %call = call i32 @VEC_chain_p_base_iterate(%struct.VEC_chain_p_base* %cond, i32 %2, %struct.chain** %chain), !dbg !2542
  %tobool1 = icmp ne i32 %call, 0, !dbg !2544
  br i1 %tobool1, label %for.body, label %for.end, !dbg !2544

for.body:                                         ; preds = %cond.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2545
  %4 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !2546
  call void @dump_chain(%struct._IO_FILE* %3, %struct.chain* %4), !dbg !2547
  br label %for.inc, !dbg !2547

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !2548
  %inc = add i32 %5, 1, !dbg !2548
  store i32 %inc, i32* %i, align 4, !dbg !2548
  br label %for.cond, !dbg !2549, !llvm.loop !2550

for.end:                                          ; preds = %cond.end
  ret void, !dbg !2552
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_chain_p_base_iterate(%struct.VEC_chain_p_base* %vec_, i32 %ix_, %struct.chain** %ptr) #0 !dbg !2553 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_chain_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.chain**, align 8
  store %struct.VEC_chain_p_base* %vec_, %struct.VEC_chain_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_base** %vec_.addr, metadata !2559, metadata !DIExpression()), !dbg !2560
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2561, metadata !DIExpression()), !dbg !2560
  store %struct.chain** %ptr, %struct.chain*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain*** %ptr.addr, metadata !2562, metadata !DIExpression()), !dbg !2560
  %0 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !2563
  %tobool = icmp ne %struct.VEC_chain_p_base* %0, null, !dbg !2563
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2563

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2563
  %2 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !2563
  %num = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %2, i32 0, i32 0, !dbg !2563
  %3 = load i32, i32* %num, align 8, !dbg !2563
  %cmp = icmp ult i32 %1, %3, !dbg !2563
  br i1 %cmp, label %if.then, label %if.else, !dbg !2560

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !2565
  %vec = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %4, i32 0, i32 2, !dbg !2565
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !2565
  %idxprom = zext i32 %5 to i64, !dbg !2565
  %arrayidx = getelementptr inbounds [1 x %struct.chain*], [1 x %struct.chain*]* %vec, i64 0, i64 %idxprom, !dbg !2565
  %6 = load %struct.chain*, %struct.chain** %arrayidx, align 8, !dbg !2565
  %7 = load %struct.chain**, %struct.chain*** %ptr.addr, align 8, !dbg !2565
  store %struct.chain* %6, %struct.chain** %7, align 8, !dbg !2565
  store i32 1, i32* %retval, align 4, !dbg !2565
  br label %return, !dbg !2565

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.chain**, %struct.chain*** %ptr.addr, align 8, !dbg !2567
  store %struct.chain* null, %struct.chain** %8, align 8, !dbg !2567
  store i32 0, i32* %retval, align 4, !dbg !2567
  br label %return, !dbg !2567

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !2560
  ret i32 %9, !dbg !2560
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_component(%struct._IO_FILE* %file, %struct.component* %comp) #0 !dbg !2569 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %comp.addr = alloca %struct.component*, align 8
  %a = alloca %struct.dref_d*, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2572, metadata !DIExpression()), !dbg !2573
  store %struct.component* %comp, %struct.component** %comp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.component** %comp.addr, metadata !2574, metadata !DIExpression()), !dbg !2575
  call void @llvm.dbg.declare(metadata %struct.dref_d** %a, metadata !2576, metadata !DIExpression()), !dbg !2577
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2578, metadata !DIExpression()), !dbg !2579
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2580
  %1 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !2581
  %comp_step = getelementptr inbounds %struct.component, %struct.component* %1, i32 0, i32 1, !dbg !2582
  %2 = load i32, i32* %comp_step, align 8, !dbg !2582
  %cmp = icmp eq i32 %2, 0, !dbg !2583
  %3 = zext i1 %cmp to i64, !dbg !2581
  %cond = select i1 %cmp, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), !dbg !2581
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.25, i64 0, i64 0), i8* %cond), !dbg !2584
  store i32 0, i32* %i, align 4, !dbg !2585
  br label %for.cond, !dbg !2587

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !2588
  %refs = getelementptr inbounds %struct.component, %struct.component* %4, i32 0, i32 0, !dbg !2588
  %5 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !2588
  %tobool = icmp ne %struct.VEC_dref_heap* %5, null, !dbg !2588
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2588

cond.true:                                        ; preds = %for.cond
  %6 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !2588
  %refs1 = getelementptr inbounds %struct.component, %struct.component* %6, i32 0, i32 0, !dbg !2588
  %7 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs1, align 8, !dbg !2588
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %7, i32 0, i32 0, !dbg !2588
  br label %cond.end, !dbg !2588

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2588

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond2 = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2588
  %8 = load i32, i32* %i, align 4, !dbg !2588
  %call3 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond2, i32 %8, %struct.dref_d** %a), !dbg !2588
  %tobool4 = icmp ne i32 %call3, 0, !dbg !2590
  br i1 %tobool4, label %for.body, label %for.end, !dbg !2590

for.body:                                         ; preds = %cond.end
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2591
  %10 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !2592
  call void @dump_dref(%struct._IO_FILE* %9, %struct.dref_d* %10), !dbg !2593
  br label %for.inc, !dbg !2593

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !2594
  %inc = add i32 %11, 1, !dbg !2594
  store i32 %inc, i32* %i, align 4, !dbg !2594
  br label %for.cond, !dbg !2595, !llvm.loop !2596

for.end:                                          ; preds = %cond.end
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2598
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0)), !dbg !2599
  ret void, !dbg !2600
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_components(%struct._IO_FILE* %file, %struct.component* %comps) #0 !dbg !2601 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %comps.addr = alloca %struct.component*, align 8
  %comp = alloca %struct.component*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !2602, metadata !DIExpression()), !dbg !2603
  store %struct.component* %comps, %struct.component** %comps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.component** %comps.addr, metadata !2604, metadata !DIExpression()), !dbg !2605
  call void @llvm.dbg.declare(metadata %struct.component** %comp, metadata !2606, metadata !DIExpression()), !dbg !2607
  %0 = load %struct.component*, %struct.component** %comps.addr, align 8, !dbg !2608
  store %struct.component* %0, %struct.component** %comp, align 8, !dbg !2610
  br label %for.cond, !dbg !2611

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.component*, %struct.component** %comp, align 8, !dbg !2612
  %tobool = icmp ne %struct.component* %1, null, !dbg !2614
  br i1 %tobool, label %for.body, label %for.end, !dbg !2614

for.body:                                         ; preds = %for.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !2615
  %3 = load %struct.component*, %struct.component** %comp, align 8, !dbg !2616
  call void @dump_component(%struct._IO_FILE* %2, %struct.component* %3), !dbg !2617
  br label %for.inc, !dbg !2617

for.inc:                                          ; preds = %for.body
  %4 = load %struct.component*, %struct.component** %comp, align 8, !dbg !2618
  %next = getelementptr inbounds %struct.component, %struct.component* %4, i32 0, i32 2, !dbg !2619
  %5 = load %struct.component*, %struct.component** %next, align 8, !dbg !2619
  store %struct.component* %5, %struct.component** %comp, align 8, !dbg !2620
  br label %for.cond, !dbg !2621, !llvm.loop !2622

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2624
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %stmt) #0 !dbg !2625 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %var = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !2628, metadata !DIExpression()), !dbg !2629
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !2630, metadata !DIExpression()), !dbg !2631
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2632
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !2634
  %cmp = icmp eq i32 %call, 16, !dbg !2635
  br i1 %cmp, label %if.then, label %if.end9, !dbg !2636

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2637
  %call1 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %1), !dbg !2637
  %call2 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call1), !dbg !2637
  store %union.tree_node* %call2, %union.tree_node** %var, align 8, !dbg !2639
  %2 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !2640
  %call3 = call zeroext i8 @is_gimple_reg(%union.tree_node* %2), !dbg !2642
  %tobool = icmp ne i8 %call3, 0, !dbg !2642
  br i1 %tobool, label %if.then4, label %if.end, !dbg !2643

if.then4:                                         ; preds = %if.then
  br label %if.end14, !dbg !2644

if.end:                                           ; preds = %if.then
  %3 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !2645
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !2645
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !2645
  %bf.load = load i64, i64* %4, align 8, !dbg !2645
  %bf.clear = and i64 %bf.load, 65535, !dbg !2645
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2645
  %cmp5 = icmp eq i32 %bf.cast, 141, !dbg !2647
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !2648

if.then6:                                         ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !2649
  %ssa_name = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !2649
  %var7 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !2649
  %6 = load %union.tree_node*, %union.tree_node** %var7, align 8, !dbg !2649
  store %union.tree_node* %6, %union.tree_node** %var, align 8, !dbg !2650
  br label %if.end8, !dbg !2651

if.end8:                                          ; preds = %if.then6, %if.end
  %7 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !2652
  call void @mark_sym_for_renaming(%union.tree_node* %7), !dbg !2653
  br label %if.end14, !dbg !2654

if.end9:                                          ; preds = %entry
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2655
  call void @update_stmt(%union.gimple_statement_d* %8), !dbg !2656
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2657
  %call10 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %9), !dbg !2659
  %tobool11 = icmp ne %union.tree_node* %call10, null, !dbg !2659
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !2660

if.then12:                                        ; preds = %if.end9
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2661
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !2661
  %call13 = call %union.tree_node* @gimple_vop(%struct.function* %add.ptr), !dbg !2662
  call void @mark_sym_for_renaming(%union.tree_node* %call13), !dbg !2663
  br label %if.end14, !dbg !2663

if.end14:                                         ; preds = %if.then4, %if.end8, %if.then12, %if.end9
  ret void, !dbg !2664
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !2665 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !2670, metadata !DIExpression()), !dbg !2671
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !2672
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !2673
  ret %union.tree_node* %1, !dbg !2674
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !2675 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2678, metadata !DIExpression()), !dbg !2679
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2680
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !2681
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !2682
  ret %union.tree_node** %result, !dbg !2683
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !2684 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !2685, metadata !DIExpression()), !dbg !2686
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2687
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !2689
  %tobool = icmp ne i8 %call, 0, !dbg !2689
  br i1 %tobool, label %if.then, label %if.end, !dbg !2690

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2691
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !2693
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !2694
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !2695
  br label %if.end, !dbg !2696

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !2697
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !2698 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !2701, metadata !DIExpression()), !dbg !2702
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !2703
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !2705
  %tobool = icmp ne i8 %call, 0, !dbg !2705
  br i1 %tobool, label %if.end, label %if.then, !dbg !2706

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !2707
  br label %return, !dbg !2707

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !2708
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !2709
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !2710
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !2710
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !2711
  br label %return, !dbg !2711

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !2712
  ret %union.tree_node* %3, !dbg !2712
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vop(%struct.function* %fun) #0 !dbg !2713 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !2718, metadata !DIExpression()), !dbg !2719
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !2720
  %tobool = icmp ne %struct.function* %0, null, !dbg !2720
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !2720

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !2720
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !2720
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !2720
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !2720
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !2720

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !2720
  br label %cond.end, !dbg !2720

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !2720

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2720
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !2721
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !2722
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !2722
  %vop = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 3, !dbg !2723
  %5 = load %union.tree_node*, %union.tree_node** %vop, align 8, !dbg !2723
  ret %union.tree_node* %5, !dbg !2724
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @tree_predictive_commoning() #0 !dbg !2725 {
entry:
  %unrolled = alloca i8, align 1
  %loop = alloca %struct.loop*, align 8
  %li = alloca %struct.loop_iterator, align 8
  %ret = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i8* %unrolled, metadata !2728, metadata !DIExpression()), !dbg !2729
  store i8 0, i8* %unrolled, align 1, !dbg !2729
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2730, metadata !DIExpression()), !dbg !2731
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !2732, metadata !DIExpression()), !dbg !2738
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2739, metadata !DIExpression()), !dbg !2740
  store i32 0, i32* %ret, align 4, !dbg !2740
  call void @initialize_original_copy_tables(), !dbg !2741
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 4), !dbg !2742
  br label %for.cond, !dbg !2742

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2744
  %tobool = icmp ne %struct.loop* %0, null, !dbg !2742
  br i1 %tobool, label %for.body, label %for.end, !dbg !2742

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2746
  %call = call zeroext i8 @optimize_loop_for_speed_p(%struct.loop* %1), !dbg !2748
  %tobool1 = icmp ne i8 %call, 0, !dbg !2748
  br i1 %tobool1, label %if.then, label %if.end, !dbg !2749

if.then:                                          ; preds = %for.body
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2750
  %call2 = call zeroext i8 @tree_predictive_commoning_loop(%struct.loop* %2), !dbg !2752
  %conv = zext i8 %call2 to i32, !dbg !2752
  %3 = load i8, i8* %unrolled, align 1, !dbg !2753
  %conv3 = zext i8 %3 to i32, !dbg !2753
  %or = or i32 %conv3, %conv, !dbg !2753
  %conv4 = trunc i32 %or to i8, !dbg !2753
  store i8 %conv4, i8* %unrolled, align 1, !dbg !2753
  br label %if.end, !dbg !2754

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !2755

for.inc:                                          ; preds = %if.end
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !2744
  br label %for.cond, !dbg !2744, !llvm.loop !2756

for.end:                                          ; preds = %for.cond
  %4 = load i8, i8* %unrolled, align 1, !dbg !2758
  %tobool5 = icmp ne i8 %4, 0, !dbg !2758
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !2760

if.then6:                                         ; preds = %for.end
  call void @scev_reset(), !dbg !2761
  store i32 32, i32* %ret, align 4, !dbg !2763
  br label %if.end7, !dbg !2764

if.end7:                                          ; preds = %if.then6, %for.end
  call void @free_original_copy_tables(), !dbg !2765
  %5 = load i32, i32* %ret, align 4, !dbg !2766
  ret i32 %5, !dbg !2767
}

declare dso_local void @initialize_original_copy_tables() #2

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !2768 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !2773, metadata !DIExpression()), !dbg !2774
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !2775, metadata !DIExpression()), !dbg !2776
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2777, metadata !DIExpression()), !dbg !2778
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !2779, metadata !DIExpression()), !dbg !2780
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2781, metadata !DIExpression()), !dbg !2782
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !2783, metadata !DIExpression()), !dbg !2784
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2785
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !2786
  store i32 0, i32* %idx, align 8, !dbg !2787
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2788
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2788
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2788
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2788
  %tobool = icmp ne %struct.loops* %2, null, !dbg !2788
  br i1 %tobool, label %if.end, label %if.then, !dbg !2790

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2791
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !2793
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !2794
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2795
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !2796
  br label %return, !dbg !2797

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !2798
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !2798
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2799
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !2800
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !2801
  %6 = load i32, i32* %flags.addr, align 4, !dbg !2802
  %and = and i32 %6, 1, !dbg !2803
  %tobool3 = icmp ne i32 %and, 0, !dbg !2804
  %7 = zext i1 %tobool3 to i64, !dbg !2804
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !2804
  store i32 %cond, i32* %mn, align 4, !dbg !2805
  %8 = load i32, i32* %flags.addr, align 4, !dbg !2806
  %and4 = and i32 %8, 4, !dbg !2808
  %tobool5 = icmp ne i32 %and4, 0, !dbg !2808
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !2809

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !2810
  br label %for.cond, !dbg !2813

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2814
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !2814
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !2814
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !2814
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !2814
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !2814
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !2814
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !2814

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2814
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !2814
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !2814
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !2814
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !2814
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !2814
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !2814
  br label %cond.end, !dbg !2814

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !2814

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2814
  %15 = load i32, i32* %i, align 4, !dbg !2814
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !2814
  %tobool15 = icmp ne i32 %call14, 0, !dbg !2816
  br i1 %tobool15, label %for.body, label %for.end, !dbg !2816

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2817
  %cmp = icmp ne %struct.loop* %16, null, !dbg !2819
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !2820

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2821
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !2822
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2822
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !2823
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !2824

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2825
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !2826
  %20 = load i32, i32* %num, align 8, !dbg !2826
  %21 = load i32, i32* %mn, align 4, !dbg !2827
  %cmp18 = icmp sge i32 %20, %21, !dbg !2828
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !2829

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2830
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !2830
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !2830
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !2830
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !2830

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2830
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !2830
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !2830
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !2830
  br label %cond.end26, !dbg !2830

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !2830

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !2830
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2830
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !2830
  %27 = load i32, i32* %num28, align 8, !dbg !2830
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !2830
  br label %if.end30, !dbg !2830

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !2827

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !2831
  %inc = add i32 %28, 1, !dbg !2831
  store i32 %inc, i32* %i, align 4, !dbg !2831
  br label %for.cond, !dbg !2832, !llvm.loop !2833

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !2835

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !2836
  %and31 = and i32 %29, 2, !dbg !2838
  %tobool32 = icmp ne i32 %and31, 0, !dbg !2838
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !2839

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2840
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !2840
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !2840
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !2840
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !2843
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !2843
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !2844
  br label %for.cond36, !dbg !2845

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2846
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !2848
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !2848
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !2849
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !2850

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !2851

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2852
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !2853
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !2853
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !2854
  br label %for.cond36, !dbg !2855, !llvm.loop !2856

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !2858

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2859
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !2862
  %38 = load i32, i32* %num43, align 8, !dbg !2862
  %39 = load i32, i32* %mn, align 4, !dbg !2863
  %cmp44 = icmp sge i32 %38, %39, !dbg !2864
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !2865

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2866
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !2866
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !2866
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !2866
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !2866

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2866
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !2866
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !2866
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !2866
  br label %cond.end52, !dbg !2866

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !2866

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !2866
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2866
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !2866
  %45 = load i32, i32* %num54, align 8, !dbg !2866
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !2866
  br label %if.end56, !dbg !2866

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2867
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !2869
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !2869
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !2867
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !2870

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2871
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !2874
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !2874
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !2875
  br label %for.cond60, !dbg !2876

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2877
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !2879
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !2879
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !2880
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !2881

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !2882

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2883
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !2884
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !2884
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !2885
  br label %for.cond60, !dbg !2886, !llvm.loop !2887

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !2889

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2890
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !2892
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !2892
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !2893

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !2894

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2895
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !2896
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !2897
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !2858, !llvm.loop !2898

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !2900

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2901
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !2901
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !2901
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !2901
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !2903
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !2903
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !2904
  br label %while.body79, !dbg !2905

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2906
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !2909
  %60 = load i32, i32* %num80, align 8, !dbg !2909
  %61 = load i32, i32* %mn, align 4, !dbg !2910
  %cmp81 = icmp sge i32 %60, %61, !dbg !2911
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !2912

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2913
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !2913
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !2913
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !2913
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !2913

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2913
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !2913
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !2913
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !2913
  br label %cond.end89, !dbg !2913

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !2913

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !2913
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2913
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !2913
  %67 = load i32, i32* %num91, align 8, !dbg !2913
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !2913
  br label %if.end93, !dbg !2913

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2914
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !2916
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !2916
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !2917
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !2918

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2919
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !2920
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !2920
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !2921
  br label %if.end110, !dbg !2922

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !2923

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2925
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !2926
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !2927

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2928
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !2929
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !2929
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !2930
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !2931
  br i1 %75, label %while.body103, label %while.end105, !dbg !2923

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2932
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !2933
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !2934
  br label %while.cond99, !dbg !2923, !llvm.loop !2935

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2937
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !2939
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !2940

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !2941

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !2942
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !2943
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !2943
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !2944
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !2905, !llvm.loop !2945

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !2947
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !2948
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !2949
  br label %return, !dbg !2950

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !2950
}

declare dso_local zeroext i8 @optimize_loop_for_speed_p(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @tree_predictive_commoning_loop(%struct.loop* %loop) #0 !dbg !2951 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %datarefs = alloca %struct.VEC_data_reference_p_heap*, align 8
  %dependences = alloca %struct.VEC_ddr_p_heap*, align 8
  %components = alloca %struct.component*, align 8
  %chains = alloca %struct.VEC_chain_p_heap*, align 8
  %unroll_factor = alloca i32, align 4
  %desc = alloca %struct.tree_niter_desc, align 8
  %unroll = alloca i8, align 1
  %exit = alloca %struct.edge_def*, align 8
  %tmp_vars = alloca %struct.bitmap_head_def*, align 8
  %dta = alloca %struct.epcc_data, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2954, metadata !DIExpression()), !dbg !2955
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs, metadata !2956, metadata !DIExpression()), !dbg !2957
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %dependences, metadata !2958, metadata !DIExpression()), !dbg !2959
  call void @llvm.dbg.declare(metadata %struct.component** %components, metadata !2960, metadata !DIExpression()), !dbg !2961
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap** %chains, metadata !2962, metadata !DIExpression()), !dbg !2963
  store %struct.VEC_chain_p_heap* null, %struct.VEC_chain_p_heap** %chains, align 8, !dbg !2963
  call void @llvm.dbg.declare(metadata i32* %unroll_factor, metadata !2964, metadata !DIExpression()), !dbg !2965
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc* %desc, metadata !2966, metadata !DIExpression()), !dbg !2982
  call void @llvm.dbg.declare(metadata i8* %unroll, metadata !2983, metadata !DIExpression()), !dbg !2984
  store i8 0, i8* %unroll, align 1, !dbg !2984
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !2985, metadata !DIExpression()), !dbg !2986
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp_vars, metadata !2987, metadata !DIExpression()), !dbg !2988
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2989
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !2989
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2991

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !2992
  %and = and i32 %1, 8, !dbg !2993
  %tobool1 = icmp ne i32 %and, 0, !dbg !2993
  br i1 %tobool1, label %if.then, label %if.end, !dbg !2994

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2995
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2996
  %num = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 0, !dbg !2997
  %4 = load i32, i32* %num, align 8, !dbg !2997
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.28, i64 0, i64 0), i32 %4), !dbg !2998
  br label %if.end, !dbg !2998

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call2 = call %struct.VEC_data_reference_p_heap* @VEC_data_reference_p_heap_alloc(i32 10), !dbg !2999
  store %struct.VEC_data_reference_p_heap* %call2, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !3000
  %call3 = call %struct.VEC_ddr_p_heap* @VEC_ddr_p_heap_alloc(i32 10), !dbg !3001
  store %struct.VEC_ddr_p_heap* %call3, %struct.VEC_ddr_p_heap** %dependences, align 8, !dbg !3002
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3003
  %call4 = call zeroext i8 @compute_data_dependences_for_loop(%struct.loop* %5, i8 zeroext 1, %struct.VEC_data_reference_p_heap** %datarefs, %struct.VEC_ddr_p_heap** %dependences), !dbg !3004
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3005
  %tobool5 = icmp ne %struct._IO_FILE* %6, null, !dbg !3005
  br i1 %tobool5, label %land.lhs.true6, label %if.end10, !dbg !3007

land.lhs.true6:                                   ; preds = %if.end
  %7 = load i32, i32* @dump_flags, align 4, !dbg !3008
  %and7 = and i32 %7, 8, !dbg !3009
  %tobool8 = icmp ne i32 %and7, 0, !dbg !3009
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !3010

if.then9:                                         ; preds = %land.lhs.true6
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3011
  %9 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependences, align 8, !dbg !3012
  call void @dump_data_dependence_relations(%struct._IO_FILE* %8, %struct.VEC_ddr_p_heap* %9), !dbg !3013
  br label %if.end10, !dbg !3013

if.end10:                                         ; preds = %if.then9, %land.lhs.true6, %if.end
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3014
  %11 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !3015
  %12 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependences, align 8, !dbg !3016
  %call11 = call %struct.component* @split_data_refs_to_components(%struct.loop* %10, %struct.VEC_data_reference_p_heap* %11, %struct.VEC_ddr_p_heap* %12), !dbg !3017
  store %struct.component* %call11, %struct.component** %components, align 8, !dbg !3018
  %13 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %dependences, align 8, !dbg !3019
  call void @free_dependence_relations(%struct.VEC_ddr_p_heap* %13), !dbg !3020
  %14 = load %struct.component*, %struct.component** %components, align 8, !dbg !3021
  %tobool12 = icmp ne %struct.component* %14, null, !dbg !3021
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !3023

if.then13:                                        ; preds = %if.end10
  %15 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !3024
  call void @free_data_refs(%struct.VEC_data_reference_p_heap* %15), !dbg !3026
  store i8 0, i8* %retval, align 1, !dbg !3027
  br label %return, !dbg !3027

if.end14:                                         ; preds = %if.end10
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3028
  %tobool15 = icmp ne %struct._IO_FILE* %16, null, !dbg !3028
  br i1 %tobool15, label %land.lhs.true16, label %if.end21, !dbg !3030

land.lhs.true16:                                  ; preds = %if.end14
  %17 = load i32, i32* @dump_flags, align 4, !dbg !3031
  %and17 = and i32 %17, 8, !dbg !3032
  %tobool18 = icmp ne i32 %and17, 0, !dbg !3032
  br i1 %tobool18, label %if.then19, label %if.end21, !dbg !3033

if.then19:                                        ; preds = %land.lhs.true16
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3034
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.29, i64 0, i64 0)), !dbg !3036
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3037
  %20 = load %struct.component*, %struct.component** %components, align 8, !dbg !3038
  call void @dump_components(%struct._IO_FILE* %19, %struct.component* %20), !dbg !3039
  br label %if.end21, !dbg !3040

if.end21:                                         ; preds = %if.then19, %land.lhs.true16, %if.end14
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3041
  %22 = load %struct.component*, %struct.component** %components, align 8, !dbg !3042
  %call22 = call %struct.component* @filter_suitable_components(%struct.loop* %21, %struct.component* %22), !dbg !3043
  store %struct.component* %call22, %struct.component** %components, align 8, !dbg !3044
  %call23 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3045
  store %struct.bitmap_head_def* %call23, %struct.bitmap_head_def** %tmp_vars, align 8, !dbg !3046
  %call24 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3047
  store %struct.bitmap_head_def* %call24, %struct.bitmap_head_def** @looparound_phis, align 8, !dbg !3048
  %23 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3049
  %24 = load %struct.component*, %struct.component** %components, align 8, !dbg !3050
  call void @determine_roots(%struct.loop* %23, %struct.component* %24, %struct.VEC_chain_p_heap** %chains), !dbg !3051
  %25 = load %struct.component*, %struct.component** %components, align 8, !dbg !3052
  call void @release_components(%struct.component* %25), !dbg !3053
  %26 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains, align 8, !dbg !3054
  %tobool25 = icmp ne %struct.VEC_chain_p_heap* %26, null, !dbg !3054
  br i1 %tobool25, label %if.end34, label %if.then26, !dbg !3056

if.then26:                                        ; preds = %if.end21
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3057
  %tobool27 = icmp ne %struct._IO_FILE* %27, null, !dbg !3057
  br i1 %tobool27, label %land.lhs.true28, label %if.end33, !dbg !3060

land.lhs.true28:                                  ; preds = %if.then26
  %28 = load i32, i32* @dump_flags, align 4, !dbg !3061
  %and29 = and i32 %28, 8, !dbg !3062
  %tobool30 = icmp ne i32 %and29, 0, !dbg !3062
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !3063

if.then31:                                        ; preds = %land.lhs.true28
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3064
  %call32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i64 0, i64 0)), !dbg !3065
  br label %if.end33, !dbg !3065

if.end33:                                         ; preds = %if.then31, %land.lhs.true28, %if.then26
  br label %end, !dbg !3066

if.end34:                                         ; preds = %if.end21
  %30 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3067
  %31 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains, align 8, !dbg !3068
  call void @prepare_initializers(%struct.loop* %30, %struct.VEC_chain_p_heap* %31), !dbg !3069
  call void @try_combine_chains(%struct.VEC_chain_p_heap** %chains), !dbg !3070
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3071
  %tobool35 = icmp ne %struct._IO_FILE* %32, null, !dbg !3071
  br i1 %tobool35, label %land.lhs.true36, label %if.end41, !dbg !3073

land.lhs.true36:                                  ; preds = %if.end34
  %33 = load i32, i32* @dump_flags, align 4, !dbg !3074
  %and37 = and i32 %33, 8, !dbg !3075
  %tobool38 = icmp ne i32 %and37, 0, !dbg !3075
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !3076

if.then39:                                        ; preds = %land.lhs.true36
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3077
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.31, i64 0, i64 0)), !dbg !3079
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3080
  %36 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains, align 8, !dbg !3081
  call void @dump_chains(%struct._IO_FILE* %35, %struct.VEC_chain_p_heap* %36), !dbg !3082
  br label %if.end41, !dbg !3083

if.end41:                                         ; preds = %if.then39, %land.lhs.true36, %if.end34
  %37 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains, align 8, !dbg !3084
  %call42 = call i32 @determine_unroll_factor(%struct.VEC_chain_p_heap* %37), !dbg !3085
  store i32 %call42, i32* %unroll_factor, align 4, !dbg !3086
  call void @scev_reset(), !dbg !3087
  %38 = load i32, i32* %unroll_factor, align 4, !dbg !3088
  %cmp = icmp ugt i32 %38, 1, !dbg !3089
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3090

land.rhs:                                         ; preds = %if.end41
  %39 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3091
  %40 = load i32, i32* %unroll_factor, align 4, !dbg !3092
  %call43 = call zeroext i8 @can_unroll_loop_p(%struct.loop* %39, i32 %40, %struct.tree_niter_desc* %desc), !dbg !3093
  %conv = zext i8 %call43 to i32, !dbg !3093
  %tobool44 = icmp ne i32 %conv, 0, !dbg !3090
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end41
  %41 = phi i1 [ false, %if.end41 ], [ %tobool44, %land.rhs ], !dbg !3094
  %land.ext = zext i1 %41 to i32, !dbg !3090
  %conv45 = trunc i32 %land.ext to i8, !dbg !3095
  store i8 %conv45, i8* %unroll, align 1, !dbg !3096
  %42 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3097
  %call46 = call %struct.edge_def* @single_dom_exit(%struct.loop* %42), !dbg !3098
  store %struct.edge_def* %call46, %struct.edge_def** %exit, align 8, !dbg !3099
  %43 = load i8, i8* %unroll, align 1, !dbg !3100
  %tobool47 = icmp ne i8 %43, 0, !dbg !3100
  br i1 %tobool47, label %if.then48, label %if.else, !dbg !3102

if.then48:                                        ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.epcc_data* %dta, metadata !3103, metadata !DIExpression()), !dbg !3105
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3106
  %tobool49 = icmp ne %struct._IO_FILE* %44, null, !dbg !3106
  br i1 %tobool49, label %land.lhs.true50, label %if.end55, !dbg !3108

land.lhs.true50:                                  ; preds = %if.then48
  %45 = load i32, i32* @dump_flags, align 4, !dbg !3109
  %and51 = and i32 %45, 8, !dbg !3110
  %tobool52 = icmp ne i32 %and51, 0, !dbg !3110
  br i1 %tobool52, label %if.then53, label %if.end55, !dbg !3111

if.then53:                                        ; preds = %land.lhs.true50
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3112
  %47 = load i32, i32* %unroll_factor, align 4, !dbg !3113
  %call54 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i64 0, i64 0), i32 %47), !dbg !3114
  br label %if.end55, !dbg !3114

if.end55:                                         ; preds = %if.then53, %land.lhs.true50, %if.then48
  %48 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains, align 8, !dbg !3115
  %chains56 = getelementptr inbounds %struct.epcc_data, %struct.epcc_data* %dta, i32 0, i32 0, !dbg !3116
  store %struct.VEC_chain_p_heap* %48, %struct.VEC_chain_p_heap** %chains56, align 8, !dbg !3117
  %49 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars, align 8, !dbg !3118
  %tmp_vars57 = getelementptr inbounds %struct.epcc_data, %struct.epcc_data* %dta, i32 0, i32 1, !dbg !3119
  store %struct.bitmap_head_def* %49, %struct.bitmap_head_def** %tmp_vars57, align 8, !dbg !3120
  call void @update_ssa(i32 16384), !dbg !3121
  %50 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains, align 8, !dbg !3122
  call void @replace_phis_by_defined_names(%struct.VEC_chain_p_heap* %50), !dbg !3123
  %51 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3124
  %52 = load i32, i32* %unroll_factor, align 4, !dbg !3125
  %53 = load %struct.edge_def*, %struct.edge_def** %exit, align 8, !dbg !3126
  %54 = bitcast %struct.epcc_data* %dta to i8*, !dbg !3127
  call void @tree_transform_and_unroll_loop(%struct.loop* %51, i32 %52, %struct.edge_def* %53, %struct.tree_niter_desc* %desc, void (%struct.loop*, i8*)* @execute_pred_commoning_cbck, i8* %54), !dbg !3128
  %55 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3129
  %56 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars, align 8, !dbg !3130
  call void @eliminate_temp_copies(%struct.loop* %55, %struct.bitmap_head_def* %56), !dbg !3131
  br label %if.end65, !dbg !3132

if.else:                                          ; preds = %land.end
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3133
  %tobool58 = icmp ne %struct._IO_FILE* %57, null, !dbg !3133
  br i1 %tobool58, label %land.lhs.true59, label %if.end64, !dbg !3136

land.lhs.true59:                                  ; preds = %if.else
  %58 = load i32, i32* @dump_flags, align 4, !dbg !3137
  %and60 = and i32 %58, 8, !dbg !3138
  %tobool61 = icmp ne i32 %and60, 0, !dbg !3138
  br i1 %tobool61, label %if.then62, label %if.end64, !dbg !3139

if.then62:                                        ; preds = %land.lhs.true59
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3140
  %call63 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.33, i64 0, i64 0)), !dbg !3141
  br label %if.end64, !dbg !3141

if.end64:                                         ; preds = %if.then62, %land.lhs.true59, %if.else
  %60 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3142
  %61 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains, align 8, !dbg !3143
  %62 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars, align 8, !dbg !3144
  call void @execute_pred_commoning(%struct.loop* %60, %struct.VEC_chain_p_heap* %61, %struct.bitmap_head_def* %62), !dbg !3145
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.end55
  br label %end, !dbg !3100

end:                                              ; preds = %if.end65, %if.end33
  call void @llvm.dbg.label(metadata !3146), !dbg !3147
  %63 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains, align 8, !dbg !3148
  call void @release_chains(%struct.VEC_chain_p_heap* %63), !dbg !3149
  %64 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !3150
  call void @free_data_refs(%struct.VEC_data_reference_p_heap* %64), !dbg !3151
  %65 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars, align 8, !dbg !3152
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %65), !dbg !3152
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %tmp_vars, align 8, !dbg !3152
  %66 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @looparound_phis, align 8, !dbg !3153
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %66), !dbg !3153
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @looparound_phis, align 8, !dbg !3153
  call void @free_affine_expand_cache(%struct.pointer_map_t** @name_expansions), !dbg !3154
  %67 = load i8, i8* %unroll, align 1, !dbg !3155
  store i8 %67, i8* %retval, align 1, !dbg !3156
  br label %return, !dbg !3156

return:                                           ; preds = %end, %if.then13
  %68 = load i8, i8* %retval, align 1, !dbg !3157
  ret i8 %68, !dbg !3157
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !3158 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !3161, metadata !DIExpression()), !dbg !3162
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !3163, metadata !DIExpression()), !dbg !3164
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !3165, metadata !DIExpression()), !dbg !3166
  br label %while.cond, !dbg !3167

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3168
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !3168
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !3168
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !3168
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3168

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3168
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !3168
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !3168
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !3168
  br label %cond.end, !dbg !3168

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !3168

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3168
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3168
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !3168
  %5 = load i32, i32* %idx, align 8, !dbg !3168
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !3168
  %tobool2 = icmp ne i32 %call, 0, !dbg !3167
  br i1 %tobool2, label %while.body, label %while.end, !dbg !3167

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3169
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !3171
  %7 = load i32, i32* %idx3, align 8, !dbg !3172
  %inc = add i32 %7, 1, !dbg !3172
  store i32 %inc, i32* %idx3, align 8, !dbg !3172
  %8 = load i32, i32* %anum, align 4, !dbg !3173
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !3174
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3175
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !3176
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3177
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !3179
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !3179
  br i1 %tobool5, label %if.then, label %if.end, !dbg !3180

if.then:                                          ; preds = %while.body
  br label %return, !dbg !3181

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !3167, !llvm.loop !3182

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !3184
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !3184
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !3184
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !3185
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !3186
  br label %return, !dbg !3187

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !3187
}

declare dso_local void @scev_reset() #2

declare dso_local void @free_original_copy_tables() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !3188 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3191, metadata !DIExpression()), !dbg !3192
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3193
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3194
  %cmp = icmp uge i32 %call, 1, !dbg !3195
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3196

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3197
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !3198
  %cmp2 = icmp ule i32 %call1, 9, !dbg !3199
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !3200
  %land.ext = zext i1 %2 to i32, !dbg !3196
  %conv = trunc i32 %land.ext to i8, !dbg !3194
  ret i8 %conv, !dbg !3201
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !3202 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3203, metadata !DIExpression()), !dbg !3204
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3205
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3206
  %cmp = icmp uge i32 %call, 6, !dbg !3207
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3208

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3209
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !3210
  %cmp2 = icmp ule i32 %call1, 9, !dbg !3211
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !3212
  %land.ext = zext i1 %2 to i32, !dbg !3208
  %conv = trunc i32 %land.ext to i8, !dbg !3206
  ret i8 %conv, !dbg !3213
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !3214 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3217, metadata !DIExpression()), !dbg !3218
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3218
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !3218
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !3218
  ret %struct.VEC_int_heap* %1, !dbg !3218
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !3219 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3220
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3220
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !3220
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !3220
  %tobool = icmp ne %struct.loops* %1, null, !dbg !3220
  br i1 %tobool, label %if.end, label %if.then, !dbg !3222

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3223
  br label %return, !dbg !3223

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3224
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3224
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !3224
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !3224
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !3224
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !3224
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !3224
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3224

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3224
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3224
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !3224
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !3224
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !3224
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !3224
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !3224
  br label %cond.end, !dbg !3224

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3224

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3224
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3224
  store i32 %call, i32* %retval, align 4, !dbg !3225
  br label %return, !dbg !3225

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3226
  ret i32 %8, !dbg !3226
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !3227 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3232, metadata !DIExpression()), !dbg !3233
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3234, metadata !DIExpression()), !dbg !3233
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !3235, metadata !DIExpression()), !dbg !3233
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3236
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3236
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3236

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3236
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3236
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !3236
  %3 = load i32, i32* %num, align 8, !dbg !3236
  %cmp = icmp ult i32 %1, %3, !dbg !3236
  br i1 %cmp, label %if.then, label %if.else, !dbg !3233

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3238
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !3238
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !3238
  %idxprom = zext i32 %5 to i64, !dbg !3238
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3238
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !3238
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3238
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !3238
  store i32 1, i32* %retval, align 4, !dbg !3238
  br label %return, !dbg !3238

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !3240
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !3240
  store i32 0, i32* %retval, align 4, !dbg !3240
  br label %return, !dbg !3240

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !3233
  ret i32 %9, !dbg !3233
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !3242 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !3246, metadata !DIExpression()), !dbg !3247
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !3248, metadata !DIExpression()), !dbg !3247
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !3249, metadata !DIExpression()), !dbg !3247
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3247
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !3247
  %1 = load i32, i32* %num, align 4, !dbg !3247
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3247
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !3247
  %3 = load i32, i32* %alloc, align 4, !dbg !3247
  %cmp = icmp ult i32 %1, %3, !dbg !3247
  %conv = zext i1 %cmp to i32, !dbg !3247
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3247
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !3247
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !3247
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !3247
  %6 = load i32, i32* %num1, align 4, !dbg !3247
  %inc = add i32 %6, 1, !dbg !3247
  store i32 %inc, i32* %num1, align 4, !dbg !3247
  %idxprom = zext i32 %6 to i64, !dbg !3247
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !3247
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !3247
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !3247
  %8 = load i32*, i32** %slot_, align 8, !dbg !3247
  store i32 %7, i32* %8, align 4, !dbg !3247
  %9 = load i32*, i32** %slot_, align 8, !dbg !3247
  ret i32* %9, !dbg !3247
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !3250 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3255, metadata !DIExpression()), !dbg !3256
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3257, metadata !DIExpression()), !dbg !3258
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3259
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !3259
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !3259
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !3259
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3259

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3259
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !3259
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !3259
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !3259
  br label %cond.end, !dbg !3259

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3259

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3259
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3259
  store i32 %call, i32* %n, align 4, !dbg !3258
  %4 = load i32, i32* %n, align 4, !dbg !3260
  %cmp = icmp eq i32 %4, 0, !dbg !3262
  br i1 %cmp, label %if.then, label %if.end, !dbg !3263

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3264
  br label %return, !dbg !3264

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3265
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !3265
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !3265
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !3265
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !3265

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3265
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !3265
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !3265
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !3265
  br label %cond.end8, !dbg !3265

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !3265

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !3265
  %9 = load i32, i32* %n, align 4, !dbg !3265
  %sub = sub i32 %9, 1, !dbg !3265
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !3265
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !3266
  br label %return, !dbg !3266

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !3267
  ret %struct.loop* %10, !dbg !3267
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !3268 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3271, metadata !DIExpression()), !dbg !3272
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3272
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3272
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3272

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3272
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !3272
  %2 = load i32, i32* %num, align 8, !dbg !3272
  br label %cond.end, !dbg !3272

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3272

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3272
  ret i32 %cond, !dbg !3272
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !3273 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !3276, metadata !DIExpression()), !dbg !3277
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3278, metadata !DIExpression()), !dbg !3277
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3277
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !3277
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3277

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3277
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3277
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !3277
  %3 = load i32, i32* %num, align 8, !dbg !3277
  %cmp = icmp ult i32 %1, %3, !dbg !3277
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3279
  %land.ext = zext i1 %4 to i32, !dbg !3277
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !3277
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !3277
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3277
  %idxprom = zext i32 %6 to i64, !dbg !3277
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !3277
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !3277
  ret %struct.loop* %7, !dbg !3277
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_data_reference_p_heap* @VEC_data_reference_p_heap_alloc(i32 %alloc_) #0 !dbg !3280 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3283, metadata !DIExpression()), !dbg !3284
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3284
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3284
  %1 = bitcast i8* %call to %struct.VEC_data_reference_p_heap*, !dbg !3284
  ret %struct.VEC_data_reference_p_heap* %1, !dbg !3284
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_ddr_p_heap* @VEC_ddr_p_heap_alloc(i32 %alloc_) #0 !dbg !3285 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3288, metadata !DIExpression()), !dbg !3289
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3289
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3289
  %1 = bitcast i8* %call to %struct.VEC_ddr_p_heap*, !dbg !3289
  ret %struct.VEC_ddr_p_heap* %1, !dbg !3289
}

declare dso_local zeroext i8 @compute_data_dependences_for_loop(%struct.loop*, i8 zeroext, %struct.VEC_data_reference_p_heap**, %struct.VEC_ddr_p_heap**) #2

declare dso_local void @dump_data_dependence_relations(%struct._IO_FILE*, %struct.VEC_ddr_p_heap*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.component* @split_data_refs_to_components(%struct.loop* %loop, %struct.VEC_data_reference_p_heap* %datarefs, %struct.VEC_ddr_p_heap* %depends) #0 !dbg !3290 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %datarefs.addr = alloca %struct.VEC_data_reference_p_heap*, align 8
  %depends.addr = alloca %struct.VEC_ddr_p_heap*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %ca = alloca i32, align 4
  %ia = alloca i32, align 4
  %ib = alloca i32, align 4
  %bad = alloca i32, align 4
  %comp_father = alloca i32*, align 8
  %comp_size = alloca i32*, align 8
  %comps = alloca %struct.component**, align 8
  %dr = alloca %struct.data_reference*, align 8
  %dra = alloca %struct.data_reference*, align 8
  %drb = alloca %struct.data_reference*, align 8
  %ddr = alloca %struct.data_dependence_relation*, align 8
  %comp_list = alloca %struct.component*, align 8
  %comp = alloca %struct.component*, align 8
  %dataref = alloca %struct.dref_d*, align 8
  %last_always_executed = alloca %struct.basic_block_def*, align 8
  %dummy = alloca i32, align 4
  %dummy_off = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3293, metadata !DIExpression()), !dbg !3294
  store %struct.VEC_data_reference_p_heap* %datarefs, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs.addr, metadata !3295, metadata !DIExpression()), !dbg !3296
  store %struct.VEC_ddr_p_heap* %depends, %struct.VEC_ddr_p_heap** %depends.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %depends.addr, metadata !3297, metadata !DIExpression()), !dbg !3298
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3299, metadata !DIExpression()), !dbg !3300
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3301, metadata !DIExpression()), !dbg !3302
  %0 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !3303
  %tobool = icmp ne %struct.VEC_data_reference_p_heap* %0, null, !dbg !3303
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3303

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !3303
  %base = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %1, i32 0, i32 0, !dbg !3303
  br label %cond.end, !dbg !3303

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3303

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_reference_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3303
  %call = call i32 @VEC_data_reference_p_base_length(%struct.VEC_data_reference_p_base* %cond), !dbg !3303
  store i32 %call, i32* %n, align 4, !dbg !3302
  call void @llvm.dbg.declare(metadata i32* %ca, metadata !3304, metadata !DIExpression()), !dbg !3305
  call void @llvm.dbg.declare(metadata i32* %ia, metadata !3306, metadata !DIExpression()), !dbg !3307
  call void @llvm.dbg.declare(metadata i32* %ib, metadata !3308, metadata !DIExpression()), !dbg !3309
  call void @llvm.dbg.declare(metadata i32* %bad, metadata !3310, metadata !DIExpression()), !dbg !3311
  call void @llvm.dbg.declare(metadata i32** %comp_father, metadata !3312, metadata !DIExpression()), !dbg !3313
  %2 = load i32, i32* %n, align 4, !dbg !3314
  %add = add i32 %2, 1, !dbg !3314
  %conv = zext i32 %add to i64, !dbg !3314
  %mul = mul i64 4, %conv, !dbg !3314
  %call1 = call i8* @xmalloc(i64 %mul), !dbg !3314
  %3 = bitcast i8* %call1 to i32*, !dbg !3314
  store i32* %3, i32** %comp_father, align 8, !dbg !3313
  call void @llvm.dbg.declare(metadata i32** %comp_size, metadata !3315, metadata !DIExpression()), !dbg !3316
  %4 = load i32, i32* %n, align 4, !dbg !3317
  %add2 = add i32 %4, 1, !dbg !3317
  %conv3 = zext i32 %add2 to i64, !dbg !3317
  %mul4 = mul i64 4, %conv3, !dbg !3317
  %call5 = call i8* @xmalloc(i64 %mul4), !dbg !3317
  %5 = bitcast i8* %call5 to i32*, !dbg !3317
  store i32* %5, i32** %comp_size, align 8, !dbg !3316
  call void @llvm.dbg.declare(metadata %struct.component*** %comps, metadata !3318, metadata !DIExpression()), !dbg !3319
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr, metadata !3320, metadata !DIExpression()), !dbg !3321
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dra, metadata !3322, metadata !DIExpression()), !dbg !3323
  call void @llvm.dbg.declare(metadata %struct.data_reference** %drb, metadata !3324, metadata !DIExpression()), !dbg !3325
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !3326, metadata !DIExpression()), !dbg !3327
  call void @llvm.dbg.declare(metadata %struct.component** %comp_list, metadata !3328, metadata !DIExpression()), !dbg !3329
  store %struct.component* null, %struct.component** %comp_list, align 8, !dbg !3329
  call void @llvm.dbg.declare(metadata %struct.component** %comp, metadata !3330, metadata !DIExpression()), !dbg !3331
  call void @llvm.dbg.declare(metadata %struct.dref_d** %dataref, metadata !3332, metadata !DIExpression()), !dbg !3333
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last_always_executed, metadata !3334, metadata !DIExpression()), !dbg !3335
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3336
  %call6 = call %struct.basic_block_def* @last_always_executed_block(%struct.loop* %6), !dbg !3337
  store %struct.basic_block_def* %call6, %struct.basic_block_def** %last_always_executed, align 8, !dbg !3335
  store i32 0, i32* %i, align 4, !dbg !3338
  br label %for.cond, !dbg !3340

for.cond:                                         ; preds = %for.inc, %cond.end
  %7 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !3341
  %tobool7 = icmp ne %struct.VEC_data_reference_p_heap* %7, null, !dbg !3341
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !3341

cond.true8:                                       ; preds = %for.cond
  %8 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !3341
  %base9 = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %8, i32 0, i32 0, !dbg !3341
  br label %cond.end11, !dbg !3341

cond.false10:                                     ; preds = %for.cond
  br label %cond.end11, !dbg !3341

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_data_reference_p_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !3341
  %9 = load i32, i32* %i, align 4, !dbg !3341
  %call13 = call i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %cond12, i32 %9, %struct.data_reference** %dr), !dbg !3341
  %tobool14 = icmp ne i32 %call13, 0, !dbg !3343
  br i1 %tobool14, label %for.body, label %for.end, !dbg !3343

for.body:                                         ; preds = %cond.end11
  %10 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3344
  %ref = getelementptr inbounds %struct.data_reference, %struct.data_reference* %10, i32 0, i32 1, !dbg !3344
  %11 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !3344
  %tobool15 = icmp ne %union.tree_node* %11, null, !dbg !3344
  br i1 %tobool15, label %if.end, label %if.then, !dbg !3347

if.then:                                          ; preds = %for.body
  br label %end, !dbg !3348

if.end:                                           ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !3350
  %conv16 = zext i32 %12 to i64, !dbg !3351
  %13 = inttoptr i64 %conv16 to i8*, !dbg !3352
  %14 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3353
  %aux = getelementptr inbounds %struct.data_reference, %struct.data_reference* %14, i32 0, i32 2, !dbg !3354
  store i8* %13, i8** %aux, align 8, !dbg !3355
  %15 = load i32, i32* %i, align 4, !dbg !3356
  %16 = load i32*, i32** %comp_father, align 8, !dbg !3357
  %17 = load i32, i32* %i, align 4, !dbg !3358
  %idxprom = zext i32 %17 to i64, !dbg !3357
  %arrayidx = getelementptr inbounds i32, i32* %16, i64 %idxprom, !dbg !3357
  store i32 %15, i32* %arrayidx, align 4, !dbg !3359
  %18 = load i32*, i32** %comp_size, align 8, !dbg !3360
  %19 = load i32, i32* %i, align 4, !dbg !3361
  %idxprom17 = zext i32 %19 to i64, !dbg !3360
  %arrayidx18 = getelementptr inbounds i32, i32* %18, i64 %idxprom17, !dbg !3360
  store i32 1, i32* %arrayidx18, align 4, !dbg !3362
  br label %for.inc, !dbg !3363

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %i, align 4, !dbg !3364
  %inc = add i32 %20, 1, !dbg !3364
  store i32 %inc, i32* %i, align 4, !dbg !3364
  br label %for.cond, !dbg !3365, !llvm.loop !3366

for.end:                                          ; preds = %cond.end11
  %21 = load i32, i32* %n, align 4, !dbg !3368
  %22 = load i32*, i32** %comp_father, align 8, !dbg !3369
  %23 = load i32, i32* %n, align 4, !dbg !3370
  %idxprom19 = zext i32 %23 to i64, !dbg !3369
  %arrayidx20 = getelementptr inbounds i32, i32* %22, i64 %idxprom19, !dbg !3369
  store i32 %21, i32* %arrayidx20, align 4, !dbg !3371
  %24 = load i32*, i32** %comp_size, align 8, !dbg !3372
  %25 = load i32, i32* %n, align 4, !dbg !3373
  %idxprom21 = zext i32 %25 to i64, !dbg !3372
  %arrayidx22 = getelementptr inbounds i32, i32* %24, i64 %idxprom21, !dbg !3372
  store i32 1, i32* %arrayidx22, align 4, !dbg !3374
  store i32 0, i32* %i, align 4, !dbg !3375
  br label %for.cond23, !dbg !3377

for.cond23:                                       ; preds = %for.inc39, %for.end
  %26 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !3378
  %tobool24 = icmp ne %struct.VEC_data_reference_p_heap* %26, null, !dbg !3378
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !3378

cond.true25:                                      ; preds = %for.cond23
  %27 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !3378
  %base26 = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %27, i32 0, i32 0, !dbg !3378
  br label %cond.end28, !dbg !3378

cond.false27:                                     ; preds = %for.cond23
  br label %cond.end28, !dbg !3378

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.VEC_data_reference_p_base* [ %base26, %cond.true25 ], [ null, %cond.false27 ], !dbg !3378
  %28 = load i32, i32* %i, align 4, !dbg !3378
  %call30 = call i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %cond29, i32 %28, %struct.data_reference** %dr), !dbg !3378
  %tobool31 = icmp ne i32 %call30, 0, !dbg !3380
  br i1 %tobool31, label %for.body32, label %for.end41, !dbg !3380

for.body32:                                       ; preds = %cond.end28
  call void @llvm.dbg.declare(metadata i32* %dummy, metadata !3381, metadata !DIExpression()), !dbg !3383
  %29 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3384
  %call33 = call zeroext i8 @suitable_reference_p(%struct.data_reference* %29, i32* %dummy), !dbg !3386
  %tobool34 = icmp ne i8 %call33, 0, !dbg !3386
  br i1 %tobool34, label %if.end38, label %if.then35, !dbg !3387

if.then35:                                        ; preds = %for.body32
  %30 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3388
  %aux36 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %30, i32 0, i32 2, !dbg !3390
  %31 = load i8*, i8** %aux36, align 8, !dbg !3390
  %32 = ptrtoint i8* %31 to i64, !dbg !3391
  %conv37 = trunc i64 %32 to i32, !dbg !3392
  store i32 %conv37, i32* %ia, align 4, !dbg !3393
  %33 = load i32*, i32** %comp_father, align 8, !dbg !3394
  %34 = load i32*, i32** %comp_size, align 8, !dbg !3395
  %35 = load i32, i32* %n, align 4, !dbg !3396
  %36 = load i32, i32* %ia, align 4, !dbg !3397
  call void @merge_comps(i32* %33, i32* %34, i32 %35, i32 %36), !dbg !3398
  br label %if.end38, !dbg !3399

if.end38:                                         ; preds = %if.then35, %for.body32
  br label %for.inc39, !dbg !3400

for.inc39:                                        ; preds = %if.end38
  %37 = load i32, i32* %i, align 4, !dbg !3401
  %inc40 = add i32 %37, 1, !dbg !3401
  store i32 %inc40, i32* %i, align 4, !dbg !3401
  br label %for.cond23, !dbg !3402, !llvm.loop !3403

for.end41:                                        ; preds = %cond.end28
  store i32 0, i32* %i, align 4, !dbg !3405
  br label %for.cond42, !dbg !3407

for.cond42:                                       ; preds = %for.inc81, %for.end41
  %38 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %depends.addr, align 8, !dbg !3408
  %tobool43 = icmp ne %struct.VEC_ddr_p_heap* %38, null, !dbg !3408
  br i1 %tobool43, label %cond.true44, label %cond.false46, !dbg !3408

cond.true44:                                      ; preds = %for.cond42
  %39 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %depends.addr, align 8, !dbg !3408
  %base45 = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %39, i32 0, i32 0, !dbg !3408
  br label %cond.end47, !dbg !3408

cond.false46:                                     ; preds = %for.cond42
  br label %cond.end47, !dbg !3408

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi %struct.VEC_ddr_p_base* [ %base45, %cond.true44 ], [ null, %cond.false46 ], !dbg !3408
  %40 = load i32, i32* %i, align 4, !dbg !3408
  %call49 = call i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %cond48, i32 %40, %struct.data_dependence_relation** %ddr), !dbg !3408
  %tobool50 = icmp ne i32 %call49, 0, !dbg !3410
  br i1 %tobool50, label %for.body51, label %for.end83, !dbg !3410

for.body51:                                       ; preds = %cond.end47
  call void @llvm.dbg.declare(metadata %struct.double_int* %dummy_off, metadata !3411, metadata !DIExpression()), !dbg !3413
  %41 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3414
  %are_dependent = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %41, i32 0, i32 2, !dbg !3414
  %42 = load %union.tree_node*, %union.tree_node** %are_dependent, align 8, !dbg !3414
  %43 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !3416
  %cmp = icmp eq %union.tree_node* %42, %43, !dbg !3417
  br i1 %cmp, label %if.then53, label %if.end54, !dbg !3418

if.then53:                                        ; preds = %for.body51
  br label %for.inc81, !dbg !3419

if.end54:                                         ; preds = %for.body51
  %44 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3420
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %44, i32 0, i32 0, !dbg !3420
  %45 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !3420
  store %struct.data_reference* %45, %struct.data_reference** %dra, align 8, !dbg !3421
  %46 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !3422
  %b = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %46, i32 0, i32 1, !dbg !3422
  %47 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !3422
  store %struct.data_reference* %47, %struct.data_reference** %drb, align 8, !dbg !3423
  %48 = load i32*, i32** %comp_father, align 8, !dbg !3424
  %49 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !3425
  %aux55 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %49, i32 0, i32 2, !dbg !3426
  %50 = load i8*, i8** %aux55, align 8, !dbg !3426
  %51 = ptrtoint i8* %50 to i64, !dbg !3427
  %conv56 = trunc i64 %51 to i32, !dbg !3428
  %call57 = call i32 @component_of(i32* %48, i32 %conv56), !dbg !3429
  store i32 %call57, i32* %ia, align 4, !dbg !3430
  %52 = load i32*, i32** %comp_father, align 8, !dbg !3431
  %53 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !3432
  %aux58 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %53, i32 0, i32 2, !dbg !3433
  %54 = load i8*, i8** %aux58, align 8, !dbg !3433
  %55 = ptrtoint i8* %54 to i64, !dbg !3434
  %conv59 = trunc i64 %55 to i32, !dbg !3435
  %call60 = call i32 @component_of(i32* %52, i32 %conv59), !dbg !3436
  store i32 %call60, i32* %ib, align 4, !dbg !3437
  %56 = load i32, i32* %ia, align 4, !dbg !3438
  %57 = load i32, i32* %ib, align 4, !dbg !3440
  %cmp61 = icmp eq i32 %56, %57, !dbg !3441
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !3442

if.then63:                                        ; preds = %if.end54
  br label %for.inc81, !dbg !3443

if.end64:                                         ; preds = %if.end54
  %58 = load i32*, i32** %comp_father, align 8, !dbg !3444
  %59 = load i32, i32* %n, align 4, !dbg !3445
  %call65 = call i32 @component_of(i32* %58, i32 %59), !dbg !3446
  store i32 %call65, i32* %bad, align 4, !dbg !3447
  %60 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !3448
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %60, i32 0, i32 3, !dbg !3448
  %61 = load i8, i8* %is_read, align 8, !dbg !3448
  %conv66 = zext i8 %61 to i32, !dbg !3448
  %tobool67 = icmp ne i32 %conv66, 0, !dbg !3448
  br i1 %tobool67, label %land.lhs.true, label %if.end80, !dbg !3450

land.lhs.true:                                    ; preds = %if.end64
  %62 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !3451
  %is_read68 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %62, i32 0, i32 3, !dbg !3451
  %63 = load i8, i8* %is_read68, align 8, !dbg !3451
  %conv69 = zext i8 %63 to i32, !dbg !3451
  %tobool70 = icmp ne i32 %conv69, 0, !dbg !3451
  br i1 %tobool70, label %land.lhs.true71, label %if.end80, !dbg !3452

land.lhs.true71:                                  ; preds = %land.lhs.true
  %64 = load i32, i32* %ia, align 4, !dbg !3453
  %65 = load i32, i32* %bad, align 4, !dbg !3454
  %cmp72 = icmp eq i32 %64, %65, !dbg !3455
  br i1 %cmp72, label %if.then79, label %lor.lhs.false, !dbg !3456

lor.lhs.false:                                    ; preds = %land.lhs.true71
  %66 = load i32, i32* %ib, align 4, !dbg !3457
  %67 = load i32, i32* %bad, align 4, !dbg !3458
  %cmp74 = icmp eq i32 %66, %67, !dbg !3459
  br i1 %cmp74, label %if.then79, label %lor.lhs.false76, !dbg !3460

lor.lhs.false76:                                  ; preds = %lor.lhs.false
  %68 = load %struct.data_reference*, %struct.data_reference** %dra, align 8, !dbg !3461
  %69 = load %struct.data_reference*, %struct.data_reference** %drb, align 8, !dbg !3462
  %call77 = call zeroext i8 @determine_offset(%struct.data_reference* %68, %struct.data_reference* %69, %struct.double_int* %dummy_off), !dbg !3463
  %tobool78 = icmp ne i8 %call77, 0, !dbg !3463
  br i1 %tobool78, label %if.end80, label %if.then79, !dbg !3464

if.then79:                                        ; preds = %lor.lhs.false76, %lor.lhs.false, %land.lhs.true71
  br label %for.inc81, !dbg !3465

if.end80:                                         ; preds = %lor.lhs.false76, %land.lhs.true, %if.end64
  %70 = load i32*, i32** %comp_father, align 8, !dbg !3466
  %71 = load i32*, i32** %comp_size, align 8, !dbg !3467
  %72 = load i32, i32* %ia, align 4, !dbg !3468
  %73 = load i32, i32* %ib, align 4, !dbg !3469
  call void @merge_comps(i32* %70, i32* %71, i32 %72, i32 %73), !dbg !3470
  br label %for.inc81, !dbg !3471

for.inc81:                                        ; preds = %if.end80, %if.then79, %if.then63, %if.then53
  %74 = load i32, i32* %i, align 4, !dbg !3472
  %inc82 = add i32 %74, 1, !dbg !3472
  store i32 %inc82, i32* %i, align 4, !dbg !3472
  br label %for.cond42, !dbg !3473, !llvm.loop !3474

for.end83:                                        ; preds = %cond.end47
  %75 = load i32, i32* %n, align 4, !dbg !3476
  %conv84 = zext i32 %75 to i64, !dbg !3476
  %call85 = call i8* @xcalloc(i64 %conv84, i64 8), !dbg !3476
  %76 = bitcast i8* %call85 to %struct.component**, !dbg !3476
  store %struct.component** %76, %struct.component*** %comps, align 8, !dbg !3477
  %77 = load i32*, i32** %comp_father, align 8, !dbg !3478
  %78 = load i32, i32* %n, align 4, !dbg !3479
  %call86 = call i32 @component_of(i32* %77, i32 %78), !dbg !3480
  store i32 %call86, i32* %bad, align 4, !dbg !3481
  store i32 0, i32* %i, align 4, !dbg !3482
  br label %for.cond87, !dbg !3484

for.cond87:                                       ; preds = %for.inc141, %for.end83
  %79 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !3485
  %tobool88 = icmp ne %struct.VEC_data_reference_p_heap* %79, null, !dbg !3485
  br i1 %tobool88, label %cond.true89, label %cond.false91, !dbg !3485

cond.true89:                                      ; preds = %for.cond87
  %80 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs.addr, align 8, !dbg !3485
  %base90 = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %80, i32 0, i32 0, !dbg !3485
  br label %cond.end92, !dbg !3485

cond.false91:                                     ; preds = %for.cond87
  br label %cond.end92, !dbg !3485

cond.end92:                                       ; preds = %cond.false91, %cond.true89
  %cond93 = phi %struct.VEC_data_reference_p_base* [ %base90, %cond.true89 ], [ null, %cond.false91 ], !dbg !3485
  %81 = load i32, i32* %i, align 4, !dbg !3485
  %call94 = call i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %cond93, i32 %81, %struct.data_reference** %dr), !dbg !3485
  %tobool95 = icmp ne i32 %call94, 0, !dbg !3487
  br i1 %tobool95, label %for.body96, label %for.end143, !dbg !3487

for.body96:                                       ; preds = %cond.end92
  %82 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3488
  %aux97 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %82, i32 0, i32 2, !dbg !3490
  %83 = load i8*, i8** %aux97, align 8, !dbg !3490
  %84 = ptrtoint i8* %83 to i64, !dbg !3491
  %conv98 = trunc i64 %84 to i32, !dbg !3492
  store i32 %conv98, i32* %ia, align 4, !dbg !3493
  %85 = load i32*, i32** %comp_father, align 8, !dbg !3494
  %86 = load i32, i32* %ia, align 4, !dbg !3495
  %call99 = call i32 @component_of(i32* %85, i32 %86), !dbg !3496
  store i32 %call99, i32* %ca, align 4, !dbg !3497
  %87 = load i32, i32* %ca, align 4, !dbg !3498
  %88 = load i32, i32* %bad, align 4, !dbg !3500
  %cmp100 = icmp eq i32 %87, %88, !dbg !3501
  br i1 %cmp100, label %if.then102, label %if.end103, !dbg !3502

if.then102:                                       ; preds = %for.body96
  br label %for.inc141, !dbg !3503

if.end103:                                        ; preds = %for.body96
  %89 = load %struct.component**, %struct.component*** %comps, align 8, !dbg !3504
  %90 = load i32, i32* %ca, align 4, !dbg !3505
  %idxprom104 = zext i32 %90 to i64, !dbg !3504
  %arrayidx105 = getelementptr inbounds %struct.component*, %struct.component** %89, i64 %idxprom104, !dbg !3504
  %91 = load %struct.component*, %struct.component** %arrayidx105, align 8, !dbg !3504
  store %struct.component* %91, %struct.component** %comp, align 8, !dbg !3506
  %92 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3507
  %tobool106 = icmp ne %struct.component* %92, null, !dbg !3507
  br i1 %tobool106, label %if.end114, label %if.then107, !dbg !3509

if.then107:                                       ; preds = %if.end103
  %call108 = call i8* @xcalloc(i64 1, i64 24), !dbg !3510
  %93 = bitcast i8* %call108 to %struct.component*, !dbg !3510
  store %struct.component* %93, %struct.component** %comp, align 8, !dbg !3512
  %94 = load i32*, i32** %comp_size, align 8, !dbg !3513
  %95 = load i32, i32* %ca, align 4, !dbg !3513
  %idxprom109 = zext i32 %95 to i64, !dbg !3513
  %arrayidx110 = getelementptr inbounds i32, i32* %94, i64 %idxprom109, !dbg !3513
  %96 = load i32, i32* %arrayidx110, align 4, !dbg !3513
  %call111 = call %struct.VEC_dref_heap* @VEC_dref_heap_alloc(i32 %96), !dbg !3513
  %97 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3514
  %refs = getelementptr inbounds %struct.component, %struct.component* %97, i32 0, i32 0, !dbg !3515
  store %struct.VEC_dref_heap* %call111, %struct.VEC_dref_heap** %refs, align 8, !dbg !3516
  %98 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3517
  %99 = load %struct.component**, %struct.component*** %comps, align 8, !dbg !3518
  %100 = load i32, i32* %ca, align 4, !dbg !3519
  %idxprom112 = zext i32 %100 to i64, !dbg !3518
  %arrayidx113 = getelementptr inbounds %struct.component*, %struct.component** %99, i64 %idxprom112, !dbg !3518
  store %struct.component* %98, %struct.component** %arrayidx113, align 8, !dbg !3520
  br label %if.end114, !dbg !3521

if.end114:                                        ; preds = %if.then107, %if.end103
  %call115 = call i8* @xcalloc(i64 1, i64 56), !dbg !3522
  %101 = bitcast i8* %call115 to %struct.dref_d*, !dbg !3522
  store %struct.dref_d* %101, %struct.dref_d** %dataref, align 8, !dbg !3523
  %102 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3524
  %103 = load %struct.dref_d*, %struct.dref_d** %dataref, align 8, !dbg !3525
  %ref116 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %103, i32 0, i32 0, !dbg !3526
  store %struct.data_reference* %102, %struct.data_reference** %ref116, align 8, !dbg !3527
  %104 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !3528
  %stmt = getelementptr inbounds %struct.data_reference, %struct.data_reference* %104, i32 0, i32 0, !dbg !3528
  %105 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3528
  %106 = load %struct.dref_d*, %struct.dref_d** %dataref, align 8, !dbg !3529
  %stmt117 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %106, i32 0, i32 1, !dbg !3530
  store %union.gimple_statement_d* %105, %union.gimple_statement_d** %stmt117, align 8, !dbg !3531
  %107 = load %struct.dref_d*, %struct.dref_d** %dataref, align 8, !dbg !3532
  %offset = getelementptr inbounds %struct.dref_d, %struct.dref_d* %107, i32 0, i32 4, !dbg !3533
  %call118 = call { i64, i64 } @shwi_to_double_int(i64 0), !dbg !3534
  %108 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !3534
  %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %108, i32 0, i32 0, !dbg !3534
  %110 = extractvalue { i64, i64 } %call118, 0, !dbg !3534
  store i64 %110, i64* %109, align 8, !dbg !3534
  %111 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %108, i32 0, i32 1, !dbg !3534
  %112 = extractvalue { i64, i64 } %call118, 1, !dbg !3534
  store i64 %112, i64* %111, align 8, !dbg !3534
  %113 = bitcast %struct.double_int* %offset to i8*, !dbg !3534
  %114 = bitcast %struct.double_int* %tmp to i8*, !dbg !3534
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %114, i64 16, i1 false), !dbg !3534
  %115 = load %struct.dref_d*, %struct.dref_d** %dataref, align 8, !dbg !3535
  %distance = getelementptr inbounds %struct.dref_d, %struct.dref_d* %115, i32 0, i32 3, !dbg !3536
  store i32 0, i32* %distance, align 8, !dbg !3537
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %last_always_executed, align 8, !dbg !3538
  %117 = load %struct.dref_d*, %struct.dref_d** %dataref, align 8, !dbg !3539
  %stmt119 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %117, i32 0, i32 1, !dbg !3540
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt119, align 8, !dbg !3540
  %call120 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %118), !dbg !3541
  %call121 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %116, %struct.basic_block_def* %call120), !dbg !3542
  %conv122 = zext i8 %call121 to i32, !dbg !3542
  %119 = load %struct.dref_d*, %struct.dref_d** %dataref, align 8, !dbg !3543
  %always_accessed = getelementptr inbounds %struct.dref_d, %struct.dref_d* %119, i32 0, i32 6, !dbg !3544
  %120 = trunc i32 %conv122 to i8, !dbg !3545
  %bf.load = load i8, i8* %always_accessed, align 4, !dbg !3545
  %bf.value = and i8 %120, 1, !dbg !3545
  %bf.clear = and i8 %bf.load, -2, !dbg !3545
  %bf.set = or i8 %bf.clear, %bf.value, !dbg !3545
  store i8 %bf.set, i8* %always_accessed, align 4, !dbg !3545
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !3545
  %121 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3546
  %refs123 = getelementptr inbounds %struct.component, %struct.component* %121, i32 0, i32 0, !dbg !3546
  %122 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs123, align 8, !dbg !3546
  %tobool124 = icmp ne %struct.VEC_dref_heap* %122, null, !dbg !3546
  br i1 %tobool124, label %cond.true125, label %cond.false128, !dbg !3546

cond.true125:                                     ; preds = %if.end114
  %123 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3546
  %refs126 = getelementptr inbounds %struct.component, %struct.component* %123, i32 0, i32 0, !dbg !3546
  %124 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs126, align 8, !dbg !3546
  %base127 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %124, i32 0, i32 0, !dbg !3546
  br label %cond.end129, !dbg !3546

cond.false128:                                    ; preds = %if.end114
  br label %cond.end129, !dbg !3546

cond.end129:                                      ; preds = %cond.false128, %cond.true125
  %cond130 = phi %struct.VEC_dref_base* [ %base127, %cond.true125 ], [ null, %cond.false128 ], !dbg !3546
  %call131 = call i32 @VEC_dref_base_length(%struct.VEC_dref_base* %cond130), !dbg !3546
  %125 = load %struct.dref_d*, %struct.dref_d** %dataref, align 8, !dbg !3547
  %pos = getelementptr inbounds %struct.dref_d, %struct.dref_d* %125, i32 0, i32 5, !dbg !3548
  store i32 %call131, i32* %pos, align 8, !dbg !3549
  %126 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3550
  %refs132 = getelementptr inbounds %struct.component, %struct.component* %126, i32 0, i32 0, !dbg !3550
  %127 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs132, align 8, !dbg !3550
  %tobool133 = icmp ne %struct.VEC_dref_heap* %127, null, !dbg !3550
  br i1 %tobool133, label %cond.true134, label %cond.false137, !dbg !3550

cond.true134:                                     ; preds = %cond.end129
  %128 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3550
  %refs135 = getelementptr inbounds %struct.component, %struct.component* %128, i32 0, i32 0, !dbg !3550
  %129 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs135, align 8, !dbg !3550
  %base136 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %129, i32 0, i32 0, !dbg !3550
  br label %cond.end138, !dbg !3550

cond.false137:                                    ; preds = %cond.end129
  br label %cond.end138, !dbg !3550

cond.end138:                                      ; preds = %cond.false137, %cond.true134
  %cond139 = phi %struct.VEC_dref_base* [ %base136, %cond.true134 ], [ null, %cond.false137 ], !dbg !3550
  %130 = load %struct.dref_d*, %struct.dref_d** %dataref, align 8, !dbg !3550
  %call140 = call %struct.dref_d** @VEC_dref_base_quick_push(%struct.VEC_dref_base* %cond139, %struct.dref_d* %130), !dbg !3550
  br label %for.inc141, !dbg !3551

for.inc141:                                       ; preds = %cond.end138, %if.then102
  %131 = load i32, i32* %i, align 4, !dbg !3552
  %inc142 = add i32 %131, 1, !dbg !3552
  store i32 %inc142, i32* %i, align 4, !dbg !3552
  br label %for.cond87, !dbg !3553, !llvm.loop !3554

for.end143:                                       ; preds = %cond.end92
  store i32 0, i32* %i, align 4, !dbg !3556
  br label %for.cond144, !dbg !3558

for.cond144:                                      ; preds = %for.inc153, %for.end143
  %132 = load i32, i32* %i, align 4, !dbg !3559
  %133 = load i32, i32* %n, align 4, !dbg !3561
  %cmp145 = icmp ult i32 %132, %133, !dbg !3562
  br i1 %cmp145, label %for.body147, label %for.end155, !dbg !3563

for.body147:                                      ; preds = %for.cond144
  %134 = load %struct.component**, %struct.component*** %comps, align 8, !dbg !3564
  %135 = load i32, i32* %i, align 4, !dbg !3566
  %idxprom148 = zext i32 %135 to i64, !dbg !3564
  %arrayidx149 = getelementptr inbounds %struct.component*, %struct.component** %134, i64 %idxprom148, !dbg !3564
  %136 = load %struct.component*, %struct.component** %arrayidx149, align 8, !dbg !3564
  store %struct.component* %136, %struct.component** %comp, align 8, !dbg !3567
  %137 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3568
  %tobool150 = icmp ne %struct.component* %137, null, !dbg !3568
  br i1 %tobool150, label %if.then151, label %if.end152, !dbg !3570

if.then151:                                       ; preds = %for.body147
  %138 = load %struct.component*, %struct.component** %comp_list, align 8, !dbg !3571
  %139 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3573
  %next = getelementptr inbounds %struct.component, %struct.component* %139, i32 0, i32 2, !dbg !3574
  store %struct.component* %138, %struct.component** %next, align 8, !dbg !3575
  %140 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3576
  store %struct.component* %140, %struct.component** %comp_list, align 8, !dbg !3577
  br label %if.end152, !dbg !3578

if.end152:                                        ; preds = %if.then151, %for.body147
  br label %for.inc153, !dbg !3579

for.inc153:                                       ; preds = %if.end152
  %141 = load i32, i32* %i, align 4, !dbg !3580
  %inc154 = add i32 %141, 1, !dbg !3580
  store i32 %inc154, i32* %i, align 4, !dbg !3580
  br label %for.cond144, !dbg !3581, !llvm.loop !3582

for.end155:                                       ; preds = %for.cond144
  %142 = load %struct.component**, %struct.component*** %comps, align 8, !dbg !3584
  %143 = bitcast %struct.component** %142 to i8*, !dbg !3584
  call void @free(i8* %143), !dbg !3585
  br label %end, !dbg !3585

end:                                              ; preds = %for.end155, %if.then
  call void @llvm.dbg.label(metadata !3586), !dbg !3587
  %144 = load i32*, i32** %comp_father, align 8, !dbg !3588
  %145 = bitcast i32* %144 to i8*, !dbg !3588
  call void @free(i8* %145), !dbg !3589
  %146 = load i32*, i32** %comp_size, align 8, !dbg !3590
  %147 = bitcast i32* %146 to i8*, !dbg !3590
  call void @free(i8* %147), !dbg !3591
  %148 = load %struct.component*, %struct.component** %comp_list, align 8, !dbg !3592
  ret %struct.component* %148, !dbg !3593
}

declare dso_local void @free_dependence_relations(%struct.VEC_ddr_p_heap*) #2

declare dso_local void @free_data_refs(%struct.VEC_data_reference_p_heap*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.component* @filter_suitable_components(%struct.loop* %loop, %struct.component* %comps) #0 !dbg !3594 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %comps.addr = alloca %struct.component*, align 8
  %comp = alloca %struct.component**, align 8
  %act = alloca %struct.component*, align 8
  %ref = alloca %struct.dref_d*, align 8
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3597, metadata !DIExpression()), !dbg !3598
  store %struct.component* %comps, %struct.component** %comps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.component** %comps.addr, metadata !3599, metadata !DIExpression()), !dbg !3600
  call void @llvm.dbg.declare(metadata %struct.component*** %comp, metadata !3601, metadata !DIExpression()), !dbg !3602
  call void @llvm.dbg.declare(metadata %struct.component** %act, metadata !3603, metadata !DIExpression()), !dbg !3604
  store %struct.component** %comps.addr, %struct.component*** %comp, align 8, !dbg !3605
  br label %for.cond, !dbg !3607

for.cond:                                         ; preds = %if.end, %entry
  %0 = load %struct.component**, %struct.component*** %comp, align 8, !dbg !3608
  %1 = load %struct.component*, %struct.component** %0, align 8, !dbg !3610
  %tobool = icmp ne %struct.component* %1, null, !dbg !3611
  br i1 %tobool, label %for.body, label %for.end9, !dbg !3611

for.body:                                         ; preds = %for.cond
  %2 = load %struct.component**, %struct.component*** %comp, align 8, !dbg !3612
  %3 = load %struct.component*, %struct.component** %2, align 8, !dbg !3614
  store %struct.component* %3, %struct.component** %act, align 8, !dbg !3615
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3616
  %5 = load %struct.component*, %struct.component** %act, align 8, !dbg !3618
  %call = call zeroext i8 @suitable_component_p(%struct.loop* %4, %struct.component* %5), !dbg !3619
  %tobool1 = icmp ne i8 %call, 0, !dbg !3619
  br i1 %tobool1, label %if.then, label %if.else, !dbg !3620

if.then:                                          ; preds = %for.body
  %6 = load %struct.component*, %struct.component** %act, align 8, !dbg !3621
  %next = getelementptr inbounds %struct.component, %struct.component* %6, i32 0, i32 2, !dbg !3622
  store %struct.component** %next, %struct.component*** %comp, align 8, !dbg !3623
  br label %if.end, !dbg !3624

if.else:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.dref_d** %ref, metadata !3625, metadata !DIExpression()), !dbg !3627
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3628, metadata !DIExpression()), !dbg !3629
  %7 = load %struct.component*, %struct.component** %act, align 8, !dbg !3630
  %next2 = getelementptr inbounds %struct.component, %struct.component* %7, i32 0, i32 2, !dbg !3631
  %8 = load %struct.component*, %struct.component** %next2, align 8, !dbg !3631
  %9 = load %struct.component**, %struct.component*** %comp, align 8, !dbg !3632
  store %struct.component* %8, %struct.component** %9, align 8, !dbg !3633
  store i32 0, i32* %i, align 4, !dbg !3634
  br label %for.cond3, !dbg !3636

for.cond3:                                        ; preds = %for.inc, %if.else
  %10 = load %struct.component*, %struct.component** %act, align 8, !dbg !3637
  %refs = getelementptr inbounds %struct.component, %struct.component* %10, i32 0, i32 0, !dbg !3637
  %11 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !3637
  %tobool4 = icmp ne %struct.VEC_dref_heap* %11, null, !dbg !3637
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !3637

cond.true:                                        ; preds = %for.cond3
  %12 = load %struct.component*, %struct.component** %act, align 8, !dbg !3637
  %refs5 = getelementptr inbounds %struct.component, %struct.component* %12, i32 0, i32 0, !dbg !3637
  %13 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs5, align 8, !dbg !3637
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %13, i32 0, i32 0, !dbg !3637
  br label %cond.end, !dbg !3637

cond.false:                                       ; preds = %for.cond3
  br label %cond.end, !dbg !3637

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3637
  %14 = load i32, i32* %i, align 4, !dbg !3637
  %call6 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond, i32 %14, %struct.dref_d** %ref), !dbg !3637
  %tobool7 = icmp ne i32 %call6, 0, !dbg !3639
  br i1 %tobool7, label %for.body8, label %for.end, !dbg !3639

for.body8:                                        ; preds = %cond.end
  %15 = load %struct.dref_d*, %struct.dref_d** %ref, align 8, !dbg !3640
  %16 = bitcast %struct.dref_d* %15 to i8*, !dbg !3640
  call void @free(i8* %16), !dbg !3641
  br label %for.inc, !dbg !3641

for.inc:                                          ; preds = %for.body8
  %17 = load i32, i32* %i, align 4, !dbg !3642
  %inc = add i32 %17, 1, !dbg !3642
  store i32 %inc, i32* %i, align 4, !dbg !3642
  br label %for.cond3, !dbg !3643, !llvm.loop !3644

for.end:                                          ; preds = %cond.end
  %18 = load %struct.component*, %struct.component** %act, align 8, !dbg !3646
  call void @release_component(%struct.component* %18), !dbg !3647
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  br label %for.cond, !dbg !3648, !llvm.loop !3649

for.end9:                                         ; preds = %for.cond
  %19 = load %struct.component*, %struct.component** %comps.addr, align 8, !dbg !3651
  ret %struct.component* %19, !dbg !3652
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @determine_roots(%struct.loop* %loop, %struct.component* %comps, %struct.VEC_chain_p_heap** %chains) #0 !dbg !3653 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %comps.addr = alloca %struct.component*, align 8
  %chains.addr = alloca %struct.VEC_chain_p_heap**, align 8
  %comp = alloca %struct.component*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3657, metadata !DIExpression()), !dbg !3658
  store %struct.component* %comps, %struct.component** %comps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.component** %comps.addr, metadata !3659, metadata !DIExpression()), !dbg !3660
  store %struct.VEC_chain_p_heap** %chains, %struct.VEC_chain_p_heap*** %chains.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap*** %chains.addr, metadata !3661, metadata !DIExpression()), !dbg !3662
  call void @llvm.dbg.declare(metadata %struct.component** %comp, metadata !3663, metadata !DIExpression()), !dbg !3664
  %0 = load %struct.component*, %struct.component** %comps.addr, align 8, !dbg !3665
  store %struct.component* %0, %struct.component** %comp, align 8, !dbg !3667
  br label %for.cond, !dbg !3668

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3669
  %tobool = icmp ne %struct.component* %1, null, !dbg !3671
  br i1 %tobool, label %for.body, label %for.end, !dbg !3671

for.body:                                         ; preds = %for.cond
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3672
  %3 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3673
  %4 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %chains.addr, align 8, !dbg !3674
  call void @determine_roots_comp(%struct.loop* %2, %struct.component* %3, %struct.VEC_chain_p_heap** %4), !dbg !3675
  br label %for.inc, !dbg !3675

for.inc:                                          ; preds = %for.body
  %5 = load %struct.component*, %struct.component** %comp, align 8, !dbg !3676
  %next = getelementptr inbounds %struct.component, %struct.component* %5, i32 0, i32 2, !dbg !3677
  %6 = load %struct.component*, %struct.component** %next, align 8, !dbg !3677
  store %struct.component* %6, %struct.component** %comp, align 8, !dbg !3678
  br label %for.cond, !dbg !3679, !llvm.loop !3680

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3682
}

; Function Attrs: noinline nounwind uwtable
define internal void @release_components(%struct.component* %comps) #0 !dbg !3683 {
entry:
  %comps.addr = alloca %struct.component*, align 8
  %act = alloca %struct.component*, align 8
  %next = alloca %struct.component*, align 8
  store %struct.component* %comps, %struct.component** %comps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.component** %comps.addr, metadata !3686, metadata !DIExpression()), !dbg !3687
  call void @llvm.dbg.declare(metadata %struct.component** %act, metadata !3688, metadata !DIExpression()), !dbg !3689
  call void @llvm.dbg.declare(metadata %struct.component** %next, metadata !3690, metadata !DIExpression()), !dbg !3691
  %0 = load %struct.component*, %struct.component** %comps.addr, align 8, !dbg !3692
  store %struct.component* %0, %struct.component** %act, align 8, !dbg !3694
  br label %for.cond, !dbg !3695

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.component*, %struct.component** %act, align 8, !dbg !3696
  %tobool = icmp ne %struct.component* %1, null, !dbg !3698
  br i1 %tobool, label %for.body, label %for.end, !dbg !3698

for.body:                                         ; preds = %for.cond
  %2 = load %struct.component*, %struct.component** %act, align 8, !dbg !3699
  %next1 = getelementptr inbounds %struct.component, %struct.component* %2, i32 0, i32 2, !dbg !3701
  %3 = load %struct.component*, %struct.component** %next1, align 8, !dbg !3701
  store %struct.component* %3, %struct.component** %next, align 8, !dbg !3702
  %4 = load %struct.component*, %struct.component** %act, align 8, !dbg !3703
  call void @release_component(%struct.component* %4), !dbg !3704
  br label %for.inc, !dbg !3705

for.inc:                                          ; preds = %for.body
  %5 = load %struct.component*, %struct.component** %next, align 8, !dbg !3706
  store %struct.component* %5, %struct.component** %act, align 8, !dbg !3707
  br label %for.cond, !dbg !3708, !llvm.loop !3709

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3711
}

; Function Attrs: noinline nounwind uwtable
define internal void @prepare_initializers(%struct.loop* %loop, %struct.VEC_chain_p_heap* %chains) #0 !dbg !3712 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chains.addr = alloca %struct.VEC_chain_p_heap*, align 8
  %chain = alloca %struct.chain*, align 8
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3715, metadata !DIExpression()), !dbg !3716
  store %struct.VEC_chain_p_heap* %chains, %struct.VEC_chain_p_heap** %chains.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap** %chains.addr, metadata !3717, metadata !DIExpression()), !dbg !3718
  call void @llvm.dbg.declare(metadata %struct.chain** %chain, metadata !3719, metadata !DIExpression()), !dbg !3720
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3721, metadata !DIExpression()), !dbg !3722
  store i32 0, i32* %i, align 4, !dbg !3723
  br label %for.cond, !dbg !3725

for.cond:                                         ; preds = %if.end, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3726
  %1 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !3728
  %tobool = icmp ne %struct.VEC_chain_p_heap* %1, null, !dbg !3728
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3728

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !3728
  %base = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %2, i32 0, i32 0, !dbg !3728
  br label %cond.end, !dbg !3728

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3728

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_chain_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3728
  %call = call i32 @VEC_chain_p_base_length(%struct.VEC_chain_p_base* %cond), !dbg !3728
  %cmp = icmp ult i32 %0, %call, !dbg !3729
  br i1 %cmp, label %for.body, label %for.end, !dbg !3730

for.body:                                         ; preds = %cond.end
  %3 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !3731
  %tobool1 = icmp ne %struct.VEC_chain_p_heap* %3, null, !dbg !3731
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3731

cond.true2:                                       ; preds = %for.body
  %4 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !3731
  %base3 = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %4, i32 0, i32 0, !dbg !3731
  br label %cond.end5, !dbg !3731

cond.false4:                                      ; preds = %for.body
  br label %cond.end5, !dbg !3731

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_chain_p_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !3731
  %5 = load i32, i32* %i, align 4, !dbg !3731
  %call7 = call %struct.chain* @VEC_chain_p_base_index(%struct.VEC_chain_p_base* %cond6, i32 %5), !dbg !3731
  store %struct.chain* %call7, %struct.chain** %chain, align 8, !dbg !3733
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3734
  %7 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !3736
  %call8 = call zeroext i8 @prepare_initializers_chain(%struct.loop* %6, %struct.chain* %7), !dbg !3737
  %tobool9 = icmp ne i8 %call8, 0, !dbg !3737
  br i1 %tobool9, label %if.then, label %if.else, !dbg !3738

if.then:                                          ; preds = %cond.end5
  %8 = load i32, i32* %i, align 4, !dbg !3739
  %inc = add i32 %8, 1, !dbg !3739
  store i32 %inc, i32* %i, align 4, !dbg !3739
  br label %if.end, !dbg !3740

if.else:                                          ; preds = %cond.end5
  %9 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !3741
  call void @release_chain(%struct.chain* %9), !dbg !3743
  %10 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !3744
  %tobool10 = icmp ne %struct.VEC_chain_p_heap* %10, null, !dbg !3744
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !3744

cond.true11:                                      ; preds = %if.else
  %11 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !3744
  %base12 = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %11, i32 0, i32 0, !dbg !3744
  br label %cond.end14, !dbg !3744

cond.false13:                                     ; preds = %if.else
  br label %cond.end14, !dbg !3744

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_chain_p_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !3744
  %12 = load i32, i32* %i, align 4, !dbg !3744
  %call16 = call %struct.chain* @VEC_chain_p_base_unordered_remove(%struct.VEC_chain_p_base* %cond15, i32 %12), !dbg !3744
  br label %if.end

if.end:                                           ; preds = %cond.end14, %if.then
  br label %for.cond, !dbg !3745, !llvm.loop !3746

for.end:                                          ; preds = %cond.end
  ret void, !dbg !3748
}

; Function Attrs: noinline nounwind uwtable
define internal void @try_combine_chains(%struct.VEC_chain_p_heap** %chains) #0 !dbg !3749 {
entry:
  %chains.addr = alloca %struct.VEC_chain_p_heap**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ch1 = alloca %struct.chain*, align 8
  %ch2 = alloca %struct.chain*, align 8
  %cch = alloca %struct.chain*, align 8
  %worklist = alloca %struct.VEC_chain_p_heap*, align 8
  store %struct.VEC_chain_p_heap** %chains, %struct.VEC_chain_p_heap*** %chains.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap*** %chains.addr, metadata !3752, metadata !DIExpression()), !dbg !3753
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3754, metadata !DIExpression()), !dbg !3755
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3756, metadata !DIExpression()), !dbg !3757
  call void @llvm.dbg.declare(metadata %struct.chain** %ch1, metadata !3758, metadata !DIExpression()), !dbg !3759
  call void @llvm.dbg.declare(metadata %struct.chain** %ch2, metadata !3760, metadata !DIExpression()), !dbg !3761
  call void @llvm.dbg.declare(metadata %struct.chain** %cch, metadata !3762, metadata !DIExpression()), !dbg !3763
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap** %worklist, metadata !3764, metadata !DIExpression()), !dbg !3765
  store %struct.VEC_chain_p_heap* null, %struct.VEC_chain_p_heap** %worklist, align 8, !dbg !3765
  store i32 0, i32* %i, align 4, !dbg !3766
  br label %for.cond, !dbg !3768

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %chains.addr, align 8, !dbg !3769
  %1 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %0, align 8, !dbg !3769
  %tobool = icmp ne %struct.VEC_chain_p_heap* %1, null, !dbg !3769
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3769

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %chains.addr, align 8, !dbg !3769
  %3 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %2, align 8, !dbg !3769
  %base = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %3, i32 0, i32 0, !dbg !3769
  br label %cond.end, !dbg !3769

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3769

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_chain_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3769
  %4 = load i32, i32* %i, align 4, !dbg !3769
  %call = call i32 @VEC_chain_p_base_iterate(%struct.VEC_chain_p_base* %cond, i32 %4, %struct.chain** %ch1), !dbg !3769
  %tobool1 = icmp ne i32 %call, 0, !dbg !3771
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3771

for.body:                                         ; preds = %cond.end
  %5 = load %struct.chain*, %struct.chain** %ch1, align 8, !dbg !3772
  %call2 = call zeroext i8 @chain_can_be_combined_p(%struct.chain* %5), !dbg !3774
  %tobool3 = icmp ne i8 %call2, 0, !dbg !3774
  br i1 %tobool3, label %if.then, label %if.end, !dbg !3775

if.then:                                          ; preds = %for.body
  %6 = load %struct.chain*, %struct.chain** %ch1, align 8, !dbg !3776
  %call4 = call %struct.chain** @VEC_chain_p_heap_safe_push(%struct.VEC_chain_p_heap** %worklist, %struct.chain* %6), !dbg !3776
  br label %if.end, !dbg !3776

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3777

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4, !dbg !3778
  %inc = add i32 %7, 1, !dbg !3778
  store i32 %inc, i32* %i, align 4, !dbg !3778
  br label %for.cond, !dbg !3779, !llvm.loop !3780

for.end:                                          ; preds = %cond.end
  br label %while.cond, !dbg !3782

while.cond:                                       ; preds = %for.end45, %if.then21, %for.end
  %8 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %worklist, align 8, !dbg !3783
  %tobool5 = icmp ne %struct.VEC_chain_p_heap* %8, null, !dbg !3783
  br i1 %tobool5, label %cond.true6, label %cond.false8, !dbg !3783

cond.true6:                                       ; preds = %while.cond
  %9 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %worklist, align 8, !dbg !3783
  %base7 = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %9, i32 0, i32 0, !dbg !3783
  br label %cond.end9, !dbg !3783

cond.false8:                                      ; preds = %while.cond
  br label %cond.end9, !dbg !3783

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.VEC_chain_p_base* [ %base7, %cond.true6 ], [ null, %cond.false8 ], !dbg !3783
  %call11 = call i32 @VEC_chain_p_base_length(%struct.VEC_chain_p_base* %cond10), !dbg !3783
  %cmp = icmp eq i32 %call11, 0, !dbg !3783
  %lnot = xor i1 %cmp, true, !dbg !3784
  br i1 %lnot, label %while.body, label %while.end, !dbg !3782

while.body:                                       ; preds = %cond.end9
  %10 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %worklist, align 8, !dbg !3785
  %tobool12 = icmp ne %struct.VEC_chain_p_heap* %10, null, !dbg !3785
  br i1 %tobool12, label %cond.true13, label %cond.false15, !dbg !3785

cond.true13:                                      ; preds = %while.body
  %11 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %worklist, align 8, !dbg !3785
  %base14 = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %11, i32 0, i32 0, !dbg !3785
  br label %cond.end16, !dbg !3785

cond.false15:                                     ; preds = %while.body
  br label %cond.end16, !dbg !3785

cond.end16:                                       ; preds = %cond.false15, %cond.true13
  %cond17 = phi %struct.VEC_chain_p_base* [ %base14, %cond.true13 ], [ null, %cond.false15 ], !dbg !3785
  %call18 = call %struct.chain* @VEC_chain_p_base_pop(%struct.VEC_chain_p_base* %cond17), !dbg !3785
  store %struct.chain* %call18, %struct.chain** %ch1, align 8, !dbg !3787
  %12 = load %struct.chain*, %struct.chain** %ch1, align 8, !dbg !3788
  %call19 = call zeroext i8 @chain_can_be_combined_p(%struct.chain* %12), !dbg !3790
  %tobool20 = icmp ne i8 %call19, 0, !dbg !3790
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !3791

if.then21:                                        ; preds = %cond.end16
  br label %while.cond, !dbg !3792, !llvm.loop !3793

if.end22:                                         ; preds = %cond.end16
  store i32 0, i32* %j, align 4, !dbg !3795
  br label %for.cond23, !dbg !3797

for.cond23:                                       ; preds = %for.inc43, %if.end22
  %13 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %chains.addr, align 8, !dbg !3798
  %14 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %13, align 8, !dbg !3798
  %tobool24 = icmp ne %struct.VEC_chain_p_heap* %14, null, !dbg !3798
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !3798

cond.true25:                                      ; preds = %for.cond23
  %15 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %chains.addr, align 8, !dbg !3798
  %16 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %15, align 8, !dbg !3798
  %base26 = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %16, i32 0, i32 0, !dbg !3798
  br label %cond.end28, !dbg !3798

cond.false27:                                     ; preds = %for.cond23
  br label %cond.end28, !dbg !3798

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.VEC_chain_p_base* [ %base26, %cond.true25 ], [ null, %cond.false27 ], !dbg !3798
  %17 = load i32, i32* %j, align 4, !dbg !3798
  %call30 = call i32 @VEC_chain_p_base_iterate(%struct.VEC_chain_p_base* %cond29, i32 %17, %struct.chain** %ch2), !dbg !3798
  %tobool31 = icmp ne i32 %call30, 0, !dbg !3800
  br i1 %tobool31, label %for.body32, label %for.end45, !dbg !3800

for.body32:                                       ; preds = %cond.end28
  %18 = load %struct.chain*, %struct.chain** %ch2, align 8, !dbg !3801
  %call33 = call zeroext i8 @chain_can_be_combined_p(%struct.chain* %18), !dbg !3804
  %tobool34 = icmp ne i8 %call33, 0, !dbg !3804
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !3805

if.then35:                                        ; preds = %for.body32
  br label %for.inc43, !dbg !3806

if.end36:                                         ; preds = %for.body32
  %19 = load %struct.chain*, %struct.chain** %ch1, align 8, !dbg !3807
  %20 = load %struct.chain*, %struct.chain** %ch2, align 8, !dbg !3808
  %call37 = call %struct.chain* @combine_chains(%struct.chain* %19, %struct.chain* %20), !dbg !3809
  store %struct.chain* %call37, %struct.chain** %cch, align 8, !dbg !3810
  %21 = load %struct.chain*, %struct.chain** %cch, align 8, !dbg !3811
  %tobool38 = icmp ne %struct.chain* %21, null, !dbg !3811
  br i1 %tobool38, label %if.then39, label %if.end42, !dbg !3813

if.then39:                                        ; preds = %if.end36
  %22 = load %struct.chain*, %struct.chain** %cch, align 8, !dbg !3814
  %call40 = call %struct.chain** @VEC_chain_p_heap_safe_push(%struct.VEC_chain_p_heap** %worklist, %struct.chain* %22), !dbg !3814
  %23 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %chains.addr, align 8, !dbg !3816
  %24 = load %struct.chain*, %struct.chain** %cch, align 8, !dbg !3816
  %call41 = call %struct.chain** @VEC_chain_p_heap_safe_push(%struct.VEC_chain_p_heap** %23, %struct.chain* %24), !dbg !3816
  br label %for.end45, !dbg !3817

if.end42:                                         ; preds = %if.end36
  br label %for.inc43, !dbg !3818

for.inc43:                                        ; preds = %if.end42, %if.then35
  %25 = load i32, i32* %j, align 4, !dbg !3819
  %inc44 = add i32 %25, 1, !dbg !3819
  store i32 %inc44, i32* %j, align 4, !dbg !3819
  br label %for.cond23, !dbg !3820, !llvm.loop !3821

for.end45:                                        ; preds = %if.then39, %cond.end28
  br label %while.cond, !dbg !3782, !llvm.loop !3793

while.end:                                        ; preds = %cond.end9
  ret void, !dbg !3823
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @determine_unroll_factor(%struct.VEC_chain_p_heap* %chains) #0 !dbg !3824 {
entry:
  %chains.addr = alloca %struct.VEC_chain_p_heap*, align 8
  %chain = alloca %struct.chain*, align 8
  %factor = alloca i32, align 4
  %af = alloca i32, align 4
  %nfactor = alloca i32, align 4
  %i = alloca i32, align 4
  %max = alloca i32, align 4
  store %struct.VEC_chain_p_heap* %chains, %struct.VEC_chain_p_heap** %chains.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap** %chains.addr, metadata !3827, metadata !DIExpression()), !dbg !3828
  call void @llvm.dbg.declare(metadata %struct.chain** %chain, metadata !3829, metadata !DIExpression()), !dbg !3830
  call void @llvm.dbg.declare(metadata i32* %factor, metadata !3831, metadata !DIExpression()), !dbg !3832
  store i32 1, i32* %factor, align 4, !dbg !3832
  call void @llvm.dbg.declare(metadata i32* %af, metadata !3833, metadata !DIExpression()), !dbg !3834
  call void @llvm.dbg.declare(metadata i32* %nfactor, metadata !3835, metadata !DIExpression()), !dbg !3836
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3837, metadata !DIExpression()), !dbg !3838
  call void @llvm.dbg.declare(metadata i32* %max, metadata !3839, metadata !DIExpression()), !dbg !3840
  %0 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3841
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %0, i64 28, !dbg !3841
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3841
  %1 = load i32, i32* %value, align 8, !dbg !3841
  store i32 %1, i32* %max, align 4, !dbg !3840
  store i32 0, i32* %i, align 4, !dbg !3842
  br label %for.cond, !dbg !3844

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !3845
  %tobool = icmp ne %struct.VEC_chain_p_heap* %2, null, !dbg !3845
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3845

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !3845
  %base = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %3, i32 0, i32 0, !dbg !3845
  br label %cond.end, !dbg !3845

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3845

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_chain_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3845
  %4 = load i32, i32* %i, align 4, !dbg !3845
  %call = call i32 @VEC_chain_p_base_iterate(%struct.VEC_chain_p_base* %cond, i32 %4, %struct.chain** %chain), !dbg !3845
  %tobool1 = icmp ne i32 %call, 0, !dbg !3847
  br i1 %tobool1, label %for.body, label %for.end, !dbg !3847

for.body:                                         ; preds = %cond.end
  %5 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !3848
  %type = getelementptr inbounds %struct.chain, %struct.chain* %5, i32 0, i32 0, !dbg !3851
  %6 = load i32, i32* %type, align 8, !dbg !3851
  %cmp = icmp eq i32 %6, 0, !dbg !3852
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3853

lor.lhs.false:                                    ; preds = %for.body
  %7 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !3854
  %combined = getelementptr inbounds %struct.chain, %struct.chain* %7, i32 0, i32 9, !dbg !3855
  %bf.load = load i8, i8* %combined, align 8, !dbg !3855
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !3855
  %bf.clear = and i8 %bf.lshr, 1, !dbg !3855
  %bf.cast = zext i8 %bf.clear to i32, !dbg !3855
  %tobool2 = icmp ne i32 %bf.cast, 0, !dbg !3854
  br i1 %tobool2, label %if.then, label %if.end, !dbg !3856

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc, !dbg !3857

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !3858
  %length = getelementptr inbounds %struct.chain, %struct.chain* %8, i32 0, i32 6, !dbg !3859
  %9 = load i32, i32* %length, align 8, !dbg !3859
  store i32 %9, i32* %af, align 4, !dbg !3860
  %10 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !3861
  %has_max_use_after = getelementptr inbounds %struct.chain, %struct.chain* %10, i32 0, i32 9, !dbg !3863
  %bf.load3 = load i8, i8* %has_max_use_after, align 8, !dbg !3863
  %bf.clear4 = and i8 %bf.load3, 1, !dbg !3863
  %bf.cast5 = zext i8 %bf.clear4 to i32, !dbg !3863
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !3861
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !3864

if.then7:                                         ; preds = %if.end
  %11 = load i32, i32* %af, align 4, !dbg !3865
  %inc = add i32 %11, 1, !dbg !3865
  store i32 %inc, i32* %af, align 4, !dbg !3865
  br label %if.end8, !dbg !3866

if.end8:                                          ; preds = %if.then7, %if.end
  %12 = load i32, i32* %factor, align 4, !dbg !3867
  %13 = load i32, i32* %af, align 4, !dbg !3868
  %mul = mul i32 %12, %13, !dbg !3869
  %14 = load i32, i32* %factor, align 4, !dbg !3870
  %15 = load i32, i32* %af, align 4, !dbg !3871
  %call9 = call i32 @gcd(i32 %14, i32 %15), !dbg !3872
  %div = udiv i32 %mul, %call9, !dbg !3873
  store i32 %div, i32* %nfactor, align 4, !dbg !3874
  %16 = load i32, i32* %nfactor, align 4, !dbg !3875
  %17 = load i32, i32* %max, align 4, !dbg !3877
  %cmp10 = icmp ule i32 %16, %17, !dbg !3878
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !3879

if.then11:                                        ; preds = %if.end8
  %18 = load i32, i32* %nfactor, align 4, !dbg !3880
  store i32 %18, i32* %factor, align 4, !dbg !3881
  br label %if.end12, !dbg !3882

if.end12:                                         ; preds = %if.then11, %if.end8
  br label %for.inc, !dbg !3883

for.inc:                                          ; preds = %if.end12, %if.then
  %19 = load i32, i32* %i, align 4, !dbg !3884
  %inc13 = add i32 %19, 1, !dbg !3884
  store i32 %inc13, i32* %i, align 4, !dbg !3884
  br label %for.cond, !dbg !3885, !llvm.loop !3886

for.end:                                          ; preds = %cond.end
  %20 = load i32, i32* %factor, align 4, !dbg !3888
  ret i32 %20, !dbg !3889
}

declare dso_local zeroext i8 @can_unroll_loop_p(%struct.loop*, i32, %struct.tree_niter_desc*) #2

declare dso_local %struct.edge_def* @single_dom_exit(%struct.loop*) #2

declare dso_local void @update_ssa(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @replace_phis_by_defined_names(%struct.VEC_chain_p_heap* %chains) #0 !dbg !3890 {
entry:
  %chains.addr = alloca %struct.VEC_chain_p_heap*, align 8
  %chain = alloca %struct.chain*, align 8
  %a = alloca %struct.dref_d*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.VEC_chain_p_heap* %chains, %struct.VEC_chain_p_heap** %chains.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap** %chains.addr, metadata !3893, metadata !DIExpression()), !dbg !3894
  call void @llvm.dbg.declare(metadata %struct.chain** %chain, metadata !3895, metadata !DIExpression()), !dbg !3896
  call void @llvm.dbg.declare(metadata %struct.dref_d** %a, metadata !3897, metadata !DIExpression()), !dbg !3898
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3899, metadata !DIExpression()), !dbg !3900
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3901, metadata !DIExpression()), !dbg !3902
  store i32 0, i32* %i, align 4, !dbg !3903
  br label %for.cond, !dbg !3905

for.cond:                                         ; preds = %for.inc18, %entry
  %0 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !3906
  %tobool = icmp ne %struct.VEC_chain_p_heap* %0, null, !dbg !3906
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3906

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !3906
  %base = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %1, i32 0, i32 0, !dbg !3906
  br label %cond.end, !dbg !3906

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !3906

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_chain_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3906
  %2 = load i32, i32* %i, align 4, !dbg !3906
  %call = call i32 @VEC_chain_p_base_iterate(%struct.VEC_chain_p_base* %cond, i32 %2, %struct.chain** %chain), !dbg !3906
  %tobool1 = icmp ne i32 %call, 0, !dbg !3908
  br i1 %tobool1, label %for.body, label %for.end20, !dbg !3908

for.body:                                         ; preds = %cond.end
  store i32 0, i32* %j, align 4, !dbg !3909
  br label %for.cond2, !dbg !3911

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !3912
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %3, i32 0, i32 5, !dbg !3912
  %4 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !3912
  %tobool3 = icmp ne %struct.VEC_dref_heap* %4, null, !dbg !3912
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !3912

cond.true4:                                       ; preds = %for.cond2
  %5 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !3912
  %refs5 = getelementptr inbounds %struct.chain, %struct.chain* %5, i32 0, i32 5, !dbg !3912
  %6 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs5, align 8, !dbg !3912
  %base6 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %6, i32 0, i32 0, !dbg !3912
  br label %cond.end8, !dbg !3912

cond.false7:                                      ; preds = %for.cond2
  br label %cond.end8, !dbg !3912

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_dref_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !3912
  %7 = load i32, i32* %j, align 4, !dbg !3912
  %call10 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond9, i32 %7, %struct.dref_d** %a), !dbg !3912
  %tobool11 = icmp ne i32 %call10, 0, !dbg !3914
  br i1 %tobool11, label %for.body12, label %for.end, !dbg !3914

for.body12:                                       ; preds = %cond.end8
  %8 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !3915
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %8, i32 0, i32 1, !dbg !3918
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3918
  %call13 = call i32 @gimple_code(%union.gimple_statement_d* %9), !dbg !3919
  %cmp = icmp eq i32 %call13, 16, !dbg !3920
  br i1 %cmp, label %if.then, label %if.end, !dbg !3921

if.then:                                          ; preds = %for.body12
  %10 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !3922
  %stmt14 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %10, i32 0, i32 1, !dbg !3922
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt14, align 8, !dbg !3922
  %call15 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %11), !dbg !3922
  %call16 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call15), !dbg !3922
  %12 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !3924
  %name_defined_by_phi = getelementptr inbounds %struct.dref_d, %struct.dref_d* %12, i32 0, i32 2, !dbg !3925
  store %union.tree_node* %call16, %union.tree_node** %name_defined_by_phi, align 8, !dbg !3926
  %13 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !3927
  %stmt17 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %13, i32 0, i32 1, !dbg !3928
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt17, align 8, !dbg !3929
  br label %if.end, !dbg !3930

if.end:                                           ; preds = %if.then, %for.body12
  br label %for.inc, !dbg !3931

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %j, align 4, !dbg !3932
  %inc = add i32 %14, 1, !dbg !3932
  store i32 %inc, i32* %j, align 4, !dbg !3932
  br label %for.cond2, !dbg !3933, !llvm.loop !3934

for.end:                                          ; preds = %cond.end8
  br label %for.inc18, !dbg !3935

for.inc18:                                        ; preds = %for.end
  %15 = load i32, i32* %i, align 4, !dbg !3936
  %inc19 = add i32 %15, 1, !dbg !3936
  store i32 %inc19, i32* %i, align 4, !dbg !3936
  br label %for.cond, !dbg !3937, !llvm.loop !3938

for.end20:                                        ; preds = %cond.end
  ret void, !dbg !3940
}

declare dso_local void @tree_transform_and_unroll_loop(%struct.loop*, i32, %struct.edge_def*, %struct.tree_niter_desc*, void (%struct.loop*, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @execute_pred_commoning_cbck(%struct.loop* %loop, i8* %data) #0 !dbg !3941 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %data.addr = alloca i8*, align 8
  %dta = alloca %struct.epcc_data*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3944, metadata !DIExpression()), !dbg !3945
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3946, metadata !DIExpression()), !dbg !3947
  call void @llvm.dbg.declare(metadata %struct.epcc_data** %dta, metadata !3948, metadata !DIExpression()), !dbg !3950
  %0 = load i8*, i8** %data.addr, align 8, !dbg !3951
  %1 = bitcast i8* %0 to %struct.epcc_data*, !dbg !3952
  store %struct.epcc_data* %1, %struct.epcc_data** %dta, align 8, !dbg !3950
  %2 = load %struct.epcc_data*, %struct.epcc_data** %dta, align 8, !dbg !3953
  %chains = getelementptr inbounds %struct.epcc_data, %struct.epcc_data* %2, i32 0, i32 0, !dbg !3954
  %3 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains, align 8, !dbg !3954
  call void @replace_names_by_phis(%struct.VEC_chain_p_heap* %3), !dbg !3955
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3956
  %5 = load %struct.epcc_data*, %struct.epcc_data** %dta, align 8, !dbg !3957
  %chains1 = getelementptr inbounds %struct.epcc_data, %struct.epcc_data* %5, i32 0, i32 0, !dbg !3958
  %6 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains1, align 8, !dbg !3958
  %7 = load %struct.epcc_data*, %struct.epcc_data** %dta, align 8, !dbg !3959
  %tmp_vars = getelementptr inbounds %struct.epcc_data, %struct.epcc_data* %7, i32 0, i32 1, !dbg !3960
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars, align 8, !dbg !3960
  call void @execute_pred_commoning(%struct.loop* %4, %struct.VEC_chain_p_heap* %6, %struct.bitmap_head_def* %8), !dbg !3961
  ret void, !dbg !3962
}

; Function Attrs: noinline nounwind uwtable
define internal void @eliminate_temp_copies(%struct.loop* %loop, %struct.bitmap_head_def* %tmp_vars) #0 !dbg !3963 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %tmp_vars.addr = alloca %struct.bitmap_head_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %name = alloca %union.tree_node*, align 8
  %use = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3966, metadata !DIExpression()), !dbg !3967
  store %struct.bitmap_head_def* %tmp_vars, %struct.bitmap_head_def** %tmp_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp_vars.addr, metadata !3968, metadata !DIExpression()), !dbg !3969
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3970, metadata !DIExpression()), !dbg !3971
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3972, metadata !DIExpression()), !dbg !3973
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !3974, metadata !DIExpression()), !dbg !3975
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !3976, metadata !DIExpression()), !dbg !3977
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !3978, metadata !DIExpression()), !dbg !3979
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !3980, metadata !DIExpression()), !dbg !3981
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !3982, metadata !DIExpression()), !dbg !3989
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3990
  %call = call %struct.edge_def* @loop_latch_edge(%struct.loop* %0), !dbg !3991
  store %struct.edge_def* %call, %struct.edge_def** %e, align 8, !dbg !3992
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3993
  %header = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 2, !dbg !3995
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3995
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %2), !dbg !3996
  %3 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !3996
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3996
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !3996
  br label %for.cond, !dbg !3997

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !3998
  %tobool = icmp ne i8 %call1, 0, !dbg !4000
  %lnot = xor i1 %tobool, true, !dbg !4000
  br i1 %lnot, label %for.body, label %for.end, !dbg !4001

for.body:                                         ; preds = %for.cond
  %call2 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !4002
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %phi, align 8, !dbg !4004
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4005
  %call3 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %5), !dbg !4005
  %call4 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call3), !dbg !4005
  store %union.tree_node* %call4, %union.tree_node** %name, align 8, !dbg !4006
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4007
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !4007
  %var5 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4007
  %7 = load %union.tree_node*, %union.tree_node** %var5, align 8, !dbg !4007
  store %union.tree_node* %7, %union.tree_node** %var, align 8, !dbg !4008
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars.addr, align 8, !dbg !4009
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4011
  %decl_minimal = bitcast %union.tree_node* %9 to %struct.tree_decl_minimal*, !dbg !4011
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !4011
  %10 = load i32, i32* %uid, align 4, !dbg !4011
  %call6 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %8, i32 %10), !dbg !4012
  %tobool7 = icmp ne i32 %call6, 0, !dbg !4012
  br i1 %tobool7, label %if.end, label %if.then, !dbg !4013

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !4014

if.end:                                           ; preds = %for.body
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4015
  %12 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4015
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %12, i32 0, i32 6, !dbg !4015
  %13 = load i32, i32* %dest_idx, align 4, !dbg !4015
  %call8 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %11, i32 %13), !dbg !4015
  %call9 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call8), !dbg !4015
  store %union.tree_node* %call9, %union.tree_node** %use, align 8, !dbg !4016
  %14 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !4017
  %base = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !4017
  %15 = bitcast %struct.tree_base* %base to i64*, !dbg !4017
  %bf.load = load i64, i64* %15, align 8, !dbg !4017
  %bf.clear = and i64 %bf.load, 65535, !dbg !4017
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4017
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !4017
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4017

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1943, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !4017
  br label %cond.end, !dbg !4017

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4017

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4017
  %16 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !4018
  %ssa_name10 = bitcast %union.tree_node* %16 to %struct.tree_ssa_name*, !dbg !4018
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name10, i32 0, i32 2, !dbg !4018
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4018
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %stmt, align 8, !dbg !4019
  br label %while.cond, !dbg !4020

while.cond:                                       ; preds = %cond.end21, %cond.end
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4021
  %call11 = call i32 @gimple_code(%union.gimple_statement_d* %18), !dbg !4022
  %cmp12 = icmp eq i32 %call11, 16, !dbg !4023
  br i1 %cmp12, label %land.rhs, label %land.end, !dbg !4024

land.rhs:                                         ; preds = %while.cond
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4025
  %call13 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %19), !dbg !4026
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4027
  %header14 = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 2, !dbg !4028
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %header14, align 8, !dbg !4028
  %cmp15 = icmp ne %struct.basic_block_def* %call13, %21, !dbg !4029
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %22 = phi i1 [ false, %while.cond ], [ %cmp15, %land.rhs ], !dbg !4030
  br i1 %22, label %while.body, label %while.end, !dbg !4020

while.body:                                       ; preds = %land.end
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4031
  %call16 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %23), !dbg !4031
  %call17 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %call16), !dbg !4031
  %tobool18 = icmp ne i8 %call17, 0, !dbg !4031
  br i1 %tobool18, label %cond.false20, label %cond.true19, !dbg !4031

cond.true19:                                      ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1955, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !4031
  br label %cond.end21, !dbg !4031

cond.false20:                                     ; preds = %while.body
  br label %cond.end21, !dbg !4031

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi i32 [ 0, %cond.true19 ], [ 0, %cond.false20 ], !dbg !4031
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4033
  %call23 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %24, i32 0), !dbg !4033
  %call24 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call23), !dbg !4033
  store %union.tree_node* %call24, %union.tree_node** %use, align 8, !dbg !4034
  %25 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !4035
  %ssa_name25 = bitcast %union.tree_node* %25 to %struct.tree_ssa_name*, !dbg !4035
  %def_stmt26 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name25, i32 0, i32 2, !dbg !4035
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt26, align 8, !dbg !4035
  store %union.gimple_statement_d* %26, %union.gimple_statement_d** %stmt, align 8, !dbg !4036
  br label %while.cond, !dbg !4020, !llvm.loop !4037

while.end:                                        ; preds = %land.end
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4039
  %28 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !4040
  %29 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4041
  call void @base_names_in_chain_on(%struct.loop* %27, %union.tree_node* %28, %union.tree_node* %29), !dbg !4042
  br label %for.inc, !dbg !4043

for.inc:                                          ; preds = %while.end, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !4044
  br label %for.cond, !dbg !4045, !llvm.loop !4046

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4048
}

; Function Attrs: noinline nounwind uwtable
define internal void @execute_pred_commoning(%struct.loop* %loop, %struct.VEC_chain_p_heap* %chains, %struct.bitmap_head_def* %tmp_vars) #0 !dbg !4049 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chains.addr = alloca %struct.VEC_chain_p_heap*, align 8
  %tmp_vars.addr = alloca %struct.bitmap_head_def*, align 8
  %chain = alloca %struct.chain*, align 8
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4052, metadata !DIExpression()), !dbg !4053
  store %struct.VEC_chain_p_heap* %chains, %struct.VEC_chain_p_heap** %chains.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap** %chains.addr, metadata !4054, metadata !DIExpression()), !dbg !4055
  store %struct.bitmap_head_def* %tmp_vars, %struct.bitmap_head_def** %tmp_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp_vars.addr, metadata !4056, metadata !DIExpression()), !dbg !4057
  call void @llvm.dbg.declare(metadata %struct.chain** %chain, metadata !4058, metadata !DIExpression()), !dbg !4059
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4060, metadata !DIExpression()), !dbg !4061
  store i32 0, i32* %i, align 4, !dbg !4062
  br label %for.cond, !dbg !4064

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !4065
  %tobool = icmp ne %struct.VEC_chain_p_heap* %0, null, !dbg !4065
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4065

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !4065
  %base = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %1, i32 0, i32 0, !dbg !4065
  br label %cond.end, !dbg !4065

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4065

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_chain_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4065
  %2 = load i32, i32* %i, align 4, !dbg !4065
  %call = call i32 @VEC_chain_p_base_iterate(%struct.VEC_chain_p_base* %cond, i32 %2, %struct.chain** %chain), !dbg !4065
  %tobool1 = icmp ne i32 %call, 0, !dbg !4067
  br i1 %tobool1, label %for.body, label %for.end, !dbg !4067

for.body:                                         ; preds = %cond.end
  %3 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4068
  %type = getelementptr inbounds %struct.chain, %struct.chain* %3, i32 0, i32 0, !dbg !4071
  %4 = load i32, i32* %type, align 8, !dbg !4071
  %cmp = icmp eq i32 %4, 0, !dbg !4072
  br i1 %cmp, label %if.then, label %if.else, !dbg !4073

if.then:                                          ; preds = %for.body
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4074
  %6 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4075
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars.addr, align 8, !dbg !4076
  call void @execute_load_motion(%struct.loop* %5, %struct.chain* %6, %struct.bitmap_head_def* %7), !dbg !4077
  br label %if.end, !dbg !4077

if.else:                                          ; preds = %for.body
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4078
  %9 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4079
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars.addr, align 8, !dbg !4080
  call void @execute_pred_commoning_chain(%struct.loop* %8, %struct.chain* %9, %struct.bitmap_head_def* %10), !dbg !4081
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc, !dbg !4082

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !4083
  %inc = add i32 %11, 1, !dbg !4083
  store i32 %inc, i32* %i, align 4, !dbg !4083
  br label %for.cond, !dbg !4084, !llvm.loop !4085

for.end:                                          ; preds = %cond.end
  call void @update_ssa(i32 16384), !dbg !4087
  ret void, !dbg !4088
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @release_chains(%struct.VEC_chain_p_heap* %chains) #0 !dbg !4089 {
entry:
  %chains.addr = alloca %struct.VEC_chain_p_heap*, align 8
  %i = alloca i32, align 4
  %chain = alloca %struct.chain*, align 8
  store %struct.VEC_chain_p_heap* %chains, %struct.VEC_chain_p_heap** %chains.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap** %chains.addr, metadata !4090, metadata !DIExpression()), !dbg !4091
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4092, metadata !DIExpression()), !dbg !4093
  call void @llvm.dbg.declare(metadata %struct.chain** %chain, metadata !4094, metadata !DIExpression()), !dbg !4095
  store i32 0, i32* %i, align 4, !dbg !4096
  br label %for.cond, !dbg !4098

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !4099
  %tobool = icmp ne %struct.VEC_chain_p_heap* %0, null, !dbg !4099
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4099

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !4099
  %base = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %1, i32 0, i32 0, !dbg !4099
  br label %cond.end, !dbg !4099

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4099

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_chain_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4099
  %2 = load i32, i32* %i, align 4, !dbg !4099
  %call = call i32 @VEC_chain_p_base_iterate(%struct.VEC_chain_p_base* %cond, i32 %2, %struct.chain** %chain), !dbg !4099
  %tobool1 = icmp ne i32 %call, 0, !dbg !4101
  br i1 %tobool1, label %for.body, label %for.end, !dbg !4101

for.body:                                         ; preds = %cond.end
  %3 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4102
  call void @release_chain(%struct.chain* %3), !dbg !4103
  br label %for.inc, !dbg !4103

for.inc:                                          ; preds = %for.body
  %4 = load i32, i32* %i, align 4, !dbg !4104
  %inc = add i32 %4, 1, !dbg !4104
  store i32 %inc, i32* %i, align 4, !dbg !4104
  br label %for.cond, !dbg !4105, !llvm.loop !4106

for.end:                                          ; preds = %cond.end
  call void @VEC_chain_p_heap_free(%struct.VEC_chain_p_heap** %chains.addr), !dbg !4108
  ret void, !dbg !4109
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local void @free_affine_expand_cache(%struct.pointer_map_t**) #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_data_reference_p_base_length(%struct.VEC_data_reference_p_base* %vec_) #0 !dbg !4110 {
entry:
  %vec_.addr = alloca %struct.VEC_data_reference_p_base*, align 8
  store %struct.VEC_data_reference_p_base* %vec_, %struct.VEC_data_reference_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_base** %vec_.addr, metadata !4115, metadata !DIExpression()), !dbg !4116
  %0 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !4116
  %tobool = icmp ne %struct.VEC_data_reference_p_base* %0, null, !dbg !4116
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4116

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !4116
  %num = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %1, i32 0, i32 0, !dbg !4116
  %2 = load i32, i32* %num, align 8, !dbg !4116
  br label %cond.end, !dbg !4116

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4116

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4116
  ret i32 %cond, !dbg !4116
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @last_always_executed_block(%struct.loop* %loop) #0 !dbg !4117 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %ex = alloca %struct.edge_def*, align 8
  %last = alloca %struct.basic_block_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4120, metadata !DIExpression()), !dbg !4121
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4122, metadata !DIExpression()), !dbg !4123
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits, metadata !4124, metadata !DIExpression()), !dbg !4130
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4131
  %call = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %0), !dbg !4132
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %exits, align 8, !dbg !4130
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ex, metadata !4133, metadata !DIExpression()), !dbg !4134
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last, metadata !4135, metadata !DIExpression()), !dbg !4136
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4137
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 3, !dbg !4138
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4138
  store %struct.basic_block_def* %2, %struct.basic_block_def** %last, align 8, !dbg !4136
  store i32 0, i32* %i, align 4, !dbg !4139
  br label %for.cond, !dbg !4141

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !4142
  %tobool = icmp ne %struct.VEC_edge_heap* %3, null, !dbg !4142
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4142

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !4142
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %4, i32 0, i32 0, !dbg !4142
  br label %cond.end, !dbg !4142

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4142

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4142
  %5 = load i32, i32* %i, align 4, !dbg !4142
  %call1 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %5, %struct.edge_def** %ex), !dbg !4142
  %tobool2 = icmp ne i32 %call1, 0, !dbg !4144
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4144

for.body:                                         ; preds = %cond.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !4145
  %7 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !4146
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 0, !dbg !4147
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4147
  %call3 = call %struct.basic_block_def* @nearest_common_dominator(i32 1, %struct.basic_block_def* %6, %struct.basic_block_def* %8), !dbg !4148
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %last, align 8, !dbg !4149
  br label %for.inc, !dbg !4150

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !4151
  %inc = add i32 %9, 1, !dbg !4151
  store i32 %inc, i32* %i, align 4, !dbg !4151
  br label %for.cond, !dbg !4152, !llvm.loop !4153

for.end:                                          ; preds = %cond.end
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %exits), !dbg !4155
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !4156
  ret %struct.basic_block_def* %10, !dbg !4157
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %vec_, i32 %ix_, %struct.data_reference** %ptr) #0 !dbg !4158 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_data_reference_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.data_reference**, align 8
  store %struct.VEC_data_reference_p_base* %vec_, %struct.VEC_data_reference_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_base** %vec_.addr, metadata !4162, metadata !DIExpression()), !dbg !4163
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4164, metadata !DIExpression()), !dbg !4163
  store %struct.data_reference** %ptr, %struct.data_reference*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference*** %ptr.addr, metadata !4165, metadata !DIExpression()), !dbg !4163
  %0 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !4166
  %tobool = icmp ne %struct.VEC_data_reference_p_base* %0, null, !dbg !4166
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4166

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4166
  %2 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !4166
  %num = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %2, i32 0, i32 0, !dbg !4166
  %3 = load i32, i32* %num, align 8, !dbg !4166
  %cmp = icmp ult i32 %1, %3, !dbg !4166
  br i1 %cmp, label %if.then, label %if.else, !dbg !4163

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !4168
  %vec = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %4, i32 0, i32 2, !dbg !4168
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4168
  %idxprom = zext i32 %5 to i64, !dbg !4168
  %arrayidx = getelementptr inbounds [1 x %struct.data_reference*], [1 x %struct.data_reference*]* %vec, i64 0, i64 %idxprom, !dbg !4168
  %6 = load %struct.data_reference*, %struct.data_reference** %arrayidx, align 8, !dbg !4168
  %7 = load %struct.data_reference**, %struct.data_reference*** %ptr.addr, align 8, !dbg !4168
  store %struct.data_reference* %6, %struct.data_reference** %7, align 8, !dbg !4168
  store i32 1, i32* %retval, align 4, !dbg !4168
  br label %return, !dbg !4168

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.data_reference**, %struct.data_reference*** %ptr.addr, align 8, !dbg !4170
  store %struct.data_reference* null, %struct.data_reference** %8, align 8, !dbg !4170
  store i32 0, i32* %retval, align 4, !dbg !4170
  br label %return, !dbg !4170

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4163
  ret i32 %9, !dbg !4163
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @suitable_reference_p(%struct.data_reference* %a, i32* %ref_step) #0 !dbg !4172 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %struct.data_reference*, align 8
  %ref_step.addr = alloca i32*, align 8
  %ref = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  store %struct.data_reference* %a, %struct.data_reference** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %a.addr, metadata !4176, metadata !DIExpression()), !dbg !4177
  store i32* %ref_step, i32** %ref_step.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ref_step.addr, metadata !4178, metadata !DIExpression()), !dbg !4179
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !4180, metadata !DIExpression()), !dbg !4181
  %0 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4182
  %ref1 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 1, !dbg !4182
  %1 = load %union.tree_node*, %union.tree_node** %ref1, align 8, !dbg !4182
  store %union.tree_node* %1, %union.tree_node** %ref, align 8, !dbg !4181
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !4183, metadata !DIExpression()), !dbg !4184
  %2 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4185
  %innermost = getelementptr inbounds %struct.data_reference, %struct.data_reference* %2, i32 0, i32 4, !dbg !4185
  %step2 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost, i32 0, i32 3, !dbg !4185
  %3 = load %union.tree_node*, %union.tree_node** %step2, align 8, !dbg !4185
  store %union.tree_node* %3, %union.tree_node** %step, align 8, !dbg !4184
  %4 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4186
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !4186
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4188

lor.lhs.false:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !4189
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !4189
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4189
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4189
  %call = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %6), !dbg !4190
  %tobool3 = icmp ne i8 %call, 0, !dbg !4190
  br i1 %tobool3, label %lor.lhs.false4, label %if.then, !dbg !4191

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %7 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !4192
  %call5 = call zeroext i8 @tree_could_throw_p(%union.tree_node* %7), !dbg !4193
  %conv = zext i8 %call5 to i32, !dbg !4193
  %tobool6 = icmp ne i32 %conv, 0, !dbg !4193
  br i1 %tobool6, label %if.then, label %if.end, !dbg !4194

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !4195
  br label %return, !dbg !4195

if.end:                                           ; preds = %lor.lhs.false4
  %8 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4196
  %call7 = call i32 @integer_zerop(%union.tree_node* %8), !dbg !4198
  %tobool8 = icmp ne i32 %call7, 0, !dbg !4198
  br i1 %tobool8, label %if.then9, label %if.else, !dbg !4199

if.then9:                                         ; preds = %if.end
  %9 = load i32*, i32** %ref_step.addr, align 8, !dbg !4200
  store i32 0, i32* %9, align 4, !dbg !4201
  br label %if.end15, !dbg !4202

if.else:                                          ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4203
  %call10 = call i32 @integer_nonzerop(%union.tree_node* %10), !dbg !4205
  %tobool11 = icmp ne i32 %call10, 0, !dbg !4205
  br i1 %tobool11, label %if.then12, label %if.else13, !dbg !4206

if.then12:                                        ; preds = %if.else
  %11 = load i32*, i32** %ref_step.addr, align 8, !dbg !4207
  store i32 1, i32* %11, align 4, !dbg !4208
  br label %if.end14, !dbg !4209

if.else13:                                        ; preds = %if.else
  %12 = load i32*, i32** %ref_step.addr, align 8, !dbg !4210
  store i32 2, i32* %12, align 4, !dbg !4211
  br label %if.end14

if.end14:                                         ; preds = %if.else13, %if.then12
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then9
  store i8 1, i8* %retval, align 1, !dbg !4212
  br label %return, !dbg !4212

return:                                           ; preds = %if.end15, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !4213
  ret i8 %13, !dbg !4213
}

; Function Attrs: noinline nounwind uwtable
define internal void @merge_comps(i32* %fathers, i32* %sizes, i32 %a, i32 %b) #0 !dbg !4214 {
entry:
  %fathers.addr = alloca i32*, align 8
  %sizes.addr = alloca i32*, align 8
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %ca = alloca i32, align 4
  %cb = alloca i32, align 4
  store i32* %fathers, i32** %fathers.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %fathers.addr, metadata !4217, metadata !DIExpression()), !dbg !4218
  store i32* %sizes, i32** %sizes.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %sizes.addr, metadata !4219, metadata !DIExpression()), !dbg !4220
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4221, metadata !DIExpression()), !dbg !4222
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !4223, metadata !DIExpression()), !dbg !4224
  call void @llvm.dbg.declare(metadata i32* %ca, metadata !4225, metadata !DIExpression()), !dbg !4226
  %0 = load i32*, i32** %fathers.addr, align 8, !dbg !4227
  %1 = load i32, i32* %a.addr, align 4, !dbg !4228
  %call = call i32 @component_of(i32* %0, i32 %1), !dbg !4229
  store i32 %call, i32* %ca, align 4, !dbg !4226
  call void @llvm.dbg.declare(metadata i32* %cb, metadata !4230, metadata !DIExpression()), !dbg !4231
  %2 = load i32*, i32** %fathers.addr, align 8, !dbg !4232
  %3 = load i32, i32* %b.addr, align 4, !dbg !4233
  %call1 = call i32 @component_of(i32* %2, i32 %3), !dbg !4234
  store i32 %call1, i32* %cb, align 4, !dbg !4231
  %4 = load i32, i32* %ca, align 4, !dbg !4235
  %5 = load i32, i32* %cb, align 4, !dbg !4237
  %cmp = icmp eq i32 %4, %5, !dbg !4238
  br i1 %cmp, label %if.then, label %if.end, !dbg !4239

if.then:                                          ; preds = %entry
  br label %if.end19, !dbg !4240

if.end:                                           ; preds = %entry
  %6 = load i32*, i32** %sizes.addr, align 8, !dbg !4241
  %7 = load i32, i32* %ca, align 4, !dbg !4243
  %idxprom = zext i32 %7 to i64, !dbg !4241
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !4241
  %8 = load i32, i32* %arrayidx, align 4, !dbg !4241
  %9 = load i32*, i32** %sizes.addr, align 8, !dbg !4244
  %10 = load i32, i32* %cb, align 4, !dbg !4245
  %idxprom2 = zext i32 %10 to i64, !dbg !4244
  %arrayidx3 = getelementptr inbounds i32, i32* %9, i64 %idxprom2, !dbg !4244
  %11 = load i32, i32* %arrayidx3, align 4, !dbg !4244
  %cmp4 = icmp ult i32 %8, %11, !dbg !4246
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !4247

if.then5:                                         ; preds = %if.end
  %12 = load i32*, i32** %sizes.addr, align 8, !dbg !4248
  %13 = load i32, i32* %ca, align 4, !dbg !4250
  %idxprom6 = zext i32 %13 to i64, !dbg !4248
  %arrayidx7 = getelementptr inbounds i32, i32* %12, i64 %idxprom6, !dbg !4248
  %14 = load i32, i32* %arrayidx7, align 4, !dbg !4248
  %15 = load i32*, i32** %sizes.addr, align 8, !dbg !4251
  %16 = load i32, i32* %cb, align 4, !dbg !4252
  %idxprom8 = zext i32 %16 to i64, !dbg !4251
  %arrayidx9 = getelementptr inbounds i32, i32* %15, i64 %idxprom8, !dbg !4251
  %17 = load i32, i32* %arrayidx9, align 4, !dbg !4253
  %add = add i32 %17, %14, !dbg !4253
  store i32 %add, i32* %arrayidx9, align 4, !dbg !4253
  %18 = load i32, i32* %cb, align 4, !dbg !4254
  %19 = load i32*, i32** %fathers.addr, align 8, !dbg !4255
  %20 = load i32, i32* %ca, align 4, !dbg !4256
  %idxprom10 = zext i32 %20 to i64, !dbg !4255
  %arrayidx11 = getelementptr inbounds i32, i32* %19, i64 %idxprom10, !dbg !4255
  store i32 %18, i32* %arrayidx11, align 4, !dbg !4257
  br label %if.end19, !dbg !4258

if.else:                                          ; preds = %if.end
  %21 = load i32*, i32** %sizes.addr, align 8, !dbg !4259
  %22 = load i32, i32* %cb, align 4, !dbg !4261
  %idxprom12 = zext i32 %22 to i64, !dbg !4259
  %arrayidx13 = getelementptr inbounds i32, i32* %21, i64 %idxprom12, !dbg !4259
  %23 = load i32, i32* %arrayidx13, align 4, !dbg !4259
  %24 = load i32*, i32** %sizes.addr, align 8, !dbg !4262
  %25 = load i32, i32* %ca, align 4, !dbg !4263
  %idxprom14 = zext i32 %25 to i64, !dbg !4262
  %arrayidx15 = getelementptr inbounds i32, i32* %24, i64 %idxprom14, !dbg !4262
  %26 = load i32, i32* %arrayidx15, align 4, !dbg !4264
  %add16 = add i32 %26, %23, !dbg !4264
  store i32 %add16, i32* %arrayidx15, align 4, !dbg !4264
  %27 = load i32, i32* %ca, align 4, !dbg !4265
  %28 = load i32*, i32** %fathers.addr, align 8, !dbg !4266
  %29 = load i32, i32* %cb, align 4, !dbg !4267
  %idxprom17 = zext i32 %29 to i64, !dbg !4266
  %arrayidx18 = getelementptr inbounds i32, i32* %28, i64 %idxprom17, !dbg !4266
  store i32 %27, i32* %arrayidx18, align 4, !dbg !4268
  br label %if.end19

if.end19:                                         ; preds = %if.then, %if.else, %if.then5
  ret void, !dbg !4269
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %vec_, i32 %ix_, %struct.data_dependence_relation** %ptr) #0 !dbg !4270 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_ddr_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.data_dependence_relation**, align 8
  store %struct.VEC_ddr_p_base* %vec_, %struct.VEC_ddr_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_base** %vec_.addr, metadata !4276, metadata !DIExpression()), !dbg !4277
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4278, metadata !DIExpression()), !dbg !4277
  store %struct.data_dependence_relation** %ptr, %struct.data_dependence_relation*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation*** %ptr.addr, metadata !4279, metadata !DIExpression()), !dbg !4277
  %0 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !4280
  %tobool = icmp ne %struct.VEC_ddr_p_base* %0, null, !dbg !4280
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4280

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4280
  %2 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !4280
  %num = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %2, i32 0, i32 0, !dbg !4280
  %3 = load i32, i32* %num, align 8, !dbg !4280
  %cmp = icmp ult i32 %1, %3, !dbg !4280
  br i1 %cmp, label %if.then, label %if.else, !dbg !4277

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !4282
  %vec = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %4, i32 0, i32 2, !dbg !4282
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4282
  %idxprom = zext i32 %5 to i64, !dbg !4282
  %arrayidx = getelementptr inbounds [1 x %struct.data_dependence_relation*], [1 x %struct.data_dependence_relation*]* %vec, i64 0, i64 %idxprom, !dbg !4282
  %6 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %arrayidx, align 8, !dbg !4282
  %7 = load %struct.data_dependence_relation**, %struct.data_dependence_relation*** %ptr.addr, align 8, !dbg !4282
  store %struct.data_dependence_relation* %6, %struct.data_dependence_relation** %7, align 8, !dbg !4282
  store i32 1, i32* %retval, align 4, !dbg !4282
  br label %return, !dbg !4282

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.data_dependence_relation**, %struct.data_dependence_relation*** %ptr.addr, align 8, !dbg !4284
  store %struct.data_dependence_relation* null, %struct.data_dependence_relation** %8, align 8, !dbg !4284
  store i32 0, i32* %retval, align 4, !dbg !4284
  br label %return, !dbg !4284

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4277
  ret i32 %9, !dbg !4277
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @component_of(i32* %fathers, i32 %a) #0 !dbg !4286 {
entry:
  %fathers.addr = alloca i32*, align 8
  %a.addr = alloca i32, align 4
  %root = alloca i32, align 4
  %n = alloca i32, align 4
  store i32* %fathers, i32** %fathers.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %fathers.addr, metadata !4289, metadata !DIExpression()), !dbg !4290
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4291, metadata !DIExpression()), !dbg !4292
  call void @llvm.dbg.declare(metadata i32* %root, metadata !4293, metadata !DIExpression()), !dbg !4294
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4295, metadata !DIExpression()), !dbg !4296
  %0 = load i32, i32* %a.addr, align 4, !dbg !4297
  store i32 %0, i32* %root, align 4, !dbg !4299
  br label %for.cond, !dbg !4300

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %root, align 4, !dbg !4301
  %2 = load i32*, i32** %fathers.addr, align 8, !dbg !4303
  %3 = load i32, i32* %root, align 4, !dbg !4304
  %idxprom = zext i32 %3 to i64, !dbg !4303
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !4303
  %4 = load i32, i32* %arrayidx, align 4, !dbg !4303
  %cmp = icmp ne i32 %1, %4, !dbg !4305
  br i1 %cmp, label %for.body, label %for.end, !dbg !4306

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !4307

for.inc:                                          ; preds = %for.body
  %5 = load i32*, i32** %fathers.addr, align 8, !dbg !4308
  %6 = load i32, i32* %root, align 4, !dbg !4309
  %idxprom1 = zext i32 %6 to i64, !dbg !4308
  %arrayidx2 = getelementptr inbounds i32, i32* %5, i64 %idxprom1, !dbg !4308
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !4308
  store i32 %7, i32* %root, align 4, !dbg !4310
  br label %for.cond, !dbg !4311, !llvm.loop !4312

for.end:                                          ; preds = %for.cond
  br label %for.cond3, !dbg !4314

for.cond3:                                        ; preds = %for.inc10, %for.end
  %8 = load i32, i32* %a.addr, align 4, !dbg !4315
  %9 = load i32, i32* %root, align 4, !dbg !4318
  %cmp4 = icmp ne i32 %8, %9, !dbg !4319
  br i1 %cmp4, label %for.body5, label %for.end11, !dbg !4320

for.body5:                                        ; preds = %for.cond3
  %10 = load i32*, i32** %fathers.addr, align 8, !dbg !4321
  %11 = load i32, i32* %a.addr, align 4, !dbg !4323
  %idxprom6 = zext i32 %11 to i64, !dbg !4321
  %arrayidx7 = getelementptr inbounds i32, i32* %10, i64 %idxprom6, !dbg !4321
  %12 = load i32, i32* %arrayidx7, align 4, !dbg !4321
  store i32 %12, i32* %n, align 4, !dbg !4324
  %13 = load i32, i32* %root, align 4, !dbg !4325
  %14 = load i32*, i32** %fathers.addr, align 8, !dbg !4326
  %15 = load i32, i32* %a.addr, align 4, !dbg !4327
  %idxprom8 = zext i32 %15 to i64, !dbg !4326
  %arrayidx9 = getelementptr inbounds i32, i32* %14, i64 %idxprom8, !dbg !4326
  store i32 %13, i32* %arrayidx9, align 4, !dbg !4328
  br label %for.inc10, !dbg !4329

for.inc10:                                        ; preds = %for.body5
  %16 = load i32, i32* %n, align 4, !dbg !4330
  store i32 %16, i32* %a.addr, align 4, !dbg !4331
  br label %for.cond3, !dbg !4332, !llvm.loop !4333

for.end11:                                        ; preds = %for.cond3
  %17 = load i32, i32* %root, align 4, !dbg !4335
  ret i32 %17, !dbg !4336
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @determine_offset(%struct.data_reference* %a, %struct.data_reference* %b, %struct.double_int* %off) #0 !dbg !4337 {
entry:
  %retval = alloca i8, align 1
  %a.addr = alloca %struct.data_reference*, align 8
  %b.addr = alloca %struct.data_reference*, align 8
  %off.addr = alloca %struct.double_int*, align 8
  %diff = alloca %struct.affine_tree_combination, align 8
  %baseb = alloca %struct.affine_tree_combination, align 8
  %step = alloca %struct.affine_tree_combination, align 8
  %typea = alloca %union.tree_node*, align 8
  %typeb = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.double_int, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  store %struct.data_reference* %a, %struct.data_reference** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %a.addr, metadata !4341, metadata !DIExpression()), !dbg !4342
  store %struct.data_reference* %b, %struct.data_reference** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %b.addr, metadata !4343, metadata !DIExpression()), !dbg !4344
  store %struct.double_int* %off, %struct.double_int** %off.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.double_int** %off.addr, metadata !4345, metadata !DIExpression()), !dbg !4346
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %diff, metadata !4347, metadata !DIExpression()), !dbg !4364
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %baseb, metadata !4365, metadata !DIExpression()), !dbg !4366
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %step, metadata !4367, metadata !DIExpression()), !dbg !4368
  call void @llvm.dbg.declare(metadata %union.tree_node** %typea, metadata !4369, metadata !DIExpression()), !dbg !4370
  call void @llvm.dbg.declare(metadata %union.tree_node** %typeb, metadata !4371, metadata !DIExpression()), !dbg !4372
  %0 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4373
  %ref = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 1, !dbg !4373
  %1 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !4373
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !4373
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4373
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4373
  store %union.tree_node* %2, %union.tree_node** %typea, align 8, !dbg !4374
  %3 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4375
  %ref1 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %3, i32 0, i32 1, !dbg !4375
  %4 = load %union.tree_node*, %union.tree_node** %ref1, align 8, !dbg !4375
  %common2 = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !4375
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !4375
  %5 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !4375
  store %union.tree_node* %5, %union.tree_node** %typeb, align 8, !dbg !4376
  %6 = load %union.tree_node*, %union.tree_node** %typeb, align 8, !dbg !4377
  %7 = load %union.tree_node*, %union.tree_node** %typea, align 8, !dbg !4379
  %call = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %6, %union.tree_node* %7), !dbg !4380
  %tobool = icmp ne i8 %call, 0, !dbg !4380
  br i1 %tobool, label %if.end, label %if.then, !dbg !4381

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4382
  br label %return, !dbg !4382

if.end:                                           ; preds = %entry
  %8 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4383
  %innermost = getelementptr inbounds %struct.data_reference, %struct.data_reference* %8, i32 0, i32 4, !dbg !4383
  %step4 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost, i32 0, i32 3, !dbg !4383
  %9 = load %union.tree_node*, %union.tree_node** %step4, align 8, !dbg !4383
  %10 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4385
  %innermost5 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %10, i32 0, i32 4, !dbg !4385
  %step6 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost5, i32 0, i32 3, !dbg !4385
  %11 = load %union.tree_node*, %union.tree_node** %step6, align 8, !dbg !4385
  %call7 = call i32 @operand_equal_p(%union.tree_node* %9, %union.tree_node* %11, i32 0), !dbg !4386
  %tobool8 = icmp ne i32 %call7, 0, !dbg !4386
  br i1 %tobool8, label %lor.lhs.false, label %if.then14, !dbg !4387

lor.lhs.false:                                    ; preds = %if.end
  %12 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4388
  %innermost9 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %12, i32 0, i32 4, !dbg !4388
  %base_address = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost9, i32 0, i32 0, !dbg !4388
  %13 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !4388
  %14 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4389
  %innermost10 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %14, i32 0, i32 4, !dbg !4389
  %base_address11 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost10, i32 0, i32 0, !dbg !4389
  %15 = load %union.tree_node*, %union.tree_node** %base_address11, align 8, !dbg !4389
  %call12 = call i32 @operand_equal_p(%union.tree_node* %13, %union.tree_node* %15, i32 0), !dbg !4390
  %tobool13 = icmp ne i32 %call12, 0, !dbg !4390
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !4391

if.then14:                                        ; preds = %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !4392
  br label %return, !dbg !4392

if.end15:                                         ; preds = %lor.lhs.false
  %16 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4393
  %innermost16 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %16, i32 0, i32 4, !dbg !4393
  %step17 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost16, i32 0, i32 3, !dbg !4393
  %17 = load %union.tree_node*, %union.tree_node** %step17, align 8, !dbg !4393
  %call18 = call i32 @integer_zerop(%union.tree_node* %17), !dbg !4395
  %tobool19 = icmp ne i32 %call18, 0, !dbg !4395
  br i1 %tobool19, label %if.then20, label %if.end32, !dbg !4396

if.then20:                                        ; preds = %if.end15
  %18 = load %struct.double_int*, %struct.double_int** %off.addr, align 8, !dbg !4397
  %call21 = call { i64, i64 } @shwi_to_double_int(i64 0), !dbg !4399
  %19 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !4399
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 0, !dbg !4399
  %21 = extractvalue { i64, i64 } %call21, 0, !dbg !4399
  store i64 %21, i64* %20, align 8, !dbg !4399
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 1, !dbg !4399
  %23 = extractvalue { i64, i64 } %call21, 1, !dbg !4399
  store i64 %23, i64* %22, align 8, !dbg !4399
  %24 = bitcast %struct.double_int* %18 to i8*, !dbg !4399
  %25 = bitcast %struct.double_int* %tmp to i8*, !dbg !4399
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 16, i1 false), !dbg !4399
  %26 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4400
  %innermost22 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %26, i32 0, i32 4, !dbg !4400
  %offset = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost22, i32 0, i32 1, !dbg !4400
  %27 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !4400
  %28 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4401
  %innermost23 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %28, i32 0, i32 4, !dbg !4401
  %offset24 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost23, i32 0, i32 1, !dbg !4401
  %29 = load %union.tree_node*, %union.tree_node** %offset24, align 8, !dbg !4401
  %call25 = call i32 @operand_equal_p(%union.tree_node* %27, %union.tree_node* %29, i32 0), !dbg !4402
  %tobool26 = icmp ne i32 %call25, 0, !dbg !4402
  br i1 %tobool26, label %land.rhs, label %land.end, !dbg !4403

land.rhs:                                         ; preds = %if.then20
  %30 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4404
  %innermost27 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %30, i32 0, i32 4, !dbg !4404
  %init = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost27, i32 0, i32 2, !dbg !4404
  %31 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !4404
  %32 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4405
  %innermost28 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %32, i32 0, i32 4, !dbg !4405
  %init29 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost28, i32 0, i32 2, !dbg !4405
  %33 = load %union.tree_node*, %union.tree_node** %init29, align 8, !dbg !4405
  %call30 = call i32 @operand_equal_p(%union.tree_node* %31, %union.tree_node* %33, i32 0), !dbg !4406
  %tobool31 = icmp ne i32 %call30, 0, !dbg !4403
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then20
  %34 = phi i1 [ false, %if.then20 ], [ %tobool31, %land.rhs ], !dbg !4407
  %land.ext = zext i1 %34 to i32, !dbg !4403
  %conv = trunc i32 %land.ext to i8, !dbg !4408
  store i8 %conv, i8* %retval, align 1, !dbg !4409
  br label %return, !dbg !4409

if.end32:                                         ; preds = %if.end15
  %35 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4410
  call void @aff_combination_dr_offset(%struct.data_reference* %35, %struct.affine_tree_combination* %diff), !dbg !4411
  %36 = load %struct.data_reference*, %struct.data_reference** %b.addr, align 8, !dbg !4412
  call void @aff_combination_dr_offset(%struct.data_reference* %36, %struct.affine_tree_combination* %baseb), !dbg !4413
  %call33 = call { i64, i64 } @shwi_to_double_int(i64 -1), !dbg !4414
  %37 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !4414
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 0, !dbg !4414
  %39 = extractvalue { i64, i64 } %call33, 0, !dbg !4414
  store i64 %39, i64* %38, align 8, !dbg !4414
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %37, i32 0, i32 1, !dbg !4414
  %41 = extractvalue { i64, i64 } %call33, 1, !dbg !4414
  store i64 %41, i64* %40, align 8, !dbg !4414
  %42 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !4415
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %42, i32 0, i32 0, !dbg !4415
  %44 = load i64, i64* %43, align 8, !dbg !4415
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %42, i32 0, i32 1, !dbg !4415
  %46 = load i64, i64* %45, align 8, !dbg !4415
  call void @aff_combination_scale(%struct.affine_tree_combination* %baseb, i64 %44, i64 %46), !dbg !4415
  call void @aff_combination_add(%struct.affine_tree_combination* %diff, %struct.affine_tree_combination* %baseb), !dbg !4416
  %47 = load %struct.data_reference*, %struct.data_reference** %a.addr, align 8, !dbg !4417
  %innermost34 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %47, i32 0, i32 4, !dbg !4417
  %step35 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost34, i32 0, i32 3, !dbg !4417
  %48 = load %union.tree_node*, %union.tree_node** %step35, align 8, !dbg !4417
  %49 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4418
  call void @tree_to_aff_combination_expand(%union.tree_node* %48, %union.tree_node* %49, %struct.affine_tree_combination* %step, %struct.pointer_map_t** @name_expansions), !dbg !4419
  %50 = load %struct.double_int*, %struct.double_int** %off.addr, align 8, !dbg !4420
  %call36 = call zeroext i8 @aff_combination_constant_multiple_p(%struct.affine_tree_combination* %diff, %struct.affine_tree_combination* %step, %struct.double_int* %50), !dbg !4421
  store i8 %call36, i8* %retval, align 1, !dbg !4422
  br label %return, !dbg !4422

return:                                           ; preds = %if.end32, %land.end, %if.then14, %if.then
  %51 = load i8, i8* %retval, align 1, !dbg !4423
  ret i8 %51, !dbg !4423
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_dref_heap* @VEC_dref_heap_alloc(i32 %alloc_) #0 !dbg !4424 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !4427, metadata !DIExpression()), !dbg !4428
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !4428
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !4428
  %1 = bitcast i8* %call to %struct.VEC_dref_heap*, !dbg !4428
  ret %struct.VEC_dref_heap* %1, !dbg !4428
}

; Function Attrs: noinline nounwind uwtable
define internal { i64, i64 } @shwi_to_double_int(i64 %cst) #0 !dbg !4429 {
entry:
  %retval = alloca %struct.double_int, align 8
  %cst.addr = alloca i64, align 8
  store i64 %cst, i64* %cst.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cst.addr, metadata !4432, metadata !DIExpression()), !dbg !4433
  call void @llvm.dbg.declare(metadata %struct.double_int* %retval, metadata !4434, metadata !DIExpression()), !dbg !4435
  %0 = load i64, i64* %cst.addr, align 8, !dbg !4436
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 0, !dbg !4437
  store i64 %0, i64* %low, align 8, !dbg !4438
  %1 = load i64, i64* %cst.addr, align 8, !dbg !4439
  %cmp = icmp slt i64 %1, 0, !dbg !4440
  %2 = zext i1 %cmp to i64, !dbg !4439
  %cond = select i1 %cmp, i32 -1, i32 0, !dbg !4439
  %conv = sext i32 %cond to i64, !dbg !4439
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 1, !dbg !4441
  store i64 %conv, i64* %high, align 8, !dbg !4442
  %3 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !4443
  %4 = load { i64, i64 }, { i64, i64 }* %3, align 8, !dbg !4443
  ret { i64, i64 } %4, !dbg !4443
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !4444 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4447, metadata !DIExpression()), !dbg !4448
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4449
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4450
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !4451
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4451
  ret %struct.basic_block_def* %1, !dbg !4452
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_dref_base_length(%struct.VEC_dref_base* %vec_) #0 !dbg !4453 {
entry:
  %vec_.addr = alloca %struct.VEC_dref_base*, align 8
  store %struct.VEC_dref_base* %vec_, %struct.VEC_dref_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_dref_base** %vec_.addr, metadata !4456, metadata !DIExpression()), !dbg !4457
  %0 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !4457
  %tobool = icmp ne %struct.VEC_dref_base* %0, null, !dbg !4457
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4457

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !4457
  %num = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %1, i32 0, i32 0, !dbg !4457
  %2 = load i32, i32* %num, align 8, !dbg !4457
  br label %cond.end, !dbg !4457

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4457

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4457
  ret i32 %cond, !dbg !4457
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.dref_d** @VEC_dref_base_quick_push(%struct.VEC_dref_base* %vec_, %struct.dref_d* %obj_) #0 !dbg !4458 {
entry:
  %vec_.addr = alloca %struct.VEC_dref_base*, align 8
  %obj_.addr = alloca %struct.dref_d*, align 8
  %slot_ = alloca %struct.dref_d**, align 8
  store %struct.VEC_dref_base* %vec_, %struct.VEC_dref_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_dref_base** %vec_.addr, metadata !4462, metadata !DIExpression()), !dbg !4463
  store %struct.dref_d* %obj_, %struct.dref_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %obj_.addr, metadata !4464, metadata !DIExpression()), !dbg !4463
  call void @llvm.dbg.declare(metadata %struct.dref_d*** %slot_, metadata !4465, metadata !DIExpression()), !dbg !4463
  %0 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !4463
  %num = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %0, i32 0, i32 0, !dbg !4463
  %1 = load i32, i32* %num, align 8, !dbg !4463
  %2 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !4463
  %alloc = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %2, i32 0, i32 1, !dbg !4463
  %3 = load i32, i32* %alloc, align 4, !dbg !4463
  %cmp = icmp ult i32 %1, %3, !dbg !4463
  %conv = zext i1 %cmp to i32, !dbg !4463
  %4 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !4463
  %vec = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %4, i32 0, i32 2, !dbg !4463
  %5 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !4463
  %num1 = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %5, i32 0, i32 0, !dbg !4463
  %6 = load i32, i32* %num1, align 8, !dbg !4463
  %inc = add i32 %6, 1, !dbg !4463
  store i32 %inc, i32* %num1, align 8, !dbg !4463
  %idxprom = zext i32 %6 to i64, !dbg !4463
  %arrayidx = getelementptr inbounds [1 x %struct.dref_d*], [1 x %struct.dref_d*]* %vec, i64 0, i64 %idxprom, !dbg !4463
  store %struct.dref_d** %arrayidx, %struct.dref_d*** %slot_, align 8, !dbg !4463
  %7 = load %struct.dref_d*, %struct.dref_d** %obj_.addr, align 8, !dbg !4463
  %8 = load %struct.dref_d**, %struct.dref_d*** %slot_, align 8, !dbg !4463
  store %struct.dref_d* %7, %struct.dref_d** %8, align 8, !dbg !4463
  %9 = load %struct.dref_d**, %struct.dref_d*** %slot_, align 8, !dbg !4463
  ret %struct.dref_d** %9, !dbg !4463
}

declare dso_local void @free(i8*) #2

declare dso_local %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !4466 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4472, metadata !DIExpression()), !dbg !4473
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4474, metadata !DIExpression()), !dbg !4473
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !4475, metadata !DIExpression()), !dbg !4473
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4476
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4476
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4476

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4476
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4476
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !4476
  %3 = load i32, i32* %num, align 8, !dbg !4476
  %cmp = icmp ult i32 %1, %3, !dbg !4476
  br i1 %cmp, label %if.then, label %if.else, !dbg !4473

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4478
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !4478
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4478
  %idxprom = zext i32 %5 to i64, !dbg !4478
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !4478
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4478
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !4478
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !4478
  store i32 1, i32* %retval, align 4, !dbg !4478
  br label %return, !dbg !4478

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !4480
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !4480
  store i32 0, i32* %retval, align 4, !dbg !4480
  br label %return, !dbg !4480

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4473
  ret i32 %9, !dbg !4473
}

declare dso_local %struct.basic_block_def* @nearest_common_dominator(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !4482 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !4486, metadata !DIExpression()), !dbg !4487
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4488
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !4488
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !4488
  br i1 %tobool, label %if.then, label %if.end, !dbg !4487

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4488
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !4488
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !4488
  call void @free(i8* %4), !dbg !4488
  br label %if.end, !dbg !4488

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4487
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !4487
  ret void, !dbg !4487
}

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) #2

declare dso_local zeroext i8 @tree_could_throw_p(%union.tree_node*) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local i32 @integer_nonzerop(%union.tree_node*) #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @aff_combination_dr_offset(%struct.data_reference* %dr, %struct.affine_tree_combination* %offset) #0 !dbg !4490 {
entry:
  %dr.addr = alloca %struct.data_reference*, align 8
  %offset.addr = alloca %struct.affine_tree_combination*, align 8
  %delta = alloca %struct.affine_tree_combination, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  store %struct.data_reference* %dr, %struct.data_reference** %dr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr.addr, metadata !4494, metadata !DIExpression()), !dbg !4495
  store %struct.affine_tree_combination* %offset, %struct.affine_tree_combination** %offset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination** %offset.addr, metadata !4496, metadata !DIExpression()), !dbg !4497
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %delta, metadata !4498, metadata !DIExpression()), !dbg !4499
  %0 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !4500
  %innermost = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 4, !dbg !4500
  %offset1 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost, i32 0, i32 1, !dbg !4500
  %1 = load %union.tree_node*, %union.tree_node** %offset1, align 8, !dbg !4500
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4501
  %3 = load %struct.affine_tree_combination*, %struct.affine_tree_combination** %offset.addr, align 8, !dbg !4502
  call void @tree_to_aff_combination_expand(%union.tree_node* %1, %union.tree_node* %2, %struct.affine_tree_combination* %3, %struct.pointer_map_t** @name_expansions), !dbg !4503
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4504
  %5 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !4505
  %innermost2 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %5, i32 0, i32 4, !dbg !4505
  %init = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost2, i32 0, i32 2, !dbg !4505
  %6 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !4505
  %call = call { i64, i64 } @tree_to_double_int(%union.tree_node* %6), !dbg !4506
  %7 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !4506
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !4506
  %9 = extractvalue { i64, i64 } %call, 0, !dbg !4506
  store i64 %9, i64* %8, align 8, !dbg !4506
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !4506
  %11 = extractvalue { i64, i64 } %call, 1, !dbg !4506
  store i64 %11, i64* %10, align 8, !dbg !4506
  %12 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !4507
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !4507
  %14 = load i64, i64* %13, align 8, !dbg !4507
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !4507
  %16 = load i64, i64* %15, align 8, !dbg !4507
  call void @aff_combination_const(%struct.affine_tree_combination* %delta, %union.tree_node* %4, i64 %14, i64 %16), !dbg !4507
  %17 = load %struct.affine_tree_combination*, %struct.affine_tree_combination** %offset.addr, align 8, !dbg !4508
  call void @aff_combination_add(%struct.affine_tree_combination* %17, %struct.affine_tree_combination* %delta), !dbg !4509
  ret void, !dbg !4510
}

declare dso_local void @aff_combination_scale(%struct.affine_tree_combination*, i64, i64) #2

declare dso_local void @aff_combination_add(%struct.affine_tree_combination*, %struct.affine_tree_combination*) #2

declare dso_local void @tree_to_aff_combination_expand(%union.tree_node*, %union.tree_node*, %struct.affine_tree_combination*, %struct.pointer_map_t**) #2

declare dso_local zeroext i8 @aff_combination_constant_multiple_p(%struct.affine_tree_combination*, %struct.affine_tree_combination*, %struct.double_int*) #2

declare dso_local void @aff_combination_const(%struct.affine_tree_combination*, %union.tree_node*, i64, i64) #2

declare dso_local { i64, i64 } @tree_to_double_int(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @suitable_component_p(%struct.loop* %loop, %struct.component* %comp) #0 !dbg !4511 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %comp.addr = alloca %struct.component*, align 8
  %i = alloca i32, align 4
  %a = alloca %struct.dref_d*, align 8
  %first = alloca %struct.dref_d*, align 8
  %ba = alloca %struct.basic_block_def*, align 8
  %bp = alloca %struct.basic_block_def*, align 8
  %ok = alloca i8, align 1
  %has_write = alloca i8, align 1
  %tmp = alloca %struct.double_int, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4514, metadata !DIExpression()), !dbg !4515
  store %struct.component* %comp, %struct.component** %comp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.component** %comp.addr, metadata !4516, metadata !DIExpression()), !dbg !4517
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4518, metadata !DIExpression()), !dbg !4519
  call void @llvm.dbg.declare(metadata %struct.dref_d** %a, metadata !4520, metadata !DIExpression()), !dbg !4521
  call void @llvm.dbg.declare(metadata %struct.dref_d** %first, metadata !4522, metadata !DIExpression()), !dbg !4523
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ba, metadata !4524, metadata !DIExpression()), !dbg !4525
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bp, metadata !4526, metadata !DIExpression()), !dbg !4527
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4528
  %header = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 2, !dbg !4529
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4529
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bp, align 8, !dbg !4527
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !4530, metadata !DIExpression()), !dbg !4531
  call void @llvm.dbg.declare(metadata i8* %has_write, metadata !4532, metadata !DIExpression()), !dbg !4533
  store i8 0, i8* %has_write, align 1, !dbg !4533
  store i32 0, i32* %i, align 4, !dbg !4534
  br label %for.cond, !dbg !4536

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4537
  %refs = getelementptr inbounds %struct.component, %struct.component* %2, i32 0, i32 0, !dbg !4537
  %3 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !4537
  %tobool = icmp ne %struct.VEC_dref_heap* %3, null, !dbg !4537
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4537

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4537
  %refs1 = getelementptr inbounds %struct.component, %struct.component* %4, i32 0, i32 0, !dbg !4537
  %5 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs1, align 8, !dbg !4537
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %5, i32 0, i32 0, !dbg !4537
  br label %cond.end, !dbg !4537

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4537

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4537
  %6 = load i32, i32* %i, align 4, !dbg !4537
  %call = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond, i32 %6, %struct.dref_d** %a), !dbg !4537
  %tobool2 = icmp ne i32 %call, 0, !dbg !4539
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4539

for.body:                                         ; preds = %cond.end
  %7 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !4540
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %7, i32 0, i32 1, !dbg !4542
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4542
  %call3 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %8), !dbg !4543
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %ba, align 8, !dbg !4544
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4545
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %ba, align 8, !dbg !4547
  %call4 = call zeroext i8 @just_once_each_iteration_p(%struct.loop* %9, %struct.basic_block_def* %10), !dbg !4548
  %tobool5 = icmp ne i8 %call4, 0, !dbg !4548
  br i1 %tobool5, label %if.end, label %if.then, !dbg !4549

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !4550
  br label %return, !dbg !4550

if.end:                                           ; preds = %for.body
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %ba, align 8, !dbg !4551
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bp, align 8, !dbg !4551
  %call6 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %11, %struct.basic_block_def* %12), !dbg !4551
  %tobool7 = icmp ne i8 %call6, 0, !dbg !4551
  br i1 %tobool7, label %cond.false9, label %cond.true8, !dbg !4551

cond.true8:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 828, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !4551
  br label %cond.end10, !dbg !4551

cond.false9:                                      ; preds = %if.end
  br label %cond.end10, !dbg !4551

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !4551
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %ba, align 8, !dbg !4552
  store %struct.basic_block_def* %13, %struct.basic_block_def** %bp, align 8, !dbg !4553
  %14 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !4554
  %ref = getelementptr inbounds %struct.dref_d, %struct.dref_d* %14, i32 0, i32 0, !dbg !4554
  %15 = load %struct.data_reference*, %struct.data_reference** %ref, align 8, !dbg !4554
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %15, i32 0, i32 3, !dbg !4554
  %16 = load i8, i8* %is_read, align 8, !dbg !4554
  %tobool12 = icmp ne i8 %16, 0, !dbg !4554
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !4556

if.then13:                                        ; preds = %cond.end10
  store i8 1, i8* %has_write, align 1, !dbg !4557
  br label %if.end14, !dbg !4558

if.end14:                                         ; preds = %if.then13, %cond.end10
  br label %for.inc, !dbg !4559

for.inc:                                          ; preds = %if.end14
  %17 = load i32, i32* %i, align 4, !dbg !4560
  %inc = add i32 %17, 1, !dbg !4560
  store i32 %inc, i32* %i, align 4, !dbg !4560
  br label %for.cond, !dbg !4561, !llvm.loop !4562

for.end:                                          ; preds = %cond.end
  %18 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4564
  %refs15 = getelementptr inbounds %struct.component, %struct.component* %18, i32 0, i32 0, !dbg !4564
  %19 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs15, align 8, !dbg !4564
  %tobool16 = icmp ne %struct.VEC_dref_heap* %19, null, !dbg !4564
  br i1 %tobool16, label %cond.true17, label %cond.false20, !dbg !4564

cond.true17:                                      ; preds = %for.end
  %20 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4564
  %refs18 = getelementptr inbounds %struct.component, %struct.component* %20, i32 0, i32 0, !dbg !4564
  %21 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs18, align 8, !dbg !4564
  %base19 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %21, i32 0, i32 0, !dbg !4564
  br label %cond.end21, !dbg !4564

cond.false20:                                     ; preds = %for.end
  br label %cond.end21, !dbg !4564

cond.end21:                                       ; preds = %cond.false20, %cond.true17
  %cond22 = phi %struct.VEC_dref_base* [ %base19, %cond.true17 ], [ null, %cond.false20 ], !dbg !4564
  %call23 = call %struct.dref_d* @VEC_dref_base_index(%struct.VEC_dref_base* %cond22, i32 0), !dbg !4564
  store %struct.dref_d* %call23, %struct.dref_d** %first, align 8, !dbg !4565
  %22 = load %struct.dref_d*, %struct.dref_d** %first, align 8, !dbg !4566
  %ref24 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %22, i32 0, i32 0, !dbg !4567
  %23 = load %struct.data_reference*, %struct.data_reference** %ref24, align 8, !dbg !4567
  %24 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4568
  %comp_step = getelementptr inbounds %struct.component, %struct.component* %24, i32 0, i32 1, !dbg !4569
  %call25 = call zeroext i8 @suitable_reference_p(%struct.data_reference* %23, i32* %comp_step), !dbg !4570
  store i8 %call25, i8* %ok, align 1, !dbg !4571
  %25 = load i8, i8* %ok, align 1, !dbg !4572
  %tobool26 = icmp ne i8 %25, 0, !dbg !4572
  br i1 %tobool26, label %cond.false28, label %cond.true27, !dbg !4572

cond.true27:                                      ; preds = %cond.end21
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 837, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !4572
  br label %cond.end29, !dbg !4572

cond.false28:                                     ; preds = %cond.end21
  br label %cond.end29, !dbg !4572

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi i32 [ 0, %cond.true27 ], [ 0, %cond.false28 ], !dbg !4572
  %26 = load %struct.dref_d*, %struct.dref_d** %first, align 8, !dbg !4573
  %offset = getelementptr inbounds %struct.dref_d, %struct.dref_d* %26, i32 0, i32 4, !dbg !4574
  %call31 = call { i64, i64 } @shwi_to_double_int(i64 0), !dbg !4575
  %27 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !4575
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %27, i32 0, i32 0, !dbg !4575
  %29 = extractvalue { i64, i64 } %call31, 0, !dbg !4575
  store i64 %29, i64* %28, align 8, !dbg !4575
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %27, i32 0, i32 1, !dbg !4575
  %31 = extractvalue { i64, i64 } %call31, 1, !dbg !4575
  store i64 %31, i64* %30, align 8, !dbg !4575
  %32 = bitcast %struct.double_int* %offset to i8*, !dbg !4575
  %33 = bitcast %struct.double_int* %tmp to i8*, !dbg !4575
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false), !dbg !4575
  store i32 1, i32* %i, align 4, !dbg !4576
  br label %for.cond32, !dbg !4578

for.cond32:                                       ; preds = %for.inc51, %cond.end29
  %34 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4579
  %refs33 = getelementptr inbounds %struct.component, %struct.component* %34, i32 0, i32 0, !dbg !4579
  %35 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs33, align 8, !dbg !4579
  %tobool34 = icmp ne %struct.VEC_dref_heap* %35, null, !dbg !4579
  br i1 %tobool34, label %cond.true35, label %cond.false38, !dbg !4579

cond.true35:                                      ; preds = %for.cond32
  %36 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4579
  %refs36 = getelementptr inbounds %struct.component, %struct.component* %36, i32 0, i32 0, !dbg !4579
  %37 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs36, align 8, !dbg !4579
  %base37 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %37, i32 0, i32 0, !dbg !4579
  br label %cond.end39, !dbg !4579

cond.false38:                                     ; preds = %for.cond32
  br label %cond.end39, !dbg !4579

cond.end39:                                       ; preds = %cond.false38, %cond.true35
  %cond40 = phi %struct.VEC_dref_base* [ %base37, %cond.true35 ], [ null, %cond.false38 ], !dbg !4579
  %38 = load i32, i32* %i, align 4, !dbg !4579
  %call41 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond40, i32 %38, %struct.dref_d** %a), !dbg !4579
  %tobool42 = icmp ne i32 %call41, 0, !dbg !4581
  br i1 %tobool42, label %for.body43, label %for.end53, !dbg !4581

for.body43:                                       ; preds = %cond.end39
  %39 = load %struct.dref_d*, %struct.dref_d** %first, align 8, !dbg !4582
  %ref44 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %39, i32 0, i32 0, !dbg !4585
  %40 = load %struct.data_reference*, %struct.data_reference** %ref44, align 8, !dbg !4585
  %41 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !4586
  %ref45 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %41, i32 0, i32 0, !dbg !4587
  %42 = load %struct.data_reference*, %struct.data_reference** %ref45, align 8, !dbg !4587
  %43 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !4588
  %offset46 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %43, i32 0, i32 4, !dbg !4589
  %call47 = call zeroext i8 @determine_offset(%struct.data_reference* %40, %struct.data_reference* %42, %struct.double_int* %offset46), !dbg !4590
  %tobool48 = icmp ne i8 %call47, 0, !dbg !4590
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !4591

if.then49:                                        ; preds = %for.body43
  store i8 0, i8* %retval, align 1, !dbg !4592
  br label %return, !dbg !4592

if.end50:                                         ; preds = %for.body43
  br label %for.inc51, !dbg !4593

for.inc51:                                        ; preds = %if.end50
  %44 = load i32, i32* %i, align 4, !dbg !4594
  %inc52 = add i32 %44, 1, !dbg !4594
  store i32 %inc52, i32* %i, align 4, !dbg !4594
  br label %for.cond32, !dbg !4595, !llvm.loop !4596

for.end53:                                        ; preds = %cond.end39
  %45 = load i8, i8* %has_write, align 1, !dbg !4598
  %conv = zext i8 %45 to i32, !dbg !4598
  %tobool54 = icmp ne i32 %conv, 0, !dbg !4598
  br i1 %tobool54, label %land.lhs.true, label %if.end58, !dbg !4600

land.lhs.true:                                    ; preds = %for.end53
  %46 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4601
  %comp_step55 = getelementptr inbounds %struct.component, %struct.component* %46, i32 0, i32 1, !dbg !4602
  %47 = load i32, i32* %comp_step55, align 8, !dbg !4602
  %cmp = icmp eq i32 %47, 2, !dbg !4603
  br i1 %cmp, label %if.then57, label %if.end58, !dbg !4604

if.then57:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !4605
  br label %return, !dbg !4605

if.end58:                                         ; preds = %land.lhs.true, %for.end53
  store i8 1, i8* %retval, align 1, !dbg !4606
  br label %return, !dbg !4606

return:                                           ; preds = %if.end58, %if.then57, %if.then49, %if.then
  %48 = load i8, i8* %retval, align 1, !dbg !4607
  ret i8 %48, !dbg !4607
}

; Function Attrs: noinline nounwind uwtable
define internal void @release_component(%struct.component* %comp) #0 !dbg !4608 {
entry:
  %comp.addr = alloca %struct.component*, align 8
  store %struct.component* %comp, %struct.component** %comp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.component** %comp.addr, metadata !4609, metadata !DIExpression()), !dbg !4610
  %0 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4611
  %refs = getelementptr inbounds %struct.component, %struct.component* %0, i32 0, i32 0, !dbg !4611
  call void @VEC_dref_heap_free(%struct.VEC_dref_heap** %refs), !dbg !4611
  %1 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4612
  %2 = bitcast %struct.component* %1 to i8*, !dbg !4612
  call void @free(i8* %2), !dbg !4613
  ret void, !dbg !4614
}

declare dso_local zeroext i8 @just_once_each_iteration_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.dref_d* @VEC_dref_base_index(%struct.VEC_dref_base* %vec_, i32 %ix_) #0 !dbg !4615 {
entry:
  %vec_.addr = alloca %struct.VEC_dref_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_dref_base* %vec_, %struct.VEC_dref_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_dref_base** %vec_.addr, metadata !4618, metadata !DIExpression()), !dbg !4619
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4620, metadata !DIExpression()), !dbg !4619
  %0 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !4619
  %tobool = icmp ne %struct.VEC_dref_base* %0, null, !dbg !4619
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4619

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4619
  %2 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !4619
  %num = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %2, i32 0, i32 0, !dbg !4619
  %3 = load i32, i32* %num, align 8, !dbg !4619
  %cmp = icmp ult i32 %1, %3, !dbg !4619
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4621
  %land.ext = zext i1 %4 to i32, !dbg !4619
  %5 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !4619
  %vec = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %5, i32 0, i32 2, !dbg !4619
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4619
  %idxprom = zext i32 %6 to i64, !dbg !4619
  %arrayidx = getelementptr inbounds [1 x %struct.dref_d*], [1 x %struct.dref_d*]* %vec, i64 0, i64 %idxprom, !dbg !4619
  %7 = load %struct.dref_d*, %struct.dref_d** %arrayidx, align 8, !dbg !4619
  ret %struct.dref_d* %7, !dbg !4619
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_dref_heap_free(%struct.VEC_dref_heap** %vec_) #0 !dbg !4622 {
entry:
  %vec_.addr = alloca %struct.VEC_dref_heap**, align 8
  store %struct.VEC_dref_heap** %vec_, %struct.VEC_dref_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_dref_heap*** %vec_.addr, metadata !4626, metadata !DIExpression()), !dbg !4627
  %0 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !4628
  %1 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %0, align 8, !dbg !4628
  %tobool = icmp ne %struct.VEC_dref_heap* %1, null, !dbg !4628
  br i1 %tobool, label %if.then, label %if.end, !dbg !4627

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !4628
  %3 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %2, align 8, !dbg !4628
  %4 = bitcast %struct.VEC_dref_heap* %3 to i8*, !dbg !4628
  call void @free(i8* %4), !dbg !4628
  br label %if.end, !dbg !4628

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !4627
  store %struct.VEC_dref_heap* null, %struct.VEC_dref_heap** %5, align 8, !dbg !4627
  ret void, !dbg !4627
}

; Function Attrs: noinline nounwind uwtable
define internal void @determine_roots_comp(%struct.loop* %loop, %struct.component* %comp, %struct.VEC_chain_p_heap** %chains) #0 !dbg !4630 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %comp.addr = alloca %struct.component*, align 8
  %chains.addr = alloca %struct.VEC_chain_p_heap**, align 8
  %i = alloca i32, align 4
  %a = alloca %struct.dref_d*, align 8
  %chain = alloca %struct.chain*, align 8
  %last_ofs = alloca %struct.double_int, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  %agg.tmp32 = alloca %struct.double_int, align 8
  %agg.tmp33 = alloca %struct.double_int, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4631, metadata !DIExpression()), !dbg !4632
  store %struct.component* %comp, %struct.component** %comp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.component** %comp.addr, metadata !4633, metadata !DIExpression()), !dbg !4634
  store %struct.VEC_chain_p_heap** %chains, %struct.VEC_chain_p_heap*** %chains.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap*** %chains.addr, metadata !4635, metadata !DIExpression()), !dbg !4636
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4637, metadata !DIExpression()), !dbg !4638
  call void @llvm.dbg.declare(metadata %struct.dref_d** %a, metadata !4639, metadata !DIExpression()), !dbg !4640
  call void @llvm.dbg.declare(metadata %struct.chain** %chain, metadata !4641, metadata !DIExpression()), !dbg !4642
  store %struct.chain* null, %struct.chain** %chain, align 8, !dbg !4642
  call void @llvm.dbg.declare(metadata %struct.double_int* %last_ofs, metadata !4643, metadata !DIExpression()), !dbg !4644
  %call = call { i64, i64 } @shwi_to_double_int(i64 0), !dbg !4645
  %0 = bitcast %struct.double_int* %last_ofs to { i64, i64 }*, !dbg !4645
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !4645
  %2 = extractvalue { i64, i64 } %call, 0, !dbg !4645
  store i64 %2, i64* %1, align 8, !dbg !4645
  %3 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !4645
  %4 = extractvalue { i64, i64 } %call, 1, !dbg !4645
  store i64 %4, i64* %3, align 8, !dbg !4645
  %5 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4646
  %comp_step = getelementptr inbounds %struct.component, %struct.component* %5, i32 0, i32 1, !dbg !4648
  %6 = load i32, i32* %comp_step, align 8, !dbg !4648
  %cmp = icmp eq i32 %6, 0, !dbg !4649
  br i1 %cmp, label %if.then, label %if.end, !dbg !4650

if.then:                                          ; preds = %entry
  %7 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4651
  %call1 = call %struct.chain* @make_invariant_chain(%struct.component* %7), !dbg !4653
  store %struct.chain* %call1, %struct.chain** %chain, align 8, !dbg !4654
  %8 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %chains.addr, align 8, !dbg !4655
  %9 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4655
  %call2 = call %struct.chain** @VEC_chain_p_heap_safe_push(%struct.VEC_chain_p_heap** %8, %struct.chain* %9), !dbg !4655
  br label %if.end53, !dbg !4656

if.end:                                           ; preds = %entry
  %10 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4657
  %refs = getelementptr inbounds %struct.component, %struct.component* %10, i32 0, i32 0, !dbg !4657
  %11 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !4657
  %tobool = icmp ne %struct.VEC_dref_heap* %11, null, !dbg !4657
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4657

cond.true:                                        ; preds = %if.end
  %12 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4657
  %refs3 = getelementptr inbounds %struct.component, %struct.component* %12, i32 0, i32 0, !dbg !4657
  %13 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs3, align 8, !dbg !4657
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %13, i32 0, i32 0, !dbg !4657
  br label %cond.end, !dbg !4657

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4657

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4657
  %call4 = call %struct.dref_d** @VEC_dref_base_address(%struct.VEC_dref_base* %cond), !dbg !4657
  %14 = bitcast %struct.dref_d** %call4 to i8*, !dbg !4657
  %15 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4658
  %refs5 = getelementptr inbounds %struct.component, %struct.component* %15, i32 0, i32 0, !dbg !4658
  %16 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs5, align 8, !dbg !4658
  %tobool6 = icmp ne %struct.VEC_dref_heap* %16, null, !dbg !4658
  br i1 %tobool6, label %cond.true7, label %cond.false10, !dbg !4658

cond.true7:                                       ; preds = %cond.end
  %17 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4658
  %refs8 = getelementptr inbounds %struct.component, %struct.component* %17, i32 0, i32 0, !dbg !4658
  %18 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs8, align 8, !dbg !4658
  %base9 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %18, i32 0, i32 0, !dbg !4658
  br label %cond.end11, !dbg !4658

cond.false10:                                     ; preds = %cond.end
  br label %cond.end11, !dbg !4658

cond.end11:                                       ; preds = %cond.false10, %cond.true7
  %cond12 = phi %struct.VEC_dref_base* [ %base9, %cond.true7 ], [ null, %cond.false10 ], !dbg !4658
  %call13 = call i32 @VEC_dref_base_length(%struct.VEC_dref_base* %cond12), !dbg !4658
  %conv = zext i32 %call13 to i64, !dbg !4658
  call void @spec_qsort(i8* %14, i64 %conv, i64 8, i32 (i8*, i8*)* @order_drefs), !dbg !4659
  store i32 0, i32* %i, align 4, !dbg !4660
  br label %for.cond, !dbg !4662

for.cond:                                         ; preds = %for.inc, %cond.end11
  %19 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4663
  %refs14 = getelementptr inbounds %struct.component, %struct.component* %19, i32 0, i32 0, !dbg !4663
  %20 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs14, align 8, !dbg !4663
  %tobool15 = icmp ne %struct.VEC_dref_heap* %20, null, !dbg !4663
  br i1 %tobool15, label %cond.true16, label %cond.false19, !dbg !4663

cond.true16:                                      ; preds = %for.cond
  %21 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4663
  %refs17 = getelementptr inbounds %struct.component, %struct.component* %21, i32 0, i32 0, !dbg !4663
  %22 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs17, align 8, !dbg !4663
  %base18 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %22, i32 0, i32 0, !dbg !4663
  br label %cond.end20, !dbg !4663

cond.false19:                                     ; preds = %for.cond
  br label %cond.end20, !dbg !4663

cond.end20:                                       ; preds = %cond.false19, %cond.true16
  %cond21 = phi %struct.VEC_dref_base* [ %base18, %cond.true16 ], [ null, %cond.false19 ], !dbg !4663
  %23 = load i32, i32* %i, align 4, !dbg !4663
  %call22 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond21, i32 %23, %struct.dref_d** %a), !dbg !4663
  %tobool23 = icmp ne i32 %call22, 0, !dbg !4665
  br i1 %tobool23, label %for.body, label %for.end, !dbg !4665

for.body:                                         ; preds = %cond.end20
  %24 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4666
  %tobool24 = icmp ne %struct.chain* %24, null, !dbg !4666
  br i1 %tobool24, label %lor.lhs.false, label %if.then39, !dbg !4669

lor.lhs.false:                                    ; preds = %for.body
  %25 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !4670
  %ref = getelementptr inbounds %struct.dref_d, %struct.dref_d* %25, i32 0, i32 0, !dbg !4670
  %26 = load %struct.data_reference*, %struct.data_reference** %ref, align 8, !dbg !4670
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %26, i32 0, i32 3, !dbg !4670
  %27 = load i8, i8* %is_read, align 8, !dbg !4670
  %tobool25 = icmp ne i8 %27, 0, !dbg !4670
  br i1 %tobool25, label %lor.lhs.false26, label %if.then39, !dbg !4671

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %28 = load i32, i32* @target_avail_regs, align 4, !dbg !4672
  %cmp27 = icmp ult i32 %28, 16, !dbg !4672
  %29 = zext i1 %cmp27 to i64, !dbg !4672
  %cond29 = select i1 %cmp27, i32 4, i32 8, !dbg !4672
  %conv30 = sext i32 %cond29 to i64, !dbg !4672
  %call31 = call { i64, i64 } @uhwi_to_double_int(i64 %conv30), !dbg !4673
  %30 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !4673
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 0, !dbg !4673
  %32 = extractvalue { i64, i64 } %call31, 0, !dbg !4673
  store i64 %32, i64* %31, align 8, !dbg !4673
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 1, !dbg !4673
  %34 = extractvalue { i64, i64 } %call31, 1, !dbg !4673
  store i64 %34, i64* %33, align 8, !dbg !4673
  %35 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !4674
  %offset = getelementptr inbounds %struct.dref_d, %struct.dref_d* %35, i32 0, i32 4, !dbg !4675
  %36 = bitcast %struct.double_int* %last_ofs to { i64, i64 }*, !dbg !4676
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 0, !dbg !4676
  %38 = load i64, i64* %37, align 8, !dbg !4676
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %36, i32 0, i32 1, !dbg !4676
  %40 = load i64, i64* %39, align 8, !dbg !4676
  %call34 = call { i64, i64 } @double_int_neg(i64 %38, i64 %40), !dbg !4676
  %41 = bitcast %struct.double_int* %agg.tmp33 to { i64, i64 }*, !dbg !4676
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 0, !dbg !4676
  %43 = extractvalue { i64, i64 } %call34, 0, !dbg !4676
  store i64 %43, i64* %42, align 8, !dbg !4676
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %41, i32 0, i32 1, !dbg !4676
  %45 = extractvalue { i64, i64 } %call34, 1, !dbg !4676
  store i64 %45, i64* %44, align 8, !dbg !4676
  %46 = bitcast %struct.double_int* %offset to { i64, i64 }*, !dbg !4677
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %46, i32 0, i32 0, !dbg !4677
  %48 = load i64, i64* %47, align 8, !dbg !4677
  %49 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %46, i32 0, i32 1, !dbg !4677
  %50 = load i64, i64* %49, align 8, !dbg !4677
  %51 = bitcast %struct.double_int* %agg.tmp33 to { i64, i64 }*, !dbg !4677
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 0, !dbg !4677
  %53 = load i64, i64* %52, align 8, !dbg !4677
  %54 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %51, i32 0, i32 1, !dbg !4677
  %55 = load i64, i64* %54, align 8, !dbg !4677
  %call35 = call { i64, i64 } @double_int_add(i64 %48, i64 %50, i64 %53, i64 %55), !dbg !4677
  %56 = bitcast %struct.double_int* %agg.tmp32 to { i64, i64 }*, !dbg !4677
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %56, i32 0, i32 0, !dbg !4677
  %58 = extractvalue { i64, i64 } %call35, 0, !dbg !4677
  store i64 %58, i64* %57, align 8, !dbg !4677
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %56, i32 0, i32 1, !dbg !4677
  %60 = extractvalue { i64, i64 } %call35, 1, !dbg !4677
  store i64 %60, i64* %59, align 8, !dbg !4677
  %61 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !4678
  %62 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %61, i32 0, i32 0, !dbg !4678
  %63 = load i64, i64* %62, align 8, !dbg !4678
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %61, i32 0, i32 1, !dbg !4678
  %65 = load i64, i64* %64, align 8, !dbg !4678
  %66 = bitcast %struct.double_int* %agg.tmp32 to { i64, i64 }*, !dbg !4678
  %67 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %66, i32 0, i32 0, !dbg !4678
  %68 = load i64, i64* %67, align 8, !dbg !4678
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %66, i32 0, i32 1, !dbg !4678
  %70 = load i64, i64* %69, align 8, !dbg !4678
  %call36 = call i32 @double_int_ucmp(i64 %63, i64 %65, i64 %68, i64 %70), !dbg !4678
  %cmp37 = icmp sle i32 %call36, 0, !dbg !4679
  br i1 %cmp37, label %if.then39, label %if.end47, !dbg !4680

if.then39:                                        ; preds = %lor.lhs.false26, %lor.lhs.false, %for.body
  %71 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4681
  %call40 = call zeroext i8 @nontrivial_chain_p(%struct.chain* %71), !dbg !4684
  %tobool41 = icmp ne i8 %call40, 0, !dbg !4684
  br i1 %tobool41, label %if.then42, label %if.else, !dbg !4685

if.then42:                                        ; preds = %if.then39
  %72 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4686
  %73 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4688
  call void @add_looparound_copies(%struct.loop* %72, %struct.chain* %73), !dbg !4689
  %74 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %chains.addr, align 8, !dbg !4690
  %75 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4690
  %call43 = call %struct.chain** @VEC_chain_p_heap_safe_push(%struct.VEC_chain_p_heap** %74, %struct.chain* %75), !dbg !4690
  br label %if.end44, !dbg !4691

if.else:                                          ; preds = %if.then39
  %76 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4692
  call void @release_chain(%struct.chain* %76), !dbg !4693
  br label %if.end44

if.end44:                                         ; preds = %if.else, %if.then42
  %77 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !4694
  %call45 = call %struct.chain* @make_rooted_chain(%struct.dref_d* %77), !dbg !4695
  store %struct.chain* %call45, %struct.chain** %chain, align 8, !dbg !4696
  %78 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !4697
  %offset46 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %78, i32 0, i32 4, !dbg !4698
  %79 = bitcast %struct.double_int* %last_ofs to i8*, !dbg !4698
  %80 = bitcast %struct.double_int* %offset46 to i8*, !dbg !4698
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %80, i64 16, i1 false), !dbg !4698
  br label %for.inc, !dbg !4699

if.end47:                                         ; preds = %lor.lhs.false26
  %81 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4700
  %82 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !4701
  call void @add_ref_to_chain(%struct.chain* %81, %struct.dref_d* %82), !dbg !4702
  br label %for.inc, !dbg !4703

for.inc:                                          ; preds = %if.end47, %if.end44
  %83 = load i32, i32* %i, align 4, !dbg !4704
  %inc = add i32 %83, 1, !dbg !4704
  store i32 %inc, i32* %i, align 4, !dbg !4704
  br label %for.cond, !dbg !4705, !llvm.loop !4706

for.end:                                          ; preds = %cond.end20
  %84 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4708
  %call48 = call zeroext i8 @nontrivial_chain_p(%struct.chain* %84), !dbg !4710
  %tobool49 = icmp ne i8 %call48, 0, !dbg !4710
  br i1 %tobool49, label %if.then50, label %if.else52, !dbg !4711

if.then50:                                        ; preds = %for.end
  %85 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4712
  %86 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4714
  call void @add_looparound_copies(%struct.loop* %85, %struct.chain* %86), !dbg !4715
  %87 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %chains.addr, align 8, !dbg !4716
  %88 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4716
  %call51 = call %struct.chain** @VEC_chain_p_heap_safe_push(%struct.VEC_chain_p_heap** %87, %struct.chain* %88), !dbg !4716
  br label %if.end53, !dbg !4717

if.else52:                                        ; preds = %for.end
  %89 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4718
  call void @release_chain(%struct.chain* %89), !dbg !4719
  br label %if.end53

if.end53:                                         ; preds = %if.then, %if.else52, %if.then50
  ret void, !dbg !4720
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.chain* @make_invariant_chain(%struct.component* %comp) #0 !dbg !4721 {
entry:
  %comp.addr = alloca %struct.component*, align 8
  %chain = alloca %struct.chain*, align 8
  %i = alloca i32, align 4
  %ref = alloca %struct.dref_d*, align 8
  store %struct.component* %comp, %struct.component** %comp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.component** %comp.addr, metadata !4724, metadata !DIExpression()), !dbg !4725
  call void @llvm.dbg.declare(metadata %struct.chain** %chain, metadata !4726, metadata !DIExpression()), !dbg !4727
  %call = call i8* @xcalloc(i64 1, i64 72), !dbg !4728
  %0 = bitcast i8* %call to %struct.chain*, !dbg !4728
  store %struct.chain* %0, %struct.chain** %chain, align 8, !dbg !4727
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4729, metadata !DIExpression()), !dbg !4730
  call void @llvm.dbg.declare(metadata %struct.dref_d** %ref, metadata !4731, metadata !DIExpression()), !dbg !4732
  %1 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4733
  %type = getelementptr inbounds %struct.chain, %struct.chain* %1, i32 0, i32 0, !dbg !4734
  store i32 0, i32* %type, align 8, !dbg !4735
  %2 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4736
  %all_always_accessed = getelementptr inbounds %struct.chain, %struct.chain* %2, i32 0, i32 9, !dbg !4737
  %bf.load = load i8, i8* %all_always_accessed, align 8, !dbg !4738
  %bf.clear = and i8 %bf.load, -3, !dbg !4738
  %bf.set = or i8 %bf.clear, 2, !dbg !4738
  store i8 %bf.set, i8* %all_always_accessed, align 8, !dbg !4738
  store i32 0, i32* %i, align 4, !dbg !4739
  br label %for.cond, !dbg !4741

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4742
  %refs = getelementptr inbounds %struct.component, %struct.component* %3, i32 0, i32 0, !dbg !4742
  %4 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !4742
  %tobool = icmp ne %struct.VEC_dref_heap* %4, null, !dbg !4742
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4742

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.component*, %struct.component** %comp.addr, align 8, !dbg !4742
  %refs1 = getelementptr inbounds %struct.component, %struct.component* %5, i32 0, i32 0, !dbg !4742
  %6 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs1, align 8, !dbg !4742
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %6, i32 0, i32 0, !dbg !4742
  br label %cond.end, !dbg !4742

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4742

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4742
  %7 = load i32, i32* %i, align 4, !dbg !4742
  %call2 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond, i32 %7, %struct.dref_d** %ref), !dbg !4742
  %tobool3 = icmp ne i32 %call2, 0, !dbg !4744
  br i1 %tobool3, label %for.body, label %for.end, !dbg !4744

for.body:                                         ; preds = %cond.end
  %8 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4745
  %refs4 = getelementptr inbounds %struct.chain, %struct.chain* %8, i32 0, i32 5, !dbg !4745
  %9 = load %struct.dref_d*, %struct.dref_d** %ref, align 8, !dbg !4745
  %call5 = call %struct.dref_d** @VEC_dref_heap_safe_push(%struct.VEC_dref_heap** %refs4, %struct.dref_d* %9), !dbg !4745
  %10 = load %struct.dref_d*, %struct.dref_d** %ref, align 8, !dbg !4747
  %always_accessed = getelementptr inbounds %struct.dref_d, %struct.dref_d* %10, i32 0, i32 6, !dbg !4748
  %bf.load6 = load i8, i8* %always_accessed, align 4, !dbg !4748
  %bf.clear7 = and i8 %bf.load6, 1, !dbg !4748
  %bf.cast = zext i8 %bf.clear7 to i32, !dbg !4748
  %11 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4749
  %all_always_accessed8 = getelementptr inbounds %struct.chain, %struct.chain* %11, i32 0, i32 9, !dbg !4750
  %bf.load9 = load i8, i8* %all_always_accessed8, align 8, !dbg !4751
  %bf.lshr = lshr i8 %bf.load9, 1, !dbg !4751
  %bf.clear10 = and i8 %bf.lshr, 1, !dbg !4751
  %bf.cast11 = zext i8 %bf.clear10 to i32, !dbg !4751
  %and = and i32 %bf.cast11, %bf.cast, !dbg !4751
  %12 = trunc i32 %and to i8, !dbg !4751
  %bf.load12 = load i8, i8* %all_always_accessed8, align 8, !dbg !4751
  %bf.value = and i8 %12, 1, !dbg !4751
  %bf.shl = shl i8 %bf.value, 1, !dbg !4751
  %bf.clear13 = and i8 %bf.load12, -3, !dbg !4751
  %bf.set14 = or i8 %bf.clear13, %bf.shl, !dbg !4751
  store i8 %bf.set14, i8* %all_always_accessed8, align 8, !dbg !4751
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !4751
  br label %for.inc, !dbg !4752

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4, !dbg !4753
  %inc = add i32 %13, 1, !dbg !4753
  store i32 %inc, i32* %i, align 4, !dbg !4753
  br label %for.cond, !dbg !4754, !llvm.loop !4755

for.end:                                          ; preds = %cond.end
  %14 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4757
  ret %struct.chain* %14, !dbg !4758
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.chain** @VEC_chain_p_heap_safe_push(%struct.VEC_chain_p_heap** %vec_, %struct.chain* %obj_) #0 !dbg !4759 {
entry:
  %vec_.addr = alloca %struct.VEC_chain_p_heap**, align 8
  %obj_.addr = alloca %struct.chain*, align 8
  store %struct.VEC_chain_p_heap** %vec_, %struct.VEC_chain_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap*** %vec_.addr, metadata !4762, metadata !DIExpression()), !dbg !4763
  store %struct.chain* %obj_, %struct.chain** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %obj_.addr, metadata !4764, metadata !DIExpression()), !dbg !4763
  %0 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %vec_.addr, align 8, !dbg !4763
  %call = call i32 @VEC_chain_p_heap_reserve(%struct.VEC_chain_p_heap** %0, i32 1), !dbg !4763
  %1 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %vec_.addr, align 8, !dbg !4763
  %2 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %1, align 8, !dbg !4763
  %tobool = icmp ne %struct.VEC_chain_p_heap* %2, null, !dbg !4763
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4763

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %vec_.addr, align 8, !dbg !4763
  %4 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %3, align 8, !dbg !4763
  %base = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %4, i32 0, i32 0, !dbg !4763
  br label %cond.end, !dbg !4763

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4763

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_chain_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4763
  %5 = load %struct.chain*, %struct.chain** %obj_.addr, align 8, !dbg !4763
  %call1 = call %struct.chain** @VEC_chain_p_base_quick_push(%struct.VEC_chain_p_base* %cond, %struct.chain* %5), !dbg !4763
  ret %struct.chain** %call1, !dbg !4763
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.dref_d** @VEC_dref_base_address(%struct.VEC_dref_base* %vec_) #0 !dbg !4765 {
entry:
  %vec_.addr = alloca %struct.VEC_dref_base*, align 8
  store %struct.VEC_dref_base* %vec_, %struct.VEC_dref_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_dref_base** %vec_.addr, metadata !4768, metadata !DIExpression()), !dbg !4769
  %0 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !4769
  %tobool = icmp ne %struct.VEC_dref_base* %0, null, !dbg !4769
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4769

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !4769
  %vec = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %1, i32 0, i32 2, !dbg !4769
  %arraydecay = getelementptr inbounds [1 x %struct.dref_d*], [1 x %struct.dref_d*]* %vec, i64 0, i64 0, !dbg !4769
  br label %cond.end, !dbg !4769

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4769

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.dref_d** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !4769
  ret %struct.dref_d** %cond, !dbg !4769
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @order_drefs(i8* %a, i8* %b) #0 !dbg !4770 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %da = alloca %struct.dref_d**, align 8
  %db = alloca %struct.dref_d**, align 8
  %offcmp = alloca i32, align 4
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !4771, metadata !DIExpression()), !dbg !4772
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !4773, metadata !DIExpression()), !dbg !4774
  call void @llvm.dbg.declare(metadata %struct.dref_d*** %da, metadata !4775, metadata !DIExpression()), !dbg !4777
  %0 = load i8*, i8** %a.addr, align 8, !dbg !4778
  %1 = bitcast i8* %0 to %struct.dref_d**, !dbg !4779
  store %struct.dref_d** %1, %struct.dref_d*** %da, align 8, !dbg !4777
  call void @llvm.dbg.declare(metadata %struct.dref_d*** %db, metadata !4780, metadata !DIExpression()), !dbg !4781
  %2 = load i8*, i8** %b.addr, align 8, !dbg !4782
  %3 = bitcast i8* %2 to %struct.dref_d**, !dbg !4783
  store %struct.dref_d** %3, %struct.dref_d*** %db, align 8, !dbg !4781
  call void @llvm.dbg.declare(metadata i32* %offcmp, metadata !4784, metadata !DIExpression()), !dbg !4785
  %4 = load %struct.dref_d**, %struct.dref_d*** %da, align 8, !dbg !4786
  %5 = load %struct.dref_d*, %struct.dref_d** %4, align 8, !dbg !4787
  %offset = getelementptr inbounds %struct.dref_d, %struct.dref_d* %5, i32 0, i32 4, !dbg !4788
  %6 = load %struct.dref_d**, %struct.dref_d*** %db, align 8, !dbg !4789
  %7 = load %struct.dref_d*, %struct.dref_d** %6, align 8, !dbg !4790
  %offset1 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %7, i32 0, i32 4, !dbg !4791
  %8 = bitcast %struct.double_int* %offset to { i64, i64 }*, !dbg !4792
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !4792
  %10 = load i64, i64* %9, align 8, !dbg !4792
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !4792
  %12 = load i64, i64* %11, align 8, !dbg !4792
  %13 = bitcast %struct.double_int* %offset1 to { i64, i64 }*, !dbg !4792
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 0, !dbg !4792
  %15 = load i64, i64* %14, align 8, !dbg !4792
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %13, i32 0, i32 1, !dbg !4792
  %17 = load i64, i64* %16, align 8, !dbg !4792
  %call = call i32 @double_int_scmp(i64 %10, i64 %12, i64 %15, i64 %17), !dbg !4792
  store i32 %call, i32* %offcmp, align 4, !dbg !4785
  %18 = load i32, i32* %offcmp, align 4, !dbg !4793
  %cmp = icmp ne i32 %18, 0, !dbg !4795
  br i1 %cmp, label %if.then, label %if.end, !dbg !4796

if.then:                                          ; preds = %entry
  %19 = load i32, i32* %offcmp, align 4, !dbg !4797
  store i32 %19, i32* %retval, align 4, !dbg !4798
  br label %return, !dbg !4798

if.end:                                           ; preds = %entry
  %20 = load %struct.dref_d**, %struct.dref_d*** %da, align 8, !dbg !4799
  %21 = load %struct.dref_d*, %struct.dref_d** %20, align 8, !dbg !4800
  %pos = getelementptr inbounds %struct.dref_d, %struct.dref_d* %21, i32 0, i32 5, !dbg !4801
  %22 = load i32, i32* %pos, align 8, !dbg !4801
  %23 = load %struct.dref_d**, %struct.dref_d*** %db, align 8, !dbg !4802
  %24 = load %struct.dref_d*, %struct.dref_d** %23, align 8, !dbg !4803
  %pos2 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %24, i32 0, i32 5, !dbg !4804
  %25 = load i32, i32* %pos2, align 8, !dbg !4804
  %sub = sub i32 %22, %25, !dbg !4805
  store i32 %sub, i32* %retval, align 4, !dbg !4806
  br label %return, !dbg !4806

return:                                           ; preds = %if.end, %if.then
  %26 = load i32, i32* %retval, align 4, !dbg !4807
  ret i32 %26, !dbg !4807
}

declare dso_local i32 @double_int_ucmp(i64, i64, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal { i64, i64 } @uhwi_to_double_int(i64 %cst) #0 !dbg !4808 {
entry:
  %retval = alloca %struct.double_int, align 8
  %cst.addr = alloca i64, align 8
  store i64 %cst, i64* %cst.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %cst.addr, metadata !4811, metadata !DIExpression()), !dbg !4812
  call void @llvm.dbg.declare(metadata %struct.double_int* %retval, metadata !4813, metadata !DIExpression()), !dbg !4814
  %0 = load i64, i64* %cst.addr, align 8, !dbg !4815
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 0, !dbg !4816
  store i64 %0, i64* %low, align 8, !dbg !4817
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i32 0, i32 1, !dbg !4818
  store i64 0, i64* %high, align 8, !dbg !4819
  %1 = bitcast %struct.double_int* %retval to { i64, i64 }*, !dbg !4820
  %2 = load { i64, i64 }, { i64, i64 }* %1, align 8, !dbg !4820
  ret { i64, i64 } %2, !dbg !4820
}

declare dso_local { i64, i64 } @double_int_add(i64, i64, i64, i64) #2

declare dso_local { i64, i64 } @double_int_neg(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @nontrivial_chain_p(%struct.chain* %chain) #0 !dbg !4821 {
entry:
  %chain.addr = alloca %struct.chain*, align 8
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !4824, metadata !DIExpression()), !dbg !4825
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4826
  %cmp = icmp ne %struct.chain* %0, null, !dbg !4827
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4828

land.rhs:                                         ; preds = %entry
  %1 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4829
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %1, i32 0, i32 5, !dbg !4829
  %2 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !4829
  %tobool = icmp ne %struct.VEC_dref_heap* %2, null, !dbg !4829
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4829

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4829
  %refs1 = getelementptr inbounds %struct.chain, %struct.chain* %3, i32 0, i32 5, !dbg !4829
  %4 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs1, align 8, !dbg !4829
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %4, i32 0, i32 0, !dbg !4829
  br label %cond.end, !dbg !4829

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !4829

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4829
  %call = call i32 @VEC_dref_base_length(%struct.VEC_dref_base* %cond), !dbg !4829
  %cmp2 = icmp ugt i32 %call, 1, !dbg !4830
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %5 = phi i1 [ false, %entry ], [ %cmp2, %cond.end ], !dbg !4831
  %land.ext = zext i1 %5 to i32, !dbg !4828
  %conv = trunc i32 %land.ext to i8, !dbg !4826
  ret i8 %conv, !dbg !4832
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_looparound_copies(%struct.loop* %loop, %struct.chain* %chain) #0 !dbg !4833 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chain.addr = alloca %struct.chain*, align 8
  %i = alloca i32, align 4
  %ref = alloca %struct.dref_d*, align 8
  %root = alloca %struct.dref_d*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4836, metadata !DIExpression()), !dbg !4837
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !4838, metadata !DIExpression()), !dbg !4839
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4840, metadata !DIExpression()), !dbg !4841
  call void @llvm.dbg.declare(metadata %struct.dref_d** %ref, metadata !4842, metadata !DIExpression()), !dbg !4843
  call void @llvm.dbg.declare(metadata %struct.dref_d** %root, metadata !4844, metadata !DIExpression()), !dbg !4845
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4846
  %call = call %struct.dref_d* @get_chain_root(%struct.chain* %0), !dbg !4847
  store %struct.dref_d* %call, %struct.dref_d** %root, align 8, !dbg !4845
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4848, metadata !DIExpression()), !dbg !4849
  store i32 0, i32* %i, align 4, !dbg !4850
  br label %for.cond, !dbg !4852

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4853
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %1, i32 0, i32 5, !dbg !4853
  %2 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !4853
  %tobool = icmp ne %struct.VEC_dref_heap* %2, null, !dbg !4853
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4853

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4853
  %refs1 = getelementptr inbounds %struct.chain, %struct.chain* %3, i32 0, i32 5, !dbg !4853
  %4 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs1, align 8, !dbg !4853
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %4, i32 0, i32 0, !dbg !4853
  br label %cond.end, !dbg !4853

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4853

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4853
  %5 = load i32, i32* %i, align 4, !dbg !4853
  %call2 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond, i32 %5, %struct.dref_d** %ref), !dbg !4853
  %tobool3 = icmp ne i32 %call2, 0, !dbg !4855
  br i1 %tobool3, label %for.body, label %for.end, !dbg !4855

for.body:                                         ; preds = %cond.end
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4856
  %7 = load %struct.dref_d*, %struct.dref_d** %ref, align 8, !dbg !4858
  %8 = load %struct.dref_d*, %struct.dref_d** %root, align 8, !dbg !4859
  %call4 = call %union.gimple_statement_d* @find_looparound_phi(%struct.loop* %6, %struct.dref_d* %7, %struct.dref_d* %8), !dbg !4860
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %phi, align 8, !dbg !4861
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4862
  %tobool5 = icmp ne %union.gimple_statement_d* %9, null, !dbg !4862
  br i1 %tobool5, label %if.end, label %if.then, !dbg !4864

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !4865

if.end:                                           ; preds = %for.body
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @looparound_phis, align 8, !dbg !4866
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4867
  %call6 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %11), !dbg !4867
  %call7 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call6), !dbg !4867
  %ssa_name = bitcast %union.tree_node* %call7 to %struct.tree_ssa_name*, !dbg !4867
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !4867
  %12 = load i32, i32* %version, align 8, !dbg !4867
  %call8 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %10, i32 %12), !dbg !4868
  %13 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4869
  %14 = load %struct.dref_d*, %struct.dref_d** %ref, align 8, !dbg !4870
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4871
  call void @insert_looparound_copy(%struct.chain* %13, %struct.dref_d* %14, %union.gimple_statement_d* %15), !dbg !4872
  br label %for.inc, !dbg !4873

for.inc:                                          ; preds = %if.end, %if.then
  %16 = load i32, i32* %i, align 4, !dbg !4874
  %inc = add i32 %16, 1, !dbg !4874
  store i32 %inc, i32* %i, align 4, !dbg !4874
  br label %for.cond, !dbg !4875, !llvm.loop !4876

for.end:                                          ; preds = %cond.end
  ret void, !dbg !4878
}

; Function Attrs: noinline nounwind uwtable
define internal void @release_chain(%struct.chain* %chain) #0 !dbg !4879 {
entry:
  %chain.addr = alloca %struct.chain*, align 8
  %ref = alloca %struct.dref_d*, align 8
  %i = alloca i32, align 4
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !4882, metadata !DIExpression()), !dbg !4883
  call void @llvm.dbg.declare(metadata %struct.dref_d** %ref, metadata !4884, metadata !DIExpression()), !dbg !4885
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4886, metadata !DIExpression()), !dbg !4887
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4888
  %cmp = icmp eq %struct.chain* %0, null, !dbg !4890
  br i1 %cmp, label %if.then, label %if.end, !dbg !4891

if.then:                                          ; preds = %entry
  br label %return, !dbg !4892

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !4893
  br label %for.cond, !dbg !4895

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4896
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %1, i32 0, i32 5, !dbg !4896
  %2 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !4896
  %tobool = icmp ne %struct.VEC_dref_heap* %2, null, !dbg !4896
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4896

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4896
  %refs1 = getelementptr inbounds %struct.chain, %struct.chain* %3, i32 0, i32 5, !dbg !4896
  %4 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs1, align 8, !dbg !4896
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %4, i32 0, i32 0, !dbg !4896
  br label %cond.end, !dbg !4896

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4896

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4896
  %5 = load i32, i32* %i, align 4, !dbg !4896
  %call = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond, i32 %5, %struct.dref_d** %ref), !dbg !4896
  %tobool2 = icmp ne i32 %call, 0, !dbg !4898
  br i1 %tobool2, label %for.body, label %for.end, !dbg !4898

for.body:                                         ; preds = %cond.end
  %6 = load %struct.dref_d*, %struct.dref_d** %ref, align 8, !dbg !4899
  %7 = bitcast %struct.dref_d* %6 to i8*, !dbg !4899
  call void @free(i8* %7), !dbg !4900
  br label %for.inc, !dbg !4900

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !4901
  %inc = add i32 %8, 1, !dbg !4901
  store i32 %inc, i32* %i, align 4, !dbg !4901
  br label %for.cond, !dbg !4902, !llvm.loop !4903

for.end:                                          ; preds = %cond.end
  %9 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4905
  %refs3 = getelementptr inbounds %struct.chain, %struct.chain* %9, i32 0, i32 5, !dbg !4905
  call void @VEC_dref_heap_free(%struct.VEC_dref_heap** %refs3), !dbg !4905
  %10 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4906
  %vars = getelementptr inbounds %struct.chain, %struct.chain* %10, i32 0, i32 7, !dbg !4906
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vars), !dbg !4906
  %11 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4907
  %inits = getelementptr inbounds %struct.chain, %struct.chain* %11, i32 0, i32 8, !dbg !4907
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %inits), !dbg !4907
  %12 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4908
  %13 = bitcast %struct.chain* %12 to i8*, !dbg !4908
  call void @free(i8* %13), !dbg !4909
  br label %return, !dbg !4910

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !4910
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.chain* @make_rooted_chain(%struct.dref_d* %ref) #0 !dbg !4911 {
entry:
  %ref.addr = alloca %struct.dref_d*, align 8
  %chain = alloca %struct.chain*, align 8
  store %struct.dref_d* %ref, %struct.dref_d** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %ref.addr, metadata !4914, metadata !DIExpression()), !dbg !4915
  call void @llvm.dbg.declare(metadata %struct.chain** %chain, metadata !4916, metadata !DIExpression()), !dbg !4917
  %call = call i8* @xcalloc(i64 1, i64 72), !dbg !4918
  %0 = bitcast i8* %call to %struct.chain*, !dbg !4918
  store %struct.chain* %0, %struct.chain** %chain, align 8, !dbg !4917
  %1 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4919
  %ref1 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %1, i32 0, i32 0, !dbg !4919
  %2 = load %struct.data_reference*, %struct.data_reference** %ref1, align 8, !dbg !4919
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %2, i32 0, i32 3, !dbg !4919
  %3 = load i8, i8* %is_read, align 8, !dbg !4919
  %conv = zext i8 %3 to i32, !dbg !4919
  %tobool = icmp ne i32 %conv, 0, !dbg !4919
  %4 = zext i1 %tobool to i64, !dbg !4919
  %cond = select i1 %tobool, i32 1, i32 2, !dbg !4919
  %5 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4920
  %type = getelementptr inbounds %struct.chain, %struct.chain* %5, i32 0, i32 0, !dbg !4921
  store i32 %cond, i32* %type, align 8, !dbg !4922
  %6 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4923
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %6, i32 0, i32 5, !dbg !4923
  %7 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4923
  %call2 = call %struct.dref_d** @VEC_dref_heap_safe_push(%struct.VEC_dref_heap** %refs, %struct.dref_d* %7), !dbg !4923
  %8 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4924
  %always_accessed = getelementptr inbounds %struct.dref_d, %struct.dref_d* %8, i32 0, i32 6, !dbg !4925
  %bf.load = load i8, i8* %always_accessed, align 4, !dbg !4925
  %bf.clear = and i8 %bf.load, 1, !dbg !4925
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4925
  %9 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4926
  %all_always_accessed = getelementptr inbounds %struct.chain, %struct.chain* %9, i32 0, i32 9, !dbg !4927
  %10 = trunc i32 %bf.cast to i8, !dbg !4928
  %bf.load3 = load i8, i8* %all_always_accessed, align 8, !dbg !4928
  %bf.value = and i8 %10, 1, !dbg !4928
  %bf.shl = shl i8 %bf.value, 1, !dbg !4928
  %bf.clear4 = and i8 %bf.load3, -3, !dbg !4928
  %bf.set = or i8 %bf.clear4, %bf.shl, !dbg !4928
  store i8 %bf.set, i8* %all_always_accessed, align 8, !dbg !4928
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !4928
  %11 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4929
  %distance = getelementptr inbounds %struct.dref_d, %struct.dref_d* %11, i32 0, i32 3, !dbg !4930
  store i32 0, i32* %distance, align 8, !dbg !4931
  %12 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !4932
  ret %struct.chain* %12, !dbg !4933
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_ref_to_chain(%struct.chain* %chain, %struct.dref_d* %ref) #0 !dbg !4934 {
entry:
  %chain.addr = alloca %struct.chain*, align 8
  %ref.addr = alloca %struct.dref_d*, align 8
  %root = alloca %struct.dref_d*, align 8
  %dist = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  %agg.tmp7 = alloca %struct.double_int, align 8
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !4937, metadata !DIExpression()), !dbg !4938
  store %struct.dref_d* %ref, %struct.dref_d** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %ref.addr, metadata !4939, metadata !DIExpression()), !dbg !4940
  call void @llvm.dbg.declare(metadata %struct.dref_d** %root, metadata !4941, metadata !DIExpression()), !dbg !4942
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4943
  %call = call %struct.dref_d* @get_chain_root(%struct.chain* %0), !dbg !4944
  store %struct.dref_d* %call, %struct.dref_d** %root, align 8, !dbg !4942
  call void @llvm.dbg.declare(metadata %struct.double_int* %dist, metadata !4945, metadata !DIExpression()), !dbg !4946
  %1 = load %struct.dref_d*, %struct.dref_d** %root, align 8, !dbg !4947
  %offset = getelementptr inbounds %struct.dref_d, %struct.dref_d* %1, i32 0, i32 4, !dbg !4947
  %2 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4947
  %offset1 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %2, i32 0, i32 4, !dbg !4947
  %3 = bitcast %struct.double_int* %offset to { i64, i64 }*, !dbg !4947
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0, !dbg !4947
  %5 = load i64, i64* %4, align 8, !dbg !4947
  %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1, !dbg !4947
  %7 = load i64, i64* %6, align 8, !dbg !4947
  %8 = bitcast %struct.double_int* %offset1 to { i64, i64 }*, !dbg !4947
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !dbg !4947
  %10 = load i64, i64* %9, align 8, !dbg !4947
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !dbg !4947
  %12 = load i64, i64* %11, align 8, !dbg !4947
  %call2 = call i32 @double_int_scmp(i64 %5, i64 %7, i64 %10, i64 %12), !dbg !4947
  %cmp = icmp sle i32 %call2, 0, !dbg !4947
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4947

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 926, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !4947
  br label %cond.end, !dbg !4947

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4947

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4947
  %13 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4948
  %offset3 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %13, i32 0, i32 4, !dbg !4949
  %14 = load %struct.dref_d*, %struct.dref_d** %root, align 8, !dbg !4950
  %offset4 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %14, i32 0, i32 4, !dbg !4951
  %15 = bitcast %struct.double_int* %offset4 to { i64, i64 }*, !dbg !4952
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i32 0, i32 0, !dbg !4952
  %17 = load i64, i64* %16, align 8, !dbg !4952
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %15, i32 0, i32 1, !dbg !4952
  %19 = load i64, i64* %18, align 8, !dbg !4952
  %call5 = call { i64, i64 } @double_int_neg(i64 %17, i64 %19), !dbg !4952
  %20 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !4952
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 0, !dbg !4952
  %22 = extractvalue { i64, i64 } %call5, 0, !dbg !4952
  store i64 %22, i64* %21, align 8, !dbg !4952
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 1, !dbg !4952
  %24 = extractvalue { i64, i64 } %call5, 1, !dbg !4952
  store i64 %24, i64* %23, align 8, !dbg !4952
  %25 = bitcast %struct.double_int* %offset3 to { i64, i64 }*, !dbg !4953
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i32 0, i32 0, !dbg !4953
  %27 = load i64, i64* %26, align 8, !dbg !4953
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %25, i32 0, i32 1, !dbg !4953
  %29 = load i64, i64* %28, align 8, !dbg !4953
  %30 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !4953
  %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 0, !dbg !4953
  %32 = load i64, i64* %31, align 8, !dbg !4953
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %30, i32 0, i32 1, !dbg !4953
  %34 = load i64, i64* %33, align 8, !dbg !4953
  %call6 = call { i64, i64 } @double_int_add(i64 %27, i64 %29, i64 %32, i64 %34), !dbg !4953
  %35 = bitcast %struct.double_int* %tmp to { i64, i64 }*, !dbg !4953
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 0, !dbg !4953
  %37 = extractvalue { i64, i64 } %call6, 0, !dbg !4953
  store i64 %37, i64* %36, align 8, !dbg !4953
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 1, !dbg !4953
  %39 = extractvalue { i64, i64 } %call6, 1, !dbg !4953
  store i64 %39, i64* %38, align 8, !dbg !4953
  %40 = bitcast %struct.double_int* %dist to i8*, !dbg !4953
  %41 = bitcast %struct.double_int* %tmp to i8*, !dbg !4953
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false), !dbg !4953
  %42 = load i32, i32* @target_avail_regs, align 4, !dbg !4954
  %cmp8 = icmp ult i32 %42, 16, !dbg !4954
  %43 = zext i1 %cmp8 to i64, !dbg !4954
  %cond9 = select i1 %cmp8, i32 4, i32 8, !dbg !4954
  %conv = sext i32 %cond9 to i64, !dbg !4954
  %call10 = call { i64, i64 } @uhwi_to_double_int(i64 %conv), !dbg !4956
  %44 = bitcast %struct.double_int* %agg.tmp7 to { i64, i64 }*, !dbg !4956
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 0, !dbg !4956
  %46 = extractvalue { i64, i64 } %call10, 0, !dbg !4956
  store i64 %46, i64* %45, align 8, !dbg !4956
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %44, i32 0, i32 1, !dbg !4956
  %48 = extractvalue { i64, i64 } %call10, 1, !dbg !4956
  store i64 %48, i64* %47, align 8, !dbg !4956
  %49 = bitcast %struct.double_int* %agg.tmp7 to { i64, i64 }*, !dbg !4957
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %49, i32 0, i32 0, !dbg !4957
  %51 = load i64, i64* %50, align 8, !dbg !4957
  %52 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %49, i32 0, i32 1, !dbg !4957
  %53 = load i64, i64* %52, align 8, !dbg !4957
  %54 = bitcast %struct.double_int* %dist to { i64, i64 }*, !dbg !4957
  %55 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %54, i32 0, i32 0, !dbg !4957
  %56 = load i64, i64* %55, align 8, !dbg !4957
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %54, i32 0, i32 1, !dbg !4957
  %58 = load i64, i64* %57, align 8, !dbg !4957
  %call11 = call i32 @double_int_ucmp(i64 %51, i64 %53, i64 %56, i64 %58), !dbg !4957
  %cmp12 = icmp sle i32 %call11, 0, !dbg !4958
  br i1 %cmp12, label %if.then, label %if.end, !dbg !4959

if.then:                                          ; preds = %cond.end
  %59 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4960
  %60 = bitcast %struct.dref_d* %59 to i8*, !dbg !4960
  call void @free(i8* %60), !dbg !4962
  br label %return, !dbg !4963

if.end:                                           ; preds = %cond.end
  %61 = bitcast %struct.double_int* %dist to { i64, i64 }*, !dbg !4964
  %62 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %61, i32 0, i32 0, !dbg !4964
  %63 = load i64, i64* %62, align 8, !dbg !4964
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %61, i32 0, i32 1, !dbg !4964
  %65 = load i64, i64* %64, align 8, !dbg !4964
  %call14 = call zeroext i8 @double_int_fits_in_uhwi_p(i64 %63, i64 %65), !dbg !4964
  %tobool = icmp ne i8 %call14, 0, !dbg !4964
  br i1 %tobool, label %cond.false16, label %cond.true15, !dbg !4964

cond.true15:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 933, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !4964
  br label %cond.end17, !dbg !4964

cond.false16:                                     ; preds = %if.end
  br label %cond.end17, !dbg !4964

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i32 [ 0, %cond.true15 ], [ 0, %cond.false16 ], !dbg !4964
  %66 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4965
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %66, i32 0, i32 5, !dbg !4965
  %67 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4965
  %call19 = call %struct.dref_d** @VEC_dref_heap_safe_push(%struct.VEC_dref_heap** %refs, %struct.dref_d* %67), !dbg !4965
  %68 = bitcast %struct.double_int* %dist to { i64, i64 }*, !dbg !4966
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %68, i32 0, i32 0, !dbg !4966
  %70 = load i64, i64* %69, align 8, !dbg !4966
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %68, i32 0, i32 1, !dbg !4966
  %72 = load i64, i64* %71, align 8, !dbg !4966
  %call20 = call i64 @double_int_to_uhwi(i64 %70, i64 %72), !dbg !4966
  %conv21 = trunc i64 %call20 to i32, !dbg !4966
  %73 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4967
  %distance = getelementptr inbounds %struct.dref_d, %struct.dref_d* %73, i32 0, i32 3, !dbg !4968
  store i32 %conv21, i32* %distance, align 8, !dbg !4969
  %74 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4970
  %distance22 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %74, i32 0, i32 3, !dbg !4972
  %75 = load i32, i32* %distance22, align 8, !dbg !4972
  %76 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4973
  %length = getelementptr inbounds %struct.chain, %struct.chain* %76, i32 0, i32 6, !dbg !4974
  %77 = load i32, i32* %length, align 8, !dbg !4974
  %cmp23 = icmp uge i32 %75, %77, !dbg !4975
  br i1 %cmp23, label %if.then25, label %if.end28, !dbg !4976

if.then25:                                        ; preds = %cond.end17
  %78 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4977
  %distance26 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %78, i32 0, i32 3, !dbg !4979
  %79 = load i32, i32* %distance26, align 8, !dbg !4979
  %80 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4980
  %length27 = getelementptr inbounds %struct.chain, %struct.chain* %80, i32 0, i32 6, !dbg !4981
  store i32 %79, i32* %length27, align 8, !dbg !4982
  %81 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4983
  %has_max_use_after = getelementptr inbounds %struct.chain, %struct.chain* %81, i32 0, i32 9, !dbg !4984
  %bf.load = load i8, i8* %has_max_use_after, align 8, !dbg !4985
  %bf.clear = and i8 %bf.load, -2, !dbg !4985
  store i8 %bf.clear, i8* %has_max_use_after, align 8, !dbg !4985
  br label %if.end28, !dbg !4986

if.end28:                                         ; preds = %if.then25, %cond.end17
  %82 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4987
  %distance29 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %82, i32 0, i32 3, !dbg !4989
  %83 = load i32, i32* %distance29, align 8, !dbg !4989
  %84 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !4990
  %length30 = getelementptr inbounds %struct.chain, %struct.chain* %84, i32 0, i32 6, !dbg !4991
  %85 = load i32, i32* %length30, align 8, !dbg !4991
  %cmp31 = icmp eq i32 %83, %85, !dbg !4992
  br i1 %cmp31, label %land.lhs.true, label %if.end40, !dbg !4993

land.lhs.true:                                    ; preds = %if.end28
  %86 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !4994
  %pos = getelementptr inbounds %struct.dref_d, %struct.dref_d* %86, i32 0, i32 5, !dbg !4995
  %87 = load i32, i32* %pos, align 8, !dbg !4995
  %88 = load %struct.dref_d*, %struct.dref_d** %root, align 8, !dbg !4996
  %pos33 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %88, i32 0, i32 5, !dbg !4997
  %89 = load i32, i32* %pos33, align 8, !dbg !4997
  %cmp34 = icmp ugt i32 %87, %89, !dbg !4998
  br i1 %cmp34, label %if.then36, label %if.end40, !dbg !4999

if.then36:                                        ; preds = %land.lhs.true
  %90 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5000
  %has_max_use_after37 = getelementptr inbounds %struct.chain, %struct.chain* %90, i32 0, i32 9, !dbg !5001
  %bf.load38 = load i8, i8* %has_max_use_after37, align 8, !dbg !5002
  %bf.clear39 = and i8 %bf.load38, -2, !dbg !5002
  %bf.set = or i8 %bf.clear39, 1, !dbg !5002
  store i8 %bf.set, i8* %has_max_use_after37, align 8, !dbg !5002
  br label %if.end40, !dbg !5000

if.end40:                                         ; preds = %if.then36, %land.lhs.true, %if.end28
  %91 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !5003
  %always_accessed = getelementptr inbounds %struct.dref_d, %struct.dref_d* %91, i32 0, i32 6, !dbg !5004
  %bf.load41 = load i8, i8* %always_accessed, align 4, !dbg !5004
  %bf.clear42 = and i8 %bf.load41, 1, !dbg !5004
  %bf.cast = zext i8 %bf.clear42 to i32, !dbg !5004
  %92 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5005
  %all_always_accessed = getelementptr inbounds %struct.chain, %struct.chain* %92, i32 0, i32 9, !dbg !5006
  %bf.load43 = load i8, i8* %all_always_accessed, align 8, !dbg !5007
  %bf.lshr = lshr i8 %bf.load43, 1, !dbg !5007
  %bf.clear44 = and i8 %bf.lshr, 1, !dbg !5007
  %bf.cast45 = zext i8 %bf.clear44 to i32, !dbg !5007
  %and = and i32 %bf.cast45, %bf.cast, !dbg !5007
  %93 = trunc i32 %and to i8, !dbg !5007
  %bf.load46 = load i8, i8* %all_always_accessed, align 8, !dbg !5007
  %bf.value = and i8 %93, 1, !dbg !5007
  %bf.shl = shl i8 %bf.value, 1, !dbg !5007
  %bf.clear47 = and i8 %bf.load46, -3, !dbg !5007
  %bf.set48 = or i8 %bf.clear47, %bf.shl, !dbg !5007
  store i8 %bf.set48, i8* %all_always_accessed, align 8, !dbg !5007
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !5007
  br label %return, !dbg !5008

return:                                           ; preds = %if.end40, %if.then
  ret void, !dbg !5008
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.dref_d** @VEC_dref_heap_safe_push(%struct.VEC_dref_heap** %vec_, %struct.dref_d* %obj_) #0 !dbg !5009 {
entry:
  %vec_.addr = alloca %struct.VEC_dref_heap**, align 8
  %obj_.addr = alloca %struct.dref_d*, align 8
  store %struct.VEC_dref_heap** %vec_, %struct.VEC_dref_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_dref_heap*** %vec_.addr, metadata !5012, metadata !DIExpression()), !dbg !5013
  store %struct.dref_d* %obj_, %struct.dref_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %obj_.addr, metadata !5014, metadata !DIExpression()), !dbg !5013
  %0 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !5013
  %call = call i32 @VEC_dref_heap_reserve(%struct.VEC_dref_heap** %0, i32 1), !dbg !5013
  %1 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !5013
  %2 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %1, align 8, !dbg !5013
  %tobool = icmp ne %struct.VEC_dref_heap* %2, null, !dbg !5013
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5013

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !5013
  %4 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %3, align 8, !dbg !5013
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %4, i32 0, i32 0, !dbg !5013
  br label %cond.end, !dbg !5013

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5013

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5013
  %5 = load %struct.dref_d*, %struct.dref_d** %obj_.addr, align 8, !dbg !5013
  %call1 = call %struct.dref_d** @VEC_dref_base_quick_push(%struct.VEC_dref_base* %cond, %struct.dref_d* %5), !dbg !5013
  ret %struct.dref_d** %call1, !dbg !5013
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_dref_heap_reserve(%struct.VEC_dref_heap** %vec_, i32 %alloc_) #0 !dbg !5015 {
entry:
  %vec_.addr = alloca %struct.VEC_dref_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_dref_heap** %vec_, %struct.VEC_dref_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_dref_heap*** %vec_.addr, metadata !5018, metadata !DIExpression()), !dbg !5019
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5020, metadata !DIExpression()), !dbg !5019
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5021, metadata !DIExpression()), !dbg !5019
  %0 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !5019
  %1 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %0, align 8, !dbg !5019
  %tobool = icmp ne %struct.VEC_dref_heap* %1, null, !dbg !5019
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5019

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !5019
  %3 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %2, align 8, !dbg !5019
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %3, i32 0, i32 0, !dbg !5019
  br label %cond.end, !dbg !5019

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5019

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5019
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5019
  %call = call i32 @VEC_dref_base_space(%struct.VEC_dref_base* %cond, i32 %4), !dbg !5019
  %tobool1 = icmp ne i32 %call, 0, !dbg !5019
  %lnot = xor i1 %tobool1, true, !dbg !5019
  %lnot.ext = zext i1 %lnot to i32, !dbg !5019
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5019
  %5 = load i32, i32* %extend, align 4, !dbg !5022
  %tobool2 = icmp ne i32 %5, 0, !dbg !5022
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5019

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !5022
  %7 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %6, align 8, !dbg !5022
  %8 = bitcast %struct.VEC_dref_heap* %7 to i8*, !dbg !5022
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5022
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5022
  %10 = bitcast i8* %call3 to %struct.VEC_dref_heap*, !dbg !5022
  %11 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !5022
  store %struct.VEC_dref_heap* %10, %struct.VEC_dref_heap** %11, align 8, !dbg !5022
  br label %if.end, !dbg !5022

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5019
  ret i32 %12, !dbg !5019
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_dref_base_space(%struct.VEC_dref_base* %vec_, i32 %alloc_) #0 !dbg !5024 {
entry:
  %vec_.addr = alloca %struct.VEC_dref_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_dref_base* %vec_, %struct.VEC_dref_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_dref_base** %vec_.addr, metadata !5027, metadata !DIExpression()), !dbg !5028
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5029, metadata !DIExpression()), !dbg !5028
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5028
  %cmp = icmp sge i32 %0, 0, !dbg !5028
  %conv = zext i1 %cmp to i32, !dbg !5028
  %1 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !5028
  %tobool = icmp ne %struct.VEC_dref_base* %1, null, !dbg !5028
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5028

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !5028
  %alloc = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %2, i32 0, i32 1, !dbg !5028
  %3 = load i32, i32* %alloc, align 4, !dbg !5028
  %4 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !5028
  %num = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %4, i32 0, i32 0, !dbg !5028
  %5 = load i32, i32* %num, align 8, !dbg !5028
  %sub = sub i32 %3, %5, !dbg !5028
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5028
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5028
  %conv2 = zext i1 %cmp1 to i32, !dbg !5028
  br label %cond.end, !dbg !5028

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5028
  %tobool3 = icmp ne i32 %7, 0, !dbg !5028
  %lnot = xor i1 %tobool3, true, !dbg !5028
  %lnot.ext = zext i1 %lnot to i32, !dbg !5028
  br label %cond.end, !dbg !5028

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5028
  ret i32 %cond, !dbg !5028
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_chain_p_heap_reserve(%struct.VEC_chain_p_heap** %vec_, i32 %alloc_) #0 !dbg !5030 {
entry:
  %vec_.addr = alloca %struct.VEC_chain_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_chain_p_heap** %vec_, %struct.VEC_chain_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap*** %vec_.addr, metadata !5033, metadata !DIExpression()), !dbg !5034
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5035, metadata !DIExpression()), !dbg !5034
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5036, metadata !DIExpression()), !dbg !5034
  %0 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %vec_.addr, align 8, !dbg !5034
  %1 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %0, align 8, !dbg !5034
  %tobool = icmp ne %struct.VEC_chain_p_heap* %1, null, !dbg !5034
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5034

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %vec_.addr, align 8, !dbg !5034
  %3 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %2, align 8, !dbg !5034
  %base = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %3, i32 0, i32 0, !dbg !5034
  br label %cond.end, !dbg !5034

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5034

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_chain_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5034
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5034
  %call = call i32 @VEC_chain_p_base_space(%struct.VEC_chain_p_base* %cond, i32 %4), !dbg !5034
  %tobool1 = icmp ne i32 %call, 0, !dbg !5034
  %lnot = xor i1 %tobool1, true, !dbg !5034
  %lnot.ext = zext i1 %lnot to i32, !dbg !5034
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5034
  %5 = load i32, i32* %extend, align 4, !dbg !5037
  %tobool2 = icmp ne i32 %5, 0, !dbg !5037
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5034

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %vec_.addr, align 8, !dbg !5037
  %7 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %6, align 8, !dbg !5037
  %8 = bitcast %struct.VEC_chain_p_heap* %7 to i8*, !dbg !5037
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5037
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5037
  %10 = bitcast i8* %call3 to %struct.VEC_chain_p_heap*, !dbg !5037
  %11 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %vec_.addr, align 8, !dbg !5037
  store %struct.VEC_chain_p_heap* %10, %struct.VEC_chain_p_heap** %11, align 8, !dbg !5037
  br label %if.end, !dbg !5037

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5034
  ret i32 %12, !dbg !5034
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.chain** @VEC_chain_p_base_quick_push(%struct.VEC_chain_p_base* %vec_, %struct.chain* %obj_) #0 !dbg !5039 {
entry:
  %vec_.addr = alloca %struct.VEC_chain_p_base*, align 8
  %obj_.addr = alloca %struct.chain*, align 8
  %slot_ = alloca %struct.chain**, align 8
  store %struct.VEC_chain_p_base* %vec_, %struct.VEC_chain_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_base** %vec_.addr, metadata !5043, metadata !DIExpression()), !dbg !5044
  store %struct.chain* %obj_, %struct.chain** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %obj_.addr, metadata !5045, metadata !DIExpression()), !dbg !5044
  call void @llvm.dbg.declare(metadata %struct.chain*** %slot_, metadata !5046, metadata !DIExpression()), !dbg !5044
  %0 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5044
  %num = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %0, i32 0, i32 0, !dbg !5044
  %1 = load i32, i32* %num, align 8, !dbg !5044
  %2 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5044
  %alloc = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %2, i32 0, i32 1, !dbg !5044
  %3 = load i32, i32* %alloc, align 4, !dbg !5044
  %cmp = icmp ult i32 %1, %3, !dbg !5044
  %conv = zext i1 %cmp to i32, !dbg !5044
  %4 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5044
  %vec = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %4, i32 0, i32 2, !dbg !5044
  %5 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5044
  %num1 = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %5, i32 0, i32 0, !dbg !5044
  %6 = load i32, i32* %num1, align 8, !dbg !5044
  %inc = add i32 %6, 1, !dbg !5044
  store i32 %inc, i32* %num1, align 8, !dbg !5044
  %idxprom = zext i32 %6 to i64, !dbg !5044
  %arrayidx = getelementptr inbounds [1 x %struct.chain*], [1 x %struct.chain*]* %vec, i64 0, i64 %idxprom, !dbg !5044
  store %struct.chain** %arrayidx, %struct.chain*** %slot_, align 8, !dbg !5044
  %7 = load %struct.chain*, %struct.chain** %obj_.addr, align 8, !dbg !5044
  %8 = load %struct.chain**, %struct.chain*** %slot_, align 8, !dbg !5044
  store %struct.chain* %7, %struct.chain** %8, align 8, !dbg !5044
  %9 = load %struct.chain**, %struct.chain*** %slot_, align 8, !dbg !5044
  ret %struct.chain** %9, !dbg !5044
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_chain_p_base_space(%struct.VEC_chain_p_base* %vec_, i32 %alloc_) #0 !dbg !5047 {
entry:
  %vec_.addr = alloca %struct.VEC_chain_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_chain_p_base* %vec_, %struct.VEC_chain_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_base** %vec_.addr, metadata !5050, metadata !DIExpression()), !dbg !5051
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5052, metadata !DIExpression()), !dbg !5051
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5051
  %cmp = icmp sge i32 %0, 0, !dbg !5051
  %conv = zext i1 %cmp to i32, !dbg !5051
  %1 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5051
  %tobool = icmp ne %struct.VEC_chain_p_base* %1, null, !dbg !5051
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5051

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5051
  %alloc = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %2, i32 0, i32 1, !dbg !5051
  %3 = load i32, i32* %alloc, align 4, !dbg !5051
  %4 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5051
  %num = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %4, i32 0, i32 0, !dbg !5051
  %5 = load i32, i32* %num, align 8, !dbg !5051
  %sub = sub i32 %3, %5, !dbg !5051
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5051
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5051
  %conv2 = zext i1 %cmp1 to i32, !dbg !5051
  br label %cond.end, !dbg !5051

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5051
  %tobool3 = icmp ne i32 %7, 0, !dbg !5051
  %lnot = xor i1 %tobool3, true, !dbg !5051
  %lnot.ext = zext i1 %lnot to i32, !dbg !5051
  br label %cond.end, !dbg !5051

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5051
  ret i32 %cond, !dbg !5051
}

declare dso_local i32 @double_int_scmp(i64, i64, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.dref_d* @get_chain_root(%struct.chain* %chain) #0 !dbg !5053 {
entry:
  %chain.addr = alloca %struct.chain*, align 8
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !5056, metadata !DIExpression()), !dbg !5057
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5058
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %0, i32 0, i32 5, !dbg !5058
  %1 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !5058
  %tobool = icmp ne %struct.VEC_dref_heap* %1, null, !dbg !5058
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5058

cond.true:                                        ; preds = %entry
  %2 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5058
  %refs1 = getelementptr inbounds %struct.chain, %struct.chain* %2, i32 0, i32 5, !dbg !5058
  %3 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs1, align 8, !dbg !5058
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %3, i32 0, i32 0, !dbg !5058
  br label %cond.end, !dbg !5058

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5058

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5058
  %call = call %struct.dref_d* @VEC_dref_base_index(%struct.VEC_dref_base* %cond, i32 0), !dbg !5058
  ret %struct.dref_d* %call, !dbg !5059
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @find_looparound_phi(%struct.loop* %loop, %struct.dref_d* %ref, %struct.dref_d* %root) #0 !dbg !5060 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %ref.addr = alloca %struct.dref_d*, align 8
  %root.addr = alloca %struct.dref_d*, align 8
  %name = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %init_ref = alloca %union.tree_node*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %init_stmt = alloca %union.gimple_statement_d*, align 8
  %latch = alloca %struct.edge_def*, align 8
  %init_dr = alloca %struct.data_reference, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5063, metadata !DIExpression()), !dbg !5064
  store %struct.dref_d* %ref, %struct.dref_d** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %ref.addr, metadata !5065, metadata !DIExpression()), !dbg !5066
  store %struct.dref_d* %root, %struct.dref_d** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %root.addr, metadata !5067, metadata !DIExpression()), !dbg !5068
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !5069, metadata !DIExpression()), !dbg !5070
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !5071, metadata !DIExpression()), !dbg !5072
  call void @llvm.dbg.declare(metadata %union.tree_node** %init_ref, metadata !5073, metadata !DIExpression()), !dbg !5074
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !5075, metadata !DIExpression()), !dbg !5076
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi, align 8, !dbg !5076
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %init_stmt, metadata !5077, metadata !DIExpression()), !dbg !5078
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch, metadata !5079, metadata !DIExpression()), !dbg !5080
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5081
  %call = call %struct.edge_def* @loop_latch_edge(%struct.loop* %0), !dbg !5082
  store %struct.edge_def* %call, %struct.edge_def** %latch, align 8, !dbg !5080
  call void @llvm.dbg.declare(metadata %struct.data_reference* %init_dr, metadata !5083, metadata !DIExpression()), !dbg !5084
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !5085, metadata !DIExpression()), !dbg !5086
  %1 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !5087
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %1, i32 0, i32 1, !dbg !5089
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5089
  %call1 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %2), !dbg !5090
  %tobool = icmp ne i8 %call1, 0, !dbg !5090
  br i1 %tobool, label %if.then, label %if.else9, !dbg !5091

if.then:                                          ; preds = %entry
  %3 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !5092
  %ref2 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %3, i32 0, i32 0, !dbg !5092
  %4 = load %struct.data_reference*, %struct.data_reference** %ref2, align 8, !dbg !5092
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %4, i32 0, i32 3, !dbg !5092
  %5 = load i8, i8* %is_read, align 8, !dbg !5092
  %tobool3 = icmp ne i8 %5, 0, !dbg !5092
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !5095

if.then4:                                         ; preds = %if.then
  %6 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !5096
  %stmt5 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %6, i32 0, i32 1, !dbg !5097
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt5, align 8, !dbg !5097
  %call6 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %7), !dbg !5098
  store %union.tree_node* %call6, %union.tree_node** %name, align 8, !dbg !5099
  br label %if.end, !dbg !5100

if.else:                                          ; preds = %if.then
  %8 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !5101
  %stmt7 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %8, i32 0, i32 1, !dbg !5102
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt7, align 8, !dbg !5102
  %call8 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %9), !dbg !5103
  store %union.tree_node* %call8, %union.tree_node** %name, align 8, !dbg !5104
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end13, !dbg !5105

if.else9:                                         ; preds = %entry
  %10 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !5106
  %stmt10 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %10, i32 0, i32 1, !dbg !5106
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt10, align 8, !dbg !5106
  %call11 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %11), !dbg !5106
  %call12 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call11), !dbg !5106
  store %union.tree_node* %call12, %union.tree_node** %name, align 8, !dbg !5107
  br label %if.end13

if.end13:                                         ; preds = %if.else9, %if.end
  %12 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5108
  %tobool14 = icmp ne %union.tree_node* %12, null, !dbg !5108
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !5110

if.then15:                                        ; preds = %if.end13
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5111
  br label %return, !dbg !5111

if.end16:                                         ; preds = %if.end13
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5112
  %header = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 2, !dbg !5114
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5114
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %14), !dbg !5115
  %15 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !5115
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5115
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !5115
  br label %for.cond, !dbg !5116

for.cond:                                         ; preds = %for.inc, %if.end16
  %call17 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !5117
  %tobool18 = icmp ne i8 %call17, 0, !dbg !5119
  %lnot = xor i1 %tobool18, true, !dbg !5119
  br i1 %lnot, label %for.body, label %for.end, !dbg !5120

for.body:                                         ; preds = %for.cond
  %call19 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !5121
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %phi, align 8, !dbg !5123
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5124
  %18 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !5124
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 6, !dbg !5124
  %19 = load i32, i32* %dest_idx, align 4, !dbg !5124
  %call20 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %17, i32 %19), !dbg !5124
  %call21 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call20), !dbg !5124
  %20 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5126
  %cmp = icmp eq %union.tree_node* %call21, %20, !dbg !5127
  br i1 %cmp, label %if.then22, label %if.end23, !dbg !5128

if.then22:                                        ; preds = %for.body
  br label %for.end, !dbg !5129

if.end23:                                         ; preds = %for.body
  br label %for.inc, !dbg !5130

for.inc:                                          ; preds = %if.end23
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !5131
  br label %for.cond, !dbg !5132, !llvm.loop !5133

for.end:                                          ; preds = %if.then22, %for.cond
  %call24 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !5135
  %tobool25 = icmp ne i8 %call24, 0, !dbg !5135
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !5137

if.then26:                                        ; preds = %for.end
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5138
  br label %return, !dbg !5138

if.end27:                                         ; preds = %for.end
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5139
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5139
  %call28 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %22), !dbg !5139
  %dest_idx29 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call28, i32 0, i32 6, !dbg !5139
  %23 = load i32, i32* %dest_idx29, align 4, !dbg !5139
  %call30 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %21, i32 %23), !dbg !5139
  %call31 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call30), !dbg !5139
  store %union.tree_node* %call31, %union.tree_node** %init, align 8, !dbg !5140
  %24 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !5141
  %base = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !5141
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !5141
  %bf.load = load i64, i64* %25, align 8, !dbg !5141
  %bf.clear = and i64 %bf.load, 65535, !dbg !5141
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5141
  %cmp32 = icmp ne i32 %bf.cast, 141, !dbg !5143
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !5144

if.then33:                                        ; preds = %if.end27
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5145
  br label %return, !dbg !5145

if.end34:                                         ; preds = %if.end27
  %26 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !5146
  %ssa_name = bitcast %union.tree_node* %26 to %struct.tree_ssa_name*, !dbg !5146
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !5146
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5146
  store %union.gimple_statement_d* %27, %union.gimple_statement_d** %init_stmt, align 8, !dbg !5147
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt, align 8, !dbg !5148
  %call35 = call i32 @gimple_code(%union.gimple_statement_d* %28), !dbg !5150
  %cmp36 = icmp ne i32 %call35, 6, !dbg !5151
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !5152

if.then37:                                        ; preds = %if.end34
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5153
  br label %return, !dbg !5153

if.end38:                                         ; preds = %if.end34
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt, align 8, !dbg !5154
  %call39 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %29), !dbg !5154
  %30 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !5154
  %cmp40 = icmp eq %union.tree_node* %call39, %30, !dbg !5154
  br i1 %cmp40, label %cond.false, label %cond.true, !dbg !5154

cond.true:                                        ; preds = %if.end38
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1104, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !5154
  br label %cond.end, !dbg !5154

cond.false:                                       ; preds = %if.end38
  br label %cond.end, !dbg !5154

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5154
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt, align 8, !dbg !5155
  %call41 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %31), !dbg !5156
  store %union.tree_node* %call41, %union.tree_node** %init_ref, align 8, !dbg !5157
  %32 = load %union.tree_node*, %union.tree_node** %init_ref, align 8, !dbg !5158
  %base42 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !5158
  %33 = bitcast %struct.tree_base* %base42 to i64*, !dbg !5158
  %bf.load43 = load i64, i64* %33, align 8, !dbg !5158
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !5158
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !5158
  %idxprom = sext i32 %bf.cast45 to i64, !dbg !5158
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5158
  %34 = load i32, i32* %arrayidx, align 4, !dbg !5158
  %cmp46 = icmp eq i32 %34, 4, !dbg !5158
  br i1 %cmp46, label %if.end55, label %land.lhs.true, !dbg !5160

land.lhs.true:                                    ; preds = %cond.end
  %35 = load %union.tree_node*, %union.tree_node** %init_ref, align 8, !dbg !5161
  %base47 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !5161
  %36 = bitcast %struct.tree_base* %base47 to i64*, !dbg !5161
  %bf.load48 = load i64, i64* %36, align 8, !dbg !5161
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !5161
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !5161
  %idxprom51 = sext i32 %bf.cast50 to i64, !dbg !5161
  %arrayidx52 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom51, !dbg !5161
  %37 = load i32, i32* %arrayidx52, align 4, !dbg !5161
  %cmp53 = icmp eq i32 %37, 3, !dbg !5161
  br i1 %cmp53, label %if.end55, label %if.then54, !dbg !5162

if.then54:                                        ; preds = %land.lhs.true
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5163
  br label %return, !dbg !5163

if.end55:                                         ; preds = %land.lhs.true, %cond.end
  %38 = bitcast %struct.data_reference* %init_dr to i8*, !dbg !5164
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 112, i1 false), !dbg !5164
  %39 = load %union.tree_node*, %union.tree_node** %init_ref, align 8, !dbg !5165
  %ref56 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %init_dr, i32 0, i32 1, !dbg !5166
  store %union.tree_node* %39, %union.tree_node** %ref56, align 8, !dbg !5167
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5168
  %stmt57 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %init_dr, i32 0, i32 0, !dbg !5169
  store %union.gimple_statement_d* %40, %union.gimple_statement_d** %stmt57, align 8, !dbg !5170
  %call58 = call zeroext i8 @dr_analyze_innermost(%struct.data_reference* %init_dr), !dbg !5171
  %tobool59 = icmp ne i8 %call58, 0, !dbg !5171
  br i1 %tobool59, label %if.end61, label %if.then60, !dbg !5173

if.then60:                                        ; preds = %if.end55
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5174
  br label %return, !dbg !5174

if.end61:                                         ; preds = %if.end55
  %41 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !5175
  %distance = getelementptr inbounds %struct.dref_d, %struct.dref_d* %41, i32 0, i32 3, !dbg !5177
  %42 = load i32, i32* %distance, align 8, !dbg !5177
  %add = add i32 %42, 1, !dbg !5178
  %43 = load %struct.dref_d*, %struct.dref_d** %root.addr, align 8, !dbg !5179
  %ref62 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %43, i32 0, i32 0, !dbg !5180
  %44 = load %struct.data_reference*, %struct.data_reference** %ref62, align 8, !dbg !5180
  %call63 = call zeroext i8 @valid_initializer_p(%struct.data_reference* %init_dr, i32 %add, %struct.data_reference* %44), !dbg !5181
  %tobool64 = icmp ne i8 %call63, 0, !dbg !5181
  br i1 %tobool64, label %if.end66, label %if.then65, !dbg !5182

if.then65:                                        ; preds = %if.end61
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !5183
  br label %return, !dbg !5183

if.end66:                                         ; preds = %if.end61
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5184
  store %union.gimple_statement_d* %45, %union.gimple_statement_d** %retval, align 8, !dbg !5185
  br label %return, !dbg !5185

return:                                           ; preds = %if.end66, %if.then65, %if.then60, %if.then54, %if.then37, %if.then33, %if.then26, %if.then15
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !5186
  ret %union.gimple_statement_d* %46, !dbg !5186
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_looparound_copy(%struct.chain* %chain, %struct.dref_d* %ref, %union.gimple_statement_d* %phi) #0 !dbg !5187 {
entry:
  %chain.addr = alloca %struct.chain*, align 8
  %ref.addr = alloca %struct.dref_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %nw = alloca %struct.dref_d*, align 8
  %aref = alloca %struct.dref_d*, align 8
  %i = alloca i32, align 4
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !5190, metadata !DIExpression()), !dbg !5191
  store %struct.dref_d* %ref, %struct.dref_d** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %ref.addr, metadata !5192, metadata !DIExpression()), !dbg !5193
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !5194, metadata !DIExpression()), !dbg !5195
  call void @llvm.dbg.declare(metadata %struct.dref_d** %nw, metadata !5196, metadata !DIExpression()), !dbg !5197
  %call = call i8* @xcalloc(i64 1, i64 56), !dbg !5198
  %0 = bitcast i8* %call to %struct.dref_d*, !dbg !5198
  store %struct.dref_d* %0, %struct.dref_d** %nw, align 8, !dbg !5197
  call void @llvm.dbg.declare(metadata %struct.dref_d** %aref, metadata !5199, metadata !DIExpression()), !dbg !5200
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5201, metadata !DIExpression()), !dbg !5202
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !5203
  %2 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !5204
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %2, i32 0, i32 1, !dbg !5205
  store %union.gimple_statement_d* %1, %union.gimple_statement_d** %stmt, align 8, !dbg !5206
  %3 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !5207
  %distance = getelementptr inbounds %struct.dref_d, %struct.dref_d* %3, i32 0, i32 3, !dbg !5208
  %4 = load i32, i32* %distance, align 8, !dbg !5208
  %add = add i32 %4, 1, !dbg !5209
  %5 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !5210
  %distance1 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %5, i32 0, i32 3, !dbg !5211
  store i32 %add, i32* %distance1, align 8, !dbg !5212
  %6 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !5213
  %always_accessed = getelementptr inbounds %struct.dref_d, %struct.dref_d* %6, i32 0, i32 6, !dbg !5214
  %bf.load = load i8, i8* %always_accessed, align 4, !dbg !5215
  %bf.clear = and i8 %bf.load, -2, !dbg !5215
  %bf.set = or i8 %bf.clear, 1, !dbg !5215
  store i8 %bf.set, i8* %always_accessed, align 4, !dbg !5215
  store i32 0, i32* %i, align 4, !dbg !5216
  br label %for.cond, !dbg !5218

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5219
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %7, i32 0, i32 5, !dbg !5219
  %8 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !5219
  %tobool = icmp ne %struct.VEC_dref_heap* %8, null, !dbg !5219
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5219

cond.true:                                        ; preds = %for.cond
  %9 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5219
  %refs2 = getelementptr inbounds %struct.chain, %struct.chain* %9, i32 0, i32 5, !dbg !5219
  %10 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs2, align 8, !dbg !5219
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %10, i32 0, i32 0, !dbg !5219
  br label %cond.end, !dbg !5219

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5219

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5219
  %11 = load i32, i32* %i, align 4, !dbg !5219
  %call3 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond, i32 %11, %struct.dref_d** %aref), !dbg !5219
  %tobool4 = icmp ne i32 %call3, 0, !dbg !5221
  br i1 %tobool4, label %for.body, label %for.end, !dbg !5221

for.body:                                         ; preds = %cond.end
  %12 = load %struct.dref_d*, %struct.dref_d** %aref, align 8, !dbg !5222
  %distance5 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %12, i32 0, i32 3, !dbg !5224
  %13 = load i32, i32* %distance5, align 8, !dbg !5224
  %14 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !5225
  %distance6 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %14, i32 0, i32 3, !dbg !5226
  %15 = load i32, i32* %distance6, align 8, !dbg !5226
  %cmp = icmp uge i32 %13, %15, !dbg !5227
  br i1 %cmp, label %if.then, label %if.end, !dbg !5228

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !5229

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !5226

for.inc:                                          ; preds = %if.end
  %16 = load i32, i32* %i, align 4, !dbg !5230
  %inc = add i32 %16, 1, !dbg !5230
  store i32 %inc, i32* %i, align 4, !dbg !5230
  br label %for.cond, !dbg !5231, !llvm.loop !5232

for.end:                                          ; preds = %if.then, %cond.end
  %17 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5234
  %refs7 = getelementptr inbounds %struct.chain, %struct.chain* %17, i32 0, i32 5, !dbg !5234
  %18 = load i32, i32* %i, align 4, !dbg !5234
  %19 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !5234
  %call8 = call %struct.dref_d** @VEC_dref_heap_safe_insert(%struct.VEC_dref_heap** %refs7, i32 %18, %struct.dref_d* %19), !dbg !5234
  %20 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !5235
  %distance9 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %20, i32 0, i32 3, !dbg !5237
  %21 = load i32, i32* %distance9, align 8, !dbg !5237
  %22 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5238
  %length = getelementptr inbounds %struct.chain, %struct.chain* %22, i32 0, i32 6, !dbg !5239
  %23 = load i32, i32* %length, align 8, !dbg !5239
  %cmp10 = icmp ugt i32 %21, %23, !dbg !5240
  br i1 %cmp10, label %if.then11, label %if.end16, !dbg !5241

if.then11:                                        ; preds = %for.end
  %24 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !5242
  %distance12 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %24, i32 0, i32 3, !dbg !5244
  %25 = load i32, i32* %distance12, align 8, !dbg !5244
  %26 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5245
  %length13 = getelementptr inbounds %struct.chain, %struct.chain* %26, i32 0, i32 6, !dbg !5246
  store i32 %25, i32* %length13, align 8, !dbg !5247
  %27 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5248
  %has_max_use_after = getelementptr inbounds %struct.chain, %struct.chain* %27, i32 0, i32 9, !dbg !5249
  %bf.load14 = load i8, i8* %has_max_use_after, align 8, !dbg !5250
  %bf.clear15 = and i8 %bf.load14, -2, !dbg !5250
  store i8 %bf.clear15, i8* %has_max_use_after, align 8, !dbg !5250
  br label %if.end16, !dbg !5251

if.end16:                                         ; preds = %if.then11, %for.end
  ret void, !dbg !5252
}

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !5253 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5254, metadata !DIExpression()), !dbg !5255
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5256
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5257
  %cmp = icmp eq i32 %call, 6, !dbg !5258
  %conv = zext i1 %cmp to i32, !dbg !5258
  %conv1 = trunc i32 %conv to i8, !dbg !5257
  ret i8 %conv1, !dbg !5259
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !5260 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5261, metadata !DIExpression()), !dbg !5262
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5263
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !5264
  ret %union.tree_node* %call, !dbg !5265
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !5266 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5267, metadata !DIExpression()), !dbg !5268
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5269
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !5270
  ret %union.tree_node* %call, !dbg !5271
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5272 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5275, metadata !DIExpression()), !dbg !5276
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5277
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5277
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !5278
  %conv = zext i1 %cmp to i32, !dbg !5278
  %conv1 = trunc i32 %conv to i8, !dbg !5279
  ret i8 %conv1, !dbg !5280
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !5281 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !5284, metadata !DIExpression()), !dbg !5285
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !5286
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5286
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !5287
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5287
  ret %union.gimple_statement_d* %1, !dbg !5288
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !5289 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5292, metadata !DIExpression()), !dbg !5293
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5294
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !5295
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5295
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !5296
  ret %union.tree_node* %2, !dbg !5297
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5298 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5301, metadata !DIExpression()), !dbg !5302
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5303, metadata !DIExpression()), !dbg !5304
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5305
  %1 = load i32, i32* %i.addr, align 4, !dbg !5306
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !5307
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !5308
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !5309
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !5310 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !5314, metadata !DIExpression()), !dbg !5315
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5316
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !5317
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5317
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !5318
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !5318
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !5319
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !5320
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !5321
  ret void, !dbg !5322
}

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local zeroext i8 @dr_analyze_innermost(%struct.data_reference*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @valid_initializer_p(%struct.data_reference* %ref, i32 %distance, %struct.data_reference* %root) #0 !dbg !5323 {
entry:
  %retval = alloca i8, align 1
  %ref.addr = alloca %struct.data_reference*, align 8
  %distance.addr = alloca i32, align 4
  %root.addr = alloca %struct.data_reference*, align 8
  %diff = alloca %struct.affine_tree_combination, align 8
  %base = alloca %struct.affine_tree_combination, align 8
  %step = alloca %struct.affine_tree_combination, align 8
  %off = alloca %struct.double_int, align 8
  %agg.tmp = alloca %struct.double_int, align 8
  %agg.tmp30 = alloca %struct.double_int, align 8
  store %struct.data_reference* %ref, %struct.data_reference** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %ref.addr, metadata !5326, metadata !DIExpression()), !dbg !5327
  store i32 %distance, i32* %distance.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %distance.addr, metadata !5328, metadata !DIExpression()), !dbg !5329
  store %struct.data_reference* %root, %struct.data_reference** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %root.addr, metadata !5330, metadata !DIExpression()), !dbg !5331
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %diff, metadata !5332, metadata !DIExpression()), !dbg !5333
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %base, metadata !5334, metadata !DIExpression()), !dbg !5335
  call void @llvm.dbg.declare(metadata %struct.affine_tree_combination* %step, metadata !5336, metadata !DIExpression()), !dbg !5337
  call void @llvm.dbg.declare(metadata %struct.double_int* %off, metadata !5338, metadata !DIExpression()), !dbg !5339
  %0 = load %struct.data_reference*, %struct.data_reference** %ref.addr, align 8, !dbg !5340
  %innermost = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 4, !dbg !5340
  %base_address = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost, i32 0, i32 0, !dbg !5340
  %1 = load %union.tree_node*, %union.tree_node** %base_address, align 8, !dbg !5340
  %2 = load %struct.data_reference*, %struct.data_reference** %root.addr, align 8, !dbg !5342
  %innermost1 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %2, i32 0, i32 4, !dbg !5342
  %base_address2 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost1, i32 0, i32 0, !dbg !5342
  %3 = load %union.tree_node*, %union.tree_node** %base_address2, align 8, !dbg !5342
  %call = call i32 @operand_equal_p(%union.tree_node* %1, %union.tree_node* %3, i32 0), !dbg !5343
  %tobool = icmp ne i32 %call, 0, !dbg !5343
  br i1 %tobool, label %if.end, label %if.then, !dbg !5344

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5345
  br label %return, !dbg !5345

if.end:                                           ; preds = %entry
  %4 = load %struct.data_reference*, %struct.data_reference** %ref.addr, align 8, !dbg !5346
  %innermost3 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %4, i32 0, i32 4, !dbg !5346
  %step4 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost3, i32 0, i32 3, !dbg !5346
  %5 = load %union.tree_node*, %union.tree_node** %step4, align 8, !dbg !5346
  %call5 = call i32 @integer_zerop(%union.tree_node* %5), !dbg !5346
  %tobool6 = icmp ne i32 %call5, 0, !dbg !5346
  br i1 %tobool6, label %cond.false, label %cond.true, !dbg !5346

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1036, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !5346
  br label %cond.end, !dbg !5346

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5346

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5346
  %6 = load %struct.data_reference*, %struct.data_reference** %root.addr, align 8, !dbg !5347
  %innermost7 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %6, i32 0, i32 4, !dbg !5347
  %step8 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost7, i32 0, i32 3, !dbg !5347
  %7 = load %union.tree_node*, %union.tree_node** %step8, align 8, !dbg !5347
  %call9 = call i32 @integer_zerop(%union.tree_node* %7), !dbg !5349
  %tobool10 = icmp ne i32 %call9, 0, !dbg !5349
  br i1 %tobool10, label %if.then11, label %if.end22, !dbg !5350

if.then11:                                        ; preds = %cond.end
  %8 = load %struct.data_reference*, %struct.data_reference** %ref.addr, align 8, !dbg !5351
  %innermost12 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %8, i32 0, i32 4, !dbg !5351
  %offset = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost12, i32 0, i32 1, !dbg !5351
  %9 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !5351
  %10 = load %struct.data_reference*, %struct.data_reference** %root.addr, align 8, !dbg !5352
  %innermost13 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %10, i32 0, i32 4, !dbg !5352
  %offset14 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost13, i32 0, i32 1, !dbg !5352
  %11 = load %union.tree_node*, %union.tree_node** %offset14, align 8, !dbg !5352
  %call15 = call i32 @operand_equal_p(%union.tree_node* %9, %union.tree_node* %11, i32 0), !dbg !5353
  %tobool16 = icmp ne i32 %call15, 0, !dbg !5353
  br i1 %tobool16, label %land.rhs, label %land.end, !dbg !5354

land.rhs:                                         ; preds = %if.then11
  %12 = load %struct.data_reference*, %struct.data_reference** %ref.addr, align 8, !dbg !5355
  %innermost17 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %12, i32 0, i32 4, !dbg !5355
  %init = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost17, i32 0, i32 2, !dbg !5355
  %13 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !5355
  %14 = load %struct.data_reference*, %struct.data_reference** %root.addr, align 8, !dbg !5356
  %innermost18 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %14, i32 0, i32 4, !dbg !5356
  %init19 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost18, i32 0, i32 2, !dbg !5356
  %15 = load %union.tree_node*, %union.tree_node** %init19, align 8, !dbg !5356
  %call20 = call i32 @operand_equal_p(%union.tree_node* %13, %union.tree_node* %15, i32 0), !dbg !5357
  %tobool21 = icmp ne i32 %call20, 0, !dbg !5354
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then11
  %16 = phi i1 [ false, %if.then11 ], [ %tobool21, %land.rhs ], !dbg !5358
  %land.ext = zext i1 %16 to i32, !dbg !5354
  %conv = trunc i32 %land.ext to i8, !dbg !5359
  store i8 %conv, i8* %retval, align 1, !dbg !5360
  br label %return, !dbg !5360

if.end22:                                         ; preds = %cond.end
  %17 = load %struct.data_reference*, %struct.data_reference** %root.addr, align 8, !dbg !5361
  call void @aff_combination_dr_offset(%struct.data_reference* %17, %struct.affine_tree_combination* %diff), !dbg !5362
  %18 = load %struct.data_reference*, %struct.data_reference** %ref.addr, align 8, !dbg !5363
  call void @aff_combination_dr_offset(%struct.data_reference* %18, %struct.affine_tree_combination* %base), !dbg !5364
  %call23 = call { i64, i64 } @shwi_to_double_int(i64 -1), !dbg !5365
  %19 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !5365
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 0, !dbg !5365
  %21 = extractvalue { i64, i64 } %call23, 0, !dbg !5365
  store i64 %21, i64* %20, align 8, !dbg !5365
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 1, !dbg !5365
  %23 = extractvalue { i64, i64 } %call23, 1, !dbg !5365
  store i64 %23, i64* %22, align 8, !dbg !5365
  %24 = bitcast %struct.double_int* %agg.tmp to { i64, i64 }*, !dbg !5366
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 0, !dbg !5366
  %26 = load i64, i64* %25, align 8, !dbg !5366
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %24, i32 0, i32 1, !dbg !5366
  %28 = load i64, i64* %27, align 8, !dbg !5366
  call void @aff_combination_scale(%struct.affine_tree_combination* %base, i64 %26, i64 %28), !dbg !5366
  call void @aff_combination_add(%struct.affine_tree_combination* %diff, %struct.affine_tree_combination* %base), !dbg !5367
  %29 = load %struct.data_reference*, %struct.data_reference** %root.addr, align 8, !dbg !5368
  %innermost24 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %29, i32 0, i32 4, !dbg !5368
  %step25 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost24, i32 0, i32 3, !dbg !5368
  %30 = load %union.tree_node*, %union.tree_node** %step25, align 8, !dbg !5368
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5369
  call void @tree_to_aff_combination_expand(%union.tree_node* %30, %union.tree_node* %31, %struct.affine_tree_combination* %step, %struct.pointer_map_t** @name_expansions), !dbg !5370
  %call26 = call zeroext i8 @aff_combination_constant_multiple_p(%struct.affine_tree_combination* %diff, %struct.affine_tree_combination* %step, %struct.double_int* %off), !dbg !5371
  %tobool27 = icmp ne i8 %call26, 0, !dbg !5371
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !5373

if.then28:                                        ; preds = %if.end22
  store i8 0, i8* %retval, align 1, !dbg !5374
  br label %return, !dbg !5374

if.end29:                                         ; preds = %if.end22
  %32 = load i32, i32* %distance.addr, align 4, !dbg !5375
  %conv31 = zext i32 %32 to i64, !dbg !5375
  %call32 = call { i64, i64 } @uhwi_to_double_int(i64 %conv31), !dbg !5377
  %33 = bitcast %struct.double_int* %agg.tmp30 to { i64, i64 }*, !dbg !5377
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %33, i32 0, i32 0, !dbg !5377
  %35 = extractvalue { i64, i64 } %call32, 0, !dbg !5377
  store i64 %35, i64* %34, align 8, !dbg !5377
  %36 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %33, i32 0, i32 1, !dbg !5377
  %37 = extractvalue { i64, i64 } %call32, 1, !dbg !5377
  store i64 %37, i64* %36, align 8, !dbg !5377
  %38 = bitcast %struct.double_int* %off to { i64, i64 }*, !dbg !5378
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %38, i32 0, i32 0, !dbg !5378
  %40 = load i64, i64* %39, align 8, !dbg !5378
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %38, i32 0, i32 1, !dbg !5378
  %42 = load i64, i64* %41, align 8, !dbg !5378
  %43 = bitcast %struct.double_int* %agg.tmp30 to { i64, i64 }*, !dbg !5378
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %43, i32 0, i32 0, !dbg !5378
  %45 = load i64, i64* %44, align 8, !dbg !5378
  %46 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %43, i32 0, i32 1, !dbg !5378
  %47 = load i64, i64* %46, align 8, !dbg !5378
  %call33 = call zeroext i8 @double_int_equal_p(i64 %40, i64 %42, i64 %45, i64 %47), !dbg !5378
  %tobool34 = icmp ne i8 %call33, 0, !dbg !5378
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !5379

if.then35:                                        ; preds = %if.end29
  store i8 0, i8* %retval, align 1, !dbg !5380
  br label %return, !dbg !5380

if.end36:                                         ; preds = %if.end29
  store i8 1, i8* %retval, align 1, !dbg !5381
  br label %return, !dbg !5381

return:                                           ; preds = %if.end36, %if.then35, %if.then28, %land.end, %if.then
  %48 = load i8, i8* %retval, align 1, !dbg !5382
  ret i8 %48, !dbg !5382
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !5383 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5386, metadata !DIExpression()), !dbg !5387
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !5388, metadata !DIExpression()), !dbg !5389
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5390
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5392
  %tobool = icmp ne i8 %call, 0, !dbg !5392
  br i1 %tobool, label %if.then, label %if.else, !dbg !5393

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5394
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !5396
  %2 = load i32, i32* %i.addr, align 4, !dbg !5397
  %idxprom = zext i32 %2 to i64, !dbg !5396
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5396
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5396
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !5398
  br label %return, !dbg !5398

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5399
  br label %return, !dbg !5399

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5400
  ret %union.tree_node* %4, !dbg !5400
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !5401 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5402, metadata !DIExpression()), !dbg !5403
  call void @llvm.dbg.declare(metadata i64* %off, metadata !5404, metadata !DIExpression()), !dbg !5405
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5406
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !5407
  %idxprom = zext i32 %call to i64, !dbg !5408
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5408
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5408
  store i64 %1, i64* %off, align 8, !dbg !5409
  %2 = load i64, i64* %off, align 8, !dbg !5410
  %cmp = icmp ne i64 %2, 0, !dbg !5410
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5410

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !5410
  br label %cond.end, !dbg !5410

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5410

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5410
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5411
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !5412
  %5 = load i64, i64* %off, align 8, !dbg !5413
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !5414
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5415
  ret %union.tree_node** %6, !dbg !5416
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !5417 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5420, metadata !DIExpression()), !dbg !5421
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5422
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5423
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !5424
  ret i32 %call1, !dbg !5425
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !5426 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !5429, metadata !DIExpression()), !dbg !5430
  %0 = load i32, i32* %code.addr, align 4, !dbg !5431
  %idxprom = zext i32 %0 to i64, !dbg !5432
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5432
  %1 = load i32, i32* %arrayidx, align 4, !dbg !5432
  ret i32 %1, !dbg !5433
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5434 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5438, metadata !DIExpression()), !dbg !5439
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5440, metadata !DIExpression()), !dbg !5441
  %0 = load i32, i32* %index.addr, align 4, !dbg !5442
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5442
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !5442
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !5442
  %2 = load i32, i32* %capacity, align 8, !dbg !5442
  %cmp = icmp ule i32 %0, %2, !dbg !5442
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5442

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !5442
  br label %cond.end, !dbg !5442

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5442

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5442
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5443
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !5444
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !5445
  %4 = load i32, i32* %index.addr, align 4, !dbg !5446
  %idxprom = zext i32 %4 to i64, !dbg !5443
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !5443
  ret %struct.phi_arg_d* %arrayidx, !dbg !5447
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @double_int_equal_p(i64 %cst1.coerce0, i64 %cst1.coerce1, i64 %cst2.coerce0, i64 %cst2.coerce1) #0 !dbg !5448 {
entry:
  %cst1 = alloca %struct.double_int, align 8
  %cst2 = alloca %struct.double_int, align 8
  %0 = bitcast %struct.double_int* %cst1 to { i64, i64 }*
  %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
  store i64 %cst1.coerce0, i64* %1, align 8
  %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
  store i64 %cst1.coerce1, i64* %2, align 8
  %3 = bitcast %struct.double_int* %cst2 to { i64, i64 }*
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  store i64 %cst2.coerce0, i64* %4, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  store i64 %cst2.coerce1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata %struct.double_int* %cst1, metadata !5451, metadata !DIExpression()), !dbg !5452
  call void @llvm.dbg.declare(metadata %struct.double_int* %cst2, metadata !5453, metadata !DIExpression()), !dbg !5454
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %cst1, i32 0, i32 0, !dbg !5455
  %6 = load i64, i64* %low, align 8, !dbg !5455
  %low1 = getelementptr inbounds %struct.double_int, %struct.double_int* %cst2, i32 0, i32 0, !dbg !5456
  %7 = load i64, i64* %low1, align 8, !dbg !5456
  %cmp = icmp eq i64 %6, %7, !dbg !5457
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5458

land.rhs:                                         ; preds = %entry
  %high = getelementptr inbounds %struct.double_int, %struct.double_int* %cst1, i32 0, i32 1, !dbg !5459
  %8 = load i64, i64* %high, align 8, !dbg !5459
  %high2 = getelementptr inbounds %struct.double_int, %struct.double_int* %cst2, i32 0, i32 1, !dbg !5460
  %9 = load i64, i64* %high2, align 8, !dbg !5460
  %cmp3 = icmp eq i64 %8, %9, !dbg !5461
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %10 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !5462
  %land.ext = zext i1 %10 to i32, !dbg !5458
  %conv = trunc i32 %land.ext to i8, !dbg !5463
  ret i8 %conv, !dbg !5464
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.dref_d** @VEC_dref_heap_safe_insert(%struct.VEC_dref_heap** %vec_, i32 %ix_, %struct.dref_d* %obj_) #0 !dbg !5465 {
entry:
  %vec_.addr = alloca %struct.VEC_dref_heap**, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.dref_d*, align 8
  store %struct.VEC_dref_heap** %vec_, %struct.VEC_dref_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_dref_heap*** %vec_.addr, metadata !5468, metadata !DIExpression()), !dbg !5469
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5470, metadata !DIExpression()), !dbg !5469
  store %struct.dref_d* %obj_, %struct.dref_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %obj_.addr, metadata !5471, metadata !DIExpression()), !dbg !5469
  %0 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !5469
  %call = call i32 @VEC_dref_heap_reserve(%struct.VEC_dref_heap** %0, i32 1), !dbg !5469
  %1 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !5469
  %2 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %1, align 8, !dbg !5469
  %tobool = icmp ne %struct.VEC_dref_heap* %2, null, !dbg !5469
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5469

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_dref_heap**, %struct.VEC_dref_heap*** %vec_.addr, align 8, !dbg !5469
  %4 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %3, align 8, !dbg !5469
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %4, i32 0, i32 0, !dbg !5469
  br label %cond.end, !dbg !5469

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5469

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5469
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5469
  %6 = load %struct.dref_d*, %struct.dref_d** %obj_.addr, align 8, !dbg !5469
  %call1 = call %struct.dref_d** @VEC_dref_base_quick_insert(%struct.VEC_dref_base* %cond, i32 %5, %struct.dref_d* %6), !dbg !5469
  ret %struct.dref_d** %call1, !dbg !5469
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.dref_d** @VEC_dref_base_quick_insert(%struct.VEC_dref_base* %vec_, i32 %ix_, %struct.dref_d* %obj_) #0 !dbg !5472 {
entry:
  %vec_.addr = alloca %struct.VEC_dref_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.dref_d*, align 8
  %slot_ = alloca %struct.dref_d**, align 8
  store %struct.VEC_dref_base* %vec_, %struct.VEC_dref_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_dref_base** %vec_.addr, metadata !5475, metadata !DIExpression()), !dbg !5476
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5477, metadata !DIExpression()), !dbg !5476
  store %struct.dref_d* %obj_, %struct.dref_d** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %obj_.addr, metadata !5478, metadata !DIExpression()), !dbg !5476
  call void @llvm.dbg.declare(metadata %struct.dref_d*** %slot_, metadata !5479, metadata !DIExpression()), !dbg !5476
  %0 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !5476
  %num = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %0, i32 0, i32 0, !dbg !5476
  %1 = load i32, i32* %num, align 8, !dbg !5476
  %2 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !5476
  %alloc = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %2, i32 0, i32 1, !dbg !5476
  %3 = load i32, i32* %alloc, align 4, !dbg !5476
  %cmp = icmp ult i32 %1, %3, !dbg !5476
  %conv = zext i1 %cmp to i32, !dbg !5476
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !5476
  %5 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !5476
  %num1 = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %5, i32 0, i32 0, !dbg !5476
  %6 = load i32, i32* %num1, align 8, !dbg !5476
  %cmp2 = icmp ule i32 %4, %6, !dbg !5476
  %conv3 = zext i1 %cmp2 to i32, !dbg !5476
  %7 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !5476
  %vec = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %7, i32 0, i32 2, !dbg !5476
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !5476
  %idxprom = zext i32 %8 to i64, !dbg !5476
  %arrayidx = getelementptr inbounds [1 x %struct.dref_d*], [1 x %struct.dref_d*]* %vec, i64 0, i64 %idxprom, !dbg !5476
  store %struct.dref_d** %arrayidx, %struct.dref_d*** %slot_, align 8, !dbg !5476
  %9 = load %struct.dref_d**, %struct.dref_d*** %slot_, align 8, !dbg !5476
  %add.ptr = getelementptr inbounds %struct.dref_d*, %struct.dref_d** %9, i64 1, !dbg !5476
  %10 = bitcast %struct.dref_d** %add.ptr to i8*, !dbg !5476
  %11 = load %struct.dref_d**, %struct.dref_d*** %slot_, align 8, !dbg !5476
  %12 = bitcast %struct.dref_d** %11 to i8*, !dbg !5476
  %13 = load %struct.VEC_dref_base*, %struct.VEC_dref_base** %vec_.addr, align 8, !dbg !5476
  %num4 = getelementptr inbounds %struct.VEC_dref_base, %struct.VEC_dref_base* %13, i32 0, i32 0, !dbg !5476
  %14 = load i32, i32* %num4, align 8, !dbg !5476
  %inc = add i32 %14, 1, !dbg !5476
  store i32 %inc, i32* %num4, align 8, !dbg !5476
  %15 = load i32, i32* %ix_.addr, align 4, !dbg !5476
  %sub = sub i32 %14, %15, !dbg !5476
  %conv5 = zext i32 %sub to i64, !dbg !5476
  %mul = mul i64 %conv5, 8, !dbg !5476
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %12, i64 %mul, i1 false), !dbg !5476
  %16 = load %struct.dref_d*, %struct.dref_d** %obj_.addr, align 8, !dbg !5476
  %17 = load %struct.dref_d**, %struct.dref_d*** %slot_, align 8, !dbg !5476
  store %struct.dref_d* %16, %struct.dref_d** %17, align 8, !dbg !5476
  %18 = load %struct.dref_d**, %struct.dref_d*** %slot_, align 8, !dbg !5476
  ret %struct.dref_d** %18, !dbg !5476
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !5480 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !5484, metadata !DIExpression()), !dbg !5485
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5486
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !5486
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !5486
  br i1 %tobool, label %if.then, label %if.end, !dbg !5485

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5486
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !5486
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !5486
  call void @free(i8* %4), !dbg !5486
  br label %if.end, !dbg !5486

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5485
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !5485
  ret void, !dbg !5485
}

declare dso_local zeroext i8 @double_int_fits_in_uhwi_p(i64, i64) #2

declare dso_local i64 @double_int_to_uhwi(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_chain_p_base_length(%struct.VEC_chain_p_base* %vec_) #0 !dbg !5488 {
entry:
  %vec_.addr = alloca %struct.VEC_chain_p_base*, align 8
  store %struct.VEC_chain_p_base* %vec_, %struct.VEC_chain_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_base** %vec_.addr, metadata !5491, metadata !DIExpression()), !dbg !5492
  %0 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5492
  %tobool = icmp ne %struct.VEC_chain_p_base* %0, null, !dbg !5492
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5492

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5492
  %num = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %1, i32 0, i32 0, !dbg !5492
  %2 = load i32, i32* %num, align 8, !dbg !5492
  br label %cond.end, !dbg !5492

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5492

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5492
  ret i32 %cond, !dbg !5492
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.chain* @VEC_chain_p_base_index(%struct.VEC_chain_p_base* %vec_, i32 %ix_) #0 !dbg !5493 {
entry:
  %vec_.addr = alloca %struct.VEC_chain_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_chain_p_base* %vec_, %struct.VEC_chain_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_base** %vec_.addr, metadata !5496, metadata !DIExpression()), !dbg !5497
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5498, metadata !DIExpression()), !dbg !5497
  %0 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5497
  %tobool = icmp ne %struct.VEC_chain_p_base* %0, null, !dbg !5497
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5497

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5497
  %2 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5497
  %num = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %2, i32 0, i32 0, !dbg !5497
  %3 = load i32, i32* %num, align 8, !dbg !5497
  %cmp = icmp ult i32 %1, %3, !dbg !5497
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5499
  %land.ext = zext i1 %4 to i32, !dbg !5497
  %5 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5497
  %vec = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %5, i32 0, i32 2, !dbg !5497
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5497
  %idxprom = zext i32 %6 to i64, !dbg !5497
  %arrayidx = getelementptr inbounds [1 x %struct.chain*], [1 x %struct.chain*]* %vec, i64 0, i64 %idxprom, !dbg !5497
  %7 = load %struct.chain*, %struct.chain** %arrayidx, align 8, !dbg !5497
  ret %struct.chain* %7, !dbg !5497
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @prepare_initializers_chain(%struct.loop* %loop, %struct.chain* %chain) #0 !dbg !5500 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %chain.addr = alloca %struct.chain*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %dr = alloca %struct.data_reference*, align 8
  %init = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %laref = alloca %struct.dref_d*, align 8
  %entry1 = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5503, metadata !DIExpression()), !dbg !5504
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !5505, metadata !DIExpression()), !dbg !5506
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5507, metadata !DIExpression()), !dbg !5508
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5509, metadata !DIExpression()), !dbg !5510
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5511
  %type = getelementptr inbounds %struct.chain, %struct.chain* %0, i32 0, i32 0, !dbg !5512
  %1 = load i32, i32* %type, align 8, !dbg !5512
  %cmp = icmp eq i32 %1, 0, !dbg !5513
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5514

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !5514

cond.false:                                       ; preds = %entry
  %2 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5515
  %length = getelementptr inbounds %struct.chain, %struct.chain* %2, i32 0, i32 6, !dbg !5516
  %3 = load i32, i32* %length, align 8, !dbg !5516
  br label %cond.end, !dbg !5514

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1, %cond.true ], [ %3, %cond.false ], !dbg !5514
  store i32 %cond, i32* %n, align 4, !dbg !5510
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr, metadata !5517, metadata !DIExpression()), !dbg !5518
  %4 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5519
  %call = call %struct.dref_d* @get_chain_root(%struct.chain* %4), !dbg !5520
  %ref = getelementptr inbounds %struct.dref_d, %struct.dref_d* %call, i32 0, i32 0, !dbg !5521
  %5 = load %struct.data_reference*, %struct.data_reference** %ref, align 8, !dbg !5521
  store %struct.data_reference* %5, %struct.data_reference** %dr, align 8, !dbg !5518
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !5522, metadata !DIExpression()), !dbg !5523
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !5524, metadata !DIExpression()), !dbg !5525
  call void @llvm.dbg.declare(metadata %struct.dref_d** %laref, metadata !5526, metadata !DIExpression()), !dbg !5527
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry1, metadata !5528, metadata !DIExpression()), !dbg !5529
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5530
  %call2 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %6), !dbg !5531
  store %struct.edge_def* %call2, %struct.edge_def** %entry1, align 8, !dbg !5529
  %7 = load i32, i32* %n, align 4, !dbg !5532
  %call3 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %7), !dbg !5532
  %8 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5533
  %inits = getelementptr inbounds %struct.chain, %struct.chain* %8, i32 0, i32 8, !dbg !5534
  store %struct.VEC_tree_heap* %call3, %struct.VEC_tree_heap** %inits, align 8, !dbg !5535
  store i32 0, i32* %i, align 4, !dbg !5536
  br label %for.cond, !dbg !5538

for.cond:                                         ; preds = %for.inc, %cond.end
  %9 = load i32, i32* %i, align 4, !dbg !5539
  %10 = load i32, i32* %n, align 4, !dbg !5541
  %cmp4 = icmp ult i32 %9, %10, !dbg !5542
  br i1 %cmp4, label %for.body, label %for.end, !dbg !5543

for.body:                                         ; preds = %for.cond
  %11 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5544
  %inits5 = getelementptr inbounds %struct.chain, %struct.chain* %11, i32 0, i32 8, !dbg !5544
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits5, align 8, !dbg !5544
  %tobool = icmp ne %struct.VEC_tree_heap* %12, null, !dbg !5544
  br i1 %tobool, label %cond.true6, label %cond.false8, !dbg !5544

cond.true6:                                       ; preds = %for.body
  %13 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5544
  %inits7 = getelementptr inbounds %struct.chain, %struct.chain* %13, i32 0, i32 8, !dbg !5544
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits7, align 8, !dbg !5544
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %14, i32 0, i32 0, !dbg !5544
  br label %cond.end9, !dbg !5544

cond.false8:                                      ; preds = %for.body
  br label %cond.end9, !dbg !5544

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.VEC_tree_base* [ %base, %cond.true6 ], [ null, %cond.false8 ], !dbg !5544
  %call11 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond10, %union.tree_node* null), !dbg !5544
  br label %for.inc, !dbg !5544

for.inc:                                          ; preds = %cond.end9
  %15 = load i32, i32* %i, align 4, !dbg !5545
  %inc = add i32 %15, 1, !dbg !5545
  store i32 %inc, i32* %i, align 4, !dbg !5545
  br label %for.cond, !dbg !5546, !llvm.loop !5547

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !5549
  br label %for.cond12, !dbg !5551

for.cond12:                                       ; preds = %for.inc43, %for.end
  %16 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5552
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %16, i32 0, i32 5, !dbg !5552
  %17 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !5552
  %tobool13 = icmp ne %struct.VEC_dref_heap* %17, null, !dbg !5552
  br i1 %tobool13, label %cond.true14, label %cond.false17, !dbg !5552

cond.true14:                                      ; preds = %for.cond12
  %18 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5552
  %refs15 = getelementptr inbounds %struct.chain, %struct.chain* %18, i32 0, i32 5, !dbg !5552
  %19 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs15, align 8, !dbg !5552
  %base16 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %19, i32 0, i32 0, !dbg !5552
  br label %cond.end18, !dbg !5552

cond.false17:                                     ; preds = %for.cond12
  br label %cond.end18, !dbg !5552

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi %struct.VEC_dref_base* [ %base16, %cond.true14 ], [ null, %cond.false17 ], !dbg !5552
  %20 = load i32, i32* %i, align 4, !dbg !5552
  %call20 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond19, i32 %20, %struct.dref_d** %laref), !dbg !5552
  %tobool21 = icmp ne i32 %call20, 0, !dbg !5554
  br i1 %tobool21, label %for.body22, label %for.end45, !dbg !5554

for.body22:                                       ; preds = %cond.end18
  %21 = load %struct.dref_d*, %struct.dref_d** %laref, align 8, !dbg !5555
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %21, i32 0, i32 1, !dbg !5558
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5558
  %call23 = call i32 @gimple_code(%union.gimple_statement_d* %22), !dbg !5559
  %cmp24 = icmp ne i32 %call23, 16, !dbg !5560
  br i1 %cmp24, label %if.then, label %if.end, !dbg !5561

if.then:                                          ; preds = %for.body22
  br label %for.inc43, !dbg !5562

if.end:                                           ; preds = %for.body22
  %23 = load %struct.dref_d*, %struct.dref_d** %laref, align 8, !dbg !5563
  %distance = getelementptr inbounds %struct.dref_d, %struct.dref_d* %23, i32 0, i32 3, !dbg !5563
  %24 = load i32, i32* %distance, align 8, !dbg !5563
  %cmp25 = icmp ugt i32 %24, 0, !dbg !5563
  br i1 %cmp25, label %cond.false27, label %cond.true26, !dbg !5563

cond.true26:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 2406, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !5563
  br label %cond.end28, !dbg !5563

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !5563

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi i32 [ 0, %cond.true26 ], [ 0, %cond.false27 ], !dbg !5563
  %25 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5564
  %inits30 = getelementptr inbounds %struct.chain, %struct.chain* %25, i32 0, i32 8, !dbg !5564
  %26 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits30, align 8, !dbg !5564
  %tobool31 = icmp ne %struct.VEC_tree_heap* %26, null, !dbg !5564
  br i1 %tobool31, label %cond.true32, label %cond.false35, !dbg !5564

cond.true32:                                      ; preds = %cond.end28
  %27 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5564
  %inits33 = getelementptr inbounds %struct.chain, %struct.chain* %27, i32 0, i32 8, !dbg !5564
  %28 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits33, align 8, !dbg !5564
  %base34 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %28, i32 0, i32 0, !dbg !5564
  br label %cond.end36, !dbg !5564

cond.false35:                                     ; preds = %cond.end28
  br label %cond.end36, !dbg !5564

cond.end36:                                       ; preds = %cond.false35, %cond.true32
  %cond37 = phi %struct.VEC_tree_base* [ %base34, %cond.true32 ], [ null, %cond.false35 ], !dbg !5564
  %29 = load i32, i32* %n, align 4, !dbg !5564
  %30 = load %struct.dref_d*, %struct.dref_d** %laref, align 8, !dbg !5564
  %distance38 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %30, i32 0, i32 3, !dbg !5564
  %31 = load i32, i32* %distance38, align 8, !dbg !5564
  %sub = sub i32 %29, %31, !dbg !5564
  %32 = load %struct.dref_d*, %struct.dref_d** %laref, align 8, !dbg !5564
  %stmt39 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %32, i32 0, i32 1, !dbg !5564
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt39, align 8, !dbg !5564
  %34 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !5564
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 6, !dbg !5564
  %35 = load i32, i32* %dest_idx, align 4, !dbg !5564
  %call40 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %33, i32 %35), !dbg !5564
  %call41 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call40), !dbg !5564
  %call42 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond37, i32 %sub, %union.tree_node* %call41), !dbg !5564
  br label %for.inc43, !dbg !5565

for.inc43:                                        ; preds = %cond.end36, %if.then
  %36 = load i32, i32* %i, align 4, !dbg !5566
  %inc44 = add i32 %36, 1, !dbg !5566
  store i32 %inc44, i32* %i, align 4, !dbg !5566
  br label %for.cond12, !dbg !5567, !llvm.loop !5568

for.end45:                                        ; preds = %cond.end18
  store i32 0, i32* %i, align 4, !dbg !5570
  br label %for.cond46, !dbg !5572

for.cond46:                                       ; preds = %for.inc86, %for.end45
  %37 = load i32, i32* %i, align 4, !dbg !5573
  %38 = load i32, i32* %n, align 4, !dbg !5575
  %cmp47 = icmp ult i32 %37, %38, !dbg !5576
  br i1 %cmp47, label %for.body48, label %for.end88, !dbg !5577

for.body48:                                       ; preds = %for.cond46
  %39 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5578
  %inits49 = getelementptr inbounds %struct.chain, %struct.chain* %39, i32 0, i32 8, !dbg !5578
  %40 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits49, align 8, !dbg !5578
  %tobool50 = icmp ne %struct.VEC_tree_heap* %40, null, !dbg !5578
  br i1 %tobool50, label %cond.true51, label %cond.false54, !dbg !5578

cond.true51:                                      ; preds = %for.body48
  %41 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5578
  %inits52 = getelementptr inbounds %struct.chain, %struct.chain* %41, i32 0, i32 8, !dbg !5578
  %42 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits52, align 8, !dbg !5578
  %base53 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %42, i32 0, i32 0, !dbg !5578
  br label %cond.end55, !dbg !5578

cond.false54:                                     ; preds = %for.body48
  br label %cond.end55, !dbg !5578

cond.end55:                                       ; preds = %cond.false54, %cond.true51
  %cond56 = phi %struct.VEC_tree_base* [ %base53, %cond.true51 ], [ null, %cond.false54 ], !dbg !5578
  %43 = load i32, i32* %i, align 4, !dbg !5578
  %call57 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond56, i32 %43), !dbg !5578
  %cmp58 = icmp ne %union.tree_node* %call57, null, !dbg !5581
  br i1 %cmp58, label %if.then59, label %if.end60, !dbg !5582

if.then59:                                        ; preds = %cond.end55
  br label %for.inc86, !dbg !5583

if.end60:                                         ; preds = %cond.end55
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5584
  %45 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !5585
  %ref61 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %45, i32 0, i32 1, !dbg !5585
  %46 = load %union.tree_node*, %union.tree_node** %ref61, align 8, !dbg !5585
  %47 = load i32, i32* %i, align 4, !dbg !5586
  %48 = load i32, i32* %n, align 4, !dbg !5587
  %sub62 = sub i32 %47, %48, !dbg !5588
  %call63 = call %union.tree_node* @ref_at_iteration(%struct.loop* %44, %union.tree_node* %46, i32 %sub62), !dbg !5589
  store %union.tree_node* %call63, %union.tree_node** %init, align 8, !dbg !5590
  %49 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !5591
  %tobool64 = icmp ne %union.tree_node* %49, null, !dbg !5591
  br i1 %tobool64, label %if.end66, label %if.then65, !dbg !5593

if.then65:                                        ; preds = %if.end60
  store i8 0, i8* %retval, align 1, !dbg !5594
  br label %return, !dbg !5594

if.end66:                                         ; preds = %if.end60
  %50 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5595
  %all_always_accessed = getelementptr inbounds %struct.chain, %struct.chain* %50, i32 0, i32 9, !dbg !5597
  %bf.load = load i8, i8* %all_always_accessed, align 8, !dbg !5597
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !5597
  %bf.clear = and i8 %bf.lshr, 1, !dbg !5597
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5597
  %tobool67 = icmp ne i32 %bf.cast, 0, !dbg !5595
  br i1 %tobool67, label %if.end71, label %land.lhs.true, !dbg !5598

land.lhs.true:                                    ; preds = %if.end66
  %51 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !5599
  %call68 = call zeroext i8 @tree_could_trap_p(%union.tree_node* %51), !dbg !5600
  %conv = zext i8 %call68 to i32, !dbg !5600
  %tobool69 = icmp ne i32 %conv, 0, !dbg !5600
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !5601

if.then70:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !5602
  br label %return, !dbg !5602

if.end71:                                         ; preds = %land.lhs.true, %if.end66
  %52 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !5603
  %call72 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %52, %struct.gimple_seq_d** %stmts, i8 zeroext 0, %union.tree_node* null), !dbg !5604
  store %union.tree_node* %call72, %union.tree_node** %init, align 8, !dbg !5605
  %53 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5606
  %tobool73 = icmp ne %struct.gimple_seq_d* %53, null, !dbg !5606
  br i1 %tobool73, label %if.then74, label %if.end76, !dbg !5608

if.then74:                                        ; preds = %if.end71
  %54 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !5609
  %55 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5610
  %call75 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %54, %struct.gimple_seq_d* %55), !dbg !5611
  br label %if.end76, !dbg !5611

if.end76:                                         ; preds = %if.then74, %if.end71
  %56 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5612
  %inits77 = getelementptr inbounds %struct.chain, %struct.chain* %56, i32 0, i32 8, !dbg !5612
  %57 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits77, align 8, !dbg !5612
  %tobool78 = icmp ne %struct.VEC_tree_heap* %57, null, !dbg !5612
  br i1 %tobool78, label %cond.true79, label %cond.false82, !dbg !5612

cond.true79:                                      ; preds = %if.end76
  %58 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5612
  %inits80 = getelementptr inbounds %struct.chain, %struct.chain* %58, i32 0, i32 8, !dbg !5612
  %59 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits80, align 8, !dbg !5612
  %base81 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %59, i32 0, i32 0, !dbg !5612
  br label %cond.end83, !dbg !5612

cond.false82:                                     ; preds = %if.end76
  br label %cond.end83, !dbg !5612

cond.end83:                                       ; preds = %cond.false82, %cond.true79
  %cond84 = phi %struct.VEC_tree_base* [ %base81, %cond.true79 ], [ null, %cond.false82 ], !dbg !5612
  %60 = load i32, i32* %i, align 4, !dbg !5612
  %61 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !5612
  %call85 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond84, i32 %60, %union.tree_node* %61), !dbg !5612
  br label %for.inc86, !dbg !5613

for.inc86:                                        ; preds = %cond.end83, %if.then59
  %62 = load i32, i32* %i, align 4, !dbg !5614
  %inc87 = add i32 %62, 1, !dbg !5614
  store i32 %inc87, i32* %i, align 4, !dbg !5614
  br label %for.cond46, !dbg !5615, !llvm.loop !5616

for.end88:                                        ; preds = %for.cond46
  store i8 1, i8* %retval, align 1, !dbg !5618
  br label %return, !dbg !5618

return:                                           ; preds = %for.end88, %if.then70, %if.then65
  %63 = load i8, i8* %retval, align 1, !dbg !5619
  ret i8 %63, !dbg !5619
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.chain* @VEC_chain_p_base_unordered_remove(%struct.VEC_chain_p_base* %vec_, i32 %ix_) #0 !dbg !5620 {
entry:
  %vec_.addr = alloca %struct.VEC_chain_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %slot_ = alloca %struct.chain**, align 8
  %obj_ = alloca %struct.chain*, align 8
  store %struct.VEC_chain_p_base* %vec_, %struct.VEC_chain_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_base** %vec_.addr, metadata !5623, metadata !DIExpression()), !dbg !5624
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5625, metadata !DIExpression()), !dbg !5624
  call void @llvm.dbg.declare(metadata %struct.chain*** %slot_, metadata !5626, metadata !DIExpression()), !dbg !5624
  call void @llvm.dbg.declare(metadata %struct.chain** %obj_, metadata !5627, metadata !DIExpression()), !dbg !5624
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !5624
  %1 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5624
  %num = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %1, i32 0, i32 0, !dbg !5624
  %2 = load i32, i32* %num, align 8, !dbg !5624
  %cmp = icmp ult i32 %0, %2, !dbg !5624
  %conv = zext i1 %cmp to i32, !dbg !5624
  %3 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5624
  %vec = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %3, i32 0, i32 2, !dbg !5624
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !5624
  %idxprom = zext i32 %4 to i64, !dbg !5624
  %arrayidx = getelementptr inbounds [1 x %struct.chain*], [1 x %struct.chain*]* %vec, i64 0, i64 %idxprom, !dbg !5624
  store %struct.chain** %arrayidx, %struct.chain*** %slot_, align 8, !dbg !5624
  %5 = load %struct.chain**, %struct.chain*** %slot_, align 8, !dbg !5624
  %6 = load %struct.chain*, %struct.chain** %5, align 8, !dbg !5624
  store %struct.chain* %6, %struct.chain** %obj_, align 8, !dbg !5624
  %7 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5624
  %vec1 = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %7, i32 0, i32 2, !dbg !5624
  %8 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5624
  %num2 = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %8, i32 0, i32 0, !dbg !5624
  %9 = load i32, i32* %num2, align 8, !dbg !5624
  %dec = add i32 %9, -1, !dbg !5624
  store i32 %dec, i32* %num2, align 8, !dbg !5624
  %idxprom3 = zext i32 %dec to i64, !dbg !5624
  %arrayidx4 = getelementptr inbounds [1 x %struct.chain*], [1 x %struct.chain*]* %vec1, i64 0, i64 %idxprom3, !dbg !5624
  %10 = load %struct.chain*, %struct.chain** %arrayidx4, align 8, !dbg !5624
  %11 = load %struct.chain**, %struct.chain*** %slot_, align 8, !dbg !5624
  store %struct.chain* %10, %struct.chain** %11, align 8, !dbg !5624
  %12 = load %struct.chain*, %struct.chain** %obj_, align 8, !dbg !5624
  ret %struct.chain* %12, !dbg !5624
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !5628 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5631, metadata !DIExpression()), !dbg !5632
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5632
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !5632
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !5632
  ret %struct.VEC_tree_heap* %1, !dbg !5632
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !5633 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5637, metadata !DIExpression()), !dbg !5638
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !5639, metadata !DIExpression()), !dbg !5638
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !5640, metadata !DIExpression()), !dbg !5638
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5638
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !5638
  %1 = load i32, i32* %num, align 8, !dbg !5638
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5638
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !5638
  %3 = load i32, i32* %alloc, align 4, !dbg !5638
  %cmp = icmp ult i32 %1, %3, !dbg !5638
  %conv = zext i1 %cmp to i32, !dbg !5638
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5638
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !5638
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5638
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !5638
  %6 = load i32, i32* %num1, align 8, !dbg !5638
  %inc = add i32 %6, 1, !dbg !5638
  store i32 %inc, i32* %num1, align 8, !dbg !5638
  %idxprom = zext i32 %6 to i64, !dbg !5638
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !5638
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !5638
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !5638
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !5638
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !5638
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !5638
  ret %union.tree_node** %9, !dbg !5638
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node* %obj_) #0 !dbg !5641 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %union.tree_node*, align 8
  %old_obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5644, metadata !DIExpression()), !dbg !5645
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5646, metadata !DIExpression()), !dbg !5645
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !5647, metadata !DIExpression()), !dbg !5645
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_obj_, metadata !5648, metadata !DIExpression()), !dbg !5645
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !5645
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5645
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !5645
  %2 = load i32, i32* %num, align 8, !dbg !5645
  %cmp = icmp ult i32 %0, %2, !dbg !5645
  %conv = zext i1 %cmp to i32, !dbg !5645
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5645
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 2, !dbg !5645
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !5645
  %idxprom = zext i32 %4 to i64, !dbg !5645
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !5645
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5645
  store %union.tree_node* %5, %union.tree_node** %old_obj_, align 8, !dbg !5645
  %6 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !5645
  %7 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5645
  %vec1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %7, i32 0, i32 2, !dbg !5645
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !5645
  %idxprom2 = zext i32 %8 to i64, !dbg !5645
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec1, i64 0, i64 %idxprom2, !dbg !5645
  store %union.tree_node* %6, %union.tree_node** %arrayidx3, align 8, !dbg !5645
  %9 = load %union.tree_node*, %union.tree_node** %old_obj_, align 8, !dbg !5645
  ret %union.tree_node* %9, !dbg !5645
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !5649 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5652, metadata !DIExpression()), !dbg !5653
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5654, metadata !DIExpression()), !dbg !5653
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5653
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !5653
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5653

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5653
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5653
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !5653
  %3 = load i32, i32* %num, align 8, !dbg !5653
  %cmp = icmp ult i32 %1, %3, !dbg !5653
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5655
  %land.ext = zext i1 %4 to i32, !dbg !5653
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5653
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !5653
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5653
  %idxprom = zext i32 %6 to i64, !dbg !5653
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !5653
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5653
  ret %union.tree_node* %7, !dbg !5653
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @ref_at_iteration(%struct.loop* %loop, %union.tree_node* %ref, i32 %iter) #0 !dbg !5656 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %ref.addr = alloca %union.tree_node*, align 8
  %iter.addr = alloca i32, align 4
  %idx = alloca %union.tree_node*, align 8
  %idx_p = alloca %union.tree_node**, align 8
  %type = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  %iv = alloca %struct.affine_iv, align 8
  %ok = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5659, metadata !DIExpression()), !dbg !5660
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !5661, metadata !DIExpression()), !dbg !5662
  store i32 %iter, i32* %iter.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %iter.addr, metadata !5663, metadata !DIExpression()), !dbg !5664
  call void @llvm.dbg.declare(metadata %union.tree_node** %idx, metadata !5665, metadata !DIExpression()), !dbg !5666
  call void @llvm.dbg.declare(metadata %union.tree_node*** %idx_p, metadata !5667, metadata !DIExpression()), !dbg !5668
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5669, metadata !DIExpression()), !dbg !5670
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !5671, metadata !DIExpression()), !dbg !5672
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !5673, metadata !DIExpression()), !dbg !5674
  store %union.tree_node* null, %union.tree_node** %op0, align 8, !dbg !5674
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !5675, metadata !DIExpression()), !dbg !5676
  call void @llvm.dbg.declare(metadata %struct.affine_iv* %iv, metadata !5677, metadata !DIExpression()), !dbg !5678
  call void @llvm.dbg.declare(metadata i8* %ok, metadata !5679, metadata !DIExpression()), !dbg !5680
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5681
  %call = call zeroext i8 @handled_component_p(%union.tree_node* %0), !dbg !5683
  %tobool = icmp ne i8 %call, 0, !dbg !5683
  br i1 %tobool, label %if.then, label %if.else, !dbg !5684

if.then:                                          ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5685
  %2 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5687
  %exp = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !5687
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5687
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !5687
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5687
  %4 = load i32, i32* %iter.addr, align 4, !dbg !5688
  %call1 = call %union.tree_node* @ref_at_iteration(%struct.loop* %1, %union.tree_node* %3, i32 %4), !dbg !5689
  store %union.tree_node* %call1, %union.tree_node** %op0, align 8, !dbg !5690
  %5 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5691
  %tobool2 = icmp ne %union.tree_node* %5, null, !dbg !5691
  br i1 %tobool2, label %if.end, label %if.then3, !dbg !5693

if.then3:                                         ; preds = %if.then
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5694
  br label %return, !dbg !5694

if.end:                                           ; preds = %if.then
  br label %if.end18, !dbg !5695

if.else:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5696
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5696
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !5696
  %bf.load = load i64, i64* %7, align 8, !dbg !5696
  %bf.clear = and i64 %bf.load, 65535, !dbg !5696
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5696
  %cmp = icmp eq i32 %bf.cast, 47, !dbg !5696
  br i1 %cmp, label %if.end17, label %lor.lhs.false, !dbg !5696

lor.lhs.false:                                    ; preds = %if.else
  %8 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5696
  %base4 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !5696
  %9 = bitcast %struct.tree_base* %base4 to i64*, !dbg !5696
  %bf.load5 = load i64, i64* %9, align 8, !dbg !5696
  %bf.clear6 = and i64 %bf.load5, 65535, !dbg !5696
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !5696
  %cmp8 = icmp eq i32 %bf.cast7, 48, !dbg !5696
  br i1 %cmp8, label %if.end17, label %lor.lhs.false9, !dbg !5696

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %10 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5696
  %base10 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5696
  %11 = bitcast %struct.tree_base* %base10 to i64*, !dbg !5696
  %bf.load11 = load i64, i64* %11, align 8, !dbg !5696
  %bf.clear12 = and i64 %bf.load11, 65535, !dbg !5696
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !5696
  %cmp14 = icmp eq i32 %bf.cast13, 49, !dbg !5696
  br i1 %cmp14, label %if.end17, label %if.then15, !dbg !5698

if.then15:                                        ; preds = %lor.lhs.false9
  %12 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5699
  %call16 = call %union.tree_node* @unshare_expr(%union.tree_node* %12), !dbg !5700
  store %union.tree_node* %call16, %union.tree_node** %retval, align 8, !dbg !5701
  br label %return, !dbg !5701

if.end17:                                         ; preds = %lor.lhs.false9, %lor.lhs.false, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.end
  %13 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5702
  %base19 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !5702
  %14 = bitcast %struct.tree_base* %base19 to i64*, !dbg !5702
  %bf.load20 = load i64, i64* %14, align 8, !dbg !5702
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !5702
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !5702
  %cmp23 = icmp eq i32 %bf.cast22, 47, !dbg !5702
  br i1 %cmp23, label %if.then36, label %lor.lhs.false24, !dbg !5702

lor.lhs.false24:                                  ; preds = %if.end18
  %15 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5702
  %base25 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !5702
  %16 = bitcast %struct.tree_base* %base25 to i64*, !dbg !5702
  %bf.load26 = load i64, i64* %16, align 8, !dbg !5702
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !5702
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !5702
  %cmp29 = icmp eq i32 %bf.cast28, 48, !dbg !5702
  br i1 %cmp29, label %if.then36, label %lor.lhs.false30, !dbg !5702

lor.lhs.false30:                                  ; preds = %lor.lhs.false24
  %17 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5702
  %base31 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !5702
  %18 = bitcast %struct.tree_base* %base31 to i64*, !dbg !5702
  %bf.load32 = load i64, i64* %18, align 8, !dbg !5702
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !5702
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !5702
  %cmp35 = icmp eq i32 %bf.cast34, 49, !dbg !5702
  br i1 %cmp35, label %if.then36, label %if.else44, !dbg !5704

if.then36:                                        ; preds = %lor.lhs.false30, %lor.lhs.false24, %if.end18
  %19 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5705
  %call37 = call %union.tree_node* @copy_node_stat(%union.tree_node* %19), !dbg !5705
  store %union.tree_node* %call37, %union.tree_node** %ret, align 8, !dbg !5707
  %20 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5708
  %exp38 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !5708
  %operands39 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp38, i32 0, i32 3, !dbg !5708
  %arrayidx40 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands39, i64 0, i64 0, !dbg !5708
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx40, align 8, !dbg !5708
  store %union.tree_node* %21, %union.tree_node** %idx, align 8, !dbg !5709
  %22 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5710
  %exp41 = bitcast %union.tree_node* %22 to %struct.tree_exp*, !dbg !5710
  %operands42 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp41, i32 0, i32 3, !dbg !5710
  %arrayidx43 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands42, i64 0, i64 0, !dbg !5710
  store %union.tree_node** %arrayidx43, %union.tree_node*** %idx_p, align 8, !dbg !5711
  br label %if.end123, !dbg !5712

if.else44:                                        ; preds = %lor.lhs.false30
  %23 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5713
  %base45 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !5713
  %24 = bitcast %struct.tree_base* %base45 to i64*, !dbg !5713
  %bf.load46 = load i64, i64* %24, align 8, !dbg !5713
  %bf.clear47 = and i64 %bf.load46, 65535, !dbg !5713
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !5713
  %cmp49 = icmp eq i32 %bf.cast48, 41, !dbg !5715
  br i1 %cmp49, label %if.then50, label %if.else72, !dbg !5716

if.then50:                                        ; preds = %if.else44
  %25 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5717
  %exp51 = bitcast %union.tree_node* %25 to %struct.tree_exp*, !dbg !5717
  %operands52 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp51, i32 0, i32 3, !dbg !5717
  %arrayidx53 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands52, i64 0, i64 2, !dbg !5717
  %26 = load %union.tree_node*, %union.tree_node** %arrayidx53, align 8, !dbg !5717
  %tobool54 = icmp ne %union.tree_node* %26, null, !dbg !5717
  br i1 %tobool54, label %land.lhs.true, label %if.end61, !dbg !5720

land.lhs.true:                                    ; preds = %if.then50
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5721
  %28 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5722
  %exp55 = bitcast %union.tree_node* %28 to %struct.tree_exp*, !dbg !5722
  %operands56 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp55, i32 0, i32 3, !dbg !5722
  %arrayidx57 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands56, i64 0, i64 2, !dbg !5722
  %29 = load %union.tree_node*, %union.tree_node** %arrayidx57, align 8, !dbg !5722
  %call58 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %27, %union.tree_node* %29), !dbg !5723
  %tobool59 = icmp ne i8 %call58, 0, !dbg !5723
  br i1 %tobool59, label %if.end61, label %if.then60, !dbg !5724

if.then60:                                        ; preds = %land.lhs.true
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5725
  br label %return, !dbg !5725

if.end61:                                         ; preds = %land.lhs.true, %if.then50
  %30 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5726
  %common = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !5726
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5726
  %31 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !5726
  %32 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5726
  %33 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5726
  %exp63 = bitcast %union.tree_node* %33 to %struct.tree_exp*, !dbg !5726
  %operands64 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp63, i32 0, i32 3, !dbg !5726
  %arrayidx65 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands64, i64 0, i64 1, !dbg !5726
  %34 = load %union.tree_node*, %union.tree_node** %arrayidx65, align 8, !dbg !5726
  %call66 = call %union.tree_node* @unshare_expr(%union.tree_node* %34), !dbg !5726
  %35 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5726
  %exp67 = bitcast %union.tree_node* %35 to %struct.tree_exp*, !dbg !5726
  %operands68 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp67, i32 0, i32 3, !dbg !5726
  %arrayidx69 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands68, i64 0, i64 2, !dbg !5726
  %36 = load %union.tree_node*, %union.tree_node** %arrayidx69, align 8, !dbg !5726
  %call70 = call %union.tree_node* @unshare_expr(%union.tree_node* %36), !dbg !5726
  %call71 = call %union.tree_node* @build3_stat(i32 41, %union.tree_node* %31, %union.tree_node* %32, %union.tree_node* %call66, %union.tree_node* %call70), !dbg !5726
  store %union.tree_node* %call71, %union.tree_node** %retval, align 8, !dbg !5727
  br label %return, !dbg !5727

if.else72:                                        ; preds = %if.else44
  %37 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5728
  %base73 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !5728
  %38 = bitcast %struct.tree_base* %base73 to i64*, !dbg !5728
  %bf.load74 = load i64, i64* %38, align 8, !dbg !5728
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !5728
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !5728
  %cmp77 = icmp eq i32 %bf.cast76, 45, !dbg !5730
  br i1 %cmp77, label %if.then78, label %if.else120, !dbg !5731

if.then78:                                        ; preds = %if.else72
  %39 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5732
  %exp79 = bitcast %union.tree_node* %39 to %struct.tree_exp*, !dbg !5732
  %operands80 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp79, i32 0, i32 3, !dbg !5732
  %arrayidx81 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands80, i64 0, i64 2, !dbg !5732
  %40 = load %union.tree_node*, %union.tree_node** %arrayidx81, align 8, !dbg !5732
  %tobool82 = icmp ne %union.tree_node* %40, null, !dbg !5732
  br i1 %tobool82, label %land.lhs.true83, label %if.end90, !dbg !5735

land.lhs.true83:                                  ; preds = %if.then78
  %41 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5736
  %42 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5737
  %exp84 = bitcast %union.tree_node* %42 to %struct.tree_exp*, !dbg !5737
  %operands85 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp84, i32 0, i32 3, !dbg !5737
  %arrayidx86 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands85, i64 0, i64 2, !dbg !5737
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx86, align 8, !dbg !5737
  %call87 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %41, %union.tree_node* %43), !dbg !5738
  %tobool88 = icmp ne i8 %call87, 0, !dbg !5738
  br i1 %tobool88, label %if.end90, label %if.then89, !dbg !5739

if.then89:                                        ; preds = %land.lhs.true83
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5740
  br label %return, !dbg !5740

if.end90:                                         ; preds = %land.lhs.true83, %if.then78
  %44 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5741
  %exp91 = bitcast %union.tree_node* %44 to %struct.tree_exp*, !dbg !5741
  %operands92 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp91, i32 0, i32 3, !dbg !5741
  %arrayidx93 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands92, i64 0, i64 3, !dbg !5741
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx93, align 8, !dbg !5741
  %tobool94 = icmp ne %union.tree_node* %45, null, !dbg !5741
  br i1 %tobool94, label %land.lhs.true95, label %if.end102, !dbg !5743

land.lhs.true95:                                  ; preds = %if.end90
  %46 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5744
  %47 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5745
  %exp96 = bitcast %union.tree_node* %47 to %struct.tree_exp*, !dbg !5745
  %operands97 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp96, i32 0, i32 3, !dbg !5745
  %arrayidx98 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands97, i64 0, i64 3, !dbg !5745
  %48 = load %union.tree_node*, %union.tree_node** %arrayidx98, align 8, !dbg !5745
  %call99 = call zeroext i8 @expr_invariant_in_loop_p(%struct.loop* %46, %union.tree_node* %48), !dbg !5746
  %tobool100 = icmp ne i8 %call99, 0, !dbg !5746
  br i1 %tobool100, label %if.end102, label %if.then101, !dbg !5747

if.then101:                                       ; preds = %land.lhs.true95
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5748
  br label %return, !dbg !5748

if.end102:                                        ; preds = %land.lhs.true95, %if.end90
  %49 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5749
  %common103 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !5749
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2, !dbg !5749
  %50 = load %union.tree_node*, %union.tree_node** %type104, align 8, !dbg !5749
  %51 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5749
  %52 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5749
  %exp105 = bitcast %union.tree_node* %52 to %struct.tree_exp*, !dbg !5749
  %operands106 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp105, i32 0, i32 3, !dbg !5749
  %arrayidx107 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands106, i64 0, i64 2, !dbg !5749
  %53 = load %union.tree_node*, %union.tree_node** %arrayidx107, align 8, !dbg !5749
  %call108 = call %union.tree_node* @unshare_expr(%union.tree_node* %53), !dbg !5749
  %54 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5749
  %exp109 = bitcast %union.tree_node* %54 to %struct.tree_exp*, !dbg !5749
  %operands110 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp109, i32 0, i32 3, !dbg !5749
  %arrayidx111 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands110, i64 0, i64 3, !dbg !5749
  %55 = load %union.tree_node*, %union.tree_node** %arrayidx111, align 8, !dbg !5749
  %call112 = call %union.tree_node* @unshare_expr(%union.tree_node* %55), !dbg !5749
  %call113 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %50, %union.tree_node* %51, %union.tree_node* null, %union.tree_node* %call108, %union.tree_node* %call112), !dbg !5749
  store %union.tree_node* %call113, %union.tree_node** %ret, align 8, !dbg !5750
  %56 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !5751
  %exp114 = bitcast %union.tree_node* %56 to %struct.tree_exp*, !dbg !5751
  %operands115 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp114, i32 0, i32 3, !dbg !5751
  %arrayidx116 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands115, i64 0, i64 1, !dbg !5751
  %57 = load %union.tree_node*, %union.tree_node** %arrayidx116, align 8, !dbg !5751
  store %union.tree_node* %57, %union.tree_node** %idx, align 8, !dbg !5752
  %58 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5753
  %exp117 = bitcast %union.tree_node* %58 to %struct.tree_exp*, !dbg !5753
  %operands118 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp117, i32 0, i32 3, !dbg !5753
  %arrayidx119 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands118, i64 0, i64 1, !dbg !5753
  store %union.tree_node** %arrayidx119, %union.tree_node*** %idx_p, align 8, !dbg !5754
  br label %if.end121, !dbg !5755

if.else120:                                       ; preds = %if.else72
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5756
  br label %return, !dbg !5756

if.end121:                                        ; preds = %if.end102
  br label %if.end122

if.end122:                                        ; preds = %if.end121
  br label %if.end123

if.end123:                                        ; preds = %if.end122, %if.then36
  %59 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5757
  %60 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5758
  %61 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !5759
  %call124 = call zeroext i8 @simple_iv(%struct.loop* %59, %struct.loop* %60, %union.tree_node* %61, %struct.affine_iv* %iv, i8 zeroext 1), !dbg !5760
  store i8 %call124, i8* %ok, align 1, !dbg !5761
  %62 = load i8, i8* %ok, align 1, !dbg !5762
  %tobool125 = icmp ne i8 %62, 0, !dbg !5762
  br i1 %tobool125, label %if.end127, label %if.then126, !dbg !5764

if.then126:                                       ; preds = %if.end123
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5765
  br label %return, !dbg !5765

if.end127:                                        ; preds = %if.end123
  %base128 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 0, !dbg !5766
  %63 = load %union.tree_node*, %union.tree_node** %base128, align 8, !dbg !5766
  %call129 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %63), !dbg !5767
  %base130 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 0, !dbg !5768
  store %union.tree_node* %call129, %union.tree_node** %base130, align 8, !dbg !5769
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 1, !dbg !5770
  %64 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5770
  %call131 = call i32 @integer_zerop(%union.tree_node* %64), !dbg !5772
  %tobool132 = icmp ne i32 %call131, 0, !dbg !5772
  br i1 %tobool132, label %if.then133, label %if.else136, !dbg !5773

if.then133:                                       ; preds = %if.end127
  %base134 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 0, !dbg !5774
  %65 = load %union.tree_node*, %union.tree_node** %base134, align 8, !dbg !5774
  %call135 = call %union.tree_node* @unshare_expr(%union.tree_node* %65), !dbg !5775
  %66 = load %union.tree_node**, %union.tree_node*** %idx_p, align 8, !dbg !5776
  store %union.tree_node* %call135, %union.tree_node** %66, align 8, !dbg !5777
  br label %if.end166, !dbg !5778

if.else136:                                       ; preds = %if.end127
  %base137 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 0, !dbg !5779
  %67 = load %union.tree_node*, %union.tree_node** %base137, align 8, !dbg !5779
  %common138 = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !5779
  %type139 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common138, i32 0, i32 2, !dbg !5779
  %68 = load %union.tree_node*, %union.tree_node** %type139, align 8, !dbg !5779
  store %union.tree_node* %68, %union.tree_node** %type, align 8, !dbg !5781
  %69 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5782
  %base140 = bitcast %union.tree_node* %69 to %struct.tree_base*, !dbg !5782
  %70 = bitcast %struct.tree_base* %base140 to i64*, !dbg !5782
  %bf.load141 = load i64, i64* %70, align 8, !dbg !5782
  %bf.clear142 = and i64 %bf.load141, 65535, !dbg !5782
  %bf.cast143 = trunc i64 %bf.clear142 to i32, !dbg !5782
  %cmp144 = icmp eq i32 %bf.cast143, 10, !dbg !5782
  br i1 %cmp144, label %if.then151, label %lor.lhs.false145, !dbg !5782

lor.lhs.false145:                                 ; preds = %if.else136
  %71 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5782
  %base146 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !5782
  %72 = bitcast %struct.tree_base* %base146 to i64*, !dbg !5782
  %bf.load147 = load i64, i64* %72, align 8, !dbg !5782
  %bf.clear148 = and i64 %bf.load147, 65535, !dbg !5782
  %bf.cast149 = trunc i64 %bf.clear148 to i32, !dbg !5782
  %cmp150 = icmp eq i32 %bf.cast149, 12, !dbg !5782
  br i1 %cmp150, label %if.then151, label %if.else157, !dbg !5784

if.then151:                                       ; preds = %lor.lhs.false145, %if.else136
  %73 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5785
  %step152 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 1, !dbg !5785
  %74 = load %union.tree_node*, %union.tree_node** %step152, align 8, !dbg !5785
  %75 = load i32, i32* %iter.addr, align 4, !dbg !5785
  %conv = sext i32 %75 to i64, !dbg !5785
  %call153 = call %union.tree_node* @size_int_kind(i64 %conv, i32 0), !dbg !5785
  %call154 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %73, %union.tree_node* %74, %union.tree_node* %call153), !dbg !5785
  store %union.tree_node* %call154, %union.tree_node** %val, align 8, !dbg !5787
  %76 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5788
  %base155 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 0, !dbg !5788
  %77 = load %union.tree_node*, %union.tree_node** %base155, align 8, !dbg !5788
  %78 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5788
  %call156 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %76, %union.tree_node* %77, %union.tree_node* %78), !dbg !5788
  store %union.tree_node* %call156, %union.tree_node** %val, align 8, !dbg !5789
  br label %if.end164, !dbg !5790

if.else157:                                       ; preds = %lor.lhs.false145
  %79 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5791
  %step158 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 1, !dbg !5791
  %80 = load %union.tree_node*, %union.tree_node** %step158, align 8, !dbg !5791
  %81 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5791
  %82 = load i32, i32* %iter.addr, align 4, !dbg !5791
  %conv159 = sext i32 %82 to i64, !dbg !5791
  %call160 = call %union.tree_node* @build_int_cst_type(%union.tree_node* %81, i64 %conv159), !dbg !5791
  %call161 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %79, %union.tree_node* %80, %union.tree_node* %call160), !dbg !5791
  store %union.tree_node* %call161, %union.tree_node** %val, align 8, !dbg !5793
  %83 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5794
  %base162 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i32 0, i32 0, !dbg !5794
  %84 = load %union.tree_node*, %union.tree_node** %base162, align 8, !dbg !5794
  %85 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5794
  %call163 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %83, %union.tree_node* %84, %union.tree_node* %85), !dbg !5794
  store %union.tree_node* %call163, %union.tree_node** %val, align 8, !dbg !5795
  br label %if.end164

if.end164:                                        ; preds = %if.else157, %if.then151
  %86 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5796
  %call165 = call %union.tree_node* @unshare_expr(%union.tree_node* %86), !dbg !5797
  %87 = load %union.tree_node**, %union.tree_node*** %idx_p, align 8, !dbg !5798
  store %union.tree_node* %call165, %union.tree_node** %87, align 8, !dbg !5799
  br label %if.end166

if.end166:                                        ; preds = %if.end164, %if.then133
  %88 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !5800
  store %union.tree_node* %88, %union.tree_node** %retval, align 8, !dbg !5801
  br label %return, !dbg !5801

return:                                           ; preds = %if.end166, %if.then126, %if.else120, %if.then101, %if.then89, %if.end61, %if.then60, %if.then15, %if.then3
  %89 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5802
  ret %union.tree_node* %89, !dbg !5802
}

declare dso_local zeroext i8 @tree_could_trap_p(%union.tree_node*) #2

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) #2

declare dso_local %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def*, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @handled_component_p(%union.tree_node* %t) #0 !dbg !5803 {
entry:
  %retval = alloca i8, align 1
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !5809, metadata !DIExpression()), !dbg !5810
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !5811
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5811
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5811
  %bf.load = load i64, i64* %1, align 8, !dbg !5811
  %bf.clear = and i64 %bf.load, 65535, !dbg !5811
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5811
  switch i32 %bf.cast, label %sw.default [
    i32 42, label %sw.bb
    i32 41, label %sw.bb
    i32 45, label %sw.bb
    i32 46, label %sw.bb
    i32 118, label %sw.bb
    i32 43, label %sw.bb
    i32 44, label %sw.bb
  ], !dbg !5812

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i8 1, i8* %retval, align 1, !dbg !5813
  br label %return, !dbg !5813

sw.default:                                       ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !5815
  br label %return, !dbg !5815

return:                                           ; preds = %sw.default, %sw.bb
  %2 = load i8, i8* %retval, align 1, !dbg !5816
  ret i8 %2, !dbg !5816
}

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #2

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

declare dso_local zeroext i8 @expr_invariant_in_loop_p(%struct.loop*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build4_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @simple_iv(%struct.loop*, %struct.loop*, %union.tree_node*, %struct.affine_iv*, i8 zeroext) #2

declare dso_local %union.tree_node* @expand_simple_operations(%union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

declare dso_local %union.tree_node* @build_int_cst_type(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @chain_can_be_combined_p(%struct.chain* %chain) #0 !dbg !5817 {
entry:
  %chain.addr = alloca %struct.chain*, align 8
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !5818, metadata !DIExpression()), !dbg !5819
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5820
  %combined = getelementptr inbounds %struct.chain, %struct.chain* %0, i32 0, i32 9, !dbg !5821
  %bf.load = load i8, i8* %combined, align 8, !dbg !5821
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !5821
  %bf.clear = and i8 %bf.lshr, 1, !dbg !5821
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5821
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5820
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !5822

land.rhs:                                         ; preds = %entry
  %1 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5823
  %type = getelementptr inbounds %struct.chain, %struct.chain* %1, i32 0, i32 0, !dbg !5824
  %2 = load i32, i32* %type, align 8, !dbg !5824
  %cmp = icmp eq i32 %2, 1, !dbg !5825
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !5826

lor.rhs:                                          ; preds = %land.rhs
  %3 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !5827
  %type1 = getelementptr inbounds %struct.chain, %struct.chain* %3, i32 0, i32 0, !dbg !5828
  %4 = load i32, i32* %type1, align 8, !dbg !5828
  %cmp2 = icmp eq i32 %4, 3, !dbg !5829
  br label %lor.end, !dbg !5826

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %5 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %6 = phi i1 [ false, %entry ], [ %5, %lor.end ], !dbg !5830
  %land.ext = zext i1 %6 to i32, !dbg !5822
  %conv = trunc i32 %land.ext to i8, !dbg !5831
  ret i8 %conv, !dbg !5832
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.chain* @VEC_chain_p_base_pop(%struct.VEC_chain_p_base* %vec_) #0 !dbg !5833 {
entry:
  %vec_.addr = alloca %struct.VEC_chain_p_base*, align 8
  %obj_ = alloca %struct.chain*, align 8
  store %struct.VEC_chain_p_base* %vec_, %struct.VEC_chain_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_base** %vec_.addr, metadata !5836, metadata !DIExpression()), !dbg !5837
  call void @llvm.dbg.declare(metadata %struct.chain** %obj_, metadata !5838, metadata !DIExpression()), !dbg !5837
  %0 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5837
  %num = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %0, i32 0, i32 0, !dbg !5837
  %1 = load i32, i32* %num, align 8, !dbg !5837
  %2 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5837
  %vec = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %2, i32 0, i32 2, !dbg !5837
  %3 = load %struct.VEC_chain_p_base*, %struct.VEC_chain_p_base** %vec_.addr, align 8, !dbg !5837
  %num1 = getelementptr inbounds %struct.VEC_chain_p_base, %struct.VEC_chain_p_base* %3, i32 0, i32 0, !dbg !5837
  %4 = load i32, i32* %num1, align 8, !dbg !5837
  %dec = add i32 %4, -1, !dbg !5837
  store i32 %dec, i32* %num1, align 8, !dbg !5837
  %idxprom = zext i32 %dec to i64, !dbg !5837
  %arrayidx = getelementptr inbounds [1 x %struct.chain*], [1 x %struct.chain*]* %vec, i64 0, i64 %idxprom, !dbg !5837
  %5 = load %struct.chain*, %struct.chain** %arrayidx, align 8, !dbg !5837
  store %struct.chain* %5, %struct.chain** %obj_, align 8, !dbg !5837
  %6 = load %struct.chain*, %struct.chain** %obj_, align 8, !dbg !5837
  ret %struct.chain* %6, !dbg !5837
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.chain* @combine_chains(%struct.chain* %ch1, %struct.chain* %ch2) #0 !dbg !5839 {
entry:
  %retval = alloca %struct.chain*, align 8
  %ch1.addr = alloca %struct.chain*, align 8
  %ch2.addr = alloca %struct.chain*, align 8
  %r1 = alloca %struct.dref_d*, align 8
  %r2 = alloca %struct.dref_d*, align 8
  %nw = alloca %struct.dref_d*, align 8
  %op = alloca i32, align 4
  %swap = alloca i8, align 1
  %new_chain = alloca %struct.chain*, align 8
  %i = alloca i32, align 4
  %root_stmt = alloca %union.gimple_statement_d*, align 8
  %rslt_type = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.chain*, align 8
  store %struct.chain* %ch1, %struct.chain** %ch1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %ch1.addr, metadata !5842, metadata !DIExpression()), !dbg !5843
  store %struct.chain* %ch2, %struct.chain** %ch2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %ch2.addr, metadata !5844, metadata !DIExpression()), !dbg !5845
  call void @llvm.dbg.declare(metadata %struct.dref_d** %r1, metadata !5846, metadata !DIExpression()), !dbg !5847
  call void @llvm.dbg.declare(metadata %struct.dref_d** %r2, metadata !5848, metadata !DIExpression()), !dbg !5849
  call void @llvm.dbg.declare(metadata %struct.dref_d** %nw, metadata !5850, metadata !DIExpression()), !dbg !5851
  call void @llvm.dbg.declare(metadata i32* %op, metadata !5852, metadata !DIExpression()), !dbg !5853
  store i32 0, i32* %op, align 4, !dbg !5853
  call void @llvm.dbg.declare(metadata i8* %swap, metadata !5854, metadata !DIExpression()), !dbg !5855
  store i8 0, i8* %swap, align 1, !dbg !5855
  call void @llvm.dbg.declare(metadata %struct.chain** %new_chain, metadata !5856, metadata !DIExpression()), !dbg !5857
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5858, metadata !DIExpression()), !dbg !5859
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %root_stmt, metadata !5860, metadata !DIExpression()), !dbg !5861
  call void @llvm.dbg.declare(metadata %union.tree_node** %rslt_type, metadata !5862, metadata !DIExpression()), !dbg !5863
  store %union.tree_node* null, %union.tree_node** %rslt_type, align 8, !dbg !5863
  %0 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !5864
  %1 = load %struct.chain*, %struct.chain** %ch2.addr, align 8, !dbg !5866
  %cmp = icmp eq %struct.chain* %0, %1, !dbg !5867
  br i1 %cmp, label %if.then, label %if.end, !dbg !5868

if.then:                                          ; preds = %entry
  store %struct.chain* null, %struct.chain** %retval, align 8, !dbg !5869
  br label %return, !dbg !5869

if.end:                                           ; preds = %entry
  %2 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !5870
  %length = getelementptr inbounds %struct.chain, %struct.chain* %2, i32 0, i32 6, !dbg !5872
  %3 = load i32, i32* %length, align 8, !dbg !5872
  %4 = load %struct.chain*, %struct.chain** %ch2.addr, align 8, !dbg !5873
  %length1 = getelementptr inbounds %struct.chain, %struct.chain* %4, i32 0, i32 6, !dbg !5874
  %5 = load i32, i32* %length1, align 8, !dbg !5874
  %cmp2 = icmp ne i32 %3, %5, !dbg !5875
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !5876

if.then3:                                         ; preds = %if.end
  store %struct.chain* null, %struct.chain** %retval, align 8, !dbg !5877
  br label %return, !dbg !5877

if.end4:                                          ; preds = %if.end
  %6 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !5878
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %6, i32 0, i32 5, !dbg !5878
  %7 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !5878
  %tobool = icmp ne %struct.VEC_dref_heap* %7, null, !dbg !5878
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5878

cond.true:                                        ; preds = %if.end4
  %8 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !5878
  %refs5 = getelementptr inbounds %struct.chain, %struct.chain* %8, i32 0, i32 5, !dbg !5878
  %9 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs5, align 8, !dbg !5878
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %9, i32 0, i32 0, !dbg !5878
  br label %cond.end, !dbg !5878

cond.false:                                       ; preds = %if.end4
  br label %cond.end, !dbg !5878

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5878
  %call = call i32 @VEC_dref_base_length(%struct.VEC_dref_base* %cond), !dbg !5878
  %10 = load %struct.chain*, %struct.chain** %ch2.addr, align 8, !dbg !5880
  %refs6 = getelementptr inbounds %struct.chain, %struct.chain* %10, i32 0, i32 5, !dbg !5880
  %11 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs6, align 8, !dbg !5880
  %tobool7 = icmp ne %struct.VEC_dref_heap* %11, null, !dbg !5880
  br i1 %tobool7, label %cond.true8, label %cond.false11, !dbg !5880

cond.true8:                                       ; preds = %cond.end
  %12 = load %struct.chain*, %struct.chain** %ch2.addr, align 8, !dbg !5880
  %refs9 = getelementptr inbounds %struct.chain, %struct.chain* %12, i32 0, i32 5, !dbg !5880
  %13 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs9, align 8, !dbg !5880
  %base10 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %13, i32 0, i32 0, !dbg !5880
  br label %cond.end12, !dbg !5880

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !5880

cond.end12:                                       ; preds = %cond.false11, %cond.true8
  %cond13 = phi %struct.VEC_dref_base* [ %base10, %cond.true8 ], [ null, %cond.false11 ], !dbg !5880
  %call14 = call i32 @VEC_dref_base_length(%struct.VEC_dref_base* %cond13), !dbg !5880
  %cmp15 = icmp ne i32 %call, %call14, !dbg !5881
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !5882

if.then16:                                        ; preds = %cond.end12
  store %struct.chain* null, %struct.chain** %retval, align 8, !dbg !5883
  br label %return, !dbg !5883

if.end17:                                         ; preds = %cond.end12
  store i32 0, i32* %i, align 4, !dbg !5884
  br label %for.cond, !dbg !5886

for.cond:                                         ; preds = %for.inc, %if.end17
  %14 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !5887
  %refs18 = getelementptr inbounds %struct.chain, %struct.chain* %14, i32 0, i32 5, !dbg !5887
  %15 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs18, align 8, !dbg !5887
  %tobool19 = icmp ne %struct.VEC_dref_heap* %15, null, !dbg !5887
  br i1 %tobool19, label %cond.true20, label %cond.false23, !dbg !5887

cond.true20:                                      ; preds = %for.cond
  %16 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !5887
  %refs21 = getelementptr inbounds %struct.chain, %struct.chain* %16, i32 0, i32 5, !dbg !5887
  %17 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs21, align 8, !dbg !5887
  %base22 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %17, i32 0, i32 0, !dbg !5887
  br label %cond.end24, !dbg !5887

cond.false23:                                     ; preds = %for.cond
  br label %cond.end24, !dbg !5887

cond.end24:                                       ; preds = %cond.false23, %cond.true20
  %cond25 = phi %struct.VEC_dref_base* [ %base22, %cond.true20 ], [ null, %cond.false23 ], !dbg !5887
  %18 = load i32, i32* %i, align 4, !dbg !5887
  %call26 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond25, i32 %18, %struct.dref_d** %r1), !dbg !5887
  %tobool27 = icmp ne i32 %call26, 0, !dbg !5887
  br i1 %tobool27, label %land.rhs, label %land.end, !dbg !5889

land.rhs:                                         ; preds = %cond.end24
  %19 = load %struct.chain*, %struct.chain** %ch2.addr, align 8, !dbg !5890
  %refs28 = getelementptr inbounds %struct.chain, %struct.chain* %19, i32 0, i32 5, !dbg !5890
  %20 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs28, align 8, !dbg !5890
  %tobool29 = icmp ne %struct.VEC_dref_heap* %20, null, !dbg !5890
  br i1 %tobool29, label %cond.true30, label %cond.false33, !dbg !5890

cond.true30:                                      ; preds = %land.rhs
  %21 = load %struct.chain*, %struct.chain** %ch2.addr, align 8, !dbg !5890
  %refs31 = getelementptr inbounds %struct.chain, %struct.chain* %21, i32 0, i32 5, !dbg !5890
  %22 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs31, align 8, !dbg !5890
  %base32 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %22, i32 0, i32 0, !dbg !5890
  br label %cond.end34, !dbg !5890

cond.false33:                                     ; preds = %land.rhs
  br label %cond.end34, !dbg !5890

cond.end34:                                       ; preds = %cond.false33, %cond.true30
  %cond35 = phi %struct.VEC_dref_base* [ %base32, %cond.true30 ], [ null, %cond.false33 ], !dbg !5890
  %23 = load i32, i32* %i, align 4, !dbg !5890
  %call36 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond35, i32 %23, %struct.dref_d** %r2), !dbg !5890
  %tobool37 = icmp ne i32 %call36, 0, !dbg !5889
  br label %land.end

land.end:                                         ; preds = %cond.end34, %cond.end24
  %24 = phi i1 [ false, %cond.end24 ], [ %tobool37, %cond.end34 ], !dbg !5891
  br i1 %24, label %for.body, label %for.end, !dbg !5892

for.body:                                         ; preds = %land.end
  %25 = load %struct.dref_d*, %struct.dref_d** %r1, align 8, !dbg !5893
  %distance = getelementptr inbounds %struct.dref_d, %struct.dref_d* %25, i32 0, i32 3, !dbg !5896
  %26 = load i32, i32* %distance, align 8, !dbg !5896
  %27 = load %struct.dref_d*, %struct.dref_d** %r2, align 8, !dbg !5897
  %distance38 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %27, i32 0, i32 3, !dbg !5898
  %28 = load i32, i32* %distance38, align 8, !dbg !5898
  %cmp39 = icmp ne i32 %26, %28, !dbg !5899
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !5900

if.then40:                                        ; preds = %for.body
  store %struct.chain* null, %struct.chain** %retval, align 8, !dbg !5901
  br label %return, !dbg !5901

if.end41:                                         ; preds = %for.body
  %29 = load %struct.dref_d*, %struct.dref_d** %r1, align 8, !dbg !5902
  %30 = load %struct.dref_d*, %struct.dref_d** %r2, align 8, !dbg !5904
  %call42 = call zeroext i8 @combinable_refs_p(%struct.dref_d* %29, %struct.dref_d* %30, i32* %op, i8* %swap, %union.tree_node** %rslt_type), !dbg !5905
  %tobool43 = icmp ne i8 %call42, 0, !dbg !5905
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !5906

if.then44:                                        ; preds = %if.end41
  store %struct.chain* null, %struct.chain** %retval, align 8, !dbg !5907
  br label %return, !dbg !5907

if.end45:                                         ; preds = %if.end41
  br label %for.inc, !dbg !5908

for.inc:                                          ; preds = %if.end45
  %31 = load i32, i32* %i, align 4, !dbg !5909
  %inc = add i32 %31, 1, !dbg !5909
  store i32 %inc, i32* %i, align 4, !dbg !5909
  br label %for.cond, !dbg !5910, !llvm.loop !5911

for.end:                                          ; preds = %land.end
  %32 = load i8, i8* %swap, align 1, !dbg !5913
  %tobool46 = icmp ne i8 %32, 0, !dbg !5913
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !5915

if.then47:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.chain** %tmp, metadata !5916, metadata !DIExpression()), !dbg !5918
  %33 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !5919
  store %struct.chain* %33, %struct.chain** %tmp, align 8, !dbg !5918
  %34 = load %struct.chain*, %struct.chain** %ch2.addr, align 8, !dbg !5920
  store %struct.chain* %34, %struct.chain** %ch1.addr, align 8, !dbg !5921
  %35 = load %struct.chain*, %struct.chain** %tmp, align 8, !dbg !5922
  store %struct.chain* %35, %struct.chain** %ch2.addr, align 8, !dbg !5923
  br label %if.end48, !dbg !5924

if.end48:                                         ; preds = %if.then47, %for.end
  %call49 = call i8* @xcalloc(i64 1, i64 72), !dbg !5925
  %36 = bitcast i8* %call49 to %struct.chain*, !dbg !5925
  store %struct.chain* %36, %struct.chain** %new_chain, align 8, !dbg !5926
  %37 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5927
  %type = getelementptr inbounds %struct.chain, %struct.chain* %37, i32 0, i32 0, !dbg !5928
  store i32 3, i32* %type, align 8, !dbg !5929
  %38 = load i32, i32* %op, align 4, !dbg !5930
  %39 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5931
  %op50 = getelementptr inbounds %struct.chain, %struct.chain* %39, i32 0, i32 1, !dbg !5932
  store i32 %38, i32* %op50, align 4, !dbg !5933
  %40 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !5934
  %41 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5935
  %ch151 = getelementptr inbounds %struct.chain, %struct.chain* %41, i32 0, i32 3, !dbg !5936
  store %struct.chain* %40, %struct.chain** %ch151, align 8, !dbg !5937
  %42 = load %struct.chain*, %struct.chain** %ch2.addr, align 8, !dbg !5938
  %43 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5939
  %ch252 = getelementptr inbounds %struct.chain, %struct.chain* %43, i32 0, i32 4, !dbg !5940
  store %struct.chain* %42, %struct.chain** %ch252, align 8, !dbg !5941
  %44 = load %union.tree_node*, %union.tree_node** %rslt_type, align 8, !dbg !5942
  %45 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5943
  %rslt_type53 = getelementptr inbounds %struct.chain, %struct.chain* %45, i32 0, i32 2, !dbg !5944
  store %union.tree_node* %44, %union.tree_node** %rslt_type53, align 8, !dbg !5945
  %46 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !5946
  %length54 = getelementptr inbounds %struct.chain, %struct.chain* %46, i32 0, i32 6, !dbg !5947
  %47 = load i32, i32* %length54, align 8, !dbg !5947
  %48 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5948
  %length55 = getelementptr inbounds %struct.chain, %struct.chain* %48, i32 0, i32 6, !dbg !5949
  store i32 %47, i32* %length55, align 8, !dbg !5950
  store i32 0, i32* %i, align 4, !dbg !5951
  br label %for.cond56, !dbg !5953

for.cond56:                                       ; preds = %for.inc86, %if.end48
  %49 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !5954
  %refs57 = getelementptr inbounds %struct.chain, %struct.chain* %49, i32 0, i32 5, !dbg !5954
  %50 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs57, align 8, !dbg !5954
  %tobool58 = icmp ne %struct.VEC_dref_heap* %50, null, !dbg !5954
  br i1 %tobool58, label %cond.true59, label %cond.false62, !dbg !5954

cond.true59:                                      ; preds = %for.cond56
  %51 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !5954
  %refs60 = getelementptr inbounds %struct.chain, %struct.chain* %51, i32 0, i32 5, !dbg !5954
  %52 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs60, align 8, !dbg !5954
  %base61 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %52, i32 0, i32 0, !dbg !5954
  br label %cond.end63, !dbg !5954

cond.false62:                                     ; preds = %for.cond56
  br label %cond.end63, !dbg !5954

cond.end63:                                       ; preds = %cond.false62, %cond.true59
  %cond64 = phi %struct.VEC_dref_base* [ %base61, %cond.true59 ], [ null, %cond.false62 ], !dbg !5954
  %53 = load i32, i32* %i, align 4, !dbg !5954
  %call65 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond64, i32 %53, %struct.dref_d** %r1), !dbg !5954
  %tobool66 = icmp ne i32 %call65, 0, !dbg !5954
  br i1 %tobool66, label %land.rhs67, label %land.end78, !dbg !5956

land.rhs67:                                       ; preds = %cond.end63
  %54 = load %struct.chain*, %struct.chain** %ch2.addr, align 8, !dbg !5957
  %refs68 = getelementptr inbounds %struct.chain, %struct.chain* %54, i32 0, i32 5, !dbg !5957
  %55 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs68, align 8, !dbg !5957
  %tobool69 = icmp ne %struct.VEC_dref_heap* %55, null, !dbg !5957
  br i1 %tobool69, label %cond.true70, label %cond.false73, !dbg !5957

cond.true70:                                      ; preds = %land.rhs67
  %56 = load %struct.chain*, %struct.chain** %ch2.addr, align 8, !dbg !5957
  %refs71 = getelementptr inbounds %struct.chain, %struct.chain* %56, i32 0, i32 5, !dbg !5957
  %57 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs71, align 8, !dbg !5957
  %base72 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %57, i32 0, i32 0, !dbg !5957
  br label %cond.end74, !dbg !5957

cond.false73:                                     ; preds = %land.rhs67
  br label %cond.end74, !dbg !5957

cond.end74:                                       ; preds = %cond.false73, %cond.true70
  %cond75 = phi %struct.VEC_dref_base* [ %base72, %cond.true70 ], [ null, %cond.false73 ], !dbg !5957
  %58 = load i32, i32* %i, align 4, !dbg !5957
  %call76 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond75, i32 %58, %struct.dref_d** %r2), !dbg !5957
  %tobool77 = icmp ne i32 %call76, 0, !dbg !5956
  br label %land.end78

land.end78:                                       ; preds = %cond.end74, %cond.end63
  %59 = phi i1 [ false, %cond.end63 ], [ %tobool77, %cond.end74 ], !dbg !5958
  br i1 %59, label %for.body79, label %for.end88, !dbg !5959

for.body79:                                       ; preds = %land.end78
  %call80 = call i8* @xcalloc(i64 1, i64 56), !dbg !5960
  %60 = bitcast i8* %call80 to %struct.dref_d*, !dbg !5960
  store %struct.dref_d* %60, %struct.dref_d** %nw, align 8, !dbg !5962
  %61 = load %struct.dref_d*, %struct.dref_d** %r1, align 8, !dbg !5963
  %62 = load %struct.dref_d*, %struct.dref_d** %r2, align 8, !dbg !5964
  %call81 = call %union.gimple_statement_d* @stmt_combining_refs(%struct.dref_d* %61, %struct.dref_d* %62), !dbg !5965
  %63 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !5966
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %63, i32 0, i32 1, !dbg !5967
  store %union.gimple_statement_d* %call81, %union.gimple_statement_d** %stmt, align 8, !dbg !5968
  %64 = load %struct.dref_d*, %struct.dref_d** %r1, align 8, !dbg !5969
  %distance82 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %64, i32 0, i32 3, !dbg !5970
  %65 = load i32, i32* %distance82, align 8, !dbg !5970
  %66 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !5971
  %distance83 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %66, i32 0, i32 3, !dbg !5972
  store i32 %65, i32* %distance83, align 8, !dbg !5973
  %67 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5974
  %refs84 = getelementptr inbounds %struct.chain, %struct.chain* %67, i32 0, i32 5, !dbg !5974
  %68 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !5974
  %call85 = call %struct.dref_d** @VEC_dref_heap_safe_push(%struct.VEC_dref_heap** %refs84, %struct.dref_d* %68), !dbg !5974
  br label %for.inc86, !dbg !5975

for.inc86:                                        ; preds = %for.body79
  %69 = load i32, i32* %i, align 4, !dbg !5976
  %inc87 = add i32 %69, 1, !dbg !5976
  store i32 %inc87, i32* %i, align 4, !dbg !5976
  br label %for.cond56, !dbg !5977, !llvm.loop !5978

for.end88:                                        ; preds = %land.end78
  %70 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5980
  %has_max_use_after = getelementptr inbounds %struct.chain, %struct.chain* %70, i32 0, i32 9, !dbg !5981
  %bf.load = load i8, i8* %has_max_use_after, align 8, !dbg !5982
  %bf.clear = and i8 %bf.load, -2, !dbg !5982
  store i8 %bf.clear, i8* %has_max_use_after, align 8, !dbg !5982
  %71 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5983
  %call89 = call %struct.dref_d* @get_chain_root(%struct.chain* %71), !dbg !5984
  %stmt90 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %call89, i32 0, i32 1, !dbg !5985
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt90, align 8, !dbg !5985
  store %union.gimple_statement_d* %72, %union.gimple_statement_d** %root_stmt, align 8, !dbg !5986
  store i32 1, i32* %i, align 4, !dbg !5987
  br label %for.cond91, !dbg !5989

for.cond91:                                       ; preds = %for.inc114, %for.end88
  %73 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5990
  %refs92 = getelementptr inbounds %struct.chain, %struct.chain* %73, i32 0, i32 5, !dbg !5990
  %74 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs92, align 8, !dbg !5990
  %tobool93 = icmp ne %struct.VEC_dref_heap* %74, null, !dbg !5990
  br i1 %tobool93, label %cond.true94, label %cond.false97, !dbg !5990

cond.true94:                                      ; preds = %for.cond91
  %75 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5990
  %refs95 = getelementptr inbounds %struct.chain, %struct.chain* %75, i32 0, i32 5, !dbg !5990
  %76 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs95, align 8, !dbg !5990
  %base96 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %76, i32 0, i32 0, !dbg !5990
  br label %cond.end98, !dbg !5990

cond.false97:                                     ; preds = %for.cond91
  br label %cond.end98, !dbg !5990

cond.end98:                                       ; preds = %cond.false97, %cond.true94
  %cond99 = phi %struct.VEC_dref_base* [ %base96, %cond.true94 ], [ null, %cond.false97 ], !dbg !5990
  %77 = load i32, i32* %i, align 4, !dbg !5990
  %call100 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond99, i32 %77, %struct.dref_d** %nw), !dbg !5990
  %tobool101 = icmp ne i32 %call100, 0, !dbg !5992
  br i1 %tobool101, label %for.body102, label %for.end116, !dbg !5992

for.body102:                                      ; preds = %cond.end98
  %78 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !5993
  %distance103 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %78, i32 0, i32 3, !dbg !5996
  %79 = load i32, i32* %distance103, align 8, !dbg !5996
  %80 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !5997
  %length104 = getelementptr inbounds %struct.chain, %struct.chain* %80, i32 0, i32 6, !dbg !5998
  %81 = load i32, i32* %length104, align 8, !dbg !5998
  %cmp105 = icmp eq i32 %79, %81, !dbg !5999
  br i1 %cmp105, label %land.lhs.true, label %if.end113, !dbg !6000

land.lhs.true:                                    ; preds = %for.body102
  %82 = load %struct.dref_d*, %struct.dref_d** %nw, align 8, !dbg !6001
  %stmt106 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %82, i32 0, i32 1, !dbg !6002
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt106, align 8, !dbg !6002
  %84 = load %union.gimple_statement_d*, %union.gimple_statement_d** %root_stmt, align 8, !dbg !6003
  %call107 = call zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d* %83, %union.gimple_statement_d* %84), !dbg !6004
  %tobool108 = icmp ne i8 %call107, 0, !dbg !6004
  br i1 %tobool108, label %if.end113, label %if.then109, !dbg !6005

if.then109:                                       ; preds = %land.lhs.true
  %85 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !6006
  %has_max_use_after110 = getelementptr inbounds %struct.chain, %struct.chain* %85, i32 0, i32 9, !dbg !6008
  %bf.load111 = load i8, i8* %has_max_use_after110, align 8, !dbg !6009
  %bf.clear112 = and i8 %bf.load111, -2, !dbg !6009
  %bf.set = or i8 %bf.clear112, 1, !dbg !6009
  store i8 %bf.set, i8* %has_max_use_after110, align 8, !dbg !6009
  br label %for.end116, !dbg !6010

if.end113:                                        ; preds = %land.lhs.true, %for.body102
  br label %for.inc114, !dbg !6011

for.inc114:                                       ; preds = %if.end113
  %86 = load i32, i32* %i, align 4, !dbg !6012
  %inc115 = add i32 %86, 1, !dbg !6012
  store i32 %inc115, i32* %i, align 4, !dbg !6012
  br label %for.cond91, !dbg !6013, !llvm.loop !6014

for.end116:                                       ; preds = %if.then109, %cond.end98
  %87 = load %struct.chain*, %struct.chain** %ch1.addr, align 8, !dbg !6016
  %combined = getelementptr inbounds %struct.chain, %struct.chain* %87, i32 0, i32 9, !dbg !6017
  %bf.load117 = load i8, i8* %combined, align 8, !dbg !6018
  %bf.clear118 = and i8 %bf.load117, -5, !dbg !6018
  %bf.set119 = or i8 %bf.clear118, 4, !dbg !6018
  store i8 %bf.set119, i8* %combined, align 8, !dbg !6018
  %88 = load %struct.chain*, %struct.chain** %ch2.addr, align 8, !dbg !6019
  %combined120 = getelementptr inbounds %struct.chain, %struct.chain* %88, i32 0, i32 9, !dbg !6020
  %bf.load121 = load i8, i8* %combined120, align 8, !dbg !6021
  %bf.clear122 = and i8 %bf.load121, -5, !dbg !6021
  %bf.set123 = or i8 %bf.clear122, 4, !dbg !6021
  store i8 %bf.set123, i8* %combined120, align 8, !dbg !6021
  %89 = load %struct.chain*, %struct.chain** %new_chain, align 8, !dbg !6022
  store %struct.chain* %89, %struct.chain** %retval, align 8, !dbg !6023
  br label %return, !dbg !6023

return:                                           ; preds = %for.end116, %if.then44, %if.then40, %if.then16, %if.then3, %if.then
  %90 = load %struct.chain*, %struct.chain** %retval, align 8, !dbg !6024
  ret %struct.chain* %90, !dbg !6024
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @combinable_refs_p(%struct.dref_d* %r1, %struct.dref_d* %r2, i32* %code, i8* %swap, %union.tree_node** %rslt_type) #0 !dbg !6025 {
entry:
  %retval = alloca i8, align 1
  %r1.addr = alloca %struct.dref_d*, align 8
  %r2.addr = alloca %struct.dref_d*, align 8
  %code.addr = alloca i32*, align 8
  %swap.addr = alloca i8*, align 8
  %rslt_type.addr = alloca %union.tree_node**, align 8
  %acode = alloca i32, align 4
  %aswap = alloca i8, align 1
  %atype = alloca %union.tree_node*, align 8
  %name1 = alloca %union.tree_node*, align 8
  %name2 = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.dref_d* %r1, %struct.dref_d** %r1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %r1.addr, metadata !6030, metadata !DIExpression()), !dbg !6031
  store %struct.dref_d* %r2, %struct.dref_d** %r2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %r2.addr, metadata !6032, metadata !DIExpression()), !dbg !6033
  store i32* %code, i32** %code.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %code.addr, metadata !6034, metadata !DIExpression()), !dbg !6035
  store i8* %swap, i8** %swap.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %swap.addr, metadata !6036, metadata !DIExpression()), !dbg !6037
  store %union.tree_node** %rslt_type, %union.tree_node*** %rslt_type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %rslt_type.addr, metadata !6038, metadata !DIExpression()), !dbg !6039
  call void @llvm.dbg.declare(metadata i32* %acode, metadata !6040, metadata !DIExpression()), !dbg !6041
  call void @llvm.dbg.declare(metadata i8* %aswap, metadata !6042, metadata !DIExpression()), !dbg !6043
  call void @llvm.dbg.declare(metadata %union.tree_node** %atype, metadata !6044, metadata !DIExpression()), !dbg !6045
  call void @llvm.dbg.declare(metadata %union.tree_node** %name1, metadata !6046, metadata !DIExpression()), !dbg !6047
  call void @llvm.dbg.declare(metadata %union.tree_node** %name2, metadata !6048, metadata !DIExpression()), !dbg !6049
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6050, metadata !DIExpression()), !dbg !6051
  %0 = load %struct.dref_d*, %struct.dref_d** %r1.addr, align 8, !dbg !6052
  %call = call %union.tree_node* @name_for_ref(%struct.dref_d* %0), !dbg !6053
  store %union.tree_node* %call, %union.tree_node** %name1, align 8, !dbg !6054
  %1 = load %struct.dref_d*, %struct.dref_d** %r2.addr, align 8, !dbg !6055
  %call1 = call %union.tree_node* @name_for_ref(%struct.dref_d* %1), !dbg !6056
  store %union.tree_node* %call1, %union.tree_node** %name2, align 8, !dbg !6057
  %2 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !6058
  %cmp = icmp ne %union.tree_node* %2, null, !dbg !6058
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !6058

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !6058
  %cmp2 = icmp ne %union.tree_node* %3, null, !dbg !6058
  br i1 %cmp2, label %cond.false, label %cond.true, !dbg !6058

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 2109, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !6058
  br label %cond.end, !dbg !6058

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6058

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6058
  %call3 = call %union.gimple_statement_d* @find_common_use_stmt(%union.tree_node** %name1, %union.tree_node** %name2), !dbg !6059
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt, align 8, !dbg !6060
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6061
  %tobool = icmp ne %union.gimple_statement_d* %4, null, !dbg !6061
  br i1 %tobool, label %if.end, label %if.then, !dbg !6063

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !6064
  br label %return, !dbg !6064

if.end:                                           ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6065
  %call4 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !6066
  store i32 %call4, i32* %acode, align 4, !dbg !6067
  %6 = load i32, i32* %acode, align 4, !dbg !6068
  %call5 = call zeroext i8 @commutative_tree_code(i32 %6), !dbg !6069
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6069
  br i1 %tobool6, label %land.end, label %land.rhs, !dbg !6070

land.rhs:                                         ; preds = %if.end
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6071
  %call7 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %7), !dbg !6072
  %8 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !6073
  %cmp8 = icmp ne %union.tree_node* %call7, %8, !dbg !6074
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %9 = phi i1 [ false, %if.end ], [ %cmp8, %land.rhs ], !dbg !6075
  %land.ext = zext i1 %9 to i32, !dbg !6070
  %conv = trunc i32 %land.ext to i8, !dbg !6076
  store i8 %conv, i8* %aswap, align 1, !dbg !6077
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6078
  %call9 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %10), !dbg !6078
  %common = bitcast %union.tree_node* %call9 to %struct.tree_common*, !dbg !6078
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6078
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6078
  store %union.tree_node* %11, %union.tree_node** %atype, align 8, !dbg !6079
  %12 = load i32*, i32** %code.addr, align 8, !dbg !6080
  %13 = load i32, i32* %12, align 4, !dbg !6082
  %cmp10 = icmp eq i32 %13, 0, !dbg !6083
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !6084

if.then12:                                        ; preds = %land.end
  %14 = load i32, i32* %acode, align 4, !dbg !6085
  %15 = load i32*, i32** %code.addr, align 8, !dbg !6087
  store i32 %14, i32* %15, align 4, !dbg !6088
  %16 = load i8, i8* %aswap, align 1, !dbg !6089
  %17 = load i8*, i8** %swap.addr, align 8, !dbg !6090
  store i8 %16, i8* %17, align 1, !dbg !6091
  %18 = load %union.tree_node*, %union.tree_node** %atype, align 8, !dbg !6092
  %19 = load %union.tree_node**, %union.tree_node*** %rslt_type.addr, align 8, !dbg !6093
  store %union.tree_node* %18, %union.tree_node** %19, align 8, !dbg !6094
  store i8 1, i8* %retval, align 1, !dbg !6095
  br label %return, !dbg !6095

if.end13:                                         ; preds = %land.end
  %20 = load i32*, i32** %code.addr, align 8, !dbg !6096
  %21 = load i32, i32* %20, align 4, !dbg !6097
  %22 = load i32, i32* %acode, align 4, !dbg !6098
  %cmp14 = icmp eq i32 %21, %22, !dbg !6099
  br i1 %cmp14, label %land.lhs.true16, label %land.end24, !dbg !6100

land.lhs.true16:                                  ; preds = %if.end13
  %23 = load i8*, i8** %swap.addr, align 8, !dbg !6101
  %24 = load i8, i8* %23, align 1, !dbg !6102
  %conv17 = zext i8 %24 to i32, !dbg !6102
  %25 = load i8, i8* %aswap, align 1, !dbg !6103
  %conv18 = zext i8 %25 to i32, !dbg !6103
  %cmp19 = icmp eq i32 %conv17, %conv18, !dbg !6104
  br i1 %cmp19, label %land.rhs21, label %land.end24, !dbg !6105

land.rhs21:                                       ; preds = %land.lhs.true16
  %26 = load %union.tree_node**, %union.tree_node*** %rslt_type.addr, align 8, !dbg !6106
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !6107
  %28 = load %union.tree_node*, %union.tree_node** %atype, align 8, !dbg !6108
  %cmp22 = icmp eq %union.tree_node* %27, %28, !dbg !6109
  br label %land.end24

land.end24:                                       ; preds = %land.rhs21, %land.lhs.true16, %if.end13
  %29 = phi i1 [ false, %land.lhs.true16 ], [ false, %if.end13 ], [ %cmp22, %land.rhs21 ], !dbg !6075
  %land.ext25 = zext i1 %29 to i32, !dbg !6105
  %conv26 = trunc i32 %land.ext25 to i8, !dbg !6110
  store i8 %conv26, i8* %retval, align 1, !dbg !6111
  br label %return, !dbg !6111

return:                                           ; preds = %land.end24, %if.then12, %if.then
  %30 = load i8, i8* %retval, align 1, !dbg !6112
  ret i8 %30, !dbg !6112
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @stmt_combining_refs(%struct.dref_d* %r1, %struct.dref_d* %r2) #0 !dbg !6113 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %r1.addr = alloca %struct.dref_d*, align 8
  %r2.addr = alloca %struct.dref_d*, align 8
  %stmt1 = alloca %union.gimple_statement_d*, align 8
  %stmt2 = alloca %union.gimple_statement_d*, align 8
  %name1 = alloca %union.tree_node*, align 8
  %name2 = alloca %union.tree_node*, align 8
  store %struct.dref_d* %r1, %struct.dref_d** %r1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %r1.addr, metadata !6116, metadata !DIExpression()), !dbg !6117
  store %struct.dref_d* %r2, %struct.dref_d** %r2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %r2.addr, metadata !6118, metadata !DIExpression()), !dbg !6119
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1, metadata !6120, metadata !DIExpression()), !dbg !6121
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2, metadata !6122, metadata !DIExpression()), !dbg !6123
  call void @llvm.dbg.declare(metadata %union.tree_node** %name1, metadata !6124, metadata !DIExpression()), !dbg !6125
  %0 = load %struct.dref_d*, %struct.dref_d** %r1.addr, align 8, !dbg !6126
  %call = call %union.tree_node* @name_for_ref(%struct.dref_d* %0), !dbg !6127
  store %union.tree_node* %call, %union.tree_node** %name1, align 8, !dbg !6125
  call void @llvm.dbg.declare(metadata %union.tree_node** %name2, metadata !6128, metadata !DIExpression()), !dbg !6129
  %1 = load %struct.dref_d*, %struct.dref_d** %r2.addr, align 8, !dbg !6130
  %call1 = call %union.tree_node* @name_for_ref(%struct.dref_d* %1), !dbg !6131
  store %union.tree_node* %call1, %union.tree_node** %name2, align 8, !dbg !6129
  %call2 = call %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %name1), !dbg !6132
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %stmt1, align 8, !dbg !6133
  %call3 = call %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %name2), !dbg !6134
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt2, align 8, !dbg !6135
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6136
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6138
  %cmp = icmp eq %union.gimple_statement_d* %2, %3, !dbg !6139
  br i1 %cmp, label %if.then, label %if.end, !dbg !6140

if.then:                                          ; preds = %entry
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6141
  store %union.gimple_statement_d* %4, %union.gimple_statement_d** %retval, align 8, !dbg !6142
  br label %return, !dbg !6142

if.end:                                           ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %name1, align 8, !dbg !6143
  %6 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !6144
  %call4 = call %union.gimple_statement_d* @reassociate_to_the_same_stmt(%union.tree_node* %5, %union.tree_node* %6), !dbg !6145
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %retval, align 8, !dbg !6146
  br label %return, !dbg !6146

return:                                           ; preds = %if.end, %if.then
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6147
  ret %union.gimple_statement_d* %7, !dbg !6147
}

declare dso_local zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @name_for_ref(%struct.dref_d* %ref) #0 !dbg !6148 {
entry:
  %ref.addr = alloca %struct.dref_d*, align 8
  %name = alloca %union.tree_node*, align 8
  store %struct.dref_d* %ref, %struct.dref_d** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %ref.addr, metadata !6151, metadata !DIExpression()), !dbg !6152
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !6153, metadata !DIExpression()), !dbg !6154
  %0 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !6155
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %0, i32 0, i32 1, !dbg !6157
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6157
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %1), !dbg !6158
  %tobool = icmp ne i8 %call, 0, !dbg !6158
  br i1 %tobool, label %if.then, label %if.else10, !dbg !6159

if.then:                                          ; preds = %entry
  %2 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !6160
  %ref1 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %2, i32 0, i32 0, !dbg !6163
  %3 = load %struct.data_reference*, %struct.data_reference** %ref1, align 8, !dbg !6163
  %tobool2 = icmp ne %struct.data_reference* %3, null, !dbg !6160
  br i1 %tobool2, label %lor.lhs.false, label %if.then5, !dbg !6164

lor.lhs.false:                                    ; preds = %if.then
  %4 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !6165
  %ref3 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %4, i32 0, i32 0, !dbg !6165
  %5 = load %struct.data_reference*, %struct.data_reference** %ref3, align 8, !dbg !6165
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %5, i32 0, i32 3, !dbg !6165
  %6 = load i8, i8* %is_read, align 8, !dbg !6165
  %conv = zext i8 %6 to i32, !dbg !6165
  %tobool4 = icmp ne i32 %conv, 0, !dbg !6165
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !6166

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  %7 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !6167
  %stmt6 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %7, i32 0, i32 1, !dbg !6168
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !6168
  %call7 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %8), !dbg !6169
  store %union.tree_node* %call7, %union.tree_node** %name, align 8, !dbg !6170
  br label %if.end, !dbg !6171

if.else:                                          ; preds = %lor.lhs.false
  %9 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !6172
  %stmt8 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %9, i32 0, i32 1, !dbg !6173
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt8, align 8, !dbg !6173
  %call9 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %10), !dbg !6174
  store %union.tree_node* %call9, %union.tree_node** %name, align 8, !dbg !6175
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then5
  br label %if.end14, !dbg !6176

if.else10:                                        ; preds = %entry
  %11 = load %struct.dref_d*, %struct.dref_d** %ref.addr, align 8, !dbg !6177
  %stmt11 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %11, i32 0, i32 1, !dbg !6177
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt11, align 8, !dbg !6177
  %call12 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %12), !dbg !6177
  %call13 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call12), !dbg !6177
  store %union.tree_node* %call13, %union.tree_node** %name, align 8, !dbg !6178
  br label %if.end14

if.end14:                                         ; preds = %if.else10, %if.end
  %13 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6179
  %base = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6179
  %14 = bitcast %struct.tree_base* %base to i64*, !dbg !6179
  %bf.load = load i64, i64* %14, align 8, !dbg !6179
  %bf.clear = and i64 %bf.load, 65535, !dbg !6179
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6179
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6180
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6179

cond.true:                                        ; preds = %if.end14
  %15 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6181
  br label %cond.end, !dbg !6179

cond.false:                                       ; preds = %if.end14
  br label %cond.end, !dbg !6179

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %15, %cond.true ], [ null, %cond.false ], !dbg !6179
  ret %union.tree_node* %cond, !dbg !6182
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @find_common_use_stmt(%union.tree_node** %name1, %union.tree_node** %name2) #0 !dbg !6183 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %name1.addr = alloca %union.tree_node**, align 8
  %name2.addr = alloca %union.tree_node**, align 8
  %stmt1 = alloca %union.gimple_statement_d*, align 8
  %stmt2 = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node** %name1, %union.tree_node*** %name1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %name1.addr, metadata !6186, metadata !DIExpression()), !dbg !6187
  store %union.tree_node** %name2, %union.tree_node*** %name2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %name2.addr, metadata !6188, metadata !DIExpression()), !dbg !6189
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1, metadata !6190, metadata !DIExpression()), !dbg !6191
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2, metadata !6192, metadata !DIExpression()), !dbg !6193
  %0 = load %union.tree_node**, %union.tree_node*** %name1.addr, align 8, !dbg !6194
  %call = call %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %0), !dbg !6195
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt1, align 8, !dbg !6196
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6197
  %tobool = icmp ne %union.gimple_statement_d* %1, null, !dbg !6197
  br i1 %tobool, label %if.end, label %if.then, !dbg !6199

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6200
  br label %return, !dbg !6200

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node**, %union.tree_node*** %name2.addr, align 8, !dbg !6201
  %call1 = call %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %2), !dbg !6202
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt2, align 8, !dbg !6203
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6204
  %tobool2 = icmp ne %union.gimple_statement_d* %3, null, !dbg !6204
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !6206

if.then3:                                         ; preds = %if.end
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6207
  br label %return, !dbg !6207

if.end4:                                          ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6208
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6210
  %cmp = icmp eq %union.gimple_statement_d* %4, %5, !dbg !6211
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !6212

if.then5:                                         ; preds = %if.end4
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6213
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %retval, align 8, !dbg !6214
  br label %return, !dbg !6214

if.end6:                                          ; preds = %if.end4
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6215
  %call7 = call %union.gimple_statement_d* @find_associative_operation_root(%union.gimple_statement_d* %7, i32* null), !dbg !6216
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %stmt1, align 8, !dbg !6217
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6218
  %tobool8 = icmp ne %union.gimple_statement_d* %8, null, !dbg !6218
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !6220

if.then9:                                         ; preds = %if.end6
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6221
  br label %return, !dbg !6221

if.end10:                                         ; preds = %if.end6
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6222
  %call11 = call %union.gimple_statement_d* @find_associative_operation_root(%union.gimple_statement_d* %9, i32* null), !dbg !6223
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %stmt2, align 8, !dbg !6224
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6225
  %tobool12 = icmp ne %union.gimple_statement_d* %10, null, !dbg !6225
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !6227

if.then13:                                        ; preds = %if.end10
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6228
  br label %return, !dbg !6228

if.end14:                                         ; preds = %if.end10
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6229
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6230
  %cmp15 = icmp eq %union.gimple_statement_d* %11, %12, !dbg !6231
  br i1 %cmp15, label %cond.true, label %cond.false, !dbg !6229

cond.true:                                        ; preds = %if.end14
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6232
  br label %cond.end, !dbg !6229

cond.false:                                       ; preds = %if.end14
  br label %cond.end, !dbg !6229

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.gimple_statement_d* [ %13, %cond.true ], [ null, %cond.false ], !dbg !6229
  store %union.gimple_statement_d* %cond, %union.gimple_statement_d** %retval, align 8, !dbg !6233
  br label %return, !dbg !6233

return:                                           ; preds = %cond.end, %if.then13, %if.then9, %if.then5, %if.then3, %if.then
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6234
  ret %union.gimple_statement_d* %14, !dbg !6234
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !6235 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6238, metadata !DIExpression()), !dbg !6239
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6240, metadata !DIExpression()), !dbg !6241
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6242
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !6243
  store i32 %call, i32* %code, align 4, !dbg !6244
  %1 = load i32, i32* %code, align 4, !dbg !6245
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !6247
  %cmp = icmp eq i32 %call1, 3, !dbg !6248
  br i1 %cmp, label %if.then, label %if.end, !dbg !6249

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6250
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !6250
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6250
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6250
  %bf.load = load i64, i64* %3, align 8, !dbg !6250
  %bf.clear = and i64 %bf.load, 65535, !dbg !6250
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6250
  store i32 %bf.cast, i32* %code, align 4, !dbg !6251
  br label %if.end, !dbg !6252

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !6253
  ret i32 %4, !dbg !6254
}

declare dso_local zeroext i8 @commutative_tree_code(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %name) #0 !dbg !6255 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %name.addr = alloca %union.tree_node**, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %lhs = alloca %union.tree_node*, align 8
  store %union.tree_node** %name, %union.tree_node*** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %name.addr, metadata !6258, metadata !DIExpression()), !dbg !6259
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6260, metadata !DIExpression()), !dbg !6261
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !6262, metadata !DIExpression()), !dbg !6263
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6264, metadata !DIExpression()), !dbg !6265
  br label %while.body, !dbg !6266

while.body:                                       ; preds = %entry, %if.end20
  %0 = load %union.tree_node**, %union.tree_node*** %name.addr, align 8, !dbg !6267
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6269
  %call = call %union.gimple_statement_d* @single_nonlooparound_use(%union.tree_node* %1), !dbg !6270
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !6271
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6272
  %tobool = icmp ne %union.gimple_statement_d* %2, null, !dbg !6272
  br i1 %tobool, label %if.end, label %if.then, !dbg !6274

if.then:                                          ; preds = %while.body
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6275
  br label %return, !dbg !6275

if.end:                                           ; preds = %while.body
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6276
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !6278
  %cmp = icmp ne i32 %call1, 6, !dbg !6279
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !6280

if.then2:                                         ; preds = %if.end
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6281
  br label %return, !dbg !6281

if.end3:                                          ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6282
  %call4 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %4), !dbg !6283
  store %union.tree_node* %call4, %union.tree_node** %lhs, align 8, !dbg !6284
  %5 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6285
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6285
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !6285
  %bf.load = load i64, i64* %6, align 8, !dbg !6285
  %bf.clear = and i64 %bf.load, 65535, !dbg !6285
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6285
  %cmp5 = icmp ne i32 %bf.cast, 141, !dbg !6287
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !6288

if.then6:                                         ; preds = %if.end3
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6289
  br label %return, !dbg !6289

if.end7:                                          ; preds = %if.end3
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6290
  %call8 = call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %7), !dbg !6292
  %tobool9 = icmp ne i8 %call8, 0, !dbg !6292
  br i1 %tobool9, label %if.then10, label %if.else, !dbg !6293

if.then10:                                        ; preds = %if.end7
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6294
  %call11 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %8), !dbg !6296
  store %union.tree_node* %call11, %union.tree_node** %rhs, align 8, !dbg !6297
  %9 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6298
  %10 = load %union.tree_node**, %union.tree_node*** %name.addr, align 8, !dbg !6300
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !6301
  %cmp12 = icmp ne %union.tree_node* %9, %11, !dbg !6302
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !6303

if.then13:                                        ; preds = %if.then10
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6304
  br label %return, !dbg !6304

if.end14:                                         ; preds = %if.then10
  %12 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6305
  %13 = load %union.tree_node**, %union.tree_node*** %name.addr, align 8, !dbg !6306
  store %union.tree_node* %12, %union.tree_node** %13, align 8, !dbg !6307
  br label %if.end20, !dbg !6308

if.else:                                          ; preds = %if.end7
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6309
  %call15 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %14), !dbg !6311
  %call16 = call i32 @get_gimple_rhs_class(i32 %call15), !dbg !6312
  %cmp17 = icmp eq i32 %call16, 1, !dbg !6313
  br i1 %cmp17, label %if.then18, label %if.else19, !dbg !6314

if.then18:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6315
  store %union.gimple_statement_d* %15, %union.gimple_statement_d** %retval, align 8, !dbg !6316
  br label %return, !dbg !6316

if.else19:                                        ; preds = %if.else
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6317
  br label %return, !dbg !6317

if.end20:                                         ; preds = %if.end14
  br label %while.body, !dbg !6266, !llvm.loop !6318

return:                                           ; preds = %if.else19, %if.then18, %if.then13, %if.then6, %if.then2, %if.then
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6320
  ret %union.gimple_statement_d* %16, !dbg !6320
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @find_associative_operation_root(%union.gimple_statement_d* %stmt, i32* %distance) #0 !dbg !6321 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %distance.addr = alloca i32*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %next = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %dist = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6324, metadata !DIExpression()), !dbg !6325
  store i32* %distance, i32** %distance.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %distance.addr, metadata !6326, metadata !DIExpression()), !dbg !6327
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6328, metadata !DIExpression()), !dbg !6329
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %next, metadata !6330, metadata !DIExpression()), !dbg !6331
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6332, metadata !DIExpression()), !dbg !6333
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6334
  %call = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %0), !dbg !6335
  store i32 %call, i32* %code, align 4, !dbg !6333
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6336, metadata !DIExpression()), !dbg !6337
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6338
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !6338
  %common = bitcast %union.tree_node* %call1 to %struct.tree_common*, !dbg !6338
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6338
  %2 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !6338
  store %union.tree_node* %2, %union.tree_node** %type, align 8, !dbg !6337
  call void @llvm.dbg.declare(metadata i32* %dist, metadata !6339, metadata !DIExpression()), !dbg !6340
  store i32 0, i32* %dist, align 4, !dbg !6340
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6341
  %4 = load i32, i32* %code, align 4, !dbg !6343
  %call3 = call zeroext i8 @may_reassociate_p(%union.tree_node* %3, i32 %4), !dbg !6344
  %tobool = icmp ne i8 %call3, 0, !dbg !6344
  br i1 %tobool, label %if.end, label %if.then, !dbg !6345

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6346
  br label %return, !dbg !6346

if.end:                                           ; preds = %entry
  br label %while.body, !dbg !6347

while.body:                                       ; preds = %if.end, %if.end10
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6348
  %call4 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %5), !dbg !6350
  store %union.tree_node* %call4, %union.tree_node** %lhs, align 8, !dbg !6351
  %6 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6352
  %base = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6352
  %7 = bitcast %struct.tree_base* %base to i64*, !dbg !6352
  %bf.load = load i64, i64* %7, align 8, !dbg !6352
  %bf.clear = and i64 %bf.load, 65535, !dbg !6352
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6352
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6352
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6352

cond.true:                                        ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 2045, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !6352
  br label %cond.end, !dbg !6352

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !6352

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6352
  %call5 = call %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %lhs), !dbg !6353
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %next, align 8, !dbg !6354
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !6355
  %tobool6 = icmp ne %union.gimple_statement_d* %8, null, !dbg !6355
  br i1 %tobool6, label %lor.lhs.false, label %if.then9, !dbg !6357

lor.lhs.false:                                    ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !6358
  %call7 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %9), !dbg !6359
  %10 = load i32, i32* %code, align 4, !dbg !6360
  %cmp8 = icmp ne i32 %call7, %10, !dbg !6361
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !6362

if.then9:                                         ; preds = %lor.lhs.false, %cond.end
  br label %while.end, !dbg !6363

if.end10:                                         ; preds = %lor.lhs.false
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !6364
  store %union.gimple_statement_d* %11, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6365
  %12 = load i32, i32* %dist, align 4, !dbg !6366
  %inc = add i32 %12, 1, !dbg !6366
  store i32 %inc, i32* %dist, align 4, !dbg !6366
  br label %while.body, !dbg !6347, !llvm.loop !6367

while.end:                                        ; preds = %if.then9
  %13 = load i32*, i32** %distance.addr, align 8, !dbg !6369
  %tobool11 = icmp ne i32* %13, null, !dbg !6369
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !6371

if.then12:                                        ; preds = %while.end
  %14 = load i32, i32* %dist, align 4, !dbg !6372
  %15 = load i32*, i32** %distance.addr, align 8, !dbg !6373
  store i32 %14, i32* %15, align 4, !dbg !6374
  br label %if.end13, !dbg !6375

if.end13:                                         ; preds = %if.then12, %while.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6376
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %retval, align 8, !dbg !6377
  br label %return, !dbg !6377

return:                                           ; preds = %if.end13, %if.then
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6378
  ret %union.gimple_statement_d* %17, !dbg !6378
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @single_nonlooparound_use(%union.tree_node* %name) #0 !dbg !6379 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %use = alloca %struct.ssa_use_operand_d*, align 8
  %it = alloca %struct.immediate_use_iterator_d, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %ret = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6382, metadata !DIExpression()), !dbg !6383
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use, metadata !6384, metadata !DIExpression()), !dbg !6385
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %it, metadata !6386, metadata !DIExpression()), !dbg !6394
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6395, metadata !DIExpression()), !dbg !6396
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ret, metadata !6397, metadata !DIExpression()), !dbg !6398
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %ret, align 8, !dbg !6398
  %0 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6399
  %call = call %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %it, %union.tree_node* %0), !dbg !6399
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %use, align 8, !dbg !6399
  br label %for.cond, !dbg !6399

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %it), !dbg !6401
  %tobool = icmp ne i8 %call1, 0, !dbg !6401
  %lnot = xor i1 %tobool, true, !dbg !6401
  br i1 %lnot, label %for.body, label %for.end, !dbg !6399

for.body:                                         ; preds = %for.cond
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !6403
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !6403
  %stmt2 = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6403
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6403
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %stmt, align 8, !dbg !6405
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6406
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !6408
  %cmp = icmp eq i32 %call3, 16, !dbg !6409
  br i1 %cmp, label %if.then, label %if.else, !dbg !6410

if.then:                                          ; preds = %for.body
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @looparound_phis, align 8, !dbg !6411
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6414
  %call4 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %5), !dbg !6414
  %call5 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call4), !dbg !6414
  %ssa_name = bitcast %union.tree_node* %call5 to %struct.tree_ssa_name*, !dbg !6414
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !6414
  %6 = load i32, i32* %version, align 8, !dbg !6414
  %call6 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %4, i32 %6), !dbg !6415
  %tobool7 = icmp ne i32 %call6, 0, !dbg !6415
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !6416

if.then8:                                         ; preds = %if.then
  br label %for.inc, !dbg !6417

if.end:                                           ; preds = %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6418
  br label %return, !dbg !6418

if.else:                                          ; preds = %for.body
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !6419
  %cmp9 = icmp ne %union.gimple_statement_d* %7, null, !dbg !6421
  br i1 %cmp9, label %if.then10, label %if.else11, !dbg !6422

if.then10:                                        ; preds = %if.else
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6423
  br label %return, !dbg !6423

if.else11:                                        ; preds = %if.else
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6424
  store %union.gimple_statement_d* %8, %union.gimple_statement_d** %ret, align 8, !dbg !6425
  br label %if.end12

if.end12:                                         ; preds = %if.else11
  br label %if.end13

if.end13:                                         ; preds = %if.end12
  br label %for.inc, !dbg !6426

for.inc:                                          ; preds = %if.end13, %if.then8
  %call14 = call %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %it), !dbg !6401
  store %struct.ssa_use_operand_d* %call14, %struct.ssa_use_operand_d** %use, align 8, !dbg !6401
  br label %for.cond, !dbg !6401, !llvm.loop !6427

for.end:                                          ; preds = %for.cond
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ret, align 8, !dbg !6429
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %retval, align 8, !dbg !6430
  br label %return, !dbg !6430

return:                                           ; preds = %for.end, %if.then10, %if.end
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6431
  ret %union.gimple_statement_d* %10, !dbg !6431
}

declare dso_local zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !6432 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6435, metadata !DIExpression()), !dbg !6436
  %0 = load i32, i32* %code.addr, align 4, !dbg !6437
  %idxprom = sext i32 %0 to i64, !dbg !6438
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6438
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6438
  %conv = zext i8 %1 to i32, !dbg !6439
  ret i32 %conv, !dbg !6440
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_readonly_imm_use(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !6441 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6445, metadata !DIExpression()), !dbg !6446
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6447, metadata !DIExpression()), !dbg !6448
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6449
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6449
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6449
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6450
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !6451
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6452
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6453
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6454
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !6454
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !6455
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6455
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6456
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !6457
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6458
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6459
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %6), !dbg !6461
  %tobool = icmp ne i8 %call, 0, !dbg !6461
  br i1 %tobool, label %if.then, label %if.end, !dbg !6462

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6463
  br label %return, !dbg !6463

if.end:                                           ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6464
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !6465
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !6465
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6466
  br label %return, !dbg !6466

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6467
  ret %struct.ssa_use_operand_d* %9, !dbg !6467
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6468 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6473, metadata !DIExpression()), !dbg !6474
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6475
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6476
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6476
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6477
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6478
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6478
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6479
  %conv = zext i1 %cmp to i32, !dbg !6479
  %conv1 = trunc i32 %conv to i8, !dbg !6480
  ret i8 %conv1, !dbg !6481
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_readonly_imm_use(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6482 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %old = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6485, metadata !DIExpression()), !dbg !6486
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %old, metadata !6487, metadata !DIExpression()), !dbg !6488
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6489
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6490
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6490
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %old, align 8, !dbg !6488
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %old, align 8, !dbg !6491
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6492
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6492
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6493
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !6494
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !6495
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6496
  %call = call zeroext i8 @end_readonly_imm_use_p(%struct.immediate_use_iterator_d* %5), !dbg !6498
  %tobool = icmp ne i8 %call, 0, !dbg !6498
  br i1 %tobool, label %if.then, label %if.end, !dbg !6499

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6500
  br label %return, !dbg !6500

if.end:                                           ; preds = %entry
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6501
  %imm_use2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 0, !dbg !6502
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use2, align 8, !dbg !6502
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6503
  br label %return, !dbg !6503

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6504
  ret %struct.ssa_use_operand_d* %8, !dbg !6504
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @may_reassociate_p(%union.tree_node* %type, i32 %code) #0 !dbg !6505 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6508, metadata !DIExpression()), !dbg !6509
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6510, metadata !DIExpression()), !dbg !6511
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6512
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6512
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6512
  %bf.load = load i64, i64* %1, align 8, !dbg !6512
  %bf.clear = and i64 %bf.load, 65535, !dbg !6512
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6512
  %cmp = icmp eq i32 %bf.cast, 9, !dbg !6512
  br i1 %cmp, label %land.lhs.true18, label %lor.lhs.false, !dbg !6512

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6512
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6512
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !6512
  %bf.load2 = load i64, i64* %3, align 8, !dbg !6512
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !6512
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !6512
  %cmp5 = icmp eq i32 %bf.cast4, 13, !dbg !6512
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false6, !dbg !6512

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6512
  %base7 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !6512
  %5 = bitcast %struct.tree_base* %base7 to i64*, !dbg !6512
  %bf.load8 = load i64, i64* %5, align 8, !dbg !6512
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !6512
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !6512
  %cmp11 = icmp eq i32 %bf.cast10, 14, !dbg !6512
  br i1 %cmp11, label %land.lhs.true, label %if.end, !dbg !6512

land.lhs.true:                                    ; preds = %lor.lhs.false6, %lor.lhs.false
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6512
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !6512
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6512
  %7 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !6512
  %base13 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6512
  %8 = bitcast %struct.tree_base* %base13 to i64*, !dbg !6512
  %bf.load14 = load i64, i64* %8, align 8, !dbg !6512
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !6512
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !6512
  %cmp17 = icmp eq i32 %bf.cast16, 9, !dbg !6512
  br i1 %cmp17, label %land.lhs.true18, label %if.end, !dbg !6514

land.lhs.true18:                                  ; preds = %land.lhs.true, %entry
  %9 = load i32, i32* @flag_unsafe_math_optimizations, align 4, !dbg !6515
  %tobool = icmp ne i32 %9, 0, !dbg !6515
  br i1 %tobool, label %if.end, label %if.then, !dbg !6516

if.then:                                          ; preds = %land.lhs.true18
  store i8 0, i8* %retval, align 1, !dbg !6517
  br label %return, !dbg !6517

if.end:                                           ; preds = %land.lhs.true18, %land.lhs.true, %lor.lhs.false6
  %10 = load i32, i32* %code.addr, align 4, !dbg !6518
  %call = call zeroext i8 @commutative_tree_code(i32 %10), !dbg !6519
  %conv = zext i8 %call to i32, !dbg !6519
  %tobool19 = icmp ne i32 %conv, 0, !dbg !6519
  br i1 %tobool19, label %land.rhs, label %land.end, !dbg !6520

land.rhs:                                         ; preds = %if.end
  %11 = load i32, i32* %code.addr, align 4, !dbg !6521
  %call20 = call zeroext i8 @associative_tree_code(i32 %11), !dbg !6522
  %conv21 = zext i8 %call20 to i32, !dbg !6522
  %tobool22 = icmp ne i32 %conv21, 0, !dbg !6520
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %12 = phi i1 [ false, %if.end ], [ %tobool22, %land.rhs ], !dbg !6523
  %land.ext = zext i1 %12 to i32, !dbg !6520
  %conv23 = trunc i32 %land.ext to i8, !dbg !6524
  store i8 %conv23, i8* %retval, align 1, !dbg !6525
  br label %return, !dbg !6525

return:                                           ; preds = %land.end, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !6526
  ret i8 %13, !dbg !6526
}

declare dso_local zeroext i8 @associative_tree_code(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !6527 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6528, metadata !DIExpression()), !dbg !6529
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6530, metadata !DIExpression()), !dbg !6531
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6532
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6533
  store i32 %call, i32* %code, align 4, !dbg !6531
  %1 = load i32, i32* %code, align 4, !dbg !6534
  %cmp = icmp eq i32 %1, 6, !dbg !6536
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6537

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !6538
  %cmp1 = icmp eq i32 %2, 1, !dbg !6539
  br i1 %cmp1, label %if.then, label %if.else, !dbg !6540

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6541
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !6542
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6543
  %bf.load = load i32, i32* %4, align 8, !dbg !6543
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6543
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !6544
  br label %return, !dbg !6544

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !6545
  %cmp2 = icmp eq i32 %5, 8, !dbg !6547
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !6548

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !6549
  br label %return, !dbg !6549

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.34, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !6550
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6551
  br label %return, !dbg !6551

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6552
  ret i32 %6, !dbg !6552
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @reassociate_to_the_same_stmt(%union.tree_node* %name1, %union.tree_node* %name2) #0 !dbg !6553 {
entry:
  %name1.addr = alloca %union.tree_node*, align 8
  %name2.addr = alloca %union.tree_node*, align 8
  %stmt1 = alloca %union.gimple_statement_d*, align 8
  %stmt2 = alloca %union.gimple_statement_d*, align 8
  %root1 = alloca %union.gimple_statement_d*, align 8
  %root2 = alloca %union.gimple_statement_d*, align 8
  %s1 = alloca %union.gimple_statement_d*, align 8
  %s2 = alloca %union.gimple_statement_d*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %tmp_stmt = alloca %union.gimple_statement_d*, align 8
  %new_name = alloca %union.tree_node*, align 8
  %tmp_name = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %r1 = alloca %union.tree_node*, align 8
  %r2 = alloca %union.tree_node*, align 8
  %dist1 = alloca i32, align 4
  %dist2 = alloca i32, align 4
  %code = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.tree_node* %name1, %union.tree_node** %name1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name1.addr, metadata !6556, metadata !DIExpression()), !dbg !6557
  store %union.tree_node* %name2, %union.tree_node** %name2.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name2.addr, metadata !6558, metadata !DIExpression()), !dbg !6559
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1, metadata !6560, metadata !DIExpression()), !dbg !6561
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2, metadata !6562, metadata !DIExpression()), !dbg !6563
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %root1, metadata !6564, metadata !DIExpression()), !dbg !6565
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %root2, metadata !6566, metadata !DIExpression()), !dbg !6567
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s1, metadata !6568, metadata !DIExpression()), !dbg !6569
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s2, metadata !6570, metadata !DIExpression()), !dbg !6571
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !6572, metadata !DIExpression()), !dbg !6573
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %tmp_stmt, metadata !6574, metadata !DIExpression()), !dbg !6575
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_name, metadata !6576, metadata !DIExpression()), !dbg !6577
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp_name, metadata !6578, metadata !DIExpression()), !dbg !6579
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6580, metadata !DIExpression()), !dbg !6581
  call void @llvm.dbg.declare(metadata %union.tree_node** %r1, metadata !6582, metadata !DIExpression()), !dbg !6583
  call void @llvm.dbg.declare(metadata %union.tree_node** %r2, metadata !6584, metadata !DIExpression()), !dbg !6585
  call void @llvm.dbg.declare(metadata i32* %dist1, metadata !6586, metadata !DIExpression()), !dbg !6587
  call void @llvm.dbg.declare(metadata i32* %dist2, metadata !6588, metadata !DIExpression()), !dbg !6589
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6590, metadata !DIExpression()), !dbg !6591
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6592, metadata !DIExpression()), !dbg !6593
  %0 = load %union.tree_node*, %union.tree_node** %name1.addr, align 8, !dbg !6594
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !6594
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6594
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6594
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !6593
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !6595, metadata !DIExpression()), !dbg !6596
  %call = call %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %name1.addr), !dbg !6597
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt1, align 8, !dbg !6598
  %call2 = call %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %name2.addr), !dbg !6599
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %stmt2, align 8, !dbg !6600
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6601
  %call3 = call %union.gimple_statement_d* @find_associative_operation_root(%union.gimple_statement_d* %2, i32* %dist1), !dbg !6602
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %root1, align 8, !dbg !6603
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6604
  %call4 = call %union.gimple_statement_d* @find_associative_operation_root(%union.gimple_statement_d* %3, i32* %dist2), !dbg !6605
  store %union.gimple_statement_d* %call4, %union.gimple_statement_d** %root2, align 8, !dbg !6606
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6607
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %4), !dbg !6608
  store i32 %call5, i32* %code, align 4, !dbg !6609
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %root1, align 8, !dbg !6610
  %tobool = icmp ne %union.gimple_statement_d* %5, null, !dbg !6610
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6610

land.lhs.true:                                    ; preds = %entry
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %root2, align 8, !dbg !6610
  %tobool6 = icmp ne %union.gimple_statement_d* %6, null, !dbg !6610
  br i1 %tobool6, label %land.lhs.true7, label %cond.true, !dbg !6610

land.lhs.true7:                                   ; preds = %land.lhs.true
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %root1, align 8, !dbg !6610
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %root2, align 8, !dbg !6610
  %cmp = icmp eq %union.gimple_statement_d* %7, %8, !dbg !6610
  br i1 %cmp, label %land.lhs.true8, label %cond.true, !dbg !6610

land.lhs.true8:                                   ; preds = %land.lhs.true7
  %9 = load i32, i32* %code, align 4, !dbg !6610
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6610
  %call9 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %10), !dbg !6610
  %cmp10 = icmp eq i32 %9, %call9, !dbg !6610
  br i1 %cmp10, label %cond.false, label %cond.true, !dbg !6610

cond.true:                                        ; preds = %land.lhs.true8, %land.lhs.true7, %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 2180, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !6610
  br label %cond.end, !dbg !6610

cond.false:                                       ; preds = %land.lhs.true8
  br label %cond.end, !dbg !6610

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6610
  %11 = load %union.tree_node*, %union.tree_node** %name1.addr, align 8, !dbg !6611
  store %union.tree_node* %11, %union.tree_node** %r1, align 8, !dbg !6612
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6613
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %s1, align 8, !dbg !6614
  %13 = load %union.tree_node*, %union.tree_node** %name2.addr, align 8, !dbg !6615
  store %union.tree_node* %13, %union.tree_node** %r2, align 8, !dbg !6616
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6617
  store %union.gimple_statement_d* %14, %union.gimple_statement_d** %s2, align 8, !dbg !6618
  br label %while.cond, !dbg !6619

while.cond:                                       ; preds = %while.body, %cond.end
  %15 = load i32, i32* %dist1, align 4, !dbg !6620
  %16 = load i32, i32* %dist2, align 4, !dbg !6621
  %cmp11 = icmp ugt i32 %15, %16, !dbg !6622
  br i1 %cmp11, label %while.body, label %while.end, !dbg !6619

while.body:                                       ; preds = %while.cond
  %call12 = call %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %r1), !dbg !6623
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %s1, align 8, !dbg !6625
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1, align 8, !dbg !6626
  %call13 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %17), !dbg !6627
  store %union.tree_node* %call13, %union.tree_node** %r1, align 8, !dbg !6628
  %18 = load i32, i32* %dist1, align 4, !dbg !6629
  %dec = add i32 %18, -1, !dbg !6629
  store i32 %dec, i32* %dist1, align 4, !dbg !6629
  br label %while.cond, !dbg !6619, !llvm.loop !6630

while.end:                                        ; preds = %while.cond
  br label %while.cond14, !dbg !6632

while.cond14:                                     ; preds = %while.body16, %while.end
  %19 = load i32, i32* %dist2, align 4, !dbg !6633
  %20 = load i32, i32* %dist1, align 4, !dbg !6634
  %cmp15 = icmp ugt i32 %19, %20, !dbg !6635
  br i1 %cmp15, label %while.body16, label %while.end20, !dbg !6632

while.body16:                                     ; preds = %while.cond14
  %call17 = call %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %r2), !dbg !6636
  store %union.gimple_statement_d* %call17, %union.gimple_statement_d** %s2, align 8, !dbg !6638
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s2, align 8, !dbg !6639
  %call18 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %21), !dbg !6640
  store %union.tree_node* %call18, %union.tree_node** %r2, align 8, !dbg !6641
  %22 = load i32, i32* %dist2, align 4, !dbg !6642
  %dec19 = add i32 %22, -1, !dbg !6642
  store i32 %dec19, i32* %dist2, align 4, !dbg !6642
  br label %while.cond14, !dbg !6632, !llvm.loop !6643

while.end20:                                      ; preds = %while.cond14
  br label %while.cond21, !dbg !6645

while.cond21:                                     ; preds = %while.body23, %while.end20
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1, align 8, !dbg !6646
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s2, align 8, !dbg !6647
  %cmp22 = icmp ne %union.gimple_statement_d* %23, %24, !dbg !6648
  br i1 %cmp22, label %while.body23, label %while.end28, !dbg !6645

while.body23:                                     ; preds = %while.cond21
  %call24 = call %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %r1), !dbg !6649
  store %union.gimple_statement_d* %call24, %union.gimple_statement_d** %s1, align 8, !dbg !6651
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1, align 8, !dbg !6652
  %call25 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %25), !dbg !6653
  store %union.tree_node* %call25, %union.tree_node** %r1, align 8, !dbg !6654
  %call26 = call %union.gimple_statement_d* @find_use_stmt(%union.tree_node** %r2), !dbg !6655
  store %union.gimple_statement_d* %call26, %union.gimple_statement_d** %s2, align 8, !dbg !6656
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s2, align 8, !dbg !6657
  %call27 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %26), !dbg !6658
  store %union.tree_node* %call27, %union.tree_node** %r2, align 8, !dbg !6659
  br label %while.cond21, !dbg !6645, !llvm.loop !6660

while.end28:                                      ; preds = %while.cond21
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6662
  %28 = load %union.tree_node*, %union.tree_node** %name1.addr, align 8, !dbg !6663
  call void @remove_name_from_operation(%union.gimple_statement_d* %27, %union.tree_node* %28), !dbg !6664
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !6665
  %30 = load %union.tree_node*, %union.tree_node** %name2.addr, align 8, !dbg !6666
  call void @remove_name_from_operation(%union.gimple_statement_d* %29, %union.tree_node* %30), !dbg !6667
  %31 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6668
  %call29 = call %union.tree_node* @create_tmp_var(%union.tree_node* %31, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35, i64 0, i64 0)), !dbg !6669
  store %union.tree_node* %call29, %union.tree_node** %var, align 8, !dbg !6670
  %32 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6671
  %base = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !6671
  %33 = bitcast %struct.tree_base* %base to i64*, !dbg !6671
  %bf.load = load i64, i64* %33, align 8, !dbg !6671
  %bf.clear = and i64 %bf.load, 65535, !dbg !6671
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6671
  %cmp30 = icmp eq i32 %bf.cast, 13, !dbg !6673
  br i1 %cmp30, label %if.then, label %lor.lhs.false, !dbg !6674

lor.lhs.false:                                    ; preds = %while.end28
  %34 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6675
  %base31 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !6675
  %35 = bitcast %struct.tree_base* %base31 to i64*, !dbg !6675
  %bf.load32 = load i64, i64* %35, align 8, !dbg !6675
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !6675
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !6675
  %cmp35 = icmp eq i32 %bf.cast34, 14, !dbg !6676
  br i1 %cmp35, label %if.then, label %if.end, !dbg !6677

if.then:                                          ; preds = %lor.lhs.false, %while.end28
  %36 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6678
  %decl_common = bitcast %union.tree_node* %36 to %struct.tree_decl_common*, !dbg !6678
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6678
  %37 = bitcast i40* %gimple_reg_flag to i64*, !dbg !6678
  %bf.load36 = load i64, i64* %37, align 8, !dbg !6679
  %bf.clear37 = and i64 %bf.load36, -134217729, !dbg !6679
  %bf.set = or i64 %bf.clear37, 134217728, !dbg !6679
  store i64 %bf.set, i64* %37, align 8, !dbg !6679
  br label %if.end, !dbg !6678

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %38 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6680
  %call38 = call zeroext i8 @add_referenced_var(%union.tree_node* %38), !dbg !6681
  %39 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6682
  %call39 = call %union.tree_node* @make_ssa_name(%union.tree_node* %39, %union.gimple_statement_d* null), !dbg !6683
  store %union.tree_node* %call39, %union.tree_node** %new_name, align 8, !dbg !6684
  %40 = load i32, i32* %code, align 4, !dbg !6685
  %41 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !6685
  %42 = load %union.tree_node*, %union.tree_node** %name1.addr, align 8, !dbg !6685
  %43 = load %union.tree_node*, %union.tree_node** %name2.addr, align 8, !dbg !6685
  %call40 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %40, %union.tree_node* %41, %union.tree_node* %42, %union.tree_node* %43), !dbg !6685
  store %union.gimple_statement_d* %call40, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6686
  %44 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6687
  %call41 = call %union.tree_node* @create_tmp_var(%union.tree_node* %44, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35, i64 0, i64 0)), !dbg !6688
  store %union.tree_node* %call41, %union.tree_node** %var, align 8, !dbg !6689
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6690
  %base42 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !6690
  %46 = bitcast %struct.tree_base* %base42 to i64*, !dbg !6690
  %bf.load43 = load i64, i64* %46, align 8, !dbg !6690
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !6690
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !6690
  %cmp46 = icmp eq i32 %bf.cast45, 13, !dbg !6692
  br i1 %cmp46, label %if.then53, label %lor.lhs.false47, !dbg !6693

lor.lhs.false47:                                  ; preds = %if.end
  %47 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6694
  %base48 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !6694
  %48 = bitcast %struct.tree_base* %base48 to i64*, !dbg !6694
  %bf.load49 = load i64, i64* %48, align 8, !dbg !6694
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !6694
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !6694
  %cmp52 = icmp eq i32 %bf.cast51, 14, !dbg !6695
  br i1 %cmp52, label %if.then53, label %if.end59, !dbg !6696

if.then53:                                        ; preds = %lor.lhs.false47, %if.end
  %49 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6697
  %decl_common54 = bitcast %union.tree_node* %49 to %struct.tree_decl_common*, !dbg !6697
  %gimple_reg_flag55 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common54, i32 0, i32 2, !dbg !6697
  %50 = bitcast i40* %gimple_reg_flag55 to i64*, !dbg !6697
  %bf.load56 = load i64, i64* %50, align 8, !dbg !6698
  %bf.clear57 = and i64 %bf.load56, -134217729, !dbg !6698
  %bf.set58 = or i64 %bf.clear57, 134217728, !dbg !6698
  store i64 %bf.set58, i64* %50, align 8, !dbg !6698
  br label %if.end59, !dbg !6697

if.end59:                                         ; preds = %if.then53, %lor.lhs.false47
  %51 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6699
  %call60 = call zeroext i8 @add_referenced_var(%union.tree_node* %51), !dbg !6700
  %52 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6701
  %call61 = call %union.tree_node* @make_ssa_name(%union.tree_node* %52, %union.gimple_statement_d* null), !dbg !6702
  store %union.tree_node* %call61, %union.tree_node** %tmp_name, align 8, !dbg !6703
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1, align 8, !dbg !6704
  %call62 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %53), !dbg !6704
  %54 = load %union.tree_node*, %union.tree_node** %tmp_name, align 8, !dbg !6704
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1, align 8, !dbg !6704
  %call63 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %55), !dbg !6704
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1, align 8, !dbg !6704
  %call64 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %56), !dbg !6704
  %call65 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %call62, %union.tree_node* %54, %union.tree_node* %call63, %union.tree_node* %call64), !dbg !6704
  store %union.gimple_statement_d* %call65, %union.gimple_statement_d** %tmp_stmt, align 8, !dbg !6705
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1, align 8, !dbg !6706
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %57), !dbg !6707
  %58 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !6707
  %59 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6707
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 24, i1 false), !dbg !6707
  %60 = load i32, i32* %code, align 4, !dbg !6708
  %61 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !6709
  %62 = load %union.tree_node*, %union.tree_node** %tmp_name, align 8, !dbg !6710
  call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %bsi, i32 %60, %union.tree_node* %61, %union.tree_node* %62), !dbg !6711
  %call66 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !6712
  store %union.gimple_statement_d* %call66, %union.gimple_statement_d** %s1, align 8, !dbg !6713
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s1, align 8, !dbg !6714
  call void @update_stmt(%union.gimple_statement_d* %63), !dbg !6715
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6716
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %64, i32 1), !dbg !6717
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %tmp_stmt, align 8, !dbg !6718
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %65, i32 1), !dbg !6719
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6720
  ret %union.gimple_statement_d* %66, !dbg !6721
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_name_from_operation(%union.gimple_statement_d* %stmt, %union.tree_node* %op) #0 !dbg !6722 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op.addr = alloca %union.tree_node*, align 8
  %other_op = alloca %union.tree_node*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6725, metadata !DIExpression()), !dbg !6726
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6727, metadata !DIExpression()), !dbg !6728
  call void @llvm.dbg.declare(metadata %union.tree_node** %other_op, metadata !6729, metadata !DIExpression()), !dbg !6730
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !6731, metadata !DIExpression()), !dbg !6732
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6733
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !6733
  %tobool = icmp ne i8 %call, 0, !dbg !6733
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6733

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 2143, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !6733
  br label %cond.end, !dbg !6733

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6733

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6733
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6734
  %call1 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %1), !dbg !6736
  %2 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6737
  %cmp = icmp eq %union.tree_node* %call1, %2, !dbg !6738
  br i1 %cmp, label %if.then, label %if.else, !dbg !6739

if.then:                                          ; preds = %cond.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6740
  %call2 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %3), !dbg !6741
  store %union.tree_node* %call2, %union.tree_node** %other_op, align 8, !dbg !6742
  br label %if.end, !dbg !6743

if.else:                                          ; preds = %cond.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6744
  %call3 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4), !dbg !6745
  store %union.tree_node* %call3, %union.tree_node** %other_op, align 8, !dbg !6746
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6747
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %5), !dbg !6748
  %6 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !6748
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6748
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !6748
  %8 = load %union.tree_node*, %union.tree_node** %other_op, align 8, !dbg !6749
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %si, %union.tree_node* %8), !dbg !6750
  %call4 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !6751
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6751
  %cmp5 = icmp eq %union.gimple_statement_d* %call4, %9, !dbg !6751
  br i1 %cmp5, label %cond.false7, label %cond.true6, !dbg !6751

cond.true6:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 2154, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !6751
  br label %cond.end8, !dbg !6751

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !6751

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !6751
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6752
  call void @update_stmt(%union.gimple_statement_d* %10), !dbg !6753
  ret void, !dbg !6754
}

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !6755 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6758, metadata !DIExpression()), !dbg !6759
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6760, metadata !DIExpression()), !dbg !6761
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6762
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6762
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6763
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6764
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !6765
  ret %union.tree_node* %call, !dbg !6766
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !6767 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6768, metadata !DIExpression()), !dbg !6769
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6770
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !6772
  %cmp = icmp uge i32 %call, 3, !dbg !6773
  br i1 %cmp, label %if.then, label %if.else, !dbg !6774

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6775
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !6776
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !6777
  br label %return, !dbg !6777

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6778
  br label %return, !dbg !6778

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6779
  ret %union.tree_node* %2, !dbg !6779
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

declare dso_local void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator*, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

declare dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6780 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6783, metadata !DIExpression()), !dbg !6784
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6785
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6786
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6787
  %1 = load i32, i32* %num_ops, align 4, !dbg !6787
  ret i32 %1, !dbg !6788
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gcd(i32 %a, i32 %b) #0 !dbg !6789 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %z = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !6792, metadata !DIExpression()), !dbg !6793
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !6794, metadata !DIExpression()), !dbg !6795
  call void @llvm.dbg.declare(metadata i32* %x, metadata !6796, metadata !DIExpression()), !dbg !6797
  call void @llvm.dbg.declare(metadata i32* %y, metadata !6798, metadata !DIExpression()), !dbg !6799
  call void @llvm.dbg.declare(metadata i32* %z, metadata !6800, metadata !DIExpression()), !dbg !6801
  %0 = load i32, i32* %a.addr, align 4, !dbg !6802
  %call = call i32 @abs(i32 %0) #5, !dbg !6803
  store i32 %call, i32* %x, align 4, !dbg !6804
  %1 = load i32, i32* %b.addr, align 4, !dbg !6805
  %call1 = call i32 @abs(i32 %1) #5, !dbg !6806
  store i32 %call1, i32* %y, align 4, !dbg !6807
  br label %while.cond, !dbg !6808

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32, i32* %x, align 4, !dbg !6809
  %cmp = icmp sgt i32 %2, 0, !dbg !6810
  br i1 %cmp, label %while.body, label %while.end, !dbg !6808

while.body:                                       ; preds = %while.cond
  %3 = load i32, i32* %y, align 4, !dbg !6811
  %4 = load i32, i32* %x, align 4, !dbg !6813
  %rem = srem i32 %3, %4, !dbg !6814
  store i32 %rem, i32* %z, align 4, !dbg !6815
  %5 = load i32, i32* %x, align 4, !dbg !6816
  store i32 %5, i32* %y, align 4, !dbg !6817
  %6 = load i32, i32* %z, align 4, !dbg !6818
  store i32 %6, i32* %x, align 4, !dbg !6819
  br label %while.cond, !dbg !6808, !llvm.loop !6820

while.end:                                        ; preds = %while.cond
  %7 = load i32, i32* %y, align 4, !dbg !6822
  ret i32 %7, !dbg !6823
}

; Function Attrs: nounwind readnone
declare dso_local i32 @abs(i32) #4

; Function Attrs: noinline nounwind uwtable
define internal void @replace_names_by_phis(%struct.VEC_chain_p_heap* %chains) #0 !dbg !6824 {
entry:
  %chains.addr = alloca %struct.VEC_chain_p_heap*, align 8
  %chain = alloca %struct.chain*, align 8
  %a = alloca %struct.dref_d*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.VEC_chain_p_heap* %chains, %struct.VEC_chain_p_heap** %chains.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap** %chains.addr, metadata !6825, metadata !DIExpression()), !dbg !6826
  call void @llvm.dbg.declare(metadata %struct.chain** %chain, metadata !6827, metadata !DIExpression()), !dbg !6828
  call void @llvm.dbg.declare(metadata %struct.dref_d** %a, metadata !6829, metadata !DIExpression()), !dbg !6830
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6831, metadata !DIExpression()), !dbg !6832
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6833, metadata !DIExpression()), !dbg !6834
  store i32 0, i32* %i, align 4, !dbg !6835
  br label %for.cond, !dbg !6837

for.cond:                                         ; preds = %for.inc22, %entry
  %0 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !6838
  %tobool = icmp ne %struct.VEC_chain_p_heap* %0, null, !dbg !6838
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6838

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %chains.addr, align 8, !dbg !6838
  %base = getelementptr inbounds %struct.VEC_chain_p_heap, %struct.VEC_chain_p_heap* %1, i32 0, i32 0, !dbg !6838
  br label %cond.end, !dbg !6838

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6838

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_chain_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6838
  %2 = load i32, i32* %i, align 4, !dbg !6838
  %call = call i32 @VEC_chain_p_base_iterate(%struct.VEC_chain_p_base* %cond, i32 %2, %struct.chain** %chain), !dbg !6838
  %tobool1 = icmp ne i32 %call, 0, !dbg !6840
  br i1 %tobool1, label %for.body, label %for.end24, !dbg !6840

for.body:                                         ; preds = %cond.end
  store i32 0, i32* %j, align 4, !dbg !6841
  br label %for.cond2, !dbg !6843

for.cond2:                                        ; preds = %for.inc, %for.body
  %3 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !6844
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %3, i32 0, i32 5, !dbg !6844
  %4 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !6844
  %tobool3 = icmp ne %struct.VEC_dref_heap* %4, null, !dbg !6844
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !6844

cond.true4:                                       ; preds = %for.cond2
  %5 = load %struct.chain*, %struct.chain** %chain, align 8, !dbg !6844
  %refs5 = getelementptr inbounds %struct.chain, %struct.chain* %5, i32 0, i32 5, !dbg !6844
  %6 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs5, align 8, !dbg !6844
  %base6 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %6, i32 0, i32 0, !dbg !6844
  br label %cond.end8, !dbg !6844

cond.false7:                                      ; preds = %for.cond2
  br label %cond.end8, !dbg !6844

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_dref_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !6844
  %7 = load i32, i32* %j, align 4, !dbg !6844
  %call10 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond9, i32 %7, %struct.dref_d** %a), !dbg !6844
  %tobool11 = icmp ne i32 %call10, 0, !dbg !6846
  br i1 %tobool11, label %for.body12, label %for.end, !dbg !6846

for.body12:                                       ; preds = %cond.end8
  %8 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !6847
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %8, i32 0, i32 1, !dbg !6849
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6849
  %cmp = icmp eq %union.gimple_statement_d* %9, null, !dbg !6850
  br i1 %cmp, label %if.then, label %if.end, !dbg !6851

if.then:                                          ; preds = %for.body12
  %10 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !6852
  %name_defined_by_phi = getelementptr inbounds %struct.dref_d, %struct.dref_d* %10, i32 0, i32 2, !dbg !6852
  %11 = load %union.tree_node*, %union.tree_node** %name_defined_by_phi, align 8, !dbg !6852
  %ssa_name = bitcast %union.tree_node* %11 to %struct.tree_ssa_name*, !dbg !6852
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6852
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6852
  %13 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !6854
  %stmt13 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %13, i32 0, i32 1, !dbg !6855
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %stmt13, align 8, !dbg !6856
  %14 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !6857
  %stmt14 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %14, i32 0, i32 1, !dbg !6857
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt14, align 8, !dbg !6857
  %call15 = call i32 @gimple_code(%union.gimple_statement_d* %15), !dbg !6857
  %cmp16 = icmp eq i32 %call15, 16, !dbg !6857
  br i1 %cmp16, label %cond.false18, label %cond.true17, !dbg !6857

cond.true17:                                      ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1863, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !6857
  br label %cond.end19, !dbg !6857

cond.false18:                                     ; preds = %if.then
  br label %cond.end19, !dbg !6857

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i32 [ 0, %cond.true17 ], [ 0, %cond.false18 ], !dbg !6857
  %16 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !6858
  %name_defined_by_phi21 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %16, i32 0, i32 2, !dbg !6859
  store %union.tree_node* null, %union.tree_node** %name_defined_by_phi21, align 8, !dbg !6860
  br label %if.end, !dbg !6861

if.end:                                           ; preds = %cond.end19, %for.body12
  br label %for.inc, !dbg !6862

for.inc:                                          ; preds = %if.end
  %17 = load i32, i32* %j, align 4, !dbg !6863
  %inc = add i32 %17, 1, !dbg !6863
  store i32 %inc, i32* %j, align 4, !dbg !6863
  br label %for.cond2, !dbg !6864, !llvm.loop !6865

for.end:                                          ; preds = %cond.end8
  br label %for.inc22, !dbg !6866

for.inc22:                                        ; preds = %for.end
  %18 = load i32, i32* %i, align 4, !dbg !6867
  %inc23 = add i32 %18, 1, !dbg !6867
  store i32 %inc23, i32* %i, align 4, !dbg !6867
  br label %for.cond, !dbg !6868, !llvm.loop !6869

for.end24:                                        ; preds = %cond.end
  ret void, !dbg !6871
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !6872 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6878, metadata !DIExpression()), !dbg !6879
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6880
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !6880
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6880
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6880
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6880

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6880
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !6880
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !6880
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6880
  br label %cond.end, !dbg !6880

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6880

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6880
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6880
  %cmp = icmp eq i32 %call, 1, !dbg !6881
  %conv = zext i1 %cmp to i32, !dbg !6881
  %conv2 = trunc i32 %conv to i8, !dbg !6880
  ret i8 %conv2, !dbg !6882
}

; Function Attrs: noinline nounwind uwtable
define internal void @base_names_in_chain_on(%struct.loop* %loop, %union.tree_node* %name, %union.tree_node* %var) #0 !dbg !6883 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6886, metadata !DIExpression()), !dbg !6887
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6888, metadata !DIExpression()), !dbg !6889
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6890, metadata !DIExpression()), !dbg !6891
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6892, metadata !DIExpression()), !dbg !6893
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !6894, metadata !DIExpression()), !dbg !6895
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !6896, metadata !DIExpression()), !dbg !6897
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6898
  %1 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6899
  %ssa_name = bitcast %union.tree_node* %1 to %struct.tree_ssa_name*, !dbg !6899
  %var1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !6899
  store %union.tree_node* %0, %union.tree_node** %var1, align 8, !dbg !6900
  br label %while.body, !dbg !6901

while.body:                                       ; preds = %entry, %if.end10
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi, align 8, !dbg !6902
  %2 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6904
  %call = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %2), !dbg !6904
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !6904
  br label %for.cond, !dbg !6904

for.cond:                                         ; preds = %for.inc, %while.body
  %call2 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !6906
  %tobool = icmp ne i8 %call2, 0, !dbg !6906
  %lnot = xor i1 %tobool, true, !dbg !6906
  br i1 %lnot, label %for.body, label %for.end, !dbg !6904

for.body:                                         ; preds = %for.cond
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6908
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %3), !dbg !6911
  %cmp = icmp eq i32 %call3, 16, !dbg !6912
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6913

land.lhs.true:                                    ; preds = %for.body
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6914
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6915
  %call4 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %5), !dbg !6916
  %call5 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %4, %struct.basic_block_def* %call4), !dbg !6917
  %conv = zext i8 %call5 to i32, !dbg !6917
  %tobool6 = icmp ne i32 %conv, 0, !dbg !6917
  br i1 %tobool6, label %if.then, label %if.end, !dbg !6918

if.then:                                          ; preds = %land.lhs.true
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6919
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %phi, align 8, !dbg !6921
  call void @end_imm_use_stmt_traverse(%struct.immediate_use_iterator_d* %iter), !dbg !6922
  br label %for.end, !dbg !6922

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !6924

for.inc:                                          ; preds = %if.end
  %call7 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !6906
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %stmt, align 8, !dbg !6906
  br label %for.cond, !dbg !6906, !llvm.loop !6925

for.end:                                          ; preds = %if.then, %for.cond
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6927
  %tobool8 = icmp ne %union.gimple_statement_d* %7, null, !dbg !6927
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !6929

if.then9:                                         ; preds = %for.end
  ret void, !dbg !6930

if.end10:                                         ; preds = %for.end
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6931
  %call11 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %8), !dbg !6931
  %call12 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call11), !dbg !6931
  store %union.tree_node* %call12, %union.tree_node** %name.addr, align 8, !dbg !6932
  %9 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6933
  %10 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6934
  %ssa_name13 = bitcast %union.tree_node* %10 to %struct.tree_ssa_name*, !dbg !6934
  %var14 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name13, i32 0, i32 1, !dbg !6934
  store %union.tree_node* %9, %union.tree_node** %var14, align 8, !dbg !6935
  br label %while.body, !dbg !6901, !llvm.loop !6936
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !6938 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6941, metadata !DIExpression()), !dbg !6942
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6942
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6942
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6942

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6942
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !6942
  %2 = load i32, i32* %num, align 8, !dbg !6942
  br label %cond.end, !dbg !6942

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6942

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6942
  ret i32 %cond, !dbg !6942
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !6943 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6946, metadata !DIExpression()), !dbg !6947
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6948, metadata !DIExpression()), !dbg !6949
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6950
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6950
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6950
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6951
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !6952
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6953
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6954
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6955
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !6955
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !6956
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6956
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6957
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !6958
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6959
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6960
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !6961
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !6962
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6963
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !6964
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !6965
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6966
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6967
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !6968
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !6969
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !6970
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6971
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !6972
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !6973
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6974
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !6975
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6976
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !6977
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !6978
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !6979
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6980
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !6982
  %tobool = icmp ne i8 %call, 0, !dbg !6982
  br i1 %tobool, label %if.then, label %if.end, !dbg !6983

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6984
  br label %return, !dbg !6984

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6985
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !6986
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !6986
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6987
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !6988
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6989
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !6989
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !6989
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !6989
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !6989
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !6989
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !6990
  br label %return, !dbg !6990

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6991
  ret %union.gimple_statement_d* %18, !dbg !6991
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6992 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6993, metadata !DIExpression()), !dbg !6994
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6995
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6996
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6996
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6997
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6998
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6998
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6999
  %conv = zext i1 %cmp to i32, !dbg !6999
  %conv1 = trunc i32 %conv to i8, !dbg !7000
  ret i8 %conv1, !dbg !7001
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @end_imm_use_stmt_traverse(%struct.immediate_use_iterator_d* %imm) #0 !dbg !7002 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7005, metadata !DIExpression()), !dbg !7006
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7007
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !7008
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node), !dbg !7009
  ret void, !dbg !7010
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !7011 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7014, metadata !DIExpression()), !dbg !7015
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7016
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !7017
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !7018
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7018
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7019
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !7020
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !7021
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7022
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !7024
  %tobool = icmp ne i8 %call, 0, !dbg !7024
  br i1 %tobool, label %if.then, label %if.end4, !dbg !7025

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7026
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !7029
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !7030
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7030
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !7031
  br i1 %cmp, label %if.then2, label %if.end, !dbg !7032

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7033
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !7034
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !7035
  br label %if.end, !dbg !7035

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !7036
  br label %return, !dbg !7036

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7037
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !7038
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !7038
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7039
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !7040
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7041
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !7041
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !7041
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !7041
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !7041
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7041
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !7042
  br label %return, !dbg !7042

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !7043
  ret %union.gimple_statement_d* %13, !dbg !7043
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !7044 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !7047, metadata !DIExpression()), !dbg !7048
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !7049, metadata !DIExpression()), !dbg !7050
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !7051, metadata !DIExpression()), !dbg !7052
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !7053, metadata !DIExpression()), !dbg !7054
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7055
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7054
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !7056, metadata !DIExpression()), !dbg !7057
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7058
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !7058
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !7058
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7058
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7057
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !7059, metadata !DIExpression()), !dbg !7060
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7061
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !7061
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !7060
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !7062, metadata !DIExpression()), !dbg !7075
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !7076, metadata !DIExpression()), !dbg !7077
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7078
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !7079
  %conv = zext i8 %call1 to i32, !dbg !7079
  %tobool = icmp ne i32 %conv, 0, !dbg !7079
  %5 = zext i1 %tobool to i64, !dbg !7079
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !7079
  store i32 %cond, i32* %flag, align 4, !dbg !7080
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7081
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !7083
  %cmp = icmp eq i32 %call2, 16, !dbg !7084
  br i1 %cmp, label %if.then, label %if.else, !dbg !7085

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7086
  %8 = load i32, i32* %flag, align 4, !dbg !7086
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !7086
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7086
  br label %for.cond, !dbg !7086

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7089
  %tobool6 = icmp ne i8 %call5, 0, !dbg !7089
  %lnot = xor i1 %tobool6, true, !dbg !7089
  br i1 %lnot, label %for.body, label %for.end, !dbg !7086

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7091
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !7091
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7093
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !7094
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !7095

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7096
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7097
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7098
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !7099
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7100
  br label %if.end, !dbg !7101

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !7093

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7089
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7089
  br label %for.cond, !dbg !7089, !llvm.loop !7102

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !7104

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !7105
  %cmp13 = icmp eq i32 %14, 1, !dbg !7108
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !7109

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7110
  %16 = load i32, i32* %flag, align 4, !dbg !7110
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !7110
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7110
  br label %for.cond17, !dbg !7110

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7113
  %tobool19 = icmp ne i8 %call18, 0, !dbg !7113
  %lnot20 = xor i1 %tobool19, true, !dbg !7113
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !7110

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7115
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !7115
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7117
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !7118
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !7119

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7120
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7121
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7122
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !7123
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7124
  br label %if.end27, !dbg !7125

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !7117

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !7113
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7113
  br label %for.cond17, !dbg !7113, !llvm.loop !7126

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !7128

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !7129
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !7131
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7132
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !7133
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !7134

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7135
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !7135
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !7138
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !7139
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !7140

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7141
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7142
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7143
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !7144
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7145
  br label %if.end41, !dbg !7146

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !7147

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7148
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !7150
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !7151
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7151
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !7152
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !7153

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7154
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !7155
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !7156
  br label %if.end49, !dbg !7156

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !7157
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !7158
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !7159
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !7160
  ret void, !dbg !7161
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !7162 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7166, metadata !DIExpression()), !dbg !7167
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !7168, metadata !DIExpression()), !dbg !7169
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7170, metadata !DIExpression()), !dbg !7171
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !7172, metadata !DIExpression()), !dbg !7173
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7174
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !7175
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !7173
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !7176, metadata !DIExpression()), !dbg !7177
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7178
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !7179
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7180
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !7181
  store i8 0, i8* %done, align 8, !dbg !7182
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7183
  %and = and i32 %3, 5, !dbg !7183
  %cmp = icmp ne i32 %and, 0, !dbg !7183
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7183

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !7183
  br label %cond.end, !dbg !7183

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7183

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7183
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !7184
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !7185
  %conv = zext i8 %call1 to i32, !dbg !7185
  %tobool = icmp ne i32 %conv, 0, !dbg !7185
  %5 = zext i1 %tobool to i64, !dbg !7185
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !7185
  store i32 %cond2, i32* %comp, align 4, !dbg !7186
  %6 = load i32, i32* %flags.addr, align 4, !dbg !7187
  %7 = load i32, i32* %comp, align 4, !dbg !7189
  %and3 = and i32 %6, %7, !dbg !7190
  %cmp4 = icmp eq i32 %and3, 0, !dbg !7191
  br i1 %cmp4, label %if.then, label %if.end, !dbg !7192

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7193
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !7195
  store i8 1, i8* %done6, align 8, !dbg !7196
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7197
  br label %return, !dbg !7197

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7198
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7199
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !7200
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7201
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !7202
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !7203
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7204
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !7205
  store i32 %call7, i32* %num_phi, align 4, !dbg !7206
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7207
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !7208
  store i32 2, i32* %iter_type, align 4, !dbg !7209
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7210
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !7211
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7212
  br label %return, !dbg !7212

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7213
  ret %struct.ssa_use_operand_d* %15, !dbg !7213
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7214 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7219, metadata !DIExpression()), !dbg !7220
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7221
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !7222
  %1 = load i8, i8* %done, align 8, !dbg !7222
  ret i8 %1, !dbg !7223
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !7224 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !7227, metadata !DIExpression()), !dbg !7228
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !7229, metadata !DIExpression()), !dbg !7230
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !7231, metadata !DIExpression()), !dbg !7232
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7233
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !7235
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !7236
  br i1 %cmp, label %if.then, label %if.end3, !dbg !7237

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7238
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !7241
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7241
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7242
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !7243
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !7244

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7245
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7246
  br label %if.end, !dbg !7247

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7248
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !7250
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7251
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7252
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !7253
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !7254
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7255
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !7256

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !7257
  ret %struct.ssa_use_operand_d* %10, !dbg !7258
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7259 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7262, metadata !DIExpression()), !dbg !7263
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !7264, metadata !DIExpression()), !dbg !7265
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7266
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !7268
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !7268
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !7266
  br i1 %tobool, label %if.then, label %if.end, !dbg !7269

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7270
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !7270
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !7270
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !7270
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7272
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7273
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !7274
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !7274
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !7275
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !7275
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7276
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !7277
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !7278
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !7279
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7280
  br label %return, !dbg !7280

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7281
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !7283
  %10 = load i32, i32* %phi_i, align 8, !dbg !7283
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7284
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !7285
  %12 = load i32, i32* %num_phi, align 4, !dbg !7285
  %cmp = icmp slt i32 %10, %12, !dbg !7286
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !7287

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7288
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !7288
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7288
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7288
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !7288
  %16 = load i32, i32* %phi_i5, align 8, !dbg !7288
  %inc = add nsw i32 %16, 1, !dbg !7288
  store i32 %inc, i32* %phi_i5, align 8, !dbg !7288
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !7288
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7290
  br label %return, !dbg !7290

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7291
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !7292
  store i8 1, i8* %done, align 8, !dbg !7293
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7294
  br label %return, !dbg !7294

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7295
  ret %struct.ssa_use_operand_d* %18, !dbg !7295
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7296 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7297, metadata !DIExpression()), !dbg !7298
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7299, metadata !DIExpression()), !dbg !7300
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7301, metadata !DIExpression()), !dbg !7302
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7303
  %and = and i32 %0, 10, !dbg !7303
  %cmp = icmp eq i32 %and, 0, !dbg !7303
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !7303

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7303
  %and1 = and i32 %1, 1, !dbg !7303
  %tobool = icmp ne i32 %and1, 0, !dbg !7303
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7303

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !7303
  br label %cond.end, !dbg !7303

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7303

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7303
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7304
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7305
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7306
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !7307
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7308
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !7309
  store i32 2, i32* %iter_type, align 4, !dbg !7310
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7311
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !7312
  ret %struct.ssa_use_operand_d* %call, !dbg !7313
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !7314 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7317, metadata !DIExpression()), !dbg !7318
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !7319, metadata !DIExpression()), !dbg !7320
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7321
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7323
  %tobool = icmp ne i8 %call, 0, !dbg !7323
  br i1 %tobool, label %if.end, label %if.then, !dbg !7324

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7325
  br label %return, !dbg !7325

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7326
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7327
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7328
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !7329
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !7329
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !7330
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !7331
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !7331
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !7333

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !7334
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !7334
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !7335
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !7335
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7336
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7337
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !7338
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !7339
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !7340

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !7341
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !7341
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7342
  br label %return, !dbg !7342

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7343
  br label %return, !dbg !7343

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !7344
  ret %struct.ssa_use_operand_d* %8, !dbg !7344
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !7345 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !7348, metadata !DIExpression()), !dbg !7349
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7350
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !7352
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7352
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !7353
  br i1 %cmp, label %if.then, label %if.end, !dbg !7354

if.then:                                          ; preds = %entry
  br label %return, !dbg !7355

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7356
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !7357
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7357
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7358
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !7359
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !7359
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !7360
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !7361
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7362
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !7363
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !7363
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7364
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !7365
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !7365
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !7366
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !7367
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7368
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !7369
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !7370
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7371
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !7372
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !7373
  br label %return, !dbg !7374

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !7374
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !7375 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !7378, metadata !DIExpression()), !dbg !7379
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !7380, metadata !DIExpression()), !dbg !7381
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7382
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7383
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !7384
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7385
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7386
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !7387
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7387
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7388
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !7389
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !7390
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7391
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7392
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !7393
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !7393
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !7394
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !7395
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !7396
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !7397
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !7398
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !7399
  ret void, !dbg !7400
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !7401 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7402, metadata !DIExpression()), !dbg !7403
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7404
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7405
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !7406
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7406
  ret %union.tree_node* %1, !dbg !7407
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !7408 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7411, metadata !DIExpression()), !dbg !7412
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7413
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !7414
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !7415
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7416
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !7417
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !7418
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7419
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !7420
  store i32 0, i32* %iter_type, align 4, !dbg !7421
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7422
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !7423
  store i32 0, i32* %phi_i, align 8, !dbg !7424
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7425
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !7426
  store i32 0, i32* %num_phi, align 4, !dbg !7427
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7428
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !7429
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7430
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7431
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !7432
  store i8 1, i8* %done, align 8, !dbg !7433
  ret void, !dbg !7434
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !7435 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7436, metadata !DIExpression()), !dbg !7437
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7438
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7439
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !7440
  %1 = load i32, i32* %nargs, align 4, !dbg !7440
  ret i32 %1, !dbg !7441
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !7442 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !7445, metadata !DIExpression()), !dbg !7446
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7447, metadata !DIExpression()), !dbg !7448
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7449, metadata !DIExpression()), !dbg !7450
  %0 = load i32, i32* %flags.addr, align 4, !dbg !7451
  %and = and i32 %0, 8, !dbg !7451
  %tobool = icmp ne i32 %and, 0, !dbg !7451
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !7451

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !7451
  %and1 = and i32 %1, 2, !dbg !7451
  %tobool2 = icmp ne i32 %and1, 0, !dbg !7451
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !7451

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !7451
  %and3 = and i32 %2, 4, !dbg !7451
  %tobool4 = icmp ne i32 %and3, 0, !dbg !7451
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !7451

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7451
  %and6 = and i32 %3, 1, !dbg !7451
  %tobool7 = icmp ne i32 %and6, 0, !dbg !7451
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !7451

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !7451
  br label %cond.end, !dbg !7451

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !7451

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7451
  %4 = load i32, i32* %flags.addr, align 4, !dbg !7452
  %and8 = and i32 %4, 10, !dbg !7453
  %tobool9 = icmp ne i32 %and8, 0, !dbg !7453
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !7454

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7455
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !7456
  br label %cond.end12, !dbg !7454

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !7454

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !7454
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7457
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !7458
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !7459
  %7 = load i32, i32* %flags.addr, align 4, !dbg !7460
  %and14 = and i32 %7, 8, !dbg !7462
  %tobool15 = icmp ne i32 %and14, 0, !dbg !7462
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !7463

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7464
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !7465
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !7465
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !7464
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !7466

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7467
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !7468
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !7469
  br i1 %cmp, label %if.then, label %if.end, !dbg !7470

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7471
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !7472
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !7472
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !7473
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !7473
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7474
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !7475
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !7476
  br label %if.end, !dbg !7474

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !7477
  %and23 = and i32 %15, 5, !dbg !7478
  %tobool24 = icmp ne i32 %and23, 0, !dbg !7478
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !7479

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7480
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !7481
  br label %cond.end28, !dbg !7479

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !7479

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !7479
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7482
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !7483
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !7484
  %18 = load i32, i32* %flags.addr, align 4, !dbg !7485
  %and30 = and i32 %18, 4, !dbg !7487
  %tobool31 = icmp ne i32 %and30, 0, !dbg !7487
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !7488

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7489
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !7490
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !7490
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !7489
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !7491

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7492
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !7493
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !7494
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !7495

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7496
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !7497
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !7497
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !7498
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !7498
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7499
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !7500
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !7501
  br label %if.end42, !dbg !7499

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7502
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !7503
  store i8 0, i8* %done, align 8, !dbg !7504
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7505
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !7506
  store i32 0, i32* %phi_i, align 8, !dbg !7507
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7508
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !7509
  store i32 0, i32* %num_phi, align 4, !dbg !7510
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !7511
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !7512
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7513
  ret void, !dbg !7514
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !7515 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7518, metadata !DIExpression()), !dbg !7519
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7520
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7522
  %tobool = icmp ne i8 %call, 0, !dbg !7522
  br i1 %tobool, label %if.end, label %if.then, !dbg !7523

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !7524
  br label %return, !dbg !7524

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7525
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7526
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7527
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !7528
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !7528
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !7529
  br label %return, !dbg !7529

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !7530
  ret %struct.def_optype_d* %3, !dbg !7530
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !7531 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7532, metadata !DIExpression()), !dbg !7533
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7534
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7536
  %tobool = icmp ne i8 %call, 0, !dbg !7536
  br i1 %tobool, label %if.end, label %if.then, !dbg !7537

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7538
  br label %return, !dbg !7538

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7539
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7540
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !7541
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !7541
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7542
  br label %return, !dbg !7542

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7543
  ret %union.tree_node* %3, !dbg !7543
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !7544 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7547, metadata !DIExpression()), !dbg !7548
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7549
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7551
  %tobool = icmp ne i8 %call, 0, !dbg !7551
  br i1 %tobool, label %if.end, label %if.then, !dbg !7552

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !7553
  br label %return, !dbg !7553

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7554
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7555
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7556
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !7557
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !7557
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !7558
  br label %return, !dbg !7558

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !7559
  ret %struct.use_optype_d* %3, !dbg !7559
}

; Function Attrs: noinline nounwind uwtable
define internal void @execute_load_motion(%struct.loop* %loop, %struct.chain* %chain, %struct.bitmap_head_def* %tmp_vars) #0 !dbg !7560 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chain.addr = alloca %struct.chain*, align 8
  %tmp_vars.addr = alloca %struct.bitmap_head_def*, align 8
  %vars = alloca %struct.VEC_tree_heap*, align 8
  %a = alloca %struct.dref_d*, align 8
  %n_writes = alloca i32, align 4
  %ridx = alloca i32, align 4
  %i = alloca i32, align 4
  %var = alloca %union.tree_node*, align 8
  %is_read41 = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7563, metadata !DIExpression()), !dbg !7564
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !7565, metadata !DIExpression()), !dbg !7566
  store %struct.bitmap_head_def* %tmp_vars, %struct.bitmap_head_def** %tmp_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp_vars.addr, metadata !7567, metadata !DIExpression()), !dbg !7568
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %vars, metadata !7569, metadata !DIExpression()), !dbg !7570
  call void @llvm.dbg.declare(metadata %struct.dref_d** %a, metadata !7571, metadata !DIExpression()), !dbg !7572
  call void @llvm.dbg.declare(metadata i32* %n_writes, metadata !7573, metadata !DIExpression()), !dbg !7574
  store i32 0, i32* %n_writes, align 4, !dbg !7574
  call void @llvm.dbg.declare(metadata i32* %ridx, metadata !7575, metadata !DIExpression()), !dbg !7576
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7577, metadata !DIExpression()), !dbg !7578
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7579, metadata !DIExpression()), !dbg !7580
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7581
  %type = getelementptr inbounds %struct.chain, %struct.chain* %0, i32 0, i32 0, !dbg !7581
  %1 = load i32, i32* %type, align 8, !dbg !7581
  %cmp = icmp eq i32 %1, 0, !dbg !7581
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7581

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1618, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !7581
  br label %cond.end, !dbg !7581

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7581

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7581
  %2 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7582
  %combined = getelementptr inbounds %struct.chain, %struct.chain* %2, i32 0, i32 9, !dbg !7582
  %bf.load = load i8, i8* %combined, align 8, !dbg !7582
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !7582
  %bf.clear = and i8 %bf.lshr, 1, !dbg !7582
  %bf.cast = zext i8 %bf.clear to i32, !dbg !7582
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7582
  br i1 %tobool, label %cond.true1, label %cond.false2, !dbg !7582

cond.true1:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1619, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !7582
  br label %cond.end3, !dbg !7582

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !7582

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi i32 [ 0, %cond.true1 ], [ 0, %cond.false2 ], !dbg !7582
  store i32 0, i32* %i, align 4, !dbg !7583
  br label %for.cond, !dbg !7585

for.cond:                                         ; preds = %for.inc, %cond.end3
  %3 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7586
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %3, i32 0, i32 5, !dbg !7586
  %4 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !7586
  %tobool5 = icmp ne %struct.VEC_dref_heap* %4, null, !dbg !7586
  br i1 %tobool5, label %cond.true6, label %cond.false8, !dbg !7586

cond.true6:                                       ; preds = %for.cond
  %5 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7586
  %refs7 = getelementptr inbounds %struct.chain, %struct.chain* %5, i32 0, i32 5, !dbg !7586
  %6 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs7, align 8, !dbg !7586
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %6, i32 0, i32 0, !dbg !7586
  br label %cond.end9, !dbg !7586

cond.false8:                                      ; preds = %for.cond
  br label %cond.end9, !dbg !7586

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.VEC_dref_base* [ %base, %cond.true6 ], [ null, %cond.false8 ], !dbg !7586
  %7 = load i32, i32* %i, align 4, !dbg !7586
  %call = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond10, i32 %7, %struct.dref_d** %a), !dbg !7586
  %tobool11 = icmp ne i32 %call, 0, !dbg !7588
  br i1 %tobool11, label %for.body, label %for.end, !dbg !7588

for.body:                                         ; preds = %cond.end9
  %8 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !7589
  %ref = getelementptr inbounds %struct.dref_d, %struct.dref_d* %8, i32 0, i32 0, !dbg !7589
  %9 = load %struct.data_reference*, %struct.data_reference** %ref, align 8, !dbg !7589
  %is_read = getelementptr inbounds %struct.data_reference, %struct.data_reference* %9, i32 0, i32 3, !dbg !7589
  %10 = load i8, i8* %is_read, align 8, !dbg !7589
  %tobool12 = icmp ne i8 %10, 0, !dbg !7589
  br i1 %tobool12, label %if.end, label %if.then, !dbg !7591

if.then:                                          ; preds = %for.body
  %11 = load i32, i32* %n_writes, align 4, !dbg !7592
  %inc = add i32 %11, 1, !dbg !7592
  store i32 %inc, i32* %n_writes, align 4, !dbg !7592
  br label %if.end, !dbg !7593

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !7589

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %i, align 4, !dbg !7594
  %inc13 = add i32 %12, 1, !dbg !7594
  store i32 %inc13, i32* %i, align 4, !dbg !7594
  br label %for.cond, !dbg !7595, !llvm.loop !7596

for.end:                                          ; preds = %cond.end9
  %13 = load i32, i32* %n_writes, align 4, !dbg !7598
  %14 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7600
  %refs14 = getelementptr inbounds %struct.chain, %struct.chain* %14, i32 0, i32 5, !dbg !7600
  %15 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs14, align 8, !dbg !7600
  %tobool15 = icmp ne %struct.VEC_dref_heap* %15, null, !dbg !7600
  br i1 %tobool15, label %cond.true16, label %cond.false19, !dbg !7600

cond.true16:                                      ; preds = %for.end
  %16 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7600
  %refs17 = getelementptr inbounds %struct.chain, %struct.chain* %16, i32 0, i32 5, !dbg !7600
  %17 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs17, align 8, !dbg !7600
  %base18 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %17, i32 0, i32 0, !dbg !7600
  br label %cond.end20, !dbg !7600

cond.false19:                                     ; preds = %for.end
  br label %cond.end20, !dbg !7600

cond.end20:                                       ; preds = %cond.false19, %cond.true16
  %cond21 = phi %struct.VEC_dref_base* [ %base18, %cond.true16 ], [ null, %cond.false19 ], !dbg !7600
  %call22 = call i32 @VEC_dref_base_length(%struct.VEC_dref_base* %cond21), !dbg !7600
  %cmp23 = icmp eq i32 %13, %call22, !dbg !7601
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !7602

if.then24:                                        ; preds = %cond.end20
  br label %return, !dbg !7603

if.end25:                                         ; preds = %cond.end20
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7604
  %19 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7605
  %call26 = call %struct.dref_d* @get_chain_root(%struct.chain* %19), !dbg !7606
  %20 = load i32, i32* %n_writes, align 4, !dbg !7607
  %cmp27 = icmp ugt i32 %20, 0, !dbg !7608
  %conv = zext i1 %cmp27 to i32, !dbg !7608
  %conv28 = trunc i32 %conv to i8, !dbg !7607
  %21 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7609
  %inits = getelementptr inbounds %struct.chain, %struct.chain* %21, i32 0, i32 8, !dbg !7610
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits, align 8, !dbg !7610
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars.addr, align 8, !dbg !7611
  call void @initialize_root_vars_lm(%struct.loop* %18, %struct.dref_d* %call26, i8 zeroext %conv28, %struct.VEC_tree_heap** %vars, %struct.VEC_tree_heap* %22, %struct.bitmap_head_def* %23), !dbg !7612
  store i32 0, i32* %ridx, align 4, !dbg !7613
  store i32 0, i32* %i, align 4, !dbg !7614
  br label %for.cond29, !dbg !7616

for.cond29:                                       ; preds = %for.inc82, %if.end25
  %24 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7617
  %refs30 = getelementptr inbounds %struct.chain, %struct.chain* %24, i32 0, i32 5, !dbg !7617
  %25 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs30, align 8, !dbg !7617
  %tobool31 = icmp ne %struct.VEC_dref_heap* %25, null, !dbg !7617
  br i1 %tobool31, label %cond.true32, label %cond.false35, !dbg !7617

cond.true32:                                      ; preds = %for.cond29
  %26 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7617
  %refs33 = getelementptr inbounds %struct.chain, %struct.chain* %26, i32 0, i32 5, !dbg !7617
  %27 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs33, align 8, !dbg !7617
  %base34 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %27, i32 0, i32 0, !dbg !7617
  br label %cond.end36, !dbg !7617

cond.false35:                                     ; preds = %for.cond29
  br label %cond.end36, !dbg !7617

cond.end36:                                       ; preds = %cond.false35, %cond.true32
  %cond37 = phi %struct.VEC_dref_base* [ %base34, %cond.true32 ], [ null, %cond.false35 ], !dbg !7617
  %28 = load i32, i32* %i, align 4, !dbg !7617
  %call38 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond37, i32 %28, %struct.dref_d** %a), !dbg !7617
  %tobool39 = icmp ne i32 %call38, 0, !dbg !7619
  br i1 %tobool39, label %for.body40, label %for.end84, !dbg !7619

for.body40:                                       ; preds = %cond.end36
  call void @llvm.dbg.declare(metadata i8* %is_read41, metadata !7620, metadata !DIExpression()), !dbg !7622
  %29 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !7623
  %ref42 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %29, i32 0, i32 0, !dbg !7623
  %30 = load %struct.data_reference*, %struct.data_reference** %ref42, align 8, !dbg !7623
  %is_read43 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %30, i32 0, i32 3, !dbg !7623
  %31 = load i8, i8* %is_read43, align 8, !dbg !7623
  store i8 %31, i8* %is_read41, align 1, !dbg !7622
  %32 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !7624
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %32, i32 0, i32 1, !dbg !7625
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7625
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %33), !dbg !7626
  %34 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !7627
  %ref44 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %34, i32 0, i32 0, !dbg !7627
  %35 = load %struct.data_reference*, %struct.data_reference** %ref44, align 8, !dbg !7627
  %is_read45 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %35, i32 0, i32 3, !dbg !7627
  %36 = load i8, i8* %is_read45, align 8, !dbg !7627
  %tobool46 = icmp ne i8 %36, 0, !dbg !7627
  br i1 %tobool46, label %if.end67, label %if.then47, !dbg !7629

if.then47:                                        ; preds = %for.body40
  %37 = load i32, i32* %n_writes, align 4, !dbg !7630
  %dec = add i32 %37, -1, !dbg !7630
  store i32 %dec, i32* %n_writes, align 4, !dbg !7630
  %38 = load i32, i32* %n_writes, align 4, !dbg !7632
  %tobool48 = icmp ne i32 %38, 0, !dbg !7632
  br i1 %tobool48, label %if.then49, label %if.else, !dbg !7634

if.then49:                                        ; preds = %if.then47
  %39 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars, align 8, !dbg !7635
  %tobool50 = icmp ne %struct.VEC_tree_heap* %39, null, !dbg !7635
  br i1 %tobool50, label %cond.true51, label %cond.false53, !dbg !7635

cond.true51:                                      ; preds = %if.then49
  %40 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars, align 8, !dbg !7635
  %base52 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %40, i32 0, i32 0, !dbg !7635
  br label %cond.end54, !dbg !7635

cond.false53:                                     ; preds = %if.then49
  br label %cond.end54, !dbg !7635

cond.end54:                                       ; preds = %cond.false53, %cond.true51
  %cond55 = phi %struct.VEC_tree_base* [ %base52, %cond.true51 ], [ null, %cond.false53 ], !dbg !7635
  %call56 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond55, i32 0), !dbg !7635
  store %union.tree_node* %call56, %union.tree_node** %var, align 8, !dbg !7637
  %41 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7638
  %ssa_name = bitcast %union.tree_node* %41 to %struct.tree_ssa_name*, !dbg !7638
  %var57 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !7638
  %42 = load %union.tree_node*, %union.tree_node** %var57, align 8, !dbg !7638
  %call58 = call %union.tree_node* @make_ssa_name(%union.tree_node* %42, %union.gimple_statement_d* null), !dbg !7639
  store %union.tree_node* %call58, %union.tree_node** %var, align 8, !dbg !7640
  %43 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars, align 8, !dbg !7641
  %tobool59 = icmp ne %struct.VEC_tree_heap* %43, null, !dbg !7641
  br i1 %tobool59, label %cond.true60, label %cond.false62, !dbg !7641

cond.true60:                                      ; preds = %cond.end54
  %44 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars, align 8, !dbg !7641
  %base61 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %44, i32 0, i32 0, !dbg !7641
  br label %cond.end63, !dbg !7641

cond.false62:                                     ; preds = %cond.end54
  br label %cond.end63, !dbg !7641

cond.end63:                                       ; preds = %cond.false62, %cond.true60
  %cond64 = phi %struct.VEC_tree_base* [ %base61, %cond.true60 ], [ null, %cond.false62 ], !dbg !7641
  %45 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7641
  %call65 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond64, i32 0, %union.tree_node* %45), !dbg !7641
  br label %if.end66, !dbg !7642

if.else:                                          ; preds = %if.then47
  store i32 1, i32* %ridx, align 4, !dbg !7643
  br label %if.end66

if.end66:                                         ; preds = %if.else, %cond.end63
  br label %if.end67, !dbg !7644

if.end67:                                         ; preds = %if.end66, %for.body40
  %46 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !7645
  %stmt68 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %46, i32 0, i32 1, !dbg !7646
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt68, align 8, !dbg !7646
  %48 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars, align 8, !dbg !7647
  %tobool69 = icmp ne %struct.VEC_tree_heap* %48, null, !dbg !7647
  br i1 %tobool69, label %cond.true70, label %cond.false72, !dbg !7647

cond.true70:                                      ; preds = %if.end67
  %49 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars, align 8, !dbg !7647
  %base71 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %49, i32 0, i32 0, !dbg !7647
  br label %cond.end73, !dbg !7647

cond.false72:                                     ; preds = %if.end67
  br label %cond.end73, !dbg !7647

cond.end73:                                       ; preds = %cond.false72, %cond.true70
  %cond74 = phi %struct.VEC_tree_base* [ %base71, %cond.true70 ], [ null, %cond.false72 ], !dbg !7647
  %50 = load i32, i32* %ridx, align 4, !dbg !7647
  %call75 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond74, i32 %50), !dbg !7647
  %51 = load i8, i8* %is_read41, align 1, !dbg !7648
  %tobool76 = icmp ne i8 %51, 0, !dbg !7649
  %lnot = xor i1 %tobool76, true, !dbg !7649
  %lnot.ext = zext i1 %lnot to i32, !dbg !7649
  %conv77 = trunc i32 %lnot.ext to i8, !dbg !7649
  %52 = load i8, i8* %is_read41, align 1, !dbg !7650
  %tobool78 = icmp ne i8 %52, 0, !dbg !7651
  %lnot79 = xor i1 %tobool78, true, !dbg !7651
  %lnot.ext80 = zext i1 %lnot79 to i32, !dbg !7651
  %conv81 = trunc i32 %lnot.ext80 to i8, !dbg !7651
  call void @replace_ref_with(%union.gimple_statement_d* %47, %union.tree_node* %call75, i8 zeroext %conv77, i8 zeroext %conv81), !dbg !7652
  br label %for.inc82, !dbg !7653

for.inc82:                                        ; preds = %cond.end73
  %53 = load i32, i32* %i, align 4, !dbg !7654
  %inc83 = add i32 %53, 1, !dbg !7654
  store i32 %inc83, i32* %i, align 4, !dbg !7654
  br label %for.cond29, !dbg !7655, !llvm.loop !7656

for.end84:                                        ; preds = %cond.end36
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vars), !dbg !7658
  br label %return, !dbg !7659

return:                                           ; preds = %for.end84, %if.then24
  ret void, !dbg !7659
}

; Function Attrs: noinline nounwind uwtable
define internal void @execute_pred_commoning_chain(%struct.loop* %loop, %struct.chain* %chain, %struct.bitmap_head_def* %tmp_vars) #0 !dbg !7660 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chain.addr = alloca %struct.chain*, align 8
  %tmp_vars.addr = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %a = alloca %struct.dref_d*, align 8
  %root = alloca %struct.dref_d*, align 8
  %var = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7661, metadata !DIExpression()), !dbg !7662
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !7663, metadata !DIExpression()), !dbg !7664
  store %struct.bitmap_head_def* %tmp_vars, %struct.bitmap_head_def** %tmp_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp_vars.addr, metadata !7665, metadata !DIExpression()), !dbg !7666
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7667, metadata !DIExpression()), !dbg !7668
  call void @llvm.dbg.declare(metadata %struct.dref_d** %a, metadata !7669, metadata !DIExpression()), !dbg !7670
  call void @llvm.dbg.declare(metadata %struct.dref_d** %root, metadata !7671, metadata !DIExpression()), !dbg !7672
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7673, metadata !DIExpression()), !dbg !7674
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7675
  %combined = getelementptr inbounds %struct.chain, %struct.chain* %0, i32 0, i32 9, !dbg !7677
  %bf.load = load i8, i8* %combined, align 8, !dbg !7677
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !7677
  %bf.clear = and i8 %bf.lshr, 1, !dbg !7677
  %bf.cast = zext i8 %bf.clear to i32, !dbg !7677
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7675
  br i1 %tobool, label %if.then, label %if.else, !dbg !7678

if.then:                                          ; preds = %entry
  store i32 1, i32* %i, align 4, !dbg !7679
  br label %for.cond, !dbg !7682

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7683
  %refs = getelementptr inbounds %struct.chain, %struct.chain* %1, i32 0, i32 5, !dbg !7683
  %2 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs, align 8, !dbg !7683
  %tobool1 = icmp ne %struct.VEC_dref_heap* %2, null, !dbg !7683
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7683

cond.true:                                        ; preds = %for.cond
  %3 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7683
  %refs2 = getelementptr inbounds %struct.chain, %struct.chain* %3, i32 0, i32 5, !dbg !7683
  %4 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs2, align 8, !dbg !7683
  %base = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %4, i32 0, i32 0, !dbg !7683
  br label %cond.end, !dbg !7683

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7683

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_dref_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7683
  %5 = load i32, i32* %i, align 4, !dbg !7683
  %call = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond, i32 %5, %struct.dref_d** %a), !dbg !7683
  %tobool3 = icmp ne i32 %call, 0, !dbg !7685
  br i1 %tobool3, label %for.body, label %for.end, !dbg !7685

for.body:                                         ; preds = %cond.end
  %6 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !7686
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %6, i32 0, i32 1, !dbg !7687
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7687
  call void @remove_stmt(%union.gimple_statement_d* %7), !dbg !7688
  br label %for.inc, !dbg !7688

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !7689
  %inc = add i32 %8, 1, !dbg !7689
  store i32 %inc, i32* %i, align 4, !dbg !7689
  br label %for.cond, !dbg !7690, !llvm.loop !7691

for.end:                                          ; preds = %cond.end
  br label %if.end, !dbg !7693

if.else:                                          ; preds = %entry
  %9 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7694
  %call4 = call %struct.dref_d* @get_chain_root(%struct.chain* %9), !dbg !7696
  store %struct.dref_d* %call4, %struct.dref_d** %root, align 8, !dbg !7697
  %10 = load %struct.dref_d*, %struct.dref_d** %root, align 8, !dbg !7698
  %stmt5 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %10, i32 0, i32 1, !dbg !7699
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt5, align 8, !dbg !7699
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %11), !dbg !7700
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7701
  %13 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7702
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars.addr, align 8, !dbg !7703
  call void @initialize_root(%struct.loop* %12, %struct.chain* %13, %struct.bitmap_head_def* %14), !dbg !7704
  store i32 1, i32* %i, align 4, !dbg !7705
  br label %for.cond6, !dbg !7707

for.cond6:                                        ; preds = %for.inc28, %if.else
  %15 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7708
  %refs7 = getelementptr inbounds %struct.chain, %struct.chain* %15, i32 0, i32 5, !dbg !7708
  %16 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs7, align 8, !dbg !7708
  %tobool8 = icmp ne %struct.VEC_dref_heap* %16, null, !dbg !7708
  br i1 %tobool8, label %cond.true9, label %cond.false12, !dbg !7708

cond.true9:                                       ; preds = %for.cond6
  %17 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7708
  %refs10 = getelementptr inbounds %struct.chain, %struct.chain* %17, i32 0, i32 5, !dbg !7708
  %18 = load %struct.VEC_dref_heap*, %struct.VEC_dref_heap** %refs10, align 8, !dbg !7708
  %base11 = getelementptr inbounds %struct.VEC_dref_heap, %struct.VEC_dref_heap* %18, i32 0, i32 0, !dbg !7708
  br label %cond.end13, !dbg !7708

cond.false12:                                     ; preds = %for.cond6
  br label %cond.end13, !dbg !7708

cond.end13:                                       ; preds = %cond.false12, %cond.true9
  %cond14 = phi %struct.VEC_dref_base* [ %base11, %cond.true9 ], [ null, %cond.false12 ], !dbg !7708
  %19 = load i32, i32* %i, align 4, !dbg !7708
  %call15 = call i32 @VEC_dref_base_iterate(%struct.VEC_dref_base* %cond14, i32 %19, %struct.dref_d** %a), !dbg !7708
  %tobool16 = icmp ne i32 %call15, 0, !dbg !7710
  br i1 %tobool16, label %for.body17, label %for.end30, !dbg !7710

for.body17:                                       ; preds = %cond.end13
  %20 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !7711
  %stmt18 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %20, i32 0, i32 1, !dbg !7713
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt18, align 8, !dbg !7713
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %21), !dbg !7714
  %22 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7715
  %vars = getelementptr inbounds %struct.chain, %struct.chain* %22, i32 0, i32 7, !dbg !7715
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars, align 8, !dbg !7715
  %tobool19 = icmp ne %struct.VEC_tree_heap* %23, null, !dbg !7715
  br i1 %tobool19, label %cond.true20, label %cond.false23, !dbg !7715

cond.true20:                                      ; preds = %for.body17
  %24 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7715
  %vars21 = getelementptr inbounds %struct.chain, %struct.chain* %24, i32 0, i32 7, !dbg !7715
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars21, align 8, !dbg !7715
  %base22 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %25, i32 0, i32 0, !dbg !7715
  br label %cond.end24, !dbg !7715

cond.false23:                                     ; preds = %for.body17
  br label %cond.end24, !dbg !7715

cond.end24:                                       ; preds = %cond.false23, %cond.true20
  %cond25 = phi %struct.VEC_tree_base* [ %base22, %cond.true20 ], [ null, %cond.false23 ], !dbg !7715
  %26 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !7715
  %length = getelementptr inbounds %struct.chain, %struct.chain* %26, i32 0, i32 6, !dbg !7715
  %27 = load i32, i32* %length, align 8, !dbg !7715
  %28 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !7715
  %distance = getelementptr inbounds %struct.dref_d, %struct.dref_d* %28, i32 0, i32 3, !dbg !7715
  %29 = load i32, i32* %distance, align 8, !dbg !7715
  %sub = sub i32 %27, %29, !dbg !7715
  %call26 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond25, i32 %sub), !dbg !7715
  store %union.tree_node* %call26, %union.tree_node** %var, align 8, !dbg !7716
  %30 = load %struct.dref_d*, %struct.dref_d** %a, align 8, !dbg !7717
  %stmt27 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %30, i32 0, i32 1, !dbg !7718
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt27, align 8, !dbg !7718
  %32 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7719
  call void @replace_ref_with(%union.gimple_statement_d* %31, %union.tree_node* %32, i8 zeroext 0, i8 zeroext 0), !dbg !7720
  br label %for.inc28, !dbg !7721

for.inc28:                                        ; preds = %cond.end24
  %33 = load i32, i32* %i, align 4, !dbg !7722
  %inc29 = add i32 %33, 1, !dbg !7722
  store i32 %inc29, i32* %i, align 4, !dbg !7722
  br label %for.cond6, !dbg !7723, !llvm.loop !7724

for.end30:                                        ; preds = %cond.end13
  br label %if.end

if.end:                                           ; preds = %for.end30, %for.end
  ret void, !dbg !7726
}

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_root_vars_lm(%struct.loop* %loop, %struct.dref_d* %root, i8 zeroext %written, %struct.VEC_tree_heap** %vars, %struct.VEC_tree_heap* %inits, %struct.bitmap_head_def* %tmp_vars) #0 !dbg !7727 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %root.addr = alloca %struct.dref_d*, align 8
  %written.addr = alloca i8, align 1
  %vars.addr = alloca %struct.VEC_tree_heap**, align 8
  %inits.addr = alloca %struct.VEC_tree_heap*, align 8
  %tmp_vars.addr = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %ref = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %next = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %entry3 = alloca %struct.edge_def*, align 8
  %latch = alloca %struct.edge_def*, align 8
  %init_stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !7730, metadata !DIExpression()), !dbg !7731
  store %struct.dref_d* %root, %struct.dref_d** %root.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dref_d** %root.addr, metadata !7732, metadata !DIExpression()), !dbg !7733
  store i8 %written, i8* %written.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %written.addr, metadata !7734, metadata !DIExpression()), !dbg !7735
  store %struct.VEC_tree_heap** %vars, %struct.VEC_tree_heap*** %vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vars.addr, metadata !7736, metadata !DIExpression()), !dbg !7737
  store %struct.VEC_tree_heap* %inits, %struct.VEC_tree_heap** %inits.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %inits.addr, metadata !7738, metadata !DIExpression()), !dbg !7739
  store %struct.bitmap_head_def* %tmp_vars, %struct.bitmap_head_def** %tmp_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp_vars.addr, metadata !7740, metadata !DIExpression()), !dbg !7741
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7742, metadata !DIExpression()), !dbg !7743
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !7744, metadata !DIExpression()), !dbg !7745
  %0 = load %struct.dref_d*, %struct.dref_d** %root.addr, align 8, !dbg !7746
  %ref1 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %0, i32 0, i32 0, !dbg !7746
  %1 = load %struct.data_reference*, %struct.data_reference** %ref1, align 8, !dbg !7746
  %ref2 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %1, i32 0, i32 1, !dbg !7746
  %2 = load %union.tree_node*, %union.tree_node** %ref2, align 8, !dbg !7746
  store %union.tree_node* %2, %union.tree_node** %ref, align 8, !dbg !7745
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !7747, metadata !DIExpression()), !dbg !7748
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7749, metadata !DIExpression()), !dbg !7750
  call void @llvm.dbg.declare(metadata %union.tree_node** %next, metadata !7751, metadata !DIExpression()), !dbg !7752
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !7753, metadata !DIExpression()), !dbg !7754
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !7755, metadata !DIExpression()), !dbg !7756
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry3, metadata !7757, metadata !DIExpression()), !dbg !7758
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7759
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %3), !dbg !7760
  store %struct.edge_def* %call, %struct.edge_def** %entry3, align 8, !dbg !7758
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch, metadata !7761, metadata !DIExpression()), !dbg !7762
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7763
  %call4 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %4), !dbg !7764
  store %struct.edge_def* %call4, %struct.edge_def** %latch, align 8, !dbg !7762
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits.addr, align 8, !dbg !7765
  %tobool = icmp ne %struct.VEC_tree_heap* %5, null, !dbg !7765
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7765

cond.true:                                        ; preds = %entry
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits.addr, align 8, !dbg !7765
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %6, i32 0, i32 0, !dbg !7765
  br label %cond.end, !dbg !7765

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7765

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7765
  %call5 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 0), !dbg !7765
  store %union.tree_node* %call5, %union.tree_node** %init, align 8, !dbg !7766
  %7 = load i8, i8* %written.addr, align 1, !dbg !7767
  %conv = zext i8 %7 to i32, !dbg !7767
  %tobool6 = icmp ne i32 %conv, 0, !dbg !7767
  %8 = zext i1 %tobool6 to i64, !dbg !7767
  %cond7 = select i1 %tobool6, i32 2, i32 1, !dbg !7767
  %call8 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %cond7), !dbg !7767
  %9 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7768
  store %struct.VEC_tree_heap* %call8, %struct.VEC_tree_heap** %9, align 8, !dbg !7769
  %10 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !7770
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars.addr, align 8, !dbg !7771
  %call9 = call %union.tree_node* @predcom_tmp_var(%union.tree_node* %10, i32 0, %struct.bitmap_head_def* %11), !dbg !7772
  store %union.tree_node* %call9, %union.tree_node** %var, align 8, !dbg !7773
  %12 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7774
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %12, align 8, !dbg !7774
  %tobool10 = icmp ne %struct.VEC_tree_heap* %13, null, !dbg !7774
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !7774

cond.true11:                                      ; preds = %cond.end
  %14 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7774
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %14, align 8, !dbg !7774
  %base12 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %15, i32 0, i32 0, !dbg !7774
  br label %cond.end14, !dbg !7774

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14, !dbg !7774

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_tree_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !7774
  %16 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7774
  %call16 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond15, %union.tree_node* %16), !dbg !7774
  %17 = load i8, i8* %written.addr, align 1, !dbg !7775
  %tobool17 = icmp ne i8 %17, 0, !dbg !7775
  br i1 %tobool17, label %if.then, label %if.end, !dbg !7777

if.then:                                          ; preds = %cond.end14
  %18 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7778
  %19 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %18, align 8, !dbg !7778
  %tobool18 = icmp ne %struct.VEC_tree_heap* %19, null, !dbg !7778
  br i1 %tobool18, label %cond.true19, label %cond.false21, !dbg !7778

cond.true19:                                      ; preds = %if.then
  %20 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7778
  %21 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %20, align 8, !dbg !7778
  %base20 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %21, i32 0, i32 0, !dbg !7778
  br label %cond.end22, !dbg !7778

cond.false21:                                     ; preds = %if.then
  br label %cond.end22, !dbg !7778

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi %struct.VEC_tree_base* [ %base20, %cond.true19 ], [ null, %cond.false21 ], !dbg !7778
  %22 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7778
  %23 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %22, align 8, !dbg !7778
  %tobool24 = icmp ne %struct.VEC_tree_heap* %23, null, !dbg !7778
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !7778

cond.true25:                                      ; preds = %cond.end22
  %24 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7778
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %24, align 8, !dbg !7778
  %base26 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %25, i32 0, i32 0, !dbg !7778
  br label %cond.end28, !dbg !7778

cond.false27:                                     ; preds = %cond.end22
  br label %cond.end28, !dbg !7778

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.VEC_tree_base* [ %base26, %cond.true25 ], [ null, %cond.false27 ], !dbg !7778
  %call30 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond29, i32 0), !dbg !7778
  %call31 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond23, %union.tree_node* %call30), !dbg !7778
  br label %if.end, !dbg !7778

if.end:                                           ; preds = %cond.end28, %cond.end14
  store i32 0, i32* %i, align 4, !dbg !7779
  br label %for.cond, !dbg !7781

for.cond:                                         ; preds = %for.inc, %if.end
  %26 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7782
  %27 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %26, align 8, !dbg !7782
  %tobool32 = icmp ne %struct.VEC_tree_heap* %27, null, !dbg !7782
  br i1 %tobool32, label %cond.true33, label %cond.false35, !dbg !7782

cond.true33:                                      ; preds = %for.cond
  %28 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7782
  %29 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %28, align 8, !dbg !7782
  %base34 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %29, i32 0, i32 0, !dbg !7782
  br label %cond.end36, !dbg !7782

cond.false35:                                     ; preds = %for.cond
  br label %cond.end36, !dbg !7782

cond.end36:                                       ; preds = %cond.false35, %cond.true33
  %cond37 = phi %struct.VEC_tree_base* [ %base34, %cond.true33 ], [ null, %cond.false35 ], !dbg !7782
  %30 = load i32, i32* %i, align 4, !dbg !7782
  %call38 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond37, i32 %30, %union.tree_node** %var), !dbg !7782
  %tobool39 = icmp ne i32 %call38, 0, !dbg !7784
  br i1 %tobool39, label %for.body, label %for.end, !dbg !7784

for.body:                                         ; preds = %cond.end36
  %31 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7785
  %32 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %31, align 8, !dbg !7785
  %tobool40 = icmp ne %struct.VEC_tree_heap* %32, null, !dbg !7785
  br i1 %tobool40, label %cond.true41, label %cond.false43, !dbg !7785

cond.true41:                                      ; preds = %for.body
  %33 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7785
  %34 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %33, align 8, !dbg !7785
  %base42 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %34, i32 0, i32 0, !dbg !7785
  br label %cond.end44, !dbg !7785

cond.false43:                                     ; preds = %for.body
  br label %cond.end44, !dbg !7785

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi %struct.VEC_tree_base* [ %base42, %cond.true41 ], [ null, %cond.false43 ], !dbg !7785
  %35 = load i32, i32* %i, align 4, !dbg !7785
  %36 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7785
  %call46 = call %union.tree_node* @make_ssa_name(%union.tree_node* %36, %union.gimple_statement_d* null), !dbg !7785
  %call47 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond45, i32 %35, %union.tree_node* %call46), !dbg !7785
  br label %for.inc, !dbg !7785

for.inc:                                          ; preds = %cond.end44
  %37 = load i32, i32* %i, align 4, !dbg !7786
  %inc = add i32 %37, 1, !dbg !7786
  store i32 %inc, i32* %i, align 4, !dbg !7786
  br label %for.cond, !dbg !7787, !llvm.loop !7788

for.end:                                          ; preds = %cond.end36
  %38 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7790
  %39 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %38, align 8, !dbg !7790
  %tobool48 = icmp ne %struct.VEC_tree_heap* %39, null, !dbg !7790
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !7790

cond.true49:                                      ; preds = %for.end
  %40 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7790
  %41 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %40, align 8, !dbg !7790
  %base50 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %41, i32 0, i32 0, !dbg !7790
  br label %cond.end52, !dbg !7790

cond.false51:                                     ; preds = %for.end
  br label %cond.end52, !dbg !7790

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_tree_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !7790
  %call54 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond53, i32 0), !dbg !7790
  store %union.tree_node* %call54, %union.tree_node** %var, align 8, !dbg !7791
  %42 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !7792
  %43 = load i8, i8* %written.addr, align 1, !dbg !7793
  %call55 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %42, %struct.gimple_seq_d** %stmts, i8 zeroext %43, %union.tree_node* null), !dbg !7794
  store %union.tree_node* %call55, %union.tree_node** %init, align 8, !dbg !7795
  %44 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !7796
  %tobool56 = icmp ne %struct.gimple_seq_d* %44, null, !dbg !7796
  br i1 %tobool56, label %if.then57, label %if.end59, !dbg !7798

if.then57:                                        ; preds = %cond.end52
  %45 = load %struct.edge_def*, %struct.edge_def** %entry3, align 8, !dbg !7799
  %46 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !7800
  %call58 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %45, %struct.gimple_seq_d* %46), !dbg !7801
  br label %if.end59, !dbg !7801

if.end59:                                         ; preds = %if.then57, %cond.end52
  %47 = load i8, i8* %written.addr, align 1, !dbg !7802
  %tobool60 = icmp ne i8 %47, 0, !dbg !7802
  br i1 %tobool60, label %if.then61, label %if.else, !dbg !7804

if.then61:                                        ; preds = %if.end59
  %48 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7805
  %49 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %48, align 8, !dbg !7805
  %tobool62 = icmp ne %struct.VEC_tree_heap* %49, null, !dbg !7805
  br i1 %tobool62, label %cond.true63, label %cond.false65, !dbg !7805

cond.true63:                                      ; preds = %if.then61
  %50 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vars.addr, align 8, !dbg !7805
  %51 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %50, align 8, !dbg !7805
  %base64 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %51, i32 0, i32 0, !dbg !7805
  br label %cond.end66, !dbg !7805

cond.false65:                                     ; preds = %if.then61
  br label %cond.end66, !dbg !7805

cond.end66:                                       ; preds = %cond.false65, %cond.true63
  %cond67 = phi %struct.VEC_tree_base* [ %base64, %cond.true63 ], [ null, %cond.false65 ], !dbg !7805
  %call68 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond67, i32 1), !dbg !7805
  store %union.tree_node* %call68, %union.tree_node** %next, align 8, !dbg !7807
  %52 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7808
  %53 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !7809
  %header = getelementptr inbounds %struct.loop, %struct.loop* %53, i32 0, i32 2, !dbg !7810
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !7810
  %call69 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %52, %struct.basic_block_def* %54), !dbg !7811
  store %union.gimple_statement_d* %call69, %union.gimple_statement_d** %phi, align 8, !dbg !7812
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7813
  %56 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7814
  %ssa_name = bitcast %union.tree_node* %56 to %struct.tree_ssa_name*, !dbg !7814
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7814
  store %union.gimple_statement_d* %55, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7815
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7816
  %58 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !7817
  %59 = load %struct.edge_def*, %struct.edge_def** %entry3, align 8, !dbg !7818
  call void @add_phi_arg(%union.gimple_statement_d* %57, %union.tree_node* %58, %struct.edge_def* %59, i32 0), !dbg !7819
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7820
  %61 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !7821
  %62 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !7822
  call void @add_phi_arg(%union.gimple_statement_d* %60, %union.tree_node* %61, %struct.edge_def* %62, i32 0), !dbg !7823
  br label %if.end72, !dbg !7824

if.else:                                          ; preds = %if.end59
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %init_stmt, metadata !7825, metadata !DIExpression()), !dbg !7827
  %63 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7828
  %64 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !7828
  %call70 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %63, %union.tree_node* %64), !dbg !7828
  store %union.gimple_statement_d* %call70, %union.gimple_statement_d** %init_stmt, align 8, !dbg !7827
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt, align 8, !dbg !7829
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %65), !dbg !7830
  %66 = load %struct.edge_def*, %struct.edge_def** %entry3, align 8, !dbg !7831
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %init_stmt, align 8, !dbg !7832
  %call71 = call %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def* %66, %union.gimple_statement_d* %67), !dbg !7833
  br label %if.end72

if.end72:                                         ; preds = %if.else, %cond.end66
  ret void, !dbg !7834
}

; Function Attrs: noinline nounwind uwtable
define internal void @replace_ref_with(%union.gimple_statement_d* %stmt, %union.tree_node* %new_tree, i8 zeroext %set, i8 zeroext %in_lhs) #0 !dbg !7835 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %new_tree.addr = alloca %union.tree_node*, align 8
  %set.addr = alloca i8, align 1
  %in_lhs.addr = alloca i8, align 1
  %val = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp5 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp13 = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7838, metadata !DIExpression()), !dbg !7839
  store %union.tree_node* %new_tree, %union.tree_node** %new_tree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_tree.addr, metadata !7840, metadata !DIExpression()), !dbg !7841
  store i8 %set, i8* %set.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %set.addr, metadata !7842, metadata !DIExpression()), !dbg !7843
  store i8 %in_lhs, i8* %in_lhs.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %in_lhs.addr, metadata !7844, metadata !DIExpression()), !dbg !7845
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !7846, metadata !DIExpression()), !dbg !7847
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !7848, metadata !DIExpression()), !dbg !7849
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !7850, metadata !DIExpression()), !dbg !7851
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !7852, metadata !DIExpression()), !dbg !7853
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7854
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7856
  %cmp = icmp eq i32 %call, 16, !dbg !7857
  br i1 %cmp, label %if.then, label %if.end, !dbg !7858

if.then:                                          ; preds = %entry
  %1 = load i8, i8* %in_lhs.addr, align 1, !dbg !7859
  %tobool = icmp ne i8 %1, 0, !dbg !7859
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !7859

land.lhs.true:                                    ; preds = %if.then
  %2 = load i8, i8* %set.addr, align 1, !dbg !7859
  %tobool1 = icmp ne i8 %2, 0, !dbg !7859
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7859

cond.true:                                        ; preds = %land.lhs.true, %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1260, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !7859
  br label %cond.end, !dbg !7859

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7859

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7859
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7861
  %call2 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %3), !dbg !7861
  %call3 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call2), !dbg !7861
  store %union.tree_node* %call3, %union.tree_node** %val, align 8, !dbg !7862
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7863
  %call4 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %4), !dbg !7864
  call void @gsi_after_labels(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %call4), !dbg !7865
  %5 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !7865
  %6 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !7865
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 24, i1 false), !dbg !7865
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7866
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp5, %union.gimple_statement_d* %7), !dbg !7867
  %8 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !7867
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp5 to i8*, !dbg !7867
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !7867
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %psi, i8 zeroext 0), !dbg !7868
  %10 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7869
  %11 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !7869
  %call6 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %10, %union.tree_node* %11), !dbg !7869
  store %union.gimple_statement_d* %call6, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7870
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7871
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %12, i32 0), !dbg !7872
  br label %return, !dbg !7873

if.end:                                           ; preds = %entry
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7874
  %call7 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %13), !dbg !7874
  %tobool8 = icmp ne i8 %call7, 0, !dbg !7874
  br i1 %tobool8, label %cond.false10, label %cond.true9, !dbg !7874

cond.true9:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1275, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !7874
  br label %cond.end11, !dbg !7874

cond.false10:                                     ; preds = %if.end
  br label %cond.end11, !dbg !7874

cond.end11:                                       ; preds = %cond.false10, %cond.true9
  %cond12 = phi i32 [ 0, %cond.true9 ], [ 0, %cond.false10 ], !dbg !7874
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7875
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp13, %union.gimple_statement_d* %14), !dbg !7876
  %15 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !7876
  %16 = bitcast %struct.gimple_stmt_iterator* %tmp13 to i8*, !dbg !7876
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 24, i1 false), !dbg !7876
  %17 = load i8, i8* %set.addr, align 1, !dbg !7877
  %tobool14 = icmp ne i8 %17, 0, !dbg !7877
  br i1 %tobool14, label %if.end22, label %if.then15, !dbg !7879

if.then15:                                        ; preds = %cond.end11
  %18 = load i8, i8* %in_lhs.addr, align 1, !dbg !7880
  %tobool16 = icmp ne i8 %18, 0, !dbg !7880
  br i1 %tobool16, label %cond.true17, label %cond.false18, !dbg !7880

cond.true17:                                      ; preds = %if.then15
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1282, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !7880
  br label %cond.end19, !dbg !7880

cond.false18:                                     ; preds = %if.then15
  br label %cond.end19, !dbg !7880

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i32 [ 0, %cond.true17 ], [ 0, %cond.false18 ], !dbg !7880
  %19 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !7882
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %bsi, %union.tree_node* %19), !dbg !7883
  %call21 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi), !dbg !7884
  store %union.gimple_statement_d* %call21, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7885
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7886
  call void @update_stmt(%union.gimple_statement_d* %20), !dbg !7887
  br label %return, !dbg !7888

if.end22:                                         ; preds = %cond.end11
  %21 = load i8, i8* %in_lhs.addr, align 1, !dbg !7889
  %tobool23 = icmp ne i8 %21, 0, !dbg !7889
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !7891

if.then24:                                        ; preds = %if.end22
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7892
  %call25 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %22), !dbg !7894
  store %union.tree_node* %call25, %union.tree_node** %val, align 8, !dbg !7895
  %23 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7896
  %base = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !7896
  %24 = bitcast %struct.tree_base* %base to i64*, !dbg !7896
  %bf.load = load i64, i64* %24, align 8, !dbg !7896
  %bf.clear = and i64 %bf.load, 65535, !dbg !7896
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7896
  %cmp26 = icmp ne i32 %bf.cast, 141, !dbg !7898
  br i1 %cmp26, label %if.then27, label %if.end35, !dbg !7899

if.then27:                                        ; preds = %if.then24
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7900
  %call28 = call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %25), !dbg !7900
  %tobool29 = icmp ne i8 %call28, 0, !dbg !7900
  br i1 %tobool29, label %cond.false31, label %cond.true30, !dbg !7900

cond.true30:                                      ; preds = %if.then27
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1313, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !7900
  br label %cond.end32, !dbg !7900

cond.false31:                                     ; preds = %if.then27
  br label %cond.end32, !dbg !7900

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !7900
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7902
  %call34 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %26), !dbg !7903
  store %union.tree_node* %call34, %union.tree_node** %val, align 8, !dbg !7904
  br label %if.end35, !dbg !7905

if.end35:                                         ; preds = %cond.end32, %if.then24
  br label %if.end37, !dbg !7906

if.else:                                          ; preds = %if.end22
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7907
  %call36 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %27), !dbg !7909
  store %union.tree_node* %call36, %union.tree_node** %val, align 8, !dbg !7910
  br label %if.end37

if.end37:                                         ; preds = %if.else, %if.end35
  %28 = load %union.tree_node*, %union.tree_node** %new_tree.addr, align 8, !dbg !7911
  %29 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7911
  %call38 = call %union.tree_node* @unshare_expr(%union.tree_node* %29), !dbg !7911
  %call39 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %28, %union.tree_node* %call38), !dbg !7911
  store %union.gimple_statement_d* %call39, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7912
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !7913
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %bsi, %union.gimple_statement_d* %30, i32 0), !dbg !7914
  br label %return, !dbg !7915

return:                                           ; preds = %if.end37, %cond.end19, %cond.end
  ret void, !dbg !7915
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @predcom_tmp_var(%union.tree_node* %ref, i32 %i, %struct.bitmap_head_def* %tmp_vars) #0 !dbg !7916 {
entry:
  %ref.addr = alloca %union.tree_node*, align 8
  %i.addr = alloca i32, align 4
  %tmp_vars.addr = alloca %struct.bitmap_head_def*, align 8
  %type = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref.addr, metadata !7919, metadata !DIExpression()), !dbg !7920
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7921, metadata !DIExpression()), !dbg !7922
  store %struct.bitmap_head_def* %tmp_vars, %struct.bitmap_head_def** %tmp_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp_vars.addr, metadata !7923, metadata !DIExpression()), !dbg !7924
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7925, metadata !DIExpression()), !dbg !7926
  %0 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !7927
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !7927
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7927
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !7927
  store %union.tree_node* %1, %union.tree_node** %type, align 8, !dbg !7926
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !7928, metadata !DIExpression()), !dbg !7929
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7930
  %3 = load %union.tree_node*, %union.tree_node** %ref.addr, align 8, !dbg !7931
  %4 = load i32, i32* %i.addr, align 4, !dbg !7932
  %call = call i8* @get_lsm_tmp_name(%union.tree_node* %3, i32 %4), !dbg !7933
  %call2 = call %union.tree_node* @create_tmp_var(%union.tree_node* %2, i8* %call), !dbg !7934
  store %union.tree_node* %call2, %union.tree_node** %var, align 8, !dbg !7929
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7935
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7935
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !7935
  %bf.load = load i64, i64* %6, align 8, !dbg !7935
  %bf.clear = and i64 %bf.load, 65535, !dbg !7935
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7935
  %cmp = icmp eq i32 %bf.cast, 13, !dbg !7937
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7938

lor.lhs.false:                                    ; preds = %entry
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7939
  %base3 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7939
  %8 = bitcast %struct.tree_base* %base3 to i64*, !dbg !7939
  %bf.load4 = load i64, i64* %8, align 8, !dbg !7939
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !7939
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !7939
  %cmp7 = icmp eq i32 %bf.cast6, 14, !dbg !7940
  br i1 %cmp7, label %if.then, label %if.end, !dbg !7941

if.then:                                          ; preds = %lor.lhs.false, %entry
  %9 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7942
  %decl_common = bitcast %union.tree_node* %9 to %struct.tree_decl_common*, !dbg !7942
  %gimple_reg_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7942
  %10 = bitcast i40* %gimple_reg_flag to i64*, !dbg !7942
  %bf.load8 = load i64, i64* %10, align 8, !dbg !7943
  %bf.clear9 = and i64 %bf.load8, -134217729, !dbg !7943
  %bf.set = or i64 %bf.clear9, 134217728, !dbg !7943
  store i64 %bf.set, i64* %10, align 8, !dbg !7943
  br label %if.end, !dbg !7942

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7944
  %call10 = call zeroext i8 @add_referenced_var(%union.tree_node* %11), !dbg !7945
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars.addr, align 8, !dbg !7946
  %13 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7947
  %decl_minimal = bitcast %union.tree_node* %13 to %struct.tree_decl_minimal*, !dbg !7947
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !7947
  %14 = load i32, i32* %uid, align 4, !dbg !7947
  %call11 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %12, i32 %14), !dbg !7948
  %15 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7949
  ret %union.tree_node* %15, !dbg !7950
}

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) #2

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def*, %union.gimple_statement_d*) #2

declare dso_local i8* @get_lsm_tmp_name(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !7951 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7954, metadata !DIExpression()), !dbg !7955
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !7956, metadata !DIExpression()), !dbg !7957
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7958
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %0), !dbg !7959
  br label %while.cond, !dbg !7960

while.cond:                                       ; preds = %while.body, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !7961
  %tobool = icmp ne i8 %call, 0, !dbg !7961
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !7962

land.rhs:                                         ; preds = %while.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result), !dbg !7963
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %call1), !dbg !7964
  %cmp = icmp eq i32 %call2, 4, !dbg !7965
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %1 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !7966
  br i1 %1, label %while.body, label %while.end, !dbg !7960

while.body:                                       ; preds = %land.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %agg.result), !dbg !7967
  br label %while.cond, !dbg !7960, !llvm.loop !7968

while.end:                                        ; preds = %land.end
  ret void, !dbg !7970
}

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !7971 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7972, metadata !DIExpression()), !dbg !7973
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !7974, metadata !DIExpression()), !dbg !7975
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !7976, metadata !DIExpression()), !dbg !7977
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7978
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !7979
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !7980
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7981
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !7982
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !7983
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !7984
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7985
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !7986
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !7987
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7988
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !7989
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !7990
  ret void, !dbg !7991
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !7992 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7995, metadata !DIExpression()), !dbg !7996
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7997
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !7998
  %1 = load i32, i32* %flags, align 8, !dbg !7998
  %and = and i32 %1, 512, !dbg !7999
  %tobool = icmp ne i32 %and, 0, !dbg !7999
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !8000

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8001
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !8002
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !8003
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !8003
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !8001
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8004

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8005
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !8006
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !8007
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !8007
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !8008
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8008
  br label %cond.end, !dbg !8004

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !8004

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !8004
  ret %struct.gimple_seq_d* %cond, !dbg !8009
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !8010 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !8016, metadata !DIExpression()), !dbg !8017
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8018
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !8018
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8018

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8019
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !8020
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !8020
  br label %cond.end, !dbg !8018

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8018

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !8018
  ret %struct.gimple_seq_node_d* %cond, !dbg !8021
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !8022 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %name = alloca %union.tree_node*, align 8
  %next = alloca %union.gimple_statement_d*, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp11 = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8023, metadata !DIExpression()), !dbg !8024
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !8025, metadata !DIExpression()), !dbg !8026
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %next, metadata !8027, metadata !DIExpression()), !dbg !8028
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !8029, metadata !DIExpression()), !dbg !8030
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8031
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8033
  %cmp = icmp eq i32 %call, 16, !dbg !8034
  br i1 %cmp, label %if.then, label %if.end10, !dbg !8035

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8036
  %call1 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %1), !dbg !8036
  %call2 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call1), !dbg !8036
  store %union.tree_node* %call2, %union.tree_node** %name, align 8, !dbg !8038
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8039
  %call3 = call %union.gimple_statement_d* @single_nonlooparound_use(%union.tree_node* %2), !dbg !8040
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %next, align 8, !dbg !8041
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8042
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %3), !dbg !8043
  %4 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !8043
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8043
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !8043
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %psi, i8 zeroext 1), !dbg !8044
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !8045
  %tobool = icmp ne %union.gimple_statement_d* %6, null, !dbg !8045
  br i1 %tobool, label %lor.lhs.false, label %if.then9, !dbg !8047

lor.lhs.false:                                    ; preds = %if.then
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !8048
  %call4 = call zeroext i8 @gimple_assign_ssa_name_copy_p(%union.gimple_statement_d* %7), !dbg !8049
  %tobool5 = icmp ne i8 %call4, 0, !dbg !8049
  br i1 %tobool5, label %lor.lhs.false6, label %if.then9, !dbg !8050

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !8051
  %call7 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %8), !dbg !8052
  %9 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8053
  %cmp8 = icmp ne %union.tree_node* %call7, %9, !dbg !8054
  br i1 %cmp8, label %if.then9, label %if.end, !dbg !8055

if.then9:                                         ; preds = %lor.lhs.false6, %lor.lhs.false, %if.then
  br label %return, !dbg !8056

if.end:                                           ; preds = %lor.lhs.false6
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !8057
  store %union.gimple_statement_d* %10, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8058
  br label %if.end10, !dbg !8059

if.end10:                                         ; preds = %if.end, %entry
  br label %while.body, !dbg !8060

while.body:                                       ; preds = %if.end10, %if.end23
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !8061, metadata !DIExpression()), !dbg !8063
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8064
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp11, %union.gimple_statement_d* %11), !dbg !8065
  %12 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !8065
  %13 = bitcast %struct.gimple_stmt_iterator* %tmp11 to i8*, !dbg !8065
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false), !dbg !8065
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8066
  %call12 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %14), !dbg !8067
  store %union.tree_node* %call12, %union.tree_node** %name, align 8, !dbg !8068
  %15 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8069
  %base = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !8069
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !8069
  %bf.load = load i64, i64* %16, align 8, !dbg !8069
  %bf.clear = and i64 %bf.load, 65535, !dbg !8069
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8069
  %cmp13 = icmp eq i32 %bf.cast, 141, !dbg !8069
  br i1 %cmp13, label %cond.false, label %cond.true, !dbg !8069

cond.true:                                        ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1723, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !8069
  br label %cond.end, !dbg !8069

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !8069

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8069
  %17 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8070
  %call14 = call %union.gimple_statement_d* @single_nonlooparound_use(%union.tree_node* %17), !dbg !8071
  store %union.gimple_statement_d* %call14, %union.gimple_statement_d** %next, align 8, !dbg !8072
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8073
  call void @mark_virtual_ops_for_renaming(%union.gimple_statement_d* %18), !dbg !8074
  call void @gsi_remove(%struct.gimple_stmt_iterator* %bsi, i8 zeroext 1), !dbg !8075
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8076
  call void @release_defs(%union.gimple_statement_d* %19), !dbg !8077
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !8078
  %tobool15 = icmp ne %union.gimple_statement_d* %20, null, !dbg !8078
  br i1 %tobool15, label %lor.lhs.false16, label %if.then22, !dbg !8080

lor.lhs.false16:                                  ; preds = %cond.end
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !8081
  %call17 = call zeroext i8 @gimple_assign_ssa_name_copy_p(%union.gimple_statement_d* %21), !dbg !8082
  %tobool18 = icmp ne i8 %call17, 0, !dbg !8082
  br i1 %tobool18, label %lor.lhs.false19, label %if.then22, !dbg !8083

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !8084
  %call20 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %22), !dbg !8085
  %23 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8086
  %cmp21 = icmp ne %union.tree_node* %call20, %23, !dbg !8087
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !8088

if.then22:                                        ; preds = %lor.lhs.false19, %lor.lhs.false16, %cond.end
  br label %return, !dbg !8089

if.end23:                                         ; preds = %lor.lhs.false19
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next, align 8, !dbg !8090
  store %union.gimple_statement_d* %24, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8091
  br label %while.body, !dbg !8060, !llvm.loop !8092

return:                                           ; preds = %if.then22, %if.then9
  ret void, !dbg !8094
}

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_root(%struct.loop* %loop, %struct.chain* %chain, %struct.bitmap_head_def* %tmp_vars) #0 !dbg !8095 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chain.addr = alloca %struct.chain*, align 8
  %tmp_vars.addr = alloca %struct.bitmap_head_def*, align 8
  %root = alloca %struct.dref_d*, align 8
  %in_lhs = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8096, metadata !DIExpression()), !dbg !8097
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !8098, metadata !DIExpression()), !dbg !8099
  store %struct.bitmap_head_def* %tmp_vars, %struct.bitmap_head_def** %tmp_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp_vars.addr, metadata !8100, metadata !DIExpression()), !dbg !8101
  call void @llvm.dbg.declare(metadata %struct.dref_d** %root, metadata !8102, metadata !DIExpression()), !dbg !8103
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8104
  %call = call %struct.dref_d* @get_chain_root(%struct.chain* %0), !dbg !8105
  store %struct.dref_d* %call, %struct.dref_d** %root, align 8, !dbg !8103
  call void @llvm.dbg.declare(metadata i8* %in_lhs, metadata !8106, metadata !DIExpression()), !dbg !8107
  %1 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8108
  %type = getelementptr inbounds %struct.chain, %struct.chain* %1, i32 0, i32 0, !dbg !8109
  %2 = load i32, i32* %type, align 8, !dbg !8109
  %cmp = icmp eq i32 %2, 2, !dbg !8110
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !8111

lor.rhs:                                          ; preds = %entry
  %3 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8112
  %type1 = getelementptr inbounds %struct.chain, %struct.chain* %3, i32 0, i32 0, !dbg !8113
  %4 = load i32, i32* %type1, align 8, !dbg !8113
  %cmp2 = icmp eq i32 %4, 3, !dbg !8114
  br label %lor.end, !dbg !8111

lor.end:                                          ; preds = %lor.rhs, %entry
  %5 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %5 to i32, !dbg !8111
  %conv = trunc i32 %lor.ext to i8, !dbg !8115
  store i8 %conv, i8* %in_lhs, align 1, !dbg !8107
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8116
  %7 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8117
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars.addr, align 8, !dbg !8118
  call void @initialize_root_vars(%struct.loop* %6, %struct.chain* %7, %struct.bitmap_head_def* %8), !dbg !8119
  %9 = load %struct.dref_d*, %struct.dref_d** %root, align 8, !dbg !8120
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %9, i32 0, i32 1, !dbg !8121
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8121
  %11 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8122
  %vars = getelementptr inbounds %struct.chain, %struct.chain* %11, i32 0, i32 7, !dbg !8122
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars, align 8, !dbg !8122
  %tobool = icmp ne %struct.VEC_tree_heap* %12, null, !dbg !8122
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8122

cond.true:                                        ; preds = %lor.end
  %13 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8122
  %vars3 = getelementptr inbounds %struct.chain, %struct.chain* %13, i32 0, i32 7, !dbg !8122
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars3, align 8, !dbg !8122
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %14, i32 0, i32 0, !dbg !8122
  br label %cond.end, !dbg !8122

cond.false:                                       ; preds = %lor.end
  br label %cond.end, !dbg !8122

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8122
  %15 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8122
  %length = getelementptr inbounds %struct.chain, %struct.chain* %15, i32 0, i32 6, !dbg !8122
  %16 = load i32, i32* %length, align 8, !dbg !8122
  %call4 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %16), !dbg !8122
  %17 = load i8, i8* %in_lhs, align 1, !dbg !8123
  call void @replace_ref_with(%union.gimple_statement_d* %10, %union.tree_node* %call4, i8 zeroext 1, i8 zeroext %17), !dbg !8124
  ret void, !dbg !8125
}

declare dso_local zeroext i8 @gimple_assign_ssa_name_copy_p(%union.gimple_statement_d*) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @release_defs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_root_vars(%struct.loop* %loop, %struct.chain* %chain, %struct.bitmap_head_def* %tmp_vars) #0 !dbg !8126 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chain.addr = alloca %struct.chain*, align 8
  %tmp_vars.addr = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %root = alloca %struct.dref_d*, align 8
  %reuse_first = alloca i8, align 1
  %ref = alloca %union.tree_node*, align 8
  %init = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %next = alloca %union.tree_node*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %entry1 = alloca %struct.edge_def*, align 8
  %latch = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !8127, metadata !DIExpression()), !dbg !8128
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !8129, metadata !DIExpression()), !dbg !8130
  store %struct.bitmap_head_def* %tmp_vars, %struct.bitmap_head_def** %tmp_vars.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp_vars.addr, metadata !8131, metadata !DIExpression()), !dbg !8132
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8133, metadata !DIExpression()), !dbg !8134
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8135, metadata !DIExpression()), !dbg !8136
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8137
  %length = getelementptr inbounds %struct.chain, %struct.chain* %0, i32 0, i32 6, !dbg !8138
  %1 = load i32, i32* %length, align 8, !dbg !8138
  store i32 %1, i32* %n, align 4, !dbg !8136
  call void @llvm.dbg.declare(metadata %struct.dref_d** %root, metadata !8139, metadata !DIExpression()), !dbg !8140
  %2 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8141
  %call = call %struct.dref_d* @get_chain_root(%struct.chain* %2), !dbg !8142
  store %struct.dref_d* %call, %struct.dref_d** %root, align 8, !dbg !8140
  call void @llvm.dbg.declare(metadata i8* %reuse_first, metadata !8143, metadata !DIExpression()), !dbg !8144
  %3 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8145
  %has_max_use_after = getelementptr inbounds %struct.chain, %struct.chain* %3, i32 0, i32 9, !dbg !8146
  %bf.load = load i8, i8* %has_max_use_after, align 8, !dbg !8146
  %bf.clear = and i8 %bf.load, 1, !dbg !8146
  %bf.cast = zext i8 %bf.clear to i32, !dbg !8146
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8147
  %lnot = xor i1 %tobool, true, !dbg !8147
  %lnot.ext = zext i1 %lnot to i32, !dbg !8147
  %conv = trunc i32 %lnot.ext to i8, !dbg !8147
  store i8 %conv, i8* %reuse_first, align 1, !dbg !8144
  call void @llvm.dbg.declare(metadata %union.tree_node** %ref, metadata !8148, metadata !DIExpression()), !dbg !8149
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !8150, metadata !DIExpression()), !dbg !8151
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8152, metadata !DIExpression()), !dbg !8153
  call void @llvm.dbg.declare(metadata %union.tree_node** %next, metadata !8154, metadata !DIExpression()), !dbg !8155
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !8156, metadata !DIExpression()), !dbg !8157
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !8158, metadata !DIExpression()), !dbg !8159
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry1, metadata !8160, metadata !DIExpression()), !dbg !8161
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8162
  %call2 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %4), !dbg !8163
  store %struct.edge_def* %call2, %struct.edge_def** %entry1, align 8, !dbg !8161
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch, metadata !8164, metadata !DIExpression()), !dbg !8165
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8166
  %call3 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %5), !dbg !8167
  store %struct.edge_def* %call3, %struct.edge_def** %latch, align 8, !dbg !8165
  %6 = load i32, i32* %n, align 4, !dbg !8168
  %cmp = icmp ugt i32 %6, 0, !dbg !8168
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !8168

lor.lhs.false:                                    ; preds = %entry
  %7 = load i8, i8* %reuse_first, align 1, !dbg !8168
  %tobool5 = icmp ne i8 %7, 0, !dbg !8168
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !8168

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i32 1499, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !8168
  br label %cond.end, !dbg !8168

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !8168

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8168
  %8 = load i32, i32* %n, align 4, !dbg !8169
  %add = add i32 %8, 1, !dbg !8169
  %call6 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %add), !dbg !8169
  %9 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8170
  %vars = getelementptr inbounds %struct.chain, %struct.chain* %9, i32 0, i32 7, !dbg !8171
  store %struct.VEC_tree_heap* %call6, %struct.VEC_tree_heap** %vars, align 8, !dbg !8172
  %10 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8173
  %type = getelementptr inbounds %struct.chain, %struct.chain* %10, i32 0, i32 0, !dbg !8175
  %11 = load i32, i32* %type, align 8, !dbg !8175
  %cmp7 = icmp eq i32 %11, 3, !dbg !8176
  br i1 %cmp7, label %if.then, label %if.else, !dbg !8177

if.then:                                          ; preds = %cond.end
  %12 = load %struct.dref_d*, %struct.dref_d** %root, align 8, !dbg !8178
  %stmt = getelementptr inbounds %struct.dref_d, %struct.dref_d* %12, i32 0, i32 1, !dbg !8179
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8179
  %call9 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %13), !dbg !8180
  store %union.tree_node* %call9, %union.tree_node** %ref, align 8, !dbg !8181
  br label %if.end, !dbg !8182

if.else:                                          ; preds = %cond.end
  %14 = load %struct.dref_d*, %struct.dref_d** %root, align 8, !dbg !8183
  %ref10 = getelementptr inbounds %struct.dref_d, %struct.dref_d* %14, i32 0, i32 0, !dbg !8183
  %15 = load %struct.data_reference*, %struct.data_reference** %ref10, align 8, !dbg !8183
  %ref11 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %15, i32 0, i32 1, !dbg !8183
  %16 = load %union.tree_node*, %union.tree_node** %ref11, align 8, !dbg !8183
  store %union.tree_node* %16, %union.tree_node** %ref, align 8, !dbg !8184
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %i, align 4, !dbg !8185
  br label %for.cond, !dbg !8187

for.cond:                                         ; preds = %for.inc, %if.end
  %17 = load i32, i32* %i, align 4, !dbg !8188
  %18 = load i32, i32* %n, align 4, !dbg !8190
  %19 = load i8, i8* %reuse_first, align 1, !dbg !8191
  %conv12 = zext i8 %19 to i32, !dbg !8191
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !8191
  %20 = zext i1 %tobool13 to i64, !dbg !8191
  %cond14 = select i1 %tobool13, i32 0, i32 1, !dbg !8191
  %add15 = add i32 %18, %cond14, !dbg !8192
  %cmp16 = icmp ult i32 %17, %add15, !dbg !8193
  br i1 %cmp16, label %for.body, label %for.end, !dbg !8194

for.body:                                         ; preds = %for.cond
  %21 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !8195
  %22 = load i32, i32* %i, align 4, !dbg !8197
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp_vars.addr, align 8, !dbg !8198
  %call18 = call %union.tree_node* @predcom_tmp_var(%union.tree_node* %21, i32 %22, %struct.bitmap_head_def* %23), !dbg !8199
  store %union.tree_node* %call18, %union.tree_node** %var, align 8, !dbg !8200
  %24 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8201
  %vars19 = getelementptr inbounds %struct.chain, %struct.chain* %24, i32 0, i32 7, !dbg !8201
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars19, align 8, !dbg !8201
  %tobool20 = icmp ne %struct.VEC_tree_heap* %25, null, !dbg !8201
  br i1 %tobool20, label %cond.true21, label %cond.false23, !dbg !8201

cond.true21:                                      ; preds = %for.body
  %26 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8201
  %vars22 = getelementptr inbounds %struct.chain, %struct.chain* %26, i32 0, i32 7, !dbg !8201
  %27 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars22, align 8, !dbg !8201
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %27, i32 0, i32 0, !dbg !8201
  br label %cond.end24, !dbg !8201

cond.false23:                                     ; preds = %for.body
  br label %cond.end24, !dbg !8201

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi %struct.VEC_tree_base* [ %base, %cond.true21 ], [ null, %cond.false23 ], !dbg !8201
  %28 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8201
  %call26 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond25, %union.tree_node* %28), !dbg !8201
  br label %for.inc, !dbg !8202

for.inc:                                          ; preds = %cond.end24
  %29 = load i32, i32* %i, align 4, !dbg !8203
  %inc = add i32 %29, 1, !dbg !8203
  store i32 %inc, i32* %i, align 4, !dbg !8203
  br label %for.cond, !dbg !8204, !llvm.loop !8205

for.end:                                          ; preds = %for.cond
  %30 = load i8, i8* %reuse_first, align 1, !dbg !8207
  %tobool27 = icmp ne i8 %30, 0, !dbg !8207
  br i1 %tobool27, label %if.then28, label %if.end47, !dbg !8209

if.then28:                                        ; preds = %for.end
  %31 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8210
  %vars29 = getelementptr inbounds %struct.chain, %struct.chain* %31, i32 0, i32 7, !dbg !8210
  %32 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars29, align 8, !dbg !8210
  %tobool30 = icmp ne %struct.VEC_tree_heap* %32, null, !dbg !8210
  br i1 %tobool30, label %cond.true31, label %cond.false34, !dbg !8210

cond.true31:                                      ; preds = %if.then28
  %33 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8210
  %vars32 = getelementptr inbounds %struct.chain, %struct.chain* %33, i32 0, i32 7, !dbg !8210
  %34 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars32, align 8, !dbg !8210
  %base33 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %34, i32 0, i32 0, !dbg !8210
  br label %cond.end35, !dbg !8210

cond.false34:                                     ; preds = %if.then28
  br label %cond.end35, !dbg !8210

cond.end35:                                       ; preds = %cond.false34, %cond.true31
  %cond36 = phi %struct.VEC_tree_base* [ %base33, %cond.true31 ], [ null, %cond.false34 ], !dbg !8210
  %35 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8210
  %vars37 = getelementptr inbounds %struct.chain, %struct.chain* %35, i32 0, i32 7, !dbg !8210
  %36 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars37, align 8, !dbg !8210
  %tobool38 = icmp ne %struct.VEC_tree_heap* %36, null, !dbg !8210
  br i1 %tobool38, label %cond.true39, label %cond.false42, !dbg !8210

cond.true39:                                      ; preds = %cond.end35
  %37 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8210
  %vars40 = getelementptr inbounds %struct.chain, %struct.chain* %37, i32 0, i32 7, !dbg !8210
  %38 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars40, align 8, !dbg !8210
  %base41 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %38, i32 0, i32 0, !dbg !8210
  br label %cond.end43, !dbg !8210

cond.false42:                                     ; preds = %cond.end35
  br label %cond.end43, !dbg !8210

cond.end43:                                       ; preds = %cond.false42, %cond.true39
  %cond44 = phi %struct.VEC_tree_base* [ %base41, %cond.true39 ], [ null, %cond.false42 ], !dbg !8210
  %call45 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond44, i32 0), !dbg !8210
  %call46 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond36, %union.tree_node* %call45), !dbg !8210
  br label %if.end47, !dbg !8210

if.end47:                                         ; preds = %cond.end43, %for.end
  store i32 0, i32* %i, align 4, !dbg !8211
  br label %for.cond48, !dbg !8213

for.cond48:                                       ; preds = %for.inc70, %if.end47
  %39 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8214
  %vars49 = getelementptr inbounds %struct.chain, %struct.chain* %39, i32 0, i32 7, !dbg !8214
  %40 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars49, align 8, !dbg !8214
  %tobool50 = icmp ne %struct.VEC_tree_heap* %40, null, !dbg !8214
  br i1 %tobool50, label %cond.true51, label %cond.false54, !dbg !8214

cond.true51:                                      ; preds = %for.cond48
  %41 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8214
  %vars52 = getelementptr inbounds %struct.chain, %struct.chain* %41, i32 0, i32 7, !dbg !8214
  %42 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars52, align 8, !dbg !8214
  %base53 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %42, i32 0, i32 0, !dbg !8214
  br label %cond.end55, !dbg !8214

cond.false54:                                     ; preds = %for.cond48
  br label %cond.end55, !dbg !8214

cond.end55:                                       ; preds = %cond.false54, %cond.true51
  %cond56 = phi %struct.VEC_tree_base* [ %base53, %cond.true51 ], [ null, %cond.false54 ], !dbg !8214
  %43 = load i32, i32* %i, align 4, !dbg !8214
  %call57 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond56, i32 %43, %union.tree_node** %var), !dbg !8214
  %tobool58 = icmp ne i32 %call57, 0, !dbg !8216
  br i1 %tobool58, label %for.body59, label %for.end72, !dbg !8216

for.body59:                                       ; preds = %cond.end55
  %44 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8217
  %vars60 = getelementptr inbounds %struct.chain, %struct.chain* %44, i32 0, i32 7, !dbg !8217
  %45 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars60, align 8, !dbg !8217
  %tobool61 = icmp ne %struct.VEC_tree_heap* %45, null, !dbg !8217
  br i1 %tobool61, label %cond.true62, label %cond.false65, !dbg !8217

cond.true62:                                      ; preds = %for.body59
  %46 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8217
  %vars63 = getelementptr inbounds %struct.chain, %struct.chain* %46, i32 0, i32 7, !dbg !8217
  %47 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars63, align 8, !dbg !8217
  %base64 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %47, i32 0, i32 0, !dbg !8217
  br label %cond.end66, !dbg !8217

cond.false65:                                     ; preds = %for.body59
  br label %cond.end66, !dbg !8217

cond.end66:                                       ; preds = %cond.false65, %cond.true62
  %cond67 = phi %struct.VEC_tree_base* [ %base64, %cond.true62 ], [ null, %cond.false65 ], !dbg !8217
  %48 = load i32, i32* %i, align 4, !dbg !8217
  %49 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8217
  %call68 = call %union.tree_node* @make_ssa_name(%union.tree_node* %49, %union.gimple_statement_d* null), !dbg !8217
  %call69 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond67, i32 %48, %union.tree_node* %call68), !dbg !8217
  br label %for.inc70, !dbg !8217

for.inc70:                                        ; preds = %cond.end66
  %50 = load i32, i32* %i, align 4, !dbg !8218
  %inc71 = add i32 %50, 1, !dbg !8218
  store i32 %inc71, i32* %i, align 4, !dbg !8218
  br label %for.cond48, !dbg !8219, !llvm.loop !8220

for.end72:                                        ; preds = %cond.end55
  store i32 0, i32* %i, align 4, !dbg !8222
  br label %for.cond73, !dbg !8224

for.cond73:                                       ; preds = %for.inc103, %for.end72
  %51 = load i32, i32* %i, align 4, !dbg !8225
  %52 = load i32, i32* %n, align 4, !dbg !8227
  %cmp74 = icmp ult i32 %51, %52, !dbg !8228
  br i1 %cmp74, label %for.body76, label %for.end105, !dbg !8229

for.body76:                                       ; preds = %for.cond73
  %53 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8230
  %vars77 = getelementptr inbounds %struct.chain, %struct.chain* %53, i32 0, i32 7, !dbg !8230
  %54 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars77, align 8, !dbg !8230
  %tobool78 = icmp ne %struct.VEC_tree_heap* %54, null, !dbg !8230
  br i1 %tobool78, label %cond.true79, label %cond.false82, !dbg !8230

cond.true79:                                      ; preds = %for.body76
  %55 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8230
  %vars80 = getelementptr inbounds %struct.chain, %struct.chain* %55, i32 0, i32 7, !dbg !8230
  %56 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars80, align 8, !dbg !8230
  %base81 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %56, i32 0, i32 0, !dbg !8230
  br label %cond.end83, !dbg !8230

cond.false82:                                     ; preds = %for.body76
  br label %cond.end83, !dbg !8230

cond.end83:                                       ; preds = %cond.false82, %cond.true79
  %cond84 = phi %struct.VEC_tree_base* [ %base81, %cond.true79 ], [ null, %cond.false82 ], !dbg !8230
  %57 = load i32, i32* %i, align 4, !dbg !8230
  %call85 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond84, i32 %57), !dbg !8230
  store %union.tree_node* %call85, %union.tree_node** %var, align 8, !dbg !8232
  %58 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8233
  %vars86 = getelementptr inbounds %struct.chain, %struct.chain* %58, i32 0, i32 7, !dbg !8233
  %59 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars86, align 8, !dbg !8233
  %tobool87 = icmp ne %struct.VEC_tree_heap* %59, null, !dbg !8233
  br i1 %tobool87, label %cond.true88, label %cond.false91, !dbg !8233

cond.true88:                                      ; preds = %cond.end83
  %60 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8233
  %vars89 = getelementptr inbounds %struct.chain, %struct.chain* %60, i32 0, i32 7, !dbg !8233
  %61 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vars89, align 8, !dbg !8233
  %base90 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %61, i32 0, i32 0, !dbg !8233
  br label %cond.end92, !dbg !8233

cond.false91:                                     ; preds = %cond.end83
  br label %cond.end92, !dbg !8233

cond.end92:                                       ; preds = %cond.false91, %cond.true88
  %cond93 = phi %struct.VEC_tree_base* [ %base90, %cond.true88 ], [ null, %cond.false91 ], !dbg !8233
  %62 = load i32, i32* %i, align 4, !dbg !8233
  %add94 = add i32 %62, 1, !dbg !8233
  %call95 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond93, i32 %add94), !dbg !8233
  store %union.tree_node* %call95, %union.tree_node** %next, align 8, !dbg !8234
  %63 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8235
  %64 = load i32, i32* %i, align 4, !dbg !8236
  %call96 = call %union.tree_node* @get_init_expr(%struct.chain* %63, i32 %64), !dbg !8237
  store %union.tree_node* %call96, %union.tree_node** %init, align 8, !dbg !8238
  %65 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !8239
  %call97 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %65, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !8240
  store %union.tree_node* %call97, %union.tree_node** %init, align 8, !dbg !8241
  %66 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !8242
  %tobool98 = icmp ne %struct.gimple_seq_d* %66, null, !dbg !8242
  br i1 %tobool98, label %if.then99, label %if.end101, !dbg !8244

if.then99:                                        ; preds = %cond.end92
  %67 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !8245
  %68 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !8246
  %call100 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %67, %struct.gimple_seq_d* %68), !dbg !8247
  br label %if.end101, !dbg !8247

if.end101:                                        ; preds = %if.then99, %cond.end92
  %69 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8248
  %70 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !8249
  %header = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 2, !dbg !8250
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !8250
  %call102 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %69, %struct.basic_block_def* %71), !dbg !8251
  store %union.gimple_statement_d* %call102, %union.gimple_statement_d** %phi, align 8, !dbg !8252
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8253
  %73 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8254
  %ssa_name = bitcast %union.tree_node* %73 to %struct.tree_ssa_name*, !dbg !8254
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !8254
  store %union.gimple_statement_d* %72, %union.gimple_statement_d** %def_stmt, align 8, !dbg !8255
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8256
  %75 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !8257
  %76 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !8258
  call void @add_phi_arg(%union.gimple_statement_d* %74, %union.tree_node* %75, %struct.edge_def* %76, i32 0), !dbg !8259
  %77 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8260
  %78 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !8261
  %79 = load %struct.edge_def*, %struct.edge_def** %latch, align 8, !dbg !8262
  call void @add_phi_arg(%union.gimple_statement_d* %77, %union.tree_node* %78, %struct.edge_def* %79, i32 0), !dbg !8263
  br label %for.inc103, !dbg !8264

for.inc103:                                       ; preds = %if.end101
  %80 = load i32, i32* %i, align 4, !dbg !8265
  %inc104 = add i32 %80, 1, !dbg !8265
  store i32 %inc104, i32* %i, align 4, !dbg !8265
  br label %for.cond73, !dbg !8266, !llvm.loop !8267

for.end105:                                       ; preds = %for.cond73
  ret void, !dbg !8269
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_init_expr(%struct.chain* %chain, i32 %index) #0 !dbg !8270 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %chain.addr = alloca %struct.chain*, align 8
  %index.addr = alloca i32, align 4
  %e1 = alloca %union.tree_node*, align 8
  %e2 = alloca %union.tree_node*, align 8
  store %struct.chain* %chain, %struct.chain** %chain.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.chain** %chain.addr, metadata !8273, metadata !DIExpression()), !dbg !8274
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !8275, metadata !DIExpression()), !dbg !8276
  %0 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8277
  %type = getelementptr inbounds %struct.chain, %struct.chain* %0, i32 0, i32 0, !dbg !8279
  %1 = load i32, i32* %type, align 8, !dbg !8279
  %cmp = icmp eq i32 %1, 3, !dbg !8280
  br i1 %cmp, label %if.then, label %if.else, !dbg !8281

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %e1, metadata !8282, metadata !DIExpression()), !dbg !8284
  %2 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8285
  %ch1 = getelementptr inbounds %struct.chain, %struct.chain* %2, i32 0, i32 3, !dbg !8286
  %3 = load %struct.chain*, %struct.chain** %ch1, align 8, !dbg !8286
  %4 = load i32, i32* %index.addr, align 4, !dbg !8287
  %call = call %union.tree_node* @get_init_expr(%struct.chain* %3, i32 %4), !dbg !8288
  store %union.tree_node* %call, %union.tree_node** %e1, align 8, !dbg !8284
  call void @llvm.dbg.declare(metadata %union.tree_node** %e2, metadata !8289, metadata !DIExpression()), !dbg !8290
  %5 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8291
  %ch2 = getelementptr inbounds %struct.chain, %struct.chain* %5, i32 0, i32 4, !dbg !8292
  %6 = load %struct.chain*, %struct.chain** %ch2, align 8, !dbg !8292
  %7 = load i32, i32* %index.addr, align 4, !dbg !8293
  %call1 = call %union.tree_node* @get_init_expr(%struct.chain* %6, i32 %7), !dbg !8294
  store %union.tree_node* %call1, %union.tree_node** %e2, align 8, !dbg !8290
  %8 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8295
  %op = getelementptr inbounds %struct.chain, %struct.chain* %8, i32 0, i32 1, !dbg !8295
  %9 = load i32, i32* %op, align 4, !dbg !8295
  %10 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8295
  %rslt_type = getelementptr inbounds %struct.chain, %struct.chain* %10, i32 0, i32 2, !dbg !8295
  %11 = load %union.tree_node*, %union.tree_node** %rslt_type, align 8, !dbg !8295
  %12 = load %union.tree_node*, %union.tree_node** %e1, align 8, !dbg !8295
  %13 = load %union.tree_node*, %union.tree_node** %e2, align 8, !dbg !8295
  %call2 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %9, %union.tree_node* %11, %union.tree_node* %12, %union.tree_node* %13), !dbg !8295
  store %union.tree_node* %call2, %union.tree_node** %retval, align 8, !dbg !8296
  br label %return, !dbg !8296

if.else:                                          ; preds = %entry
  %14 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8297
  %inits = getelementptr inbounds %struct.chain, %struct.chain* %14, i32 0, i32 8, !dbg !8297
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits, align 8, !dbg !8297
  %tobool = icmp ne %struct.VEC_tree_heap* %15, null, !dbg !8297
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8297

cond.true:                                        ; preds = %if.else
  %16 = load %struct.chain*, %struct.chain** %chain.addr, align 8, !dbg !8297
  %inits3 = getelementptr inbounds %struct.chain, %struct.chain* %16, i32 0, i32 8, !dbg !8297
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %inits3, align 8, !dbg !8297
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !8297
  br label %cond.end, !dbg !8297

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !8297

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8297
  %18 = load i32, i32* %index.addr, align 4, !dbg !8297
  %call4 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %18), !dbg !8297
  store %union.tree_node* %call4, %union.tree_node** %retval, align 8, !dbg !8298
  br label %return, !dbg !8298

return:                                           ; preds = %cond.end, %if.then
  %19 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8299
  ret %union.tree_node* %19, !dbg !8299
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_chain_p_heap_free(%struct.VEC_chain_p_heap** %vec_) #0 !dbg !8300 {
entry:
  %vec_.addr = alloca %struct.VEC_chain_p_heap**, align 8
  store %struct.VEC_chain_p_heap** %vec_, %struct.VEC_chain_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_chain_p_heap*** %vec_.addr, metadata !8301, metadata !DIExpression()), !dbg !8302
  %0 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %vec_.addr, align 8, !dbg !8303
  %1 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %0, align 8, !dbg !8303
  %tobool = icmp ne %struct.VEC_chain_p_heap* %1, null, !dbg !8303
  br i1 %tobool, label %if.then, label %if.end, !dbg !8302

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %vec_.addr, align 8, !dbg !8303
  %3 = load %struct.VEC_chain_p_heap*, %struct.VEC_chain_p_heap** %2, align 8, !dbg !8303
  %4 = bitcast %struct.VEC_chain_p_heap* %3 to i8*, !dbg !8303
  call void @free(i8* %4), !dbg !8303
  br label %if.end, !dbg !8303

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_chain_p_heap**, %struct.VEC_chain_p_heap*** %vec_.addr, align 8, !dbg !8302
  store %struct.VEC_chain_p_heap* null, %struct.VEC_chain_p_heap** %5, align 8, !dbg !8302
  ret void, !dbg !8302
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !8305 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !8310, metadata !DIExpression()), !dbg !8311
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8312, metadata !DIExpression()), !dbg !8311
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !8313, metadata !DIExpression()), !dbg !8311
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8314
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !8314
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !8314

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8314
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8314
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !8314
  %3 = load i32, i32* %num, align 4, !dbg !8314
  %cmp = icmp ult i32 %1, %3, !dbg !8314
  br i1 %cmp, label %if.then, label %if.else, !dbg !8311

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8316
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !8316
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8316
  %idxprom = zext i32 %5 to i64, !dbg !8316
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !8316
  %6 = load i32, i32* %arrayidx, align 4, !dbg !8316
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !8316
  store i32 %6, i32* %7, align 4, !dbg !8316
  store i32 1, i32* %retval, align 4, !dbg !8316
  br label %return, !dbg !8316

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !8318
  store i32 0, i32* %8, align 4, !dbg !8318
  store i32 0, i32* %retval, align 4, !dbg !8318
  br label %return, !dbg !8318

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !8311
  ret i32 %9, !dbg !8311
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !8320 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !8323, metadata !DIExpression()), !dbg !8324
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8325
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8325
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !8325
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !8325
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !8325
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !8325
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !8325
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8325

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8325
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !8325
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !8325
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !8325
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !8325
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !8325
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !8325
  br label %cond.end, !dbg !8325

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8325

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8325
  %6 = load i32, i32* %num.addr, align 4, !dbg !8325
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !8325
  ret %struct.loop* %call, !dbg !8326
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !8327 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !8331, metadata !DIExpression()), !dbg !8332
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8333
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !8333
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !8333
  br i1 %tobool, label %if.then, label %if.end, !dbg !8332

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8333
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !8333
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !8333
  call void @free(i8* %4), !dbg !8333
  br label %if.end, !dbg !8333

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8332
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !8332
  ret void, !dbg !8332
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2229, !2230, !2231}
!llvm.ident = !{!2232}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "looparound_phis", scope: !2, file: !3, line: 332, type: !1552, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !650, globals: !2226, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-predcom.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !154, !158, !163, !182, !189, !196, !390, !429, !435, !440, !445, !449, !456, !469, !495, !501, !506, !629, !636}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !146, line: 31, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149, !150, !151, !152, !153}
!148 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!150 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!151 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!152 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!153 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !146, line: 91, baseType: !7, size: 32, elements: !155)
!155 = !{!156, !157}
!156 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!157 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!158 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !159, line: 474, baseType: !7, size: 32, elements: !160)
!159 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!160 = !{!161, !162}
!161 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!162 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!163 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !164, line: 280, baseType: !7, size: 32, elements: !165)
!164 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!165 = !{!166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181}
!166 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!182 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !164, line: 1817, baseType: !7, size: 32, elements: !183)
!183 = !{!184, !185, !186, !187, !188}
!184 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !164, line: 1805, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !164, line: 39, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389}
!198 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!203 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!204 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!205 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!206 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!207 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!208 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!209 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!210 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!213 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!214 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!215 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!216 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!217 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!218 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!219 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!220 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!221 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!222 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!223 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!224 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!225 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!226 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!227 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!228 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!229 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!230 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!231 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!232 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!233 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!234 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!235 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!236 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!237 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!238 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!239 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!240 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!241 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!242 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!243 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!244 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!245 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!246 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!247 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!248 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!249 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!250 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!251 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!252 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!253 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!254 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!255 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!256 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!257 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!258 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!259 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!260 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!261 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!262 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!263 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!264 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!265 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!266 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!267 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!268 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!269 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!270 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!271 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!272 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!273 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!274 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!275 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!276 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!277 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!278 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!280 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!281 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!282 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!283 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!284 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!285 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!286 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!287 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!288 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!289 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!290 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!291 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!292 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!293 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!294 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!295 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!296 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!297 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!298 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!299 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!300 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!301 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!302 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!303 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!304 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!305 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!306 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!307 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!308 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!309 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!310 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!311 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!312 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!313 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!314 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!315 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!316 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!317 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!318 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!320 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!321 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!322 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!323 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!324 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!325 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!326 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!327 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!328 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!329 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!330 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!331 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!332 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!333 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!334 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!335 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!336 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!337 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!338 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!339 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!340 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!341 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!342 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!343 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!344 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!345 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!346 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!347 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!348 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!349 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!350 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!362 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!363 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!364 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!365 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!366 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!367 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!383 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!384 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!385 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!386 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!387 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!388 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!389 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !391, line: 51, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428}
!393 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!397 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!398 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!399 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!400 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!401 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!402 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!403 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!404 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!405 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!406 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!407 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!408 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!409 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!410 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!411 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!412 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!413 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!414 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!415 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!416 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!417 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!418 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!419 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!420 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!421 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!422 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!423 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!424 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!425 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!426 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!427 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!428 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!429 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "chain_type", file: !3, line: 247, baseType: !7, size: 32, elements: !430)
!430 = !{!431, !432, !433, !434}
!431 = !DIEnumerator(name: "CT_INVARIANT", value: 0, isUnsigned: true)
!432 = !DIEnumerator(name: "CT_LOAD", value: 1, isUnsigned: true)
!433 = !DIEnumerator(name: "CT_STORE_LOAD", value: 2, isUnsigned: true)
!434 = !DIEnumerator(name: "CT_COMBINATION", value: 3, isUnsigned: true)
!435 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ref_step_type", file: !3, line: 304, baseType: !7, size: 32, elements: !436)
!436 = !{!437, !438, !439}
!437 = !DIEnumerator(name: "RS_INVARIANT", value: 0, isUnsigned: true)
!438 = !DIEnumerator(name: "RS_NONZERO", value: 1, isUnsigned: true)
!439 = !DIEnumerator(name: "RS_ANY", value: 2, isUnsigned: true)
!440 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !146, line: 498, baseType: !7, size: 32, elements: !441)
!441 = !{!442, !443, !444}
!442 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!443 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!444 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!445 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !135, line: 912, baseType: !7, size: 32, elements: !446)
!446 = !{!447, !448}
!447 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!448 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!449 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !164, line: 4288, baseType: !7, size: 32, elements: !450)
!450 = !{!451, !452, !453, !454, !455}
!451 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!452 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!453 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!454 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!455 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!456 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !164, line: 58, baseType: !7, size: 32, elements: !457)
!457 = !{!458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468}
!458 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!459 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!460 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!461 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!462 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!463 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!464 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!465 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!466 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!467 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!468 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!469 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !391, line: 727, baseType: !7, size: 32, elements: !470)
!470 = !{!471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494}
!471 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!472 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!473 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!474 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!475 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!476 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!477 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!478 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!479 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!480 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!481 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!482 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!483 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!484 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!485 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!486 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!487 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!488 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!489 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!490 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!491 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!492 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!493 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!494 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!495 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !391, line: 80, baseType: !7, size: 32, elements: !496)
!496 = !{!497, !498, !499, !500}
!497 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!498 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!499 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!500 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!501 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !391, line: 4603, baseType: !7, size: 32, elements: !502)
!502 = !{!503, !504, !505}
!503 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!504 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!505 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!506 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !507, line: 82, baseType: !7, size: 32, elements: !508)
!507 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!508 = !{!509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628}
!509 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!510 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!511 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!512 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!513 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!514 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!515 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!516 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!517 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!518 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!519 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!520 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!521 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!522 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!523 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!524 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!525 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!526 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!527 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!528 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!529 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!530 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!531 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!532 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!533 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!534 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!535 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!536 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!537 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!538 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!539 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!540 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!541 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!542 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!543 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!544 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!545 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!546 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!547 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!548 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!549 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!550 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!551 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!552 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!553 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!554 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!555 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!556 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!557 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!558 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!559 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!560 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!561 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!562 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!563 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!564 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!565 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!566 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!567 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!568 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!569 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!570 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!571 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!572 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!573 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!574 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!575 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!576 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!577 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!578 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!579 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!580 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!581 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!582 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!583 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!584 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!585 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!586 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!587 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!588 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!589 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!590 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!591 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!592 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!593 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!594 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!595 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!596 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!597 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!598 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!599 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!600 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!601 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!602 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!603 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!604 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!605 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!606 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!607 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!608 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!609 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!610 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!611 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!612 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!613 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!614 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!615 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!616 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!617 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!618 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!619 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!620 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!621 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!622 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!623 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!624 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!625 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!626 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!627 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!628 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!629 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !630, line: 119, baseType: !7, size: 32, elements: !631)
!630 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!631 = !{!632, !633, !634, !635}
!632 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!633 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!634 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!635 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!636 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !135, line: 295, baseType: !7, size: 32, elements: !637)
!637 = !{!638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649}
!638 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!639 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!640 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!641 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!642 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!643 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!644 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!645 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!646 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!647 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!648 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!649 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!650 = !{!651, !196, !652, !2010, !2080, !2108, !1224, !1552, !2121, !2134, !2194, !1127, !7, !2195, !2196, !2011, !962, !2133, !2146, !749, !2090, !706, !2081, !2202, !2214, !983, !2216, !1016, !921, !2036, !782, !2218, !495, !2221}
!651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!652 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !653, line: 56, baseType: !654)
!653 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !655, size: 64)
!655 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !164, line: 3371, size: 1792, elements: !656)
!656 = !{!657, !690, !696, !709, !728, !739, !744, !755, !761, !775, !787, !825, !1338, !1366, !1383, !1384, !1389, !1398, !1404, !1409, !1413, !1417, !1661, !1708, !1714, !1720, !1727, !1740, !1754, !1771, !1783, !1805, !1820, !1992}
!657 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !655, file: !164, line: 3372, baseType: !658, size: 64)
!658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !164, line: 360, size: 64, elements: !659)
!659 = !{!660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689}
!660 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !658, file: !164, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!661 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !658, file: !164, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !658, file: !164, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !658, file: !164, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!664 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !658, file: !164, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!665 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !658, file: !164, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!666 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !658, file: !164, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!667 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !658, file: !164, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !658, file: !164, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!669 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !658, file: !164, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !658, file: !164, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!671 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !658, file: !164, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!672 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !658, file: !164, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!673 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !658, file: !164, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !658, file: !164, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !658, file: !164, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!676 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !658, file: !164, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!677 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !658, file: !164, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!678 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !658, file: !164, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!679 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !658, file: !164, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!680 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !658, file: !164, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!681 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !658, file: !164, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!682 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !658, file: !164, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!683 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !658, file: !164, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !658, file: !164, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!685 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !658, file: !164, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !658, file: !164, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !658, file: !164, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!688 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !658, file: !164, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!689 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !658, file: !164, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!690 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !655, file: !164, line: 3373, baseType: !691, size: 192)
!691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !164, line: 402, size: 192, elements: !692)
!692 = !{!693, !694, !695}
!693 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !691, file: !164, line: 403, baseType: !658, size: 64)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !691, file: !164, line: 404, baseType: !652, size: 64, offset: 64)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !691, file: !164, line: 405, baseType: !652, size: 64, offset: 128)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !655, file: !164, line: 3374, baseType: !697, size: 320)
!697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !164, line: 1384, size: 320, elements: !698)
!698 = !{!699, !700}
!699 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !697, file: !164, line: 1385, baseType: !691, size: 192)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !697, file: !164, line: 1386, baseType: !701, size: 128, offset: 192)
!701 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !702, line: 58, baseType: !703)
!702 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!703 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !702, line: 54, size: 128, elements: !704)
!704 = !{!705, !707}
!705 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !703, file: !702, line: 56, baseType: !706, size: 64)
!706 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !703, file: !702, line: 57, baseType: !708, size: 64, offset: 64)
!708 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !655, file: !164, line: 3375, baseType: !710, size: 256)
!710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !164, line: 1397, size: 256, elements: !711)
!711 = !{!712, !713}
!712 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !710, file: !164, line: 1398, baseType: !691, size: 192)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !710, file: !164, line: 1399, baseType: !714, size: 64, offset: 192)
!714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !715, size: 64)
!715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !716, line: 52, size: 256, elements: !717)
!716 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!717 = !{!718, !719, !720, !721, !722, !723, !724}
!718 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !715, file: !716, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !715, file: !716, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !715, file: !716, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !715, file: !716, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !715, file: !716, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !715, file: !716, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !715, file: !716, line: 62, baseType: !725, size: 192, offset: 64)
!725 = !DICompositeType(tag: DW_TAG_array_type, baseType: !706, size: 192, elements: !726)
!726 = !{!727}
!727 = !DISubrange(count: 3)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !655, file: !164, line: 3376, baseType: !729, size: 256)
!729 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !164, line: 1408, size: 256, elements: !730)
!730 = !{!731, !732}
!731 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !729, file: !164, line: 1409, baseType: !691, size: 192)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !729, file: !164, line: 1410, baseType: !733, size: 64, offset: 192)
!733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !734, size: 64)
!734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !735, line: 27, size: 192, elements: !736)
!735 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!736 = !{!737, !738}
!737 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !734, file: !735, line: 29, baseType: !701, size: 128)
!738 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !734, file: !735, line: 30, baseType: !5, size: 32, offset: 128)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !655, file: !164, line: 3377, baseType: !740, size: 256)
!740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !164, line: 1437, size: 256, elements: !741)
!741 = !{!742, !743}
!742 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !740, file: !164, line: 1438, baseType: !691, size: 192)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !740, file: !164, line: 1439, baseType: !652, size: 64, offset: 192)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !655, file: !164, line: 3378, baseType: !745, size: 256)
!745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !164, line: 1418, size: 256, elements: !746)
!746 = !{!747, !748, !750}
!747 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !745, file: !164, line: 1419, baseType: !691, size: 192)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !745, file: !164, line: 1420, baseType: !749, size: 32, offset: 192)
!749 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !745, file: !164, line: 1421, baseType: !751, size: 8, offset: 224)
!751 = !DICompositeType(tag: DW_TAG_array_type, baseType: !752, size: 8, elements: !753)
!752 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!753 = !{!754}
!754 = !DISubrange(count: 1)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !655, file: !164, line: 3379, baseType: !756, size: 320)
!756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !164, line: 1428, size: 320, elements: !757)
!757 = !{!758, !759, !760}
!758 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !756, file: !164, line: 1429, baseType: !691, size: 192)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !756, file: !164, line: 1430, baseType: !652, size: 64, offset: 192)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !756, file: !164, line: 1431, baseType: !652, size: 64, offset: 256)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !655, file: !164, line: 3380, baseType: !762, size: 320)
!762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !164, line: 1460, size: 320, elements: !763)
!763 = !{!764, !765}
!764 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !762, file: !164, line: 1461, baseType: !691, size: 192)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !762, file: !164, line: 1462, baseType: !766, size: 128, offset: 192)
!766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !767, line: 31, size: 128, elements: !768)
!767 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!768 = !{!769, !773, !774}
!769 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !766, file: !767, line: 32, baseType: !770, size: 64)
!770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !771, size: 64)
!771 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !772)
!772 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !766, file: !767, line: 33, baseType: !7, size: 32, offset: 64)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !766, file: !767, line: 34, baseType: !7, size: 32, offset: 96)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !655, file: !164, line: 3381, baseType: !776, size: 384)
!776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !164, line: 2507, size: 384, elements: !777)
!777 = !{!778, !779, !784, !785, !786}
!778 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !776, file: !164, line: 2508, baseType: !691, size: 192)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !776, file: !164, line: 2509, baseType: !780, size: 32, offset: 192)
!780 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !781, line: 58, baseType: !782)
!781 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!782 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !783, line: 44, baseType: !7)
!783 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!784 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !776, file: !164, line: 2510, baseType: !7, size: 32, offset: 224)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !776, file: !164, line: 2511, baseType: !652, size: 64, offset: 256)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !776, file: !164, line: 2512, baseType: !652, size: 64, offset: 320)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !655, file: !164, line: 3382, baseType: !788, size: 896)
!788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !164, line: 2652, size: 896, elements: !789)
!789 = !{!790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822}
!790 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !788, file: !164, line: 2653, baseType: !776, size: 384)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !788, file: !164, line: 2654, baseType: !652, size: 64, offset: 384)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !788, file: !164, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !788, file: !164, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !788, file: !164, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !788, file: !164, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !788, file: !164, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!797 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !788, file: !164, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !788, file: !164, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !788, file: !164, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !788, file: !164, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!801 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !788, file: !164, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!802 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !788, file: !164, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!803 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !788, file: !164, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!804 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !788, file: !164, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !788, file: !164, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!806 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !788, file: !164, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !788, file: !164, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !788, file: !164, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !788, file: !164, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !788, file: !164, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !788, file: !164, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !788, file: !164, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !788, file: !164, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !788, file: !164, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !788, file: !164, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !788, file: !164, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !788, file: !164, line: 2703, baseType: !7, size: 32, offset: 512)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !788, file: !164, line: 2705, baseType: !652, size: 64, offset: 576)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !788, file: !164, line: 2706, baseType: !652, size: 64, offset: 640)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !788, file: !164, line: 2707, baseType: !652, size: 64, offset: 704)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !788, file: !164, line: 2708, baseType: !652, size: 64, offset: 768)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !788, file: !164, line: 2711, baseType: !823, size: 64, offset: 832)
!823 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !824, size: 64)
!824 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !164, line: 2711, flags: DIFlagFwdDecl)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !655, file: !164, line: 3383, baseType: !826, size: 960)
!826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !164, line: 2756, size: 960, elements: !827)
!827 = !{!828, !829}
!828 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !826, file: !164, line: 2757, baseType: !788, size: 896)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !826, file: !164, line: 2758, baseType: !830, size: 64, offset: 896)
!830 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !653, line: 50, baseType: !831)
!831 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !832, size: 64)
!832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !833, line: 240, size: 384, elements: !834)
!833 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!834 = !{!835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845}
!835 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !832, file: !833, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !832, file: !833, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !832, file: !833, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !832, file: !833, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !832, file: !833, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !832, file: !833, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !832, file: !833, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !832, file: !833, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !832, file: !833, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !832, file: !833, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !832, file: !833, line: 321, baseType: !846, size: 320, offset: 64)
!846 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !833, line: 315, size: 320, elements: !847)
!847 = !{!848, !1305, !1307, !1336, !1337}
!848 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !846, file: !833, line: 316, baseType: !849, size: 64)
!849 = !DICompositeType(tag: DW_TAG_array_type, baseType: !850, size: 64, elements: !753)
!850 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !833, line: 183, baseType: !851)
!851 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !833, line: 166, size: 64, elements: !852)
!852 = !{!853, !854, !855, !858, !859, !867, !868, !880, !883, !944, !945, !1282, !1295, !1302}
!853 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !851, file: !833, line: 168, baseType: !749, size: 32)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !851, file: !833, line: 169, baseType: !7, size: 32)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !851, file: !833, line: 170, baseType: !856, size: 64)
!856 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !857, size: 64)
!857 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !752)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !851, file: !833, line: 171, baseType: !830, size: 64)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !851, file: !833, line: 172, baseType: !860, size: 64)
!860 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !653, line: 53, baseType: !861)
!861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !862, size: 64)
!862 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !833, line: 359, size: 128, elements: !863)
!863 = !{!864, !865}
!864 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !862, file: !833, line: 360, baseType: !749, size: 32)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !862, file: !833, line: 361, baseType: !866, size: 64, offset: 64)
!866 = !DICompositeType(tag: DW_TAG_array_type, baseType: !830, size: 64, elements: !753)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !851, file: !833, line: 173, baseType: !5, size: 32)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !851, file: !833, line: 174, baseType: !869, size: 32)
!869 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !833, line: 133, baseType: !870)
!870 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !833, line: 115, size: 32, elements: !871)
!871 = !{!872, !873, !874, !875, !876, !877, !878, !879}
!872 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !870, file: !833, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !870, file: !833, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !870, file: !833, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !870, file: !833, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !870, file: !833, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !870, file: !833, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !870, file: !833, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !870, file: !833, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !851, file: !833, line: 175, baseType: !881, size: 64)
!881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !882, size: 64)
!882 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !833, line: 175, flags: DIFlagFwdDecl)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !851, file: !833, line: 176, baseType: !884, size: 64)
!884 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !885, size: 64)
!885 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !886, line: 75, size: 256, elements: !887)
!886 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!887 = !{!888, !902, !903, !904}
!888 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !885, file: !886, line: 76, baseType: !889, size: 64)
!889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !890, size: 64)
!890 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !886, line: 68, baseType: !891)
!891 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !886, line: 63, size: 320, elements: !892)
!892 = !{!893, !895, !896, !897}
!893 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !891, file: !886, line: 64, baseType: !894, size: 64)
!894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !891, size: 64)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !891, file: !886, line: 65, baseType: !894, size: 64, offset: 64)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !891, file: !886, line: 66, baseType: !7, size: 32, offset: 128)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !891, file: !886, line: 67, baseType: !898, size: 128, offset: 192)
!898 = !DICompositeType(tag: DW_TAG_array_type, baseType: !899, size: 128, elements: !900)
!899 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !886, line: 29, baseType: !706)
!900 = !{!901}
!901 = !DISubrange(count: 2)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !885, file: !886, line: 77, baseType: !889, size: 64, offset: 64)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !885, file: !886, line: 78, baseType: !7, size: 32, offset: 128)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !885, file: !886, line: 79, baseType: !905, size: 64, offset: 192)
!905 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !906, size: 64)
!906 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !886, line: 49, baseType: !907)
!907 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !886, line: 45, size: 832, elements: !908)
!908 = !{!909, !910, !911}
!909 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !907, file: !886, line: 46, baseType: !894, size: 64)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !907, file: !886, line: 47, baseType: !884, size: 64, offset: 64)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !907, file: !886, line: 48, baseType: !912, size: 704, offset: 128)
!912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !913, line: 164, size: 704, elements: !914)
!913 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!914 = !{!915, !916, !927, !928, !929, !930, !931, !932, !936, !940, !941, !942, !943}
!915 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !912, file: !913, line: 166, baseType: !708, size: 64)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !912, file: !913, line: 167, baseType: !917, size: 64, offset: 64)
!917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !918, size: 64)
!918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !913, line: 157, size: 192, elements: !919)
!919 = !{!920, !922, !923}
!920 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !918, file: !913, line: 159, baseType: !921, size: 64)
!921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !752, size: 64)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !918, file: !913, line: 160, baseType: !917, size: 64, offset: 64)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !918, file: !913, line: 161, baseType: !924, size: 32, offset: 128)
!924 = !DICompositeType(tag: DW_TAG_array_type, baseType: !752, size: 32, elements: !925)
!925 = !{!926}
!926 = !DISubrange(count: 4)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !912, file: !913, line: 168, baseType: !921, size: 64, offset: 128)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !912, file: !913, line: 169, baseType: !921, size: 64, offset: 192)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !912, file: !913, line: 170, baseType: !921, size: 64, offset: 256)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !912, file: !913, line: 171, baseType: !708, size: 64, offset: 320)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !912, file: !913, line: 172, baseType: !749, size: 32, offset: 384)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !912, file: !913, line: 176, baseType: !933, size: 64, offset: 448)
!933 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !934, size: 64)
!934 = !DISubroutineType(types: !935)
!935 = !{!917, !651, !708}
!936 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !912, file: !913, line: 177, baseType: !937, size: 64, offset: 512)
!937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !938, size: 64)
!938 = !DISubroutineType(types: !939)
!939 = !{null, !651, !917}
!940 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !912, file: !913, line: 178, baseType: !651, size: 64, offset: 576)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !912, file: !913, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !912, file: !913, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !912, file: !913, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !851, file: !833, line: 177, baseType: !652, size: 64)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !851, file: !833, line: 178, baseType: !946, size: 64)
!946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !947, size: 64)
!947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !948)
!948 = !{!949, !1194, !1195, !1196, !1252, !1256, !1257, !1258, !1276, !1277, !1278, !1279, !1280, !1281}
!949 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !947, file: !135, line: 219, baseType: !950, size: 64)
!950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !951, size: 64)
!951 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !952)
!952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !953)
!953 = !{!954}
!954 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !952, file: !135, line: 151, baseType: !955, size: 128)
!955 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !956)
!956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !957)
!957 = !{!958, !959, !960}
!958 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !956, file: !135, line: 150, baseType: !7, size: 32)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !956, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !956, file: !135, line: 150, baseType: !961, size: 64, offset: 64)
!961 = !DICompositeType(tag: DW_TAG_array_type, baseType: !962, size: 64, elements: !753)
!962 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !653, line: 108, baseType: !963)
!963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !964, size: 64)
!964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !965)
!965 = !{!966, !967, !968, !1186, !1187, !1188, !1189, !1190, !1191, !1192}
!966 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !964, file: !135, line: 124, baseType: !946, size: 64)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !964, file: !135, line: 125, baseType: !946, size: 64, offset: 64)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !964, file: !135, line: 131, baseType: !969, size: 64, offset: 128)
!969 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !970)
!970 = !{!971, !1185}
!971 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !969, file: !135, line: 129, baseType: !972, size: 64)
!972 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !653, line: 66, baseType: !973)
!973 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !974, size: 64)
!974 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !391, line: 143, size: 192, elements: !975)
!975 = !{!976, !1183, !1184}
!976 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !974, file: !391, line: 145, baseType: !977, size: 64)
!977 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !653, line: 69, baseType: !978)
!978 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !979, size: 64)
!979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !391, line: 136, size: 192, elements: !980)
!980 = !{!981, !1181, !1182}
!981 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !979, file: !391, line: 137, baseType: !982, size: 64)
!982 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !653, line: 58, baseType: !983)
!983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !984, size: 64)
!984 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !391, line: 737, size: 768, elements: !985)
!985 = !{!986, !1003, !1036, !1042, !1047, !1052, !1059, !1065, !1071, !1076, !1090, !1095, !1101, !1106, !1116, !1121, !1139, !1146, !1153, !1159, !1164, !1170, !1176}
!986 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !984, file: !391, line: 738, baseType: !987, size: 256)
!987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !391, line: 271, size: 256, elements: !988)
!988 = !{!989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002}
!989 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !987, file: !391, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !987, file: !391, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !987, file: !391, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !987, file: !391, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !987, file: !391, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !987, file: !391, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !987, file: !391, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !987, file: !391, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !987, file: !391, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !987, file: !391, line: 312, baseType: !7, size: 32, offset: 32)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !987, file: !391, line: 316, baseType: !780, size: 32, offset: 64)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !987, file: !391, line: 319, baseType: !7, size: 32, offset: 96)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !987, file: !391, line: 323, baseType: !946, size: 64, offset: 128)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !987, file: !391, line: 327, baseType: !652, size: 64, offset: 192)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !984, file: !391, line: 739, baseType: !1004, size: 448)
!1004 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !391, line: 350, size: 448, elements: !1005)
!1005 = !{!1006, !1034}
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1004, file: !391, line: 353, baseType: !1007, size: 384)
!1007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !391, line: 333, size: 384, elements: !1008)
!1008 = !{!1009, !1010, !1017}
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1007, file: !391, line: 336, baseType: !987, size: 256)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1007, file: !391, line: 343, baseType: !1011, size: 64, offset: 256)
!1011 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1012, size: 64)
!1012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !630, line: 37, size: 128, elements: !1013)
!1013 = !{!1014, !1015}
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1012, file: !630, line: 39, baseType: !1011, size: 64)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1012, file: !630, line: 40, baseType: !1016, size: 64, offset: 64)
!1016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !652, size: 64)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1007, file: !391, line: 344, baseType: !1018, size: 64, offset: 320)
!1018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1019, size: 64)
!1019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !630, line: 45, size: 320, elements: !1020)
!1020 = !{!1021, !1022}
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1019, file: !630, line: 47, baseType: !1018, size: 64)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1019, file: !630, line: 48, baseType: !1023, size: 256, offset: 64)
!1023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !164, line: 1883, size: 256, elements: !1024)
!1024 = !{!1025, !1027, !1028, !1033}
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1023, file: !164, line: 1884, baseType: !1026, size: 64)
!1026 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1023, size: 64)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1023, file: !164, line: 1885, baseType: !1026, size: 64, offset: 64)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1023, file: !164, line: 1891, baseType: !1029, size: 64, offset: 128)
!1029 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1023, file: !164, line: 1891, size: 64, elements: !1030)
!1030 = !{!1031, !1032}
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1029, file: !164, line: 1891, baseType: !982, size: 64)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1029, file: !164, line: 1891, baseType: !652, size: 64)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1023, file: !164, line: 1892, baseType: !1016, size: 64, offset: 192)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1004, file: !391, line: 359, baseType: !1035, size: 64, offset: 384)
!1035 = !DICompositeType(tag: DW_TAG_array_type, baseType: !652, size: 64, elements: !753)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !984, file: !391, line: 740, baseType: !1037, size: 512)
!1037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !391, line: 365, size: 512, elements: !1038)
!1038 = !{!1039, !1040, !1041}
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1037, file: !391, line: 368, baseType: !1007, size: 384)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1037, file: !391, line: 373, baseType: !652, size: 64, offset: 384)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1037, file: !391, line: 374, baseType: !652, size: 64, offset: 448)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !984, file: !391, line: 741, baseType: !1043, size: 576)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !391, line: 380, size: 576, elements: !1044)
!1044 = !{!1045, !1046}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1043, file: !391, line: 383, baseType: !1037, size: 512)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1043, file: !391, line: 389, baseType: !1035, size: 64, offset: 512)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !984, file: !391, line: 742, baseType: !1048, size: 320)
!1048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !391, line: 395, size: 320, elements: !1049)
!1049 = !{!1050, !1051}
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1048, file: !391, line: 397, baseType: !987, size: 256)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1048, file: !391, line: 400, baseType: !972, size: 64, offset: 256)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !984, file: !391, line: 743, baseType: !1053, size: 448)
!1053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !391, line: 406, size: 448, elements: !1054)
!1054 = !{!1055, !1056, !1057, !1058}
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1053, file: !391, line: 408, baseType: !987, size: 256)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1053, file: !391, line: 412, baseType: !652, size: 64, offset: 256)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1053, file: !391, line: 420, baseType: !652, size: 64, offset: 320)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1053, file: !391, line: 423, baseType: !972, size: 64, offset: 384)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !984, file: !391, line: 744, baseType: !1060, size: 384)
!1060 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !391, line: 429, size: 384, elements: !1061)
!1061 = !{!1062, !1063, !1064}
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1060, file: !391, line: 431, baseType: !987, size: 256)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1060, file: !391, line: 434, baseType: !652, size: 64, offset: 256)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1060, file: !391, line: 437, baseType: !972, size: 64, offset: 320)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !984, file: !391, line: 745, baseType: !1066, size: 384)
!1066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !391, line: 443, size: 384, elements: !1067)
!1067 = !{!1068, !1069, !1070}
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1066, file: !391, line: 445, baseType: !987, size: 256)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1066, file: !391, line: 449, baseType: !652, size: 64, offset: 256)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1066, file: !391, line: 453, baseType: !972, size: 64, offset: 320)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !984, file: !391, line: 746, baseType: !1072, size: 320)
!1072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !391, line: 459, size: 320, elements: !1073)
!1073 = !{!1074, !1075}
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1072, file: !391, line: 461, baseType: !987, size: 256)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1072, file: !391, line: 464, baseType: !652, size: 64, offset: 256)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !984, file: !391, line: 747, baseType: !1077, size: 768)
!1077 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !391, line: 469, size: 768, elements: !1078)
!1078 = !{!1079, !1080, !1081, !1082, !1083}
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1077, file: !391, line: 471, baseType: !987, size: 256)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1077, file: !391, line: 474, baseType: !7, size: 32, offset: 256)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1077, file: !391, line: 475, baseType: !7, size: 32, offset: 288)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1077, file: !391, line: 478, baseType: !652, size: 64, offset: 320)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1077, file: !391, line: 481, baseType: !1084, size: 384, offset: 384)
!1084 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1085, size: 384, elements: !753)
!1085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !164, line: 1917, size: 384, elements: !1086)
!1086 = !{!1087, !1088, !1089}
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1085, file: !164, line: 1920, baseType: !1023, size: 256)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1085, file: !164, line: 1921, baseType: !652, size: 64, offset: 256)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1085, file: !164, line: 1922, baseType: !780, size: 32, offset: 320)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !984, file: !391, line: 748, baseType: !1091, size: 320)
!1091 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !391, line: 487, size: 320, elements: !1092)
!1092 = !{!1093, !1094}
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1091, file: !391, line: 490, baseType: !987, size: 256)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1091, file: !391, line: 494, baseType: !749, size: 32, offset: 256)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !984, file: !391, line: 749, baseType: !1096, size: 384)
!1096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !391, line: 500, size: 384, elements: !1097)
!1097 = !{!1098, !1099, !1100}
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1096, file: !391, line: 502, baseType: !987, size: 256)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1096, file: !391, line: 506, baseType: !972, size: 64, offset: 256)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1096, file: !391, line: 510, baseType: !972, size: 64, offset: 320)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !984, file: !391, line: 750, baseType: !1102, size: 320)
!1102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !391, line: 529, size: 320, elements: !1103)
!1103 = !{!1104, !1105}
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1102, file: !391, line: 531, baseType: !987, size: 256)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1102, file: !391, line: 540, baseType: !972, size: 64, offset: 256)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !984, file: !391, line: 751, baseType: !1107, size: 704)
!1107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !391, line: 546, size: 704, elements: !1108)
!1108 = !{!1109, !1110, !1111, !1112, !1113, !1114, !1115}
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1107, file: !391, line: 549, baseType: !1037, size: 512)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1107, file: !391, line: 553, baseType: !856, size: 64, offset: 512)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1107, file: !391, line: 557, baseType: !772, size: 8, offset: 576)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1107, file: !391, line: 558, baseType: !772, size: 8, offset: 584)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1107, file: !391, line: 559, baseType: !772, size: 8, offset: 592)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1107, file: !391, line: 560, baseType: !772, size: 8, offset: 600)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1107, file: !391, line: 566, baseType: !1035, size: 64, offset: 640)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !984, file: !391, line: 752, baseType: !1117, size: 384)
!1117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !391, line: 571, size: 384, elements: !1118)
!1118 = !{!1119, !1120}
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1117, file: !391, line: 573, baseType: !1048, size: 320)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1117, file: !391, line: 577, baseType: !652, size: 64, offset: 320)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !984, file: !391, line: 753, baseType: !1122, size: 576)
!1122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !391, line: 600, size: 576, elements: !1123)
!1123 = !{!1124, !1125, !1126, !1129, !1138}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1122, file: !391, line: 602, baseType: !1048, size: 320)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1122, file: !391, line: 605, baseType: !652, size: 64, offset: 320)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1122, file: !391, line: 609, baseType: !1127, size: 64, offset: 384)
!1127 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1128, line: 46, baseType: !706)
!1128 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1122, file: !391, line: 612, baseType: !1130, size: 64, offset: 448)
!1130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1131, size: 64)
!1131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !391, line: 581, size: 320, elements: !1132)
!1132 = !{!1133, !1134, !1135, !1136, !1137}
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1131, file: !391, line: 583, baseType: !196, size: 32)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1131, file: !391, line: 586, baseType: !652, size: 64, offset: 64)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1131, file: !391, line: 589, baseType: !652, size: 64, offset: 128)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1131, file: !391, line: 592, baseType: !652, size: 64, offset: 192)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1131, file: !391, line: 595, baseType: !652, size: 64, offset: 256)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1122, file: !391, line: 616, baseType: !972, size: 64, offset: 512)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !984, file: !391, line: 754, baseType: !1140, size: 512)
!1140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !391, line: 622, size: 512, elements: !1141)
!1141 = !{!1142, !1143, !1144, !1145}
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1140, file: !391, line: 624, baseType: !1048, size: 320)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1140, file: !391, line: 628, baseType: !652, size: 64, offset: 320)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1140, file: !391, line: 632, baseType: !652, size: 64, offset: 384)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1140, file: !391, line: 636, baseType: !652, size: 64, offset: 448)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !984, file: !391, line: 755, baseType: !1147, size: 704)
!1147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !391, line: 642, size: 704, elements: !1148)
!1148 = !{!1149, !1150, !1151, !1152}
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1147, file: !391, line: 644, baseType: !1140, size: 512)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1147, file: !391, line: 648, baseType: !652, size: 64, offset: 512)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1147, file: !391, line: 652, baseType: !652, size: 64, offset: 576)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1147, file: !391, line: 653, baseType: !652, size: 64, offset: 640)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !984, file: !391, line: 756, baseType: !1154, size: 448)
!1154 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !391, line: 663, size: 448, elements: !1155)
!1155 = !{!1156, !1157, !1158}
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1154, file: !391, line: 665, baseType: !1048, size: 320)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1154, file: !391, line: 668, baseType: !652, size: 64, offset: 320)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1154, file: !391, line: 673, baseType: !652, size: 64, offset: 384)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !984, file: !391, line: 757, baseType: !1160, size: 384)
!1160 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !391, line: 694, size: 384, elements: !1161)
!1161 = !{!1162, !1163}
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1160, file: !391, line: 696, baseType: !1048, size: 320)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1160, file: !391, line: 699, baseType: !652, size: 64, offset: 320)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !984, file: !391, line: 758, baseType: !1165, size: 384)
!1165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !391, line: 681, size: 384, elements: !1166)
!1166 = !{!1167, !1168, !1169}
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1165, file: !391, line: 683, baseType: !987, size: 256)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1165, file: !391, line: 686, baseType: !652, size: 64, offset: 256)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1165, file: !391, line: 689, baseType: !652, size: 64, offset: 320)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !984, file: !391, line: 759, baseType: !1171, size: 384)
!1171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !391, line: 707, size: 384, elements: !1172)
!1172 = !{!1173, !1174, !1175}
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1171, file: !391, line: 709, baseType: !987, size: 256)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1171, file: !391, line: 712, baseType: !652, size: 64, offset: 256)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1171, file: !391, line: 712, baseType: !652, size: 64, offset: 320)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !984, file: !391, line: 760, baseType: !1177, size: 320)
!1177 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !391, line: 718, size: 320, elements: !1178)
!1178 = !{!1179, !1180}
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1177, file: !391, line: 720, baseType: !987, size: 256)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1177, file: !391, line: 723, baseType: !652, size: 64, offset: 256)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !979, file: !391, line: 138, baseType: !978, size: 64, offset: 64)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !979, file: !391, line: 139, baseType: !978, size: 64, offset: 128)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !974, file: !391, line: 146, baseType: !977, size: 64, offset: 64)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !974, file: !391, line: 152, baseType: !972, size: 64, offset: 128)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !969, file: !135, line: 130, baseType: !830, size: 64)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !964, file: !135, line: 134, baseType: !651, size: 64, offset: 192)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !964, file: !135, line: 137, baseType: !652, size: 64, offset: 256)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !964, file: !135, line: 138, baseType: !780, size: 32, offset: 320)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !964, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !964, file: !135, line: 144, baseType: !749, size: 32, offset: 384)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !964, file: !135, line: 145, baseType: !749, size: 32, offset: 416)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !964, file: !135, line: 146, baseType: !1193, size: 64, offset: 448)
!1193 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !708)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !947, file: !135, line: 220, baseType: !950, size: 64, offset: 64)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !947, file: !135, line: 223, baseType: !651, size: 64, offset: 128)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !947, file: !135, line: 226, baseType: !1197, size: 64, offset: 192)
!1197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1198, size: 64)
!1198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !146, line: 100, size: 1216, elements: !1199)
!1199 = !{!1200, !1201, !1202, !1203, !1204, !1209, !1210, !1211, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1242, !1250, !1251}
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1198, file: !146, line: 102, baseType: !749, size: 32)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1198, file: !146, line: 105, baseType: !7, size: 32, offset: 32)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1198, file: !146, line: 108, baseType: !946, size: 64, offset: 64)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1198, file: !146, line: 111, baseType: !946, size: 64, offset: 128)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1198, file: !146, line: 114, baseType: !1205, size: 64, offset: 192)
!1205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !146, line: 41, size: 64, elements: !1206)
!1206 = !{!1207, !1208}
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1205, file: !146, line: 42, baseType: !145, size: 32)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1205, file: !146, line: 43, baseType: !7, size: 32, offset: 32)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1198, file: !146, line: 117, baseType: !7, size: 32, offset: 256)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1198, file: !146, line: 120, baseType: !7, size: 32, offset: 288)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1198, file: !146, line: 123, baseType: !1212, size: 64, offset: 320)
!1212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1213, size: 64)
!1213 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !146, line: 87, baseType: !1214)
!1214 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !146, line: 87, size: 128, elements: !1215)
!1215 = !{!1216}
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1214, file: !146, line: 87, baseType: !1217, size: 128)
!1217 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !146, line: 85, baseType: !1218)
!1218 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !146, line: 85, size: 128, elements: !1219)
!1219 = !{!1220, !1221, !1222}
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1218, file: !146, line: 85, baseType: !7, size: 32)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1218, file: !146, line: 85, baseType: !7, size: 32, offset: 32)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1218, file: !146, line: 85, baseType: !1223, size: 64, offset: 64)
!1223 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1224, size: 64, elements: !753)
!1224 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !146, line: 84, baseType: !1197)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1198, file: !146, line: 126, baseType: !1197, size: 64, offset: 384)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1198, file: !146, line: 129, baseType: !1197, size: 64, offset: 448)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1198, file: !146, line: 132, baseType: !651, size: 64, offset: 512)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1198, file: !146, line: 139, baseType: !652, size: 64, offset: 576)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1198, file: !146, line: 143, baseType: !701, size: 128, offset: 640)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1198, file: !146, line: 146, baseType: !701, size: 128, offset: 768)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1198, file: !146, line: 148, baseType: !772, size: 8, offset: 896)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1198, file: !146, line: 149, baseType: !772, size: 8, offset: 904)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1198, file: !146, line: 153, baseType: !154, size: 32, offset: 928)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1198, file: !146, line: 156, baseType: !1235, size: 64, offset: 960)
!1235 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1236, size: 64)
!1236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !146, line: 48, size: 320, elements: !1237)
!1237 = !{!1238, !1239, !1240, !1241}
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1236, file: !146, line: 50, baseType: !982, size: 64)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1236, file: !146, line: 59, baseType: !701, size: 128, offset: 64)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1236, file: !146, line: 64, baseType: !772, size: 8, offset: 192)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1236, file: !146, line: 67, baseType: !1235, size: 64, offset: 256)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1198, file: !146, line: 159, baseType: !1243, size: 64, offset: 1024)
!1243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1244, size: 64)
!1244 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !146, line: 72, size: 256, elements: !1245)
!1245 = !{!1246, !1247, !1248, !1249}
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1244, file: !146, line: 74, baseType: !963, size: 64)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1244, file: !146, line: 77, baseType: !1243, size: 64, offset: 64)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1244, file: !146, line: 78, baseType: !1243, size: 64, offset: 128)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1244, file: !146, line: 81, baseType: !1243, size: 64, offset: 192)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1198, file: !146, line: 162, baseType: !772, size: 8, offset: 1088)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1198, file: !146, line: 166, baseType: !652, size: 64, offset: 1152)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !947, file: !135, line: 229, baseType: !1253, size: 128, offset: 256)
!1253 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1254, size: 128, elements: !900)
!1254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1255, size: 64)
!1255 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !947, file: !135, line: 232, baseType: !946, size: 64, offset: 384)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !947, file: !135, line: 233, baseType: !946, size: 64, offset: 448)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !947, file: !135, line: 238, baseType: !1259, size: 64, offset: 512)
!1259 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !1260)
!1260 = !{!1261, !1267}
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1259, file: !135, line: 236, baseType: !1262, size: 64)
!1262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1263, size: 64)
!1263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !1264)
!1264 = !{!1265, !1266}
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1263, file: !135, line: 275, baseType: !972, size: 64)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1263, file: !135, line: 278, baseType: !972, size: 64, offset: 64)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1259, file: !135, line: 237, baseType: !1268, size: 64)
!1268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1269, size: 64)
!1269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !1270)
!1270 = !{!1271, !1272, !1273, !1274, !1275}
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1269, file: !135, line: 261, baseType: !830, size: 64)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1269, file: !135, line: 262, baseType: !830, size: 64, offset: 64)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1269, file: !135, line: 266, baseType: !830, size: 64, offset: 128)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1269, file: !135, line: 267, baseType: !830, size: 64, offset: 192)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1269, file: !135, line: 270, baseType: !749, size: 32, offset: 256)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !947, file: !135, line: 241, baseType: !1193, size: 64, offset: 576)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !947, file: !135, line: 244, baseType: !749, size: 32, offset: 640)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !947, file: !135, line: 247, baseType: !749, size: 32, offset: 672)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !947, file: !135, line: 250, baseType: !749, size: 32, offset: 704)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !947, file: !135, line: 253, baseType: !749, size: 32, offset: 736)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !947, file: !135, line: 256, baseType: !749, size: 32, offset: 768)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !851, file: !833, line: 179, baseType: !1283, size: 64)
!1283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1284, size: 64)
!1284 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !833, line: 150, baseType: !1285)
!1285 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !833, line: 142, size: 320, elements: !1286)
!1286 = !{!1287, !1288, !1289, !1290, !1293, !1294}
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1285, file: !833, line: 144, baseType: !652, size: 64)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1285, file: !833, line: 145, baseType: !830, size: 64, offset: 64)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1285, file: !833, line: 146, baseType: !830, size: 64, offset: 128)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1285, file: !833, line: 147, baseType: !1291, size: 32, offset: 192)
!1291 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1292, line: 31, baseType: !749)
!1292 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1285, file: !833, line: 148, baseType: !7, size: 32, offset: 224)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1285, file: !833, line: 149, baseType: !772, size: 8, offset: 256)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !851, file: !833, line: 180, baseType: !1296, size: 64)
!1296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1297, size: 64)
!1297 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !833, line: 162, baseType: !1298)
!1298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !833, line: 159, size: 128, elements: !1299)
!1299 = !{!1300, !1301}
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1298, file: !833, line: 160, baseType: !652, size: 64)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1298, file: !833, line: 161, baseType: !708, size: 64, offset: 64)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !851, file: !833, line: 181, baseType: !1303, size: 64)
!1303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1304, size: 64)
!1304 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !833, line: 181, flags: DIFlagFwdDecl)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !846, file: !833, line: 317, baseType: !1306, size: 64)
!1306 = !DICompositeType(tag: DW_TAG_array_type, baseType: !708, size: 64, elements: !753)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !846, file: !833, line: 318, baseType: !1308, size: 320)
!1308 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !833, line: 188, size: 320, elements: !1309)
!1309 = !{!1310, !1312, !1335}
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1308, file: !833, line: 190, baseType: !1311, size: 192)
!1311 = !DICompositeType(tag: DW_TAG_array_type, baseType: !850, size: 192, elements: !726)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1308, file: !833, line: 193, baseType: !1313, size: 64, offset: 192)
!1313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1314, size: 64)
!1314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !833, line: 206, size: 320, elements: !1315)
!1315 = !{!1316, !1320, !1321, !1322, !1334}
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1314, file: !833, line: 208, baseType: !1317, size: 64)
!1317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1318, size: 64)
!1318 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !653, line: 62, baseType: !1319)
!1319 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !653, line: 61, flags: DIFlagFwdDecl)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1314, file: !833, line: 211, baseType: !7, size: 32, offset: 64)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1314, file: !833, line: 214, baseType: !708, size: 64, offset: 128)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1314, file: !833, line: 224, baseType: !1323, size: 64, offset: 192)
!1323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1324, size: 64)
!1324 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !833, line: 202, baseType: !1325)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !833, line: 202, size: 128, elements: !1326)
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1325, file: !833, line: 202, baseType: !1328, size: 128)
!1328 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !833, line: 200, baseType: !1329)
!1329 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !833, line: 200, size: 128, elements: !1330)
!1330 = !{!1331, !1332, !1333}
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1329, file: !833, line: 200, baseType: !7, size: 32)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1329, file: !833, line: 200, baseType: !7, size: 32, offset: 32)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1329, file: !833, line: 200, baseType: !866, size: 64, offset: 64)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1314, file: !833, line: 234, baseType: !1323, size: 64, offset: 256)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1308, file: !833, line: 197, baseType: !708, size: 64, offset: 256)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !846, file: !833, line: 319, baseType: !715, size: 256)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !846, file: !833, line: 320, baseType: !734, size: 192)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !655, file: !164, line: 3384, baseType: !1339, size: 1472)
!1339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !164, line: 3114, size: 1472, elements: !1340)
!1340 = !{!1341, !1362, !1363, !1364, !1365}
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1339, file: !164, line: 3115, baseType: !1342, size: 1216)
!1342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !164, line: 2984, size: 1216, elements: !1343)
!1343 = !{!1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361}
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1342, file: !164, line: 2985, baseType: !826, size: 960)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1342, file: !164, line: 2986, baseType: !652, size: 64, offset: 960)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1342, file: !164, line: 2987, baseType: !652, size: 64, offset: 1024)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1342, file: !164, line: 2988, baseType: !652, size: 64, offset: 1088)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1342, file: !164, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1342, file: !164, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1342, file: !164, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1342, file: !164, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1342, file: !164, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1342, file: !164, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1342, file: !164, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1342, file: !164, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1342, file: !164, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1342, file: !164, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1342, file: !164, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1342, file: !164, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1342, file: !164, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1342, file: !164, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1339, file: !164, line: 3117, baseType: !652, size: 64, offset: 1216)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1339, file: !164, line: 3119, baseType: !652, size: 64, offset: 1280)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1339, file: !164, line: 3121, baseType: !652, size: 64, offset: 1344)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1339, file: !164, line: 3123, baseType: !652, size: 64, offset: 1408)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !655, file: !164, line: 3385, baseType: !1367, size: 1088)
!1367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !164, line: 2874, size: 1088, elements: !1368)
!1368 = !{!1369, !1370, !1371}
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1367, file: !164, line: 2875, baseType: !826, size: 960)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1367, file: !164, line: 2876, baseType: !830, size: 64, offset: 960)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1367, file: !164, line: 2877, baseType: !1372, size: 64, offset: 1024)
!1372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1373, size: 64)
!1373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1374, line: 172, size: 128, elements: !1375)
!1374 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1375 = !{!1376, !1377, !1378, !1379, !1380, !1381, !1382}
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1373, file: !1374, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1373, file: !1374, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1373, file: !1374, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1373, file: !1374, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1373, file: !1374, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1373, file: !1374, line: 195, baseType: !7, size: 32, offset: 32)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1373, file: !1374, line: 199, baseType: !652, size: 64, offset: 64)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !655, file: !164, line: 3386, baseType: !1342, size: 1216)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !655, file: !164, line: 3387, baseType: !1385, size: 1280)
!1385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !164, line: 3093, size: 1280, elements: !1386)
!1386 = !{!1387, !1388}
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1385, file: !164, line: 3094, baseType: !1342, size: 1216)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1385, file: !164, line: 3095, baseType: !1372, size: 64, offset: 1216)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !655, file: !164, line: 3388, baseType: !1390, size: 1216)
!1390 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !164, line: 2824, size: 1216, elements: !1391)
!1391 = !{!1392, !1393, !1394, !1395, !1396, !1397}
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1390, file: !164, line: 2825, baseType: !788, size: 896)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1390, file: !164, line: 2827, baseType: !652, size: 64, offset: 896)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1390, file: !164, line: 2828, baseType: !652, size: 64, offset: 960)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1390, file: !164, line: 2829, baseType: !652, size: 64, offset: 1024)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1390, file: !164, line: 2830, baseType: !652, size: 64, offset: 1088)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1390, file: !164, line: 2831, baseType: !652, size: 64, offset: 1152)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !655, file: !164, line: 3389, baseType: !1399, size: 1024)
!1399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !164, line: 2850, size: 1024, elements: !1400)
!1400 = !{!1401, !1402, !1403}
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1399, file: !164, line: 2851, baseType: !826, size: 960)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1399, file: !164, line: 2852, baseType: !749, size: 32, offset: 960)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1399, file: !164, line: 2853, baseType: !749, size: 32, offset: 992)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !655, file: !164, line: 3390, baseType: !1405, size: 1024)
!1405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !164, line: 2857, size: 1024, elements: !1406)
!1406 = !{!1407, !1408}
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1405, file: !164, line: 2858, baseType: !826, size: 960)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1405, file: !164, line: 2859, baseType: !1372, size: 64, offset: 960)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !655, file: !164, line: 3391, baseType: !1410, size: 960)
!1410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !164, line: 2862, size: 960, elements: !1411)
!1411 = !{!1412}
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1410, file: !164, line: 2863, baseType: !826, size: 960)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !655, file: !164, line: 3392, baseType: !1414, size: 1472)
!1414 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !164, line: 3304, size: 1472, elements: !1415)
!1415 = !{!1416}
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1414, file: !164, line: 3305, baseType: !1339, size: 1472)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !655, file: !164, line: 3393, baseType: !1418, size: 1792)
!1418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !164, line: 3248, size: 1792, elements: !1419)
!1419 = !{!1420, !1421, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660}
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1418, file: !164, line: 3249, baseType: !1339, size: 1472)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1418, file: !164, line: 3251, baseType: !1422, size: 64, offset: 1472)
!1422 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1423, size: 64)
!1423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1424, line: 463, size: 1152, elements: !1425)
!1424 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1425 = !{!1426, !1429, !1460, !1461, !1576, !1584, !1585, !1586, !1587, !1588, !1589, !1613, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639}
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1423, file: !1424, line: 464, baseType: !1427, size: 64)
!1427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1428, size: 64)
!1428 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1424, line: 464, flags: DIFlagFwdDecl)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1423, file: !1424, line: 467, baseType: !1430, size: 64, offset: 64)
!1430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1431, size: 64)
!1431 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !1432)
!1432 = !{!1433, !1435, !1436, !1449, !1450, !1451, !1452, !1453, !1454, !1456, !1458, !1459}
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1431, file: !135, line: 377, baseType: !1434, size: 64)
!1434 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !653, line: 111, baseType: !946)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1431, file: !135, line: 378, baseType: !1434, size: 64, offset: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1431, file: !135, line: 381, baseType: !1437, size: 64, offset: 128)
!1437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1438, size: 64)
!1438 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !1439)
!1439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !1440)
!1440 = !{!1441}
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1439, file: !135, line: 282, baseType: !1442, size: 128)
!1442 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !1443)
!1443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !1444)
!1444 = !{!1445, !1446, !1447}
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1443, file: !135, line: 281, baseType: !7, size: 32)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1443, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1443, file: !135, line: 281, baseType: !1448, size: 64, offset: 64)
!1448 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1434, size: 64, elements: !753)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1431, file: !135, line: 384, baseType: !749, size: 32, offset: 192)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1431, file: !135, line: 387, baseType: !749, size: 32, offset: 224)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1431, file: !135, line: 390, baseType: !749, size: 32, offset: 256)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1431, file: !135, line: 394, baseType: !1437, size: 64, offset: 320)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1431, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1431, file: !135, line: 399, baseType: !1455, size: 64, offset: 416)
!1455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !900)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1431, file: !135, line: 402, baseType: !1457, size: 64, offset: 480)
!1457 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !900)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1431, file: !135, line: 406, baseType: !749, size: 32, offset: 544)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1431, file: !135, line: 409, baseType: !749, size: 32, offset: 576)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1423, file: !1424, line: 470, baseType: !973, size: 64, offset: 128)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1423, file: !1424, line: 473, baseType: !1462, size: 64, offset: 192)
!1462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1463, size: 64)
!1463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1374, line: 39, size: 1152, elements: !1464)
!1464 = !{!1465, !1515, !1528, !1540, !1541, !1553, !1554, !1558, !1559, !1560, !1561, !1562}
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1463, file: !1374, line: 41, baseType: !1466, size: 64)
!1466 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1467, line: 144, baseType: !1468)
!1467 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1469, size: 64)
!1469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1467, line: 100, size: 896, elements: !1470)
!1470 = !{!1471, !1479, !1484, !1489, !1491, !1492, !1493, !1494, !1495, !1496, !1501, !1503, !1504, !1509, !1514}
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1469, file: !1467, line: 102, baseType: !1472, size: 64)
!1472 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1467, line: 52, baseType: !1473)
!1473 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1474, size: 64)
!1474 = !DISubroutineType(types: !1475)
!1475 = !{!1476, !1477}
!1476 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1467, line: 47, baseType: !7)
!1477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1478, size: 64)
!1478 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1469, file: !1467, line: 105, baseType: !1480, size: 64, offset: 64)
!1480 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1467, line: 59, baseType: !1481)
!1481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1482, size: 64)
!1482 = !DISubroutineType(types: !1483)
!1483 = !{!749, !1477, !1477}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1469, file: !1467, line: 108, baseType: !1485, size: 64, offset: 128)
!1485 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1467, line: 63, baseType: !1486)
!1486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1487, size: 64)
!1487 = !DISubroutineType(types: !1488)
!1488 = !{null, !651}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1469, file: !1467, line: 111, baseType: !1490, size: 64, offset: 192)
!1490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !651, size: 64)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1469, file: !1467, line: 114, baseType: !1127, size: 64, offset: 256)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1469, file: !1467, line: 117, baseType: !1127, size: 64, offset: 320)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1469, file: !1467, line: 120, baseType: !1127, size: 64, offset: 384)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1469, file: !1467, line: 124, baseType: !7, size: 32, offset: 448)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1469, file: !1467, line: 128, baseType: !7, size: 32, offset: 480)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1469, file: !1467, line: 131, baseType: !1497, size: 64, offset: 512)
!1497 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1467, line: 75, baseType: !1498)
!1498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1499, size: 64)
!1499 = !DISubroutineType(types: !1500)
!1500 = !{!651, !1127, !1127}
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1469, file: !1467, line: 132, baseType: !1502, size: 64, offset: 576)
!1502 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1467, line: 78, baseType: !1486)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1469, file: !1467, line: 135, baseType: !651, size: 64, offset: 640)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1469, file: !1467, line: 136, baseType: !1505, size: 64, offset: 704)
!1505 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1467, line: 82, baseType: !1506)
!1506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1507, size: 64)
!1507 = !DISubroutineType(types: !1508)
!1508 = !{!651, !651, !1127, !1127}
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1469, file: !1467, line: 137, baseType: !1510, size: 64, offset: 768)
!1510 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1467, line: 83, baseType: !1511)
!1511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1512, size: 64)
!1512 = !DISubroutineType(types: !1513)
!1513 = !{null, !651, !651}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1469, file: !1467, line: 141, baseType: !7, size: 32, offset: 832)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1463, file: !1374, line: 48, baseType: !1516, size: 64, offset: 64)
!1516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1517, size: 64)
!1517 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !391, line: 35, baseType: !1518)
!1518 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !391, line: 35, size: 128, elements: !1519)
!1519 = !{!1520}
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1518, file: !391, line: 35, baseType: !1521, size: 128)
!1521 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !391, line: 33, baseType: !1522)
!1522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !391, line: 33, size: 128, elements: !1523)
!1523 = !{!1524, !1525, !1526}
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1522, file: !391, line: 33, baseType: !7, size: 32)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1522, file: !391, line: 33, baseType: !7, size: 32, offset: 32)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1522, file: !391, line: 33, baseType: !1527, size: 64, offset: 64)
!1527 = !DICompositeType(tag: DW_TAG_array_type, baseType: !982, size: 64, elements: !753)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1463, file: !1374, line: 51, baseType: !1529, size: 64, offset: 128)
!1529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1530, size: 64)
!1530 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !164, line: 183, baseType: !1531)
!1531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !164, line: 183, size: 128, elements: !1532)
!1532 = !{!1533}
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1531, file: !164, line: 183, baseType: !1534, size: 128)
!1534 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !164, line: 182, baseType: !1535)
!1535 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !164, line: 182, size: 128, elements: !1536)
!1536 = !{!1537, !1538, !1539}
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1535, file: !164, line: 182, baseType: !7, size: 32)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1535, file: !164, line: 182, baseType: !7, size: 32, offset: 32)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1535, file: !164, line: 182, baseType: !1035, size: 64, offset: 64)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1463, file: !1374, line: 54, baseType: !652, size: 64, offset: 192)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1463, file: !1374, line: 57, baseType: !1542, size: 128, offset: 256)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1543, line: 31, size: 128, elements: !1544)
!1543 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1544 = !{!1545, !1546, !1547, !1548, !1549, !1550, !1551}
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1542, file: !1543, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1542, file: !1543, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1542, file: !1543, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1542, file: !1543, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1542, file: !1543, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1542, file: !1543, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1542, file: !1543, line: 56, baseType: !1552, size: 64, offset: 64)
!1552 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !653, line: 47, baseType: !884)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1463, file: !1374, line: 60, baseType: !1542, size: 128, offset: 384)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1463, file: !1374, line: 64, baseType: !1555, size: 64, offset: 512)
!1555 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1556, size: 64)
!1556 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1557, line: 33, flags: DIFlagFwdDecl)
!1557 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1463, file: !1374, line: 67, baseType: !652, size: 64, offset: 576)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1463, file: !1374, line: 73, baseType: !1466, size: 64, offset: 640)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1463, file: !1374, line: 77, baseType: !1552, size: 64, offset: 704)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1463, file: !1374, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1463, file: !1374, line: 82, baseType: !1563, size: 320, offset: 832)
!1563 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !630, line: 62, size: 320, elements: !1564)
!1564 = !{!1565, !1571, !1572, !1573, !1574, !1575}
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1563, file: !630, line: 63, baseType: !1566, size: 64)
!1566 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1567, size: 64)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !630, line: 56, size: 128, elements: !1568)
!1568 = !{!1569, !1570}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1567, file: !630, line: 57, baseType: !1566, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1567, file: !630, line: 58, baseType: !751, size: 8, offset: 64)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1563, file: !630, line: 64, baseType: !7, size: 32, offset: 64)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1563, file: !630, line: 66, baseType: !7, size: 32, offset: 96)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1563, file: !630, line: 68, baseType: !772, size: 8, offset: 128)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1563, file: !630, line: 70, baseType: !1011, size: 64, offset: 192)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1563, file: !630, line: 71, baseType: !1018, size: 64, offset: 256)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1423, file: !1424, line: 476, baseType: !1577, size: 64, offset: 256)
!1577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1578, size: 64)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !146, line: 187, size: 256, elements: !1579)
!1579 = !{!1580, !1581, !1582, !1583}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1578, file: !146, line: 189, baseType: !749, size: 32)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1578, file: !146, line: 192, baseType: !1212, size: 64, offset: 64)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1578, file: !146, line: 197, baseType: !1466, size: 64, offset: 128)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1578, file: !146, line: 200, baseType: !1197, size: 64, offset: 192)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1423, file: !1424, line: 479, baseType: !1466, size: 64, offset: 320)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1423, file: !1424, line: 484, baseType: !652, size: 64, offset: 384)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1423, file: !1424, line: 488, baseType: !652, size: 64, offset: 448)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1423, file: !1424, line: 493, baseType: !652, size: 64, offset: 512)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1423, file: !1424, line: 496, baseType: !652, size: 64, offset: 576)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1423, file: !1424, line: 501, baseType: !1590, size: 64, offset: 640)
!1590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1591, size: 64)
!1591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !159, line: 2355, size: 576, elements: !1592)
!1592 = !{!1593, !1596, !1597, !1598, !1599, !1601, !1602, !1607, !1608, !1609, !1610, !1611, !1612}
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1591, file: !159, line: 2356, baseType: !1594, size: 64)
!1594 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1595, size: 64)
!1595 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !159, line: 2356, flags: DIFlagFwdDecl)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1591, file: !159, line: 2357, baseType: !856, size: 64, offset: 64)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1591, file: !159, line: 2358, baseType: !749, size: 32, offset: 128)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1591, file: !159, line: 2359, baseType: !749, size: 32, offset: 160)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1591, file: !159, line: 2360, baseType: !1600, size: 128, offset: 192)
!1600 = !DICompositeType(tag: DW_TAG_array_type, baseType: !749, size: 128, elements: !925)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1591, file: !159, line: 2364, baseType: !749, size: 32, offset: 320)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1591, file: !159, line: 2367, baseType: !1603, size: 128, offset: 384)
!1603 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !159, line: 2349, size: 128, elements: !1604)
!1604 = !{!1605, !1606}
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1603, file: !159, line: 2351, baseType: !830, size: 64)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1603, file: !159, line: 2352, baseType: !708, size: 64, offset: 64)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1591, file: !159, line: 2371, baseType: !158, size: 32, offset: 512)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1591, file: !159, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1591, file: !159, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1591, file: !159, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1591, file: !159, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1591, file: !159, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1423, file: !1424, line: 504, baseType: !1614, size: 64, offset: 704)
!1614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1615, size: 64)
!1615 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1424, line: 504, flags: DIFlagFwdDecl)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1423, file: !1424, line: 507, baseType: !1466, size: 64, offset: 768)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1423, file: !1424, line: 510, baseType: !749, size: 32, offset: 832)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1423, file: !1424, line: 513, baseType: !749, size: 32, offset: 864)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1423, file: !1424, line: 516, baseType: !780, size: 32, offset: 896)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1423, file: !1424, line: 519, baseType: !780, size: 32, offset: 928)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1423, file: !1424, line: 522, baseType: !7, size: 32, offset: 960)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1423, file: !1424, line: 523, baseType: !7, size: 32, offset: 992)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1423, file: !1424, line: 528, baseType: !856, size: 64, offset: 1024)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1423, file: !1424, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1423, file: !1424, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1423, file: !1424, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1423, file: !1424, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1423, file: !1424, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1423, file: !1424, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1423, file: !1424, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1423, file: !1424, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1423, file: !1424, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1423, file: !1424, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1423, file: !1424, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1423, file: !1424, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1423, file: !1424, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1423, file: !1424, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1423, file: !1424, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1423, file: !1424, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1418, file: !164, line: 3254, baseType: !652, size: 64, offset: 1536)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1418, file: !164, line: 3257, baseType: !652, size: 64, offset: 1600)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1418, file: !164, line: 3258, baseType: !652, size: 64, offset: 1664)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1418, file: !164, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1418, file: !164, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1418, file: !164, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1418, file: !164, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1418, file: !164, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1418, file: !164, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1418, file: !164, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1418, file: !164, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1418, file: !164, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1418, file: !164, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1418, file: !164, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1418, file: !164, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1418, file: !164, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1418, file: !164, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1418, file: !164, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1418, file: !164, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1418, file: !164, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1418, file: !164, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !655, file: !164, line: 3394, baseType: !1662, size: 1344)
!1662 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !164, line: 2279, size: 1344, elements: !1663)
!1663 = !{!1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705}
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1662, file: !164, line: 2280, baseType: !691, size: 192)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1662, file: !164, line: 2281, baseType: !652, size: 64, offset: 192)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1662, file: !164, line: 2282, baseType: !652, size: 64, offset: 256)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1662, file: !164, line: 2283, baseType: !652, size: 64, offset: 320)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1662, file: !164, line: 2284, baseType: !652, size: 64, offset: 384)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1662, file: !164, line: 2285, baseType: !7, size: 32, offset: 448)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1662, file: !164, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1662, file: !164, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1662, file: !164, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1662, file: !164, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1662, file: !164, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1662, file: !164, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1662, file: !164, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1662, file: !164, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1662, file: !164, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1662, file: !164, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1662, file: !164, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1662, file: !164, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1662, file: !164, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1662, file: !164, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1662, file: !164, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1662, file: !164, line: 2305, baseType: !7, size: 32, offset: 512)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1662, file: !164, line: 2306, baseType: !1291, size: 32, offset: 544)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1662, file: !164, line: 2307, baseType: !652, size: 64, offset: 576)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1662, file: !164, line: 2308, baseType: !652, size: 64, offset: 640)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1662, file: !164, line: 2314, baseType: !1690, size: 64, offset: 704)
!1690 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !164, line: 2309, size: 64, elements: !1691)
!1691 = !{!1692, !1693, !1694}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1690, file: !164, line: 2310, baseType: !749, size: 32)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1690, file: !164, line: 2311, baseType: !856, size: 64)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1690, file: !164, line: 2312, baseType: !1695, size: 64)
!1695 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1696, size: 64)
!1696 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !164, line: 2277, flags: DIFlagFwdDecl)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1662, file: !164, line: 2315, baseType: !652, size: 64, offset: 768)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1662, file: !164, line: 2316, baseType: !652, size: 64, offset: 832)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1662, file: !164, line: 2317, baseType: !652, size: 64, offset: 896)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1662, file: !164, line: 2318, baseType: !652, size: 64, offset: 960)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1662, file: !164, line: 2319, baseType: !652, size: 64, offset: 1024)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1662, file: !164, line: 2320, baseType: !652, size: 64, offset: 1088)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1662, file: !164, line: 2321, baseType: !652, size: 64, offset: 1152)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1662, file: !164, line: 2322, baseType: !652, size: 64, offset: 1216)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1662, file: !164, line: 2324, baseType: !1706, size: 64, offset: 1280)
!1706 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1707, size: 64)
!1707 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !164, line: 2324, flags: DIFlagFwdDecl)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !655, file: !164, line: 3395, baseType: !1709, size: 320)
!1709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !164, line: 1469, size: 320, elements: !1710)
!1710 = !{!1711, !1712, !1713}
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1709, file: !164, line: 1470, baseType: !691, size: 192)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1709, file: !164, line: 1471, baseType: !652, size: 64, offset: 192)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1709, file: !164, line: 1472, baseType: !652, size: 64, offset: 256)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !655, file: !164, line: 3396, baseType: !1715, size: 320)
!1715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !164, line: 1482, size: 320, elements: !1716)
!1716 = !{!1717, !1718, !1719}
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1715, file: !164, line: 1483, baseType: !691, size: 192)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1715, file: !164, line: 1484, baseType: !749, size: 32, offset: 192)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1715, file: !164, line: 1485, baseType: !1035, size: 64, offset: 256)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !655, file: !164, line: 3397, baseType: !1721, size: 384)
!1721 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !164, line: 1829, size: 384, elements: !1722)
!1722 = !{!1723, !1724, !1725, !1726}
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1721, file: !164, line: 1830, baseType: !691, size: 192)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1721, file: !164, line: 1831, baseType: !780, size: 32, offset: 192)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1721, file: !164, line: 1832, baseType: !652, size: 64, offset: 256)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1721, file: !164, line: 1835, baseType: !1035, size: 64, offset: 320)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !655, file: !164, line: 3398, baseType: !1728, size: 704)
!1728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !164, line: 1898, size: 704, elements: !1729)
!1729 = !{!1730, !1731, !1732, !1733, !1734, !1739}
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1728, file: !164, line: 1899, baseType: !691, size: 192)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1728, file: !164, line: 1902, baseType: !652, size: 64, offset: 192)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1728, file: !164, line: 1905, baseType: !982, size: 64, offset: 256)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1728, file: !164, line: 1908, baseType: !7, size: 32, offset: 320)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1728, file: !164, line: 1911, baseType: !1735, size: 64, offset: 384)
!1735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1736, size: 64)
!1736 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1374, line: 117, size: 128, elements: !1737)
!1737 = !{!1738}
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1736, file: !1374, line: 120, baseType: !1542, size: 128)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1728, file: !164, line: 1914, baseType: !1023, size: 256, offset: 448)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !655, file: !164, line: 3399, baseType: !1741, size: 704)
!1741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !164, line: 2008, size: 704, elements: !1742)
!1742 = !{!1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753}
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1741, file: !164, line: 2009, baseType: !691, size: 192)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1741, file: !164, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1741, file: !164, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1741, file: !164, line: 2014, baseType: !780, size: 32, offset: 224)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1741, file: !164, line: 2016, baseType: !652, size: 64, offset: 256)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1741, file: !164, line: 2017, baseType: !1529, size: 64, offset: 320)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1741, file: !164, line: 2019, baseType: !652, size: 64, offset: 384)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1741, file: !164, line: 2020, baseType: !652, size: 64, offset: 448)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1741, file: !164, line: 2021, baseType: !652, size: 64, offset: 512)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1741, file: !164, line: 2022, baseType: !652, size: 64, offset: 576)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1741, file: !164, line: 2023, baseType: !652, size: 64, offset: 640)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !655, file: !164, line: 3400, baseType: !1755, size: 832)
!1755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !164, line: 2430, size: 832, elements: !1756)
!1756 = !{!1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766}
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1755, file: !164, line: 2431, baseType: !691, size: 192)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1755, file: !164, line: 2433, baseType: !652, size: 64, offset: 192)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1755, file: !164, line: 2434, baseType: !652, size: 64, offset: 256)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1755, file: !164, line: 2435, baseType: !652, size: 64, offset: 320)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1755, file: !164, line: 2436, baseType: !652, size: 64, offset: 384)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1755, file: !164, line: 2437, baseType: !1529, size: 64, offset: 448)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1755, file: !164, line: 2438, baseType: !652, size: 64, offset: 512)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1755, file: !164, line: 2440, baseType: !652, size: 64, offset: 576)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1755, file: !164, line: 2441, baseType: !652, size: 64, offset: 640)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1755, file: !164, line: 2443, baseType: !1767, size: 128, offset: 704)
!1767 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !164, line: 182, baseType: !1768)
!1768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !164, line: 182, size: 128, elements: !1769)
!1769 = !{!1770}
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1768, file: !164, line: 182, baseType: !1534, size: 128)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !655, file: !164, line: 3401, baseType: !1772, size: 320)
!1772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !164, line: 3327, size: 320, elements: !1773)
!1773 = !{!1774, !1775, !1782}
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1772, file: !164, line: 3329, baseType: !691, size: 192)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1772, file: !164, line: 3330, baseType: !1776, size: 64, offset: 192)
!1776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1777, size: 64)
!1777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !164, line: 3320, size: 192, elements: !1778)
!1778 = !{!1779, !1780, !1781}
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1777, file: !164, line: 3322, baseType: !1776, size: 64)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1777, file: !164, line: 3323, baseType: !1776, size: 64, offset: 64)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1777, file: !164, line: 3324, baseType: !652, size: 64, offset: 128)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1772, file: !164, line: 3331, baseType: !1776, size: 64, offset: 256)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !655, file: !164, line: 3402, baseType: !1784, size: 256)
!1784 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !164, line: 1540, size: 256, elements: !1785)
!1785 = !{!1786, !1787}
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1784, file: !164, line: 1541, baseType: !691, size: 192)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1784, file: !164, line: 1542, baseType: !1788, size: 64, offset: 192)
!1788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1789, size: 64)
!1789 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !164, line: 1538, baseType: !1790)
!1790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !164, line: 1538, size: 192, elements: !1791)
!1791 = !{!1792}
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1790, file: !164, line: 1538, baseType: !1793, size: 192)
!1793 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !164, line: 1537, baseType: !1794)
!1794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !164, line: 1537, size: 192, elements: !1795)
!1795 = !{!1796, !1797, !1798}
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1794, file: !164, line: 1537, baseType: !7, size: 32)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1794, file: !164, line: 1537, baseType: !7, size: 32, offset: 32)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1794, file: !164, line: 1537, baseType: !1799, size: 128, offset: 64)
!1799 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1800, size: 128, elements: !753)
!1800 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !164, line: 1535, baseType: !1801)
!1801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !164, line: 1532, size: 128, elements: !1802)
!1802 = !{!1803, !1804}
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1801, file: !164, line: 1533, baseType: !652, size: 64)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1801, file: !164, line: 1534, baseType: !652, size: 64, offset: 64)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !655, file: !164, line: 3403, baseType: !1806, size: 512)
!1806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !164, line: 1938, size: 512, elements: !1807)
!1807 = !{!1808, !1809, !1810, !1811, !1817, !1818, !1819}
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1806, file: !164, line: 1939, baseType: !691, size: 192)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1806, file: !164, line: 1940, baseType: !780, size: 32, offset: 192)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1806, file: !164, line: 1941, baseType: !163, size: 32, offset: 224)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1806, file: !164, line: 1946, baseType: !1812, size: 32, offset: 256)
!1812 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !164, line: 1942, size: 32, elements: !1813)
!1813 = !{!1814, !1815, !1816}
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1812, file: !164, line: 1943, baseType: !182, size: 32)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1812, file: !164, line: 1944, baseType: !189, size: 32)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1812, file: !164, line: 1945, baseType: !196, size: 32)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1806, file: !164, line: 1950, baseType: !972, size: 64, offset: 320)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1806, file: !164, line: 1951, baseType: !972, size: 64, offset: 384)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1806, file: !164, line: 1953, baseType: !1035, size: 64, offset: 448)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !655, file: !164, line: 3404, baseType: !1821, size: 1664)
!1821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !164, line: 3337, size: 1664, elements: !1822)
!1822 = !{!1823, !1824}
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1821, file: !164, line: 3338, baseType: !691, size: 192)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1821, file: !164, line: 3341, baseType: !1825, size: 1472, offset: 192)
!1825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1826, line: 410, size: 1472, elements: !1827)
!1826 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1827 = !{!1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991}
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1825, file: !1826, line: 412, baseType: !749, size: 32)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1825, file: !1826, line: 413, baseType: !749, size: 32, offset: 32)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1825, file: !1826, line: 414, baseType: !749, size: 32, offset: 64)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1825, file: !1826, line: 415, baseType: !749, size: 32, offset: 96)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1825, file: !1826, line: 416, baseType: !749, size: 32, offset: 128)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1825, file: !1826, line: 417, baseType: !749, size: 32, offset: 160)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1825, file: !1826, line: 418, baseType: !772, size: 8, offset: 192)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1825, file: !1826, line: 419, baseType: !772, size: 8, offset: 200)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1825, file: !1826, line: 420, baseType: !1837, size: 8, offset: 208)
!1837 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1825, file: !1826, line: 421, baseType: !1837, size: 8, offset: 216)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1825, file: !1826, line: 422, baseType: !1837, size: 8, offset: 224)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1825, file: !1826, line: 423, baseType: !1837, size: 8, offset: 232)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1825, file: !1826, line: 424, baseType: !1837, size: 8, offset: 240)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1825, file: !1826, line: 425, baseType: !1837, size: 8, offset: 248)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1825, file: !1826, line: 426, baseType: !1837, size: 8, offset: 256)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1825, file: !1826, line: 427, baseType: !1837, size: 8, offset: 264)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1825, file: !1826, line: 428, baseType: !1837, size: 8, offset: 272)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1825, file: !1826, line: 429, baseType: !1837, size: 8, offset: 280)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1825, file: !1826, line: 430, baseType: !1837, size: 8, offset: 288)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1825, file: !1826, line: 431, baseType: !1837, size: 8, offset: 296)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1825, file: !1826, line: 432, baseType: !1837, size: 8, offset: 304)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1825, file: !1826, line: 433, baseType: !1837, size: 8, offset: 312)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1825, file: !1826, line: 434, baseType: !1837, size: 8, offset: 320)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1825, file: !1826, line: 435, baseType: !1837, size: 8, offset: 328)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1825, file: !1826, line: 436, baseType: !1837, size: 8, offset: 336)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1825, file: !1826, line: 437, baseType: !1837, size: 8, offset: 344)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1825, file: !1826, line: 438, baseType: !1837, size: 8, offset: 352)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1825, file: !1826, line: 439, baseType: !1837, size: 8, offset: 360)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1825, file: !1826, line: 440, baseType: !1837, size: 8, offset: 368)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1825, file: !1826, line: 441, baseType: !1837, size: 8, offset: 376)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1825, file: !1826, line: 442, baseType: !1837, size: 8, offset: 384)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1825, file: !1826, line: 443, baseType: !1837, size: 8, offset: 392)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1825, file: !1826, line: 444, baseType: !1837, size: 8, offset: 400)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1825, file: !1826, line: 445, baseType: !1837, size: 8, offset: 408)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1825, file: !1826, line: 446, baseType: !1837, size: 8, offset: 416)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1825, file: !1826, line: 447, baseType: !1837, size: 8, offset: 424)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1825, file: !1826, line: 448, baseType: !1837, size: 8, offset: 432)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1825, file: !1826, line: 449, baseType: !1837, size: 8, offset: 440)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1825, file: !1826, line: 450, baseType: !1837, size: 8, offset: 448)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1825, file: !1826, line: 451, baseType: !1837, size: 8, offset: 456)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1825, file: !1826, line: 452, baseType: !1837, size: 8, offset: 464)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1825, file: !1826, line: 453, baseType: !1837, size: 8, offset: 472)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1825, file: !1826, line: 454, baseType: !1837, size: 8, offset: 480)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1825, file: !1826, line: 455, baseType: !1837, size: 8, offset: 488)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1825, file: !1826, line: 456, baseType: !1837, size: 8, offset: 496)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1825, file: !1826, line: 457, baseType: !1837, size: 8, offset: 504)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1825, file: !1826, line: 458, baseType: !1837, size: 8, offset: 512)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1825, file: !1826, line: 459, baseType: !1837, size: 8, offset: 520)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1825, file: !1826, line: 460, baseType: !1837, size: 8, offset: 528)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1825, file: !1826, line: 461, baseType: !1837, size: 8, offset: 536)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1825, file: !1826, line: 462, baseType: !1837, size: 8, offset: 544)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1825, file: !1826, line: 463, baseType: !1837, size: 8, offset: 552)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1825, file: !1826, line: 464, baseType: !1837, size: 8, offset: 560)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1825, file: !1826, line: 465, baseType: !1837, size: 8, offset: 568)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1825, file: !1826, line: 466, baseType: !1837, size: 8, offset: 576)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1825, file: !1826, line: 467, baseType: !1837, size: 8, offset: 584)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1825, file: !1826, line: 468, baseType: !1837, size: 8, offset: 592)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1825, file: !1826, line: 469, baseType: !1837, size: 8, offset: 600)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1825, file: !1826, line: 470, baseType: !1837, size: 8, offset: 608)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1825, file: !1826, line: 471, baseType: !1837, size: 8, offset: 616)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1825, file: !1826, line: 472, baseType: !1837, size: 8, offset: 624)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1825, file: !1826, line: 473, baseType: !1837, size: 8, offset: 632)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1825, file: !1826, line: 474, baseType: !1837, size: 8, offset: 640)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1825, file: !1826, line: 475, baseType: !1837, size: 8, offset: 648)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1825, file: !1826, line: 476, baseType: !1837, size: 8, offset: 656)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1825, file: !1826, line: 477, baseType: !1837, size: 8, offset: 664)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1825, file: !1826, line: 478, baseType: !1837, size: 8, offset: 672)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1825, file: !1826, line: 479, baseType: !1837, size: 8, offset: 680)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1825, file: !1826, line: 480, baseType: !1837, size: 8, offset: 688)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1825, file: !1826, line: 481, baseType: !1837, size: 8, offset: 696)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1825, file: !1826, line: 482, baseType: !1837, size: 8, offset: 704)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1825, file: !1826, line: 483, baseType: !1837, size: 8, offset: 712)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1825, file: !1826, line: 484, baseType: !1837, size: 8, offset: 720)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1825, file: !1826, line: 485, baseType: !1837, size: 8, offset: 728)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1825, file: !1826, line: 486, baseType: !1837, size: 8, offset: 736)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1825, file: !1826, line: 487, baseType: !1837, size: 8, offset: 744)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1825, file: !1826, line: 488, baseType: !1837, size: 8, offset: 752)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1825, file: !1826, line: 489, baseType: !1837, size: 8, offset: 760)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1825, file: !1826, line: 490, baseType: !1837, size: 8, offset: 768)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1825, file: !1826, line: 491, baseType: !1837, size: 8, offset: 776)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1825, file: !1826, line: 492, baseType: !1837, size: 8, offset: 784)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1825, file: !1826, line: 493, baseType: !1837, size: 8, offset: 792)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1825, file: !1826, line: 494, baseType: !1837, size: 8, offset: 800)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1825, file: !1826, line: 495, baseType: !1837, size: 8, offset: 808)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1825, file: !1826, line: 496, baseType: !1837, size: 8, offset: 816)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1825, file: !1826, line: 497, baseType: !1837, size: 8, offset: 824)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1825, file: !1826, line: 498, baseType: !1837, size: 8, offset: 832)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1825, file: !1826, line: 499, baseType: !1837, size: 8, offset: 840)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1825, file: !1826, line: 500, baseType: !1837, size: 8, offset: 848)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1825, file: !1826, line: 501, baseType: !1837, size: 8, offset: 856)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1825, file: !1826, line: 502, baseType: !1837, size: 8, offset: 864)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1825, file: !1826, line: 503, baseType: !1837, size: 8, offset: 872)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1825, file: !1826, line: 504, baseType: !1837, size: 8, offset: 880)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1825, file: !1826, line: 505, baseType: !1837, size: 8, offset: 888)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1825, file: !1826, line: 506, baseType: !1837, size: 8, offset: 896)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1825, file: !1826, line: 507, baseType: !1837, size: 8, offset: 904)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1825, file: !1826, line: 508, baseType: !1837, size: 8, offset: 912)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1825, file: !1826, line: 509, baseType: !1837, size: 8, offset: 920)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1825, file: !1826, line: 510, baseType: !1837, size: 8, offset: 928)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1825, file: !1826, line: 511, baseType: !1837, size: 8, offset: 936)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1825, file: !1826, line: 512, baseType: !1837, size: 8, offset: 944)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1825, file: !1826, line: 513, baseType: !1837, size: 8, offset: 952)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1825, file: !1826, line: 514, baseType: !1837, size: 8, offset: 960)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1825, file: !1826, line: 515, baseType: !1837, size: 8, offset: 968)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1825, file: !1826, line: 516, baseType: !1837, size: 8, offset: 976)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1825, file: !1826, line: 517, baseType: !1837, size: 8, offset: 984)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1825, file: !1826, line: 518, baseType: !1837, size: 8, offset: 992)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1825, file: !1826, line: 519, baseType: !1837, size: 8, offset: 1000)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1825, file: !1826, line: 520, baseType: !1837, size: 8, offset: 1008)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1825, file: !1826, line: 521, baseType: !1837, size: 8, offset: 1016)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1825, file: !1826, line: 522, baseType: !1837, size: 8, offset: 1024)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1825, file: !1826, line: 523, baseType: !1837, size: 8, offset: 1032)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1825, file: !1826, line: 524, baseType: !1837, size: 8, offset: 1040)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1825, file: !1826, line: 525, baseType: !1837, size: 8, offset: 1048)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1825, file: !1826, line: 526, baseType: !1837, size: 8, offset: 1056)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1825, file: !1826, line: 527, baseType: !1837, size: 8, offset: 1064)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1825, file: !1826, line: 528, baseType: !1837, size: 8, offset: 1072)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1825, file: !1826, line: 529, baseType: !1837, size: 8, offset: 1080)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1825, file: !1826, line: 530, baseType: !1837, size: 8, offset: 1088)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1825, file: !1826, line: 531, baseType: !1837, size: 8, offset: 1096)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1825, file: !1826, line: 532, baseType: !1837, size: 8, offset: 1104)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1825, file: !1826, line: 533, baseType: !1837, size: 8, offset: 1112)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1825, file: !1826, line: 534, baseType: !1837, size: 8, offset: 1120)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1825, file: !1826, line: 535, baseType: !1837, size: 8, offset: 1128)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1825, file: !1826, line: 536, baseType: !1837, size: 8, offset: 1136)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1825, file: !1826, line: 537, baseType: !1837, size: 8, offset: 1144)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1825, file: !1826, line: 538, baseType: !1837, size: 8, offset: 1152)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1825, file: !1826, line: 539, baseType: !1837, size: 8, offset: 1160)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1825, file: !1826, line: 540, baseType: !1837, size: 8, offset: 1168)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1825, file: !1826, line: 541, baseType: !1837, size: 8, offset: 1176)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1825, file: !1826, line: 542, baseType: !1837, size: 8, offset: 1184)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1825, file: !1826, line: 543, baseType: !1837, size: 8, offset: 1192)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1825, file: !1826, line: 544, baseType: !1837, size: 8, offset: 1200)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1825, file: !1826, line: 545, baseType: !1837, size: 8, offset: 1208)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1825, file: !1826, line: 546, baseType: !1837, size: 8, offset: 1216)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1825, file: !1826, line: 547, baseType: !1837, size: 8, offset: 1224)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1825, file: !1826, line: 548, baseType: !1837, size: 8, offset: 1232)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1825, file: !1826, line: 549, baseType: !1837, size: 8, offset: 1240)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1825, file: !1826, line: 550, baseType: !1837, size: 8, offset: 1248)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1825, file: !1826, line: 551, baseType: !1837, size: 8, offset: 1256)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1825, file: !1826, line: 552, baseType: !1837, size: 8, offset: 1264)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1825, file: !1826, line: 553, baseType: !1837, size: 8, offset: 1272)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1825, file: !1826, line: 554, baseType: !1837, size: 8, offset: 1280)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1825, file: !1826, line: 555, baseType: !1837, size: 8, offset: 1288)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1825, file: !1826, line: 556, baseType: !1837, size: 8, offset: 1296)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1825, file: !1826, line: 557, baseType: !1837, size: 8, offset: 1304)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1825, file: !1826, line: 558, baseType: !1837, size: 8, offset: 1312)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1825, file: !1826, line: 559, baseType: !1837, size: 8, offset: 1320)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1825, file: !1826, line: 560, baseType: !1837, size: 8, offset: 1328)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1825, file: !1826, line: 561, baseType: !1837, size: 8, offset: 1336)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1825, file: !1826, line: 562, baseType: !1837, size: 8, offset: 1344)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1825, file: !1826, line: 563, baseType: !1837, size: 8, offset: 1352)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1825, file: !1826, line: 564, baseType: !1837, size: 8, offset: 1360)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1825, file: !1826, line: 565, baseType: !1837, size: 8, offset: 1368)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1825, file: !1826, line: 566, baseType: !1837, size: 8, offset: 1376)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1825, file: !1826, line: 567, baseType: !1837, size: 8, offset: 1384)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1825, file: !1826, line: 568, baseType: !1837, size: 8, offset: 1392)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1825, file: !1826, line: 569, baseType: !1837, size: 8, offset: 1400)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1825, file: !1826, line: 570, baseType: !1837, size: 8, offset: 1408)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1825, file: !1826, line: 571, baseType: !1837, size: 8, offset: 1416)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1825, file: !1826, line: 572, baseType: !1837, size: 8, offset: 1424)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1825, file: !1826, line: 573, baseType: !1837, size: 8, offset: 1432)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1825, file: !1826, line: 574, baseType: !1837, size: 8, offset: 1440)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !655, file: !164, line: 3405, baseType: !1993, size: 384)
!1993 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !164, line: 3352, size: 384, elements: !1994)
!1994 = !{!1995, !1996}
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1993, file: !164, line: 3353, baseType: !691, size: 192)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1993, file: !164, line: 3356, baseType: !1997, size: 192, offset: 192)
!1997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1826, line: 578, size: 192, elements: !1998)
!1998 = !{!1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009}
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1997, file: !1826, line: 580, baseType: !749, size: 32)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1997, file: !1826, line: 581, baseType: !749, size: 32, offset: 32)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1997, file: !1826, line: 582, baseType: !749, size: 32, offset: 64)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1997, file: !1826, line: 583, baseType: !749, size: 32, offset: 96)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1997, file: !1826, line: 584, baseType: !772, size: 8, offset: 128)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1997, file: !1826, line: 585, baseType: !772, size: 8, offset: 136)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1997, file: !1826, line: 586, baseType: !772, size: 8, offset: 144)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1997, file: !1826, line: 587, baseType: !772, size: 8, offset: 152)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1997, file: !1826, line: 588, baseType: !772, size: 8, offset: 160)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1997, file: !1826, line: 589, baseType: !772, size: 8, offset: 168)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1997, file: !1826, line: 590, baseType: !772, size: 8, offset: 176)
!2010 = !DIDerivedType(tag: DW_TAG_typedef, name: "dref", file: !3, line: 240, baseType: !2011)
!2011 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2012, size: 64)
!2012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dref_d", file: !3, line: 214, size: 448, elements: !2013)
!2013 = !{!2014, !2074, !2075, !2076, !2077, !2078, !2079}
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !2012, file: !3, line: 217, baseType: !2015, size: 64)
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2016, size: 64)
!2016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_reference", file: !2017, line: 165, size: 896, elements: !2018)
!2017 = !DIFile(filename: "./tree-data-ref.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2018 = !{!2019, !2020, !2021, !2022, !2023, !2031, !2041, !2046}
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2016, file: !2017, line: 168, baseType: !982, size: 64)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !2016, file: !2017, line: 171, baseType: !652, size: 64, offset: 64)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2016, file: !2017, line: 174, baseType: !651, size: 64, offset: 128)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "is_read", scope: !2016, file: !2017, line: 177, baseType: !772, size: 8, offset: 192)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "innermost", scope: !2016, file: !2017, line: 180, baseType: !2024, size: 320, offset: 256)
!2024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "innermost_loop_behavior", file: !2017, line: 51, size: 320, elements: !2025)
!2025 = !{!2026, !2027, !2028, !2029, !2030}
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "base_address", scope: !2024, file: !2017, line: 53, baseType: !652, size: 64)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2024, file: !2017, line: 54, baseType: !652, size: 64, offset: 64)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !2024, file: !2017, line: 55, baseType: !652, size: 64, offset: 128)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2024, file: !2017, line: 56, baseType: !652, size: 64, offset: 192)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "aligned_to", scope: !2024, file: !2017, line: 60, baseType: !652, size: 64, offset: 256)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "indices", scope: !2016, file: !2017, line: 183, baseType: !2032, size: 128, offset: 576)
!2032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "indices", file: !2017, line: 78, size: 128, elements: !2033)
!2033 = !{!2034, !2035}
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "base_object", scope: !2032, file: !2017, line: 81, baseType: !652, size: 64)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "access_fns", scope: !2032, file: !2017, line: 84, baseType: !2036, size: 64, offset: 64)
!2036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2037, size: 64)
!2037 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !164, line: 184, baseType: !2038)
!2038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !164, line: 184, size: 128, elements: !2039)
!2039 = !{!2040}
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2038, file: !164, line: 184, baseType: !1534, size: 128)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2016, file: !2017, line: 186, baseType: !2042, size: 128, offset: 704)
!2042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dr_alias", file: !2017, line: 87, size: 128, elements: !2043)
!2043 = !{!2044, !2045}
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2042, file: !2017, line: 91, baseType: !1735, size: 64)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "vops", scope: !2042, file: !2017, line: 96, baseType: !1552, size: 64, offset: 64)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "access_matrix", scope: !2016, file: !2017, line: 189, baseType: !2047, size: 64, offset: 832)
!2047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2048, size: 64)
!2048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "access_matrix", file: !2017, line: 127, size: 256, elements: !2049)
!2049 = !{!2050, !2056, !2057, !2058}
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2048, file: !2017, line: 129, baseType: !2051, size: 64)
!2051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2052, size: 64)
!2052 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_heap", file: !146, line: 86, baseType: !2053)
!2053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_heap", file: !146, line: 86, size: 128, elements: !2054)
!2054 = !{!2055}
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2053, file: !146, line: 86, baseType: !1217, size: 128)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "nb_induction_vars", scope: !2048, file: !2017, line: 130, baseType: !749, size: 32, offset: 64)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "parameters", scope: !2048, file: !2017, line: 131, baseType: !2036, size: 64, offset: 128)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "matrix", scope: !2048, file: !2017, line: 132, baseType: !2059, size: 64, offset: 192)
!2059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2060, size: 64)
!2060 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_gc", file: !2061, line: 34, baseType: !2062)
!2061 = !DIFile(filename: "./lambda.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_gc", file: !2061, line: 34, size: 128, elements: !2063)
!2063 = !{!2064}
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2062, file: !2061, line: 34, baseType: !2065, size: 128)
!2065 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_base", file: !2061, line: 32, baseType: !2066)
!2066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_base", file: !2061, line: 32, size: 128, elements: !2067)
!2067 = !{!2068, !2069, !2070}
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2066, file: !2061, line: 32, baseType: !7, size: 32)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2066, file: !2061, line: 32, baseType: !7, size: 32, offset: 32)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2066, file: !2061, line: 32, baseType: !2071, size: 64, offset: 64)
!2071 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2072, size: 64, elements: !753)
!2072 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_vector", file: !2061, line: 31, baseType: !2073)
!2073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !749, size: 64)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2012, file: !3, line: 220, baseType: !982, size: 64, offset: 64)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "name_defined_by_phi", scope: !2012, file: !3, line: 225, baseType: !652, size: 64, offset: 128)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !2012, file: !3, line: 229, baseType: !7, size: 32, offset: 192)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2012, file: !3, line: 232, baseType: !701, size: 128, offset: 256)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !2012, file: !3, line: 235, baseType: !7, size: 32, offset: 384)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "always_accessed", scope: !2012, file: !3, line: 239, baseType: !7, size: 1, offset: 416, flags: DIFlagBitField, extraData: i64 416)
!2080 = !DIDerivedType(tag: DW_TAG_typedef, name: "chain_p", file: !3, line: 296, baseType: !2081)
!2081 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2082, size: 64)
!2082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "chain", file: !3, line: 264, size: 576, elements: !2083)
!2083 = !{!2084, !2085, !2086, !2087, !2088, !2089, !2102, !2103, !2104, !2105, !2106, !2107}
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2082, file: !3, line: 267, baseType: !429, size: 32)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2082, file: !3, line: 271, baseType: !196, size: 32, offset: 32)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "rslt_type", scope: !2082, file: !3, line: 272, baseType: !652, size: 64, offset: 64)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "ch1", scope: !2082, file: !3, line: 273, baseType: !2081, size: 64, offset: 128)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "ch2", scope: !2082, file: !3, line: 273, baseType: !2081, size: 64, offset: 192)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "refs", scope: !2082, file: !3, line: 276, baseType: !2090, size: 64, offset: 256)
!2090 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2091, size: 64)
!2091 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_dref_heap", file: !3, line: 243, baseType: !2092)
!2092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_dref_heap", file: !3, line: 243, size: 128, elements: !2093)
!2093 = !{!2094}
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2092, file: !3, line: 243, baseType: !2095, size: 128)
!2095 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_dref_base", file: !3, line: 242, baseType: !2096)
!2096 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_dref_base", file: !3, line: 242, size: 128, elements: !2097)
!2097 = !{!2098, !2099, !2100}
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2096, file: !3, line: 242, baseType: !7, size: 32)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2096, file: !3, line: 242, baseType: !7, size: 32, offset: 32)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2096, file: !3, line: 242, baseType: !2101, size: 64, offset: 64)
!2101 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2010, size: 64, elements: !753)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2082, file: !3, line: 279, baseType: !7, size: 32, offset: 320)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2082, file: !3, line: 282, baseType: !2036, size: 64, offset: 384)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "inits", scope: !2082, file: !3, line: 285, baseType: !2036, size: 64, offset: 448)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "has_max_use_after", scope: !2082, file: !3, line: 289, baseType: !7, size: 1, offset: 512, flags: DIFlagBitField, extraData: i64 512)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "all_always_accessed", scope: !2082, file: !3, line: 292, baseType: !7, size: 1, offset: 513, flags: DIFlagBitField, extraData: i64 512)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "combined", scope: !2082, file: !3, line: 295, baseType: !7, size: 1, offset: 514, flags: DIFlagBitField, extraData: i64 512)
!2108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2109, size: 64)
!2109 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2110, line: 32, baseType: !2111)
!2110 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2110, line: 32, size: 96, elements: !2112)
!2112 = !{!2113}
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2111, file: !2110, line: 32, baseType: !2114, size: 96)
!2114 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2110, line: 31, baseType: !2115)
!2115 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2110, line: 31, size: 96, elements: !2116)
!2116 = !{!2117, !2118, !2119}
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2115, file: !2110, line: 31, baseType: !7, size: 32)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2115, file: !2110, line: 31, baseType: !7, size: 32, offset: 32)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2115, file: !2110, line: 31, baseType: !2120, size: 32, offset: 64)
!2120 = !DICompositeType(tag: DW_TAG_array_type, baseType: !749, size: 32, elements: !753)
!2121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2122, size: 64)
!2122 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_heap", file: !2017, line: 209, baseType: !2123)
!2123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_heap", file: !2017, line: 209, size: 128, elements: !2124)
!2124 = !{!2125}
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2123, file: !2017, line: 209, baseType: !2126, size: 128)
!2126 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_base", file: !2017, line: 208, baseType: !2127)
!2127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_base", file: !2017, line: 208, size: 128, elements: !2128)
!2128 = !{!2129, !2130, !2131}
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2127, file: !2017, line: 208, baseType: !7, size: 32)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2127, file: !2017, line: 208, baseType: !7, size: 32, offset: 32)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2127, file: !2017, line: 208, baseType: !2132, size: 64, offset: 64)
!2132 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2133, size: 64, elements: !753)
!2133 = !DIDerivedType(tag: DW_TAG_typedef, name: "data_reference_p", file: !2017, line: 207, baseType: !2015)
!2134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2135, size: 64)
!2135 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_heap", file: !2017, line: 333, baseType: !2136)
!2136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_heap", file: !2017, line: 333, size: 128, elements: !2137)
!2137 = !{!2138}
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2136, file: !2017, line: 333, baseType: !2139, size: 128)
!2139 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_base", file: !2017, line: 332, baseType: !2140)
!2140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_base", file: !2017, line: 332, size: 128, elements: !2141)
!2141 = !{!2142, !2143, !2144}
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2140, file: !2017, line: 332, baseType: !7, size: 32)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2140, file: !2017, line: 332, baseType: !7, size: 32, offset: 32)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2140, file: !2017, line: 332, baseType: !2145, size: 64, offset: 64)
!2145 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2146, size: 64, elements: !753)
!2146 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddr_p", file: !2017, line: 331, baseType: !2147)
!2147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2148, size: 64)
!2148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_dependence_relation", file: !2017, line: 282, size: 512, elements: !2149)
!2149 = !{!2150, !2151, !2152, !2153, !2182, !2183, !2189, !2190, !2191, !2192, !2193}
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2148, file: !2017, line: 285, baseType: !2015, size: 64)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !2148, file: !2017, line: 286, baseType: !2015, size: 64, offset: 64)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "are_dependent", scope: !2148, file: !2017, line: 299, baseType: !652, size: 64, offset: 128)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "subscripts", scope: !2148, file: !2017, line: 304, baseType: !2154, size: 64, offset: 192)
!2154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2155, size: 64)
!2155 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_heap", file: !2017, line: 272, baseType: !2156)
!2156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_heap", file: !2017, line: 272, size: 128, elements: !2157)
!2157 = !{!2158}
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2156, file: !2017, line: 272, baseType: !2159, size: 128)
!2159 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_base", file: !2017, line: 271, baseType: !2160)
!2160 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_base", file: !2017, line: 271, size: 128, elements: !2161)
!2161 = !{!2162, !2163, !2164}
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2160, file: !2017, line: 271, baseType: !7, size: 32)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2160, file: !2017, line: 271, baseType: !7, size: 32, offset: 32)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2160, file: !2017, line: 271, baseType: !2165, size: 64, offset: 64)
!2165 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2166, size: 64, elements: !753)
!2166 = !DIDerivedType(tag: DW_TAG_typedef, name: "subscript_p", file: !2017, line: 270, baseType: !2167)
!2167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2168, size: 64)
!2168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "subscript", file: !2017, line: 252, size: 256, elements: !2169)
!2169 = !{!2170, !2179, !2180, !2181}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_a", scope: !2168, file: !2017, line: 256, baseType: !2171, size: 64)
!2171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2172, size: 64)
!2172 = !DIDerivedType(tag: DW_TAG_typedef, name: "conflict_function", file: !2017, line: 243, baseType: !2173)
!2173 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2017, line: 239, size: 192, elements: !2174)
!2174 = !{!2175, !2176}
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !2173, file: !2017, line: 241, baseType: !7, size: 32)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "fns", scope: !2173, file: !2017, line: 242, baseType: !2177, size: 128, offset: 64)
!2177 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2178, size: 128, elements: !900)
!2178 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_fn", file: !2017, line: 237, baseType: !2036)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_b", scope: !2168, file: !2017, line: 257, baseType: !2171, size: 64, offset: 64)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "last_conflict", scope: !2168, file: !2017, line: 261, baseType: !652, size: 64, offset: 128)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !2168, file: !2017, line: 267, baseType: !652, size: 64, offset: 192)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2148, file: !2017, line: 307, baseType: !2051, size: 64, offset: 256)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "dir_vects", scope: !2148, file: !2017, line: 310, baseType: !2184, size: 64, offset: 320)
!2184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2185, size: 64)
!2185 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_heap", file: !2061, line: 33, baseType: !2186)
!2186 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_heap", file: !2061, line: 33, size: 128, elements: !2187)
!2187 = !{!2188}
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2186, file: !2061, line: 33, baseType: !2065, size: 128)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "dist_vects", scope: !2148, file: !2017, line: 313, baseType: !2184, size: 64, offset: 384)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "inner_loop", scope: !2148, file: !2017, line: 317, baseType: !7, size: 32, offset: 448)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "reversed_p", scope: !2148, file: !2017, line: 320, baseType: !772, size: 8, offset: 480)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "affine_p", scope: !2148, file: !2017, line: 324, baseType: !772, size: 8, offset: 488)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "self_reference_p", scope: !2148, file: !2017, line: 328, baseType: !772, size: 8, offset: 496)
!2194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!2195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2196, size: 64)
!2196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2197, size: 64)
!2197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "component", file: !3, line: 318, size: 192, elements: !2198)
!2198 = !{!2199, !2200, !2201}
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "refs", scope: !2197, file: !3, line: 321, baseType: !2090, size: 64)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "comp_step", scope: !2197, file: !3, line: 324, baseType: !435, size: 32, offset: 64)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2197, file: !3, line: 327, baseType: !2196, size: 64, offset: 128)
!2202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2203, size: 64)
!2203 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_chain_p_heap", file: !3, line: 299, baseType: !2204)
!2204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_chain_p_heap", file: !3, line: 299, size: 128, elements: !2205)
!2205 = !{!2206}
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2204, file: !3, line: 299, baseType: !2207, size: 128)
!2207 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_chain_p_base", file: !3, line: 298, baseType: !2208)
!2208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_chain_p_base", file: !3, line: 298, size: 128, elements: !2209)
!2209 = !{!2210, !2211, !2212}
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2208, file: !3, line: 298, baseType: !7, size: 32)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2208, file: !3, line: 298, baseType: !7, size: 32, offset: 32)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2208, file: !3, line: 298, baseType: !2213, size: 64, offset: 64)
!2213 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2080, size: 64, elements: !753)
!2214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2215, size: 64)
!2215 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2010)
!2216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2217, size: 64)
!2217 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !984)
!2218 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !630, line: 30, baseType: !2219)
!2219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2220, size: 64)
!2220 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !164, line: 1893, baseType: !1023)
!2221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2222, size: 64)
!2222 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "epcc_data", file: !3, line: 1871, size: 128, elements: !2223)
!2223 = !{!2224, !2225}
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "chains", scope: !2222, file: !3, line: 1873, baseType: !2202, size: 64)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "tmp_vars", scope: !2222, file: !3, line: 1874, baseType: !1552, size: 64, offset: 64)
!2226 = !{!0, !2227}
!2227 = !DIGlobalVariableExpression(var: !2228, expr: !DIExpression())
!2228 = distinct !DIGlobalVariable(name: "name_expansions", scope: !2, file: !3, line: 336, type: !1555, isLocal: true, isDefinition: true)
!2229 = !{i32 7, !"Dwarf Version", i32 4}
!2230 = !{i32 2, !"Debug Info Version", i32 3}
!2231 = !{i32 1, !"wchar_size", i32 4}
!2232 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2233 = distinct !DISubprogram(name: "dump_dref", scope: !3, file: !3, line: 342, type: !2234, scopeLine: 343, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2234 = !DISubroutineType(types: !2235)
!2235 = !{null, !2236, !2010}
!2236 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2237, size: 64)
!2237 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2238, line: 7, baseType: !2239)
!2238 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2240, line: 49, size: 1728, elements: !2241)
!2240 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2241 = !{!2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2257, !2259, !2260, !2261, !2264, !2266, !2267, !2268, !2271, !2273, !2276, !2279, !2280, !2281, !2282, !2283}
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2239, file: !2240, line: 51, baseType: !749, size: 32)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2239, file: !2240, line: 54, baseType: !921, size: 64, offset: 64)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2239, file: !2240, line: 55, baseType: !921, size: 64, offset: 128)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2239, file: !2240, line: 56, baseType: !921, size: 64, offset: 192)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2239, file: !2240, line: 57, baseType: !921, size: 64, offset: 256)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2239, file: !2240, line: 58, baseType: !921, size: 64, offset: 320)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2239, file: !2240, line: 59, baseType: !921, size: 64, offset: 384)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2239, file: !2240, line: 60, baseType: !921, size: 64, offset: 448)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2239, file: !2240, line: 61, baseType: !921, size: 64, offset: 512)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2239, file: !2240, line: 64, baseType: !921, size: 64, offset: 576)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2239, file: !2240, line: 65, baseType: !921, size: 64, offset: 640)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2239, file: !2240, line: 66, baseType: !921, size: 64, offset: 704)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2239, file: !2240, line: 68, baseType: !2255, size: 64, offset: 768)
!2255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2256, size: 64)
!2256 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2240, line: 36, flags: DIFlagFwdDecl)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2239, file: !2240, line: 70, baseType: !2258, size: 64, offset: 832)
!2258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2239, size: 64)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2239, file: !2240, line: 72, baseType: !749, size: 32, offset: 896)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2239, file: !2240, line: 73, baseType: !749, size: 32, offset: 928)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2239, file: !2240, line: 74, baseType: !2262, size: 64, offset: 960)
!2262 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2263, line: 152, baseType: !708)
!2263 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2239, file: !2240, line: 77, baseType: !2265, size: 16, offset: 1024)
!2265 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2239, file: !2240, line: 78, baseType: !1837, size: 8, offset: 1040)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2239, file: !2240, line: 79, baseType: !751, size: 8, offset: 1048)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2239, file: !2240, line: 81, baseType: !2269, size: 64, offset: 1088)
!2269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2270, size: 64)
!2270 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2240, line: 43, baseType: null)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2239, file: !2240, line: 89, baseType: !2272, size: 64, offset: 1152)
!2272 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2263, line: 153, baseType: !708)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2239, file: !2240, line: 91, baseType: !2274, size: 64, offset: 1216)
!2274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2275, size: 64)
!2275 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2240, line: 37, flags: DIFlagFwdDecl)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2239, file: !2240, line: 92, baseType: !2277, size: 64, offset: 1280)
!2277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2278, size: 64)
!2278 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2240, line: 38, flags: DIFlagFwdDecl)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2239, file: !2240, line: 93, baseType: !2258, size: 64, offset: 1344)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2239, file: !2240, line: 94, baseType: !651, size: 64, offset: 1408)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2239, file: !2240, line: 95, baseType: !1127, size: 64, offset: 1472)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2239, file: !2240, line: 96, baseType: !749, size: 32, offset: 1536)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2239, file: !2240, line: 98, baseType: !2284, size: 160, offset: 1568)
!2284 = !DICompositeType(tag: DW_TAG_array_type, baseType: !752, size: 160, elements: !2285)
!2285 = !{!2286}
!2286 = !DISubrange(count: 20)
!2287 = !{}
!2288 = !DILocalVariable(name: "file", arg: 1, scope: !2233, file: !3, line: 342, type: !2236)
!2289 = !DILocation(line: 342, column: 18, scope: !2233)
!2290 = !DILocalVariable(name: "ref", arg: 2, scope: !2233, file: !3, line: 342, type: !2010)
!2291 = !DILocation(line: 342, column: 29, scope: !2233)
!2292 = !DILocation(line: 344, column: 7, scope: !2293)
!2293 = distinct !DILexicalBlock(scope: !2233, file: !3, line: 344, column: 7)
!2294 = !DILocation(line: 344, column: 12, scope: !2293)
!2295 = !DILocation(line: 344, column: 7, scope: !2233)
!2296 = !DILocation(line: 346, column: 16, scope: !2297)
!2297 = distinct !DILexicalBlock(scope: !2293, file: !3, line: 345, column: 5)
!2298 = !DILocation(line: 346, column: 7, scope: !2297)
!2299 = !DILocation(line: 347, column: 27, scope: !2297)
!2300 = !DILocation(line: 347, column: 33, scope: !2297)
!2301 = !DILocation(line: 347, column: 7, scope: !2297)
!2302 = !DILocation(line: 348, column: 16, scope: !2297)
!2303 = !DILocation(line: 348, column: 38, scope: !2297)
!2304 = !DILocation(line: 348, column: 43, scope: !2297)
!2305 = !DILocation(line: 349, column: 9, scope: !2297)
!2306 = !DILocation(line: 348, column: 7, scope: !2297)
!2307 = !DILocation(line: 351, column: 16, scope: !2297)
!2308 = !DILocation(line: 351, column: 7, scope: !2297)
!2309 = !DILocation(line: 352, column: 24, scope: !2297)
!2310 = !DILocation(line: 352, column: 30, scope: !2297)
!2311 = !DILocation(line: 352, column: 35, scope: !2297)
!2312 = !DILocation(line: 352, column: 7, scope: !2297)
!2313 = !DILocation(line: 353, column: 16, scope: !2297)
!2314 = !DILocation(line: 353, column: 7, scope: !2297)
!2315 = !DILocation(line: 355, column: 16, scope: !2297)
!2316 = !DILocation(line: 355, column: 45, scope: !2297)
!2317 = !DILocation(line: 355, column: 50, scope: !2297)
!2318 = !DILocation(line: 355, column: 7, scope: !2297)
!2319 = !DILocation(line: 356, column: 5, scope: !2297)
!2320 = !DILocation(line: 359, column: 24, scope: !2321)
!2321 = distinct !DILexicalBlock(scope: !2322, file: !3, line: 359, column: 11)
!2322 = distinct !DILexicalBlock(scope: !2293, file: !3, line: 358, column: 5)
!2323 = !DILocation(line: 359, column: 29, scope: !2321)
!2324 = !DILocation(line: 359, column: 11, scope: !2321)
!2325 = !DILocation(line: 359, column: 35, scope: !2321)
!2326 = !DILocation(line: 359, column: 11, scope: !2322)
!2327 = !DILocation(line: 360, column: 11, scope: !2321)
!2328 = !DILocation(line: 360, column: 2, scope: !2321)
!2329 = !DILocation(line: 362, column: 11, scope: !2321)
!2330 = !DILocation(line: 362, column: 2, scope: !2321)
!2331 = !DILocation(line: 363, column: 16, scope: !2322)
!2332 = !DILocation(line: 363, column: 7, scope: !2322)
!2333 = !DILocation(line: 364, column: 26, scope: !2322)
!2334 = !DILocation(line: 364, column: 32, scope: !2322)
!2335 = !DILocation(line: 364, column: 37, scope: !2322)
!2336 = !DILocation(line: 364, column: 7, scope: !2322)
!2337 = !DILocation(line: 365, column: 16, scope: !2322)
!2338 = !DILocation(line: 365, column: 7, scope: !2322)
!2339 = !DILocation(line: 366, column: 16, scope: !2322)
!2340 = !DILocation(line: 366, column: 45, scope: !2322)
!2341 = !DILocation(line: 366, column: 50, scope: !2322)
!2342 = !DILocation(line: 366, column: 7, scope: !2322)
!2343 = !DILocation(line: 369, column: 1, scope: !2233)
!2344 = distinct !DISubprogram(name: "gimple_code", scope: !391, file: !391, line: 1052, type: !2345, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2345 = !DISubroutineType(types: !2346)
!2346 = !{!390, !2347}
!2347 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !653, line: 60, baseType: !2216)
!2348 = !DILocalVariable(name: "g", arg: 1, scope: !2344, file: !391, line: 1052, type: !2347)
!2349 = !DILocation(line: 1052, column: 27, scope: !2344)
!2350 = !DILocation(line: 1054, column: 10, scope: !2344)
!2351 = !DILocation(line: 1054, column: 13, scope: !2344)
!2352 = !DILocation(line: 1054, column: 20, scope: !2344)
!2353 = !DILocation(line: 1054, column: 3, scope: !2344)
!2354 = distinct !DISubprogram(name: "dump_chain", scope: !3, file: !3, line: 375, type: !2355, scopeLine: 376, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2355 = !DISubroutineType(types: !2356)
!2356 = !{null, !2236, !2080}
!2357 = !DILocalVariable(name: "file", arg: 1, scope: !2354, file: !3, line: 375, type: !2236)
!2358 = !DILocation(line: 375, column: 19, scope: !2354)
!2359 = !DILocalVariable(name: "chain", arg: 2, scope: !2354, file: !3, line: 375, type: !2080)
!2360 = !DILocation(line: 375, column: 33, scope: !2354)
!2361 = !DILocalVariable(name: "a", scope: !2354, file: !3, line: 377, type: !2010)
!2362 = !DILocation(line: 377, column: 8, scope: !2354)
!2363 = !DILocalVariable(name: "chain_type", scope: !2354, file: !3, line: 378, type: !856)
!2364 = !DILocation(line: 378, column: 15, scope: !2354)
!2365 = !DILocalVariable(name: "i", scope: !2354, file: !3, line: 379, type: !7)
!2366 = !DILocation(line: 379, column: 12, scope: !2354)
!2367 = !DILocalVariable(name: "var", scope: !2354, file: !3, line: 380, type: !652)
!2368 = !DILocation(line: 380, column: 8, scope: !2354)
!2369 = !DILocation(line: 382, column: 11, scope: !2354)
!2370 = !DILocation(line: 382, column: 18, scope: !2354)
!2371 = !DILocation(line: 382, column: 3, scope: !2354)
!2372 = !DILocation(line: 385, column: 18, scope: !2373)
!2373 = distinct !DILexicalBlock(scope: !2354, file: !3, line: 383, column: 5)
!2374 = !DILocation(line: 386, column: 7, scope: !2373)
!2375 = !DILocation(line: 389, column: 18, scope: !2373)
!2376 = !DILocation(line: 390, column: 7, scope: !2373)
!2377 = !DILocation(line: 393, column: 18, scope: !2373)
!2378 = !DILocation(line: 394, column: 7, scope: !2373)
!2379 = !DILocation(line: 397, column: 18, scope: !2373)
!2380 = !DILocation(line: 398, column: 7, scope: !2373)
!2381 = !DILocation(line: 401, column: 7, scope: !2373)
!2382 = !DILocation(line: 402, column: 5, scope: !2373)
!2383 = !DILocation(line: 404, column: 12, scope: !2354)
!2384 = !DILocation(line: 404, column: 37, scope: !2354)
!2385 = !DILocation(line: 404, column: 58, scope: !2354)
!2386 = !DILocation(line: 404, column: 49, scope: !2354)
!2387 = !DILocation(line: 405, column: 5, scope: !2354)
!2388 = !DILocation(line: 405, column: 12, scope: !2354)
!2389 = !DILocation(line: 404, column: 3, scope: !2354)
!2390 = !DILocation(line: 406, column: 7, scope: !2391)
!2391 = distinct !DILexicalBlock(scope: !2354, file: !3, line: 406, column: 7)
!2392 = !DILocation(line: 406, column: 14, scope: !2391)
!2393 = !DILocation(line: 406, column: 19, scope: !2391)
!2394 = !DILocation(line: 406, column: 7, scope: !2354)
!2395 = !DILocation(line: 407, column: 14, scope: !2391)
!2396 = !DILocation(line: 407, column: 45, scope: !2391)
!2397 = !DILocation(line: 407, column: 52, scope: !2391)
!2398 = !DILocation(line: 408, column: 7, scope: !2391)
!2399 = !DILocation(line: 408, column: 14, scope: !2391)
!2400 = !DILocation(line: 407, column: 5, scope: !2391)
!2401 = !DILocation(line: 410, column: 7, scope: !2402)
!2402 = distinct !DILexicalBlock(scope: !2354, file: !3, line: 410, column: 7)
!2403 = !DILocation(line: 410, column: 14, scope: !2402)
!2404 = !DILocation(line: 410, column: 19, scope: !2402)
!2405 = !DILocation(line: 410, column: 7, scope: !2354)
!2406 = !DILocation(line: 412, column: 16, scope: !2407)
!2407 = distinct !DILexicalBlock(scope: !2402, file: !3, line: 411, column: 5)
!2408 = !DILocation(line: 413, column: 18, scope: !2407)
!2409 = !DILocation(line: 413, column: 25, scope: !2407)
!2410 = !DILocation(line: 413, column: 9, scope: !2407)
!2411 = !DILocation(line: 413, column: 46, scope: !2407)
!2412 = !DILocation(line: 413, column: 53, scope: !2407)
!2413 = !DILocation(line: 413, column: 30, scope: !2407)
!2414 = !DILocation(line: 414, column: 18, scope: !2407)
!2415 = !DILocation(line: 414, column: 25, scope: !2407)
!2416 = !DILocation(line: 414, column: 9, scope: !2407)
!2417 = !DILocation(line: 412, column: 7, scope: !2407)
!2418 = !DILocation(line: 415, column: 27, scope: !2407)
!2419 = !DILocation(line: 415, column: 33, scope: !2407)
!2420 = !DILocation(line: 415, column: 40, scope: !2407)
!2421 = !DILocation(line: 415, column: 7, scope: !2407)
!2422 = !DILocation(line: 416, column: 16, scope: !2407)
!2423 = !DILocation(line: 416, column: 7, scope: !2407)
!2424 = !DILocation(line: 417, column: 5, scope: !2407)
!2425 = !DILocation(line: 419, column: 7, scope: !2426)
!2426 = distinct !DILexicalBlock(scope: !2354, file: !3, line: 419, column: 7)
!2427 = !DILocation(line: 419, column: 14, scope: !2426)
!2428 = !DILocation(line: 419, column: 7, scope: !2354)
!2429 = !DILocation(line: 421, column: 16, scope: !2430)
!2430 = distinct !DILexicalBlock(scope: !2426, file: !3, line: 420, column: 5)
!2431 = !DILocation(line: 421, column: 7, scope: !2430)
!2432 = !DILocation(line: 422, column: 14, scope: !2433)
!2433 = distinct !DILexicalBlock(scope: !2430, file: !3, line: 422, column: 7)
!2434 = !DILocation(line: 422, column: 12, scope: !2433)
!2435 = !DILocation(line: 422, column: 19, scope: !2436)
!2436 = distinct !DILexicalBlock(scope: !2433, file: !3, line: 422, column: 7)
!2437 = !DILocation(line: 422, column: 7, scope: !2433)
!2438 = !DILocation(line: 424, column: 13, scope: !2439)
!2439 = distinct !DILexicalBlock(scope: !2436, file: !3, line: 423, column: 2)
!2440 = !DILocation(line: 424, column: 4, scope: !2439)
!2441 = !DILocation(line: 425, column: 24, scope: !2439)
!2442 = !DILocation(line: 425, column: 30, scope: !2439)
!2443 = !DILocation(line: 425, column: 4, scope: !2439)
!2444 = !DILocation(line: 426, column: 2, scope: !2439)
!2445 = !DILocation(line: 422, column: 61, scope: !2436)
!2446 = !DILocation(line: 422, column: 7, scope: !2436)
!2447 = distinct !{!2447, !2437, !2448}
!2448 = !DILocation(line: 426, column: 2, scope: !2433)
!2449 = !DILocation(line: 427, column: 16, scope: !2430)
!2450 = !DILocation(line: 427, column: 7, scope: !2430)
!2451 = !DILocation(line: 428, column: 5, scope: !2430)
!2452 = !DILocation(line: 430, column: 7, scope: !2453)
!2453 = distinct !DILexicalBlock(scope: !2354, file: !3, line: 430, column: 7)
!2454 = !DILocation(line: 430, column: 14, scope: !2453)
!2455 = !DILocation(line: 430, column: 7, scope: !2354)
!2456 = !DILocation(line: 432, column: 16, scope: !2457)
!2457 = distinct !DILexicalBlock(scope: !2453, file: !3, line: 431, column: 5)
!2458 = !DILocation(line: 432, column: 7, scope: !2457)
!2459 = !DILocation(line: 433, column: 14, scope: !2460)
!2460 = distinct !DILexicalBlock(scope: !2457, file: !3, line: 433, column: 7)
!2461 = !DILocation(line: 433, column: 12, scope: !2460)
!2462 = !DILocation(line: 433, column: 19, scope: !2463)
!2463 = distinct !DILexicalBlock(scope: !2460, file: !3, line: 433, column: 7)
!2464 = !DILocation(line: 433, column: 7, scope: !2460)
!2465 = !DILocation(line: 435, column: 13, scope: !2466)
!2466 = distinct !DILexicalBlock(scope: !2463, file: !3, line: 434, column: 2)
!2467 = !DILocation(line: 435, column: 4, scope: !2466)
!2468 = !DILocation(line: 436, column: 24, scope: !2466)
!2469 = !DILocation(line: 436, column: 30, scope: !2466)
!2470 = !DILocation(line: 436, column: 4, scope: !2466)
!2471 = !DILocation(line: 437, column: 2, scope: !2466)
!2472 = !DILocation(line: 433, column: 62, scope: !2463)
!2473 = !DILocation(line: 433, column: 7, scope: !2463)
!2474 = distinct !{!2474, !2464, !2475}
!2475 = !DILocation(line: 437, column: 2, scope: !2460)
!2476 = !DILocation(line: 438, column: 16, scope: !2457)
!2477 = !DILocation(line: 438, column: 7, scope: !2457)
!2478 = !DILocation(line: 439, column: 5, scope: !2457)
!2479 = !DILocation(line: 441, column: 12, scope: !2354)
!2480 = !DILocation(line: 441, column: 3, scope: !2354)
!2481 = !DILocation(line: 442, column: 10, scope: !2482)
!2482 = distinct !DILexicalBlock(scope: !2354, file: !3, line: 442, column: 3)
!2483 = !DILocation(line: 442, column: 8, scope: !2482)
!2484 = !DILocation(line: 442, column: 15, scope: !2485)
!2485 = distinct !DILexicalBlock(scope: !2482, file: !3, line: 442, column: 3)
!2486 = !DILocation(line: 442, column: 3, scope: !2482)
!2487 = !DILocation(line: 443, column: 16, scope: !2485)
!2488 = !DILocation(line: 443, column: 22, scope: !2485)
!2489 = !DILocation(line: 443, column: 5, scope: !2485)
!2490 = !DILocation(line: 442, column: 55, scope: !2485)
!2491 = !DILocation(line: 442, column: 3, scope: !2485)
!2492 = distinct !{!2492, !2486, !2493}
!2493 = !DILocation(line: 443, column: 23, scope: !2482)
!2494 = !DILocation(line: 445, column: 12, scope: !2354)
!2495 = !DILocation(line: 445, column: 3, scope: !2354)
!2496 = !DILocation(line: 446, column: 1, scope: !2354)
!2497 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !164, file: !164, line: 182, type: !2498, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2498 = !DISubroutineType(types: !2499)
!2499 = !{!749, !2500, !7, !1016}
!2500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2501, size: 64)
!2501 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1534)
!2502 = !DILocalVariable(name: "vec_", arg: 1, scope: !2497, file: !164, line: 182, type: !2500)
!2503 = !DILocation(line: 182, column: 1, scope: !2497)
!2504 = !DILocalVariable(name: "ix_", arg: 2, scope: !2497, file: !164, line: 182, type: !7)
!2505 = !DILocalVariable(name: "ptr", arg: 3, scope: !2497, file: !164, line: 182, type: !1016)
!2506 = !DILocation(line: 182, column: 1, scope: !2507)
!2507 = distinct !DILexicalBlock(scope: !2497, file: !164, line: 182, column: 1)
!2508 = !DILocation(line: 182, column: 1, scope: !2509)
!2509 = distinct !DILexicalBlock(scope: !2507, file: !164, line: 182, column: 1)
!2510 = !DILocation(line: 182, column: 1, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !2507, file: !164, line: 182, column: 1)
!2512 = distinct !DISubprogram(name: "VEC_dref_base_iterate", scope: !3, file: !3, line: 242, type: !2513, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2513 = !DISubroutineType(types: !2514)
!2514 = !{!749, !2515, !7, !2517}
!2515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2516, size: 64)
!2516 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2095)
!2517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2010, size: 64)
!2518 = !DILocalVariable(name: "vec_", arg: 1, scope: !2512, file: !3, line: 242, type: !2515)
!2519 = !DILocation(line: 242, column: 1, scope: !2512)
!2520 = !DILocalVariable(name: "ix_", arg: 2, scope: !2512, file: !3, line: 242, type: !7)
!2521 = !DILocalVariable(name: "ptr", arg: 3, scope: !2512, file: !3, line: 242, type: !2517)
!2522 = !DILocation(line: 242, column: 1, scope: !2523)
!2523 = distinct !DILexicalBlock(scope: !2512, file: !3, line: 242, column: 1)
!2524 = !DILocation(line: 242, column: 1, scope: !2525)
!2525 = distinct !DILexicalBlock(scope: !2523, file: !3, line: 242, column: 1)
!2526 = !DILocation(line: 242, column: 1, scope: !2527)
!2527 = distinct !DILexicalBlock(scope: !2523, file: !3, line: 242, column: 1)
!2528 = distinct !DISubprogram(name: "dump_chains", scope: !3, file: !3, line: 452, type: !2529, scopeLine: 453, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2529 = !DISubroutineType(types: !2530)
!2530 = !{null, !2236, !2202}
!2531 = !DILocalVariable(name: "file", arg: 1, scope: !2528, file: !3, line: 452, type: !2236)
!2532 = !DILocation(line: 452, column: 20, scope: !2528)
!2533 = !DILocalVariable(name: "chains", arg: 2, scope: !2528, file: !3, line: 452, type: !2202)
!2534 = !DILocation(line: 452, column: 47, scope: !2528)
!2535 = !DILocalVariable(name: "chain", scope: !2528, file: !3, line: 454, type: !2080)
!2536 = !DILocation(line: 454, column: 11, scope: !2528)
!2537 = !DILocalVariable(name: "i", scope: !2528, file: !3, line: 455, type: !7)
!2538 = !DILocation(line: 455, column: 12, scope: !2528)
!2539 = !DILocation(line: 457, column: 10, scope: !2540)
!2540 = distinct !DILexicalBlock(scope: !2528, file: !3, line: 457, column: 3)
!2541 = !DILocation(line: 457, column: 8, scope: !2540)
!2542 = !DILocation(line: 457, column: 15, scope: !2543)
!2543 = distinct !DILexicalBlock(scope: !2540, file: !3, line: 457, column: 3)
!2544 = !DILocation(line: 457, column: 3, scope: !2540)
!2545 = !DILocation(line: 458, column: 17, scope: !2543)
!2546 = !DILocation(line: 458, column: 23, scope: !2543)
!2547 = !DILocation(line: 458, column: 5, scope: !2543)
!2548 = !DILocation(line: 457, column: 57, scope: !2543)
!2549 = !DILocation(line: 457, column: 3, scope: !2543)
!2550 = distinct !{!2550, !2544, !2551}
!2551 = !DILocation(line: 458, column: 28, scope: !2540)
!2552 = !DILocation(line: 459, column: 1, scope: !2528)
!2553 = distinct !DISubprogram(name: "VEC_chain_p_base_iterate", scope: !3, file: !3, line: 298, type: !2554, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2554 = !DISubroutineType(types: !2555)
!2555 = !{!749, !2556, !7, !2558}
!2556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2557, size: 64)
!2557 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2207)
!2558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2080, size: 64)
!2559 = !DILocalVariable(name: "vec_", arg: 1, scope: !2553, file: !3, line: 298, type: !2556)
!2560 = !DILocation(line: 298, column: 1, scope: !2553)
!2561 = !DILocalVariable(name: "ix_", arg: 2, scope: !2553, file: !3, line: 298, type: !7)
!2562 = !DILocalVariable(name: "ptr", arg: 3, scope: !2553, file: !3, line: 298, type: !2558)
!2563 = !DILocation(line: 298, column: 1, scope: !2564)
!2564 = distinct !DILexicalBlock(scope: !2553, file: !3, line: 298, column: 1)
!2565 = !DILocation(line: 298, column: 1, scope: !2566)
!2566 = distinct !DILexicalBlock(scope: !2564, file: !3, line: 298, column: 1)
!2567 = !DILocation(line: 298, column: 1, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !2564, file: !3, line: 298, column: 1)
!2569 = distinct !DISubprogram(name: "dump_component", scope: !3, file: !3, line: 465, type: !2570, scopeLine: 466, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2570 = !DISubroutineType(types: !2571)
!2571 = !{null, !2236, !2196}
!2572 = !DILocalVariable(name: "file", arg: 1, scope: !2569, file: !3, line: 465, type: !2236)
!2573 = !DILocation(line: 465, column: 23, scope: !2569)
!2574 = !DILocalVariable(name: "comp", arg: 2, scope: !2569, file: !3, line: 465, type: !2196)
!2575 = !DILocation(line: 465, column: 47, scope: !2569)
!2576 = !DILocalVariable(name: "a", scope: !2569, file: !3, line: 467, type: !2010)
!2577 = !DILocation(line: 467, column: 8, scope: !2569)
!2578 = !DILocalVariable(name: "i", scope: !2569, file: !3, line: 468, type: !7)
!2579 = !DILocation(line: 468, column: 12, scope: !2569)
!2580 = !DILocation(line: 470, column: 12, scope: !2569)
!2581 = !DILocation(line: 471, column: 5, scope: !2569)
!2582 = !DILocation(line: 471, column: 11, scope: !2569)
!2583 = !DILocation(line: 471, column: 21, scope: !2569)
!2584 = !DILocation(line: 470, column: 3, scope: !2569)
!2585 = !DILocation(line: 472, column: 10, scope: !2586)
!2586 = distinct !DILexicalBlock(scope: !2569, file: !3, line: 472, column: 3)
!2587 = !DILocation(line: 472, column: 8, scope: !2586)
!2588 = !DILocation(line: 472, column: 15, scope: !2589)
!2589 = distinct !DILexicalBlock(scope: !2586, file: !3, line: 472, column: 3)
!2590 = !DILocation(line: 472, column: 3, scope: !2586)
!2591 = !DILocation(line: 473, column: 16, scope: !2589)
!2592 = !DILocation(line: 473, column: 22, scope: !2589)
!2593 = !DILocation(line: 473, column: 5, scope: !2589)
!2594 = !DILocation(line: 472, column: 54, scope: !2589)
!2595 = !DILocation(line: 472, column: 3, scope: !2589)
!2596 = distinct !{!2596, !2590, !2597}
!2597 = !DILocation(line: 473, column: 23, scope: !2586)
!2598 = !DILocation(line: 474, column: 12, scope: !2569)
!2599 = !DILocation(line: 474, column: 3, scope: !2569)
!2600 = !DILocation(line: 475, column: 1, scope: !2569)
!2601 = distinct !DISubprogram(name: "dump_components", scope: !3, file: !3, line: 481, type: !2570, scopeLine: 482, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2602 = !DILocalVariable(name: "file", arg: 1, scope: !2601, file: !3, line: 481, type: !2236)
!2603 = !DILocation(line: 481, column: 24, scope: !2601)
!2604 = !DILocalVariable(name: "comps", arg: 2, scope: !2601, file: !3, line: 481, type: !2196)
!2605 = !DILocation(line: 481, column: 48, scope: !2601)
!2606 = !DILocalVariable(name: "comp", scope: !2601, file: !3, line: 483, type: !2196)
!2607 = !DILocation(line: 483, column: 21, scope: !2601)
!2608 = !DILocation(line: 485, column: 15, scope: !2609)
!2609 = distinct !DILexicalBlock(scope: !2601, file: !3, line: 485, column: 3)
!2610 = !DILocation(line: 485, column: 13, scope: !2609)
!2611 = !DILocation(line: 485, column: 8, scope: !2609)
!2612 = !DILocation(line: 485, column: 22, scope: !2613)
!2613 = distinct !DILexicalBlock(scope: !2609, file: !3, line: 485, column: 3)
!2614 = !DILocation(line: 485, column: 3, scope: !2609)
!2615 = !DILocation(line: 486, column: 21, scope: !2613)
!2616 = !DILocation(line: 486, column: 27, scope: !2613)
!2617 = !DILocation(line: 486, column: 5, scope: !2613)
!2618 = !DILocation(line: 485, column: 35, scope: !2613)
!2619 = !DILocation(line: 485, column: 41, scope: !2613)
!2620 = !DILocation(line: 485, column: 33, scope: !2613)
!2621 = !DILocation(line: 485, column: 3, scope: !2613)
!2622 = distinct !{!2622, !2614, !2623}
!2623 = !DILocation(line: 486, column: 31, scope: !2609)
!2624 = !DILocation(line: 487, column: 1, scope: !2601)
!2625 = distinct !DISubprogram(name: "mark_virtual_ops_for_renaming", scope: !3, file: !3, line: 1440, type: !2626, scopeLine: 1441, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2626 = !DISubroutineType(types: !2627)
!2627 = !{null, !982}
!2628 = !DILocalVariable(name: "stmt", arg: 1, scope: !2625, file: !3, line: 1440, type: !982)
!2629 = !DILocation(line: 1440, column: 39, scope: !2625)
!2630 = !DILocalVariable(name: "var", scope: !2625, file: !3, line: 1442, type: !652)
!2631 = !DILocation(line: 1442, column: 8, scope: !2625)
!2632 = !DILocation(line: 1444, column: 20, scope: !2633)
!2633 = distinct !DILexicalBlock(scope: !2625, file: !3, line: 1444, column: 7)
!2634 = !DILocation(line: 1444, column: 7, scope: !2633)
!2635 = !DILocation(line: 1444, column: 26, scope: !2633)
!2636 = !DILocation(line: 1444, column: 7, scope: !2625)
!2637 = !DILocation(line: 1446, column: 13, scope: !2638)
!2638 = distinct !DILexicalBlock(scope: !2633, file: !3, line: 1445, column: 5)
!2639 = !DILocation(line: 1446, column: 11, scope: !2638)
!2640 = !DILocation(line: 1447, column: 26, scope: !2641)
!2641 = distinct !DILexicalBlock(scope: !2638, file: !3, line: 1447, column: 11)
!2642 = !DILocation(line: 1447, column: 11, scope: !2641)
!2643 = !DILocation(line: 1447, column: 11, scope: !2638)
!2644 = !DILocation(line: 1448, column: 2, scope: !2641)
!2645 = !DILocation(line: 1450, column: 11, scope: !2646)
!2646 = distinct !DILexicalBlock(scope: !2638, file: !3, line: 1450, column: 11)
!2647 = !DILocation(line: 1450, column: 27, scope: !2646)
!2648 = !DILocation(line: 1450, column: 11, scope: !2638)
!2649 = !DILocation(line: 1451, column: 8, scope: !2646)
!2650 = !DILocation(line: 1451, column: 6, scope: !2646)
!2651 = !DILocation(line: 1451, column: 2, scope: !2646)
!2652 = !DILocation(line: 1452, column: 30, scope: !2638)
!2653 = !DILocation(line: 1452, column: 7, scope: !2638)
!2654 = !DILocation(line: 1453, column: 7, scope: !2638)
!2655 = !DILocation(line: 1456, column: 16, scope: !2625)
!2656 = !DILocation(line: 1456, column: 3, scope: !2625)
!2657 = !DILocation(line: 1457, column: 20, scope: !2658)
!2658 = distinct !DILexicalBlock(scope: !2625, file: !3, line: 1457, column: 7)
!2659 = !DILocation(line: 1457, column: 7, scope: !2658)
!2660 = !DILocation(line: 1457, column: 7, scope: !2625)
!2661 = !DILocation(line: 1458, column: 40, scope: !2658)
!2662 = !DILocation(line: 1458, column: 28, scope: !2658)
!2663 = !DILocation(line: 1458, column: 5, scope: !2658)
!2664 = !DILocation(line: 1459, column: 1, scope: !2625)
!2665 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !2666, file: !2666, line: 434, type: !2667, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2666 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2667 = !DISubroutineType(types: !2668)
!2668 = !{!652, !2669}
!2669 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !630, line: 27, baseType: !1016)
!2670 = !DILocalVariable(name: "def", arg: 1, scope: !2665, file: !2666, line: 434, type: !2669)
!2671 = !DILocation(line: 434, column: 33, scope: !2665)
!2672 = !DILocation(line: 436, column: 11, scope: !2665)
!2673 = !DILocation(line: 436, column: 10, scope: !2665)
!2674 = !DILocation(line: 436, column: 3, scope: !2665)
!2675 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !391, file: !391, line: 3080, type: !2676, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2676 = !DISubroutineType(types: !2677)
!2677 = !{!1016, !982}
!2678 = !DILocalVariable(name: "gs", arg: 1, scope: !2675, file: !391, line: 3080, type: !982)
!2679 = !DILocation(line: 3080, column: 31, scope: !2675)
!2680 = !DILocation(line: 3083, column: 11, scope: !2675)
!2681 = !DILocation(line: 3083, column: 15, scope: !2675)
!2682 = !DILocation(line: 3083, column: 26, scope: !2675)
!2683 = !DILocation(line: 3083, column: 3, scope: !2675)
!2684 = distinct !DISubprogram(name: "update_stmt", scope: !391, file: !391, line: 1456, type: !2626, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2685 = !DILocalVariable(name: "s", arg: 1, scope: !2684, file: !391, line: 1456, type: !982)
!2686 = !DILocation(line: 1456, column: 21, scope: !2684)
!2687 = !DILocation(line: 1458, column: 23, scope: !2688)
!2688 = distinct !DILexicalBlock(scope: !2684, file: !391, line: 1458, column: 7)
!2689 = !DILocation(line: 1458, column: 7, scope: !2688)
!2690 = !DILocation(line: 1458, column: 7, scope: !2684)
!2691 = !DILocation(line: 1460, column: 28, scope: !2692)
!2692 = distinct !DILexicalBlock(scope: !2688, file: !391, line: 1459, column: 5)
!2693 = !DILocation(line: 1460, column: 7, scope: !2692)
!2694 = !DILocation(line: 1461, column: 29, scope: !2692)
!2695 = !DILocation(line: 1461, column: 7, scope: !2692)
!2696 = !DILocation(line: 1462, column: 5, scope: !2692)
!2697 = !DILocation(line: 1463, column: 1, scope: !2684)
!2698 = distinct !DISubprogram(name: "gimple_vuse", scope: !391, file: !391, line: 1365, type: !2699, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2699 = !DISubroutineType(types: !2700)
!2700 = !{!652, !2347}
!2701 = !DILocalVariable(name: "g", arg: 1, scope: !2698, file: !391, line: 1365, type: !2347)
!2702 = !DILocation(line: 1365, column: 27, scope: !2698)
!2703 = !DILocation(line: 1367, column: 28, scope: !2704)
!2704 = distinct !DILexicalBlock(scope: !2698, file: !391, line: 1367, column: 7)
!2705 = !DILocation(line: 1367, column: 8, scope: !2704)
!2706 = !DILocation(line: 1367, column: 7, scope: !2698)
!2707 = !DILocation(line: 1368, column: 5, scope: !2704)
!2708 = !DILocation(line: 1369, column: 10, scope: !2698)
!2709 = !DILocation(line: 1369, column: 13, scope: !2698)
!2710 = !DILocation(line: 1369, column: 23, scope: !2698)
!2711 = !DILocation(line: 1369, column: 3, scope: !2698)
!2712 = !DILocation(line: 1370, column: 1, scope: !2698)
!2713 = distinct !DISubprogram(name: "gimple_vop", scope: !2666, file: !2666, line: 49, type: !2714, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2714 = !DISubroutineType(types: !2715)
!2715 = !{!652, !2716}
!2716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2717, size: 64)
!2717 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1423)
!2718 = !DILocalVariable(name: "fun", arg: 1, scope: !2713, file: !2666, line: 49, type: !2716)
!2719 = !DILocation(line: 49, column: 36, scope: !2713)
!2720 = !DILocation(line: 51, column: 3, scope: !2713)
!2721 = !DILocation(line: 52, column: 10, scope: !2713)
!2722 = !DILocation(line: 52, column: 15, scope: !2713)
!2723 = !DILocation(line: 52, column: 26, scope: !2713)
!2724 = !DILocation(line: 52, column: 3, scope: !2713)
!2725 = distinct !DISubprogram(name: "tree_predictive_commoning", scope: !3, file: !3, line: 2578, type: !2726, scopeLine: 2579, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2726 = !DISubroutineType(types: !2727)
!2727 = !{!7}
!2728 = !DILocalVariable(name: "unrolled", scope: !2725, file: !3, line: 2580, type: !772)
!2729 = !DILocation(line: 2580, column: 8, scope: !2725)
!2730 = !DILocalVariable(name: "loop", scope: !2725, file: !3, line: 2581, type: !1197)
!2731 = !DILocation(line: 2581, column: 16, scope: !2725)
!2732 = !DILocalVariable(name: "li", scope: !2725, file: !3, line: 2582, type: !2733)
!2733 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !146, line: 515, baseType: !2734)
!2734 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !146, line: 508, size: 128, elements: !2735)
!2735 = !{!2736, !2737}
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !2734, file: !146, line: 511, baseType: !2108, size: 64)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !2734, file: !146, line: 514, baseType: !7, size: 32, offset: 64)
!2738 = !DILocation(line: 2582, column: 17, scope: !2725)
!2739 = !DILocalVariable(name: "ret", scope: !2725, file: !3, line: 2583, type: !7)
!2740 = !DILocation(line: 2583, column: 12, scope: !2725)
!2741 = !DILocation(line: 2585, column: 3, scope: !2725)
!2742 = !DILocation(line: 2586, column: 3, scope: !2743)
!2743 = distinct !DILexicalBlock(scope: !2725, file: !3, line: 2586, column: 3)
!2744 = !DILocation(line: 2586, column: 3, scope: !2745)
!2745 = distinct !DILexicalBlock(scope: !2743, file: !3, line: 2586, column: 3)
!2746 = !DILocation(line: 2587, column: 36, scope: !2747)
!2747 = distinct !DILexicalBlock(scope: !2745, file: !3, line: 2587, column: 9)
!2748 = !DILocation(line: 2587, column: 9, scope: !2747)
!2749 = !DILocation(line: 2587, column: 9, scope: !2745)
!2750 = !DILocation(line: 2589, column: 46, scope: !2751)
!2751 = distinct !DILexicalBlock(scope: !2747, file: !3, line: 2588, column: 7)
!2752 = !DILocation(line: 2589, column: 14, scope: !2751)
!2753 = !DILocation(line: 2589, column: 11, scope: !2751)
!2754 = !DILocation(line: 2590, column: 7, scope: !2751)
!2755 = !DILocation(line: 2587, column: 40, scope: !2747)
!2756 = distinct !{!2756, !2742, !2757}
!2757 = !DILocation(line: 2590, column: 7, scope: !2743)
!2758 = !DILocation(line: 2592, column: 7, scope: !2759)
!2759 = distinct !DILexicalBlock(scope: !2725, file: !3, line: 2592, column: 7)
!2760 = !DILocation(line: 2592, column: 7, scope: !2725)
!2761 = !DILocation(line: 2594, column: 7, scope: !2762)
!2762 = distinct !DILexicalBlock(scope: !2759, file: !3, line: 2593, column: 5)
!2763 = !DILocation(line: 2595, column: 11, scope: !2762)
!2764 = !DILocation(line: 2596, column: 5, scope: !2762)
!2765 = !DILocation(line: 2597, column: 3, scope: !2725)
!2766 = !DILocation(line: 2599, column: 10, scope: !2725)
!2767 = !DILocation(line: 2599, column: 3, scope: !2725)
!2768 = distinct !DISubprogram(name: "fel_init", scope: !146, file: !146, line: 535, type: !2769, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2769 = !DISubroutineType(types: !2770)
!2770 = !{null, !2771, !2772, !7}
!2771 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2733, size: 64)
!2772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!2773 = !DILocalVariable(name: "li", arg: 1, scope: !2768, file: !146, line: 535, type: !2771)
!2774 = !DILocation(line: 535, column: 26, scope: !2768)
!2775 = !DILocalVariable(name: "loop", arg: 2, scope: !2768, file: !146, line: 535, type: !2772)
!2776 = !DILocation(line: 535, column: 38, scope: !2768)
!2777 = !DILocalVariable(name: "flags", arg: 3, scope: !2768, file: !146, line: 535, type: !7)
!2778 = !DILocation(line: 535, column: 53, scope: !2768)
!2779 = !DILocalVariable(name: "aloop", scope: !2768, file: !146, line: 537, type: !1197)
!2780 = !DILocation(line: 537, column: 16, scope: !2768)
!2781 = !DILocalVariable(name: "i", scope: !2768, file: !146, line: 538, type: !7)
!2782 = !DILocation(line: 538, column: 12, scope: !2768)
!2783 = !DILocalVariable(name: "mn", scope: !2768, file: !146, line: 539, type: !749)
!2784 = !DILocation(line: 539, column: 7, scope: !2768)
!2785 = !DILocation(line: 541, column: 3, scope: !2768)
!2786 = !DILocation(line: 541, column: 7, scope: !2768)
!2787 = !DILocation(line: 541, column: 11, scope: !2768)
!2788 = !DILocation(line: 542, column: 8, scope: !2789)
!2789 = distinct !DILexicalBlock(scope: !2768, file: !146, line: 542, column: 7)
!2790 = !DILocation(line: 542, column: 7, scope: !2768)
!2791 = !DILocation(line: 544, column: 7, scope: !2792)
!2792 = distinct !DILexicalBlock(scope: !2789, file: !146, line: 543, column: 5)
!2793 = !DILocation(line: 544, column: 11, scope: !2792)
!2794 = !DILocation(line: 544, column: 20, scope: !2792)
!2795 = !DILocation(line: 545, column: 8, scope: !2792)
!2796 = !DILocation(line: 545, column: 13, scope: !2792)
!2797 = !DILocation(line: 546, column: 7, scope: !2792)
!2798 = !DILocation(line: 549, column: 18, scope: !2768)
!2799 = !DILocation(line: 549, column: 3, scope: !2768)
!2800 = !DILocation(line: 549, column: 7, scope: !2768)
!2801 = !DILocation(line: 549, column: 16, scope: !2768)
!2802 = !DILocation(line: 550, column: 9, scope: !2768)
!2803 = !DILocation(line: 550, column: 15, scope: !2768)
!2804 = !DILocation(line: 550, column: 8, scope: !2768)
!2805 = !DILocation(line: 550, column: 6, scope: !2768)
!2806 = !DILocation(line: 552, column: 7, scope: !2807)
!2807 = distinct !DILexicalBlock(scope: !2768, file: !146, line: 552, column: 7)
!2808 = !DILocation(line: 552, column: 13, scope: !2807)
!2809 = !DILocation(line: 552, column: 7, scope: !2768)
!2810 = !DILocation(line: 554, column: 14, scope: !2811)
!2811 = distinct !DILexicalBlock(scope: !2812, file: !146, line: 554, column: 7)
!2812 = distinct !DILexicalBlock(scope: !2807, file: !146, line: 553, column: 5)
!2813 = !DILocation(line: 554, column: 12, scope: !2811)
!2814 = !DILocation(line: 554, column: 19, scope: !2815)
!2815 = distinct !DILexicalBlock(scope: !2811, file: !146, line: 554, column: 7)
!2816 = !DILocation(line: 554, column: 7, scope: !2811)
!2817 = !DILocation(line: 555, column: 6, scope: !2818)
!2818 = distinct !DILexicalBlock(scope: !2815, file: !146, line: 555, column: 6)
!2819 = !DILocation(line: 555, column: 12, scope: !2818)
!2820 = !DILocation(line: 556, column: 6, scope: !2818)
!2821 = !DILocation(line: 556, column: 9, scope: !2818)
!2822 = !DILocation(line: 556, column: 16, scope: !2818)
!2823 = !DILocation(line: 556, column: 22, scope: !2818)
!2824 = !DILocation(line: 557, column: 6, scope: !2818)
!2825 = !DILocation(line: 557, column: 9, scope: !2818)
!2826 = !DILocation(line: 557, column: 16, scope: !2818)
!2827 = !DILocation(line: 557, column: 23, scope: !2818)
!2828 = !DILocation(line: 557, column: 20, scope: !2818)
!2829 = !DILocation(line: 555, column: 6, scope: !2815)
!2830 = !DILocation(line: 558, column: 4, scope: !2818)
!2831 = !DILocation(line: 554, column: 75, scope: !2815)
!2832 = !DILocation(line: 554, column: 7, scope: !2815)
!2833 = distinct !{!2833, !2816, !2834}
!2834 = !DILocation(line: 558, column: 4, scope: !2811)
!2835 = !DILocation(line: 559, column: 5, scope: !2812)
!2836 = !DILocation(line: 560, column: 12, scope: !2837)
!2837 = distinct !DILexicalBlock(scope: !2807, file: !146, line: 560, column: 12)
!2838 = !DILocation(line: 560, column: 18, scope: !2837)
!2839 = !DILocation(line: 560, column: 12, scope: !2807)
!2840 = !DILocation(line: 563, column: 20, scope: !2841)
!2841 = distinct !DILexicalBlock(scope: !2842, file: !146, line: 563, column: 7)
!2842 = distinct !DILexicalBlock(scope: !2837, file: !146, line: 561, column: 5)
!2843 = !DILocation(line: 563, column: 35, scope: !2841)
!2844 = !DILocation(line: 563, column: 18, scope: !2841)
!2845 = !DILocation(line: 563, column: 12, scope: !2841)
!2846 = !DILocation(line: 564, column: 5, scope: !2847)
!2847 = distinct !DILexicalBlock(scope: !2841, file: !146, line: 563, column: 7)
!2848 = !DILocation(line: 564, column: 12, scope: !2847)
!2849 = !DILocation(line: 564, column: 18, scope: !2847)
!2850 = !DILocation(line: 563, column: 7, scope: !2841)
!2851 = !DILocation(line: 566, column: 2, scope: !2847)
!2852 = !DILocation(line: 565, column: 13, scope: !2847)
!2853 = !DILocation(line: 565, column: 20, scope: !2847)
!2854 = !DILocation(line: 565, column: 11, scope: !2847)
!2855 = !DILocation(line: 563, column: 7, scope: !2847)
!2856 = distinct !{!2856, !2850, !2857}
!2857 = !DILocation(line: 566, column: 2, scope: !2841)
!2858 = !DILocation(line: 568, column: 7, scope: !2842)
!2859 = !DILocation(line: 570, column: 8, scope: !2860)
!2860 = distinct !DILexicalBlock(scope: !2861, file: !146, line: 570, column: 8)
!2861 = distinct !DILexicalBlock(scope: !2842, file: !146, line: 569, column: 2)
!2862 = !DILocation(line: 570, column: 15, scope: !2860)
!2863 = !DILocation(line: 570, column: 22, scope: !2860)
!2864 = !DILocation(line: 570, column: 19, scope: !2860)
!2865 = !DILocation(line: 570, column: 8, scope: !2861)
!2866 = !DILocation(line: 571, column: 6, scope: !2860)
!2867 = !DILocation(line: 573, column: 8, scope: !2868)
!2868 = distinct !DILexicalBlock(scope: !2861, file: !146, line: 573, column: 8)
!2869 = !DILocation(line: 573, column: 15, scope: !2868)
!2870 = !DILocation(line: 573, column: 8, scope: !2861)
!2871 = !DILocation(line: 575, column: 21, scope: !2872)
!2872 = distinct !DILexicalBlock(scope: !2873, file: !146, line: 575, column: 8)
!2873 = distinct !DILexicalBlock(scope: !2868, file: !146, line: 574, column: 6)
!2874 = !DILocation(line: 575, column: 28, scope: !2872)
!2875 = !DILocation(line: 575, column: 19, scope: !2872)
!2876 = !DILocation(line: 575, column: 13, scope: !2872)
!2877 = !DILocation(line: 576, column: 6, scope: !2878)
!2878 = distinct !DILexicalBlock(scope: !2872, file: !146, line: 575, column: 8)
!2879 = !DILocation(line: 576, column: 13, scope: !2878)
!2880 = !DILocation(line: 576, column: 19, scope: !2878)
!2881 = !DILocation(line: 575, column: 8, scope: !2872)
!2882 = !DILocation(line: 578, column: 3, scope: !2878)
!2883 = !DILocation(line: 577, column: 14, scope: !2878)
!2884 = !DILocation(line: 577, column: 21, scope: !2878)
!2885 = !DILocation(line: 577, column: 12, scope: !2878)
!2886 = !DILocation(line: 575, column: 8, scope: !2878)
!2887 = distinct !{!2887, !2881, !2888}
!2888 = !DILocation(line: 578, column: 3, scope: !2872)
!2889 = !DILocation(line: 579, column: 6, scope: !2873)
!2890 = !DILocation(line: 580, column: 26, scope: !2891)
!2891 = distinct !DILexicalBlock(scope: !2868, file: !146, line: 580, column: 13)
!2892 = !DILocation(line: 580, column: 14, scope: !2891)
!2893 = !DILocation(line: 580, column: 13, scope: !2868)
!2894 = !DILocation(line: 581, column: 6, scope: !2891)
!2895 = !DILocation(line: 583, column: 26, scope: !2891)
!2896 = !DILocation(line: 583, column: 14, scope: !2891)
!2897 = !DILocation(line: 583, column: 12, scope: !2891)
!2898 = distinct !{!2898, !2858, !2899}
!2899 = !DILocation(line: 584, column: 2, scope: !2842)
!2900 = !DILocation(line: 585, column: 5, scope: !2842)
!2901 = !DILocation(line: 589, column: 15, scope: !2902)
!2902 = distinct !DILexicalBlock(scope: !2837, file: !146, line: 587, column: 5)
!2903 = !DILocation(line: 589, column: 30, scope: !2902)
!2904 = !DILocation(line: 589, column: 13, scope: !2902)
!2905 = !DILocation(line: 590, column: 7, scope: !2902)
!2906 = !DILocation(line: 592, column: 8, scope: !2907)
!2907 = distinct !DILexicalBlock(scope: !2908, file: !146, line: 592, column: 8)
!2908 = distinct !DILexicalBlock(scope: !2902, file: !146, line: 591, column: 2)
!2909 = !DILocation(line: 592, column: 15, scope: !2907)
!2910 = !DILocation(line: 592, column: 22, scope: !2907)
!2911 = !DILocation(line: 592, column: 19, scope: !2907)
!2912 = !DILocation(line: 592, column: 8, scope: !2908)
!2913 = !DILocation(line: 593, column: 6, scope: !2907)
!2914 = !DILocation(line: 595, column: 8, scope: !2915)
!2915 = distinct !DILexicalBlock(scope: !2908, file: !146, line: 595, column: 8)
!2916 = !DILocation(line: 595, column: 15, scope: !2915)
!2917 = !DILocation(line: 595, column: 21, scope: !2915)
!2918 = !DILocation(line: 595, column: 8, scope: !2908)
!2919 = !DILocation(line: 596, column: 14, scope: !2915)
!2920 = !DILocation(line: 596, column: 21, scope: !2915)
!2921 = !DILocation(line: 596, column: 12, scope: !2915)
!2922 = !DILocation(line: 596, column: 6, scope: !2915)
!2923 = !DILocation(line: 599, column: 8, scope: !2924)
!2924 = distinct !DILexicalBlock(scope: !2915, file: !146, line: 598, column: 6)
!2925 = !DILocation(line: 599, column: 15, scope: !2924)
!2926 = !DILocation(line: 599, column: 21, scope: !2924)
!2927 = !DILocation(line: 599, column: 29, scope: !2924)
!2928 = !DILocation(line: 599, column: 32, scope: !2924)
!2929 = !DILocation(line: 599, column: 39, scope: !2924)
!2930 = !DILocation(line: 599, column: 44, scope: !2924)
!2931 = !DILocation(line: 0, scope: !2924)
!2932 = !DILocation(line: 600, column: 23, scope: !2924)
!2933 = !DILocation(line: 600, column: 11, scope: !2924)
!2934 = !DILocation(line: 600, column: 9, scope: !2924)
!2935 = distinct !{!2935, !2923, !2936}
!2936 = !DILocation(line: 600, column: 28, scope: !2924)
!2937 = !DILocation(line: 601, column: 12, scope: !2938)
!2938 = distinct !DILexicalBlock(scope: !2924, file: !146, line: 601, column: 12)
!2939 = !DILocation(line: 601, column: 18, scope: !2938)
!2940 = !DILocation(line: 601, column: 12, scope: !2924)
!2941 = !DILocation(line: 602, column: 3, scope: !2938)
!2942 = !DILocation(line: 603, column: 16, scope: !2924)
!2943 = !DILocation(line: 603, column: 23, scope: !2924)
!2944 = !DILocation(line: 603, column: 14, scope: !2924)
!2945 = distinct !{!2945, !2905, !2946}
!2946 = !DILocation(line: 605, column: 2, scope: !2902)
!2947 = !DILocation(line: 608, column: 13, scope: !2768)
!2948 = !DILocation(line: 608, column: 17, scope: !2768)
!2949 = !DILocation(line: 608, column: 3, scope: !2768)
!2950 = !DILocation(line: 609, column: 1, scope: !2768)
!2951 = distinct !DISubprogram(name: "tree_predictive_commoning_loop", scope: !3, file: !3, line: 2459, type: !2952, scopeLine: 2460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!2952 = !DISubroutineType(types: !2953)
!2953 = !{!772, !1197}
!2954 = !DILocalVariable(name: "loop", arg: 1, scope: !2951, file: !3, line: 2459, type: !1197)
!2955 = !DILocation(line: 2459, column: 46, scope: !2951)
!2956 = !DILocalVariable(name: "datarefs", scope: !2951, file: !3, line: 2461, type: !2121)
!2957 = !DILocation(line: 2461, column: 33, scope: !2951)
!2958 = !DILocalVariable(name: "dependences", scope: !2951, file: !3, line: 2462, type: !2134)
!2959 = !DILocation(line: 2462, column: 22, scope: !2951)
!2960 = !DILocalVariable(name: "components", scope: !2951, file: !3, line: 2463, type: !2196)
!2961 = !DILocation(line: 2463, column: 21, scope: !2951)
!2962 = !DILocalVariable(name: "chains", scope: !2951, file: !3, line: 2464, type: !2202)
!2963 = !DILocation(line: 2464, column: 24, scope: !2951)
!2964 = !DILocalVariable(name: "unroll_factor", scope: !2951, file: !3, line: 2465, type: !7)
!2965 = !DILocation(line: 2465, column: 12, scope: !2951)
!2966 = !DILocalVariable(name: "desc", scope: !2951, file: !3, line: 2466, type: !2967)
!2967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_niter_desc", file: !1374, line: 657, size: 640, elements: !2968)
!2968 = !{!2969, !2970, !2971, !2972, !2973, !2980, !2981}
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "assumptions", scope: !2967, file: !1374, line: 659, baseType: !652, size: 64)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "may_be_zero", scope: !2967, file: !1374, line: 663, baseType: !652, size: 64, offset: 64)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "niter", scope: !2967, file: !1374, line: 667, baseType: !652, size: 64, offset: 128)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !2967, file: !1374, line: 671, baseType: !701, size: 128, offset: 192)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2967, file: !1374, line: 679, baseType: !2974, size: 192, offset: 320)
!2974 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_iv", file: !1374, line: 651, baseType: !2975)
!2975 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1374, line: 644, size: 192, elements: !2976)
!2976 = !{!2977, !2978, !2979}
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2975, file: !1374, line: 647, baseType: !652, size: 64)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2975, file: !1374, line: 647, baseType: !652, size: 64, offset: 64)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "no_overflow", scope: !2975, file: !1374, line: 650, baseType: !772, size: 8, offset: 128)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2967, file: !1374, line: 680, baseType: !652, size: 64, offset: 512)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "cmp", scope: !2967, file: !1374, line: 681, baseType: !196, size: 32, offset: 576)
!2982 = !DILocation(line: 2466, column: 26, scope: !2951)
!2983 = !DILocalVariable(name: "unroll", scope: !2951, file: !3, line: 2467, type: !772)
!2984 = !DILocation(line: 2467, column: 8, scope: !2951)
!2985 = !DILocalVariable(name: "exit", scope: !2951, file: !3, line: 2468, type: !962)
!2986 = !DILocation(line: 2468, column: 8, scope: !2951)
!2987 = !DILocalVariable(name: "tmp_vars", scope: !2951, file: !3, line: 2469, type: !1552)
!2988 = !DILocation(line: 2469, column: 10, scope: !2951)
!2989 = !DILocation(line: 2471, column: 7, scope: !2990)
!2990 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 2471, column: 7)
!2991 = !DILocation(line: 2471, column: 17, scope: !2990)
!2992 = !DILocation(line: 2471, column: 21, scope: !2990)
!2993 = !DILocation(line: 2471, column: 32, scope: !2990)
!2994 = !DILocation(line: 2471, column: 7, scope: !2951)
!2995 = !DILocation(line: 2472, column: 14, scope: !2990)
!2996 = !DILocation(line: 2472, column: 50, scope: !2990)
!2997 = !DILocation(line: 2472, column: 56, scope: !2990)
!2998 = !DILocation(line: 2472, column: 5, scope: !2990)
!2999 = !DILocation(line: 2476, column: 14, scope: !2951)
!3000 = !DILocation(line: 2476, column: 12, scope: !2951)
!3001 = !DILocation(line: 2477, column: 17, scope: !2951)
!3002 = !DILocation(line: 2477, column: 15, scope: !2951)
!3003 = !DILocation(line: 2478, column: 38, scope: !2951)
!3004 = !DILocation(line: 2478, column: 3, scope: !2951)
!3005 = !DILocation(line: 2479, column: 7, scope: !3006)
!3006 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 2479, column: 7)
!3007 = !DILocation(line: 2479, column: 17, scope: !3006)
!3008 = !DILocation(line: 2479, column: 21, scope: !3006)
!3009 = !DILocation(line: 2479, column: 32, scope: !3006)
!3010 = !DILocation(line: 2479, column: 7, scope: !2951)
!3011 = !DILocation(line: 2480, column: 37, scope: !3006)
!3012 = !DILocation(line: 2480, column: 48, scope: !3006)
!3013 = !DILocation(line: 2480, column: 5, scope: !3006)
!3014 = !DILocation(line: 2482, column: 47, scope: !2951)
!3015 = !DILocation(line: 2482, column: 53, scope: !2951)
!3016 = !DILocation(line: 2482, column: 63, scope: !2951)
!3017 = !DILocation(line: 2482, column: 16, scope: !2951)
!3018 = !DILocation(line: 2482, column: 14, scope: !2951)
!3019 = !DILocation(line: 2483, column: 30, scope: !2951)
!3020 = !DILocation(line: 2483, column: 3, scope: !2951)
!3021 = !DILocation(line: 2484, column: 8, scope: !3022)
!3022 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 2484, column: 7)
!3023 = !DILocation(line: 2484, column: 7, scope: !2951)
!3024 = !DILocation(line: 2486, column: 23, scope: !3025)
!3025 = distinct !DILexicalBlock(scope: !3022, file: !3, line: 2485, column: 5)
!3026 = !DILocation(line: 2486, column: 7, scope: !3025)
!3027 = !DILocation(line: 2487, column: 7, scope: !3025)
!3028 = !DILocation(line: 2490, column: 7, scope: !3029)
!3029 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 2490, column: 7)
!3030 = !DILocation(line: 2490, column: 17, scope: !3029)
!3031 = !DILocation(line: 2490, column: 21, scope: !3029)
!3032 = !DILocation(line: 2490, column: 32, scope: !3029)
!3033 = !DILocation(line: 2490, column: 7, scope: !2951)
!3034 = !DILocation(line: 2492, column: 16, scope: !3035)
!3035 = distinct !DILexicalBlock(scope: !3029, file: !3, line: 2491, column: 5)
!3036 = !DILocation(line: 2492, column: 7, scope: !3035)
!3037 = !DILocation(line: 2493, column: 24, scope: !3035)
!3038 = !DILocation(line: 2493, column: 35, scope: !3035)
!3039 = !DILocation(line: 2493, column: 7, scope: !3035)
!3040 = !DILocation(line: 2494, column: 5, scope: !3035)
!3041 = !DILocation(line: 2497, column: 44, scope: !2951)
!3042 = !DILocation(line: 2497, column: 50, scope: !2951)
!3043 = !DILocation(line: 2497, column: 16, scope: !2951)
!3044 = !DILocation(line: 2497, column: 14, scope: !2951)
!3045 = !DILocation(line: 2499, column: 14, scope: !2951)
!3046 = !DILocation(line: 2499, column: 12, scope: !2951)
!3047 = !DILocation(line: 2500, column: 21, scope: !2951)
!3048 = !DILocation(line: 2500, column: 19, scope: !2951)
!3049 = !DILocation(line: 2501, column: 20, scope: !2951)
!3050 = !DILocation(line: 2501, column: 26, scope: !2951)
!3051 = !DILocation(line: 2501, column: 3, scope: !2951)
!3052 = !DILocation(line: 2502, column: 23, scope: !2951)
!3053 = !DILocation(line: 2502, column: 3, scope: !2951)
!3054 = !DILocation(line: 2504, column: 8, scope: !3055)
!3055 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 2504, column: 7)
!3056 = !DILocation(line: 2504, column: 7, scope: !2951)
!3057 = !DILocation(line: 2506, column: 11, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !3059, file: !3, line: 2506, column: 11)
!3059 = distinct !DILexicalBlock(scope: !3055, file: !3, line: 2505, column: 5)
!3060 = !DILocation(line: 2506, column: 21, scope: !3058)
!3061 = !DILocation(line: 2506, column: 25, scope: !3058)
!3062 = !DILocation(line: 2506, column: 36, scope: !3058)
!3063 = !DILocation(line: 2506, column: 11, scope: !3059)
!3064 = !DILocation(line: 2507, column: 11, scope: !3058)
!3065 = !DILocation(line: 2507, column: 2, scope: !3058)
!3066 = !DILocation(line: 2509, column: 7, scope: !3059)
!3067 = !DILocation(line: 2511, column: 25, scope: !2951)
!3068 = !DILocation(line: 2511, column: 31, scope: !2951)
!3069 = !DILocation(line: 2511, column: 3, scope: !2951)
!3070 = !DILocation(line: 2514, column: 3, scope: !2951)
!3071 = !DILocation(line: 2516, column: 7, scope: !3072)
!3072 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 2516, column: 7)
!3073 = !DILocation(line: 2516, column: 17, scope: !3072)
!3074 = !DILocation(line: 2516, column: 21, scope: !3072)
!3075 = !DILocation(line: 2516, column: 32, scope: !3072)
!3076 = !DILocation(line: 2516, column: 7, scope: !2951)
!3077 = !DILocation(line: 2518, column: 16, scope: !3078)
!3078 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 2517, column: 5)
!3079 = !DILocation(line: 2518, column: 7, scope: !3078)
!3080 = !DILocation(line: 2519, column: 20, scope: !3078)
!3081 = !DILocation(line: 2519, column: 31, scope: !3078)
!3082 = !DILocation(line: 2519, column: 7, scope: !3078)
!3083 = !DILocation(line: 2520, column: 5, scope: !3078)
!3084 = !DILocation(line: 2524, column: 44, scope: !2951)
!3085 = !DILocation(line: 2524, column: 19, scope: !2951)
!3086 = !DILocation(line: 2524, column: 17, scope: !2951)
!3087 = !DILocation(line: 2525, column: 3, scope: !2951)
!3088 = !DILocation(line: 2526, column: 13, scope: !2951)
!3089 = !DILocation(line: 2526, column: 27, scope: !2951)
!3090 = !DILocation(line: 2527, column: 6, scope: !2951)
!3091 = !DILocation(line: 2527, column: 28, scope: !2951)
!3092 = !DILocation(line: 2527, column: 34, scope: !2951)
!3093 = !DILocation(line: 2527, column: 9, scope: !2951)
!3094 = !DILocation(line: 0, scope: !2951)
!3095 = !DILocation(line: 2526, column: 12, scope: !2951)
!3096 = !DILocation(line: 2526, column: 10, scope: !2951)
!3097 = !DILocation(line: 2528, column: 27, scope: !2951)
!3098 = !DILocation(line: 2528, column: 10, scope: !2951)
!3099 = !DILocation(line: 2528, column: 8, scope: !2951)
!3100 = !DILocation(line: 2532, column: 7, scope: !3101)
!3101 = distinct !DILexicalBlock(scope: !2951, file: !3, line: 2532, column: 7)
!3102 = !DILocation(line: 2532, column: 7, scope: !2951)
!3103 = !DILocalVariable(name: "dta", scope: !3104, file: !3, line: 2534, type: !2222)
!3104 = distinct !DILexicalBlock(scope: !3101, file: !3, line: 2533, column: 5)
!3105 = !DILocation(line: 2534, column: 24, scope: !3104)
!3106 = !DILocation(line: 2536, column: 11, scope: !3107)
!3107 = distinct !DILexicalBlock(scope: !3104, file: !3, line: 2536, column: 11)
!3108 = !DILocation(line: 2536, column: 21, scope: !3107)
!3109 = !DILocation(line: 2536, column: 25, scope: !3107)
!3110 = !DILocation(line: 2536, column: 36, scope: !3107)
!3111 = !DILocation(line: 2536, column: 11, scope: !3104)
!3112 = !DILocation(line: 2537, column: 11, scope: !3107)
!3113 = !DILocation(line: 2537, column: 47, scope: !3107)
!3114 = !DILocation(line: 2537, column: 2, scope: !3107)
!3115 = !DILocation(line: 2539, column: 20, scope: !3104)
!3116 = !DILocation(line: 2539, column: 11, scope: !3104)
!3117 = !DILocation(line: 2539, column: 18, scope: !3104)
!3118 = !DILocation(line: 2540, column: 22, scope: !3104)
!3119 = !DILocation(line: 2540, column: 11, scope: !3104)
!3120 = !DILocation(line: 2540, column: 20, scope: !3104)
!3121 = !DILocation(line: 2542, column: 7, scope: !3104)
!3122 = !DILocation(line: 2550, column: 38, scope: !3104)
!3123 = !DILocation(line: 2550, column: 7, scope: !3104)
!3124 = !DILocation(line: 2552, column: 39, scope: !3104)
!3125 = !DILocation(line: 2552, column: 45, scope: !3104)
!3126 = !DILocation(line: 2552, column: 60, scope: !3104)
!3127 = !DILocation(line: 2553, column: 40, scope: !3104)
!3128 = !DILocation(line: 2552, column: 7, scope: !3104)
!3129 = !DILocation(line: 2554, column: 30, scope: !3104)
!3130 = !DILocation(line: 2554, column: 36, scope: !3104)
!3131 = !DILocation(line: 2554, column: 7, scope: !3104)
!3132 = !DILocation(line: 2555, column: 5, scope: !3104)
!3133 = !DILocation(line: 2558, column: 11, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !3135, file: !3, line: 2558, column: 11)
!3135 = distinct !DILexicalBlock(scope: !3101, file: !3, line: 2557, column: 5)
!3136 = !DILocation(line: 2558, column: 21, scope: !3134)
!3137 = !DILocation(line: 2558, column: 25, scope: !3134)
!3138 = !DILocation(line: 2558, column: 36, scope: !3134)
!3139 = !DILocation(line: 2558, column: 11, scope: !3135)
!3140 = !DILocation(line: 2559, column: 11, scope: !3134)
!3141 = !DILocation(line: 2559, column: 2, scope: !3134)
!3142 = !DILocation(line: 2561, column: 31, scope: !3135)
!3143 = !DILocation(line: 2561, column: 37, scope: !3135)
!3144 = !DILocation(line: 2561, column: 45, scope: !3135)
!3145 = !DILocation(line: 2561, column: 7, scope: !3135)
!3146 = !DILabel(scope: !2951, name: "end", file: !3, line: 2564)
!3147 = !DILocation(line: 2564, column: 1, scope: !2951)
!3148 = !DILocation(line: 2565, column: 19, scope: !2951)
!3149 = !DILocation(line: 2565, column: 3, scope: !2951)
!3150 = !DILocation(line: 2566, column: 19, scope: !2951)
!3151 = !DILocation(line: 2566, column: 3, scope: !2951)
!3152 = !DILocation(line: 2567, column: 3, scope: !2951)
!3153 = !DILocation(line: 2568, column: 3, scope: !2951)
!3154 = !DILocation(line: 2570, column: 3, scope: !2951)
!3155 = !DILocation(line: 2572, column: 10, scope: !2951)
!3156 = !DILocation(line: 2572, column: 3, scope: !2951)
!3157 = !DILocation(line: 2573, column: 1, scope: !2951)
!3158 = distinct !DISubprogram(name: "fel_next", scope: !146, file: !146, line: 518, type: !3159, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3159 = !DISubroutineType(types: !3160)
!3160 = !{null, !2771, !2772}
!3161 = !DILocalVariable(name: "li", arg: 1, scope: !3158, file: !146, line: 518, type: !2771)
!3162 = !DILocation(line: 518, column: 26, scope: !3158)
!3163 = !DILocalVariable(name: "loop", arg: 2, scope: !3158, file: !146, line: 518, type: !2772)
!3164 = !DILocation(line: 518, column: 38, scope: !3158)
!3165 = !DILocalVariable(name: "anum", scope: !3158, file: !146, line: 520, type: !749)
!3166 = !DILocation(line: 520, column: 7, scope: !3158)
!3167 = !DILocation(line: 522, column: 3, scope: !3158)
!3168 = !DILocation(line: 522, column: 10, scope: !3158)
!3169 = !DILocation(line: 524, column: 7, scope: !3170)
!3170 = distinct !DILexicalBlock(scope: !3158, file: !146, line: 523, column: 5)
!3171 = !DILocation(line: 524, column: 11, scope: !3170)
!3172 = !DILocation(line: 524, column: 14, scope: !3170)
!3173 = !DILocation(line: 525, column: 25, scope: !3170)
!3174 = !DILocation(line: 525, column: 15, scope: !3170)
!3175 = !DILocation(line: 525, column: 8, scope: !3170)
!3176 = !DILocation(line: 525, column: 13, scope: !3170)
!3177 = !DILocation(line: 526, column: 12, scope: !3178)
!3178 = distinct !DILexicalBlock(scope: !3170, file: !146, line: 526, column: 11)
!3179 = !DILocation(line: 526, column: 11, scope: !3178)
!3180 = !DILocation(line: 526, column: 11, scope: !3170)
!3181 = !DILocation(line: 527, column: 2, scope: !3178)
!3182 = distinct !{!3182, !3167, !3183}
!3183 = !DILocation(line: 528, column: 5, scope: !3158)
!3184 = !DILocation(line: 530, column: 3, scope: !3158)
!3185 = !DILocation(line: 531, column: 4, scope: !3158)
!3186 = !DILocation(line: 531, column: 9, scope: !3158)
!3187 = !DILocation(line: 532, column: 1, scope: !3158)
!3188 = distinct !DISubprogram(name: "gimple_has_ops", scope: !391, file: !391, line: 1274, type: !3189, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3189 = !DISubroutineType(types: !3190)
!3190 = !{!772, !2347}
!3191 = !DILocalVariable(name: "g", arg: 1, scope: !3188, file: !391, line: 1274, type: !2347)
!3192 = !DILocation(line: 1274, column: 30, scope: !3188)
!3193 = !DILocation(line: 1276, column: 23, scope: !3188)
!3194 = !DILocation(line: 1276, column: 10, scope: !3188)
!3195 = !DILocation(line: 1276, column: 26, scope: !3188)
!3196 = !DILocation(line: 1276, column: 41, scope: !3188)
!3197 = !DILocation(line: 1276, column: 57, scope: !3188)
!3198 = !DILocation(line: 1276, column: 44, scope: !3188)
!3199 = !DILocation(line: 1276, column: 60, scope: !3188)
!3200 = !DILocation(line: 0, scope: !3188)
!3201 = !DILocation(line: 1276, column: 3, scope: !3188)
!3202 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !391, file: !391, line: 1283, type: !3189, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3203 = !DILocalVariable(name: "g", arg: 1, scope: !3202, file: !391, line: 1283, type: !2347)
!3204 = !DILocation(line: 1283, column: 34, scope: !3202)
!3205 = !DILocation(line: 1285, column: 23, scope: !3202)
!3206 = !DILocation(line: 1285, column: 10, scope: !3202)
!3207 = !DILocation(line: 1285, column: 26, scope: !3202)
!3208 = !DILocation(line: 1285, column: 43, scope: !3202)
!3209 = !DILocation(line: 1285, column: 59, scope: !3202)
!3210 = !DILocation(line: 1285, column: 46, scope: !3202)
!3211 = !DILocation(line: 1285, column: 62, scope: !3202)
!3212 = !DILocation(line: 0, scope: !3202)
!3213 = !DILocation(line: 1285, column: 3, scope: !3202)
!3214 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !2110, file: !2110, line: 32, type: !3215, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3215 = !DISubroutineType(types: !3216)
!3216 = !{!2108, !749}
!3217 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3214, file: !2110, line: 32, type: !749)
!3218 = !DILocation(line: 32, column: 1, scope: !3214)
!3219 = distinct !DISubprogram(name: "number_of_loops", scope: !146, file: !146, line: 459, type: !2726, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3220 = !DILocation(line: 461, column: 8, scope: !3221)
!3221 = distinct !DILexicalBlock(scope: !3219, file: !146, line: 461, column: 7)
!3222 = !DILocation(line: 461, column: 7, scope: !3219)
!3223 = !DILocation(line: 462, column: 5, scope: !3221)
!3224 = !DILocation(line: 464, column: 10, scope: !3219)
!3225 = !DILocation(line: 464, column: 3, scope: !3219)
!3226 = !DILocation(line: 465, column: 1, scope: !3219)
!3227 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !146, file: !146, line: 85, type: !3228, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3228 = !DISubroutineType(types: !3229)
!3229 = !{!749, !3230, !7, !2772}
!3230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3231, size: 64)
!3231 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1217)
!3232 = !DILocalVariable(name: "vec_", arg: 1, scope: !3227, file: !146, line: 85, type: !3230)
!3233 = !DILocation(line: 85, column: 1, scope: !3227)
!3234 = !DILocalVariable(name: "ix_", arg: 2, scope: !3227, file: !146, line: 85, type: !7)
!3235 = !DILocalVariable(name: "ptr", arg: 3, scope: !3227, file: !146, line: 85, type: !2772)
!3236 = !DILocation(line: 85, column: 1, scope: !3237)
!3237 = distinct !DILexicalBlock(scope: !3227, file: !146, line: 85, column: 1)
!3238 = !DILocation(line: 85, column: 1, scope: !3239)
!3239 = distinct !DILexicalBlock(scope: !3237, file: !146, line: 85, column: 1)
!3240 = !DILocation(line: 85, column: 1, scope: !3241)
!3241 = distinct !DILexicalBlock(scope: !3237, file: !146, line: 85, column: 1)
!3242 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2110, file: !2110, line: 31, type: !3243, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3243 = !DISubroutineType(types: !3244)
!3244 = !{!2073, !3245, !749}
!3245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2114, size: 64)
!3246 = !DILocalVariable(name: "vec_", arg: 1, scope: !3242, file: !2110, line: 31, type: !3245)
!3247 = !DILocation(line: 31, column: 1, scope: !3242)
!3248 = !DILocalVariable(name: "obj_", arg: 2, scope: !3242, file: !2110, line: 31, type: !749)
!3249 = !DILocalVariable(name: "slot_", scope: !3242, file: !2110, line: 31, type: !2073)
!3250 = distinct !DISubprogram(name: "loop_outer", scope: !146, file: !146, line: 434, type: !3251, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3251 = !DISubroutineType(types: !3252)
!3252 = !{!1197, !3253}
!3253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3254, size: 64)
!3254 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1198)
!3255 = !DILocalVariable(name: "loop", arg: 1, scope: !3250, file: !146, line: 434, type: !3253)
!3256 = !DILocation(line: 434, column: 32, scope: !3250)
!3257 = !DILocalVariable(name: "n", scope: !3250, file: !146, line: 436, type: !7)
!3258 = !DILocation(line: 436, column: 12, scope: !3250)
!3259 = !DILocation(line: 436, column: 16, scope: !3250)
!3260 = !DILocation(line: 438, column: 7, scope: !3261)
!3261 = distinct !DILexicalBlock(scope: !3250, file: !146, line: 438, column: 7)
!3262 = !DILocation(line: 438, column: 9, scope: !3261)
!3263 = !DILocation(line: 438, column: 7, scope: !3250)
!3264 = !DILocation(line: 439, column: 5, scope: !3261)
!3265 = !DILocation(line: 441, column: 10, scope: !3250)
!3266 = !DILocation(line: 441, column: 3, scope: !3250)
!3267 = !DILocation(line: 442, column: 1, scope: !3250)
!3268 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !146, file: !146, line: 85, type: !3269, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3269 = !DISubroutineType(types: !3270)
!3270 = !{!7, !3230}
!3271 = !DILocalVariable(name: "vec_", arg: 1, scope: !3268, file: !146, line: 85, type: !3230)
!3272 = !DILocation(line: 85, column: 1, scope: !3268)
!3273 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !146, file: !146, line: 85, type: !3274, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3274 = !DISubroutineType(types: !3275)
!3275 = !{!1224, !3230, !7}
!3276 = !DILocalVariable(name: "vec_", arg: 1, scope: !3273, file: !146, line: 85, type: !3230)
!3277 = !DILocation(line: 85, column: 1, scope: !3273)
!3278 = !DILocalVariable(name: "ix_", arg: 2, scope: !3273, file: !146, line: 85, type: !7)
!3279 = !DILocation(line: 0, scope: !3273)
!3280 = distinct !DISubprogram(name: "VEC_data_reference_p_heap_alloc", scope: !2017, file: !2017, line: 209, type: !3281, scopeLine: 209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3281 = !DISubroutineType(types: !3282)
!3282 = !{!2121, !749}
!3283 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3280, file: !2017, line: 209, type: !749)
!3284 = !DILocation(line: 209, column: 1, scope: !3280)
!3285 = distinct !DISubprogram(name: "VEC_ddr_p_heap_alloc", scope: !2017, file: !2017, line: 333, type: !3286, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3286 = !DISubroutineType(types: !3287)
!3287 = !{!2134, !749}
!3288 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3285, file: !2017, line: 333, type: !749)
!3289 = !DILocation(line: 333, column: 1, scope: !3285)
!3290 = distinct !DISubprogram(name: "split_data_refs_to_components", scope: !3, file: !3, line: 694, type: !3291, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3291 = !DISubroutineType(types: !3292)
!3292 = !{!2196, !1197, !2121, !2134}
!3293 = !DILocalVariable(name: "loop", arg: 1, scope: !3290, file: !3, line: 694, type: !1197)
!3294 = !DILocation(line: 694, column: 45, scope: !3290)
!3295 = !DILocalVariable(name: "datarefs", arg: 2, scope: !3290, file: !3, line: 695, type: !2121)
!3296 = !DILocation(line: 695, column: 41, scope: !3290)
!3297 = !DILocalVariable(name: "depends", arg: 3, scope: !3290, file: !3, line: 696, type: !2134)
!3298 = !DILocation(line: 696, column: 30, scope: !3290)
!3299 = !DILocalVariable(name: "i", scope: !3290, file: !3, line: 698, type: !7)
!3300 = !DILocation(line: 698, column: 12, scope: !3290)
!3301 = !DILocalVariable(name: "n", scope: !3290, file: !3, line: 698, type: !7)
!3302 = !DILocation(line: 698, column: 15, scope: !3290)
!3303 = !DILocation(line: 698, column: 19, scope: !3290)
!3304 = !DILocalVariable(name: "ca", scope: !3290, file: !3, line: 699, type: !7)
!3305 = !DILocation(line: 699, column: 12, scope: !3290)
!3306 = !DILocalVariable(name: "ia", scope: !3290, file: !3, line: 699, type: !7)
!3307 = !DILocation(line: 699, column: 16, scope: !3290)
!3308 = !DILocalVariable(name: "ib", scope: !3290, file: !3, line: 699, type: !7)
!3309 = !DILocation(line: 699, column: 20, scope: !3290)
!3310 = !DILocalVariable(name: "bad", scope: !3290, file: !3, line: 699, type: !7)
!3311 = !DILocation(line: 699, column: 24, scope: !3290)
!3312 = !DILocalVariable(name: "comp_father", scope: !3290, file: !3, line: 700, type: !2194)
!3313 = !DILocation(line: 700, column: 13, scope: !3290)
!3314 = !DILocation(line: 700, column: 27, scope: !3290)
!3315 = !DILocalVariable(name: "comp_size", scope: !3290, file: !3, line: 701, type: !2194)
!3316 = !DILocation(line: 701, column: 13, scope: !3290)
!3317 = !DILocation(line: 701, column: 25, scope: !3290)
!3318 = !DILocalVariable(name: "comps", scope: !3290, file: !3, line: 702, type: !2195)
!3319 = !DILocation(line: 702, column: 22, scope: !3290)
!3320 = !DILocalVariable(name: "dr", scope: !3290, file: !3, line: 703, type: !2015)
!3321 = !DILocation(line: 703, column: 26, scope: !3290)
!3322 = !DILocalVariable(name: "dra", scope: !3290, file: !3, line: 703, type: !2015)
!3323 = !DILocation(line: 703, column: 31, scope: !3290)
!3324 = !DILocalVariable(name: "drb", scope: !3290, file: !3, line: 703, type: !2015)
!3325 = !DILocation(line: 703, column: 37, scope: !3290)
!3326 = !DILocalVariable(name: "ddr", scope: !3290, file: !3, line: 704, type: !2147)
!3327 = !DILocation(line: 704, column: 36, scope: !3290)
!3328 = !DILocalVariable(name: "comp_list", scope: !3290, file: !3, line: 705, type: !2196)
!3329 = !DILocation(line: 705, column: 21, scope: !3290)
!3330 = !DILocalVariable(name: "comp", scope: !3290, file: !3, line: 705, type: !2196)
!3331 = !DILocation(line: 705, column: 40, scope: !3290)
!3332 = !DILocalVariable(name: "dataref", scope: !3290, file: !3, line: 706, type: !2010)
!3333 = !DILocation(line: 706, column: 8, scope: !3290)
!3334 = !DILocalVariable(name: "last_always_executed", scope: !3290, file: !3, line: 707, type: !1434)
!3335 = !DILocation(line: 707, column: 15, scope: !3290)
!3336 = !DILocation(line: 707, column: 66, scope: !3290)
!3337 = !DILocation(line: 707, column: 38, scope: !3290)
!3338 = !DILocation(line: 709, column: 10, scope: !3339)
!3339 = distinct !DILexicalBlock(scope: !3290, file: !3, line: 709, column: 3)
!3340 = !DILocation(line: 709, column: 8, scope: !3339)
!3341 = !DILocation(line: 709, column: 15, scope: !3342)
!3342 = distinct !DILexicalBlock(scope: !3339, file: !3, line: 709, column: 3)
!3343 = !DILocation(line: 709, column: 3, scope: !3339)
!3344 = !DILocation(line: 711, column: 12, scope: !3345)
!3345 = distinct !DILexicalBlock(scope: !3346, file: !3, line: 711, column: 11)
!3346 = distinct !DILexicalBlock(scope: !3342, file: !3, line: 710, column: 5)
!3347 = !DILocation(line: 711, column: 11, scope: !3346)
!3348 = !DILocation(line: 715, column: 4, scope: !3349)
!3349 = distinct !DILexicalBlock(scope: !3345, file: !3, line: 712, column: 2)
!3350 = !DILocation(line: 717, column: 35, scope: !3346)
!3351 = !DILocation(line: 717, column: 26, scope: !3346)
!3352 = !DILocation(line: 717, column: 17, scope: !3346)
!3353 = !DILocation(line: 717, column: 7, scope: !3346)
!3354 = !DILocation(line: 717, column: 11, scope: !3346)
!3355 = !DILocation(line: 717, column: 15, scope: !3346)
!3356 = !DILocation(line: 718, column: 24, scope: !3346)
!3357 = !DILocation(line: 718, column: 7, scope: !3346)
!3358 = !DILocation(line: 718, column: 19, scope: !3346)
!3359 = !DILocation(line: 718, column: 22, scope: !3346)
!3360 = !DILocation(line: 719, column: 7, scope: !3346)
!3361 = !DILocation(line: 719, column: 17, scope: !3346)
!3362 = !DILocation(line: 719, column: 20, scope: !3346)
!3363 = !DILocation(line: 720, column: 5, scope: !3346)
!3364 = !DILocation(line: 709, column: 65, scope: !3342)
!3365 = !DILocation(line: 709, column: 3, scope: !3342)
!3366 = distinct !{!3366, !3343, !3367}
!3367 = !DILocation(line: 720, column: 5, scope: !3339)
!3368 = !DILocation(line: 723, column: 20, scope: !3290)
!3369 = !DILocation(line: 723, column: 3, scope: !3290)
!3370 = !DILocation(line: 723, column: 15, scope: !3290)
!3371 = !DILocation(line: 723, column: 18, scope: !3290)
!3372 = !DILocation(line: 724, column: 3, scope: !3290)
!3373 = !DILocation(line: 724, column: 13, scope: !3290)
!3374 = !DILocation(line: 724, column: 16, scope: !3290)
!3375 = !DILocation(line: 726, column: 10, scope: !3376)
!3376 = distinct !DILexicalBlock(scope: !3290, file: !3, line: 726, column: 3)
!3377 = !DILocation(line: 726, column: 8, scope: !3376)
!3378 = !DILocation(line: 726, column: 15, scope: !3379)
!3379 = distinct !DILexicalBlock(scope: !3376, file: !3, line: 726, column: 3)
!3380 = !DILocation(line: 726, column: 3, scope: !3376)
!3381 = !DILocalVariable(name: "dummy", scope: !3382, file: !3, line: 728, type: !435)
!3382 = distinct !DILexicalBlock(scope: !3379, file: !3, line: 727, column: 5)
!3383 = !DILocation(line: 728, column: 26, scope: !3382)
!3384 = !DILocation(line: 730, column: 34, scope: !3385)
!3385 = distinct !DILexicalBlock(scope: !3382, file: !3, line: 730, column: 11)
!3386 = !DILocation(line: 730, column: 12, scope: !3385)
!3387 = !DILocation(line: 730, column: 11, scope: !3382)
!3388 = !DILocation(line: 732, column: 29, scope: !3389)
!3389 = distinct !DILexicalBlock(scope: !3385, file: !3, line: 731, column: 2)
!3390 = !DILocation(line: 732, column: 33, scope: !3389)
!3391 = !DILocation(line: 732, column: 20, scope: !3389)
!3392 = !DILocation(line: 732, column: 9, scope: !3389)
!3393 = !DILocation(line: 732, column: 7, scope: !3389)
!3394 = !DILocation(line: 733, column: 17, scope: !3389)
!3395 = !DILocation(line: 733, column: 30, scope: !3389)
!3396 = !DILocation(line: 733, column: 41, scope: !3389)
!3397 = !DILocation(line: 733, column: 44, scope: !3389)
!3398 = !DILocation(line: 733, column: 4, scope: !3389)
!3399 = !DILocation(line: 734, column: 2, scope: !3389)
!3400 = !DILocation(line: 735, column: 5, scope: !3382)
!3401 = !DILocation(line: 726, column: 65, scope: !3379)
!3402 = !DILocation(line: 726, column: 3, scope: !3379)
!3403 = distinct !{!3403, !3380, !3404}
!3404 = !DILocation(line: 735, column: 5, scope: !3376)
!3405 = !DILocation(line: 737, column: 10, scope: !3406)
!3406 = distinct !DILexicalBlock(scope: !3290, file: !3, line: 737, column: 3)
!3407 = !DILocation(line: 737, column: 8, scope: !3406)
!3408 = !DILocation(line: 737, column: 15, scope: !3409)
!3409 = distinct !DILexicalBlock(scope: !3406, file: !3, line: 737, column: 3)
!3410 = !DILocation(line: 737, column: 3, scope: !3406)
!3411 = !DILocalVariable(name: "dummy_off", scope: !3412, file: !3, line: 739, type: !701)
!3412 = distinct !DILexicalBlock(scope: !3409, file: !3, line: 738, column: 5)
!3413 = !DILocation(line: 739, column: 18, scope: !3412)
!3414 = !DILocation(line: 741, column: 11, scope: !3415)
!3415 = distinct !DILexicalBlock(scope: !3412, file: !3, line: 741, column: 11)
!3416 = !DILocation(line: 741, column: 38, scope: !3415)
!3417 = !DILocation(line: 741, column: 35, scope: !3415)
!3418 = !DILocation(line: 741, column: 11, scope: !3412)
!3419 = !DILocation(line: 742, column: 2, scope: !3415)
!3420 = !DILocation(line: 744, column: 13, scope: !3412)
!3421 = !DILocation(line: 744, column: 11, scope: !3412)
!3422 = !DILocation(line: 745, column: 13, scope: !3412)
!3423 = !DILocation(line: 745, column: 11, scope: !3412)
!3424 = !DILocation(line: 746, column: 26, scope: !3412)
!3425 = !DILocation(line: 746, column: 59, scope: !3412)
!3426 = !DILocation(line: 746, column: 64, scope: !3412)
!3427 = !DILocation(line: 746, column: 50, scope: !3412)
!3428 = !DILocation(line: 746, column: 39, scope: !3412)
!3429 = !DILocation(line: 746, column: 12, scope: !3412)
!3430 = !DILocation(line: 746, column: 10, scope: !3412)
!3431 = !DILocation(line: 747, column: 26, scope: !3412)
!3432 = !DILocation(line: 747, column: 59, scope: !3412)
!3433 = !DILocation(line: 747, column: 64, scope: !3412)
!3434 = !DILocation(line: 747, column: 50, scope: !3412)
!3435 = !DILocation(line: 747, column: 39, scope: !3412)
!3436 = !DILocation(line: 747, column: 12, scope: !3412)
!3437 = !DILocation(line: 747, column: 10, scope: !3412)
!3438 = !DILocation(line: 748, column: 11, scope: !3439)
!3439 = distinct !DILexicalBlock(scope: !3412, file: !3, line: 748, column: 11)
!3440 = !DILocation(line: 748, column: 17, scope: !3439)
!3441 = !DILocation(line: 748, column: 14, scope: !3439)
!3442 = !DILocation(line: 748, column: 11, scope: !3412)
!3443 = !DILocation(line: 749, column: 2, scope: !3439)
!3444 = !DILocation(line: 751, column: 27, scope: !3412)
!3445 = !DILocation(line: 751, column: 40, scope: !3412)
!3446 = !DILocation(line: 751, column: 13, scope: !3412)
!3447 = !DILocation(line: 751, column: 11, scope: !3412)
!3448 = !DILocation(line: 754, column: 11, scope: !3449)
!3449 = distinct !DILexicalBlock(scope: !3412, file: !3, line: 754, column: 11)
!3450 = !DILocation(line: 754, column: 28, scope: !3449)
!3451 = !DILocation(line: 754, column: 31, scope: !3449)
!3452 = !DILocation(line: 755, column: 4, scope: !3449)
!3453 = !DILocation(line: 755, column: 8, scope: !3449)
!3454 = !DILocation(line: 755, column: 14, scope: !3449)
!3455 = !DILocation(line: 755, column: 11, scope: !3449)
!3456 = !DILocation(line: 755, column: 18, scope: !3449)
!3457 = !DILocation(line: 755, column: 21, scope: !3449)
!3458 = !DILocation(line: 755, column: 27, scope: !3449)
!3459 = !DILocation(line: 755, column: 24, scope: !3449)
!3460 = !DILocation(line: 756, column: 8, scope: !3449)
!3461 = !DILocation(line: 756, column: 30, scope: !3449)
!3462 = !DILocation(line: 756, column: 35, scope: !3449)
!3463 = !DILocation(line: 756, column: 12, scope: !3449)
!3464 = !DILocation(line: 754, column: 11, scope: !3412)
!3465 = !DILocation(line: 757, column: 2, scope: !3449)
!3466 = !DILocation(line: 759, column: 20, scope: !3412)
!3467 = !DILocation(line: 759, column: 33, scope: !3412)
!3468 = !DILocation(line: 759, column: 44, scope: !3412)
!3469 = !DILocation(line: 759, column: 48, scope: !3412)
!3470 = !DILocation(line: 759, column: 7, scope: !3412)
!3471 = !DILocation(line: 760, column: 5, scope: !3412)
!3472 = !DILocation(line: 737, column: 54, scope: !3409)
!3473 = !DILocation(line: 737, column: 3, scope: !3409)
!3474 = distinct !{!3474, !3410, !3475}
!3475 = !DILocation(line: 760, column: 5, scope: !3406)
!3476 = !DILocation(line: 762, column: 11, scope: !3290)
!3477 = !DILocation(line: 762, column: 9, scope: !3290)
!3478 = !DILocation(line: 763, column: 23, scope: !3290)
!3479 = !DILocation(line: 763, column: 36, scope: !3290)
!3480 = !DILocation(line: 763, column: 9, scope: !3290)
!3481 = !DILocation(line: 763, column: 7, scope: !3290)
!3482 = !DILocation(line: 764, column: 10, scope: !3483)
!3483 = distinct !DILexicalBlock(scope: !3290, file: !3, line: 764, column: 3)
!3484 = !DILocation(line: 764, column: 8, scope: !3483)
!3485 = !DILocation(line: 764, column: 15, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3483, file: !3, line: 764, column: 3)
!3487 = !DILocation(line: 764, column: 3, scope: !3483)
!3488 = !DILocation(line: 766, column: 32, scope: !3489)
!3489 = distinct !DILexicalBlock(scope: !3486, file: !3, line: 765, column: 5)
!3490 = !DILocation(line: 766, column: 36, scope: !3489)
!3491 = !DILocation(line: 766, column: 23, scope: !3489)
!3492 = !DILocation(line: 766, column: 12, scope: !3489)
!3493 = !DILocation(line: 766, column: 10, scope: !3489)
!3494 = !DILocation(line: 767, column: 26, scope: !3489)
!3495 = !DILocation(line: 767, column: 39, scope: !3489)
!3496 = !DILocation(line: 767, column: 12, scope: !3489)
!3497 = !DILocation(line: 767, column: 10, scope: !3489)
!3498 = !DILocation(line: 768, column: 11, scope: !3499)
!3499 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 768, column: 11)
!3500 = !DILocation(line: 768, column: 17, scope: !3499)
!3501 = !DILocation(line: 768, column: 14, scope: !3499)
!3502 = !DILocation(line: 768, column: 11, scope: !3489)
!3503 = !DILocation(line: 769, column: 2, scope: !3499)
!3504 = !DILocation(line: 771, column: 14, scope: !3489)
!3505 = !DILocation(line: 771, column: 20, scope: !3489)
!3506 = !DILocation(line: 771, column: 12, scope: !3489)
!3507 = !DILocation(line: 772, column: 12, scope: !3508)
!3508 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 772, column: 11)
!3509 = !DILocation(line: 772, column: 11, scope: !3489)
!3510 = !DILocation(line: 774, column: 11, scope: !3511)
!3511 = distinct !DILexicalBlock(scope: !3508, file: !3, line: 773, column: 2)
!3512 = !DILocation(line: 774, column: 9, scope: !3511)
!3513 = !DILocation(line: 775, column: 17, scope: !3511)
!3514 = !DILocation(line: 775, column: 4, scope: !3511)
!3515 = !DILocation(line: 775, column: 10, scope: !3511)
!3516 = !DILocation(line: 775, column: 15, scope: !3511)
!3517 = !DILocation(line: 776, column: 16, scope: !3511)
!3518 = !DILocation(line: 776, column: 4, scope: !3511)
!3519 = !DILocation(line: 776, column: 10, scope: !3511)
!3520 = !DILocation(line: 776, column: 14, scope: !3511)
!3521 = !DILocation(line: 777, column: 2, scope: !3511)
!3522 = !DILocation(line: 779, column: 17, scope: !3489)
!3523 = !DILocation(line: 779, column: 15, scope: !3489)
!3524 = !DILocation(line: 780, column: 22, scope: !3489)
!3525 = !DILocation(line: 780, column: 7, scope: !3489)
!3526 = !DILocation(line: 780, column: 16, scope: !3489)
!3527 = !DILocation(line: 780, column: 20, scope: !3489)
!3528 = !DILocation(line: 781, column: 23, scope: !3489)
!3529 = !DILocation(line: 781, column: 7, scope: !3489)
!3530 = !DILocation(line: 781, column: 16, scope: !3489)
!3531 = !DILocation(line: 781, column: 21, scope: !3489)
!3532 = !DILocation(line: 782, column: 7, scope: !3489)
!3533 = !DILocation(line: 782, column: 16, scope: !3489)
!3534 = !DILocation(line: 782, column: 25, scope: !3489)
!3535 = !DILocation(line: 783, column: 7, scope: !3489)
!3536 = !DILocation(line: 783, column: 16, scope: !3489)
!3537 = !DILocation(line: 783, column: 25, scope: !3489)
!3538 = !DILocation(line: 786, column: 42, scope: !3489)
!3539 = !DILocation(line: 787, column: 16, scope: !3489)
!3540 = !DILocation(line: 787, column: 25, scope: !3489)
!3541 = !DILocation(line: 787, column: 5, scope: !3489)
!3542 = !DILocation(line: 786, column: 10, scope: !3489)
!3543 = !DILocation(line: 785, column: 7, scope: !3489)
!3544 = !DILocation(line: 785, column: 16, scope: !3489)
!3545 = !DILocation(line: 786, column: 8, scope: !3489)
!3546 = !DILocation(line: 788, column: 22, scope: !3489)
!3547 = !DILocation(line: 788, column: 7, scope: !3489)
!3548 = !DILocation(line: 788, column: 16, scope: !3489)
!3549 = !DILocation(line: 788, column: 20, scope: !3489)
!3550 = !DILocation(line: 789, column: 7, scope: !3489)
!3551 = !DILocation(line: 790, column: 5, scope: !3489)
!3552 = !DILocation(line: 764, column: 65, scope: !3486)
!3553 = !DILocation(line: 764, column: 3, scope: !3486)
!3554 = distinct !{!3554, !3487, !3555}
!3555 = !DILocation(line: 790, column: 5, scope: !3483)
!3556 = !DILocation(line: 792, column: 10, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3290, file: !3, line: 792, column: 3)
!3558 = !DILocation(line: 792, column: 8, scope: !3557)
!3559 = !DILocation(line: 792, column: 15, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3557, file: !3, line: 792, column: 3)
!3561 = !DILocation(line: 792, column: 19, scope: !3560)
!3562 = !DILocation(line: 792, column: 17, scope: !3560)
!3563 = !DILocation(line: 792, column: 3, scope: !3557)
!3564 = !DILocation(line: 794, column: 14, scope: !3565)
!3565 = distinct !DILexicalBlock(scope: !3560, file: !3, line: 793, column: 5)
!3566 = !DILocation(line: 794, column: 20, scope: !3565)
!3567 = !DILocation(line: 794, column: 12, scope: !3565)
!3568 = !DILocation(line: 795, column: 11, scope: !3569)
!3569 = distinct !DILexicalBlock(scope: !3565, file: !3, line: 795, column: 11)
!3570 = !DILocation(line: 795, column: 11, scope: !3565)
!3571 = !DILocation(line: 797, column: 17, scope: !3572)
!3572 = distinct !DILexicalBlock(scope: !3569, file: !3, line: 796, column: 2)
!3573 = !DILocation(line: 797, column: 4, scope: !3572)
!3574 = !DILocation(line: 797, column: 10, scope: !3572)
!3575 = !DILocation(line: 797, column: 15, scope: !3572)
!3576 = !DILocation(line: 798, column: 16, scope: !3572)
!3577 = !DILocation(line: 798, column: 14, scope: !3572)
!3578 = !DILocation(line: 799, column: 2, scope: !3572)
!3579 = !DILocation(line: 800, column: 5, scope: !3565)
!3580 = !DILocation(line: 792, column: 23, scope: !3560)
!3581 = !DILocation(line: 792, column: 3, scope: !3560)
!3582 = distinct !{!3582, !3563, !3583}
!3583 = !DILocation(line: 800, column: 5, scope: !3557)
!3584 = !DILocation(line: 801, column: 9, scope: !3290)
!3585 = !DILocation(line: 801, column: 3, scope: !3290)
!3586 = !DILabel(scope: !3290, name: "end", file: !3, line: 803)
!3587 = !DILocation(line: 803, column: 1, scope: !3290)
!3588 = !DILocation(line: 804, column: 9, scope: !3290)
!3589 = !DILocation(line: 804, column: 3, scope: !3290)
!3590 = !DILocation(line: 805, column: 9, scope: !3290)
!3591 = !DILocation(line: 805, column: 3, scope: !3290)
!3592 = !DILocation(line: 806, column: 10, scope: !3290)
!3593 = !DILocation(line: 806, column: 3, scope: !3290)
!3594 = distinct !DISubprogram(name: "filter_suitable_components", scope: !3, file: !3, line: 870, type: !3595, scopeLine: 871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3595 = !DISubroutineType(types: !3596)
!3596 = !{!2196, !1197, !2196}
!3597 = !DILocalVariable(name: "loop", arg: 1, scope: !3594, file: !3, line: 870, type: !1197)
!3598 = !DILocation(line: 870, column: 42, scope: !3594)
!3599 = !DILocalVariable(name: "comps", arg: 2, scope: !3594, file: !3, line: 870, type: !2196)
!3600 = !DILocation(line: 870, column: 66, scope: !3594)
!3601 = !DILocalVariable(name: "comp", scope: !3594, file: !3, line: 872, type: !2195)
!3602 = !DILocation(line: 872, column: 22, scope: !3594)
!3603 = !DILocalVariable(name: "act", scope: !3594, file: !3, line: 872, type: !2196)
!3604 = !DILocation(line: 872, column: 29, scope: !3594)
!3605 = !DILocation(line: 874, column: 13, scope: !3606)
!3606 = distinct !DILexicalBlock(scope: !3594, file: !3, line: 874, column: 3)
!3607 = !DILocation(line: 874, column: 8, scope: !3606)
!3608 = !DILocation(line: 874, column: 24, scope: !3609)
!3609 = distinct !DILexicalBlock(scope: !3606, file: !3, line: 874, column: 3)
!3610 = !DILocation(line: 874, column: 23, scope: !3609)
!3611 = !DILocation(line: 874, column: 3, scope: !3606)
!3612 = !DILocation(line: 876, column: 14, scope: !3613)
!3613 = distinct !DILexicalBlock(scope: !3609, file: !3, line: 875, column: 5)
!3614 = !DILocation(line: 876, column: 13, scope: !3613)
!3615 = !DILocation(line: 876, column: 11, scope: !3613)
!3616 = !DILocation(line: 877, column: 33, scope: !3617)
!3617 = distinct !DILexicalBlock(scope: !3613, file: !3, line: 877, column: 11)
!3618 = !DILocation(line: 877, column: 39, scope: !3617)
!3619 = !DILocation(line: 877, column: 11, scope: !3617)
!3620 = !DILocation(line: 877, column: 11, scope: !3613)
!3621 = !DILocation(line: 878, column: 10, scope: !3617)
!3622 = !DILocation(line: 878, column: 15, scope: !3617)
!3623 = !DILocation(line: 878, column: 7, scope: !3617)
!3624 = !DILocation(line: 878, column: 2, scope: !3617)
!3625 = !DILocalVariable(name: "ref", scope: !3626, file: !3, line: 881, type: !2010)
!3626 = distinct !DILexicalBlock(scope: !3617, file: !3, line: 880, column: 2)
!3627 = !DILocation(line: 881, column: 9, scope: !3626)
!3628 = !DILocalVariable(name: "i", scope: !3626, file: !3, line: 882, type: !7)
!3629 = !DILocation(line: 882, column: 13, scope: !3626)
!3630 = !DILocation(line: 884, column: 12, scope: !3626)
!3631 = !DILocation(line: 884, column: 17, scope: !3626)
!3632 = !DILocation(line: 884, column: 5, scope: !3626)
!3633 = !DILocation(line: 884, column: 10, scope: !3626)
!3634 = !DILocation(line: 885, column: 11, scope: !3635)
!3635 = distinct !DILexicalBlock(scope: !3626, file: !3, line: 885, column: 4)
!3636 = !DILocation(line: 885, column: 9, scope: !3635)
!3637 = !DILocation(line: 885, column: 16, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3635, file: !3, line: 885, column: 4)
!3639 = !DILocation(line: 885, column: 4, scope: !3635)
!3640 = !DILocation(line: 886, column: 12, scope: !3638)
!3641 = !DILocation(line: 886, column: 6, scope: !3638)
!3642 = !DILocation(line: 885, column: 56, scope: !3638)
!3643 = !DILocation(line: 885, column: 4, scope: !3638)
!3644 = distinct !{!3644, !3639, !3645}
!3645 = !DILocation(line: 886, column: 15, scope: !3635)
!3646 = !DILocation(line: 887, column: 23, scope: !3626)
!3647 = !DILocation(line: 887, column: 4, scope: !3626)
!3648 = !DILocation(line: 874, column: 3, scope: !3609)
!3649 = distinct !{!3649, !3611, !3650}
!3650 = !DILocation(line: 889, column: 5, scope: !3606)
!3651 = !DILocation(line: 891, column: 10, scope: !3594)
!3652 = !DILocation(line: 891, column: 3, scope: !3594)
!3653 = distinct !DISubprogram(name: "determine_roots", scope: !3, file: !3, line: 1237, type: !3654, scopeLine: 1239, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3654 = !DISubroutineType(types: !3655)
!3655 = !{null, !1197, !2196, !3656}
!3656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2202, size: 64)
!3657 = !DILocalVariable(name: "loop", arg: 1, scope: !3653, file: !3, line: 1237, type: !1197)
!3658 = !DILocation(line: 1237, column: 31, scope: !3653)
!3659 = !DILocalVariable(name: "comps", arg: 2, scope: !3653, file: !3, line: 1238, type: !2196)
!3660 = !DILocation(line: 1238, column: 22, scope: !3653)
!3661 = !DILocalVariable(name: "chains", arg: 3, scope: !3653, file: !3, line: 1238, type: !3656)
!3662 = !DILocation(line: 1238, column: 51, scope: !3653)
!3663 = !DILocalVariable(name: "comp", scope: !3653, file: !3, line: 1240, type: !2196)
!3664 = !DILocation(line: 1240, column: 21, scope: !3653)
!3665 = !DILocation(line: 1242, column: 15, scope: !3666)
!3666 = distinct !DILexicalBlock(scope: !3653, file: !3, line: 1242, column: 3)
!3667 = !DILocation(line: 1242, column: 13, scope: !3666)
!3668 = !DILocation(line: 1242, column: 8, scope: !3666)
!3669 = !DILocation(line: 1242, column: 22, scope: !3670)
!3670 = distinct !DILexicalBlock(scope: !3666, file: !3, line: 1242, column: 3)
!3671 = !DILocation(line: 1242, column: 3, scope: !3666)
!3672 = !DILocation(line: 1243, column: 27, scope: !3670)
!3673 = !DILocation(line: 1243, column: 33, scope: !3670)
!3674 = !DILocation(line: 1243, column: 39, scope: !3670)
!3675 = !DILocation(line: 1243, column: 5, scope: !3670)
!3676 = !DILocation(line: 1242, column: 35, scope: !3670)
!3677 = !DILocation(line: 1242, column: 41, scope: !3670)
!3678 = !DILocation(line: 1242, column: 33, scope: !3670)
!3679 = !DILocation(line: 1242, column: 3, scope: !3670)
!3680 = distinct !{!3680, !3671, !3681}
!3681 = !DILocation(line: 1243, column: 45, scope: !3666)
!3682 = !DILocation(line: 1244, column: 1, scope: !3653)
!3683 = distinct !DISubprogram(name: "release_components", scope: !3, file: !3, line: 535, type: !3684, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3684 = !DISubroutineType(types: !3685)
!3685 = !{null, !2196}
!3686 = !DILocalVariable(name: "comps", arg: 1, scope: !3683, file: !3, line: 535, type: !2196)
!3687 = !DILocation(line: 535, column: 39, scope: !3683)
!3688 = !DILocalVariable(name: "act", scope: !3683, file: !3, line: 537, type: !2196)
!3689 = !DILocation(line: 537, column: 21, scope: !3683)
!3690 = !DILocalVariable(name: "next", scope: !3683, file: !3, line: 537, type: !2196)
!3691 = !DILocation(line: 537, column: 27, scope: !3683)
!3692 = !DILocation(line: 539, column: 14, scope: !3693)
!3693 = distinct !DILexicalBlock(scope: !3683, file: !3, line: 539, column: 3)
!3694 = !DILocation(line: 539, column: 12, scope: !3693)
!3695 = !DILocation(line: 539, column: 8, scope: !3693)
!3696 = !DILocation(line: 539, column: 21, scope: !3697)
!3697 = distinct !DILexicalBlock(scope: !3693, file: !3, line: 539, column: 3)
!3698 = !DILocation(line: 539, column: 3, scope: !3693)
!3699 = !DILocation(line: 541, column: 14, scope: !3700)
!3700 = distinct !DILexicalBlock(scope: !3697, file: !3, line: 540, column: 5)
!3701 = !DILocation(line: 541, column: 19, scope: !3700)
!3702 = !DILocation(line: 541, column: 12, scope: !3700)
!3703 = !DILocation(line: 542, column: 26, scope: !3700)
!3704 = !DILocation(line: 542, column: 7, scope: !3700)
!3705 = !DILocation(line: 543, column: 5, scope: !3700)
!3706 = !DILocation(line: 539, column: 32, scope: !3697)
!3707 = !DILocation(line: 539, column: 30, scope: !3697)
!3708 = !DILocation(line: 539, column: 3, scope: !3697)
!3709 = distinct !{!3709, !3698, !3710}
!3710 = !DILocation(line: 543, column: 5, scope: !3693)
!3711 = !DILocation(line: 544, column: 1, scope: !3683)
!3712 = distinct !DISubprogram(name: "prepare_initializers", scope: !3, file: !3, line: 2437, type: !3713, scopeLine: 2438, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3713 = !DISubroutineType(types: !3714)
!3714 = !{null, !1197, !2202}
!3715 = !DILocalVariable(name: "loop", arg: 1, scope: !3712, file: !3, line: 2437, type: !1197)
!3716 = !DILocation(line: 2437, column: 36, scope: !3712)
!3717 = !DILocalVariable(name: "chains", arg: 2, scope: !3712, file: !3, line: 2437, type: !2202)
!3718 = !DILocation(line: 2437, column: 63, scope: !3712)
!3719 = !DILocalVariable(name: "chain", scope: !3712, file: !3, line: 2439, type: !2080)
!3720 = !DILocation(line: 2439, column: 11, scope: !3712)
!3721 = !DILocalVariable(name: "i", scope: !3712, file: !3, line: 2440, type: !7)
!3722 = !DILocation(line: 2440, column: 12, scope: !3712)
!3723 = !DILocation(line: 2442, column: 10, scope: !3724)
!3724 = distinct !DILexicalBlock(scope: !3712, file: !3, line: 2442, column: 3)
!3725 = !DILocation(line: 2442, column: 8, scope: !3724)
!3726 = !DILocation(line: 2442, column: 15, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3724, file: !3, line: 2442, column: 3)
!3728 = !DILocation(line: 2442, column: 19, scope: !3727)
!3729 = !DILocation(line: 2442, column: 17, scope: !3727)
!3730 = !DILocation(line: 2442, column: 3, scope: !3724)
!3731 = !DILocation(line: 2444, column: 15, scope: !3732)
!3732 = distinct !DILexicalBlock(scope: !3727, file: !3, line: 2443, column: 5)
!3733 = !DILocation(line: 2444, column: 13, scope: !3732)
!3734 = !DILocation(line: 2445, column: 39, scope: !3735)
!3735 = distinct !DILexicalBlock(scope: !3732, file: !3, line: 2445, column: 11)
!3736 = !DILocation(line: 2445, column: 45, scope: !3735)
!3737 = !DILocation(line: 2445, column: 11, scope: !3735)
!3738 = !DILocation(line: 2445, column: 11, scope: !3732)
!3739 = !DILocation(line: 2446, column: 3, scope: !3735)
!3740 = !DILocation(line: 2446, column: 2, scope: !3735)
!3741 = !DILocation(line: 2449, column: 19, scope: !3742)
!3742 = distinct !DILexicalBlock(scope: !3735, file: !3, line: 2448, column: 2)
!3743 = !DILocation(line: 2449, column: 4, scope: !3742)
!3744 = !DILocation(line: 2450, column: 4, scope: !3742)
!3745 = !DILocation(line: 2442, column: 3, scope: !3727)
!3746 = distinct !{!3746, !3730, !3747}
!3747 = !DILocation(line: 2452, column: 5, scope: !3724)
!3748 = !DILocation(line: 2453, column: 1, scope: !3712)
!3749 = distinct !DISubprogram(name: "try_combine_chains", scope: !3, file: !3, line: 2348, type: !3750, scopeLine: 2349, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3750 = !DISubroutineType(types: !3751)
!3751 = !{null, !3656}
!3752 = !DILocalVariable(name: "chains", arg: 1, scope: !3749, file: !3, line: 2348, type: !3656)
!3753 = !DILocation(line: 2348, column: 43, scope: !3749)
!3754 = !DILocalVariable(name: "i", scope: !3749, file: !3, line: 2350, type: !7)
!3755 = !DILocation(line: 2350, column: 12, scope: !3749)
!3756 = !DILocalVariable(name: "j", scope: !3749, file: !3, line: 2350, type: !7)
!3757 = !DILocation(line: 2350, column: 15, scope: !3749)
!3758 = !DILocalVariable(name: "ch1", scope: !3749, file: !3, line: 2351, type: !2080)
!3759 = !DILocation(line: 2351, column: 11, scope: !3749)
!3760 = !DILocalVariable(name: "ch2", scope: !3749, file: !3, line: 2351, type: !2080)
!3761 = !DILocation(line: 2351, column: 16, scope: !3749)
!3762 = !DILocalVariable(name: "cch", scope: !3749, file: !3, line: 2351, type: !2080)
!3763 = !DILocation(line: 2351, column: 21, scope: !3749)
!3764 = !DILocalVariable(name: "worklist", scope: !3749, file: !3, line: 2352, type: !2202)
!3765 = !DILocation(line: 2352, column: 24, scope: !3749)
!3766 = !DILocation(line: 2354, column: 10, scope: !3767)
!3767 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 2354, column: 3)
!3768 = !DILocation(line: 2354, column: 8, scope: !3767)
!3769 = !DILocation(line: 2354, column: 15, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3767, file: !3, line: 2354, column: 3)
!3771 = !DILocation(line: 2354, column: 3, scope: !3767)
!3772 = !DILocation(line: 2355, column: 34, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 2355, column: 9)
!3774 = !DILocation(line: 2355, column: 9, scope: !3773)
!3775 = !DILocation(line: 2355, column: 9, scope: !3770)
!3776 = !DILocation(line: 2356, column: 7, scope: !3773)
!3777 = !DILocation(line: 2355, column: 37, scope: !3773)
!3778 = !DILocation(line: 2354, column: 56, scope: !3770)
!3779 = !DILocation(line: 2354, column: 3, scope: !3770)
!3780 = distinct !{!3780, !3771, !3781}
!3781 = !DILocation(line: 2356, column: 7, scope: !3767)
!3782 = !DILocation(line: 2358, column: 3, scope: !3749)
!3783 = !DILocation(line: 2358, column: 11, scope: !3749)
!3784 = !DILocation(line: 2358, column: 10, scope: !3749)
!3785 = !DILocation(line: 2360, column: 13, scope: !3786)
!3786 = distinct !DILexicalBlock(scope: !3749, file: !3, line: 2359, column: 5)
!3787 = !DILocation(line: 2360, column: 11, scope: !3786)
!3788 = !DILocation(line: 2361, column: 37, scope: !3789)
!3789 = distinct !DILexicalBlock(scope: !3786, file: !3, line: 2361, column: 11)
!3790 = !DILocation(line: 2361, column: 12, scope: !3789)
!3791 = !DILocation(line: 2361, column: 11, scope: !3786)
!3792 = !DILocation(line: 2362, column: 2, scope: !3789)
!3793 = distinct !{!3793, !3782, !3794}
!3794 = !DILocation(line: 2377, column: 5, scope: !3749)
!3795 = !DILocation(line: 2364, column: 14, scope: !3796)
!3796 = distinct !DILexicalBlock(scope: !3786, file: !3, line: 2364, column: 7)
!3797 = !DILocation(line: 2364, column: 12, scope: !3796)
!3798 = !DILocation(line: 2364, column: 19, scope: !3799)
!3799 = distinct !DILexicalBlock(scope: !3796, file: !3, line: 2364, column: 7)
!3800 = !DILocation(line: 2364, column: 7, scope: !3796)
!3801 = !DILocation(line: 2366, column: 34, scope: !3802)
!3802 = distinct !DILexicalBlock(scope: !3803, file: !3, line: 2366, column: 8)
!3803 = distinct !DILexicalBlock(scope: !3799, file: !3, line: 2365, column: 2)
!3804 = !DILocation(line: 2366, column: 9, scope: !3802)
!3805 = !DILocation(line: 2366, column: 8, scope: !3803)
!3806 = !DILocation(line: 2367, column: 6, scope: !3802)
!3807 = !DILocation(line: 2369, column: 26, scope: !3803)
!3808 = !DILocation(line: 2369, column: 31, scope: !3803)
!3809 = !DILocation(line: 2369, column: 10, scope: !3803)
!3810 = !DILocation(line: 2369, column: 8, scope: !3803)
!3811 = !DILocation(line: 2370, column: 8, scope: !3812)
!3812 = distinct !DILexicalBlock(scope: !3803, file: !3, line: 2370, column: 8)
!3813 = !DILocation(line: 2370, column: 8, scope: !3803)
!3814 = !DILocation(line: 2372, column: 8, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3812, file: !3, line: 2371, column: 6)
!3816 = !DILocation(line: 2373, column: 8, scope: !3815)
!3817 = !DILocation(line: 2374, column: 8, scope: !3815)
!3818 = !DILocation(line: 2376, column: 2, scope: !3803)
!3819 = !DILocation(line: 2364, column: 60, scope: !3799)
!3820 = !DILocation(line: 2364, column: 7, scope: !3799)
!3821 = distinct !{!3821, !3800, !3822}
!3822 = !DILocation(line: 2376, column: 2, scope: !3796)
!3823 = !DILocation(line: 2378, column: 1, scope: !3749)
!3824 = distinct !DISubprogram(name: "determine_unroll_factor", scope: !3, file: !3, line: 1781, type: !3825, scopeLine: 1782, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3825 = !DISubroutineType(types: !3826)
!3826 = !{!7, !2202}
!3827 = !DILocalVariable(name: "chains", arg: 1, scope: !3824, file: !3, line: 1781, type: !2202)
!3828 = !DILocation(line: 1781, column: 47, scope: !3824)
!3829 = !DILocalVariable(name: "chain", scope: !3824, file: !3, line: 1783, type: !2080)
!3830 = !DILocation(line: 1783, column: 11, scope: !3824)
!3831 = !DILocalVariable(name: "factor", scope: !3824, file: !3, line: 1784, type: !7)
!3832 = !DILocation(line: 1784, column: 12, scope: !3824)
!3833 = !DILocalVariable(name: "af", scope: !3824, file: !3, line: 1784, type: !7)
!3834 = !DILocation(line: 1784, column: 24, scope: !3824)
!3835 = !DILocalVariable(name: "nfactor", scope: !3824, file: !3, line: 1784, type: !7)
!3836 = !DILocation(line: 1784, column: 28, scope: !3824)
!3837 = !DILocalVariable(name: "i", scope: !3824, file: !3, line: 1784, type: !7)
!3838 = !DILocation(line: 1784, column: 37, scope: !3824)
!3839 = !DILocalVariable(name: "max", scope: !3824, file: !3, line: 1785, type: !7)
!3840 = !DILocation(line: 1785, column: 12, scope: !3824)
!3841 = !DILocation(line: 1785, column: 18, scope: !3824)
!3842 = !DILocation(line: 1787, column: 10, scope: !3843)
!3843 = distinct !DILexicalBlock(scope: !3824, file: !3, line: 1787, column: 3)
!3844 = !DILocation(line: 1787, column: 8, scope: !3843)
!3845 = !DILocation(line: 1787, column: 15, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3843, file: !3, line: 1787, column: 3)
!3847 = !DILocation(line: 1787, column: 3, scope: !3843)
!3848 = !DILocation(line: 1789, column: 11, scope: !3849)
!3849 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 1789, column: 11)
!3850 = distinct !DILexicalBlock(scope: !3846, file: !3, line: 1788, column: 5)
!3851 = !DILocation(line: 1789, column: 18, scope: !3849)
!3852 = !DILocation(line: 1789, column: 23, scope: !3849)
!3853 = !DILocation(line: 1789, column: 39, scope: !3849)
!3854 = !DILocation(line: 1789, column: 42, scope: !3849)
!3855 = !DILocation(line: 1789, column: 49, scope: !3849)
!3856 = !DILocation(line: 1789, column: 11, scope: !3850)
!3857 = !DILocation(line: 1790, column: 2, scope: !3849)
!3858 = !DILocation(line: 1794, column: 12, scope: !3850)
!3859 = !DILocation(line: 1794, column: 19, scope: !3850)
!3860 = !DILocation(line: 1794, column: 10, scope: !3850)
!3861 = !DILocation(line: 1795, column: 11, scope: !3862)
!3862 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 1795, column: 11)
!3863 = !DILocation(line: 1795, column: 18, scope: !3862)
!3864 = !DILocation(line: 1795, column: 11, scope: !3850)
!3865 = !DILocation(line: 1796, column: 4, scope: !3862)
!3866 = !DILocation(line: 1796, column: 2, scope: !3862)
!3867 = !DILocation(line: 1798, column: 17, scope: !3850)
!3868 = !DILocation(line: 1798, column: 26, scope: !3850)
!3869 = !DILocation(line: 1798, column: 24, scope: !3850)
!3870 = !DILocation(line: 1798, column: 36, scope: !3850)
!3871 = !DILocation(line: 1798, column: 44, scope: !3850)
!3872 = !DILocation(line: 1798, column: 31, scope: !3850)
!3873 = !DILocation(line: 1798, column: 29, scope: !3850)
!3874 = !DILocation(line: 1798, column: 15, scope: !3850)
!3875 = !DILocation(line: 1799, column: 11, scope: !3876)
!3876 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 1799, column: 11)
!3877 = !DILocation(line: 1799, column: 22, scope: !3876)
!3878 = !DILocation(line: 1799, column: 19, scope: !3876)
!3879 = !DILocation(line: 1799, column: 11, scope: !3850)
!3880 = !DILocation(line: 1800, column: 11, scope: !3876)
!3881 = !DILocation(line: 1800, column: 9, scope: !3876)
!3882 = !DILocation(line: 1800, column: 2, scope: !3876)
!3883 = !DILocation(line: 1801, column: 5, scope: !3850)
!3884 = !DILocation(line: 1787, column: 57, scope: !3846)
!3885 = !DILocation(line: 1787, column: 3, scope: !3846)
!3886 = distinct !{!3886, !3847, !3887}
!3887 = !DILocation(line: 1801, column: 5, scope: !3843)
!3888 = !DILocation(line: 1803, column: 10, scope: !3824)
!3889 = !DILocation(line: 1803, column: 3, scope: !3824)
!3890 = distinct !DISubprogram(name: "replace_phis_by_defined_names", scope: !3, file: !3, line: 1831, type: !3891, scopeLine: 1832, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3891 = !DISubroutineType(types: !3892)
!3892 = !{null, !2202}
!3893 = !DILocalVariable(name: "chains", arg: 1, scope: !3890, file: !3, line: 1831, type: !2202)
!3894 = !DILocation(line: 1831, column: 53, scope: !3890)
!3895 = !DILocalVariable(name: "chain", scope: !3890, file: !3, line: 1833, type: !2080)
!3896 = !DILocation(line: 1833, column: 11, scope: !3890)
!3897 = !DILocalVariable(name: "a", scope: !3890, file: !3, line: 1834, type: !2010)
!3898 = !DILocation(line: 1834, column: 8, scope: !3890)
!3899 = !DILocalVariable(name: "i", scope: !3890, file: !3, line: 1835, type: !7)
!3900 = !DILocation(line: 1835, column: 12, scope: !3890)
!3901 = !DILocalVariable(name: "j", scope: !3890, file: !3, line: 1835, type: !7)
!3902 = !DILocation(line: 1835, column: 15, scope: !3890)
!3903 = !DILocation(line: 1837, column: 10, scope: !3904)
!3904 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 1837, column: 3)
!3905 = !DILocation(line: 1837, column: 8, scope: !3904)
!3906 = !DILocation(line: 1837, column: 15, scope: !3907)
!3907 = distinct !DILexicalBlock(scope: !3904, file: !3, line: 1837, column: 3)
!3908 = !DILocation(line: 1837, column: 3, scope: !3904)
!3909 = !DILocation(line: 1838, column: 12, scope: !3910)
!3910 = distinct !DILexicalBlock(scope: !3907, file: !3, line: 1838, column: 5)
!3911 = !DILocation(line: 1838, column: 10, scope: !3910)
!3912 = !DILocation(line: 1838, column: 17, scope: !3913)
!3913 = distinct !DILexicalBlock(scope: !3910, file: !3, line: 1838, column: 5)
!3914 = !DILocation(line: 1838, column: 5, scope: !3910)
!3915 = !DILocation(line: 1840, column: 19, scope: !3916)
!3916 = distinct !DILexicalBlock(scope: !3917, file: !3, line: 1840, column: 6)
!3917 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 1839, column: 7)
!3918 = !DILocation(line: 1840, column: 22, scope: !3916)
!3919 = !DILocation(line: 1840, column: 6, scope: !3916)
!3920 = !DILocation(line: 1840, column: 28, scope: !3916)
!3921 = !DILocation(line: 1840, column: 6, scope: !3917)
!3922 = !DILocation(line: 1842, column: 31, scope: !3923)
!3923 = distinct !DILexicalBlock(scope: !3916, file: !3, line: 1841, column: 4)
!3924 = !DILocation(line: 1842, column: 6, scope: !3923)
!3925 = !DILocation(line: 1842, column: 9, scope: !3923)
!3926 = !DILocation(line: 1842, column: 29, scope: !3923)
!3927 = !DILocation(line: 1843, column: 6, scope: !3923)
!3928 = !DILocation(line: 1843, column: 9, scope: !3923)
!3929 = !DILocation(line: 1843, column: 14, scope: !3923)
!3930 = !DILocation(line: 1844, column: 4, scope: !3923)
!3931 = !DILocation(line: 1845, column: 7, scope: !3917)
!3932 = !DILocation(line: 1838, column: 57, scope: !3913)
!3933 = !DILocation(line: 1838, column: 5, scope: !3913)
!3934 = distinct !{!3934, !3914, !3935}
!3935 = !DILocation(line: 1845, column: 7, scope: !3910)
!3936 = !DILocation(line: 1837, column: 57, scope: !3907)
!3937 = !DILocation(line: 1837, column: 3, scope: !3907)
!3938 = distinct !{!3938, !3908, !3939}
!3939 = !DILocation(line: 1845, column: 7, scope: !3904)
!3940 = !DILocation(line: 1846, column: 1, scope: !3890)
!3941 = distinct !DISubprogram(name: "execute_pred_commoning_cbck", scope: !3, file: !3, line: 1878, type: !3942, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3942 = !DISubroutineType(types: !3943)
!3943 = !{null, !1197, !651}
!3944 = !DILocalVariable(name: "loop", arg: 1, scope: !3941, file: !3, line: 1878, type: !1197)
!3945 = !DILocation(line: 1878, column: 43, scope: !3941)
!3946 = !DILocalVariable(name: "data", arg: 2, scope: !3941, file: !3, line: 1878, type: !651)
!3947 = !DILocation(line: 1878, column: 55, scope: !3941)
!3948 = !DILocalVariable(name: "dta", scope: !3941, file: !3, line: 1880, type: !3949)
!3949 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2221)
!3950 = !DILocation(line: 1880, column: 27, scope: !3941)
!3951 = !DILocation(line: 1880, column: 54, scope: !3941)
!3952 = !DILocation(line: 1880, column: 33, scope: !3941)
!3953 = !DILocation(line: 1885, column: 26, scope: !3941)
!3954 = !DILocation(line: 1885, column: 31, scope: !3941)
!3955 = !DILocation(line: 1885, column: 3, scope: !3941)
!3956 = !DILocation(line: 1886, column: 27, scope: !3941)
!3957 = !DILocation(line: 1886, column: 33, scope: !3941)
!3958 = !DILocation(line: 1886, column: 38, scope: !3941)
!3959 = !DILocation(line: 1886, column: 46, scope: !3941)
!3960 = !DILocation(line: 1886, column: 51, scope: !3941)
!3961 = !DILocation(line: 1886, column: 3, scope: !3941)
!3962 = !DILocation(line: 1887, column: 1, scope: !3941)
!3963 = distinct !DISubprogram(name: "eliminate_temp_copies", scope: !3, file: !3, line: 1927, type: !3964, scopeLine: 1928, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!3964 = !DISubroutineType(types: !3965)
!3965 = !{null, !1197, !1552}
!3966 = !DILocalVariable(name: "loop", arg: 1, scope: !3963, file: !3, line: 1927, type: !1197)
!3967 = !DILocation(line: 1927, column: 37, scope: !3963)
!3968 = !DILocalVariable(name: "tmp_vars", arg: 2, scope: !3963, file: !3, line: 1927, type: !1552)
!3969 = !DILocation(line: 1927, column: 50, scope: !3963)
!3970 = !DILocalVariable(name: "e", scope: !3963, file: !3, line: 1929, type: !962)
!3971 = !DILocation(line: 1929, column: 8, scope: !3963)
!3972 = !DILocalVariable(name: "phi", scope: !3963, file: !3, line: 1930, type: !982)
!3973 = !DILocation(line: 1930, column: 10, scope: !3963)
!3974 = !DILocalVariable(name: "stmt", scope: !3963, file: !3, line: 1930, type: !982)
!3975 = !DILocation(line: 1930, column: 15, scope: !3963)
!3976 = !DILocalVariable(name: "name", scope: !3963, file: !3, line: 1931, type: !652)
!3977 = !DILocation(line: 1931, column: 8, scope: !3963)
!3978 = !DILocalVariable(name: "use", scope: !3963, file: !3, line: 1931, type: !652)
!3979 = !DILocation(line: 1931, column: 14, scope: !3963)
!3980 = !DILocalVariable(name: "var", scope: !3963, file: !3, line: 1931, type: !652)
!3981 = !DILocation(line: 1931, column: 19, scope: !3963)
!3982 = !DILocalVariable(name: "psi", scope: !3963, file: !3, line: 1932, type: !3983)
!3983 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !391, line: 265, baseType: !3984)
!3984 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !391, line: 254, size: 192, elements: !3985)
!3985 = !{!3986, !3987, !3988}
!3986 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3984, file: !391, line: 257, baseType: !977, size: 64)
!3987 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3984, file: !391, line: 263, baseType: !972, size: 64, offset: 64)
!3988 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3984, file: !391, line: 264, baseType: !1434, size: 64, offset: 128)
!3989 = !DILocation(line: 1932, column: 24, scope: !3963)
!3990 = !DILocation(line: 1934, column: 24, scope: !3963)
!3991 = !DILocation(line: 1934, column: 7, scope: !3963)
!3992 = !DILocation(line: 1934, column: 5, scope: !3963)
!3993 = !DILocation(line: 1935, column: 30, scope: !3994)
!3994 = distinct !DILexicalBlock(scope: !3963, file: !3, line: 1935, column: 3)
!3995 = !DILocation(line: 1935, column: 36, scope: !3994)
!3996 = !DILocation(line: 1935, column: 14, scope: !3994)
!3997 = !DILocation(line: 1935, column: 8, scope: !3994)
!3998 = !DILocation(line: 1935, column: 46, scope: !3999)
!3999 = distinct !DILexicalBlock(scope: !3994, file: !3, line: 1935, column: 3)
!4000 = !DILocation(line: 1935, column: 45, scope: !3999)
!4001 = !DILocation(line: 1935, column: 3, scope: !3994)
!4002 = !DILocation(line: 1937, column: 13, scope: !4003)
!4003 = distinct !DILexicalBlock(scope: !3999, file: !3, line: 1936, column: 5)
!4004 = !DILocation(line: 1937, column: 11, scope: !4003)
!4005 = !DILocation(line: 1938, column: 14, scope: !4003)
!4006 = !DILocation(line: 1938, column: 12, scope: !4003)
!4007 = !DILocation(line: 1939, column: 13, scope: !4003)
!4008 = !DILocation(line: 1939, column: 11, scope: !4003)
!4009 = !DILocation(line: 1940, column: 26, scope: !4010)
!4010 = distinct !DILexicalBlock(scope: !4003, file: !3, line: 1940, column: 11)
!4011 = !DILocation(line: 1940, column: 36, scope: !4010)
!4012 = !DILocation(line: 1940, column: 12, scope: !4010)
!4013 = !DILocation(line: 1940, column: 11, scope: !4003)
!4014 = !DILocation(line: 1941, column: 2, scope: !4010)
!4015 = !DILocation(line: 1942, column: 13, scope: !4003)
!4016 = !DILocation(line: 1942, column: 11, scope: !4003)
!4017 = !DILocation(line: 1943, column: 7, scope: !4003)
!4018 = !DILocation(line: 1946, column: 14, scope: !4003)
!4019 = !DILocation(line: 1946, column: 12, scope: !4003)
!4020 = !DILocation(line: 1947, column: 7, scope: !4003)
!4021 = !DILocation(line: 1947, column: 27, scope: !4003)
!4022 = !DILocation(line: 1947, column: 14, scope: !4003)
!4023 = !DILocation(line: 1947, column: 33, scope: !4003)
!4024 = !DILocation(line: 1953, column: 7, scope: !4003)
!4025 = !DILocation(line: 1953, column: 21, scope: !4003)
!4026 = !DILocation(line: 1953, column: 10, scope: !4003)
!4027 = !DILocation(line: 1953, column: 30, scope: !4003)
!4028 = !DILocation(line: 1953, column: 36, scope: !4003)
!4029 = !DILocation(line: 1953, column: 27, scope: !4003)
!4030 = !DILocation(line: 0, scope: !4003)
!4031 = !DILocation(line: 1955, column: 4, scope: !4032)
!4032 = distinct !DILexicalBlock(scope: !4003, file: !3, line: 1954, column: 2)
!4033 = !DILocation(line: 1956, column: 10, scope: !4032)
!4034 = !DILocation(line: 1956, column: 8, scope: !4032)
!4035 = !DILocation(line: 1957, column: 11, scope: !4032)
!4036 = !DILocation(line: 1957, column: 9, scope: !4032)
!4037 = distinct !{!4037, !4020, !4038}
!4038 = !DILocation(line: 1958, column: 2, scope: !4003)
!4039 = !DILocation(line: 1960, column: 31, scope: !4003)
!4040 = !DILocation(line: 1960, column: 37, scope: !4003)
!4041 = !DILocation(line: 1960, column: 42, scope: !4003)
!4042 = !DILocation(line: 1960, column: 7, scope: !4003)
!4043 = !DILocation(line: 1961, column: 5, scope: !4003)
!4044 = !DILocation(line: 1935, column: 63, scope: !3999)
!4045 = !DILocation(line: 1935, column: 3, scope: !3999)
!4046 = distinct !{!4046, !4001, !4047}
!4047 = !DILocation(line: 1961, column: 5, scope: !3994)
!4048 = !DILocation(line: 1962, column: 1, scope: !3963)
!4049 = distinct !DISubprogram(name: "execute_pred_commoning", scope: !3, file: !3, line: 1810, type: !4050, scopeLine: 1812, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4050 = !DISubroutineType(types: !4051)
!4051 = !{null, !1197, !2202, !1552}
!4052 = !DILocalVariable(name: "loop", arg: 1, scope: !4049, file: !3, line: 1810, type: !1197)
!4053 = !DILocation(line: 1810, column: 38, scope: !4049)
!4054 = !DILocalVariable(name: "chains", arg: 2, scope: !4049, file: !3, line: 1810, type: !2202)
!4055 = !DILocation(line: 1810, column: 65, scope: !4049)
!4056 = !DILocalVariable(name: "tmp_vars", arg: 3, scope: !4049, file: !3, line: 1811, type: !1552)
!4057 = !DILocation(line: 1811, column: 11, scope: !4049)
!4058 = !DILocalVariable(name: "chain", scope: !4049, file: !3, line: 1813, type: !2080)
!4059 = !DILocation(line: 1813, column: 11, scope: !4049)
!4060 = !DILocalVariable(name: "i", scope: !4049, file: !3, line: 1814, type: !7)
!4061 = !DILocation(line: 1814, column: 12, scope: !4049)
!4062 = !DILocation(line: 1816, column: 10, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !4049, file: !3, line: 1816, column: 3)
!4064 = !DILocation(line: 1816, column: 8, scope: !4063)
!4065 = !DILocation(line: 1816, column: 15, scope: !4066)
!4066 = distinct !DILexicalBlock(scope: !4063, file: !3, line: 1816, column: 3)
!4067 = !DILocation(line: 1816, column: 3, scope: !4063)
!4068 = !DILocation(line: 1818, column: 11, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4070, file: !3, line: 1818, column: 11)
!4070 = distinct !DILexicalBlock(scope: !4066, file: !3, line: 1817, column: 5)
!4071 = !DILocation(line: 1818, column: 18, scope: !4069)
!4072 = !DILocation(line: 1818, column: 23, scope: !4069)
!4073 = !DILocation(line: 1818, column: 11, scope: !4070)
!4074 = !DILocation(line: 1819, column: 23, scope: !4069)
!4075 = !DILocation(line: 1819, column: 29, scope: !4069)
!4076 = !DILocation(line: 1819, column: 36, scope: !4069)
!4077 = !DILocation(line: 1819, column: 2, scope: !4069)
!4078 = !DILocation(line: 1821, column: 32, scope: !4069)
!4079 = !DILocation(line: 1821, column: 38, scope: !4069)
!4080 = !DILocation(line: 1821, column: 45, scope: !4069)
!4081 = !DILocation(line: 1821, column: 2, scope: !4069)
!4082 = !DILocation(line: 1822, column: 5, scope: !4070)
!4083 = !DILocation(line: 1816, column: 57, scope: !4066)
!4084 = !DILocation(line: 1816, column: 3, scope: !4066)
!4085 = distinct !{!4085, !4067, !4086}
!4086 = !DILocation(line: 1822, column: 5, scope: !4063)
!4087 = !DILocation(line: 1824, column: 3, scope: !4049)
!4088 = !DILocation(line: 1825, column: 1, scope: !4049)
!4089 = distinct !DISubprogram(name: "release_chains", scope: !3, file: !3, line: 513, type: !3891, scopeLine: 514, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4090 = !DILocalVariable(name: "chains", arg: 1, scope: !4089, file: !3, line: 513, type: !2202)
!4091 = !DILocation(line: 513, column: 38, scope: !4089)
!4092 = !DILocalVariable(name: "i", scope: !4089, file: !3, line: 515, type: !7)
!4093 = !DILocation(line: 515, column: 12, scope: !4089)
!4094 = !DILocalVariable(name: "chain", scope: !4089, file: !3, line: 516, type: !2080)
!4095 = !DILocation(line: 516, column: 11, scope: !4089)
!4096 = !DILocation(line: 518, column: 10, scope: !4097)
!4097 = distinct !DILexicalBlock(scope: !4089, file: !3, line: 518, column: 3)
!4098 = !DILocation(line: 518, column: 8, scope: !4097)
!4099 = !DILocation(line: 518, column: 15, scope: !4100)
!4100 = distinct !DILexicalBlock(scope: !4097, file: !3, line: 518, column: 3)
!4101 = !DILocation(line: 518, column: 3, scope: !4097)
!4102 = !DILocation(line: 519, column: 20, scope: !4100)
!4103 = !DILocation(line: 519, column: 5, scope: !4100)
!4104 = !DILocation(line: 518, column: 57, scope: !4100)
!4105 = !DILocation(line: 518, column: 3, scope: !4100)
!4106 = distinct !{!4106, !4101, !4107}
!4107 = !DILocation(line: 519, column: 25, scope: !4097)
!4108 = !DILocation(line: 520, column: 3, scope: !4089)
!4109 = !DILocation(line: 521, column: 1, scope: !4089)
!4110 = distinct !DISubprogram(name: "VEC_data_reference_p_base_length", scope: !2017, file: !2017, line: 208, type: !4111, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4111 = !DISubroutineType(types: !4112)
!4112 = !{!7, !4113}
!4113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4114, size: 64)
!4114 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2126)
!4115 = !DILocalVariable(name: "vec_", arg: 1, scope: !4110, file: !2017, line: 208, type: !4113)
!4116 = !DILocation(line: 208, column: 1, scope: !4110)
!4117 = distinct !DISubprogram(name: "last_always_executed_block", scope: !3, file: !3, line: 677, type: !4118, scopeLine: 678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4118 = !DISubroutineType(types: !4119)
!4119 = !{!1434, !1197}
!4120 = !DILocalVariable(name: "loop", arg: 1, scope: !4117, file: !3, line: 677, type: !1197)
!4121 = !DILocation(line: 677, column: 42, scope: !4117)
!4122 = !DILocalVariable(name: "i", scope: !4117, file: !3, line: 679, type: !7)
!4123 = !DILocation(line: 679, column: 12, scope: !4117)
!4124 = !DILocalVariable(name: "exits", scope: !4117, file: !3, line: 680, type: !4125)
!4125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4126, size: 64)
!4126 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !135, line: 152, baseType: !4127)
!4127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !135, line: 152, size: 128, elements: !4128)
!4128 = !{!4129}
!4129 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4127, file: !135, line: 152, baseType: !955, size: 128)
!4130 = !DILocation(line: 680, column: 21, scope: !4117)
!4131 = !DILocation(line: 680, column: 50, scope: !4117)
!4132 = !DILocation(line: 680, column: 29, scope: !4117)
!4133 = !DILocalVariable(name: "ex", scope: !4117, file: !3, line: 681, type: !962)
!4134 = !DILocation(line: 681, column: 8, scope: !4117)
!4135 = !DILocalVariable(name: "last", scope: !4117, file: !3, line: 682, type: !1434)
!4136 = !DILocation(line: 682, column: 15, scope: !4117)
!4137 = !DILocation(line: 682, column: 22, scope: !4117)
!4138 = !DILocation(line: 682, column: 28, scope: !4117)
!4139 = !DILocation(line: 684, column: 10, scope: !4140)
!4140 = distinct !DILexicalBlock(scope: !4117, file: !3, line: 684, column: 3)
!4141 = !DILocation(line: 684, column: 8, scope: !4140)
!4142 = !DILocation(line: 684, column: 15, scope: !4143)
!4143 = distinct !DILexicalBlock(scope: !4140, file: !3, line: 684, column: 3)
!4144 = !DILocation(line: 684, column: 3, scope: !4140)
!4145 = !DILocation(line: 685, column: 54, scope: !4143)
!4146 = !DILocation(line: 685, column: 60, scope: !4143)
!4147 = !DILocation(line: 685, column: 64, scope: !4143)
!4148 = !DILocation(line: 685, column: 12, scope: !4143)
!4149 = !DILocation(line: 685, column: 10, scope: !4143)
!4150 = !DILocation(line: 685, column: 5, scope: !4143)
!4151 = !DILocation(line: 684, column: 50, scope: !4143)
!4152 = !DILocation(line: 684, column: 3, scope: !4143)
!4153 = distinct !{!4153, !4144, !4154}
!4154 = !DILocation(line: 685, column: 67, scope: !4140)
!4155 = !DILocation(line: 686, column: 3, scope: !4117)
!4156 = !DILocation(line: 688, column: 10, scope: !4117)
!4157 = !DILocation(line: 688, column: 3, scope: !4117)
!4158 = distinct !DISubprogram(name: "VEC_data_reference_p_base_iterate", scope: !2017, file: !2017, line: 208, type: !4159, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4159 = !DISubroutineType(types: !4160)
!4160 = !{!749, !4113, !7, !4161}
!4161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2133, size: 64)
!4162 = !DILocalVariable(name: "vec_", arg: 1, scope: !4158, file: !2017, line: 208, type: !4113)
!4163 = !DILocation(line: 208, column: 1, scope: !4158)
!4164 = !DILocalVariable(name: "ix_", arg: 2, scope: !4158, file: !2017, line: 208, type: !7)
!4165 = !DILocalVariable(name: "ptr", arg: 3, scope: !4158, file: !2017, line: 208, type: !4161)
!4166 = !DILocation(line: 208, column: 1, scope: !4167)
!4167 = distinct !DILexicalBlock(scope: !4158, file: !2017, line: 208, column: 1)
!4168 = !DILocation(line: 208, column: 1, scope: !4169)
!4169 = distinct !DILexicalBlock(scope: !4167, file: !2017, line: 208, column: 1)
!4170 = !DILocation(line: 208, column: 1, scope: !4171)
!4171 = distinct !DILexicalBlock(scope: !4167, file: !2017, line: 208, column: 1)
!4172 = distinct !DISubprogram(name: "suitable_reference_p", scope: !3, file: !3, line: 595, type: !4173, scopeLine: 596, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4173 = !DISubroutineType(types: !4174)
!4174 = !{!772, !2015, !4175}
!4175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !435, size: 64)
!4176 = !DILocalVariable(name: "a", arg: 1, scope: !4172, file: !3, line: 595, type: !2015)
!4177 = !DILocation(line: 595, column: 46, scope: !4172)
!4178 = !DILocalVariable(name: "ref_step", arg: 2, scope: !4172, file: !3, line: 595, type: !4175)
!4179 = !DILocation(line: 595, column: 69, scope: !4172)
!4180 = !DILocalVariable(name: "ref", scope: !4172, file: !3, line: 597, type: !652)
!4181 = !DILocation(line: 597, column: 8, scope: !4172)
!4182 = !DILocation(line: 597, column: 14, scope: !4172)
!4183 = !DILocalVariable(name: "step", scope: !4172, file: !3, line: 597, type: !652)
!4184 = !DILocation(line: 597, column: 26, scope: !4172)
!4185 = !DILocation(line: 597, column: 33, scope: !4172)
!4186 = !DILocation(line: 599, column: 8, scope: !4187)
!4187 = distinct !DILexicalBlock(scope: !4172, file: !3, line: 599, column: 7)
!4188 = !DILocation(line: 600, column: 7, scope: !4187)
!4189 = !DILocation(line: 600, column: 31, scope: !4187)
!4190 = !DILocation(line: 600, column: 11, scope: !4187)
!4191 = !DILocation(line: 601, column: 7, scope: !4187)
!4192 = !DILocation(line: 601, column: 30, scope: !4187)
!4193 = !DILocation(line: 601, column: 10, scope: !4187)
!4194 = !DILocation(line: 599, column: 7, scope: !4172)
!4195 = !DILocation(line: 602, column: 5, scope: !4187)
!4196 = !DILocation(line: 604, column: 22, scope: !4197)
!4197 = distinct !DILexicalBlock(scope: !4172, file: !3, line: 604, column: 7)
!4198 = !DILocation(line: 604, column: 7, scope: !4197)
!4199 = !DILocation(line: 604, column: 7, scope: !4172)
!4200 = !DILocation(line: 605, column: 6, scope: !4197)
!4201 = !DILocation(line: 605, column: 15, scope: !4197)
!4202 = !DILocation(line: 605, column: 5, scope: !4197)
!4203 = !DILocation(line: 606, column: 30, scope: !4204)
!4204 = distinct !DILexicalBlock(scope: !4197, file: !3, line: 606, column: 12)
!4205 = !DILocation(line: 606, column: 12, scope: !4204)
!4206 = !DILocation(line: 606, column: 12, scope: !4197)
!4207 = !DILocation(line: 607, column: 6, scope: !4204)
!4208 = !DILocation(line: 607, column: 15, scope: !4204)
!4209 = !DILocation(line: 607, column: 5, scope: !4204)
!4210 = !DILocation(line: 609, column: 6, scope: !4204)
!4211 = !DILocation(line: 609, column: 15, scope: !4204)
!4212 = !DILocation(line: 611, column: 3, scope: !4172)
!4213 = !DILocation(line: 612, column: 1, scope: !4172)
!4214 = distinct !DISubprogram(name: "merge_comps", scope: !3, file: !3, line: 570, type: !4215, scopeLine: 571, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4215 = !DISubroutineType(types: !4216)
!4216 = !{null, !2194, !2194, !7, !7}
!4217 = !DILocalVariable(name: "fathers", arg: 1, scope: !4214, file: !3, line: 570, type: !2194)
!4218 = !DILocation(line: 570, column: 23, scope: !4214)
!4219 = !DILocalVariable(name: "sizes", arg: 2, scope: !4214, file: !3, line: 570, type: !2194)
!4220 = !DILocation(line: 570, column: 43, scope: !4214)
!4221 = !DILocalVariable(name: "a", arg: 3, scope: !4214, file: !3, line: 570, type: !7)
!4222 = !DILocation(line: 570, column: 61, scope: !4214)
!4223 = !DILocalVariable(name: "b", arg: 4, scope: !4214, file: !3, line: 570, type: !7)
!4224 = !DILocation(line: 570, column: 73, scope: !4214)
!4225 = !DILocalVariable(name: "ca", scope: !4214, file: !3, line: 572, type: !7)
!4226 = !DILocation(line: 572, column: 12, scope: !4214)
!4227 = !DILocation(line: 572, column: 31, scope: !4214)
!4228 = !DILocation(line: 572, column: 40, scope: !4214)
!4229 = !DILocation(line: 572, column: 17, scope: !4214)
!4230 = !DILocalVariable(name: "cb", scope: !4214, file: !3, line: 573, type: !7)
!4231 = !DILocation(line: 573, column: 12, scope: !4214)
!4232 = !DILocation(line: 573, column: 31, scope: !4214)
!4233 = !DILocation(line: 573, column: 40, scope: !4214)
!4234 = !DILocation(line: 573, column: 17, scope: !4214)
!4235 = !DILocation(line: 575, column: 7, scope: !4236)
!4236 = distinct !DILexicalBlock(scope: !4214, file: !3, line: 575, column: 7)
!4237 = !DILocation(line: 575, column: 13, scope: !4236)
!4238 = !DILocation(line: 575, column: 10, scope: !4236)
!4239 = !DILocation(line: 575, column: 7, scope: !4214)
!4240 = !DILocation(line: 576, column: 5, scope: !4236)
!4241 = !DILocation(line: 578, column: 7, scope: !4242)
!4242 = distinct !DILexicalBlock(scope: !4214, file: !3, line: 578, column: 7)
!4243 = !DILocation(line: 578, column: 13, scope: !4242)
!4244 = !DILocation(line: 578, column: 19, scope: !4242)
!4245 = !DILocation(line: 578, column: 25, scope: !4242)
!4246 = !DILocation(line: 578, column: 17, scope: !4242)
!4247 = !DILocation(line: 578, column: 7, scope: !4214)
!4248 = !DILocation(line: 580, column: 20, scope: !4249)
!4249 = distinct !DILexicalBlock(scope: !4242, file: !3, line: 579, column: 5)
!4250 = !DILocation(line: 580, column: 26, scope: !4249)
!4251 = !DILocation(line: 580, column: 7, scope: !4249)
!4252 = !DILocation(line: 580, column: 13, scope: !4249)
!4253 = !DILocation(line: 580, column: 17, scope: !4249)
!4254 = !DILocation(line: 581, column: 21, scope: !4249)
!4255 = !DILocation(line: 581, column: 7, scope: !4249)
!4256 = !DILocation(line: 581, column: 15, scope: !4249)
!4257 = !DILocation(line: 581, column: 19, scope: !4249)
!4258 = !DILocation(line: 582, column: 5, scope: !4249)
!4259 = !DILocation(line: 585, column: 20, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4242, file: !3, line: 584, column: 5)
!4261 = !DILocation(line: 585, column: 26, scope: !4260)
!4262 = !DILocation(line: 585, column: 7, scope: !4260)
!4263 = !DILocation(line: 585, column: 13, scope: !4260)
!4264 = !DILocation(line: 585, column: 17, scope: !4260)
!4265 = !DILocation(line: 586, column: 21, scope: !4260)
!4266 = !DILocation(line: 586, column: 7, scope: !4260)
!4267 = !DILocation(line: 586, column: 15, scope: !4260)
!4268 = !DILocation(line: 586, column: 19, scope: !4260)
!4269 = !DILocation(line: 588, column: 1, scope: !4214)
!4270 = distinct !DISubprogram(name: "VEC_ddr_p_base_iterate", scope: !2017, file: !2017, line: 332, type: !4271, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4271 = !DISubroutineType(types: !4272)
!4272 = !{!749, !4273, !7, !4275}
!4273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4274, size: 64)
!4274 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2139)
!4275 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2146, size: 64)
!4276 = !DILocalVariable(name: "vec_", arg: 1, scope: !4270, file: !2017, line: 332, type: !4273)
!4277 = !DILocation(line: 332, column: 1, scope: !4270)
!4278 = !DILocalVariable(name: "ix_", arg: 2, scope: !4270, file: !2017, line: 332, type: !7)
!4279 = !DILocalVariable(name: "ptr", arg: 3, scope: !4270, file: !2017, line: 332, type: !4275)
!4280 = !DILocation(line: 332, column: 1, scope: !4281)
!4281 = distinct !DILexicalBlock(scope: !4270, file: !2017, line: 332, column: 1)
!4282 = !DILocation(line: 332, column: 1, scope: !4283)
!4283 = distinct !DILexicalBlock(scope: !4281, file: !2017, line: 332, column: 1)
!4284 = !DILocation(line: 332, column: 1, scope: !4285)
!4285 = distinct !DILexicalBlock(scope: !4281, file: !2017, line: 332, column: 1)
!4286 = distinct !DISubprogram(name: "component_of", scope: !3, file: !3, line: 550, type: !4287, scopeLine: 551, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4287 = !DISubroutineType(types: !4288)
!4288 = !{!7, !2194, !7}
!4289 = !DILocalVariable(name: "fathers", arg: 1, scope: !4286, file: !3, line: 550, type: !2194)
!4290 = !DILocation(line: 550, column: 24, scope: !4286)
!4291 = !DILocalVariable(name: "a", arg: 2, scope: !4286, file: !3, line: 550, type: !7)
!4292 = !DILocation(line: 550, column: 44, scope: !4286)
!4293 = !DILocalVariable(name: "root", scope: !4286, file: !3, line: 552, type: !7)
!4294 = !DILocation(line: 552, column: 12, scope: !4286)
!4295 = !DILocalVariable(name: "n", scope: !4286, file: !3, line: 552, type: !7)
!4296 = !DILocation(line: 552, column: 18, scope: !4286)
!4297 = !DILocation(line: 554, column: 15, scope: !4298)
!4298 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 554, column: 3)
!4299 = !DILocation(line: 554, column: 13, scope: !4298)
!4300 = !DILocation(line: 554, column: 8, scope: !4298)
!4301 = !DILocation(line: 554, column: 18, scope: !4302)
!4302 = distinct !DILexicalBlock(scope: !4298, file: !3, line: 554, column: 3)
!4303 = !DILocation(line: 554, column: 26, scope: !4302)
!4304 = !DILocation(line: 554, column: 34, scope: !4302)
!4305 = !DILocation(line: 554, column: 23, scope: !4302)
!4306 = !DILocation(line: 554, column: 3, scope: !4298)
!4307 = !DILocation(line: 555, column: 5, scope: !4302)
!4308 = !DILocation(line: 554, column: 48, scope: !4302)
!4309 = !DILocation(line: 554, column: 56, scope: !4302)
!4310 = !DILocation(line: 554, column: 46, scope: !4302)
!4311 = !DILocation(line: 554, column: 3, scope: !4302)
!4312 = distinct !{!4312, !4306, !4313}
!4313 = !DILocation(line: 555, column: 5, scope: !4298)
!4314 = !DILocation(line: 557, column: 3, scope: !4286)
!4315 = !DILocation(line: 557, column: 10, scope: !4316)
!4316 = distinct !DILexicalBlock(scope: !4317, file: !3, line: 557, column: 3)
!4317 = distinct !DILexicalBlock(scope: !4286, file: !3, line: 557, column: 3)
!4318 = !DILocation(line: 557, column: 15, scope: !4316)
!4319 = !DILocation(line: 557, column: 12, scope: !4316)
!4320 = !DILocation(line: 557, column: 3, scope: !4317)
!4321 = !DILocation(line: 559, column: 11, scope: !4322)
!4322 = distinct !DILexicalBlock(scope: !4316, file: !3, line: 558, column: 5)
!4323 = !DILocation(line: 559, column: 19, scope: !4322)
!4324 = !DILocation(line: 559, column: 9, scope: !4322)
!4325 = !DILocation(line: 560, column: 20, scope: !4322)
!4326 = !DILocation(line: 560, column: 7, scope: !4322)
!4327 = !DILocation(line: 560, column: 15, scope: !4322)
!4328 = !DILocation(line: 560, column: 18, scope: !4322)
!4329 = !DILocation(line: 561, column: 5, scope: !4322)
!4330 = !DILocation(line: 557, column: 25, scope: !4316)
!4331 = !DILocation(line: 557, column: 23, scope: !4316)
!4332 = !DILocation(line: 557, column: 3, scope: !4316)
!4333 = distinct !{!4333, !4320, !4334}
!4334 = !DILocation(line: 561, column: 5, scope: !4317)
!4335 = !DILocation(line: 563, column: 10, scope: !4286)
!4336 = !DILocation(line: 563, column: 3, scope: !4286)
!4337 = distinct !DISubprogram(name: "determine_offset", scope: !3, file: !3, line: 634, type: !4338, scopeLine: 636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4338 = !DISubroutineType(types: !4339)
!4339 = !{!772, !2015, !2015, !4340}
!4340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !701, size: 64)
!4341 = !DILocalVariable(name: "a", arg: 1, scope: !4337, file: !3, line: 634, type: !2015)
!4342 = !DILocation(line: 634, column: 42, scope: !4337)
!4343 = !DILocalVariable(name: "b", arg: 2, scope: !4337, file: !3, line: 634, type: !2015)
!4344 = !DILocation(line: 634, column: 68, scope: !4337)
!4345 = !DILocalVariable(name: "off", arg: 3, scope: !4337, file: !3, line: 635, type: !4340)
!4346 = !DILocation(line: 635, column: 17, scope: !4337)
!4347 = !DILocalVariable(name: "diff", scope: !4337, file: !3, line: 637, type: !4348)
!4348 = !DIDerivedType(tag: DW_TAG_typedef, name: "aff_tree", file: !4349, line: 59, baseType: !4350)
!4349 = !DIFile(filename: "./tree-affine.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "affine_tree_combination", file: !4349, line: 36, size: 1856, elements: !4351)
!4351 = !{!4352, !4353, !4354, !4355, !4363}
!4352 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4350, file: !4349, line: 39, baseType: !652, size: 64)
!4353 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !4350, file: !4349, line: 42, baseType: !701, size: 128, offset: 64)
!4354 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !4350, file: !4349, line: 45, baseType: !7, size: 32, offset: 192)
!4355 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !4350, file: !4349, line: 53, baseType: !4356, size: 1536, offset: 256)
!4356 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4357, size: 1536, elements: !4361)
!4357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "aff_comb_elt", file: !4349, line: 27, size: 192, elements: !4358)
!4358 = !{!4359, !4360}
!4359 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4357, file: !4349, line: 30, baseType: !652, size: 64)
!4360 = !DIDerivedType(tag: DW_TAG_member, name: "coef", scope: !4357, file: !4349, line: 33, baseType: !701, size: 128, offset: 64)
!4361 = !{!4362}
!4362 = !DISubrange(count: 8)
!4363 = !DIDerivedType(tag: DW_TAG_member, name: "rest", scope: !4350, file: !4349, line: 58, baseType: !652, size: 64, offset: 1792)
!4364 = !DILocation(line: 637, column: 12, scope: !4337)
!4365 = !DILocalVariable(name: "baseb", scope: !4337, file: !3, line: 637, type: !4348)
!4366 = !DILocation(line: 637, column: 18, scope: !4337)
!4367 = !DILocalVariable(name: "step", scope: !4337, file: !3, line: 637, type: !4348)
!4368 = !DILocation(line: 637, column: 25, scope: !4337)
!4369 = !DILocalVariable(name: "typea", scope: !4337, file: !3, line: 638, type: !652)
!4370 = !DILocation(line: 638, column: 8, scope: !4337)
!4371 = !DILocalVariable(name: "typeb", scope: !4337, file: !3, line: 638, type: !652)
!4372 = !DILocation(line: 638, column: 15, scope: !4337)
!4373 = !DILocation(line: 641, column: 11, scope: !4337)
!4374 = !DILocation(line: 641, column: 9, scope: !4337)
!4375 = !DILocation(line: 642, column: 11, scope: !4337)
!4376 = !DILocation(line: 642, column: 9, scope: !4337)
!4377 = !DILocation(line: 643, column: 35, scope: !4378)
!4378 = distinct !DILexicalBlock(scope: !4337, file: !3, line: 643, column: 7)
!4379 = !DILocation(line: 643, column: 42, scope: !4378)
!4380 = !DILocation(line: 643, column: 8, scope: !4378)
!4381 = !DILocation(line: 643, column: 7, scope: !4337)
!4382 = !DILocation(line: 644, column: 5, scope: !4378)
!4383 = !DILocation(line: 648, column: 25, scope: !4384)
!4384 = distinct !DILexicalBlock(scope: !4337, file: !3, line: 648, column: 7)
!4385 = !DILocation(line: 648, column: 38, scope: !4384)
!4386 = !DILocation(line: 648, column: 8, scope: !4384)
!4387 = !DILocation(line: 649, column: 7, scope: !4384)
!4388 = !DILocation(line: 649, column: 28, scope: !4384)
!4389 = !DILocation(line: 649, column: 49, scope: !4384)
!4390 = !DILocation(line: 649, column: 11, scope: !4384)
!4391 = !DILocation(line: 648, column: 7, scope: !4337)
!4392 = !DILocation(line: 650, column: 5, scope: !4384)
!4393 = !DILocation(line: 652, column: 22, scope: !4394)
!4394 = distinct !DILexicalBlock(scope: !4337, file: !3, line: 652, column: 7)
!4395 = !DILocation(line: 652, column: 7, scope: !4394)
!4396 = !DILocation(line: 652, column: 7, scope: !4337)
!4397 = !DILocation(line: 656, column: 8, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4394, file: !3, line: 653, column: 5)
!4399 = !DILocation(line: 656, column: 14, scope: !4398)
!4400 = !DILocation(line: 657, column: 32, scope: !4398)
!4401 = !DILocation(line: 657, column: 47, scope: !4398)
!4402 = !DILocation(line: 657, column: 15, scope: !4398)
!4403 = !DILocation(line: 658, column: 8, scope: !4398)
!4404 = !DILocation(line: 658, column: 28, scope: !4398)
!4405 = !DILocation(line: 658, column: 41, scope: !4398)
!4406 = !DILocation(line: 658, column: 11, scope: !4398)
!4407 = !DILocation(line: 0, scope: !4398)
!4408 = !DILocation(line: 657, column: 14, scope: !4398)
!4409 = !DILocation(line: 657, column: 7, scope: !4398)
!4410 = !DILocation(line: 663, column: 30, scope: !4337)
!4411 = !DILocation(line: 663, column: 3, scope: !4337)
!4412 = !DILocation(line: 664, column: 30, scope: !4337)
!4413 = !DILocation(line: 664, column: 3, scope: !4337)
!4414 = !DILocation(line: 665, column: 34, scope: !4337)
!4415 = !DILocation(line: 665, column: 3, scope: !4337)
!4416 = !DILocation(line: 666, column: 3, scope: !4337)
!4417 = !DILocation(line: 668, column: 35, scope: !4337)
!4418 = !DILocation(line: 668, column: 48, scope: !4337)
!4419 = !DILocation(line: 668, column: 3, scope: !4337)
!4420 = !DILocation(line: 670, column: 61, scope: !4337)
!4421 = !DILocation(line: 670, column: 10, scope: !4337)
!4422 = !DILocation(line: 670, column: 3, scope: !4337)
!4423 = !DILocation(line: 671, column: 1, scope: !4337)
!4424 = distinct !DISubprogram(name: "VEC_dref_heap_alloc", scope: !3, file: !3, line: 243, type: !4425, scopeLine: 243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4425 = !DISubroutineType(types: !4426)
!4426 = !{!2090, !749}
!4427 = !DILocalVariable(name: "alloc_", arg: 1, scope: !4424, file: !3, line: 243, type: !749)
!4428 = !DILocation(line: 243, column: 1, scope: !4424)
!4429 = distinct !DISubprogram(name: "shwi_to_double_int", scope: !702, file: !702, line: 72, type: !4430, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4430 = !DISubroutineType(types: !4431)
!4431 = !{!701, !708}
!4432 = !DILocalVariable(name: "cst", arg: 1, scope: !4429, file: !702, line: 72, type: !708)
!4433 = !DILocation(line: 72, column: 35, scope: !4429)
!4434 = !DILocalVariable(name: "r", scope: !4429, file: !702, line: 74, type: !701)
!4435 = !DILocation(line: 74, column: 14, scope: !4429)
!4436 = !DILocation(line: 76, column: 36, scope: !4429)
!4437 = !DILocation(line: 76, column: 5, scope: !4429)
!4438 = !DILocation(line: 76, column: 9, scope: !4429)
!4439 = !DILocation(line: 77, column: 12, scope: !4429)
!4440 = !DILocation(line: 77, column: 16, scope: !4429)
!4441 = !DILocation(line: 77, column: 5, scope: !4429)
!4442 = !DILocation(line: 77, column: 10, scope: !4429)
!4443 = !DILocation(line: 79, column: 3, scope: !4429)
!4444 = distinct !DISubprogram(name: "gimple_bb", scope: !391, file: !391, line: 1112, type: !4445, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4445 = !DISubroutineType(types: !4446)
!4446 = !{!946, !2347}
!4447 = !DILocalVariable(name: "g", arg: 1, scope: !4444, file: !391, line: 1112, type: !2347)
!4448 = !DILocation(line: 1112, column: 25, scope: !4444)
!4449 = !DILocation(line: 1114, column: 10, scope: !4444)
!4450 = !DILocation(line: 1114, column: 13, scope: !4444)
!4451 = !DILocation(line: 1114, column: 20, scope: !4444)
!4452 = !DILocation(line: 1114, column: 3, scope: !4444)
!4453 = distinct !DISubprogram(name: "VEC_dref_base_length", scope: !3, file: !3, line: 242, type: !4454, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4454 = !DISubroutineType(types: !4455)
!4455 = !{!7, !2515}
!4456 = !DILocalVariable(name: "vec_", arg: 1, scope: !4453, file: !3, line: 242, type: !2515)
!4457 = !DILocation(line: 242, column: 1, scope: !4453)
!4458 = distinct !DISubprogram(name: "VEC_dref_base_quick_push", scope: !3, file: !3, line: 242, type: !4459, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4459 = !DISubroutineType(types: !4460)
!4460 = !{!2517, !4461, !2010}
!4461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2095, size: 64)
!4462 = !DILocalVariable(name: "vec_", arg: 1, scope: !4458, file: !3, line: 242, type: !4461)
!4463 = !DILocation(line: 242, column: 1, scope: !4458)
!4464 = !DILocalVariable(name: "obj_", arg: 2, scope: !4458, file: !3, line: 242, type: !2010)
!4465 = !DILocalVariable(name: "slot_", scope: !4458, file: !3, line: 242, type: !2517)
!4466 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !135, file: !135, line: 150, type: !4467, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4467 = !DISubroutineType(types: !4468)
!4468 = !{!749, !4469, !7, !4471}
!4469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4470, size: 64)
!4470 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !955)
!4471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !962, size: 64)
!4472 = !DILocalVariable(name: "vec_", arg: 1, scope: !4466, file: !135, line: 150, type: !4469)
!4473 = !DILocation(line: 150, column: 1, scope: !4466)
!4474 = !DILocalVariable(name: "ix_", arg: 2, scope: !4466, file: !135, line: 150, type: !7)
!4475 = !DILocalVariable(name: "ptr", arg: 3, scope: !4466, file: !135, line: 150, type: !4471)
!4476 = !DILocation(line: 150, column: 1, scope: !4477)
!4477 = distinct !DILexicalBlock(scope: !4466, file: !135, line: 150, column: 1)
!4478 = !DILocation(line: 150, column: 1, scope: !4479)
!4479 = distinct !DILexicalBlock(scope: !4477, file: !135, line: 150, column: 1)
!4480 = !DILocation(line: 150, column: 1, scope: !4481)
!4481 = distinct !DILexicalBlock(scope: !4477, file: !135, line: 150, column: 1)
!4482 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !135, file: !135, line: 152, type: !4483, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4483 = !DISubroutineType(types: !4484)
!4484 = !{null, !4485}
!4485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4125, size: 64)
!4486 = !DILocalVariable(name: "vec_", arg: 1, scope: !4482, file: !135, line: 152, type: !4485)
!4487 = !DILocation(line: 152, column: 1, scope: !4482)
!4488 = !DILocation(line: 152, column: 1, scope: !4489)
!4489 = distinct !DILexicalBlock(scope: !4482, file: !135, line: 152, column: 1)
!4490 = distinct !DISubprogram(name: "aff_combination_dr_offset", scope: !3, file: !3, line: 617, type: !4491, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4491 = !DISubroutineType(types: !4492)
!4492 = !{null, !2015, !4493}
!4493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4348, size: 64)
!4494 = !DILocalVariable(name: "dr", arg: 1, scope: !4490, file: !3, line: 617, type: !2015)
!4495 = !DILocation(line: 617, column: 51, scope: !4490)
!4496 = !DILocalVariable(name: "offset", arg: 2, scope: !4490, file: !3, line: 617, type: !4493)
!4497 = !DILocation(line: 617, column: 65, scope: !4490)
!4498 = !DILocalVariable(name: "delta", scope: !4490, file: !3, line: 619, type: !4348)
!4499 = !DILocation(line: 619, column: 12, scope: !4490)
!4500 = !DILocation(line: 621, column: 35, scope: !4490)
!4501 = !DILocation(line: 621, column: 51, scope: !4490)
!4502 = !DILocation(line: 621, column: 61, scope: !4490)
!4503 = !DILocation(line: 621, column: 3, scope: !4490)
!4504 = !DILocation(line: 623, column: 34, scope: !4490)
!4505 = !DILocation(line: 623, column: 64, scope: !4490)
!4506 = !DILocation(line: 623, column: 44, scope: !4490)
!4507 = !DILocation(line: 623, column: 3, scope: !4490)
!4508 = !DILocation(line: 624, column: 24, scope: !4490)
!4509 = !DILocation(line: 624, column: 3, scope: !4490)
!4510 = !DILocation(line: 625, column: 1, scope: !4490)
!4511 = distinct !DISubprogram(name: "suitable_component_p", scope: !3, file: !3, line: 814, type: !4512, scopeLine: 815, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4512 = !DISubroutineType(types: !4513)
!4513 = !{!772, !1197, !2196}
!4514 = !DILocalVariable(name: "loop", arg: 1, scope: !4511, file: !3, line: 814, type: !1197)
!4515 = !DILocation(line: 814, column: 36, scope: !4511)
!4516 = !DILocalVariable(name: "comp", arg: 2, scope: !4511, file: !3, line: 814, type: !2196)
!4517 = !DILocation(line: 814, column: 60, scope: !4511)
!4518 = !DILocalVariable(name: "i", scope: !4511, file: !3, line: 816, type: !7)
!4519 = !DILocation(line: 816, column: 12, scope: !4511)
!4520 = !DILocalVariable(name: "a", scope: !4511, file: !3, line: 817, type: !2010)
!4521 = !DILocation(line: 817, column: 8, scope: !4511)
!4522 = !DILocalVariable(name: "first", scope: !4511, file: !3, line: 817, type: !2010)
!4523 = !DILocation(line: 817, column: 11, scope: !4511)
!4524 = !DILocalVariable(name: "ba", scope: !4511, file: !3, line: 818, type: !1434)
!4525 = !DILocation(line: 818, column: 15, scope: !4511)
!4526 = !DILocalVariable(name: "bp", scope: !4511, file: !3, line: 818, type: !1434)
!4527 = !DILocation(line: 818, column: 19, scope: !4511)
!4528 = !DILocation(line: 818, column: 24, scope: !4511)
!4529 = !DILocation(line: 818, column: 30, scope: !4511)
!4530 = !DILocalVariable(name: "ok", scope: !4511, file: !3, line: 819, type: !772)
!4531 = !DILocation(line: 819, column: 8, scope: !4511)
!4532 = !DILocalVariable(name: "has_write", scope: !4511, file: !3, line: 819, type: !772)
!4533 = !DILocation(line: 819, column: 12, scope: !4511)
!4534 = !DILocation(line: 821, column: 10, scope: !4535)
!4535 = distinct !DILexicalBlock(scope: !4511, file: !3, line: 821, column: 3)
!4536 = !DILocation(line: 821, column: 8, scope: !4535)
!4537 = !DILocation(line: 821, column: 15, scope: !4538)
!4538 = distinct !DILexicalBlock(scope: !4535, file: !3, line: 821, column: 3)
!4539 = !DILocation(line: 821, column: 3, scope: !4535)
!4540 = !DILocation(line: 823, column: 23, scope: !4541)
!4541 = distinct !DILexicalBlock(scope: !4538, file: !3, line: 822, column: 5)
!4542 = !DILocation(line: 823, column: 26, scope: !4541)
!4543 = !DILocation(line: 823, column: 12, scope: !4541)
!4544 = !DILocation(line: 823, column: 10, scope: !4541)
!4545 = !DILocation(line: 825, column: 40, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4541, file: !3, line: 825, column: 11)
!4547 = !DILocation(line: 825, column: 46, scope: !4546)
!4548 = !DILocation(line: 825, column: 12, scope: !4546)
!4549 = !DILocation(line: 825, column: 11, scope: !4541)
!4550 = !DILocation(line: 826, column: 2, scope: !4546)
!4551 = !DILocation(line: 828, column: 7, scope: !4541)
!4552 = !DILocation(line: 829, column: 12, scope: !4541)
!4553 = !DILocation(line: 829, column: 10, scope: !4541)
!4554 = !DILocation(line: 831, column: 12, scope: !4555)
!4555 = distinct !DILexicalBlock(scope: !4541, file: !3, line: 831, column: 11)
!4556 = !DILocation(line: 831, column: 11, scope: !4541)
!4557 = !DILocation(line: 832, column: 12, scope: !4555)
!4558 = !DILocation(line: 832, column: 2, scope: !4555)
!4559 = !DILocation(line: 833, column: 5, scope: !4541)
!4560 = !DILocation(line: 821, column: 54, scope: !4538)
!4561 = !DILocation(line: 821, column: 3, scope: !4538)
!4562 = distinct !{!4562, !4539, !4563}
!4563 = !DILocation(line: 833, column: 5, scope: !4535)
!4564 = !DILocation(line: 835, column: 11, scope: !4511)
!4565 = !DILocation(line: 835, column: 9, scope: !4511)
!4566 = !DILocation(line: 836, column: 30, scope: !4511)
!4567 = !DILocation(line: 836, column: 37, scope: !4511)
!4568 = !DILocation(line: 836, column: 43, scope: !4511)
!4569 = !DILocation(line: 836, column: 49, scope: !4511)
!4570 = !DILocation(line: 836, column: 8, scope: !4511)
!4571 = !DILocation(line: 836, column: 6, scope: !4511)
!4572 = !DILocation(line: 837, column: 3, scope: !4511)
!4573 = !DILocation(line: 838, column: 3, scope: !4511)
!4574 = !DILocation(line: 838, column: 10, scope: !4511)
!4575 = !DILocation(line: 838, column: 19, scope: !4511)
!4576 = !DILocation(line: 840, column: 10, scope: !4577)
!4577 = distinct !DILexicalBlock(scope: !4511, file: !3, line: 840, column: 3)
!4578 = !DILocation(line: 840, column: 8, scope: !4577)
!4579 = !DILocation(line: 840, column: 15, scope: !4580)
!4580 = distinct !DILexicalBlock(scope: !4577, file: !3, line: 840, column: 3)
!4581 = !DILocation(line: 840, column: 3, scope: !4577)
!4582 = !DILocation(line: 842, column: 30, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4584, file: !3, line: 842, column: 11)
!4584 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 841, column: 5)
!4585 = !DILocation(line: 842, column: 37, scope: !4583)
!4586 = !DILocation(line: 842, column: 42, scope: !4583)
!4587 = !DILocation(line: 842, column: 45, scope: !4583)
!4588 = !DILocation(line: 842, column: 51, scope: !4583)
!4589 = !DILocation(line: 842, column: 54, scope: !4583)
!4590 = !DILocation(line: 842, column: 12, scope: !4583)
!4591 = !DILocation(line: 842, column: 11, scope: !4584)
!4592 = !DILocation(line: 843, column: 2, scope: !4583)
!4593 = !DILocation(line: 852, column: 5, scope: !4584)
!4594 = !DILocation(line: 840, column: 54, scope: !4580)
!4595 = !DILocation(line: 840, column: 3, scope: !4580)
!4596 = distinct !{!4596, !4581, !4597}
!4597 = !DILocation(line: 852, column: 5, scope: !4577)
!4598 = !DILocation(line: 858, column: 7, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4511, file: !3, line: 858, column: 7)
!4600 = !DILocation(line: 858, column: 17, scope: !4599)
!4601 = !DILocation(line: 858, column: 20, scope: !4599)
!4602 = !DILocation(line: 858, column: 26, scope: !4599)
!4603 = !DILocation(line: 858, column: 36, scope: !4599)
!4604 = !DILocation(line: 858, column: 7, scope: !4511)
!4605 = !DILocation(line: 859, column: 5, scope: !4599)
!4606 = !DILocation(line: 861, column: 3, scope: !4511)
!4607 = !DILocation(line: 862, column: 1, scope: !4511)
!4608 = distinct !DISubprogram(name: "release_component", scope: !3, file: !3, line: 526, type: !3684, scopeLine: 527, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4609 = !DILocalVariable(name: "comp", arg: 1, scope: !4608, file: !3, line: 526, type: !2196)
!4610 = !DILocation(line: 526, column: 38, scope: !4608)
!4611 = !DILocation(line: 528, column: 3, scope: !4608)
!4612 = !DILocation(line: 529, column: 9, scope: !4608)
!4613 = !DILocation(line: 529, column: 3, scope: !4608)
!4614 = !DILocation(line: 530, column: 1, scope: !4608)
!4615 = distinct !DISubprogram(name: "VEC_dref_base_index", scope: !3, file: !3, line: 242, type: !4616, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4616 = !DISubroutineType(types: !4617)
!4617 = !{!2010, !2515, !7}
!4618 = !DILocalVariable(name: "vec_", arg: 1, scope: !4615, file: !3, line: 242, type: !2515)
!4619 = !DILocation(line: 242, column: 1, scope: !4615)
!4620 = !DILocalVariable(name: "ix_", arg: 2, scope: !4615, file: !3, line: 242, type: !7)
!4621 = !DILocation(line: 0, scope: !4615)
!4622 = distinct !DISubprogram(name: "VEC_dref_heap_free", scope: !3, file: !3, line: 243, type: !4623, scopeLine: 243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4623 = !DISubroutineType(types: !4624)
!4624 = !{null, !4625}
!4625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2090, size: 64)
!4626 = !DILocalVariable(name: "vec_", arg: 1, scope: !4622, file: !3, line: 243, type: !4625)
!4627 = !DILocation(line: 243, column: 1, scope: !4622)
!4628 = !DILocation(line: 243, column: 1, scope: !4629)
!4629 = distinct !DILexicalBlock(scope: !4622, file: !3, line: 243, column: 1)
!4630 = distinct !DISubprogram(name: "determine_roots_comp", scope: !3, file: !3, line: 1177, type: !3654, scopeLine: 1180, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4631 = !DILocalVariable(name: "loop", arg: 1, scope: !4630, file: !3, line: 1177, type: !1197)
!4632 = !DILocation(line: 1177, column: 36, scope: !4630)
!4633 = !DILocalVariable(name: "comp", arg: 2, scope: !4630, file: !3, line: 1178, type: !2196)
!4634 = !DILocation(line: 1178, column: 27, scope: !4630)
!4635 = !DILocalVariable(name: "chains", arg: 3, scope: !4630, file: !3, line: 1179, type: !3656)
!4636 = !DILocation(line: 1179, column: 31, scope: !4630)
!4637 = !DILocalVariable(name: "i", scope: !4630, file: !3, line: 1181, type: !7)
!4638 = !DILocation(line: 1181, column: 12, scope: !4630)
!4639 = !DILocalVariable(name: "a", scope: !4630, file: !3, line: 1182, type: !2010)
!4640 = !DILocation(line: 1182, column: 8, scope: !4630)
!4641 = !DILocalVariable(name: "chain", scope: !4630, file: !3, line: 1183, type: !2080)
!4642 = !DILocation(line: 1183, column: 11, scope: !4630)
!4643 = !DILocalVariable(name: "last_ofs", scope: !4630, file: !3, line: 1184, type: !701)
!4644 = !DILocation(line: 1184, column: 14, scope: !4630)
!4645 = !DILocation(line: 1184, column: 25, scope: !4630)
!4646 = !DILocation(line: 1187, column: 7, scope: !4647)
!4647 = distinct !DILexicalBlock(scope: !4630, file: !3, line: 1187, column: 7)
!4648 = !DILocation(line: 1187, column: 13, scope: !4647)
!4649 = !DILocation(line: 1187, column: 23, scope: !4647)
!4650 = !DILocation(line: 1187, column: 7, scope: !4630)
!4651 = !DILocation(line: 1189, column: 37, scope: !4652)
!4652 = distinct !DILexicalBlock(scope: !4647, file: !3, line: 1188, column: 5)
!4653 = !DILocation(line: 1189, column: 15, scope: !4652)
!4654 = !DILocation(line: 1189, column: 13, scope: !4652)
!4655 = !DILocation(line: 1190, column: 7, scope: !4652)
!4656 = !DILocation(line: 1191, column: 7, scope: !4652)
!4657 = !DILocation(line: 1195, column: 15, scope: !4630)
!4658 = !DILocation(line: 1195, column: 47, scope: !4630)
!4659 = !DILocation(line: 1195, column: 3, scope: !4630)
!4660 = !DILocation(line: 1202, column: 10, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4630, file: !3, line: 1202, column: 3)
!4662 = !DILocation(line: 1202, column: 8, scope: !4661)
!4663 = !DILocation(line: 1202, column: 15, scope: !4664)
!4664 = distinct !DILexicalBlock(scope: !4661, file: !3, line: 1202, column: 3)
!4665 = !DILocation(line: 1202, column: 3, scope: !4661)
!4666 = !DILocation(line: 1204, column: 12, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4668, file: !3, line: 1204, column: 11)
!4668 = distinct !DILexicalBlock(scope: !4664, file: !3, line: 1203, column: 5)
!4669 = !DILocation(line: 1204, column: 18, scope: !4667)
!4670 = !DILocation(line: 1204, column: 22, scope: !4667)
!4671 = !DILocation(line: 1205, column: 4, scope: !4667)
!4672 = !DILocation(line: 1205, column: 44, scope: !4667)
!4673 = !DILocation(line: 1205, column: 24, scope: !4667)
!4674 = !DILocation(line: 1206, column: 26, scope: !4667)
!4675 = !DILocation(line: 1206, column: 29, scope: !4667)
!4676 = !DILocation(line: 1207, column: 12, scope: !4667)
!4677 = !DILocation(line: 1206, column: 10, scope: !4667)
!4678 = !DILocation(line: 1205, column: 7, scope: !4667)
!4679 = !DILocation(line: 1207, column: 40, scope: !4667)
!4680 = !DILocation(line: 1204, column: 11, scope: !4668)
!4681 = !DILocation(line: 1209, column: 28, scope: !4682)
!4682 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 1209, column: 8)
!4683 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 1208, column: 2)
!4684 = !DILocation(line: 1209, column: 8, scope: !4682)
!4685 = !DILocation(line: 1209, column: 8, scope: !4683)
!4686 = !DILocation(line: 1211, column: 31, scope: !4687)
!4687 = distinct !DILexicalBlock(scope: !4682, file: !3, line: 1210, column: 6)
!4688 = !DILocation(line: 1211, column: 37, scope: !4687)
!4689 = !DILocation(line: 1211, column: 8, scope: !4687)
!4690 = !DILocation(line: 1212, column: 8, scope: !4687)
!4691 = !DILocation(line: 1213, column: 6, scope: !4687)
!4692 = !DILocation(line: 1215, column: 21, scope: !4682)
!4693 = !DILocation(line: 1215, column: 6, scope: !4682)
!4694 = !DILocation(line: 1216, column: 31, scope: !4683)
!4695 = !DILocation(line: 1216, column: 12, scope: !4683)
!4696 = !DILocation(line: 1216, column: 10, scope: !4683)
!4697 = !DILocation(line: 1217, column: 15, scope: !4683)
!4698 = !DILocation(line: 1217, column: 18, scope: !4683)
!4699 = !DILocation(line: 1218, column: 4, scope: !4683)
!4700 = !DILocation(line: 1221, column: 25, scope: !4668)
!4701 = !DILocation(line: 1221, column: 32, scope: !4668)
!4702 = !DILocation(line: 1221, column: 7, scope: !4668)
!4703 = !DILocation(line: 1222, column: 5, scope: !4668)
!4704 = !DILocation(line: 1202, column: 54, scope: !4664)
!4705 = !DILocation(line: 1202, column: 3, scope: !4664)
!4706 = distinct !{!4706, !4665, !4707}
!4707 = !DILocation(line: 1222, column: 5, scope: !4661)
!4708 = !DILocation(line: 1224, column: 27, scope: !4709)
!4709 = distinct !DILexicalBlock(scope: !4630, file: !3, line: 1224, column: 7)
!4710 = !DILocation(line: 1224, column: 7, scope: !4709)
!4711 = !DILocation(line: 1224, column: 7, scope: !4630)
!4712 = !DILocation(line: 1226, column: 30, scope: !4713)
!4713 = distinct !DILexicalBlock(scope: !4709, file: !3, line: 1225, column: 5)
!4714 = !DILocation(line: 1226, column: 36, scope: !4713)
!4715 = !DILocation(line: 1226, column: 7, scope: !4713)
!4716 = !DILocation(line: 1227, column: 7, scope: !4713)
!4717 = !DILocation(line: 1228, column: 5, scope: !4713)
!4718 = !DILocation(line: 1230, column: 20, scope: !4709)
!4719 = !DILocation(line: 1230, column: 5, scope: !4709)
!4720 = !DILocation(line: 1231, column: 1, scope: !4630)
!4721 = distinct !DISubprogram(name: "make_invariant_chain", scope: !3, file: !3, line: 955, type: !4722, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4722 = !DISubroutineType(types: !4723)
!4723 = !{!2080, !2196}
!4724 = !DILocalVariable(name: "comp", arg: 1, scope: !4721, file: !3, line: 955, type: !2196)
!4725 = !DILocation(line: 955, column: 41, scope: !4721)
!4726 = !DILocalVariable(name: "chain", scope: !4721, file: !3, line: 957, type: !2080)
!4727 = !DILocation(line: 957, column: 11, scope: !4721)
!4728 = !DILocation(line: 957, column: 19, scope: !4721)
!4729 = !DILocalVariable(name: "i", scope: !4721, file: !3, line: 958, type: !7)
!4730 = !DILocation(line: 958, column: 12, scope: !4721)
!4731 = !DILocalVariable(name: "ref", scope: !4721, file: !3, line: 959, type: !2010)
!4732 = !DILocation(line: 959, column: 8, scope: !4721)
!4733 = !DILocation(line: 961, column: 3, scope: !4721)
!4734 = !DILocation(line: 961, column: 10, scope: !4721)
!4735 = !DILocation(line: 961, column: 15, scope: !4721)
!4736 = !DILocation(line: 963, column: 3, scope: !4721)
!4737 = !DILocation(line: 963, column: 10, scope: !4721)
!4738 = !DILocation(line: 963, column: 30, scope: !4721)
!4739 = !DILocation(line: 965, column: 10, scope: !4740)
!4740 = distinct !DILexicalBlock(scope: !4721, file: !3, line: 965, column: 3)
!4741 = !DILocation(line: 965, column: 8, scope: !4740)
!4742 = !DILocation(line: 965, column: 15, scope: !4743)
!4743 = distinct !DILexicalBlock(scope: !4740, file: !3, line: 965, column: 3)
!4744 = !DILocation(line: 965, column: 3, scope: !4740)
!4745 = !DILocation(line: 967, column: 7, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4743, file: !3, line: 966, column: 5)
!4747 = !DILocation(line: 968, column: 37, scope: !4746)
!4748 = !DILocation(line: 968, column: 42, scope: !4746)
!4749 = !DILocation(line: 968, column: 7, scope: !4746)
!4750 = !DILocation(line: 968, column: 14, scope: !4746)
!4751 = !DILocation(line: 968, column: 34, scope: !4746)
!4752 = !DILocation(line: 969, column: 5, scope: !4746)
!4753 = !DILocation(line: 965, column: 56, scope: !4743)
!4754 = !DILocation(line: 965, column: 3, scope: !4743)
!4755 = distinct !{!4755, !4744, !4756}
!4756 = !DILocation(line: 969, column: 5, scope: !4740)
!4757 = !DILocation(line: 971, column: 10, scope: !4721)
!4758 = !DILocation(line: 971, column: 3, scope: !4721)
!4759 = distinct !DISubprogram(name: "VEC_chain_p_heap_safe_push", scope: !3, file: !3, line: 299, type: !4760, scopeLine: 299, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4760 = !DISubroutineType(types: !4761)
!4761 = !{!2558, !3656, !2080}
!4762 = !DILocalVariable(name: "vec_", arg: 1, scope: !4759, file: !3, line: 299, type: !3656)
!4763 = !DILocation(line: 299, column: 1, scope: !4759)
!4764 = !DILocalVariable(name: "obj_", arg: 2, scope: !4759, file: !3, line: 299, type: !2080)
!4765 = distinct !DISubprogram(name: "VEC_dref_base_address", scope: !3, file: !3, line: 242, type: !4766, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4766 = !DISubroutineType(types: !4767)
!4767 = !{!2517, !4461}
!4768 = !DILocalVariable(name: "vec_", arg: 1, scope: !4765, file: !3, line: 242, type: !4461)
!4769 = !DILocation(line: 242, column: 1, scope: !4765)
!4770 = distinct !DISubprogram(name: "order_drefs", scope: !3, file: !3, line: 898, type: !1482, scopeLine: 899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4771 = !DILocalVariable(name: "a", arg: 1, scope: !4770, file: !3, line: 898, type: !1477)
!4772 = !DILocation(line: 898, column: 26, scope: !4770)
!4773 = !DILocalVariable(name: "b", arg: 2, scope: !4770, file: !3, line: 898, type: !1477)
!4774 = !DILocation(line: 898, column: 41, scope: !4770)
!4775 = !DILocalVariable(name: "da", scope: !4770, file: !3, line: 900, type: !4776)
!4776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2214)
!4777 = !DILocation(line: 900, column: 21, scope: !4770)
!4778 = !DILocation(line: 900, column: 41, scope: !4770)
!4779 = !DILocation(line: 900, column: 26, scope: !4770)
!4780 = !DILocalVariable(name: "db", scope: !4770, file: !3, line: 901, type: !4776)
!4781 = !DILocation(line: 901, column: 21, scope: !4770)
!4782 = !DILocation(line: 901, column: 41, scope: !4770)
!4783 = !DILocation(line: 901, column: 26, scope: !4770)
!4784 = !DILocalVariable(name: "offcmp", scope: !4770, file: !3, line: 902, type: !749)
!4785 = !DILocation(line: 902, column: 7, scope: !4770)
!4786 = !DILocation(line: 902, column: 35, scope: !4770)
!4787 = !DILocation(line: 902, column: 34, scope: !4770)
!4788 = !DILocation(line: 902, column: 40, scope: !4770)
!4789 = !DILocation(line: 902, column: 50, scope: !4770)
!4790 = !DILocation(line: 902, column: 49, scope: !4770)
!4791 = !DILocation(line: 902, column: 55, scope: !4770)
!4792 = !DILocation(line: 902, column: 16, scope: !4770)
!4793 = !DILocation(line: 904, column: 7, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4770, file: !3, line: 904, column: 7)
!4795 = !DILocation(line: 904, column: 14, scope: !4794)
!4796 = !DILocation(line: 904, column: 7, scope: !4770)
!4797 = !DILocation(line: 905, column: 12, scope: !4794)
!4798 = !DILocation(line: 905, column: 5, scope: !4794)
!4799 = !DILocation(line: 907, column: 12, scope: !4770)
!4800 = !DILocation(line: 907, column: 11, scope: !4770)
!4801 = !DILocation(line: 907, column: 17, scope: !4770)
!4802 = !DILocation(line: 907, column: 25, scope: !4770)
!4803 = !DILocation(line: 907, column: 24, scope: !4770)
!4804 = !DILocation(line: 907, column: 30, scope: !4770)
!4805 = !DILocation(line: 907, column: 21, scope: !4770)
!4806 = !DILocation(line: 907, column: 3, scope: !4770)
!4807 = !DILocation(line: 908, column: 1, scope: !4770)
!4808 = distinct !DISubprogram(name: "uhwi_to_double_int", scope: !702, file: !702, line: 94, type: !4809, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4809 = !DISubroutineType(types: !4810)
!4810 = !{!701, !706}
!4811 = !DILocalVariable(name: "cst", arg: 1, scope: !4808, file: !702, line: 94, type: !706)
!4812 = !DILocation(line: 94, column: 44, scope: !4808)
!4813 = !DILocalVariable(name: "r", scope: !4808, file: !702, line: 96, type: !701)
!4814 = !DILocation(line: 96, column: 14, scope: !4808)
!4815 = !DILocation(line: 98, column: 11, scope: !4808)
!4816 = !DILocation(line: 98, column: 5, scope: !4808)
!4817 = !DILocation(line: 98, column: 9, scope: !4808)
!4818 = !DILocation(line: 99, column: 5, scope: !4808)
!4819 = !DILocation(line: 99, column: 10, scope: !4808)
!4820 = !DILocation(line: 101, column: 3, scope: !4808)
!4821 = distinct !DISubprogram(name: "nontrivial_chain_p", scope: !3, file: !3, line: 994, type: !4822, scopeLine: 995, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4822 = !DISubroutineType(types: !4823)
!4823 = !{!772, !2080}
!4824 = !DILocalVariable(name: "chain", arg: 1, scope: !4821, file: !3, line: 994, type: !2080)
!4825 = !DILocation(line: 994, column: 29, scope: !4821)
!4826 = !DILocation(line: 996, column: 10, scope: !4821)
!4827 = !DILocation(line: 996, column: 16, scope: !4821)
!4828 = !DILocation(line: 996, column: 24, scope: !4821)
!4829 = !DILocation(line: 996, column: 27, scope: !4821)
!4830 = !DILocation(line: 996, column: 58, scope: !4821)
!4831 = !DILocation(line: 0, scope: !4821)
!4832 = !DILocation(line: 996, column: 3, scope: !4821)
!4833 = distinct !DISubprogram(name: "add_looparound_copies", scope: !3, file: !3, line: 1155, type: !4834, scopeLine: 1156, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4834 = !DISubroutineType(types: !4835)
!4835 = !{null, !1197, !2080}
!4836 = !DILocalVariable(name: "loop", arg: 1, scope: !4833, file: !3, line: 1155, type: !1197)
!4837 = !DILocation(line: 1155, column: 37, scope: !4833)
!4838 = !DILocalVariable(name: "chain", arg: 2, scope: !4833, file: !3, line: 1155, type: !2080)
!4839 = !DILocation(line: 1155, column: 51, scope: !4833)
!4840 = !DILocalVariable(name: "i", scope: !4833, file: !3, line: 1157, type: !7)
!4841 = !DILocation(line: 1157, column: 12, scope: !4833)
!4842 = !DILocalVariable(name: "ref", scope: !4833, file: !3, line: 1158, type: !2010)
!4843 = !DILocation(line: 1158, column: 8, scope: !4833)
!4844 = !DILocalVariable(name: "root", scope: !4833, file: !3, line: 1158, type: !2010)
!4845 = !DILocation(line: 1158, column: 13, scope: !4833)
!4846 = !DILocation(line: 1158, column: 36, scope: !4833)
!4847 = !DILocation(line: 1158, column: 20, scope: !4833)
!4848 = !DILocalVariable(name: "phi", scope: !4833, file: !3, line: 1159, type: !982)
!4849 = !DILocation(line: 1159, column: 10, scope: !4833)
!4850 = !DILocation(line: 1161, column: 10, scope: !4851)
!4851 = distinct !DILexicalBlock(scope: !4833, file: !3, line: 1161, column: 3)
!4852 = !DILocation(line: 1161, column: 8, scope: !4851)
!4853 = !DILocation(line: 1161, column: 15, scope: !4854)
!4854 = distinct !DILexicalBlock(scope: !4851, file: !3, line: 1161, column: 3)
!4855 = !DILocation(line: 1161, column: 3, scope: !4851)
!4856 = !DILocation(line: 1163, column: 34, scope: !4857)
!4857 = distinct !DILexicalBlock(scope: !4854, file: !3, line: 1162, column: 5)
!4858 = !DILocation(line: 1163, column: 40, scope: !4857)
!4859 = !DILocation(line: 1163, column: 45, scope: !4857)
!4860 = !DILocation(line: 1163, column: 13, scope: !4857)
!4861 = !DILocation(line: 1163, column: 11, scope: !4857)
!4862 = !DILocation(line: 1164, column: 12, scope: !4863)
!4863 = distinct !DILexicalBlock(scope: !4857, file: !3, line: 1164, column: 11)
!4864 = !DILocation(line: 1164, column: 11, scope: !4857)
!4865 = !DILocation(line: 1165, column: 2, scope: !4863)
!4866 = !DILocation(line: 1167, column: 23, scope: !4857)
!4867 = !DILocation(line: 1167, column: 40, scope: !4857)
!4868 = !DILocation(line: 1167, column: 7, scope: !4857)
!4869 = !DILocation(line: 1168, column: 31, scope: !4857)
!4870 = !DILocation(line: 1168, column: 38, scope: !4857)
!4871 = !DILocation(line: 1168, column: 43, scope: !4857)
!4872 = !DILocation(line: 1168, column: 7, scope: !4857)
!4873 = !DILocation(line: 1169, column: 5, scope: !4857)
!4874 = !DILocation(line: 1161, column: 57, scope: !4854)
!4875 = !DILocation(line: 1161, column: 3, scope: !4854)
!4876 = distinct !{!4876, !4855, !4877}
!4877 = !DILocation(line: 1169, column: 5, scope: !4851)
!4878 = !DILocation(line: 1170, column: 1, scope: !4833)
!4879 = distinct !DISubprogram(name: "release_chain", scope: !3, file: !3, line: 492, type: !4880, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4880 = !DISubroutineType(types: !4881)
!4881 = !{null, !2080}
!4882 = !DILocalVariable(name: "chain", arg: 1, scope: !4879, file: !3, line: 492, type: !2080)
!4883 = !DILocation(line: 492, column: 24, scope: !4879)
!4884 = !DILocalVariable(name: "ref", scope: !4879, file: !3, line: 494, type: !2010)
!4885 = !DILocation(line: 494, column: 8, scope: !4879)
!4886 = !DILocalVariable(name: "i", scope: !4879, file: !3, line: 495, type: !7)
!4887 = !DILocation(line: 495, column: 12, scope: !4879)
!4888 = !DILocation(line: 497, column: 7, scope: !4889)
!4889 = distinct !DILexicalBlock(scope: !4879, file: !3, line: 497, column: 7)
!4890 = !DILocation(line: 497, column: 13, scope: !4889)
!4891 = !DILocation(line: 497, column: 7, scope: !4879)
!4892 = !DILocation(line: 498, column: 5, scope: !4889)
!4893 = !DILocation(line: 500, column: 10, scope: !4894)
!4894 = distinct !DILexicalBlock(scope: !4879, file: !3, line: 500, column: 3)
!4895 = !DILocation(line: 500, column: 8, scope: !4894)
!4896 = !DILocation(line: 500, column: 15, scope: !4897)
!4897 = distinct !DILexicalBlock(scope: !4894, file: !3, line: 500, column: 3)
!4898 = !DILocation(line: 500, column: 3, scope: !4894)
!4899 = !DILocation(line: 501, column: 11, scope: !4897)
!4900 = !DILocation(line: 501, column: 5, scope: !4897)
!4901 = !DILocation(line: 500, column: 57, scope: !4897)
!4902 = !DILocation(line: 500, column: 3, scope: !4897)
!4903 = distinct !{!4903, !4898, !4904}
!4904 = !DILocation(line: 501, column: 14, scope: !4894)
!4905 = !DILocation(line: 503, column: 3, scope: !4879)
!4906 = !DILocation(line: 504, column: 3, scope: !4879)
!4907 = !DILocation(line: 505, column: 3, scope: !4879)
!4908 = !DILocation(line: 507, column: 9, scope: !4879)
!4909 = !DILocation(line: 507, column: 3, scope: !4879)
!4910 = !DILocation(line: 508, column: 1, scope: !4879)
!4911 = distinct !DISubprogram(name: "make_rooted_chain", scope: !3, file: !3, line: 977, type: !4912, scopeLine: 978, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4912 = !DISubroutineType(types: !4913)
!4913 = !{!2080, !2010}
!4914 = !DILocalVariable(name: "ref", arg: 1, scope: !4911, file: !3, line: 977, type: !2010)
!4915 = !DILocation(line: 977, column: 25, scope: !4911)
!4916 = !DILocalVariable(name: "chain", scope: !4911, file: !3, line: 979, type: !2080)
!4917 = !DILocation(line: 979, column: 11, scope: !4911)
!4918 = !DILocation(line: 979, column: 19, scope: !4911)
!4919 = !DILocation(line: 981, column: 17, scope: !4911)
!4920 = !DILocation(line: 981, column: 3, scope: !4911)
!4921 = !DILocation(line: 981, column: 10, scope: !4911)
!4922 = !DILocation(line: 981, column: 15, scope: !4911)
!4923 = !DILocation(line: 983, column: 3, scope: !4911)
!4924 = !DILocation(line: 984, column: 32, scope: !4911)
!4925 = !DILocation(line: 984, column: 37, scope: !4911)
!4926 = !DILocation(line: 984, column: 3, scope: !4911)
!4927 = !DILocation(line: 984, column: 10, scope: !4911)
!4928 = !DILocation(line: 984, column: 30, scope: !4911)
!4929 = !DILocation(line: 986, column: 3, scope: !4911)
!4930 = !DILocation(line: 986, column: 8, scope: !4911)
!4931 = !DILocation(line: 986, column: 17, scope: !4911)
!4932 = !DILocation(line: 988, column: 10, scope: !4911)
!4933 = !DILocation(line: 988, column: 3, scope: !4911)
!4934 = distinct !DISubprogram(name: "add_ref_to_chain", scope: !3, file: !3, line: 921, type: !4935, scopeLine: 922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!4935 = !DISubroutineType(types: !4936)
!4936 = !{null, !2080, !2010}
!4937 = !DILocalVariable(name: "chain", arg: 1, scope: !4934, file: !3, line: 921, type: !2080)
!4938 = !DILocation(line: 921, column: 27, scope: !4934)
!4939 = !DILocalVariable(name: "ref", arg: 2, scope: !4934, file: !3, line: 921, type: !2010)
!4940 = !DILocation(line: 921, column: 39, scope: !4934)
!4941 = !DILocalVariable(name: "root", scope: !4934, file: !3, line: 923, type: !2010)
!4942 = !DILocation(line: 923, column: 8, scope: !4934)
!4943 = !DILocation(line: 923, column: 31, scope: !4934)
!4944 = !DILocation(line: 923, column: 15, scope: !4934)
!4945 = !DILocalVariable(name: "dist", scope: !4934, file: !3, line: 924, type: !701)
!4946 = !DILocation(line: 924, column: 14, scope: !4934)
!4947 = !DILocation(line: 926, column: 3, scope: !4934)
!4948 = !DILocation(line: 927, column: 26, scope: !4934)
!4949 = !DILocation(line: 927, column: 31, scope: !4934)
!4950 = !DILocation(line: 927, column: 55, scope: !4934)
!4951 = !DILocation(line: 927, column: 61, scope: !4934)
!4952 = !DILocation(line: 927, column: 39, scope: !4934)
!4953 = !DILocation(line: 927, column: 10, scope: !4934)
!4954 = !DILocation(line: 928, column: 44, scope: !4955)
!4955 = distinct !DILexicalBlock(scope: !4934, file: !3, line: 928, column: 7)
!4956 = !DILocation(line: 928, column: 24, scope: !4955)
!4957 = !DILocation(line: 928, column: 7, scope: !4955)
!4958 = !DILocation(line: 928, column: 65, scope: !4955)
!4959 = !DILocation(line: 928, column: 7, scope: !4934)
!4960 = !DILocation(line: 930, column: 13, scope: !4961)
!4961 = distinct !DILexicalBlock(scope: !4955, file: !3, line: 929, column: 5)
!4962 = !DILocation(line: 930, column: 7, scope: !4961)
!4963 = !DILocation(line: 931, column: 7, scope: !4961)
!4964 = !DILocation(line: 933, column: 3, scope: !4934)
!4965 = !DILocation(line: 935, column: 3, scope: !4934)
!4966 = !DILocation(line: 937, column: 19, scope: !4934)
!4967 = !DILocation(line: 937, column: 3, scope: !4934)
!4968 = !DILocation(line: 937, column: 8, scope: !4934)
!4969 = !DILocation(line: 937, column: 17, scope: !4934)
!4970 = !DILocation(line: 939, column: 7, scope: !4971)
!4971 = distinct !DILexicalBlock(scope: !4934, file: !3, line: 939, column: 7)
!4972 = !DILocation(line: 939, column: 12, scope: !4971)
!4973 = !DILocation(line: 939, column: 24, scope: !4971)
!4974 = !DILocation(line: 939, column: 31, scope: !4971)
!4975 = !DILocation(line: 939, column: 21, scope: !4971)
!4976 = !DILocation(line: 939, column: 7, scope: !4934)
!4977 = !DILocation(line: 941, column: 23, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 940, column: 5)
!4979 = !DILocation(line: 941, column: 28, scope: !4978)
!4980 = !DILocation(line: 941, column: 7, scope: !4978)
!4981 = !DILocation(line: 941, column: 14, scope: !4978)
!4982 = !DILocation(line: 941, column: 21, scope: !4978)
!4983 = !DILocation(line: 942, column: 7, scope: !4978)
!4984 = !DILocation(line: 942, column: 14, scope: !4978)
!4985 = !DILocation(line: 942, column: 32, scope: !4978)
!4986 = !DILocation(line: 943, column: 5, scope: !4978)
!4987 = !DILocation(line: 945, column: 7, scope: !4988)
!4988 = distinct !DILexicalBlock(scope: !4934, file: !3, line: 945, column: 7)
!4989 = !DILocation(line: 945, column: 12, scope: !4988)
!4990 = !DILocation(line: 945, column: 24, scope: !4988)
!4991 = !DILocation(line: 945, column: 31, scope: !4988)
!4992 = !DILocation(line: 945, column: 21, scope: !4988)
!4993 = !DILocation(line: 946, column: 7, scope: !4988)
!4994 = !DILocation(line: 946, column: 10, scope: !4988)
!4995 = !DILocation(line: 946, column: 15, scope: !4988)
!4996 = !DILocation(line: 946, column: 21, scope: !4988)
!4997 = !DILocation(line: 946, column: 27, scope: !4988)
!4998 = !DILocation(line: 946, column: 19, scope: !4988)
!4999 = !DILocation(line: 945, column: 7, scope: !4934)
!5000 = !DILocation(line: 947, column: 5, scope: !4988)
!5001 = !DILocation(line: 947, column: 12, scope: !4988)
!5002 = !DILocation(line: 947, column: 30, scope: !4988)
!5003 = !DILocation(line: 949, column: 33, scope: !4934)
!5004 = !DILocation(line: 949, column: 38, scope: !4934)
!5005 = !DILocation(line: 949, column: 3, scope: !4934)
!5006 = !DILocation(line: 949, column: 10, scope: !4934)
!5007 = !DILocation(line: 949, column: 30, scope: !4934)
!5008 = !DILocation(line: 950, column: 1, scope: !4934)
!5009 = distinct !DISubprogram(name: "VEC_dref_heap_safe_push", scope: !3, file: !3, line: 243, type: !5010, scopeLine: 243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5010 = !DISubroutineType(types: !5011)
!5011 = !{!2517, !4625, !2010}
!5012 = !DILocalVariable(name: "vec_", arg: 1, scope: !5009, file: !3, line: 243, type: !4625)
!5013 = !DILocation(line: 243, column: 1, scope: !5009)
!5014 = !DILocalVariable(name: "obj_", arg: 2, scope: !5009, file: !3, line: 243, type: !2010)
!5015 = distinct !DISubprogram(name: "VEC_dref_heap_reserve", scope: !3, file: !3, line: 243, type: !5016, scopeLine: 243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5016 = !DISubroutineType(types: !5017)
!5017 = !{!749, !4625, !749}
!5018 = !DILocalVariable(name: "vec_", arg: 1, scope: !5015, file: !3, line: 243, type: !4625)
!5019 = !DILocation(line: 243, column: 1, scope: !5015)
!5020 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5015, file: !3, line: 243, type: !749)
!5021 = !DILocalVariable(name: "extend", scope: !5015, file: !3, line: 243, type: !749)
!5022 = !DILocation(line: 243, column: 1, scope: !5023)
!5023 = distinct !DILexicalBlock(scope: !5015, file: !3, line: 243, column: 1)
!5024 = distinct !DISubprogram(name: "VEC_dref_base_space", scope: !3, file: !3, line: 242, type: !5025, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5025 = !DISubroutineType(types: !5026)
!5026 = !{!749, !4461, !749}
!5027 = !DILocalVariable(name: "vec_", arg: 1, scope: !5024, file: !3, line: 242, type: !4461)
!5028 = !DILocation(line: 242, column: 1, scope: !5024)
!5029 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5024, file: !3, line: 242, type: !749)
!5030 = distinct !DISubprogram(name: "VEC_chain_p_heap_reserve", scope: !3, file: !3, line: 299, type: !5031, scopeLine: 299, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5031 = !DISubroutineType(types: !5032)
!5032 = !{!749, !3656, !749}
!5033 = !DILocalVariable(name: "vec_", arg: 1, scope: !5030, file: !3, line: 299, type: !3656)
!5034 = !DILocation(line: 299, column: 1, scope: !5030)
!5035 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5030, file: !3, line: 299, type: !749)
!5036 = !DILocalVariable(name: "extend", scope: !5030, file: !3, line: 299, type: !749)
!5037 = !DILocation(line: 299, column: 1, scope: !5038)
!5038 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 299, column: 1)
!5039 = distinct !DISubprogram(name: "VEC_chain_p_base_quick_push", scope: !3, file: !3, line: 298, type: !5040, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5040 = !DISubroutineType(types: !5041)
!5041 = !{!2558, !5042, !2080}
!5042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2207, size: 64)
!5043 = !DILocalVariable(name: "vec_", arg: 1, scope: !5039, file: !3, line: 298, type: !5042)
!5044 = !DILocation(line: 298, column: 1, scope: !5039)
!5045 = !DILocalVariable(name: "obj_", arg: 2, scope: !5039, file: !3, line: 298, type: !2080)
!5046 = !DILocalVariable(name: "slot_", scope: !5039, file: !3, line: 298, type: !2558)
!5047 = distinct !DISubprogram(name: "VEC_chain_p_base_space", scope: !3, file: !3, line: 298, type: !5048, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5048 = !DISubroutineType(types: !5049)
!5049 = !{!749, !5042, !749}
!5050 = !DILocalVariable(name: "vec_", arg: 1, scope: !5047, file: !3, line: 298, type: !5042)
!5051 = !DILocation(line: 298, column: 1, scope: !5047)
!5052 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5047, file: !3, line: 298, type: !749)
!5053 = distinct !DISubprogram(name: "get_chain_root", scope: !3, file: !3, line: 913, type: !5054, scopeLine: 914, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5054 = !DISubroutineType(types: !5055)
!5055 = !{!2010, !2080}
!5056 = !DILocalVariable(name: "chain", arg: 1, scope: !5053, file: !3, line: 913, type: !2080)
!5057 = !DILocation(line: 913, column: 25, scope: !5053)
!5058 = !DILocation(line: 915, column: 10, scope: !5053)
!5059 = !DILocation(line: 915, column: 3, scope: !5053)
!5060 = distinct !DISubprogram(name: "find_looparound_phi", scope: !3, file: !3, line: 1068, type: !5061, scopeLine: 1069, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5061 = !DISubroutineType(types: !5062)
!5062 = !{!982, !1197, !2010, !2010}
!5063 = !DILocalVariable(name: "loop", arg: 1, scope: !5060, file: !3, line: 1068, type: !1197)
!5064 = !DILocation(line: 1068, column: 35, scope: !5060)
!5065 = !DILocalVariable(name: "ref", arg: 2, scope: !5060, file: !3, line: 1068, type: !2010)
!5066 = !DILocation(line: 1068, column: 46, scope: !5060)
!5067 = !DILocalVariable(name: "root", arg: 3, scope: !5060, file: !3, line: 1068, type: !2010)
!5068 = !DILocation(line: 1068, column: 56, scope: !5060)
!5069 = !DILocalVariable(name: "name", scope: !5060, file: !3, line: 1070, type: !652)
!5070 = !DILocation(line: 1070, column: 8, scope: !5060)
!5071 = !DILocalVariable(name: "init", scope: !5060, file: !3, line: 1070, type: !652)
!5072 = !DILocation(line: 1070, column: 14, scope: !5060)
!5073 = !DILocalVariable(name: "init_ref", scope: !5060, file: !3, line: 1070, type: !652)
!5074 = !DILocation(line: 1070, column: 20, scope: !5060)
!5075 = !DILocalVariable(name: "phi", scope: !5060, file: !3, line: 1071, type: !982)
!5076 = !DILocation(line: 1071, column: 10, scope: !5060)
!5077 = !DILocalVariable(name: "init_stmt", scope: !5060, file: !3, line: 1071, type: !982)
!5078 = !DILocation(line: 1071, column: 22, scope: !5060)
!5079 = !DILocalVariable(name: "latch", scope: !5060, file: !3, line: 1072, type: !962)
!5080 = !DILocation(line: 1072, column: 8, scope: !5060)
!5081 = !DILocation(line: 1072, column: 33, scope: !5060)
!5082 = !DILocation(line: 1072, column: 16, scope: !5060)
!5083 = !DILocalVariable(name: "init_dr", scope: !5060, file: !3, line: 1073, type: !2016)
!5084 = !DILocation(line: 1073, column: 25, scope: !5060)
!5085 = !DILocalVariable(name: "psi", scope: !5060, file: !3, line: 1074, type: !3983)
!5086 = !DILocation(line: 1074, column: 24, scope: !5060)
!5087 = !DILocation(line: 1076, column: 25, scope: !5088)
!5088 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 1076, column: 7)
!5089 = !DILocation(line: 1076, column: 30, scope: !5088)
!5090 = !DILocation(line: 1076, column: 7, scope: !5088)
!5091 = !DILocation(line: 1076, column: 7, scope: !5060)
!5092 = !DILocation(line: 1078, column: 11, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5094, file: !3, line: 1078, column: 11)
!5094 = distinct !DILexicalBlock(scope: !5088, file: !3, line: 1077, column: 5)
!5095 = !DILocation(line: 1078, column: 11, scope: !5094)
!5096 = !DILocation(line: 1079, column: 28, scope: !5093)
!5097 = !DILocation(line: 1079, column: 33, scope: !5093)
!5098 = !DILocation(line: 1079, column: 9, scope: !5093)
!5099 = !DILocation(line: 1079, column: 7, scope: !5093)
!5100 = !DILocation(line: 1079, column: 2, scope: !5093)
!5101 = !DILocation(line: 1081, column: 29, scope: !5093)
!5102 = !DILocation(line: 1081, column: 34, scope: !5093)
!5103 = !DILocation(line: 1081, column: 9, scope: !5093)
!5104 = !DILocation(line: 1081, column: 7, scope: !5093)
!5105 = !DILocation(line: 1082, column: 5, scope: !5094)
!5106 = !DILocation(line: 1084, column: 12, scope: !5088)
!5107 = !DILocation(line: 1084, column: 10, scope: !5088)
!5108 = !DILocation(line: 1085, column: 8, scope: !5109)
!5109 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 1085, column: 7)
!5110 = !DILocation(line: 1085, column: 7, scope: !5060)
!5111 = !DILocation(line: 1086, column: 5, scope: !5109)
!5112 = !DILocation(line: 1088, column: 30, scope: !5113)
!5113 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 1088, column: 3)
!5114 = !DILocation(line: 1088, column: 36, scope: !5113)
!5115 = !DILocation(line: 1088, column: 14, scope: !5113)
!5116 = !DILocation(line: 1088, column: 8, scope: !5113)
!5117 = !DILocation(line: 1088, column: 46, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 1088, column: 3)
!5119 = !DILocation(line: 1088, column: 45, scope: !5118)
!5120 = !DILocation(line: 1088, column: 3, scope: !5113)
!5121 = !DILocation(line: 1090, column: 13, scope: !5122)
!5122 = distinct !DILexicalBlock(scope: !5118, file: !3, line: 1089, column: 5)
!5123 = !DILocation(line: 1090, column: 11, scope: !5122)
!5124 = !DILocation(line: 1091, column: 11, scope: !5125)
!5125 = distinct !DILexicalBlock(scope: !5122, file: !3, line: 1091, column: 11)
!5126 = !DILocation(line: 1091, column: 49, scope: !5125)
!5127 = !DILocation(line: 1091, column: 46, scope: !5125)
!5128 = !DILocation(line: 1091, column: 11, scope: !5122)
!5129 = !DILocation(line: 1092, column: 2, scope: !5125)
!5130 = !DILocation(line: 1093, column: 5, scope: !5122)
!5131 = !DILocation(line: 1088, column: 63, scope: !5118)
!5132 = !DILocation(line: 1088, column: 3, scope: !5118)
!5133 = distinct !{!5133, !5120, !5134}
!5134 = !DILocation(line: 1093, column: 5, scope: !5113)
!5135 = !DILocation(line: 1095, column: 7, scope: !5136)
!5136 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 1095, column: 7)
!5137 = !DILocation(line: 1095, column: 7, scope: !5060)
!5138 = !DILocation(line: 1096, column: 5, scope: !5136)
!5139 = !DILocation(line: 1098, column: 10, scope: !5060)
!5140 = !DILocation(line: 1098, column: 8, scope: !5060)
!5141 = !DILocation(line: 1099, column: 7, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 1099, column: 7)
!5143 = !DILocation(line: 1099, column: 24, scope: !5142)
!5144 = !DILocation(line: 1099, column: 7, scope: !5060)
!5145 = !DILocation(line: 1100, column: 5, scope: !5142)
!5146 = !DILocation(line: 1101, column: 15, scope: !5060)
!5147 = !DILocation(line: 1101, column: 13, scope: !5060)
!5148 = !DILocation(line: 1102, column: 20, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 1102, column: 7)
!5150 = !DILocation(line: 1102, column: 7, scope: !5149)
!5151 = !DILocation(line: 1102, column: 31, scope: !5149)
!5152 = !DILocation(line: 1102, column: 7, scope: !5060)
!5153 = !DILocation(line: 1103, column: 5, scope: !5149)
!5154 = !DILocation(line: 1104, column: 3, scope: !5060)
!5155 = !DILocation(line: 1106, column: 34, scope: !5060)
!5156 = !DILocation(line: 1106, column: 14, scope: !5060)
!5157 = !DILocation(line: 1106, column: 12, scope: !5060)
!5158 = !DILocation(line: 1107, column: 8, scope: !5159)
!5159 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 1107, column: 7)
!5160 = !DILocation(line: 1108, column: 7, scope: !5159)
!5161 = !DILocation(line: 1108, column: 11, scope: !5159)
!5162 = !DILocation(line: 1107, column: 7, scope: !5060)
!5163 = !DILocation(line: 1109, column: 5, scope: !5159)
!5164 = !DILocation(line: 1113, column: 3, scope: !5060)
!5165 = !DILocation(line: 1114, column: 23, scope: !5060)
!5166 = !DILocation(line: 1114, column: 3, scope: !5060)
!5167 = !DILocation(line: 1114, column: 21, scope: !5060)
!5168 = !DILocation(line: 1115, column: 24, scope: !5060)
!5169 = !DILocation(line: 1115, column: 3, scope: !5060)
!5170 = !DILocation(line: 1115, column: 22, scope: !5060)
!5171 = !DILocation(line: 1116, column: 8, scope: !5172)
!5172 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 1116, column: 7)
!5173 = !DILocation(line: 1116, column: 7, scope: !5060)
!5174 = !DILocation(line: 1117, column: 5, scope: !5172)
!5175 = !DILocation(line: 1119, column: 39, scope: !5176)
!5176 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 1119, column: 7)
!5177 = !DILocation(line: 1119, column: 44, scope: !5176)
!5178 = !DILocation(line: 1119, column: 53, scope: !5176)
!5179 = !DILocation(line: 1119, column: 58, scope: !5176)
!5180 = !DILocation(line: 1119, column: 64, scope: !5176)
!5181 = !DILocation(line: 1119, column: 8, scope: !5176)
!5182 = !DILocation(line: 1119, column: 7, scope: !5060)
!5183 = !DILocation(line: 1120, column: 5, scope: !5176)
!5184 = !DILocation(line: 1122, column: 10, scope: !5060)
!5185 = !DILocation(line: 1122, column: 3, scope: !5060)
!5186 = !DILocation(line: 1123, column: 1, scope: !5060)
!5187 = distinct !DISubprogram(name: "insert_looparound_copy", scope: !3, file: !3, line: 1128, type: !5188, scopeLine: 1129, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5188 = !DISubroutineType(types: !5189)
!5189 = !{null, !2080, !2010, !982}
!5190 = !DILocalVariable(name: "chain", arg: 1, scope: !5187, file: !3, line: 1128, type: !2080)
!5191 = !DILocation(line: 1128, column: 33, scope: !5187)
!5192 = !DILocalVariable(name: "ref", arg: 2, scope: !5187, file: !3, line: 1128, type: !2010)
!5193 = !DILocation(line: 1128, column: 45, scope: !5187)
!5194 = !DILocalVariable(name: "phi", arg: 3, scope: !5187, file: !3, line: 1128, type: !982)
!5195 = !DILocation(line: 1128, column: 57, scope: !5187)
!5196 = !DILocalVariable(name: "nw", scope: !5187, file: !3, line: 1130, type: !2010)
!5197 = !DILocation(line: 1130, column: 8, scope: !5187)
!5198 = !DILocation(line: 1130, column: 13, scope: !5187)
!5199 = !DILocalVariable(name: "aref", scope: !5187, file: !3, line: 1130, type: !2010)
!5200 = !DILocation(line: 1130, column: 36, scope: !5187)
!5201 = !DILocalVariable(name: "i", scope: !5187, file: !3, line: 1131, type: !7)
!5202 = !DILocation(line: 1131, column: 12, scope: !5187)
!5203 = !DILocation(line: 1133, column: 14, scope: !5187)
!5204 = !DILocation(line: 1133, column: 3, scope: !5187)
!5205 = !DILocation(line: 1133, column: 7, scope: !5187)
!5206 = !DILocation(line: 1133, column: 12, scope: !5187)
!5207 = !DILocation(line: 1134, column: 18, scope: !5187)
!5208 = !DILocation(line: 1134, column: 23, scope: !5187)
!5209 = !DILocation(line: 1134, column: 32, scope: !5187)
!5210 = !DILocation(line: 1134, column: 3, scope: !5187)
!5211 = !DILocation(line: 1134, column: 7, scope: !5187)
!5212 = !DILocation(line: 1134, column: 16, scope: !5187)
!5213 = !DILocation(line: 1135, column: 3, scope: !5187)
!5214 = !DILocation(line: 1135, column: 7, scope: !5187)
!5215 = !DILocation(line: 1135, column: 23, scope: !5187)
!5216 = !DILocation(line: 1137, column: 10, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5187, file: !3, line: 1137, column: 3)
!5218 = !DILocation(line: 1137, column: 8, scope: !5217)
!5219 = !DILocation(line: 1137, column: 15, scope: !5220)
!5220 = distinct !DILexicalBlock(scope: !5217, file: !3, line: 1137, column: 3)
!5221 = !DILocation(line: 1137, column: 3, scope: !5217)
!5222 = !DILocation(line: 1138, column: 9, scope: !5223)
!5223 = distinct !DILexicalBlock(scope: !5220, file: !3, line: 1138, column: 9)
!5224 = !DILocation(line: 1138, column: 15, scope: !5223)
!5225 = !DILocation(line: 1138, column: 27, scope: !5223)
!5226 = !DILocation(line: 1138, column: 31, scope: !5223)
!5227 = !DILocation(line: 1138, column: 24, scope: !5223)
!5228 = !DILocation(line: 1138, column: 9, scope: !5220)
!5229 = !DILocation(line: 1139, column: 7, scope: !5223)
!5230 = !DILocation(line: 1137, column: 58, scope: !5220)
!5231 = !DILocation(line: 1137, column: 3, scope: !5220)
!5232 = distinct !{!5232, !5221, !5233}
!5233 = !DILocation(line: 1139, column: 7, scope: !5217)
!5234 = !DILocation(line: 1140, column: 3, scope: !5187)
!5235 = !DILocation(line: 1142, column: 7, scope: !5236)
!5236 = distinct !DILexicalBlock(scope: !5187, file: !3, line: 1142, column: 7)
!5237 = !DILocation(line: 1142, column: 11, scope: !5236)
!5238 = !DILocation(line: 1142, column: 22, scope: !5236)
!5239 = !DILocation(line: 1142, column: 29, scope: !5236)
!5240 = !DILocation(line: 1142, column: 20, scope: !5236)
!5241 = !DILocation(line: 1142, column: 7, scope: !5187)
!5242 = !DILocation(line: 1144, column: 23, scope: !5243)
!5243 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 1143, column: 5)
!5244 = !DILocation(line: 1144, column: 27, scope: !5243)
!5245 = !DILocation(line: 1144, column: 7, scope: !5243)
!5246 = !DILocation(line: 1144, column: 14, scope: !5243)
!5247 = !DILocation(line: 1144, column: 21, scope: !5243)
!5248 = !DILocation(line: 1145, column: 7, scope: !5243)
!5249 = !DILocation(line: 1145, column: 14, scope: !5243)
!5250 = !DILocation(line: 1145, column: 32, scope: !5243)
!5251 = !DILocation(line: 1146, column: 5, scope: !5243)
!5252 = !DILocation(line: 1147, column: 1, scope: !5187)
!5253 = distinct !DISubprogram(name: "is_gimple_assign", scope: !391, file: !391, line: 1677, type: !3189, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5254 = !DILocalVariable(name: "gs", arg: 1, scope: !5253, file: !391, line: 1677, type: !2347)
!5255 = !DILocation(line: 1677, column: 32, scope: !5253)
!5256 = !DILocation(line: 1679, column: 23, scope: !5253)
!5257 = !DILocation(line: 1679, column: 10, scope: !5253)
!5258 = !DILocation(line: 1679, column: 27, scope: !5253)
!5259 = !DILocation(line: 1679, column: 3, scope: !5253)
!5260 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !391, file: !391, line: 1694, type: !2699, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5261 = !DILocalVariable(name: "gs", arg: 1, scope: !5260, file: !391, line: 1694, type: !2347)
!5262 = !DILocation(line: 1694, column: 33, scope: !5260)
!5263 = !DILocation(line: 1697, column: 21, scope: !5260)
!5264 = !DILocation(line: 1697, column: 10, scope: !5260)
!5265 = !DILocation(line: 1697, column: 3, scope: !5260)
!5266 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !391, file: !391, line: 1727, type: !2699, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5267 = !DILocalVariable(name: "gs", arg: 1, scope: !5266, file: !391, line: 1727, type: !2347)
!5268 = !DILocation(line: 1727, column: 34, scope: !5266)
!5269 = !DILocation(line: 1730, column: 21, scope: !5266)
!5270 = !DILocation(line: 1730, column: 10, scope: !5266)
!5271 = !DILocation(line: 1730, column: 3, scope: !5266)
!5272 = distinct !DISubprogram(name: "gsi_end_p", scope: !391, file: !391, line: 4467, type: !5273, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5273 = !DISubroutineType(types: !5274)
!5274 = !{!772, !3983}
!5275 = !DILocalVariable(name: "i", arg: 1, scope: !5272, file: !391, line: 4467, type: !3983)
!5276 = !DILocation(line: 4467, column: 33, scope: !5272)
!5277 = !DILocation(line: 4469, column: 12, scope: !5272)
!5278 = !DILocation(line: 4469, column: 16, scope: !5272)
!5279 = !DILocation(line: 4469, column: 10, scope: !5272)
!5280 = !DILocation(line: 4469, column: 3, scope: !5272)
!5281 = distinct !DISubprogram(name: "gsi_stmt", scope: !391, file: !391, line: 4501, type: !5282, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5282 = !DISubroutineType(types: !5283)
!5283 = !{!982, !3983}
!5284 = !DILocalVariable(name: "i", arg: 1, scope: !5281, file: !391, line: 4501, type: !3983)
!5285 = !DILocation(line: 4501, column: 32, scope: !5281)
!5286 = !DILocation(line: 4503, column: 12, scope: !5281)
!5287 = !DILocation(line: 4503, column: 17, scope: !5281)
!5288 = !DILocation(line: 4503, column: 3, scope: !5281)
!5289 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !2666, file: !2666, line: 427, type: !5290, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5290 = !DISubroutineType(types: !5291)
!5291 = !{!652, !2218}
!5292 = !DILocalVariable(name: "use", arg: 1, scope: !5289, file: !2666, line: 427, type: !2218)
!5293 = !DILocation(line: 427, column: 33, scope: !5289)
!5294 = !DILocation(line: 429, column: 12, scope: !5289)
!5295 = !DILocation(line: 429, column: 17, scope: !5289)
!5296 = !DILocation(line: 429, column: 10, scope: !5289)
!5297 = !DILocation(line: 429, column: 3, scope: !5289)
!5298 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !2666, file: !2666, line: 442, type: !5299, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5299 = !DISubroutineType(types: !5300)
!5300 = !{!2218, !982, !749}
!5301 = !DILocalVariable(name: "gs", arg: 1, scope: !5298, file: !2666, line: 442, type: !982)
!5302 = !DILocation(line: 442, column: 36, scope: !5298)
!5303 = !DILocalVariable(name: "i", arg: 2, scope: !5298, file: !2666, line: 442, type: !749)
!5304 = !DILocation(line: 442, column: 44, scope: !5298)
!5305 = !DILocation(line: 444, column: 27, scope: !5298)
!5306 = !DILocation(line: 444, column: 31, scope: !5298)
!5307 = !DILocation(line: 444, column: 11, scope: !5298)
!5308 = !DILocation(line: 444, column: 35, scope: !5298)
!5309 = !DILocation(line: 444, column: 3, scope: !5298)
!5310 = distinct !DISubprogram(name: "gsi_next", scope: !391, file: !391, line: 4485, type: !5311, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5311 = !DISubroutineType(types: !5312)
!5312 = !{null, !5313}
!5313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3983, size: 64)
!5314 = !DILocalVariable(name: "i", arg: 1, scope: !5310, file: !391, line: 4485, type: !5313)
!5315 = !DILocation(line: 4485, column: 33, scope: !5310)
!5316 = !DILocation(line: 4487, column: 12, scope: !5310)
!5317 = !DILocation(line: 4487, column: 15, scope: !5310)
!5318 = !DILocation(line: 4487, column: 20, scope: !5310)
!5319 = !DILocation(line: 4487, column: 3, scope: !5310)
!5320 = !DILocation(line: 4487, column: 6, scope: !5310)
!5321 = !DILocation(line: 4487, column: 10, scope: !5310)
!5322 = !DILocation(line: 4488, column: 1, scope: !5310)
!5323 = distinct !DISubprogram(name: "valid_initializer_p", scope: !3, file: !3, line: 1024, type: !5324, scopeLine: 1026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5324 = !DISubroutineType(types: !5325)
!5325 = !{!772, !2015, !7, !2015}
!5326 = !DILocalVariable(name: "ref", arg: 1, scope: !5323, file: !3, line: 1024, type: !2015)
!5327 = !DILocation(line: 1024, column: 45, scope: !5323)
!5328 = !DILocalVariable(name: "distance", arg: 2, scope: !5323, file: !3, line: 1025, type: !7)
!5329 = !DILocation(line: 1025, column: 17, scope: !5323)
!5330 = !DILocalVariable(name: "root", arg: 3, scope: !5323, file: !3, line: 1025, type: !2015)
!5331 = !DILocation(line: 1025, column: 50, scope: !5323)
!5332 = !DILocalVariable(name: "diff", scope: !5323, file: !3, line: 1027, type: !4348)
!5333 = !DILocation(line: 1027, column: 12, scope: !5323)
!5334 = !DILocalVariable(name: "base", scope: !5323, file: !3, line: 1027, type: !4348)
!5335 = !DILocation(line: 1027, column: 18, scope: !5323)
!5336 = !DILocalVariable(name: "step", scope: !5323, file: !3, line: 1027, type: !4348)
!5337 = !DILocation(line: 1027, column: 24, scope: !5323)
!5338 = !DILocalVariable(name: "off", scope: !5323, file: !3, line: 1028, type: !701)
!5339 = !DILocation(line: 1028, column: 14, scope: !5323)
!5340 = !DILocation(line: 1031, column: 25, scope: !5341)
!5341 = distinct !DILexicalBlock(scope: !5323, file: !3, line: 1031, column: 7)
!5342 = !DILocation(line: 1031, column: 48, scope: !5341)
!5343 = !DILocation(line: 1031, column: 8, scope: !5341)
!5344 = !DILocation(line: 1031, column: 7, scope: !5323)
!5345 = !DILocation(line: 1032, column: 5, scope: !5341)
!5346 = !DILocation(line: 1036, column: 3, scope: !5323)
!5347 = !DILocation(line: 1040, column: 22, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5323, file: !3, line: 1040, column: 7)
!5349 = !DILocation(line: 1040, column: 7, scope: !5348)
!5350 = !DILocation(line: 1040, column: 7, scope: !5323)
!5351 = !DILocation(line: 1041, column: 30, scope: !5348)
!5352 = !DILocation(line: 1041, column: 47, scope: !5348)
!5353 = !DILocation(line: 1041, column: 13, scope: !5348)
!5354 = !DILocation(line: 1042, column: 6, scope: !5348)
!5355 = !DILocation(line: 1042, column: 26, scope: !5348)
!5356 = !DILocation(line: 1042, column: 41, scope: !5348)
!5357 = !DILocation(line: 1042, column: 9, scope: !5348)
!5358 = !DILocation(line: 0, scope: !5348)
!5359 = !DILocation(line: 1041, column: 12, scope: !5348)
!5360 = !DILocation(line: 1041, column: 5, scope: !5348)
!5361 = !DILocation(line: 1046, column: 30, scope: !5323)
!5362 = !DILocation(line: 1046, column: 3, scope: !5323)
!5363 = !DILocation(line: 1047, column: 30, scope: !5323)
!5364 = !DILocation(line: 1047, column: 3, scope: !5323)
!5365 = !DILocation(line: 1048, column: 33, scope: !5323)
!5366 = !DILocation(line: 1048, column: 3, scope: !5323)
!5367 = !DILocation(line: 1049, column: 3, scope: !5323)
!5368 = !DILocation(line: 1051, column: 35, scope: !5323)
!5369 = !DILocation(line: 1051, column: 51, scope: !5323)
!5370 = !DILocation(line: 1051, column: 3, scope: !5323)
!5371 = !DILocation(line: 1053, column: 8, scope: !5372)
!5372 = distinct !DILexicalBlock(scope: !5323, file: !3, line: 1053, column: 7)
!5373 = !DILocation(line: 1053, column: 7, scope: !5323)
!5374 = !DILocation(line: 1054, column: 5, scope: !5372)
!5375 = !DILocation(line: 1056, column: 53, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5323, file: !3, line: 1056, column: 7)
!5377 = !DILocation(line: 1056, column: 33, scope: !5376)
!5378 = !DILocation(line: 1056, column: 8, scope: !5376)
!5379 = !DILocation(line: 1056, column: 7, scope: !5323)
!5380 = !DILocation(line: 1057, column: 5, scope: !5376)
!5381 = !DILocation(line: 1059, column: 3, scope: !5323)
!5382 = !DILocation(line: 1060, column: 1, scope: !5323)
!5383 = distinct !DISubprogram(name: "gimple_op", scope: !391, file: !391, line: 1631, type: !5384, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5384 = !DISubroutineType(types: !5385)
!5385 = !{!652, !2347, !7}
!5386 = !DILocalVariable(name: "gs", arg: 1, scope: !5383, file: !391, line: 1631, type: !2347)
!5387 = !DILocation(line: 1631, column: 25, scope: !5383)
!5388 = !DILocalVariable(name: "i", arg: 2, scope: !5383, file: !391, line: 1631, type: !7)
!5389 = !DILocation(line: 1631, column: 38, scope: !5383)
!5390 = !DILocation(line: 1633, column: 23, scope: !5391)
!5391 = distinct !DILexicalBlock(scope: !5383, file: !391, line: 1633, column: 7)
!5392 = !DILocation(line: 1633, column: 7, scope: !5391)
!5393 = !DILocation(line: 1633, column: 7, scope: !5383)
!5394 = !DILocation(line: 1638, column: 26, scope: !5395)
!5395 = distinct !DILexicalBlock(scope: !5391, file: !391, line: 1634, column: 5)
!5396 = !DILocation(line: 1638, column: 14, scope: !5395)
!5397 = !DILocation(line: 1638, column: 50, scope: !5395)
!5398 = !DILocation(line: 1638, column: 7, scope: !5395)
!5399 = !DILocation(line: 1641, column: 5, scope: !5391)
!5400 = !DILocation(line: 1642, column: 1, scope: !5383)
!5401 = distinct !DISubprogram(name: "gimple_ops", scope: !391, file: !391, line: 1614, type: !2676, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5402 = !DILocalVariable(name: "gs", arg: 1, scope: !5401, file: !391, line: 1614, type: !982)
!5403 = !DILocation(line: 1614, column: 20, scope: !5401)
!5404 = !DILocalVariable(name: "off", scope: !5401, file: !391, line: 1616, type: !1127)
!5405 = !DILocation(line: 1616, column: 10, scope: !5401)
!5406 = !DILocation(line: 1621, column: 56, scope: !5401)
!5407 = !DILocation(line: 1621, column: 28, scope: !5401)
!5408 = !DILocation(line: 1621, column: 9, scope: !5401)
!5409 = !DILocation(line: 1621, column: 7, scope: !5401)
!5410 = !DILocation(line: 1622, column: 3, scope: !5401)
!5411 = !DILocation(line: 1624, column: 29, scope: !5401)
!5412 = !DILocation(line: 1624, column: 20, scope: !5401)
!5413 = !DILocation(line: 1624, column: 34, scope: !5401)
!5414 = !DILocation(line: 1624, column: 32, scope: !5401)
!5415 = !DILocation(line: 1624, column: 10, scope: !5401)
!5416 = !DILocation(line: 1624, column: 3, scope: !5401)
!5417 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !391, file: !391, line: 1073, type: !5418, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5418 = !DISubroutineType(types: !5419)
!5419 = !{!469, !982}
!5420 = !DILocalVariable(name: "gs", arg: 1, scope: !5417, file: !391, line: 1073, type: !982)
!5421 = !DILocation(line: 1073, column: 36, scope: !5417)
!5422 = !DILocation(line: 1075, column: 37, scope: !5417)
!5423 = !DILocation(line: 1075, column: 24, scope: !5417)
!5424 = !DILocation(line: 1075, column: 10, scope: !5417)
!5425 = !DILocation(line: 1075, column: 3, scope: !5417)
!5426 = distinct !DISubprogram(name: "gss_for_code", scope: !391, file: !391, line: 1061, type: !5427, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5427 = !DISubroutineType(types: !5428)
!5428 = !{!469, !390}
!5429 = !DILocalVariable(name: "code", arg: 1, scope: !5426, file: !391, line: 1061, type: !390)
!5430 = !DILocation(line: 1061, column: 32, scope: !5426)
!5431 = !DILocation(line: 1066, column: 24, scope: !5426)
!5432 = !DILocation(line: 1066, column: 10, scope: !5426)
!5433 = !DILocation(line: 1066, column: 3, scope: !5426)
!5434 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !391, file: !391, line: 3100, type: !5435, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5435 = !DISubroutineType(types: !5436)
!5436 = !{!5437, !982, !7}
!5437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1085, size: 64)
!5438 = !DILocalVariable(name: "gs", arg: 1, scope: !5434, file: !391, line: 3100, type: !982)
!5439 = !DILocation(line: 3100, column: 24, scope: !5434)
!5440 = !DILocalVariable(name: "index", arg: 2, scope: !5434, file: !391, line: 3100, type: !7)
!5441 = !DILocation(line: 3100, column: 37, scope: !5434)
!5442 = !DILocation(line: 3103, column: 3, scope: !5434)
!5443 = !DILocation(line: 3104, column: 12, scope: !5434)
!5444 = !DILocation(line: 3104, column: 16, scope: !5434)
!5445 = !DILocation(line: 3104, column: 27, scope: !5434)
!5446 = !DILocation(line: 3104, column: 32, scope: !5434)
!5447 = !DILocation(line: 3104, column: 3, scope: !5434)
!5448 = distinct !DISubprogram(name: "double_int_equal_p", scope: !702, file: !702, line: 176, type: !5449, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5449 = !DISubroutineType(types: !5450)
!5450 = !{!772, !701, !701}
!5451 = !DILocalVariable(name: "cst1", arg: 1, scope: !5448, file: !702, line: 176, type: !701)
!5452 = !DILocation(line: 176, column: 32, scope: !5448)
!5453 = !DILocalVariable(name: "cst2", arg: 2, scope: !5448, file: !702, line: 176, type: !701)
!5454 = !DILocation(line: 176, column: 49, scope: !5448)
!5455 = !DILocation(line: 178, column: 15, scope: !5448)
!5456 = !DILocation(line: 178, column: 27, scope: !5448)
!5457 = !DILocation(line: 178, column: 19, scope: !5448)
!5458 = !DILocation(line: 178, column: 31, scope: !5448)
!5459 = !DILocation(line: 178, column: 39, scope: !5448)
!5460 = !DILocation(line: 178, column: 52, scope: !5448)
!5461 = !DILocation(line: 178, column: 44, scope: !5448)
!5462 = !DILocation(line: 0, scope: !5448)
!5463 = !DILocation(line: 178, column: 10, scope: !5448)
!5464 = !DILocation(line: 178, column: 3, scope: !5448)
!5465 = distinct !DISubprogram(name: "VEC_dref_heap_safe_insert", scope: !3, file: !3, line: 243, type: !5466, scopeLine: 243, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5466 = !DISubroutineType(types: !5467)
!5467 = !{!2517, !4625, !7, !2010}
!5468 = !DILocalVariable(name: "vec_", arg: 1, scope: !5465, file: !3, line: 243, type: !4625)
!5469 = !DILocation(line: 243, column: 1, scope: !5465)
!5470 = !DILocalVariable(name: "ix_", arg: 2, scope: !5465, file: !3, line: 243, type: !7)
!5471 = !DILocalVariable(name: "obj_", arg: 3, scope: !5465, file: !3, line: 243, type: !2010)
!5472 = distinct !DISubprogram(name: "VEC_dref_base_quick_insert", scope: !3, file: !3, line: 242, type: !5473, scopeLine: 242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5473 = !DISubroutineType(types: !5474)
!5474 = !{!2517, !4461, !7, !2010}
!5475 = !DILocalVariable(name: "vec_", arg: 1, scope: !5472, file: !3, line: 242, type: !4461)
!5476 = !DILocation(line: 242, column: 1, scope: !5472)
!5477 = !DILocalVariable(name: "ix_", arg: 2, scope: !5472, file: !3, line: 242, type: !7)
!5478 = !DILocalVariable(name: "obj_", arg: 3, scope: !5472, file: !3, line: 242, type: !2010)
!5479 = !DILocalVariable(name: "slot_", scope: !5472, file: !3, line: 242, type: !2517)
!5480 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !164, file: !164, line: 184, type: !5481, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5481 = !DISubroutineType(types: !5482)
!5482 = !{null, !5483}
!5483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2036, size: 64)
!5484 = !DILocalVariable(name: "vec_", arg: 1, scope: !5480, file: !164, line: 184, type: !5483)
!5485 = !DILocation(line: 184, column: 1, scope: !5480)
!5486 = !DILocation(line: 184, column: 1, scope: !5487)
!5487 = distinct !DILexicalBlock(scope: !5480, file: !164, line: 184, column: 1)
!5488 = distinct !DISubprogram(name: "VEC_chain_p_base_length", scope: !3, file: !3, line: 298, type: !5489, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5489 = !DISubroutineType(types: !5490)
!5490 = !{!7, !2556}
!5491 = !DILocalVariable(name: "vec_", arg: 1, scope: !5488, file: !3, line: 298, type: !2556)
!5492 = !DILocation(line: 298, column: 1, scope: !5488)
!5493 = distinct !DISubprogram(name: "VEC_chain_p_base_index", scope: !3, file: !3, line: 298, type: !5494, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5494 = !DISubroutineType(types: !5495)
!5495 = !{!2080, !2556, !7}
!5496 = !DILocalVariable(name: "vec_", arg: 1, scope: !5493, file: !3, line: 298, type: !2556)
!5497 = !DILocation(line: 298, column: 1, scope: !5493)
!5498 = !DILocalVariable(name: "ix_", arg: 2, scope: !5493, file: !3, line: 298, type: !7)
!5499 = !DILocation(line: 0, scope: !5493)
!5500 = distinct !DISubprogram(name: "prepare_initializers_chain", scope: !3, file: !3, line: 2384, type: !5501, scopeLine: 2385, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5501 = !DISubroutineType(types: !5502)
!5502 = !{!772, !1197, !2080}
!5503 = !DILocalVariable(name: "loop", arg: 1, scope: !5500, file: !3, line: 2384, type: !1197)
!5504 = !DILocation(line: 2384, column: 42, scope: !5500)
!5505 = !DILocalVariable(name: "chain", arg: 2, scope: !5500, file: !3, line: 2384, type: !2080)
!5506 = !DILocation(line: 2384, column: 56, scope: !5500)
!5507 = !DILocalVariable(name: "i", scope: !5500, file: !3, line: 2386, type: !7)
!5508 = !DILocation(line: 2386, column: 12, scope: !5500)
!5509 = !DILocalVariable(name: "n", scope: !5500, file: !3, line: 2386, type: !7)
!5510 = !DILocation(line: 2386, column: 15, scope: !5500)
!5511 = !DILocation(line: 2386, column: 20, scope: !5500)
!5512 = !DILocation(line: 2386, column: 27, scope: !5500)
!5513 = !DILocation(line: 2386, column: 32, scope: !5500)
!5514 = !DILocation(line: 2386, column: 19, scope: !5500)
!5515 = !DILocation(line: 2386, column: 55, scope: !5500)
!5516 = !DILocation(line: 2386, column: 62, scope: !5500)
!5517 = !DILocalVariable(name: "dr", scope: !5500, file: !3, line: 2387, type: !2015)
!5518 = !DILocation(line: 2387, column: 26, scope: !5500)
!5519 = !DILocation(line: 2387, column: 47, scope: !5500)
!5520 = !DILocation(line: 2387, column: 31, scope: !5500)
!5521 = !DILocation(line: 2387, column: 55, scope: !5500)
!5522 = !DILocalVariable(name: "init", scope: !5500, file: !3, line: 2388, type: !652)
!5523 = !DILocation(line: 2388, column: 8, scope: !5500)
!5524 = !DILocalVariable(name: "stmts", scope: !5500, file: !3, line: 2389, type: !972)
!5525 = !DILocation(line: 2389, column: 14, scope: !5500)
!5526 = !DILocalVariable(name: "laref", scope: !5500, file: !3, line: 2390, type: !2010)
!5527 = !DILocation(line: 2390, column: 8, scope: !5500)
!5528 = !DILocalVariable(name: "entry", scope: !5500, file: !3, line: 2391, type: !962)
!5529 = !DILocation(line: 2391, column: 8, scope: !5500)
!5530 = !DILocation(line: 2391, column: 37, scope: !5500)
!5531 = !DILocation(line: 2391, column: 16, scope: !5500)
!5532 = !DILocation(line: 2395, column: 18, scope: !5500)
!5533 = !DILocation(line: 2395, column: 3, scope: !5500)
!5534 = !DILocation(line: 2395, column: 10, scope: !5500)
!5535 = !DILocation(line: 2395, column: 16, scope: !5500)
!5536 = !DILocation(line: 2396, column: 10, scope: !5537)
!5537 = distinct !DILexicalBlock(scope: !5500, file: !3, line: 2396, column: 3)
!5538 = !DILocation(line: 2396, column: 8, scope: !5537)
!5539 = !DILocation(line: 2396, column: 15, scope: !5540)
!5540 = distinct !DILexicalBlock(scope: !5537, file: !3, line: 2396, column: 3)
!5541 = !DILocation(line: 2396, column: 19, scope: !5540)
!5542 = !DILocation(line: 2396, column: 17, scope: !5540)
!5543 = !DILocation(line: 2396, column: 3, scope: !5537)
!5544 = !DILocation(line: 2397, column: 5, scope: !5540)
!5545 = !DILocation(line: 2396, column: 23, scope: !5540)
!5546 = !DILocation(line: 2396, column: 3, scope: !5540)
!5547 = distinct !{!5547, !5543, !5548}
!5548 = !DILocation(line: 2397, column: 5, scope: !5537)
!5549 = !DILocation(line: 2401, column: 10, scope: !5550)
!5550 = distinct !DILexicalBlock(scope: !5500, file: !3, line: 2401, column: 3)
!5551 = !DILocation(line: 2401, column: 8, scope: !5550)
!5552 = !DILocation(line: 2401, column: 15, scope: !5553)
!5553 = distinct !DILexicalBlock(scope: !5550, file: !3, line: 2401, column: 3)
!5554 = !DILocation(line: 2401, column: 3, scope: !5550)
!5555 = !DILocation(line: 2403, column: 24, scope: !5556)
!5556 = distinct !DILexicalBlock(scope: !5557, file: !3, line: 2403, column: 11)
!5557 = distinct !DILexicalBlock(scope: !5553, file: !3, line: 2402, column: 5)
!5558 = !DILocation(line: 2403, column: 31, scope: !5556)
!5559 = !DILocation(line: 2403, column: 11, scope: !5556)
!5560 = !DILocation(line: 2403, column: 37, scope: !5556)
!5561 = !DILocation(line: 2403, column: 11, scope: !5557)
!5562 = !DILocation(line: 2404, column: 2, scope: !5556)
!5563 = !DILocation(line: 2406, column: 7, scope: !5557)
!5564 = !DILocation(line: 2407, column: 7, scope: !5557)
!5565 = !DILocation(line: 2409, column: 5, scope: !5557)
!5566 = !DILocation(line: 2401, column: 59, scope: !5553)
!5567 = !DILocation(line: 2401, column: 3, scope: !5553)
!5568 = distinct !{!5568, !5554, !5569}
!5569 = !DILocation(line: 2409, column: 5, scope: !5550)
!5570 = !DILocation(line: 2411, column: 10, scope: !5571)
!5571 = distinct !DILexicalBlock(scope: !5500, file: !3, line: 2411, column: 3)
!5572 = !DILocation(line: 2411, column: 8, scope: !5571)
!5573 = !DILocation(line: 2411, column: 15, scope: !5574)
!5574 = distinct !DILexicalBlock(scope: !5571, file: !3, line: 2411, column: 3)
!5575 = !DILocation(line: 2411, column: 19, scope: !5574)
!5576 = !DILocation(line: 2411, column: 17, scope: !5574)
!5577 = !DILocation(line: 2411, column: 3, scope: !5571)
!5578 = !DILocation(line: 2413, column: 11, scope: !5579)
!5579 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 2413, column: 11)
!5580 = distinct !DILexicalBlock(scope: !5574, file: !3, line: 2412, column: 5)
!5581 = !DILocation(line: 2413, column: 45, scope: !5579)
!5582 = !DILocation(line: 2413, column: 11, scope: !5580)
!5583 = !DILocation(line: 2414, column: 2, scope: !5579)
!5584 = !DILocation(line: 2416, column: 32, scope: !5580)
!5585 = !DILocation(line: 2416, column: 38, scope: !5580)
!5586 = !DILocation(line: 2416, column: 57, scope: !5580)
!5587 = !DILocation(line: 2416, column: 61, scope: !5580)
!5588 = !DILocation(line: 2416, column: 59, scope: !5580)
!5589 = !DILocation(line: 2416, column: 14, scope: !5580)
!5590 = !DILocation(line: 2416, column: 12, scope: !5580)
!5591 = !DILocation(line: 2417, column: 12, scope: !5592)
!5592 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 2417, column: 11)
!5593 = !DILocation(line: 2417, column: 11, scope: !5580)
!5594 = !DILocation(line: 2418, column: 2, scope: !5592)
!5595 = !DILocation(line: 2420, column: 12, scope: !5596)
!5596 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 2420, column: 11)
!5597 = !DILocation(line: 2420, column: 19, scope: !5596)
!5598 = !DILocation(line: 2420, column: 39, scope: !5596)
!5599 = !DILocation(line: 2420, column: 61, scope: !5596)
!5600 = !DILocation(line: 2420, column: 42, scope: !5596)
!5601 = !DILocation(line: 2420, column: 11, scope: !5580)
!5602 = !DILocation(line: 2421, column: 2, scope: !5596)
!5603 = !DILocation(line: 2423, column: 36, scope: !5580)
!5604 = !DILocation(line: 2423, column: 14, scope: !5580)
!5605 = !DILocation(line: 2423, column: 12, scope: !5580)
!5606 = !DILocation(line: 2424, column: 11, scope: !5607)
!5607 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 2424, column: 11)
!5608 = !DILocation(line: 2424, column: 11, scope: !5580)
!5609 = !DILocation(line: 2425, column: 36, scope: !5607)
!5610 = !DILocation(line: 2425, column: 43, scope: !5607)
!5611 = !DILocation(line: 2425, column: 2, scope: !5607)
!5612 = !DILocation(line: 2427, column: 7, scope: !5580)
!5613 = !DILocation(line: 2428, column: 5, scope: !5580)
!5614 = !DILocation(line: 2411, column: 23, scope: !5574)
!5615 = !DILocation(line: 2411, column: 3, scope: !5574)
!5616 = distinct !{!5616, !5577, !5617}
!5617 = !DILocation(line: 2428, column: 5, scope: !5571)
!5618 = !DILocation(line: 2430, column: 3, scope: !5500)
!5619 = !DILocation(line: 2431, column: 1, scope: !5500)
!5620 = distinct !DISubprogram(name: "VEC_chain_p_base_unordered_remove", scope: !3, file: !3, line: 298, type: !5621, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5621 = !DISubroutineType(types: !5622)
!5622 = !{!2080, !5042, !7}
!5623 = !DILocalVariable(name: "vec_", arg: 1, scope: !5620, file: !3, line: 298, type: !5042)
!5624 = !DILocation(line: 298, column: 1, scope: !5620)
!5625 = !DILocalVariable(name: "ix_", arg: 2, scope: !5620, file: !3, line: 298, type: !7)
!5626 = !DILocalVariable(name: "slot_", scope: !5620, file: !3, line: 298, type: !2558)
!5627 = !DILocalVariable(name: "obj_", scope: !5620, file: !3, line: 298, type: !2080)
!5628 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !164, file: !164, line: 184, type: !5629, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5629 = !DISubroutineType(types: !5630)
!5630 = !{!2036, !749}
!5631 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5628, file: !164, line: 184, type: !749)
!5632 = !DILocation(line: 184, column: 1, scope: !5628)
!5633 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !164, file: !164, line: 182, type: !5634, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5634 = !DISubroutineType(types: !5635)
!5635 = !{!1016, !5636, !652}
!5636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1534, size: 64)
!5637 = !DILocalVariable(name: "vec_", arg: 1, scope: !5633, file: !164, line: 182, type: !5636)
!5638 = !DILocation(line: 182, column: 1, scope: !5633)
!5639 = !DILocalVariable(name: "obj_", arg: 2, scope: !5633, file: !164, line: 182, type: !652)
!5640 = !DILocalVariable(name: "slot_", scope: !5633, file: !164, line: 182, type: !1016)
!5641 = distinct !DISubprogram(name: "VEC_tree_base_replace", scope: !164, file: !164, line: 182, type: !5642, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5642 = !DISubroutineType(types: !5643)
!5643 = !{!652, !5636, !7, !652}
!5644 = !DILocalVariable(name: "vec_", arg: 1, scope: !5641, file: !164, line: 182, type: !5636)
!5645 = !DILocation(line: 182, column: 1, scope: !5641)
!5646 = !DILocalVariable(name: "ix_", arg: 2, scope: !5641, file: !164, line: 182, type: !7)
!5647 = !DILocalVariable(name: "obj_", arg: 3, scope: !5641, file: !164, line: 182, type: !652)
!5648 = !DILocalVariable(name: "old_obj_", scope: !5641, file: !164, line: 182, type: !652)
!5649 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !164, file: !164, line: 182, type: !5650, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5650 = !DISubroutineType(types: !5651)
!5651 = !{!652, !2500, !7}
!5652 = !DILocalVariable(name: "vec_", arg: 1, scope: !5649, file: !164, line: 182, type: !2500)
!5653 = !DILocation(line: 182, column: 1, scope: !5649)
!5654 = !DILocalVariable(name: "ix_", arg: 2, scope: !5649, file: !164, line: 182, type: !7)
!5655 = !DILocation(line: 0, scope: !5649)
!5656 = distinct !DISubprogram(name: "ref_at_iteration", scope: !3, file: !3, line: 1340, type: !5657, scopeLine: 1341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5657 = !DISubroutineType(types: !5658)
!5658 = !{!652, !1197, !652, !749}
!5659 = !DILocalVariable(name: "loop", arg: 1, scope: !5656, file: !3, line: 1340, type: !1197)
!5660 = !DILocation(line: 1340, column: 32, scope: !5656)
!5661 = !DILocalVariable(name: "ref", arg: 2, scope: !5656, file: !3, line: 1340, type: !652)
!5662 = !DILocation(line: 1340, column: 43, scope: !5656)
!5663 = !DILocalVariable(name: "iter", arg: 3, scope: !5656, file: !3, line: 1340, type: !749)
!5664 = !DILocation(line: 1340, column: 52, scope: !5656)
!5665 = !DILocalVariable(name: "idx", scope: !5656, file: !3, line: 1342, type: !652)
!5666 = !DILocation(line: 1342, column: 8, scope: !5656)
!5667 = !DILocalVariable(name: "idx_p", scope: !5656, file: !3, line: 1342, type: !1016)
!5668 = !DILocation(line: 1342, column: 14, scope: !5656)
!5669 = !DILocalVariable(name: "type", scope: !5656, file: !3, line: 1342, type: !652)
!5670 = !DILocation(line: 1342, column: 21, scope: !5656)
!5671 = !DILocalVariable(name: "val", scope: !5656, file: !3, line: 1342, type: !652)
!5672 = !DILocation(line: 1342, column: 27, scope: !5656)
!5673 = !DILocalVariable(name: "op0", scope: !5656, file: !3, line: 1342, type: !652)
!5674 = !DILocation(line: 1342, column: 32, scope: !5656)
!5675 = !DILocalVariable(name: "ret", scope: !5656, file: !3, line: 1342, type: !652)
!5676 = !DILocation(line: 1342, column: 49, scope: !5656)
!5677 = !DILocalVariable(name: "iv", scope: !5656, file: !3, line: 1343, type: !2974)
!5678 = !DILocation(line: 1343, column: 13, scope: !5656)
!5679 = !DILocalVariable(name: "ok", scope: !5656, file: !3, line: 1344, type: !772)
!5680 = !DILocation(line: 1344, column: 8, scope: !5656)
!5681 = !DILocation(line: 1346, column: 28, scope: !5682)
!5682 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 1346, column: 7)
!5683 = !DILocation(line: 1346, column: 7, scope: !5682)
!5684 = !DILocation(line: 1346, column: 7, scope: !5656)
!5685 = !DILocation(line: 1348, column: 31, scope: !5686)
!5686 = distinct !DILexicalBlock(scope: !5682, file: !3, line: 1347, column: 5)
!5687 = !DILocation(line: 1348, column: 37, scope: !5686)
!5688 = !DILocation(line: 1348, column: 60, scope: !5686)
!5689 = !DILocation(line: 1348, column: 13, scope: !5686)
!5690 = !DILocation(line: 1348, column: 11, scope: !5686)
!5691 = !DILocation(line: 1349, column: 12, scope: !5692)
!5692 = distinct !DILexicalBlock(scope: !5686, file: !3, line: 1349, column: 11)
!5693 = !DILocation(line: 1349, column: 11, scope: !5686)
!5694 = !DILocation(line: 1350, column: 2, scope: !5692)
!5695 = !DILocation(line: 1351, column: 5, scope: !5686)
!5696 = !DILocation(line: 1352, column: 13, scope: !5697)
!5697 = distinct !DILexicalBlock(scope: !5682, file: !3, line: 1352, column: 12)
!5698 = !DILocation(line: 1352, column: 12, scope: !5682)
!5699 = !DILocation(line: 1353, column: 26, scope: !5697)
!5700 = !DILocation(line: 1353, column: 12, scope: !5697)
!5701 = !DILocation(line: 1353, column: 5, scope: !5697)
!5702 = !DILocation(line: 1355, column: 7, scope: !5703)
!5703 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 1355, column: 7)
!5704 = !DILocation(line: 1355, column: 7, scope: !5656)
!5705 = !DILocation(line: 1359, column: 13, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5703, file: !3, line: 1356, column: 5)
!5707 = !DILocation(line: 1359, column: 11, scope: !5706)
!5708 = !DILocation(line: 1360, column: 13, scope: !5706)
!5709 = !DILocation(line: 1360, column: 11, scope: !5706)
!5710 = !DILocation(line: 1361, column: 16, scope: !5706)
!5711 = !DILocation(line: 1361, column: 13, scope: !5706)
!5712 = !DILocation(line: 1362, column: 5, scope: !5706)
!5713 = !DILocation(line: 1363, column: 12, scope: !5714)
!5714 = distinct !DILexicalBlock(scope: !5703, file: !3, line: 1363, column: 12)
!5715 = !DILocation(line: 1363, column: 28, scope: !5714)
!5716 = !DILocation(line: 1363, column: 12, scope: !5703)
!5717 = !DILocation(line: 1366, column: 11, scope: !5718)
!5718 = distinct !DILexicalBlock(scope: !5719, file: !3, line: 1366, column: 11)
!5719 = distinct !DILexicalBlock(scope: !5714, file: !3, line: 1364, column: 5)
!5720 = !DILocation(line: 1367, column: 4, scope: !5718)
!5721 = !DILocation(line: 1367, column: 34, scope: !5718)
!5722 = !DILocation(line: 1367, column: 40, scope: !5718)
!5723 = !DILocation(line: 1367, column: 8, scope: !5718)
!5724 = !DILocation(line: 1366, column: 11, scope: !5719)
!5725 = !DILocation(line: 1368, column: 2, scope: !5718)
!5726 = !DILocation(line: 1370, column: 14, scope: !5719)
!5727 = !DILocation(line: 1370, column: 7, scope: !5719)
!5728 = !DILocation(line: 1374, column: 12, scope: !5729)
!5729 = distinct !DILexicalBlock(scope: !5714, file: !3, line: 1374, column: 12)
!5730 = !DILocation(line: 1374, column: 28, scope: !5729)
!5731 = !DILocation(line: 1374, column: 12, scope: !5714)
!5732 = !DILocation(line: 1377, column: 11, scope: !5733)
!5733 = distinct !DILexicalBlock(scope: !5734, file: !3, line: 1377, column: 11)
!5734 = distinct !DILexicalBlock(scope: !5729, file: !3, line: 1375, column: 5)
!5735 = !DILocation(line: 1378, column: 4, scope: !5733)
!5736 = !DILocation(line: 1378, column: 34, scope: !5733)
!5737 = !DILocation(line: 1378, column: 40, scope: !5733)
!5738 = !DILocation(line: 1378, column: 8, scope: !5733)
!5739 = !DILocation(line: 1377, column: 11, scope: !5734)
!5740 = !DILocation(line: 1379, column: 2, scope: !5733)
!5741 = !DILocation(line: 1380, column: 11, scope: !5742)
!5742 = distinct !DILexicalBlock(scope: !5734, file: !3, line: 1380, column: 11)
!5743 = !DILocation(line: 1381, column: 4, scope: !5742)
!5744 = !DILocation(line: 1381, column: 34, scope: !5742)
!5745 = !DILocation(line: 1381, column: 40, scope: !5742)
!5746 = !DILocation(line: 1381, column: 8, scope: !5742)
!5747 = !DILocation(line: 1380, column: 11, scope: !5734)
!5748 = !DILocation(line: 1382, column: 2, scope: !5742)
!5749 = !DILocation(line: 1384, column: 13, scope: !5734)
!5750 = !DILocation(line: 1384, column: 11, scope: !5734)
!5751 = !DILocation(line: 1387, column: 13, scope: !5734)
!5752 = !DILocation(line: 1387, column: 11, scope: !5734)
!5753 = !DILocation(line: 1388, column: 16, scope: !5734)
!5754 = !DILocation(line: 1388, column: 13, scope: !5734)
!5755 = !DILocation(line: 1389, column: 5, scope: !5734)
!5756 = !DILocation(line: 1391, column: 5, scope: !5729)
!5757 = !DILocation(line: 1393, column: 19, scope: !5656)
!5758 = !DILocation(line: 1393, column: 25, scope: !5656)
!5759 = !DILocation(line: 1393, column: 31, scope: !5656)
!5760 = !DILocation(line: 1393, column: 8, scope: !5656)
!5761 = !DILocation(line: 1393, column: 6, scope: !5656)
!5762 = !DILocation(line: 1394, column: 8, scope: !5763)
!5763 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 1394, column: 7)
!5764 = !DILocation(line: 1394, column: 7, scope: !5656)
!5765 = !DILocation(line: 1395, column: 5, scope: !5763)
!5766 = !DILocation(line: 1396, column: 42, scope: !5656)
!5767 = !DILocation(line: 1396, column: 13, scope: !5656)
!5768 = !DILocation(line: 1396, column: 6, scope: !5656)
!5769 = !DILocation(line: 1396, column: 11, scope: !5656)
!5770 = !DILocation(line: 1397, column: 25, scope: !5771)
!5771 = distinct !DILexicalBlock(scope: !5656, file: !3, line: 1397, column: 7)
!5772 = !DILocation(line: 1397, column: 7, scope: !5771)
!5773 = !DILocation(line: 1397, column: 7, scope: !5656)
!5774 = !DILocation(line: 1398, column: 31, scope: !5771)
!5775 = !DILocation(line: 1398, column: 14, scope: !5771)
!5776 = !DILocation(line: 1398, column: 6, scope: !5771)
!5777 = !DILocation(line: 1398, column: 12, scope: !5771)
!5778 = !DILocation(line: 1398, column: 5, scope: !5771)
!5779 = !DILocation(line: 1401, column: 14, scope: !5780)
!5780 = distinct !DILexicalBlock(scope: !5771, file: !3, line: 1400, column: 5)
!5781 = !DILocation(line: 1401, column: 12, scope: !5780)
!5782 = !DILocation(line: 1402, column: 11, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5780, file: !3, line: 1402, column: 11)
!5784 = !DILocation(line: 1402, column: 11, scope: !5780)
!5785 = !DILocation(line: 1404, column: 10, scope: !5786)
!5786 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 1403, column: 2)
!5787 = !DILocation(line: 1404, column: 8, scope: !5786)
!5788 = !DILocation(line: 1406, column: 10, scope: !5786)
!5789 = !DILocation(line: 1406, column: 8, scope: !5786)
!5790 = !DILocation(line: 1407, column: 2, scope: !5786)
!5791 = !DILocation(line: 1410, column: 10, scope: !5792)
!5792 = distinct !DILexicalBlock(scope: !5783, file: !3, line: 1409, column: 2)
!5793 = !DILocation(line: 1410, column: 8, scope: !5792)
!5794 = !DILocation(line: 1412, column: 10, scope: !5792)
!5795 = !DILocation(line: 1412, column: 8, scope: !5792)
!5796 = !DILocation(line: 1414, column: 30, scope: !5780)
!5797 = !DILocation(line: 1414, column: 16, scope: !5780)
!5798 = !DILocation(line: 1414, column: 8, scope: !5780)
!5799 = !DILocation(line: 1414, column: 14, scope: !5780)
!5800 = !DILocation(line: 1417, column: 10, scope: !5656)
!5801 = !DILocation(line: 1417, column: 3, scope: !5656)
!5802 = !DILocation(line: 1418, column: 1, scope: !5656)
!5803 = distinct !DISubprogram(name: "handled_component_p", scope: !164, file: !164, line: 4551, type: !5804, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5804 = !DISubroutineType(types: !5805)
!5805 = !{!772, !5806}
!5806 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !653, line: 59, baseType: !5807)
!5807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5808, size: 64)
!5808 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !655)
!5809 = !DILocalVariable(name: "t", arg: 1, scope: !5803, file: !164, line: 4551, type: !5806)
!5810 = !DILocation(line: 4551, column: 33, scope: !5803)
!5811 = !DILocation(line: 4553, column: 11, scope: !5803)
!5812 = !DILocation(line: 4553, column: 3, scope: !5803)
!5813 = !DILocation(line: 4562, column: 7, scope: !5814)
!5814 = distinct !DILexicalBlock(scope: !5803, file: !164, line: 4554, column: 5)
!5815 = !DILocation(line: 4565, column: 7, scope: !5814)
!5816 = !DILocation(line: 4567, column: 1, scope: !5803)
!5817 = distinct !DISubprogram(name: "chain_can_be_combined_p", scope: !3, file: !3, line: 1967, type: !4822, scopeLine: 1968, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5818 = !DILocalVariable(name: "chain", arg: 1, scope: !5817, file: !3, line: 1967, type: !2080)
!5819 = !DILocation(line: 1967, column: 34, scope: !5817)
!5820 = !DILocation(line: 1969, column: 12, scope: !5817)
!5821 = !DILocation(line: 1969, column: 19, scope: !5817)
!5822 = !DILocation(line: 1970, column: 4, scope: !5817)
!5823 = !DILocation(line: 1970, column: 8, scope: !5817)
!5824 = !DILocation(line: 1970, column: 15, scope: !5817)
!5825 = !DILocation(line: 1970, column: 20, scope: !5817)
!5826 = !DILocation(line: 1970, column: 31, scope: !5817)
!5827 = !DILocation(line: 1970, column: 34, scope: !5817)
!5828 = !DILocation(line: 1970, column: 41, scope: !5817)
!5829 = !DILocation(line: 1970, column: 46, scope: !5817)
!5830 = !DILocation(line: 0, scope: !5817)
!5831 = !DILocation(line: 1969, column: 10, scope: !5817)
!5832 = !DILocation(line: 1969, column: 3, scope: !5817)
!5833 = distinct !DISubprogram(name: "VEC_chain_p_base_pop", scope: !3, file: !3, line: 298, type: !5834, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5834 = !DISubroutineType(types: !5835)
!5835 = !{!2080, !5042}
!5836 = !DILocalVariable(name: "vec_", arg: 1, scope: !5833, file: !3, line: 298, type: !5042)
!5837 = !DILocation(line: 298, column: 1, scope: !5833)
!5838 = !DILocalVariable(name: "obj_", scope: !5833, file: !3, line: 298, type: !2080)
!5839 = distinct !DISubprogram(name: "combine_chains", scope: !3, file: !3, line: 2275, type: !5840, scopeLine: 2276, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!5840 = !DISubroutineType(types: !5841)
!5841 = !{!2080, !2080, !2080}
!5842 = !DILocalVariable(name: "ch1", arg: 1, scope: !5839, file: !3, line: 2275, type: !2080)
!5843 = !DILocation(line: 2275, column: 25, scope: !5839)
!5844 = !DILocalVariable(name: "ch2", arg: 2, scope: !5839, file: !3, line: 2275, type: !2080)
!5845 = !DILocation(line: 2275, column: 38, scope: !5839)
!5846 = !DILocalVariable(name: "r1", scope: !5839, file: !3, line: 2277, type: !2010)
!5847 = !DILocation(line: 2277, column: 8, scope: !5839)
!5848 = !DILocalVariable(name: "r2", scope: !5839, file: !3, line: 2277, type: !2010)
!5849 = !DILocation(line: 2277, column: 12, scope: !5839)
!5850 = !DILocalVariable(name: "nw", scope: !5839, file: !3, line: 2277, type: !2010)
!5851 = !DILocation(line: 2277, column: 16, scope: !5839)
!5852 = !DILocalVariable(name: "op", scope: !5839, file: !3, line: 2278, type: !196)
!5853 = !DILocation(line: 2278, column: 18, scope: !5839)
!5854 = !DILocalVariable(name: "swap", scope: !5839, file: !3, line: 2279, type: !772)
!5855 = !DILocation(line: 2279, column: 8, scope: !5839)
!5856 = !DILocalVariable(name: "new_chain", scope: !5839, file: !3, line: 2280, type: !2080)
!5857 = !DILocation(line: 2280, column: 11, scope: !5839)
!5858 = !DILocalVariable(name: "i", scope: !5839, file: !3, line: 2281, type: !7)
!5859 = !DILocation(line: 2281, column: 12, scope: !5839)
!5860 = !DILocalVariable(name: "root_stmt", scope: !5839, file: !3, line: 2282, type: !982)
!5861 = !DILocation(line: 2282, column: 10, scope: !5839)
!5862 = !DILocalVariable(name: "rslt_type", scope: !5839, file: !3, line: 2283, type: !652)
!5863 = !DILocation(line: 2283, column: 8, scope: !5839)
!5864 = !DILocation(line: 2285, column: 7, scope: !5865)
!5865 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 2285, column: 7)
!5866 = !DILocation(line: 2285, column: 14, scope: !5865)
!5867 = !DILocation(line: 2285, column: 11, scope: !5865)
!5868 = !DILocation(line: 2285, column: 7, scope: !5839)
!5869 = !DILocation(line: 2286, column: 5, scope: !5865)
!5870 = !DILocation(line: 2287, column: 7, scope: !5871)
!5871 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 2287, column: 7)
!5872 = !DILocation(line: 2287, column: 12, scope: !5871)
!5873 = !DILocation(line: 2287, column: 22, scope: !5871)
!5874 = !DILocation(line: 2287, column: 27, scope: !5871)
!5875 = !DILocation(line: 2287, column: 19, scope: !5871)
!5876 = !DILocation(line: 2287, column: 7, scope: !5839)
!5877 = !DILocation(line: 2288, column: 5, scope: !5871)
!5878 = !DILocation(line: 2290, column: 7, scope: !5879)
!5879 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 2290, column: 7)
!5880 = !DILocation(line: 2290, column: 39, scope: !5879)
!5881 = !DILocation(line: 2290, column: 36, scope: !5879)
!5882 = !DILocation(line: 2290, column: 7, scope: !5839)
!5883 = !DILocation(line: 2291, column: 5, scope: !5879)
!5884 = !DILocation(line: 2293, column: 10, scope: !5885)
!5885 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 2293, column: 3)
!5886 = !DILocation(line: 2293, column: 8, scope: !5885)
!5887 = !DILocation(line: 2293, column: 16, scope: !5888)
!5888 = distinct !DILexicalBlock(scope: !5885, file: !3, line: 2293, column: 3)
!5889 = !DILocation(line: 2294, column: 9, scope: !5888)
!5890 = !DILocation(line: 2294, column: 12, scope: !5888)
!5891 = !DILocation(line: 0, scope: !5888)
!5892 = !DILocation(line: 2293, column: 3, scope: !5885)
!5893 = !DILocation(line: 2296, column: 11, scope: !5894)
!5894 = distinct !DILexicalBlock(scope: !5895, file: !3, line: 2296, column: 11)
!5895 = distinct !DILexicalBlock(scope: !5888, file: !3, line: 2295, column: 5)
!5896 = !DILocation(line: 2296, column: 15, scope: !5894)
!5897 = !DILocation(line: 2296, column: 27, scope: !5894)
!5898 = !DILocation(line: 2296, column: 31, scope: !5894)
!5899 = !DILocation(line: 2296, column: 24, scope: !5894)
!5900 = !DILocation(line: 2296, column: 11, scope: !5895)
!5901 = !DILocation(line: 2297, column: 2, scope: !5894)
!5902 = !DILocation(line: 2299, column: 31, scope: !5903)
!5903 = distinct !DILexicalBlock(scope: !5895, file: !3, line: 2299, column: 11)
!5904 = !DILocation(line: 2299, column: 35, scope: !5903)
!5905 = !DILocation(line: 2299, column: 12, scope: !5903)
!5906 = !DILocation(line: 2299, column: 11, scope: !5895)
!5907 = !DILocation(line: 2300, column: 2, scope: !5903)
!5908 = !DILocation(line: 2301, column: 5, scope: !5895)
!5909 = !DILocation(line: 2294, column: 52, scope: !5888)
!5910 = !DILocation(line: 2293, column: 3, scope: !5888)
!5911 = distinct !{!5911, !5892, !5912}
!5912 = !DILocation(line: 2301, column: 5, scope: !5885)
!5913 = !DILocation(line: 2303, column: 7, scope: !5914)
!5914 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 2303, column: 7)
!5915 = !DILocation(line: 2303, column: 7, scope: !5839)
!5916 = !DILocalVariable(name: "tmp", scope: !5917, file: !3, line: 2305, type: !2080)
!5917 = distinct !DILexicalBlock(scope: !5914, file: !3, line: 2304, column: 5)
!5918 = !DILocation(line: 2305, column: 15, scope: !5917)
!5919 = !DILocation(line: 2305, column: 21, scope: !5917)
!5920 = !DILocation(line: 2306, column: 13, scope: !5917)
!5921 = !DILocation(line: 2306, column: 11, scope: !5917)
!5922 = !DILocation(line: 2307, column: 13, scope: !5917)
!5923 = !DILocation(line: 2307, column: 11, scope: !5917)
!5924 = !DILocation(line: 2308, column: 5, scope: !5917)
!5925 = !DILocation(line: 2310, column: 15, scope: !5839)
!5926 = !DILocation(line: 2310, column: 13, scope: !5839)
!5927 = !DILocation(line: 2311, column: 3, scope: !5839)
!5928 = !DILocation(line: 2311, column: 14, scope: !5839)
!5929 = !DILocation(line: 2311, column: 19, scope: !5839)
!5930 = !DILocation(line: 2312, column: 19, scope: !5839)
!5931 = !DILocation(line: 2312, column: 3, scope: !5839)
!5932 = !DILocation(line: 2312, column: 14, scope: !5839)
!5933 = !DILocation(line: 2312, column: 17, scope: !5839)
!5934 = !DILocation(line: 2313, column: 20, scope: !5839)
!5935 = !DILocation(line: 2313, column: 3, scope: !5839)
!5936 = !DILocation(line: 2313, column: 14, scope: !5839)
!5937 = !DILocation(line: 2313, column: 18, scope: !5839)
!5938 = !DILocation(line: 2314, column: 20, scope: !5839)
!5939 = !DILocation(line: 2314, column: 3, scope: !5839)
!5940 = !DILocation(line: 2314, column: 14, scope: !5839)
!5941 = !DILocation(line: 2314, column: 18, scope: !5839)
!5942 = !DILocation(line: 2315, column: 26, scope: !5839)
!5943 = !DILocation(line: 2315, column: 3, scope: !5839)
!5944 = !DILocation(line: 2315, column: 14, scope: !5839)
!5945 = !DILocation(line: 2315, column: 24, scope: !5839)
!5946 = !DILocation(line: 2316, column: 23, scope: !5839)
!5947 = !DILocation(line: 2316, column: 28, scope: !5839)
!5948 = !DILocation(line: 2316, column: 3, scope: !5839)
!5949 = !DILocation(line: 2316, column: 14, scope: !5839)
!5950 = !DILocation(line: 2316, column: 21, scope: !5839)
!5951 = !DILocation(line: 2318, column: 10, scope: !5952)
!5952 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 2318, column: 3)
!5953 = !DILocation(line: 2318, column: 8, scope: !5952)
!5954 = !DILocation(line: 2318, column: 16, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5952, file: !3, line: 2318, column: 3)
!5956 = !DILocation(line: 2319, column: 9, scope: !5955)
!5957 = !DILocation(line: 2319, column: 12, scope: !5955)
!5958 = !DILocation(line: 0, scope: !5955)
!5959 = !DILocation(line: 2318, column: 3, scope: !5952)
!5960 = !DILocation(line: 2321, column: 12, scope: !5961)
!5961 = distinct !DILexicalBlock(scope: !5955, file: !3, line: 2320, column: 5)
!5962 = !DILocation(line: 2321, column: 10, scope: !5961)
!5963 = !DILocation(line: 2322, column: 39, scope: !5961)
!5964 = !DILocation(line: 2322, column: 43, scope: !5961)
!5965 = !DILocation(line: 2322, column: 18, scope: !5961)
!5966 = !DILocation(line: 2322, column: 7, scope: !5961)
!5967 = !DILocation(line: 2322, column: 11, scope: !5961)
!5968 = !DILocation(line: 2322, column: 16, scope: !5961)
!5969 = !DILocation(line: 2323, column: 22, scope: !5961)
!5970 = !DILocation(line: 2323, column: 26, scope: !5961)
!5971 = !DILocation(line: 2323, column: 7, scope: !5961)
!5972 = !DILocation(line: 2323, column: 11, scope: !5961)
!5973 = !DILocation(line: 2323, column: 20, scope: !5961)
!5974 = !DILocation(line: 2325, column: 7, scope: !5961)
!5975 = !DILocation(line: 2326, column: 5, scope: !5961)
!5976 = !DILocation(line: 2319, column: 52, scope: !5955)
!5977 = !DILocation(line: 2318, column: 3, scope: !5955)
!5978 = distinct !{!5978, !5959, !5979}
!5979 = !DILocation(line: 2326, column: 5, scope: !5952)
!5980 = !DILocation(line: 2328, column: 3, scope: !5839)
!5981 = !DILocation(line: 2328, column: 14, scope: !5839)
!5982 = !DILocation(line: 2328, column: 32, scope: !5839)
!5983 = !DILocation(line: 2329, column: 31, scope: !5839)
!5984 = !DILocation(line: 2329, column: 15, scope: !5839)
!5985 = !DILocation(line: 2329, column: 43, scope: !5839)
!5986 = !DILocation(line: 2329, column: 13, scope: !5839)
!5987 = !DILocation(line: 2330, column: 10, scope: !5988)
!5988 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 2330, column: 3)
!5989 = !DILocation(line: 2330, column: 8, scope: !5988)
!5990 = !DILocation(line: 2330, column: 15, scope: !5991)
!5991 = distinct !DILexicalBlock(scope: !5988, file: !3, line: 2330, column: 3)
!5992 = !DILocation(line: 2330, column: 3, scope: !5988)
!5993 = !DILocation(line: 2332, column: 11, scope: !5994)
!5994 = distinct !DILexicalBlock(scope: !5995, file: !3, line: 2332, column: 11)
!5995 = distinct !DILexicalBlock(scope: !5991, file: !3, line: 2331, column: 5)
!5996 = !DILocation(line: 2332, column: 15, scope: !5994)
!5997 = !DILocation(line: 2332, column: 27, scope: !5994)
!5998 = !DILocation(line: 2332, column: 38, scope: !5994)
!5999 = !DILocation(line: 2332, column: 24, scope: !5994)
!6000 = !DILocation(line: 2333, column: 4, scope: !5994)
!6001 = !DILocation(line: 2333, column: 31, scope: !5994)
!6002 = !DILocation(line: 2333, column: 35, scope: !5994)
!6003 = !DILocation(line: 2333, column: 41, scope: !5994)
!6004 = !DILocation(line: 2333, column: 8, scope: !5994)
!6005 = !DILocation(line: 2332, column: 11, scope: !5995)
!6006 = !DILocation(line: 2335, column: 4, scope: !6007)
!6007 = distinct !DILexicalBlock(scope: !5994, file: !3, line: 2334, column: 2)
!6008 = !DILocation(line: 2335, column: 15, scope: !6007)
!6009 = !DILocation(line: 2335, column: 33, scope: !6007)
!6010 = !DILocation(line: 2336, column: 4, scope: !6007)
!6011 = !DILocation(line: 2338, column: 5, scope: !5995)
!6012 = !DILocation(line: 2330, column: 60, scope: !5991)
!6013 = !DILocation(line: 2330, column: 3, scope: !5991)
!6014 = distinct !{!6014, !5992, !6015}
!6015 = !DILocation(line: 2338, column: 5, scope: !5988)
!6016 = !DILocation(line: 2340, column: 3, scope: !5839)
!6017 = !DILocation(line: 2340, column: 8, scope: !5839)
!6018 = !DILocation(line: 2340, column: 17, scope: !5839)
!6019 = !DILocation(line: 2341, column: 3, scope: !5839)
!6020 = !DILocation(line: 2341, column: 8, scope: !5839)
!6021 = !DILocation(line: 2341, column: 17, scope: !5839)
!6022 = !DILocation(line: 2342, column: 10, scope: !5839)
!6023 = !DILocation(line: 2342, column: 3, scope: !5839)
!6024 = !DILocation(line: 2343, column: 1, scope: !5839)
!6025 = distinct !DISubprogram(name: "combinable_refs_p", scope: !3, file: !3, line: 2098, type: !6026, scopeLine: 2100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6026 = !DISubroutineType(types: !6027)
!6027 = !{!772, !2010, !2010, !6028, !6029, !1016}
!6028 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !196, size: 64)
!6029 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !772, size: 64)
!6030 = !DILocalVariable(name: "r1", arg: 1, scope: !6025, file: !3, line: 2098, type: !2010)
!6031 = !DILocation(line: 2098, column: 25, scope: !6025)
!6032 = !DILocalVariable(name: "r2", arg: 2, scope: !6025, file: !3, line: 2098, type: !2010)
!6033 = !DILocation(line: 2098, column: 34, scope: !6025)
!6034 = !DILocalVariable(name: "code", arg: 3, scope: !6025, file: !3, line: 2099, type: !6028)
!6035 = !DILocation(line: 2099, column: 22, scope: !6025)
!6036 = !DILocalVariable(name: "swap", arg: 4, scope: !6025, file: !3, line: 2099, type: !6029)
!6037 = !DILocation(line: 2099, column: 34, scope: !6025)
!6038 = !DILocalVariable(name: "rslt_type", arg: 5, scope: !6025, file: !3, line: 2099, type: !1016)
!6039 = !DILocation(line: 2099, column: 46, scope: !6025)
!6040 = !DILocalVariable(name: "acode", scope: !6025, file: !3, line: 2101, type: !196)
!6041 = !DILocation(line: 2101, column: 18, scope: !6025)
!6042 = !DILocalVariable(name: "aswap", scope: !6025, file: !3, line: 2102, type: !772)
!6043 = !DILocation(line: 2102, column: 8, scope: !6025)
!6044 = !DILocalVariable(name: "atype", scope: !6025, file: !3, line: 2103, type: !652)
!6045 = !DILocation(line: 2103, column: 8, scope: !6025)
!6046 = !DILocalVariable(name: "name1", scope: !6025, file: !3, line: 2104, type: !652)
!6047 = !DILocation(line: 2104, column: 8, scope: !6025)
!6048 = !DILocalVariable(name: "name2", scope: !6025, file: !3, line: 2104, type: !652)
!6049 = !DILocation(line: 2104, column: 15, scope: !6025)
!6050 = !DILocalVariable(name: "stmt", scope: !6025, file: !3, line: 2105, type: !982)
!6051 = !DILocation(line: 2105, column: 10, scope: !6025)
!6052 = !DILocation(line: 2107, column: 25, scope: !6025)
!6053 = !DILocation(line: 2107, column: 11, scope: !6025)
!6054 = !DILocation(line: 2107, column: 9, scope: !6025)
!6055 = !DILocation(line: 2108, column: 25, scope: !6025)
!6056 = !DILocation(line: 2108, column: 11, scope: !6025)
!6057 = !DILocation(line: 2108, column: 9, scope: !6025)
!6058 = !DILocation(line: 2109, column: 3, scope: !6025)
!6059 = !DILocation(line: 2111, column: 10, scope: !6025)
!6060 = !DILocation(line: 2111, column: 8, scope: !6025)
!6061 = !DILocation(line: 2113, column: 8, scope: !6062)
!6062 = distinct !DILexicalBlock(scope: !6025, file: !3, line: 2113, column: 7)
!6063 = !DILocation(line: 2113, column: 7, scope: !6025)
!6064 = !DILocation(line: 2114, column: 5, scope: !6062)
!6065 = !DILocation(line: 2116, column: 35, scope: !6025)
!6066 = !DILocation(line: 2116, column: 11, scope: !6025)
!6067 = !DILocation(line: 2116, column: 9, scope: !6025)
!6068 = !DILocation(line: 2117, column: 36, scope: !6025)
!6069 = !DILocation(line: 2117, column: 13, scope: !6025)
!6070 = !DILocation(line: 2118, column: 5, scope: !6025)
!6071 = !DILocation(line: 2118, column: 28, scope: !6025)
!6072 = !DILocation(line: 2118, column: 8, scope: !6025)
!6073 = !DILocation(line: 2118, column: 37, scope: !6025)
!6074 = !DILocation(line: 2118, column: 34, scope: !6025)
!6075 = !DILocation(line: 0, scope: !6025)
!6076 = !DILocation(line: 2117, column: 11, scope: !6025)
!6077 = !DILocation(line: 2117, column: 9, scope: !6025)
!6078 = !DILocation(line: 2119, column: 11, scope: !6025)
!6079 = !DILocation(line: 2119, column: 9, scope: !6025)
!6080 = !DILocation(line: 2121, column: 8, scope: !6081)
!6081 = distinct !DILexicalBlock(scope: !6025, file: !3, line: 2121, column: 7)
!6082 = !DILocation(line: 2121, column: 7, scope: !6081)
!6083 = !DILocation(line: 2121, column: 13, scope: !6081)
!6084 = !DILocation(line: 2121, column: 7, scope: !6025)
!6085 = !DILocation(line: 2123, column: 15, scope: !6086)
!6086 = distinct !DILexicalBlock(scope: !6081, file: !3, line: 2122, column: 5)
!6087 = !DILocation(line: 2123, column: 8, scope: !6086)
!6088 = !DILocation(line: 2123, column: 13, scope: !6086)
!6089 = !DILocation(line: 2124, column: 15, scope: !6086)
!6090 = !DILocation(line: 2124, column: 8, scope: !6086)
!6091 = !DILocation(line: 2124, column: 13, scope: !6086)
!6092 = !DILocation(line: 2125, column: 20, scope: !6086)
!6093 = !DILocation(line: 2125, column: 8, scope: !6086)
!6094 = !DILocation(line: 2125, column: 18, scope: !6086)
!6095 = !DILocation(line: 2126, column: 7, scope: !6086)
!6096 = !DILocation(line: 2129, column: 12, scope: !6025)
!6097 = !DILocation(line: 2129, column: 11, scope: !6025)
!6098 = !DILocation(line: 2129, column: 20, scope: !6025)
!6099 = !DILocation(line: 2129, column: 17, scope: !6025)
!6100 = !DILocation(line: 2130, column: 4, scope: !6025)
!6101 = !DILocation(line: 2130, column: 8, scope: !6025)
!6102 = !DILocation(line: 2130, column: 7, scope: !6025)
!6103 = !DILocation(line: 2130, column: 16, scope: !6025)
!6104 = !DILocation(line: 2130, column: 13, scope: !6025)
!6105 = !DILocation(line: 2131, column: 4, scope: !6025)
!6106 = !DILocation(line: 2131, column: 8, scope: !6025)
!6107 = !DILocation(line: 2131, column: 7, scope: !6025)
!6108 = !DILocation(line: 2131, column: 21, scope: !6025)
!6109 = !DILocation(line: 2131, column: 18, scope: !6025)
!6110 = !DILocation(line: 2129, column: 10, scope: !6025)
!6111 = !DILocation(line: 2129, column: 3, scope: !6025)
!6112 = !DILocation(line: 2132, column: 1, scope: !6025)
!6113 = distinct !DISubprogram(name: "stmt_combining_refs", scope: !3, file: !3, line: 2257, type: !6114, scopeLine: 2258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6114 = !DISubroutineType(types: !6115)
!6115 = !{!982, !2010, !2010}
!6116 = !DILocalVariable(name: "r1", arg: 1, scope: !6113, file: !3, line: 2257, type: !2010)
!6117 = !DILocation(line: 2257, column: 27, scope: !6113)
!6118 = !DILocalVariable(name: "r2", arg: 2, scope: !6113, file: !3, line: 2257, type: !2010)
!6119 = !DILocation(line: 2257, column: 36, scope: !6113)
!6120 = !DILocalVariable(name: "stmt1", scope: !6113, file: !3, line: 2259, type: !982)
!6121 = !DILocation(line: 2259, column: 10, scope: !6113)
!6122 = !DILocalVariable(name: "stmt2", scope: !6113, file: !3, line: 2259, type: !982)
!6123 = !DILocation(line: 2259, column: 17, scope: !6113)
!6124 = !DILocalVariable(name: "name1", scope: !6113, file: !3, line: 2260, type: !652)
!6125 = !DILocation(line: 2260, column: 8, scope: !6113)
!6126 = !DILocation(line: 2260, column: 30, scope: !6113)
!6127 = !DILocation(line: 2260, column: 16, scope: !6113)
!6128 = !DILocalVariable(name: "name2", scope: !6113, file: !3, line: 2261, type: !652)
!6129 = !DILocation(line: 2261, column: 8, scope: !6113)
!6130 = !DILocation(line: 2261, column: 30, scope: !6113)
!6131 = !DILocation(line: 2261, column: 16, scope: !6113)
!6132 = !DILocation(line: 2263, column: 11, scope: !6113)
!6133 = !DILocation(line: 2263, column: 9, scope: !6113)
!6134 = !DILocation(line: 2264, column: 11, scope: !6113)
!6135 = !DILocation(line: 2264, column: 9, scope: !6113)
!6136 = !DILocation(line: 2265, column: 7, scope: !6137)
!6137 = distinct !DILexicalBlock(scope: !6113, file: !3, line: 2265, column: 7)
!6138 = !DILocation(line: 2265, column: 16, scope: !6137)
!6139 = !DILocation(line: 2265, column: 13, scope: !6137)
!6140 = !DILocation(line: 2265, column: 7, scope: !6113)
!6141 = !DILocation(line: 2266, column: 12, scope: !6137)
!6142 = !DILocation(line: 2266, column: 5, scope: !6137)
!6143 = !DILocation(line: 2268, column: 40, scope: !6113)
!6144 = !DILocation(line: 2268, column: 47, scope: !6113)
!6145 = !DILocation(line: 2268, column: 10, scope: !6113)
!6146 = !DILocation(line: 2268, column: 3, scope: !6113)
!6147 = !DILocation(line: 2269, column: 1, scope: !6113)
!6148 = distinct !DISubprogram(name: "name_for_ref", scope: !3, file: !3, line: 1003, type: !6149, scopeLine: 1004, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6149 = !DISubroutineType(types: !6150)
!6150 = !{!652, !2010}
!6151 = !DILocalVariable(name: "ref", arg: 1, scope: !6148, file: !3, line: 1003, type: !2010)
!6152 = !DILocation(line: 1003, column: 20, scope: !6148)
!6153 = !DILocalVariable(name: "name", scope: !6148, file: !3, line: 1005, type: !652)
!6154 = !DILocation(line: 1005, column: 8, scope: !6148)
!6155 = !DILocation(line: 1007, column: 25, scope: !6156)
!6156 = distinct !DILexicalBlock(scope: !6148, file: !3, line: 1007, column: 7)
!6157 = !DILocation(line: 1007, column: 30, scope: !6156)
!6158 = !DILocation(line: 1007, column: 7, scope: !6156)
!6159 = !DILocation(line: 1007, column: 7, scope: !6148)
!6160 = !DILocation(line: 1009, column: 12, scope: !6161)
!6161 = distinct !DILexicalBlock(scope: !6162, file: !3, line: 1009, column: 11)
!6162 = distinct !DILexicalBlock(scope: !6156, file: !3, line: 1008, column: 5)
!6163 = !DILocation(line: 1009, column: 17, scope: !6161)
!6164 = !DILocation(line: 1009, column: 21, scope: !6161)
!6165 = !DILocation(line: 1009, column: 24, scope: !6161)
!6166 = !DILocation(line: 1009, column: 11, scope: !6162)
!6167 = !DILocation(line: 1010, column: 28, scope: !6161)
!6168 = !DILocation(line: 1010, column: 33, scope: !6161)
!6169 = !DILocation(line: 1010, column: 9, scope: !6161)
!6170 = !DILocation(line: 1010, column: 7, scope: !6161)
!6171 = !DILocation(line: 1010, column: 2, scope: !6161)
!6172 = !DILocation(line: 1012, column: 29, scope: !6161)
!6173 = !DILocation(line: 1012, column: 34, scope: !6161)
!6174 = !DILocation(line: 1012, column: 9, scope: !6161)
!6175 = !DILocation(line: 1012, column: 7, scope: !6161)
!6176 = !DILocation(line: 1013, column: 5, scope: !6162)
!6177 = !DILocation(line: 1015, column: 12, scope: !6156)
!6178 = !DILocation(line: 1015, column: 10, scope: !6156)
!6179 = !DILocation(line: 1017, column: 11, scope: !6148)
!6180 = !DILocation(line: 1017, column: 28, scope: !6148)
!6181 = !DILocation(line: 1017, column: 42, scope: !6148)
!6182 = !DILocation(line: 1017, column: 3, scope: !6148)
!6183 = distinct !DISubprogram(name: "find_common_use_stmt", scope: !3, file: !3, line: 2068, type: !6184, scopeLine: 2069, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6184 = !DISubroutineType(types: !6185)
!6185 = !{!982, !1016, !1016}
!6186 = !DILocalVariable(name: "name1", arg: 1, scope: !6183, file: !3, line: 2068, type: !1016)
!6187 = !DILocation(line: 2068, column: 29, scope: !6183)
!6188 = !DILocalVariable(name: "name2", arg: 2, scope: !6183, file: !3, line: 2068, type: !1016)
!6189 = !DILocation(line: 2068, column: 42, scope: !6183)
!6190 = !DILocalVariable(name: "stmt1", scope: !6183, file: !3, line: 2070, type: !982)
!6191 = !DILocation(line: 2070, column: 10, scope: !6183)
!6192 = !DILocalVariable(name: "stmt2", scope: !6183, file: !3, line: 2070, type: !982)
!6193 = !DILocation(line: 2070, column: 17, scope: !6183)
!6194 = !DILocation(line: 2072, column: 26, scope: !6183)
!6195 = !DILocation(line: 2072, column: 11, scope: !6183)
!6196 = !DILocation(line: 2072, column: 9, scope: !6183)
!6197 = !DILocation(line: 2073, column: 8, scope: !6198)
!6198 = distinct !DILexicalBlock(scope: !6183, file: !3, line: 2073, column: 7)
!6199 = !DILocation(line: 2073, column: 7, scope: !6183)
!6200 = !DILocation(line: 2074, column: 5, scope: !6198)
!6201 = !DILocation(line: 2076, column: 26, scope: !6183)
!6202 = !DILocation(line: 2076, column: 11, scope: !6183)
!6203 = !DILocation(line: 2076, column: 9, scope: !6183)
!6204 = !DILocation(line: 2077, column: 8, scope: !6205)
!6205 = distinct !DILexicalBlock(scope: !6183, file: !3, line: 2077, column: 7)
!6206 = !DILocation(line: 2077, column: 7, scope: !6183)
!6207 = !DILocation(line: 2078, column: 5, scope: !6205)
!6208 = !DILocation(line: 2080, column: 7, scope: !6209)
!6209 = distinct !DILexicalBlock(scope: !6183, file: !3, line: 2080, column: 7)
!6210 = !DILocation(line: 2080, column: 16, scope: !6209)
!6211 = !DILocation(line: 2080, column: 13, scope: !6209)
!6212 = !DILocation(line: 2080, column: 7, scope: !6183)
!6213 = !DILocation(line: 2081, column: 12, scope: !6209)
!6214 = !DILocation(line: 2081, column: 5, scope: !6209)
!6215 = !DILocation(line: 2083, column: 44, scope: !6183)
!6216 = !DILocation(line: 2083, column: 11, scope: !6183)
!6217 = !DILocation(line: 2083, column: 9, scope: !6183)
!6218 = !DILocation(line: 2084, column: 8, scope: !6219)
!6219 = distinct !DILexicalBlock(scope: !6183, file: !3, line: 2084, column: 7)
!6220 = !DILocation(line: 2084, column: 7, scope: !6183)
!6221 = !DILocation(line: 2085, column: 5, scope: !6219)
!6222 = !DILocation(line: 2086, column: 44, scope: !6183)
!6223 = !DILocation(line: 2086, column: 11, scope: !6183)
!6224 = !DILocation(line: 2086, column: 9, scope: !6183)
!6225 = !DILocation(line: 2087, column: 8, scope: !6226)
!6226 = distinct !DILexicalBlock(scope: !6183, file: !3, line: 2087, column: 7)
!6227 = !DILocation(line: 2087, column: 7, scope: !6183)
!6228 = !DILocation(line: 2088, column: 5, scope: !6226)
!6229 = !DILocation(line: 2090, column: 11, scope: !6183)
!6230 = !DILocation(line: 2090, column: 20, scope: !6183)
!6231 = !DILocation(line: 2090, column: 17, scope: !6183)
!6232 = !DILocation(line: 2090, column: 28, scope: !6183)
!6233 = !DILocation(line: 2090, column: 3, scope: !6183)
!6234 = !DILocation(line: 2091, column: 1, scope: !6183)
!6235 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !391, file: !391, line: 1815, type: !6236, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6236 = !DISubroutineType(types: !6237)
!6237 = !{!196, !2347}
!6238 = !DILocalVariable(name: "gs", arg: 1, scope: !6235, file: !391, line: 1815, type: !2347)
!6239 = !DILocation(line: 1815, column: 38, scope: !6235)
!6240 = !DILocalVariable(name: "code", scope: !6235, file: !391, line: 1817, type: !196)
!6241 = !DILocation(line: 1817, column: 18, scope: !6235)
!6242 = !DILocation(line: 1820, column: 28, scope: !6235)
!6243 = !DILocation(line: 1820, column: 10, scope: !6235)
!6244 = !DILocation(line: 1820, column: 8, scope: !6235)
!6245 = !DILocation(line: 1821, column: 29, scope: !6246)
!6246 = distinct !DILexicalBlock(scope: !6235, file: !391, line: 1821, column: 7)
!6247 = !DILocation(line: 1821, column: 7, scope: !6246)
!6248 = !DILocation(line: 1821, column: 35, scope: !6246)
!6249 = !DILocation(line: 1821, column: 7, scope: !6235)
!6250 = !DILocation(line: 1822, column: 12, scope: !6246)
!6251 = !DILocation(line: 1822, column: 10, scope: !6246)
!6252 = !DILocation(line: 1822, column: 5, scope: !6246)
!6253 = !DILocation(line: 1824, column: 10, scope: !6235)
!6254 = !DILocation(line: 1824, column: 3, scope: !6235)
!6255 = distinct !DISubprogram(name: "find_use_stmt", scope: !3, file: !3, line: 1978, type: !6256, scopeLine: 1979, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6256 = !DISubroutineType(types: !6257)
!6257 = !{!982, !1016}
!6258 = !DILocalVariable(name: "name", arg: 1, scope: !6255, file: !3, line: 1978, type: !1016)
!6259 = !DILocation(line: 1978, column: 22, scope: !6255)
!6260 = !DILocalVariable(name: "stmt", scope: !6255, file: !3, line: 1980, type: !982)
!6261 = !DILocation(line: 1980, column: 10, scope: !6255)
!6262 = !DILocalVariable(name: "rhs", scope: !6255, file: !3, line: 1981, type: !652)
!6263 = !DILocation(line: 1981, column: 8, scope: !6255)
!6264 = !DILocalVariable(name: "lhs", scope: !6255, file: !3, line: 1981, type: !652)
!6265 = !DILocation(line: 1981, column: 13, scope: !6255)
!6266 = !DILocation(line: 1984, column: 3, scope: !6255)
!6267 = !DILocation(line: 1986, column: 41, scope: !6268)
!6268 = distinct !DILexicalBlock(scope: !6255, file: !3, line: 1985, column: 5)
!6269 = !DILocation(line: 1986, column: 40, scope: !6268)
!6270 = !DILocation(line: 1986, column: 14, scope: !6268)
!6271 = !DILocation(line: 1986, column: 12, scope: !6268)
!6272 = !DILocation(line: 1987, column: 12, scope: !6273)
!6273 = distinct !DILexicalBlock(scope: !6268, file: !3, line: 1987, column: 11)
!6274 = !DILocation(line: 1987, column: 11, scope: !6268)
!6275 = !DILocation(line: 1988, column: 2, scope: !6273)
!6276 = !DILocation(line: 1990, column: 24, scope: !6277)
!6277 = distinct !DILexicalBlock(scope: !6268, file: !3, line: 1990, column: 11)
!6278 = !DILocation(line: 1990, column: 11, scope: !6277)
!6279 = !DILocation(line: 1990, column: 30, scope: !6277)
!6280 = !DILocation(line: 1990, column: 11, scope: !6268)
!6281 = !DILocation(line: 1991, column: 2, scope: !6277)
!6282 = !DILocation(line: 1993, column: 32, scope: !6268)
!6283 = !DILocation(line: 1993, column: 13, scope: !6268)
!6284 = !DILocation(line: 1993, column: 11, scope: !6268)
!6285 = !DILocation(line: 1994, column: 11, scope: !6286)
!6286 = distinct !DILexicalBlock(scope: !6268, file: !3, line: 1994, column: 11)
!6287 = !DILocation(line: 1994, column: 27, scope: !6286)
!6288 = !DILocation(line: 1994, column: 11, scope: !6268)
!6289 = !DILocation(line: 1995, column: 2, scope: !6286)
!6290 = !DILocation(line: 1997, column: 33, scope: !6291)
!6291 = distinct !DILexicalBlock(scope: !6268, file: !3, line: 1997, column: 11)
!6292 = !DILocation(line: 1997, column: 11, scope: !6291)
!6293 = !DILocation(line: 1997, column: 11, scope: !6268)
!6294 = !DILocation(line: 1999, column: 30, scope: !6295)
!6295 = distinct !DILexicalBlock(scope: !6291, file: !3, line: 1998, column: 2)
!6296 = !DILocation(line: 1999, column: 10, scope: !6295)
!6297 = !DILocation(line: 1999, column: 8, scope: !6295)
!6298 = !DILocation(line: 2000, column: 8, scope: !6299)
!6299 = distinct !DILexicalBlock(scope: !6295, file: !3, line: 2000, column: 8)
!6300 = !DILocation(line: 2000, column: 16, scope: !6299)
!6301 = !DILocation(line: 2000, column: 15, scope: !6299)
!6302 = !DILocation(line: 2000, column: 12, scope: !6299)
!6303 = !DILocation(line: 2000, column: 8, scope: !6295)
!6304 = !DILocation(line: 2001, column: 6, scope: !6299)
!6305 = !DILocation(line: 2003, column: 12, scope: !6295)
!6306 = !DILocation(line: 2003, column: 5, scope: !6295)
!6307 = !DILocation(line: 2003, column: 10, scope: !6295)
!6308 = !DILocation(line: 2004, column: 2, scope: !6295)
!6309 = !DILocation(line: 2005, column: 62, scope: !6310)
!6310 = distinct !DILexicalBlock(scope: !6291, file: !3, line: 2005, column: 16)
!6311 = !DILocation(line: 2005, column: 38, scope: !6310)
!6312 = !DILocation(line: 2005, column: 16, scope: !6310)
!6313 = !DILocation(line: 2006, column: 9, scope: !6310)
!6314 = !DILocation(line: 2005, column: 16, scope: !6291)
!6315 = !DILocation(line: 2007, column: 9, scope: !6310)
!6316 = !DILocation(line: 2007, column: 2, scope: !6310)
!6317 = !DILocation(line: 2009, column: 2, scope: !6310)
!6318 = distinct !{!6318, !6266, !6319}
!6319 = !DILocation(line: 2010, column: 5, scope: !6255)
!6320 = !DILocation(line: 2011, column: 1, scope: !6255)
!6321 = distinct !DISubprogram(name: "find_associative_operation_root", scope: !3, file: !3, line: 2031, type: !6322, scopeLine: 2032, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6322 = !DISubroutineType(types: !6323)
!6323 = !{!982, !982, !2194}
!6324 = !DILocalVariable(name: "stmt", arg: 1, scope: !6321, file: !3, line: 2031, type: !982)
!6325 = !DILocation(line: 2031, column: 41, scope: !6321)
!6326 = !DILocalVariable(name: "distance", arg: 2, scope: !6321, file: !3, line: 2031, type: !2194)
!6327 = !DILocation(line: 2031, column: 57, scope: !6321)
!6328 = !DILocalVariable(name: "lhs", scope: !6321, file: !3, line: 2033, type: !652)
!6329 = !DILocation(line: 2033, column: 8, scope: !6321)
!6330 = !DILocalVariable(name: "next", scope: !6321, file: !3, line: 2034, type: !982)
!6331 = !DILocation(line: 2034, column: 10, scope: !6321)
!6332 = !DILocalVariable(name: "code", scope: !6321, file: !3, line: 2035, type: !196)
!6333 = !DILocation(line: 2035, column: 18, scope: !6321)
!6334 = !DILocation(line: 2035, column: 49, scope: !6321)
!6335 = !DILocation(line: 2035, column: 25, scope: !6321)
!6336 = !DILocalVariable(name: "type", scope: !6321, file: !3, line: 2036, type: !652)
!6337 = !DILocation(line: 2036, column: 8, scope: !6321)
!6338 = !DILocation(line: 2036, column: 15, scope: !6321)
!6339 = !DILocalVariable(name: "dist", scope: !6321, file: !3, line: 2037, type: !7)
!6340 = !DILocation(line: 2037, column: 12, scope: !6321)
!6341 = !DILocation(line: 2039, column: 27, scope: !6342)
!6342 = distinct !DILexicalBlock(scope: !6321, file: !3, line: 2039, column: 7)
!6343 = !DILocation(line: 2039, column: 33, scope: !6342)
!6344 = !DILocation(line: 2039, column: 8, scope: !6342)
!6345 = !DILocation(line: 2039, column: 7, scope: !6321)
!6346 = !DILocation(line: 2040, column: 5, scope: !6342)
!6347 = !DILocation(line: 2042, column: 3, scope: !6321)
!6348 = !DILocation(line: 2044, column: 32, scope: !6349)
!6349 = distinct !DILexicalBlock(scope: !6321, file: !3, line: 2043, column: 5)
!6350 = !DILocation(line: 2044, column: 13, scope: !6349)
!6351 = !DILocation(line: 2044, column: 11, scope: !6349)
!6352 = !DILocation(line: 2045, column: 7, scope: !6349)
!6353 = !DILocation(line: 2047, column: 14, scope: !6349)
!6354 = !DILocation(line: 2047, column: 12, scope: !6349)
!6355 = !DILocation(line: 2048, column: 12, scope: !6356)
!6356 = distinct !DILexicalBlock(scope: !6349, file: !3, line: 2048, column: 11)
!6357 = !DILocation(line: 2049, column: 4, scope: !6356)
!6358 = !DILocation(line: 2049, column: 31, scope: !6356)
!6359 = !DILocation(line: 2049, column: 7, scope: !6356)
!6360 = !DILocation(line: 2049, column: 40, scope: !6356)
!6361 = !DILocation(line: 2049, column: 37, scope: !6356)
!6362 = !DILocation(line: 2048, column: 11, scope: !6349)
!6363 = !DILocation(line: 2050, column: 2, scope: !6356)
!6364 = !DILocation(line: 2052, column: 14, scope: !6349)
!6365 = !DILocation(line: 2052, column: 12, scope: !6349)
!6366 = !DILocation(line: 2053, column: 11, scope: !6349)
!6367 = distinct !{!6367, !6347, !6368}
!6368 = !DILocation(line: 2054, column: 5, scope: !6321)
!6369 = !DILocation(line: 2056, column: 7, scope: !6370)
!6370 = distinct !DILexicalBlock(scope: !6321, file: !3, line: 2056, column: 7)
!6371 = !DILocation(line: 2056, column: 7, scope: !6321)
!6372 = !DILocation(line: 2057, column: 17, scope: !6370)
!6373 = !DILocation(line: 2057, column: 6, scope: !6370)
!6374 = !DILocation(line: 2057, column: 15, scope: !6370)
!6375 = !DILocation(line: 2057, column: 5, scope: !6370)
!6376 = !DILocation(line: 2058, column: 10, scope: !6321)
!6377 = !DILocation(line: 2058, column: 3, scope: !6321)
!6378 = !DILocation(line: 2059, column: 1, scope: !6321)
!6379 = distinct !DISubprogram(name: "single_nonlooparound_use", scope: !3, file: !3, line: 1662, type: !6380, scopeLine: 1663, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6380 = !DISubroutineType(types: !6381)
!6381 = !{!982, !652}
!6382 = !DILocalVariable(name: "name", arg: 1, scope: !6379, file: !3, line: 1662, type: !652)
!6383 = !DILocation(line: 1662, column: 32, scope: !6379)
!6384 = !DILocalVariable(name: "use", scope: !6379, file: !3, line: 1664, type: !2218)
!6385 = !DILocation(line: 1664, column: 17, scope: !6379)
!6386 = !DILocalVariable(name: "it", scope: !6379, file: !3, line: 1665, type: !6387)
!6387 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !1374, line: 249, baseType: !6388)
!6388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !1374, line: 238, size: 448, elements: !6389)
!6389 = !{!6390, !6391, !6392, !6393}
!6390 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !6388, file: !1374, line: 241, baseType: !2219, size: 64)
!6391 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !6388, file: !1374, line: 243, baseType: !2219, size: 64, offset: 64)
!6392 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !6388, file: !1374, line: 245, baseType: !2220, size: 256, offset: 128)
!6393 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !6388, file: !1374, line: 248, baseType: !2219, size: 64, offset: 384)
!6394 = !DILocation(line: 1665, column: 20, scope: !6379)
!6395 = !DILocalVariable(name: "stmt", scope: !6379, file: !3, line: 1666, type: !982)
!6396 = !DILocation(line: 1666, column: 10, scope: !6379)
!6397 = !DILocalVariable(name: "ret", scope: !6379, file: !3, line: 1666, type: !982)
!6398 = !DILocation(line: 1666, column: 16, scope: !6379)
!6399 = !DILocation(line: 1668, column: 3, scope: !6400)
!6400 = distinct !DILexicalBlock(scope: !6379, file: !3, line: 1668, column: 3)
!6401 = !DILocation(line: 1668, column: 3, scope: !6402)
!6402 = distinct !DILexicalBlock(scope: !6400, file: !3, line: 1668, column: 3)
!6403 = !DILocation(line: 1670, column: 14, scope: !6404)
!6404 = distinct !DILexicalBlock(scope: !6402, file: !3, line: 1669, column: 5)
!6405 = !DILocation(line: 1670, column: 12, scope: !6404)
!6406 = !DILocation(line: 1672, column: 24, scope: !6407)
!6407 = distinct !DILexicalBlock(scope: !6404, file: !3, line: 1672, column: 11)
!6408 = !DILocation(line: 1672, column: 11, scope: !6407)
!6409 = !DILocation(line: 1672, column: 30, scope: !6407)
!6410 = !DILocation(line: 1672, column: 11, scope: !6404)
!6411 = !DILocation(line: 1676, column: 22, scope: !6412)
!6412 = distinct !DILexicalBlock(scope: !6413, file: !3, line: 1676, column: 8)
!6413 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 1673, column: 2)
!6414 = !DILocation(line: 1677, column: 8, scope: !6412)
!6415 = !DILocation(line: 1676, column: 8, scope: !6412)
!6416 = !DILocation(line: 1676, column: 8, scope: !6413)
!6417 = !DILocation(line: 1678, column: 6, scope: !6412)
!6418 = !DILocation(line: 1680, column: 4, scope: !6413)
!6419 = !DILocation(line: 1682, column: 16, scope: !6420)
!6420 = distinct !DILexicalBlock(scope: !6407, file: !3, line: 1682, column: 16)
!6421 = !DILocation(line: 1682, column: 20, scope: !6420)
!6422 = !DILocation(line: 1682, column: 16, scope: !6407)
!6423 = !DILocation(line: 1683, column: 2, scope: !6420)
!6424 = !DILocation(line: 1685, column: 8, scope: !6420)
!6425 = !DILocation(line: 1685, column: 6, scope: !6420)
!6426 = !DILocation(line: 1686, column: 5, scope: !6404)
!6427 = distinct !{!6427, !6399, !6428}
!6428 = !DILocation(line: 1686, column: 5, scope: !6400)
!6429 = !DILocation(line: 1688, column: 10, scope: !6379)
!6430 = !DILocation(line: 1688, column: 3, scope: !6379)
!6431 = !DILocation(line: 1689, column: 1, scope: !6379)
!6432 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !391, file: !391, line: 1686, type: !6433, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6433 = !DISubroutineType(types: !6434)
!6434 = !{!495, !196}
!6435 = !DILocalVariable(name: "code", arg: 1, scope: !6432, file: !391, line: 1686, type: !196)
!6436 = !DILocation(line: 1686, column: 38, scope: !6432)
!6437 = !DILocation(line: 1688, column: 63, scope: !6432)
!6438 = !DILocation(line: 1688, column: 34, scope: !6432)
!6439 = !DILocation(line: 1688, column: 10, scope: !6432)
!6440 = !DILocation(line: 1688, column: 3, scope: !6432)
!6441 = distinct !DISubprogram(name: "first_readonly_imm_use", scope: !2666, file: !2666, line: 292, type: !6442, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6442 = !DISubroutineType(types: !6443)
!6443 = !{!2218, !6444, !652}
!6444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6387, size: 64)
!6445 = !DILocalVariable(name: "imm", arg: 1, scope: !6441, file: !2666, line: 292, type: !6444)
!6446 = !DILocation(line: 292, column: 43, scope: !6441)
!6447 = !DILocalVariable(name: "var", arg: 2, scope: !6441, file: !2666, line: 292, type: !652)
!6448 = !DILocation(line: 292, column: 53, scope: !6441)
!6449 = !DILocation(line: 294, column: 18, scope: !6441)
!6450 = !DILocation(line: 294, column: 3, scope: !6441)
!6451 = !DILocation(line: 294, column: 8, scope: !6441)
!6452 = !DILocation(line: 294, column: 14, scope: !6441)
!6453 = !DILocation(line: 295, column: 18, scope: !6441)
!6454 = !DILocation(line: 295, column: 23, scope: !6441)
!6455 = !DILocation(line: 295, column: 30, scope: !6441)
!6456 = !DILocation(line: 295, column: 3, scope: !6441)
!6457 = !DILocation(line: 295, column: 8, scope: !6441)
!6458 = !DILocation(line: 295, column: 16, scope: !6441)
!6459 = !DILocation(line: 299, column: 31, scope: !6460)
!6460 = distinct !DILexicalBlock(scope: !6441, file: !2666, line: 299, column: 7)
!6461 = !DILocation(line: 299, column: 7, scope: !6460)
!6462 = !DILocation(line: 299, column: 7, scope: !6441)
!6463 = !DILocation(line: 300, column: 5, scope: !6460)
!6464 = !DILocation(line: 301, column: 10, scope: !6441)
!6465 = !DILocation(line: 301, column: 15, scope: !6441)
!6466 = !DILocation(line: 301, column: 3, scope: !6441)
!6467 = !DILocation(line: 302, column: 1, scope: !6441)
!6468 = distinct !DISubprogram(name: "end_readonly_imm_use_p", scope: !2666, file: !2666, line: 285, type: !6469, scopeLine: 286, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6469 = !DISubroutineType(types: !6470)
!6470 = !{!772, !6471}
!6471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6472, size: 64)
!6472 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6387)
!6473 = !DILocalVariable(name: "imm", arg: 1, scope: !6468, file: !2666, line: 285, type: !6471)
!6474 = !DILocation(line: 285, column: 49, scope: !6468)
!6475 = !DILocation(line: 287, column: 11, scope: !6468)
!6476 = !DILocation(line: 287, column: 16, scope: !6468)
!6477 = !DILocation(line: 287, column: 27, scope: !6468)
!6478 = !DILocation(line: 287, column: 32, scope: !6468)
!6479 = !DILocation(line: 287, column: 24, scope: !6468)
!6480 = !DILocation(line: 287, column: 10, scope: !6468)
!6481 = !DILocation(line: 287, column: 3, scope: !6468)
!6482 = distinct !DISubprogram(name: "next_readonly_imm_use", scope: !2666, file: !2666, line: 306, type: !6483, scopeLine: 307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6483 = !DISubroutineType(types: !6484)
!6484 = !{!2218, !6444}
!6485 = !DILocalVariable(name: "imm", arg: 1, scope: !6482, file: !2666, line: 306, type: !6444)
!6486 = !DILocation(line: 306, column: 42, scope: !6482)
!6487 = !DILocalVariable(name: "old", scope: !6482, file: !2666, line: 308, type: !2218)
!6488 = !DILocation(line: 308, column: 17, scope: !6482)
!6489 = !DILocation(line: 308, column: 23, scope: !6482)
!6490 = !DILocation(line: 308, column: 28, scope: !6482)
!6491 = !DILocation(line: 319, column: 18, scope: !6482)
!6492 = !DILocation(line: 319, column: 23, scope: !6482)
!6493 = !DILocation(line: 319, column: 3, scope: !6482)
!6494 = !DILocation(line: 319, column: 8, scope: !6482)
!6495 = !DILocation(line: 319, column: 16, scope: !6482)
!6496 = !DILocation(line: 320, column: 31, scope: !6497)
!6497 = distinct !DILexicalBlock(scope: !6482, file: !2666, line: 320, column: 7)
!6498 = !DILocation(line: 320, column: 7, scope: !6497)
!6499 = !DILocation(line: 320, column: 7, scope: !6482)
!6500 = !DILocation(line: 321, column: 5, scope: !6497)
!6501 = !DILocation(line: 322, column: 10, scope: !6482)
!6502 = !DILocation(line: 322, column: 15, scope: !6482)
!6503 = !DILocation(line: 322, column: 3, scope: !6482)
!6504 = !DILocation(line: 323, column: 1, scope: !6482)
!6505 = distinct !DISubprogram(name: "may_reassociate_p", scope: !3, file: !3, line: 2016, type: !6506, scopeLine: 2017, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6506 = !DISubroutineType(types: !6507)
!6507 = !{!772, !652, !196}
!6508 = !DILocalVariable(name: "type", arg: 1, scope: !6505, file: !3, line: 2016, type: !652)
!6509 = !DILocation(line: 2016, column: 25, scope: !6505)
!6510 = !DILocalVariable(name: "code", arg: 2, scope: !6505, file: !3, line: 2016, type: !196)
!6511 = !DILocation(line: 2016, column: 46, scope: !6505)
!6512 = !DILocation(line: 2018, column: 7, scope: !6513)
!6513 = distinct !DILexicalBlock(scope: !6505, file: !3, line: 2018, column: 7)
!6514 = !DILocation(line: 2019, column: 7, scope: !6513)
!6515 = !DILocation(line: 2019, column: 11, scope: !6513)
!6516 = !DILocation(line: 2018, column: 7, scope: !6505)
!6517 = !DILocation(line: 2020, column: 5, scope: !6513)
!6518 = !DILocation(line: 2022, column: 34, scope: !6505)
!6519 = !DILocation(line: 2022, column: 11, scope: !6505)
!6520 = !DILocation(line: 2023, column: 4, scope: !6505)
!6521 = !DILocation(line: 2023, column: 30, scope: !6505)
!6522 = !DILocation(line: 2023, column: 7, scope: !6505)
!6523 = !DILocation(line: 0, scope: !6505)
!6524 = !DILocation(line: 2022, column: 10, scope: !6505)
!6525 = !DILocation(line: 2022, column: 3, scope: !6505)
!6526 = !DILocation(line: 2024, column: 1, scope: !6505)
!6527 = distinct !DISubprogram(name: "gimple_expr_code", scope: !391, file: !391, line: 1438, type: !6236, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6528 = !DILocalVariable(name: "stmt", arg: 1, scope: !6527, file: !391, line: 1438, type: !2347)
!6529 = !DILocation(line: 1438, column: 32, scope: !6527)
!6530 = !DILocalVariable(name: "code", scope: !6527, file: !391, line: 1440, type: !390)
!6531 = !DILocation(line: 1440, column: 20, scope: !6527)
!6532 = !DILocation(line: 1440, column: 40, scope: !6527)
!6533 = !DILocation(line: 1440, column: 27, scope: !6527)
!6534 = !DILocation(line: 1441, column: 7, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6527, file: !391, line: 1441, column: 7)
!6536 = !DILocation(line: 1441, column: 12, scope: !6535)
!6537 = !DILocation(line: 1441, column: 29, scope: !6535)
!6538 = !DILocation(line: 1441, column: 32, scope: !6535)
!6539 = !DILocation(line: 1441, column: 37, scope: !6535)
!6540 = !DILocation(line: 1441, column: 7, scope: !6527)
!6541 = !DILocation(line: 1442, column: 29, scope: !6535)
!6542 = !DILocation(line: 1442, column: 35, scope: !6535)
!6543 = !DILocation(line: 1442, column: 42, scope: !6535)
!6544 = !DILocation(line: 1442, column: 5, scope: !6535)
!6545 = !DILocation(line: 1443, column: 12, scope: !6546)
!6546 = distinct !DILexicalBlock(scope: !6535, file: !391, line: 1443, column: 12)
!6547 = !DILocation(line: 1443, column: 17, scope: !6546)
!6548 = !DILocation(line: 1443, column: 12, scope: !6535)
!6549 = !DILocation(line: 1444, column: 5, scope: !6546)
!6550 = !DILocation(line: 1446, column: 5, scope: !6546)
!6551 = !DILocation(line: 1448, column: 5, scope: !6527)
!6552 = !DILocation(line: 1450, column: 1, scope: !6527)
!6553 = distinct !DISubprogram(name: "reassociate_to_the_same_stmt", scope: !3, file: !3, line: 2163, type: !6554, scopeLine: 2164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6554 = !DISubroutineType(types: !6555)
!6555 = !{!982, !652, !652}
!6556 = !DILocalVariable(name: "name1", arg: 1, scope: !6553, file: !3, line: 2163, type: !652)
!6557 = !DILocation(line: 2163, column: 36, scope: !6553)
!6558 = !DILocalVariable(name: "name2", arg: 2, scope: !6553, file: !3, line: 2163, type: !652)
!6559 = !DILocation(line: 2163, column: 48, scope: !6553)
!6560 = !DILocalVariable(name: "stmt1", scope: !6553, file: !3, line: 2165, type: !982)
!6561 = !DILocation(line: 2165, column: 10, scope: !6553)
!6562 = !DILocalVariable(name: "stmt2", scope: !6553, file: !3, line: 2165, type: !982)
!6563 = !DILocation(line: 2165, column: 17, scope: !6553)
!6564 = !DILocalVariable(name: "root1", scope: !6553, file: !3, line: 2165, type: !982)
!6565 = !DILocation(line: 2165, column: 24, scope: !6553)
!6566 = !DILocalVariable(name: "root2", scope: !6553, file: !3, line: 2165, type: !982)
!6567 = !DILocation(line: 2165, column: 31, scope: !6553)
!6568 = !DILocalVariable(name: "s1", scope: !6553, file: !3, line: 2165, type: !982)
!6569 = !DILocation(line: 2165, column: 38, scope: !6553)
!6570 = !DILocalVariable(name: "s2", scope: !6553, file: !3, line: 2165, type: !982)
!6571 = !DILocation(line: 2165, column: 42, scope: !6553)
!6572 = !DILocalVariable(name: "new_stmt", scope: !6553, file: !3, line: 2166, type: !982)
!6573 = !DILocation(line: 2166, column: 10, scope: !6553)
!6574 = !DILocalVariable(name: "tmp_stmt", scope: !6553, file: !3, line: 2166, type: !982)
!6575 = !DILocation(line: 2166, column: 20, scope: !6553)
!6576 = !DILocalVariable(name: "new_name", scope: !6553, file: !3, line: 2167, type: !652)
!6577 = !DILocation(line: 2167, column: 8, scope: !6553)
!6578 = !DILocalVariable(name: "tmp_name", scope: !6553, file: !3, line: 2167, type: !652)
!6579 = !DILocation(line: 2167, column: 18, scope: !6553)
!6580 = !DILocalVariable(name: "var", scope: !6553, file: !3, line: 2167, type: !652)
!6581 = !DILocation(line: 2167, column: 28, scope: !6553)
!6582 = !DILocalVariable(name: "r1", scope: !6553, file: !3, line: 2167, type: !652)
!6583 = !DILocation(line: 2167, column: 33, scope: !6553)
!6584 = !DILocalVariable(name: "r2", scope: !6553, file: !3, line: 2167, type: !652)
!6585 = !DILocation(line: 2167, column: 37, scope: !6553)
!6586 = !DILocalVariable(name: "dist1", scope: !6553, file: !3, line: 2168, type: !7)
!6587 = !DILocation(line: 2168, column: 12, scope: !6553)
!6588 = !DILocalVariable(name: "dist2", scope: !6553, file: !3, line: 2168, type: !7)
!6589 = !DILocation(line: 2168, column: 19, scope: !6553)
!6590 = !DILocalVariable(name: "code", scope: !6553, file: !3, line: 2169, type: !196)
!6591 = !DILocation(line: 2169, column: 18, scope: !6553)
!6592 = !DILocalVariable(name: "type", scope: !6553, file: !3, line: 2170, type: !652)
!6593 = !DILocation(line: 2170, column: 8, scope: !6553)
!6594 = !DILocation(line: 2170, column: 15, scope: !6553)
!6595 = !DILocalVariable(name: "bsi", scope: !6553, file: !3, line: 2171, type: !3983)
!6596 = !DILocation(line: 2171, column: 24, scope: !6553)
!6597 = !DILocation(line: 2173, column: 11, scope: !6553)
!6598 = !DILocation(line: 2173, column: 9, scope: !6553)
!6599 = !DILocation(line: 2174, column: 11, scope: !6553)
!6600 = !DILocation(line: 2174, column: 9, scope: !6553)
!6601 = !DILocation(line: 2175, column: 44, scope: !6553)
!6602 = !DILocation(line: 2175, column: 11, scope: !6553)
!6603 = !DILocation(line: 2175, column: 9, scope: !6553)
!6604 = !DILocation(line: 2176, column: 44, scope: !6553)
!6605 = !DILocation(line: 2176, column: 11, scope: !6553)
!6606 = !DILocation(line: 2176, column: 9, scope: !6553)
!6607 = !DILocation(line: 2177, column: 34, scope: !6553)
!6608 = !DILocation(line: 2177, column: 10, scope: !6553)
!6609 = !DILocation(line: 2177, column: 8, scope: !6553)
!6610 = !DILocation(line: 2179, column: 3, scope: !6553)
!6611 = !DILocation(line: 2184, column: 8, scope: !6553)
!6612 = !DILocation(line: 2184, column: 6, scope: !6553)
!6613 = !DILocation(line: 2185, column: 8, scope: !6553)
!6614 = !DILocation(line: 2185, column: 6, scope: !6553)
!6615 = !DILocation(line: 2186, column: 8, scope: !6553)
!6616 = !DILocation(line: 2186, column: 6, scope: !6553)
!6617 = !DILocation(line: 2187, column: 8, scope: !6553)
!6618 = !DILocation(line: 2187, column: 6, scope: !6553)
!6619 = !DILocation(line: 2189, column: 3, scope: !6553)
!6620 = !DILocation(line: 2189, column: 10, scope: !6553)
!6621 = !DILocation(line: 2189, column: 18, scope: !6553)
!6622 = !DILocation(line: 2189, column: 16, scope: !6553)
!6623 = !DILocation(line: 2191, column: 12, scope: !6624)
!6624 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2190, column: 5)
!6625 = !DILocation(line: 2191, column: 10, scope: !6624)
!6626 = !DILocation(line: 2192, column: 31, scope: !6624)
!6627 = !DILocation(line: 2192, column: 12, scope: !6624)
!6628 = !DILocation(line: 2192, column: 10, scope: !6624)
!6629 = !DILocation(line: 2193, column: 12, scope: !6624)
!6630 = distinct !{!6630, !6619, !6631}
!6631 = !DILocation(line: 2194, column: 5, scope: !6553)
!6632 = !DILocation(line: 2195, column: 3, scope: !6553)
!6633 = !DILocation(line: 2195, column: 10, scope: !6553)
!6634 = !DILocation(line: 2195, column: 18, scope: !6553)
!6635 = !DILocation(line: 2195, column: 16, scope: !6553)
!6636 = !DILocation(line: 2197, column: 12, scope: !6637)
!6637 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2196, column: 5)
!6638 = !DILocation(line: 2197, column: 10, scope: !6637)
!6639 = !DILocation(line: 2198, column: 31, scope: !6637)
!6640 = !DILocation(line: 2198, column: 12, scope: !6637)
!6641 = !DILocation(line: 2198, column: 10, scope: !6637)
!6642 = !DILocation(line: 2199, column: 12, scope: !6637)
!6643 = distinct !{!6643, !6632, !6644}
!6644 = !DILocation(line: 2200, column: 5, scope: !6553)
!6645 = !DILocation(line: 2202, column: 3, scope: !6553)
!6646 = !DILocation(line: 2202, column: 10, scope: !6553)
!6647 = !DILocation(line: 2202, column: 16, scope: !6553)
!6648 = !DILocation(line: 2202, column: 13, scope: !6553)
!6649 = !DILocation(line: 2204, column: 12, scope: !6650)
!6650 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2203, column: 5)
!6651 = !DILocation(line: 2204, column: 10, scope: !6650)
!6652 = !DILocation(line: 2205, column: 31, scope: !6650)
!6653 = !DILocation(line: 2205, column: 12, scope: !6650)
!6654 = !DILocation(line: 2205, column: 10, scope: !6650)
!6655 = !DILocation(line: 2206, column: 12, scope: !6650)
!6656 = !DILocation(line: 2206, column: 10, scope: !6650)
!6657 = !DILocation(line: 2207, column: 31, scope: !6650)
!6658 = !DILocation(line: 2207, column: 12, scope: !6650)
!6659 = !DILocation(line: 2207, column: 10, scope: !6650)
!6660 = distinct !{!6660, !6645, !6661}
!6661 = !DILocation(line: 2208, column: 5, scope: !6553)
!6662 = !DILocation(line: 2212, column: 31, scope: !6553)
!6663 = !DILocation(line: 2212, column: 38, scope: !6553)
!6664 = !DILocation(line: 2212, column: 3, scope: !6553)
!6665 = !DILocation(line: 2213, column: 31, scope: !6553)
!6666 = !DILocation(line: 2213, column: 38, scope: !6553)
!6667 = !DILocation(line: 2213, column: 3, scope: !6553)
!6668 = !DILocation(line: 2217, column: 25, scope: !6553)
!6669 = !DILocation(line: 2217, column: 9, scope: !6553)
!6670 = !DILocation(line: 2217, column: 7, scope: !6553)
!6671 = !DILocation(line: 2218, column: 7, scope: !6672)
!6672 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2218, column: 7)
!6673 = !DILocation(line: 2218, column: 24, scope: !6672)
!6674 = !DILocation(line: 2219, column: 7, scope: !6672)
!6675 = !DILocation(line: 2219, column: 10, scope: !6672)
!6676 = !DILocation(line: 2219, column: 27, scope: !6672)
!6677 = !DILocation(line: 2218, column: 7, scope: !6553)
!6678 = !DILocation(line: 2220, column: 5, scope: !6672)
!6679 = !DILocation(line: 2220, column: 29, scope: !6672)
!6680 = !DILocation(line: 2221, column: 23, scope: !6553)
!6681 = !DILocation(line: 2221, column: 3, scope: !6553)
!6682 = !DILocation(line: 2222, column: 29, scope: !6553)
!6683 = !DILocation(line: 2222, column: 14, scope: !6553)
!6684 = !DILocation(line: 2222, column: 12, scope: !6553)
!6685 = !DILocation(line: 2223, column: 14, scope: !6553)
!6686 = !DILocation(line: 2223, column: 12, scope: !6553)
!6687 = !DILocation(line: 2225, column: 25, scope: !6553)
!6688 = !DILocation(line: 2225, column: 9, scope: !6553)
!6689 = !DILocation(line: 2225, column: 7, scope: !6553)
!6690 = !DILocation(line: 2226, column: 7, scope: !6691)
!6691 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2226, column: 7)
!6692 = !DILocation(line: 2226, column: 24, scope: !6691)
!6693 = !DILocation(line: 2227, column: 7, scope: !6691)
!6694 = !DILocation(line: 2227, column: 10, scope: !6691)
!6695 = !DILocation(line: 2227, column: 27, scope: !6691)
!6696 = !DILocation(line: 2226, column: 7, scope: !6553)
!6697 = !DILocation(line: 2228, column: 5, scope: !6691)
!6698 = !DILocation(line: 2228, column: 29, scope: !6691)
!6699 = !DILocation(line: 2229, column: 23, scope: !6553)
!6700 = !DILocation(line: 2229, column: 3, scope: !6553)
!6701 = !DILocation(line: 2230, column: 29, scope: !6553)
!6702 = !DILocation(line: 2230, column: 14, scope: !6553)
!6703 = !DILocation(line: 2230, column: 12, scope: !6553)
!6704 = !DILocation(line: 2235, column: 14, scope: !6553)
!6705 = !DILocation(line: 2235, column: 12, scope: !6553)
!6706 = !DILocation(line: 2240, column: 23, scope: !6553)
!6707 = !DILocation(line: 2240, column: 9, scope: !6553)
!6708 = !DILocation(line: 2241, column: 41, scope: !6553)
!6709 = !DILocation(line: 2241, column: 47, scope: !6553)
!6710 = !DILocation(line: 2241, column: 57, scope: !6553)
!6711 = !DILocation(line: 2241, column: 3, scope: !6553)
!6712 = !DILocation(line: 2242, column: 8, scope: !6553)
!6713 = !DILocation(line: 2242, column: 6, scope: !6553)
!6714 = !DILocation(line: 2243, column: 16, scope: !6553)
!6715 = !DILocation(line: 2243, column: 3, scope: !6553)
!6716 = !DILocation(line: 2245, column: 28, scope: !6553)
!6717 = !DILocation(line: 2245, column: 3, scope: !6553)
!6718 = !DILocation(line: 2246, column: 28, scope: !6553)
!6719 = !DILocation(line: 2246, column: 3, scope: !6553)
!6720 = !DILocation(line: 2248, column: 10, scope: !6553)
!6721 = !DILocation(line: 2248, column: 3, scope: !6553)
!6722 = distinct !DISubprogram(name: "remove_name_from_operation", scope: !3, file: !3, line: 2138, type: !6723, scopeLine: 2139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6723 = !DISubroutineType(types: !6724)
!6724 = !{null, !982, !652}
!6725 = !DILocalVariable(name: "stmt", arg: 1, scope: !6722, file: !3, line: 2138, type: !982)
!6726 = !DILocation(line: 2138, column: 36, scope: !6722)
!6727 = !DILocalVariable(name: "op", arg: 2, scope: !6722, file: !3, line: 2138, type: !652)
!6728 = !DILocation(line: 2138, column: 47, scope: !6722)
!6729 = !DILocalVariable(name: "other_op", scope: !6722, file: !3, line: 2140, type: !652)
!6730 = !DILocation(line: 2140, column: 8, scope: !6722)
!6731 = !DILocalVariable(name: "si", scope: !6722, file: !3, line: 2141, type: !3983)
!6732 = !DILocation(line: 2141, column: 24, scope: !6722)
!6733 = !DILocation(line: 2143, column: 3, scope: !6722)
!6734 = !DILocation(line: 2145, column: 27, scope: !6735)
!6735 = distinct !DILexicalBlock(scope: !6722, file: !3, line: 2145, column: 7)
!6736 = !DILocation(line: 2145, column: 7, scope: !6735)
!6737 = !DILocation(line: 2145, column: 36, scope: !6735)
!6738 = !DILocation(line: 2145, column: 33, scope: !6735)
!6739 = !DILocation(line: 2145, column: 7, scope: !6722)
!6740 = !DILocation(line: 2146, column: 36, scope: !6735)
!6741 = !DILocation(line: 2146, column: 16, scope: !6735)
!6742 = !DILocation(line: 2146, column: 14, scope: !6735)
!6743 = !DILocation(line: 2146, column: 5, scope: !6735)
!6744 = !DILocation(line: 2148, column: 36, scope: !6735)
!6745 = !DILocation(line: 2148, column: 16, scope: !6735)
!6746 = !DILocation(line: 2148, column: 14, scope: !6735)
!6747 = !DILocation(line: 2150, column: 22, scope: !6722)
!6748 = !DILocation(line: 2150, column: 8, scope: !6722)
!6749 = !DILocation(line: 2151, column: 41, scope: !6722)
!6750 = !DILocation(line: 2151, column: 3, scope: !6722)
!6751 = !DILocation(line: 2154, column: 3, scope: !6722)
!6752 = !DILocation(line: 2156, column: 16, scope: !6722)
!6753 = !DILocation(line: 2156, column: 3, scope: !6722)
!6754 = !DILocation(line: 2157, column: 1, scope: !6722)
!6755 = distinct !DISubprogram(name: "make_ssa_name", scope: !2666, file: !2666, line: 1245, type: !6756, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6756 = !DISubroutineType(types: !6757)
!6757 = !{!652, !652, !982}
!6758 = !DILocalVariable(name: "var", arg: 1, scope: !6755, file: !2666, line: 1245, type: !652)
!6759 = !DILocation(line: 1245, column: 21, scope: !6755)
!6760 = !DILocalVariable(name: "stmt", arg: 2, scope: !6755, file: !2666, line: 1245, type: !982)
!6761 = !DILocation(line: 1245, column: 33, scope: !6755)
!6762 = !DILocation(line: 1247, column: 28, scope: !6755)
!6763 = !DILocation(line: 1247, column: 34, scope: !6755)
!6764 = !DILocation(line: 1247, column: 39, scope: !6755)
!6765 = !DILocation(line: 1247, column: 10, scope: !6755)
!6766 = !DILocation(line: 1247, column: 3, scope: !6755)
!6767 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !391, file: !391, line: 1759, type: !2699, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6768 = !DILocalVariable(name: "gs", arg: 1, scope: !6767, file: !391, line: 1759, type: !2347)
!6769 = !DILocation(line: 1759, column: 34, scope: !6767)
!6770 = !DILocation(line: 1763, column: 23, scope: !6771)
!6771 = distinct !DILexicalBlock(scope: !6767, file: !391, line: 1763, column: 7)
!6772 = !DILocation(line: 1763, column: 7, scope: !6771)
!6773 = !DILocation(line: 1763, column: 27, scope: !6771)
!6774 = !DILocation(line: 1763, column: 7, scope: !6767)
!6775 = !DILocation(line: 1764, column: 23, scope: !6771)
!6776 = !DILocation(line: 1764, column: 12, scope: !6771)
!6777 = !DILocation(line: 1764, column: 5, scope: !6771)
!6778 = !DILocation(line: 1766, column: 5, scope: !6771)
!6779 = !DILocation(line: 1767, column: 1, scope: !6767)
!6780 = distinct !DISubprogram(name: "gimple_num_ops", scope: !391, file: !391, line: 1596, type: !6781, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6781 = !DISubroutineType(types: !6782)
!6782 = !{!7, !2347}
!6783 = !DILocalVariable(name: "gs", arg: 1, scope: !6780, file: !391, line: 1596, type: !2347)
!6784 = !DILocation(line: 1596, column: 30, scope: !6780)
!6785 = !DILocation(line: 1598, column: 10, scope: !6780)
!6786 = !DILocation(line: 1598, column: 14, scope: !6780)
!6787 = !DILocation(line: 1598, column: 21, scope: !6780)
!6788 = !DILocation(line: 1598, column: 3, scope: !6780)
!6789 = distinct !DISubprogram(name: "gcd", scope: !2061, file: !2061, line: 427, type: !6790, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6790 = !DISubroutineType(types: !6791)
!6791 = !{!749, !749, !749}
!6792 = !DILocalVariable(name: "a", arg: 1, scope: !6789, file: !2061, line: 427, type: !749)
!6793 = !DILocation(line: 427, column: 10, scope: !6789)
!6794 = !DILocalVariable(name: "b", arg: 2, scope: !6789, file: !2061, line: 427, type: !749)
!6795 = !DILocation(line: 427, column: 17, scope: !6789)
!6796 = !DILocalVariable(name: "x", scope: !6789, file: !2061, line: 429, type: !749)
!6797 = !DILocation(line: 429, column: 7, scope: !6789)
!6798 = !DILocalVariable(name: "y", scope: !6789, file: !2061, line: 429, type: !749)
!6799 = !DILocation(line: 429, column: 10, scope: !6789)
!6800 = !DILocalVariable(name: "z", scope: !6789, file: !2061, line: 429, type: !749)
!6801 = !DILocation(line: 429, column: 13, scope: !6789)
!6802 = !DILocation(line: 431, column: 12, scope: !6789)
!6803 = !DILocation(line: 431, column: 7, scope: !6789)
!6804 = !DILocation(line: 431, column: 5, scope: !6789)
!6805 = !DILocation(line: 432, column: 12, scope: !6789)
!6806 = !DILocation(line: 432, column: 7, scope: !6789)
!6807 = !DILocation(line: 432, column: 5, scope: !6789)
!6808 = !DILocation(line: 434, column: 3, scope: !6789)
!6809 = !DILocation(line: 434, column: 10, scope: !6789)
!6810 = !DILocation(line: 434, column: 12, scope: !6789)
!6811 = !DILocation(line: 436, column: 11, scope: !6812)
!6812 = distinct !DILexicalBlock(scope: !6789, file: !2061, line: 435, column: 5)
!6813 = !DILocation(line: 436, column: 15, scope: !6812)
!6814 = !DILocation(line: 436, column: 13, scope: !6812)
!6815 = !DILocation(line: 436, column: 9, scope: !6812)
!6816 = !DILocation(line: 437, column: 11, scope: !6812)
!6817 = !DILocation(line: 437, column: 9, scope: !6812)
!6818 = !DILocation(line: 438, column: 11, scope: !6812)
!6819 = !DILocation(line: 438, column: 9, scope: !6812)
!6820 = distinct !{!6820, !6808, !6821}
!6821 = !DILocation(line: 439, column: 5, scope: !6789)
!6822 = !DILocation(line: 441, column: 10, scope: !6789)
!6823 = !DILocation(line: 441, column: 3, scope: !6789)
!6824 = distinct !DISubprogram(name: "replace_names_by_phis", scope: !3, file: !3, line: 1852, type: !3891, scopeLine: 1853, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6825 = !DILocalVariable(name: "chains", arg: 1, scope: !6824, file: !3, line: 1852, type: !2202)
!6826 = !DILocation(line: 1852, column: 45, scope: !6824)
!6827 = !DILocalVariable(name: "chain", scope: !6824, file: !3, line: 1854, type: !2080)
!6828 = !DILocation(line: 1854, column: 11, scope: !6824)
!6829 = !DILocalVariable(name: "a", scope: !6824, file: !3, line: 1855, type: !2010)
!6830 = !DILocation(line: 1855, column: 8, scope: !6824)
!6831 = !DILocalVariable(name: "i", scope: !6824, file: !3, line: 1856, type: !7)
!6832 = !DILocation(line: 1856, column: 12, scope: !6824)
!6833 = !DILocalVariable(name: "j", scope: !6824, file: !3, line: 1856, type: !7)
!6834 = !DILocation(line: 1856, column: 15, scope: !6824)
!6835 = !DILocation(line: 1858, column: 10, scope: !6836)
!6836 = distinct !DILexicalBlock(scope: !6824, file: !3, line: 1858, column: 3)
!6837 = !DILocation(line: 1858, column: 8, scope: !6836)
!6838 = !DILocation(line: 1858, column: 15, scope: !6839)
!6839 = distinct !DILexicalBlock(scope: !6836, file: !3, line: 1858, column: 3)
!6840 = !DILocation(line: 1858, column: 3, scope: !6836)
!6841 = !DILocation(line: 1859, column: 12, scope: !6842)
!6842 = distinct !DILexicalBlock(scope: !6839, file: !3, line: 1859, column: 5)
!6843 = !DILocation(line: 1859, column: 10, scope: !6842)
!6844 = !DILocation(line: 1859, column: 17, scope: !6845)
!6845 = distinct !DILexicalBlock(scope: !6842, file: !3, line: 1859, column: 5)
!6846 = !DILocation(line: 1859, column: 5, scope: !6842)
!6847 = !DILocation(line: 1860, column: 11, scope: !6848)
!6848 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 1860, column: 11)
!6849 = !DILocation(line: 1860, column: 14, scope: !6848)
!6850 = !DILocation(line: 1860, column: 19, scope: !6848)
!6851 = !DILocation(line: 1860, column: 11, scope: !6845)
!6852 = !DILocation(line: 1862, column: 14, scope: !6853)
!6853 = distinct !DILexicalBlock(scope: !6848, file: !3, line: 1861, column: 2)
!6854 = !DILocation(line: 1862, column: 4, scope: !6853)
!6855 = !DILocation(line: 1862, column: 7, scope: !6853)
!6856 = !DILocation(line: 1862, column: 12, scope: !6853)
!6857 = !DILocation(line: 1863, column: 4, scope: !6853)
!6858 = !DILocation(line: 1864, column: 4, scope: !6853)
!6859 = !DILocation(line: 1864, column: 7, scope: !6853)
!6860 = !DILocation(line: 1864, column: 27, scope: !6853)
!6861 = !DILocation(line: 1865, column: 2, scope: !6853)
!6862 = !DILocation(line: 1860, column: 22, scope: !6848)
!6863 = !DILocation(line: 1859, column: 57, scope: !6845)
!6864 = !DILocation(line: 1859, column: 5, scope: !6845)
!6865 = distinct !{!6865, !6846, !6866}
!6866 = !DILocation(line: 1865, column: 2, scope: !6842)
!6867 = !DILocation(line: 1858, column: 57, scope: !6839)
!6868 = !DILocation(line: 1858, column: 3, scope: !6839)
!6869 = distinct !{!6869, !6840, !6870}
!6870 = !DILocation(line: 1865, column: 2, scope: !6836)
!6871 = !DILocation(line: 1866, column: 1, scope: !6824)
!6872 = distinct !DISubprogram(name: "single_pred_p", scope: !135, file: !135, line: 634, type: !6873, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6873 = !DISubroutineType(types: !6874)
!6874 = !{!772, !6875}
!6875 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !653, line: 112, baseType: !6876)
!6876 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6877, size: 64)
!6877 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !947)
!6878 = !DILocalVariable(name: "bb", arg: 1, scope: !6872, file: !135, line: 634, type: !6875)
!6879 = !DILocation(line: 634, column: 34, scope: !6872)
!6880 = !DILocation(line: 636, column: 10, scope: !6872)
!6881 = !DILocation(line: 636, column: 33, scope: !6872)
!6882 = !DILocation(line: 636, column: 3, scope: !6872)
!6883 = distinct !DISubprogram(name: "base_names_in_chain_on", scope: !3, file: !3, line: 1894, type: !6884, scopeLine: 1895, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6884 = !DISubroutineType(types: !6885)
!6885 = !{null, !1197, !652, !652}
!6886 = !DILocalVariable(name: "loop", arg: 1, scope: !6883, file: !3, line: 1894, type: !1197)
!6887 = !DILocation(line: 1894, column: 38, scope: !6883)
!6888 = !DILocalVariable(name: "name", arg: 2, scope: !6883, file: !3, line: 1894, type: !652)
!6889 = !DILocation(line: 1894, column: 49, scope: !6883)
!6890 = !DILocalVariable(name: "var", arg: 3, scope: !6883, file: !3, line: 1894, type: !652)
!6891 = !DILocation(line: 1894, column: 60, scope: !6883)
!6892 = !DILocalVariable(name: "stmt", scope: !6883, file: !3, line: 1896, type: !982)
!6893 = !DILocation(line: 1896, column: 10, scope: !6883)
!6894 = !DILocalVariable(name: "phi", scope: !6883, file: !3, line: 1896, type: !982)
!6895 = !DILocation(line: 1896, column: 16, scope: !6883)
!6896 = !DILocalVariable(name: "iter", scope: !6883, file: !3, line: 1897, type: !6387)
!6897 = !DILocation(line: 1897, column: 20, scope: !6883)
!6898 = !DILocation(line: 1899, column: 25, scope: !6883)
!6899 = !DILocation(line: 1899, column: 3, scope: !6883)
!6900 = !DILocation(line: 1899, column: 23, scope: !6883)
!6901 = !DILocation(line: 1901, column: 3, scope: !6883)
!6902 = !DILocation(line: 1903, column: 11, scope: !6903)
!6903 = distinct !DILexicalBlock(scope: !6883, file: !3, line: 1902, column: 5)
!6904 = !DILocation(line: 1904, column: 7, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6903, file: !3, line: 1904, column: 7)
!6906 = !DILocation(line: 1904, column: 7, scope: !6907)
!6907 = distinct !DILexicalBlock(scope: !6905, file: !3, line: 1904, column: 7)
!6908 = !DILocation(line: 1906, column: 21, scope: !6909)
!6909 = distinct !DILexicalBlock(scope: !6910, file: !3, line: 1906, column: 8)
!6910 = distinct !DILexicalBlock(scope: !6907, file: !3, line: 1905, column: 2)
!6911 = !DILocation(line: 1906, column: 8, scope: !6909)
!6912 = !DILocation(line: 1906, column: 27, scope: !6909)
!6913 = !DILocation(line: 1907, column: 8, scope: !6909)
!6914 = !DILocation(line: 1907, column: 34, scope: !6909)
!6915 = !DILocation(line: 1907, column: 51, scope: !6909)
!6916 = !DILocation(line: 1907, column: 40, scope: !6909)
!6917 = !DILocation(line: 1907, column: 11, scope: !6909)
!6918 = !DILocation(line: 1906, column: 8, scope: !6910)
!6919 = !DILocation(line: 1909, column: 14, scope: !6920)
!6920 = distinct !DILexicalBlock(scope: !6909, file: !3, line: 1908, column: 6)
!6921 = !DILocation(line: 1909, column: 12, scope: !6920)
!6922 = !DILocation(line: 1910, column: 8, scope: !6923)
!6923 = distinct !DILexicalBlock(scope: !6920, file: !3, line: 1910, column: 8)
!6924 = !DILocation(line: 1912, column: 2, scope: !6910)
!6925 = distinct !{!6925, !6904, !6926}
!6926 = !DILocation(line: 1912, column: 2, scope: !6905)
!6927 = !DILocation(line: 1913, column: 12, scope: !6928)
!6928 = distinct !DILexicalBlock(scope: !6903, file: !3, line: 1913, column: 11)
!6929 = !DILocation(line: 1913, column: 11, scope: !6903)
!6930 = !DILocation(line: 1914, column: 2, scope: !6928)
!6931 = !DILocation(line: 1916, column: 14, scope: !6903)
!6932 = !DILocation(line: 1916, column: 12, scope: !6903)
!6933 = !DILocation(line: 1917, column: 29, scope: !6903)
!6934 = !DILocation(line: 1917, column: 7, scope: !6903)
!6935 = !DILocation(line: 1917, column: 27, scope: !6903)
!6936 = distinct !{!6936, !6901, !6937}
!6937 = !DILocation(line: 1918, column: 5, scope: !6883)
!6938 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !135, file: !135, line: 150, type: !6939, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6939 = !DISubroutineType(types: !6940)
!6940 = !{!7, !4469}
!6941 = !DILocalVariable(name: "vec_", arg: 1, scope: !6938, file: !135, line: 150, type: !4469)
!6942 = !DILocation(line: 150, column: 1, scope: !6938)
!6943 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !2666, file: !2666, line: 1058, type: !6944, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6944 = !DISubroutineType(types: !6945)
!6945 = !{!982, !6444, !652}
!6946 = !DILocalVariable(name: "imm", arg: 1, scope: !6943, file: !2666, line: 1058, type: !6444)
!6947 = !DILocation(line: 1058, column: 39, scope: !6943)
!6948 = !DILocalVariable(name: "var", arg: 2, scope: !6943, file: !2666, line: 1058, type: !652)
!6949 = !DILocation(line: 1058, column: 49, scope: !6943)
!6950 = !DILocation(line: 1060, column: 18, scope: !6943)
!6951 = !DILocation(line: 1060, column: 3, scope: !6943)
!6952 = !DILocation(line: 1060, column: 8, scope: !6943)
!6953 = !DILocation(line: 1060, column: 14, scope: !6943)
!6954 = !DILocation(line: 1061, column: 18, scope: !6943)
!6955 = !DILocation(line: 1061, column: 23, scope: !6943)
!6956 = !DILocation(line: 1061, column: 30, scope: !6943)
!6957 = !DILocation(line: 1061, column: 3, scope: !6943)
!6958 = !DILocation(line: 1061, column: 8, scope: !6943)
!6959 = !DILocation(line: 1061, column: 16, scope: !6943)
!6960 = !DILocation(line: 1062, column: 3, scope: !6943)
!6961 = !DILocation(line: 1062, column: 8, scope: !6943)
!6962 = !DILocation(line: 1062, column: 22, scope: !6943)
!6963 = !DILocation(line: 1067, column: 3, scope: !6943)
!6964 = !DILocation(line: 1067, column: 8, scope: !6943)
!6965 = !DILocation(line: 1067, column: 18, scope: !6943)
!6966 = !DILocation(line: 1067, column: 23, scope: !6943)
!6967 = !DILocation(line: 1068, column: 3, scope: !6943)
!6968 = !DILocation(line: 1068, column: 8, scope: !6943)
!6969 = !DILocation(line: 1068, column: 18, scope: !6943)
!6970 = !DILocation(line: 1068, column: 23, scope: !6943)
!6971 = !DILocation(line: 1069, column: 3, scope: !6943)
!6972 = !DILocation(line: 1069, column: 8, scope: !6943)
!6973 = !DILocation(line: 1069, column: 18, scope: !6943)
!6974 = !DILocation(line: 1069, column: 22, scope: !6943)
!6975 = !DILocation(line: 1069, column: 27, scope: !6943)
!6976 = !DILocation(line: 1070, column: 3, scope: !6943)
!6977 = !DILocation(line: 1070, column: 8, scope: !6943)
!6978 = !DILocation(line: 1070, column: 18, scope: !6943)
!6979 = !DILocation(line: 1070, column: 22, scope: !6943)
!6980 = !DILocation(line: 1072, column: 27, scope: !6981)
!6981 = distinct !DILexicalBlock(scope: !6943, file: !2666, line: 1072, column: 7)
!6982 = !DILocation(line: 1072, column: 7, scope: !6981)
!6983 = !DILocation(line: 1072, column: 7, scope: !6943)
!6984 = !DILocation(line: 1073, column: 5, scope: !6981)
!6985 = !DILocation(line: 1075, column: 25, scope: !6943)
!6986 = !DILocation(line: 1075, column: 30, scope: !6943)
!6987 = !DILocation(line: 1075, column: 39, scope: !6943)
!6988 = !DILocation(line: 1075, column: 3, scope: !6943)
!6989 = !DILocation(line: 1077, column: 10, scope: !6943)
!6990 = !DILocation(line: 1077, column: 3, scope: !6943)
!6991 = !DILocation(line: 1078, column: 1, scope: !6943)
!6992 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !2666, file: !2666, line: 969, type: !6469, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!6993 = !DILocalVariable(name: "imm", arg: 1, scope: !6992, file: !2666, line: 969, type: !6471)
!6994 = !DILocation(line: 969, column: 45, scope: !6992)
!6995 = !DILocation(line: 971, column: 11, scope: !6992)
!6996 = !DILocation(line: 971, column: 16, scope: !6992)
!6997 = !DILocation(line: 971, column: 27, scope: !6992)
!6998 = !DILocation(line: 971, column: 32, scope: !6992)
!6999 = !DILocation(line: 971, column: 24, scope: !6992)
!7000 = !DILocation(line: 971, column: 10, scope: !6992)
!7001 = !DILocation(line: 971, column: 3, scope: !6992)
!7002 = distinct !DISubprogram(name: "end_imm_use_stmt_traverse", scope: !2666, file: !2666, line: 978, type: !7003, scopeLine: 979, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7003 = !DISubroutineType(types: !7004)
!7004 = !{null, !6444}
!7005 = !DILocalVariable(name: "imm", arg: 1, scope: !7002, file: !2666, line: 978, type: !6444)
!7006 = !DILocation(line: 978, column: 46, scope: !7002)
!7007 = !DILocation(line: 980, column: 21, scope: !7002)
!7008 = !DILocation(line: 980, column: 26, scope: !7002)
!7009 = !DILocation(line: 980, column: 3, scope: !7002)
!7010 = !DILocation(line: 981, column: 1, scope: !7002)
!7011 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !2666, file: !2666, line: 1083, type: !7012, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7012 = !DISubroutineType(types: !7013)
!7013 = !{!982, !6444}
!7014 = !DILocalVariable(name: "imm", arg: 1, scope: !7011, file: !2666, line: 1083, type: !6444)
!7015 = !DILocation(line: 1083, column: 38, scope: !7011)
!7016 = !DILocation(line: 1085, column: 18, scope: !7011)
!7017 = !DILocation(line: 1085, column: 23, scope: !7011)
!7018 = !DILocation(line: 1085, column: 33, scope: !7011)
!7019 = !DILocation(line: 1085, column: 3, scope: !7011)
!7020 = !DILocation(line: 1085, column: 8, scope: !7011)
!7021 = !DILocation(line: 1085, column: 16, scope: !7011)
!7022 = !DILocation(line: 1086, column: 27, scope: !7023)
!7023 = distinct !DILexicalBlock(scope: !7011, file: !2666, line: 1086, column: 7)
!7024 = !DILocation(line: 1086, column: 7, scope: !7023)
!7025 = !DILocation(line: 1086, column: 7, scope: !7011)
!7026 = !DILocation(line: 1088, column: 11, scope: !7027)
!7027 = distinct !DILexicalBlock(scope: !7028, file: !2666, line: 1088, column: 11)
!7028 = distinct !DILexicalBlock(scope: !7023, file: !2666, line: 1087, column: 5)
!7029 = !DILocation(line: 1088, column: 16, scope: !7027)
!7030 = !DILocation(line: 1088, column: 26, scope: !7027)
!7031 = !DILocation(line: 1088, column: 31, scope: !7027)
!7032 = !DILocation(line: 1088, column: 11, scope: !7028)
!7033 = !DILocation(line: 1089, column: 19, scope: !7027)
!7034 = !DILocation(line: 1089, column: 24, scope: !7027)
!7035 = !DILocation(line: 1089, column: 2, scope: !7027)
!7036 = !DILocation(line: 1090, column: 7, scope: !7028)
!7037 = !DILocation(line: 1093, column: 25, scope: !7011)
!7038 = !DILocation(line: 1093, column: 30, scope: !7011)
!7039 = !DILocation(line: 1093, column: 39, scope: !7011)
!7040 = !DILocation(line: 1093, column: 3, scope: !7011)
!7041 = !DILocation(line: 1094, column: 10, scope: !7011)
!7042 = !DILocation(line: 1094, column: 3, scope: !7011)
!7043 = !DILocation(line: 1095, column: 1, scope: !7011)
!7044 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !2666, file: !2666, line: 1018, type: !7045, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7045 = !DISubroutineType(types: !7046)
!7046 = !{null, !2218, !6444}
!7047 = !DILocalVariable(name: "head", arg: 1, scope: !7044, file: !2666, line: 1018, type: !2218)
!7048 = !DILocation(line: 1018, column: 37, scope: !7044)
!7049 = !DILocalVariable(name: "imm", arg: 2, scope: !7044, file: !2666, line: 1018, type: !6444)
!7050 = !DILocation(line: 1018, column: 61, scope: !7044)
!7051 = !DILocalVariable(name: "use_p", scope: !7044, file: !2666, line: 1020, type: !2218)
!7052 = !DILocation(line: 1020, column: 17, scope: !7044)
!7053 = !DILocalVariable(name: "last_p", scope: !7044, file: !2666, line: 1021, type: !2218)
!7054 = !DILocation(line: 1021, column: 17, scope: !7044)
!7055 = !DILocation(line: 1021, column: 26, scope: !7044)
!7056 = !DILocalVariable(name: "head_stmt", scope: !7044, file: !2666, line: 1022, type: !982)
!7057 = !DILocation(line: 1022, column: 10, scope: !7044)
!7058 = !DILocation(line: 1022, column: 22, scope: !7044)
!7059 = !DILocalVariable(name: "use", scope: !7044, file: !2666, line: 1023, type: !652)
!7060 = !DILocation(line: 1023, column: 8, scope: !7044)
!7061 = !DILocation(line: 1023, column: 14, scope: !7044)
!7062 = !DILocalVariable(name: "op_iter", scope: !7044, file: !2666, line: 1024, type: !7063)
!7063 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !630, line: 140, baseType: !7064)
!7064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !630, line: 131, size: 320, elements: !7065)
!7065 = !{!7066, !7067, !7068, !7070, !7072, !7073, !7074}
!7066 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !7064, file: !630, line: 133, baseType: !772, size: 8)
!7067 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !7064, file: !630, line: 134, baseType: !629, size: 32, offset: 32)
!7068 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !7064, file: !630, line: 135, baseType: !7069, size: 64, offset: 64)
!7069 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !630, line: 42, baseType: !1011)
!7070 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !7064, file: !630, line: 136, baseType: !7071, size: 64, offset: 128)
!7071 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !630, line: 50, baseType: !1018)
!7072 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !7064, file: !630, line: 137, baseType: !749, size: 32, offset: 192)
!7073 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !7064, file: !630, line: 138, baseType: !749, size: 32, offset: 224)
!7074 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !7064, file: !630, line: 139, baseType: !982, size: 64, offset: 256)
!7075 = !DILocation(line: 1024, column: 15, scope: !7044)
!7076 = !DILocalVariable(name: "flag", scope: !7044, file: !2666, line: 1025, type: !749)
!7077 = !DILocation(line: 1025, column: 7, scope: !7044)
!7078 = !DILocation(line: 1028, column: 26, scope: !7044)
!7079 = !DILocation(line: 1028, column: 11, scope: !7044)
!7080 = !DILocation(line: 1028, column: 8, scope: !7044)
!7081 = !DILocation(line: 1030, column: 20, scope: !7082)
!7082 = distinct !DILexicalBlock(scope: !7044, file: !2666, line: 1030, column: 7)
!7083 = !DILocation(line: 1030, column: 7, scope: !7082)
!7084 = !DILocation(line: 1030, column: 31, scope: !7082)
!7085 = !DILocation(line: 1030, column: 7, scope: !7044)
!7086 = !DILocation(line: 1032, column: 7, scope: !7087)
!7087 = distinct !DILexicalBlock(scope: !7088, file: !2666, line: 1032, column: 7)
!7088 = distinct !DILexicalBlock(scope: !7082, file: !2666, line: 1031, column: 5)
!7089 = !DILocation(line: 1032, column: 7, scope: !7090)
!7090 = distinct !DILexicalBlock(scope: !7087, file: !2666, line: 1032, column: 7)
!7091 = !DILocation(line: 1033, column: 6, scope: !7092)
!7092 = distinct !DILexicalBlock(scope: !7090, file: !2666, line: 1033, column: 6)
!7093 = !DILocation(line: 1033, column: 30, scope: !7092)
!7094 = !DILocation(line: 1033, column: 27, scope: !7092)
!7095 = !DILocation(line: 1033, column: 6, scope: !7090)
!7096 = !DILocation(line: 1034, column: 34, scope: !7092)
!7097 = !DILocation(line: 1034, column: 41, scope: !7092)
!7098 = !DILocation(line: 1034, column: 47, scope: !7092)
!7099 = !DILocation(line: 1034, column: 13, scope: !7092)
!7100 = !DILocation(line: 1034, column: 11, scope: !7092)
!7101 = !DILocation(line: 1034, column: 4, scope: !7092)
!7102 = distinct !{!7102, !7086, !7103}
!7103 = !DILocation(line: 1034, column: 53, scope: !7087)
!7104 = !DILocation(line: 1035, column: 5, scope: !7088)
!7105 = !DILocation(line: 1038, column: 11, scope: !7106)
!7106 = distinct !DILexicalBlock(scope: !7107, file: !2666, line: 1038, column: 11)
!7107 = distinct !DILexicalBlock(scope: !7082, file: !2666, line: 1037, column: 5)
!7108 = !DILocation(line: 1038, column: 16, scope: !7106)
!7109 = !DILocation(line: 1038, column: 11, scope: !7107)
!7110 = !DILocation(line: 1040, column: 4, scope: !7111)
!7111 = distinct !DILexicalBlock(scope: !7112, file: !2666, line: 1040, column: 4)
!7112 = distinct !DILexicalBlock(scope: !7106, file: !2666, line: 1039, column: 2)
!7113 = !DILocation(line: 1040, column: 4, scope: !7114)
!7114 = distinct !DILexicalBlock(scope: !7111, file: !2666, line: 1040, column: 4)
!7115 = !DILocation(line: 1041, column: 10, scope: !7116)
!7116 = distinct !DILexicalBlock(scope: !7114, file: !2666, line: 1041, column: 10)
!7117 = !DILocation(line: 1041, column: 34, scope: !7116)
!7118 = !DILocation(line: 1041, column: 31, scope: !7116)
!7119 = !DILocation(line: 1041, column: 10, scope: !7114)
!7120 = !DILocation(line: 1042, column: 38, scope: !7116)
!7121 = !DILocation(line: 1042, column: 45, scope: !7116)
!7122 = !DILocation(line: 1042, column: 51, scope: !7116)
!7123 = !DILocation(line: 1042, column: 17, scope: !7116)
!7124 = !DILocation(line: 1042, column: 15, scope: !7116)
!7125 = !DILocation(line: 1042, column: 8, scope: !7116)
!7126 = distinct !{!7126, !7110, !7127}
!7127 = !DILocation(line: 1042, column: 57, scope: !7111)
!7128 = !DILocation(line: 1043, column: 2, scope: !7112)
!7129 = !DILocation(line: 1044, column: 41, scope: !7130)
!7130 = distinct !DILexicalBlock(scope: !7106, file: !2666, line: 1044, column: 16)
!7131 = !DILocation(line: 1044, column: 25, scope: !7130)
!7132 = !DILocation(line: 1044, column: 23, scope: !7130)
!7133 = !DILocation(line: 1044, column: 53, scope: !7130)
!7134 = !DILocation(line: 1044, column: 16, scope: !7106)
!7135 = !DILocation(line: 1046, column: 8, scope: !7136)
!7136 = distinct !DILexicalBlock(scope: !7137, file: !2666, line: 1046, column: 8)
!7137 = distinct !DILexicalBlock(scope: !7130, file: !2666, line: 1045, column: 2)
!7138 = !DILocation(line: 1046, column: 32, scope: !7136)
!7139 = !DILocation(line: 1046, column: 29, scope: !7136)
!7140 = !DILocation(line: 1046, column: 8, scope: !7137)
!7141 = !DILocation(line: 1047, column: 36, scope: !7136)
!7142 = !DILocation(line: 1047, column: 43, scope: !7136)
!7143 = !DILocation(line: 1047, column: 49, scope: !7136)
!7144 = !DILocation(line: 1047, column: 15, scope: !7136)
!7145 = !DILocation(line: 1047, column: 13, scope: !7136)
!7146 = !DILocation(line: 1047, column: 6, scope: !7136)
!7147 = !DILocation(line: 1048, column: 2, scope: !7137)
!7148 = !DILocation(line: 1051, column: 7, scope: !7149)
!7149 = distinct !DILexicalBlock(scope: !7044, file: !2666, line: 1051, column: 7)
!7150 = !DILocation(line: 1051, column: 12, scope: !7149)
!7151 = !DILocation(line: 1051, column: 22, scope: !7149)
!7152 = !DILocation(line: 1051, column: 27, scope: !7149)
!7153 = !DILocation(line: 1051, column: 7, scope: !7044)
!7154 = !DILocation(line: 1052, column: 22, scope: !7149)
!7155 = !DILocation(line: 1052, column: 27, scope: !7149)
!7156 = !DILocation(line: 1052, column: 5, scope: !7149)
!7157 = !DILocation(line: 1053, column: 27, scope: !7044)
!7158 = !DILocation(line: 1053, column: 32, scope: !7044)
!7159 = !DILocation(line: 1053, column: 44, scope: !7044)
!7160 = !DILocation(line: 1053, column: 3, scope: !7044)
!7161 = !DILocation(line: 1054, column: 1, scope: !7044)
!7162 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !2666, file: !2666, line: 910, type: !7163, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7163 = !DISubroutineType(types: !7164)
!7164 = !{!2218, !7165, !982, !749}
!7165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7063, size: 64)
!7166 = !DILocalVariable(name: "ptr", arg: 1, scope: !7162, file: !2666, line: 910, type: !7165)
!7167 = !DILocation(line: 910, column: 35, scope: !7162)
!7168 = !DILocalVariable(name: "phi", arg: 2, scope: !7162, file: !2666, line: 910, type: !982)
!7169 = !DILocation(line: 910, column: 47, scope: !7162)
!7170 = !DILocalVariable(name: "flags", arg: 3, scope: !7162, file: !2666, line: 910, type: !749)
!7171 = !DILocation(line: 910, column: 56, scope: !7162)
!7172 = !DILocalVariable(name: "phi_def", scope: !7162, file: !2666, line: 912, type: !652)
!7173 = !DILocation(line: 912, column: 8, scope: !7162)
!7174 = !DILocation(line: 912, column: 37, scope: !7162)
!7175 = !DILocation(line: 912, column: 18, scope: !7162)
!7176 = !DILocalVariable(name: "comp", scope: !7162, file: !2666, line: 913, type: !749)
!7177 = !DILocation(line: 913, column: 7, scope: !7162)
!7178 = !DILocation(line: 915, column: 28, scope: !7162)
!7179 = !DILocation(line: 915, column: 3, scope: !7162)
!7180 = !DILocation(line: 916, column: 3, scope: !7162)
!7181 = !DILocation(line: 916, column: 8, scope: !7162)
!7182 = !DILocation(line: 916, column: 13, scope: !7162)
!7183 = !DILocation(line: 918, column: 3, scope: !7162)
!7184 = !DILocation(line: 920, column: 26, scope: !7162)
!7185 = !DILocation(line: 920, column: 11, scope: !7162)
!7186 = !DILocation(line: 920, column: 8, scope: !7162)
!7187 = !DILocation(line: 923, column: 8, scope: !7188)
!7188 = distinct !DILexicalBlock(scope: !7162, file: !2666, line: 923, column: 7)
!7189 = !DILocation(line: 923, column: 16, scope: !7188)
!7190 = !DILocation(line: 923, column: 14, scope: !7188)
!7191 = !DILocation(line: 923, column: 22, scope: !7188)
!7192 = !DILocation(line: 923, column: 7, scope: !7162)
!7193 = !DILocation(line: 925, column: 7, scope: !7194)
!7194 = distinct !DILexicalBlock(scope: !7188, file: !2666, line: 924, column: 5)
!7195 = !DILocation(line: 925, column: 12, scope: !7194)
!7196 = !DILocation(line: 925, column: 17, scope: !7194)
!7197 = !DILocation(line: 926, column: 7, scope: !7194)
!7198 = !DILocation(line: 929, column: 19, scope: !7162)
!7199 = !DILocation(line: 929, column: 3, scope: !7162)
!7200 = !DILocation(line: 929, column: 8, scope: !7162)
!7201 = !DILocation(line: 929, column: 17, scope: !7162)
!7202 = !DILocation(line: 930, column: 39, scope: !7162)
!7203 = !DILocation(line: 930, column: 18, scope: !7162)
!7204 = !DILocation(line: 930, column: 3, scope: !7162)
!7205 = !DILocation(line: 930, column: 8, scope: !7162)
!7206 = !DILocation(line: 930, column: 16, scope: !7162)
!7207 = !DILocation(line: 931, column: 3, scope: !7162)
!7208 = !DILocation(line: 931, column: 8, scope: !7162)
!7209 = !DILocation(line: 931, column: 18, scope: !7162)
!7210 = !DILocation(line: 932, column: 28, scope: !7162)
!7211 = !DILocation(line: 932, column: 10, scope: !7162)
!7212 = !DILocation(line: 932, column: 3, scope: !7162)
!7213 = !DILocation(line: 933, column: 1, scope: !7162)
!7214 = distinct !DISubprogram(name: "op_iter_done", scope: !2666, file: !2666, line: 652, type: !7215, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7215 = !DISubroutineType(types: !7216)
!7216 = !{!772, !7217}
!7217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7218, size: 64)
!7218 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7063)
!7219 = !DILocalVariable(name: "ptr", arg: 1, scope: !7214, file: !2666, line: 652, type: !7217)
!7220 = !DILocation(line: 652, column: 34, scope: !7214)
!7221 = !DILocation(line: 654, column: 10, scope: !7214)
!7222 = !DILocation(line: 654, column: 15, scope: !7214)
!7223 = !DILocation(line: 654, column: 3, scope: !7214)
!7224 = distinct !DISubprogram(name: "move_use_after_head", scope: !2666, file: !2666, line: 990, type: !7225, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7225 = !DISubroutineType(types: !7226)
!7226 = !{!2218, !2218, !2218, !2218}
!7227 = !DILocalVariable(name: "use_p", arg: 1, scope: !7224, file: !2666, line: 990, type: !2218)
!7228 = !DILocation(line: 990, column: 36, scope: !7224)
!7229 = !DILocalVariable(name: "head", arg: 2, scope: !7224, file: !2666, line: 990, type: !2218)
!7230 = !DILocation(line: 990, column: 57, scope: !7224)
!7231 = !DILocalVariable(name: "last_p", arg: 3, scope: !7224, file: !2666, line: 991, type: !2218)
!7232 = !DILocation(line: 991, column: 23, scope: !7224)
!7233 = !DILocation(line: 997, column: 7, scope: !7234)
!7234 = distinct !DILexicalBlock(scope: !7224, file: !2666, line: 997, column: 7)
!7235 = !DILocation(line: 997, column: 16, scope: !7234)
!7236 = !DILocation(line: 997, column: 13, scope: !7234)
!7237 = !DILocation(line: 997, column: 7, scope: !7224)
!7238 = !DILocation(line: 1000, column: 11, scope: !7239)
!7239 = distinct !DILexicalBlock(scope: !7240, file: !2666, line: 1000, column: 11)
!7240 = distinct !DILexicalBlock(scope: !7234, file: !2666, line: 998, column: 5)
!7241 = !DILocation(line: 1000, column: 19, scope: !7239)
!7242 = !DILocation(line: 1000, column: 27, scope: !7239)
!7243 = !DILocation(line: 1000, column: 24, scope: !7239)
!7244 = !DILocation(line: 1000, column: 11, scope: !7240)
!7245 = !DILocation(line: 1001, column: 11, scope: !7239)
!7246 = !DILocation(line: 1001, column: 9, scope: !7239)
!7247 = !DILocation(line: 1001, column: 2, scope: !7239)
!7248 = !DILocation(line: 1005, column: 20, scope: !7249)
!7249 = distinct !DILexicalBlock(scope: !7239, file: !2666, line: 1003, column: 2)
!7250 = !DILocation(line: 1005, column: 4, scope: !7249)
!7251 = !DILocation(line: 1006, column: 26, scope: !7249)
!7252 = !DILocation(line: 1006, column: 33, scope: !7249)
!7253 = !DILocation(line: 1006, column: 4, scope: !7249)
!7254 = !DILocation(line: 1007, column: 13, scope: !7249)
!7255 = !DILocation(line: 1007, column: 11, scope: !7249)
!7256 = !DILocation(line: 1009, column: 5, scope: !7240)
!7257 = !DILocation(line: 1010, column: 10, scope: !7224)
!7258 = !DILocation(line: 1010, column: 3, scope: !7224)
!7259 = distinct !DISubprogram(name: "op_iter_next_use", scope: !2666, file: !2666, line: 659, type: !7260, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7260 = !DISubroutineType(types: !7261)
!7261 = !{!2218, !7165}
!7262 = !DILocalVariable(name: "ptr", arg: 1, scope: !7259, file: !2666, line: 659, type: !7165)
!7263 = !DILocation(line: 659, column: 32, scope: !7259)
!7264 = !DILocalVariable(name: "use_p", scope: !7259, file: !2666, line: 661, type: !2218)
!7265 = !DILocation(line: 661, column: 17, scope: !7259)
!7266 = !DILocation(line: 665, column: 7, scope: !7267)
!7267 = distinct !DILexicalBlock(scope: !7259, file: !2666, line: 665, column: 7)
!7268 = !DILocation(line: 665, column: 12, scope: !7267)
!7269 = !DILocation(line: 665, column: 7, scope: !7259)
!7270 = !DILocation(line: 667, column: 15, scope: !7271)
!7271 = distinct !DILexicalBlock(scope: !7267, file: !2666, line: 666, column: 5)
!7272 = !DILocation(line: 667, column: 13, scope: !7271)
!7273 = !DILocation(line: 668, column: 19, scope: !7271)
!7274 = !DILocation(line: 668, column: 24, scope: !7271)
!7275 = !DILocation(line: 668, column: 30, scope: !7271)
!7276 = !DILocation(line: 668, column: 7, scope: !7271)
!7277 = !DILocation(line: 668, column: 12, scope: !7271)
!7278 = !DILocation(line: 668, column: 17, scope: !7271)
!7279 = !DILocation(line: 669, column: 14, scope: !7271)
!7280 = !DILocation(line: 669, column: 7, scope: !7271)
!7281 = !DILocation(line: 671, column: 7, scope: !7282)
!7282 = distinct !DILexicalBlock(scope: !7259, file: !2666, line: 671, column: 7)
!7283 = !DILocation(line: 671, column: 12, scope: !7282)
!7284 = !DILocation(line: 671, column: 20, scope: !7282)
!7285 = !DILocation(line: 671, column: 25, scope: !7282)
!7286 = !DILocation(line: 671, column: 18, scope: !7282)
!7287 = !DILocation(line: 671, column: 7, scope: !7259)
!7288 = !DILocation(line: 673, column: 14, scope: !7289)
!7289 = distinct !DILexicalBlock(scope: !7282, file: !2666, line: 672, column: 5)
!7290 = !DILocation(line: 673, column: 7, scope: !7289)
!7291 = !DILocation(line: 675, column: 3, scope: !7259)
!7292 = !DILocation(line: 675, column: 8, scope: !7259)
!7293 = !DILocation(line: 675, column: 13, scope: !7259)
!7294 = !DILocation(line: 676, column: 3, scope: !7259)
!7295 = !DILocation(line: 677, column: 1, scope: !7259)
!7296 = distinct !DISubprogram(name: "op_iter_init_use", scope: !2666, file: !2666, line: 768, type: !7163, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7297 = !DILocalVariable(name: "ptr", arg: 1, scope: !7296, file: !2666, line: 768, type: !7165)
!7298 = !DILocation(line: 768, column: 32, scope: !7296)
!7299 = !DILocalVariable(name: "stmt", arg: 2, scope: !7296, file: !2666, line: 768, type: !982)
!7300 = !DILocation(line: 768, column: 44, scope: !7296)
!7301 = !DILocalVariable(name: "flags", arg: 3, scope: !7296, file: !2666, line: 768, type: !749)
!7302 = !DILocation(line: 768, column: 54, scope: !7296)
!7303 = !DILocation(line: 770, column: 3, scope: !7296)
!7304 = !DILocation(line: 772, column: 17, scope: !7296)
!7305 = !DILocation(line: 772, column: 22, scope: !7296)
!7306 = !DILocation(line: 772, column: 28, scope: !7296)
!7307 = !DILocation(line: 772, column: 3, scope: !7296)
!7308 = !DILocation(line: 773, column: 3, scope: !7296)
!7309 = !DILocation(line: 773, column: 8, scope: !7296)
!7310 = !DILocation(line: 773, column: 18, scope: !7296)
!7311 = !DILocation(line: 774, column: 28, scope: !7296)
!7312 = !DILocation(line: 774, column: 10, scope: !7296)
!7313 = !DILocation(line: 774, column: 3, scope: !7296)
!7314 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !391, file: !391, line: 1334, type: !7315, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7315 = !DISubroutineType(types: !7316)
!7316 = !{!2218, !2347}
!7317 = !DILocalVariable(name: "g", arg: 1, scope: !7314, file: !391, line: 1334, type: !2347)
!7318 = !DILocation(line: 1334, column: 30, scope: !7314)
!7319 = !DILocalVariable(name: "ops", scope: !7314, file: !391, line: 1336, type: !1018)
!7320 = !DILocation(line: 1336, column: 24, scope: !7314)
!7321 = !DILocation(line: 1337, column: 28, scope: !7322)
!7322 = distinct !DILexicalBlock(scope: !7314, file: !391, line: 1337, column: 7)
!7323 = !DILocation(line: 1337, column: 8, scope: !7322)
!7324 = !DILocation(line: 1337, column: 7, scope: !7314)
!7325 = !DILocation(line: 1338, column: 5, scope: !7322)
!7326 = !DILocation(line: 1339, column: 9, scope: !7314)
!7327 = !DILocation(line: 1339, column: 12, scope: !7314)
!7328 = !DILocation(line: 1339, column: 18, scope: !7314)
!7329 = !DILocation(line: 1339, column: 25, scope: !7314)
!7330 = !DILocation(line: 1339, column: 7, scope: !7314)
!7331 = !DILocation(line: 1340, column: 7, scope: !7332)
!7332 = distinct !DILexicalBlock(scope: !7314, file: !391, line: 1340, column: 7)
!7333 = !DILocation(line: 1341, column: 7, scope: !7332)
!7334 = !DILocation(line: 1341, column: 10, scope: !7332)
!7335 = !DILocation(line: 1341, column: 28, scope: !7332)
!7336 = !DILocation(line: 1341, column: 36, scope: !7332)
!7337 = !DILocation(line: 1341, column: 39, scope: !7332)
!7338 = !DILocation(line: 1341, column: 49, scope: !7332)
!7339 = !DILocation(line: 1341, column: 32, scope: !7332)
!7340 = !DILocation(line: 1340, column: 7, scope: !7314)
!7341 = !DILocation(line: 1342, column: 12, scope: !7332)
!7342 = !DILocation(line: 1342, column: 5, scope: !7332)
!7343 = !DILocation(line: 1343, column: 3, scope: !7314)
!7344 = !DILocation(line: 1344, column: 1, scope: !7314)
!7345 = distinct !DISubprogram(name: "delink_imm_use", scope: !2666, file: !2666, line: 188, type: !7346, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7346 = !DISubroutineType(types: !7347)
!7347 = !{null, !2219}
!7348 = !DILocalVariable(name: "linknode", arg: 1, scope: !7345, file: !2666, line: 188, type: !2219)
!7349 = !DILocation(line: 188, column: 36, scope: !7345)
!7350 = !DILocation(line: 191, column: 7, scope: !7351)
!7351 = distinct !DILexicalBlock(scope: !7345, file: !2666, line: 191, column: 7)
!7352 = !DILocation(line: 191, column: 17, scope: !7351)
!7353 = !DILocation(line: 191, column: 22, scope: !7351)
!7354 = !DILocation(line: 191, column: 7, scope: !7345)
!7355 = !DILocation(line: 192, column: 5, scope: !7351)
!7356 = !DILocation(line: 194, column: 26, scope: !7345)
!7357 = !DILocation(line: 194, column: 36, scope: !7345)
!7358 = !DILocation(line: 194, column: 3, scope: !7345)
!7359 = !DILocation(line: 194, column: 13, scope: !7345)
!7360 = !DILocation(line: 194, column: 19, scope: !7345)
!7361 = !DILocation(line: 194, column: 24, scope: !7345)
!7362 = !DILocation(line: 195, column: 26, scope: !7345)
!7363 = !DILocation(line: 195, column: 36, scope: !7345)
!7364 = !DILocation(line: 195, column: 3, scope: !7345)
!7365 = !DILocation(line: 195, column: 13, scope: !7345)
!7366 = !DILocation(line: 195, column: 19, scope: !7345)
!7367 = !DILocation(line: 195, column: 24, scope: !7345)
!7368 = !DILocation(line: 196, column: 3, scope: !7345)
!7369 = !DILocation(line: 196, column: 13, scope: !7345)
!7370 = !DILocation(line: 196, column: 18, scope: !7345)
!7371 = !DILocation(line: 197, column: 3, scope: !7345)
!7372 = !DILocation(line: 197, column: 13, scope: !7345)
!7373 = !DILocation(line: 197, column: 18, scope: !7345)
!7374 = !DILocation(line: 198, column: 1, scope: !7345)
!7375 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !2666, file: !2666, line: 202, type: !7376, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7376 = !DISubroutineType(types: !7377)
!7377 = !{null, !2219, !2219}
!7378 = !DILocalVariable(name: "linknode", arg: 1, scope: !7375, file: !2666, line: 202, type: !2219)
!7379 = !DILocation(line: 202, column: 42, scope: !7375)
!7380 = !DILocalVariable(name: "list", arg: 2, scope: !7375, file: !2666, line: 202, type: !2219)
!7381 = !DILocation(line: 202, column: 71, scope: !7375)
!7382 = !DILocation(line: 206, column: 20, scope: !7375)
!7383 = !DILocation(line: 206, column: 3, scope: !7375)
!7384 = !DILocation(line: 206, column: 13, scope: !7375)
!7385 = !DILocation(line: 206, column: 18, scope: !7375)
!7386 = !DILocation(line: 207, column: 20, scope: !7375)
!7387 = !DILocation(line: 207, column: 26, scope: !7375)
!7388 = !DILocation(line: 207, column: 3, scope: !7375)
!7389 = !DILocation(line: 207, column: 13, scope: !7375)
!7390 = !DILocation(line: 207, column: 18, scope: !7375)
!7391 = !DILocation(line: 208, column: 22, scope: !7375)
!7392 = !DILocation(line: 208, column: 3, scope: !7375)
!7393 = !DILocation(line: 208, column: 9, scope: !7375)
!7394 = !DILocation(line: 208, column: 15, scope: !7375)
!7395 = !DILocation(line: 208, column: 20, scope: !7375)
!7396 = !DILocation(line: 209, column: 16, scope: !7375)
!7397 = !DILocation(line: 209, column: 3, scope: !7375)
!7398 = !DILocation(line: 209, column: 9, scope: !7375)
!7399 = !DILocation(line: 209, column: 14, scope: !7375)
!7400 = !DILocation(line: 210, column: 1, scope: !7375)
!7401 = distinct !DISubprogram(name: "gimple_phi_result", scope: !391, file: !391, line: 3071, type: !2699, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7402 = !DILocalVariable(name: "gs", arg: 1, scope: !7401, file: !391, line: 3071, type: !2347)
!7403 = !DILocation(line: 3071, column: 33, scope: !7401)
!7404 = !DILocation(line: 3074, column: 10, scope: !7401)
!7405 = !DILocation(line: 3074, column: 14, scope: !7401)
!7406 = !DILocation(line: 3074, column: 25, scope: !7401)
!7407 = !DILocation(line: 3074, column: 3, scope: !7401)
!7408 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !2666, file: !2666, line: 729, type: !7409, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7409 = !DISubroutineType(types: !7410)
!7410 = !{null, !7165}
!7411 = !DILocalVariable(name: "ptr", arg: 1, scope: !7408, file: !2666, line: 729, type: !7165)
!7412 = !DILocation(line: 729, column: 39, scope: !7408)
!7413 = !DILocation(line: 731, column: 3, scope: !7408)
!7414 = !DILocation(line: 731, column: 8, scope: !7408)
!7415 = !DILocation(line: 731, column: 13, scope: !7408)
!7416 = !DILocation(line: 732, column: 3, scope: !7408)
!7417 = !DILocation(line: 732, column: 8, scope: !7408)
!7418 = !DILocation(line: 732, column: 13, scope: !7408)
!7419 = !DILocation(line: 733, column: 3, scope: !7408)
!7420 = !DILocation(line: 733, column: 8, scope: !7408)
!7421 = !DILocation(line: 733, column: 18, scope: !7408)
!7422 = !DILocation(line: 734, column: 3, scope: !7408)
!7423 = !DILocation(line: 734, column: 8, scope: !7408)
!7424 = !DILocation(line: 734, column: 14, scope: !7408)
!7425 = !DILocation(line: 735, column: 3, scope: !7408)
!7426 = !DILocation(line: 735, column: 8, scope: !7408)
!7427 = !DILocation(line: 735, column: 16, scope: !7408)
!7428 = !DILocation(line: 736, column: 3, scope: !7408)
!7429 = !DILocation(line: 736, column: 8, scope: !7408)
!7430 = !DILocation(line: 736, column: 17, scope: !7408)
!7431 = !DILocation(line: 737, column: 3, scope: !7408)
!7432 = !DILocation(line: 737, column: 8, scope: !7408)
!7433 = !DILocation(line: 737, column: 13, scope: !7408)
!7434 = !DILocation(line: 738, column: 1, scope: !7408)
!7435 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !391, file: !391, line: 3061, type: !6781, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7436 = !DILocalVariable(name: "gs", arg: 1, scope: !7435, file: !391, line: 3061, type: !2347)
!7437 = !DILocation(line: 3061, column: 35, scope: !7435)
!7438 = !DILocation(line: 3064, column: 10, scope: !7435)
!7439 = !DILocation(line: 3064, column: 14, scope: !7435)
!7440 = !DILocation(line: 3064, column: 25, scope: !7435)
!7441 = !DILocation(line: 3064, column: 3, scope: !7435)
!7442 = distinct !DISubprogram(name: "op_iter_init", scope: !2666, file: !2666, line: 742, type: !7443, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7443 = !DISubroutineType(types: !7444)
!7444 = !{null, !7165, !982, !749}
!7445 = !DILocalVariable(name: "ptr", arg: 1, scope: !7442, file: !2666, line: 742, type: !7165)
!7446 = !DILocation(line: 742, column: 28, scope: !7442)
!7447 = !DILocalVariable(name: "stmt", arg: 2, scope: !7442, file: !2666, line: 742, type: !982)
!7448 = !DILocation(line: 742, column: 40, scope: !7442)
!7449 = !DILocalVariable(name: "flags", arg: 3, scope: !7442, file: !2666, line: 742, type: !749)
!7450 = !DILocation(line: 742, column: 50, scope: !7442)
!7451 = !DILocation(line: 746, column: 3, scope: !7442)
!7452 = !DILocation(line: 748, column: 16, scope: !7442)
!7453 = !DILocation(line: 748, column: 22, scope: !7442)
!7454 = !DILocation(line: 748, column: 15, scope: !7442)
!7455 = !DILocation(line: 748, column: 68, scope: !7442)
!7456 = !DILocation(line: 748, column: 52, scope: !7442)
!7457 = !DILocation(line: 748, column: 3, scope: !7442)
!7458 = !DILocation(line: 748, column: 8, scope: !7442)
!7459 = !DILocation(line: 748, column: 13, scope: !7442)
!7460 = !DILocation(line: 749, column: 9, scope: !7461)
!7461 = distinct !DILexicalBlock(scope: !7442, file: !2666, line: 749, column: 7)
!7462 = !DILocation(line: 749, column: 15, scope: !7461)
!7463 = !DILocation(line: 750, column: 7, scope: !7461)
!7464 = !DILocation(line: 750, column: 10, scope: !7461)
!7465 = !DILocation(line: 750, column: 15, scope: !7461)
!7466 = !DILocation(line: 751, column: 7, scope: !7461)
!7467 = !DILocation(line: 751, column: 23, scope: !7461)
!7468 = !DILocation(line: 751, column: 10, scope: !7461)
!7469 = !DILocation(line: 751, column: 29, scope: !7461)
!7470 = !DILocation(line: 749, column: 7, scope: !7442)
!7471 = !DILocation(line: 752, column: 17, scope: !7461)
!7472 = !DILocation(line: 752, column: 22, scope: !7461)
!7473 = !DILocation(line: 752, column: 28, scope: !7461)
!7474 = !DILocation(line: 752, column: 5, scope: !7461)
!7475 = !DILocation(line: 752, column: 10, scope: !7461)
!7476 = !DILocation(line: 752, column: 15, scope: !7461)
!7477 = !DILocation(line: 753, column: 16, scope: !7442)
!7478 = !DILocation(line: 753, column: 22, scope: !7442)
!7479 = !DILocation(line: 753, column: 15, scope: !7442)
!7480 = !DILocation(line: 753, column: 68, scope: !7442)
!7481 = !DILocation(line: 753, column: 52, scope: !7442)
!7482 = !DILocation(line: 753, column: 3, scope: !7442)
!7483 = !DILocation(line: 753, column: 8, scope: !7442)
!7484 = !DILocation(line: 753, column: 13, scope: !7442)
!7485 = !DILocation(line: 754, column: 9, scope: !7486)
!7486 = distinct !DILexicalBlock(scope: !7442, file: !2666, line: 754, column: 7)
!7487 = !DILocation(line: 754, column: 15, scope: !7486)
!7488 = !DILocation(line: 755, column: 7, scope: !7486)
!7489 = !DILocation(line: 755, column: 10, scope: !7486)
!7490 = !DILocation(line: 755, column: 15, scope: !7486)
!7491 = !DILocation(line: 756, column: 7, scope: !7486)
!7492 = !DILocation(line: 756, column: 23, scope: !7486)
!7493 = !DILocation(line: 756, column: 10, scope: !7486)
!7494 = !DILocation(line: 756, column: 29, scope: !7486)
!7495 = !DILocation(line: 754, column: 7, scope: !7442)
!7496 = !DILocation(line: 757, column: 17, scope: !7486)
!7497 = !DILocation(line: 757, column: 22, scope: !7486)
!7498 = !DILocation(line: 757, column: 28, scope: !7486)
!7499 = !DILocation(line: 757, column: 5, scope: !7486)
!7500 = !DILocation(line: 757, column: 10, scope: !7486)
!7501 = !DILocation(line: 757, column: 15, scope: !7486)
!7502 = !DILocation(line: 758, column: 3, scope: !7442)
!7503 = !DILocation(line: 758, column: 8, scope: !7442)
!7504 = !DILocation(line: 758, column: 13, scope: !7442)
!7505 = !DILocation(line: 760, column: 3, scope: !7442)
!7506 = !DILocation(line: 760, column: 8, scope: !7442)
!7507 = !DILocation(line: 760, column: 14, scope: !7442)
!7508 = !DILocation(line: 761, column: 3, scope: !7442)
!7509 = !DILocation(line: 761, column: 8, scope: !7442)
!7510 = !DILocation(line: 761, column: 16, scope: !7442)
!7511 = !DILocation(line: 762, column: 3, scope: !7442)
!7512 = !DILocation(line: 762, column: 8, scope: !7442)
!7513 = !DILocation(line: 762, column: 17, scope: !7442)
!7514 = !DILocation(line: 763, column: 1, scope: !7442)
!7515 = distinct !DISubprogram(name: "gimple_def_ops", scope: !391, file: !391, line: 1292, type: !7516, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7516 = !DISubroutineType(types: !7517)
!7517 = !{!1011, !2347}
!7518 = !DILocalVariable(name: "g", arg: 1, scope: !7515, file: !391, line: 1292, type: !2347)
!7519 = !DILocation(line: 1292, column: 30, scope: !7515)
!7520 = !DILocation(line: 1294, column: 24, scope: !7521)
!7521 = distinct !DILexicalBlock(scope: !7515, file: !391, line: 1294, column: 7)
!7522 = !DILocation(line: 1294, column: 8, scope: !7521)
!7523 = !DILocation(line: 1294, column: 7, scope: !7515)
!7524 = !DILocation(line: 1295, column: 5, scope: !7521)
!7525 = !DILocation(line: 1296, column: 10, scope: !7515)
!7526 = !DILocation(line: 1296, column: 13, scope: !7515)
!7527 = !DILocation(line: 1296, column: 19, scope: !7515)
!7528 = !DILocation(line: 1296, column: 26, scope: !7515)
!7529 = !DILocation(line: 1296, column: 3, scope: !7515)
!7530 = !DILocation(line: 1297, column: 1, scope: !7515)
!7531 = distinct !DISubprogram(name: "gimple_vdef", scope: !391, file: !391, line: 1375, type: !2699, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7532 = !DILocalVariable(name: "g", arg: 1, scope: !7531, file: !391, line: 1375, type: !2347)
!7533 = !DILocation(line: 1375, column: 27, scope: !7531)
!7534 = !DILocation(line: 1377, column: 28, scope: !7535)
!7535 = distinct !DILexicalBlock(scope: !7531, file: !391, line: 1377, column: 7)
!7536 = !DILocation(line: 1377, column: 8, scope: !7535)
!7537 = !DILocation(line: 1377, column: 7, scope: !7531)
!7538 = !DILocation(line: 1378, column: 5, scope: !7535)
!7539 = !DILocation(line: 1379, column: 10, scope: !7531)
!7540 = !DILocation(line: 1379, column: 13, scope: !7531)
!7541 = !DILocation(line: 1379, column: 23, scope: !7531)
!7542 = !DILocation(line: 1379, column: 3, scope: !7531)
!7543 = !DILocation(line: 1380, column: 1, scope: !7531)
!7544 = distinct !DISubprogram(name: "gimple_use_ops", scope: !391, file: !391, line: 1313, type: !7545, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7545 = !DISubroutineType(types: !7546)
!7546 = !{!1018, !2347}
!7547 = !DILocalVariable(name: "g", arg: 1, scope: !7544, file: !391, line: 1313, type: !2347)
!7548 = !DILocation(line: 1313, column: 30, scope: !7544)
!7549 = !DILocation(line: 1315, column: 24, scope: !7550)
!7550 = distinct !DILexicalBlock(scope: !7544, file: !391, line: 1315, column: 7)
!7551 = !DILocation(line: 1315, column: 8, scope: !7550)
!7552 = !DILocation(line: 1315, column: 7, scope: !7544)
!7553 = !DILocation(line: 1316, column: 5, scope: !7550)
!7554 = !DILocation(line: 1317, column: 10, scope: !7544)
!7555 = !DILocation(line: 1317, column: 13, scope: !7544)
!7556 = !DILocation(line: 1317, column: 19, scope: !7544)
!7557 = !DILocation(line: 1317, column: 26, scope: !7544)
!7558 = !DILocation(line: 1317, column: 3, scope: !7544)
!7559 = !DILocation(line: 1318, column: 1, scope: !7544)
!7560 = distinct !DISubprogram(name: "execute_load_motion", scope: !3, file: !3, line: 1611, type: !7561, scopeLine: 1612, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7561 = !DISubroutineType(types: !7562)
!7562 = !{null, !1197, !2080, !1552}
!7563 = !DILocalVariable(name: "loop", arg: 1, scope: !7560, file: !3, line: 1611, type: !1197)
!7564 = !DILocation(line: 1611, column: 35, scope: !7560)
!7565 = !DILocalVariable(name: "chain", arg: 2, scope: !7560, file: !3, line: 1611, type: !2080)
!7566 = !DILocation(line: 1611, column: 49, scope: !7560)
!7567 = !DILocalVariable(name: "tmp_vars", arg: 3, scope: !7560, file: !3, line: 1611, type: !1552)
!7568 = !DILocation(line: 1611, column: 63, scope: !7560)
!7569 = !DILocalVariable(name: "vars", scope: !7560, file: !3, line: 1613, type: !2036)
!7570 = !DILocation(line: 1613, column: 21, scope: !7560)
!7571 = !DILocalVariable(name: "a", scope: !7560, file: !3, line: 1614, type: !2010)
!7572 = !DILocation(line: 1614, column: 8, scope: !7560)
!7573 = !DILocalVariable(name: "n_writes", scope: !7560, file: !3, line: 1615, type: !7)
!7574 = !DILocation(line: 1615, column: 12, scope: !7560)
!7575 = !DILocalVariable(name: "ridx", scope: !7560, file: !3, line: 1615, type: !7)
!7576 = !DILocation(line: 1615, column: 26, scope: !7560)
!7577 = !DILocalVariable(name: "i", scope: !7560, file: !3, line: 1615, type: !7)
!7578 = !DILocation(line: 1615, column: 32, scope: !7560)
!7579 = !DILocalVariable(name: "var", scope: !7560, file: !3, line: 1616, type: !652)
!7580 = !DILocation(line: 1616, column: 8, scope: !7560)
!7581 = !DILocation(line: 1618, column: 3, scope: !7560)
!7582 = !DILocation(line: 1619, column: 3, scope: !7560)
!7583 = !DILocation(line: 1620, column: 10, scope: !7584)
!7584 = distinct !DILexicalBlock(scope: !7560, file: !3, line: 1620, column: 3)
!7585 = !DILocation(line: 1620, column: 8, scope: !7584)
!7586 = !DILocation(line: 1620, column: 15, scope: !7587)
!7587 = distinct !DILexicalBlock(scope: !7584, file: !3, line: 1620, column: 3)
!7588 = !DILocation(line: 1620, column: 3, scope: !7584)
!7589 = !DILocation(line: 1621, column: 10, scope: !7590)
!7590 = distinct !DILexicalBlock(scope: !7587, file: !3, line: 1621, column: 9)
!7591 = !DILocation(line: 1621, column: 9, scope: !7587)
!7592 = !DILocation(line: 1622, column: 15, scope: !7590)
!7593 = !DILocation(line: 1622, column: 7, scope: !7590)
!7594 = !DILocation(line: 1620, column: 55, scope: !7587)
!7595 = !DILocation(line: 1620, column: 3, scope: !7587)
!7596 = distinct !{!7596, !7588, !7597}
!7597 = !DILocation(line: 1622, column: 15, scope: !7584)
!7598 = !DILocation(line: 1625, column: 7, scope: !7599)
!7599 = distinct !DILexicalBlock(scope: !7560, file: !3, line: 1625, column: 7)
!7600 = !DILocation(line: 1625, column: 19, scope: !7599)
!7601 = !DILocation(line: 1625, column: 16, scope: !7599)
!7602 = !DILocation(line: 1625, column: 7, scope: !7560)
!7603 = !DILocation(line: 1626, column: 5, scope: !7599)
!7604 = !DILocation(line: 1628, column: 28, scope: !7560)
!7605 = !DILocation(line: 1628, column: 50, scope: !7560)
!7606 = !DILocation(line: 1628, column: 34, scope: !7560)
!7607 = !DILocation(line: 1628, column: 58, scope: !7560)
!7608 = !DILocation(line: 1628, column: 67, scope: !7560)
!7609 = !DILocation(line: 1629, column: 14, scope: !7560)
!7610 = !DILocation(line: 1629, column: 21, scope: !7560)
!7611 = !DILocation(line: 1629, column: 28, scope: !7560)
!7612 = !DILocation(line: 1628, column: 3, scope: !7560)
!7613 = !DILocation(line: 1631, column: 8, scope: !7560)
!7614 = !DILocation(line: 1632, column: 10, scope: !7615)
!7615 = distinct !DILexicalBlock(scope: !7560, file: !3, line: 1632, column: 3)
!7616 = !DILocation(line: 1632, column: 8, scope: !7615)
!7617 = !DILocation(line: 1632, column: 15, scope: !7618)
!7618 = distinct !DILexicalBlock(scope: !7615, file: !3, line: 1632, column: 3)
!7619 = !DILocation(line: 1632, column: 3, scope: !7615)
!7620 = !DILocalVariable(name: "is_read", scope: !7621, file: !3, line: 1634, type: !772)
!7621 = distinct !DILexicalBlock(scope: !7618, file: !3, line: 1633, column: 5)
!7622 = !DILocation(line: 1634, column: 12, scope: !7621)
!7623 = !DILocation(line: 1634, column: 22, scope: !7621)
!7624 = !DILocation(line: 1635, column: 38, scope: !7621)
!7625 = !DILocation(line: 1635, column: 41, scope: !7621)
!7626 = !DILocation(line: 1635, column: 7, scope: !7621)
!7627 = !DILocation(line: 1637, column: 12, scope: !7628)
!7628 = distinct !DILexicalBlock(scope: !7621, file: !3, line: 1637, column: 11)
!7629 = !DILocation(line: 1637, column: 11, scope: !7621)
!7630 = !DILocation(line: 1639, column: 12, scope: !7631)
!7631 = distinct !DILexicalBlock(scope: !7628, file: !3, line: 1638, column: 2)
!7632 = !DILocation(line: 1640, column: 8, scope: !7633)
!7633 = distinct !DILexicalBlock(scope: !7631, file: !3, line: 1640, column: 8)
!7634 = !DILocation(line: 1640, column: 8, scope: !7631)
!7635 = !DILocation(line: 1642, column: 14, scope: !7636)
!7636 = distinct !DILexicalBlock(scope: !7633, file: !3, line: 1641, column: 6)
!7637 = !DILocation(line: 1642, column: 12, scope: !7636)
!7638 = !DILocation(line: 1643, column: 29, scope: !7636)
!7639 = !DILocation(line: 1643, column: 14, scope: !7636)
!7640 = !DILocation(line: 1643, column: 12, scope: !7636)
!7641 = !DILocation(line: 1644, column: 8, scope: !7636)
!7642 = !DILocation(line: 1645, column: 6, scope: !7636)
!7643 = !DILocation(line: 1647, column: 11, scope: !7633)
!7644 = !DILocation(line: 1648, column: 2, scope: !7631)
!7645 = !DILocation(line: 1650, column: 25, scope: !7621)
!7646 = !DILocation(line: 1650, column: 28, scope: !7621)
!7647 = !DILocation(line: 1650, column: 34, scope: !7621)
!7648 = !DILocation(line: 1651, column: 5, scope: !7621)
!7649 = !DILocation(line: 1651, column: 4, scope: !7621)
!7650 = !DILocation(line: 1651, column: 15, scope: !7621)
!7651 = !DILocation(line: 1651, column: 14, scope: !7621)
!7652 = !DILocation(line: 1650, column: 7, scope: !7621)
!7653 = !DILocation(line: 1652, column: 5, scope: !7621)
!7654 = !DILocation(line: 1632, column: 55, scope: !7618)
!7655 = !DILocation(line: 1632, column: 3, scope: !7618)
!7656 = distinct !{!7656, !7619, !7657}
!7657 = !DILocation(line: 1652, column: 5, scope: !7615)
!7658 = !DILocation(line: 1654, column: 3, scope: !7560)
!7659 = !DILocation(line: 1655, column: 1, scope: !7560)
!7660 = distinct !DISubprogram(name: "execute_pred_commoning_chain", scope: !3, file: !3, line: 1744, type: !7561, scopeLine: 1746, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7661 = !DILocalVariable(name: "loop", arg: 1, scope: !7660, file: !3, line: 1744, type: !1197)
!7662 = !DILocation(line: 1744, column: 44, scope: !7660)
!7663 = !DILocalVariable(name: "chain", arg: 2, scope: !7660, file: !3, line: 1744, type: !2080)
!7664 = !DILocation(line: 1744, column: 58, scope: !7660)
!7665 = !DILocalVariable(name: "tmp_vars", arg: 3, scope: !7660, file: !3, line: 1745, type: !1552)
!7666 = !DILocation(line: 1745, column: 16, scope: !7660)
!7667 = !DILocalVariable(name: "i", scope: !7660, file: !3, line: 1747, type: !7)
!7668 = !DILocation(line: 1747, column: 12, scope: !7660)
!7669 = !DILocalVariable(name: "a", scope: !7660, file: !3, line: 1748, type: !2010)
!7670 = !DILocation(line: 1748, column: 8, scope: !7660)
!7671 = !DILocalVariable(name: "root", scope: !7660, file: !3, line: 1748, type: !2010)
!7672 = !DILocation(line: 1748, column: 11, scope: !7660)
!7673 = !DILocalVariable(name: "var", scope: !7660, file: !3, line: 1749, type: !652)
!7674 = !DILocation(line: 1749, column: 8, scope: !7660)
!7675 = !DILocation(line: 1751, column: 7, scope: !7676)
!7676 = distinct !DILexicalBlock(scope: !7660, file: !3, line: 1751, column: 7)
!7677 = !DILocation(line: 1751, column: 14, scope: !7676)
!7678 = !DILocation(line: 1751, column: 7, scope: !7660)
!7679 = !DILocation(line: 1755, column: 14, scope: !7680)
!7680 = distinct !DILexicalBlock(scope: !7681, file: !3, line: 1755, column: 7)
!7681 = distinct !DILexicalBlock(scope: !7676, file: !3, line: 1752, column: 5)
!7682 = !DILocation(line: 1755, column: 12, scope: !7680)
!7683 = !DILocation(line: 1755, column: 19, scope: !7684)
!7684 = distinct !DILexicalBlock(scope: !7680, file: !3, line: 1755, column: 7)
!7685 = !DILocation(line: 1755, column: 7, scope: !7680)
!7686 = !DILocation(line: 1756, column: 15, scope: !7684)
!7687 = !DILocation(line: 1756, column: 18, scope: !7684)
!7688 = !DILocation(line: 1756, column: 2, scope: !7684)
!7689 = !DILocation(line: 1755, column: 59, scope: !7684)
!7690 = !DILocation(line: 1755, column: 7, scope: !7684)
!7691 = distinct !{!7691, !7685, !7692}
!7692 = !DILocation(line: 1756, column: 22, scope: !7680)
!7693 = !DILocation(line: 1757, column: 5, scope: !7681)
!7694 = !DILocation(line: 1763, column: 30, scope: !7695)
!7695 = distinct !DILexicalBlock(scope: !7676, file: !3, line: 1759, column: 5)
!7696 = !DILocation(line: 1763, column: 14, scope: !7695)
!7697 = !DILocation(line: 1763, column: 12, scope: !7695)
!7698 = !DILocation(line: 1764, column: 38, scope: !7695)
!7699 = !DILocation(line: 1764, column: 44, scope: !7695)
!7700 = !DILocation(line: 1764, column: 7, scope: !7695)
!7701 = !DILocation(line: 1766, column: 24, scope: !7695)
!7702 = !DILocation(line: 1766, column: 30, scope: !7695)
!7703 = !DILocation(line: 1766, column: 37, scope: !7695)
!7704 = !DILocation(line: 1766, column: 7, scope: !7695)
!7705 = !DILocation(line: 1767, column: 14, scope: !7706)
!7706 = distinct !DILexicalBlock(scope: !7695, file: !3, line: 1767, column: 7)
!7707 = !DILocation(line: 1767, column: 12, scope: !7706)
!7708 = !DILocation(line: 1767, column: 19, scope: !7709)
!7709 = distinct !DILexicalBlock(scope: !7706, file: !3, line: 1767, column: 7)
!7710 = !DILocation(line: 1767, column: 7, scope: !7706)
!7711 = !DILocation(line: 1769, column: 35, scope: !7712)
!7712 = distinct !DILexicalBlock(scope: !7709, file: !3, line: 1768, column: 2)
!7713 = !DILocation(line: 1769, column: 38, scope: !7712)
!7714 = !DILocation(line: 1769, column: 4, scope: !7712)
!7715 = !DILocation(line: 1770, column: 10, scope: !7712)
!7716 = !DILocation(line: 1770, column: 8, scope: !7712)
!7717 = !DILocation(line: 1771, column: 22, scope: !7712)
!7718 = !DILocation(line: 1771, column: 25, scope: !7712)
!7719 = !DILocation(line: 1771, column: 31, scope: !7712)
!7720 = !DILocation(line: 1771, column: 4, scope: !7712)
!7721 = !DILocation(line: 1772, column: 2, scope: !7712)
!7722 = !DILocation(line: 1767, column: 59, scope: !7709)
!7723 = !DILocation(line: 1767, column: 7, scope: !7709)
!7724 = distinct !{!7724, !7710, !7725}
!7725 = !DILocation(line: 1772, column: 2, scope: !7706)
!7726 = !DILocation(line: 1774, column: 1, scope: !7660)
!7727 = distinct !DISubprogram(name: "initialize_root_vars_lm", scope: !3, file: !3, line: 1561, type: !7728, scopeLine: 1564, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7728 = !DISubroutineType(types: !7729)
!7729 = !{null, !1197, !2010, !772, !5483, !2036, !1552}
!7730 = !DILocalVariable(name: "loop", arg: 1, scope: !7727, file: !3, line: 1561, type: !1197)
!7731 = !DILocation(line: 1561, column: 39, scope: !7727)
!7732 = !DILocalVariable(name: "root", arg: 2, scope: !7727, file: !3, line: 1561, type: !2010)
!7733 = !DILocation(line: 1561, column: 50, scope: !7727)
!7734 = !DILocalVariable(name: "written", arg: 3, scope: !7727, file: !3, line: 1561, type: !772)
!7735 = !DILocation(line: 1561, column: 61, scope: !7727)
!7736 = !DILocalVariable(name: "vars", arg: 4, scope: !7727, file: !3, line: 1562, type: !5483)
!7737 = !DILocation(line: 1562, column: 23, scope: !7727)
!7738 = !DILocalVariable(name: "inits", arg: 5, scope: !7727, file: !3, line: 1562, type: !2036)
!7739 = !DILocation(line: 1562, column: 46, scope: !7727)
!7740 = !DILocalVariable(name: "tmp_vars", arg: 6, scope: !7727, file: !3, line: 1563, type: !1552)
!7741 = !DILocation(line: 1563, column: 12, scope: !7727)
!7742 = !DILocalVariable(name: "i", scope: !7727, file: !3, line: 1565, type: !7)
!7743 = !DILocation(line: 1565, column: 12, scope: !7727)
!7744 = !DILocalVariable(name: "ref", scope: !7727, file: !3, line: 1566, type: !652)
!7745 = !DILocation(line: 1566, column: 8, scope: !7727)
!7746 = !DILocation(line: 1566, column: 14, scope: !7727)
!7747 = !DILocalVariable(name: "init", scope: !7727, file: !3, line: 1566, type: !652)
!7748 = !DILocation(line: 1566, column: 34, scope: !7727)
!7749 = !DILocalVariable(name: "var", scope: !7727, file: !3, line: 1566, type: !652)
!7750 = !DILocation(line: 1566, column: 40, scope: !7727)
!7751 = !DILocalVariable(name: "next", scope: !7727, file: !3, line: 1566, type: !652)
!7752 = !DILocation(line: 1566, column: 45, scope: !7727)
!7753 = !DILocalVariable(name: "stmts", scope: !7727, file: !3, line: 1567, type: !972)
!7754 = !DILocation(line: 1567, column: 14, scope: !7727)
!7755 = !DILocalVariable(name: "phi", scope: !7727, file: !3, line: 1568, type: !982)
!7756 = !DILocation(line: 1568, column: 10, scope: !7727)
!7757 = !DILocalVariable(name: "entry", scope: !7727, file: !3, line: 1569, type: !962)
!7758 = !DILocation(line: 1569, column: 8, scope: !7727)
!7759 = !DILocation(line: 1569, column: 37, scope: !7727)
!7760 = !DILocation(line: 1569, column: 16, scope: !7727)
!7761 = !DILocalVariable(name: "latch", scope: !7727, file: !3, line: 1569, type: !962)
!7762 = !DILocation(line: 1569, column: 44, scope: !7727)
!7763 = !DILocation(line: 1569, column: 69, scope: !7727)
!7764 = !DILocation(line: 1569, column: 52, scope: !7727)
!7765 = !DILocation(line: 1573, column: 10, scope: !7727)
!7766 = !DILocation(line: 1573, column: 8, scope: !7727)
!7767 = !DILocation(line: 1575, column: 11, scope: !7727)
!7768 = !DILocation(line: 1575, column: 4, scope: !7727)
!7769 = !DILocation(line: 1575, column: 9, scope: !7727)
!7770 = !DILocation(line: 1576, column: 26, scope: !7727)
!7771 = !DILocation(line: 1576, column: 34, scope: !7727)
!7772 = !DILocation(line: 1576, column: 9, scope: !7727)
!7773 = !DILocation(line: 1576, column: 7, scope: !7727)
!7774 = !DILocation(line: 1577, column: 3, scope: !7727)
!7775 = !DILocation(line: 1578, column: 7, scope: !7776)
!7776 = distinct !DILexicalBlock(scope: !7727, file: !3, line: 1578, column: 7)
!7777 = !DILocation(line: 1578, column: 7, scope: !7727)
!7778 = !DILocation(line: 1579, column: 5, scope: !7776)
!7779 = !DILocation(line: 1581, column: 10, scope: !7780)
!7780 = distinct !DILexicalBlock(scope: !7727, file: !3, line: 1581, column: 3)
!7781 = !DILocation(line: 1581, column: 8, scope: !7780)
!7782 = !DILocation(line: 1581, column: 15, scope: !7783)
!7783 = distinct !DILexicalBlock(scope: !7780, file: !3, line: 1581, column: 3)
!7784 = !DILocation(line: 1581, column: 3, scope: !7780)
!7785 = !DILocation(line: 1582, column: 5, scope: !7783)
!7786 = !DILocation(line: 1581, column: 51, scope: !7783)
!7787 = !DILocation(line: 1581, column: 3, scope: !7783)
!7788 = distinct !{!7788, !7784, !7789}
!7789 = !DILocation(line: 1582, column: 5, scope: !7780)
!7790 = !DILocation(line: 1584, column: 9, scope: !7727)
!7791 = !DILocation(line: 1584, column: 7, scope: !7727)
!7792 = !DILocation(line: 1586, column: 32, scope: !7727)
!7793 = !DILocation(line: 1586, column: 46, scope: !7727)
!7794 = !DILocation(line: 1586, column: 10, scope: !7727)
!7795 = !DILocation(line: 1586, column: 8, scope: !7727)
!7796 = !DILocation(line: 1587, column: 7, scope: !7797)
!7797 = distinct !DILexicalBlock(scope: !7727, file: !3, line: 1587, column: 7)
!7798 = !DILocation(line: 1587, column: 7, scope: !7727)
!7799 = !DILocation(line: 1588, column: 39, scope: !7797)
!7800 = !DILocation(line: 1588, column: 46, scope: !7797)
!7801 = !DILocation(line: 1588, column: 5, scope: !7797)
!7802 = !DILocation(line: 1590, column: 7, scope: !7803)
!7803 = distinct !DILexicalBlock(scope: !7727, file: !3, line: 1590, column: 7)
!7804 = !DILocation(line: 1590, column: 7, scope: !7727)
!7805 = !DILocation(line: 1592, column: 14, scope: !7806)
!7806 = distinct !DILexicalBlock(scope: !7803, file: !3, line: 1591, column: 5)
!7807 = !DILocation(line: 1592, column: 12, scope: !7806)
!7808 = !DILocation(line: 1593, column: 30, scope: !7806)
!7809 = !DILocation(line: 1593, column: 35, scope: !7806)
!7810 = !DILocation(line: 1593, column: 41, scope: !7806)
!7811 = !DILocation(line: 1593, column: 13, scope: !7806)
!7812 = !DILocation(line: 1593, column: 11, scope: !7806)
!7813 = !DILocation(line: 1594, column: 33, scope: !7806)
!7814 = !DILocation(line: 1594, column: 7, scope: !7806)
!7815 = !DILocation(line: 1594, column: 31, scope: !7806)
!7816 = !DILocation(line: 1595, column: 20, scope: !7806)
!7817 = !DILocation(line: 1595, column: 25, scope: !7806)
!7818 = !DILocation(line: 1595, column: 31, scope: !7806)
!7819 = !DILocation(line: 1595, column: 7, scope: !7806)
!7820 = !DILocation(line: 1596, column: 20, scope: !7806)
!7821 = !DILocation(line: 1596, column: 25, scope: !7806)
!7822 = !DILocation(line: 1596, column: 31, scope: !7806)
!7823 = !DILocation(line: 1596, column: 7, scope: !7806)
!7824 = !DILocation(line: 1597, column: 5, scope: !7806)
!7825 = !DILocalVariable(name: "init_stmt", scope: !7826, file: !3, line: 1600, type: !982)
!7826 = distinct !DILexicalBlock(scope: !7803, file: !3, line: 1599, column: 5)
!7827 = !DILocation(line: 1600, column: 14, scope: !7826)
!7828 = !DILocation(line: 1600, column: 26, scope: !7826)
!7829 = !DILocation(line: 1601, column: 38, scope: !7826)
!7830 = !DILocation(line: 1601, column: 7, scope: !7826)
!7831 = !DILocation(line: 1602, column: 37, scope: !7826)
!7832 = !DILocation(line: 1602, column: 44, scope: !7826)
!7833 = !DILocation(line: 1602, column: 7, scope: !7826)
!7834 = !DILocation(line: 1604, column: 1, scope: !7727)
!7835 = distinct !DISubprogram(name: "replace_ref_with", scope: !3, file: !3, line: 1252, type: !7836, scopeLine: 1253, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7836 = !DISubroutineType(types: !7837)
!7837 = !{null, !982, !652, !772, !772}
!7838 = !DILocalVariable(name: "stmt", arg: 1, scope: !7835, file: !3, line: 1252, type: !982)
!7839 = !DILocation(line: 1252, column: 26, scope: !7835)
!7840 = !DILocalVariable(name: "new_tree", arg: 2, scope: !7835, file: !3, line: 1252, type: !652)
!7841 = !DILocation(line: 1252, column: 37, scope: !7835)
!7842 = !DILocalVariable(name: "set", arg: 3, scope: !7835, file: !3, line: 1252, type: !772)
!7843 = !DILocation(line: 1252, column: 52, scope: !7835)
!7844 = !DILocalVariable(name: "in_lhs", arg: 4, scope: !7835, file: !3, line: 1252, type: !772)
!7845 = !DILocation(line: 1252, column: 62, scope: !7835)
!7846 = !DILocalVariable(name: "val", scope: !7835, file: !3, line: 1254, type: !652)
!7847 = !DILocation(line: 1254, column: 8, scope: !7835)
!7848 = !DILocalVariable(name: "new_stmt", scope: !7835, file: !3, line: 1255, type: !982)
!7849 = !DILocation(line: 1255, column: 10, scope: !7835)
!7850 = !DILocalVariable(name: "bsi", scope: !7835, file: !3, line: 1256, type: !3983)
!7851 = !DILocation(line: 1256, column: 24, scope: !7835)
!7852 = !DILocalVariable(name: "psi", scope: !7835, file: !3, line: 1256, type: !3983)
!7853 = !DILocation(line: 1256, column: 29, scope: !7835)
!7854 = !DILocation(line: 1258, column: 20, scope: !7855)
!7855 = distinct !DILexicalBlock(scope: !7835, file: !3, line: 1258, column: 7)
!7856 = !DILocation(line: 1258, column: 7, scope: !7855)
!7857 = !DILocation(line: 1258, column: 26, scope: !7855)
!7858 = !DILocation(line: 1258, column: 7, scope: !7835)
!7859 = !DILocation(line: 1260, column: 7, scope: !7860)
!7860 = distinct !DILexicalBlock(scope: !7855, file: !3, line: 1259, column: 5)
!7861 = !DILocation(line: 1262, column: 13, scope: !7860)
!7862 = !DILocation(line: 1262, column: 11, scope: !7860)
!7863 = !DILocation(line: 1263, column: 42, scope: !7860)
!7864 = !DILocation(line: 1263, column: 31, scope: !7860)
!7865 = !DILocation(line: 1263, column: 13, scope: !7860)
!7866 = !DILocation(line: 1264, column: 27, scope: !7860)
!7867 = !DILocation(line: 1264, column: 13, scope: !7860)
!7868 = !DILocation(line: 1265, column: 7, scope: !7860)
!7869 = !DILocation(line: 1268, column: 18, scope: !7860)
!7870 = !DILocation(line: 1268, column: 16, scope: !7860)
!7871 = !DILocation(line: 1269, column: 32, scope: !7860)
!7872 = !DILocation(line: 1269, column: 7, scope: !7860)
!7873 = !DILocation(line: 1270, column: 7, scope: !7860)
!7874 = !DILocation(line: 1275, column: 3, scope: !7835)
!7875 = !DILocation(line: 1277, column: 23, scope: !7835)
!7876 = !DILocation(line: 1277, column: 9, scope: !7835)
!7877 = !DILocation(line: 1280, column: 8, scope: !7878)
!7878 = distinct !DILexicalBlock(scope: !7835, file: !3, line: 1280, column: 7)
!7879 = !DILocation(line: 1280, column: 7, scope: !7835)
!7880 = !DILocation(line: 1282, column: 7, scope: !7881)
!7881 = distinct !DILexicalBlock(scope: !7878, file: !3, line: 1281, column: 5)
!7882 = !DILocation(line: 1283, column: 46, scope: !7881)
!7883 = !DILocation(line: 1283, column: 7, scope: !7881)
!7884 = !DILocation(line: 1284, column: 14, scope: !7881)
!7885 = !DILocation(line: 1284, column: 12, scope: !7881)
!7886 = !DILocation(line: 1285, column: 20, scope: !7881)
!7887 = !DILocation(line: 1285, column: 7, scope: !7881)
!7888 = !DILocation(line: 1286, column: 7, scope: !7881)
!7889 = !DILocation(line: 1289, column: 7, scope: !7890)
!7890 = distinct !DILexicalBlock(scope: !7835, file: !3, line: 1289, column: 7)
!7891 = !DILocation(line: 1289, column: 7, scope: !7835)
!7892 = !DILocation(line: 1310, column: 32, scope: !7893)
!7893 = distinct !DILexicalBlock(scope: !7890, file: !3, line: 1290, column: 5)
!7894 = !DILocation(line: 1310, column: 13, scope: !7893)
!7895 = !DILocation(line: 1310, column: 11, scope: !7893)
!7896 = !DILocation(line: 1311, column: 11, scope: !7897)
!7897 = distinct !DILexicalBlock(scope: !7893, file: !3, line: 1311, column: 11)
!7898 = !DILocation(line: 1311, column: 27, scope: !7897)
!7899 = !DILocation(line: 1311, column: 11, scope: !7893)
!7900 = !DILocation(line: 1313, column: 4, scope: !7901)
!7901 = distinct !DILexicalBlock(scope: !7897, file: !3, line: 1312, column: 2)
!7902 = !DILocation(line: 1314, column: 30, scope: !7901)
!7903 = !DILocation(line: 1314, column: 10, scope: !7901)
!7904 = !DILocation(line: 1314, column: 8, scope: !7901)
!7905 = !DILocation(line: 1315, column: 2, scope: !7901)
!7906 = !DILocation(line: 1316, column: 5, scope: !7893)
!7907 = !DILocation(line: 1326, column: 32, scope: !7908)
!7908 = distinct !DILexicalBlock(scope: !7890, file: !3, line: 1318, column: 5)
!7909 = !DILocation(line: 1326, column: 13, scope: !7908)
!7910 = !DILocation(line: 1326, column: 11, scope: !7908)
!7911 = !DILocation(line: 1329, column: 14, scope: !7835)
!7912 = !DILocation(line: 1329, column: 12, scope: !7835)
!7913 = !DILocation(line: 1330, column: 27, scope: !7835)
!7914 = !DILocation(line: 1330, column: 3, scope: !7835)
!7915 = !DILocation(line: 1331, column: 1, scope: !7835)
!7916 = distinct !DISubprogram(name: "predcom_tmp_var", scope: !3, file: !3, line: 1465, type: !7917, scopeLine: 1466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7917 = !DISubroutineType(types: !7918)
!7918 = !{!652, !652, !7, !1552}
!7919 = !DILocalVariable(name: "ref", arg: 1, scope: !7916, file: !3, line: 1465, type: !652)
!7920 = !DILocation(line: 1465, column: 23, scope: !7916)
!7921 = !DILocalVariable(name: "i", arg: 2, scope: !7916, file: !3, line: 1465, type: !7)
!7922 = !DILocation(line: 1465, column: 37, scope: !7916)
!7923 = !DILocalVariable(name: "tmp_vars", arg: 3, scope: !7916, file: !3, line: 1465, type: !1552)
!7924 = !DILocation(line: 1465, column: 47, scope: !7916)
!7925 = !DILocalVariable(name: "type", scope: !7916, file: !3, line: 1467, type: !652)
!7926 = !DILocation(line: 1467, column: 8, scope: !7916)
!7927 = !DILocation(line: 1467, column: 15, scope: !7916)
!7928 = !DILocalVariable(name: "var", scope: !7916, file: !3, line: 1468, type: !652)
!7929 = !DILocation(line: 1468, column: 8, scope: !7916)
!7930 = !DILocation(line: 1468, column: 30, scope: !7916)
!7931 = !DILocation(line: 1468, column: 54, scope: !7916)
!7932 = !DILocation(line: 1468, column: 59, scope: !7916)
!7933 = !DILocation(line: 1468, column: 36, scope: !7916)
!7934 = !DILocation(line: 1468, column: 14, scope: !7916)
!7935 = !DILocation(line: 1472, column: 7, scope: !7936)
!7936 = distinct !DILexicalBlock(scope: !7916, file: !3, line: 1472, column: 7)
!7937 = !DILocation(line: 1472, column: 24, scope: !7936)
!7938 = !DILocation(line: 1473, column: 7, scope: !7936)
!7939 = !DILocation(line: 1473, column: 10, scope: !7936)
!7940 = !DILocation(line: 1473, column: 27, scope: !7936)
!7941 = !DILocation(line: 1472, column: 7, scope: !7916)
!7942 = !DILocation(line: 1474, column: 5, scope: !7936)
!7943 = !DILocation(line: 1474, column: 29, scope: !7936)
!7944 = !DILocation(line: 1476, column: 23, scope: !7916)
!7945 = !DILocation(line: 1476, column: 3, scope: !7916)
!7946 = !DILocation(line: 1477, column: 19, scope: !7916)
!7947 = !DILocation(line: 1477, column: 29, scope: !7916)
!7948 = !DILocation(line: 1477, column: 3, scope: !7916)
!7949 = !DILocation(line: 1478, column: 10, scope: !7916)
!7950 = !DILocation(line: 1478, column: 3, scope: !7916)
!7951 = distinct !DISubprogram(name: "gsi_after_labels", scope: !391, file: !391, line: 4510, type: !7952, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7952 = !DISubroutineType(types: !7953)
!7953 = !{!3983, !1434}
!7954 = !DILocalVariable(name: "bb", arg: 1, scope: !7951, file: !391, line: 4510, type: !1434)
!7955 = !DILocation(line: 4510, column: 31, scope: !7951)
!7956 = !DILocalVariable(name: "gsi", scope: !7951, file: !391, line: 4512, type: !3983)
!7957 = !DILocation(line: 4512, column: 24, scope: !7951)
!7958 = !DILocation(line: 4512, column: 44, scope: !7951)
!7959 = !DILocation(line: 4512, column: 30, scope: !7951)
!7960 = !DILocation(line: 4514, column: 3, scope: !7951)
!7961 = !DILocation(line: 4514, column: 11, scope: !7951)
!7962 = !DILocation(line: 4514, column: 27, scope: !7951)
!7963 = !DILocation(line: 4514, column: 43, scope: !7951)
!7964 = !DILocation(line: 4514, column: 30, scope: !7951)
!7965 = !DILocation(line: 4514, column: 59, scope: !7951)
!7966 = !DILocation(line: 0, scope: !7951)
!7967 = !DILocation(line: 4515, column: 5, scope: !7951)
!7968 = distinct !{!7968, !7960, !7969}
!7969 = !DILocation(line: 4515, column: 19, scope: !7951)
!7970 = !DILocation(line: 4517, column: 3, scope: !7951)
!7971 = distinct !DISubprogram(name: "gsi_start_bb", scope: !391, file: !391, line: 4418, type: !7952, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7972 = !DILocalVariable(name: "bb", arg: 1, scope: !7971, file: !391, line: 4418, type: !1434)
!7973 = !DILocation(line: 4418, column: 27, scope: !7971)
!7974 = !DILocalVariable(name: "i", scope: !7971, file: !391, line: 4420, type: !3983)
!7975 = !DILocation(line: 4420, column: 24, scope: !7971)
!7976 = !DILocalVariable(name: "seq", scope: !7971, file: !391, line: 4421, type: !972)
!7977 = !DILocation(line: 4421, column: 14, scope: !7971)
!7978 = !DILocation(line: 4423, column: 17, scope: !7971)
!7979 = !DILocation(line: 4423, column: 9, scope: !7971)
!7980 = !DILocation(line: 4423, column: 7, scope: !7971)
!7981 = !DILocation(line: 4424, column: 29, scope: !7971)
!7982 = !DILocation(line: 4424, column: 11, scope: !7971)
!7983 = !DILocation(line: 4424, column: 5, scope: !7971)
!7984 = !DILocation(line: 4424, column: 9, scope: !7971)
!7985 = !DILocation(line: 4425, column: 11, scope: !7971)
!7986 = !DILocation(line: 4425, column: 5, scope: !7971)
!7987 = !DILocation(line: 4425, column: 9, scope: !7971)
!7988 = !DILocation(line: 4426, column: 10, scope: !7971)
!7989 = !DILocation(line: 4426, column: 5, scope: !7971)
!7990 = !DILocation(line: 4426, column: 8, scope: !7971)
!7991 = !DILocation(line: 4428, column: 3, scope: !7971)
!7992 = distinct !DISubprogram(name: "bb_seq", scope: !391, file: !391, line: 237, type: !7993, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!7993 = !DISubroutineType(types: !7994)
!7994 = !{!972, !6875}
!7995 = !DILocalVariable(name: "bb", arg: 1, scope: !7992, file: !391, line: 237, type: !6875)
!7996 = !DILocation(line: 237, column: 27, scope: !7992)
!7997 = !DILocation(line: 239, column: 13, scope: !7992)
!7998 = !DILocation(line: 239, column: 17, scope: !7992)
!7999 = !DILocation(line: 239, column: 23, scope: !7992)
!8000 = !DILocation(line: 239, column: 33, scope: !7992)
!8001 = !DILocation(line: 239, column: 36, scope: !7992)
!8002 = !DILocation(line: 239, column: 40, scope: !7992)
!8003 = !DILocation(line: 239, column: 43, scope: !7992)
!8004 = !DILocation(line: 239, column: 10, scope: !7992)
!8005 = !DILocation(line: 239, column: 53, scope: !7992)
!8006 = !DILocation(line: 239, column: 57, scope: !7992)
!8007 = !DILocation(line: 239, column: 60, scope: !7992)
!8008 = !DILocation(line: 239, column: 68, scope: !7992)
!8009 = !DILocation(line: 239, column: 3, scope: !7992)
!8010 = distinct !DISubprogram(name: "gimple_seq_first", scope: !391, file: !391, line: 159, type: !8011, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!8011 = !DISubroutineType(types: !8012)
!8012 = !{!977, !8013}
!8013 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !653, line: 67, baseType: !8014)
!8014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8015, size: 64)
!8015 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !974)
!8016 = !DILocalVariable(name: "s", arg: 1, scope: !8010, file: !391, line: 159, type: !8013)
!8017 = !DILocation(line: 159, column: 36, scope: !8010)
!8018 = !DILocation(line: 161, column: 10, scope: !8010)
!8019 = !DILocation(line: 161, column: 14, scope: !8010)
!8020 = !DILocation(line: 161, column: 17, scope: !8010)
!8021 = !DILocation(line: 161, column: 3, scope: !8010)
!8022 = distinct !DISubprogram(name: "remove_stmt", scope: !3, file: !3, line: 1695, type: !2626, scopeLine: 1696, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!8023 = !DILocalVariable(name: "stmt", arg: 1, scope: !8022, file: !3, line: 1695, type: !982)
!8024 = !DILocation(line: 1695, column: 21, scope: !8022)
!8025 = !DILocalVariable(name: "name", scope: !8022, file: !3, line: 1697, type: !652)
!8026 = !DILocation(line: 1697, column: 8, scope: !8022)
!8027 = !DILocalVariable(name: "next", scope: !8022, file: !3, line: 1698, type: !982)
!8028 = !DILocation(line: 1698, column: 10, scope: !8022)
!8029 = !DILocalVariable(name: "psi", scope: !8022, file: !3, line: 1699, type: !3983)
!8030 = !DILocation(line: 1699, column: 24, scope: !8022)
!8031 = !DILocation(line: 1701, column: 20, scope: !8032)
!8032 = distinct !DILexicalBlock(scope: !8022, file: !3, line: 1701, column: 7)
!8033 = !DILocation(line: 1701, column: 7, scope: !8032)
!8034 = !DILocation(line: 1701, column: 26, scope: !8032)
!8035 = !DILocation(line: 1701, column: 7, scope: !8022)
!8036 = !DILocation(line: 1703, column: 14, scope: !8037)
!8037 = distinct !DILexicalBlock(scope: !8032, file: !3, line: 1702, column: 5)
!8038 = !DILocation(line: 1703, column: 12, scope: !8037)
!8039 = !DILocation(line: 1704, column: 40, scope: !8037)
!8040 = !DILocation(line: 1704, column: 14, scope: !8037)
!8041 = !DILocation(line: 1704, column: 12, scope: !8037)
!8042 = !DILocation(line: 1705, column: 27, scope: !8037)
!8043 = !DILocation(line: 1705, column: 13, scope: !8037)
!8044 = !DILocation(line: 1706, column: 7, scope: !8037)
!8045 = !DILocation(line: 1708, column: 12, scope: !8046)
!8046 = distinct !DILexicalBlock(scope: !8037, file: !3, line: 1708, column: 11)
!8047 = !DILocation(line: 1709, column: 4, scope: !8046)
!8048 = !DILocation(line: 1709, column: 39, scope: !8046)
!8049 = !DILocation(line: 1709, column: 8, scope: !8046)
!8050 = !DILocation(line: 1710, column: 4, scope: !8046)
!8051 = !DILocation(line: 1710, column: 27, scope: !8046)
!8052 = !DILocation(line: 1710, column: 7, scope: !8046)
!8053 = !DILocation(line: 1710, column: 36, scope: !8046)
!8054 = !DILocation(line: 1710, column: 33, scope: !8046)
!8055 = !DILocation(line: 1708, column: 11, scope: !8037)
!8056 = !DILocation(line: 1711, column: 2, scope: !8046)
!8057 = !DILocation(line: 1713, column: 14, scope: !8037)
!8058 = !DILocation(line: 1713, column: 12, scope: !8037)
!8059 = !DILocation(line: 1714, column: 5, scope: !8037)
!8060 = !DILocation(line: 1716, column: 3, scope: !8022)
!8061 = !DILocalVariable(name: "bsi", scope: !8062, file: !3, line: 1718, type: !3983)
!8062 = distinct !DILexicalBlock(scope: !8022, file: !3, line: 1717, column: 5)
!8063 = !DILocation(line: 1718, column: 28, scope: !8062)
!8064 = !DILocation(line: 1720, column: 27, scope: !8062)
!8065 = !DILocation(line: 1720, column: 13, scope: !8062)
!8066 = !DILocation(line: 1722, column: 33, scope: !8062)
!8067 = !DILocation(line: 1722, column: 14, scope: !8062)
!8068 = !DILocation(line: 1722, column: 12, scope: !8062)
!8069 = !DILocation(line: 1723, column: 7, scope: !8062)
!8070 = !DILocation(line: 1725, column: 40, scope: !8062)
!8071 = !DILocation(line: 1725, column: 14, scope: !8062)
!8072 = !DILocation(line: 1725, column: 12, scope: !8062)
!8073 = !DILocation(line: 1727, column: 38, scope: !8062)
!8074 = !DILocation(line: 1727, column: 7, scope: !8062)
!8075 = !DILocation(line: 1728, column: 7, scope: !8062)
!8076 = !DILocation(line: 1729, column: 21, scope: !8062)
!8077 = !DILocation(line: 1729, column: 7, scope: !8062)
!8078 = !DILocation(line: 1731, column: 12, scope: !8079)
!8079 = distinct !DILexicalBlock(scope: !8062, file: !3, line: 1731, column: 11)
!8080 = !DILocation(line: 1732, column: 4, scope: !8079)
!8081 = !DILocation(line: 1732, column: 39, scope: !8079)
!8082 = !DILocation(line: 1732, column: 8, scope: !8079)
!8083 = !DILocation(line: 1733, column: 4, scope: !8079)
!8084 = !DILocation(line: 1733, column: 27, scope: !8079)
!8085 = !DILocation(line: 1733, column: 7, scope: !8079)
!8086 = !DILocation(line: 1733, column: 36, scope: !8079)
!8087 = !DILocation(line: 1733, column: 33, scope: !8079)
!8088 = !DILocation(line: 1731, column: 11, scope: !8062)
!8089 = !DILocation(line: 1734, column: 2, scope: !8079)
!8090 = !DILocation(line: 1736, column: 14, scope: !8062)
!8091 = !DILocation(line: 1736, column: 12, scope: !8062)
!8092 = distinct !{!8092, !8060, !8093}
!8093 = !DILocation(line: 1737, column: 5, scope: !8022)
!8094 = !DILocation(line: 1738, column: 1, scope: !8022)
!8095 = distinct !DISubprogram(name: "initialize_root", scope: !3, file: !3, line: 1541, type: !7561, scopeLine: 1542, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!8096 = !DILocalVariable(name: "loop", arg: 1, scope: !8095, file: !3, line: 1541, type: !1197)
!8097 = !DILocation(line: 1541, column: 31, scope: !8095)
!8098 = !DILocalVariable(name: "chain", arg: 2, scope: !8095, file: !3, line: 1541, type: !2080)
!8099 = !DILocation(line: 1541, column: 45, scope: !8095)
!8100 = !DILocalVariable(name: "tmp_vars", arg: 3, scope: !8095, file: !3, line: 1541, type: !1552)
!8101 = !DILocation(line: 1541, column: 59, scope: !8095)
!8102 = !DILocalVariable(name: "root", scope: !8095, file: !3, line: 1543, type: !2010)
!8103 = !DILocation(line: 1543, column: 8, scope: !8095)
!8104 = !DILocation(line: 1543, column: 31, scope: !8095)
!8105 = !DILocation(line: 1543, column: 15, scope: !8095)
!8106 = !DILocalVariable(name: "in_lhs", scope: !8095, file: !3, line: 1544, type: !772)
!8107 = !DILocation(line: 1544, column: 8, scope: !8095)
!8108 = !DILocation(line: 1544, column: 18, scope: !8095)
!8109 = !DILocation(line: 1544, column: 25, scope: !8095)
!8110 = !DILocation(line: 1544, column: 30, scope: !8095)
!8111 = !DILocation(line: 1545, column: 4, scope: !8095)
!8112 = !DILocation(line: 1545, column: 7, scope: !8095)
!8113 = !DILocation(line: 1545, column: 14, scope: !8095)
!8114 = !DILocation(line: 1545, column: 19, scope: !8095)
!8115 = !DILocation(line: 1544, column: 17, scope: !8095)
!8116 = !DILocation(line: 1547, column: 25, scope: !8095)
!8117 = !DILocation(line: 1547, column: 31, scope: !8095)
!8118 = !DILocation(line: 1547, column: 38, scope: !8095)
!8119 = !DILocation(line: 1547, column: 3, scope: !8095)
!8120 = !DILocation(line: 1548, column: 21, scope: !8095)
!8121 = !DILocation(line: 1548, column: 27, scope: !8095)
!8122 = !DILocation(line: 1549, column: 7, scope: !8095)
!8123 = !DILocation(line: 1550, column: 13, scope: !8095)
!8124 = !DILocation(line: 1548, column: 3, scope: !8095)
!8125 = !DILocation(line: 1551, column: 1, scope: !8095)
!8126 = distinct !DISubprogram(name: "initialize_root_vars", scope: !3, file: !3, line: 1486, type: !7561, scopeLine: 1487, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!8127 = !DILocalVariable(name: "loop", arg: 1, scope: !8126, file: !3, line: 1486, type: !1197)
!8128 = !DILocation(line: 1486, column: 36, scope: !8126)
!8129 = !DILocalVariable(name: "chain", arg: 2, scope: !8126, file: !3, line: 1486, type: !2080)
!8130 = !DILocation(line: 1486, column: 50, scope: !8126)
!8131 = !DILocalVariable(name: "tmp_vars", arg: 3, scope: !8126, file: !3, line: 1486, type: !1552)
!8132 = !DILocation(line: 1486, column: 64, scope: !8126)
!8133 = !DILocalVariable(name: "i", scope: !8126, file: !3, line: 1488, type: !7)
!8134 = !DILocation(line: 1488, column: 12, scope: !8126)
!8135 = !DILocalVariable(name: "n", scope: !8126, file: !3, line: 1489, type: !7)
!8136 = !DILocation(line: 1489, column: 12, scope: !8126)
!8137 = !DILocation(line: 1489, column: 16, scope: !8126)
!8138 = !DILocation(line: 1489, column: 23, scope: !8126)
!8139 = !DILocalVariable(name: "root", scope: !8126, file: !3, line: 1490, type: !2010)
!8140 = !DILocation(line: 1490, column: 8, scope: !8126)
!8141 = !DILocation(line: 1490, column: 31, scope: !8126)
!8142 = !DILocation(line: 1490, column: 15, scope: !8126)
!8143 = !DILocalVariable(name: "reuse_first", scope: !8126, file: !3, line: 1491, type: !772)
!8144 = !DILocation(line: 1491, column: 8, scope: !8126)
!8145 = !DILocation(line: 1491, column: 23, scope: !8126)
!8146 = !DILocation(line: 1491, column: 30, scope: !8126)
!8147 = !DILocation(line: 1491, column: 22, scope: !8126)
!8148 = !DILocalVariable(name: "ref", scope: !8126, file: !3, line: 1492, type: !652)
!8149 = !DILocation(line: 1492, column: 8, scope: !8126)
!8150 = !DILocalVariable(name: "init", scope: !8126, file: !3, line: 1492, type: !652)
!8151 = !DILocation(line: 1492, column: 13, scope: !8126)
!8152 = !DILocalVariable(name: "var", scope: !8126, file: !3, line: 1492, type: !652)
!8153 = !DILocation(line: 1492, column: 19, scope: !8126)
!8154 = !DILocalVariable(name: "next", scope: !8126, file: !3, line: 1492, type: !652)
!8155 = !DILocation(line: 1492, column: 24, scope: !8126)
!8156 = !DILocalVariable(name: "phi", scope: !8126, file: !3, line: 1493, type: !982)
!8157 = !DILocation(line: 1493, column: 10, scope: !8126)
!8158 = !DILocalVariable(name: "stmts", scope: !8126, file: !3, line: 1494, type: !972)
!8159 = !DILocation(line: 1494, column: 14, scope: !8126)
!8160 = !DILocalVariable(name: "entry", scope: !8126, file: !3, line: 1495, type: !962)
!8161 = !DILocation(line: 1495, column: 8, scope: !8126)
!8162 = !DILocation(line: 1495, column: 37, scope: !8126)
!8163 = !DILocation(line: 1495, column: 16, scope: !8126)
!8164 = !DILocalVariable(name: "latch", scope: !8126, file: !3, line: 1495, type: !962)
!8165 = !DILocation(line: 1495, column: 44, scope: !8126)
!8166 = !DILocation(line: 1495, column: 69, scope: !8126)
!8167 = !DILocation(line: 1495, column: 52, scope: !8126)
!8168 = !DILocation(line: 1499, column: 3, scope: !8126)
!8169 = !DILocation(line: 1501, column: 17, scope: !8126)
!8170 = !DILocation(line: 1501, column: 3, scope: !8126)
!8171 = !DILocation(line: 1501, column: 10, scope: !8126)
!8172 = !DILocation(line: 1501, column: 15, scope: !8126)
!8173 = !DILocation(line: 1503, column: 7, scope: !8174)
!8174 = distinct !DILexicalBlock(scope: !8126, file: !3, line: 1503, column: 7)
!8175 = !DILocation(line: 1503, column: 14, scope: !8174)
!8176 = !DILocation(line: 1503, column: 19, scope: !8174)
!8177 = !DILocation(line: 1503, column: 7, scope: !8126)
!8178 = !DILocation(line: 1504, column: 30, scope: !8174)
!8179 = !DILocation(line: 1504, column: 36, scope: !8174)
!8180 = !DILocation(line: 1504, column: 11, scope: !8174)
!8181 = !DILocation(line: 1504, column: 9, scope: !8174)
!8182 = !DILocation(line: 1504, column: 5, scope: !8174)
!8183 = !DILocation(line: 1506, column: 11, scope: !8174)
!8184 = !DILocation(line: 1506, column: 9, scope: !8174)
!8185 = !DILocation(line: 1508, column: 10, scope: !8186)
!8186 = distinct !DILexicalBlock(scope: !8126, file: !3, line: 1508, column: 3)
!8187 = !DILocation(line: 1508, column: 8, scope: !8186)
!8188 = !DILocation(line: 1508, column: 15, scope: !8189)
!8189 = distinct !DILexicalBlock(scope: !8186, file: !3, line: 1508, column: 3)
!8190 = !DILocation(line: 1508, column: 19, scope: !8189)
!8191 = !DILocation(line: 1508, column: 24, scope: !8189)
!8192 = !DILocation(line: 1508, column: 21, scope: !8189)
!8193 = !DILocation(line: 1508, column: 17, scope: !8189)
!8194 = !DILocation(line: 1508, column: 3, scope: !8186)
!8195 = !DILocation(line: 1510, column: 30, scope: !8196)
!8196 = distinct !DILexicalBlock(scope: !8189, file: !3, line: 1509, column: 5)
!8197 = !DILocation(line: 1510, column: 35, scope: !8196)
!8198 = !DILocation(line: 1510, column: 38, scope: !8196)
!8199 = !DILocation(line: 1510, column: 13, scope: !8196)
!8200 = !DILocation(line: 1510, column: 11, scope: !8196)
!8201 = !DILocation(line: 1511, column: 7, scope: !8196)
!8202 = !DILocation(line: 1512, column: 5, scope: !8196)
!8203 = !DILocation(line: 1508, column: 47, scope: !8189)
!8204 = !DILocation(line: 1508, column: 3, scope: !8189)
!8205 = distinct !{!8205, !8194, !8206}
!8206 = !DILocation(line: 1512, column: 5, scope: !8186)
!8207 = !DILocation(line: 1513, column: 7, scope: !8208)
!8208 = distinct !DILexicalBlock(scope: !8126, file: !3, line: 1513, column: 7)
!8209 = !DILocation(line: 1513, column: 7, scope: !8126)
!8210 = !DILocation(line: 1514, column: 5, scope: !8208)
!8211 = !DILocation(line: 1516, column: 10, scope: !8212)
!8212 = distinct !DILexicalBlock(scope: !8126, file: !3, line: 1516, column: 3)
!8213 = !DILocation(line: 1516, column: 8, scope: !8212)
!8214 = !DILocation(line: 1516, column: 15, scope: !8215)
!8215 = distinct !DILexicalBlock(scope: !8212, file: !3, line: 1516, column: 3)
!8216 = !DILocation(line: 1516, column: 3, scope: !8212)
!8217 = !DILocation(line: 1517, column: 5, scope: !8215)
!8218 = !DILocation(line: 1516, column: 57, scope: !8215)
!8219 = !DILocation(line: 1516, column: 3, scope: !8215)
!8220 = distinct !{!8220, !8216, !8221}
!8221 = !DILocation(line: 1517, column: 5, scope: !8212)
!8222 = !DILocation(line: 1519, column: 10, scope: !8223)
!8223 = distinct !DILexicalBlock(scope: !8126, file: !3, line: 1519, column: 3)
!8224 = !DILocation(line: 1519, column: 8, scope: !8223)
!8225 = !DILocation(line: 1519, column: 15, scope: !8226)
!8226 = distinct !DILexicalBlock(scope: !8223, file: !3, line: 1519, column: 3)
!8227 = !DILocation(line: 1519, column: 19, scope: !8226)
!8228 = !DILocation(line: 1519, column: 17, scope: !8226)
!8229 = !DILocation(line: 1519, column: 3, scope: !8223)
!8230 = !DILocation(line: 1521, column: 13, scope: !8231)
!8231 = distinct !DILexicalBlock(scope: !8226, file: !3, line: 1520, column: 5)
!8232 = !DILocation(line: 1521, column: 11, scope: !8231)
!8233 = !DILocation(line: 1522, column: 14, scope: !8231)
!8234 = !DILocation(line: 1522, column: 12, scope: !8231)
!8235 = !DILocation(line: 1523, column: 29, scope: !8231)
!8236 = !DILocation(line: 1523, column: 36, scope: !8231)
!8237 = !DILocation(line: 1523, column: 14, scope: !8231)
!8238 = !DILocation(line: 1523, column: 12, scope: !8231)
!8239 = !DILocation(line: 1525, column: 36, scope: !8231)
!8240 = !DILocation(line: 1525, column: 14, scope: !8231)
!8241 = !DILocation(line: 1525, column: 12, scope: !8231)
!8242 = !DILocation(line: 1526, column: 11, scope: !8243)
!8243 = distinct !DILexicalBlock(scope: !8231, file: !3, line: 1526, column: 11)
!8244 = !DILocation(line: 1526, column: 11, scope: !8231)
!8245 = !DILocation(line: 1527, column: 36, scope: !8243)
!8246 = !DILocation(line: 1527, column: 43, scope: !8243)
!8247 = !DILocation(line: 1527, column: 2, scope: !8243)
!8248 = !DILocation(line: 1529, column: 30, scope: !8231)
!8249 = !DILocation(line: 1529, column: 35, scope: !8231)
!8250 = !DILocation(line: 1529, column: 41, scope: !8231)
!8251 = !DILocation(line: 1529, column: 13, scope: !8231)
!8252 = !DILocation(line: 1529, column: 11, scope: !8231)
!8253 = !DILocation(line: 1530, column: 33, scope: !8231)
!8254 = !DILocation(line: 1530, column: 7, scope: !8231)
!8255 = !DILocation(line: 1530, column: 31, scope: !8231)
!8256 = !DILocation(line: 1531, column: 20, scope: !8231)
!8257 = !DILocation(line: 1531, column: 25, scope: !8231)
!8258 = !DILocation(line: 1531, column: 31, scope: !8231)
!8259 = !DILocation(line: 1531, column: 7, scope: !8231)
!8260 = !DILocation(line: 1532, column: 20, scope: !8231)
!8261 = !DILocation(line: 1532, column: 25, scope: !8231)
!8262 = !DILocation(line: 1532, column: 31, scope: !8231)
!8263 = !DILocation(line: 1532, column: 7, scope: !8231)
!8264 = !DILocation(line: 1533, column: 5, scope: !8231)
!8265 = !DILocation(line: 1519, column: 23, scope: !8226)
!8266 = !DILocation(line: 1519, column: 3, scope: !8226)
!8267 = distinct !{!8267, !8229, !8268}
!8268 = !DILocation(line: 1533, column: 5, scope: !8223)
!8269 = !DILocation(line: 1534, column: 1, scope: !8126)
!8270 = distinct !DISubprogram(name: "get_init_expr", scope: !3, file: !3, line: 1424, type: !8271, scopeLine: 1425, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!8271 = !DISubroutineType(types: !8272)
!8272 = !{!652, !2080, !7}
!8273 = !DILocalVariable(name: "chain", arg: 1, scope: !8270, file: !3, line: 1424, type: !2080)
!8274 = !DILocation(line: 1424, column: 24, scope: !8270)
!8275 = !DILocalVariable(name: "index", arg: 2, scope: !8270, file: !3, line: 1424, type: !7)
!8276 = !DILocation(line: 1424, column: 40, scope: !8270)
!8277 = !DILocation(line: 1426, column: 7, scope: !8278)
!8278 = distinct !DILexicalBlock(scope: !8270, file: !3, line: 1426, column: 7)
!8279 = !DILocation(line: 1426, column: 14, scope: !8278)
!8280 = !DILocation(line: 1426, column: 19, scope: !8278)
!8281 = !DILocation(line: 1426, column: 7, scope: !8270)
!8282 = !DILocalVariable(name: "e1", scope: !8283, file: !3, line: 1428, type: !652)
!8283 = distinct !DILexicalBlock(scope: !8278, file: !3, line: 1427, column: 5)
!8284 = !DILocation(line: 1428, column: 12, scope: !8283)
!8285 = !DILocation(line: 1428, column: 32, scope: !8283)
!8286 = !DILocation(line: 1428, column: 39, scope: !8283)
!8287 = !DILocation(line: 1428, column: 44, scope: !8283)
!8288 = !DILocation(line: 1428, column: 17, scope: !8283)
!8289 = !DILocalVariable(name: "e2", scope: !8283, file: !3, line: 1429, type: !652)
!8290 = !DILocation(line: 1429, column: 12, scope: !8283)
!8291 = !DILocation(line: 1429, column: 32, scope: !8283)
!8292 = !DILocation(line: 1429, column: 39, scope: !8283)
!8293 = !DILocation(line: 1429, column: 44, scope: !8283)
!8294 = !DILocation(line: 1429, column: 17, scope: !8283)
!8295 = !DILocation(line: 1431, column: 14, scope: !8283)
!8296 = !DILocation(line: 1431, column: 7, scope: !8283)
!8297 = !DILocation(line: 1434, column: 12, scope: !8278)
!8298 = !DILocation(line: 1434, column: 5, scope: !8278)
!8299 = !DILocation(line: 1435, column: 1, scope: !8270)
!8300 = distinct !DISubprogram(name: "VEC_chain_p_heap_free", scope: !3, file: !3, line: 299, type: !3750, scopeLine: 299, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!8301 = !DILocalVariable(name: "vec_", arg: 1, scope: !8300, file: !3, line: 299, type: !3656)
!8302 = !DILocation(line: 299, column: 1, scope: !8300)
!8303 = !DILocation(line: 299, column: 1, scope: !8304)
!8304 = distinct !DILexicalBlock(scope: !8300, file: !3, line: 299, column: 1)
!8305 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !2110, file: !2110, line: 31, type: !8306, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!8306 = !DISubroutineType(types: !8307)
!8307 = !{!749, !8308, !7, !2073}
!8308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8309, size: 64)
!8309 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2114)
!8310 = !DILocalVariable(name: "vec_", arg: 1, scope: !8305, file: !2110, line: 31, type: !8308)
!8311 = !DILocation(line: 31, column: 1, scope: !8305)
!8312 = !DILocalVariable(name: "ix_", arg: 2, scope: !8305, file: !2110, line: 31, type: !7)
!8313 = !DILocalVariable(name: "ptr", arg: 3, scope: !8305, file: !2110, line: 31, type: !2073)
!8314 = !DILocation(line: 31, column: 1, scope: !8315)
!8315 = distinct !DILexicalBlock(scope: !8305, file: !2110, line: 31, column: 1)
!8316 = !DILocation(line: 31, column: 1, scope: !8317)
!8317 = distinct !DILexicalBlock(scope: !8315, file: !2110, line: 31, column: 1)
!8318 = !DILocation(line: 31, column: 1, scope: !8319)
!8319 = distinct !DILexicalBlock(scope: !8315, file: !2110, line: 31, column: 1)
!8320 = distinct !DISubprogram(name: "get_loop", scope: !146, file: !146, line: 417, type: !8321, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!8321 = !DISubroutineType(types: !8322)
!8322 = !{!1197, !7}
!8323 = !DILocalVariable(name: "num", arg: 1, scope: !8320, file: !146, line: 417, type: !7)
!8324 = !DILocation(line: 417, column: 20, scope: !8320)
!8325 = !DILocation(line: 419, column: 10, scope: !8320)
!8326 = !DILocation(line: 419, column: 3, scope: !8320)
!8327 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2110, file: !2110, line: 32, type: !8328, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2287)
!8328 = !DISubroutineType(types: !8329)
!8329 = !{null, !8330}
!8330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2108, size: 64)
!8331 = !DILocalVariable(name: "vec_", arg: 1, scope: !8327, file: !2110, line: 32, type: !8330)
!8332 = !DILocation(line: 32, column: 1, scope: !8327)
!8333 = !DILocation(line: 32, column: 1, scope: !8334)
!8334 = distinct !DILexicalBlock(scope: !8327, file: !2110, line: 32, column: 1)
