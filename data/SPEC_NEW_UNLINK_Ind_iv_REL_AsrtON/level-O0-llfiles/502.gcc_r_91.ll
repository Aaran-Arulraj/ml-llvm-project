; ModuleID = 'function.c'
source_filename = "function.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type opaque
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_function_p_heap = type { %struct.VEC_function_p_base }
%struct.VEC_function_p_base = type { i32, i32, [1 x %struct.function*] }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type { %struct.temp_slot*, %struct.temp_slot*, %struct.rtx_def*, i64, %union.tree_node*, i32, i8, i8, i32, i32, i64, i64 }
%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type opaque
%struct.diagnostic_info = type opaque
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.ggc_cache_tab = type { %struct.htab**, i64, i64, void (i8*)*, void (i8*)*, i32 (i8*)* }
%struct.recog_data = type { [30 x %struct.rtx_def*], [30 x %struct.rtx_def**], [30 x i8*], [30 x i32], [30 x i32], [14 x %struct.rtx_def**], [14 x i8], i8, i8, i8, [30 x i8], %struct.rtx_def* }
%struct.insn_data = type { i8*, %union.anon.0, %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.insn_operand_data*, i8, i8, i8, i8 }
%union.anon.0 = type { i8* }
%struct.insn_operand_data = type { i32 (%struct.rtx_def*, i32)*, i8*, i16, i8, i8 }
%struct.regstat_n_sets_and_refs_t = type { i32, i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.temp_slot_address_entry = type { i32, %struct.rtx_def*, %struct.temp_slot* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.assign_parm_data_all = type { %struct.ix86_args, %struct.args_size, %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i64, i64, i32 }
%struct.args_size = type { i64, %union.tree_node* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.assign_parm_data_one = type { %union.tree_node*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, %struct.locate_and_pad_arg_data, i32, i8 }
%struct.locate_and_pad_arg_data = type { %struct.args_size, %struct.args_size, %struct.args_size, %struct.args_size, i32, i32 }
%struct.pointer_set_t = type opaque
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_optimization_option = type { %struct.tree_common, %struct.cl_optimization }
%struct.cl_optimization = type { i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.tree_parm_decl = type { %struct.tree_decl_with_rtl, %struct.rtx_def*, %struct.var_ann_d* }
%struct.var_ann_d = type opaque
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.types_used_by_vars_entry = type { %union.tree_node*, %union.tree_node* }
%struct.mem_attrs = type { %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i8 }

@cfun = dso_local global %struct.function* null, align 8, !dbg !0
@types_used_by_vars_hash = dso_local global %struct.htab* null, align 8, !dbg !4347
@types_used_by_cur_var_decl = dso_local global %union.tree_node* null, align 8, !dbg !4349
@function_context_stack = internal global %struct.VEC_function_p_heap* null, align 8, !dbg !4440
@current_function_decl = external dso_local global %union.tree_node*, align 8
@virtuals_instantiated = common dso_local global i32 0, align 4, !dbg !4427
@generating_concat_p = external dso_local global i32, align 4
@prologue_insn_hash = internal global %struct.htab* null, align 8, !dbg !4436
@epilogue_insn_hash = internal global %struct.htab* null, align 8, !dbg !4438
@x_rtl = external dso_local global %struct.rtl_data, align 8
@regno_reg_rtx = external dso_local global %struct.rtx_def**, align 8
@mode_size = external dso_local global [87 x i8], align 16
@.str = private unnamed_addr constant [38 x i8] c"total size of local objects too large\00", align 1
@ix86_isa_flags = external dso_local global i32, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"function.c\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@ix86_preferred_stack_boundary = external dso_local global i32, align 4
@global_rtl = external dso_local global [11 x %struct.rtx_def*], align 16
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.3 = private unnamed_addr constant [35 x i8] c"size of variable %q+D is too large\00", align 1
@rtx_class = external dso_local constant [139 x i32], align 16
@temp_slot_address_table = internal global %struct.htab* null, align 8, !dbg !4442
@.str.4 = private unnamed_addr constant [6 x i8] c"vregs\00", align 1
@pass_instantiate_virtual_regs = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i8 ()* null, i32 ()* @instantiate_virtual_regs, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1 } }, align 8, !dbg !4351
@targetm = external dso_local global %struct.gcc_target, align 8
@flag_pcc_struct_return = external dso_local global i32, align 4
@hard_regno_nregs = external dso_local global [53 x [87 x i8]], align 16
@call_used_regs = external dso_local global [53 x i8], align 16
@flag_float_store = external dso_local global i32, align 4
@optimize = external dso_local global i32, align 4
@flag_stack_check = external dso_local global i32, align 4
@built_in_decls = external dso_local global [721 x %union.tree_node*], align 16
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@next_block_index = internal global i32 2, align 4, !dbg !4460
@cfun_stack = internal global %struct.VEC_function_p_heap* null, align 8, !dbg !4446
@funcdef_no = internal global i32 0, align 4, !dbg !4429
@init_machine_status = common dso_local global %struct.machine_function* ()* null, align 8, !dbg !4431
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@in_dummy_function = internal global i8 0, align 1, !dbg !4444
@.str.5 = private unnamed_addr constant [30 x i8] c"function returns an aggregate\00", align 1
@reg_renumber = external dso_local global i16*, align 8
@.str.6 = private unnamed_addr constant [15 x i8] c"*init_function\00", align 1
@pass_init_function = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i32 0, i32 0), i8 ()* null, i32 ()* @init_function_for_compilation, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 } }, align 8, !dbg !4379
@ptr_mode = external dso_local global i32, align 4
@profile_flag = external dso_local global i32, align 4
@stack_limit_rtx = external dso_local global %struct.rtx_def*, align 8
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@.str.7 = private unnamed_addr constant [22 x i8] c"unused parameter %q+D\00", align 1
@input_location = external dso_local global i32, align 4
@flag_non_call_exceptions = external dso_local global i32, align 4
@mode_class = external dso_local constant [87 x i8], align 16
@.str.8 = private unnamed_addr constant [7 x i8] c"<none>\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@debug_info_level = external dso_local global i32, align 4
@.str.9 = private unnamed_addr constant [11 x i8] c"*leaf_regs\00", align 1
@pass_leaf_regs = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), i8 ()* null, i32 ()* @rest_of_handle_check_leaf_regs, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0 } }, align 8, !dbg !4381
@.str.10 = private unnamed_addr constant [17 x i8] c"pro_and_epilogue\00", align 1
@pass_thread_prologue_and_epilogue = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i32 0, i32 0), i8 ()* null, i32 ()* @rest_of_handle_thread_prologue_and_epilogue, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 153, i32 0, i32 0, i32 0, i32 8, i32 394243 } }, align 8, !dbg !4383
@.str.11 = private unnamed_addr constant [8 x i8] c"asmcons\00", align 1
@pass_match_asm_constraints = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8 ()* null, i32 ()* @rest_of_match_asm_constraints, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1 } }, align 8, !dbg !4385
@initial_trampoline = internal global %struct.rtx_def* null, align 8, !dbg !4448
@gt_ggc_r_gt_function_h = dso_local constant [3 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.rtx_def** @initial_trampoline to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_rtx_def, void (i8*)* @gt_pch_nx_rtx_def }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @temp_slot_address_table to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P23temp_slot_address_entry4htab, void (i8*)* @gt_pch_n_P23temp_slot_address_entry4htab }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !4387
@gt_ggc_rc_gt_function_h = dso_local constant [3 x %struct.ggc_cache_tab] [%struct.ggc_cache_tab { %struct.htab** @epilogue_insn_hash, i64 1, i64 8, void (i8*)* @gt_ggc_mx_rtx_def, void (i8*)* @gt_pch_nx_rtx_def, i32 (i8*)* @ggc_marked_p }, %struct.ggc_cache_tab { %struct.htab** @prologue_insn_hash, i64 1, i64 8, void (i8*)* @gt_ggc_mx_rtx_def, void (i8*)* @gt_pch_nx_rtx_def, i32 (i8*)* @ggc_marked_p }, %struct.ggc_cache_tab zeroinitializer], align 16, !dbg !4401
@gt_pch_rc_gt_function_h = dso_local constant [3 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.htab** @epilogue_insn_hash to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P7rtx_def4htab, void (i8*)* @gt_pch_n_P7rtx_def4htab }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @prologue_insn_hash to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P7rtx_def4htab, void (i8*)* @gt_pch_n_P7rtx_def4htab }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !4417
@gt_pch_rs_gt_function_h = dso_local constant [3 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (i32* @next_block_index to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab { i8* bitcast (i32* @funcdef_no to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !4419
@current_function_is_leaf = common dso_local global i32 0, align 4, !dbg !4421
@current_function_sp_is_unchanging = common dso_local global i32 0, align 4, !dbg !4423
@current_function_uses_only_leaf_regs = common dso_local global i32 0, align 4, !dbg !4425
@flag_strict_aliasing = external dso_local global i32, align 4
@flag_expensive_optimizations = external dso_local global i32, align 4
@in_arg_offset = internal global i32 0, align 4, !dbg !4450
@var_offset = internal global i32 0, align 4, !dbg !4452
@dynamic_offset = internal global i32 0, align 4, !dbg !4454
@out_arg_offset = internal global i32 0, align 4, !dbg !4456
@cfa_offset = internal global i32 0, align 4, !dbg !4458
@target_flags = external dso_local global i32, align 4
@recog_data = external dso_local global %struct.recog_data, align 8
@insn_data = external dso_local constant [0 x %struct.insn_data], align 8
@.str.12 = private unnamed_addr constant [33 x i8] c"impossible constraint in %<asm%>\00", align 1
@.str.13 = private unnamed_addr constant [61 x i8] c"variable %q+D might be clobbered by %<longjmp%> or %<vfork%>\00", align 1
@regstat_n_sets_and_refs = external dso_local global %struct.regstat_n_sets_and_refs_t*, align 8
@.str.14 = private unnamed_addr constant [61 x i8] c"argument %q+D might be clobbered by %<longjmp%> or %<vfork%>\00", align 1
@cse_not_expected = external dso_local global i32, align 4
@caller_save_needed = external dso_local global i32, align 4
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@flag_stack_protect = external dso_local global i32, align 4
@word_mode = external dso_local global i32, align 4
@mode_inner = external dso_local constant [87 x i8], align 16
@.str.15 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@htab_eq_pointer = external dso_local global i32 (i8*, i8*)*, align 8
@prologue_locator = external dso_local global i32, align 4
@epilogue_completed = external dso_local global i32, align 4
@epilogue_locator = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_function_context() #0 !dbg !4466 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4470
  %cmp = icmp eq %struct.function* %0, null, !dbg !4472
  br i1 %cmp, label %if.then, label %if.end, !dbg !4473

if.then:                                          ; preds = %entry
  call void @allocate_struct_function(%union.tree_node* null, i8 zeroext 0), !dbg !4474
  br label %if.end, !dbg !4474

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4475
  %call = call %struct.function** @VEC_function_p_heap_safe_push(%struct.VEC_function_p_heap** @function_context_stack, %struct.function* %1), !dbg !4475
  call void @set_cfun(%struct.function* null), !dbg !4476
  ret void, !dbg !4477
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @allocate_struct_function(%union.tree_node* %fndecl, i8 zeroext %abstract_p) #0 !dbg !4478 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %abstract_p.addr = alloca i8, align 1
  %result = alloca %union.tree_node*, align 8
  %fntype = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !4481, metadata !DIExpression()), !dbg !4482
  store i8 %abstract_p, i8* %abstract_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %abstract_p.addr, metadata !4483, metadata !DIExpression()), !dbg !4484
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !4485, metadata !DIExpression()), !dbg !4486
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !4487, metadata !DIExpression()), !dbg !4488
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4489
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !4489
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4489

cond.true:                                        ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4490
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !4490
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4490
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4490
  br label %cond.end, !dbg !4489

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4489

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %2, %cond.true ], [ null, %cond.false ], !dbg !4489
  store %union.tree_node* %cond, %union.tree_node** %fntype, align 8, !dbg !4488
  %call = call i8* @ggc_alloc_cleared_stat(i64 144), !dbg !4491
  %3 = bitcast i8* %call to %struct.function*, !dbg !4491
  store %struct.function* %3, %struct.function** @cfun, align 8, !dbg !4492
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4493
  %function_frequency = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 20, !dbg !4494
  %bf.load = load i32, i32* %function_frequency, align 8, !dbg !4495
  %bf.clear = and i32 %bf.load, -196609, !dbg !4495
  %bf.set = or i32 %bf.clear, 65536, !dbg !4495
  store i32 %bf.set, i32* %function_frequency, align 8, !dbg !4495
  call void @init_eh_for_function(), !dbg !4496
  %5 = load %struct.machine_function* ()*, %struct.machine_function* ()** @init_machine_status, align 8, !dbg !4497
  %tobool1 = icmp ne %struct.machine_function* ()* %5, null, !dbg !4497
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4499

if.then:                                          ; preds = %cond.end
  %6 = load %struct.machine_function* ()*, %struct.machine_function* ()** @init_machine_status, align 8, !dbg !4500
  %call2 = call %struct.machine_function* %6(), !dbg !4501
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4502
  %machine = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 10, !dbg !4503
  store %struct.machine_function* %call2, %struct.machine_function** %machine, align 8, !dbg !4504
  br label %if.end, !dbg !4502

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4505
  call void @ix86_call_abi_override(%union.tree_node* %8), !dbg !4505
  %9 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4506
  call void @invoke_set_current_function_hook(%union.tree_node* %9), !dbg !4507
  %10 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4508
  %cmp = icmp ne %union.tree_node* %10, null, !dbg !4510
  br i1 %cmp, label %if.then3, label %if.end31, !dbg !4511

if.then3:                                         ; preds = %if.end
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4512
  %12 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4514
  %function_decl = bitcast %union.tree_node* %12 to %struct.tree_function_decl*, !dbg !4514
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !4514
  store %struct.function* %11, %struct.function** %f, align 8, !dbg !4515
  %13 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4516
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4517
  %decl = getelementptr inbounds %struct.function, %struct.function* %14, i32 0, i32 6, !dbg !4518
  store %union.tree_node* %13, %union.tree_node** %decl, align 8, !dbg !4519
  %call4 = call i32 @get_next_funcdef_no(), !dbg !4520
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4521
  %funcdef_no = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 14, !dbg !4521
  store i32 %call4, i32* %funcdef_no, align 4, !dbg !4522
  %16 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4523
  %decl_non_common = bitcast %union.tree_node* %16 to %struct.tree_decl_non_common*, !dbg !4523
  %result5 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !4523
  %17 = load %union.tree_node*, %union.tree_node** %result5, align 8, !dbg !4523
  store %union.tree_node* %17, %union.tree_node** %result, align 8, !dbg !4524
  %18 = load i8, i8* %abstract_p.addr, align 1, !dbg !4525
  %tobool6 = icmp ne i8 %18, 0, !dbg !4525
  br i1 %tobool6, label %if.end13, label %land.lhs.true, !dbg !4527

land.lhs.true:                                    ; preds = %if.then3
  %19 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4528
  %20 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !4529
  %call7 = call i32 @aggregate_value_p(%union.tree_node* %19, %union.tree_node* %20), !dbg !4530
  %tobool8 = icmp ne i32 %call7, 0, !dbg !4530
  br i1 %tobool8, label %if.then9, label %if.end13, !dbg !4531

if.then9:                                         ; preds = %land.lhs.true
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4532
  %returns_struct = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 20, !dbg !4534
  %bf.load10 = load i32, i32* %returns_struct, align 8, !dbg !4535
  %bf.clear11 = and i32 %bf.load10, -67108865, !dbg !4535
  %bf.set12 = or i32 %bf.clear11, 67108864, !dbg !4535
  store i32 %bf.set12, i32* %returns_struct, align 8, !dbg !4535
  br label %if.end13, !dbg !4536

if.end13:                                         ; preds = %if.then9, %land.lhs.true, %if.then3
  %22 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4537
  %tobool14 = icmp ne %union.tree_node* %22, null, !dbg !4537
  br i1 %tobool14, label %land.lhs.true15, label %land.end, !dbg !4538

land.lhs.true15:                                  ; preds = %if.end13
  %23 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4539
  %type16 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !4539
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 1, !dbg !4539
  %24 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4539
  %cmp17 = icmp ne %union.tree_node* %24, null, !dbg !4540
  br i1 %cmp17, label %land.rhs, label %land.end, !dbg !4541

land.rhs:                                         ; preds = %land.lhs.true15
  %25 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4542
  %type18 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !4542
  %values19 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 1, !dbg !4542
  %26 = load %union.tree_node*, %union.tree_node** %values19, align 8, !dbg !4542
  %call20 = call %union.tree_node* @tree_last(%union.tree_node* %26), !dbg !4542
  %list = bitcast %union.tree_node* %call20 to %struct.tree_list*, !dbg !4542
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !4542
  %27 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4542
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !4543
  %cmp21 = icmp ne %union.tree_node* %27, %28, !dbg !4544
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true15, %if.end13
  %29 = phi i1 [ false, %land.lhs.true15 ], [ false, %if.end13 ], [ %cmp21, %land.rhs ], !dbg !4545
  %land.ext = zext i1 %29 to i32, !dbg !4541
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4546
  %stdarg = getelementptr inbounds %struct.function, %struct.function* %30, i32 0, i32 20, !dbg !4547
  %bf.load22 = load i32, i32* %stdarg, align 8, !dbg !4548
  %bf.value = and i32 %land.ext, 1, !dbg !4548
  %bf.shl = shl i32 %bf.value, 22, !dbg !4548
  %bf.clear23 = and i32 %bf.load22, -4194305, !dbg !4548
  %bf.set24 = or i32 %bf.clear23, %bf.shl, !dbg !4548
  store i32 %bf.set24, i32* %stdarg, align 8, !dbg !4548
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4549
  %va_list_gpr_size = getelementptr inbounds %struct.function, %struct.function* %31, i32 0, i32 20, !dbg !4550
  %bf.load25 = load i32, i32* %va_list_gpr_size, align 8, !dbg !4551
  %bf.clear26 = and i32 %bf.load25, -256, !dbg !4551
  %bf.set27 = or i32 %bf.clear26, 255, !dbg !4551
  store i32 %bf.set27, i32* %va_list_gpr_size, align 8, !dbg !4551
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4552
  %va_list_fpr_size = getelementptr inbounds %struct.function, %struct.function* %32, i32 0, i32 20, !dbg !4553
  %bf.load28 = load i32, i32* %va_list_fpr_size, align 8, !dbg !4554
  %bf.clear29 = and i32 %bf.load28, -65281, !dbg !4554
  %bf.set30 = or i32 %bf.clear29, 65280, !dbg !4554
  store i32 %bf.set30, i32* %va_list_fpr_size, align 8, !dbg !4554
  br label %if.end31, !dbg !4555

if.end31:                                         ; preds = %land.end, %if.end
  ret void, !dbg !4556
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.function** @VEC_function_p_heap_safe_push(%struct.VEC_function_p_heap** %vec_, %struct.function* %obj_) #0 !dbg !4557 {
entry:
  %vec_.addr = alloca %struct.VEC_function_p_heap**, align 8
  %obj_.addr = alloca %struct.function*, align 8
  store %struct.VEC_function_p_heap** %vec_, %struct.VEC_function_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_function_p_heap*** %vec_.addr, metadata !4562, metadata !DIExpression()), !dbg !4563
  store %struct.function* %obj_, %struct.function** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %obj_.addr, metadata !4564, metadata !DIExpression()), !dbg !4563
  %0 = load %struct.VEC_function_p_heap**, %struct.VEC_function_p_heap*** %vec_.addr, align 8, !dbg !4563
  %call = call i32 @VEC_function_p_heap_reserve(%struct.VEC_function_p_heap** %0, i32 1), !dbg !4563
  %1 = load %struct.VEC_function_p_heap**, %struct.VEC_function_p_heap*** %vec_.addr, align 8, !dbg !4563
  %2 = load %struct.VEC_function_p_heap*, %struct.VEC_function_p_heap** %1, align 8, !dbg !4563
  %tobool = icmp ne %struct.VEC_function_p_heap* %2, null, !dbg !4563
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4563

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_function_p_heap**, %struct.VEC_function_p_heap*** %vec_.addr, align 8, !dbg !4563
  %4 = load %struct.VEC_function_p_heap*, %struct.VEC_function_p_heap** %3, align 8, !dbg !4563
  %base = getelementptr inbounds %struct.VEC_function_p_heap, %struct.VEC_function_p_heap* %4, i32 0, i32 0, !dbg !4563
  br label %cond.end, !dbg !4563

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4563

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_function_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4563
  %5 = load %struct.function*, %struct.function** %obj_.addr, align 8, !dbg !4563
  %call1 = call %struct.function** @VEC_function_p_base_quick_push(%struct.VEC_function_p_base* %cond, %struct.function* %5), !dbg !4563
  ret %struct.function** %call1, !dbg !4563
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_cfun(%struct.function* %new_cfun) #0 !dbg !4565 {
entry:
  %new_cfun.addr = alloca %struct.function*, align 8
  store %struct.function* %new_cfun, %struct.function** %new_cfun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %new_cfun.addr, metadata !4568, metadata !DIExpression()), !dbg !4569
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4570
  %1 = load %struct.function*, %struct.function** %new_cfun.addr, align 8, !dbg !4572
  %cmp = icmp ne %struct.function* %0, %1, !dbg !4573
  br i1 %cmp, label %if.then, label %if.end, !dbg !4574

if.then:                                          ; preds = %entry
  %2 = load %struct.function*, %struct.function** %new_cfun.addr, align 8, !dbg !4575
  store %struct.function* %2, %struct.function** @cfun, align 8, !dbg !4577
  %3 = load %struct.function*, %struct.function** %new_cfun.addr, align 8, !dbg !4578
  %tobool = icmp ne %struct.function* %3, null, !dbg !4578
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4578

cond.true:                                        ; preds = %if.then
  %4 = load %struct.function*, %struct.function** %new_cfun.addr, align 8, !dbg !4579
  %decl = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 6, !dbg !4580
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4580
  br label %cond.end, !dbg !4578

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !4578

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %5, %cond.true ], [ null, %cond.false ], !dbg !4578
  call void @invoke_set_current_function_hook(%union.tree_node* %cond), !dbg !4581
  br label %if.end, !dbg !4582

if.end:                                           ; preds = %cond.end, %entry
  ret void, !dbg !4583
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pop_function_context() #0 !dbg !4584 {
entry:
  %p = alloca %struct.function*, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %p, metadata !4585, metadata !DIExpression()), !dbg !4586
  %0 = load %struct.VEC_function_p_heap*, %struct.VEC_function_p_heap** @function_context_stack, align 8, !dbg !4587
  %tobool = icmp ne %struct.VEC_function_p_heap* %0, null, !dbg !4587
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4587

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_function_p_heap*, %struct.VEC_function_p_heap** @function_context_stack, align 8, !dbg !4587
  %base = getelementptr inbounds %struct.VEC_function_p_heap, %struct.VEC_function_p_heap* %1, i32 0, i32 0, !dbg !4587
  br label %cond.end, !dbg !4587

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4587

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_function_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4587
  %call = call %struct.function* @VEC_function_p_base_pop(%struct.VEC_function_p_base* %cond), !dbg !4587
  store %struct.function* %call, %struct.function** %p, align 8, !dbg !4586
  %2 = load %struct.function*, %struct.function** %p, align 8, !dbg !4588
  call void @set_cfun(%struct.function* %2), !dbg !4589
  %3 = load %struct.function*, %struct.function** %p, align 8, !dbg !4590
  %decl = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 6, !dbg !4591
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4591
  store %union.tree_node* %4, %union.tree_node** @current_function_decl, align 8, !dbg !4592
  store i32 0, i32* @virtuals_instantiated, align 4, !dbg !4593
  store i32 1, i32* @generating_concat_p, align 4, !dbg !4594
  ret void, !dbg !4595
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.function* @VEC_function_p_base_pop(%struct.VEC_function_p_base* %vec_) #0 !dbg !4596 {
entry:
  %vec_.addr = alloca %struct.VEC_function_p_base*, align 8
  %obj_ = alloca %struct.function*, align 8
  store %struct.VEC_function_p_base* %vec_, %struct.VEC_function_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_function_p_base** %vec_.addr, metadata !4600, metadata !DIExpression()), !dbg !4601
  call void @llvm.dbg.declare(metadata %struct.function** %obj_, metadata !4602, metadata !DIExpression()), !dbg !4601
  %0 = load %struct.VEC_function_p_base*, %struct.VEC_function_p_base** %vec_.addr, align 8, !dbg !4601
  %num = getelementptr inbounds %struct.VEC_function_p_base, %struct.VEC_function_p_base* %0, i32 0, i32 0, !dbg !4601
  %1 = load i32, i32* %num, align 8, !dbg !4601
  %2 = load %struct.VEC_function_p_base*, %struct.VEC_function_p_base** %vec_.addr, align 8, !dbg !4601
  %vec = getelementptr inbounds %struct.VEC_function_p_base, %struct.VEC_function_p_base* %2, i32 0, i32 2, !dbg !4601
  %3 = load %struct.VEC_function_p_base*, %struct.VEC_function_p_base** %vec_.addr, align 8, !dbg !4601
  %num1 = getelementptr inbounds %struct.VEC_function_p_base, %struct.VEC_function_p_base* %3, i32 0, i32 0, !dbg !4601
  %4 = load i32, i32* %num1, align 8, !dbg !4601
  %dec = add i32 %4, -1, !dbg !4601
  store i32 %dec, i32* %num1, align 8, !dbg !4601
  %idxprom = zext i32 %dec to i64, !dbg !4601
  %arrayidx = getelementptr inbounds [1 x %struct.function*], [1 x %struct.function*]* %vec, i64 0, i64 %idxprom, !dbg !4601
  %5 = load %struct.function*, %struct.function** %arrayidx, align 8, !dbg !4601
  store %struct.function* %5, %struct.function** %obj_, align 8, !dbg !4601
  %6 = load %struct.function*, %struct.function** %obj_, align 8, !dbg !4601
  ret %struct.function* %6, !dbg !4601
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_after_parsing(%struct.function* %f) #0 !dbg !4603 {
entry:
  %f.addr = alloca %struct.function*, align 8
  store %struct.function* %f, %struct.function** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %f.addr, metadata !4604, metadata !DIExpression()), !dbg !4605
  %0 = load %struct.function*, %struct.function** %f.addr, align 8, !dbg !4606
  %language = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 11, !dbg !4607
  store %struct.language_function* null, %struct.language_function** %language, align 8, !dbg !4608
  ret void, !dbg !4609
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_after_compilation(%struct.function* %f) #0 !dbg !4610 {
entry:
  %f.addr = alloca %struct.function*, align 8
  store %struct.function* %f, %struct.function** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %f.addr, metadata !4611, metadata !DIExpression()), !dbg !4612
  store %struct.htab* null, %struct.htab** @prologue_insn_hash, align 8, !dbg !4613
  store %struct.htab* null, %struct.htab** @epilogue_insn_hash, align 8, !dbg !4614
  %0 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !4615
  %tobool = icmp ne i8* %0, null, !dbg !4617
  br i1 %tobool, label %if.then, label %if.end, !dbg !4618

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 9), align 8, !dbg !4619
  call void @free(i8* %1), !dbg !4620
  br label %if.end, !dbg !4620

if.end:                                           ; preds = %if.then, %entry
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.rtl_data* @x_rtl to i8*), i8 0, i64 488, i1 false), !dbg !4621
  %2 = load %struct.function*, %struct.function** %f.addr, align 8, !dbg !4622
  %eh = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 0, !dbg !4623
  store %struct.eh_status* null, %struct.eh_status** %eh, align 8, !dbg !4624
  %3 = load %struct.function*, %struct.function** %f.addr, align 8, !dbg !4625
  %machine = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 10, !dbg !4626
  store %struct.machine_function* null, %struct.machine_function** %machine, align 8, !dbg !4627
  %4 = load %struct.function*, %struct.function** %f.addr, align 8, !dbg !4628
  %cfg = getelementptr inbounds %struct.function, %struct.function* %4, i32 0, i32 1, !dbg !4629
  store %struct.control_flow_graph* null, %struct.control_flow_graph** %cfg, align 8, !dbg !4630
  store %struct.rtx_def** null, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !4631
  call void @insn_locators_free(), !dbg !4632
  ret void, !dbg !4633
}

declare dso_local void @free(i8*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local void @insn_locators_free() #2

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @get_frame_size() #0 !dbg !4634 {
entry:
  %0 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !4637
  %sub = sub nsw i64 0, %0, !dbg !4639
  ret i64 %sub, !dbg !4640
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @frame_offset_overflow(i64 %offset, %union.tree_node* %func) #0 !dbg !4641 {
entry:
  %retval = alloca i8, align 1
  %offset.addr = alloca i64, align 8
  %func.addr = alloca %union.tree_node*, align 8
  %size = alloca i64, align 8
  store i64 %offset, i64* %offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offset.addr, metadata !4644, metadata !DIExpression()), !dbg !4645
  store %union.tree_node* %func, %union.tree_node** %func.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %func.addr, metadata !4646, metadata !DIExpression()), !dbg !4647
  call void @llvm.dbg.declare(metadata i64* %size, metadata !4648, metadata !DIExpression()), !dbg !4649
  %0 = load i64, i64* %offset.addr, align 8, !dbg !4650
  %sub = sub nsw i64 0, %0, !dbg !4651
  store i64 %sub, i64* %size, align 8, !dbg !4649
  %1 = load i64, i64* %size, align 8, !dbg !4652
  %2 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !4654
  %conv = zext i8 %2 to i16, !dbg !4654
  %conv1 = zext i16 %conv to i32, !dbg !4654
  %mul = mul nsw i32 %conv1, 8, !dbg !4654
  %conv2 = trunc i32 %mul to i16, !dbg !4654
  %conv3 = zext i16 %conv2 to i32, !dbg !4654
  %sub4 = sub nsw i32 %conv3, 1, !dbg !4655
  %sh_prom = zext i32 %sub4 to i64, !dbg !4656
  %shl = shl i64 1, %sh_prom, !dbg !4656
  %sub5 = sub i64 %shl, 256, !dbg !4657
  %cmp = icmp ugt i64 %1, %sub5, !dbg !4658
  br i1 %cmp, label %if.then, label %if.end, !dbg !4659

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %func.addr, align 8, !dbg !4660
  %decl_minimal = bitcast %union.tree_node* %3 to %struct.tree_decl_minimal*, !dbg !4660
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !4660
  %4 = load i32, i32* %locus, align 8, !dbg !4660
  call void (i32, i8*, ...) @error_at(i32 %4, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0)), !dbg !4662
  store i8 1, i8* %retval, align 1, !dbg !4663
  br label %return, !dbg !4663

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4664
  br label %return, !dbg !4664

return:                                           ; preds = %if.end, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !4665
  ret i8 %5, !dbg !4665
}

declare dso_local void @error_at(i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @assign_stack_local_1(i32 %mode, i64 %size, i32 %align, i8 zeroext %reduce_alignment_ok) #0 !dbg !4666 {
entry:
  %mode.addr = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %align.addr = alloca i32, align 4
  %reduce_alignment_ok.addr = alloca i8, align 1
  %x = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %bigend_correction = alloca i32, align 4
  %alignment = alloca i32, align 4
  %alignment_in_bits = alloca i32, align 4
  %frame_off = alloca i32, align 4
  %frame_alignment = alloca i32, align 4
  %frame_phase = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4669, metadata !DIExpression()), !dbg !4670
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !4671, metadata !DIExpression()), !dbg !4672
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !4673, metadata !DIExpression()), !dbg !4674
  store i8 %reduce_alignment_ok, i8* %reduce_alignment_ok.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %reduce_alignment_ok.addr, metadata !4675, metadata !DIExpression()), !dbg !4676
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !4677, metadata !DIExpression()), !dbg !4678
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !4679, metadata !DIExpression()), !dbg !4680
  call void @llvm.dbg.declare(metadata i32* %bigend_correction, metadata !4681, metadata !DIExpression()), !dbg !4682
  store i32 0, i32* %bigend_correction, align 4, !dbg !4682
  call void @llvm.dbg.declare(metadata i32* %alignment, metadata !4683, metadata !DIExpression()), !dbg !4684
  call void @llvm.dbg.declare(metadata i32* %alignment_in_bits, metadata !4685, metadata !DIExpression()), !dbg !4686
  call void @llvm.dbg.declare(metadata i32* %frame_off, metadata !4687, metadata !DIExpression()), !dbg !4688
  call void @llvm.dbg.declare(metadata i32* %frame_alignment, metadata !4689, metadata !DIExpression()), !dbg !4690
  call void @llvm.dbg.declare(metadata i32* %frame_phase, metadata !4691, metadata !DIExpression()), !dbg !4692
  %0 = load i32, i32* %align.addr, align 4, !dbg !4693
  %cmp = icmp eq i32 %0, 0, !dbg !4695
  br i1 %cmp, label %if.then, label %if.else, !dbg !4696

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %mode.addr, align 4, !dbg !4697
  %call = call i32 @get_stack_local_alignment(%union.tree_node* null, i32 %1), !dbg !4699
  store i32 %call, i32* %alignment, align 4, !dbg !4700
  %2 = load i32, i32* %alignment, align 4, !dbg !4701
  %div = udiv i32 %2, 8, !dbg !4701
  store i32 %div, i32* %alignment, align 4, !dbg !4701
  br label %if.end15, !dbg !4702

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %align.addr, align 4, !dbg !4703
  %cmp1 = icmp eq i32 %3, -1, !dbg !4705
  br i1 %cmp1, label %if.then2, label %if.else8, !dbg !4706

if.then2:                                         ; preds = %if.else
  %4 = load i32, i32* @ix86_isa_flags, align 4, !dbg !4707
  %and = and i32 %4, 32, !dbg !4707
  %cmp3 = icmp ne i32 %and, 0, !dbg !4707
  %5 = zext i1 %cmp3 to i64, !dbg !4707
  %cond = select i1 %cmp3, i32 256, i32 128, !dbg !4707
  %div4 = sdiv i32 %cond, 8, !dbg !4709
  store i32 %div4, i32* %alignment, align 4, !dbg !4710
  %6 = load i64, i64* %size.addr, align 8, !dbg !4711
  %7 = load i32, i32* %alignment, align 4, !dbg !4711
  %conv = zext i32 %7 to i64, !dbg !4711
  %add = add nsw i64 %6, %conv, !dbg !4711
  %sub = sub nsw i64 %add, 1, !dbg !4711
  %8 = load i32, i32* %alignment, align 4, !dbg !4711
  %sub5 = sub i32 %8, 1, !dbg !4711
  %neg = xor i32 %sub5, -1, !dbg !4711
  %conv6 = zext i32 %neg to i64, !dbg !4711
  %and7 = and i64 %sub, %conv6, !dbg !4711
  store i64 %and7, i64* %size.addr, align 8, !dbg !4712
  br label %if.end14, !dbg !4713

if.else8:                                         ; preds = %if.else
  %9 = load i32, i32* %align.addr, align 4, !dbg !4714
  %cmp9 = icmp eq i32 %9, -2, !dbg !4716
  br i1 %cmp9, label %if.then11, label %if.else12, !dbg !4717

if.then11:                                        ; preds = %if.else8
  store i32 1, i32* %alignment, align 4, !dbg !4718
  br label %if.end, !dbg !4719

if.else12:                                        ; preds = %if.else8
  %10 = load i32, i32* %align.addr, align 4, !dbg !4720
  %div13 = sdiv i32 %10, 8, !dbg !4721
  store i32 %div13, i32* %alignment, align 4, !dbg !4722
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then11
  br label %if.end14

if.end14:                                         ; preds = %if.end, %if.then2
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then
  %11 = load i32, i32* %alignment, align 4, !dbg !4723
  %mul = mul i32 %11, 8, !dbg !4724
  store i32 %mul, i32* %alignment_in_bits, align 4, !dbg !4725
  %12 = load i64, i64* %size.addr, align 8, !dbg !4726
  %13 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !4728
  %sub16 = sub nsw i64 %13, %12, !dbg !4728
  store i64 %sub16, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !4728
  %14 = load i32, i32* %alignment_in_bits, align 4, !dbg !4729
  %cmp17 = icmp ugt i32 %14, -2147483648, !dbg !4731
  br i1 %cmp17, label %if.then19, label %if.end21, !dbg !4732

if.then19:                                        ; preds = %if.end15
  store i32 -2147483648, i32* %alignment_in_bits, align 4, !dbg !4733
  %15 = load i32, i32* %alignment_in_bits, align 4, !dbg !4735
  %div20 = udiv i32 %15, 8, !dbg !4736
  store i32 %div20, i32* %alignment, align 4, !dbg !4737
  br label %if.end21, !dbg !4738

if.end21:                                         ; preds = %if.then19, %if.end15
  %16 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !4739
  %17 = load i32, i32* %alignment_in_bits, align 4, !dbg !4743
  %cmp22 = icmp ult i32 %16, %17, !dbg !4744
  br i1 %cmp22, label %if.then24, label %if.end46, !dbg !4745

if.then24:                                        ; preds = %if.end21
  %18 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 46), align 2, !dbg !4746
  %tobool = icmp ne i8 %18, 0, !dbg !4749
  br i1 %tobool, label %if.else26, label %if.then25, !dbg !4750

if.then25:                                        ; preds = %if.then24
  %19 = load i32, i32* %alignment_in_bits, align 4, !dbg !4751
  store i32 %19, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !4752
  br label %if.end45, !dbg !4753

if.else26:                                        ; preds = %if.then24
  %20 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 47), align 1, !dbg !4754
  %tobool27 = icmp ne i8 %20, 0, !dbg !4754
  br i1 %tobool27, label %cond.true, label %cond.false, !dbg !4754

cond.true:                                        ; preds = %if.else26
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 344, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4754
  br label %cond.end, !dbg !4754

cond.false:                                       ; preds = %if.else26
  br label %cond.end, !dbg !4754

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond28 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4754
  %21 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 43), align 1, !dbg !4756
  %tobool29 = icmp ne i8 %21, 0, !dbg !4758
  br i1 %tobool29, label %if.end44, label %if.then30, !dbg !4759

if.then30:                                        ; preds = %cond.end
  %22 = load i8, i8* %reduce_alignment_ok.addr, align 1, !dbg !4760
  %conv31 = zext i8 %22 to i32, !dbg !4760
  %tobool32 = icmp ne i32 %conv31, 0, !dbg !4760
  br i1 %tobool32, label %cond.false40, label %lor.lhs.false, !dbg !4760

lor.lhs.false:                                    ; preds = %if.then30
  %23 = load i64, i64* %size.addr, align 8, !dbg !4760
  %cmp33 = icmp eq i64 %23, 0, !dbg !4760
  br i1 %cmp33, label %cond.false40, label %lor.lhs.false35, !dbg !4760

lor.lhs.false35:                                  ; preds = %lor.lhs.false
  %24 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !4760
  %25 = load i32, i32* %mode.addr, align 4, !dbg !4760
  %call36 = call i32 @get_mode_alignment(i32 %25), !dbg !4760
  %cmp37 = icmp uge i32 %24, %call36, !dbg !4760
  br i1 %cmp37, label %cond.false40, label %cond.true39, !dbg !4760

cond.true39:                                      ; preds = %lor.lhs.false35
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 353, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4760
  br label %cond.end41, !dbg !4760

cond.false40:                                     ; preds = %lor.lhs.false35, %lor.lhs.false, %if.then30
  br label %cond.end41, !dbg !4760

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond42 = phi i32 [ 0, %cond.true39 ], [ 0, %cond.false40 ], !dbg !4760
  %26 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !4762
  store i32 %26, i32* %alignment_in_bits, align 4, !dbg !4763
  %27 = load i32, i32* %alignment_in_bits, align 4, !dbg !4764
  %div43 = udiv i32 %27, 8, !dbg !4765
  store i32 %div43, i32* %alignment, align 4, !dbg !4766
  br label %if.end44, !dbg !4767

if.end44:                                         ; preds = %cond.end41, %cond.end
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then25
  br label %if.end46, !dbg !4768

if.end46:                                         ; preds = %if.end45, %if.end21
  %28 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 22), align 4, !dbg !4769
  %29 = load i32, i32* %alignment_in_bits, align 4, !dbg !4771
  %cmp47 = icmp ult i32 %28, %29, !dbg !4772
  br i1 %cmp47, label %if.then49, label %if.end50, !dbg !4773

if.then49:                                        ; preds = %if.end46
  %30 = load i32, i32* %alignment_in_bits, align 4, !dbg !4774
  store i32 %30, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 22), align 4, !dbg !4775
  br label %if.end50, !dbg !4776

if.end50:                                         ; preds = %if.then49, %if.end46
  %31 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 25), align 8, !dbg !4777
  %32 = load i32, i32* %alignment_in_bits, align 4, !dbg !4779
  %cmp51 = icmp ult i32 %31, %32, !dbg !4780
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !4781

if.then53:                                        ; preds = %if.end50
  %33 = load i32, i32* %alignment_in_bits, align 4, !dbg !4782
  store i32 %33, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 25), align 8, !dbg !4783
  br label %if.end54, !dbg !4784

if.end54:                                         ; preds = %if.then53, %if.end50
  %34 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !4785
  %div55 = udiv i32 %34, 8, !dbg !4786
  store i32 %div55, i32* %frame_alignment, align 4, !dbg !4787
  %35 = load i32, i32* %frame_alignment, align 4, !dbg !4788
  %rem = srem i32 0, %35, !dbg !4789
  store i32 %rem, i32* %frame_off, align 4, !dbg !4790
  %36 = load i32, i32* %frame_off, align 4, !dbg !4791
  %tobool56 = icmp ne i32 %36, 0, !dbg !4791
  br i1 %tobool56, label %cond.true57, label %cond.false59, !dbg !4791

cond.true57:                                      ; preds = %if.end54
  %37 = load i32, i32* %frame_alignment, align 4, !dbg !4792
  %38 = load i32, i32* %frame_off, align 4, !dbg !4793
  %sub58 = sub nsw i32 %37, %38, !dbg !4794
  br label %cond.end60, !dbg !4791

cond.false59:                                     ; preds = %if.end54
  br label %cond.end60, !dbg !4791

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi i32 [ %sub58, %cond.true57 ], [ 0, %cond.false59 ], !dbg !4791
  store i32 %cond61, i32* %frame_phase, align 4, !dbg !4795
  %39 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !4796
  %40 = load i32, i32* %frame_phase, align 4, !dbg !4796
  %conv62 = sext i32 %40 to i64, !dbg !4796
  %sub63 = sub nsw i64 %39, %conv62, !dbg !4796
  %41 = load i32, i32* %alignment, align 4, !dbg !4796
  %conv64 = zext i32 %41 to i64, !dbg !4796
  %sub65 = sub i64 %conv64, 1, !dbg !4796
  %neg66 = xor i64 %sub65, -1, !dbg !4796
  %and67 = and i64 %sub63, %neg66, !dbg !4796
  %42 = load i32, i32* %frame_phase, align 4, !dbg !4800
  %conv68 = sext i32 %42 to i64, !dbg !4800
  %add69 = add i64 %and67, %conv68, !dbg !4801
  store i64 %add69, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !4802
  %43 = load i32, i32* @virtuals_instantiated, align 4, !dbg !4803
  %tobool70 = icmp ne i32 %43, 0, !dbg !4803
  br i1 %tobool70, label %if.then71, label %if.else77, !dbg !4805

if.then71:                                        ; preds = %cond.end60
  %44 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !dbg !4806
  %45 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !4807
  %46 = load i32, i32* %bigend_correction, align 4, !dbg !4808
  %conv72 = sext i32 %46 to i64, !dbg !4808
  %add73 = add nsw i64 %45, %conv72, !dbg !4809
  %add74 = add nsw i64 %add73, 0, !dbg !4810
  %call75 = call i64 @trunc_int_for_mode(i64 %add74, i32 16), !dbg !4811
  %call76 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %44, i64 %call75), !dbg !4812
  store %struct.rtx_def* %call76, %struct.rtx_def** %addr, align 8, !dbg !4813
  br label %if.end82, !dbg !4814

if.else77:                                        ; preds = %cond.end60
  %47 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !dbg !4815
  %48 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !4816
  %49 = load i32, i32* %bigend_correction, align 4, !dbg !4817
  %conv78 = sext i32 %49 to i64, !dbg !4817
  %add79 = add nsw i64 %48, %conv78, !dbg !4818
  %call80 = call i64 @trunc_int_for_mode(i64 %add79, i32 16), !dbg !4819
  %call81 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %47, i64 %call80), !dbg !4820
  store %struct.rtx_def* %call81, %struct.rtx_def** %addr, align 8, !dbg !4821
  br label %if.end82

if.end82:                                         ; preds = %if.else77, %if.then71
  %50 = load i32, i32* %mode.addr, align 4, !dbg !4822
  %51 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !4823
  %call83 = call %struct.rtx_def* @gen_rtx_MEM(i32 %50, %struct.rtx_def* %51), !dbg !4824
  store %struct.rtx_def* %call83, %struct.rtx_def** %x, align 8, !dbg !4825
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4826
  %53 = load i32, i32* %alignment_in_bits, align 4, !dbg !4827
  call void @set_mem_align(%struct.rtx_def* %52, i32 %53), !dbg !4828
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4829
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !4829
  %bf.load = load i32, i32* %55, align 8, !dbg !4830
  %bf.clear = and i32 %bf.load, -33554433, !dbg !4830
  %bf.set = or i32 %bf.clear, 33554432, !dbg !4830
  store i32 %bf.set, i32* %55, align 8, !dbg !4830
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4831
  %57 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 13), align 8, !dbg !4831
  %call84 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 3, i32 0, %struct.rtx_def* %56, %struct.rtx_def* %57), !dbg !4831
  store %struct.rtx_def* %call84, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 13), align 8, !dbg !4832
  %58 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !4833
  %59 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4835
  %call85 = call zeroext i8 @frame_offset_overflow(i64 %58, %union.tree_node* %59), !dbg !4836
  %tobool86 = icmp ne i8 %call85, 0, !dbg !4836
  br i1 %tobool86, label %if.then87, label %if.end88, !dbg !4837

if.then87:                                        ; preds = %if.end82
  store i64 0, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !4838
  br label %if.end88, !dbg !4839

if.end88:                                         ; preds = %if.then87, %if.end82
  %60 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !4840
  ret %struct.rtx_def* %60, !dbg !4841
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_stack_local_alignment(%union.tree_node* %type, i32 %mode) #0 !dbg !4842 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %mode.addr = alloca i32, align 4
  %alignment = alloca i32, align 4
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4845, metadata !DIExpression()), !dbg !4846
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4847, metadata !DIExpression()), !dbg !4848
  call void @llvm.dbg.declare(metadata i32* %alignment, metadata !4849, metadata !DIExpression()), !dbg !4850
  %0 = load i32, i32* %mode.addr, align 4, !dbg !4851
  %cmp = icmp eq i32 %0, 1, !dbg !4853
  br i1 %cmp, label %if.then, label %if.else, !dbg !4854

if.then:                                          ; preds = %entry
  %1 = load i32, i32* @ix86_isa_flags, align 4, !dbg !4855
  %and = and i32 %1, 32, !dbg !4855
  %cmp1 = icmp ne i32 %and, 0, !dbg !4855
  %2 = zext i1 %cmp1 to i64, !dbg !4855
  %cond = select i1 %cmp1, i32 256, i32 128, !dbg !4855
  store i32 %cond, i32* %alignment, align 4, !dbg !4856
  br label %if.end, !dbg !4857

if.else:                                          ; preds = %entry
  %3 = load i32, i32* %mode.addr, align 4, !dbg !4858
  %call = call i32 @get_mode_alignment(i32 %3), !dbg !4858
  store i32 %call, i32* %alignment, align 4, !dbg !4859
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4860
  %tobool = icmp ne %union.tree_node* %4, null, !dbg !4860
  br i1 %tobool, label %if.end4, label %if.then2, !dbg !4862

if.then2:                                         ; preds = %if.end
  %5 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 2), align 8, !dbg !4863
  %6 = load i32, i32* %mode.addr, align 4, !dbg !4864
  %call3 = call %union.tree_node* %5(i32 %6, i32 0), !dbg !4865
  store %union.tree_node* %call3, %union.tree_node** %type.addr, align 8, !dbg !4866
  br label %if.end4, !dbg !4867

if.end4:                                          ; preds = %if.then2, %if.end
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4868
  %8 = load i32, i32* %mode.addr, align 4, !dbg !4868
  %9 = load i32, i32* %alignment, align 4, !dbg !4868
  %call5 = call i32 @ix86_local_alignment(%union.tree_node* %7, i32 %8, i32 %9), !dbg !4868
  ret i32 %call5, !dbg !4869
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local i32 @get_mode_alignment(i32) #2

declare dso_local %struct.rtx_def* @plus_constant(%struct.rtx_def*, i64) #2

declare dso_local i64 @trunc_int_for_mode(i64, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #2

declare dso_local void @set_mem_align(%struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @assign_stack_local(i32 %mode, i64 %size, i32 %align) #0 !dbg !4870 {
entry:
  %mode.addr = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %align.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4873, metadata !DIExpression()), !dbg !4874
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !4875, metadata !DIExpression()), !dbg !4876
  store i32 %align, i32* %align.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %align.addr, metadata !4877, metadata !DIExpression()), !dbg !4878
  %0 = load i32, i32* %mode.addr, align 4, !dbg !4879
  %1 = load i64, i64* %size.addr, align 8, !dbg !4880
  %2 = load i32, i32* %align.addr, align 4, !dbg !4881
  %call = call %struct.rtx_def* @assign_stack_local_1(i32 %0, i64 %1, i32 %2, i8 zeroext 0), !dbg !4882
  ret %struct.rtx_def* %call, !dbg !4883
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @assign_stack_temp_for_type(i32 %mode, i64 %size, i32 %keep, %union.tree_node* %type) #0 !dbg !4884 {
entry:
  %mode.addr = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %keep.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %align = alloca i32, align 4
  %p = alloca %struct.temp_slot*, align 8
  %best_p = alloca %struct.temp_slot*, align 8
  %selected = alloca %struct.temp_slot*, align 8
  %pp = alloca %struct.temp_slot**, align 8
  %slot = alloca %struct.rtx_def*, align 8
  %alignment = alloca i32, align 4
  %rounded_size = alloca i64, align 8
  %frame_offset_old = alloca i64, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !4887, metadata !DIExpression()), !dbg !4888
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !4889, metadata !DIExpression()), !dbg !4890
  store i32 %keep, i32* %keep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %keep.addr, metadata !4891, metadata !DIExpression()), !dbg !4892
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !4893, metadata !DIExpression()), !dbg !4894
  call void @llvm.dbg.declare(metadata i32* %align, metadata !4895, metadata !DIExpression()), !dbg !4896
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %p, metadata !4897, metadata !DIExpression()), !dbg !4898
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %best_p, metadata !4899, metadata !DIExpression()), !dbg !4900
  store %struct.temp_slot* null, %struct.temp_slot** %best_p, align 8, !dbg !4900
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %selected, metadata !4901, metadata !DIExpression()), !dbg !4902
  store %struct.temp_slot* null, %struct.temp_slot** %selected, align 8, !dbg !4902
  call void @llvm.dbg.declare(metadata %struct.temp_slot*** %pp, metadata !4903, metadata !DIExpression()), !dbg !4905
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %slot, metadata !4906, metadata !DIExpression()), !dbg !4907
  %0 = load i64, i64* %size.addr, align 8, !dbg !4908
  %cmp = icmp ne i64 %0, -1, !dbg !4908
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4908

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 703, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4908
  br label %cond.end, !dbg !4908

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4908

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4908
  %1 = load i32, i32* %keep.addr, align 4, !dbg !4909
  %cmp1 = icmp sle i32 %1, 1, !dbg !4909
  br i1 %cmp1, label %cond.false3, label %cond.true2, !dbg !4909

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 706, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !4909
  br label %cond.end4, !dbg !4909

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !4909

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !4909
  %2 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4910
  %3 = load i32, i32* %mode.addr, align 4, !dbg !4911
  %call = call i32 @get_stack_local_alignment(%union.tree_node* %2, i32 %3), !dbg !4912
  store i32 %call, i32* %align, align 4, !dbg !4913
  %4 = load i32, i32* @virtuals_instantiated, align 4, !dbg !4914
  %tobool = icmp ne i32 %4, 0, !dbg !4914
  br i1 %tobool, label %if.end39, label %if.then, !dbg !4916

if.then:                                          ; preds = %cond.end4
  %5 = load %struct.temp_slot*, %struct.temp_slot** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 20), align 8, !dbg !4917
  store %struct.temp_slot* %5, %struct.temp_slot** %p, align 8, !dbg !4920
  br label %for.cond, !dbg !4921

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4922
  %tobool6 = icmp ne %struct.temp_slot* %6, null, !dbg !4924
  br i1 %tobool6, label %for.body, label %for.end, !dbg !4924

for.body:                                         ; preds = %for.cond
  %7 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4925
  %align7 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %7, i32 0, i32 5, !dbg !4928
  %8 = load i32, i32* %align7, align 8, !dbg !4928
  %9 = load i32, i32* %align, align 4, !dbg !4929
  %cmp8 = icmp uge i32 %8, %9, !dbg !4930
  br i1 %cmp8, label %land.lhs.true, label %if.end38, !dbg !4931

land.lhs.true:                                    ; preds = %for.body
  %10 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4932
  %size9 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %10, i32 0, i32 3, !dbg !4933
  %11 = load i64, i64* %size9, align 8, !dbg !4933
  %12 = load i64, i64* %size.addr, align 8, !dbg !4934
  %cmp10 = icmp sge i64 %11, %12, !dbg !4935
  br i1 %cmp10, label %land.lhs.true11, label %if.end38, !dbg !4936

land.lhs.true11:                                  ; preds = %land.lhs.true
  %13 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4937
  %slot12 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %13, i32 0, i32 2, !dbg !4937
  %14 = load %struct.rtx_def*, %struct.rtx_def** %slot12, align 8, !dbg !4937
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !4937
  %bf.load = load i32, i32* %15, align 8, !dbg !4937
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4937
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4937
  %16 = load i32, i32* %mode.addr, align 4, !dbg !4938
  %cmp13 = icmp eq i32 %bf.clear, %16, !dbg !4939
  br i1 %cmp13, label %land.lhs.true14, label %if.end38, !dbg !4940

land.lhs.true14:                                  ; preds = %land.lhs.true11
  %17 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4941
  %type15 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %17, i32 0, i32 4, !dbg !4942
  %18 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !4942
  %19 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !4943
  %call16 = call i32 @objects_must_conflict_p(%union.tree_node* %18, %union.tree_node* %19), !dbg !4944
  %tobool17 = icmp ne i32 %call16, 0, !dbg !4944
  br i1 %tobool17, label %land.lhs.true18, label %if.end38, !dbg !4945

land.lhs.true18:                                  ; preds = %land.lhs.true14
  %20 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !4946
  %cmp19 = icmp eq %struct.temp_slot* %20, null, !dbg !4947
  br i1 %cmp19, label %if.then31, label %lor.lhs.false, !dbg !4948

lor.lhs.false:                                    ; preds = %land.lhs.true18
  %21 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !4949
  %size20 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %21, i32 0, i32 3, !dbg !4950
  %22 = load i64, i64* %size20, align 8, !dbg !4950
  %23 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4951
  %size21 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %23, i32 0, i32 3, !dbg !4952
  %24 = load i64, i64* %size21, align 8, !dbg !4952
  %cmp22 = icmp sgt i64 %22, %24, !dbg !4953
  br i1 %cmp22, label %if.then31, label %lor.lhs.false23, !dbg !4954

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %25 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !4955
  %size24 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %25, i32 0, i32 3, !dbg !4956
  %26 = load i64, i64* %size24, align 8, !dbg !4956
  %27 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4957
  %size25 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %27, i32 0, i32 3, !dbg !4958
  %28 = load i64, i64* %size25, align 8, !dbg !4958
  %cmp26 = icmp eq i64 %26, %28, !dbg !4959
  br i1 %cmp26, label %land.lhs.true27, label %if.end38, !dbg !4960

land.lhs.true27:                                  ; preds = %lor.lhs.false23
  %29 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !4961
  %align28 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %29, i32 0, i32 5, !dbg !4962
  %30 = load i32, i32* %align28, align 8, !dbg !4962
  %31 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4963
  %align29 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %31, i32 0, i32 5, !dbg !4964
  %32 = load i32, i32* %align29, align 8, !dbg !4964
  %cmp30 = icmp ugt i32 %30, %32, !dbg !4965
  br i1 %cmp30, label %if.then31, label %if.end38, !dbg !4966

if.then31:                                        ; preds = %land.lhs.true27, %lor.lhs.false, %land.lhs.true18
  %33 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4967
  %align32 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %33, i32 0, i32 5, !dbg !4970
  %34 = load i32, i32* %align32, align 8, !dbg !4970
  %35 = load i32, i32* %align, align 4, !dbg !4971
  %cmp33 = icmp eq i32 %34, %35, !dbg !4972
  br i1 %cmp33, label %land.lhs.true34, label %if.end, !dbg !4973

land.lhs.true34:                                  ; preds = %if.then31
  %36 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4974
  %size35 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %36, i32 0, i32 3, !dbg !4975
  %37 = load i64, i64* %size35, align 8, !dbg !4975
  %38 = load i64, i64* %size.addr, align 8, !dbg !4976
  %cmp36 = icmp eq i64 %37, %38, !dbg !4977
  br i1 %cmp36, label %if.then37, label %if.end, !dbg !4978

if.then37:                                        ; preds = %land.lhs.true34
  %39 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4979
  store %struct.temp_slot* %39, %struct.temp_slot** %selected, align 8, !dbg !4981
  %40 = load %struct.temp_slot*, %struct.temp_slot** %selected, align 8, !dbg !4982
  call void @cut_slot_from_list(%struct.temp_slot* %40, %struct.temp_slot** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 20)), !dbg !4983
  store %struct.temp_slot* null, %struct.temp_slot** %best_p, align 8, !dbg !4984
  br label %for.end, !dbg !4985

if.end:                                           ; preds = %land.lhs.true34, %if.then31
  %41 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4986
  store %struct.temp_slot* %41, %struct.temp_slot** %best_p, align 8, !dbg !4987
  br label %if.end38, !dbg !4988

if.end38:                                         ; preds = %if.end, %land.lhs.true27, %lor.lhs.false23, %land.lhs.true14, %land.lhs.true11, %land.lhs.true, %for.body
  br label %for.inc, !dbg !4989

for.inc:                                          ; preds = %if.end38
  %42 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !4990
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %42, i32 0, i32 0, !dbg !4991
  %43 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !4991
  store %struct.temp_slot* %43, %struct.temp_slot** %p, align 8, !dbg !4992
  br label %for.cond, !dbg !4993, !llvm.loop !4994

for.end:                                          ; preds = %if.then37, %for.cond
  br label %if.end39, !dbg !4996

if.end39:                                         ; preds = %for.end, %cond.end4
  %44 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !4997
  %tobool40 = icmp ne %struct.temp_slot* %44, null, !dbg !4997
  br i1 %tobool40, label %if.then41, label %if.end78, !dbg !4999

if.then41:                                        ; preds = %if.end39
  %45 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5000
  store %struct.temp_slot* %45, %struct.temp_slot** %selected, align 8, !dbg !5002
  %46 = load %struct.temp_slot*, %struct.temp_slot** %selected, align 8, !dbg !5003
  call void @cut_slot_from_list(%struct.temp_slot* %46, %struct.temp_slot** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 20)), !dbg !5004
  %47 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5005
  %slot42 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %47, i32 0, i32 2, !dbg !5005
  %48 = load %struct.rtx_def*, %struct.rtx_def** %slot42, align 8, !dbg !5005
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !5005
  %bf.load43 = load i32, i32* %49, align 8, !dbg !5005
  %bf.lshr44 = lshr i32 %bf.load43, 16, !dbg !5005
  %bf.clear45 = and i32 %bf.lshr44, 255, !dbg !5005
  %cmp46 = icmp eq i32 %bf.clear45, 1, !dbg !5007
  br i1 %cmp46, label %if.then47, label %if.end77, !dbg !5008

if.then47:                                        ; preds = %if.then41
  call void @llvm.dbg.declare(metadata i32* %alignment, metadata !5009, metadata !DIExpression()), !dbg !5011
  %50 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5012
  %align48 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %50, i32 0, i32 5, !dbg !5013
  %51 = load i32, i32* %align48, align 8, !dbg !5013
  %div = udiv i32 %51, 8, !dbg !5014
  store i32 %div, i32* %alignment, align 4, !dbg !5011
  call void @llvm.dbg.declare(metadata i64* %rounded_size, metadata !5015, metadata !DIExpression()), !dbg !5016
  %52 = load i64, i64* %size.addr, align 8, !dbg !5017
  %53 = load i32, i32* %alignment, align 4, !dbg !5017
  %conv = sext i32 %53 to i64, !dbg !5017
  %add = add nsw i64 %52, %conv, !dbg !5017
  %sub = sub nsw i64 %add, 1, !dbg !5017
  %54 = load i32, i32* %alignment, align 4, !dbg !5017
  %sub49 = sub nsw i32 %54, 1, !dbg !5017
  %neg = xor i32 %sub49, -1, !dbg !5017
  %conv50 = sext i32 %neg to i64, !dbg !5017
  %and = and i64 %sub, %conv50, !dbg !5017
  store i64 %and, i64* %rounded_size, align 8, !dbg !5016
  %55 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5018
  %size51 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %55, i32 0, i32 3, !dbg !5020
  %56 = load i64, i64* %size51, align 8, !dbg !5020
  %57 = load i64, i64* %rounded_size, align 8, !dbg !5021
  %sub52 = sub nsw i64 %56, %57, !dbg !5022
  %58 = load i32, i32* %alignment, align 4, !dbg !5023
  %conv53 = sext i32 %58 to i64, !dbg !5023
  %cmp54 = icmp sge i64 %sub52, %conv53, !dbg !5024
  br i1 %cmp54, label %if.then56, label %if.end76, !dbg !5025

if.then56:                                        ; preds = %if.then47
  %call57 = call i8* @ggc_alloc_stat(i64 72), !dbg !5026
  %59 = bitcast i8* %call57 to %struct.temp_slot*, !dbg !5026
  store %struct.temp_slot* %59, %struct.temp_slot** %p, align 8, !dbg !5028
  %60 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5029
  %addr_taken = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %60, i32 0, i32 7, !dbg !5030
  store i8 0, i8* %addr_taken, align 1, !dbg !5031
  %61 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5032
  %in_use = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %61, i32 0, i32 6, !dbg !5033
  store i8 0, i8* %in_use, align 4, !dbg !5034
  %62 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5035
  %size58 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %62, i32 0, i32 3, !dbg !5036
  %63 = load i64, i64* %size58, align 8, !dbg !5036
  %64 = load i64, i64* %rounded_size, align 8, !dbg !5037
  %sub59 = sub nsw i64 %63, %64, !dbg !5038
  %65 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5039
  %size60 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %65, i32 0, i32 3, !dbg !5040
  store i64 %sub59, i64* %size60, align 8, !dbg !5041
  %66 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5042
  %base_offset = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %66, i32 0, i32 10, !dbg !5043
  %67 = load i64, i64* %base_offset, align 8, !dbg !5043
  %68 = load i64, i64* %rounded_size, align 8, !dbg !5044
  %add61 = add nsw i64 %67, %68, !dbg !5045
  %69 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5046
  %base_offset62 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %69, i32 0, i32 10, !dbg !5047
  store i64 %add61, i64* %base_offset62, align 8, !dbg !5048
  %70 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5049
  %full_size = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %70, i32 0, i32 11, !dbg !5050
  %71 = load i64, i64* %full_size, align 8, !dbg !5050
  %72 = load i64, i64* %rounded_size, align 8, !dbg !5051
  %sub63 = sub nsw i64 %71, %72, !dbg !5052
  %73 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5053
  %full_size64 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %73, i32 0, i32 11, !dbg !5054
  store i64 %sub63, i64* %full_size64, align 8, !dbg !5055
  %74 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5056
  %slot65 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %74, i32 0, i32 2, !dbg !5056
  %75 = load %struct.rtx_def*, %struct.rtx_def** %slot65, align 8, !dbg !5056
  %76 = load i64, i64* %rounded_size, align 8, !dbg !5056
  %call66 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %75, i32 1, i64 %76, i32 0, i32 1), !dbg !5056
  %77 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5057
  %slot67 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %77, i32 0, i32 2, !dbg !5058
  store %struct.rtx_def* %call66, %struct.rtx_def** %slot67, align 8, !dbg !5059
  %78 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5060
  %align68 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %78, i32 0, i32 5, !dbg !5061
  %79 = load i32, i32* %align68, align 8, !dbg !5061
  %80 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5062
  %align69 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %80, i32 0, i32 5, !dbg !5063
  store i32 %79, i32* %align69, align 8, !dbg !5064
  %81 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5065
  %type70 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %81, i32 0, i32 4, !dbg !5066
  %82 = load %union.tree_node*, %union.tree_node** %type70, align 8, !dbg !5066
  %83 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5067
  %type71 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %83, i32 0, i32 4, !dbg !5068
  store %union.tree_node* %82, %union.tree_node** %type71, align 8, !dbg !5069
  %84 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5070
  call void @insert_slot_to_list(%struct.temp_slot* %84, %struct.temp_slot** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 20)), !dbg !5071
  %85 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5072
  %slot72 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %85, i32 0, i32 2, !dbg !5072
  %86 = load %struct.rtx_def*, %struct.rtx_def** %slot72, align 8, !dbg !5072
  %87 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 13), align 8, !dbg !5072
  %call73 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 3, i32 0, %struct.rtx_def* %86, %struct.rtx_def* %87), !dbg !5072
  store %struct.rtx_def* %call73, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 13), align 8, !dbg !5073
  %88 = load i64, i64* %rounded_size, align 8, !dbg !5074
  %89 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5075
  %size74 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %89, i32 0, i32 3, !dbg !5076
  store i64 %88, i64* %size74, align 8, !dbg !5077
  %90 = load i64, i64* %rounded_size, align 8, !dbg !5078
  %91 = load %struct.temp_slot*, %struct.temp_slot** %best_p, align 8, !dbg !5079
  %full_size75 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %91, i32 0, i32 11, !dbg !5080
  store i64 %90, i64* %full_size75, align 8, !dbg !5081
  br label %if.end76, !dbg !5082

if.end76:                                         ; preds = %if.then56, %if.then47
  br label %if.end77, !dbg !5083

if.end77:                                         ; preds = %if.end76, %if.then41
  br label %if.end78, !dbg !5084

if.end78:                                         ; preds = %if.end77, %if.end39
  %92 = load %struct.temp_slot*, %struct.temp_slot** %selected, align 8, !dbg !5085
  %cmp79 = icmp eq %struct.temp_slot* %92, null, !dbg !5087
  br i1 %cmp79, label %if.then81, label %if.end119, !dbg !5088

if.then81:                                        ; preds = %if.end78
  call void @llvm.dbg.declare(metadata i64* %frame_offset_old, metadata !5089, metadata !DIExpression()), !dbg !5091
  %93 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !5092
  store i64 %93, i64* %frame_offset_old, align 8, !dbg !5091
  %call82 = call i8* @ggc_alloc_stat(i64 72), !dbg !5093
  %94 = bitcast i8* %call82 to %struct.temp_slot*, !dbg !5093
  store %struct.temp_slot* %94, %struct.temp_slot** %p, align 8, !dbg !5094
  %95 = load i32, i32* %mode.addr, align 4, !dbg !5095
  %cmp83 = icmp ne i32 %95, 1, !dbg !5095
  br i1 %cmp83, label %cond.false93, label %lor.lhs.false85, !dbg !5095

lor.lhs.false85:                                  ; preds = %if.then81
  %96 = load i32, i32* %align, align 4, !dbg !5095
  %97 = load i32, i32* @ix86_isa_flags, align 4, !dbg !5095
  %and86 = and i32 %97, 32, !dbg !5095
  %cmp87 = icmp ne i32 %and86, 0, !dbg !5095
  %98 = zext i1 %cmp87 to i64, !dbg !5095
  %cond89 = select i1 %cmp87, i32 256, i32 128, !dbg !5095
  %cmp90 = icmp eq i32 %96, %cond89, !dbg !5095
  br i1 %cmp90, label %cond.false93, label %cond.true92, !dbg !5095

cond.true92:                                      ; preds = %lor.lhs.false85
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 788, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !5095
  br label %cond.end94, !dbg !5095

cond.false93:                                     ; preds = %lor.lhs.false85, %if.then81
  br label %cond.end94, !dbg !5095

cond.end94:                                       ; preds = %cond.false93, %cond.true92
  %cond95 = phi i32 [ 0, %cond.true92 ], [ 0, %cond.false93 ], !dbg !5095
  %99 = load i32, i32* %mode.addr, align 4, !dbg !5096
  %100 = load i32, i32* %mode.addr, align 4, !dbg !5097
  %cmp96 = icmp eq i32 %100, 1, !dbg !5098
  br i1 %cmp96, label %cond.true98, label %cond.false108, !dbg !5097

cond.true98:                                      ; preds = %cond.end94
  %101 = load i64, i64* %size.addr, align 8, !dbg !5099
  %102 = load i32, i32* %align, align 4, !dbg !5099
  %div99 = sdiv i32 %102, 8, !dbg !5099
  %conv100 = sext i32 %div99 to i64, !dbg !5099
  %add101 = add nsw i64 %101, %conv100, !dbg !5099
  %sub102 = sub nsw i64 %add101, 1, !dbg !5099
  %103 = load i32, i32* %align, align 4, !dbg !5099
  %div103 = sdiv i32 %103, 8, !dbg !5099
  %sub104 = sub nsw i32 %div103, 1, !dbg !5099
  %neg105 = xor i32 %sub104, -1, !dbg !5099
  %conv106 = sext i32 %neg105 to i64, !dbg !5099
  %and107 = and i64 %sub102, %conv106, !dbg !5099
  br label %cond.end109, !dbg !5097

cond.false108:                                    ; preds = %cond.end94
  %104 = load i64, i64* %size.addr, align 8, !dbg !5100
  br label %cond.end109, !dbg !5097

cond.end109:                                      ; preds = %cond.false108, %cond.true98
  %cond110 = phi i64 [ %and107, %cond.true98 ], [ %104, %cond.false108 ], !dbg !5097
  %105 = load i32, i32* %align, align 4, !dbg !5101
  %call111 = call %struct.rtx_def* @assign_stack_local(i32 %99, i64 %cond110, i32 %105), !dbg !5102
  %106 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5103
  %slot112 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %106, i32 0, i32 2, !dbg !5104
  store %struct.rtx_def* %call111, %struct.rtx_def** %slot112, align 8, !dbg !5105
  %107 = load i32, i32* %align, align 4, !dbg !5106
  %108 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5107
  %align113 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %108, i32 0, i32 5, !dbg !5108
  store i32 %107, i32* %align113, align 8, !dbg !5109
  %109 = load i64, i64* %frame_offset_old, align 8, !dbg !5110
  %110 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !5112
  %sub114 = sub nsw i64 %109, %110, !dbg !5113
  %111 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5114
  %size115 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %111, i32 0, i32 3, !dbg !5115
  store i64 %sub114, i64* %size115, align 8, !dbg !5116
  %112 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !5117
  %113 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5120
  %base_offset116 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %113, i32 0, i32 10, !dbg !5121
  store i64 %112, i64* %base_offset116, align 8, !dbg !5122
  %114 = load i64, i64* %frame_offset_old, align 8, !dbg !5123
  %115 = load i64, i64* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 17), align 8, !dbg !5124
  %sub117 = sub nsw i64 %114, %115, !dbg !5125
  %116 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5126
  %full_size118 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %116, i32 0, i32 11, !dbg !5127
  store i64 %sub117, i64* %full_size118, align 8, !dbg !5128
  %117 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5129
  store %struct.temp_slot* %117, %struct.temp_slot** %selected, align 8, !dbg !5130
  br label %if.end119, !dbg !5131

if.end119:                                        ; preds = %cond.end109, %if.end78
  %118 = load %struct.temp_slot*, %struct.temp_slot** %selected, align 8, !dbg !5132
  store %struct.temp_slot* %118, %struct.temp_slot** %p, align 8, !dbg !5133
  %119 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5134
  %in_use120 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %119, i32 0, i32 6, !dbg !5135
  store i8 1, i8* %in_use120, align 4, !dbg !5136
  %120 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5137
  %addr_taken121 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %120, i32 0, i32 7, !dbg !5138
  store i8 0, i8* %addr_taken121, align 1, !dbg !5139
  %121 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5140
  %122 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5141
  %type122 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %122, i32 0, i32 4, !dbg !5142
  store %union.tree_node* %121, %union.tree_node** %type122, align 8, !dbg !5143
  %123 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5144
  %124 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5145
  %level = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %124, i32 0, i32 8, !dbg !5146
  store i32 %123, i32* %level, align 8, !dbg !5147
  %125 = load i32, i32* %keep.addr, align 4, !dbg !5148
  %126 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5149
  %keep123 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %126, i32 0, i32 9, !dbg !5150
  store i32 %125, i32* %keep123, align 4, !dbg !5151
  %127 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5152
  %level124 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %127, i32 0, i32 8, !dbg !5153
  %128 = load i32, i32* %level124, align 8, !dbg !5153
  %call125 = call %struct.temp_slot** @temp_slots_at_level(i32 %128), !dbg !5154
  store %struct.temp_slot** %call125, %struct.temp_slot*** %pp, align 8, !dbg !5155
  %129 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5156
  %130 = load %struct.temp_slot**, %struct.temp_slot*** %pp, align 8, !dbg !5157
  call void @insert_slot_to_list(%struct.temp_slot* %129, %struct.temp_slot** %130), !dbg !5158
  %131 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5159
  %slot126 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %131, i32 0, i32 2, !dbg !5159
  %132 = load %struct.rtx_def*, %struct.rtx_def** %slot126, align 8, !dbg !5159
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %132, i32 0, i32 1, !dbg !5159
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5159
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5159
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5159
  %133 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5159
  %134 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5160
  call void @insert_temp_slot_address(%struct.rtx_def* %133, %struct.temp_slot* %134), !dbg !5161
  %135 = load i32, i32* %mode.addr, align 4, !dbg !5162
  %136 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5163
  %slot127 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %136, i32 0, i32 2, !dbg !5163
  %137 = load %struct.rtx_def*, %struct.rtx_def** %slot127, align 8, !dbg !5163
  %u128 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %137, i32 0, i32 1, !dbg !5163
  %fld129 = bitcast %union.u* %u128 to [1 x %union.rtunion_def]*, !dbg !5163
  %arrayidx130 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld129, i64 0, i64 0, !dbg !5163
  %rt_rtx131 = bitcast %union.rtunion_def* %arrayidx130 to %struct.rtx_def**, !dbg !5163
  %138 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx131, align 8, !dbg !5163
  %call132 = call %struct.rtx_def* @gen_rtx_MEM(i32 %135, %struct.rtx_def* %138), !dbg !5164
  store %struct.rtx_def* %call132, %struct.rtx_def** %slot, align 8, !dbg !5165
  %139 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !5166
  %140 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 13), align 8, !dbg !5166
  %call133 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 3, i32 0, %struct.rtx_def* %139, %struct.rtx_def* %140), !dbg !5166
  store %struct.rtx_def* %call133, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 13), align 8, !dbg !5167
  %141 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !5168
  %142 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5169
  %tobool134 = icmp ne %union.tree_node* %142, null, !dbg !5169
  br i1 %tobool134, label %cond.true135, label %cond.false137, !dbg !5169

cond.true135:                                     ; preds = %if.end119
  %143 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5170
  %call136 = call i32 @get_alias_set(%union.tree_node* %143), !dbg !5171
  br label %cond.end138, !dbg !5169

cond.false137:                                    ; preds = %if.end119
  br label %cond.end138, !dbg !5169

cond.end138:                                      ; preds = %cond.false137, %cond.true135
  %cond139 = phi i32 [ %call136, %cond.true135 ], [ 0, %cond.false137 ], !dbg !5169
  call void @set_mem_alias_set(%struct.rtx_def* %141, i32 %cond139), !dbg !5172
  %144 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !5173
  %145 = load i32, i32* %align, align 4, !dbg !5174
  call void @set_mem_align(%struct.rtx_def* %144, i32 %145), !dbg !5175
  %146 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5176
  %cmp140 = icmp ne %union.tree_node* %146, null, !dbg !5178
  br i1 %cmp140, label %if.then142, label %if.end194, !dbg !5179

if.then142:                                       ; preds = %cond.end138
  %147 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5180
  %base = bitcast %union.tree_node* %147 to %struct.tree_base*, !dbg !5180
  %148 = bitcast %struct.tree_base* %base to i64*, !dbg !5180
  %bf.load143 = load i64, i64* %148, align 8, !dbg !5180
  %bf.lshr144 = lshr i64 %bf.load143, 19, !dbg !5180
  %bf.clear145 = and i64 %bf.lshr144, 1, !dbg !5180
  %bf.cast = trunc i64 %bf.clear145 to i32, !dbg !5180
  %149 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !5182
  %150 = bitcast %struct.rtx_def* %149 to i32*, !dbg !5182
  %bf.load146 = load i32, i32* %150, align 8, !dbg !5183
  %bf.value = and i32 %bf.cast, 1, !dbg !5183
  %bf.shl = shl i32 %bf.value, 27, !dbg !5183
  %bf.clear147 = and i32 %bf.load146, -134217729, !dbg !5183
  %bf.set = or i32 %bf.clear147, %bf.shl, !dbg !5183
  store i32 %bf.set, i32* %150, align 8, !dbg !5183
  br label %do.body, !dbg !5184

do.body:                                          ; preds = %if.then142
  %151 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5185
  %base148 = bitcast %union.tree_node* %151 to %struct.tree_base*, !dbg !5185
  %152 = bitcast %struct.tree_base* %base148 to i64*, !dbg !5185
  %bf.load149 = load i64, i64* %152, align 8, !dbg !5185
  %bf.clear150 = and i64 %bf.load149, 65535, !dbg !5185
  %bf.cast151 = trunc i64 %bf.clear150 to i32, !dbg !5185
  %cmp152 = icmp eq i32 %bf.cast151, 15, !dbg !5185
  br i1 %cmp152, label %if.then182, label %lor.lhs.false154, !dbg !5185

lor.lhs.false154:                                 ; preds = %do.body
  %153 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5185
  %base155 = bitcast %union.tree_node* %153 to %struct.tree_base*, !dbg !5185
  %154 = bitcast %struct.tree_base* %base155 to i64*, !dbg !5185
  %bf.load156 = load i64, i64* %154, align 8, !dbg !5185
  %bf.clear157 = and i64 %bf.load156, 65535, !dbg !5185
  %bf.cast158 = trunc i64 %bf.clear157 to i32, !dbg !5185
  %cmp159 = icmp eq i32 %bf.cast158, 16, !dbg !5185
  br i1 %cmp159, label %if.then182, label %lor.lhs.false161, !dbg !5185

lor.lhs.false161:                                 ; preds = %lor.lhs.false154
  %155 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5185
  %base162 = bitcast %union.tree_node* %155 to %struct.tree_base*, !dbg !5185
  %156 = bitcast %struct.tree_base* %base162 to i64*, !dbg !5185
  %bf.load163 = load i64, i64* %156, align 8, !dbg !5185
  %bf.clear164 = and i64 %bf.load163, 65535, !dbg !5185
  %bf.cast165 = trunc i64 %bf.clear164 to i32, !dbg !5185
  %cmp166 = icmp eq i32 %bf.cast165, 17, !dbg !5185
  br i1 %cmp166, label %if.then182, label %lor.lhs.false168, !dbg !5185

lor.lhs.false168:                                 ; preds = %lor.lhs.false161
  %157 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5185
  %base169 = bitcast %union.tree_node* %157 to %struct.tree_base*, !dbg !5185
  %158 = bitcast %struct.tree_base* %base169 to i64*, !dbg !5185
  %bf.load170 = load i64, i64* %158, align 8, !dbg !5185
  %bf.clear171 = and i64 %bf.load170, 65535, !dbg !5185
  %bf.cast172 = trunc i64 %bf.clear171 to i32, !dbg !5185
  %cmp173 = icmp eq i32 %bf.cast172, 18, !dbg !5185
  br i1 %cmp173, label %if.then182, label %lor.lhs.false175, !dbg !5185

lor.lhs.false175:                                 ; preds = %lor.lhs.false168
  %159 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !5185
  %base176 = bitcast %union.tree_node* %159 to %struct.tree_base*, !dbg !5185
  %160 = bitcast %struct.tree_base* %base176 to i64*, !dbg !5185
  %bf.load177 = load i64, i64* %160, align 8, !dbg !5185
  %bf.clear178 = and i64 %bf.load177, 65535, !dbg !5185
  %bf.cast179 = trunc i64 %bf.clear178 to i32, !dbg !5185
  %cmp180 = icmp eq i32 %bf.cast179, 13, !dbg !5185
  br i1 %cmp180, label %if.then182, label %if.else, !dbg !5188

if.then182:                                       ; preds = %lor.lhs.false175, %lor.lhs.false168, %lor.lhs.false161, %lor.lhs.false154, %do.body
  %161 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !5189
  %162 = bitcast %struct.rtx_def* %161 to i32*, !dbg !5189
  %bf.load183 = load i32, i32* %162, align 8, !dbg !5189
  %bf.clear184 = and i32 %bf.load183, -268435457, !dbg !5189
  %bf.set185 = or i32 %bf.clear184, 268435456, !dbg !5189
  store i32 %bf.set185, i32* %162, align 8, !dbg !5189
  %163 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !5189
  %164 = bitcast %struct.rtx_def* %163 to i32*, !dbg !5189
  %bf.load186 = load i32, i32* %164, align 8, !dbg !5189
  %bf.clear187 = and i32 %bf.load186, 2147483647, !dbg !5189
  store i32 %bf.clear187, i32* %164, align 8, !dbg !5189
  br label %if.end193, !dbg !5189

if.else:                                          ; preds = %lor.lhs.false175
  %165 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !5191
  %166 = bitcast %struct.rtx_def* %165 to i32*, !dbg !5191
  %bf.load188 = load i32, i32* %166, align 8, !dbg !5191
  %bf.clear189 = and i32 %bf.load188, -268435457, !dbg !5191
  store i32 %bf.clear189, i32* %166, align 8, !dbg !5191
  %167 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !5191
  %168 = bitcast %struct.rtx_def* %167 to i32*, !dbg !5191
  %bf.load190 = load i32, i32* %168, align 8, !dbg !5191
  %bf.clear191 = and i32 %bf.load190, 2147483647, !dbg !5191
  %bf.set192 = or i32 %bf.clear191, -2147483648, !dbg !5191
  store i32 %bf.set192, i32* %168, align 8, !dbg !5191
  br label %if.end193

if.end193:                                        ; preds = %if.else, %if.then182
  br label %do.end, !dbg !5188

do.end:                                           ; preds = %if.end193
  br label %if.end194, !dbg !5193

if.end194:                                        ; preds = %do.end, %cond.end138
  %169 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !5194
  %170 = bitcast %struct.rtx_def* %169 to i32*, !dbg !5194
  %bf.load195 = load i32, i32* %170, align 8, !dbg !5195
  %bf.clear196 = and i32 %bf.load195, -33554433, !dbg !5195
  %bf.set197 = or i32 %bf.clear196, 33554432, !dbg !5195
  store i32 %bf.set197, i32* %170, align 8, !dbg !5195
  %171 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !5196
  ret %struct.rtx_def* %171, !dbg !5197
}

declare dso_local i32 @objects_must_conflict_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @cut_slot_from_list(%struct.temp_slot* %temp, %struct.temp_slot** %list) #0 !dbg !5198 {
entry:
  %temp.addr = alloca %struct.temp_slot*, align 8
  %list.addr = alloca %struct.temp_slot**, align 8
  store %struct.temp_slot* %temp, %struct.temp_slot** %temp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %temp.addr, metadata !5201, metadata !DIExpression()), !dbg !5202
  store %struct.temp_slot** %list, %struct.temp_slot*** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.temp_slot*** %list.addr, metadata !5203, metadata !DIExpression()), !dbg !5204
  %0 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5205
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %0, i32 0, i32 0, !dbg !5207
  %1 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !5207
  %tobool = icmp ne %struct.temp_slot* %1, null, !dbg !5205
  br i1 %tobool, label %if.then, label %if.end, !dbg !5208

if.then:                                          ; preds = %entry
  %2 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5209
  %prev = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %2, i32 0, i32 1, !dbg !5210
  %3 = load %struct.temp_slot*, %struct.temp_slot** %prev, align 8, !dbg !5210
  %4 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5211
  %next1 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %4, i32 0, i32 0, !dbg !5212
  %5 = load %struct.temp_slot*, %struct.temp_slot** %next1, align 8, !dbg !5212
  %prev2 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %5, i32 0, i32 1, !dbg !5213
  store %struct.temp_slot* %3, %struct.temp_slot** %prev2, align 8, !dbg !5214
  br label %if.end, !dbg !5211

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5215
  %prev3 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %6, i32 0, i32 1, !dbg !5217
  %7 = load %struct.temp_slot*, %struct.temp_slot** %prev3, align 8, !dbg !5217
  %tobool4 = icmp ne %struct.temp_slot* %7, null, !dbg !5215
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !5218

if.then5:                                         ; preds = %if.end
  %8 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5219
  %next6 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %8, i32 0, i32 0, !dbg !5220
  %9 = load %struct.temp_slot*, %struct.temp_slot** %next6, align 8, !dbg !5220
  %10 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5221
  %prev7 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %10, i32 0, i32 1, !dbg !5222
  %11 = load %struct.temp_slot*, %struct.temp_slot** %prev7, align 8, !dbg !5222
  %next8 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %11, i32 0, i32 0, !dbg !5223
  store %struct.temp_slot* %9, %struct.temp_slot** %next8, align 8, !dbg !5224
  br label %if.end10, !dbg !5221

if.else:                                          ; preds = %if.end
  %12 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5225
  %next9 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %12, i32 0, i32 0, !dbg !5226
  %13 = load %struct.temp_slot*, %struct.temp_slot** %next9, align 8, !dbg !5226
  %14 = load %struct.temp_slot**, %struct.temp_slot*** %list.addr, align 8, !dbg !5227
  store %struct.temp_slot* %13, %struct.temp_slot** %14, align 8, !dbg !5228
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then5
  %15 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5229
  %next11 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %15, i32 0, i32 0, !dbg !5230
  store %struct.temp_slot* null, %struct.temp_slot** %next11, align 8, !dbg !5231
  %16 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5232
  %prev12 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %16, i32 0, i32 1, !dbg !5233
  store %struct.temp_slot* null, %struct.temp_slot** %prev12, align 8, !dbg !5234
  ret void, !dbg !5235
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

declare dso_local %struct.rtx_def* @adjust_address_1(%struct.rtx_def*, i32, i64, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @insert_slot_to_list(%struct.temp_slot* %temp, %struct.temp_slot** %list) #0 !dbg !5236 {
entry:
  %temp.addr = alloca %struct.temp_slot*, align 8
  %list.addr = alloca %struct.temp_slot**, align 8
  store %struct.temp_slot* %temp, %struct.temp_slot** %temp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %temp.addr, metadata !5237, metadata !DIExpression()), !dbg !5238
  store %struct.temp_slot** %list, %struct.temp_slot*** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.temp_slot*** %list.addr, metadata !5239, metadata !DIExpression()), !dbg !5240
  %0 = load %struct.temp_slot**, %struct.temp_slot*** %list.addr, align 8, !dbg !5241
  %1 = load %struct.temp_slot*, %struct.temp_slot** %0, align 8, !dbg !5242
  %2 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5243
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %2, i32 0, i32 0, !dbg !5244
  store %struct.temp_slot* %1, %struct.temp_slot** %next, align 8, !dbg !5245
  %3 = load %struct.temp_slot**, %struct.temp_slot*** %list.addr, align 8, !dbg !5246
  %4 = load %struct.temp_slot*, %struct.temp_slot** %3, align 8, !dbg !5248
  %tobool = icmp ne %struct.temp_slot* %4, null, !dbg !5248
  br i1 %tobool, label %if.then, label %if.end, !dbg !5249

if.then:                                          ; preds = %entry
  %5 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5250
  %6 = load %struct.temp_slot**, %struct.temp_slot*** %list.addr, align 8, !dbg !5251
  %7 = load %struct.temp_slot*, %struct.temp_slot** %6, align 8, !dbg !5252
  %prev = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %7, i32 0, i32 1, !dbg !5253
  store %struct.temp_slot* %5, %struct.temp_slot** %prev, align 8, !dbg !5254
  br label %if.end, !dbg !5255

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5256
  %prev1 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %8, i32 0, i32 1, !dbg !5257
  store %struct.temp_slot* null, %struct.temp_slot** %prev1, align 8, !dbg !5258
  %9 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5259
  %10 = load %struct.temp_slot**, %struct.temp_slot*** %list.addr, align 8, !dbg !5260
  store %struct.temp_slot* %9, %struct.temp_slot** %10, align 8, !dbg !5261
  ret void, !dbg !5262
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.temp_slot** @temp_slots_at_level(i32 %level) #0 !dbg !5263 {
entry:
  %level.addr = alloca i32, align 4
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !5266, metadata !DIExpression()), !dbg !5267
  %0 = load i32, i32* %level.addr, align 4, !dbg !5268
  %1 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 19), align 8, !dbg !5270
  %tobool = icmp ne %struct.VEC_temp_slot_p_gc* %1, null, !dbg !5270
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5270

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 19), align 8, !dbg !5270
  %base = getelementptr inbounds %struct.VEC_temp_slot_p_gc, %struct.VEC_temp_slot_p_gc* %2, i32 0, i32 0, !dbg !5270
  br label %cond.end, !dbg !5270

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5270

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_temp_slot_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5270
  %call = call i32 @VEC_temp_slot_p_base_length(%struct.VEC_temp_slot_p_base* %cond), !dbg !5270
  %cmp = icmp sge i32 %0, %call, !dbg !5271
  br i1 %cmp, label %if.then, label %if.end, !dbg !5272

if.then:                                          ; preds = %cond.end
  %3 = load i32, i32* %level.addr, align 4, !dbg !5273
  %add = add nsw i32 %3, 1, !dbg !5273
  call void @VEC_temp_slot_p_gc_safe_grow_cleared(%struct.VEC_temp_slot_p_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 19), i32 %add), !dbg !5273
  br label %if.end, !dbg !5273

if.end:                                           ; preds = %if.then, %cond.end
  %4 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 19), align 8, !dbg !5274
  %tobool1 = icmp ne %struct.VEC_temp_slot_p_gc* %4, null, !dbg !5274
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5274

cond.true2:                                       ; preds = %if.end
  %5 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 19), align 8, !dbg !5274
  %base3 = getelementptr inbounds %struct.VEC_temp_slot_p_gc, %struct.VEC_temp_slot_p_gc* %5, i32 0, i32 0, !dbg !5274
  br label %cond.end5, !dbg !5274

cond.false4:                                      ; preds = %if.end
  br label %cond.end5, !dbg !5274

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_temp_slot_p_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !5274
  %call7 = call %struct.temp_slot** @VEC_temp_slot_p_base_address(%struct.VEC_temp_slot_p_base* %cond6), !dbg !5274
  %6 = load i32, i32* %level.addr, align 4, !dbg !5275
  %idxprom = sext i32 %6 to i64, !dbg !5274
  %arrayidx = getelementptr inbounds %struct.temp_slot*, %struct.temp_slot** %call7, i64 %idxprom, !dbg !5274
  ret %struct.temp_slot** %arrayidx, !dbg !5276
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_temp_slot_address(%struct.rtx_def* %address, %struct.temp_slot* %temp_slot) #0 !dbg !5277 {
entry:
  %address.addr = alloca %struct.rtx_def*, align 8
  %temp_slot.addr = alloca %struct.temp_slot*, align 8
  %slot = alloca i8**, align 8
  %t = alloca %struct.temp_slot_address_entry*, align 8
  store %struct.rtx_def* %address, %struct.rtx_def** %address.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %address.addr, metadata !5280, metadata !DIExpression()), !dbg !5281
  store %struct.temp_slot* %temp_slot, %struct.temp_slot** %temp_slot.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %temp_slot.addr, metadata !5282, metadata !DIExpression()), !dbg !5283
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5284, metadata !DIExpression()), !dbg !5285
  call void @llvm.dbg.declare(metadata %struct.temp_slot_address_entry** %t, metadata !5286, metadata !DIExpression()), !dbg !5287
  %call = call i8* @ggc_alloc_stat(i64 24), !dbg !5288
  %0 = bitcast i8* %call to %struct.temp_slot_address_entry*, !dbg !5288
  store %struct.temp_slot_address_entry* %0, %struct.temp_slot_address_entry** %t, align 8, !dbg !5287
  %1 = load %struct.rtx_def*, %struct.rtx_def** %address.addr, align 8, !dbg !5289
  %2 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t, align 8, !dbg !5290
  %address1 = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %2, i32 0, i32 1, !dbg !5291
  store %struct.rtx_def* %1, %struct.rtx_def** %address1, align 8, !dbg !5292
  %3 = load %struct.temp_slot*, %struct.temp_slot** %temp_slot.addr, align 8, !dbg !5293
  %4 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t, align 8, !dbg !5294
  %temp_slot2 = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %4, i32 0, i32 2, !dbg !5295
  store %struct.temp_slot* %3, %struct.temp_slot** %temp_slot2, align 8, !dbg !5296
  %5 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t, align 8, !dbg !5297
  %call3 = call i32 @temp_slot_address_compute_hash(%struct.temp_slot_address_entry* %5), !dbg !5298
  %6 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t, align 8, !dbg !5299
  %hash = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %6, i32 0, i32 0, !dbg !5300
  store i32 %call3, i32* %hash, align 8, !dbg !5301
  %7 = load %struct.htab*, %struct.htab** @temp_slot_address_table, align 8, !dbg !5302
  %8 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t, align 8, !dbg !5303
  %9 = bitcast %struct.temp_slot_address_entry* %8 to i8*, !dbg !5303
  %10 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t, align 8, !dbg !5304
  %hash4 = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %10, i32 0, i32 0, !dbg !5305
  %11 = load i32, i32* %hash4, align 8, !dbg !5305
  %call5 = call i8** @htab_find_slot_with_hash(%struct.htab* %7, i8* %9, i32 %11, i32 1), !dbg !5306
  store i8** %call5, i8*** %slot, align 8, !dbg !5307
  %12 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t, align 8, !dbg !5308
  %13 = bitcast %struct.temp_slot_address_entry* %12 to i8*, !dbg !5308
  %14 = load i8**, i8*** %slot, align 8, !dbg !5309
  store i8* %13, i8** %14, align 8, !dbg !5310
  ret void, !dbg !5311
}

declare dso_local void @set_mem_alias_set(%struct.rtx_def*, i32) #2

declare dso_local i32 @get_alias_set(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @assign_stack_temp(i32 %mode, i64 %size, i32 %keep) #0 !dbg !5312 {
entry:
  %mode.addr = alloca i32, align 4
  %size.addr = alloca i64, align 8
  %keep.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5313, metadata !DIExpression()), !dbg !5314
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !5315, metadata !DIExpression()), !dbg !5316
  store i32 %keep, i32* %keep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %keep.addr, metadata !5317, metadata !DIExpression()), !dbg !5318
  %0 = load i32, i32* %mode.addr, align 4, !dbg !5319
  %1 = load i64, i64* %size.addr, align 8, !dbg !5320
  %2 = load i32, i32* %keep.addr, align 4, !dbg !5321
  %call = call %struct.rtx_def* @assign_stack_temp_for_type(i32 %0, i64 %1, i32 %2, %union.tree_node* null), !dbg !5322
  ret %struct.rtx_def* %call, !dbg !5323
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @assign_temp(%union.tree_node* %type_or_decl, i32 %keep, i32 %memory_required, i32 %dont_promote) #0 !dbg !5324 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %type_or_decl.addr = alloca %union.tree_node*, align 8
  %keep.addr = alloca i32, align 4
  %memory_required.addr = alloca i32, align 4
  %dont_promote.addr = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %size = alloca i64, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %type_or_decl, %union.tree_node** %type_or_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_or_decl.addr, metadata !5327, metadata !DIExpression()), !dbg !5328
  store i32 %keep, i32* %keep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %keep.addr, metadata !5329, metadata !DIExpression()), !dbg !5330
  store i32 %memory_required, i32* %memory_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %memory_required.addr, metadata !5331, metadata !DIExpression()), !dbg !5332
  store i32 %dont_promote, i32* %dont_promote.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dont_promote.addr, metadata !5333, metadata !DIExpression()), !dbg !5334
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5335, metadata !DIExpression()), !dbg !5336
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !5337, metadata !DIExpression()), !dbg !5338
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !5339, metadata !DIExpression()), !dbg !5340
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !5341, metadata !DIExpression()), !dbg !5342
  %0 = load %union.tree_node*, %union.tree_node** %type_or_decl.addr, align 8, !dbg !5343
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5343
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5343
  %bf.load = load i64, i64* %1, align 8, !dbg !5343
  %bf.clear = and i64 %bf.load, 65535, !dbg !5343
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5343
  %idxprom = sext i32 %bf.cast to i64, !dbg !5343
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5343
  %2 = load i32, i32* %arrayidx, align 4, !dbg !5343
  %cmp = icmp eq i32 %2, 3, !dbg !5343
  br i1 %cmp, label %if.then, label %if.else, !dbg !5345

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %type_or_decl.addr, align 8, !dbg !5346
  store %union.tree_node* %3, %union.tree_node** %decl, align 8, !dbg !5347
  %4 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5348
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !5348
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5348
  %5 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5348
  store %union.tree_node* %5, %union.tree_node** %type, align 8, !dbg !5349
  br label %if.end, !dbg !5350

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %decl, align 8, !dbg !5351
  %6 = load %union.tree_node*, %union.tree_node** %type_or_decl.addr, align 8, !dbg !5352
  store %union.tree_node* %6, %union.tree_node** %type, align 8, !dbg !5353
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5354
  %base2 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !5354
  %8 = bitcast %struct.tree_base* %base2 to i64*, !dbg !5354
  %bf.load3 = load i64, i64* %8, align 8, !dbg !5354
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !5354
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !5354
  %cmp6 = icmp eq i32 %bf.cast5, 14, !dbg !5354
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !5354

cond.true:                                        ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5354
  %call = call i32 @vector_type_mode(%union.tree_node* %9), !dbg !5354
  br label %cond.end, !dbg !5354

cond.false:                                       ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5354
  %type7 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !5354
  %mode8 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type7, i32 0, i32 6, !dbg !5354
  %bf.load9 = load i32, i32* %mode8, align 4, !dbg !5354
  %bf.lshr = lshr i32 %bf.load9, 16, !dbg !5354
  %bf.clear10 = and i32 %bf.lshr, 255, !dbg !5354
  br label %cond.end, !dbg !5354

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear10, %cond.false ], !dbg !5354
  store i32 %cond, i32* %mode, align 4, !dbg !5355
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5356
  %base11 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !5356
  %12 = bitcast %struct.tree_base* %base11 to i64*, !dbg !5356
  %bf.load12 = load i64, i64* %12, align 8, !dbg !5356
  %bf.lshr13 = lshr i64 %bf.load12, 21, !dbg !5356
  %bf.clear14 = and i64 %bf.lshr13, 1, !dbg !5356
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !5356
  store i32 %bf.cast15, i32* %unsignedp, align 4, !dbg !5357
  %13 = load i32, i32* %mode, align 4, !dbg !5358
  %cmp16 = icmp eq i32 %13, 1, !dbg !5360
  br i1 %cmp16, label %if.then17, label %lor.lhs.false, !dbg !5361

lor.lhs.false:                                    ; preds = %cond.end
  %14 = load i32, i32* %memory_required.addr, align 4, !dbg !5362
  %tobool = icmp ne i32 %14, 0, !dbg !5362
  br i1 %tobool, label %if.then17, label %if.end39, !dbg !5363

if.then17:                                        ; preds = %lor.lhs.false, %cond.end
  call void @llvm.dbg.declare(metadata i64* %size, metadata !5364, metadata !DIExpression()), !dbg !5366
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5367
  %call18 = call i64 @int_size_in_bytes(%union.tree_node* %15), !dbg !5368
  store i64 %call18, i64* %size, align 8, !dbg !5366
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !5369, metadata !DIExpression()), !dbg !5370
  %16 = load i64, i64* %size, align 8, !dbg !5371
  %cmp19 = icmp eq i64 %16, 0, !dbg !5373
  br i1 %cmp19, label %if.then20, label %if.else21, !dbg !5374

if.then20:                                        ; preds = %if.then17
  store i64 1, i64* %size, align 8, !dbg !5375
  br label %if.end26, !dbg !5376

if.else21:                                        ; preds = %if.then17
  %17 = load i64, i64* %size, align 8, !dbg !5377
  %cmp22 = icmp eq i64 %17, -1, !dbg !5379
  br i1 %cmp22, label %if.then23, label %if.end25, !dbg !5380

if.then23:                                        ; preds = %if.else21
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5381
  %call24 = call i64 @max_int_size_in_bytes(%union.tree_node* %18), !dbg !5382
  store i64 %call24, i64* %size, align 8, !dbg !5383
  br label %if.end25, !dbg !5384

if.end25:                                         ; preds = %if.then23, %if.else21
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then20
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5385
  %tobool27 = icmp ne %union.tree_node* %19, null, !dbg !5385
  br i1 %tobool27, label %land.lhs.true, label %if.end37, !dbg !5387

land.lhs.true:                                    ; preds = %if.end26
  %20 = load i64, i64* %size, align 8, !dbg !5388
  %cmp28 = icmp eq i64 %20, -1, !dbg !5389
  br i1 %cmp28, label %land.lhs.true29, label %if.end37, !dbg !5390

land.lhs.true29:                                  ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5391
  %type30 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !5391
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type30, i32 0, i32 3, !dbg !5391
  %22 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !5391
  %base31 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !5391
  %23 = bitcast %struct.tree_base* %base31 to i64*, !dbg !5391
  %bf.load32 = load i64, i64* %23, align 8, !dbg !5391
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !5391
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !5391
  %cmp35 = icmp eq i32 %bf.cast34, 23, !dbg !5392
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !5393

if.then36:                                        ; preds = %land.lhs.true29
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5394
  call void (i8*, ...) @error(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0), %union.tree_node* %24), !dbg !5396
  store i64 1, i64* %size, align 8, !dbg !5397
  br label %if.end37, !dbg !5398

if.end37:                                         ; preds = %if.then36, %land.lhs.true29, %land.lhs.true, %if.end26
  %25 = load i32, i32* %mode, align 4, !dbg !5399
  %26 = load i64, i64* %size, align 8, !dbg !5400
  %27 = load i32, i32* %keep.addr, align 4, !dbg !5401
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5402
  %call38 = call %struct.rtx_def* @assign_stack_temp_for_type(i32 %25, i64 %26, i32 %27, %union.tree_node* %28), !dbg !5403
  store %struct.rtx_def* %call38, %struct.rtx_def** %tmp, align 8, !dbg !5404
  %29 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5405
  store %struct.rtx_def* %29, %struct.rtx_def** %retval, align 8, !dbg !5406
  br label %return, !dbg !5406

if.end39:                                         ; preds = %lor.lhs.false
  %30 = load i32, i32* %dont_promote.addr, align 4, !dbg !5407
  %tobool40 = icmp ne i32 %30, 0, !dbg !5407
  br i1 %tobool40, label %if.end43, label %if.then41, !dbg !5409

if.then41:                                        ; preds = %if.end39
  %31 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5410
  %32 = load i32, i32* %mode, align 4, !dbg !5411
  %call42 = call i32 @promote_mode(%union.tree_node* %31, i32 %32, i32* %unsignedp), !dbg !5412
  store i32 %call42, i32* %mode, align 4, !dbg !5413
  br label %if.end43, !dbg !5414

if.end43:                                         ; preds = %if.then41, %if.end39
  %33 = load i32, i32* %mode, align 4, !dbg !5415
  %call44 = call %struct.rtx_def* @gen_reg_rtx(i32 %33), !dbg !5416
  store %struct.rtx_def* %call44, %struct.rtx_def** %retval, align 8, !dbg !5417
  br label %return, !dbg !5417

return:                                           ; preds = %if.end43, %if.end37
  %34 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5418
  ret %struct.rtx_def* %34, !dbg !5418
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local i64 @int_size_in_bytes(%union.tree_node*) #2

declare dso_local i64 @max_int_size_in_bytes(%union.tree_node*) #2

declare dso_local void @error(i8*, ...) #2

declare dso_local i32 @promote_mode(%union.tree_node*, i32, i32*) #2

declare dso_local %struct.rtx_def* @gen_reg_rtx(i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @update_temp_slot_address(%struct.rtx_def* %old_rtx, %struct.rtx_def* %new_rtx) #0 !dbg !5419 {
entry:
  %old_rtx.addr = alloca %struct.rtx_def*, align 8
  %new_rtx.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.temp_slot*, align 8
  store %struct.rtx_def* %old_rtx, %struct.rtx_def** %old_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_rtx.addr, metadata !5422, metadata !DIExpression()), !dbg !5423
  store %struct.rtx_def* %new_rtx, %struct.rtx_def** %new_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx.addr, metadata !5424, metadata !DIExpression()), !dbg !5425
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %p, metadata !5426, metadata !DIExpression()), !dbg !5427
  %0 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5428
  %1 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5430
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %0, %struct.rtx_def* %1), !dbg !5431
  %tobool = icmp ne i32 %call, 0, !dbg !5431
  br i1 %tobool, label %if.then, label %if.end, !dbg !5432

if.then:                                          ; preds = %entry
  br label %return, !dbg !5433

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5434
  %call1 = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %2), !dbg !5435
  store %struct.temp_slot* %call1, %struct.temp_slot** %p, align 8, !dbg !5436
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5437
  %cmp = icmp eq %struct.temp_slot* %3, null, !dbg !5439
  br i1 %cmp, label %if.then2, label %if.end103, !dbg !5440

if.then2:                                         ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5441
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5441
  %bf.load = load i32, i32* %5, align 8, !dbg !5441
  %bf.clear = and i32 %bf.load, 65535, !dbg !5441
  %cmp3 = icmp ne i32 %bf.clear, 49, !dbg !5444
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !5445

if.then4:                                         ; preds = %if.then2
  br label %return, !dbg !5446

if.end5:                                          ; preds = %if.then2
  %6 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5447
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !5447
  %bf.load6 = load i32, i32* %7, align 8, !dbg !5447
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !5447
  %cmp8 = icmp eq i32 %bf.clear7, 37, !dbg !5447
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !5449

if.then9:                                         ; preds = %if.end5
  %8 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5450
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !5450
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5450
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5450
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5450
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5450
  %10 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5452
  call void @update_temp_slot_address(%struct.rtx_def* %9, %struct.rtx_def* %10), !dbg !5453
  %11 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5454
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !5454
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !5454
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 1, !dbg !5454
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !5454
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx13, align 8, !dbg !5454
  %13 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5455
  call void @update_temp_slot_address(%struct.rtx_def* %12, %struct.rtx_def* %13), !dbg !5456
  br label %return, !dbg !5457

if.else:                                          ; preds = %if.end5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5458
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !5458
  %bf.load14 = load i32, i32* %15, align 8, !dbg !5458
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !5458
  %cmp16 = icmp ne i32 %bf.clear15, 49, !dbg !5460
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !5461

if.then17:                                        ; preds = %if.else
  br label %return, !dbg !5462

if.end18:                                         ; preds = %if.else
  br label %if.end19

if.end19:                                         ; preds = %if.end18
  %16 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5463
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5463
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !5463
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 0, !dbg !5463
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !5463
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !5463
  %18 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5465
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !5465
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !5465
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !5465
  %rt_rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !5465
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx27, align 8, !dbg !5465
  %call28 = call i32 @rtx_equal_p(%struct.rtx_def* %17, %struct.rtx_def* %19), !dbg !5466
  %tobool29 = icmp ne i32 %call28, 0, !dbg !5466
  br i1 %tobool29, label %if.then30, label %if.else39, !dbg !5467

if.then30:                                        ; preds = %if.end19
  %20 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5468
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !5468
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !5468
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 1, !dbg !5468
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !5468
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !5468
  %22 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5469
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !5469
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !5469
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 1, !dbg !5469
  %rt_rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !5469
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx38, align 8, !dbg !5469
  call void @update_temp_slot_address(%struct.rtx_def* %21, %struct.rtx_def* %23), !dbg !5470
  br label %if.end102, !dbg !5470

if.else39:                                        ; preds = %if.end19
  %24 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5471
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !5471
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !5471
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 1, !dbg !5471
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !5471
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx43, align 8, !dbg !5471
  %26 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5473
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !5473
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !5473
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 0, !dbg !5473
  %rt_rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !5473
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx47, align 8, !dbg !5473
  %call48 = call i32 @rtx_equal_p(%struct.rtx_def* %25, %struct.rtx_def* %27), !dbg !5474
  %tobool49 = icmp ne i32 %call48, 0, !dbg !5474
  br i1 %tobool49, label %if.then50, label %if.else59, !dbg !5475

if.then50:                                        ; preds = %if.else39
  %28 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5476
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !5476
  %fld52 = bitcast %union.u* %u51 to [1 x %union.rtunion_def]*, !dbg !5476
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i64 0, i64 0, !dbg !5476
  %rt_rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**, !dbg !5476
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx54, align 8, !dbg !5476
  %30 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5477
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !5477
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !5477
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 1, !dbg !5477
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !5477
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !5477
  call void @update_temp_slot_address(%struct.rtx_def* %29, %struct.rtx_def* %31), !dbg !5478
  br label %if.end101, !dbg !5478

if.else59:                                        ; preds = %if.else39
  %32 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5479
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !5479
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !5479
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 0, !dbg !5479
  %rt_rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**, !dbg !5479
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx63, align 8, !dbg !5479
  %34 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5481
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !5481
  %fld65 = bitcast %union.u* %u64 to [1 x %union.rtunion_def]*, !dbg !5481
  %arrayidx66 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld65, i64 0, i64 1, !dbg !5481
  %rt_rtx67 = bitcast %union.rtunion_def* %arrayidx66 to %struct.rtx_def**, !dbg !5481
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx67, align 8, !dbg !5481
  %call68 = call i32 @rtx_equal_p(%struct.rtx_def* %33, %struct.rtx_def* %35), !dbg !5482
  %tobool69 = icmp ne i32 %call68, 0, !dbg !5482
  br i1 %tobool69, label %if.then70, label %if.else79, !dbg !5483

if.then70:                                        ; preds = %if.else59
  %36 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5484
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !5484
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !5484
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 1, !dbg !5484
  %rt_rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**, !dbg !5484
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx74, align 8, !dbg !5484
  %38 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5485
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !5485
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !5485
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 0, !dbg !5485
  %rt_rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**, !dbg !5485
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx78, align 8, !dbg !5485
  call void @update_temp_slot_address(%struct.rtx_def* %37, %struct.rtx_def* %39), !dbg !5486
  br label %if.end100, !dbg !5486

if.else79:                                        ; preds = %if.else59
  %40 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5487
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !5487
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !5487
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 1, !dbg !5487
  %rt_rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**, !dbg !5487
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx83, align 8, !dbg !5487
  %42 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5489
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !5489
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !5489
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 1, !dbg !5489
  %rt_rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**, !dbg !5489
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx87, align 8, !dbg !5489
  %call88 = call i32 @rtx_equal_p(%struct.rtx_def* %41, %struct.rtx_def* %43), !dbg !5490
  %tobool89 = icmp ne i32 %call88, 0, !dbg !5490
  br i1 %tobool89, label %if.then90, label %if.end99, !dbg !5491

if.then90:                                        ; preds = %if.else79
  %44 = load %struct.rtx_def*, %struct.rtx_def** %old_rtx.addr, align 8, !dbg !5492
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !5492
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !5492
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 0, !dbg !5492
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !5492
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx94, align 8, !dbg !5492
  %46 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5493
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !5493
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !5493
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 0, !dbg !5493
  %rt_rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**, !dbg !5493
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx98, align 8, !dbg !5493
  call void @update_temp_slot_address(%struct.rtx_def* %45, %struct.rtx_def* %47), !dbg !5494
  br label %if.end99, !dbg !5494

if.end99:                                         ; preds = %if.then90, %if.else79
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.then70
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.then50
  br label %if.end102

if.end102:                                        ; preds = %if.end101, %if.then30
  br label %return, !dbg !5495

if.end103:                                        ; preds = %if.end
  %48 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx.addr, align 8, !dbg !5496
  %49 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5497
  call void @insert_temp_slot_address(%struct.rtx_def* %48, %struct.temp_slot* %49), !dbg !5498
  br label %return, !dbg !5499

return:                                           ; preds = %if.end103, %if.end102, %if.then17, %if.then9, %if.then4, %if.then
  ret void, !dbg !5499
}

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %x) #0 !dbg !5500 {
entry:
  %retval = alloca %struct.temp_slot*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.temp_slot*, align 8
  %tmp = alloca %struct.temp_slot_address_entry, align 8
  %t = alloca %struct.temp_slot_address_entry*, align 8
  %i = alloca i32, align 4
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5503, metadata !DIExpression()), !dbg !5504
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %p, metadata !5505, metadata !DIExpression()), !dbg !5506
  call void @llvm.dbg.declare(metadata %struct.temp_slot_address_entry* %tmp, metadata !5507, metadata !DIExpression()), !dbg !5508
  call void @llvm.dbg.declare(metadata %struct.temp_slot_address_entry** %t, metadata !5509, metadata !DIExpression()), !dbg !5510
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5511
  %address = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %tmp, i32 0, i32 1, !dbg !5512
  store %struct.rtx_def* %0, %struct.rtx_def** %address, align 8, !dbg !5513
  %temp_slot = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %tmp, i32 0, i32 2, !dbg !5514
  store %struct.temp_slot* null, %struct.temp_slot** %temp_slot, align 8, !dbg !5515
  %call = call i32 @temp_slot_address_compute_hash(%struct.temp_slot_address_entry* %tmp), !dbg !5516
  %hash = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %tmp, i32 0, i32 0, !dbg !5517
  store i32 %call, i32* %hash, align 8, !dbg !5518
  %1 = load %struct.htab*, %struct.htab** @temp_slot_address_table, align 8, !dbg !5519
  %2 = bitcast %struct.temp_slot_address_entry* %tmp to i8*, !dbg !5520
  %hash1 = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %tmp, i32 0, i32 0, !dbg !5521
  %3 = load i32, i32* %hash1, align 8, !dbg !5521
  %call2 = call i8* @htab_find_with_hash(%struct.htab* %1, i8* %2, i32 %3), !dbg !5522
  %4 = bitcast i8* %call2 to %struct.temp_slot_address_entry*, !dbg !5523
  store %struct.temp_slot_address_entry* %4, %struct.temp_slot_address_entry** %t, align 8, !dbg !5524
  %5 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t, align 8, !dbg !5525
  %tobool = icmp ne %struct.temp_slot_address_entry* %5, null, !dbg !5525
  br i1 %tobool, label %if.then, label %if.end, !dbg !5527

if.then:                                          ; preds = %entry
  %6 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t, align 8, !dbg !5528
  %temp_slot3 = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %6, i32 0, i32 2, !dbg !5529
  %7 = load %struct.temp_slot*, %struct.temp_slot** %temp_slot3, align 8, !dbg !5529
  store %struct.temp_slot* %7, %struct.temp_slot** %retval, align 8, !dbg !5530
  br label %return, !dbg !5530

if.end:                                           ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5531
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !5531
  %bf.load = load i32, i32* %9, align 8, !dbg !5531
  %bf.clear = and i32 %bf.load, 65535, !dbg !5531
  %cmp = icmp eq i32 %bf.clear, 49, !dbg !5533
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !5534

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5535
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5535
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5535
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5535
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5535
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5535
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !5535
  %bf.load4 = load i32, i32* %12, align 8, !dbg !5535
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !5535
  %cmp6 = icmp eq i32 %bf.clear5, 37, !dbg !5535
  br i1 %cmp6, label %land.lhs.true7, label %if.else, !dbg !5536

land.lhs.true7:                                   ; preds = %land.lhs.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5537
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !5537
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !5537
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !5537
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !5537
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx11, align 8, !dbg !5537
  %call12 = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %14), !dbg !5538
  store %struct.temp_slot* %call12, %struct.temp_slot** %p, align 8, !dbg !5539
  %cmp13 = icmp ne %struct.temp_slot* %call12, null, !dbg !5540
  br i1 %cmp13, label %if.then14, label %if.else, !dbg !5541

if.then14:                                        ; preds = %land.lhs.true7
  %15 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5542
  store %struct.temp_slot* %15, %struct.temp_slot** %retval, align 8, !dbg !5543
  br label %return, !dbg !5543

if.else:                                          ; preds = %land.lhs.true7, %land.lhs.true, %if.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5544
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !5544
  %bf.load15 = load i32, i32* %17, align 8, !dbg !5544
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !5544
  %cmp17 = icmp eq i32 %bf.clear16, 49, !dbg !5546
  br i1 %cmp17, label %land.lhs.true18, label %if.end34, !dbg !5547

land.lhs.true18:                                  ; preds = %if.else
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5548
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !5548
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !5548
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 1, !dbg !5548
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !5548
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !5548
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !5548
  %bf.load23 = load i32, i32* %20, align 8, !dbg !5548
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !5548
  %cmp25 = icmp eq i32 %bf.clear24, 37, !dbg !5548
  br i1 %cmp25, label %land.lhs.true26, label %if.end34, !dbg !5549

land.lhs.true26:                                  ; preds = %land.lhs.true18
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5550
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !5550
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !5550
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 1, !dbg !5550
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !5550
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !5550
  %call31 = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %22), !dbg !5551
  store %struct.temp_slot* %call31, %struct.temp_slot** %p, align 8, !dbg !5552
  %cmp32 = icmp ne %struct.temp_slot* %call31, null, !dbg !5553
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !5554

if.then33:                                        ; preds = %land.lhs.true26
  %23 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5555
  store %struct.temp_slot* %23, %struct.temp_slot** %retval, align 8, !dbg !5556
  br label %return, !dbg !5556

if.end34:                                         ; preds = %land.lhs.true26, %land.lhs.true18, %if.else
  br label %if.end35

if.end35:                                         ; preds = %if.end34
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5557
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !5557
  %bf.load36 = load i32, i32* %25, align 8, !dbg !5557
  %bf.clear37 = and i32 %bf.load36, 65535, !dbg !5557
  %cmp38 = icmp eq i32 %bf.clear37, 49, !dbg !5559
  br i1 %cmp38, label %land.lhs.true39, label %if.end81, !dbg !5560

land.lhs.true39:                                  ; preds = %if.end35
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5561
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !5561
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !5561
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 0, !dbg !5561
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !5561
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx43, align 8, !dbg !5561
  %28 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !dbg !5562
  %cmp44 = icmp eq %struct.rtx_def* %27, %28, !dbg !5563
  br i1 %cmp44, label %land.lhs.true45, label %if.end81, !dbg !5564

land.lhs.true45:                                  ; preds = %land.lhs.true39
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5565
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !5565
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !5565
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 1, !dbg !5565
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !5565
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx49, align 8, !dbg !5565
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !5565
  %bf.load50 = load i32, i32* %31, align 8, !dbg !5565
  %bf.clear51 = and i32 %bf.load50, 65535, !dbg !5565
  %cmp52 = icmp eq i32 %bf.clear51, 30, !dbg !5565
  br i1 %cmp52, label %if.then53, label %if.end81, !dbg !5566

if.then53:                                        ; preds = %land.lhs.true45
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5567, metadata !DIExpression()), !dbg !5569
  %call54 = call i32 @max_slot_level(), !dbg !5570
  store i32 %call54, i32* %i, align 4, !dbg !5572
  br label %for.cond, !dbg !5573

for.cond:                                         ; preds = %for.inc79, %if.then53
  %32 = load i32, i32* %i, align 4, !dbg !5574
  %cmp55 = icmp sge i32 %32, 0, !dbg !5576
  br i1 %cmp55, label %for.body, label %for.end80, !dbg !5577

for.body:                                         ; preds = %for.cond
  %33 = load i32, i32* %i, align 4, !dbg !5578
  %call56 = call %struct.temp_slot** @temp_slots_at_level(i32 %33), !dbg !5580
  %34 = load %struct.temp_slot*, %struct.temp_slot** %call56, align 8, !dbg !5581
  store %struct.temp_slot* %34, %struct.temp_slot** %p, align 8, !dbg !5582
  br label %for.cond57, !dbg !5583

for.cond57:                                       ; preds = %for.inc, %for.body
  %35 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5584
  %tobool58 = icmp ne %struct.temp_slot* %35, null, !dbg !5586
  br i1 %tobool58, label %for.body59, label %for.end, !dbg !5586

for.body59:                                       ; preds = %for.cond57
  %36 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5587
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !5587
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !5587
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 1, !dbg !5587
  %rt_rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**, !dbg !5587
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx63, align 8, !dbg !5587
  %u64 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !5587
  %hwint = bitcast %union.u* %u64 to [1 x i64]*, !dbg !5587
  %arrayidx65 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !5587
  %38 = load i64, i64* %arrayidx65, align 8, !dbg !5587
  %39 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5590
  %base_offset = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %39, i32 0, i32 10, !dbg !5591
  %40 = load i64, i64* %base_offset, align 8, !dbg !5591
  %cmp66 = icmp sge i64 %38, %40, !dbg !5592
  br i1 %cmp66, label %land.lhs.true67, label %if.end78, !dbg !5593

land.lhs.true67:                                  ; preds = %for.body59
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5594
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !5594
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !5594
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 1, !dbg !5594
  %rt_rtx71 = bitcast %union.rtunion_def* %arrayidx70 to %struct.rtx_def**, !dbg !5594
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx71, align 8, !dbg !5594
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !5594
  %hwint73 = bitcast %union.u* %u72 to [1 x i64]*, !dbg !5594
  %arrayidx74 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint73, i64 0, i64 0, !dbg !5594
  %43 = load i64, i64* %arrayidx74, align 8, !dbg !5594
  %44 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5595
  %base_offset75 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %44, i32 0, i32 10, !dbg !5596
  %45 = load i64, i64* %base_offset75, align 8, !dbg !5596
  %46 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5597
  %full_size = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %46, i32 0, i32 11, !dbg !5598
  %47 = load i64, i64* %full_size, align 8, !dbg !5598
  %add = add nsw i64 %45, %47, !dbg !5599
  %cmp76 = icmp slt i64 %43, %add, !dbg !5600
  br i1 %cmp76, label %if.then77, label %if.end78, !dbg !5601

if.then77:                                        ; preds = %land.lhs.true67
  %48 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5602
  store %struct.temp_slot* %48, %struct.temp_slot** %retval, align 8, !dbg !5603
  br label %return, !dbg !5603

if.end78:                                         ; preds = %land.lhs.true67, %for.body59
  br label %for.inc, !dbg !5604

for.inc:                                          ; preds = %if.end78
  %49 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5605
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %49, i32 0, i32 0, !dbg !5606
  %50 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !5606
  store %struct.temp_slot* %50, %struct.temp_slot** %p, align 8, !dbg !5607
  br label %for.cond57, !dbg !5608, !llvm.loop !5609

for.end:                                          ; preds = %for.cond57
  br label %for.inc79, !dbg !5610

for.inc79:                                        ; preds = %for.end
  %51 = load i32, i32* %i, align 4, !dbg !5611
  %dec = add nsw i32 %51, -1, !dbg !5611
  store i32 %dec, i32* %i, align 4, !dbg !5611
  br label %for.cond, !dbg !5612, !llvm.loop !5613

for.end80:                                        ; preds = %for.cond
  br label %if.end81, !dbg !5615

if.end81:                                         ; preds = %for.end80, %land.lhs.true45, %land.lhs.true39, %if.end35
  store %struct.temp_slot* null, %struct.temp_slot** %retval, align 8, !dbg !5616
  br label %return, !dbg !5616

return:                                           ; preds = %if.end81, %if.then77, %if.then33, %if.then14, %if.then
  %52 = load %struct.temp_slot*, %struct.temp_slot** %retval, align 8, !dbg !5617
  ret %struct.temp_slot* %52, !dbg !5617
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_temp_addr_taken(%struct.rtx_def* %x) #0 !dbg !5618 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.temp_slot*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5621, metadata !DIExpression()), !dbg !5622
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %p, metadata !5623, metadata !DIExpression()), !dbg !5624
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5625
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !5627
  br i1 %cmp, label %if.then, label %if.end, !dbg !5628

if.then:                                          ; preds = %entry
  br label %if.end14, !dbg !5629

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5630
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !5630
  %bf.load = load i32, i32* %2, align 8, !dbg !5630
  %bf.clear = and i32 %bf.load, 65535, !dbg !5630
  %cmp1 = icmp eq i32 %bf.clear, 43, !dbg !5630
  br i1 %cmp1, label %lor.lhs.false, label %if.then6, !dbg !5632

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5633
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !5633
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5633
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5633
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5633
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5633
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5633
  %bf.load2 = load i32, i32* %5, align 8, !dbg !5633
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !5633
  %idxprom = sext i32 %bf.clear3 to i64, !dbg !5633
  %arrayidx4 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !5633
  %6 = load i32, i32* %arrayidx4, align 4, !dbg !5633
  %cmp5 = icmp eq i32 %6, 9, !dbg !5633
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !5634

if.then6:                                         ; preds = %lor.lhs.false, %if.end
  br label %if.end14, !dbg !5635

if.end7:                                          ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5636
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !5636
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !5636
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !5636
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !5636
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx11, align 8, !dbg !5636
  %call = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %8), !dbg !5637
  store %struct.temp_slot* %call, %struct.temp_slot** %p, align 8, !dbg !5638
  %9 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5639
  %cmp12 = icmp ne %struct.temp_slot* %9, null, !dbg !5641
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !5642

if.then13:                                        ; preds = %if.end7
  %10 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5643
  %addr_taken = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %10, i32 0, i32 7, !dbg !5644
  store i8 1, i8* %addr_taken, align 1, !dbg !5645
  br label %if.end14, !dbg !5643

if.end14:                                         ; preds = %if.then, %if.then6, %if.then13, %if.end7
  ret void, !dbg !5646
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @preserve_temp_slots(%struct.rtx_def* %x) #0 !dbg !5647 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %p = alloca %struct.temp_slot*, align 8
  %next = alloca %struct.temp_slot*, align 8
  %q = alloca %struct.temp_slot*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !5648, metadata !DIExpression()), !dbg !5649
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %p, metadata !5650, metadata !DIExpression()), !dbg !5651
  store %struct.temp_slot* null, %struct.temp_slot** %p, align 8, !dbg !5651
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %next, metadata !5652, metadata !DIExpression()), !dbg !5653
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5654
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !5656
  br i1 %cmp, label %if.then, label %if.end4, !dbg !5657

if.then:                                          ; preds = %entry
  %1 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5658
  %call = call %struct.temp_slot** @temp_slots_at_level(i32 %1), !dbg !5661
  %2 = load %struct.temp_slot*, %struct.temp_slot** %call, align 8, !dbg !5662
  store %struct.temp_slot* %2, %struct.temp_slot** %p, align 8, !dbg !5663
  br label %for.cond, !dbg !5664

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5665
  %tobool = icmp ne %struct.temp_slot* %3, null, !dbg !5667
  br i1 %tobool, label %for.body, label %for.end, !dbg !5667

for.body:                                         ; preds = %for.cond
  %4 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5668
  %next1 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %4, i32 0, i32 0, !dbg !5670
  %5 = load %struct.temp_slot*, %struct.temp_slot** %next1, align 8, !dbg !5670
  store %struct.temp_slot* %5, %struct.temp_slot** %next, align 8, !dbg !5671
  %6 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5672
  %addr_taken = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %6, i32 0, i32 7, !dbg !5674
  %7 = load i8, i8* %addr_taken, align 1, !dbg !5674
  %tobool2 = icmp ne i8 %7, 0, !dbg !5672
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !5675

if.then3:                                         ; preds = %for.body
  %8 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5676
  %9 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5677
  %sub = sub nsw i32 %9, 1, !dbg !5678
  call void @move_slot_to_level(%struct.temp_slot* %8, i32 %sub), !dbg !5679
  br label %if.end, !dbg !5679

if.end:                                           ; preds = %if.then3, %for.body
  br label %for.inc, !dbg !5680

for.inc:                                          ; preds = %if.end
  %10 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !5681
  store %struct.temp_slot* %10, %struct.temp_slot** %p, align 8, !dbg !5682
  br label %for.cond, !dbg !5683, !llvm.loop !5684

for.end:                                          ; preds = %for.cond
  br label %for.end75, !dbg !5686

if.end4:                                          ; preds = %entry
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5687
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !5687
  %bf.load = load i32, i32* %12, align 8, !dbg !5687
  %bf.clear = and i32 %bf.load, 65535, !dbg !5687
  %cmp5 = icmp eq i32 %bf.clear, 37, !dbg !5687
  br i1 %cmp5, label %land.lhs.true, label %if.end11, !dbg !5689

land.lhs.true:                                    ; preds = %if.end4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5690
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !5690
  %bf.load6 = load i32, i32* %14, align 8, !dbg !5690
  %bf.lshr = lshr i32 %bf.load6, 30, !dbg !5690
  %bf.clear7 = and i32 %bf.lshr, 1, !dbg !5690
  %tobool8 = icmp ne i32 %bf.clear7, 0, !dbg !5690
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !5691

if.then9:                                         ; preds = %land.lhs.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5692
  %call10 = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %15), !dbg !5693
  store %struct.temp_slot* %call10, %struct.temp_slot** %p, align 8, !dbg !5694
  br label %if.end11, !dbg !5695

if.end11:                                         ; preds = %if.then9, %land.lhs.true, %if.end4
  %16 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5696
  %cmp12 = icmp eq %struct.temp_slot* %16, null, !dbg !5698
  br i1 %cmp12, label %land.lhs.true13, label %if.end34, !dbg !5699

land.lhs.true13:                                  ; preds = %if.end11
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5700
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !5700
  %bf.load14 = load i32, i32* %18, align 8, !dbg !5700
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !5700
  %cmp16 = icmp eq i32 %bf.clear15, 43, !dbg !5700
  br i1 %cmp16, label %lor.lhs.false, label %if.then21, !dbg !5701

lor.lhs.false:                                    ; preds = %land.lhs.true13
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5702
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !5702
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5702
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5702
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5702
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5702
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5702
  %bf.load17 = load i32, i32* %21, align 8, !dbg !5702
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !5702
  %idxprom = sext i32 %bf.clear18 to i64, !dbg !5702
  %arrayidx19 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !5702
  %22 = load i32, i32* %arrayidx19, align 4, !dbg !5702
  %cmp20 = icmp eq i32 %22, 9, !dbg !5702
  br i1 %cmp20, label %if.then21, label %if.end34, !dbg !5703

if.then21:                                        ; preds = %lor.lhs.false, %land.lhs.true13
  %23 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5704
  %call22 = call %struct.temp_slot** @temp_slots_at_level(i32 %23), !dbg !5707
  %24 = load %struct.temp_slot*, %struct.temp_slot** %call22, align 8, !dbg !5708
  store %struct.temp_slot* %24, %struct.temp_slot** %p, align 8, !dbg !5709
  br label %for.cond23, !dbg !5710

for.cond23:                                       ; preds = %for.inc32, %if.then21
  %25 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5711
  %tobool24 = icmp ne %struct.temp_slot* %25, null, !dbg !5713
  br i1 %tobool24, label %for.body25, label %for.end33, !dbg !5713

for.body25:                                       ; preds = %for.cond23
  %26 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5714
  %next26 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %26, i32 0, i32 0, !dbg !5716
  %27 = load %struct.temp_slot*, %struct.temp_slot** %next26, align 8, !dbg !5716
  store %struct.temp_slot* %27, %struct.temp_slot** %next, align 8, !dbg !5717
  %28 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5718
  %addr_taken27 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %28, i32 0, i32 7, !dbg !5720
  %29 = load i8, i8* %addr_taken27, align 1, !dbg !5720
  %tobool28 = icmp ne i8 %29, 0, !dbg !5718
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !5721

if.then29:                                        ; preds = %for.body25
  %30 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5722
  %31 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5723
  %sub30 = sub nsw i32 %31, 1, !dbg !5724
  call void @move_slot_to_level(%struct.temp_slot* %30, i32 %sub30), !dbg !5725
  br label %if.end31, !dbg !5725

if.end31:                                         ; preds = %if.then29, %for.body25
  br label %for.inc32, !dbg !5726

for.inc32:                                        ; preds = %if.end31
  %32 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !5727
  store %struct.temp_slot* %32, %struct.temp_slot** %p, align 8, !dbg !5728
  br label %for.cond23, !dbg !5729, !llvm.loop !5730

for.end33:                                        ; preds = %for.cond23
  br label %for.end75, !dbg !5732

if.end34:                                         ; preds = %lor.lhs.false, %if.end11
  %33 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5733
  %cmp35 = icmp eq %struct.temp_slot* %33, null, !dbg !5735
  br i1 %cmp35, label %if.then36, label %if.end42, !dbg !5736

if.then36:                                        ; preds = %if.end34
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !5737
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !5737
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !5737
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 0, !dbg !5737
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !5737
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !5737
  %call41 = call %struct.temp_slot* @find_temp_slot_from_address(%struct.rtx_def* %35), !dbg !5738
  store %struct.temp_slot* %call41, %struct.temp_slot** %p, align 8, !dbg !5739
  br label %if.end42, !dbg !5740

if.end42:                                         ; preds = %if.then36, %if.end34
  %36 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5741
  %cmp43 = icmp ne %struct.temp_slot* %36, null, !dbg !5743
  br i1 %cmp43, label %if.then44, label %if.end64, !dbg !5744

if.then44:                                        ; preds = %if.end42
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %q, metadata !5745, metadata !DIExpression()), !dbg !5747
  %37 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5748
  %level = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %37, i32 0, i32 8, !dbg !5750
  %38 = load i32, i32* %level, align 8, !dbg !5750
  %39 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5751
  %cmp45 = icmp eq i32 %38, %39, !dbg !5752
  br i1 %cmp45, label %if.then46, label %if.end63, !dbg !5753

if.then46:                                        ; preds = %if.then44
  %40 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5754
  %call47 = call %struct.temp_slot** @temp_slots_at_level(i32 %40), !dbg !5757
  %41 = load %struct.temp_slot*, %struct.temp_slot** %call47, align 8, !dbg !5758
  store %struct.temp_slot* %41, %struct.temp_slot** %q, align 8, !dbg !5759
  br label %for.cond48, !dbg !5760

for.cond48:                                       ; preds = %for.inc59, %if.then46
  %42 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !5761
  %tobool49 = icmp ne %struct.temp_slot* %42, null, !dbg !5763
  br i1 %tobool49, label %for.body50, label %for.end60, !dbg !5763

for.body50:                                       ; preds = %for.cond48
  %43 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !5764
  %next51 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %43, i32 0, i32 0, !dbg !5766
  %44 = load %struct.temp_slot*, %struct.temp_slot** %next51, align 8, !dbg !5766
  store %struct.temp_slot* %44, %struct.temp_slot** %next, align 8, !dbg !5767
  %45 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5768
  %46 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !5770
  %cmp52 = icmp ne %struct.temp_slot* %45, %46, !dbg !5771
  br i1 %cmp52, label %land.lhs.true53, label %if.end58, !dbg !5772

land.lhs.true53:                                  ; preds = %for.body50
  %47 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !5773
  %addr_taken54 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %47, i32 0, i32 7, !dbg !5774
  %48 = load i8, i8* %addr_taken54, align 1, !dbg !5774
  %conv = sext i8 %48 to i32, !dbg !5773
  %tobool55 = icmp ne i32 %conv, 0, !dbg !5773
  br i1 %tobool55, label %if.then56, label %if.end58, !dbg !5775

if.then56:                                        ; preds = %land.lhs.true53
  %49 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !5776
  %50 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5777
  %sub57 = sub nsw i32 %50, 1, !dbg !5778
  call void @move_slot_to_level(%struct.temp_slot* %49, i32 %sub57), !dbg !5779
  br label %if.end58, !dbg !5779

if.end58:                                         ; preds = %if.then56, %land.lhs.true53, %for.body50
  br label %for.inc59, !dbg !5780

for.inc59:                                        ; preds = %if.end58
  %51 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !5781
  store %struct.temp_slot* %51, %struct.temp_slot** %q, align 8, !dbg !5782
  br label %for.cond48, !dbg !5783, !llvm.loop !5784

for.end60:                                        ; preds = %for.cond48
  %52 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5786
  %53 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5787
  %sub61 = sub nsw i32 %53, 1, !dbg !5788
  call void @move_slot_to_level(%struct.temp_slot* %52, i32 %sub61), !dbg !5789
  %54 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5790
  %addr_taken62 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %54, i32 0, i32 7, !dbg !5791
  store i8 0, i8* %addr_taken62, align 1, !dbg !5792
  br label %if.end63, !dbg !5793

if.end63:                                         ; preds = %for.end60, %if.then44
  br label %for.end75, !dbg !5794

if.end64:                                         ; preds = %if.end42
  %55 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5795
  %call65 = call %struct.temp_slot** @temp_slots_at_level(i32 %55), !dbg !5797
  %56 = load %struct.temp_slot*, %struct.temp_slot** %call65, align 8, !dbg !5798
  store %struct.temp_slot* %56, %struct.temp_slot** %p, align 8, !dbg !5799
  br label %for.cond66, !dbg !5800

for.cond66:                                       ; preds = %for.inc74, %if.end64
  %57 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5801
  %tobool67 = icmp ne %struct.temp_slot* %57, null, !dbg !5803
  br i1 %tobool67, label %for.body68, label %for.end75, !dbg !5803

for.body68:                                       ; preds = %for.cond66
  %58 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5804
  %next69 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %58, i32 0, i32 0, !dbg !5806
  %59 = load %struct.temp_slot*, %struct.temp_slot** %next69, align 8, !dbg !5806
  store %struct.temp_slot* %59, %struct.temp_slot** %next, align 8, !dbg !5807
  %60 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5808
  %keep = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %60, i32 0, i32 9, !dbg !5810
  %61 = load i32, i32* %keep, align 4, !dbg !5810
  %tobool70 = icmp ne i32 %61, 0, !dbg !5808
  br i1 %tobool70, label %if.end73, label %if.then71, !dbg !5811

if.then71:                                        ; preds = %for.body68
  %62 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5812
  %63 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5813
  %sub72 = sub nsw i32 %63, 1, !dbg !5814
  call void @move_slot_to_level(%struct.temp_slot* %62, i32 %sub72), !dbg !5815
  br label %if.end73, !dbg !5815

if.end73:                                         ; preds = %if.then71, %for.body68
  br label %for.inc74, !dbg !5816

for.inc74:                                        ; preds = %if.end73
  %64 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !5817
  store %struct.temp_slot* %64, %struct.temp_slot** %p, align 8, !dbg !5818
  br label %for.cond66, !dbg !5819, !llvm.loop !5820

for.end75:                                        ; preds = %for.end, %for.end33, %if.end63, %for.cond66
  ret void, !dbg !5822
}

; Function Attrs: noinline nounwind uwtable
define internal void @move_slot_to_level(%struct.temp_slot* %temp, i32 %level) #0 !dbg !5823 {
entry:
  %temp.addr = alloca %struct.temp_slot*, align 8
  %level.addr = alloca i32, align 4
  store %struct.temp_slot* %temp, %struct.temp_slot** %temp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %temp.addr, metadata !5826, metadata !DIExpression()), !dbg !5827
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !5828, metadata !DIExpression()), !dbg !5829
  %0 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5830
  %1 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5831
  %level1 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %1, i32 0, i32 8, !dbg !5832
  %2 = load i32, i32* %level1, align 8, !dbg !5832
  %call = call %struct.temp_slot** @temp_slots_at_level(i32 %2), !dbg !5833
  call void @cut_slot_from_list(%struct.temp_slot* %0, %struct.temp_slot** %call), !dbg !5834
  %3 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5835
  %4 = load i32, i32* %level.addr, align 4, !dbg !5836
  %call2 = call %struct.temp_slot** @temp_slots_at_level(i32 %4), !dbg !5837
  call void @insert_slot_to_list(%struct.temp_slot* %3, %struct.temp_slot** %call2), !dbg !5838
  %5 = load i32, i32* %level.addr, align 4, !dbg !5839
  %6 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5840
  %level3 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %6, i32 0, i32 8, !dbg !5841
  store i32 %5, i32* %level3, align 8, !dbg !5842
  ret void, !dbg !5843
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_temp_slots() #0 !dbg !5844 {
entry:
  %p = alloca %struct.temp_slot*, align 8
  %next = alloca %struct.temp_slot*, align 8
  %some_available = alloca i8, align 1
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %p, metadata !5845, metadata !DIExpression()), !dbg !5846
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %next, metadata !5847, metadata !DIExpression()), !dbg !5848
  call void @llvm.dbg.declare(metadata i8* %some_available, metadata !5849, metadata !DIExpression()), !dbg !5850
  store i8 0, i8* %some_available, align 1, !dbg !5850
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !5851
  %call = call %struct.temp_slot** @temp_slots_at_level(i32 %0), !dbg !5853
  %1 = load %struct.temp_slot*, %struct.temp_slot** %call, align 8, !dbg !5854
  store %struct.temp_slot* %1, %struct.temp_slot** %p, align 8, !dbg !5855
  br label %for.cond, !dbg !5856

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5857
  %tobool = icmp ne %struct.temp_slot* %2, null, !dbg !5859
  br i1 %tobool, label %for.body, label %for.end, !dbg !5859

for.body:                                         ; preds = %for.cond
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5860
  %next1 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %3, i32 0, i32 0, !dbg !5862
  %4 = load %struct.temp_slot*, %struct.temp_slot** %next1, align 8, !dbg !5862
  store %struct.temp_slot* %4, %struct.temp_slot** %next, align 8, !dbg !5863
  %5 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5864
  %keep = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %5, i32 0, i32 9, !dbg !5866
  %6 = load i32, i32* %keep, align 4, !dbg !5866
  %tobool2 = icmp ne i32 %6, 0, !dbg !5864
  br i1 %tobool2, label %if.end, label %if.then, !dbg !5867

if.then:                                          ; preds = %for.body
  %7 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5868
  call void @make_slot_available(%struct.temp_slot* %7), !dbg !5870
  store i8 1, i8* %some_available, align 1, !dbg !5871
  br label %if.end, !dbg !5872

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5873

for.inc:                                          ; preds = %if.end
  %8 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !5874
  store %struct.temp_slot* %8, %struct.temp_slot** %p, align 8, !dbg !5875
  br label %for.cond, !dbg !5876, !llvm.loop !5877

for.end:                                          ; preds = %for.cond
  %9 = load i8, i8* %some_available, align 1, !dbg !5879
  %tobool3 = icmp ne i8 %9, 0, !dbg !5879
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !5881

if.then4:                                         ; preds = %for.end
  call void @remove_unused_temp_slot_addresses(), !dbg !5882
  call void @combine_temp_slots(), !dbg !5884
  br label %if.end5, !dbg !5885

if.end5:                                          ; preds = %if.then4, %for.end
  ret void, !dbg !5886
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_slot_available(%struct.temp_slot* %temp) #0 !dbg !5887 {
entry:
  %temp.addr = alloca %struct.temp_slot*, align 8
  store %struct.temp_slot* %temp, %struct.temp_slot** %temp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %temp.addr, metadata !5890, metadata !DIExpression()), !dbg !5891
  %0 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5892
  %1 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5893
  %level = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %1, i32 0, i32 8, !dbg !5894
  %2 = load i32, i32* %level, align 8, !dbg !5894
  %call = call %struct.temp_slot** @temp_slots_at_level(i32 %2), !dbg !5895
  call void @cut_slot_from_list(%struct.temp_slot* %0, %struct.temp_slot** %call), !dbg !5896
  %3 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5897
  call void @insert_slot_to_list(%struct.temp_slot* %3, %struct.temp_slot** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 20)), !dbg !5898
  %4 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5899
  %in_use = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %4, i32 0, i32 6, !dbg !5900
  store i8 0, i8* %in_use, align 4, !dbg !5901
  %5 = load %struct.temp_slot*, %struct.temp_slot** %temp.addr, align 8, !dbg !5902
  %level1 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %5, i32 0, i32 8, !dbg !5903
  store i32 -1, i32* %level1, align 8, !dbg !5904
  ret void, !dbg !5905
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_unused_temp_slot_addresses() #0 !dbg !5906 {
entry:
  %0 = load %struct.htab*, %struct.htab** @temp_slot_address_table, align 8, !dbg !5907
  call void @htab_traverse(%struct.htab* %0, i32 (i8**, i8*)* @remove_unused_temp_slot_addresses_1, i8* null), !dbg !5908
  ret void, !dbg !5909
}

; Function Attrs: noinline nounwind uwtable
define internal void @combine_temp_slots() #0 !dbg !5910 {
entry:
  %p = alloca %struct.temp_slot*, align 8
  %q = alloca %struct.temp_slot*, align 8
  %next = alloca %struct.temp_slot*, align 8
  %next_q = alloca %struct.temp_slot*, align 8
  %num_slots = alloca i32, align 4
  %delete_p = alloca i32, align 4
  %delete_q = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %p, metadata !5911, metadata !DIExpression()), !dbg !5912
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %q, metadata !5913, metadata !DIExpression()), !dbg !5914
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %next, metadata !5915, metadata !DIExpression()), !dbg !5916
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %next_q, metadata !5917, metadata !DIExpression()), !dbg !5918
  call void @llvm.dbg.declare(metadata i32* %num_slots, metadata !5919, metadata !DIExpression()), !dbg !5920
  %0 = load i32, i32* @flag_strict_aliasing, align 4, !dbg !5921
  %tobool = icmp ne i32 %0, 0, !dbg !5921
  br i1 %tobool, label %if.then, label %if.end, !dbg !5923

if.then:                                          ; preds = %entry
  br label %for.end60, !dbg !5924

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @flag_expensive_optimizations, align 4, !dbg !5925
  %tobool1 = icmp ne i32 %1, 0, !dbg !5925
  br i1 %tobool1, label %if.end9, label %if.then2, !dbg !5927

if.then2:                                         ; preds = %if.end
  %2 = load %struct.temp_slot*, %struct.temp_slot** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 20), align 8, !dbg !5928
  store %struct.temp_slot* %2, %struct.temp_slot** %p, align 8, !dbg !5930
  store i32 0, i32* %num_slots, align 4, !dbg !5931
  br label %for.cond, !dbg !5932

for.cond:                                         ; preds = %for.inc, %if.then2
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5933
  %tobool3 = icmp ne %struct.temp_slot* %3, null, !dbg !5935
  br i1 %tobool3, label %for.body, label %for.end, !dbg !5935

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %num_slots, align 4, !dbg !5936
  %cmp = icmp sgt i32 %4, 100, !dbg !5938
  br i1 %cmp, label %if.then6, label %lor.lhs.false, !dbg !5939

lor.lhs.false:                                    ; preds = %for.body
  %5 = load i32, i32* %num_slots, align 4, !dbg !5940
  %cmp4 = icmp sgt i32 %5, 10, !dbg !5941
  br i1 %cmp4, label %land.lhs.true, label %if.end7, !dbg !5942

land.lhs.true:                                    ; preds = %lor.lhs.false
  %6 = load i32, i32* @optimize, align 4, !dbg !5943
  %cmp5 = icmp eq i32 %6, 0, !dbg !5944
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !5945

if.then6:                                         ; preds = %land.lhs.true, %for.body
  br label %for.end60, !dbg !5946

if.end7:                                          ; preds = %land.lhs.true, %lor.lhs.false
  br label %for.inc, !dbg !5947

for.inc:                                          ; preds = %if.end7
  %7 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5948
  %next8 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %7, i32 0, i32 0, !dbg !5949
  %8 = load %struct.temp_slot*, %struct.temp_slot** %next8, align 8, !dbg !5949
  store %struct.temp_slot* %8, %struct.temp_slot** %p, align 8, !dbg !5950
  %9 = load i32, i32* %num_slots, align 4, !dbg !5951
  %inc = add nsw i32 %9, 1, !dbg !5951
  store i32 %inc, i32* %num_slots, align 4, !dbg !5951
  br label %for.cond, !dbg !5952, !llvm.loop !5953

for.end:                                          ; preds = %for.cond
  br label %if.end9, !dbg !5954

if.end9:                                          ; preds = %for.end, %if.end
  %10 = load %struct.temp_slot*, %struct.temp_slot** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 20), align 8, !dbg !5955
  store %struct.temp_slot* %10, %struct.temp_slot** %p, align 8, !dbg !5957
  br label %for.cond10, !dbg !5958

for.cond10:                                       ; preds = %for.inc59, %if.end9
  %11 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5959
  %tobool11 = icmp ne %struct.temp_slot* %11, null, !dbg !5961
  br i1 %tobool11, label %for.body12, label %for.end60, !dbg !5961

for.body12:                                       ; preds = %for.cond10
  call void @llvm.dbg.declare(metadata i32* %delete_p, metadata !5962, metadata !DIExpression()), !dbg !5964
  store i32 0, i32* %delete_p, align 4, !dbg !5964
  %12 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5965
  %next13 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %12, i32 0, i32 0, !dbg !5966
  %13 = load %struct.temp_slot*, %struct.temp_slot** %next13, align 8, !dbg !5966
  store %struct.temp_slot* %13, %struct.temp_slot** %next, align 8, !dbg !5967
  %14 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5968
  %slot = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %14, i32 0, i32 2, !dbg !5968
  %15 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !5968
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !5968
  %bf.load = load i32, i32* %16, align 8, !dbg !5968
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5968
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5968
  %cmp14 = icmp ne i32 %bf.clear, 1, !dbg !5970
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !5971

if.then15:                                        ; preds = %for.body12
  br label %for.inc59, !dbg !5972

if.end16:                                         ; preds = %for.body12
  %17 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5973
  %next17 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %17, i32 0, i32 0, !dbg !5975
  %18 = load %struct.temp_slot*, %struct.temp_slot** %next17, align 8, !dbg !5975
  store %struct.temp_slot* %18, %struct.temp_slot** %q, align 8, !dbg !5976
  br label %for.cond18, !dbg !5977

for.cond18:                                       ; preds = %for.inc54, %if.end16
  %19 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !5978
  %tobool19 = icmp ne %struct.temp_slot* %19, null, !dbg !5980
  br i1 %tobool19, label %for.body20, label %for.end55, !dbg !5980

for.body20:                                       ; preds = %for.cond18
  call void @llvm.dbg.declare(metadata i32* %delete_q, metadata !5981, metadata !DIExpression()), !dbg !5983
  store i32 0, i32* %delete_q, align 4, !dbg !5983
  %20 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !5984
  %next21 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %20, i32 0, i32 0, !dbg !5985
  %21 = load %struct.temp_slot*, %struct.temp_slot** %next21, align 8, !dbg !5985
  store %struct.temp_slot* %21, %struct.temp_slot** %next_q, align 8, !dbg !5986
  %22 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !5987
  %slot22 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %22, i32 0, i32 2, !dbg !5987
  %23 = load %struct.rtx_def*, %struct.rtx_def** %slot22, align 8, !dbg !5987
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !5987
  %bf.load23 = load i32, i32* %24, align 8, !dbg !5987
  %bf.lshr24 = lshr i32 %bf.load23, 16, !dbg !5987
  %bf.clear25 = and i32 %bf.lshr24, 255, !dbg !5987
  %cmp26 = icmp ne i32 %bf.clear25, 1, !dbg !5989
  br i1 %cmp26, label %if.then27, label %if.end28, !dbg !5990

if.then27:                                        ; preds = %for.body20
  br label %for.inc54, !dbg !5991

if.end28:                                         ; preds = %for.body20
  %25 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5992
  %base_offset = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %25, i32 0, i32 10, !dbg !5994
  %26 = load i64, i64* %base_offset, align 8, !dbg !5994
  %27 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !5995
  %full_size = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %27, i32 0, i32 11, !dbg !5996
  %28 = load i64, i64* %full_size, align 8, !dbg !5996
  %add = add nsw i64 %26, %28, !dbg !5997
  %29 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !5998
  %base_offset29 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %29, i32 0, i32 10, !dbg !5999
  %30 = load i64, i64* %base_offset29, align 8, !dbg !5999
  %cmp30 = icmp eq i64 %add, %30, !dbg !6000
  br i1 %cmp30, label %if.then31, label %if.else, !dbg !6001

if.then31:                                        ; preds = %if.end28
  %31 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !6002
  %size = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %31, i32 0, i32 3, !dbg !6004
  %32 = load i64, i64* %size, align 8, !dbg !6004
  %33 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !6005
  %size32 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %33, i32 0, i32 3, !dbg !6006
  %34 = load i64, i64* %size32, align 8, !dbg !6007
  %add33 = add nsw i64 %34, %32, !dbg !6007
  store i64 %add33, i64* %size32, align 8, !dbg !6007
  %35 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !6008
  %full_size34 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %35, i32 0, i32 11, !dbg !6009
  %36 = load i64, i64* %full_size34, align 8, !dbg !6009
  %37 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !6010
  %full_size35 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %37, i32 0, i32 11, !dbg !6011
  %38 = load i64, i64* %full_size35, align 8, !dbg !6012
  %add36 = add nsw i64 %38, %36, !dbg !6012
  store i64 %add36, i64* %full_size35, align 8, !dbg !6012
  store i32 1, i32* %delete_q, align 4, !dbg !6013
  br label %if.end50, !dbg !6014

if.else:                                          ; preds = %if.end28
  %39 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !6015
  %base_offset37 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %39, i32 0, i32 10, !dbg !6017
  %40 = load i64, i64* %base_offset37, align 8, !dbg !6017
  %41 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !6018
  %full_size38 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %41, i32 0, i32 11, !dbg !6019
  %42 = load i64, i64* %full_size38, align 8, !dbg !6019
  %add39 = add nsw i64 %40, %42, !dbg !6020
  %43 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !6021
  %base_offset40 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %43, i32 0, i32 10, !dbg !6022
  %44 = load i64, i64* %base_offset40, align 8, !dbg !6022
  %cmp41 = icmp eq i64 %add39, %44, !dbg !6023
  br i1 %cmp41, label %if.then42, label %if.end49, !dbg !6024

if.then42:                                        ; preds = %if.else
  %45 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !6025
  %size43 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %45, i32 0, i32 3, !dbg !6027
  %46 = load i64, i64* %size43, align 8, !dbg !6027
  %47 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !6028
  %size44 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %47, i32 0, i32 3, !dbg !6029
  %48 = load i64, i64* %size44, align 8, !dbg !6030
  %add45 = add nsw i64 %48, %46, !dbg !6030
  store i64 %add45, i64* %size44, align 8, !dbg !6030
  %49 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !6031
  %full_size46 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %49, i32 0, i32 11, !dbg !6032
  %50 = load i64, i64* %full_size46, align 8, !dbg !6032
  %51 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !6033
  %full_size47 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %51, i32 0, i32 11, !dbg !6034
  %52 = load i64, i64* %full_size47, align 8, !dbg !6035
  %add48 = add nsw i64 %52, %50, !dbg !6035
  store i64 %add48, i64* %full_size47, align 8, !dbg !6035
  store i32 1, i32* %delete_p, align 4, !dbg !6036
  br label %for.end55, !dbg !6037

if.end49:                                         ; preds = %if.else
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then31
  %53 = load i32, i32* %delete_q, align 4, !dbg !6038
  %tobool51 = icmp ne i32 %53, 0, !dbg !6038
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !6040

if.then52:                                        ; preds = %if.end50
  %54 = load %struct.temp_slot*, %struct.temp_slot** %q, align 8, !dbg !6041
  call void @cut_slot_from_list(%struct.temp_slot* %54, %struct.temp_slot** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 20)), !dbg !6042
  br label %if.end53, !dbg !6042

if.end53:                                         ; preds = %if.then52, %if.end50
  br label %for.inc54, !dbg !6043

for.inc54:                                        ; preds = %if.end53, %if.then27
  %55 = load %struct.temp_slot*, %struct.temp_slot** %next_q, align 8, !dbg !6044
  store %struct.temp_slot* %55, %struct.temp_slot** %q, align 8, !dbg !6045
  br label %for.cond18, !dbg !6046, !llvm.loop !6047

for.end55:                                        ; preds = %if.then42, %for.cond18
  %56 = load i32, i32* %delete_p, align 4, !dbg !6049
  %tobool56 = icmp ne i32 %56, 0, !dbg !6049
  br i1 %tobool56, label %if.then57, label %if.end58, !dbg !6051

if.then57:                                        ; preds = %for.end55
  %57 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !6052
  call void @cut_slot_from_list(%struct.temp_slot* %57, %struct.temp_slot** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 20)), !dbg !6053
  br label %if.end58, !dbg !6053

if.end58:                                         ; preds = %if.then57, %for.end55
  br label %for.inc59, !dbg !6054

for.inc59:                                        ; preds = %if.end58, %if.then15
  %58 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !6055
  store %struct.temp_slot* %58, %struct.temp_slot** %p, align 8, !dbg !6056
  br label %for.cond10, !dbg !6057, !llvm.loop !6058

for.end60:                                        ; preds = %if.then, %if.then6, %for.cond10
  ret void, !dbg !6060
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_temp_slots() #0 !dbg !6061 {
entry:
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !6062
  %inc = add nsw i32 %0, 1, !dbg !6062
  store i32 %inc, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !6062
  ret void, !dbg !6063
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pop_temp_slots() #0 !dbg !6064 {
entry:
  %p = alloca %struct.temp_slot*, align 8
  %next = alloca %struct.temp_slot*, align 8
  %some_available = alloca i8, align 1
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %p, metadata !6065, metadata !DIExpression()), !dbg !6066
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %next, metadata !6067, metadata !DIExpression()), !dbg !6068
  call void @llvm.dbg.declare(metadata i8* %some_available, metadata !6069, metadata !DIExpression()), !dbg !6070
  store i8 0, i8* %some_available, align 1, !dbg !6070
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !6071
  %call = call %struct.temp_slot** @temp_slots_at_level(i32 %0), !dbg !6073
  %1 = load %struct.temp_slot*, %struct.temp_slot** %call, align 8, !dbg !6074
  store %struct.temp_slot* %1, %struct.temp_slot** %p, align 8, !dbg !6075
  br label %for.cond, !dbg !6076

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !6077
  %tobool = icmp ne %struct.temp_slot* %2, null, !dbg !6079
  br i1 %tobool, label %for.body, label %for.end, !dbg !6079

for.body:                                         ; preds = %for.cond
  %3 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !6080
  %next1 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %3, i32 0, i32 0, !dbg !6082
  %4 = load %struct.temp_slot*, %struct.temp_slot** %next1, align 8, !dbg !6082
  store %struct.temp_slot* %4, %struct.temp_slot** %next, align 8, !dbg !6083
  %5 = load %struct.temp_slot*, %struct.temp_slot** %p, align 8, !dbg !6084
  call void @make_slot_available(%struct.temp_slot* %5), !dbg !6085
  store i8 1, i8* %some_available, align 1, !dbg !6086
  br label %for.inc, !dbg !6087

for.inc:                                          ; preds = %for.body
  %6 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !6088
  store %struct.temp_slot* %6, %struct.temp_slot** %p, align 8, !dbg !6089
  br label %for.cond, !dbg !6090, !llvm.loop !6091

for.end:                                          ; preds = %for.cond
  %7 = load i8, i8* %some_available, align 1, !dbg !6093
  %tobool2 = icmp ne i8 %7, 0, !dbg !6093
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6095

if.then:                                          ; preds = %for.end
  call void @remove_unused_temp_slot_addresses(), !dbg !6096
  call void @combine_temp_slots(), !dbg !6098
  br label %if.end, !dbg !6099

if.end:                                           ; preds = %if.then, %for.end
  %8 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !6100
  %dec = add nsw i32 %8, -1, !dbg !6100
  store i32 %dec, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !6100
  ret void, !dbg !6101
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_temp_slots() #0 !dbg !6102 {
entry:
  store %struct.temp_slot* null, %struct.temp_slot** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 20), align 8, !dbg !6103
  store %struct.VEC_temp_slot_p_gc* null, %struct.VEC_temp_slot_p_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 19), align 8, !dbg !6104
  store i32 0, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 21), align 8, !dbg !6105
  %0 = load %struct.htab*, %struct.htab** @temp_slot_address_table, align 8, !dbg !6106
  %tobool = icmp ne %struct.htab* %0, null, !dbg !6106
  br i1 %tobool, label %if.else, label %if.then, !dbg !6108

if.then:                                          ; preds = %entry
  %call = call %struct.htab* @htab_create_alloc(i64 32, i32 (i8*)* @temp_slot_address_hash, i32 (i8*, i8*)* @temp_slot_address_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !6109
  store %struct.htab* %call, %struct.htab** @temp_slot_address_table, align 8, !dbg !6110
  br label %if.end, !dbg !6111

if.else:                                          ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** @temp_slot_address_table, align 8, !dbg !6112
  call void @htab_empty(%struct.htab* %1), !dbg !6113
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !6114
}

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @temp_slot_address_hash(i8* %p) #0 !dbg !6115 {
entry:
  %p.addr = alloca i8*, align 8
  %t = alloca %struct.temp_slot_address_entry*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !6116, metadata !DIExpression()), !dbg !6117
  call void @llvm.dbg.declare(metadata %struct.temp_slot_address_entry** %t, metadata !6118, metadata !DIExpression()), !dbg !6119
  %0 = load i8*, i8** %p.addr, align 8, !dbg !6120
  %1 = bitcast i8* %0 to %struct.temp_slot_address_entry*, !dbg !6121
  store %struct.temp_slot_address_entry* %1, %struct.temp_slot_address_entry** %t, align 8, !dbg !6122
  %2 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t, align 8, !dbg !6123
  %hash = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %2, i32 0, i32 0, !dbg !6124
  %3 = load i32, i32* %hash, align 8, !dbg !6124
  ret i32 %3, !dbg !6125
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @temp_slot_address_eq(i8* %p1, i8* %p2) #0 !dbg !6126 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %t1 = alloca %struct.temp_slot_address_entry*, align 8
  %t2 = alloca %struct.temp_slot_address_entry*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !6127, metadata !DIExpression()), !dbg !6128
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !6129, metadata !DIExpression()), !dbg !6130
  call void @llvm.dbg.declare(metadata %struct.temp_slot_address_entry** %t1, metadata !6131, metadata !DIExpression()), !dbg !6132
  call void @llvm.dbg.declare(metadata %struct.temp_slot_address_entry** %t2, metadata !6133, metadata !DIExpression()), !dbg !6134
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !6135
  %1 = bitcast i8* %0 to %struct.temp_slot_address_entry*, !dbg !6136
  store %struct.temp_slot_address_entry* %1, %struct.temp_slot_address_entry** %t1, align 8, !dbg !6137
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !6138
  %3 = bitcast i8* %2 to %struct.temp_slot_address_entry*, !dbg !6139
  store %struct.temp_slot_address_entry* %3, %struct.temp_slot_address_entry** %t2, align 8, !dbg !6140
  %4 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t1, align 8, !dbg !6141
  %address = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %4, i32 0, i32 1, !dbg !6142
  %5 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8, !dbg !6142
  %6 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t2, align 8, !dbg !6143
  %address1 = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %6, i32 0, i32 1, !dbg !6144
  %7 = load %struct.rtx_def*, %struct.rtx_def** %address1, align 8, !dbg !6144
  %call = call i32 @exp_equiv_p(%struct.rtx_def* %5, %struct.rtx_def* %7, i32 0, i8 zeroext 1), !dbg !6145
  ret i32 %call, !dbg !6146
}

declare dso_local i8* @ggc_calloc(i64, i64) #2

declare dso_local void @ggc_free(i8*) #2

declare dso_local void @htab_empty(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @instantiate_decl_rtl(%struct.rtx_def* %x) #0 !dbg !6147 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6148, metadata !DIExpression()), !dbg !6149
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !6150, metadata !DIExpression()), !dbg !6151
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6152
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !6154
  br i1 %cmp, label %if.then, label %if.end, !dbg !6155

if.then:                                          ; preds = %entry
  br label %return, !dbg !6156

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6157
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !6157
  %bf.load = load i32, i32* %2, align 8, !dbg !6157
  %bf.clear = and i32 %bf.load, 65535, !dbg !6157
  %cmp1 = icmp eq i32 %bf.clear, 41, !dbg !6159
  br i1 %cmp1, label %if.then2, label %if.end7, !dbg !6160

if.then2:                                         ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6161
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !6161
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6161
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6161
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6161
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6161
  call void @instantiate_decl_rtl(%struct.rtx_def* %4), !dbg !6163
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6164
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !6164
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !6164
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 1, !dbg !6164
  %rt_rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !6164
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx6, align 8, !dbg !6164
  call void @instantiate_decl_rtl(%struct.rtx_def* %6), !dbg !6165
  br label %return, !dbg !6166

if.end7:                                          ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6167
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !6167
  %bf.load8 = load i32, i32* %8, align 8, !dbg !6167
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !6167
  %cmp10 = icmp eq i32 %bf.clear9, 43, !dbg !6167
  br i1 %cmp10, label %if.end12, label %if.then11, !dbg !6169

if.then11:                                        ; preds = %if.end7
  br label %return, !dbg !6170

if.end12:                                         ; preds = %if.end7
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6171
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !6171
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !6171
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 0, !dbg !6171
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !6171
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !6171
  store %struct.rtx_def* %10, %struct.rtx_def** %addr, align 8, !dbg !6172
  %11 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6173
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6173
  %bf.load17 = load i32, i32* %12, align 8, !dbg !6173
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !6173
  %idxprom = sext i32 %bf.clear18 to i64, !dbg !6173
  %arrayidx19 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !6173
  %13 = load i32, i32* %arrayidx19, align 4, !dbg !6173
  %cmp20 = icmp eq i32 %13, 9, !dbg !6173
  br i1 %cmp20, label %if.then28, label %lor.lhs.false, !dbg !6175

lor.lhs.false:                                    ; preds = %if.end12
  %14 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6176
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !6176
  %bf.load21 = load i32, i32* %15, align 8, !dbg !6176
  %bf.clear22 = and i32 %bf.load21, 65535, !dbg !6176
  %cmp23 = icmp eq i32 %bf.clear22, 37, !dbg !6176
  br i1 %cmp23, label %land.lhs.true, label %if.end29, !dbg !6177

land.lhs.true:                                    ; preds = %lor.lhs.false
  %16 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6178
  %call = call i32 @rhs_regno(%struct.rtx_def* %16), !dbg !6178
  %cmp24 = icmp ult i32 %call, 53, !dbg !6179
  br i1 %cmp24, label %if.then28, label %lor.lhs.false25, !dbg !6180

lor.lhs.false25:                                  ; preds = %land.lhs.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6181
  %call26 = call i32 @rhs_regno(%struct.rtx_def* %17), !dbg !6181
  %cmp27 = icmp ugt i32 %call26, 57, !dbg !6182
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !6183

if.then28:                                        ; preds = %lor.lhs.false25, %land.lhs.true, %if.end12
  br label %return, !dbg !6184

if.end29:                                         ; preds = %lor.lhs.false25, %lor.lhs.false
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6185
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !6185
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !6185
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 0, !dbg !6185
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !6185
  %call34 = call i32 @for_each_rtx(%struct.rtx_def** %rt_rtx33, i32 (%struct.rtx_def**, i8*)* @instantiate_virtual_regs_in_rtx, i8* null), !dbg !6186
  br label %return, !dbg !6187

return:                                           ; preds = %if.end29, %if.then28, %if.then11, %if.then2, %if.then
  ret void, !dbg !6187
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !6188 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6194, metadata !DIExpression()), !dbg !6195
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6196
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6196
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6196
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6196
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !6196
  %1 = load i32, i32* %rt_uint, align 8, !dbg !6196
  ret i32 %1, !dbg !6197
}

declare dso_local i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @instantiate_virtual_regs_in_rtx(%struct.rtx_def** %loc, i8* %data) #0 !dbg !6198 {
entry:
  %retval = alloca i32, align 4
  %loc.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %offset = alloca i64, align 8
  %changed = alloca i8*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %loc, %struct.rtx_def*** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %loc.addr, metadata !6202, metadata !DIExpression()), !dbg !6203
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !6204, metadata !DIExpression()), !dbg !6205
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !6206, metadata !DIExpression()), !dbg !6207
  call void @llvm.dbg.declare(metadata i8** %changed, metadata !6208, metadata !DIExpression()), !dbg !6209
  %0 = load i8*, i8** %data.addr, align 8, !dbg !6210
  store i8* %0, i8** %changed, align 8, !dbg !6209
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !6211, metadata !DIExpression()), !dbg !6212
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !6213, metadata !DIExpression()), !dbg !6214
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8, !dbg !6215
  %2 = load %struct.rtx_def*, %struct.rtx_def** %1, align 8, !dbg !6216
  store %struct.rtx_def* %2, %struct.rtx_def** %x, align 8, !dbg !6217
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6218
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !6220
  br i1 %cmp, label %if.then, label %if.end, !dbg !6221

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6222
  br label %return, !dbg !6222

if.end:                                           ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6223
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6223
  %bf.load = load i32, i32* %5, align 8, !dbg !6223
  %bf.clear = and i32 %bf.load, 65535, !dbg !6223
  switch i32 %bf.clear, label %sw.default [
    i32 37, label %sw.bb
    i32 49, label %sw.bb7
  ], !dbg !6224

sw.bb:                                            ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6225
  %call = call %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %6, i64* %offset), !dbg !6227
  store %struct.rtx_def* %call, %struct.rtx_def** %new_rtx, align 8, !dbg !6228
  %7 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !6229
  %tobool = icmp ne %struct.rtx_def* %7, null, !dbg !6229
  br i1 %tobool, label %if.then1, label %if.end6, !dbg !6231

if.then1:                                         ; preds = %sw.bb
  %8 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !6232
  %9 = load i64, i64* %offset, align 8, !dbg !6234
  %call2 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %8, i64 %9), !dbg !6235
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8, !dbg !6236
  store %struct.rtx_def* %call2, %struct.rtx_def** %10, align 8, !dbg !6237
  %11 = load i8*, i8** %changed, align 8, !dbg !6238
  %tobool3 = icmp ne i8* %11, null, !dbg !6238
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !6240

if.then4:                                         ; preds = %if.then1
  %12 = load i8*, i8** %changed, align 8, !dbg !6241
  store i8 1, i8* %12, align 1, !dbg !6242
  br label %if.end5, !dbg !6243

if.end5:                                          ; preds = %if.then4, %if.then1
  br label %if.end6, !dbg !6244

if.end6:                                          ; preds = %if.end5, %sw.bb
  store i32 -1, i32* %retval, align 4, !dbg !6245
  br label %return, !dbg !6245

sw.bb7:                                           ; preds = %if.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6246
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !6246
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6246
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6246
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6246
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6246
  %call8 = call %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %14, i64* %offset), !dbg !6247
  store %struct.rtx_def* %call8, %struct.rtx_def** %new_rtx, align 8, !dbg !6248
  %15 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !6249
  %tobool9 = icmp ne %struct.rtx_def* %15, null, !dbg !6249
  br i1 %tobool9, label %if.then10, label %if.end22, !dbg !6251

if.then10:                                        ; preds = %sw.bb7
  %16 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !6252
  %17 = load i64, i64* %offset, align 8, !dbg !6254
  %call11 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %16, i64 %17), !dbg !6255
  store %struct.rtx_def* %call11, %struct.rtx_def** %new_rtx, align 8, !dbg !6256
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6257
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !6257
  %bf.load12 = load i32, i32* %19, align 8, !dbg !6257
  %bf.lshr = lshr i32 %bf.load12, 16, !dbg !6257
  %bf.clear13 = and i32 %bf.lshr, 255, !dbg !6257
  %20 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !6258
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6259
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !6259
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !6259
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 1, !dbg !6259
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !6259
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !6259
  %call18 = call %struct.rtx_def* @simplify_gen_binary(i32 49, i32 %bf.clear13, %struct.rtx_def* %20, %struct.rtx_def* %22), !dbg !6260
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8, !dbg !6261
  store %struct.rtx_def* %call18, %struct.rtx_def** %23, align 8, !dbg !6262
  %24 = load i8*, i8** %changed, align 8, !dbg !6263
  %tobool19 = icmp ne i8* %24, null, !dbg !6263
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !6265

if.then20:                                        ; preds = %if.then10
  %25 = load i8*, i8** %changed, align 8, !dbg !6266
  store i8 1, i8* %25, align 1, !dbg !6267
  br label %if.end21, !dbg !6268

if.end21:                                         ; preds = %if.then20, %if.then10
  store i32 -1, i32* %retval, align 4, !dbg !6269
  br label %return, !dbg !6269

if.end22:                                         ; preds = %sw.bb7
  br label %sw.epilog, !dbg !6270

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !6271

sw.epilog:                                        ; preds = %sw.default, %if.end22
  store i32 0, i32* %retval, align 4, !dbg !6272
  br label %return, !dbg !6272

return:                                           ; preds = %sw.epilog, %if.end21, %if.end6, %if.then
  %26 = load i32, i32* %retval, align 4, !dbg !6273
  ret i32 %26, !dbg !6273
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @instantiate_virtual_regs() #0 !dbg !6274 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6275, metadata !DIExpression()), !dbg !6276
  store i32 0, i32* @in_arg_offset, align 4, !dbg !6277
  store i32 0, i32* @var_offset, align 4, !dbg !6278
  %0 = load i32, i32* @target_flags, align 4, !dbg !6279
  %and = and i32 %0, 4, !dbg !6279
  %cmp = icmp ne i32 %and, 0, !dbg !6279
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !6279

lor.lhs.false:                                    ; preds = %entry
  %call = call i32 @ix86_cfun_abi(), !dbg !6279
  %cmp1 = icmp eq i32 %call, 1, !dbg !6279
  br i1 %cmp1, label %cond.true, label %cond.false10, !dbg !6279

cond.true:                                        ; preds = %lor.lhs.false, %entry
  %1 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 6), align 8, !dbg !6279
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6279
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6279
  br i1 %tobool, label %cond.false, label %cond.true2, !dbg !6279

cond.true2:                                       ; preds = %cond.true
  br label %cond.end, !dbg !6279

cond.false:                                       ; preds = %cond.true
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6279
  %common = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !6279
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6279
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6279
  br label %cond.end, !dbg !6279

cond.end:                                         ; preds = %cond.false, %cond.true2
  %cond = phi %union.tree_node* [ null, %cond.true2 ], [ %4, %cond.false ], !dbg !6279
  %call3 = call i32 @ix86_function_type_abi(%union.tree_node* %cond), !dbg !6279
  %cmp4 = icmp eq i32 %call3, 1, !dbg !6279
  br i1 %cmp4, label %cond.true5, label %cond.false6, !dbg !6279

cond.true5:                                       ; preds = %cond.end
  br label %cond.end8, !dbg !6279

cond.false6:                                      ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6279
  %call7 = call i32 @ix86_reg_parm_stack_space(%union.tree_node* %5), !dbg !6279
  br label %cond.end8, !dbg !6279

cond.end8:                                        ; preds = %cond.false6, %cond.true5
  %cond9 = phi i32 [ 0, %cond.true5 ], [ %call7, %cond.false6 ], !dbg !6279
  %add = add nsw i32 %1, %cond9, !dbg !6279
  br label %cond.end11, !dbg !6279

cond.false10:                                     ; preds = %lor.lhs.false
  br label %cond.end11, !dbg !6279

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %add, %cond.end8 ], [ 0, %cond.false10 ], !dbg !6279
  %add13 = add nsw i32 %cond12, 0, !dbg !6279
  store i32 %add13, i32* @dynamic_offset, align 4, !dbg !6280
  store i32 0, i32* @out_arg_offset, align 4, !dbg !6281
  %6 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 2), align 8, !dbg !6282
  %add14 = add nsw i32 0, %6, !dbg !6282
  store i32 %add14, i32* @cfa_offset, align 4, !dbg !6283
  call void @init_recog(), !dbg !6284
  %call15 = call %struct.rtx_def* @get_insns(), !dbg !6285
  store %struct.rtx_def* %call15, %struct.rtx_def** %insn, align 8, !dbg !6287
  br label %for.cond, !dbg !6288

for.cond:                                         ; preds = %for.inc, %cond.end11
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6289
  %tobool16 = icmp ne %struct.rtx_def* %7, null, !dbg !6291
  br i1 %tobool16, label %for.body, label %for.end, !dbg !6291

for.body:                                         ; preds = %for.cond
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6292
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6292
  %bf.load = load i32, i32* %9, align 8, !dbg !6292
  %bf.clear = and i32 %bf.load, 65535, !dbg !6292
  %cmp17 = icmp eq i32 %bf.clear, 8, !dbg !6292
  br i1 %cmp17, label %if.then, label %lor.lhs.false18, !dbg !6292

lor.lhs.false18:                                  ; preds = %for.body
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6292
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !6292
  %bf.load19 = load i32, i32* %11, align 8, !dbg !6292
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !6292
  %cmp21 = icmp eq i32 %bf.clear20, 7, !dbg !6292
  br i1 %cmp21, label %if.then, label %lor.lhs.false22, !dbg !6292

lor.lhs.false22:                                  ; preds = %lor.lhs.false18
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6292
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !6292
  %bf.load23 = load i32, i32* %13, align 8, !dbg !6292
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !6292
  %cmp25 = icmp eq i32 %bf.clear24, 9, !dbg !6292
  br i1 %cmp25, label %if.then, label %lor.lhs.false26, !dbg !6292

lor.lhs.false26:                                  ; preds = %lor.lhs.false22
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6292
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !6292
  %bf.load27 = load i32, i32* %15, align 8, !dbg !6292
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !6292
  %cmp29 = icmp eq i32 %bf.clear28, 10, !dbg !6292
  br i1 %cmp29, label %if.then, label %if.end97, !dbg !6294

if.then:                                          ; preds = %lor.lhs.false26, %lor.lhs.false22, %lor.lhs.false18, %for.body
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6295
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6295
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6295
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6295
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6295
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6295
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !6295
  %bf.load30 = load i32, i32* %18, align 8, !dbg !6295
  %bf.clear31 = and i32 %bf.load30, 65535, !dbg !6295
  %cmp32 = icmp eq i32 %bf.clear31, 24, !dbg !6298
  br i1 %cmp32, label %if.then65, label %lor.lhs.false33, !dbg !6299

lor.lhs.false33:                                  ; preds = %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6300
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !6300
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !6300
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 5, !dbg !6300
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !6300
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx37, align 8, !dbg !6300
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !6300
  %bf.load38 = load i32, i32* %21, align 8, !dbg !6300
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !6300
  %cmp40 = icmp eq i32 %bf.clear39, 25, !dbg !6301
  br i1 %cmp40, label %if.then65, label %lor.lhs.false41, !dbg !6302

lor.lhs.false41:                                  ; preds = %lor.lhs.false33
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6303
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !6303
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !6303
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 5, !dbg !6303
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !6303
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx45, align 8, !dbg !6303
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !6303
  %bf.load46 = load i32, i32* %24, align 8, !dbg !6303
  %bf.clear47 = and i32 %bf.load46, 65535, !dbg !6303
  %cmp48 = icmp eq i32 %bf.clear47, 20, !dbg !6304
  br i1 %cmp48, label %if.then65, label %lor.lhs.false49, !dbg !6305

lor.lhs.false49:                                  ; preds = %lor.lhs.false41
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6306
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !6306
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !6306
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 5, !dbg !6306
  %rt_rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**, !dbg !6306
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx53, align 8, !dbg !6306
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !6306
  %bf.load54 = load i32, i32* %27, align 8, !dbg !6306
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !6306
  %cmp56 = icmp eq i32 %bf.clear55, 21, !dbg !6307
  br i1 %cmp56, label %if.then65, label %lor.lhs.false57, !dbg !6308

lor.lhs.false57:                                  ; preds = %lor.lhs.false49
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6309
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !6309
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !6309
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 5, !dbg !6309
  %rt_rtx61 = bitcast %union.rtunion_def* %arrayidx60 to %struct.rtx_def**, !dbg !6309
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx61, align 8, !dbg !6309
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !6309
  %bf.load62 = load i32, i32* %30, align 8, !dbg !6309
  %bf.clear63 = and i32 %bf.load62, 65535, !dbg !6309
  %cmp64 = icmp eq i32 %bf.clear63, 16, !dbg !6310
  br i1 %cmp64, label %if.then65, label %if.else, !dbg !6311

if.then65:                                        ; preds = %lor.lhs.false57, %lor.lhs.false49, %lor.lhs.false41, %lor.lhs.false33, %if.then
  br label %for.inc, !dbg !6312

if.else:                                          ; preds = %lor.lhs.false57
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6313
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !6313
  %bf.load66 = load i32, i32* %32, align 8, !dbg !6313
  %bf.clear67 = and i32 %bf.load66, 65535, !dbg !6313
  %cmp68 = icmp eq i32 %bf.clear67, 7, !dbg !6313
  br i1 %cmp68, label %if.then69, label %if.else75, !dbg !6315

if.then69:                                        ; preds = %if.else
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6316
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !6316
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !6316
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 5, !dbg !6316
  %rt_rtx73 = bitcast %union.rtunion_def* %arrayidx72 to %struct.rtx_def**, !dbg !6316
  %call74 = call i32 @for_each_rtx(%struct.rtx_def** %rt_rtx73, i32 (%struct.rtx_def**, i8*)* @instantiate_virtual_regs_in_rtx, i8* null), !dbg !6317
  br label %if.end, !dbg !6317

if.else75:                                        ; preds = %if.else
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6318
  call void @instantiate_virtual_regs_in_insn(%struct.rtx_def* %34), !dbg !6319
  br label %if.end

if.end:                                           ; preds = %if.else75, %if.then69
  br label %if.end76

if.end76:                                         ; preds = %if.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6320
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !6320
  %bf.load77 = load i32, i32* %36, align 8, !dbg !6320
  %bf.lshr = lshr i32 %bf.load77, 27, !dbg !6320
  %bf.clear78 = and i32 %bf.lshr, 1, !dbg !6320
  %tobool79 = icmp ne i32 %bf.clear78, 0, !dbg !6320
  br i1 %tobool79, label %if.then80, label %if.end81, !dbg !6322

if.then80:                                        ; preds = %if.end76
  br label %for.inc, !dbg !6323

if.end81:                                         ; preds = %if.end76
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6324
  %u82 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !6324
  %fld83 = bitcast %union.u* %u82 to [1 x %union.rtunion_def]*, !dbg !6324
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld83, i64 0, i64 7, !dbg !6324
  %rt_rtx85 = bitcast %union.rtunion_def* %arrayidx84 to %struct.rtx_def**, !dbg !6324
  %call86 = call i32 @for_each_rtx(%struct.rtx_def** %rt_rtx85, i32 (%struct.rtx_def**, i8*)* @instantiate_virtual_regs_in_rtx, i8* null), !dbg !6325
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6326
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !6326
  %bf.load87 = load i32, i32* %39, align 8, !dbg !6326
  %bf.clear88 = and i32 %bf.load87, 65535, !dbg !6326
  %cmp89 = icmp eq i32 %bf.clear88, 10, !dbg !6326
  br i1 %cmp89, label %if.then90, label %if.end96, !dbg !6328

if.then90:                                        ; preds = %if.end81
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6329
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !6329
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !6329
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 8, !dbg !6329
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !6329
  %call95 = call i32 @for_each_rtx(%struct.rtx_def** %rt_rtx94, i32 (%struct.rtx_def**, i8*)* @instantiate_virtual_regs_in_rtx, i8* null), !dbg !6330
  br label %if.end96, !dbg !6330

if.end96:                                         ; preds = %if.then90, %if.end81
  br label %if.end97, !dbg !6331

if.end97:                                         ; preds = %if.end96, %lor.lhs.false26
  br label %for.inc, !dbg !6292

for.inc:                                          ; preds = %if.end97, %if.then80, %if.then65
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6332
  %u98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !6332
  %fld99 = bitcast %union.u* %u98 to [1 x %union.rtunion_def]*, !dbg !6332
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i64 0, i64 2, !dbg !6332
  %rt_rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**, !dbg !6332
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx101, align 8, !dbg !6332
  store %struct.rtx_def* %42, %struct.rtx_def** %insn, align 8, !dbg !6333
  br label %for.cond, !dbg !6334, !llvm.loop !6335

for.end:                                          ; preds = %for.cond
  %43 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6337
  call void @instantiate_decls(%union.tree_node* %43), !dbg !6338
  %44 = load void ()*, void ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 99), align 8, !dbg !6339
  call void %44(), !dbg !6340
  store i32 1, i32* @virtuals_instantiated, align 4, !dbg !6341
  ret i32 0, !dbg !6342
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @aggregate_value_p(%union.tree_node* %exp, %union.tree_node* %fntype) #0 !dbg !6343 {
entry:
  %retval = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %fntype.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %regno = alloca i32, align 4
  %nregs = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %type = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6349, metadata !DIExpression()), !dbg !6350
  store %union.tree_node* %fntype, %union.tree_node** %fntype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype.addr, metadata !6351, metadata !DIExpression()), !dbg !6352
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6353, metadata !DIExpression()), !dbg !6354
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !6355, metadata !DIExpression()), !dbg !6356
  call void @llvm.dbg.declare(metadata i32* %nregs, metadata !6357, metadata !DIExpression()), !dbg !6358
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !6359, metadata !DIExpression()), !dbg !6360
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6361, metadata !DIExpression()), !dbg !6362
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6363
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !6363
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !6363
  %bf.load = load i64, i64* %1, align 8, !dbg !6363
  %bf.clear = and i64 %bf.load, 65535, !dbg !6363
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6363
  %idxprom = sext i32 %bf.cast to i64, !dbg !6363
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6363
  %2 = load i32, i32* %arrayidx, align 4, !dbg !6363
  %cmp = icmp eq i32 %2, 2, !dbg !6363
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6364

cond.true:                                        ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6365
  br label %cond.end, !dbg !6364

cond.false:                                       ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6366
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !6366
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6366
  %5 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6366
  br label %cond.end, !dbg !6364

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %3, %cond.true ], [ %5, %cond.false ], !dbg !6364
  store %union.tree_node* %cond, %union.tree_node** %type, align 8, !dbg !6362
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !6367, metadata !DIExpression()), !dbg !6368
  store %union.tree_node* null, %union.tree_node** %fndecl, align 8, !dbg !6368
  %6 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !6369
  %tobool = icmp ne %union.tree_node* %6, null, !dbg !6369
  br i1 %tobool, label %if.then, label %if.end, !dbg !6371

if.then:                                          ; preds = %cond.end
  %7 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !6372
  %base2 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !6372
  %8 = bitcast %struct.tree_base* %base2 to i64*, !dbg !6372
  %bf.load3 = load i64, i64* %8, align 8, !dbg !6372
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !6372
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !6372
  switch i32 %bf.cast5, label %sw.default [
    i32 59, label %sw.bb
    i32 29, label %sw.bb19
    i32 20, label %sw.bb22
    i32 21, label %sw.bb22
    i32 1, label %sw.bb23
  ], !dbg !6373

sw.bb:                                            ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !6374
  %call = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %9), !dbg !6376
  store %union.tree_node* %call, %union.tree_node** %fndecl, align 8, !dbg !6377
  %10 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6378
  %tobool6 = icmp ne %union.tree_node* %10, null, !dbg !6378
  br i1 %tobool6, label %cond.true7, label %cond.false10, !dbg !6378

cond.true7:                                       ; preds = %sw.bb
  %11 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6379
  %common8 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6379
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common8, i32 0, i32 2, !dbg !6379
  %12 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !6379
  br label %cond.end17, !dbg !6378

cond.false10:                                     ; preds = %sw.bb
  %13 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !6380
  %exp11 = bitcast %union.tree_node* %13 to %struct.tree_exp*, !dbg !6380
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp11, i32 0, i32 3, !dbg !6380
  %arrayidx12 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !6380
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !6380
  %common13 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !6380
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !6380
  %15 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !6380
  %common15 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !6380
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common15, i32 0, i32 2, !dbg !6380
  %16 = load %union.tree_node*, %union.tree_node** %type16, align 8, !dbg !6380
  br label %cond.end17, !dbg !6378

cond.end17:                                       ; preds = %cond.false10, %cond.true7
  %cond18 = phi %union.tree_node* [ %12, %cond.true7 ], [ %16, %cond.false10 ], !dbg !6378
  store %union.tree_node* %cond18, %union.tree_node** %fntype.addr, align 8, !dbg !6381
  br label %sw.epilog, !dbg !6382

sw.bb19:                                          ; preds = %if.then
  %17 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !6383
  store %union.tree_node* %17, %union.tree_node** %fndecl, align 8, !dbg !6384
  %18 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6385
  %common20 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !6385
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !6385
  %19 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !6385
  store %union.tree_node* %19, %union.tree_node** %fntype.addr, align 8, !dbg !6386
  br label %sw.epilog, !dbg !6387

sw.bb22:                                          ; preds = %if.then, %if.then
  br label %sw.epilog, !dbg !6388

sw.bb23:                                          ; preds = %if.then
  store %union.tree_node* null, %union.tree_node** %fntype.addr, align 8, !dbg !6389
  br label %sw.epilog, !dbg !6390

sw.default:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1887, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !6391
  br label %sw.epilog, !dbg !6392

sw.epilog:                                        ; preds = %sw.default, %sw.bb23, %sw.bb22, %sw.bb19, %cond.end17
  br label %if.end, !dbg !6392

if.end:                                           ; preds = %sw.epilog, %cond.end
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6393
  %base24 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !6393
  %21 = bitcast %struct.tree_base* %base24 to i64*, !dbg !6393
  %bf.load25 = load i64, i64* %21, align 8, !dbg !6393
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !6393
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !6393
  %cmp28 = icmp eq i32 %bf.cast27, 19, !dbg !6395
  br i1 %cmp28, label %if.then29, label %if.end30, !dbg !6396

if.then29:                                        ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6397
  br label %return, !dbg !6397

if.end30:                                         ; preds = %if.end
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6398
  %base31 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !6398
  %23 = bitcast %struct.tree_base* %base31 to i64*, !dbg !6398
  %bf.load32 = load i64, i64* %23, align 8, !dbg !6398
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !6398
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !6398
  %cmp35 = icmp eq i32 %bf.cast34, 16, !dbg !6400
  br i1 %cmp35, label %land.lhs.true, label %if.end43, !dbg !6401

land.lhs.true:                                    ; preds = %if.end30
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6402
  %type36 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !6402
  %transparent_aggr_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 6, !dbg !6402
  %bf.load37 = load i32, i32* %transparent_aggr_flag, align 4, !dbg !6402
  %bf.lshr = lshr i32 %bf.load37, 12, !dbg !6402
  %bf.clear38 = and i32 %bf.lshr, 1, !dbg !6402
  %tobool39 = icmp ne i32 %bf.clear38, 0, !dbg !6402
  br i1 %tobool39, label %if.then40, label %if.end43, !dbg !6403

if.then40:                                        ; preds = %land.lhs.true
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6404
  %call41 = call %union.tree_node* @first_field(%union.tree_node* %25), !dbg !6405
  %26 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !6406
  %call42 = call i32 @aggregate_value_p(%union.tree_node* %call41, %union.tree_node* %26), !dbg !6407
  store i32 %call42, i32* %retval, align 4, !dbg !6408
  br label %return, !dbg !6408

if.end43:                                         ; preds = %land.lhs.true, %if.end30
  %27 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6409
  %base44 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !6409
  %28 = bitcast %struct.tree_base* %base44 to i64*, !dbg !6409
  %bf.load45 = load i64, i64* %28, align 8, !dbg !6409
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !6409
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !6409
  %cmp48 = icmp eq i32 %bf.cast47, 34, !dbg !6411
  br i1 %cmp48, label %land.lhs.true54, label %lor.lhs.false, !dbg !6412

lor.lhs.false:                                    ; preds = %if.end43
  %29 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6413
  %base49 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !6413
  %30 = bitcast %struct.tree_base* %base49 to i64*, !dbg !6413
  %bf.load50 = load i64, i64* %30, align 8, !dbg !6413
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !6413
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !6413
  %cmp53 = icmp eq i32 %bf.cast52, 36, !dbg !6414
  br i1 %cmp53, label %land.lhs.true54, label %if.end61, !dbg !6415

land.lhs.true54:                                  ; preds = %lor.lhs.false, %if.end43
  %31 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6416
  %decl_common = bitcast %union.tree_node* %31 to %struct.tree_decl_common*, !dbg !6416
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6416
  %32 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !6416
  %bf.load55 = load i64, i64* %32, align 8, !dbg !6416
  %bf.lshr56 = lshr i64 %bf.load55, 28, !dbg !6416
  %bf.clear57 = and i64 %bf.lshr56, 1, !dbg !6416
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !6416
  %tobool59 = icmp ne i32 %bf.cast58, 0, !dbg !6416
  br i1 %tobool59, label %if.then60, label %if.end61, !dbg !6417

if.then60:                                        ; preds = %land.lhs.true54
  store i32 1, i32* %retval, align 4, !dbg !6418
  br label %return, !dbg !6418

if.end61:                                         ; preds = %land.lhs.true54, %lor.lhs.false
  %33 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6419
  %base62 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !6419
  %34 = bitcast %struct.tree_base* %base62 to i64*, !dbg !6419
  %bf.load63 = load i64, i64* %34, align 8, !dbg !6419
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !6419
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !6419
  %cmp66 = icmp eq i32 %bf.cast65, 59, !dbg !6421
  br i1 %cmp66, label %land.lhs.true67, label %if.end82, !dbg !6422

land.lhs.true67:                                  ; preds = %if.end61
  %35 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6423
  %tobool68 = icmp ne %union.tree_node* %35, null, !dbg !6423
  br i1 %tobool68, label %land.lhs.true69, label %if.end82, !dbg !6424

land.lhs.true69:                                  ; preds = %land.lhs.true67
  %36 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6425
  %decl_non_common = bitcast %union.tree_node* %36 to %struct.tree_decl_non_common*, !dbg !6425
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !6425
  %37 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6425
  %tobool70 = icmp ne %union.tree_node* %37, null, !dbg !6425
  br i1 %tobool70, label %land.lhs.true71, label %if.end82, !dbg !6426

land.lhs.true71:                                  ; preds = %land.lhs.true69
  %38 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6427
  %decl_non_common72 = bitcast %union.tree_node* %38 to %struct.tree_decl_non_common*, !dbg !6427
  %result73 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common72, i32 0, i32 3, !dbg !6427
  %39 = load %union.tree_node*, %union.tree_node** %result73, align 8, !dbg !6427
  %decl_common74 = bitcast %union.tree_node* %39 to %struct.tree_decl_common*, !dbg !6427
  %decl_by_reference_flag75 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common74, i32 0, i32 2, !dbg !6427
  %40 = bitcast i40* %decl_by_reference_flag75 to i64*, !dbg !6427
  %bf.load76 = load i64, i64* %40, align 8, !dbg !6427
  %bf.lshr77 = lshr i64 %bf.load76, 28, !dbg !6427
  %bf.clear78 = and i64 %bf.lshr77, 1, !dbg !6427
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !6427
  %tobool80 = icmp ne i32 %bf.cast79, 0, !dbg !6427
  br i1 %tobool80, label %if.then81, label %if.end82, !dbg !6428

if.then81:                                        ; preds = %land.lhs.true71
  store i32 1, i32* %retval, align 4, !dbg !6429
  br label %return, !dbg !6429

if.end82:                                         ; preds = %land.lhs.true71, %land.lhs.true69, %land.lhs.true67, %if.end61
  %41 = load i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 3), align 8, !dbg !6430
  %42 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6432
  %43 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !6433
  %call83 = call zeroext i8 %41(%union.tree_node* %42, %union.tree_node* %43), !dbg !6434
  %tobool84 = icmp ne i8 %call83, 0, !dbg !6434
  br i1 %tobool84, label %if.then85, label %if.end86, !dbg !6435

if.then85:                                        ; preds = %if.end82
  store i32 1, i32* %retval, align 4, !dbg !6436
  br label %return, !dbg !6436

if.end86:                                         ; preds = %if.end82
  %44 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6437
  %base87 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !6437
  %45 = bitcast %struct.tree_base* %base87 to i64*, !dbg !6437
  %bf.load88 = load i64, i64* %45, align 8, !dbg !6437
  %bf.lshr89 = lshr i64 %bf.load88, 18, !dbg !6437
  %bf.clear90 = and i64 %bf.lshr89, 1, !dbg !6437
  %bf.cast91 = trunc i64 %bf.clear90 to i32, !dbg !6437
  %tobool92 = icmp ne i32 %bf.cast91, 0, !dbg !6437
  br i1 %tobool92, label %if.then93, label %if.end94, !dbg !6439

if.then93:                                        ; preds = %if.end86
  store i32 1, i32* %retval, align 4, !dbg !6440
  br label %return, !dbg !6440

if.end94:                                         ; preds = %if.end86
  %46 = load i32, i32* @flag_pcc_struct_return, align 4, !dbg !6441
  %tobool95 = icmp ne i32 %46, 0, !dbg !6441
  br i1 %tobool95, label %land.lhs.true96, label %if.end121, !dbg !6443

land.lhs.true96:                                  ; preds = %if.end94
  %47 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6444
  %base97 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !6444
  %48 = bitcast %struct.tree_base* %base97 to i64*, !dbg !6444
  %bf.load98 = load i64, i64* %48, align 8, !dbg !6444
  %bf.clear99 = and i64 %bf.load98, 65535, !dbg !6444
  %bf.cast100 = trunc i64 %bf.clear99 to i32, !dbg !6444
  %cmp101 = icmp eq i32 %bf.cast100, 15, !dbg !6444
  br i1 %cmp101, label %if.then120, label %lor.lhs.false102, !dbg !6444

lor.lhs.false102:                                 ; preds = %land.lhs.true96
  %49 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6444
  %base103 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !6444
  %50 = bitcast %struct.tree_base* %base103 to i64*, !dbg !6444
  %bf.load104 = load i64, i64* %50, align 8, !dbg !6444
  %bf.clear105 = and i64 %bf.load104, 65535, !dbg !6444
  %bf.cast106 = trunc i64 %bf.clear105 to i32, !dbg !6444
  %cmp107 = icmp eq i32 %bf.cast106, 16, !dbg !6444
  br i1 %cmp107, label %if.then120, label %lor.lhs.false108, !dbg !6444

lor.lhs.false108:                                 ; preds = %lor.lhs.false102
  %51 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6444
  %base109 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !6444
  %52 = bitcast %struct.tree_base* %base109 to i64*, !dbg !6444
  %bf.load110 = load i64, i64* %52, align 8, !dbg !6444
  %bf.clear111 = and i64 %bf.load110, 65535, !dbg !6444
  %bf.cast112 = trunc i64 %bf.clear111 to i32, !dbg !6444
  %cmp113 = icmp eq i32 %bf.cast112, 17, !dbg !6444
  br i1 %cmp113, label %if.then120, label %lor.lhs.false114, !dbg !6444

lor.lhs.false114:                                 ; preds = %lor.lhs.false108
  %53 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6444
  %base115 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !6444
  %54 = bitcast %struct.tree_base* %base115 to i64*, !dbg !6444
  %bf.load116 = load i64, i64* %54, align 8, !dbg !6444
  %bf.clear117 = and i64 %bf.load116, 65535, !dbg !6444
  %bf.cast118 = trunc i64 %bf.clear117 to i32, !dbg !6444
  %cmp119 = icmp eq i32 %bf.cast118, 18, !dbg !6444
  br i1 %cmp119, label %if.then120, label %if.end121, !dbg !6445

if.then120:                                       ; preds = %lor.lhs.false114, %lor.lhs.false108, %lor.lhs.false102, %land.lhs.true96
  store i32 1, i32* %retval, align 4, !dbg !6446
  br label %return, !dbg !6446

if.end121:                                        ; preds = %lor.lhs.false114, %if.end94
  %55 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6447
  %56 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !6448
  %call122 = call %struct.rtx_def* @hard_function_value(%union.tree_node* %55, %union.tree_node* null, %union.tree_node* %56, i32 0), !dbg !6449
  store %struct.rtx_def* %call122, %struct.rtx_def** %reg, align 8, !dbg !6450
  %57 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6451
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !6451
  %bf.load123 = load i32, i32* %58, align 8, !dbg !6451
  %bf.clear124 = and i32 %bf.load123, 65535, !dbg !6451
  %cmp125 = icmp eq i32 %bf.clear124, 37, !dbg !6451
  br i1 %cmp125, label %if.end127, label %if.then126, !dbg !6453

if.then126:                                       ; preds = %if.end121
  store i32 0, i32* %retval, align 4, !dbg !6454
  br label %return, !dbg !6454

if.end127:                                        ; preds = %if.end121
  %59 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6455
  %call128 = call i32 @rhs_regno(%struct.rtx_def* %59), !dbg !6455
  store i32 %call128, i32* %regno, align 4, !dbg !6456
  %60 = load i32, i32* %regno, align 4, !dbg !6457
  %idxprom129 = sext i32 %60 to i64, !dbg !6458
  %arrayidx130 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom129, !dbg !6458
  %61 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6459
  %base131 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !6459
  %62 = bitcast %struct.tree_base* %base131 to i64*, !dbg !6459
  %bf.load132 = load i64, i64* %62, align 8, !dbg !6459
  %bf.clear133 = and i64 %bf.load132, 65535, !dbg !6459
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !6459
  %cmp135 = icmp eq i32 %bf.cast134, 14, !dbg !6459
  br i1 %cmp135, label %cond.true136, label %cond.false138, !dbg !6459

cond.true136:                                     ; preds = %if.end127
  %63 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6459
  %call137 = call i32 @vector_type_mode(%union.tree_node* %63), !dbg !6459
  br label %cond.end143, !dbg !6459

cond.false138:                                    ; preds = %if.end127
  %64 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6459
  %type139 = bitcast %union.tree_node* %64 to %struct.tree_type*, !dbg !6459
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type139, i32 0, i32 6, !dbg !6459
  %bf.load140 = load i32, i32* %mode, align 4, !dbg !6459
  %bf.lshr141 = lshr i32 %bf.load140, 16, !dbg !6459
  %bf.clear142 = and i32 %bf.lshr141, 255, !dbg !6459
  br label %cond.end143, !dbg !6459

cond.end143:                                      ; preds = %cond.false138, %cond.true136
  %cond144 = phi i32 [ %call137, %cond.true136 ], [ %bf.clear142, %cond.false138 ], !dbg !6459
  %idxprom145 = zext i32 %cond144 to i64, !dbg !6458
  %arrayidx146 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx130, i64 0, i64 %idxprom145, !dbg !6458
  %65 = load i8, i8* %arrayidx146, align 1, !dbg !6458
  %conv = zext i8 %65 to i32, !dbg !6458
  store i32 %conv, i32* %nregs, align 4, !dbg !6460
  store i32 0, i32* %i, align 4, !dbg !6461
  br label %for.cond, !dbg !6463

for.cond:                                         ; preds = %for.inc, %cond.end143
  %66 = load i32, i32* %i, align 4, !dbg !6464
  %67 = load i32, i32* %nregs, align 4, !dbg !6466
  %cmp147 = icmp slt i32 %66, %67, !dbg !6467
  br i1 %cmp147, label %for.body, label %for.end, !dbg !6468

for.body:                                         ; preds = %for.cond
  %68 = load i32, i32* %regno, align 4, !dbg !6469
  %69 = load i32, i32* %i, align 4, !dbg !6471
  %add = add nsw i32 %68, %69, !dbg !6472
  %idxprom149 = sext i32 %add to i64, !dbg !6473
  %arrayidx150 = getelementptr inbounds [53 x i8], [53 x i8]* @call_used_regs, i64 0, i64 %idxprom149, !dbg !6473
  %70 = load i8, i8* %arrayidx150, align 1, !dbg !6473
  %tobool151 = icmp ne i8 %70, 0, !dbg !6473
  br i1 %tobool151, label %if.end153, label %if.then152, !dbg !6474

if.then152:                                       ; preds = %for.body
  store i32 1, i32* %retval, align 4, !dbg !6475
  br label %return, !dbg !6475

if.end153:                                        ; preds = %for.body
  br label %for.inc, !dbg !6476

for.inc:                                          ; preds = %if.end153
  %71 = load i32, i32* %i, align 4, !dbg !6477
  %inc = add nsw i32 %71, 1, !dbg !6477
  store i32 %inc, i32* %i, align 4, !dbg !6477
  br label %for.cond, !dbg !6478, !llvm.loop !6479

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !6481
  br label %return, !dbg !6481

return:                                           ; preds = %for.end, %if.then152, %if.then126, %if.then120, %if.then93, %if.then85, %if.then81, %if.then60, %if.then40, %if.then29
  %72 = load i32, i32* %retval, align 4, !dbg !6482
  ret i32 %72, !dbg !6482
}

declare dso_local %union.tree_node* @get_callee_fndecl(%union.tree_node*) #2

declare dso_local %union.tree_node* @first_field(%union.tree_node*) #2

declare dso_local %struct.rtx_def* @hard_function_value(%union.tree_node*, %union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @use_register_for_decl(%union.tree_node* %decl) #0 !dbg !6483 {
entry:
  %retval = alloca i8, align 1
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6486, metadata !DIExpression()), !dbg !6487
  %0 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 20), align 8, !dbg !6488
  %call = call zeroext i8 %0(), !dbg !6490
  %tobool = icmp ne i8 %call, 0, !dbg !6490
  br i1 %tobool, label %if.end, label %if.then, !dbg !6491

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !6492
  br label %return, !dbg !6492

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6493
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6493
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6493
  %bf.load = load i64, i64* %2, align 8, !dbg !6493
  %bf.lshr = lshr i64 %bf.load, 16, !dbg !6493
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6493
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6493
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !6493
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !6495

if.then2:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !6496
  br label %return, !dbg !6496

if.end3:                                          ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6497
  %base4 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6497
  %4 = bitcast %struct.tree_base* %base4 to i64*, !dbg !6497
  %bf.load5 = load i64, i64* %4, align 8, !dbg !6497
  %bf.lshr6 = lshr i64 %bf.load5, 18, !dbg !6497
  %bf.clear7 = and i64 %bf.lshr6, 1, !dbg !6497
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !6497
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !6497
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !6499

if.then10:                                        ; preds = %if.end3
  store i8 0, i8* %retval, align 1, !dbg !6500
  br label %return, !dbg !6500

if.end11:                                         ; preds = %if.end3
  %5 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6501
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !6501
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6501
  %6 = bitcast i40* %mode to i64*, !dbg !6501
  %bf.load12 = load i64, i64* %6, align 8, !dbg !6501
  %bf.clear13 = and i64 %bf.load12, 255, !dbg !6501
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !6501
  %cmp = icmp eq i32 %bf.cast14, 1, !dbg !6503
  br i1 %cmp, label %if.then15, label %if.end16, !dbg !6504

if.then15:                                        ; preds = %if.end11
  store i8 0, i8* %retval, align 1, !dbg !6505
  br label %return, !dbg !6505

if.end16:                                         ; preds = %if.end11
  %7 = load i32, i32* @flag_float_store, align 4, !dbg !6506
  %tobool17 = icmp ne i32 %7, 0, !dbg !6506
  br i1 %tobool17, label %land.lhs.true, label %if.end49, !dbg !6508

land.lhs.true:                                    ; preds = %if.end16
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6509
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !6509
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6509
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6509
  %base18 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !6509
  %10 = bitcast %struct.tree_base* %base18 to i64*, !dbg !6509
  %bf.load19 = load i64, i64* %10, align 8, !dbg !6509
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !6509
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !6509
  %cmp22 = icmp eq i32 %bf.cast21, 9, !dbg !6509
  br i1 %cmp22, label %if.then48, label %lor.lhs.false, !dbg !6509

lor.lhs.false:                                    ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6509
  %common23 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6509
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !6509
  %12 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !6509
  %base25 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6509
  %13 = bitcast %struct.tree_base* %base25 to i64*, !dbg !6509
  %bf.load26 = load i64, i64* %13, align 8, !dbg !6509
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !6509
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !6509
  %cmp29 = icmp eq i32 %bf.cast28, 13, !dbg !6509
  br i1 %cmp29, label %land.lhs.true38, label %lor.lhs.false30, !dbg !6509

lor.lhs.false30:                                  ; preds = %lor.lhs.false
  %14 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6509
  %common31 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !6509
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !6509
  %15 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !6509
  %base33 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !6509
  %16 = bitcast %struct.tree_base* %base33 to i64*, !dbg !6509
  %bf.load34 = load i64, i64* %16, align 8, !dbg !6509
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !6509
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !6509
  %cmp37 = icmp eq i32 %bf.cast36, 14, !dbg !6509
  br i1 %cmp37, label %land.lhs.true38, label %if.end49, !dbg !6509

land.lhs.true38:                                  ; preds = %lor.lhs.false30, %lor.lhs.false
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6509
  %common39 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !6509
  %type40 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common39, i32 0, i32 2, !dbg !6509
  %18 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !6509
  %common41 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !6509
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !6509
  %19 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !6509
  %base43 = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !6509
  %20 = bitcast %struct.tree_base* %base43 to i64*, !dbg !6509
  %bf.load44 = load i64, i64* %20, align 8, !dbg !6509
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !6509
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !6509
  %cmp47 = icmp eq i32 %bf.cast46, 9, !dbg !6509
  br i1 %cmp47, label %if.then48, label %if.end49, !dbg !6510

if.then48:                                        ; preds = %land.lhs.true38, %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !6511
  br label %return, !dbg !6511

if.end49:                                         ; preds = %land.lhs.true38, %lor.lhs.false30, %if.end16
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6512
  %decl_common50 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !6512
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common50, i32 0, i32 2, !dbg !6512
  %22 = bitcast i40* %ignored_flag to i64*, !dbg !6512
  %bf.load51 = load i64, i64* %22, align 8, !dbg !6512
  %bf.lshr52 = lshr i64 %bf.load51, 10, !dbg !6512
  %bf.clear53 = and i64 %bf.lshr52, 1, !dbg !6512
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !6512
  %tobool55 = icmp ne i32 %bf.cast54, 0, !dbg !6512
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !6514

if.then56:                                        ; preds = %if.end49
  store i8 1, i8* %retval, align 1, !dbg !6515
  br label %return, !dbg !6515

if.end57:                                         ; preds = %if.end49
  %23 = load i32, i32* @optimize, align 4, !dbg !6516
  %tobool58 = icmp ne i32 %23, 0, !dbg !6516
  br i1 %tobool58, label %if.then59, label %if.end60, !dbg !6518

if.then59:                                        ; preds = %if.end57
  store i8 1, i8* %retval, align 1, !dbg !6519
  br label %return, !dbg !6519

if.end60:                                         ; preds = %if.end57
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6520
  %decl_common61 = bitcast %union.tree_node* %24 to %struct.tree_decl_common*, !dbg !6520
  %decl_flag_0 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common61, i32 0, i32 2, !dbg !6520
  %25 = bitcast i40* %decl_flag_0 to i64*, !dbg !6520
  %bf.load62 = load i64, i64* %25, align 8, !dbg !6520
  %bf.lshr63 = lshr i64 %bf.load62, 24, !dbg !6520
  %bf.clear64 = and i64 %bf.lshr63, 1, !dbg !6520
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !6520
  %tobool66 = icmp ne i32 %bf.cast65, 0, !dbg !6520
  br i1 %tobool66, label %if.end68, label %if.then67, !dbg !6522

if.then67:                                        ; preds = %if.end60
  store i8 0, i8* %retval, align 1, !dbg !6523
  br label %return, !dbg !6523

if.end68:                                         ; preds = %if.end60
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6524
  %common69 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !6524
  %type70 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common69, i32 0, i32 2, !dbg !6524
  %27 = load %union.tree_node*, %union.tree_node** %type70, align 8, !dbg !6524
  %base71 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !6524
  %28 = bitcast %struct.tree_base* %base71 to i64*, !dbg !6524
  %bf.load72 = load i64, i64* %28, align 8, !dbg !6524
  %bf.clear73 = and i64 %bf.load72, 65535, !dbg !6524
  %bf.cast74 = trunc i64 %bf.clear73 to i32, !dbg !6524
  switch i32 %bf.cast74, label %sw.default [
    i32 16, label %sw.bb
    i32 17, label %sw.bb
    i32 18, label %sw.bb
  ], !dbg !6525

sw.bb:                                            ; preds = %if.end68, %if.end68, %if.end68
  %29 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6526
  %common75 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !6526
  %type76 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common75, i32 0, i32 2, !dbg !6526
  %30 = load %union.tree_node*, %union.tree_node** %type76, align 8, !dbg !6526
  %type77 = bitcast %union.tree_node* %30 to %struct.tree_type*, !dbg !6526
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type77, i32 0, i32 14, !dbg !6526
  %31 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !6526
  %tobool78 = icmp ne %union.tree_node* %31, null, !dbg !6526
  br i1 %tobool78, label %if.then79, label %if.end80, !dbg !6529

if.then79:                                        ; preds = %sw.bb
  store i8 0, i8* %retval, align 1, !dbg !6530
  br label %return, !dbg !6530

if.end80:                                         ; preds = %sw.bb
  br label %sw.epilog, !dbg !6531

sw.default:                                       ; preds = %if.end68
  br label %sw.epilog, !dbg !6532

sw.epilog:                                        ; preds = %sw.default, %if.end80
  store i8 1, i8* %retval, align 1, !dbg !6533
  br label %return, !dbg !6533

return:                                           ; preds = %sw.epilog, %if.then79, %if.then67, %if.then59, %if.then56, %if.then48, %if.then15, %if.then10, %if.then2, %if.then
  %32 = load i8, i8* %retval, align 1, !dbg !6534
  ret i8 %32, !dbg !6534
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @pass_by_reference(%struct.ix86_args* %ca, i32 %mode, %union.tree_node* %type, i8 zeroext %named_arg) #0 !dbg !6535 {
entry:
  %retval = alloca i8, align 1
  %ca.addr = alloca %struct.ix86_args*, align 8
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %named_arg.addr = alloca i8, align 1
  store %struct.ix86_args* %ca, %struct.ix86_args** %ca.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ix86_args** %ca.addr, metadata !6558, metadata !DIExpression()), !dbg !6559
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6560, metadata !DIExpression()), !dbg !6561
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6562, metadata !DIExpression()), !dbg !6563
  store i8 %named_arg, i8* %named_arg.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %named_arg.addr, metadata !6564, metadata !DIExpression()), !dbg !6565
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6566
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6566
  br i1 %tobool, label %if.then, label %if.end37, !dbg !6568

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6569
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6569
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6569
  %bf.load = load i64, i64* %2, align 8, !dbg !6569
  %bf.lshr = lshr i64 %bf.load, 18, !dbg !6569
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6569
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6569
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !6569
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !6572

if.then2:                                         ; preds = %if.then
  store i8 1, i8* %retval, align 1, !dbg !6573
  br label %return, !dbg !6573

if.end:                                           ; preds = %if.then
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6574
  %type3 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !6574
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type3, i32 0, i32 2, !dbg !6574
  %4 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !6574
  %tobool4 = icmp ne %union.tree_node* %4, null, !dbg !6574
  br i1 %tobool4, label %lor.lhs.false, label %if.then11, !dbg !6576

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6577
  %type5 = bitcast %union.tree_node* %5 to %struct.tree_type*, !dbg !6577
  %size6 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type5, i32 0, i32 2, !dbg !6577
  %6 = load %union.tree_node*, %union.tree_node** %size6, align 8, !dbg !6577
  %base7 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6577
  %7 = bitcast %struct.tree_base* %base7 to i64*, !dbg !6577
  %bf.load8 = load i64, i64* %7, align 8, !dbg !6577
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !6577
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !6577
  %cmp = icmp ne i32 %bf.cast10, 23, !dbg !6578
  br i1 %cmp, label %if.then11, label %if.end12, !dbg !6579

if.then11:                                        ; preds = %lor.lhs.false, %if.end
  store i8 1, i8* %retval, align 1, !dbg !6580
  br label %return, !dbg !6580

if.end12:                                         ; preds = %lor.lhs.false
  %8 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6581
  %base13 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6581
  %9 = bitcast %struct.tree_base* %base13 to i64*, !dbg !6581
  %bf.load14 = load i64, i64* %9, align 8, !dbg !6581
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !6581
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !6581
  %cmp17 = icmp eq i32 %bf.cast16, 16, !dbg !6583
  br i1 %cmp17, label %land.lhs.true, label %if.end36, !dbg !6584

land.lhs.true:                                    ; preds = %if.end12
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6585
  %type18 = bitcast %union.tree_node* %10 to %struct.tree_type*, !dbg !6585
  %transparent_aggr_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 6, !dbg !6585
  %bf.load19 = load i32, i32* %transparent_aggr_flag, align 4, !dbg !6585
  %bf.lshr20 = lshr i32 %bf.load19, 12, !dbg !6585
  %bf.clear21 = and i32 %bf.lshr20, 1, !dbg !6585
  %tobool22 = icmp ne i32 %bf.clear21, 0, !dbg !6585
  br i1 %tobool22, label %if.then23, label %if.end36, !dbg !6586

if.then23:                                        ; preds = %land.lhs.true
  %11 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6587
  %call = call %union.tree_node* @first_field(%union.tree_node* %11), !dbg !6587
  %common = bitcast %union.tree_node* %call to %struct.tree_common*, !dbg !6587
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6587
  %12 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !6587
  store %union.tree_node* %12, %union.tree_node** %type.addr, align 8, !dbg !6589
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6590
  %base25 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6590
  %14 = bitcast %struct.tree_base* %base25 to i64*, !dbg !6590
  %bf.load26 = load i64, i64* %14, align 8, !dbg !6590
  %bf.clear27 = and i64 %bf.load26, 65535, !dbg !6590
  %bf.cast28 = trunc i64 %bf.clear27 to i32, !dbg !6590
  %cmp29 = icmp eq i32 %bf.cast28, 14, !dbg !6590
  br i1 %cmp29, label %cond.true, label %cond.false, !dbg !6590

cond.true:                                        ; preds = %if.then23
  %15 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6590
  %call30 = call i32 @vector_type_mode(%union.tree_node* %15), !dbg !6590
  br label %cond.end, !dbg !6590

cond.false:                                       ; preds = %if.then23
  %16 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6590
  %type31 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !6590
  %mode32 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type31, i32 0, i32 6, !dbg !6590
  %bf.load33 = load i32, i32* %mode32, align 4, !dbg !6590
  %bf.lshr34 = lshr i32 %bf.load33, 16, !dbg !6590
  %bf.clear35 = and i32 %bf.lshr34, 255, !dbg !6590
  br label %cond.end, !dbg !6590

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call30, %cond.true ], [ %bf.clear35, %cond.false ], !dbg !6590
  store i32 %cond, i32* %mode.addr, align 4, !dbg !6591
  br label %if.end36, !dbg !6592

if.end36:                                         ; preds = %cond.end, %land.lhs.true, %if.end12
  br label %if.end37, !dbg !6593

if.end37:                                         ; preds = %if.end36, %entry
  %17 = load i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 5), align 8, !dbg !6594
  %18 = load %struct.ix86_args*, %struct.ix86_args** %ca.addr, align 8, !dbg !6595
  %19 = load i32, i32* %mode.addr, align 4, !dbg !6596
  %20 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6597
  %21 = load i8, i8* %named_arg.addr, align 1, !dbg !6598
  %call38 = call zeroext i8 %17(%struct.ix86_args* %18, i32 %19, %union.tree_node* %20, i8 zeroext %21), !dbg !6599
  store i8 %call38, i8* %retval, align 1, !dbg !6600
  br label %return, !dbg !6600

return:                                           ; preds = %if.end37, %if.then11, %if.then2
  %22 = load i8, i8* %retval, align 1, !dbg !6601
  ret i8 %22, !dbg !6601
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @reference_callee_copied(%struct.ix86_args* %ca, i32 %mode, %union.tree_node* %type, i8 zeroext %named_arg) #0 !dbg !6602 {
entry:
  %retval = alloca i8, align 1
  %ca.addr = alloca %struct.ix86_args*, align 8
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %named_arg.addr = alloca i8, align 1
  store %struct.ix86_args* %ca, %struct.ix86_args** %ca.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ix86_args** %ca.addr, metadata !6603, metadata !DIExpression()), !dbg !6604
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !6605, metadata !DIExpression()), !dbg !6606
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !6607, metadata !DIExpression()), !dbg !6608
  store i8 %named_arg, i8* %named_arg.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %named_arg.addr, metadata !6609, metadata !DIExpression()), !dbg !6610
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6611
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6611
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6613

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6614
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6614
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6614
  %bf.load = load i64, i64* %2, align 8, !dbg !6614
  %bf.lshr = lshr i64 %bf.load, 18, !dbg !6614
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6614
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6614
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !6614
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6615

if.then:                                          ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !6616
  br label %return, !dbg !6616

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 12), align 8, !dbg !6617
  %4 = load %struct.ix86_args*, %struct.ix86_args** %ca.addr, align 8, !dbg !6618
  %5 = load i32, i32* %mode.addr, align 4, !dbg !6619
  %6 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !6620
  %7 = load i8, i8* %named_arg.addr, align 1, !dbg !6621
  %call = call zeroext i8 %3(%struct.ix86_args* %4, i32 %5, %union.tree_node* %6, i8 zeroext %7), !dbg !6622
  store i8 %call, i8* %retval, align 1, !dbg !6623
  br label %return, !dbg !6623

return:                                           ; preds = %if.end, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !6624
  ret i8 %8, !dbg !6624
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gimple_seq_d* @gimplify_parameters() #0 !dbg !6625 {
entry:
  %all = alloca %struct.assign_parm_data_all, align 8
  %parm = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %fnargs = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %data = alloca %struct.assign_parm_data_one, align 8
  %type = alloca %union.tree_node*, align 8
  %local = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %ptr_type = alloca %union.tree_node*, align 8
  %addr = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all* %all, metadata !6628, metadata !DIExpression()), !dbg !6644
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !6645, metadata !DIExpression()), !dbg !6646
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !6647, metadata !DIExpression()), !dbg !6648
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !6648
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fnargs, metadata !6649, metadata !DIExpression()), !dbg !6650
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6651, metadata !DIExpression()), !dbg !6652
  call void @assign_parms_initialize_all(%struct.assign_parm_data_all* %all), !dbg !6653
  %call = call %struct.VEC_tree_heap* @assign_parms_augmented_arg_list(%struct.assign_parm_data_all* %all), !dbg !6654
  store %struct.VEC_tree_heap* %call, %struct.VEC_tree_heap** %fnargs, align 8, !dbg !6655
  store i32 0, i32* %i, align 4, !dbg !6656
  br label %for.cond, !dbg !6658

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs, align 8, !dbg !6659
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !6659
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6659

cond.true:                                        ; preds = %for.cond
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs, align 8, !dbg !6659
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !6659
  br label %cond.end, !dbg !6659

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6659

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6659
  %2 = load i32, i32* %i, align 4, !dbg !6659
  %call1 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %2, %union.tree_node** %parm), !dbg !6659
  %tobool2 = icmp ne i32 %call1, 0, !dbg !6661
  br i1 %tobool2, label %for.body, label %for.end, !dbg !6661

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one* %data, metadata !6662, metadata !DIExpression()), !dbg !6687
  %3 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6688
  call void @assign_parm_find_data_types(%struct.assign_parm_data_all* %all, %union.tree_node* %3, %struct.assign_parm_data_one* %data), !dbg !6689
  %passed_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 5, !dbg !6690
  %4 = load i32, i32* %passed_mode, align 4, !dbg !6690
  %cmp = icmp eq i32 %4, 0, !dbg !6692
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6693

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6694
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !6694
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 1, !dbg !6694
  %6 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !6694
  %cmp3 = icmp eq %union.tree_node* %6, null, !dbg !6695
  br i1 %cmp3, label %if.then, label %if.end, !dbg !6696

if.then:                                          ; preds = %lor.lhs.false, %for.body
  br label %for.inc, !dbg !6697

if.end:                                           ; preds = %lor.lhs.false
  %args_so_far = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 0, !dbg !6698
  %promoted_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 6, !dbg !6698
  %7 = load i32, i32* %promoted_mode, align 8, !dbg !6698
  %passed_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 1, !dbg !6698
  %8 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !6698
  %named_arg = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 9, !dbg !6698
  %bf.load = load i8, i8* %named_arg, align 4, !dbg !6698
  %bf.clear = and i8 %bf.load, 1, !dbg !6698
  %bf.cast = zext i8 %bf.clear to i32, !dbg !6698
  call void @function_arg_advance(%struct.ix86_args* %args_so_far, i32 %7, %union.tree_node* %8, i32 %bf.cast), !dbg !6698
  %passed_type4 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 1, !dbg !6699
  %9 = bitcast %struct.gimple_seq_d** %stmts to i8*, !dbg !6699
  %call5 = call %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node** %passed_type4, %union.tree_node* (%union.tree_node**, i32*, i8*)* @gimplify_parm_type, i8* %9, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !6699
  %10 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6700
  %decl_common6 = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !6700
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common6, i32 0, i32 4, !dbg !6700
  %11 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !6700
  %base7 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !6700
  %12 = bitcast %struct.tree_base* %base7 to i64*, !dbg !6700
  %bf.load8 = load i64, i64* %12, align 8, !dbg !6700
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !6700
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !6700
  %cmp11 = icmp ne i32 %bf.cast10, 23, !dbg !6702
  br i1 %cmp11, label %if.then12, label %if.end17, !dbg !6703

if.then12:                                        ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6704
  %decl_common13 = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !6704
  %size14 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common13, i32 0, i32 1, !dbg !6704
  call void @gimplify_one_sizepos(%union.tree_node** %size14, %struct.gimple_seq_d** %stmts), !dbg !6706
  %14 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6707
  %decl_common15 = bitcast %union.tree_node* %14 to %struct.tree_decl_common*, !dbg !6707
  %size_unit16 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common15, i32 0, i32 4, !dbg !6707
  call void @gimplify_one_sizepos(%union.tree_node** %size_unit16, %struct.gimple_seq_d** %stmts), !dbg !6708
  br label %if.end17, !dbg !6709

if.end17:                                         ; preds = %if.then12, %if.end
  %passed_pointer = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 9, !dbg !6710
  %bf.load18 = load i8, i8* %passed_pointer, align 4, !dbg !6710
  %bf.lshr = lshr i8 %bf.load18, 1, !dbg !6710
  %bf.clear19 = and i8 %bf.lshr, 1, !dbg !6710
  %bf.cast20 = zext i8 %bf.clear19 to i32, !dbg !6710
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !6712
  br i1 %tobool21, label %if.then22, label %if.end105, !dbg !6713

if.then22:                                        ; preds = %if.end17
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6714, metadata !DIExpression()), !dbg !6716
  %passed_type23 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 1, !dbg !6717
  %15 = load %union.tree_node*, %union.tree_node** %passed_type23, align 8, !dbg !6717
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !6717
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6717
  %16 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !6717
  store %union.tree_node* %16, %union.tree_node** %type, align 8, !dbg !6716
  %args_so_far25 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 0, !dbg !6718
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6720
  %base26 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !6720
  %18 = bitcast %struct.tree_base* %base26 to i64*, !dbg !6720
  %bf.load27 = load i64, i64* %18, align 8, !dbg !6720
  %bf.clear28 = and i64 %bf.load27, 65535, !dbg !6720
  %bf.cast29 = trunc i64 %bf.clear28 to i32, !dbg !6720
  %cmp30 = icmp eq i32 %bf.cast29, 14, !dbg !6720
  br i1 %cmp30, label %cond.true31, label %cond.false33, !dbg !6720

cond.true31:                                      ; preds = %if.then22
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6720
  %call32 = call i32 @vector_type_mode(%union.tree_node* %19), !dbg !6720
  br label %cond.end38, !dbg !6720

cond.false33:                                     ; preds = %if.then22
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6720
  %type34 = bitcast %union.tree_node* %20 to %struct.tree_type*, !dbg !6720
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type34, i32 0, i32 6, !dbg !6720
  %bf.load35 = load i32, i32* %mode, align 4, !dbg !6720
  %bf.lshr36 = lshr i32 %bf.load35, 16, !dbg !6720
  %bf.clear37 = and i32 %bf.lshr36, 255, !dbg !6720
  br label %cond.end38, !dbg !6720

cond.end38:                                       ; preds = %cond.false33, %cond.true31
  %cond39 = phi i32 [ %call32, %cond.true31 ], [ %bf.clear37, %cond.false33 ], !dbg !6720
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6721
  %named_arg40 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 9, !dbg !6722
  %bf.load41 = load i8, i8* %named_arg40, align 4, !dbg !6722
  %bf.clear42 = and i8 %bf.load41, 1, !dbg !6722
  %bf.cast43 = zext i8 %bf.clear42 to i32, !dbg !6722
  %conv = trunc i32 %bf.cast43 to i8, !dbg !6723
  %call44 = call zeroext i8 @reference_callee_copied(%struct.ix86_args* %args_so_far25, i32 %cond39, %union.tree_node* %21, i8 zeroext %conv), !dbg !6724
  %tobool45 = icmp ne i8 %call44, 0, !dbg !6724
  br i1 %tobool45, label %if.then46, label %if.end104, !dbg !6725

if.then46:                                        ; preds = %cond.end38
  call void @llvm.dbg.declare(metadata %union.tree_node** %local, metadata !6726, metadata !DIExpression()), !dbg !6728
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6729, metadata !DIExpression()), !dbg !6730
  %22 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6731
  %decl_common47 = bitcast %union.tree_node* %22 to %struct.tree_decl_common*, !dbg !6731
  %size_unit48 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common47, i32 0, i32 4, !dbg !6731
  %23 = load %union.tree_node*, %union.tree_node** %size_unit48, align 8, !dbg !6731
  %base49 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !6731
  %24 = bitcast %struct.tree_base* %base49 to i64*, !dbg !6731
  %bf.load50 = load i64, i64* %24, align 8, !dbg !6731
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !6731
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !6731
  %cmp53 = icmp eq i32 %bf.cast52, 23, !dbg !6733
  br i1 %cmp53, label %land.lhs.true, label %if.else, !dbg !6734

land.lhs.true:                                    ; preds = %if.then46
  %25 = load i32, i32* @flag_stack_check, align 4, !dbg !6735
  %cmp55 = icmp eq i32 %25, 1, !dbg !6736
  br i1 %cmp55, label %land.lhs.true57, label %if.then63, !dbg !6737

land.lhs.true57:                                  ; preds = %land.lhs.true
  %26 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6738
  %decl_common58 = bitcast %union.tree_node* %26 to %struct.tree_decl_common*, !dbg !6738
  %size_unit59 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common58, i32 0, i32 4, !dbg !6738
  %27 = load %union.tree_node*, %union.tree_node** %size_unit59, align 8, !dbg !6738
  %call60 = call i32 @compare_tree_int(%union.tree_node* %27, i64 40), !dbg !6739
  %cmp61 = icmp sgt i32 %call60, 0, !dbg !6740
  br i1 %cmp61, label %if.else, label %if.then63, !dbg !6741

if.then63:                                        ; preds = %land.lhs.true57, %land.lhs.true
  %28 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6742
  %29 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6744
  %call64 = call i8* @get_name(%union.tree_node* %29), !dbg !6745
  %call65 = call %union.tree_node* @create_tmp_var(%union.tree_node* %28, i8* %call64), !dbg !6746
  store %union.tree_node* %call65, %union.tree_node** %local, align 8, !dbg !6747
  %30 = load %union.tree_node*, %union.tree_node** %local, align 8, !dbg !6748
  %decl_common66 = bitcast %union.tree_node* %30 to %struct.tree_decl_common*, !dbg !6748
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common66, i32 0, i32 2, !dbg !6748
  %31 = bitcast i40* %ignored_flag to i64*, !dbg !6748
  %bf.load67 = load i64, i64* %31, align 8, !dbg !6749
  %bf.clear68 = and i64 %bf.load67, -1025, !dbg !6749
  store i64 %bf.clear68, i64* %31, align 8, !dbg !6749
  %32 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6750
  %base69 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !6750
  %33 = bitcast %struct.tree_base* %base69 to i64*, !dbg !6750
  %bf.load70 = load i64, i64* %33, align 8, !dbg !6750
  %bf.lshr71 = lshr i64 %bf.load70, 18, !dbg !6750
  %bf.clear72 = and i64 %bf.lshr71, 1, !dbg !6750
  %bf.cast73 = trunc i64 %bf.clear72 to i32, !dbg !6750
  %tobool74 = icmp ne i32 %bf.cast73, 0, !dbg !6750
  br i1 %tobool74, label %if.then75, label %if.end82, !dbg !6752

if.then75:                                        ; preds = %if.then63
  %34 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6753
  %base76 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !6753
  %35 = bitcast %struct.tree_base* %base76 to i64*, !dbg !6753
  %bf.load77 = load i64, i64* %35, align 8, !dbg !6755
  %bf.clear78 = and i64 %bf.load77, -262145, !dbg !6755
  store i64 %bf.clear78, i64* %35, align 8, !dbg !6755
  %36 = load %union.tree_node*, %union.tree_node** %local, align 8, !dbg !6756
  %base79 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !6756
  %37 = bitcast %struct.tree_base* %base79 to i64*, !dbg !6756
  %bf.load80 = load i64, i64* %37, align 8, !dbg !6757
  %bf.clear81 = and i64 %bf.load80, -262145, !dbg !6757
  %bf.set = or i64 %bf.clear81, 262144, !dbg !6757
  store i64 %bf.set, i64* %37, align 8, !dbg !6757
  br label %if.end82, !dbg !6758

if.end82:                                         ; preds = %if.then75, %if.then63
  br label %if.end98, !dbg !6759

if.else:                                          ; preds = %land.lhs.true57, %if.then46
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptr_type, metadata !6760, metadata !DIExpression()), !dbg !6762
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !6763, metadata !DIExpression()), !dbg !6764
  %38 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6765
  %call83 = call %union.tree_node* @build_pointer_type(%union.tree_node* %38), !dbg !6766
  store %union.tree_node* %call83, %union.tree_node** %ptr_type, align 8, !dbg !6767
  %39 = load %union.tree_node*, %union.tree_node** %ptr_type, align 8, !dbg !6768
  %40 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6769
  %call84 = call i8* @get_name(%union.tree_node* %40), !dbg !6770
  %call85 = call %union.tree_node* @create_tmp_var(%union.tree_node* %39, i8* %call84), !dbg !6771
  store %union.tree_node* %call85, %union.tree_node** %addr, align 8, !dbg !6772
  %41 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6773
  %decl_common86 = bitcast %union.tree_node* %41 to %struct.tree_decl_common*, !dbg !6773
  %ignored_flag87 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common86, i32 0, i32 2, !dbg !6773
  %42 = bitcast i40* %ignored_flag87 to i64*, !dbg !6773
  %bf.load88 = load i64, i64* %42, align 8, !dbg !6774
  %bf.clear89 = and i64 %bf.load88, -1025, !dbg !6774
  store i64 %bf.clear89, i64* %42, align 8, !dbg !6774
  %43 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6775
  %call90 = call %union.tree_node* @build_fold_indirect_ref_loc(i32 0, %union.tree_node* %43), !dbg !6775
  store %union.tree_node* %call90, %union.tree_node** %local, align 8, !dbg !6776
  %44 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([721 x %union.tree_node*], [721 x %union.tree_node*]* @built_in_decls, i64 0, i64 415), align 8, !dbg !6777
  store %union.tree_node* %44, %union.tree_node** %t, align 8, !dbg !6778
  %45 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6779
  %46 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6779
  %decl_common91 = bitcast %union.tree_node* %46 to %struct.tree_decl_common*, !dbg !6779
  %size_unit92 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common91, i32 0, i32 4, !dbg !6779
  %47 = load %union.tree_node*, %union.tree_node** %size_unit92, align 8, !dbg !6779
  %call93 = call %union.tree_node* (i32, %union.tree_node*, i32, ...) @build_call_expr_loc(i32 0, %union.tree_node* %45, i32 1, %union.tree_node* %47), !dbg !6779
  store %union.tree_node* %call93, %union.tree_node** %t, align 8, !dbg !6780
  %48 = load %union.tree_node*, %union.tree_node** %ptr_type, align 8, !dbg !6781
  %49 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6781
  %call94 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %48, %union.tree_node* %49), !dbg !6781
  store %union.tree_node* %call94, %union.tree_node** %t, align 8, !dbg !6782
  %50 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6783
  %common95 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !6783
  %type96 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common95, i32 0, i32 2, !dbg !6783
  %51 = load %union.tree_node*, %union.tree_node** %type96, align 8, !dbg !6783
  %52 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6783
  %53 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6783
  %call97 = call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %51, %union.tree_node* %52, %union.tree_node* %53), !dbg !6783
  store %union.tree_node* %call97, %union.tree_node** %t, align 8, !dbg !6784
  %54 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6785
  call void @gimplify_and_add(%union.tree_node* %54, %struct.gimple_seq_d** %stmts), !dbg !6786
  br label %if.end98

if.end98:                                         ; preds = %if.else, %if.end82
  %55 = load %union.tree_node*, %union.tree_node** %local, align 8, !dbg !6787
  %56 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6788
  %call99 = call %union.gimple_statement_d* @gimplify_assign(%union.tree_node* %55, %union.tree_node* %56, %struct.gimple_seq_d** %stmts), !dbg !6789
  %57 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6790
  %58 = load %union.tree_node*, %union.tree_node** %local, align 8, !dbg !6790
  call void @decl_value_expr_insert(%union.tree_node* %57, %union.tree_node* %58), !dbg !6790
  %59 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !6791
  %decl_common100 = bitcast %union.tree_node* %59 to %struct.tree_decl_common*, !dbg !6791
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common100, i32 0, i32 2, !dbg !6791
  %60 = bitcast i40* %decl_flag_2 to i64*, !dbg !6791
  %bf.load101 = load i64, i64* %60, align 8, !dbg !6792
  %bf.clear102 = and i64 %bf.load101, -67108865, !dbg !6792
  %bf.set103 = or i64 %bf.clear102, 67108864, !dbg !6792
  store i64 %bf.set103, i64* %60, align 8, !dbg !6792
  br label %if.end104, !dbg !6793

if.end104:                                        ; preds = %if.end98, %cond.end38
  br label %if.end105, !dbg !6794

if.end105:                                        ; preds = %if.end104, %if.end17
  br label %for.inc, !dbg !6795

for.inc:                                          ; preds = %if.end105, %if.then
  %61 = load i32, i32* %i, align 4, !dbg !6796
  %inc = add i32 %61, 1, !dbg !6796
  store i32 %inc, i32* %i, align 4, !dbg !6796
  br label %for.cond, !dbg !6797, !llvm.loop !6798

for.end:                                          ; preds = %cond.end
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %fnargs), !dbg !6800
  %62 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !6801
  ret %struct.gimple_seq_d* %62, !dbg !6802
}

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parms_initialize_all(%struct.assign_parm_data_all* %all) #0 !dbg !6803 {
entry:
  %all.addr = alloca %struct.assign_parm_data_all*, align 8
  %fntype = alloca %union.tree_node*, align 8
  store %struct.assign_parm_data_all* %all, %struct.assign_parm_data_all** %all.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all** %all.addr, metadata !6807, metadata !DIExpression()), !dbg !6808
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !6809, metadata !DIExpression()), !dbg !6810
  %0 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !6811
  %1 = bitcast %struct.assign_parm_data_all* %0 to i8*, !dbg !6812
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 136, i1 false), !dbg !6812
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6813
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !6813
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6813
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6813
  store %union.tree_node* %3, %union.tree_node** %fntype, align 8, !dbg !6814
  %4 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !6815
  %args_so_far = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %4, i32 0, i32 0, !dbg !6815
  %5 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !6815
  %6 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6815
  call void @init_cumulative_args(%struct.ix86_args* %args_so_far, %union.tree_node* %5, %struct.rtx_def* null, %union.tree_node* %6), !dbg !6815
  %7 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6816
  %call = call i32 @ix86_reg_parm_stack_space(%union.tree_node* %7), !dbg !6816
  %8 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !6817
  %reg_parm_stack_space = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %8, i32 0, i32 8, !dbg !6818
  store i32 %call, i32* %reg_parm_stack_space, align 8, !dbg !6819
  ret void, !dbg !6820
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @assign_parms_augmented_arg_list(%struct.assign_parm_data_all* %all) #0 !dbg !6821 {
entry:
  %all.addr = alloca %struct.assign_parm_data_all*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %fntype = alloca %union.tree_node*, align 8
  %fnargs = alloca %struct.VEC_tree_heap*, align 8
  %arg = alloca %union.tree_node*, align 8
  %type12 = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.assign_parm_data_all* %all, %struct.assign_parm_data_all** %all.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all** %all.addr, metadata !6824, metadata !DIExpression()), !dbg !6825
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !6826, metadata !DIExpression()), !dbg !6827
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6828
  store %union.tree_node* %0, %union.tree_node** %fndecl, align 8, !dbg !6827
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !6829, metadata !DIExpression()), !dbg !6830
  %1 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6831
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !6831
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6831
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6831
  store %union.tree_node* %2, %union.tree_node** %fntype, align 8, !dbg !6830
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fnargs, metadata !6832, metadata !DIExpression()), !dbg !6833
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %fnargs, align 8, !dbg !6833
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6834, metadata !DIExpression()), !dbg !6835
  %3 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6836
  %decl_non_common = bitcast %union.tree_node* %3 to %struct.tree_decl_non_common*, !dbg !6836
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !6836
  %4 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !6836
  store %union.tree_node* %4, %union.tree_node** %arg, align 8, !dbg !6838
  br label %for.cond, !dbg !6839

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6840
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !6842
  br i1 %tobool, label %for.body, label %for.end, !dbg !6842

for.body:                                         ; preds = %for.cond
  %6 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6843
  %call = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %fnargs, %union.tree_node* %6), !dbg !6843
  br label %for.inc, !dbg !6843

for.inc:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6844
  %common1 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !6844
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 1, !dbg !6844
  %8 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6844
  store %union.tree_node* %8, %union.tree_node** %arg, align 8, !dbg !6845
  br label %for.cond, !dbg !6846, !llvm.loop !6847

for.end:                                          ; preds = %for.cond
  %9 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6849
  %decl_non_common2 = bitcast %union.tree_node* %9 to %struct.tree_decl_non_common*, !dbg !6849
  %arguments3 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common2, i32 0, i32 2, !dbg !6849
  %10 = load %union.tree_node*, %union.tree_node** %arguments3, align 8, !dbg !6849
  %11 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !6850
  %orig_fnargs = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %11, i32 0, i32 3, !dbg !6851
  store %union.tree_node* %10, %union.tree_node** %orig_fnargs, align 8, !dbg !6852
  %12 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6853
  %decl_non_common4 = bitcast %union.tree_node* %12 to %struct.tree_decl_non_common*, !dbg !6853
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common4, i32 0, i32 3, !dbg !6853
  %13 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6853
  %14 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6855
  %call5 = call i32 @aggregate_value_p(%union.tree_node* %13, %union.tree_node* %14), !dbg !6856
  %tobool6 = icmp ne i32 %call5, 0, !dbg !6856
  br i1 %tobool6, label %land.lhs.true, label %if.end, !dbg !6857

land.lhs.true:                                    ; preds = %for.end
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6858
  %returns_pcc_struct = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 20, !dbg !6859
  %bf.load = load i32, i32* %returns_pcc_struct, align 8, !dbg !6859
  %bf.lshr = lshr i32 %bf.load, 27, !dbg !6859
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6859
  %tobool7 = icmp ne i32 %bf.clear, 0, !dbg !6858
  br i1 %tobool7, label %if.end, label %land.lhs.true8, !dbg !6860

land.lhs.true8:                                   ; preds = %land.lhs.true
  %16 = load %struct.rtx_def* (%union.tree_node*, i32)*, %struct.rtx_def* (%union.tree_node*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 2), align 8, !dbg !6861
  %17 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6862
  %common9 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !6862
  %type10 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common9, i32 0, i32 2, !dbg !6862
  %18 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !6862
  %call11 = call %struct.rtx_def* %16(%union.tree_node* %18, i32 1), !dbg !6863
  %cmp = icmp eq %struct.rtx_def* %call11, null, !dbg !6864
  br i1 %cmp, label %if.then, label %if.end, !dbg !6865

if.then:                                          ; preds = %land.lhs.true8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type12, metadata !6866, metadata !DIExpression()), !dbg !6868
  %19 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !6869
  %common13 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !6869
  %type14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 2, !dbg !6869
  %20 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !6869
  %call15 = call %union.tree_node* @build_pointer_type(%union.tree_node* %20), !dbg !6870
  store %union.tree_node* %call15, %union.tree_node** %type12, align 8, !dbg !6868
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !6871, metadata !DIExpression()), !dbg !6872
  %21 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6873
  %decl_minimal = bitcast %union.tree_node* %21 to %struct.tree_decl_minimal*, !dbg !6873
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 1, !dbg !6873
  %22 = load i32, i32* %locus, align 8, !dbg !6873
  %23 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !6873
  %call16 = call %union.tree_node* @build_decl_stat(i32 %22, i32 34, %union.tree_node* null, %union.tree_node* %23), !dbg !6873
  store %union.tree_node* %call16, %union.tree_node** %decl, align 8, !dbg !6874
  %24 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !6875
  %25 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6876
  %decl_common = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !6876
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !6876
  store %union.tree_node* %24, %union.tree_node** %initial, align 8, !dbg !6877
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6878
  %decl_common17 = bitcast %union.tree_node* %26 to %struct.tree_decl_common*, !dbg !6878
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common17, i32 0, i32 2, !dbg !6878
  %27 = bitcast i40* %artificial_flag to i64*, !dbg !6878
  %bf.load18 = load i64, i64* %27, align 8, !dbg !6879
  %bf.clear19 = and i64 %bf.load18, -4097, !dbg !6879
  %bf.set = or i64 %bf.clear19, 4096, !dbg !6879
  store i64 %bf.set, i64* %27, align 8, !dbg !6879
  %28 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6880
  %decl_common20 = bitcast %union.tree_node* %28 to %struct.tree_decl_common*, !dbg !6880
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common20, i32 0, i32 2, !dbg !6880
  %29 = bitcast i40* %ignored_flag to i64*, !dbg !6880
  %bf.load21 = load i64, i64* %29, align 8, !dbg !6881
  %bf.clear22 = and i64 %bf.load21, -1025, !dbg !6881
  %bf.set23 = or i64 %bf.clear22, 1024, !dbg !6881
  store i64 %bf.set23, i64* %29, align 8, !dbg !6881
  %30 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !6882
  %orig_fnargs24 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %30, i32 0, i32 3, !dbg !6883
  %31 = load %union.tree_node*, %union.tree_node** %orig_fnargs24, align 8, !dbg !6883
  %32 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6884
  %common25 = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !6884
  %chain26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 1, !dbg !6884
  store %union.tree_node* %31, %union.tree_node** %chain26, align 8, !dbg !6885
  %33 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6886
  %34 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !6887
  %orig_fnargs27 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %34, i32 0, i32 3, !dbg !6888
  store %union.tree_node* %33, %union.tree_node** %orig_fnargs27, align 8, !dbg !6889
  %35 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6890
  %call28 = call %union.tree_node** @VEC_tree_heap_safe_insert(%struct.VEC_tree_heap** %fnargs, i32 0, %union.tree_node* %35), !dbg !6890
  %36 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6891
  %37 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !6892
  %function_result_decl = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %37, i32 0, i32 2, !dbg !6893
  store %union.tree_node* %36, %union.tree_node** %function_result_decl, align 8, !dbg !6894
  br label %if.end, !dbg !6895

if.end:                                           ; preds = %if.then, %land.lhs.true8, %land.lhs.true, %for.end
  %38 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 10), align 8, !dbg !6896
  %tobool29 = icmp ne i8 (%union.tree_node*)* %38, null, !dbg !6898
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !6899

if.then30:                                        ; preds = %if.end
  call void @split_complex_args(%struct.VEC_tree_heap** %fnargs), !dbg !6900
  br label %if.end31, !dbg !6900

if.end31:                                         ; preds = %if.then30, %if.end
  %39 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs, align 8, !dbg !6901
  ret %struct.VEC_tree_heap* %39, !dbg !6902
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) #0 !dbg !6903 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !6908, metadata !DIExpression()), !dbg !6909
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6910, metadata !DIExpression()), !dbg !6909
  store %union.tree_node** %ptr, %union.tree_node*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ptr.addr, metadata !6911, metadata !DIExpression()), !dbg !6909
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6912
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !6912
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6912

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6912
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6912
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !6912
  %3 = load i32, i32* %num, align 8, !dbg !6912
  %cmp = icmp ult i32 %1, %3, !dbg !6912
  br i1 %cmp, label %if.then, label %if.else, !dbg !6909

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !6914
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !6914
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6914
  %idxprom = zext i32 %5 to i64, !dbg !6914
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !6914
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6914
  %7 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !6914
  store %union.tree_node* %6, %union.tree_node** %7, align 8, !dbg !6914
  store i32 1, i32* %retval, align 4, !dbg !6914
  br label %return, !dbg !6914

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.tree_node**, %union.tree_node*** %ptr.addr, align 8, !dbg !6916
  store %union.tree_node* null, %union.tree_node** %8, align 8, !dbg !6916
  store i32 0, i32* %retval, align 4, !dbg !6916
  br label %return, !dbg !6916

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6909
  ret i32 %9, !dbg !6909
}

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parm_find_data_types(%struct.assign_parm_data_all* %all, %union.tree_node* %parm, %struct.assign_parm_data_one* %data) #0 !dbg !6918 {
entry:
  %all.addr = alloca %struct.assign_parm_data_all*, align 8
  %parm.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  %nominal_type = alloca %union.tree_node*, align 8
  %passed_type = alloca %union.tree_node*, align 8
  %nominal_mode = alloca i32, align 4
  %passed_mode = alloca i32, align 4
  %promoted_mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  store %struct.assign_parm_data_all* %all, %struct.assign_parm_data_all** %all.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all** %all.addr, metadata !6922, metadata !DIExpression()), !dbg !6923
  store %union.tree_node* %parm, %union.tree_node** %parm.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm.addr, metadata !6924, metadata !DIExpression()), !dbg !6925
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !6926, metadata !DIExpression()), !dbg !6927
  call void @llvm.dbg.declare(metadata %union.tree_node** %nominal_type, metadata !6928, metadata !DIExpression()), !dbg !6929
  call void @llvm.dbg.declare(metadata %union.tree_node** %passed_type, metadata !6930, metadata !DIExpression()), !dbg !6931
  call void @llvm.dbg.declare(metadata i32* %nominal_mode, metadata !6932, metadata !DIExpression()), !dbg !6933
  call void @llvm.dbg.declare(metadata i32* %passed_mode, metadata !6934, metadata !DIExpression()), !dbg !6935
  call void @llvm.dbg.declare(metadata i32* %promoted_mode, metadata !6936, metadata !DIExpression()), !dbg !6937
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !6938, metadata !DIExpression()), !dbg !6939
  %0 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !6940
  %1 = bitcast %struct.assign_parm_data_one* %0 to i8*, !dbg !6941
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 128, i1 false), !dbg !6941
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6942
  %stdarg = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 20, !dbg !6944
  %bf.load = load i32, i32* %stdarg, align 8, !dbg !6944
  %bf.lshr = lshr i32 %bf.load, 22, !dbg !6944
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6944
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !6942
  br i1 %tobool, label %if.else, label %if.then, !dbg !6945

if.then:                                          ; preds = %entry
  %3 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !6946
  %named_arg = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %3, i32 0, i32 9, !dbg !6947
  %bf.load1 = load i8, i8* %named_arg, align 4, !dbg !6948
  %bf.clear2 = and i8 %bf.load1, -2, !dbg !6948
  %bf.set = or i8 %bf.clear2, 1, !dbg !6948
  store i8 %bf.set, i8* %named_arg, align 4, !dbg !6948
  br label %if.end21, !dbg !6946

if.else:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !6949
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !6949
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6949
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6949
  %tobool3 = icmp ne %union.tree_node* %5, null, !dbg !6949
  br i1 %tobool3, label %if.then4, label %if.else9, !dbg !6951

if.then4:                                         ; preds = %if.else
  %6 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !6952
  %named_arg5 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %6, i32 0, i32 9, !dbg !6953
  %bf.load6 = load i8, i8* %named_arg5, align 4, !dbg !6954
  %bf.clear7 = and i8 %bf.load6, -2, !dbg !6954
  %bf.set8 = or i8 %bf.clear7, 1, !dbg !6954
  store i8 %bf.set8, i8* %named_arg5, align 4, !dbg !6954
  br label %if.end20, !dbg !6952

if.else9:                                         ; preds = %if.else
  %7 = load i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 8), align 8, !dbg !6955
  %8 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !6957
  %args_so_far = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %8, i32 0, i32 0, !dbg !6958
  %call = call zeroext i8 %7(%struct.ix86_args* %args_so_far), !dbg !6959
  %tobool10 = icmp ne i8 %call, 0, !dbg !6959
  br i1 %tobool10, label %if.then11, label %if.else16, !dbg !6960

if.then11:                                        ; preds = %if.else9
  %9 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !6961
  %named_arg12 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %9, i32 0, i32 9, !dbg !6962
  %bf.load13 = load i8, i8* %named_arg12, align 4, !dbg !6963
  %bf.clear14 = and i8 %bf.load13, -2, !dbg !6963
  %bf.set15 = or i8 %bf.clear14, 1, !dbg !6963
  store i8 %bf.set15, i8* %named_arg12, align 4, !dbg !6963
  br label %if.end, !dbg !6961

if.else16:                                        ; preds = %if.else9
  %10 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !6964
  %named_arg17 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %10, i32 0, i32 9, !dbg !6965
  %bf.load18 = load i8, i8* %named_arg17, align 4, !dbg !6966
  %bf.clear19 = and i8 %bf.load18, -2, !dbg !6966
  store i8 %bf.clear19, i8* %named_arg17, align 4, !dbg !6966
  br label %if.end

if.end:                                           ; preds = %if.else16, %if.then11
  br label %if.end20

if.end20:                                         ; preds = %if.end, %if.then4
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then
  %11 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !6967
  %common22 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !6967
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2, !dbg !6967
  %12 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6967
  store %union.tree_node* %12, %union.tree_node** %nominal_type, align 8, !dbg !6968
  %13 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !6969
  %decl_common = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !6969
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !6969
  %14 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !6969
  store %union.tree_node* %14, %union.tree_node** %passed_type, align 8, !dbg !6970
  %15 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !6971
  %common23 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !6971
  %type24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 2, !dbg !6971
  %16 = load %union.tree_node*, %union.tree_node** %type24, align 8, !dbg !6971
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6973
  %cmp = icmp eq %union.tree_node* %16, %17, !dbg !6974
  br i1 %cmp, label %if.then36, label %lor.lhs.false, !dbg !6975

lor.lhs.false:                                    ; preds = %if.end21
  %18 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !6976
  %base = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !6976
  %19 = bitcast %struct.tree_base* %base to i64*, !dbg !6976
  %bf.load25 = load i64, i64* %19, align 8, !dbg !6976
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !6976
  %bf.cast = trunc i64 %bf.clear26 to i32, !dbg !6976
  %cmp27 = icmp ne i32 %bf.cast, 34, !dbg !6977
  br i1 %cmp27, label %if.then36, label %lor.lhs.false28, !dbg !6978

lor.lhs.false28:                                  ; preds = %lor.lhs.false
  %20 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !6979
  %cmp29 = icmp eq %union.tree_node* %20, null, !dbg !6980
  br i1 %cmp29, label %if.then36, label %lor.lhs.false30, !dbg !6981

lor.lhs.false30:                                  ; preds = %lor.lhs.false28
  %21 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8, !dbg !6982
  %base31 = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !6982
  %22 = bitcast %struct.tree_base* %base31 to i64*, !dbg !6982
  %bf.load32 = load i64, i64* %22, align 8, !dbg !6982
  %bf.clear33 = and i64 %bf.load32, 65535, !dbg !6982
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !6982
  %cmp35 = icmp eq i32 %bf.cast34, 19, !dbg !6982
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !6983

if.then36:                                        ; preds = %lor.lhs.false30, %lor.lhs.false28, %lor.lhs.false, %if.end21
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6984
  store %union.tree_node* %23, %union.tree_node** %passed_type, align 8, !dbg !6986
  store %union.tree_node* %23, %union.tree_node** %nominal_type, align 8, !dbg !6987
  store i32 0, i32* %promoted_mode, align 4, !dbg !6988
  store i32 0, i32* %passed_mode, align 4, !dbg !6989
  store i32 0, i32* %nominal_mode, align 4, !dbg !6990
  br label %egress, !dbg !6991

if.end37:                                         ; preds = %lor.lhs.false30
  %24 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !6992
  %base38 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !6992
  %25 = bitcast %struct.tree_base* %base38 to i64*, !dbg !6992
  %bf.load39 = load i64, i64* %25, align 8, !dbg !6992
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !6992
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !6992
  %cmp42 = icmp eq i32 %bf.cast41, 14, !dbg !6992
  br i1 %cmp42, label %cond.true, label %cond.false, !dbg !6992

cond.true:                                        ; preds = %if.end37
  %26 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !6992
  %call43 = call i32 @vector_type_mode(%union.tree_node* %26), !dbg !6992
  br label %cond.end, !dbg !6992

cond.false:                                       ; preds = %if.end37
  %27 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !6992
  %type44 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !6992
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type44, i32 0, i32 6, !dbg !6992
  %bf.load45 = load i32, i32* %mode, align 4, !dbg !6992
  %bf.lshr46 = lshr i32 %bf.load45, 16, !dbg !6992
  %bf.clear47 = and i32 %bf.lshr46, 255, !dbg !6992
  br label %cond.end, !dbg !6992

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call43, %cond.true ], [ %bf.clear47, %cond.false ], !dbg !6992
  store i32 %cond, i32* %passed_mode, align 4, !dbg !6993
  %28 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8, !dbg !6994
  %base48 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !6994
  %29 = bitcast %struct.tree_base* %base48 to i64*, !dbg !6994
  %bf.load49 = load i64, i64* %29, align 8, !dbg !6994
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !6994
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !6994
  %cmp52 = icmp eq i32 %bf.cast51, 14, !dbg !6994
  br i1 %cmp52, label %cond.true53, label %cond.false55, !dbg !6994

cond.true53:                                      ; preds = %cond.end
  %30 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8, !dbg !6994
  %call54 = call i32 @vector_type_mode(%union.tree_node* %30), !dbg !6994
  br label %cond.end61, !dbg !6994

cond.false55:                                     ; preds = %cond.end
  %31 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8, !dbg !6994
  %type56 = bitcast %union.tree_node* %31 to %struct.tree_type*, !dbg !6994
  %mode57 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type56, i32 0, i32 6, !dbg !6994
  %bf.load58 = load i32, i32* %mode57, align 4, !dbg !6994
  %bf.lshr59 = lshr i32 %bf.load58, 16, !dbg !6994
  %bf.clear60 = and i32 %bf.lshr59, 255, !dbg !6994
  br label %cond.end61, !dbg !6994

cond.end61:                                       ; preds = %cond.false55, %cond.true53
  %cond62 = phi i32 [ %call54, %cond.true53 ], [ %bf.clear60, %cond.false55 ], !dbg !6994
  store i32 %cond62, i32* %nominal_mode, align 4, !dbg !6995
  %32 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !6996
  %base63 = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !6996
  %33 = bitcast %struct.tree_base* %base63 to i64*, !dbg !6996
  %bf.load64 = load i64, i64* %33, align 8, !dbg !6996
  %bf.clear65 = and i64 %bf.load64, 65535, !dbg !6996
  %bf.cast66 = trunc i64 %bf.clear65 to i32, !dbg !6996
  %cmp67 = icmp eq i32 %bf.cast66, 17, !dbg !6998
  br i1 %cmp67, label %land.lhs.true, label %lor.lhs.false68, !dbg !6999

lor.lhs.false68:                                  ; preds = %cond.end61
  %34 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !7000
  %base69 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !7000
  %35 = bitcast %struct.tree_base* %base69 to i64*, !dbg !7000
  %bf.load70 = load i64, i64* %35, align 8, !dbg !7000
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !7000
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !7000
  %cmp73 = icmp eq i32 %bf.cast72, 16, !dbg !7001
  br i1 %cmp73, label %land.lhs.true, label %if.end83, !dbg !7002

land.lhs.true:                                    ; preds = %lor.lhs.false68, %cond.end61
  %36 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !7003
  %type74 = bitcast %union.tree_node* %36 to %struct.tree_type*, !dbg !7003
  %transparent_aggr_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type74, i32 0, i32 6, !dbg !7003
  %bf.load75 = load i32, i32* %transparent_aggr_flag, align 4, !dbg !7003
  %bf.lshr76 = lshr i32 %bf.load75, 12, !dbg !7003
  %bf.clear77 = and i32 %bf.lshr76, 1, !dbg !7003
  %tobool78 = icmp ne i32 %bf.clear77, 0, !dbg !7003
  br i1 %tobool78, label %if.then79, label %if.end83, !dbg !7004

if.then79:                                        ; preds = %land.lhs.true
  %37 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !7005
  %call80 = call %union.tree_node* @first_field(%union.tree_node* %37), !dbg !7005
  %common81 = bitcast %union.tree_node* %call80 to %struct.tree_common*, !dbg !7005
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2, !dbg !7005
  %38 = load %union.tree_node*, %union.tree_node** %type82, align 8, !dbg !7005
  store %union.tree_node* %38, %union.tree_node** %passed_type, align 8, !dbg !7006
  br label %if.end83, !dbg !7007

if.end83:                                         ; preds = %if.then79, %land.lhs.true, %lor.lhs.false68
  %39 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !7008
  %args_so_far84 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %39, i32 0, i32 0, !dbg !7010
  %40 = load i32, i32* %passed_mode, align 4, !dbg !7011
  %41 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !7012
  %42 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !7013
  %named_arg85 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %42, i32 0, i32 9, !dbg !7014
  %bf.load86 = load i8, i8* %named_arg85, align 4, !dbg !7014
  %bf.clear87 = and i8 %bf.load86, 1, !dbg !7014
  %bf.cast88 = zext i8 %bf.clear87 to i32, !dbg !7014
  %conv = trunc i32 %bf.cast88 to i8, !dbg !7013
  %call89 = call zeroext i8 @pass_by_reference(%struct.ix86_args* %args_so_far84, i32 %40, %union.tree_node* %41, i8 zeroext %conv), !dbg !7015
  %tobool90 = icmp ne i8 %call89, 0, !dbg !7015
  br i1 %tobool90, label %if.then91, label %if.end96, !dbg !7016

if.then91:                                        ; preds = %if.end83
  %43 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !7017
  %call92 = call %union.tree_node* @build_pointer_type(%union.tree_node* %43), !dbg !7019
  store %union.tree_node* %call92, %union.tree_node** %nominal_type, align 8, !dbg !7020
  store %union.tree_node* %call92, %union.tree_node** %passed_type, align 8, !dbg !7021
  %44 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !7022
  %passed_pointer = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %44, i32 0, i32 9, !dbg !7023
  %bf.load93 = load i8, i8* %passed_pointer, align 4, !dbg !7024
  %bf.clear94 = and i8 %bf.load93, -3, !dbg !7024
  %bf.set95 = or i8 %bf.clear94, 2, !dbg !7024
  store i8 %bf.set95, i8* %passed_pointer, align 4, !dbg !7024
  store i32 16, i32* %nominal_mode, align 4, !dbg !7025
  store i32 16, i32* %passed_mode, align 4, !dbg !7026
  br label %if.end96, !dbg !7027

if.end96:                                         ; preds = %if.then91, %if.end83
  %45 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !7028
  %base97 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !7028
  %46 = bitcast %struct.tree_base* %base97 to i64*, !dbg !7028
  %bf.load98 = load i64, i64* %46, align 8, !dbg !7028
  %bf.lshr99 = lshr i64 %bf.load98, 21, !dbg !7028
  %bf.clear100 = and i64 %bf.lshr99, 1, !dbg !7028
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !7028
  store i32 %bf.cast101, i32* %unsignedp, align 4, !dbg !7029
  %47 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !7030
  %48 = load i32, i32* %passed_mode, align 4, !dbg !7031
  %49 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7032
  %common102 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !7032
  %type103 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common102, i32 0, i32 2, !dbg !7032
  %50 = load %union.tree_node*, %union.tree_node** %type103, align 8, !dbg !7032
  %call104 = call i32 @promote_function_mode(%union.tree_node* %47, i32 %48, i32* %unsignedp, %union.tree_node* %50, i32 0), !dbg !7033
  store i32 %call104, i32* %promoted_mode, align 4, !dbg !7034
  br label %egress, !dbg !7035

egress:                                           ; preds = %if.end96, %if.then36
  call void @llvm.dbg.label(metadata !7036), !dbg !7037
  %51 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8, !dbg !7038
  %52 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !7039
  %nominal_type105 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %52, i32 0, i32 0, !dbg !7040
  store %union.tree_node* %51, %union.tree_node** %nominal_type105, align 8, !dbg !7041
  %53 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !7042
  %54 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !7043
  %passed_type106 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %54, i32 0, i32 1, !dbg !7044
  store %union.tree_node* %53, %union.tree_node** %passed_type106, align 8, !dbg !7045
  %55 = load i32, i32* %nominal_mode, align 4, !dbg !7046
  %56 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !7047
  %nominal_mode107 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %56, i32 0, i32 4, !dbg !7048
  store i32 %55, i32* %nominal_mode107, align 8, !dbg !7049
  %57 = load i32, i32* %passed_mode, align 4, !dbg !7050
  %58 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !7051
  %passed_mode108 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %58, i32 0, i32 5, !dbg !7052
  store i32 %57, i32* %passed_mode108, align 4, !dbg !7053
  %59 = load i32, i32* %promoted_mode, align 4, !dbg !7054
  %60 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !7055
  %promoted_mode109 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %60, i32 0, i32 6, !dbg !7056
  store i32 %59, i32* %promoted_mode109, align 8, !dbg !7057
  ret void, !dbg !7058
}

declare dso_local void @function_arg_advance(%struct.ix86_args*, i32, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimplify_parm_type(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !7059 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !7063, metadata !DIExpression()), !dbg !7064
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !7065, metadata !DIExpression()), !dbg !7066
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7067, metadata !DIExpression()), !dbg !7068
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7069, metadata !DIExpression()), !dbg !7070
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !7071
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7072
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !7070
  %2 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7073
  store i32 0, i32* %2, align 4, !dbg !7074
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7075
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7075
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7075
  %bf.load = load i64, i64* %4, align 8, !dbg !7075
  %bf.clear = and i64 %bf.load, 65535, !dbg !7075
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7075
  %idxprom = sext i32 %bf.cast to i64, !dbg !7075
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7075
  %5 = load i32, i32* %arrayidx, align 4, !dbg !7075
  %cmp = icmp eq i32 %5, 2, !dbg !7075
  br i1 %cmp, label %if.then, label %if.end28, !dbg !7077

if.then:                                          ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7078
  %base1 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !7078
  %7 = bitcast %struct.tree_base* %base1 to i64*, !dbg !7078
  %bf.load2 = load i64, i64* %7, align 8, !dbg !7078
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !7078
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !7078
  %cmp5 = icmp eq i32 %bf.cast4, 10, !dbg !7078
  br i1 %cmp5, label %if.then11, label %lor.lhs.false, !dbg !7078

lor.lhs.false:                                    ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7078
  %base6 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7078
  %9 = bitcast %struct.tree_base* %base6 to i64*, !dbg !7078
  %bf.load7 = load i64, i64* %9, align 8, !dbg !7078
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !7078
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !7078
  %cmp10 = icmp eq i32 %bf.cast9, 12, !dbg !7078
  br i1 %cmp10, label %if.then11, label %if.else, !dbg !7081

if.then11:                                        ; preds = %lor.lhs.false, %if.then
  %10 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7082
  store i32 1, i32* %10, align 4, !dbg !7083
  br label %if.end27, !dbg !7084

if.else:                                          ; preds = %lor.lhs.false
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7085
  %type = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !7085
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 2, !dbg !7085
  %12 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !7085
  %tobool = icmp ne %union.tree_node* %12, null, !dbg !7085
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7087

land.lhs.true:                                    ; preds = %if.else
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7088
  %type12 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !7088
  %size13 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 2, !dbg !7088
  %14 = load %union.tree_node*, %union.tree_node** %size13, align 8, !dbg !7088
  %base14 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !7088
  %15 = bitcast %struct.tree_base* %base14 to i64*, !dbg !7088
  %bf.load15 = load i64, i64* %15, align 8, !dbg !7088
  %bf.lshr = lshr i64 %bf.load15, 17, !dbg !7088
  %bf.clear16 = and i64 %bf.lshr, 1, !dbg !7088
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !7088
  %tobool18 = icmp ne i32 %bf.cast17, 0, !dbg !7088
  br i1 %tobool18, label %if.end, label %land.lhs.true19, !dbg !7089

land.lhs.true19:                                  ; preds = %land.lhs.true
  %16 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7090
  %base20 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7090
  %17 = bitcast %struct.tree_base* %base20 to i64*, !dbg !7090
  %bf.load21 = load i64, i64* %17, align 8, !dbg !7090
  %bf.lshr22 = lshr i64 %bf.load21, 17, !dbg !7090
  %bf.clear23 = and i64 %bf.lshr22, 1, !dbg !7090
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !7090
  %tobool25 = icmp ne i32 %bf.cast24, 0, !dbg !7090
  br i1 %tobool25, label %if.end, label %if.then26, !dbg !7091

if.then26:                                        ; preds = %land.lhs.true19
  %18 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7092
  %19 = load i8*, i8** %data.addr, align 8, !dbg !7094
  %20 = bitcast i8* %19 to %struct.gimple_seq_d**, !dbg !7095
  call void @gimplify_type_sizes(%union.tree_node* %18, %struct.gimple_seq_d** %20), !dbg !7096
  %21 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !7097
  store i32 1, i32* %21, align 4, !dbg !7098
  br label %if.end, !dbg !7099

if.end:                                           ; preds = %if.then26, %land.lhs.true19, %land.lhs.true, %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end, %if.then11
  br label %if.end28, !dbg !7100

if.end28:                                         ; preds = %if.end27, %entry
  ret %union.tree_node* null, !dbg !7101
}

declare dso_local void @gimplify_one_sizepos(%union.tree_node**, %struct.gimple_seq_d**) #2

declare dso_local i32 @compare_tree_int(%union.tree_node*, i64) #2

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #2

declare dso_local i8* @get_name(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_fold_indirect_ref_loc(i32, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_call_expr_loc(i32, %union.tree_node*, i32, ...) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @gimplify_and_add(%union.tree_node*, %struct.gimple_seq_d**) #2

declare dso_local %union.gimple_statement_d* @gimplify_assign(%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**) #2

declare dso_local void @decl_value_expr_insert(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !7102 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !7106, metadata !DIExpression()), !dbg !7107
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7108
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !7108
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !7108
  br i1 %tobool, label %if.then, label %if.end, !dbg !7107

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7108
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !7108
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !7108
  call void @free(i8* %4), !dbg !7108
  br label %if.end, !dbg !7108

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !7107
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !7107
  ret void, !dbg !7107
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @locate_and_pad_parm(i32 %passed_mode, %union.tree_node* %type, i32 %in_regs, i32 %partial, %union.tree_node* %fndecl, %struct.args_size* %initial_offset_ptr, %struct.locate_and_pad_arg_data* %locate) #0 !dbg !7110 {
entry:
  %passed_mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  %in_regs.addr = alloca i32, align 4
  %partial.addr = alloca i32, align 4
  %fndecl.addr = alloca %union.tree_node*, align 8
  %initial_offset_ptr.addr = alloca %struct.args_size*, align 8
  %locate.addr = alloca %struct.locate_and_pad_arg_data*, align 8
  %sizetree = alloca %union.tree_node*, align 8
  %where_pad = alloca i32, align 4
  %boundary = alloca i32, align 4
  %reg_parm_stack_space = alloca i32, align 4
  %part_size_in_regs = alloca i32, align 4
  %inc = alloca %union.tree_node*, align 8
  store i32 %passed_mode, i32* %passed_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %passed_mode.addr, metadata !7115, metadata !DIExpression()), !dbg !7116
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7117, metadata !DIExpression()), !dbg !7118
  store i32 %in_regs, i32* %in_regs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %in_regs.addr, metadata !7119, metadata !DIExpression()), !dbg !7120
  store i32 %partial, i32* %partial.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %partial.addr, metadata !7121, metadata !DIExpression()), !dbg !7122
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !7123, metadata !DIExpression()), !dbg !7124
  store %struct.args_size* %initial_offset_ptr, %struct.args_size** %initial_offset_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.args_size** %initial_offset_ptr.addr, metadata !7125, metadata !DIExpression()), !dbg !7126
  store %struct.locate_and_pad_arg_data* %locate, %struct.locate_and_pad_arg_data** %locate.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.locate_and_pad_arg_data** %locate.addr, metadata !7127, metadata !DIExpression()), !dbg !7128
  call void @llvm.dbg.declare(metadata %union.tree_node** %sizetree, metadata !7129, metadata !DIExpression()), !dbg !7130
  call void @llvm.dbg.declare(metadata i32* %where_pad, metadata !7131, metadata !DIExpression()), !dbg !7132
  call void @llvm.dbg.declare(metadata i32* %boundary, metadata !7133, metadata !DIExpression()), !dbg !7134
  call void @llvm.dbg.declare(metadata i32* %reg_parm_stack_space, metadata !7135, metadata !DIExpression()), !dbg !7136
  store i32 0, i32* %reg_parm_stack_space, align 4, !dbg !7136
  call void @llvm.dbg.declare(metadata i32* %part_size_in_regs, metadata !7137, metadata !DIExpression()), !dbg !7138
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7139
  %call = call i32 @ix86_reg_parm_stack_space(%union.tree_node* %0), !dbg !7139
  store i32 %call, i32* %reg_parm_stack_space, align 4, !dbg !7140
  %1 = load i32, i32* %in_regs.addr, align 4, !dbg !7141
  %tobool = icmp ne i32 %1, 0, !dbg !7141
  br i1 %tobool, label %if.end25, label %if.then, !dbg !7143

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !7144
  %cmp = icmp sgt i32 %2, 0, !dbg !7147
  br i1 %cmp, label %if.then1, label %if.end24, !dbg !7148

if.then1:                                         ; preds = %if.then
  %3 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8, !dbg !7149
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %3, i32 0, i32 1, !dbg !7152
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7152
  %tobool2 = icmp ne %union.tree_node* %4, null, !dbg !7149
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !7153

if.then3:                                         ; preds = %if.then1
  %5 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8, !dbg !7154
  %var4 = getelementptr inbounds %struct.args_size, %struct.args_size* %5, i32 0, i32 1, !dbg !7154
  %6 = load %union.tree_node*, %union.tree_node** %var4, align 8, !dbg !7154
  %cmp5 = icmp eq %union.tree_node* %6, null, !dbg !7154
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !7154

cond.true:                                        ; preds = %if.then3
  %7 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8, !dbg !7154
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %7, i32 0, i32 0, !dbg !7154
  %8 = load i64, i64* %constant, align 8, !dbg !7154
  %call6 = call %union.tree_node* @size_int_kind(i64 %8, i32 1), !dbg !7154
  br label %cond.end, !dbg !7154

cond.false:                                       ; preds = %if.then3
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7154
  %10 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8, !dbg !7154
  %var7 = getelementptr inbounds %struct.args_size, %struct.args_size* %10, i32 0, i32 1, !dbg !7154
  %11 = load %union.tree_node*, %union.tree_node** %var7, align 8, !dbg !7154
  %call8 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %9, %union.tree_node* %11), !dbg !7154
  %12 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8, !dbg !7154
  %constant9 = getelementptr inbounds %struct.args_size, %struct.args_size* %12, i32 0, i32 0, !dbg !7154
  %13 = load i64, i64* %constant9, align 8, !dbg !7154
  %call10 = call %union.tree_node* @size_int_kind(i64 %13, i32 1), !dbg !7154
  %call11 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call8, %union.tree_node* %call10), !dbg !7154
  br label %cond.end, !dbg !7154

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call6, %cond.true ], [ %call11, %cond.false ], !dbg !7154
  %14 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !7154
  %conv = sext i32 %14 to i64, !dbg !7154
  %call12 = call %union.tree_node* @size_int_kind(i64 %conv, i32 1), !dbg !7154
  %call13 = call %union.tree_node* @size_binop_loc(i32 0, i32 81, %union.tree_node* %cond, %union.tree_node* %call12), !dbg !7154
  %15 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8, !dbg !7156
  %var14 = getelementptr inbounds %struct.args_size, %struct.args_size* %15, i32 0, i32 1, !dbg !7157
  store %union.tree_node* %call13, %union.tree_node** %var14, align 8, !dbg !7158
  %16 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8, !dbg !7159
  %constant15 = getelementptr inbounds %struct.args_size, %struct.args_size* %16, i32 0, i32 0, !dbg !7160
  store i64 0, i64* %constant15, align 8, !dbg !7161
  br label %if.end23, !dbg !7162

if.else:                                          ; preds = %if.then1
  %17 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8, !dbg !7163
  %constant16 = getelementptr inbounds %struct.args_size, %struct.args_size* %17, i32 0, i32 0, !dbg !7165
  %18 = load i64, i64* %constant16, align 8, !dbg !7165
  %19 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !7166
  %conv17 = sext i32 %19 to i64, !dbg !7166
  %cmp18 = icmp slt i64 %18, %conv17, !dbg !7167
  br i1 %cmp18, label %if.then20, label %if.end, !dbg !7168

if.then20:                                        ; preds = %if.else
  %20 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !7169
  %conv21 = sext i32 %20 to i64, !dbg !7169
  %21 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8, !dbg !7170
  %constant22 = getelementptr inbounds %struct.args_size, %struct.args_size* %21, i32 0, i32 0, !dbg !7171
  store i64 %conv21, i64* %constant22, align 8, !dbg !7172
  br label %if.end, !dbg !7170

if.end:                                           ; preds = %if.then20, %if.else
  br label %if.end23

if.end23:                                         ; preds = %if.end, %cond.end
  br label %if.end24, !dbg !7173

if.end24:                                         ; preds = %if.end23, %if.then
  br label %if.end25, !dbg !7174

if.end25:                                         ; preds = %if.end24, %entry
  %22 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !7175
  %cmp26 = icmp eq i32 %22, 0, !dbg !7176
  br i1 %cmp26, label %cond.true28, label %cond.false29, !dbg !7175

cond.true28:                                      ; preds = %if.end25
  %23 = load i32, i32* %partial.addr, align 4, !dbg !7177
  br label %cond.end30, !dbg !7175

cond.false29:                                     ; preds = %if.end25
  br label %cond.end30, !dbg !7175

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond31 = phi i32 [ %23, %cond.true28 ], [ 0, %cond.false29 ], !dbg !7175
  store i32 %cond31, i32* %part_size_in_regs, align 4, !dbg !7178
  %24 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7179
  %tobool32 = icmp ne %union.tree_node* %24, null, !dbg !7179
  br i1 %tobool32, label %cond.true33, label %cond.false35, !dbg !7179

cond.true33:                                      ; preds = %cond.end30
  %25 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7180
  %call34 = call %union.tree_node* @size_in_bytes(%union.tree_node* %25), !dbg !7181
  br label %cond.end39, !dbg !7179

cond.false35:                                     ; preds = %cond.end30
  %26 = load i32, i32* %passed_mode.addr, align 4, !dbg !7182
  %idxprom = zext i32 %26 to i64, !dbg !7182
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !7182
  %27 = load i8, i8* %arrayidx, align 1, !dbg !7182
  %conv36 = zext i8 %27 to i16, !dbg !7182
  %conv37 = zext i16 %conv36 to i64, !dbg !7182
  %call38 = call %union.tree_node* @size_int_kind(i64 %conv37, i32 0), !dbg !7182
  br label %cond.end39, !dbg !7179

cond.end39:                                       ; preds = %cond.false35, %cond.true33
  %cond40 = phi %union.tree_node* [ %call34, %cond.true33 ], [ %call38, %cond.false35 ], !dbg !7179
  store %union.tree_node* %cond40, %union.tree_node** %sizetree, align 8, !dbg !7183
  store i32 1, i32* %where_pad, align 4, !dbg !7184
  %28 = load i32, i32* %passed_mode.addr, align 4, !dbg !7185
  %29 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7185
  %call41 = call i32 @ix86_function_arg_boundary(i32 %28, %union.tree_node* %29), !dbg !7185
  store i32 %call41, i32* %boundary, align 4, !dbg !7186
  %30 = load i32, i32* %where_pad, align 4, !dbg !7187
  %31 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7188
  %where_pad42 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %31, i32 0, i32 4, !dbg !7189
  store i32 %30, i32* %where_pad42, align 8, !dbg !7190
  %32 = load i32, i32* %boundary, align 4, !dbg !7191
  %cmp43 = icmp ugt i32 %32, -2147483648, !dbg !7193
  br i1 %cmp43, label %if.then45, label %if.end46, !dbg !7194

if.then45:                                        ; preds = %cond.end39
  store i32 -2147483648, i32* %boundary, align 4, !dbg !7195
  br label %if.end46, !dbg !7196

if.end46:                                         ; preds = %if.then45, %cond.end39
  %33 = load i32, i32* %boundary, align 4, !dbg !7197
  %34 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7198
  %boundary47 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %34, i32 0, i32 5, !dbg !7199
  store i32 %33, i32* %boundary47, align 4, !dbg !7200
  %35 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !7201
  %36 = load i32, i32* %boundary, align 4, !dbg !7205
  %cmp48 = icmp ult i32 %35, %36, !dbg !7206
  br i1 %cmp48, label %if.then50, label %if.end62, !dbg !7207

if.then50:                                        ; preds = %if.end46
  %37 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 46), align 2, !dbg !7208
  %tobool51 = icmp ne i8 %37, 0, !dbg !7211
  br i1 %tobool51, label %if.else53, label %if.then52, !dbg !7212

if.then52:                                        ; preds = %if.then50
  %38 = load i32, i32* %boundary, align 4, !dbg !7213
  store i32 %38, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !7214
  br label %if.end61, !dbg !7215

if.else53:                                        ; preds = %if.then50
  %39 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 47), align 1, !dbg !7216
  %tobool54 = icmp ne i8 %39, 0, !dbg !7216
  br i1 %tobool54, label %cond.true57, label %land.lhs.true, !dbg !7216

land.lhs.true:                                    ; preds = %if.else53
  %40 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 43), align 1, !dbg !7216
  %conv55 = zext i8 %40 to i32, !dbg !7216
  %tobool56 = icmp ne i32 %conv55, 0, !dbg !7216
  br i1 %tobool56, label %cond.false58, label %cond.true57, !dbg !7216

cond.true57:                                      ; preds = %land.lhs.true, %if.else53
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3558, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7216
  br label %cond.end59, !dbg !7216

cond.false58:                                     ; preds = %land.lhs.true
  br label %cond.end59, !dbg !7216

cond.end59:                                       ; preds = %cond.false58, %cond.true57
  %cond60 = phi i32 [ 0, %cond.true57 ], [ 0, %cond.false58 ], !dbg !7216
  br label %if.end61

if.end61:                                         ; preds = %cond.end59, %if.then52
  br label %if.end62, !dbg !7218

if.end62:                                         ; preds = %if.end61, %if.end46
  %41 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 22), align 4, !dbg !7219
  %42 = load i32, i32* %boundary, align 4, !dbg !7221
  %cmp63 = icmp ult i32 %41, %42, !dbg !7222
  br i1 %cmp63, label %if.then65, label %if.end66, !dbg !7223

if.then65:                                        ; preds = %if.end62
  %43 = load i32, i32* %boundary, align 4, !dbg !7224
  store i32 %43, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 22), align 4, !dbg !7225
  br label %if.end66, !dbg !7226

if.end66:                                         ; preds = %if.then65, %if.end62
  %44 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 23), align 8, !dbg !7227
  %45 = load i32, i32* %boundary, align 4, !dbg !7229
  %cmp67 = icmp ult i32 %44, %45, !dbg !7230
  br i1 %cmp67, label %if.then69, label %if.end70, !dbg !7231

if.then69:                                        ; preds = %if.end66
  %46 = load i32, i32* %boundary, align 4, !dbg !7232
  store i32 %46, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 23), align 8, !dbg !7233
  br label %if.end70, !dbg !7234

if.end70:                                         ; preds = %if.then69, %if.end66
  %47 = load i32, i32* %in_regs.addr, align 4, !dbg !7235
  %tobool71 = icmp ne i32 %47, 0, !dbg !7235
  br i1 %tobool71, label %lor.lhs.false, label %if.then75, !dbg !7237

lor.lhs.false:                                    ; preds = %if.end70
  %48 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7238
  %call72 = call i32 @ix86_reg_parm_stack_space(%union.tree_node* %48), !dbg !7238
  %cmp73 = icmp sgt i32 %call72, 0, !dbg !7239
  br i1 %cmp73, label %if.then75, label %if.end76, !dbg !7240

if.then75:                                        ; preds = %lor.lhs.false, %if.end70
  %49 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8, !dbg !7241
  %50 = load i32, i32* %boundary, align 4, !dbg !7242
  %51 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7243
  %alignment_pad = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %51, i32 0, i32 3, !dbg !7244
  call void @pad_to_arg_alignment(%struct.args_size* %49, i32 %50, %struct.args_size* %alignment_pad), !dbg !7245
  br label %if.end76, !dbg !7245

if.end76:                                         ; preds = %if.then75, %lor.lhs.false
  %52 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7246
  %slot_offset = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %52, i32 0, i32 2, !dbg !7247
  %53 = load %struct.args_size*, %struct.args_size** %initial_offset_ptr.addr, align 8, !dbg !7248
  %54 = bitcast %struct.args_size* %slot_offset to i8*, !dbg !7249
  %55 = bitcast %struct.args_size* %53 to i8*, !dbg !7249
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 16, i1 false), !dbg !7249
  %56 = load i32, i32* %passed_mode.addr, align 4, !dbg !7250
  %cmp77 = icmp ne i32 %56, 1, !dbg !7252
  br i1 %cmp77, label %if.then79, label %if.end82, !dbg !7253

if.then79:                                        ; preds = %if.end76
  %57 = load %union.tree_node*, %union.tree_node** %sizetree, align 8, !dbg !7254
  %int_cst = bitcast %union.tree_node* %57 to %struct.tree_int_cst*, !dbg !7254
  %int_cst80 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7254
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst80, i32 0, i32 0, !dbg !7254
  %58 = load i64, i64* %low, align 8, !dbg !7254
  %add = add i64 %58, 3, !dbg !7254
  %and = and i64 %add, -4, !dbg !7254
  %call81 = call %union.tree_node* @size_int_kind(i64 %and, i32 0), !dbg !7254
  store %union.tree_node* %call81, %union.tree_node** %sizetree, align 8, !dbg !7255
  br label %if.end82, !dbg !7256

if.end82:                                         ; preds = %if.then79, %if.end76
  %59 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7257
  %offset = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %59, i32 0, i32 1, !dbg !7258
  %60 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7259
  %slot_offset83 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %60, i32 0, i32 2, !dbg !7260
  %61 = bitcast %struct.args_size* %offset to i8*, !dbg !7260
  %62 = bitcast %struct.args_size* %slot_offset83 to i8*, !dbg !7260
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 16, i1 false), !dbg !7260
  %63 = load i32, i32* %where_pad, align 4, !dbg !7261
  %cmp84 = icmp eq i32 %63, 2, !dbg !7263
  br i1 %cmp84, label %if.then86, label %if.end88, !dbg !7264

if.then86:                                        ; preds = %if.end82
  %64 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7265
  %offset87 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %64, i32 0, i32 1, !dbg !7266
  %65 = load i32, i32* %passed_mode.addr, align 4, !dbg !7267
  %66 = load %union.tree_node*, %union.tree_node** %sizetree, align 8, !dbg !7268
  call void @pad_below(%struct.args_size* %offset87, i32 %65, %union.tree_node* %66), !dbg !7269
  br label %if.end88, !dbg !7269

if.end88:                                         ; preds = %if.then86, %if.end82
  %67 = load i32, i32* %where_pad, align 4, !dbg !7270
  %cmp89 = icmp ne i32 %67, 0, !dbg !7272
  br i1 %cmp89, label %land.lhs.true91, label %if.end99, !dbg !7273

land.lhs.true91:                                  ; preds = %if.end88
  %68 = load %union.tree_node*, %union.tree_node** %sizetree, align 8, !dbg !7274
  %call92 = call i32 @host_integerp(%union.tree_node* %68, i32 1), !dbg !7275
  %tobool93 = icmp ne i32 %call92, 0, !dbg !7275
  br i1 %tobool93, label %lor.lhs.false94, label %if.then97, !dbg !7276

lor.lhs.false94:                                  ; preds = %land.lhs.true91
  %69 = load %union.tree_node*, %union.tree_node** %sizetree, align 8, !dbg !7277
  %call95 = call i64 @tree_low_cst(%union.tree_node* %69, i32 1), !dbg !7278
  %mul = mul nsw i64 %call95, 8, !dbg !7279
  %rem = srem i64 %mul, 32, !dbg !7280
  %tobool96 = icmp ne i64 %rem, 0, !dbg !7280
  br i1 %tobool96, label %if.then97, label %if.end99, !dbg !7281

if.then97:                                        ; preds = %lor.lhs.false94, %land.lhs.true91
  %70 = load %union.tree_node*, %union.tree_node** %sizetree, align 8, !dbg !7282
  %call98 = call %union.tree_node* @round_up_loc(i32 0, %union.tree_node* %70, i32 4), !dbg !7282
  store %union.tree_node* %call98, %union.tree_node** %sizetree, align 8, !dbg !7283
  br label %if.end99, !dbg !7284

if.end99:                                         ; preds = %if.then97, %lor.lhs.false94, %if.end88
  br label %do.body, !dbg !7285

do.body:                                          ; preds = %if.end99
  call void @llvm.dbg.declare(metadata %union.tree_node** %inc, metadata !7286, metadata !DIExpression()), !dbg !7288
  %71 = load %union.tree_node*, %union.tree_node** %sizetree, align 8, !dbg !7288
  store %union.tree_node* %71, %union.tree_node** %inc, align 8, !dbg !7288
  %72 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !7289
  %call100 = call i32 @host_integerp(%union.tree_node* %72, i32 0), !dbg !7289
  %tobool101 = icmp ne i32 %call100, 0, !dbg !7289
  br i1 %tobool101, label %if.then102, label %if.else106, !dbg !7288

if.then102:                                       ; preds = %do.body
  %73 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !7289
  %call103 = call i64 @tree_low_cst(%union.tree_node* %73, i32 0), !dbg !7289
  %74 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7289
  %size = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %74, i32 0, i32 0, !dbg !7289
  %constant104 = getelementptr inbounds %struct.args_size, %struct.args_size* %size, i32 0, i32 0, !dbg !7289
  %75 = load i64, i64* %constant104, align 8, !dbg !7289
  %add105 = add nsw i64 %75, %call103, !dbg !7289
  store i64 %add105, i64* %constant104, align 8, !dbg !7289
  br label %if.end123, !dbg !7289

if.else106:                                       ; preds = %do.body
  %76 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7291
  %size107 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %76, i32 0, i32 0, !dbg !7291
  %var108 = getelementptr inbounds %struct.args_size, %struct.args_size* %size107, i32 0, i32 1, !dbg !7291
  %77 = load %union.tree_node*, %union.tree_node** %var108, align 8, !dbg !7291
  %cmp109 = icmp eq %union.tree_node* %77, null, !dbg !7291
  br i1 %cmp109, label %if.then111, label %if.else115, !dbg !7289

if.then111:                                       ; preds = %if.else106
  %78 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7291
  %79 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !7291
  %call112 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %78, %union.tree_node* %79), !dbg !7291
  %80 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7291
  %size113 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %80, i32 0, i32 0, !dbg !7291
  %var114 = getelementptr inbounds %struct.args_size, %struct.args_size* %size113, i32 0, i32 1, !dbg !7291
  store %union.tree_node* %call112, %union.tree_node** %var114, align 8, !dbg !7291
  br label %if.end122, !dbg !7291

if.else115:                                       ; preds = %if.else106
  %81 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7291
  %size116 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %81, i32 0, i32 0, !dbg !7291
  %var117 = getelementptr inbounds %struct.args_size, %struct.args_size* %size116, i32 0, i32 1, !dbg !7291
  %82 = load %union.tree_node*, %union.tree_node** %var117, align 8, !dbg !7291
  %83 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7291
  %84 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !7291
  %call118 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %83, %union.tree_node* %84), !dbg !7291
  %call119 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %82, %union.tree_node* %call118), !dbg !7291
  %85 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7291
  %size120 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %85, i32 0, i32 0, !dbg !7291
  %var121 = getelementptr inbounds %struct.args_size, %struct.args_size* %size120, i32 0, i32 1, !dbg !7291
  store %union.tree_node* %call119, %union.tree_node** %var121, align 8, !dbg !7291
  br label %if.end122

if.end122:                                        ; preds = %if.else115, %if.then111
  br label %if.end123

if.end123:                                        ; preds = %if.end122, %if.then102
  br label %do.end, !dbg !7288

do.end:                                           ; preds = %if.end123
  %86 = load i32, i32* %part_size_in_regs, align 4, !dbg !7293
  %conv124 = sext i32 %86 to i64, !dbg !7293
  %87 = load %struct.locate_and_pad_arg_data*, %struct.locate_and_pad_arg_data** %locate.addr, align 8, !dbg !7294
  %size125 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %87, i32 0, i32 0, !dbg !7295
  %constant126 = getelementptr inbounds %struct.args_size, %struct.args_size* %size125, i32 0, i32 0, !dbg !7296
  %88 = load i64, i64* %constant126, align 8, !dbg !7297
  %sub = sub nsw i64 %88, %conv124, !dbg !7297
  store i64 %sub, i64* %constant126, align 8, !dbg !7297
  ret void, !dbg !7298
}

declare dso_local i32 @ix86_reg_parm_stack_space(%union.tree_node*) #2

declare dso_local %union.tree_node* @size_binop_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

declare dso_local %union.tree_node* @size_in_bytes(%union.tree_node*) #2

declare dso_local i32 @ix86_function_arg_boundary(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @pad_to_arg_alignment(%struct.args_size* %offset_ptr, i32 %boundary, %struct.args_size* %alignment_pad) #0 !dbg !7299 {
entry:
  %offset_ptr.addr = alloca %struct.args_size*, align 8
  %boundary.addr = alloca i32, align 4
  %alignment_pad.addr = alloca %struct.args_size*, align 8
  %save_var = alloca %union.tree_node*, align 8
  %save_constant = alloca i64, align 8
  %boundary_in_bytes = alloca i32, align 4
  %sp_offset = alloca i64, align 8
  %sp_offset_tree = alloca %union.tree_node*, align 8
  %offset = alloca %union.tree_node*, align 8
  %rounded = alloca %union.tree_node*, align 8
  store %struct.args_size* %offset_ptr, %struct.args_size** %offset_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.args_size** %offset_ptr.addr, metadata !7302, metadata !DIExpression()), !dbg !7303
  store i32 %boundary, i32* %boundary.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %boundary.addr, metadata !7304, metadata !DIExpression()), !dbg !7305
  store %struct.args_size* %alignment_pad, %struct.args_size** %alignment_pad.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.args_size** %alignment_pad.addr, metadata !7306, metadata !DIExpression()), !dbg !7307
  call void @llvm.dbg.declare(metadata %union.tree_node** %save_var, metadata !7308, metadata !DIExpression()), !dbg !7309
  store %union.tree_node* null, %union.tree_node** %save_var, align 8, !dbg !7309
  call void @llvm.dbg.declare(metadata i64* %save_constant, metadata !7310, metadata !DIExpression()), !dbg !7311
  store i64 0, i64* %save_constant, align 8, !dbg !7311
  call void @llvm.dbg.declare(metadata i32* %boundary_in_bytes, metadata !7312, metadata !DIExpression()), !dbg !7313
  %0 = load i32, i32* %boundary.addr, align 4, !dbg !7314
  %div = sdiv i32 %0, 8, !dbg !7315
  store i32 %div, i32* %boundary_in_bytes, align 4, !dbg !7313
  call void @llvm.dbg.declare(metadata i64* %sp_offset, metadata !7316, metadata !DIExpression()), !dbg !7317
  store i64 0, i64* %sp_offset, align 8, !dbg !7317
  %1 = load i32, i32* %boundary.addr, align 4, !dbg !7318
  %cmp = icmp sgt i32 %1, 32, !dbg !7320
  br i1 %cmp, label %if.then, label %if.end, !dbg !7321

if.then:                                          ; preds = %entry
  %2 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7322
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %2, i32 0, i32 1, !dbg !7324
  %3 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7324
  store %union.tree_node* %3, %union.tree_node** %save_var, align 8, !dbg !7325
  %4 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7326
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %4, i32 0, i32 0, !dbg !7327
  %5 = load i64, i64* %constant, align 8, !dbg !7327
  store i64 %5, i64* %save_constant, align 8, !dbg !7328
  br label %if.end, !dbg !7329

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.args_size*, %struct.args_size** %alignment_pad.addr, align 8, !dbg !7330
  %var1 = getelementptr inbounds %struct.args_size, %struct.args_size* %6, i32 0, i32 1, !dbg !7331
  store %union.tree_node* null, %union.tree_node** %var1, align 8, !dbg !7332
  %7 = load %struct.args_size*, %struct.args_size** %alignment_pad.addr, align 8, !dbg !7333
  %constant2 = getelementptr inbounds %struct.args_size, %struct.args_size* %7, i32 0, i32 0, !dbg !7334
  store i64 0, i64* %constant2, align 8, !dbg !7335
  %8 = load i32, i32* %boundary.addr, align 4, !dbg !7336
  %cmp3 = icmp sgt i32 %8, 8, !dbg !7338
  br i1 %cmp3, label %if.then4, label %if.end43, !dbg !7339

if.then4:                                         ; preds = %if.end
  %9 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7340
  %var5 = getelementptr inbounds %struct.args_size, %struct.args_size* %9, i32 0, i32 1, !dbg !7343
  %10 = load %union.tree_node*, %union.tree_node** %var5, align 8, !dbg !7343
  %tobool = icmp ne %union.tree_node* %10, null, !dbg !7340
  br i1 %tobool, label %if.then6, label %if.else, !dbg !7344

if.then6:                                         ; preds = %if.then4
  call void @llvm.dbg.declare(metadata %union.tree_node** %sp_offset_tree, metadata !7345, metadata !DIExpression()), !dbg !7347
  %11 = load i64, i64* %sp_offset, align 8, !dbg !7348
  %call = call %union.tree_node* @size_int_kind(i64 %11, i32 1), !dbg !7348
  store %union.tree_node* %call, %union.tree_node** %sp_offset_tree, align 8, !dbg !7347
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset, metadata !7349, metadata !DIExpression()), !dbg !7350
  %12 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7351
  %var7 = getelementptr inbounds %struct.args_size, %struct.args_size* %12, i32 0, i32 1, !dbg !7351
  %13 = load %union.tree_node*, %union.tree_node** %var7, align 8, !dbg !7351
  %cmp8 = icmp eq %union.tree_node* %13, null, !dbg !7351
  br i1 %cmp8, label %cond.true, label %cond.false, !dbg !7351

cond.true:                                        ; preds = %if.then6
  %14 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7351
  %constant9 = getelementptr inbounds %struct.args_size, %struct.args_size* %14, i32 0, i32 0, !dbg !7351
  %15 = load i64, i64* %constant9, align 8, !dbg !7351
  %call10 = call %union.tree_node* @size_int_kind(i64 %15, i32 1), !dbg !7351
  br label %cond.end, !dbg !7351

cond.false:                                       ; preds = %if.then6
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7351
  %17 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7351
  %var11 = getelementptr inbounds %struct.args_size, %struct.args_size* %17, i32 0, i32 1, !dbg !7351
  %18 = load %union.tree_node*, %union.tree_node** %var11, align 8, !dbg !7351
  %call12 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %16, %union.tree_node* %18), !dbg !7351
  %19 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7351
  %constant13 = getelementptr inbounds %struct.args_size, %struct.args_size* %19, i32 0, i32 0, !dbg !7351
  %20 = load i64, i64* %constant13, align 8, !dbg !7351
  %call14 = call %union.tree_node* @size_int_kind(i64 %20, i32 1), !dbg !7351
  %call15 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call12, %union.tree_node* %call14), !dbg !7351
  br label %cond.end, !dbg !7351

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call10, %cond.true ], [ %call15, %cond.false ], !dbg !7351
  %21 = load %union.tree_node*, %union.tree_node** %sp_offset_tree, align 8, !dbg !7351
  %call16 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %cond, %union.tree_node* %21), !dbg !7351
  store %union.tree_node* %call16, %union.tree_node** %offset, align 8, !dbg !7350
  call void @llvm.dbg.declare(metadata %union.tree_node** %rounded, metadata !7352, metadata !DIExpression()), !dbg !7353
  %22 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !7354
  %23 = load i32, i32* %boundary.addr, align 4, !dbg !7354
  %div17 = sdiv i32 %23, 8, !dbg !7354
  %call18 = call %union.tree_node* @round_up_loc(i32 0, %union.tree_node* %22, i32 %div17), !dbg !7354
  store %union.tree_node* %call18, %union.tree_node** %rounded, align 8, !dbg !7353
  %24 = load %union.tree_node*, %union.tree_node** %rounded, align 8, !dbg !7355
  %25 = load %union.tree_node*, %union.tree_node** %sp_offset_tree, align 8, !dbg !7355
  %call19 = call %union.tree_node* @size_binop_loc(i32 0, i32 64, %union.tree_node* %24, %union.tree_node* %25), !dbg !7355
  %26 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7356
  %var20 = getelementptr inbounds %struct.args_size, %struct.args_size* %26, i32 0, i32 1, !dbg !7357
  store %union.tree_node* %call19, %union.tree_node** %var20, align 8, !dbg !7358
  %27 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7359
  %constant21 = getelementptr inbounds %struct.args_size, %struct.args_size* %27, i32 0, i32 0, !dbg !7360
  store i64 0, i64* %constant21, align 8, !dbg !7361
  %28 = load i32, i32* %boundary.addr, align 4, !dbg !7362
  %cmp22 = icmp sgt i32 %28, 32, !dbg !7364
  br i1 %cmp22, label %if.then23, label %if.end27, !dbg !7365

if.then23:                                        ; preds = %cond.end
  %29 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7366
  %var24 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 1, !dbg !7366
  %30 = load %union.tree_node*, %union.tree_node** %var24, align 8, !dbg !7366
  %31 = load %union.tree_node*, %union.tree_node** %save_var, align 8, !dbg !7366
  %call25 = call %union.tree_node* @size_binop_loc(i32 0, i32 64, %union.tree_node* %30, %union.tree_node* %31), !dbg !7366
  %32 = load %struct.args_size*, %struct.args_size** %alignment_pad.addr, align 8, !dbg !7367
  %var26 = getelementptr inbounds %struct.args_size, %struct.args_size* %32, i32 0, i32 1, !dbg !7368
  store %union.tree_node* %call25, %union.tree_node** %var26, align 8, !dbg !7369
  br label %if.end27, !dbg !7367

if.end27:                                         ; preds = %if.then23, %cond.end
  br label %if.end42, !dbg !7370

if.else:                                          ; preds = %if.then4
  %33 = load i64, i64* %sp_offset, align 8, !dbg !7371
  %sub = sub nsw i64 0, %33, !dbg !7373
  %34 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7374
  %constant28 = getelementptr inbounds %struct.args_size, %struct.args_size* %34, i32 0, i32 0, !dbg !7374
  %35 = load i64, i64* %constant28, align 8, !dbg !7374
  %36 = load i64, i64* %sp_offset, align 8, !dbg !7374
  %add = add nsw i64 %35, %36, !dbg !7374
  %37 = load i32, i32* %boundary_in_bytes, align 4, !dbg !7374
  %conv = sext i32 %37 to i64, !dbg !7374
  %add29 = add nsw i64 %add, %conv, !dbg !7374
  %sub30 = sub nsw i64 %add29, 1, !dbg !7374
  %38 = load i32, i32* %boundary_in_bytes, align 4, !dbg !7374
  %sub31 = sub nsw i32 %38, 1, !dbg !7374
  %neg = xor i32 %sub31, -1, !dbg !7374
  %conv32 = sext i32 %neg to i64, !dbg !7374
  %and = and i64 %sub30, %conv32, !dbg !7374
  %add33 = add nsw i64 %sub, %and, !dbg !7375
  %39 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7376
  %constant34 = getelementptr inbounds %struct.args_size, %struct.args_size* %39, i32 0, i32 0, !dbg !7377
  store i64 %add33, i64* %constant34, align 8, !dbg !7378
  %40 = load i32, i32* %boundary.addr, align 4, !dbg !7379
  %cmp35 = icmp sgt i32 %40, 32, !dbg !7381
  br i1 %cmp35, label %if.then37, label %if.end41, !dbg !7382

if.then37:                                        ; preds = %if.else
  %41 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7383
  %constant38 = getelementptr inbounds %struct.args_size, %struct.args_size* %41, i32 0, i32 0, !dbg !7384
  %42 = load i64, i64* %constant38, align 8, !dbg !7384
  %43 = load i64, i64* %save_constant, align 8, !dbg !7385
  %sub39 = sub nsw i64 %42, %43, !dbg !7386
  %44 = load %struct.args_size*, %struct.args_size** %alignment_pad.addr, align 8, !dbg !7387
  %constant40 = getelementptr inbounds %struct.args_size, %struct.args_size* %44, i32 0, i32 0, !dbg !7388
  store i64 %sub39, i64* %constant40, align 8, !dbg !7389
  br label %if.end41, !dbg !7387

if.end41:                                         ; preds = %if.then37, %if.else
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.end27
  br label %if.end43, !dbg !7390

if.end43:                                         ; preds = %if.end42, %if.end
  ret void, !dbg !7391
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @pad_below(%struct.args_size* %offset_ptr, i32 %passed_mode, %union.tree_node* %sizetree) #0 !dbg !7392 {
entry:
  %offset_ptr.addr = alloca %struct.args_size*, align 8
  %passed_mode.addr = alloca i32, align 4
  %sizetree.addr = alloca %union.tree_node*, align 8
  %s2 = alloca %union.tree_node*, align 8
  %inc = alloca %union.tree_node*, align 8
  %dec = alloca %union.tree_node*, align 8
  store %struct.args_size* %offset_ptr, %struct.args_size** %offset_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.args_size** %offset_ptr.addr, metadata !7395, metadata !DIExpression()), !dbg !7396
  store i32 %passed_mode, i32* %passed_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %passed_mode.addr, metadata !7397, metadata !DIExpression()), !dbg !7398
  store %union.tree_node* %sizetree, %union.tree_node** %sizetree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %sizetree.addr, metadata !7399, metadata !DIExpression()), !dbg !7400
  %0 = load i32, i32* %passed_mode.addr, align 4, !dbg !7401
  %cmp = icmp ne i32 %0, 1, !dbg !7403
  br i1 %cmp, label %if.then, label %if.else, !dbg !7404

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %passed_mode.addr, align 4, !dbg !7405
  %idxprom = zext i32 %1 to i64, !dbg !7405
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !7405
  %2 = load i8, i8* %arrayidx, align 1, !dbg !7405
  %conv = zext i8 %2 to i16, !dbg !7405
  %conv1 = zext i16 %conv to i32, !dbg !7405
  %mul = mul nsw i32 %conv1, 8, !dbg !7405
  %conv2 = trunc i32 %mul to i16, !dbg !7405
  %conv3 = zext i16 %conv2 to i32, !dbg !7405
  %rem = srem i32 %conv3, 32, !dbg !7408
  %tobool = icmp ne i32 %rem, 0, !dbg !7408
  br i1 %tobool, label %if.then4, label %if.end, !dbg !7409

if.then4:                                         ; preds = %if.then
  %3 = load i32, i32* %passed_mode.addr, align 4, !dbg !7410
  %idxprom5 = zext i32 %3 to i64, !dbg !7410
  %arrayidx6 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom5, !dbg !7410
  %4 = load i8, i8* %arrayidx6, align 1, !dbg !7410
  %conv7 = zext i8 %4 to i16, !dbg !7410
  %conv8 = zext i16 %conv7 to i32, !dbg !7410
  %mul9 = mul nsw i32 %conv8, 8, !dbg !7410
  %conv10 = trunc i32 %mul9 to i16, !dbg !7410
  %conv11 = zext i16 %conv10 to i32, !dbg !7410
  %add = add nsw i32 %conv11, 32, !dbg !7411
  %sub = sub nsw i32 %add, 1, !dbg !7412
  %div = sdiv i32 %sub, 32, !dbg !7413
  %mul12 = mul nsw i32 %div, 32, !dbg !7414
  %div13 = sdiv i32 %mul12, 8, !dbg !7415
  %5 = load i32, i32* %passed_mode.addr, align 4, !dbg !7416
  %idxprom14 = zext i32 %5 to i64, !dbg !7416
  %arrayidx15 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom14, !dbg !7416
  %6 = load i8, i8* %arrayidx15, align 1, !dbg !7416
  %conv16 = zext i8 %6 to i16, !dbg !7416
  %conv17 = zext i16 %conv16 to i32, !dbg !7416
  %sub18 = sub nsw i32 %div13, %conv17, !dbg !7417
  %conv19 = sext i32 %sub18 to i64, !dbg !7418
  %7 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7419
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %7, i32 0, i32 0, !dbg !7420
  %8 = load i64, i64* %constant, align 8, !dbg !7421
  %add20 = add nsw i64 %8, %conv19, !dbg !7421
  store i64 %add20, i64* %constant, align 8, !dbg !7421
  br label %if.end, !dbg !7419

if.end:                                           ; preds = %if.then4, %if.then
  br label %if.end72, !dbg !7422

if.else:                                          ; preds = %entry
  %9 = load %union.tree_node*, %union.tree_node** %sizetree.addr, align 8, !dbg !7423
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !7423
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !7423
  %bf.load = load i64, i64* %10, align 8, !dbg !7423
  %bf.clear = and i64 %bf.load, 65535, !dbg !7423
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7423
  %cmp21 = icmp ne i32 %bf.cast, 23, !dbg !7426
  br i1 %cmp21, label %if.then27, label %lor.lhs.false, !dbg !7427

lor.lhs.false:                                    ; preds = %if.else
  %11 = load %union.tree_node*, %union.tree_node** %sizetree.addr, align 8, !dbg !7428
  %int_cst = bitcast %union.tree_node* %11 to %struct.tree_int_cst*, !dbg !7428
  %int_cst23 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !7428
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst23, i32 0, i32 0, !dbg !7428
  %12 = load i64, i64* %low, align 8, !dbg !7428
  %mul24 = mul i64 %12, 8, !dbg !7429
  %rem25 = urem i64 %mul24, 32, !dbg !7430
  %tobool26 = icmp ne i64 %rem25, 0, !dbg !7430
  br i1 %tobool26, label %if.then27, label %if.end71, !dbg !7431

if.then27:                                        ; preds = %lor.lhs.false, %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %s2, metadata !7432, metadata !DIExpression()), !dbg !7434
  %13 = load %union.tree_node*, %union.tree_node** %sizetree.addr, align 8, !dbg !7435
  %call = call %union.tree_node* @round_up_loc(i32 0, %union.tree_node* %13, i32 4), !dbg !7435
  store %union.tree_node* %call, %union.tree_node** %s2, align 8, !dbg !7434
  br label %do.body, !dbg !7436

do.body:                                          ; preds = %if.then27
  call void @llvm.dbg.declare(metadata %union.tree_node** %inc, metadata !7437, metadata !DIExpression()), !dbg !7439
  %14 = load %union.tree_node*, %union.tree_node** %s2, align 8, !dbg !7439
  store %union.tree_node* %14, %union.tree_node** %inc, align 8, !dbg !7439
  %15 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !7440
  %call28 = call i32 @host_integerp(%union.tree_node* %15, i32 0), !dbg !7440
  %tobool29 = icmp ne i32 %call28, 0, !dbg !7440
  br i1 %tobool29, label %if.then30, label %if.else34, !dbg !7439

if.then30:                                        ; preds = %do.body
  %16 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !7440
  %call31 = call i64 @tree_low_cst(%union.tree_node* %16, i32 0), !dbg !7440
  %17 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7440
  %constant32 = getelementptr inbounds %struct.args_size, %struct.args_size* %17, i32 0, i32 0, !dbg !7440
  %18 = load i64, i64* %constant32, align 8, !dbg !7440
  %add33 = add nsw i64 %18, %call31, !dbg !7440
  store i64 %add33, i64* %constant32, align 8, !dbg !7440
  br label %if.end46, !dbg !7440

if.else34:                                        ; preds = %do.body
  %19 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7442
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %19, i32 0, i32 1, !dbg !7442
  %20 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7442
  %cmp35 = icmp eq %union.tree_node* %20, null, !dbg !7442
  br i1 %cmp35, label %if.then37, label %if.else40, !dbg !7440

if.then37:                                        ; preds = %if.else34
  %21 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7442
  %22 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !7442
  %call38 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %21, %union.tree_node* %22), !dbg !7442
  %23 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7442
  %var39 = getelementptr inbounds %struct.args_size, %struct.args_size* %23, i32 0, i32 1, !dbg !7442
  store %union.tree_node* %call38, %union.tree_node** %var39, align 8, !dbg !7442
  br label %if.end45, !dbg !7442

if.else40:                                        ; preds = %if.else34
  %24 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7442
  %var41 = getelementptr inbounds %struct.args_size, %struct.args_size* %24, i32 0, i32 1, !dbg !7442
  %25 = load %union.tree_node*, %union.tree_node** %var41, align 8, !dbg !7442
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7442
  %27 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !7442
  %call42 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %26, %union.tree_node* %27), !dbg !7442
  %call43 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %25, %union.tree_node* %call42), !dbg !7442
  %28 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7442
  %var44 = getelementptr inbounds %struct.args_size, %struct.args_size* %28, i32 0, i32 1, !dbg !7442
  store %union.tree_node* %call43, %union.tree_node** %var44, align 8, !dbg !7442
  br label %if.end45

if.end45:                                         ; preds = %if.else40, %if.then37
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then30
  br label %do.end, !dbg !7439

do.end:                                           ; preds = %if.end46
  br label %do.body47, !dbg !7444

do.body47:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %dec, metadata !7445, metadata !DIExpression()), !dbg !7447
  %29 = load %union.tree_node*, %union.tree_node** %sizetree.addr, align 8, !dbg !7447
  store %union.tree_node* %29, %union.tree_node** %dec, align 8, !dbg !7447
  %30 = load %union.tree_node*, %union.tree_node** %dec, align 8, !dbg !7448
  %call48 = call i32 @host_integerp(%union.tree_node* %30, i32 0), !dbg !7448
  %tobool49 = icmp ne i32 %call48, 0, !dbg !7448
  br i1 %tobool49, label %if.then50, label %if.else54, !dbg !7447

if.then50:                                        ; preds = %do.body47
  %31 = load %union.tree_node*, %union.tree_node** %dec, align 8, !dbg !7448
  %call51 = call i64 @tree_low_cst(%union.tree_node* %31, i32 0), !dbg !7448
  %32 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7448
  %constant52 = getelementptr inbounds %struct.args_size, %struct.args_size* %32, i32 0, i32 0, !dbg !7448
  %33 = load i64, i64* %constant52, align 8, !dbg !7448
  %sub53 = sub nsw i64 %33, %call51, !dbg !7448
  store i64 %sub53, i64* %constant52, align 8, !dbg !7448
  br label %if.end69, !dbg !7448

if.else54:                                        ; preds = %do.body47
  %34 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7450
  %var55 = getelementptr inbounds %struct.args_size, %struct.args_size* %34, i32 0, i32 1, !dbg !7450
  %35 = load %union.tree_node*, %union.tree_node** %var55, align 8, !dbg !7450
  %cmp56 = icmp eq %union.tree_node* %35, null, !dbg !7450
  br i1 %cmp56, label %if.then58, label %if.else63, !dbg !7448

if.then58:                                        ; preds = %if.else54
  %call59 = call %union.tree_node* @size_int_kind(i64 0, i32 1), !dbg !7450
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7450
  %37 = load %union.tree_node*, %union.tree_node** %dec, align 8, !dbg !7450
  %call60 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %36, %union.tree_node* %37), !dbg !7450
  %call61 = call %union.tree_node* @size_binop_loc(i32 0, i32 64, %union.tree_node* %call59, %union.tree_node* %call60), !dbg !7450
  %38 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7450
  %var62 = getelementptr inbounds %struct.args_size, %struct.args_size* %38, i32 0, i32 1, !dbg !7450
  store %union.tree_node* %call61, %union.tree_node** %var62, align 8, !dbg !7450
  br label %if.end68, !dbg !7450

if.else63:                                        ; preds = %if.else54
  %39 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7450
  %var64 = getelementptr inbounds %struct.args_size, %struct.args_size* %39, i32 0, i32 1, !dbg !7450
  %40 = load %union.tree_node*, %union.tree_node** %var64, align 8, !dbg !7450
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7450
  %42 = load %union.tree_node*, %union.tree_node** %dec, align 8, !dbg !7450
  %call65 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %41, %union.tree_node* %42), !dbg !7450
  %call66 = call %union.tree_node* @size_binop_loc(i32 0, i32 64, %union.tree_node* %40, %union.tree_node* %call65), !dbg !7450
  %43 = load %struct.args_size*, %struct.args_size** %offset_ptr.addr, align 8, !dbg !7450
  %var67 = getelementptr inbounds %struct.args_size, %struct.args_size* %43, i32 0, i32 1, !dbg !7450
  store %union.tree_node* %call66, %union.tree_node** %var67, align 8, !dbg !7450
  br label %if.end68

if.end68:                                         ; preds = %if.else63, %if.then58
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then50
  br label %do.end70, !dbg !7447

do.end70:                                         ; preds = %if.end69
  br label %if.end71, !dbg !7452

if.end71:                                         ; preds = %do.end70, %lor.lhs.false
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.end
  ret void, !dbg !7453
}

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local %union.tree_node* @round_up_loc(i32, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @generate_setjmp_warnings() #0 !dbg !7454 {
entry:
  %setjmp_crosses = alloca %struct.bitmap_head_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %setjmp_crosses, metadata !7455, metadata !DIExpression()), !dbg !7457
  %call = call %struct.bitmap_head_def* @regstat_get_setjmp_crosses(), !dbg !7458
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %setjmp_crosses, align 8, !dbg !7457
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7459
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1, !dbg !7459
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7459
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 3, !dbg !7459
  %2 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !7459
  %cmp = icmp eq i32 %2, 2, !dbg !7461
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7462

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %setjmp_crosses, align 8, !dbg !7463
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %3, i32 0, i32 0, !dbg !7463
  %4 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !7463
  %tobool = icmp ne %struct.bitmap_element_def* %4, null, !dbg !7463
  br i1 %tobool, label %if.end, label %if.then, !dbg !7464

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !7465

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %setjmp_crosses, align 8, !dbg !7466
  %6 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7467
  %decl_common = bitcast %union.tree_node* %6 to %struct.tree_decl_common*, !dbg !7467
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !7467
  %7 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !7467
  call void @setjmp_vars_warning(%struct.bitmap_head_def* %5, %union.tree_node* %7), !dbg !7468
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %setjmp_crosses, align 8, !dbg !7469
  call void @setjmp_args_warning(%struct.bitmap_head_def* %8), !dbg !7470
  br label %return, !dbg !7471

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !7471
}

declare dso_local %struct.bitmap_head_def* @regstat_get_setjmp_crosses() #2

; Function Attrs: noinline nounwind uwtable
define internal void @setjmp_vars_warning(%struct.bitmap_head_def* %setjmp_crosses, %union.tree_node* %block) #0 !dbg !7472 {
entry:
  %setjmp_crosses.addr = alloca %struct.bitmap_head_def*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %sub = alloca %union.tree_node*, align 8
  store %struct.bitmap_head_def* %setjmp_crosses, %struct.bitmap_head_def** %setjmp_crosses.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %setjmp_crosses.addr, metadata !7475, metadata !DIExpression()), !dbg !7476
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !7477, metadata !DIExpression()), !dbg !7478
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7479, metadata !DIExpression()), !dbg !7480
  call void @llvm.dbg.declare(metadata %union.tree_node** %sub, metadata !7481, metadata !DIExpression()), !dbg !7482
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7483
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*, !dbg !7483
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 3, !dbg !7483
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !7483
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !7485
  br label %for.cond, !dbg !7486

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7487
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !7489
  br i1 %tobool, label %for.body, label %for.end, !dbg !7489

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7490
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !7490
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !7490
  %bf.load = load i64, i64* %4, align 8, !dbg !7490
  %bf.clear = and i64 %bf.load, 65535, !dbg !7490
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7490
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7493
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7494

land.lhs.true:                                    ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7495
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !7495
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !7495
  %bf.load3 = load i64, i64* %6, align 8, !dbg !7495
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !7495
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !7495
  %idxprom = zext i32 %bf.cast5 to i64, !dbg !7495
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !7495
  %arrayidx6 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !7495
  %7 = load i8, i8* %arrayidx6, align 1, !dbg !7495
  %conv = zext i8 %7 to i32, !dbg !7495
  %tobool7 = icmp ne i32 %conv, 0, !dbg !7495
  br i1 %tobool7, label %land.lhs.true8, label %if.end, !dbg !7495

land.lhs.true8:                                   ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7495
  %decl_with_rtl = bitcast %union.tree_node* %8 to %struct.tree_decl_with_rtl*, !dbg !7495
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !7495
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !7495
  %cmp9 = icmp ne %struct.rtx_def* %9, null, !dbg !7495
  br i1 %cmp9, label %land.lhs.true11, label %if.end, !dbg !7496

land.lhs.true11:                                  ; preds = %land.lhs.true8
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7497
  %decl_with_rtl12 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_rtl*, !dbg !7497
  %rtl13 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl12, i32 0, i32 1, !dbg !7497
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl13, align 8, !dbg !7497
  %tobool14 = icmp ne %struct.rtx_def* %11, null, !dbg !7497
  br i1 %tobool14, label %cond.true, label %cond.false, !dbg !7497

cond.true:                                        ; preds = %land.lhs.true11
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7497
  %decl_with_rtl15 = bitcast %union.tree_node* %12 to %struct.tree_decl_with_rtl*, !dbg !7497
  %rtl16 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl15, i32 0, i32 1, !dbg !7497
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl16, align 8, !dbg !7497
  br label %cond.end, !dbg !7497

cond.false:                                       ; preds = %land.lhs.true11
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7497
  call void @make_decl_rtl(%union.tree_node* %14), !dbg !7497
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7497
  %decl_with_rtl17 = bitcast %union.tree_node* %15 to %struct.tree_decl_with_rtl*, !dbg !7497
  %rtl18 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl17, i32 0, i32 1, !dbg !7497
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl18, align 8, !dbg !7497
  br label %cond.end, !dbg !7497

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %13, %cond.true ], [ %16, %cond.false ], !dbg !7497
  %17 = bitcast %struct.rtx_def* %cond to i32*, !dbg !7497
  %bf.load19 = load i32, i32* %17, align 8, !dbg !7497
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !7497
  %cmp21 = icmp eq i32 %bf.clear20, 37, !dbg !7497
  br i1 %cmp21, label %land.lhs.true23, label %if.end, !dbg !7498

land.lhs.true23:                                  ; preds = %cond.end
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %setjmp_crosses.addr, align 8, !dbg !7499
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7500
  %decl_with_rtl24 = bitcast %union.tree_node* %19 to %struct.tree_decl_with_rtl*, !dbg !7500
  %rtl25 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl24, i32 0, i32 1, !dbg !7500
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl25, align 8, !dbg !7500
  %tobool26 = icmp ne %struct.rtx_def* %20, null, !dbg !7500
  br i1 %tobool26, label %cond.true27, label %cond.false30, !dbg !7500

cond.true27:                                      ; preds = %land.lhs.true23
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7500
  %decl_with_rtl28 = bitcast %union.tree_node* %21 to %struct.tree_decl_with_rtl*, !dbg !7500
  %rtl29 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl28, i32 0, i32 1, !dbg !7500
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtl29, align 8, !dbg !7500
  br label %cond.end33, !dbg !7500

cond.false30:                                     ; preds = %land.lhs.true23
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7500
  call void @make_decl_rtl(%union.tree_node* %23), !dbg !7500
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7500
  %decl_with_rtl31 = bitcast %union.tree_node* %24 to %struct.tree_decl_with_rtl*, !dbg !7500
  %rtl32 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl31, i32 0, i32 1, !dbg !7500
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtl32, align 8, !dbg !7500
  br label %cond.end33, !dbg !7500

cond.end33:                                       ; preds = %cond.false30, %cond.true27
  %cond34 = phi %struct.rtx_def* [ %22, %cond.true27 ], [ %25, %cond.false30 ], !dbg !7500
  %call = call i32 @rhs_regno(%struct.rtx_def* %cond34), !dbg !7500
  %call35 = call zeroext i8 @regno_clobbered_at_setjmp(%struct.bitmap_head_def* %18, i32 %call), !dbg !7501
  %conv36 = zext i8 %call35 to i32, !dbg !7501
  %tobool37 = icmp ne i32 %conv36, 0, !dbg !7501
  br i1 %tobool37, label %if.then, label %if.end, !dbg !7502

if.then:                                          ; preds = %cond.end33
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7503
  %call38 = call zeroext i8 (i32, i8*, ...) @warning(i32 56, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.13, i64 0, i64 0), %union.tree_node* %26), !dbg !7504
  br label %if.end, !dbg !7504

if.end:                                           ; preds = %if.then, %cond.end33, %cond.end, %land.lhs.true8, %land.lhs.true, %for.body
  br label %for.inc, !dbg !7505

for.inc:                                          ; preds = %if.end
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7506
  %common = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !7506
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7506
  %28 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7506
  store %union.tree_node* %28, %union.tree_node** %decl, align 8, !dbg !7507
  br label %for.cond, !dbg !7508, !llvm.loop !7509

for.end:                                          ; preds = %for.cond
  %29 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7511
  %block39 = bitcast %union.tree_node* %29 to %struct.tree_block*, !dbg !7511
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block39, i32 0, i32 5, !dbg !7511
  %30 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !7511
  store %union.tree_node* %30, %union.tree_node** %sub, align 8, !dbg !7513
  br label %for.cond40, !dbg !7514

for.cond40:                                       ; preds = %for.inc43, %for.end
  %31 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !7515
  %tobool41 = icmp ne %union.tree_node* %31, null, !dbg !7517
  br i1 %tobool41, label %for.body42, label %for.end46, !dbg !7517

for.body42:                                       ; preds = %for.cond40
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %setjmp_crosses.addr, align 8, !dbg !7518
  %33 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !7519
  call void @setjmp_vars_warning(%struct.bitmap_head_def* %32, %union.tree_node* %33), !dbg !7520
  br label %for.inc43, !dbg !7520

for.inc43:                                        ; preds = %for.body42
  %34 = load %union.tree_node*, %union.tree_node** %sub, align 8, !dbg !7521
  %common44 = bitcast %union.tree_node* %34 to %struct.tree_common*, !dbg !7521
  %chain45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common44, i32 0, i32 1, !dbg !7521
  %35 = load %union.tree_node*, %union.tree_node** %chain45, align 8, !dbg !7521
  store %union.tree_node* %35, %union.tree_node** %sub, align 8, !dbg !7522
  br label %for.cond40, !dbg !7523, !llvm.loop !7524

for.end46:                                        ; preds = %for.cond40
  ret void, !dbg !7526
}

; Function Attrs: noinline nounwind uwtable
define internal void @setjmp_args_warning(%struct.bitmap_head_def* %setjmp_crosses) #0 !dbg !7527 {
entry:
  %setjmp_crosses.addr = alloca %struct.bitmap_head_def*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %struct.bitmap_head_def* %setjmp_crosses, %struct.bitmap_head_def** %setjmp_crosses.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %setjmp_crosses.addr, metadata !7530, metadata !DIExpression()), !dbg !7531
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7532, metadata !DIExpression()), !dbg !7533
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7534
  %decl_non_common = bitcast %union.tree_node* %0 to %struct.tree_decl_non_common*, !dbg !7534
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !7534
  %1 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !7534
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !7536
  br label %for.cond, !dbg !7537

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7538
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !7540
  br i1 %tobool, label %for.body, label %for.end, !dbg !7540

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7541
  %decl_with_rtl = bitcast %union.tree_node* %3 to %struct.tree_decl_with_rtl*, !dbg !7541
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !7541
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !7541
  %tobool1 = icmp ne %struct.rtx_def* %4, null, !dbg !7541
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7541

cond.true:                                        ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7541
  %decl_with_rtl2 = bitcast %union.tree_node* %5 to %struct.tree_decl_with_rtl*, !dbg !7541
  %rtl3 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl2, i32 0, i32 1, !dbg !7541
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl3, align 8, !dbg !7541
  br label %cond.end, !dbg !7541

cond.false:                                       ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7541
  call void @make_decl_rtl(%union.tree_node* %7), !dbg !7541
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7541
  %decl_with_rtl4 = bitcast %union.tree_node* %8 to %struct.tree_decl_with_rtl*, !dbg !7541
  %rtl5 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl4, i32 0, i32 1, !dbg !7541
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8, !dbg !7541
  br label %cond.end, !dbg !7541

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %6, %cond.true ], [ %9, %cond.false ], !dbg !7541
  %cmp = icmp ne %struct.rtx_def* %cond, null, !dbg !7543
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7544

land.lhs.true:                                    ; preds = %cond.end
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7545
  %decl_with_rtl6 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_rtl*, !dbg !7545
  %rtl7 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl6, i32 0, i32 1, !dbg !7545
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl7, align 8, !dbg !7545
  %tobool8 = icmp ne %struct.rtx_def* %11, null, !dbg !7545
  br i1 %tobool8, label %cond.true9, label %cond.false12, !dbg !7545

cond.true9:                                       ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7545
  %decl_with_rtl10 = bitcast %union.tree_node* %12 to %struct.tree_decl_with_rtl*, !dbg !7545
  %rtl11 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl10, i32 0, i32 1, !dbg !7545
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rtl11, align 8, !dbg !7545
  br label %cond.end15, !dbg !7545

cond.false12:                                     ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7545
  call void @make_decl_rtl(%union.tree_node* %14), !dbg !7545
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7545
  %decl_with_rtl13 = bitcast %union.tree_node* %15 to %struct.tree_decl_with_rtl*, !dbg !7545
  %rtl14 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl13, i32 0, i32 1, !dbg !7545
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl14, align 8, !dbg !7545
  br label %cond.end15, !dbg !7545

cond.end15:                                       ; preds = %cond.false12, %cond.true9
  %cond16 = phi %struct.rtx_def* [ %13, %cond.true9 ], [ %16, %cond.false12 ], !dbg !7545
  %17 = bitcast %struct.rtx_def* %cond16 to i32*, !dbg !7545
  %bf.load = load i32, i32* %17, align 8, !dbg !7545
  %bf.clear = and i32 %bf.load, 65535, !dbg !7545
  %cmp17 = icmp eq i32 %bf.clear, 37, !dbg !7545
  br i1 %cmp17, label %land.lhs.true18, label %if.end, !dbg !7546

land.lhs.true18:                                  ; preds = %cond.end15
  %18 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %setjmp_crosses.addr, align 8, !dbg !7547
  %19 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7548
  %decl_with_rtl19 = bitcast %union.tree_node* %19 to %struct.tree_decl_with_rtl*, !dbg !7548
  %rtl20 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl19, i32 0, i32 1, !dbg !7548
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl20, align 8, !dbg !7548
  %tobool21 = icmp ne %struct.rtx_def* %20, null, !dbg !7548
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !7548

cond.true22:                                      ; preds = %land.lhs.true18
  %21 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7548
  %decl_with_rtl23 = bitcast %union.tree_node* %21 to %struct.tree_decl_with_rtl*, !dbg !7548
  %rtl24 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl23, i32 0, i32 1, !dbg !7548
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtl24, align 8, !dbg !7548
  br label %cond.end28, !dbg !7548

cond.false25:                                     ; preds = %land.lhs.true18
  %23 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7548
  call void @make_decl_rtl(%union.tree_node* %23), !dbg !7548
  %24 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7548
  %decl_with_rtl26 = bitcast %union.tree_node* %24 to %struct.tree_decl_with_rtl*, !dbg !7548
  %rtl27 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl26, i32 0, i32 1, !dbg !7548
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rtl27, align 8, !dbg !7548
  br label %cond.end28, !dbg !7548

cond.end28:                                       ; preds = %cond.false25, %cond.true22
  %cond29 = phi %struct.rtx_def* [ %22, %cond.true22 ], [ %25, %cond.false25 ], !dbg !7548
  %call = call i32 @rhs_regno(%struct.rtx_def* %cond29), !dbg !7548
  %call30 = call zeroext i8 @regno_clobbered_at_setjmp(%struct.bitmap_head_def* %18, i32 %call), !dbg !7549
  %conv = zext i8 %call30 to i32, !dbg !7549
  %tobool31 = icmp ne i32 %conv, 0, !dbg !7549
  br i1 %tobool31, label %if.then, label %if.end, !dbg !7550

if.then:                                          ; preds = %cond.end28
  %26 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7551
  %call32 = call zeroext i8 (i32, i8*, ...) @warning(i32 56, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.14, i64 0, i64 0), %union.tree_node* %26), !dbg !7552
  br label %if.end, !dbg !7552

if.end:                                           ; preds = %if.then, %cond.end28, %cond.end15, %cond.end
  br label %for.inc, !dbg !7553

for.inc:                                          ; preds = %if.end
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7554
  %common = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !7554
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7554
  %28 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7554
  store %union.tree_node* %28, %union.tree_node** %decl, align 8, !dbg !7555
  br label %for.cond, !dbg !7556, !llvm.loop !7557

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7559
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @reorder_blocks() #0 !dbg !7560 {
entry:
  %block = alloca %union.tree_node*, align 8
  %block_stack = alloca %struct.VEC_tree_heap*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !7561, metadata !DIExpression()), !dbg !7562
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !7563
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !7563
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !7563
  %1 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !7563
  store %union.tree_node* %1, %union.tree_node** %block, align 8, !dbg !7562
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %block_stack, metadata !7564, metadata !DIExpression()), !dbg !7565
  %2 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7566
  %cmp = icmp eq %union.tree_node* %2, null, !dbg !7568
  br i1 %cmp, label %if.then, label %if.end, !dbg !7569

if.then:                                          ; preds = %entry
  br label %return, !dbg !7570

if.end:                                           ; preds = %entry
  %call = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 10), !dbg !7571
  store %struct.VEC_tree_heap* %call, %struct.VEC_tree_heap** %block_stack, align 8, !dbg !7572
  %3 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7573
  call void @clear_block_marks(%union.tree_node* %3), !dbg !7574
  %4 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7575
  %block1 = bitcast %union.tree_node* %4 to %struct.tree_block*, !dbg !7575
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 5, !dbg !7575
  store %union.tree_node* null, %union.tree_node** %subblocks, align 8, !dbg !7576
  %5 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7577
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7577
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7577
  store %union.tree_node* null, %union.tree_node** %chain, align 8, !dbg !7578
  %call2 = call %struct.rtx_def* @get_insns(), !dbg !7579
  %6 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7580
  call void @reorder_blocks_1(%struct.rtx_def* %call2, %union.tree_node* %6, %struct.VEC_tree_heap** %block_stack), !dbg !7581
  %7 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7582
  %block3 = bitcast %union.tree_node* %7 to %struct.tree_block*, !dbg !7582
  %subblocks4 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block3, i32 0, i32 5, !dbg !7582
  %8 = load %union.tree_node*, %union.tree_node** %subblocks4, align 8, !dbg !7582
  %call5 = call %union.tree_node* @blocks_nreverse(%union.tree_node* %8), !dbg !7583
  %9 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7584
  %block6 = bitcast %union.tree_node* %9 to %struct.tree_block*, !dbg !7584
  %subblocks7 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block6, i32 0, i32 5, !dbg !7584
  store %union.tree_node* %call5, %union.tree_node** %subblocks7, align 8, !dbg !7585
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %block_stack), !dbg !7586
  br label %return, !dbg !7587

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !7587
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !7588 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7591, metadata !DIExpression()), !dbg !7592
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7592
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7592
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !7592
  ret %struct.VEC_tree_heap* %1, !dbg !7592
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @clear_block_marks(%union.tree_node* %block) #0 !dbg !7593 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !7596, metadata !DIExpression()), !dbg !7597
  br label %while.cond, !dbg !7598

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7599
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !7598
  br i1 %tobool, label %while.body, label %while.end, !dbg !7598

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7600
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7600
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7600
  %bf.load = load i64, i64* %2, align 8, !dbg !7602
  %bf.clear = and i64 %bf.load, -4194305, !dbg !7602
  store i64 %bf.clear, i64* %2, align 8, !dbg !7602
  %3 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7603
  %block1 = bitcast %union.tree_node* %3 to %struct.tree_block*, !dbg !7603
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 5, !dbg !7603
  %4 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !7603
  call void @clear_block_marks(%union.tree_node* %4), !dbg !7604
  %5 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7605
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7605
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7605
  %6 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7605
  store %union.tree_node* %6, %union.tree_node** %block.addr, align 8, !dbg !7606
  br label %while.cond, !dbg !7598, !llvm.loop !7607

while.end:                                        ; preds = %while.cond
  ret void, !dbg !7609
}

; Function Attrs: noinline nounwind uwtable
define internal void @reorder_blocks_1(%struct.rtx_def* %insns, %union.tree_node* %current_block, %struct.VEC_tree_heap** %p_block_stack) #0 !dbg !7610 {
entry:
  %insns.addr = alloca %struct.rtx_def*, align 8
  %current_block.addr = alloca %union.tree_node*, align 8
  %p_block_stack.addr = alloca %struct.VEC_tree_heap**, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %block = alloca %union.tree_node*, align 8
  %origin = alloca %union.tree_node*, align 8
  %new_block = alloca %union.tree_node*, align 8
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns.addr, metadata !7613, metadata !DIExpression()), !dbg !7614
  store %union.tree_node* %current_block, %union.tree_node** %current_block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %current_block.addr, metadata !7615, metadata !DIExpression()), !dbg !7616
  store %struct.VEC_tree_heap** %p_block_stack, %struct.VEC_tree_heap*** %p_block_stack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %p_block_stack.addr, metadata !7617, metadata !DIExpression()), !dbg !7618
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7619, metadata !DIExpression()), !dbg !7620
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !7621
  store %struct.rtx_def* %0, %struct.rtx_def** %insn, align 8, !dbg !7623
  br label %for.cond, !dbg !7624

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7625
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !7627
  br i1 %tobool, label %for.body, label %for.end, !dbg !7627

for.body:                                         ; preds = %for.cond
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7628
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !7628
  %bf.load = load i32, i32* %3, align 8, !dbg !7628
  %bf.clear = and i32 %bf.load, 65535, !dbg !7628
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !7628
  br i1 %cmp, label %if.then, label %if.end74, !dbg !7631

if.then:                                          ; preds = %for.body
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7632
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7632
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7632
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !7632
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7632
  %5 = load i32, i32* %rt_int, align 8, !dbg !7632
  %cmp1 = icmp eq i32 %5, 2, !dbg !7635
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !7636

if.then2:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node** %block, metadata !7637, metadata !DIExpression()), !dbg !7639
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7640
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7640
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !7640
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 4, !dbg !7640
  %rt_tree = bitcast %union.rtunion_def* %arrayidx5 to %union.tree_node**, !dbg !7640
  %7 = load %union.tree_node*, %union.tree_node** %rt_tree, align 8, !dbg !7640
  store %union.tree_node* %7, %union.tree_node** %block, align 8, !dbg !7639
  call void @llvm.dbg.declare(metadata %union.tree_node** %origin, metadata !7641, metadata !DIExpression()), !dbg !7642
  %8 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7643
  %block6 = bitcast %union.tree_node* %8 to %struct.tree_block*, !dbg !7643
  %fragment_origin = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block6, i32 0, i32 8, !dbg !7643
  %9 = load %union.tree_node*, %union.tree_node** %fragment_origin, align 8, !dbg !7643
  %tobool7 = icmp ne %union.tree_node* %9, null, !dbg !7643
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !7643

cond.true:                                        ; preds = %if.then2
  %10 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7644
  %block8 = bitcast %union.tree_node* %10 to %struct.tree_block*, !dbg !7644
  %fragment_origin9 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block8, i32 0, i32 8, !dbg !7644
  %11 = load %union.tree_node*, %union.tree_node** %fragment_origin9, align 8, !dbg !7644
  br label %cond.end, !dbg !7643

cond.false:                                       ; preds = %if.then2
  %12 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7645
  br label %cond.end, !dbg !7643

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %11, %cond.true ], [ %12, %cond.false ], !dbg !7643
  store %union.tree_node* %cond, %union.tree_node** %origin, align 8, !dbg !7646
  %13 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7647
  %base = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7647
  %14 = bitcast %struct.tree_base* %base to i64*, !dbg !7647
  %bf.load10 = load i64, i64* %14, align 8, !dbg !7647
  %bf.lshr = lshr i64 %bf.load10, 22, !dbg !7647
  %bf.clear11 = and i64 %bf.lshr, 1, !dbg !7647
  %bf.cast = trunc i64 %bf.clear11 to i32, !dbg !7647
  %tobool12 = icmp ne i32 %bf.cast, 0, !dbg !7647
  br i1 %tobool12, label %if.then13, label %if.end, !dbg !7649

if.then13:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_block, metadata !7650, metadata !DIExpression()), !dbg !7652
  %15 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7653
  %call = call %union.tree_node* @copy_node_stat(%union.tree_node* %15), !dbg !7653
  store %union.tree_node* %call, %union.tree_node** %new_block, align 8, !dbg !7652
  %16 = load %union.tree_node*, %union.tree_node** %origin, align 8, !dbg !7654
  %17 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !7655
  %block14 = bitcast %union.tree_node* %17 to %struct.tree_block*, !dbg !7655
  %fragment_origin15 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block14, i32 0, i32 8, !dbg !7655
  store %union.tree_node* %16, %union.tree_node** %fragment_origin15, align 8, !dbg !7656
  %18 = load %union.tree_node*, %union.tree_node** %origin, align 8, !dbg !7657
  %block16 = bitcast %union.tree_node* %18 to %struct.tree_block*, !dbg !7657
  %fragment_chain = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block16, i32 0, i32 9, !dbg !7657
  %19 = load %union.tree_node*, %union.tree_node** %fragment_chain, align 8, !dbg !7657
  %20 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !7658
  %block17 = bitcast %union.tree_node* %20 to %struct.tree_block*, !dbg !7658
  %fragment_chain18 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block17, i32 0, i32 9, !dbg !7658
  store %union.tree_node* %19, %union.tree_node** %fragment_chain18, align 8, !dbg !7659
  %21 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !7660
  %22 = load %union.tree_node*, %union.tree_node** %origin, align 8, !dbg !7661
  %block19 = bitcast %union.tree_node* %22 to %struct.tree_block*, !dbg !7661
  %fragment_chain20 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block19, i32 0, i32 9, !dbg !7661
  store %union.tree_node* %21, %union.tree_node** %fragment_chain20, align 8, !dbg !7662
  %23 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !7663
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7664
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !7664
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !7664
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 4, !dbg !7664
  %rt_tree24 = bitcast %union.rtunion_def* %arrayidx23 to %union.tree_node**, !dbg !7664
  store %union.tree_node* %23, %union.tree_node** %rt_tree24, align 8, !dbg !7665
  %25 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !7666
  store %union.tree_node* %25, %union.tree_node** %block, align 8, !dbg !7667
  br label %if.end, !dbg !7668

if.end:                                           ; preds = %if.then13, %cond.end
  %26 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7669
  %block25 = bitcast %union.tree_node* %26 to %struct.tree_block*, !dbg !7669
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block25, i32 0, i32 5, !dbg !7669
  store %union.tree_node* null, %union.tree_node** %subblocks, align 8, !dbg !7670
  %27 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7671
  %base26 = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !7671
  %28 = bitcast %struct.tree_base* %base26 to i64*, !dbg !7671
  %bf.load27 = load i64, i64* %28, align 8, !dbg !7672
  %bf.clear28 = and i64 %bf.load27, -4194305, !dbg !7672
  %bf.set = or i64 %bf.clear28, 4194304, !dbg !7672
  store i64 %bf.set, i64* %28, align 8, !dbg !7672
  %29 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7673
  %30 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8, !dbg !7675
  %cmp29 = icmp ne %union.tree_node* %29, %30, !dbg !7676
  br i1 %cmp29, label %if.then30, label %if.end46, !dbg !7677

if.then30:                                        ; preds = %if.end
  %31 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7678
  %32 = load %union.tree_node*, %union.tree_node** %origin, align 8, !dbg !7681
  %cmp31 = icmp ne %union.tree_node* %31, %32, !dbg !7682
  br i1 %cmp31, label %if.then32, label %if.end39, !dbg !7683

if.then32:                                        ; preds = %if.then30
  %33 = load %union.tree_node*, %union.tree_node** %origin, align 8, !dbg !7684
  %block33 = bitcast %union.tree_node* %33 to %struct.tree_block*, !dbg !7684
  %supercontext = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block33, i32 0, i32 6, !dbg !7684
  %34 = load %union.tree_node*, %union.tree_node** %supercontext, align 8, !dbg !7684
  %35 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8, !dbg !7684
  %cmp34 = icmp eq %union.tree_node* %34, %35, !dbg !7684
  br i1 %cmp34, label %cond.false36, label %cond.true35, !dbg !7684

cond.true35:                                      ; preds = %if.then32
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3896, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7684
  br label %cond.end37, !dbg !7684

cond.false36:                                     ; preds = %if.then32
  br label %cond.end37, !dbg !7684

cond.end37:                                       ; preds = %cond.false36, %cond.true35
  %cond38 = phi i32 [ 0, %cond.true35 ], [ 0, %cond.false36 ], !dbg !7684
  br label %if.end39, !dbg !7684

if.end39:                                         ; preds = %cond.end37, %if.then30
  %36 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8, !dbg !7685
  %37 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7686
  %block40 = bitcast %union.tree_node* %37 to %struct.tree_block*, !dbg !7686
  %supercontext41 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block40, i32 0, i32 6, !dbg !7686
  store %union.tree_node* %36, %union.tree_node** %supercontext41, align 8, !dbg !7687
  %38 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8, !dbg !7688
  %block42 = bitcast %union.tree_node* %38 to %struct.tree_block*, !dbg !7688
  %subblocks43 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block42, i32 0, i32 5, !dbg !7688
  %39 = load %union.tree_node*, %union.tree_node** %subblocks43, align 8, !dbg !7688
  %40 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7689
  %common = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !7689
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7689
  store %union.tree_node* %39, %union.tree_node** %chain, align 8, !dbg !7690
  %41 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7691
  %42 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8, !dbg !7692
  %block44 = bitcast %union.tree_node* %42 to %struct.tree_block*, !dbg !7692
  %subblocks45 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block44, i32 0, i32 5, !dbg !7692
  store %union.tree_node* %41, %union.tree_node** %subblocks45, align 8, !dbg !7693
  %43 = load %union.tree_node*, %union.tree_node** %origin, align 8, !dbg !7694
  store %union.tree_node* %43, %union.tree_node** %current_block.addr, align 8, !dbg !7695
  br label %if.end46, !dbg !7696

if.end46:                                         ; preds = %if.end39, %if.end
  %44 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %p_block_stack.addr, align 8, !dbg !7697
  %45 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7697
  %call47 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %44, %union.tree_node* %45), !dbg !7697
  br label %if.end73, !dbg !7698

if.else:                                          ; preds = %if.then
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7699
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !7699
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !7699
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 5, !dbg !7699
  %rt_int51 = bitcast %union.rtunion_def* %arrayidx50 to i32*, !dbg !7699
  %47 = load i32, i32* %rt_int51, align 8, !dbg !7699
  %cmp52 = icmp eq i32 %47, 3, !dbg !7701
  br i1 %cmp52, label %if.then53, label %if.end72, !dbg !7702

if.then53:                                        ; preds = %if.else
  %48 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %p_block_stack.addr, align 8, !dbg !7703
  %49 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %48, align 8, !dbg !7703
  %tobool54 = icmp ne %struct.VEC_tree_heap* %49, null, !dbg !7703
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !7703

cond.true55:                                      ; preds = %if.then53
  %50 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %p_block_stack.addr, align 8, !dbg !7703
  %51 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %50, align 8, !dbg !7703
  %base56 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %51, i32 0, i32 0, !dbg !7703
  br label %cond.end58, !dbg !7703

cond.false57:                                     ; preds = %if.then53
  br label %cond.end58, !dbg !7703

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_tree_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !7703
  %call60 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond59), !dbg !7703
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7705
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !7705
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !7705
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 4, !dbg !7705
  %rt_tree64 = bitcast %union.rtunion_def* %arrayidx63 to %union.tree_node**, !dbg !7705
  store %union.tree_node* %call60, %union.tree_node** %rt_tree64, align 8, !dbg !7706
  %53 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8, !dbg !7707
  %block65 = bitcast %union.tree_node* %53 to %struct.tree_block*, !dbg !7707
  %subblocks66 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block65, i32 0, i32 5, !dbg !7707
  %54 = load %union.tree_node*, %union.tree_node** %subblocks66, align 8, !dbg !7707
  %call67 = call %union.tree_node* @blocks_nreverse(%union.tree_node* %54), !dbg !7708
  %55 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8, !dbg !7709
  %block68 = bitcast %union.tree_node* %55 to %struct.tree_block*, !dbg !7709
  %subblocks69 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block68, i32 0, i32 5, !dbg !7709
  store %union.tree_node* %call67, %union.tree_node** %subblocks69, align 8, !dbg !7710
  %56 = load %union.tree_node*, %union.tree_node** %current_block.addr, align 8, !dbg !7711
  %block70 = bitcast %union.tree_node* %56 to %struct.tree_block*, !dbg !7711
  %supercontext71 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block70, i32 0, i32 6, !dbg !7711
  %57 = load %union.tree_node*, %union.tree_node** %supercontext71, align 8, !dbg !7711
  store %union.tree_node* %57, %union.tree_node** %current_block.addr, align 8, !dbg !7712
  br label %if.end72, !dbg !7713

if.end72:                                         ; preds = %cond.end58, %if.else
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.end46
  br label %if.end74, !dbg !7714

if.end74:                                         ; preds = %if.end73, %for.body
  br label %for.inc, !dbg !7715

for.inc:                                          ; preds = %if.end74
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7716
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !7716
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !7716
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 2, !dbg !7716
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**, !dbg !7716
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7716
  store %struct.rtx_def* %59, %struct.rtx_def** %insn, align 8, !dbg !7717
  br label %for.cond, !dbg !7718, !llvm.loop !7719

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7721
}

declare dso_local %struct.rtx_def* @get_insns() #2

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @blocks_nreverse(%union.tree_node* %t) #0 !dbg !7722 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %prev = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %next = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !7725, metadata !DIExpression()), !dbg !7726
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev, metadata !7727, metadata !DIExpression()), !dbg !7728
  store %union.tree_node* null, %union.tree_node** %prev, align 8, !dbg !7728
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7729, metadata !DIExpression()), !dbg !7730
  call void @llvm.dbg.declare(metadata %union.tree_node** %next, metadata !7731, metadata !DIExpression()), !dbg !7732
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !7733
  store %union.tree_node* %0, %union.tree_node** %decl, align 8, !dbg !7735
  br label %for.cond, !dbg !7736

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7737
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !7739
  br i1 %tobool, label %for.body, label %for.end, !dbg !7739

for.body:                                         ; preds = %for.cond
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7740
  %common = bitcast %union.tree_node* %2 to %struct.tree_common*, !dbg !7740
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7740
  %3 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7740
  store %union.tree_node* %3, %union.tree_node** %next, align 8, !dbg !7742
  %4 = load %union.tree_node*, %union.tree_node** %prev, align 8, !dbg !7743
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7744
  %common1 = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !7744
  %chain2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 1, !dbg !7744
  store %union.tree_node* %4, %union.tree_node** %chain2, align 8, !dbg !7745
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7746
  store %union.tree_node* %6, %union.tree_node** %prev, align 8, !dbg !7747
  br label %for.inc, !dbg !7748

for.inc:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !7749
  store %union.tree_node* %7, %union.tree_node** %decl, align 8, !dbg !7750
  br label %for.cond, !dbg !7751, !llvm.loop !7752

for.end:                                          ; preds = %for.cond
  %8 = load %union.tree_node*, %union.tree_node** %prev, align 8, !dbg !7754
  ret %union.tree_node* %8, !dbg !7755
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @number_blocks(%union.tree_node* %fn) #0 !dbg !7756 {
entry:
  %fn.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %n_blocks = alloca i32, align 4
  %block_vector = alloca %union.tree_node**, align 8
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !7757, metadata !DIExpression()), !dbg !7758
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7759, metadata !DIExpression()), !dbg !7760
  call void @llvm.dbg.declare(metadata i32* %n_blocks, metadata !7761, metadata !DIExpression()), !dbg !7762
  call void @llvm.dbg.declare(metadata %union.tree_node*** %block_vector, metadata !7763, metadata !DIExpression()), !dbg !7764
  %0 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !7765
  %decl_common = bitcast %union.tree_node* %0 to %struct.tree_decl_common*, !dbg !7765
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !7765
  %1 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !7765
  %call = call %union.tree_node** @get_block_vector(%union.tree_node* %1, i32* %n_blocks), !dbg !7766
  store %union.tree_node** %call, %union.tree_node*** %block_vector, align 8, !dbg !7767
  store i32 1, i32* %i, align 4, !dbg !7768
  br label %for.cond, !dbg !7770

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !7771
  %3 = load i32, i32* %n_blocks, align 4, !dbg !7773
  %cmp = icmp slt i32 %2, %3, !dbg !7774
  br i1 %cmp, label %for.body, label %for.end, !dbg !7775

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* @next_block_index, align 4, !dbg !7776
  %inc = add nsw i32 %4, 1, !dbg !7776
  store i32 %inc, i32* @next_block_index, align 4, !dbg !7776
  %5 = load %union.tree_node**, %union.tree_node*** %block_vector, align 8, !dbg !7777
  %6 = load i32, i32* %i, align 4, !dbg !7777
  %idxprom = sext i32 %6 to i64, !dbg !7777
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %5, i64 %idxprom, !dbg !7777
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7777
  %block = bitcast %union.tree_node* %7 to %struct.tree_block*, !dbg !7777
  %block_num = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 1, !dbg !7777
  %bf.load = load i32, i32* %block_num, align 8, !dbg !7778
  %bf.value = and i32 %4, 2147483647, !dbg !7778
  %bf.shl = shl i32 %bf.value, 1, !dbg !7778
  %bf.clear = and i32 %bf.load, 1, !dbg !7778
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !7778
  store i32 %bf.set, i32* %block_num, align 8, !dbg !7778
  br label %for.inc, !dbg !7777

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !7779
  %inc1 = add nsw i32 %8, 1, !dbg !7779
  store i32 %inc1, i32* %i, align 4, !dbg !7779
  br label %for.cond, !dbg !7780, !llvm.loop !7781

for.end:                                          ; preds = %for.cond
  %9 = load %union.tree_node**, %union.tree_node*** %block_vector, align 8, !dbg !7783
  %10 = bitcast %union.tree_node** %9 to i8*, !dbg !7783
  call void @free(i8* %10), !dbg !7784
  ret void, !dbg !7785
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @get_block_vector(%union.tree_node* %block, i32* %n_blocks_p) #0 !dbg !7786 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %n_blocks_p.addr = alloca i32*, align 8
  %block_vector = alloca %union.tree_node**, align 8
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !7789, metadata !DIExpression()), !dbg !7790
  store i32* %n_blocks_p, i32** %n_blocks_p.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %n_blocks_p.addr, metadata !7791, metadata !DIExpression()), !dbg !7792
  call void @llvm.dbg.declare(metadata %union.tree_node*** %block_vector, metadata !7793, metadata !DIExpression()), !dbg !7794
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7795
  %call = call i32 @all_blocks(%union.tree_node* %0, %union.tree_node** null), !dbg !7796
  %1 = load i32*, i32** %n_blocks_p.addr, align 8, !dbg !7797
  store i32 %call, i32* %1, align 4, !dbg !7798
  %2 = load i32*, i32** %n_blocks_p.addr, align 8, !dbg !7799
  %3 = load i32, i32* %2, align 4, !dbg !7799
  %conv = sext i32 %3 to i64, !dbg !7799
  %mul = mul i64 8, %conv, !dbg !7799
  %call1 = call i8* @xmalloc(i64 %mul), !dbg !7799
  %4 = bitcast i8* %call1 to %union.tree_node**, !dbg !7799
  store %union.tree_node** %4, %union.tree_node*** %block_vector, align 8, !dbg !7800
  %5 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7801
  %6 = load %union.tree_node**, %union.tree_node*** %block_vector, align 8, !dbg !7802
  %call2 = call i32 @all_blocks(%union.tree_node* %5, %union.tree_node** %6), !dbg !7803
  %7 = load %union.tree_node**, %union.tree_node*** %block_vector, align 8, !dbg !7804
  ret %union.tree_node** %7, !dbg !7805
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @debug_find_var_in_block_tree(%union.tree_node* %var, %union.tree_node* %block) #0 !dbg !7806 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  %block.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %ret = alloca %union.tree_node*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !7809, metadata !DIExpression()), !dbg !7810
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !7811, metadata !DIExpression()), !dbg !7812
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !7813, metadata !DIExpression()), !dbg !7814
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7815
  %block1 = bitcast %union.tree_node* %0 to %struct.tree_block*, !dbg !7815
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block1, i32 0, i32 3, !dbg !7815
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !7815
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !7817
  br label %for.cond, !dbg !7818

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7819
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !7821
  br i1 %tobool, label %for.body, label %for.end, !dbg !7821

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7822
  %4 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7824
  %cmp = icmp eq %union.tree_node* %3, %4, !dbg !7825
  br i1 %cmp, label %if.then, label %if.end, !dbg !7826

if.then:                                          ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7827
  store %union.tree_node* %5, %union.tree_node** %retval, align 8, !dbg !7828
  br label %return, !dbg !7828

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !7824

for.inc:                                          ; preds = %if.end
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7829
  %common = bitcast %union.tree_node* %6 to %struct.tree_common*, !dbg !7829
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !7829
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7829
  store %union.tree_node* %7, %union.tree_node** %t, align 8, !dbg !7830
  br label %for.cond, !dbg !7831, !llvm.loop !7832

for.end:                                          ; preds = %for.cond
  %8 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !7834
  %block2 = bitcast %union.tree_node* %8 to %struct.tree_block*, !dbg !7834
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block2, i32 0, i32 5, !dbg !7834
  %9 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !7834
  store %union.tree_node* %9, %union.tree_node** %t, align 8, !dbg !7836
  br label %for.cond3, !dbg !7837

for.cond3:                                        ; preds = %for.inc9, %for.end
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7838
  %tobool4 = icmp ne %union.tree_node* %10, null, !dbg !7840
  br i1 %tobool4, label %for.body5, label %for.end12, !dbg !7840

for.body5:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.tree_node** %ret, metadata !7841, metadata !DIExpression()), !dbg !7843
  %11 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7844
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7845
  %call = call %union.tree_node* @debug_find_var_in_block_tree(%union.tree_node* %11, %union.tree_node* %12), !dbg !7846
  store %union.tree_node* %call, %union.tree_node** %ret, align 8, !dbg !7843
  %13 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !7847
  %tobool6 = icmp ne %union.tree_node* %13, null, !dbg !7847
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7849

if.then7:                                         ; preds = %for.body5
  %14 = load %union.tree_node*, %union.tree_node** %ret, align 8, !dbg !7850
  store %union.tree_node* %14, %union.tree_node** %retval, align 8, !dbg !7851
  br label %return, !dbg !7851

if.end8:                                          ; preds = %for.body5
  br label %for.inc9, !dbg !7852

for.inc9:                                         ; preds = %if.end8
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !7853
  %common10 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !7853
  %chain11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 1, !dbg !7853
  %16 = load %union.tree_node*, %union.tree_node** %chain11, align 8, !dbg !7853
  store %union.tree_node* %16, %union.tree_node** %t, align 8, !dbg !7854
  br label %for.cond3, !dbg !7855, !llvm.loop !7856

for.end12:                                        ; preds = %for.cond3
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7858
  br label %return, !dbg !7858

return:                                           ; preds = %for.end12, %if.then7, %if.then
  %17 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7859
  ret %union.tree_node* %17, !dbg !7859
}

; Function Attrs: noinline nounwind uwtable
define internal void @invoke_set_current_function_hook(%union.tree_node* %fndecl) #0 !dbg !7860 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %opts = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !7861, metadata !DIExpression()), !dbg !7862
  %0 = load i8, i8* @in_dummy_function, align 1, !dbg !7863
  %tobool = icmp ne i8 %0, 0, !dbg !7863
  br i1 %tobool, label %if.end7, label %if.then, !dbg !7865

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %opts, metadata !7866, metadata !DIExpression()), !dbg !7868
  %1 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7869
  %tobool1 = icmp ne %union.tree_node* %1, null, !dbg !7870
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7870

cond.true:                                        ; preds = %if.then
  %2 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7871
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !7871
  %function_specific_optimization = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 4, !dbg !7871
  %3 = load %union.tree_node*, %union.tree_node** %function_specific_optimization, align 8, !dbg !7871
  br label %cond.end, !dbg !7870

cond.false:                                       ; preds = %if.then
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 125), align 8, !dbg !7872
  br label %cond.end, !dbg !7870

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %3, %cond.true ], [ %4, %cond.false ], !dbg !7870
  store %union.tree_node* %cond, %union.tree_node** %opts, align 8, !dbg !7868
  %5 = load %union.tree_node*, %union.tree_node** %opts, align 8, !dbg !7873
  %tobool2 = icmp ne %union.tree_node* %5, null, !dbg !7873
  br i1 %tobool2, label %if.end, label %if.then3, !dbg !7875

if.then3:                                         ; preds = %cond.end
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 125), align 8, !dbg !7876
  store %union.tree_node* %6, %union.tree_node** %opts, align 8, !dbg !7877
  br label %if.end, !dbg !7878

if.end:                                           ; preds = %if.then3, %cond.end
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 126), align 16, !dbg !7879
  %8 = load %union.tree_node*, %union.tree_node** %opts, align 8, !dbg !7881
  %cmp = icmp ne %union.tree_node* %7, %8, !dbg !7882
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !7883

if.then4:                                         ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %opts, align 8, !dbg !7884
  store %union.tree_node* %9, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 126), align 16, !dbg !7886
  %10 = load %union.tree_node*, %union.tree_node** %opts, align 8, !dbg !7887
  %optimization = bitcast %union.tree_node* %10 to %struct.tree_optimization_option*, !dbg !7887
  %opts5 = getelementptr inbounds %struct.tree_optimization_option, %struct.tree_optimization_option* %optimization, i32 0, i32 1, !dbg !7887
  call void @cl_optimization_restore(%struct.cl_optimization* %opts5), !dbg !7888
  br label %if.end6, !dbg !7889

if.end6:                                          ; preds = %if.then4, %if.end
  %11 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 47), align 8, !dbg !7890
  %12 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7891
  call void %11(%union.tree_node* %12), !dbg !7892
  br label %if.end7, !dbg !7893

if.end7:                                          ; preds = %if.end6, %entry
  ret void, !dbg !7894
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_cfun(%struct.function* %new_cfun) #0 !dbg !7895 {
entry:
  %new_cfun.addr = alloca %struct.function*, align 8
  store %struct.function* %new_cfun, %struct.function** %new_cfun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %new_cfun.addr, metadata !7896, metadata !DIExpression()), !dbg !7897
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7898
  %call = call %struct.function** @VEC_function_p_heap_safe_push(%struct.VEC_function_p_heap** @cfun_stack, %struct.function* %0), !dbg !7898
  %1 = load %struct.function*, %struct.function** %new_cfun.addr, align 8, !dbg !7899
  call void @set_cfun(%struct.function* %1), !dbg !7900
  ret void, !dbg !7901
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pop_cfun() #0 !dbg !7902 {
entry:
  %new_cfun = alloca %struct.function*, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %new_cfun, metadata !7903, metadata !DIExpression()), !dbg !7904
  %0 = load %struct.VEC_function_p_heap*, %struct.VEC_function_p_heap** @cfun_stack, align 8, !dbg !7905
  %tobool = icmp ne %struct.VEC_function_p_heap* %0, null, !dbg !7905
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7905

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_function_p_heap*, %struct.VEC_function_p_heap** @cfun_stack, align 8, !dbg !7905
  %base = getelementptr inbounds %struct.VEC_function_p_heap, %struct.VEC_function_p_heap* %1, i32 0, i32 0, !dbg !7905
  br label %cond.end, !dbg !7905

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7905

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_function_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7905
  %call = call %struct.function* @VEC_function_p_base_pop(%struct.VEC_function_p_base* %cond), !dbg !7905
  store %struct.function* %call, %struct.function** %new_cfun, align 8, !dbg !7904
  %2 = load %struct.function*, %struct.function** %new_cfun, align 8, !dbg !7906
  call void @set_cfun(%struct.function* %2), !dbg !7907
  ret void, !dbg !7908
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_next_funcdef_no() #0 !dbg !7909 {
entry:
  %0 = load i32, i32* @funcdef_no, align 4, !dbg !7912
  %inc = add nsw i32 %0, 1, !dbg !7912
  store i32 %inc, i32* @funcdef_no, align 4, !dbg !7912
  ret i32 %0, !dbg !7913
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

declare dso_local void @init_eh_for_function() #2

declare dso_local void @ix86_call_abi_override(%union.tree_node*) #2

declare dso_local %union.tree_node* @tree_last(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_struct_function(%union.tree_node* %fndecl) #0 !dbg !7914 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !7915, metadata !DIExpression()), !dbg !7916
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7917
  %call = call %struct.function** @VEC_function_p_heap_safe_push(%struct.VEC_function_p_heap** @cfun_stack, %struct.function* %0), !dbg !7917
  %1 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7918
  call void @allocate_struct_function(%union.tree_node* %1, i8 zeroext 0), !dbg !7919
  ret void, !dbg !7920
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_dummy_function_start() #0 !dbg !7921 {
entry:
  %0 = load i8, i8* @in_dummy_function, align 1, !dbg !7922
  %tobool = icmp ne i8 %0, 0, !dbg !7922
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7922

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4214, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7922
  br label %cond.end, !dbg !7922

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7922

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7922
  store i8 1, i8* @in_dummy_function, align 1, !dbg !7923
  call void @push_struct_function(%union.tree_node* null), !dbg !7924
  call void @prepare_function_start(), !dbg !7925
  ret void, !dbg !7926
}

; Function Attrs: noinline nounwind uwtable
define internal void @prepare_function_start() #0 !dbg !7927 {
entry:
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 1, i32 3), align 8, !dbg !7928
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !7928
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7928

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4181, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !7928
  br label %cond.end, !dbg !7928

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7928

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7928
  call void @init_temp_slots(), !dbg !7929
  call void @init_emit(), !dbg !7930
  call void @init_varasm_status(), !dbg !7931
  call void @init_expr(), !dbg !7932
  call void @default_rtl_profile(), !dbg !7933
  %1 = load i32, i32* @optimize, align 4, !dbg !7934
  %tobool1 = icmp ne i32 %1, 0, !dbg !7935
  %lnot = xor i1 %tobool1, true, !dbg !7935
  %lnot.ext = zext i1 %lnot to i32, !dbg !7935
  store i32 %lnot.ext, i32* @cse_not_expected, align 4, !dbg !7936
  store i32 0, i32* @caller_save_needed, align 4, !dbg !7937
  store i16* null, i16** @reg_renumber, align 8, !dbg !7938
  store i32 0, i32* @virtuals_instantiated, align 4, !dbg !7939
  store i32 1, i32* @generating_concat_p, align 4, !dbg !7940
  store i8 0, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 41), align 1, !dbg !7941
  ret void, !dbg !7942
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_function_start(%union.tree_node* %subr) #0 !dbg !7943 {
entry:
  %subr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %subr, %union.tree_node** %subr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %subr.addr, metadata !7944, metadata !DIExpression()), !dbg !7945
  %0 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !7946
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !7946
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7948

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !7949
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !7949
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !7949
  %2 = load %struct.function*, %struct.function** %f, align 8, !dbg !7949
  %tobool1 = icmp ne %struct.function* %2, null, !dbg !7949
  br i1 %tobool1, label %if.then, label %if.else, !dbg !7950

if.then:                                          ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !7951
  %function_decl2 = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !7951
  %f3 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl2, i32 0, i32 1, !dbg !7951
  %4 = load %struct.function*, %struct.function** %f3, align 8, !dbg !7951
  call void @set_cfun(%struct.function* %4), !dbg !7952
  br label %if.end, !dbg !7952

if.else:                                          ; preds = %land.lhs.true, %entry
  %5 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !7953
  call void @allocate_struct_function(%union.tree_node* %5, i8 zeroext 0), !dbg !7954
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  call void @prepare_function_start(), !dbg !7955
  %6 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !7956
  %decl_non_common = bitcast %union.tree_node* %6 to %struct.tree_decl_non_common*, !dbg !7956
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !7956
  %7 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7956
  %common = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !7956
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7956
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7956
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7956
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !7956
  %bf.load = load i64, i64* %9, align 8, !dbg !7956
  %bf.clear = and i64 %bf.load, 65535, !dbg !7956
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7956
  %cmp = icmp eq i32 %bf.cast, 15, !dbg !7956
  br i1 %cmp, label %if.then33, label %lor.lhs.false, !dbg !7956

lor.lhs.false:                                    ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !7956
  %decl_non_common4 = bitcast %union.tree_node* %10 to %struct.tree_decl_non_common*, !dbg !7956
  %result5 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common4, i32 0, i32 3, !dbg !7956
  %11 = load %union.tree_node*, %union.tree_node** %result5, align 8, !dbg !7956
  %common6 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !7956
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !7956
  %12 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !7956
  %base8 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !7956
  %13 = bitcast %struct.tree_base* %base8 to i64*, !dbg !7956
  %bf.load9 = load i64, i64* %13, align 8, !dbg !7956
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !7956
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !7956
  %cmp12 = icmp eq i32 %bf.cast11, 16, !dbg !7956
  br i1 %cmp12, label %if.then33, label %lor.lhs.false13, !dbg !7956

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %14 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !7956
  %decl_non_common14 = bitcast %union.tree_node* %14 to %struct.tree_decl_non_common*, !dbg !7956
  %result15 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common14, i32 0, i32 3, !dbg !7956
  %15 = load %union.tree_node*, %union.tree_node** %result15, align 8, !dbg !7956
  %common16 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !7956
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !7956
  %16 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !7956
  %base18 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7956
  %17 = bitcast %struct.tree_base* %base18 to i64*, !dbg !7956
  %bf.load19 = load i64, i64* %17, align 8, !dbg !7956
  %bf.clear20 = and i64 %bf.load19, 65535, !dbg !7956
  %bf.cast21 = trunc i64 %bf.clear20 to i32, !dbg !7956
  %cmp22 = icmp eq i32 %bf.cast21, 17, !dbg !7956
  br i1 %cmp22, label %if.then33, label %lor.lhs.false23, !dbg !7956

lor.lhs.false23:                                  ; preds = %lor.lhs.false13
  %18 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !7956
  %decl_non_common24 = bitcast %union.tree_node* %18 to %struct.tree_decl_non_common*, !dbg !7956
  %result25 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common24, i32 0, i32 3, !dbg !7956
  %19 = load %union.tree_node*, %union.tree_node** %result25, align 8, !dbg !7956
  %common26 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !7956
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !7956
  %20 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !7956
  %base28 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !7956
  %21 = bitcast %struct.tree_base* %base28 to i64*, !dbg !7956
  %bf.load29 = load i64, i64* %21, align 8, !dbg !7956
  %bf.clear30 = and i64 %bf.load29, 65535, !dbg !7956
  %bf.cast31 = trunc i64 %bf.clear30 to i32, !dbg !7956
  %cmp32 = icmp eq i32 %bf.cast31, 18, !dbg !7956
  br i1 %cmp32, label %if.then33, label %if.end34, !dbg !7958

if.then33:                                        ; preds = %lor.lhs.false23, %lor.lhs.false13, %lor.lhs.false, %if.end
  %call = call zeroext i8 (i32, i8*, ...) @warning(i32 34, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0)), !dbg !7959
  br label %if.end34, !dbg !7959

if.end34:                                         ; preds = %if.then33, %lor.lhs.false23
  ret void, !dbg !7960
}

declare dso_local zeroext i8 @warning(i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @init_function_for_compilation() #0 !dbg !7961 {
entry:
  store i16* null, i16** @reg_renumber, align 8, !dbg !7962
  ret i32 0, !dbg !7963
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_main_function() #0 !dbg !7964 {
entry:
  ret void, !dbg !7965
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @stack_protect_prologue() #0 !dbg !7966 {
entry:
  %guard_decl = alloca %union.tree_node*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %y = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %guard_decl, metadata !7967, metadata !DIExpression()), !dbg !7968
  %0 = load %union.tree_node* ()*, %union.tree_node* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 83), align 8, !dbg !7969
  %call = call %union.tree_node* %0(), !dbg !7970
  store %union.tree_node* %call, %union.tree_node** %guard_decl, align 8, !dbg !7968
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !7971, metadata !DIExpression()), !dbg !7972
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y, metadata !7973, metadata !DIExpression()), !dbg !7974
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 9), align 8, !dbg !7975
  %call1 = call %struct.rtx_def* @expand_normal(%union.tree_node* %1), !dbg !7976
  store %struct.rtx_def* %call1, %struct.rtx_def** %x, align 8, !dbg !7977
  %2 = load %union.tree_node*, %union.tree_node** %guard_decl, align 8, !dbg !7978
  %call2 = call %struct.rtx_def* @expand_normal(%union.tree_node* %2), !dbg !7979
  store %struct.rtx_def* %call2, %struct.rtx_def** %y, align 8, !dbg !7980
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !7981, metadata !DIExpression()), !dbg !7984
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7985
  %4 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !7986
  %call3 = call %struct.rtx_def* @gen_stack_protect_set(%struct.rtx_def* %3, %struct.rtx_def* %4), !dbg !7987
  store %struct.rtx_def* %call3, %struct.rtx_def** %insn, align 8, !dbg !7984
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7988
  %tobool = icmp ne %struct.rtx_def* %5, null, !dbg !7988
  br i1 %tobool, label %if.then, label %if.end, !dbg !7990

if.then:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !7991
  %call4 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %6), !dbg !7993
  br label %return, !dbg !7994

if.end:                                           ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7995
  %8 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !7996
  %call5 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %7, %struct.rtx_def* %8), !dbg !7997
  br label %return, !dbg !7998

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !7998
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_normal(%union.tree_node* %exp) #0 !dbg !7999 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !8002, metadata !DIExpression()), !dbg !8003
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8004
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* null, i32 0, i32 0, %struct.rtx_def** null), !dbg !8005
  ret %struct.rtx_def* %call, !dbg !8006
}

declare dso_local %struct.rtx_def* @gen_stack_protect_set(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @stack_protect_epilogue() #0 !dbg !8007 {
entry:
  %guard_decl = alloca %union.tree_node*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %y = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %guard_decl, metadata !8008, metadata !DIExpression()), !dbg !8009
  %0 = load %union.tree_node* ()*, %union.tree_node* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 83), align 8, !dbg !8010
  %call = call %union.tree_node* %0(), !dbg !8011
  store %union.tree_node* %call, %union.tree_node** %guard_decl, align 8, !dbg !8009
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !8012, metadata !DIExpression()), !dbg !8013
  %call1 = call %struct.rtx_def* @gen_label_rtx(), !dbg !8014
  store %struct.rtx_def* %call1, %struct.rtx_def** %label, align 8, !dbg !8013
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !8015, metadata !DIExpression()), !dbg !8016
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y, metadata !8017, metadata !DIExpression()), !dbg !8018
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !8019, metadata !DIExpression()), !dbg !8020
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 9), align 8, !dbg !8021
  %call2 = call %struct.rtx_def* @expand_normal(%union.tree_node* %1), !dbg !8022
  store %struct.rtx_def* %call2, %struct.rtx_def** %x, align 8, !dbg !8023
  %2 = load %union.tree_node*, %union.tree_node** %guard_decl, align 8, !dbg !8024
  %call3 = call %struct.rtx_def* @expand_normal(%union.tree_node* %2), !dbg !8025
  store %struct.rtx_def* %call3, %struct.rtx_def** %y, align 8, !dbg !8026
  switch i32 1, label %sw.default [
    i32 1, label %sw.bb
  ], !dbg !8027

sw.bb:                                            ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8028
  %4 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !8030
  %5 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8031
  %call4 = call %struct.rtx_def* @gen_stack_protect_test(%struct.rtx_def* %3, %struct.rtx_def* %4, %struct.rtx_def* %5), !dbg !8032
  store %struct.rtx_def* %call4, %struct.rtx_def** %tmp, align 8, !dbg !8033
  %6 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8034
  %tobool = icmp ne %struct.rtx_def* %6, null, !dbg !8034
  br i1 %tobool, label %if.then, label %if.end, !dbg !8036

if.then:                                          ; preds = %sw.bb
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8037
  %call5 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %7), !dbg !8039
  br label %sw.epilog, !dbg !8040

if.end:                                           ; preds = %sw.bb
  br label %sw.default, !dbg !8034

sw.default:                                       ; preds = %entry, %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8041
  %9 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !8042
  %10 = load i32, i32* @ptr_mode, align 4, !dbg !8043
  %11 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8044
  call void @emit_cmp_and_jump_insns(%struct.rtx_def* %8, %struct.rtx_def* %9, i32 81, %struct.rtx_def* null, i32 %10, i32 1, %struct.rtx_def* %11), !dbg !8045
  br label %sw.epilog, !dbg !8046

sw.epilog:                                        ; preds = %sw.default, %if.then
  %call6 = call %struct.rtx_def* @get_last_insn(), !dbg !8047
  store %struct.rtx_def* %call6, %struct.rtx_def** %tmp, align 8, !dbg !8048
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8049
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !8049
  %bf.load = load i32, i32* %13, align 8, !dbg !8049
  %bf.clear = and i32 %bf.load, 65535, !dbg !8049
  %cmp = icmp eq i32 %bf.clear, 9, !dbg !8049
  br i1 %cmp, label %if.then7, label %if.end8, !dbg !8051

if.then7:                                         ; preds = %sw.epilog
  %14 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8052
  call void @predict_insn_def(%struct.rtx_def* %14, i32 9, i32 1), !dbg !8053
  br label %if.end8, !dbg !8053

if.end8:                                          ; preds = %if.then7, %sw.epilog
  %15 = load %union.tree_node* ()*, %union.tree_node* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 84), align 8, !dbg !8054
  %call9 = call %union.tree_node* %15(), !dbg !8055
  call void @expand_expr_stmt(%union.tree_node* %call9), !dbg !8056
  %16 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !8057
  %call10 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %16), !dbg !8058
  ret void, !dbg !8059
}

declare dso_local %struct.rtx_def* @gen_label_rtx() #2

declare dso_local %struct.rtx_def* @gen_stack_protect_test(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @emit_cmp_and_jump_insns(%struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @get_last_insn() #2

declare dso_local void @predict_insn_def(%struct.rtx_def*, i32, i32) #2

declare dso_local void @expand_expr_stmt(%union.tree_node*) #2

declare dso_local %struct.rtx_def* @emit_label(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_function_start(%union.tree_node* %subr) #0 !dbg !8060 {
entry:
  %subr.addr = alloca %union.tree_node*, align 8
  %value_address = alloca %struct.rtx_def*, align 8
  %sv = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %return_type = alloca %union.tree_node*, align 8
  %hard_reg = alloca %struct.rtx_def*, align 8
  %parm = alloca %union.tree_node*, align 8
  %local = alloca %struct.rtx_def*, align 8
  %chain = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %t_save = alloca %union.tree_node*, align 8
  %r_save = alloca %struct.rtx_def*, align 8
  %var = alloca %union.tree_node*, align 8
  store %union.tree_node* %subr, %union.tree_node** %subr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %subr.addr, metadata !8061, metadata !DIExpression()), !dbg !8062
  call void @init_recog_no_volatile(), !dbg !8063
  %0 = load i32, i32* @profile_flag, align 4, !dbg !8064
  %tobool = icmp ne i32 %0, 0, !dbg !8064
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8065

land.rhs:                                         ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8066
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !8066
  %no_instrument_function_entry_exit = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !8066
  %bf.load = load i32, i32* %no_instrument_function_entry_exit, align 8, !dbg !8066
  %bf.lshr = lshr i32 %bf.load, 24, !dbg !8066
  %bf.clear = and i32 %bf.lshr, 1, !dbg !8066
  %tobool1 = icmp ne i32 %bf.clear, 0, !dbg !8067
  %lnot = xor i1 %tobool1, true, !dbg !8067
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ], !dbg !8068
  %land.ext = zext i1 %2 to i32, !dbg !8065
  %conv = trunc i32 %land.ext to i8, !dbg !8069
  store i8 %conv, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 35), align 1, !dbg !8070
  %3 = load %struct.rtx_def*, %struct.rtx_def** @stack_limit_rtx, align 8, !dbg !8071
  %cmp = icmp ne %struct.rtx_def* %3, null, !dbg !8072
  br i1 %cmp, label %land.rhs3, label %land.end10, !dbg !8073

land.rhs3:                                        ; preds = %land.end
  %4 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8074
  %function_decl4 = bitcast %union.tree_node* %4 to %struct.tree_function_decl*, !dbg !8074
  %no_limit_stack = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl4, i32 0, i32 5, !dbg !8074
  %bf.load5 = load i32, i32* %no_limit_stack, align 8, !dbg !8074
  %bf.lshr6 = lshr i32 %bf.load5, 25, !dbg !8074
  %bf.clear7 = and i32 %bf.lshr6, 1, !dbg !8074
  %tobool8 = icmp ne i32 %bf.clear7, 0, !dbg !8075
  %lnot9 = xor i1 %tobool8, true, !dbg !8075
  br label %land.end10

land.end10:                                       ; preds = %land.rhs3, %land.end
  %5 = phi i1 [ false, %land.end ], [ %lnot9, %land.rhs3 ], !dbg !8068
  %land.ext11 = zext i1 %5 to i32, !dbg !8073
  %conv12 = trunc i32 %land.ext11 to i8, !dbg !8076
  store i8 %conv12, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 34), align 2, !dbg !8077
  %call = call %struct.rtx_def* @gen_label_rtx(), !dbg !8078
  store %struct.rtx_def* %call, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 11), align 8, !dbg !8079
  %6 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8080
  %decl_non_common = bitcast %union.tree_node* %6 to %struct.tree_decl_non_common*, !dbg !8080
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !8080
  %7 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8080
  %8 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8082
  %call13 = call i32 @aggregate_value_p(%union.tree_node* %7, %union.tree_node* %8), !dbg !8083
  %tobool14 = icmp ne i32 %call13, 0, !dbg !8083
  br i1 %tobool14, label %if.then, label %if.else, !dbg !8084

if.then:                                          ; preds = %land.end10
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value_address, metadata !8085, metadata !DIExpression()), !dbg !8087
  store %struct.rtx_def* null, %struct.rtx_def** %value_address, align 8, !dbg !8087
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sv, metadata !8088, metadata !DIExpression()), !dbg !8090
  %9 = load %struct.rtx_def* (%union.tree_node*, i32)*, %struct.rtx_def* (%union.tree_node*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 2), align 8, !dbg !8091
  %10 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8092
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !8092
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8092
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8092
  %call15 = call %struct.rtx_def* %9(%union.tree_node* %11, i32 2), !dbg !8093
  store %struct.rtx_def* %call15, %struct.rtx_def** %sv, align 8, !dbg !8090
  %12 = load %struct.rtx_def*, %struct.rtx_def** %sv, align 8, !dbg !8094
  %tobool16 = icmp ne %struct.rtx_def* %12, null, !dbg !8094
  br i1 %tobool16, label %if.then17, label %if.end, !dbg !8096

if.then17:                                        ; preds = %if.then
  %call18 = call %struct.rtx_def* @gen_reg_rtx(i32 16), !dbg !8097
  store %struct.rtx_def* %call18, %struct.rtx_def** %value_address, align 8, !dbg !8099
  %13 = load %struct.rtx_def*, %struct.rtx_def** %value_address, align 8, !dbg !8100
  %14 = load %struct.rtx_def*, %struct.rtx_def** %sv, align 8, !dbg !8101
  %call19 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %13, %struct.rtx_def* %14), !dbg !8102
  br label %if.end, !dbg !8103

if.end:                                           ; preds = %if.then17, %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %value_address, align 8, !dbg !8104
  %tobool20 = icmp ne %struct.rtx_def* %15, null, !dbg !8104
  br i1 %tobool20, label %if.then21, label %if.end41, !dbg !8106

if.then21:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !8107, metadata !DIExpression()), !dbg !8109
  %16 = load %struct.rtx_def*, %struct.rtx_def** %value_address, align 8, !dbg !8110
  store %struct.rtx_def* %16, %struct.rtx_def** %x, align 8, !dbg !8109
  %17 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8111
  %decl_non_common22 = bitcast %union.tree_node* %17 to %struct.tree_decl_non_common*, !dbg !8111
  %result23 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common22, i32 0, i32 3, !dbg !8111
  %18 = load %union.tree_node*, %union.tree_node** %result23, align 8, !dbg !8111
  %decl_common = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !8111
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8111
  %19 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !8111
  %bf.load24 = load i64, i64* %19, align 8, !dbg !8111
  %bf.lshr25 = lshr i64 %bf.load24, 28, !dbg !8111
  %bf.clear26 = and i64 %bf.lshr25, 1, !dbg !8111
  %bf.cast = trunc i64 %bf.clear26 to i32, !dbg !8111
  %tobool27 = icmp ne i32 %bf.cast, 0, !dbg !8111
  br i1 %tobool27, label %if.end38, label %if.then28, !dbg !8113

if.then28:                                        ; preds = %if.then21
  %20 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8114
  %decl_non_common29 = bitcast %union.tree_node* %20 to %struct.tree_decl_non_common*, !dbg !8114
  %result30 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common29, i32 0, i32 3, !dbg !8114
  %21 = load %union.tree_node*, %union.tree_node** %result30, align 8, !dbg !8114
  %decl_common31 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !8114
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common31, i32 0, i32 2, !dbg !8114
  %22 = bitcast i40* %mode to i64*, !dbg !8114
  %bf.load32 = load i64, i64* %22, align 8, !dbg !8114
  %bf.clear33 = and i64 %bf.load32, 255, !dbg !8114
  %bf.cast34 = trunc i64 %bf.clear33 to i32, !dbg !8114
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8116
  %call35 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast34, %struct.rtx_def* %23), !dbg !8117
  store %struct.rtx_def* %call35, %struct.rtx_def** %x, align 8, !dbg !8118
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8119
  %25 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8120
  %decl_non_common36 = bitcast %union.tree_node* %25 to %struct.tree_decl_non_common*, !dbg !8120
  %result37 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common36, i32 0, i32 3, !dbg !8120
  %26 = load %union.tree_node*, %union.tree_node** %result37, align 8, !dbg !8120
  call void @set_mem_attributes(%struct.rtx_def* %24, %union.tree_node* %26, i32 1), !dbg !8121
  br label %if.end38, !dbg !8122

if.end38:                                         ; preds = %if.then28, %if.then21
  %27 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8123
  %decl_non_common39 = bitcast %union.tree_node* %27 to %struct.tree_decl_non_common*, !dbg !8123
  %result40 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common39, i32 0, i32 3, !dbg !8123
  %28 = load %union.tree_node*, %union.tree_node** %result40, align 8, !dbg !8123
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8123
  call void @set_decl_rtl(%union.tree_node* %28, %struct.rtx_def* %29), !dbg !8123
  br label %if.end41, !dbg !8124

if.end41:                                         ; preds = %if.end38, %if.end
  br label %if.end128, !dbg !8125

if.else:                                          ; preds = %land.end10
  %30 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8126
  %decl_non_common42 = bitcast %union.tree_node* %30 to %struct.tree_decl_non_common*, !dbg !8126
  %result43 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common42, i32 0, i32 3, !dbg !8126
  %31 = load %union.tree_node*, %union.tree_node** %result43, align 8, !dbg !8126
  %decl_common44 = bitcast %union.tree_node* %31 to %struct.tree_decl_common*, !dbg !8126
  %mode45 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common44, i32 0, i32 2, !dbg !8126
  %32 = bitcast i40* %mode45 to i64*, !dbg !8126
  %bf.load46 = load i64, i64* %32, align 8, !dbg !8126
  %bf.clear47 = and i64 %bf.load46, 255, !dbg !8126
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !8126
  %cmp49 = icmp eq i32 %bf.cast48, 0, !dbg !8128
  br i1 %cmp49, label %if.then51, label %if.else54, !dbg !8129

if.then51:                                        ; preds = %if.else
  %33 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8130
  %decl_non_common52 = bitcast %union.tree_node* %33 to %struct.tree_decl_non_common*, !dbg !8130
  %result53 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common52, i32 0, i32 3, !dbg !8130
  %34 = load %union.tree_node*, %union.tree_node** %result53, align 8, !dbg !8130
  call void @set_decl_rtl(%union.tree_node* %34, %struct.rtx_def* null), !dbg !8130
  br label %if.end127, !dbg !8130

if.else54:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %return_type, metadata !8131, metadata !DIExpression()), !dbg !8133
  %35 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8134
  %decl_non_common55 = bitcast %union.tree_node* %35 to %struct.tree_decl_non_common*, !dbg !8134
  %result56 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common55, i32 0, i32 3, !dbg !8134
  %36 = load %union.tree_node*, %union.tree_node** %result56, align 8, !dbg !8134
  %common57 = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !8134
  %type58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 2, !dbg !8134
  %37 = load %union.tree_node*, %union.tree_node** %type58, align 8, !dbg !8134
  store %union.tree_node* %37, %union.tree_node** %return_type, align 8, !dbg !8133
  %38 = load %union.tree_node*, %union.tree_node** %return_type, align 8, !dbg !8135
  %base = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !8135
  %39 = bitcast %struct.tree_base* %base to i64*, !dbg !8135
  %bf.load59 = load i64, i64* %39, align 8, !dbg !8135
  %bf.clear60 = and i64 %bf.load59, 65535, !dbg !8135
  %bf.cast61 = trunc i64 %bf.clear60 to i32, !dbg !8135
  %cmp62 = icmp eq i32 %bf.cast61, 14, !dbg !8135
  br i1 %cmp62, label %cond.true, label %cond.false, !dbg !8135

cond.true:                                        ; preds = %if.else54
  %40 = load %union.tree_node*, %union.tree_node** %return_type, align 8, !dbg !8135
  %call64 = call i32 @vector_type_mode(%union.tree_node* %40), !dbg !8135
  br label %cond.end, !dbg !8135

cond.false:                                       ; preds = %if.else54
  %41 = load %union.tree_node*, %union.tree_node** %return_type, align 8, !dbg !8135
  %type65 = bitcast %union.tree_node* %41 to %struct.tree_type*, !dbg !8135
  %mode66 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type65, i32 0, i32 6, !dbg !8135
  %bf.load67 = load i32, i32* %mode66, align 4, !dbg !8135
  %bf.lshr68 = lshr i32 %bf.load67, 16, !dbg !8135
  %bf.clear69 = and i32 %bf.lshr68, 255, !dbg !8135
  br label %cond.end, !dbg !8135

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call64, %cond.true ], [ %bf.clear69, %cond.false ], !dbg !8135
  %cmp70 = icmp ne i32 %cond, 1, !dbg !8137
  br i1 %cmp70, label %land.lhs.true, label %if.else95, !dbg !8138

land.lhs.true:                                    ; preds = %cond.end
  %42 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 4), align 8, !dbg !8139
  %43 = load %union.tree_node*, %union.tree_node** %return_type, align 8, !dbg !8140
  %call72 = call zeroext i8 %42(%union.tree_node* %43), !dbg !8141
  %conv73 = zext i8 %call72 to i32, !dbg !8141
  %tobool74 = icmp ne i32 %conv73, 0, !dbg !8141
  br i1 %tobool74, label %if.then75, label %if.else95, !dbg !8142

if.then75:                                        ; preds = %land.lhs.true
  %44 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8143
  %decl_non_common76 = bitcast %union.tree_node* %44 to %struct.tree_decl_non_common*, !dbg !8143
  %result77 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common76, i32 0, i32 3, !dbg !8143
  %45 = load %union.tree_node*, %union.tree_node** %result77, align 8, !dbg !8143
  %46 = load %union.tree_node*, %union.tree_node** %return_type, align 8, !dbg !8143
  %base78 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !8143
  %47 = bitcast %struct.tree_base* %base78 to i64*, !dbg !8143
  %bf.load79 = load i64, i64* %47, align 8, !dbg !8143
  %bf.clear80 = and i64 %bf.load79, 65535, !dbg !8143
  %bf.cast81 = trunc i64 %bf.clear80 to i32, !dbg !8143
  %cmp82 = icmp eq i32 %bf.cast81, 14, !dbg !8143
  br i1 %cmp82, label %cond.true84, label %cond.false86, !dbg !8143

cond.true84:                                      ; preds = %if.then75
  %48 = load %union.tree_node*, %union.tree_node** %return_type, align 8, !dbg !8143
  %call85 = call i32 @vector_type_mode(%union.tree_node* %48), !dbg !8143
  br label %cond.end92, !dbg !8143

cond.false86:                                     ; preds = %if.then75
  %49 = load %union.tree_node*, %union.tree_node** %return_type, align 8, !dbg !8143
  %type87 = bitcast %union.tree_node* %49 to %struct.tree_type*, !dbg !8143
  %mode88 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type87, i32 0, i32 6, !dbg !8143
  %bf.load89 = load i32, i32* %mode88, align 4, !dbg !8143
  %bf.lshr90 = lshr i32 %bf.load89, 16, !dbg !8143
  %bf.clear91 = and i32 %bf.lshr90, 255, !dbg !8143
  br label %cond.end92, !dbg !8143

cond.end92:                                       ; preds = %cond.false86, %cond.true84
  %cond93 = phi i32 [ %call85, %cond.true84 ], [ %bf.clear91, %cond.false86 ], !dbg !8143
  %call94 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond93), !dbg !8143
  call void @set_decl_rtl(%union.tree_node* %45, %struct.rtx_def* %call94), !dbg !8143
  br label %if.end121, !dbg !8143

if.else95:                                        ; preds = %land.lhs.true, %cond.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %hard_reg, metadata !8144, metadata !DIExpression()), !dbg !8146
  %50 = load %union.tree_node*, %union.tree_node** %return_type, align 8, !dbg !8147
  %51 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8148
  %call96 = call %struct.rtx_def* @hard_function_value(%union.tree_node* %50, %union.tree_node* %51, %union.tree_node* null, i32 1), !dbg !8149
  store %struct.rtx_def* %call96, %struct.rtx_def** %hard_reg, align 8, !dbg !8146
  %52 = load %struct.rtx_def*, %struct.rtx_def** %hard_reg, align 8, !dbg !8150
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !8150
  %bf.load97 = load i32, i32* %53, align 8, !dbg !8150
  %bf.clear98 = and i32 %bf.load97, 65535, !dbg !8150
  %cmp99 = icmp eq i32 %bf.clear98, 37, !dbg !8150
  br i1 %cmp99, label %if.then101, label %if.else108, !dbg !8152

if.then101:                                       ; preds = %if.else95
  %54 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8153
  %decl_non_common102 = bitcast %union.tree_node* %54 to %struct.tree_decl_non_common*, !dbg !8153
  %result103 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common102, i32 0, i32 3, !dbg !8153
  %55 = load %union.tree_node*, %union.tree_node** %result103, align 8, !dbg !8153
  %56 = load %struct.rtx_def*, %struct.rtx_def** %hard_reg, align 8, !dbg !8153
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !8153
  %bf.load104 = load i32, i32* %57, align 8, !dbg !8153
  %bf.lshr105 = lshr i32 %bf.load104, 16, !dbg !8153
  %bf.clear106 = and i32 %bf.lshr105, 255, !dbg !8153
  %call107 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear106), !dbg !8153
  call void @set_decl_rtl(%union.tree_node* %55, %struct.rtx_def* %call107), !dbg !8153
  br label %if.end120, !dbg !8153

if.else108:                                       ; preds = %if.else95
  %58 = load %struct.rtx_def*, %struct.rtx_def** %hard_reg, align 8, !dbg !8154
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !8154
  %bf.load109 = load i32, i32* %59, align 8, !dbg !8154
  %bf.clear110 = and i32 %bf.load109, 65535, !dbg !8154
  %cmp111 = icmp eq i32 %bf.clear110, 15, !dbg !8154
  br i1 %cmp111, label %cond.false114, label %cond.true113, !dbg !8154

cond.true113:                                     ; preds = %if.else108
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4454, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8154
  br label %cond.end115, !dbg !8154

cond.false114:                                    ; preds = %if.else108
  br label %cond.end115, !dbg !8154

cond.end115:                                      ; preds = %cond.false114, %cond.true113
  %cond116 = phi i32 [ 0, %cond.true113 ], [ 0, %cond.false114 ], !dbg !8154
  %60 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8156
  %decl_non_common117 = bitcast %union.tree_node* %60 to %struct.tree_decl_non_common*, !dbg !8156
  %result118 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common117, i32 0, i32 3, !dbg !8156
  %61 = load %union.tree_node*, %union.tree_node** %result118, align 8, !dbg !8156
  %62 = load %struct.rtx_def*, %struct.rtx_def** %hard_reg, align 8, !dbg !8156
  %call119 = call %struct.rtx_def* @gen_group_rtx(%struct.rtx_def* %62), !dbg !8156
  call void @set_decl_rtl(%union.tree_node* %61, %struct.rtx_def* %call119), !dbg !8156
  br label %if.end120

if.end120:                                        ; preds = %cond.end115, %if.then101
  br label %if.end121

if.end121:                                        ; preds = %if.end120, %cond.end92
  %63 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8157
  %decl_non_common122 = bitcast %union.tree_node* %63 to %struct.tree_decl_non_common*, !dbg !8157
  %result123 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common122, i32 0, i32 3, !dbg !8157
  %64 = load %union.tree_node*, %union.tree_node** %result123, align 8, !dbg !8157
  %decl_common124 = bitcast %union.tree_node* %64 to %struct.tree_decl_common*, !dbg !8157
  %decl_flag_0 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common124, i32 0, i32 2, !dbg !8157
  %65 = bitcast i40* %decl_flag_0 to i64*, !dbg !8157
  %bf.load125 = load i64, i64* %65, align 8, !dbg !8158
  %bf.clear126 = and i64 %bf.load125, -16777217, !dbg !8158
  %bf.set = or i64 %bf.clear126, 16777216, !dbg !8158
  store i64 %bf.set, i64* %65, align 8, !dbg !8158
  br label %if.end127

if.end127:                                        ; preds = %if.end121, %if.then51
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %if.end41
  %66 = load %union.tree_node*, %union.tree_node** %subr.addr, align 8, !dbg !8159
  call void @assign_parms(%union.tree_node* %66), !dbg !8160
  %67 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8161
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %67, i32 0, i32 7, !dbg !8163
  %68 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !8163
  %tobool129 = icmp ne %union.tree_node* %68, null, !dbg !8161
  br i1 %tobool129, label %if.then130, label %if.end150, !dbg !8164

if.then130:                                       ; preds = %if.end128
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !8165, metadata !DIExpression()), !dbg !8167
  %69 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8168
  %static_chain_decl131 = getelementptr inbounds %struct.function, %struct.function* %69, i32 0, i32 7, !dbg !8169
  %70 = load %union.tree_node*, %union.tree_node** %static_chain_decl131, align 8, !dbg !8169
  store %union.tree_node* %70, %union.tree_node** %parm, align 8, !dbg !8167
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %local, metadata !8170, metadata !DIExpression()), !dbg !8171
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %chain, metadata !8172, metadata !DIExpression()), !dbg !8173
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8174, metadata !DIExpression()), !dbg !8175
  %call132 = call %struct.rtx_def* @gen_reg_rtx(i32 16), !dbg !8176
  store %struct.rtx_def* %call132, %struct.rtx_def** %local, align 8, !dbg !8177
  %71 = load %struct.rtx_def* (%union.tree_node*, i8)*, %struct.rtx_def* (%union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 21), align 8, !dbg !8178
  %72 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8179
  %call133 = call %struct.rtx_def* %71(%union.tree_node* %72, i8 zeroext 1), !dbg !8180
  store %struct.rtx_def* %call133, %struct.rtx_def** %chain, align 8, !dbg !8181
  %73 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8182
  %74 = load %struct.rtx_def*, %struct.rtx_def** %chain, align 8, !dbg !8183
  call void @set_decl_incoming_rtl(%union.tree_node* %73, %struct.rtx_def* %74, i8 zeroext 0), !dbg !8184
  %75 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8185
  %76 = load %struct.rtx_def*, %struct.rtx_def** %local, align 8, !dbg !8185
  call void @set_decl_rtl(%union.tree_node* %75, %struct.rtx_def* %76), !dbg !8185
  %77 = load %struct.rtx_def*, %struct.rtx_def** %local, align 8, !dbg !8186
  %78 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8187
  %common134 = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !8187
  %type135 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common134, i32 0, i32 2, !dbg !8187
  %79 = load %union.tree_node*, %union.tree_node** %type135, align 8, !dbg !8187
  %common136 = bitcast %union.tree_node* %79 to %struct.tree_common*, !dbg !8187
  %type137 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common136, i32 0, i32 2, !dbg !8187
  %80 = load %union.tree_node*, %union.tree_node** %type137, align 8, !dbg !8187
  %type138 = bitcast %union.tree_node* %80 to %struct.tree_type*, !dbg !8187
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type138, i32 0, i32 7, !dbg !8187
  %81 = load i32, i32* %align, align 8, !dbg !8187
  call void @mark_reg_pointer(%struct.rtx_def* %77, i32 %81), !dbg !8188
  %82 = load %struct.rtx_def*, %struct.rtx_def** %local, align 8, !dbg !8189
  %83 = load %struct.rtx_def*, %struct.rtx_def** %chain, align 8, !dbg !8190
  %call139 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %82, %struct.rtx_def* %83), !dbg !8191
  store %struct.rtx_def* %call139, %struct.rtx_def** %insn, align 8, !dbg !8192
  %84 = load %struct.rtx_def*, %struct.rtx_def** %chain, align 8, !dbg !8193
  %85 = bitcast %struct.rtx_def* %84 to i32*, !dbg !8193
  %bf.load140 = load i32, i32* %85, align 8, !dbg !8193
  %bf.clear141 = and i32 %bf.load140, 65535, !dbg !8193
  %cmp142 = icmp eq i32 %bf.clear141, 43, !dbg !8193
  br i1 %cmp142, label %land.lhs.true144, label %if.end149, !dbg !8195

land.lhs.true144:                                 ; preds = %if.then130
  %86 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !dbg !8196
  %87 = load %struct.rtx_def*, %struct.rtx_def** %chain, align 8, !dbg !8197
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1, !dbg !8197
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8197
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8197
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8197
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8197
  %call145 = call i32 @reg_mentioned_p(%struct.rtx_def* %86, %struct.rtx_def* %88), !dbg !8198
  %tobool146 = icmp ne i32 %call145, 0, !dbg !8198
  br i1 %tobool146, label %if.then147, label %if.end149, !dbg !8199

if.then147:                                       ; preds = %land.lhs.true144
  %89 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8200
  %90 = load %struct.rtx_def*, %struct.rtx_def** %chain, align 8, !dbg !8201
  %call148 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %89, i32 3, %struct.rtx_def* %90), !dbg !8202
  br label %if.end149, !dbg !8202

if.end149:                                        ; preds = %if.then147, %land.lhs.true144, %if.then130
  br label %if.end150, !dbg !8203

if.end150:                                        ; preds = %if.end149, %if.end128
  %91 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8204
  %nonlocal_goto_save_area = getelementptr inbounds %struct.function, %struct.function* %91, i32 0, i32 8, !dbg !8206
  %92 = load %union.tree_node*, %union.tree_node** %nonlocal_goto_save_area, align 8, !dbg !8206
  %tobool151 = icmp ne %union.tree_node* %92, null, !dbg !8204
  br i1 %tobool151, label %if.then152, label %if.end174, !dbg !8207

if.then152:                                       ; preds = %if.end150
  call void @llvm.dbg.declare(metadata %union.tree_node** %t_save, metadata !8208, metadata !DIExpression()), !dbg !8210
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %r_save, metadata !8211, metadata !DIExpression()), !dbg !8212
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !8213, metadata !DIExpression()), !dbg !8214
  %93 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8215
  %nonlocal_goto_save_area153 = getelementptr inbounds %struct.function, %struct.function* %93, i32 0, i32 8, !dbg !8215
  %94 = load %union.tree_node*, %union.tree_node** %nonlocal_goto_save_area153, align 8, !dbg !8215
  %exp = bitcast %union.tree_node* %94 to %struct.tree_exp*, !dbg !8215
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8215
  %arrayidx154 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8215
  %95 = load %union.tree_node*, %union.tree_node** %arrayidx154, align 8, !dbg !8215
  store %union.tree_node* %95, %union.tree_node** %var, align 8, !dbg !8214
  %96 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8216
  %base155 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !8216
  %97 = bitcast %struct.tree_base* %base155 to i64*, !dbg !8216
  %bf.load156 = load i64, i64* %97, align 8, !dbg !8216
  %bf.clear157 = and i64 %bf.load156, 65535, !dbg !8216
  %bf.cast158 = trunc i64 %bf.clear157 to i32, !dbg !8216
  %idxprom = zext i32 %bf.cast158 to i64, !dbg !8216
  %arrayidx159 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !8216
  %arrayidx160 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx159, i64 0, i64 11, !dbg !8216
  %98 = load i8, i8* %arrayidx160, align 1, !dbg !8216
  %conv161 = zext i8 %98 to i32, !dbg !8216
  %tobool162 = icmp ne i32 %conv161, 0, !dbg !8216
  br i1 %tobool162, label %land.lhs.true163, label %if.then166, !dbg !8216

land.lhs.true163:                                 ; preds = %if.then152
  %99 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8216
  %decl_with_rtl = bitcast %union.tree_node* %99 to %struct.tree_decl_with_rtl*, !dbg !8216
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !8216
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8216
  %cmp164 = icmp ne %struct.rtx_def* %100, null, !dbg !8216
  br i1 %cmp164, label %if.end167, label %if.then166, !dbg !8218

if.then166:                                       ; preds = %land.lhs.true163, %if.then152
  %101 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8219
  call void @expand_decl(%union.tree_node* %101), !dbg !8220
  br label %if.end167, !dbg !8220

if.end167:                                        ; preds = %if.then166, %land.lhs.true163
  %102 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !8221
  %103 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8221
  %nonlocal_goto_save_area168 = getelementptr inbounds %struct.function, %struct.function* %103, i32 0, i32 8, !dbg !8221
  %104 = load %union.tree_node*, %union.tree_node** %nonlocal_goto_save_area168, align 8, !dbg !8221
  %105 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8221
  %call169 = call %union.tree_node* @build4_stat(i32 45, %union.tree_node* %102, %union.tree_node* %104, %union.tree_node* %105, %union.tree_node* null, %union.tree_node* null), !dbg !8221
  store %union.tree_node* %call169, %union.tree_node** %t_save, align 8, !dbg !8222
  %106 = load %union.tree_node*, %union.tree_node** %t_save, align 8, !dbg !8223
  %call170 = call %struct.rtx_def* @expand_expr(%union.tree_node* %106, %struct.rtx_def* null, i32 0, i32 5), !dbg !8224
  store %struct.rtx_def* %call170, %struct.rtx_def** %r_save, align 8, !dbg !8225
  %107 = load %struct.rtx_def*, %struct.rtx_def** %r_save, align 8, !dbg !8226
  %call171 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 16, %struct.rtx_def* %107, i8 zeroext 0), !dbg !8226
  store %struct.rtx_def* %call171, %struct.rtx_def** %r_save, align 8, !dbg !8227
  %108 = load %struct.rtx_def*, %struct.rtx_def** %r_save, align 8, !dbg !8228
  %109 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 78), align 8, !dbg !8229
  %call172 = call %struct.rtx_def* %109(), !dbg !8230
  %call173 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %108, %struct.rtx_def* %call172), !dbg !8231
  call void @update_nonlocal_goto_save_area(), !dbg !8232
  br label %if.end174, !dbg !8233

if.end174:                                        ; preds = %if.end167, %if.end150
  %call175 = call %struct.rtx_def* @emit_note(i32 4), !dbg !8234
  %call176 = call %struct.rtx_def* @get_last_insn(), !dbg !8235
  %110 = bitcast %struct.rtx_def* %call176 to i32*, !dbg !8235
  %bf.load177 = load i32, i32* %110, align 8, !dbg !8235
  %bf.clear178 = and i32 %bf.load177, 65535, !dbg !8235
  %cmp179 = icmp eq i32 %bf.clear178, 13, !dbg !8235
  br i1 %cmp179, label %cond.false182, label %cond.true181, !dbg !8235

cond.true181:                                     ; preds = %if.end174
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4518, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8235
  br label %cond.end183, !dbg !8235

cond.false182:                                    ; preds = %if.end174
  br label %cond.end183, !dbg !8235

cond.end183:                                      ; preds = %cond.false182, %cond.true181
  %cond184 = phi i32 [ 0, %cond.true181 ], [ 0, %cond.false182 ], !dbg !8235
  %call185 = call %struct.rtx_def* @get_last_insn(), !dbg !8236
  store %struct.rtx_def* %call185, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 18), align 8, !dbg !8237
  %111 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 35), align 1, !dbg !8238
  %tobool186 = icmp ne i8 %111, 0, !dbg !8240
  br i1 %tobool186, label %if.then187, label %if.end188, !dbg !8241

if.then187:                                       ; preds = %cond.end183
  br label %if.end188, !dbg !8242

if.end188:                                        ; preds = %if.then187, %cond.end183
  %112 = load i32, i32* @flag_stack_check, align 4, !dbg !8244
  %tobool189 = icmp ne i32 %112, 0, !dbg !8244
  br i1 %tobool189, label %if.then190, label %if.end192, !dbg !8246

if.then190:                                       ; preds = %if.end188
  %call191 = call %struct.rtx_def* @emit_note(i32 0), !dbg !8247
  store %struct.rtx_def* %call191, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 14), align 8, !dbg !8248
  br label %if.end192, !dbg !8249

if.end192:                                        ; preds = %if.then190, %if.end188
  call void @force_next_line_note(), !dbg !8250
  ret void, !dbg !8251
}

declare dso_local void @init_recog_no_volatile() #2

declare dso_local void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #2

declare dso_local void @set_decl_rtl(%union.tree_node*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_group_rtx(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parms(%union.tree_node* %fndecl) #0 !dbg !8252 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %all = alloca %struct.assign_parm_data_all, align 8
  %parm = alloca %union.tree_node*, align 8
  %fnargs = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca i32, align 4
  %data = alloca %struct.assign_parm_data_one, align 8
  %align = alloca i32, align 4
  %type89 = alloca %union.tree_node*, align 8
  %mode94 = alloca i32, align 4
  %align145 = alloca i32, align 4
  %result160 = alloca %union.tree_node*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %decl_result = alloca %union.tree_node*, align 8
  %decl_rtl = alloca %struct.rtx_def*, align 8
  %real_decl_rtl = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !8253, metadata !DIExpression()), !dbg !8254
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all* %all, metadata !8255, metadata !DIExpression()), !dbg !8256
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !8257, metadata !DIExpression()), !dbg !8258
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fnargs, metadata !8259, metadata !DIExpression()), !dbg !8260
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8261, metadata !DIExpression()), !dbg !8262
  %0 = load %struct.rtx_def* ()*, %struct.rtx_def* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 17), align 8, !dbg !8263
  %call = call %struct.rtx_def* %0(), !dbg !8264
  store %struct.rtx_def* %call, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !8265
  call void @assign_parms_initialize_all(%struct.assign_parm_data_all* %all), !dbg !8266
  %call1 = call %struct.VEC_tree_heap* @assign_parms_augmented_arg_list(%struct.assign_parm_data_all* %all), !dbg !8267
  store %struct.VEC_tree_heap* %call1, %struct.VEC_tree_heap** %fnargs, align 8, !dbg !8268
  store i32 0, i32* %i, align 4, !dbg !8269
  br label %for.cond, !dbg !8271

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs, align 8, !dbg !8272
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !8272
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8272

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs, align 8, !dbg !8272
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %2, i32 0, i32 0, !dbg !8272
  br label %cond.end, !dbg !8272

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !8272

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8272
  %3 = load i32, i32* %i, align 4, !dbg !8272
  %call2 = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %3, %union.tree_node** %parm), !dbg !8272
  %tobool3 = icmp ne i32 %call2, 0, !dbg !8274
  br i1 %tobool3, label %for.body, label %for.end, !dbg !8274

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one* %data, metadata !8275, metadata !DIExpression()), !dbg !8277
  %4 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8278
  call void @assign_parm_find_data_types(%struct.assign_parm_data_all* %all, %union.tree_node* %4, %struct.assign_parm_data_one* %data), !dbg !8279
  %passed_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 5, !dbg !8280
  %5 = load i32, i32* %passed_mode, align 4, !dbg !8280
  %cmp = icmp eq i32 %5, 0, !dbg !8282
  br i1 %cmp, label %if.then, label %if.end, !dbg !8283

if.then:                                          ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8284
  %7 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8284
  call void @set_decl_rtl(%union.tree_node* %6, %struct.rtx_def* %7), !dbg !8284
  %8 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8286
  %decl_with_rtl = bitcast %union.tree_node* %8 to %struct.tree_decl_with_rtl*, !dbg !8286
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !8286
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8286
  %tobool4 = icmp ne %struct.rtx_def* %9, null, !dbg !8286
  br i1 %tobool4, label %cond.true5, label %cond.false8, !dbg !8286

cond.true5:                                       ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8286
  %decl_with_rtl6 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_rtl*, !dbg !8286
  %rtl7 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl6, i32 0, i32 1, !dbg !8286
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl7, align 8, !dbg !8286
  br label %cond.end11, !dbg !8286

cond.false8:                                      ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8286
  call void @make_decl_rtl(%union.tree_node* %12), !dbg !8286
  %13 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8286
  %decl_with_rtl9 = bitcast %union.tree_node* %13 to %struct.tree_decl_with_rtl*, !dbg !8286
  %rtl10 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl9, i32 0, i32 1, !dbg !8286
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtl10, align 8, !dbg !8286
  br label %cond.end11, !dbg !8286

cond.end11:                                       ; preds = %cond.false8, %cond.true5
  %cond12 = phi %struct.rtx_def* [ %11, %cond.true5 ], [ %14, %cond.false8 ], !dbg !8286
  %15 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8287
  %parm_decl = bitcast %union.tree_node* %15 to %struct.tree_parm_decl*, !dbg !8287
  %incoming_rtl = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 1, !dbg !8287
  store %struct.rtx_def* %cond12, %struct.rtx_def** %incoming_rtl, align 8, !dbg !8288
  br label %for.inc, !dbg !8289

if.end:                                           ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %align, metadata !8290, metadata !DIExpression()), !dbg !8293
  %promoted_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 6, !dbg !8294
  %16 = load i32, i32* %promoted_mode, align 8, !dbg !8294
  %passed_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 1, !dbg !8294
  %17 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !8294
  %call13 = call i32 @ix86_function_arg_boundary(i32 %16, %union.tree_node* %17), !dbg !8294
  store i32 %call13, i32* %align, align 4, !dbg !8293
  %passed_type14 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 1, !dbg !8295
  %18 = load %union.tree_node*, %union.tree_node** %passed_type14, align 8, !dbg !8295
  %promoted_mode15 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 6, !dbg !8295
  %19 = load i32, i32* %promoted_mode15, align 8, !dbg !8295
  %20 = load i32, i32* %align, align 4, !dbg !8295
  %call16 = call i32 @ix86_minimum_alignment(%union.tree_node* %18, i32 %19, i32 %20), !dbg !8295
  store i32 %call16, i32* %align, align 4, !dbg !8296
  %nominal_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 0, !dbg !8297
  %21 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8, !dbg !8297
  %type = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !8297
  %align17 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 7, !dbg !8297
  %22 = load i32, i32* %align17, align 8, !dbg !8297
  %23 = load i32, i32* %align, align 4, !dbg !8299
  %cmp18 = icmp ugt i32 %22, %23, !dbg !8300
  br i1 %cmp18, label %if.then19, label %if.end38, !dbg !8301

if.then19:                                        ; preds = %if.end
  %nominal_type20 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 0, !dbg !8302
  %24 = load %union.tree_node*, %union.tree_node** %nominal_type20, align 8, !dbg !8302
  %nominal_type21 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 0, !dbg !8302
  %25 = load %union.tree_node*, %union.tree_node** %nominal_type21, align 8, !dbg !8302
  %base22 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !8302
  %26 = bitcast %struct.tree_base* %base22 to i64*, !dbg !8302
  %bf.load = load i64, i64* %26, align 8, !dbg !8302
  %bf.clear = and i64 %bf.load, 65535, !dbg !8302
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8302
  %cmp23 = icmp eq i32 %bf.cast, 14, !dbg !8302
  br i1 %cmp23, label %cond.true24, label %cond.false27, !dbg !8302

cond.true24:                                      ; preds = %if.then19
  %nominal_type25 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 0, !dbg !8302
  %27 = load %union.tree_node*, %union.tree_node** %nominal_type25, align 8, !dbg !8302
  %call26 = call i32 @vector_type_mode(%union.tree_node* %27), !dbg !8302
  br label %cond.end32, !dbg !8302

cond.false27:                                     ; preds = %if.then19
  %nominal_type28 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 0, !dbg !8302
  %28 = load %union.tree_node*, %union.tree_node** %nominal_type28, align 8, !dbg !8302
  %type29 = bitcast %union.tree_node* %28 to %struct.tree_type*, !dbg !8302
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i32 0, i32 6, !dbg !8302
  %bf.load30 = load i32, i32* %mode, align 4, !dbg !8302
  %bf.lshr = lshr i32 %bf.load30, 16, !dbg !8302
  %bf.clear31 = and i32 %bf.lshr, 255, !dbg !8302
  br label %cond.end32, !dbg !8302

cond.end32:                                       ; preds = %cond.false27, %cond.true24
  %cond33 = phi i32 [ %call26, %cond.true24 ], [ %bf.clear31, %cond.false27 ], !dbg !8302
  %nominal_type34 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 0, !dbg !8302
  %29 = load %union.tree_node*, %union.tree_node** %nominal_type34, align 8, !dbg !8302
  %type35 = bitcast %union.tree_node* %29 to %struct.tree_type*, !dbg !8302
  %align36 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type35, i32 0, i32 7, !dbg !8302
  %30 = load i32, i32* %align36, align 8, !dbg !8302
  %call37 = call i32 @ix86_minimum_alignment(%union.tree_node* %24, i32 %cond33, i32 %30), !dbg !8302
  store i32 %call37, i32* %align, align 4, !dbg !8303
  br label %if.end38, !dbg !8304

if.end38:                                         ; preds = %cond.end32, %if.end
  %31 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !8305
  %32 = load i32, i32* %align, align 4, !dbg !8307
  %cmp39 = icmp ult i32 %31, %32, !dbg !8308
  br i1 %cmp39, label %if.then40, label %if.end46, !dbg !8309

if.then40:                                        ; preds = %if.end38
  %33 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 46), align 2, !dbg !8310
  %tobool41 = icmp ne i8 %33, 0, !dbg !8310
  br i1 %tobool41, label %cond.true42, label %cond.false43, !dbg !8310

cond.true42:                                      ; preds = %if.then40
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3180, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8310
  br label %cond.end44, !dbg !8310

cond.false43:                                     ; preds = %if.then40
  br label %cond.end44, !dbg !8310

cond.end44:                                       ; preds = %cond.false43, %cond.true42
  %cond45 = phi i32 [ 0, %cond.true42 ], [ 0, %cond.false43 ], !dbg !8310
  %34 = load i32, i32* %align, align 4, !dbg !8312
  store i32 %34, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !8313
  br label %if.end46, !dbg !8314

if.end46:                                         ; preds = %cond.end44, %if.end38
  %35 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8315
  %stdarg = getelementptr inbounds %struct.function, %struct.function* %35, i32 0, i32 20, !dbg !8317
  %bf.load47 = load i32, i32* %stdarg, align 8, !dbg !8317
  %bf.lshr48 = lshr i32 %bf.load47, 22, !dbg !8317
  %bf.clear49 = and i32 %bf.lshr48, 1, !dbg !8317
  %tobool50 = icmp ne i32 %bf.clear49, 0, !dbg !8315
  br i1 %tobool50, label %land.lhs.true, label %if.end53, !dbg !8318

land.lhs.true:                                    ; preds = %if.end46
  %36 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8319
  %common = bitcast %union.tree_node* %36 to %struct.tree_common*, !dbg !8319
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8319
  %37 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !8319
  %tobool51 = icmp ne %union.tree_node* %37, null, !dbg !8319
  br i1 %tobool51, label %if.end53, label %if.then52, !dbg !8320

if.then52:                                        ; preds = %land.lhs.true
  call void @assign_parms_setup_varargs(%struct.assign_parm_data_all* %all, %struct.assign_parm_data_one* %data, i8 zeroext 0), !dbg !8321
  br label %if.end53, !dbg !8321

if.end53:                                         ; preds = %if.then52, %land.lhs.true, %if.end46
  call void @assign_parm_find_entry_rtl(%struct.assign_parm_data_all* %all, %struct.assign_parm_data_one* %data), !dbg !8322
  %call54 = call zeroext i8 @assign_parm_is_stack_parm(%struct.assign_parm_data_all* %all, %struct.assign_parm_data_one* %data), !dbg !8323
  %tobool55 = icmp ne i8 %call54, 0, !dbg !8323
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !8325

if.then56:                                        ; preds = %if.end53
  %38 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8326
  call void @assign_parm_find_stack_rtl(%union.tree_node* %38, %struct.assign_parm_data_one* %data), !dbg !8328
  call void @assign_parm_adjust_entry_rtl(%struct.assign_parm_data_one* %data), !dbg !8329
  br label %if.end57, !dbg !8330

if.end57:                                         ; preds = %if.then56, %if.end53
  %39 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8331
  %entry_parm = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 2, !dbg !8332
  %40 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !8332
  %passed_pointer = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 9, !dbg !8333
  %bf.load58 = load i8, i8* %passed_pointer, align 4, !dbg !8333
  %bf.lshr59 = lshr i8 %bf.load58, 1, !dbg !8333
  %bf.clear60 = and i8 %bf.lshr59, 1, !dbg !8333
  %bf.cast61 = zext i8 %bf.clear60 to i32, !dbg !8333
  %conv = trunc i32 %bf.cast61 to i8, !dbg !8334
  call void @set_decl_incoming_rtl(%union.tree_node* %39, %struct.rtx_def* %40, i8 zeroext %conv), !dbg !8335
  %args_so_far = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 0, !dbg !8336
  %promoted_mode62 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 6, !dbg !8336
  %41 = load i32, i32* %promoted_mode62, align 8, !dbg !8336
  %passed_type63 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 1, !dbg !8336
  %42 = load %union.tree_node*, %union.tree_node** %passed_type63, align 8, !dbg !8336
  %named_arg = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 9, !dbg !8336
  %bf.load64 = load i8, i8* %named_arg, align 4, !dbg !8336
  %bf.clear65 = and i8 %bf.load64, 1, !dbg !8336
  %bf.cast66 = zext i8 %bf.clear65 to i32, !dbg !8336
  call void @function_arg_advance(%struct.ix86_args* %args_so_far, i32 %41, %union.tree_node* %42, i32 %bf.cast66), !dbg !8336
  call void @assign_parm_adjust_stack_rtl(%struct.assign_parm_data_one* %data), !dbg !8337
  %call67 = call zeroext i8 @assign_parm_setup_block_p(%struct.assign_parm_data_one* %data), !dbg !8338
  %tobool68 = icmp ne i8 %call67, 0, !dbg !8338
  br i1 %tobool68, label %if.then69, label %if.else, !dbg !8340

if.then69:                                        ; preds = %if.end57
  %43 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8341
  call void @assign_parm_setup_block(%struct.assign_parm_data_all* %all, %union.tree_node* %43, %struct.assign_parm_data_one* %data), !dbg !8342
  br label %if.end82, !dbg !8342

if.else:                                          ; preds = %if.end57
  %passed_pointer70 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %data, i32 0, i32 9, !dbg !8343
  %bf.load71 = load i8, i8* %passed_pointer70, align 4, !dbg !8343
  %bf.lshr72 = lshr i8 %bf.load71, 1, !dbg !8343
  %bf.clear73 = and i8 %bf.lshr72, 1, !dbg !8343
  %bf.cast74 = zext i8 %bf.clear73 to i32, !dbg !8343
  %tobool75 = icmp ne i32 %bf.cast74, 0, !dbg !8345
  br i1 %tobool75, label %if.then79, label %lor.lhs.false, !dbg !8346

lor.lhs.false:                                    ; preds = %if.else
  %44 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8347
  %call76 = call zeroext i8 @use_register_for_decl(%union.tree_node* %44), !dbg !8348
  %conv77 = zext i8 %call76 to i32, !dbg !8348
  %tobool78 = icmp ne i32 %conv77, 0, !dbg !8348
  br i1 %tobool78, label %if.then79, label %if.else80, !dbg !8349

if.then79:                                        ; preds = %lor.lhs.false, %if.else
  %45 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8350
  call void @assign_parm_setup_reg(%struct.assign_parm_data_all* %all, %union.tree_node* %45, %struct.assign_parm_data_one* %data), !dbg !8351
  br label %if.end81, !dbg !8351

if.else80:                                        ; preds = %lor.lhs.false
  %46 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !8352
  call void @assign_parm_setup_stack(%struct.assign_parm_data_all* %all, %union.tree_node* %46, %struct.assign_parm_data_one* %data), !dbg !8353
  br label %if.end81

if.end81:                                         ; preds = %if.else80, %if.then79
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then69
  br label %for.inc, !dbg !8354

for.inc:                                          ; preds = %if.end82, %cond.end11
  %47 = load i32, i32* %i, align 4, !dbg !8355
  %inc = add i32 %47, 1, !dbg !8355
  store i32 %inc, i32* %i, align 4, !dbg !8355
  br label %for.cond, !dbg !8356, !llvm.loop !8357

for.end:                                          ; preds = %cond.end
  %48 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 10), align 8, !dbg !8359
  %tobool83 = icmp ne i8 (%union.tree_node*)* %48, null, !dbg !8361
  br i1 %tobool83, label %if.then84, label %if.end85, !dbg !8362

if.then84:                                        ; preds = %for.end
  %49 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs, align 8, !dbg !8363
  call void @assign_parms_unsplit_complex(%struct.assign_parm_data_all* %all, %struct.VEC_tree_heap* %49), !dbg !8364
  br label %if.end85, !dbg !8364

if.end85:                                         ; preds = %if.then84, %for.end
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** %fnargs), !dbg !8365
  %first_conversion_insn = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 4, !dbg !8366
  %50 = load %struct.rtx_def*, %struct.rtx_def** %first_conversion_insn, align 8, !dbg !8366
  %call86 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %50), !dbg !8367
  %51 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8368
  %decl_non_common = bitcast %union.tree_node* %51 to %struct.tree_decl_non_common*, !dbg !8368
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !8368
  %52 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8368
  %tobool87 = icmp ne %union.tree_node* %52, null, !dbg !8368
  br i1 %tobool87, label %if.then88, label %if.end157, !dbg !8372

if.then88:                                        ; preds = %if.end85
  call void @llvm.dbg.declare(metadata %union.tree_node** %type89, metadata !8373, metadata !DIExpression()), !dbg !8375
  %53 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8376
  %decl_non_common90 = bitcast %union.tree_node* %53 to %struct.tree_decl_non_common*, !dbg !8376
  %result91 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common90, i32 0, i32 3, !dbg !8376
  %54 = load %union.tree_node*, %union.tree_node** %result91, align 8, !dbg !8376
  %common92 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !8376
  %type93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 2, !dbg !8376
  %55 = load %union.tree_node*, %union.tree_node** %type93, align 8, !dbg !8376
  store %union.tree_node* %55, %union.tree_node** %type89, align 8, !dbg !8375
  call void @llvm.dbg.declare(metadata i32* %mode94, metadata !8377, metadata !DIExpression()), !dbg !8378
  %56 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !8379
  %base95 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !8379
  %57 = bitcast %struct.tree_base* %base95 to i64*, !dbg !8379
  %bf.load96 = load i64, i64* %57, align 8, !dbg !8379
  %bf.clear97 = and i64 %bf.load96, 65535, !dbg !8379
  %bf.cast98 = trunc i64 %bf.clear97 to i32, !dbg !8379
  %cmp99 = icmp eq i32 %bf.cast98, 14, !dbg !8379
  br i1 %cmp99, label %cond.true101, label %cond.false103, !dbg !8379

cond.true101:                                     ; preds = %if.then88
  %58 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !8379
  %call102 = call i32 @vector_type_mode(%union.tree_node* %58), !dbg !8379
  br label %cond.end109, !dbg !8379

cond.false103:                                    ; preds = %if.then88
  %59 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !8379
  %type104 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !8379
  %mode105 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type104, i32 0, i32 6, !dbg !8379
  %bf.load106 = load i32, i32* %mode105, align 4, !dbg !8379
  %bf.lshr107 = lshr i32 %bf.load106, 16, !dbg !8379
  %bf.clear108 = and i32 %bf.lshr107, 255, !dbg !8379
  br label %cond.end109, !dbg !8379

cond.end109:                                      ; preds = %cond.false103, %cond.true101
  %cond110 = phi i32 [ %call102, %cond.true101 ], [ %bf.clear108, %cond.false103 ], !dbg !8379
  store i32 %cond110, i32* %mode94, align 4, !dbg !8378
  %60 = load i32, i32* %mode94, align 4, !dbg !8380
  %cmp111 = icmp ne i32 %60, 1, !dbg !8382
  br i1 %cmp111, label %land.lhs.true113, label %if.end156, !dbg !8383

land.lhs.true113:                                 ; preds = %cond.end109
  %61 = load i32, i32* %mode94, align 4, !dbg !8384
  %cmp114 = icmp ne i32 %61, 0, !dbg !8385
  br i1 %cmp114, label %land.lhs.true116, label %if.end156, !dbg !8386

land.lhs.true116:                                 ; preds = %land.lhs.true113
  %62 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !8387
  %base117 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !8387
  %63 = bitcast %struct.tree_base* %base117 to i64*, !dbg !8387
  %bf.load118 = load i64, i64* %63, align 8, !dbg !8387
  %bf.clear119 = and i64 %bf.load118, 65535, !dbg !8387
  %bf.cast120 = trunc i64 %bf.clear119 to i32, !dbg !8387
  %cmp121 = icmp eq i32 %bf.cast120, 15, !dbg !8387
  br i1 %cmp121, label %if.end156, label %lor.lhs.false123, !dbg !8387

lor.lhs.false123:                                 ; preds = %land.lhs.true116
  %64 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !8387
  %base124 = bitcast %union.tree_node* %64 to %struct.tree_base*, !dbg !8387
  %65 = bitcast %struct.tree_base* %base124 to i64*, !dbg !8387
  %bf.load125 = load i64, i64* %65, align 8, !dbg !8387
  %bf.clear126 = and i64 %bf.load125, 65535, !dbg !8387
  %bf.cast127 = trunc i64 %bf.clear126 to i32, !dbg !8387
  %cmp128 = icmp eq i32 %bf.cast127, 16, !dbg !8387
  br i1 %cmp128, label %if.end156, label %lor.lhs.false130, !dbg !8387

lor.lhs.false130:                                 ; preds = %lor.lhs.false123
  %66 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !8387
  %base131 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !8387
  %67 = bitcast %struct.tree_base* %base131 to i64*, !dbg !8387
  %bf.load132 = load i64, i64* %67, align 8, !dbg !8387
  %bf.clear133 = and i64 %bf.load132, 65535, !dbg !8387
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !8387
  %cmp135 = icmp eq i32 %bf.cast134, 17, !dbg !8387
  br i1 %cmp135, label %if.end156, label %lor.lhs.false137, !dbg !8387

lor.lhs.false137:                                 ; preds = %lor.lhs.false130
  %68 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !8387
  %base138 = bitcast %union.tree_node* %68 to %struct.tree_base*, !dbg !8387
  %69 = bitcast %struct.tree_base* %base138 to i64*, !dbg !8387
  %bf.load139 = load i64, i64* %69, align 8, !dbg !8387
  %bf.clear140 = and i64 %bf.load139, 65535, !dbg !8387
  %bf.cast141 = trunc i64 %bf.clear140 to i32, !dbg !8387
  %cmp142 = icmp eq i32 %bf.cast141, 18, !dbg !8387
  br i1 %cmp142, label %if.end156, label %if.then144, !dbg !8388

if.then144:                                       ; preds = %lor.lhs.false137
  call void @llvm.dbg.declare(metadata i32* %align145, metadata !8389, metadata !DIExpression()), !dbg !8391
  %70 = load i32, i32* %mode94, align 4, !dbg !8392
  %call146 = call i32 @get_mode_alignment(i32 %70), !dbg !8392
  store i32 %call146, i32* %align145, align 4, !dbg !8391
  %71 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !8393
  %72 = load i32, i32* %align145, align 4, !dbg !8395
  %cmp147 = icmp ult i32 %71, %72, !dbg !8396
  br i1 %cmp147, label %if.then149, label %if.end155, !dbg !8397

if.then149:                                       ; preds = %if.then144
  %73 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 46), align 2, !dbg !8398
  %tobool150 = icmp ne i8 %73, 0, !dbg !8398
  br i1 %tobool150, label %cond.true151, label %cond.false152, !dbg !8398

cond.true151:                                     ; preds = %if.then149
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 3239, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8398
  br label %cond.end153, !dbg !8398

cond.false152:                                    ; preds = %if.then149
  br label %cond.end153, !dbg !8398

cond.end153:                                      ; preds = %cond.false152, %cond.true151
  %cond154 = phi i32 [ 0, %cond.true151 ], [ 0, %cond.false152 ], !dbg !8398
  %74 = load i32, i32* %align145, align 4, !dbg !8400
  store i32 %74, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 26), align 4, !dbg !8401
  br label %if.end155, !dbg !8402

if.end155:                                        ; preds = %cond.end153, %if.then144
  br label %if.end156, !dbg !8403

if.end156:                                        ; preds = %if.end155, %lor.lhs.false137, %lor.lhs.false130, %lor.lhs.false123, %land.lhs.true116, %land.lhs.true113, %cond.end109
  br label %if.end157, !dbg !8404

if.end157:                                        ; preds = %if.end156, %if.end85
  %function_result_decl = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 2, !dbg !8405
  %75 = load %union.tree_node*, %union.tree_node** %function_result_decl, align 8, !dbg !8405
  %tobool158 = icmp ne %union.tree_node* %75, null, !dbg !8407
  br i1 %tobool158, label %if.then159, label %if.end193, !dbg !8408

if.then159:                                       ; preds = %if.end157
  call void @llvm.dbg.declare(metadata %union.tree_node** %result160, metadata !8409, metadata !DIExpression()), !dbg !8411
  %76 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8412
  %decl_non_common161 = bitcast %union.tree_node* %76 to %struct.tree_decl_non_common*, !dbg !8412
  %result162 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common161, i32 0, i32 3, !dbg !8412
  %77 = load %union.tree_node*, %union.tree_node** %result162, align 8, !dbg !8412
  store %union.tree_node* %77, %union.tree_node** %result160, align 8, !dbg !8411
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !8413, metadata !DIExpression()), !dbg !8414
  %function_result_decl163 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 2, !dbg !8415
  %78 = load %union.tree_node*, %union.tree_node** %function_result_decl163, align 8, !dbg !8415
  %decl_with_rtl164 = bitcast %union.tree_node* %78 to %struct.tree_decl_with_rtl*, !dbg !8415
  %rtl165 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl164, i32 0, i32 1, !dbg !8415
  %79 = load %struct.rtx_def*, %struct.rtx_def** %rtl165, align 8, !dbg !8415
  %tobool166 = icmp ne %struct.rtx_def* %79, null, !dbg !8415
  br i1 %tobool166, label %cond.true167, label %cond.false171, !dbg !8415

cond.true167:                                     ; preds = %if.then159
  %function_result_decl168 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 2, !dbg !8415
  %80 = load %union.tree_node*, %union.tree_node** %function_result_decl168, align 8, !dbg !8415
  %decl_with_rtl169 = bitcast %union.tree_node* %80 to %struct.tree_decl_with_rtl*, !dbg !8415
  %rtl170 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl169, i32 0, i32 1, !dbg !8415
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rtl170, align 8, !dbg !8415
  br label %cond.end176, !dbg !8415

cond.false171:                                    ; preds = %if.then159
  %function_result_decl172 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 2, !dbg !8415
  %82 = load %union.tree_node*, %union.tree_node** %function_result_decl172, align 8, !dbg !8415
  call void @make_decl_rtl(%union.tree_node* %82), !dbg !8415
  %function_result_decl173 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 2, !dbg !8415
  %83 = load %union.tree_node*, %union.tree_node** %function_result_decl173, align 8, !dbg !8415
  %decl_with_rtl174 = bitcast %union.tree_node* %83 to %struct.tree_decl_with_rtl*, !dbg !8415
  %rtl175 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl174, i32 0, i32 1, !dbg !8415
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rtl175, align 8, !dbg !8415
  br label %cond.end176, !dbg !8415

cond.end176:                                      ; preds = %cond.false171, %cond.true167
  %cond177 = phi %struct.rtx_def* [ %81, %cond.true167 ], [ %84, %cond.false171 ], !dbg !8415
  store %struct.rtx_def* %cond177, %struct.rtx_def** %addr, align 8, !dbg !8414
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !8416, metadata !DIExpression()), !dbg !8417
  %85 = load %union.tree_node*, %union.tree_node** %result160, align 8, !dbg !8418
  %decl_common = bitcast %union.tree_node* %85 to %struct.tree_decl_common*, !dbg !8418
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8418
  %86 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !8418
  %bf.load178 = load i64, i64* %86, align 8, !dbg !8418
  %bf.lshr179 = lshr i64 %bf.load178, 28, !dbg !8418
  %bf.clear180 = and i64 %bf.lshr179, 1, !dbg !8418
  %bf.cast181 = trunc i64 %bf.clear180 to i32, !dbg !8418
  %tobool182 = icmp ne i32 %bf.cast181, 0, !dbg !8418
  br i1 %tobool182, label %if.then183, label %if.else184, !dbg !8420

if.then183:                                       ; preds = %cond.end176
  %87 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !8421
  store %struct.rtx_def* %87, %struct.rtx_def** %x, align 8, !dbg !8422
  br label %if.end192, !dbg !8423

if.else184:                                       ; preds = %cond.end176
  %88 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !8424
  %call185 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 16, %struct.rtx_def* %88, i8 zeroext 0), !dbg !8424
  store %struct.rtx_def* %call185, %struct.rtx_def** %addr, align 8, !dbg !8426
  %89 = load %union.tree_node*, %union.tree_node** %result160, align 8, !dbg !8427
  %decl_common186 = bitcast %union.tree_node* %89 to %struct.tree_decl_common*, !dbg !8427
  %mode187 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common186, i32 0, i32 2, !dbg !8427
  %90 = bitcast i40* %mode187 to i64*, !dbg !8427
  %bf.load188 = load i64, i64* %90, align 8, !dbg !8427
  %bf.clear189 = and i64 %bf.load188, 255, !dbg !8427
  %bf.cast190 = trunc i64 %bf.clear189 to i32, !dbg !8427
  %91 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !8428
  %call191 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.cast190, %struct.rtx_def* %91), !dbg !8429
  store %struct.rtx_def* %call191, %struct.rtx_def** %x, align 8, !dbg !8430
  %92 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8431
  %93 = load %union.tree_node*, %union.tree_node** %result160, align 8, !dbg !8432
  call void @set_mem_attributes(%struct.rtx_def* %92, %union.tree_node* %93, i32 1), !dbg !8433
  br label %if.end192

if.end192:                                        ; preds = %if.else184, %if.then183
  %94 = load %union.tree_node*, %union.tree_node** %result160, align 8, !dbg !8434
  %95 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8434
  call void @set_decl_rtl(%union.tree_node* %94, %struct.rtx_def* %95), !dbg !8434
  br label %if.end193, !dbg !8435

if.end193:                                        ; preds = %if.end192, %if.end157
  %pretend_args_size = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 6, !dbg !8436
  %96 = load i64, i64* %pretend_args_size, align 8, !dbg !8436
  %conv194 = trunc i64 %96 to i32, !dbg !8437
  store i32 %conv194, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 2), align 8, !dbg !8438
  %extra_pretend_bytes = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 7, !dbg !8439
  %97 = load i64, i64* %extra_pretend_bytes, align 8, !dbg !8439
  %stack_args_size = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 1, !dbg !8440
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 0, !dbg !8441
  %98 = load i64, i64* %constant, align 8, !dbg !8442
  %add = add nsw i64 %98, %97, !dbg !8442
  store i64 %add, i64* %constant, align 8, !dbg !8442
  %stack_args_size195 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 1, !dbg !8443
  %constant196 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size195, i32 0, i32 0, !dbg !8444
  %99 = load i64, i64* %constant196, align 8, !dbg !8444
  %conv197 = trunc i64 %99 to i32, !dbg !8445
  store i32 %conv197, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 1), align 4, !dbg !8446
  %100 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 1), align 4, !dbg !8447
  %101 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8447
  %call198 = call i32 @ix86_reg_parm_stack_space(%union.tree_node* %101), !dbg !8447
  %cmp199 = icmp sgt i32 %100, %call198, !dbg !8447
  br i1 %cmp199, label %cond.true201, label %cond.false202, !dbg !8447

cond.true201:                                     ; preds = %if.end193
  %102 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 1), align 4, !dbg !8447
  br label %cond.end204, !dbg !8447

cond.false202:                                    ; preds = %if.end193
  %103 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8447
  %call203 = call i32 @ix86_reg_parm_stack_space(%union.tree_node* %103), !dbg !8447
  br label %cond.end204, !dbg !8447

cond.end204:                                      ; preds = %cond.false202, %cond.true201
  %cond205 = phi i32 [ %102, %cond.true201 ], [ %call203, %cond.false202 ], !dbg !8447
  store i32 %cond205, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 1), align 4, !dbg !8448
  %104 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 1), align 4, !dbg !8449
  %add206 = add nsw i32 %104, 4, !dbg !8449
  %sub = sub nsw i32 %add206, 1, !dbg !8449
  %and = and i32 %sub, -4, !dbg !8449
  store i32 %and, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 1), align 4, !dbg !8450
  %stack_args_size207 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 1, !dbg !8451
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size207, i32 0, i32 1, !dbg !8451
  %105 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8451
  %cmp208 = icmp eq %union.tree_node* %105, null, !dbg !8451
  br i1 %cmp208, label %cond.true210, label %cond.false214, !dbg !8451

cond.true210:                                     ; preds = %cond.end204
  %stack_args_size211 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 1, !dbg !8451
  %constant212 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size211, i32 0, i32 0, !dbg !8451
  %106 = load i64, i64* %constant212, align 8, !dbg !8451
  %call213 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %106), !dbg !8451
  br label %cond.end234, !dbg !8451

cond.false214:                                    ; preds = %cond.end204
  %stack_args_size215 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 1, !dbg !8451
  %var216 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size215, i32 0, i32 1, !dbg !8451
  %107 = load %union.tree_node*, %union.tree_node** %var216, align 8, !dbg !8451
  %cmp217 = icmp eq %union.tree_node* %107, null, !dbg !8451
  br i1 %cmp217, label %cond.true219, label %cond.false223, !dbg !8451

cond.true219:                                     ; preds = %cond.false214
  %stack_args_size220 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 1, !dbg !8451
  %constant221 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size220, i32 0, i32 0, !dbg !8451
  %108 = load i64, i64* %constant221, align 8, !dbg !8451
  %call222 = call %union.tree_node* @size_int_kind(i64 %108, i32 1), !dbg !8451
  br label %cond.end231, !dbg !8451

cond.false223:                                    ; preds = %cond.false214
  %109 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !8451
  %stack_args_size224 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 1, !dbg !8451
  %var225 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size224, i32 0, i32 1, !dbg !8451
  %110 = load %union.tree_node*, %union.tree_node** %var225, align 8, !dbg !8451
  %call226 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %109, %union.tree_node* %110), !dbg !8451
  %stack_args_size227 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 1, !dbg !8451
  %constant228 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size227, i32 0, i32 0, !dbg !8451
  %111 = load i64, i64* %constant228, align 8, !dbg !8451
  %call229 = call %union.tree_node* @size_int_kind(i64 %111, i32 1), !dbg !8451
  %call230 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call226, %union.tree_node* %call229), !dbg !8451
  br label %cond.end231, !dbg !8451

cond.end231:                                      ; preds = %cond.false223, %cond.true219
  %cond232 = phi %union.tree_node* [ %call222, %cond.true219 ], [ %call230, %cond.false223 ], !dbg !8451
  %call233 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond232), !dbg !8451
  br label %cond.end234, !dbg !8451

cond.end234:                                      ; preds = %cond.end231, %cond.true210
  %cond235 = phi %struct.rtx_def* [ %call213, %cond.true210 ], [ %call233, %cond.end231 ], !dbg !8451
  store %struct.rtx_def* %cond235, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 3), align 8, !dbg !8452
  %112 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8453
  %113 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8453
  %common236 = bitcast %union.tree_node* %113 to %struct.tree_common*, !dbg !8453
  %type237 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common236, i32 0, i32 2, !dbg !8453
  %114 = load %union.tree_node*, %union.tree_node** %type237, align 8, !dbg !8453
  %115 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 1), align 4, !dbg !8453
  %call238 = call i32 @ix86_return_pops_args(%union.tree_node* %112, %union.tree_node* %114, i32 %115), !dbg !8453
  store i32 %call238, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 0), align 8, !dbg !8454
  %args_so_far239 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %all, i32 0, i32 0, !dbg !8455
  %116 = bitcast %struct.ix86_args* %args_so_far239 to i8*, !dbg !8455
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ix86_args* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 4) to i8*), i8* align 8 %116, i64 64, i1 false), !dbg !8455
  %117 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8456
  %decl_non_common240 = bitcast %union.tree_node* %117 to %struct.tree_decl_non_common*, !dbg !8456
  %result241 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common240, i32 0, i32 3, !dbg !8456
  %118 = load %union.tree_node*, %union.tree_node** %result241, align 8, !dbg !8456
  %base242 = bitcast %union.tree_node* %118 to %struct.tree_base*, !dbg !8456
  %119 = bitcast %struct.tree_base* %base242 to i64*, !dbg !8456
  %bf.load243 = load i64, i64* %119, align 8, !dbg !8456
  %bf.clear244 = and i64 %bf.load243, 65535, !dbg !8456
  %bf.cast245 = trunc i64 %bf.clear244 to i32, !dbg !8456
  %idxprom = zext i32 %bf.cast245 to i64, !dbg !8456
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !8456
  %arrayidx246 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !8456
  %120 = load i8, i8* %arrayidx246, align 1, !dbg !8456
  %conv247 = zext i8 %120 to i32, !dbg !8456
  %tobool248 = icmp ne i32 %conv247, 0, !dbg !8456
  br i1 %tobool248, label %land.lhs.true249, label %cond.false276, !dbg !8456

land.lhs.true249:                                 ; preds = %cond.end234
  %121 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8456
  %decl_non_common250 = bitcast %union.tree_node* %121 to %struct.tree_decl_non_common*, !dbg !8456
  %result251 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common250, i32 0, i32 3, !dbg !8456
  %122 = load %union.tree_node*, %union.tree_node** %result251, align 8, !dbg !8456
  %decl_with_rtl252 = bitcast %union.tree_node* %122 to %struct.tree_decl_with_rtl*, !dbg !8456
  %rtl253 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl252, i32 0, i32 1, !dbg !8456
  %123 = load %struct.rtx_def*, %struct.rtx_def** %rtl253, align 8, !dbg !8456
  %cmp254 = icmp ne %struct.rtx_def* %123, null, !dbg !8456
  br i1 %cmp254, label %cond.true256, label %cond.false276, !dbg !8456

cond.true256:                                     ; preds = %land.lhs.true249
  %124 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8457
  %decl_non_common257 = bitcast %union.tree_node* %124 to %struct.tree_decl_non_common*, !dbg !8457
  %result258 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common257, i32 0, i32 3, !dbg !8457
  %125 = load %union.tree_node*, %union.tree_node** %result258, align 8, !dbg !8457
  %decl_with_rtl259 = bitcast %union.tree_node* %125 to %struct.tree_decl_with_rtl*, !dbg !8457
  %rtl260 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl259, i32 0, i32 1, !dbg !8457
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtl260, align 8, !dbg !8457
  %tobool261 = icmp ne %struct.rtx_def* %126, null, !dbg !8457
  br i1 %tobool261, label %cond.true262, label %cond.false267, !dbg !8457

cond.true262:                                     ; preds = %cond.true256
  %127 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8457
  %decl_non_common263 = bitcast %union.tree_node* %127 to %struct.tree_decl_non_common*, !dbg !8457
  %result264 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common263, i32 0, i32 3, !dbg !8457
  %128 = load %union.tree_node*, %union.tree_node** %result264, align 8, !dbg !8457
  %decl_with_rtl265 = bitcast %union.tree_node* %128 to %struct.tree_decl_with_rtl*, !dbg !8457
  %rtl266 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl265, i32 0, i32 1, !dbg !8457
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rtl266, align 8, !dbg !8457
  br label %cond.end274, !dbg !8457

cond.false267:                                    ; preds = %cond.true256
  %130 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8457
  %decl_non_common268 = bitcast %union.tree_node* %130 to %struct.tree_decl_non_common*, !dbg !8457
  %result269 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common268, i32 0, i32 3, !dbg !8457
  %131 = load %union.tree_node*, %union.tree_node** %result269, align 8, !dbg !8457
  call void @make_decl_rtl(%union.tree_node* %131), !dbg !8457
  %132 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8457
  %decl_non_common270 = bitcast %union.tree_node* %132 to %struct.tree_decl_non_common*, !dbg !8457
  %result271 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common270, i32 0, i32 3, !dbg !8457
  %133 = load %union.tree_node*, %union.tree_node** %result271, align 8, !dbg !8457
  %decl_with_rtl272 = bitcast %union.tree_node* %133 to %struct.tree_decl_with_rtl*, !dbg !8457
  %rtl273 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl272, i32 0, i32 1, !dbg !8457
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rtl273, align 8, !dbg !8457
  br label %cond.end274, !dbg !8457

cond.end274:                                      ; preds = %cond.false267, %cond.true262
  %cond275 = phi %struct.rtx_def* [ %129, %cond.true262 ], [ %134, %cond.false267 ], !dbg !8457
  br label %cond.end277, !dbg !8456

cond.false276:                                    ; preds = %land.lhs.true249, %cond.end234
  br label %cond.end277, !dbg !8456

cond.end277:                                      ; preds = %cond.false276, %cond.end274
  %cond278 = phi %struct.rtx_def* [ %cond275, %cond.end274 ], [ null, %cond.false276 ], !dbg !8456
  store %struct.rtx_def* %cond278, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 7), align 8, !dbg !8458
  %135 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8459
  %decl_non_common279 = bitcast %union.tree_node* %135 to %struct.tree_decl_non_common*, !dbg !8459
  %result280 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common279, i32 0, i32 3, !dbg !8459
  %136 = load %union.tree_node*, %union.tree_node** %result280, align 8, !dbg !8459
  %base281 = bitcast %union.tree_node* %136 to %struct.tree_base*, !dbg !8459
  %137 = bitcast %struct.tree_base* %base281 to i64*, !dbg !8459
  %bf.load282 = load i64, i64* %137, align 8, !dbg !8459
  %bf.clear283 = and i64 %bf.load282, 65535, !dbg !8459
  %bf.cast284 = trunc i64 %bf.clear283 to i32, !dbg !8459
  %idxprom285 = zext i32 %bf.cast284 to i64, !dbg !8459
  %arrayidx286 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom285, !dbg !8459
  %arrayidx287 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx286, i64 0, i64 11, !dbg !8459
  %138 = load i8, i8* %arrayidx287, align 1, !dbg !8459
  %conv288 = zext i8 %138 to i32, !dbg !8459
  %tobool289 = icmp ne i32 %conv288, 0, !dbg !8459
  br i1 %tobool289, label %land.lhs.true290, label %if.end333, !dbg !8459

land.lhs.true290:                                 ; preds = %cond.end277
  %139 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8459
  %decl_non_common291 = bitcast %union.tree_node* %139 to %struct.tree_decl_non_common*, !dbg !8459
  %result292 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common291, i32 0, i32 3, !dbg !8459
  %140 = load %union.tree_node*, %union.tree_node** %result292, align 8, !dbg !8459
  %decl_with_rtl293 = bitcast %union.tree_node* %140 to %struct.tree_decl_with_rtl*, !dbg !8459
  %rtl294 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl293, i32 0, i32 1, !dbg !8459
  %141 = load %struct.rtx_def*, %struct.rtx_def** %rtl294, align 8, !dbg !8459
  %cmp295 = icmp ne %struct.rtx_def* %141, null, !dbg !8459
  br i1 %cmp295, label %if.then297, label %if.end333, !dbg !8461

if.then297:                                       ; preds = %land.lhs.true290
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl_result, metadata !8462, metadata !DIExpression()), !dbg !8464
  %142 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8465
  %decl_non_common298 = bitcast %union.tree_node* %142 to %struct.tree_decl_non_common*, !dbg !8465
  %result299 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common298, i32 0, i32 3, !dbg !8465
  %143 = load %union.tree_node*, %union.tree_node** %result299, align 8, !dbg !8465
  store %union.tree_node* %143, %union.tree_node** %decl_result, align 8, !dbg !8464
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %decl_rtl, metadata !8466, metadata !DIExpression()), !dbg !8467
  %144 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8468
  %decl_with_rtl300 = bitcast %union.tree_node* %144 to %struct.tree_decl_with_rtl*, !dbg !8468
  %rtl301 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl300, i32 0, i32 1, !dbg !8468
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rtl301, align 8, !dbg !8468
  %tobool302 = icmp ne %struct.rtx_def* %145, null, !dbg !8468
  br i1 %tobool302, label %cond.true303, label %cond.false306, !dbg !8468

cond.true303:                                     ; preds = %if.then297
  %146 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8468
  %decl_with_rtl304 = bitcast %union.tree_node* %146 to %struct.tree_decl_with_rtl*, !dbg !8468
  %rtl305 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl304, i32 0, i32 1, !dbg !8468
  %147 = load %struct.rtx_def*, %struct.rtx_def** %rtl305, align 8, !dbg !8468
  br label %cond.end309, !dbg !8468

cond.false306:                                    ; preds = %if.then297
  %148 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8468
  call void @make_decl_rtl(%union.tree_node* %148), !dbg !8468
  %149 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8468
  %decl_with_rtl307 = bitcast %union.tree_node* %149 to %struct.tree_decl_with_rtl*, !dbg !8468
  %rtl308 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl307, i32 0, i32 1, !dbg !8468
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rtl308, align 8, !dbg !8468
  br label %cond.end309, !dbg !8468

cond.end309:                                      ; preds = %cond.false306, %cond.true303
  %cond310 = phi %struct.rtx_def* [ %147, %cond.true303 ], [ %150, %cond.false306 ], !dbg !8468
  store %struct.rtx_def* %cond310, %struct.rtx_def** %decl_rtl, align 8, !dbg !8467
  %151 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8469
  %152 = bitcast %struct.rtx_def* %151 to i32*, !dbg !8469
  %bf.load311 = load i32, i32* %152, align 8, !dbg !8469
  %bf.clear312 = and i32 %bf.load311, 65535, !dbg !8469
  %cmp313 = icmp eq i32 %bf.clear312, 37, !dbg !8469
  br i1 %cmp313, label %cond.true315, label %cond.false319, !dbg !8471

cond.true315:                                     ; preds = %cond.end309
  %153 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8472
  %call316 = call i32 @rhs_regno(%struct.rtx_def* %153), !dbg !8472
  %cmp317 = icmp uge i32 %call316, 53, !dbg !8473
  br i1 %cmp317, label %if.then326, label %if.end332, !dbg !8469

cond.false319:                                    ; preds = %cond.end309
  %154 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8474
  %decl_common320 = bitcast %union.tree_node* %154 to %struct.tree_decl_common*, !dbg !8474
  %decl_flag_0 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common320, i32 0, i32 2, !dbg !8474
  %155 = bitcast i40* %decl_flag_0 to i64*, !dbg !8474
  %bf.load321 = load i64, i64* %155, align 8, !dbg !8474
  %bf.lshr322 = lshr i64 %bf.load321, 24, !dbg !8474
  %bf.clear323 = and i64 %bf.lshr322, 1, !dbg !8474
  %bf.cast324 = trunc i64 %bf.clear323 to i32, !dbg !8474
  %tobool325 = icmp ne i32 %bf.cast324, 0, !dbg !8474
  br i1 %tobool325, label %if.then326, label %if.end332, !dbg !8471

if.then326:                                       ; preds = %cond.false319, %cond.true315
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %real_decl_rtl, metadata !8475, metadata !DIExpression()), !dbg !8477
  %156 = load %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 15), align 8, !dbg !8478
  %157 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8479
  %common327 = bitcast %union.tree_node* %157 to %struct.tree_common*, !dbg !8479
  %type328 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common327, i32 0, i32 2, !dbg !8479
  %158 = load %union.tree_node*, %union.tree_node** %type328, align 8, !dbg !8479
  %159 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8480
  %call329 = call %struct.rtx_def* %156(%union.tree_node* %158, %union.tree_node* %159, i8 zeroext 1), !dbg !8481
  store %struct.rtx_def* %call329, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8482
  %160 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8483
  %161 = bitcast %struct.rtx_def* %160 to i32*, !dbg !8483
  %bf.load330 = load i32, i32* %161, align 8, !dbg !8484
  %bf.clear331 = and i32 %bf.load330, 2147483647, !dbg !8484
  %bf.set = or i32 %bf.clear331, -2147483648, !dbg !8484
  store i32 %bf.set, i32* %161, align 8, !dbg !8484
  %162 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8485
  store %struct.rtx_def* %162, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 7), align 8, !dbg !8486
  br label %if.end332, !dbg !8487

if.end332:                                        ; preds = %if.then326, %cond.false319, %cond.true315
  br label %if.end333, !dbg !8488

if.end333:                                        ; preds = %if.end332, %land.lhs.true290, %cond.end277
  ret void, !dbg !8489
}

declare dso_local void @set_decl_incoming_rtl(%union.tree_node*, %struct.rtx_def*, i8 zeroext) #2

declare dso_local void @mark_reg_pointer(%struct.rtx_def*, i32) #2

declare dso_local i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local void @expand_decl(%union.tree_node*) #2

declare dso_local %union.tree_node* @build4_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_expr(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %mode, i32 %modifier) #0 !dbg !8490 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %modifier.addr = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !8493, metadata !DIExpression()), !dbg !8494
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !8495, metadata !DIExpression()), !dbg !8496
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !8497, metadata !DIExpression()), !dbg !8498
  store i32 %modifier, i32* %modifier.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %modifier.addr, metadata !8499, metadata !DIExpression()), !dbg !8500
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !8501
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8502
  %2 = load i32, i32* %mode.addr, align 4, !dbg !8503
  %3 = load i32, i32* %modifier.addr, align 4, !dbg !8504
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* %1, i32 %2, i32 %3, %struct.rtx_def** null), !dbg !8505
  ret %struct.rtx_def* %call, !dbg !8506
}

declare dso_local %struct.rtx_def* @convert_memory_address_addr_space(i32, %struct.rtx_def*, i8 zeroext) #2

declare dso_local void @update_nonlocal_goto_save_area() #2

declare dso_local %struct.rtx_def* @emit_note(i32) #2

declare dso_local void @force_next_line_note() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_dummy_function_end() #0 !dbg !8507 {
entry:
  %0 = load i8, i8* @in_dummy_function, align 1, !dbg !8508
  %tobool = icmp ne i8 %0, 0, !dbg !8508
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8508

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4542, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8508
  br label %cond.end, !dbg !8508

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8508

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8508
  br label %while.cond, !dbg !8509

while.cond:                                       ; preds = %while.body, %cond.end
  %call = call i32 @in_sequence_p(), !dbg !8510
  %tobool1 = icmp ne i32 %call, 0, !dbg !8509
  br i1 %tobool1, label %while.body, label %while.end, !dbg !8509

while.body:                                       ; preds = %while.cond
  call void @end_sequence(), !dbg !8511
  br label %while.cond, !dbg !8509, !llvm.loop !8512

while.end:                                        ; preds = %while.cond
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8514
  call void @free_after_parsing(%struct.function* %1), !dbg !8515
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8516
  call void @free_after_compilation(%struct.function* %2), !dbg !8517
  call void @pop_cfun(), !dbg !8518
  store i8 0, i8* @in_dummy_function, align 1, !dbg !8519
  ret void, !dbg !8520
}

declare dso_local i32 @in_sequence_p() #2

declare dso_local void @end_sequence() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @diddle_return_value(void (%struct.rtx_def*, i8*)* %doit, i8* %arg) #0 !dbg !8521 {
entry:
  %doit.addr = alloca void (%struct.rtx_def*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %outgoing = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %x = alloca %struct.rtx_def*, align 8
  store void (%struct.rtx_def*, i8*)* %doit, void (%struct.rtx_def*, i8*)** %doit.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.rtx_def*, i8*)** %doit.addr, metadata !8527, metadata !DIExpression()), !dbg !8528
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !8529, metadata !DIExpression()), !dbg !8530
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outgoing, metadata !8531, metadata !DIExpression()), !dbg !8532
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 7), align 8, !dbg !8533
  store %struct.rtx_def* %0, %struct.rtx_def** %outgoing, align 8, !dbg !8532
  %1 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8, !dbg !8534
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !8534
  br i1 %tobool, label %if.end, label %if.then, !dbg !8536

if.then:                                          ; preds = %entry
  br label %if.end22, !dbg !8537

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8, !dbg !8538
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !8538
  %bf.load = load i32, i32* %3, align 8, !dbg !8538
  %bf.clear = and i32 %bf.load, 65535, !dbg !8538
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !8538
  br i1 %cmp, label %if.then1, label %if.else, !dbg !8540

if.then1:                                         ; preds = %if.end
  %4 = load void (%struct.rtx_def*, i8*)*, void (%struct.rtx_def*, i8*)** %doit.addr, align 8, !dbg !8541
  %5 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8, !dbg !8542
  %6 = load i8*, i8** %arg.addr, align 8, !dbg !8543
  call void %4(%struct.rtx_def* %5, i8* %6), !dbg !8544
  br label %if.end22, !dbg !8544

if.else:                                          ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8, !dbg !8545
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8545
  %bf.load2 = load i32, i32* %8, align 8, !dbg !8545
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !8545
  %cmp4 = icmp eq i32 %bf.clear3, 15, !dbg !8547
  br i1 %cmp4, label %if.then5, label %if.end21, !dbg !8548

if.then5:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8549, metadata !DIExpression()), !dbg !8551
  store i32 0, i32* %i, align 4, !dbg !8552
  br label %for.cond, !dbg !8554

for.cond:                                         ; preds = %for.inc, %if.then5
  %9 = load i32, i32* %i, align 4, !dbg !8555
  %10 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8, !dbg !8557
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !8557
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8557
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8557
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**, !dbg !8557
  %11 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !8557
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %11, i32 0, i32 0, !dbg !8557
  %12 = load i32, i32* %num_elem, align 8, !dbg !8557
  %cmp6 = icmp slt i32 %9, %12, !dbg !8558
  br i1 %cmp6, label %for.body, label %for.end, !dbg !8559

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !8560, metadata !DIExpression()), !dbg !8562
  %13 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8, !dbg !8563
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !8563
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !8563
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 0, !dbg !8563
  %rt_rtvec10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtvec_def**, !dbg !8563
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec10, align 8, !dbg !8563
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %14, i32 0, i32 1, !dbg !8563
  %15 = load i32, i32* %i, align 4, !dbg !8563
  %idxprom = sext i32 %15 to i64, !dbg !8563
  %arrayidx11 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !8563
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx11, align 8, !dbg !8563
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !8563
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !8563
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 0, !dbg !8563
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !8563
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8563
  store %struct.rtx_def* %17, %struct.rtx_def** %x, align 8, !dbg !8562
  %18 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8564
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !8564
  %bf.load15 = load i32, i32* %19, align 8, !dbg !8564
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !8564
  %cmp17 = icmp eq i32 %bf.clear16, 37, !dbg !8564
  br i1 %cmp17, label %land.lhs.true, label %if.end20, !dbg !8566

land.lhs.true:                                    ; preds = %for.body
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8567
  %call = call i32 @rhs_regno(%struct.rtx_def* %20), !dbg !8567
  %cmp18 = icmp ult i32 %call, 53, !dbg !8568
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !8569

if.then19:                                        ; preds = %land.lhs.true
  %21 = load void (%struct.rtx_def*, i8*)*, void (%struct.rtx_def*, i8*)** %doit.addr, align 8, !dbg !8570
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8571
  %23 = load i8*, i8** %arg.addr, align 8, !dbg !8572
  call void %21(%struct.rtx_def* %22, i8* %23), !dbg !8573
  br label %if.end20, !dbg !8573

if.end20:                                         ; preds = %if.then19, %land.lhs.true, %for.body
  br label %for.inc, !dbg !8574

for.inc:                                          ; preds = %if.end20
  %24 = load i32, i32* %i, align 4, !dbg !8575
  %inc = add nsw i32 %24, 1, !dbg !8575
  store i32 %inc, i32* %i, align 4, !dbg !8575
  br label %for.cond, !dbg !8576, !llvm.loop !8577

for.end:                                          ; preds = %for.cond
  br label %if.end21, !dbg !8579

if.end21:                                         ; preds = %for.end, %if.else
  br label %if.end22

if.end22:                                         ; preds = %if.then, %if.end21, %if.then1
  ret void, !dbg !8580
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @clobber_return_register() #0 !dbg !8581 {
entry:
  %decl_result = alloca %union.tree_node*, align 8
  %decl_rtl = alloca %struct.rtx_def*, align 8
  call void @diddle_return_value(void (%struct.rtx_def*, i8*)* @do_clobber_return_reg, i8* null), !dbg !8582
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8583
  %decl_non_common = bitcast %union.tree_node* %0 to %struct.tree_decl_non_common*, !dbg !8583
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !8583
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8583
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !8583
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !8583
  %bf.load = load i64, i64* %2, align 8, !dbg !8583
  %bf.clear = and i64 %bf.load, 65535, !dbg !8583
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8583
  %idxprom = zext i32 %bf.cast to i64, !dbg !8583
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !8583
  %arrayidx1 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !8583
  %3 = load i8, i8* %arrayidx1, align 1, !dbg !8583
  %conv = zext i8 %3 to i32, !dbg !8583
  %tobool = icmp ne i32 %conv, 0, !dbg !8583
  br i1 %tobool, label %land.lhs.true, label %if.end22, !dbg !8583

land.lhs.true:                                    ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8583
  %decl_non_common2 = bitcast %union.tree_node* %4 to %struct.tree_decl_non_common*, !dbg !8583
  %result3 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common2, i32 0, i32 3, !dbg !8583
  %5 = load %union.tree_node*, %union.tree_node** %result3, align 8, !dbg !8583
  %decl_with_rtl = bitcast %union.tree_node* %5 to %struct.tree_decl_with_rtl*, !dbg !8583
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !8583
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8583
  %cmp = icmp ne %struct.rtx_def* %6, null, !dbg !8583
  br i1 %cmp, label %if.then, label %if.end22, !dbg !8585

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl_result, metadata !8586, metadata !DIExpression()), !dbg !8588
  %7 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8589
  %decl_non_common5 = bitcast %union.tree_node* %7 to %struct.tree_decl_non_common*, !dbg !8589
  %result6 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common5, i32 0, i32 3, !dbg !8589
  %8 = load %union.tree_node*, %union.tree_node** %result6, align 8, !dbg !8589
  store %union.tree_node* %8, %union.tree_node** %decl_result, align 8, !dbg !8588
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %decl_rtl, metadata !8590, metadata !DIExpression()), !dbg !8591
  %9 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8592
  %decl_with_rtl7 = bitcast %union.tree_node* %9 to %struct.tree_decl_with_rtl*, !dbg !8592
  %rtl8 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl7, i32 0, i32 1, !dbg !8592
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rtl8, align 8, !dbg !8592
  %tobool9 = icmp ne %struct.rtx_def* %10, null, !dbg !8592
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !8592

cond.true:                                        ; preds = %if.then
  %11 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8592
  %decl_with_rtl10 = bitcast %union.tree_node* %11 to %struct.tree_decl_with_rtl*, !dbg !8592
  %rtl11 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl10, i32 0, i32 1, !dbg !8592
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtl11, align 8, !dbg !8592
  br label %cond.end, !dbg !8592

cond.false:                                       ; preds = %if.then
  %13 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8592
  call void @make_decl_rtl(%union.tree_node* %13), !dbg !8592
  %14 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8592
  %decl_with_rtl12 = bitcast %union.tree_node* %14 to %struct.tree_decl_with_rtl*, !dbg !8592
  %rtl13 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl12, i32 0, i32 1, !dbg !8592
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl13, align 8, !dbg !8592
  br label %cond.end, !dbg !8592

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %12, %cond.true ], [ %15, %cond.false ], !dbg !8592
  store %struct.rtx_def* %cond, %struct.rtx_def** %decl_rtl, align 8, !dbg !8591
  %16 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8593
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !8593
  %bf.load14 = load i32, i32* %17, align 8, !dbg !8593
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !8593
  %cmp16 = icmp eq i32 %bf.clear15, 37, !dbg !8593
  br i1 %cmp16, label %land.lhs.true18, label %if.end, !dbg !8595

land.lhs.true18:                                  ; preds = %cond.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8596
  %call = call i32 @rhs_regno(%struct.rtx_def* %18), !dbg !8596
  %cmp19 = icmp uge i32 %call, 53, !dbg !8597
  br i1 %cmp19, label %if.then21, label %if.end, !dbg !8598

if.then21:                                        ; preds = %land.lhs.true18
  %19 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8599
  call void @do_clobber_return_reg(%struct.rtx_def* %19, i8* null), !dbg !8601
  br label %if.end, !dbg !8602

if.end:                                           ; preds = %if.then21, %land.lhs.true18, %cond.end
  br label %if.end22, !dbg !8603

if.end22:                                         ; preds = %if.end, %land.lhs.true, %entry
  ret void, !dbg !8604
}

; Function Attrs: noinline nounwind uwtable
define internal void @do_clobber_return_reg(%struct.rtx_def* %reg, i8* %arg) #0 !dbg !8605 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %arg.addr = alloca i8*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !8606, metadata !DIExpression()), !dbg !8607
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !8608, metadata !DIExpression()), !dbg !8609
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !8610
  %call = call %struct.rtx_def* @emit_clobber(%struct.rtx_def* %0), !dbg !8611
  ret void, !dbg !8612
}

declare dso_local void @make_decl_rtl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @do_warn_unused_parameter(%union.tree_node* %fn) #0 !dbg !8613 {
entry:
  %fn.addr = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  store %union.tree_node* %fn, %union.tree_node** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fn.addr, metadata !8614, metadata !DIExpression()), !dbg !8615
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !8616, metadata !DIExpression()), !dbg !8617
  %0 = load %union.tree_node*, %union.tree_node** %fn.addr, align 8, !dbg !8618
  %decl_non_common = bitcast %union.tree_node* %0 to %struct.tree_decl_non_common*, !dbg !8618
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !8618
  %1 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !8618
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !8620
  br label %for.cond, !dbg !8621

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8622
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !8624
  br i1 %tobool, label %for.body, label %for.end, !dbg !8624

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8625
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !8625
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !8625
  %bf.load = load i64, i64* %4, align 8, !dbg !8625
  %bf.lshr = lshr i64 %bf.load, 24, !dbg !8625
  %bf.clear = and i64 %bf.lshr, 1, !dbg !8625
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8625
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !8625
  br i1 %tobool1, label %if.end, label %land.lhs.true, !dbg !8627

land.lhs.true:                                    ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8628
  %base2 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !8628
  %6 = bitcast %struct.tree_base* %base2 to i64*, !dbg !8628
  %bf.load3 = load i64, i64* %6, align 8, !dbg !8628
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !8628
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !8628
  %cmp = icmp eq i32 %bf.cast5, 34, !dbg !8629
  br i1 %cmp, label %land.lhs.true6, label %if.end, !dbg !8630

land.lhs.true6:                                   ; preds = %land.lhs.true
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8631
  %decl_minimal = bitcast %union.tree_node* %7 to %struct.tree_decl_minimal*, !dbg !8631
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !8631
  %8 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8631
  %tobool7 = icmp ne %union.tree_node* %8, null, !dbg !8631
  br i1 %tobool7, label %land.lhs.true8, label %if.end, !dbg !8632

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %9 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8633
  %decl_common = bitcast %union.tree_node* %9 to %struct.tree_decl_common*, !dbg !8633
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8633
  %10 = bitcast i40* %artificial_flag to i64*, !dbg !8633
  %bf.load9 = load i64, i64* %10, align 8, !dbg !8633
  %bf.lshr10 = lshr i64 %bf.load9, 12, !dbg !8633
  %bf.clear11 = and i64 %bf.lshr10, 1, !dbg !8633
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !8633
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !8633
  br i1 %tobool13, label %if.end, label %land.lhs.true14, !dbg !8634

land.lhs.true14:                                  ; preds = %land.lhs.true8
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8635
  %base15 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !8635
  %12 = bitcast %struct.tree_base* %base15 to i64*, !dbg !8635
  %bf.load16 = load i64, i64* %12, align 8, !dbg !8635
  %bf.lshr17 = lshr i64 %bf.load16, 23, !dbg !8635
  %bf.clear18 = and i64 %bf.lshr17, 1, !dbg !8635
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !8635
  %tobool20 = icmp ne i32 %bf.cast19, 0, !dbg !8635
  br i1 %tobool20, label %if.end, label %if.then, !dbg !8636

if.then:                                          ; preds = %land.lhs.true14
  %13 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8637
  %call = call zeroext i8 (i32, i8*, ...) @warning(i32 225, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), %union.tree_node* %13), !dbg !8638
  br label %if.end, !dbg !8638

if.end:                                           ; preds = %if.then, %land.lhs.true14, %land.lhs.true8, %land.lhs.true6, %land.lhs.true, %for.body
  br label %for.inc, !dbg !8635

for.inc:                                          ; preds = %if.end
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8639
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !8639
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !8639
  %15 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !8639
  store %union.tree_node* %15, %union.tree_node** %decl, align 8, !dbg !8640
  br label %for.cond, !dbg !8641, !llvm.loop !8642

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8644
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @expand_function_end() #0 !dbg !8645 {
entry:
  %clobber_after = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %max_frame_size = alloca %struct.rtx_def*, align 8
  %decl_result = alloca %union.tree_node*, align 8
  %decl_rtl = alloca %struct.rtx_def*, align 8
  %real_decl_rtl = alloca %struct.rtx_def*, align 8
  %unsignedp = alloca i32, align 4
  %old_generating_concat_p = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %value_address = alloca %struct.rtx_def*, align 8
  %type224 = alloca %union.tree_node*, align 8
  %outgoing = alloca %struct.rtx_def*, align 8
  %seq257 = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %clobber_after, metadata !8646, metadata !DIExpression()), !dbg !8647
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 15), align 8, !dbg !8648
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !8648
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !8650

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 40), align 4, !dbg !8651
  %tobool1 = icmp ne i8 %1, 0, !dbg !8652
  br i1 %tobool1, label %if.end, label %if.then, !dbg !8653

if.then:                                          ; preds = %land.lhs.true
  %call = call %struct.rtx_def* @get_arg_pointer_save_area(), !dbg !8654
  br label %if.end, !dbg !8654

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %2 = load i32, i32* @flag_stack_check, align 4, !dbg !8655
  %cmp = icmp eq i32 %2, 1, !dbg !8657
  br i1 %cmp, label %if.then2, label %if.end11, !dbg !8658

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8659, metadata !DIExpression()), !dbg !8661
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !8662, metadata !DIExpression()), !dbg !8663
  %call3 = call %struct.rtx_def* @get_insns(), !dbg !8664
  store %struct.rtx_def* %call3, %struct.rtx_def** %insn, align 8, !dbg !8666
  br label %for.cond, !dbg !8667

for.cond:                                         ; preds = %for.inc, %if.then2
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8668
  %tobool4 = icmp ne %struct.rtx_def* %3, null, !dbg !8670
  br i1 %tobool4, label %for.body, label %for.end, !dbg !8670

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8671
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !8671
  %bf.load = load i32, i32* %5, align 8, !dbg !8671
  %bf.clear = and i32 %bf.load, 65535, !dbg !8671
  %cmp5 = icmp eq i32 %bf.clear, 10, !dbg !8671
  br i1 %cmp5, label %if.then6, label %if.end10, !dbg !8673

if.then6:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %max_frame_size, metadata !8674, metadata !DIExpression()), !dbg !8676
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 4092), !dbg !8677
  store %struct.rtx_def* %call7, %struct.rtx_def** %max_frame_size, align 8, !dbg !8676
  call void @start_sequence(), !dbg !8678
  %6 = load %struct.rtx_def*, %struct.rtx_def** %max_frame_size, align 8, !dbg !8679
  call void @anti_adjust_stack_and_probe(%struct.rtx_def* %6, i8 zeroext 1), !dbg !8681
  %call8 = call %struct.rtx_def* @get_insns(), !dbg !8682
  store %struct.rtx_def* %call8, %struct.rtx_def** %seq, align 8, !dbg !8683
  call void @end_sequence(), !dbg !8684
  %7 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !8685
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 14), align 8, !dbg !8686
  %call9 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %7, %struct.rtx_def* %8), !dbg !8687
  br label %for.end, !dbg !8688

if.end10:                                         ; preds = %for.body
  br label %for.inc, !dbg !8671

for.inc:                                          ; preds = %if.end10
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8689
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !8689
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8689
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8689
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8689
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8689
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !8690
  br label %for.cond, !dbg !8691, !llvm.loop !8692

for.end:                                          ; preds = %if.then6, %for.cond
  br label %if.end11, !dbg !8694

if.end11:                                         ; preds = %for.end, %if.end
  br label %while.cond, !dbg !8695

while.cond:                                       ; preds = %while.body, %if.end11
  %call12 = call i32 @in_sequence_p(), !dbg !8696
  %tobool13 = icmp ne i32 %call12, 0, !dbg !8695
  br i1 %tobool13, label %while.body, label %while.end, !dbg !8695

while.body:                                       ; preds = %while.cond
  call void @end_sequence(), !dbg !8697
  br label %while.cond, !dbg !8695, !llvm.loop !8698

while.end:                                        ; preds = %while.cond
  call void @clear_pending_stack_adjust(), !dbg !8700
  call void @do_pending_stack_adjust(), !dbg !8701
  call void @force_next_line_note(), !dbg !8702
  %11 = load i32, i32* @input_location, align 4, !dbg !8703
  call void @set_curr_insn_source_location(i32 %11), !dbg !8704
  %call14 = call %struct.rtx_def* @get_last_insn(), !dbg !8705
  store %struct.rtx_def* %call14, %struct.rtx_def** %clobber_after, align 8, !dbg !8706
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 11), align 8, !dbg !8707
  %call15 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %12), !dbg !8708
  %13 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !8709
  %tobool16 = icmp ne i32 %13, 0, !dbg !8709
  br i1 %tobool16, label %if.then17, label %if.end20, !dbg !8713

if.then17:                                        ; preds = %while.end
  %call18 = call %struct.rtx_def* @gen_blockage(), !dbg !8714
  %call19 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call18), !dbg !8715
  br label %if.end20, !dbg !8715

if.end20:                                         ; preds = %if.then17, %while.end
  call void @expand_eh_return(), !dbg !8716
  %14 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8717
  %decl_non_common = bitcast %union.tree_node* %14 to %struct.tree_decl_non_common*, !dbg !8717
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !8717
  %15 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8717
  %base = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !8717
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !8717
  %bf.load21 = load i64, i64* %16, align 8, !dbg !8717
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !8717
  %bf.cast = trunc i64 %bf.clear22 to i32, !dbg !8717
  %idxprom = zext i32 %bf.cast to i64, !dbg !8717
  %arrayidx23 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !8717
  %arrayidx24 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx23, i64 0, i64 11, !dbg !8717
  %17 = load i8, i8* %arrayidx24, align 1, !dbg !8717
  %conv = zext i8 %17 to i32, !dbg !8717
  %tobool25 = icmp ne i32 %conv, 0, !dbg !8717
  br i1 %tobool25, label %land.lhs.true26, label %if.end195, !dbg !8717

land.lhs.true26:                                  ; preds = %if.end20
  %18 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8717
  %decl_non_common27 = bitcast %union.tree_node* %18 to %struct.tree_decl_non_common*, !dbg !8717
  %result28 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common27, i32 0, i32 3, !dbg !8717
  %19 = load %union.tree_node*, %union.tree_node** %result28, align 8, !dbg !8717
  %decl_with_rtl = bitcast %union.tree_node* %19 to %struct.tree_decl_with_rtl*, !dbg !8717
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !8717
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !8717
  %cmp29 = icmp ne %struct.rtx_def* %20, null, !dbg !8717
  br i1 %cmp29, label %if.then31, label %if.end195, !dbg !8719

if.then31:                                        ; preds = %land.lhs.true26
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl_result, metadata !8720, metadata !DIExpression()), !dbg !8722
  %21 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8723
  %decl_non_common32 = bitcast %union.tree_node* %21 to %struct.tree_decl_non_common*, !dbg !8723
  %result33 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common32, i32 0, i32 3, !dbg !8723
  %22 = load %union.tree_node*, %union.tree_node** %result33, align 8, !dbg !8723
  store %union.tree_node* %22, %union.tree_node** %decl_result, align 8, !dbg !8722
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %decl_rtl, metadata !8724, metadata !DIExpression()), !dbg !8725
  %23 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8726
  %decl_with_rtl34 = bitcast %union.tree_node* %23 to %struct.tree_decl_with_rtl*, !dbg !8726
  %rtl35 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl34, i32 0, i32 1, !dbg !8726
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl35, align 8, !dbg !8726
  %tobool36 = icmp ne %struct.rtx_def* %24, null, !dbg !8726
  br i1 %tobool36, label %cond.true, label %cond.false, !dbg !8726

cond.true:                                        ; preds = %if.then31
  %25 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8726
  %decl_with_rtl37 = bitcast %union.tree_node* %25 to %struct.tree_decl_with_rtl*, !dbg !8726
  %rtl38 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl37, i32 0, i32 1, !dbg !8726
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rtl38, align 8, !dbg !8726
  br label %cond.end, !dbg !8726

cond.false:                                       ; preds = %if.then31
  %27 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8726
  call void @make_decl_rtl(%union.tree_node* %27), !dbg !8726
  %28 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8726
  %decl_with_rtl39 = bitcast %union.tree_node* %28 to %struct.tree_decl_with_rtl*, !dbg !8726
  %rtl40 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl39, i32 0, i32 1, !dbg !8726
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rtl40, align 8, !dbg !8726
  br label %cond.end, !dbg !8726

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %26, %cond.true ], [ %29, %cond.false ], !dbg !8726
  store %struct.rtx_def* %cond, %struct.rtx_def** %decl_rtl, align 8, !dbg !8725
  %30 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8727
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !8727
  %bf.load41 = load i32, i32* %31, align 8, !dbg !8727
  %bf.clear42 = and i32 %bf.load41, 65535, !dbg !8727
  %cmp43 = icmp eq i32 %bf.clear42, 37, !dbg !8727
  br i1 %cmp43, label %cond.true45, label %cond.false49, !dbg !8729

cond.true45:                                      ; preds = %cond.end
  %32 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8730
  %call46 = call i32 @rhs_regno(%struct.rtx_def* %32), !dbg !8730
  %cmp47 = icmp uge i32 %call46, 53, !dbg !8731
  br i1 %cmp47, label %if.then54, label %if.end194, !dbg !8727

cond.false49:                                     ; preds = %cond.end
  %33 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8732
  %decl_common = bitcast %union.tree_node* %33 to %struct.tree_decl_common*, !dbg !8732
  %decl_flag_0 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !8732
  %34 = bitcast i40* %decl_flag_0 to i64*, !dbg !8732
  %bf.load50 = load i64, i64* %34, align 8, !dbg !8732
  %bf.lshr = lshr i64 %bf.load50, 24, !dbg !8732
  %bf.clear51 = and i64 %bf.lshr, 1, !dbg !8732
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !8732
  %tobool53 = icmp ne i32 %bf.cast52, 0, !dbg !8732
  br i1 %tobool53, label %if.then54, label %if.end194, !dbg !8729

if.then54:                                        ; preds = %cond.false49, %cond.true45
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %real_decl_rtl, metadata !8733, metadata !DIExpression()), !dbg !8735
  %35 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 7), align 8, !dbg !8736
  store %struct.rtx_def* %35, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8735
  %36 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8737
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !8737
  %bf.load55 = load i32, i32* %37, align 8, !dbg !8737
  %bf.lshr56 = lshr i32 %bf.load55, 31, !dbg !8737
  %tobool57 = icmp ne i32 %bf.lshr56, 0, !dbg !8737
  br i1 %tobool57, label %cond.false59, label %cond.true58, !dbg !8737

cond.true58:                                      ; preds = %if.then54
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4730, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8737
  br label %cond.end60, !dbg !8737

cond.false59:                                     ; preds = %if.then54
  br label %cond.end60, !dbg !8737

cond.end60:                                       ; preds = %cond.false59, %cond.true58
  %cond61 = phi i32 [ 0, %cond.true58 ], [ 0, %cond.false59 ], !dbg !8737
  %38 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8738
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !8738
  %bf.load62 = load i32, i32* %39, align 8, !dbg !8738
  %bf.lshr63 = lshr i32 %bf.load62, 16, !dbg !8738
  %bf.clear64 = and i32 %bf.lshr63, 255, !dbg !8738
  %cmp65 = icmp eq i32 %bf.clear64, 1, !dbg !8740
  br i1 %cmp65, label %if.then67, label %if.end73, !dbg !8741

if.then67:                                        ; preds = %cond.end60
  %40 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8742
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !8742
  %bf.load68 = load i32, i32* %41, align 8, !dbg !8742
  %bf.lshr69 = lshr i32 %bf.load68, 16, !dbg !8742
  %bf.clear70 = and i32 %bf.lshr69, 255, !dbg !8742
  %42 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8742
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !8742
  %bf.load71 = load i32, i32* %43, align 8, !dbg !8742
  %bf.value = and i32 %bf.clear70, 255, !dbg !8742
  %bf.shl = shl i32 %bf.value, 16, !dbg !8742
  %bf.clear72 = and i32 %bf.load71, -16711681, !dbg !8742
  %bf.set = or i32 %bf.clear72, %bf.shl, !dbg !8742
  store i32 %bf.set, i32* %43, align 8, !dbg !8742
  br label %if.end73, !dbg !8742

if.end73:                                         ; preds = %if.then67, %cond.end60
  %44 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8743
  %common = bitcast %union.tree_node* %44 to %struct.tree_common*, !dbg !8743
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8743
  %45 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8743
  %base74 = bitcast %union.tree_node* %45 to %struct.tree_base*, !dbg !8743
  %46 = bitcast %struct.tree_base* %base74 to i64*, !dbg !8743
  %bf.load75 = load i64, i64* %46, align 8, !dbg !8743
  %bf.clear76 = and i64 %bf.load75, 65535, !dbg !8743
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !8743
  %cmp78 = icmp eq i32 %bf.cast77, 14, !dbg !8743
  br i1 %cmp78, label %cond.true80, label %cond.false84, !dbg !8743

cond.true80:                                      ; preds = %if.end73
  %47 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8743
  %common81 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !8743
  %type82 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common81, i32 0, i32 2, !dbg !8743
  %48 = load %union.tree_node*, %union.tree_node** %type82, align 8, !dbg !8743
  %call83 = call i32 @vector_type_mode(%union.tree_node* %48), !dbg !8743
  br label %cond.end91, !dbg !8743

cond.false84:                                     ; preds = %if.end73
  %49 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8743
  %common85 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !8743
  %type86 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common85, i32 0, i32 2, !dbg !8743
  %50 = load %union.tree_node*, %union.tree_node** %type86, align 8, !dbg !8743
  %type87 = bitcast %union.tree_node* %50 to %struct.tree_type*, !dbg !8743
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type87, i32 0, i32 6, !dbg !8743
  %bf.load88 = load i32, i32* %mode, align 4, !dbg !8743
  %bf.lshr89 = lshr i32 %bf.load88, 16, !dbg !8743
  %bf.clear90 = and i32 %bf.lshr89, 255, !dbg !8743
  br label %cond.end91, !dbg !8743

cond.end91:                                       ; preds = %cond.false84, %cond.true80
  %cond92 = phi i32 [ %call83, %cond.true80 ], [ %bf.clear90, %cond.false84 ], !dbg !8743
  %cmp93 = icmp ne i32 %cond92, 1, !dbg !8745
  br i1 %cmp93, label %land.lhs.true95, label %if.else, !dbg !8746

land.lhs.true95:                                  ; preds = %cond.end91
  %51 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 4), align 8, !dbg !8747
  %52 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8748
  %common96 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !8748
  %type97 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common96, i32 0, i32 2, !dbg !8748
  %53 = load %union.tree_node*, %union.tree_node** %type97, align 8, !dbg !8748
  %call98 = call zeroext i8 %51(%union.tree_node* %53), !dbg !8749
  %conv99 = zext i8 %call98 to i32, !dbg !8749
  %tobool100 = icmp ne i32 %conv99, 0, !dbg !8749
  br i1 %tobool100, label %if.then101, label %if.else, !dbg !8750

if.then101:                                       ; preds = %land.lhs.true95
  %54 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8751
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !8751
  %bf.load102 = load i32, i32* %55, align 8, !dbg !8751
  %bf.lshr103 = lshr i32 %bf.load102, 16, !dbg !8751
  %bf.clear104 = and i32 %bf.lshr103, 255, !dbg !8751
  %56 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8753
  %call105 = call i32 @rhs_regno(%struct.rtx_def* %56), !dbg !8753
  %call106 = call %struct.rtx_def* @gen_rtx_REG(i32 %bf.clear104, i32 %call105), !dbg !8754
  %57 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8755
  %call107 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call106, %struct.rtx_def* %57), !dbg !8756
  %58 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8757
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !8757
  %bf.load108 = load i32, i32* %59, align 8, !dbg !8757
  %bf.lshr109 = lshr i32 %bf.load108, 16, !dbg !8757
  %bf.clear110 = and i32 %bf.lshr109, 255, !dbg !8757
  %60 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8758
  %call111 = call zeroext i8 @shift_return_value(i32 %bf.clear110, i8 zeroext 1, %struct.rtx_def* %60), !dbg !8759
  br label %if.end193, !dbg !8760

if.else:                                          ; preds = %land.lhs.true95, %cond.end91
  %61 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8761
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !8761
  %bf.load112 = load i32, i32* %62, align 8, !dbg !8761
  %bf.lshr113 = lshr i32 %bf.load112, 16, !dbg !8761
  %bf.clear114 = and i32 %bf.lshr113, 255, !dbg !8761
  %63 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8763
  %64 = bitcast %struct.rtx_def* %63 to i32*, !dbg !8763
  %bf.load115 = load i32, i32* %64, align 8, !dbg !8763
  %bf.lshr116 = lshr i32 %bf.load115, 16, !dbg !8763
  %bf.clear117 = and i32 %bf.lshr116, 255, !dbg !8763
  %cmp118 = icmp ne i32 %bf.clear114, %bf.clear117, !dbg !8764
  br i1 %cmp118, label %if.then120, label %if.else136, !dbg !8765

if.then120:                                       ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !8766, metadata !DIExpression()), !dbg !8768
  %65 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8769
  %common121 = bitcast %union.tree_node* %65 to %struct.tree_common*, !dbg !8769
  %type122 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common121, i32 0, i32 2, !dbg !8769
  %66 = load %union.tree_node*, %union.tree_node** %type122, align 8, !dbg !8769
  %base123 = bitcast %union.tree_node* %66 to %struct.tree_base*, !dbg !8769
  %67 = bitcast %struct.tree_base* %base123 to i64*, !dbg !8769
  %bf.load124 = load i64, i64* %67, align 8, !dbg !8769
  %bf.lshr125 = lshr i64 %bf.load124, 21, !dbg !8769
  %bf.clear126 = and i64 %bf.lshr125, 1, !dbg !8769
  %bf.cast127 = trunc i64 %bf.clear126 to i32, !dbg !8769
  store i32 %bf.cast127, i32* %unsignedp, align 4, !dbg !8768
  %68 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8770
  %common128 = bitcast %union.tree_node* %68 to %struct.tree_common*, !dbg !8770
  %type129 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common128, i32 0, i32 2, !dbg !8770
  %69 = load %union.tree_node*, %union.tree_node** %type129, align 8, !dbg !8770
  %70 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8771
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !8771
  %bf.load130 = load i32, i32* %71, align 8, !dbg !8771
  %bf.lshr131 = lshr i32 %bf.load130, 16, !dbg !8771
  %bf.clear132 = and i32 %bf.lshr131, 255, !dbg !8771
  %72 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8772
  %common133 = bitcast %union.tree_node* %72 to %struct.tree_common*, !dbg !8772
  %type134 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common133, i32 0, i32 2, !dbg !8772
  %73 = load %union.tree_node*, %union.tree_node** %type134, align 8, !dbg !8772
  %call135 = call i32 @promote_function_mode(%union.tree_node* %69, i32 %bf.clear132, i32* %unsignedp, %union.tree_node* %73, i32 1), !dbg !8773
  %74 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8774
  %75 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8775
  %76 = load i32, i32* %unsignedp, align 4, !dbg !8776
  call void @convert_move(%struct.rtx_def* %74, %struct.rtx_def* %75, i32 %76), !dbg !8777
  br label %if.end192, !dbg !8778

if.else136:                                       ; preds = %if.else
  %77 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8779
  %78 = bitcast %struct.rtx_def* %77 to i32*, !dbg !8779
  %bf.load137 = load i32, i32* %78, align 8, !dbg !8779
  %bf.clear138 = and i32 %bf.load137, 65535, !dbg !8779
  %cmp139 = icmp eq i32 %bf.clear138, 15, !dbg !8781
  br i1 %cmp139, label %if.then141, label %if.else155, !dbg !8782

if.then141:                                       ; preds = %if.else136
  %79 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8783
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !8783
  %bf.load142 = load i32, i32* %80, align 8, !dbg !8783
  %bf.clear143 = and i32 %bf.load142, 65535, !dbg !8783
  %cmp144 = icmp eq i32 %bf.clear143, 15, !dbg !8786
  br i1 %cmp144, label %if.then146, label %if.else147, !dbg !8787

if.then146:                                       ; preds = %if.then141
  %81 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8788
  %82 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8789
  call void @emit_group_move(%struct.rtx_def* %81, %struct.rtx_def* %82), !dbg !8790
  br label %if.end154, !dbg !8790

if.else147:                                       ; preds = %if.then141
  %83 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8791
  %84 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8792
  %85 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8793
  %common148 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !8793
  %type149 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common148, i32 0, i32 2, !dbg !8793
  %86 = load %union.tree_node*, %union.tree_node** %type149, align 8, !dbg !8793
  %87 = load %union.tree_node*, %union.tree_node** %decl_result, align 8, !dbg !8794
  %common150 = bitcast %union.tree_node* %87 to %struct.tree_common*, !dbg !8794
  %type151 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common150, i32 0, i32 2, !dbg !8794
  %88 = load %union.tree_node*, %union.tree_node** %type151, align 8, !dbg !8794
  %call152 = call i64 @int_size_in_bytes(%union.tree_node* %88), !dbg !8795
  %conv153 = trunc i64 %call152 to i32, !dbg !8795
  call void @emit_group_load(%struct.rtx_def* %83, %struct.rtx_def* %84, %union.tree_node* %86, i32 %conv153), !dbg !8796
  br label %if.end154

if.end154:                                        ; preds = %if.else147, %if.then146
  br label %if.end191, !dbg !8797

if.else155:                                       ; preds = %if.else136
  %89 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8798
  %90 = bitcast %struct.rtx_def* %89 to i32*, !dbg !8798
  %bf.load156 = load i32, i32* %90, align 8, !dbg !8798
  %bf.clear157 = and i32 %bf.load156, 65535, !dbg !8798
  %cmp158 = icmp eq i32 %bf.clear157, 41, !dbg !8800
  br i1 %cmp158, label %land.lhs.true160, label %if.else188, !dbg !8801

land.lhs.true160:                                 ; preds = %if.else155
  %91 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8802
  %92 = bitcast %struct.rtx_def* %91 to i32*, !dbg !8802
  %bf.load161 = load i32, i32* %92, align 8, !dbg !8802
  %bf.lshr162 = lshr i32 %bf.load161, 16, !dbg !8802
  %bf.clear163 = and i32 %bf.lshr162, 255, !dbg !8802
  %idxprom164 = zext i32 %bf.clear163 to i64, !dbg !8802
  %arrayidx165 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom164, !dbg !8802
  %93 = load i8, i8* %arrayidx165, align 1, !dbg !8802
  %conv166 = zext i8 %93 to i32, !dbg !8802
  %cmp167 = icmp eq i32 %conv166, 10, !dbg !8803
  br i1 %cmp167, label %land.lhs.true169, label %if.else188, !dbg !8804

land.lhs.true169:                                 ; preds = %land.lhs.true160
  %94 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8805
  %95 = bitcast %struct.rtx_def* %94 to i32*, !dbg !8805
  %bf.load170 = load i32, i32* %95, align 8, !dbg !8805
  %bf.lshr171 = lshr i32 %bf.load170, 16, !dbg !8805
  %bf.clear172 = and i32 %bf.lshr171, 255, !dbg !8805
  %idxprom173 = zext i32 %bf.clear172 to i64, !dbg !8805
  %arrayidx174 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom173, !dbg !8805
  %96 = load i8, i8* %arrayidx174, align 1, !dbg !8805
  %conv175 = zext i8 %96 to i16, !dbg !8805
  %conv176 = zext i16 %conv175 to i32, !dbg !8805
  %mul = mul nsw i32 %conv176, 8, !dbg !8805
  %conv177 = trunc i32 %mul to i16, !dbg !8805
  %conv178 = zext i16 %conv177 to i32, !dbg !8805
  %cmp179 = icmp sle i32 %conv178, 32, !dbg !8806
  br i1 %cmp179, label %if.then181, label %if.else188, !dbg !8807

if.then181:                                       ; preds = %land.lhs.true169
  call void @llvm.dbg.declare(metadata i32* %old_generating_concat_p, metadata !8808, metadata !DIExpression()), !dbg !8810
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !8811, metadata !DIExpression()), !dbg !8812
  %97 = load i32, i32* @generating_concat_p, align 4, !dbg !8813
  store i32 %97, i32* %old_generating_concat_p, align 4, !dbg !8814
  store i32 0, i32* @generating_concat_p, align 4, !dbg !8815
  %98 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8816
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !8816
  %bf.load182 = load i32, i32* %99, align 8, !dbg !8816
  %bf.lshr183 = lshr i32 %bf.load182, 16, !dbg !8816
  %bf.clear184 = and i32 %bf.lshr183, 255, !dbg !8816
  %call185 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear184), !dbg !8817
  store %struct.rtx_def* %call185, %struct.rtx_def** %tmp, align 8, !dbg !8818
  %100 = load i32, i32* %old_generating_concat_p, align 4, !dbg !8819
  store i32 %100, i32* @generating_concat_p, align 4, !dbg !8820
  %101 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8821
  %102 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8822
  %call186 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %101, %struct.rtx_def* %102), !dbg !8823
  %103 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8824
  %104 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8825
  %call187 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %103, %struct.rtx_def* %104), !dbg !8826
  br label %if.end190, !dbg !8827

if.else188:                                       ; preds = %land.lhs.true169, %land.lhs.true160, %if.else155
  %105 = load %struct.rtx_def*, %struct.rtx_def** %real_decl_rtl, align 8, !dbg !8828
  %106 = load %struct.rtx_def*, %struct.rtx_def** %decl_rtl, align 8, !dbg !8829
  %call189 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %105, %struct.rtx_def* %106), !dbg !8830
  br label %if.end190

if.end190:                                        ; preds = %if.else188, %if.then181
  br label %if.end191

if.end191:                                        ; preds = %if.end190, %if.end154
  br label %if.end192

if.end192:                                        ; preds = %if.end191, %if.then120
  br label %if.end193

if.end193:                                        ; preds = %if.end192, %if.then101
  br label %if.end194, !dbg !8831

if.end194:                                        ; preds = %if.end193, %cond.false49, %cond.true45
  br label %if.end195, !dbg !8832

if.end195:                                        ; preds = %if.end194, %land.lhs.true26, %if.end20
  %107 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8833
  %returns_struct = getelementptr inbounds %struct.function, %struct.function* %107, i32 0, i32 20, !dbg !8835
  %bf.load196 = load i32, i32* %returns_struct, align 8, !dbg !8835
  %bf.lshr197 = lshr i32 %bf.load196, 26, !dbg !8835
  %bf.clear198 = and i32 %bf.lshr197, 1, !dbg !8835
  %tobool199 = icmp ne i32 %bf.clear198, 0, !dbg !8833
  br i1 %tobool199, label %if.then204, label %lor.lhs.false, !dbg !8836

lor.lhs.false:                                    ; preds = %if.end195
  %108 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8837
  %returns_pcc_struct = getelementptr inbounds %struct.function, %struct.function* %108, i32 0, i32 20, !dbg !8838
  %bf.load200 = load i32, i32* %returns_pcc_struct, align 8, !dbg !8838
  %bf.lshr201 = lshr i32 %bf.load200, 27, !dbg !8838
  %bf.clear202 = and i32 %bf.lshr201, 1, !dbg !8838
  %tobool203 = icmp ne i32 %bf.clear202, 0, !dbg !8837
  br i1 %tobool203, label %if.then204, label %if.end256, !dbg !8839

if.then204:                                       ; preds = %lor.lhs.false, %if.end195
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value_address, metadata !8840, metadata !DIExpression()), !dbg !8842
  %109 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8843
  %decl_non_common205 = bitcast %union.tree_node* %109 to %struct.tree_decl_non_common*, !dbg !8843
  %result206 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common205, i32 0, i32 3, !dbg !8843
  %110 = load %union.tree_node*, %union.tree_node** %result206, align 8, !dbg !8843
  %decl_with_rtl207 = bitcast %union.tree_node* %110 to %struct.tree_decl_with_rtl*, !dbg !8843
  %rtl208 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl207, i32 0, i32 1, !dbg !8843
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rtl208, align 8, !dbg !8843
  %tobool209 = icmp ne %struct.rtx_def* %111, null, !dbg !8843
  br i1 %tobool209, label %cond.true210, label %cond.false215, !dbg !8843

cond.true210:                                     ; preds = %if.then204
  %112 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8843
  %decl_non_common211 = bitcast %union.tree_node* %112 to %struct.tree_decl_non_common*, !dbg !8843
  %result212 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common211, i32 0, i32 3, !dbg !8843
  %113 = load %union.tree_node*, %union.tree_node** %result212, align 8, !dbg !8843
  %decl_with_rtl213 = bitcast %union.tree_node* %113 to %struct.tree_decl_with_rtl*, !dbg !8843
  %rtl214 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl213, i32 0, i32 1, !dbg !8843
  %114 = load %struct.rtx_def*, %struct.rtx_def** %rtl214, align 8, !dbg !8843
  br label %cond.end222, !dbg !8843

cond.false215:                                    ; preds = %if.then204
  %115 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8843
  %decl_non_common216 = bitcast %union.tree_node* %115 to %struct.tree_decl_non_common*, !dbg !8843
  %result217 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common216, i32 0, i32 3, !dbg !8843
  %116 = load %union.tree_node*, %union.tree_node** %result217, align 8, !dbg !8843
  call void @make_decl_rtl(%union.tree_node* %116), !dbg !8843
  %117 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8843
  %decl_non_common218 = bitcast %union.tree_node* %117 to %struct.tree_decl_non_common*, !dbg !8843
  %result219 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common218, i32 0, i32 3, !dbg !8843
  %118 = load %union.tree_node*, %union.tree_node** %result219, align 8, !dbg !8843
  %decl_with_rtl220 = bitcast %union.tree_node* %118 to %struct.tree_decl_with_rtl*, !dbg !8843
  %rtl221 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl220, i32 0, i32 1, !dbg !8843
  %119 = load %struct.rtx_def*, %struct.rtx_def** %rtl221, align 8, !dbg !8843
  br label %cond.end222, !dbg !8843

cond.end222:                                      ; preds = %cond.false215, %cond.true210
  %cond223 = phi %struct.rtx_def* [ %114, %cond.true210 ], [ %119, %cond.false215 ], !dbg !8843
  store %struct.rtx_def* %cond223, %struct.rtx_def** %value_address, align 8, !dbg !8842
  call void @llvm.dbg.declare(metadata %union.tree_node** %type224, metadata !8844, metadata !DIExpression()), !dbg !8845
  %120 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8846
  %decl_non_common225 = bitcast %union.tree_node* %120 to %struct.tree_decl_non_common*, !dbg !8846
  %result226 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common225, i32 0, i32 3, !dbg !8846
  %121 = load %union.tree_node*, %union.tree_node** %result226, align 8, !dbg !8846
  %common227 = bitcast %union.tree_node* %121 to %struct.tree_common*, !dbg !8846
  %type228 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common227, i32 0, i32 2, !dbg !8846
  %122 = load %union.tree_node*, %union.tree_node** %type228, align 8, !dbg !8846
  store %union.tree_node* %122, %union.tree_node** %type224, align 8, !dbg !8845
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outgoing, metadata !8847, metadata !DIExpression()), !dbg !8848
  %123 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8849
  %decl_non_common229 = bitcast %union.tree_node* %123 to %struct.tree_decl_non_common*, !dbg !8849
  %result230 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common229, i32 0, i32 3, !dbg !8849
  %124 = load %union.tree_node*, %union.tree_node** %result230, align 8, !dbg !8849
  %decl_common231 = bitcast %union.tree_node* %124 to %struct.tree_decl_common*, !dbg !8849
  %decl_by_reference_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common231, i32 0, i32 2, !dbg !8849
  %125 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !8849
  %bf.load232 = load i64, i64* %125, align 8, !dbg !8849
  %bf.lshr233 = lshr i64 %bf.load232, 28, !dbg !8849
  %bf.clear234 = and i64 %bf.lshr233, 1, !dbg !8849
  %bf.cast235 = trunc i64 %bf.clear234 to i32, !dbg !8849
  %tobool236 = icmp ne i32 %bf.cast235, 0, !dbg !8849
  br i1 %tobool236, label %if.then237, label %if.else240, !dbg !8851

if.then237:                                       ; preds = %cond.end222
  %126 = load %union.tree_node*, %union.tree_node** %type224, align 8, !dbg !8852
  %common238 = bitcast %union.tree_node* %126 to %struct.tree_common*, !dbg !8852
  %type239 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common238, i32 0, i32 2, !dbg !8852
  %127 = load %union.tree_node*, %union.tree_node** %type239, align 8, !dbg !8852
  store %union.tree_node* %127, %union.tree_node** %type224, align 8, !dbg !8853
  br label %if.end245, !dbg !8854

if.else240:                                       ; preds = %cond.end222
  %128 = load %struct.rtx_def*, %struct.rtx_def** %value_address, align 8, !dbg !8855
  %u241 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1, !dbg !8855
  %fld242 = bitcast %union.u* %u241 to [1 x %union.rtunion_def]*, !dbg !8855
  %arrayidx243 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld242, i64 0, i64 0, !dbg !8855
  %rt_rtx244 = bitcast %union.rtunion_def* %arrayidx243 to %struct.rtx_def**, !dbg !8855
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx244, align 8, !dbg !8855
  store %struct.rtx_def* %129, %struct.rtx_def** %value_address, align 8, !dbg !8856
  br label %if.end245

if.end245:                                        ; preds = %if.else240, %if.then237
  %130 = load %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 15), align 8, !dbg !8857
  %131 = load %union.tree_node*, %union.tree_node** %type224, align 8, !dbg !8858
  %call246 = call %union.tree_node* @build_pointer_type(%union.tree_node* %131), !dbg !8859
  %132 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8860
  %call247 = call %struct.rtx_def* %130(%union.tree_node* %call246, %union.tree_node* %132, i8 zeroext 1), !dbg !8861
  store %struct.rtx_def* %call247, %struct.rtx_def** %outgoing, align 8, !dbg !8862
  %133 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8, !dbg !8863
  %134 = bitcast %struct.rtx_def* %133 to i32*, !dbg !8863
  %bf.load248 = load i32, i32* %134, align 8, !dbg !8864
  %bf.clear249 = and i32 %bf.load248, 2147483647, !dbg !8864
  %bf.set250 = or i32 %bf.clear249, -2147483648, !dbg !8864
  store i32 %bf.set250, i32* %134, align 8, !dbg !8864
  %135 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8, !dbg !8865
  %136 = bitcast %struct.rtx_def* %135 to i32*, !dbg !8865
  %bf.load251 = load i32, i32* %136, align 8, !dbg !8865
  %bf.lshr252 = lshr i32 %bf.load251, 16, !dbg !8865
  %bf.clear253 = and i32 %bf.lshr252, 255, !dbg !8865
  %137 = load %struct.rtx_def*, %struct.rtx_def** %value_address, align 8, !dbg !8865
  %call254 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 %bf.clear253, %struct.rtx_def* %137, i8 zeroext 0), !dbg !8865
  store %struct.rtx_def* %call254, %struct.rtx_def** %value_address, align 8, !dbg !8866
  %138 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8, !dbg !8867
  %139 = load %struct.rtx_def*, %struct.rtx_def** %value_address, align 8, !dbg !8868
  %call255 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %138, %struct.rtx_def* %139), !dbg !8869
  %140 = load %struct.rtx_def*, %struct.rtx_def** %outgoing, align 8, !dbg !8870
  store %struct.rtx_def* %140, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 7), align 8, !dbg !8871
  br label %if.end256, !dbg !8872

if.end256:                                        ; preds = %if.end245, %lor.lhs.false
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq257, metadata !8873, metadata !DIExpression()), !dbg !8875
  call void @start_sequence(), !dbg !8876
  call void @clobber_return_register(), !dbg !8877
  %call258 = call %struct.rtx_def* @get_insns(), !dbg !8878
  store %struct.rtx_def* %call258, %struct.rtx_def** %seq257, align 8, !dbg !8879
  call void @end_sequence(), !dbg !8880
  %141 = load %struct.rtx_def*, %struct.rtx_def** %seq257, align 8, !dbg !8881
  %142 = load %struct.rtx_def*, %struct.rtx_def** %clobber_after, align 8, !dbg !8882
  %call259 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %141, %struct.rtx_def* %142), !dbg !8883
  %143 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 12), align 8, !dbg !8884
  %tobool260 = icmp ne %struct.rtx_def* %143, null, !dbg !8884
  br i1 %tobool260, label %if.then261, label %if.end263, !dbg !8886

if.then261:                                       ; preds = %if.end256
  %144 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 12), align 8, !dbg !8887
  %call262 = call %struct.rtx_def* @emit_label(%struct.rtx_def* %144), !dbg !8888
  br label %if.end263, !dbg !8888

if.end263:                                        ; preds = %if.then261, %if.end256
  %145 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !8889
  %tobool264 = icmp ne i32 %145, 0, !dbg !8889
  br i1 %tobool264, label %if.then265, label %if.end268, !dbg !8891

if.then265:                                       ; preds = %if.end263
  %call266 = call %struct.rtx_def* @gen_blockage(), !dbg !8892
  %call267 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call266), !dbg !8893
  br label %if.end268, !dbg !8893

if.end268:                                        ; preds = %if.then265, %if.end263
  %146 = load %union.tree_node*, %union.tree_node** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 9), align 8, !dbg !8894
  %tobool269 = icmp ne %union.tree_node* %146, null, !dbg !8896
  br i1 %tobool269, label %if.then270, label %if.end271, !dbg !8897

if.then270:                                       ; preds = %if.end268
  call void @stack_protect_epilogue(), !dbg !8898
  br label %if.end271, !dbg !8898

if.end271:                                        ; preds = %if.then270, %if.end268
  call void @use_return_register(), !dbg !8899
  ret void, !dbg !8900
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_arg_pointer_save_area() #0 !dbg !8901 {
entry:
  %ret = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %ret, metadata !8904, metadata !DIExpression()), !dbg !8905
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 15), align 8, !dbg !8906
  store %struct.rtx_def* %0, %struct.rtx_def** %ret, align 8, !dbg !8905
  %1 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8, !dbg !8907
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !8907
  br i1 %tobool, label %if.end, label %if.then, !dbg !8909

if.then:                                          ; preds = %entry
  %2 = load i8, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @mode_size, i64 0, i64 16), align 16, !dbg !8910
  %conv = zext i8 %2 to i16, !dbg !8910
  %conv1 = zext i16 %conv to i64, !dbg !8910
  %call = call %struct.rtx_def* @assign_stack_local(i32 16, i64 %conv1, i32 0), !dbg !8912
  store %struct.rtx_def* %call, %struct.rtx_def** %ret, align 8, !dbg !8913
  %3 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8, !dbg !8914
  store %struct.rtx_def* %3, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 15), align 8, !dbg !8915
  br label %if.end, !dbg !8916

if.end:                                           ; preds = %if.then, %entry
  %4 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 40), align 4, !dbg !8917
  %tobool2 = icmp ne i8 %4, 0, !dbg !8919
  br i1 %tobool2, label %if.end9, label %if.then3, !dbg !8920

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !8921, metadata !DIExpression()), !dbg !8923
  call void @start_sequence(), !dbg !8924
  %5 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8, !dbg !8925
  %call4 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %5), !dbg !8926
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !8927
  %call5 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call4, %struct.rtx_def* %6), !dbg !8928
  %call6 = call %struct.rtx_def* @get_insns(), !dbg !8929
  store %struct.rtx_def* %call6, %struct.rtx_def** %seq, align 8, !dbg !8930
  call void @end_sequence(), !dbg !8931
  call void @push_topmost_sequence(), !dbg !8932
  %7 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !8933
  %call7 = call %struct.rtx_def* @entry_of_function(), !dbg !8934
  %call8 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %7, %struct.rtx_def* %call7), !dbg !8935
  call void @pop_topmost_sequence(), !dbg !8936
  br label %if.end9, !dbg !8937

if.end9:                                          ; preds = %if.then3, %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %ret, align 8, !dbg !8938
  ret %struct.rtx_def* %8, !dbg !8939
}

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

declare dso_local void @start_sequence() #2

declare dso_local void @anti_adjust_stack_and_probe(%struct.rtx_def*, i8 zeroext) #2

declare dso_local %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @clear_pending_stack_adjust() #2

declare dso_local void @do_pending_stack_adjust() #2

declare dso_local void @set_curr_insn_source_location(i32) #2

declare dso_local %struct.rtx_def* @gen_blockage() #2

declare dso_local void @expand_eh_return() #2

declare dso_local %struct.rtx_def* @gen_rtx_REG(i32, i32) #2

declare dso_local zeroext i8 @shift_return_value(i32, i8 zeroext, %struct.rtx_def*) #2

declare dso_local i32 @promote_function_mode(%union.tree_node*, i32, i32*, %union.tree_node*, i32) #2

declare dso_local void @convert_move(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local void @emit_group_move(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @emit_group_load(%struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, i32) #2

declare dso_local %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @use_return_register() #0 !dbg !8940 {
entry:
  call void @diddle_return_value(void (%struct.rtx_def*, i8*)* @do_use_return_reg, i8* null), !dbg !8941
  ret void, !dbg !8942
}

declare dso_local %struct.rtx_def* @validize_mem(%struct.rtx_def*) #2

declare dso_local void @push_topmost_sequence() #2

declare dso_local %struct.rtx_def* @entry_of_function() #2

declare dso_local void @pop_topmost_sequence() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @maybe_copy_epilogue_insn(%struct.rtx_def* %insn, %struct.rtx_def* %copy) #0 !dbg !8943 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %copy.addr = alloca %struct.rtx_def*, align 8
  %slot = alloca i8**, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8944, metadata !DIExpression()), !dbg !8945
  store %struct.rtx_def* %copy, %struct.rtx_def** %copy.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %copy.addr, metadata !8946, metadata !DIExpression()), !dbg !8947
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8948, metadata !DIExpression()), !dbg !8949
  %0 = load %struct.htab*, %struct.htab** @epilogue_insn_hash, align 8, !dbg !8950
  %cmp = icmp eq %struct.htab* %0, null, !dbg !8952
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8953

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.htab*, %struct.htab** @epilogue_insn_hash, align 8, !dbg !8954
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8955
  %3 = bitcast %struct.rtx_def* %2 to i8*, !dbg !8955
  %call = call i8* @htab_find(%struct.htab* %1, i8* %3), !dbg !8956
  %cmp1 = icmp eq i8* %call, null, !dbg !8957
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8958

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !8959

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.htab*, %struct.htab** @epilogue_insn_hash, align 8, !dbg !8960
  %5 = load %struct.rtx_def*, %struct.rtx_def** %copy.addr, align 8, !dbg !8961
  %6 = bitcast %struct.rtx_def* %5 to i8*, !dbg !8961
  %call2 = call i8** @htab_find_slot(%struct.htab* %4, i8* %6, i32 1), !dbg !8962
  store i8** %call2, i8*** %slot, align 8, !dbg !8963
  %7 = load i8**, i8*** %slot, align 8, !dbg !8964
  %8 = load i8*, i8** %7, align 8, !dbg !8964
  %cmp3 = icmp eq i8* %8, null, !dbg !8964
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !8964

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4945, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !8964
  br label %cond.end, !dbg !8964

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !8964

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8964
  %9 = load %struct.rtx_def*, %struct.rtx_def** %copy.addr, align 8, !dbg !8965
  %10 = bitcast %struct.rtx_def* %9 to i8*, !dbg !8965
  %11 = load i8**, i8*** %slot, align 8, !dbg !8966
  store i8* %10, i8** %11, align 8, !dbg !8967
  br label %return, !dbg !8968

return:                                           ; preds = %cond.end, %if.then
  ret void, !dbg !8968
}

declare dso_local i8* @htab_find(%struct.htab*, i8*) #2

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @prologue_epilogue_contains(%struct.rtx_def* %insn) #0 !dbg !8969 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8972, metadata !DIExpression()), !dbg !8973
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8974
  %1 = load %struct.htab*, %struct.htab** @prologue_insn_hash, align 8, !dbg !8976
  %call = call zeroext i8 @contains(%struct.rtx_def* %0, %struct.htab* %1), !dbg !8977
  %tobool = icmp ne i8 %call, 0, !dbg !8977
  br i1 %tobool, label %if.then, label %if.end, !dbg !8978

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !8979
  br label %return, !dbg !8979

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8980
  %3 = load %struct.htab*, %struct.htab** @epilogue_insn_hash, align 8, !dbg !8982
  %call1 = call zeroext i8 @contains(%struct.rtx_def* %2, %struct.htab* %3), !dbg !8983
  %tobool2 = icmp ne i8 %call1, 0, !dbg !8983
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !8984

if.then3:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !8985
  br label %return, !dbg !8985

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !8986
  br label %return, !dbg !8986

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !8987
  ret i32 %4, !dbg !8987
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @contains(%struct.rtx_def* %insn, %struct.htab* %hash) #0 !dbg !8988 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %hash.addr = alloca %struct.htab*, align 8
  %i = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8991, metadata !DIExpression()), !dbg !8992
  store %struct.htab* %hash, %struct.htab** %hash.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %hash.addr, metadata !8993, metadata !DIExpression()), !dbg !8994
  %0 = load %struct.htab*, %struct.htab** %hash.addr, align 8, !dbg !8995
  %cmp = icmp eq %struct.htab* %0, null, !dbg !8997
  br i1 %cmp, label %if.then, label %if.end, !dbg !8998

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8999
  br label %return, !dbg !8999

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9000
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !9000
  %bf.load = load i32, i32* %2, align 8, !dbg !9000
  %bf.clear = and i32 %bf.load, 65535, !dbg !9000
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !9000
  br i1 %cmp1, label %land.lhs.true, label %if.end25, !dbg !9002

land.lhs.true:                                    ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9003
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !9003
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9003
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !9003
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9003
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9003
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !9003
  %bf.load2 = load i32, i32* %5, align 8, !dbg !9003
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !9003
  %cmp4 = icmp eq i32 %bf.clear3, 5, !dbg !9004
  br i1 %cmp4, label %if.then5, label %if.end25, !dbg !9005

if.then5:                                         ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9006, metadata !DIExpression()), !dbg !9008
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9009
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !9009
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !9009
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 5, !dbg !9009
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !9009
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !9009
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !9009
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !9009
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 0, !dbg !9009
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtvec_def**, !dbg !9009
  %8 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !9009
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %8, i32 0, i32 0, !dbg !9009
  %9 = load i32, i32* %num_elem, align 8, !dbg !9009
  %sub = sub nsw i32 %9, 1, !dbg !9011
  store i32 %sub, i32* %i, align 4, !dbg !9012
  br label %for.cond, !dbg !9013

for.cond:                                         ; preds = %for.inc, %if.then5
  %10 = load i32, i32* %i, align 4, !dbg !9014
  %cmp13 = icmp sge i32 %10, 0, !dbg !9016
  br i1 %cmp13, label %for.body, label %for.end, !dbg !9017

for.body:                                         ; preds = %for.cond
  %11 = load %struct.htab*, %struct.htab** %hash.addr, align 8, !dbg !9018
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9020
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !9020
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !9020
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 5, !dbg !9020
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !9020
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !9020
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !9020
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !9020
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 0, !dbg !9020
  %rt_rtvec21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtvec_def**, !dbg !9020
  %14 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec21, align 8, !dbg !9020
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %14, i32 0, i32 1, !dbg !9020
  %15 = load i32, i32* %i, align 4, !dbg !9020
  %idxprom = sext i32 %15 to i64, !dbg !9020
  %arrayidx22 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !9020
  %16 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx22, align 8, !dbg !9020
  %17 = bitcast %struct.rtx_def* %16 to i8*, !dbg !9020
  %call = call i8* @htab_find(%struct.htab* %11, i8* %17), !dbg !9021
  %tobool = icmp ne i8* %call, null, !dbg !9021
  br i1 %tobool, label %if.then23, label %if.end24, !dbg !9022

if.then23:                                        ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !9023
  br label %return, !dbg !9023

if.end24:                                         ; preds = %for.body
  br label %for.inc, !dbg !9024

for.inc:                                          ; preds = %if.end24
  %18 = load i32, i32* %i, align 4, !dbg !9025
  %dec = add nsw i32 %18, -1, !dbg !9025
  store i32 %dec, i32* %i, align 4, !dbg !9025
  br label %for.cond, !dbg !9026, !llvm.loop !9027

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !9029
  br label %return, !dbg !9029

if.end25:                                         ; preds = %land.lhs.true, %if.end
  %19 = load %struct.htab*, %struct.htab** %hash.addr, align 8, !dbg !9030
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9031
  %21 = bitcast %struct.rtx_def* %20 to i8*, !dbg !9031
  %call26 = call i8* @htab_find(%struct.htab* %19, i8* %21), !dbg !9032
  %cmp27 = icmp ne i8* %call26, null, !dbg !9033
  %conv = zext i1 %cmp27 to i32, !dbg !9033
  %conv28 = trunc i32 %conv to i8, !dbg !9032
  store i8 %conv28, i8* %retval, align 1, !dbg !9034
  br label %return, !dbg !9034

return:                                           ; preds = %if.end25, %for.end, %if.then23, %if.then
  %22 = load i8, i8* %retval, align 1, !dbg !9035
  ret i8 %22, !dbg !9035
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @reposition_prologue_and_epilogue_notes() #0 !dbg !9036 {
entry:
  %len = alloca i64, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %insn61 = alloca %struct.rtx_def*, align 8
  %first = alloca %struct.rtx_def*, align 8
  %note62 = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %0 = load %struct.htab*, %struct.htab** @prologue_insn_hash, align 8, !dbg !9037
  %cmp = icmp ne %struct.htab* %0, null, !dbg !9039
  br i1 %cmp, label %if.then, label %if.end53, !dbg !9040

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %len, metadata !9041, metadata !DIExpression()), !dbg !9043
  %1 = load %struct.htab*, %struct.htab** @prologue_insn_hash, align 8, !dbg !9044
  %call = call i64 @htab_elements(%struct.htab* %1), !dbg !9045
  store i64 %call, i64* %len, align 8, !dbg !9043
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9046, metadata !DIExpression()), !dbg !9047
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9048, metadata !DIExpression()), !dbg !9049
  store %struct.rtx_def* null, %struct.rtx_def** %last, align 8, !dbg !9049
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !9050, metadata !DIExpression()), !dbg !9051
  store %struct.rtx_def* null, %struct.rtx_def** %note, align 8, !dbg !9051
  %call1 = call %struct.rtx_def* @get_insns(), !dbg !9052
  store %struct.rtx_def* %call1, %struct.rtx_def** %insn, align 8, !dbg !9054
  br label %for.cond, !dbg !9055

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9056
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !9058
  br i1 %tobool, label %for.body, label %for.end, !dbg !9058

for.body:                                         ; preds = %for.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9059
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !9059
  %bf.load = load i32, i32* %4, align 8, !dbg !9059
  %bf.clear = and i32 %bf.load, 65535, !dbg !9059
  %cmp2 = icmp eq i32 %bf.clear, 13, !dbg !9059
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !9062

if.then3:                                         ; preds = %for.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9063
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !9063
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9063
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !9063
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !9063
  %6 = load i32, i32* %rt_int, align 8, !dbg !9063
  %cmp4 = icmp eq i32 %6, 5, !dbg !9066
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !9067

if.then5:                                         ; preds = %if.then3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9068
  store %struct.rtx_def* %7, %struct.rtx_def** %note, align 8, !dbg !9069
  br label %if.end, !dbg !9070

if.end:                                           ; preds = %if.then5, %if.then3
  br label %if.end13, !dbg !9071

if.else:                                          ; preds = %for.body
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9072
  %9 = load %struct.htab*, %struct.htab** @prologue_insn_hash, align 8, !dbg !9074
  %call6 = call zeroext i8 @contains(%struct.rtx_def* %8, %struct.htab* %9), !dbg !9075
  %tobool7 = icmp ne i8 %call6, 0, !dbg !9075
  br i1 %tobool7, label %if.then8, label %if.end12, !dbg !9076

if.then8:                                         ; preds = %if.else
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9077
  store %struct.rtx_def* %10, %struct.rtx_def** %last, align 8, !dbg !9079
  %11 = load i64, i64* %len, align 8, !dbg !9080
  %dec = add i64 %11, -1, !dbg !9080
  store i64 %dec, i64* %len, align 8, !dbg !9080
  %cmp9 = icmp eq i64 %dec, 0, !dbg !9082
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !9083

if.then10:                                        ; preds = %if.then8
  br label %for.end, !dbg !9084

if.end11:                                         ; preds = %if.then8
  br label %if.end12, !dbg !9085

if.end12:                                         ; preds = %if.end11, %if.else
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end
  br label %for.inc, !dbg !9086

for.inc:                                          ; preds = %if.end13
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9087
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !9087
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !9087
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 2, !dbg !9087
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !9087
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9087
  store %struct.rtx_def* %13, %struct.rtx_def** %insn, align 8, !dbg !9088
  br label %for.cond, !dbg !9089, !llvm.loop !9090

for.end:                                          ; preds = %if.then10, %for.cond
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9092
  %tobool17 = icmp ne %struct.rtx_def* %14, null, !dbg !9092
  br i1 %tobool17, label %if.then18, label %if.end52, !dbg !9094

if.then18:                                        ; preds = %for.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9095
  %cmp19 = icmp eq %struct.rtx_def* %15, null, !dbg !9098
  br i1 %cmp19, label %if.then20, label %if.end42, !dbg !9099

if.then20:                                        ; preds = %if.then18
  %16 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9100
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !9100
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !9100
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 2, !dbg !9100
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !9100
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !9100
  store %struct.rtx_def* %17, %struct.rtx_def** %note, align 8, !dbg !9103
  br label %for.cond25, !dbg !9104

for.cond25:                                       ; preds = %for.inc36, %if.then20
  %18 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9105
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !9105
  %bf.load26 = load i32, i32* %19, align 8, !dbg !9105
  %bf.clear27 = and i32 %bf.load26, 65535, !dbg !9105
  %cmp28 = icmp eq i32 %bf.clear27, 13, !dbg !9105
  br i1 %cmp28, label %land.lhs.true, label %if.end35, !dbg !9109

land.lhs.true:                                    ; preds = %for.cond25
  %20 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9110
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !9110
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !9110
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 5, !dbg !9110
  %rt_int32 = bitcast %union.rtunion_def* %arrayidx31 to i32*, !dbg !9110
  %21 = load i32, i32* %rt_int32, align 8, !dbg !9110
  %cmp33 = icmp eq i32 %21, 5, !dbg !9111
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !9112

if.then34:                                        ; preds = %land.lhs.true
  br label %for.end41, !dbg !9113

if.end35:                                         ; preds = %land.lhs.true, %for.cond25
  br label %for.inc36, !dbg !9114

for.inc36:                                        ; preds = %if.end35
  %22 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9115
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !9115
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !9115
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 2, !dbg !9115
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !9115
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx40, align 8, !dbg !9115
  store %struct.rtx_def* %23, %struct.rtx_def** %note, align 8, !dbg !9116
  br label %for.cond25, !dbg !9117, !llvm.loop !9118

for.end41:                                        ; preds = %if.then34
  br label %if.end42, !dbg !9121

if.end42:                                         ; preds = %for.end41, %if.then18
  %24 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9122
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !9122
  %bf.load43 = load i32, i32* %25, align 8, !dbg !9122
  %bf.clear44 = and i32 %bf.load43, 65535, !dbg !9122
  %cmp45 = icmp eq i32 %bf.clear44, 12, !dbg !9122
  br i1 %cmp45, label %if.then46, label %if.end51, !dbg !9124

if.then46:                                        ; preds = %if.end42
  %26 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9125
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !9125
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !9125
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 2, !dbg !9125
  %rt_rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**, !dbg !9125
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx50, align 8, !dbg !9125
  store %struct.rtx_def* %27, %struct.rtx_def** %last, align 8, !dbg !9126
  br label %if.end51, !dbg !9127

if.end51:                                         ; preds = %if.then46, %if.end42
  %28 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9128
  %29 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !9129
  %30 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9130
  call void @reorder_insns(%struct.rtx_def* %28, %struct.rtx_def* %29, %struct.rtx_def* %30), !dbg !9131
  br label %if.end52, !dbg !9132

if.end52:                                         ; preds = %if.end51, %for.end
  br label %if.end53, !dbg !9133

if.end53:                                         ; preds = %if.end52, %entry
  %31 = load %struct.htab*, %struct.htab** @epilogue_insn_hash, align 8, !dbg !9134
  %cmp54 = icmp ne %struct.htab* %31, null, !dbg !9136
  br i1 %cmp54, label %if.then55, label %if.end129, !dbg !9137

if.then55:                                        ; preds = %if.end53
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9138, metadata !DIExpression()), !dbg !9146
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !9147, metadata !DIExpression()), !dbg !9148
  %32 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9149
  %cfg = getelementptr inbounds %struct.function, %struct.function* %32, i32 0, i32 1, !dbg !9149
  %33 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9149
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %33, i32 0, i32 1, !dbg !9149
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !9149
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 0, !dbg !9149
  %call56 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !9149
  %35 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !9149
  %36 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %35, i32 0, i32 0, !dbg !9149
  %37 = extractvalue { i32, %struct.VEC_edge_gc** } %call56, 0, !dbg !9149
  store i32 %37, i32* %36, align 8, !dbg !9149
  %38 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %35, i32 0, i32 1, !dbg !9149
  %39 = extractvalue { i32, %struct.VEC_edge_gc** } %call56, 1, !dbg !9149
  store %struct.VEC_edge_gc** %39, %struct.VEC_edge_gc*** %38, align 8, !dbg !9149
  %40 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9149
  %41 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !9149
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false), !dbg !9149
  br label %for.cond57, !dbg !9149

for.cond57:                                       ; preds = %for.inc127, %if.then55
  %42 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9151
  %43 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %42, i32 0, i32 0, !dbg !9151
  %44 = load i32, i32* %43, align 8, !dbg !9151
  %45 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %42, i32 0, i32 1, !dbg !9151
  %46 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %45, align 8, !dbg !9151
  %call58 = call zeroext i8 @ei_cond(i32 %44, %struct.VEC_edge_gc** %46, %struct.edge_def** %e), !dbg !9151
  %tobool59 = icmp ne i8 %call58, 0, !dbg !9149
  br i1 %tobool59, label %for.body60, label %for.end128, !dbg !9149

for.body60:                                       ; preds = %for.cond57
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn61, metadata !9153, metadata !DIExpression()), !dbg !9155
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first, metadata !9156, metadata !DIExpression()), !dbg !9157
  store %struct.rtx_def* null, %struct.rtx_def** %first, align 8, !dbg !9157
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note62, metadata !9158, metadata !DIExpression()), !dbg !9159
  store %struct.rtx_def* null, %struct.rtx_def** %note62, align 8, !dbg !9159
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9160, metadata !DIExpression()), !dbg !9161
  %47 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9162
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 0, !dbg !9163
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9163
  store %struct.basic_block_def* %48, %struct.basic_block_def** %bb, align 8, !dbg !9161
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9164
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 7, !dbg !9164
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9164
  %50 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9164
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %50, i32 0, i32 0, !dbg !9164
  %51 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9164
  store %struct.rtx_def* %51, %struct.rtx_def** %insn61, align 8, !dbg !9164
  br label %for.cond63, !dbg !9164

for.cond63:                                       ; preds = %for.inc99, %for.body60
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn61, align 8, !dbg !9166
  %tobool64 = icmp ne %struct.rtx_def* %52, null, !dbg !9166
  br i1 %tobool64, label %land.rhs, label %land.end, !dbg !9166

land.rhs:                                         ; preds = %for.cond63
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn61, align 8, !dbg !9166
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9166
  %il65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 7, !dbg !9166
  %rtl66 = bitcast %union.basic_block_il_dependent* %il65 to %struct.rtl_bb_info**, !dbg !9166
  %55 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl66, align 8, !dbg !9166
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %55, i32 0, i32 1, !dbg !9166
  %56 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9166
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !9166
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !9166
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 2, !dbg !9166
  %rt_rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**, !dbg !9166
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx70, align 8, !dbg !9166
  %cmp71 = icmp ne %struct.rtx_def* %53, %57, !dbg !9166
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond63
  %58 = phi i1 [ false, %for.cond63 ], [ %cmp71, %land.rhs ], !dbg !9168
  br i1 %58, label %for.body72, label %for.end104, !dbg !9164

for.body72:                                       ; preds = %land.end
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn61, align 8, !dbg !9169
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !9169
  %bf.load73 = load i32, i32* %60, align 8, !dbg !9169
  %bf.clear74 = and i32 %bf.load73, 65535, !dbg !9169
  %cmp75 = icmp eq i32 %bf.clear74, 13, !dbg !9169
  br i1 %cmp75, label %if.then76, label %if.else87, !dbg !9172

if.then76:                                        ; preds = %for.body72
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn61, align 8, !dbg !9173
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !9173
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !9173
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 5, !dbg !9173
  %rt_int80 = bitcast %union.rtunion_def* %arrayidx79 to i32*, !dbg !9173
  %62 = load i32, i32* %rt_int80, align 8, !dbg !9173
  %cmp81 = icmp eq i32 %62, 6, !dbg !9176
  br i1 %cmp81, label %if.then82, label %if.end86, !dbg !9177

if.then82:                                        ; preds = %if.then76
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn61, align 8, !dbg !9178
  store %struct.rtx_def* %63, %struct.rtx_def** %note62, align 8, !dbg !9180
  %64 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !9181
  %cmp83 = icmp ne %struct.rtx_def* %64, null, !dbg !9183
  br i1 %cmp83, label %if.then84, label %if.end85, !dbg !9184

if.then84:                                        ; preds = %if.then82
  br label %for.end104, !dbg !9185

if.end85:                                         ; preds = %if.then82
  br label %if.end86, !dbg !9186

if.end86:                                         ; preds = %if.end85, %if.then76
  br label %if.end98, !dbg !9187

if.else87:                                        ; preds = %for.body72
  %65 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !9188
  %cmp88 = icmp eq %struct.rtx_def* %65, null, !dbg !9190
  br i1 %cmp88, label %land.lhs.true89, label %if.end97, !dbg !9191

land.lhs.true89:                                  ; preds = %if.else87
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn61, align 8, !dbg !9192
  %67 = load %struct.htab*, %struct.htab** @epilogue_insn_hash, align 8, !dbg !9193
  %call90 = call zeroext i8 @contains(%struct.rtx_def* %66, %struct.htab* %67), !dbg !9194
  %conv = zext i8 %call90 to i32, !dbg !9194
  %tobool91 = icmp ne i32 %conv, 0, !dbg !9194
  br i1 %tobool91, label %if.then92, label %if.end97, !dbg !9195

if.then92:                                        ; preds = %land.lhs.true89
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn61, align 8, !dbg !9196
  store %struct.rtx_def* %68, %struct.rtx_def** %first, align 8, !dbg !9198
  %69 = load %struct.rtx_def*, %struct.rtx_def** %note62, align 8, !dbg !9199
  %cmp93 = icmp ne %struct.rtx_def* %69, null, !dbg !9201
  br i1 %cmp93, label %if.then95, label %if.end96, !dbg !9202

if.then95:                                        ; preds = %if.then92
  br label %for.end104, !dbg !9203

if.end96:                                         ; preds = %if.then92
  br label %if.end97, !dbg !9204

if.end97:                                         ; preds = %if.end96, %land.lhs.true89, %if.else87
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.end86
  br label %for.inc99, !dbg !9205

for.inc99:                                        ; preds = %if.end98
  %70 = load %struct.rtx_def*, %struct.rtx_def** %insn61, align 8, !dbg !9166
  %u100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !9166
  %fld101 = bitcast %union.u* %u100 to [1 x %union.rtunion_def]*, !dbg !9166
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i64 0, i64 2, !dbg !9166
  %rt_rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**, !dbg !9166
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx103, align 8, !dbg !9166
  store %struct.rtx_def* %71, %struct.rtx_def** %insn61, align 8, !dbg !9166
  br label %for.cond63, !dbg !9166, !llvm.loop !9206

for.end104:                                       ; preds = %if.then95, %if.then84, %land.end
  %72 = load %struct.rtx_def*, %struct.rtx_def** %note62, align 8, !dbg !9208
  %tobool105 = icmp ne %struct.rtx_def* %72, null, !dbg !9208
  br i1 %tobool105, label %if.then106, label %if.end126, !dbg !9210

if.then106:                                       ; preds = %for.end104
  %73 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !9211
  %cmp107 = icmp eq %struct.rtx_def* %73, null, !dbg !9214
  br i1 %cmp107, label %if.then109, label %if.end113, !dbg !9215

if.then109:                                       ; preds = %if.then106
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9216
  %il110 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 7, !dbg !9216
  %rtl111 = bitcast %union.basic_block_il_dependent* %il110 to %struct.rtl_bb_info**, !dbg !9216
  %75 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl111, align 8, !dbg !9216
  %end_112 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %75, i32 0, i32 1, !dbg !9216
  %76 = load %struct.rtx_def*, %struct.rtx_def** %end_112, align 8, !dbg !9216
  store %struct.rtx_def* %76, %struct.rtx_def** %first, align 8, !dbg !9217
  br label %if.end113, !dbg !9218

if.end113:                                        ; preds = %if.then109, %if.then106
  %77 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !9219
  %u114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !9219
  %fld115 = bitcast %union.u* %u114 to [1 x %union.rtunion_def]*, !dbg !9219
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld115, i64 0, i64 1, !dbg !9219
  %rt_rtx117 = bitcast %union.rtunion_def* %arrayidx116 to %struct.rtx_def**, !dbg !9219
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx117, align 8, !dbg !9219
  %79 = load %struct.rtx_def*, %struct.rtx_def** %note62, align 8, !dbg !9221
  %cmp118 = icmp ne %struct.rtx_def* %78, %79, !dbg !9222
  br i1 %cmp118, label %if.then120, label %if.end125, !dbg !9223

if.then120:                                       ; preds = %if.end113
  %80 = load %struct.rtx_def*, %struct.rtx_def** %note62, align 8, !dbg !9224
  %81 = load %struct.rtx_def*, %struct.rtx_def** %note62, align 8, !dbg !9225
  %82 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !9226
  %u121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1, !dbg !9226
  %fld122 = bitcast %union.u* %u121 to [1 x %union.rtunion_def]*, !dbg !9226
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i64 0, i64 1, !dbg !9226
  %rt_rtx124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.rtx_def**, !dbg !9226
  %83 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx124, align 8, !dbg !9226
  call void @reorder_insns(%struct.rtx_def* %80, %struct.rtx_def* %81, %struct.rtx_def* %83), !dbg !9227
  br label %if.end125, !dbg !9227

if.end125:                                        ; preds = %if.then120, %if.end113
  br label %if.end126, !dbg !9228

if.end126:                                        ; preds = %if.end125, %for.end104
  br label %for.inc127, !dbg !9229

for.inc127:                                       ; preds = %if.end126
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !9151
  br label %for.cond57, !dbg !9151, !llvm.loop !9230

for.end128:                                       ; preds = %for.cond57
  br label %if.end129, !dbg !9232

if.end129:                                        ; preds = %for.end128, %if.end53
  ret void, !dbg !9233
}

declare dso_local i64 @htab_elements(%struct.htab*) #2

declare dso_local void @reorder_insns(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !9234 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !9237, metadata !DIExpression()), !dbg !9238
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !9239, metadata !DIExpression()), !dbg !9240
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !9241
  store i32 0, i32* %index, align 8, !dbg !9242
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !9243
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !9244
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !9245
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !9246
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !9246
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !9246
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !9247 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9251, metadata !DIExpression()), !dbg !9252
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !9253, metadata !DIExpression()), !dbg !9254
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9255
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !9255
  %5 = load i32, i32* %4, align 8, !dbg !9255
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !9255
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !9255
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !9255
  %tobool = icmp ne i8 %call, 0, !dbg !9255
  br i1 %tobool, label %if.else, label %if.then, !dbg !9257

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9258
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !9258
  %10 = load i32, i32* %9, align 8, !dbg !9258
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !9258
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !9258
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !9258
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !9260
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !9261
  store i8 1, i8* %retval, align 1, !dbg !9262
  br label %return, !dbg !9262

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !9263
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !9265
  store i8 0, i8* %retval, align 1, !dbg !9266
  br label %return, !dbg !9266

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !9267
  ret i8 %15, !dbg !9267
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !9268 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !9272, metadata !DIExpression()), !dbg !9273
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9274
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !9274
  %1 = load i32, i32* %index, align 8, !dbg !9274
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9274
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !9274
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !9274
  %5 = load i32, i32* %4, align 8, !dbg !9274
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !9274
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !9274
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !9274
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !9274
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9274

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9274
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !9274
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !9274
  %11 = load i32, i32* %10, align 8, !dbg !9274
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !9274
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !9274
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !9274
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !9274
  br label %cond.end, !dbg !9274

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9274

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9274
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9274
  %cmp = icmp ult i32 %1, %call2, !dbg !9274
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !9274

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9274
  br label %cond.end5, !dbg !9274

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9274

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !9274
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9275
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !9276
  %15 = load i32, i32* %index7, align 8, !dbg !9277
  %inc = add i32 %15, 1, !dbg !9277
  store i32 %inc, i32* %index7, align 8, !dbg !9277
  ret void, !dbg !9278
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @current_function_name() #0 !dbg !9279 {
entry:
  %retval = alloca i8*, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9282
  %cmp = icmp eq %struct.function* %0, null, !dbg !9284
  br i1 %cmp, label %if.then, label %if.end, !dbg !9285

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), i8** %retval, align 8, !dbg !9286
  br label %return, !dbg !9286

if.end:                                           ; preds = %entry
  %1 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !9287
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9288
  %decl = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 6, !dbg !9289
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !9289
  %call = call i8* %1(%union.tree_node* %3, i32 2), !dbg !9290
  store i8* %call, i8** %retval, align 8, !dbg !9291
  br label %return, !dbg !9291

return:                                           ; preds = %if.end, %if.then
  %4 = load i8*, i8** %retval, align 8, !dbg !9292
  ret i8* %4, !dbg !9292
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @used_types_insert(%union.tree_node* %t) #0 !dbg !9293 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !9294, metadata !DIExpression()), !dbg !9295
  br label %while.cond, !dbg !9296

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9297
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !9297
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !9297
  %bf.load = load i64, i64* %1, align 8, !dbg !9297
  %bf.clear = and i64 %bf.load, 65535, !dbg !9297
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9297
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !9297
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !9297

lor.lhs.false:                                    ; preds = %while.cond
  %2 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9297
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9297
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !9297
  %bf.load2 = load i64, i64* %3, align 8, !dbg !9297
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !9297
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !9297
  %cmp5 = icmp eq i32 %bf.cast4, 12, !dbg !9297
  br i1 %cmp5, label %lor.end, label %lor.rhs, !dbg !9298

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9299
  %base6 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9299
  %5 = bitcast %struct.tree_base* %base6 to i64*, !dbg !9299
  %bf.load7 = load i64, i64* %5, align 8, !dbg !9299
  %bf.clear8 = and i64 %bf.load7, 65535, !dbg !9299
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !9299
  %cmp10 = icmp eq i32 %bf.cast9, 15, !dbg !9300
  br label %lor.end, !dbg !9298

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %while.cond
  %6 = phi i1 [ true, %lor.lhs.false ], [ true, %while.cond ], [ %cmp10, %lor.rhs ]
  br i1 %6, label %while.body, label %while.end, !dbg !9296

while.body:                                       ; preds = %lor.end
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9301
  %type = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !9301
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 12, !dbg !9301
  %8 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !9301
  %tobool = icmp ne %union.tree_node* %8, null, !dbg !9301
  br i1 %tobool, label %if.then, label %if.else, !dbg !9303

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !9304

if.else:                                          ; preds = %while.body
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9305
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !9305
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !9305
  %10 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !9305
  store %union.tree_node* %10, %union.tree_node** %t.addr, align 8, !dbg !9306
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %while.cond, !dbg !9296, !llvm.loop !9307

while.end:                                        ; preds = %if.then, %lor.end
  %11 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9309
  %type12 = bitcast %union.tree_node* %11 to %struct.tree_type*, !dbg !9309
  %name13 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type12, i32 0, i32 12, !dbg !9309
  %12 = load %union.tree_node*, %union.tree_node** %name13, align 8, !dbg !9309
  %cmp14 = icmp eq %union.tree_node* %12, null, !dbg !9311
  br i1 %cmp14, label %if.then22, label %lor.lhs.false15, !dbg !9312

lor.lhs.false15:                                  ; preds = %while.end
  %13 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9313
  %type16 = bitcast %union.tree_node* %13 to %struct.tree_type*, !dbg !9313
  %name17 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type16, i32 0, i32 12, !dbg !9313
  %14 = load %union.tree_node*, %union.tree_node** %name17, align 8, !dbg !9313
  %15 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9314
  %type18 = bitcast %union.tree_node* %15 to %struct.tree_type*, !dbg !9314
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type18, i32 0, i32 16, !dbg !9314
  %16 = load %union.tree_node*, %union.tree_node** %main_variant, align 8, !dbg !9314
  %type19 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !9314
  %name20 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type19, i32 0, i32 12, !dbg !9314
  %17 = load %union.tree_node*, %union.tree_node** %name20, align 8, !dbg !9314
  %cmp21 = icmp eq %union.tree_node* %14, %17, !dbg !9315
  br i1 %cmp21, label %if.then22, label %if.end25, !dbg !9316

if.then22:                                        ; preds = %lor.lhs.false15, %while.end
  %18 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9317
  %type23 = bitcast %union.tree_node* %18 to %struct.tree_type*, !dbg !9317
  %main_variant24 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type23, i32 0, i32 16, !dbg !9317
  %19 = load %union.tree_node*, %union.tree_node** %main_variant24, align 8, !dbg !9317
  store %union.tree_node* %19, %union.tree_node** %t.addr, align 8, !dbg !9318
  br label %if.end25, !dbg !9319

if.end25:                                         ; preds = %if.then22, %lor.lhs.false15
  %20 = load i32, i32* @debug_info_level, align 4, !dbg !9320
  %cmp26 = icmp ugt i32 %20, 0, !dbg !9322
  br i1 %cmp26, label %if.then27, label %if.end32, !dbg !9323

if.then27:                                        ; preds = %if.end25
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9324
  %tobool28 = icmp ne %struct.function* %21, null, !dbg !9324
  br i1 %tobool28, label %if.then29, label %if.else30, !dbg !9327

if.then29:                                        ; preds = %if.then27
  %22 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9328
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9329
  call void @used_types_insert_helper(%union.tree_node* %22, %struct.function* %23), !dbg !9330
  br label %if.end31, !dbg !9330

if.else30:                                        ; preds = %if.then27
  %24 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !9331
  %25 = load %union.tree_node*, %union.tree_node** @types_used_by_cur_var_decl, align 8, !dbg !9331
  %call = call %union.tree_node* @tree_cons_stat(%union.tree_node* %24, %union.tree_node* null, %union.tree_node* %25), !dbg !9331
  store %union.tree_node* %call, %union.tree_node** @types_used_by_cur_var_decl, align 8, !dbg !9332
  br label %if.end31

if.end31:                                         ; preds = %if.else30, %if.then29
  br label %if.end32, !dbg !9333

if.end32:                                         ; preds = %if.end31, %if.end25
  ret void, !dbg !9334
}

; Function Attrs: noinline nounwind uwtable
define internal void @used_types_insert_helper(%union.tree_node* %type, %struct.function* %func) #0 !dbg !9335 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %func.addr = alloca %struct.function*, align 8
  %slot = alloca i8**, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9338, metadata !DIExpression()), !dbg !9339
  store %struct.function* %func, %struct.function** %func.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %func.addr, metadata !9340, metadata !DIExpression()), !dbg !9341
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9342
  %cmp = icmp ne %union.tree_node* %0, null, !dbg !9344
  br i1 %cmp, label %land.lhs.true, label %if.end10, !dbg !9345

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %func.addr, align 8, !dbg !9346
  %cmp1 = icmp ne %struct.function* %1, null, !dbg !9347
  br i1 %cmp1, label %if.then, label %if.end10, !dbg !9348

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !9349, metadata !DIExpression()), !dbg !9351
  %2 = load %struct.function*, %struct.function** %func.addr, align 8, !dbg !9352
  %used_types_hash = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 12, !dbg !9354
  %3 = load %struct.htab*, %struct.htab** %used_types_hash, align 8, !dbg !9354
  %cmp2 = icmp eq %struct.htab* %3, null, !dbg !9355
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !9356

if.then3:                                         ; preds = %if.then
  %4 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !9357
  %5 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** @htab_eq_pointer, align 8, !dbg !9357
  %call = call %struct.htab* @htab_create_alloc(i64 37, i32 (i8*)* %4, i32 (i8*, i8*)* %5, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !9357
  %6 = load %struct.function*, %struct.function** %func.addr, align 8, !dbg !9358
  %used_types_hash4 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 12, !dbg !9359
  store %struct.htab* %call, %struct.htab** %used_types_hash4, align 8, !dbg !9360
  br label %if.end, !dbg !9358

if.end:                                           ; preds = %if.then3, %if.then
  %7 = load %struct.function*, %struct.function** %func.addr, align 8, !dbg !9361
  %used_types_hash5 = getelementptr inbounds %struct.function, %struct.function* %7, i32 0, i32 12, !dbg !9362
  %8 = load %struct.htab*, %struct.htab** %used_types_hash5, align 8, !dbg !9362
  %9 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9363
  %10 = bitcast %union.tree_node* %9 to i8*, !dbg !9363
  %call6 = call i8** @htab_find_slot(%struct.htab* %8, i8* %10, i32 1), !dbg !9364
  store i8** %call6, i8*** %slot, align 8, !dbg !9365
  %11 = load i8**, i8*** %slot, align 8, !dbg !9366
  %12 = load i8*, i8** %11, align 8, !dbg !9368
  %cmp7 = icmp eq i8* %12, null, !dbg !9369
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !9370

if.then8:                                         ; preds = %if.end
  %13 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9371
  %14 = bitcast %union.tree_node* %13 to i8*, !dbg !9371
  %15 = load i8**, i8*** %slot, align 8, !dbg !9372
  store i8* %14, i8** %15, align 8, !dbg !9373
  br label %if.end9, !dbg !9374

if.end9:                                          ; preds = %if.then8, %if.end
  br label %if.end10, !dbg !9375

if.end10:                                         ; preds = %if.end9, %land.lhs.true, %entry
  ret void, !dbg !9376
}

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @types_used_by_vars_do_hash(i8* %x) #0 !dbg !9377 {
entry:
  %x.addr = alloca i8*, align 8
  %entry1 = alloca %struct.types_used_by_vars_entry*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !9378, metadata !DIExpression()), !dbg !9379
  call void @llvm.dbg.declare(metadata %struct.types_used_by_vars_entry** %entry1, metadata !9380, metadata !DIExpression()), !dbg !9381
  %0 = load i8*, i8** %x.addr, align 8, !dbg !9382
  %1 = bitcast i8* %0 to %struct.types_used_by_vars_entry*, !dbg !9383
  store %struct.types_used_by_vars_entry* %1, %struct.types_used_by_vars_entry** %entry1, align 8, !dbg !9381
  %2 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %entry1, align 8, !dbg !9384
  %call = call i32 @hash_types_used_by_vars_entry(%struct.types_used_by_vars_entry* %2), !dbg !9385
  ret i32 %call, !dbg !9386
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_types_used_by_vars_entry(%struct.types_used_by_vars_entry* %entry1) #0 !dbg !9387 {
entry:
  %entry.addr = alloca %struct.types_used_by_vars_entry*, align 8
  store %struct.types_used_by_vars_entry* %entry1, %struct.types_used_by_vars_entry** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.types_used_by_vars_entry** %entry.addr, metadata !9390, metadata !DIExpression()), !dbg !9391
  %0 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %entry.addr, align 8, !dbg !9392
  %tobool = icmp ne %struct.types_used_by_vars_entry* %0, null, !dbg !9392
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !9392

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %entry.addr, align 8, !dbg !9392
  %var_decl = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %1, i32 0, i32 1, !dbg !9392
  %2 = load %union.tree_node*, %union.tree_node** %var_decl, align 8, !dbg !9392
  %tobool2 = icmp ne %union.tree_node* %2, null, !dbg !9392
  br i1 %tobool2, label %land.lhs.true3, label %cond.true, !dbg !9392

land.lhs.true3:                                   ; preds = %land.lhs.true
  %3 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %entry.addr, align 8, !dbg !9392
  %type = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %3, i32 0, i32 0, !dbg !9392
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9392
  %tobool4 = icmp ne %union.tree_node* %4, null, !dbg !9392
  br i1 %tobool4, label %cond.false, label %cond.true, !dbg !9392

cond.true:                                        ; preds = %land.lhs.true3, %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5498, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !9392
  br label %cond.end, !dbg !9392

cond.false:                                       ; preds = %land.lhs.true3
  br label %cond.end, !dbg !9392

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9392
  %5 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %entry.addr, align 8, !dbg !9393
  %type5 = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %5, i32 0, i32 0, !dbg !9393
  %6 = bitcast %union.tree_node** %type5 to i8*, !dbg !9393
  %7 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %entry.addr, align 8, !dbg !9393
  %var_decl6 = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %7, i32 0, i32 1, !dbg !9393
  %8 = bitcast %union.tree_node** %var_decl6 to i8*, !dbg !9393
  %call = call i32 @iterative_hash(i8* %8, i64 8, i32 0), !dbg !9393
  %call7 = call i32 @iterative_hash(i8* %6, i64 8, i32 %call), !dbg !9393
  ret i32 %call7, !dbg !9394
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @types_used_by_vars_eq(i8* %x1, i8* %x2) #0 !dbg !9395 {
entry:
  %x1.addr = alloca i8*, align 8
  %x2.addr = alloca i8*, align 8
  %e1 = alloca %struct.types_used_by_vars_entry*, align 8
  %e2 = alloca %struct.types_used_by_vars_entry*, align 8
  store i8* %x1, i8** %x1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x1.addr, metadata !9396, metadata !DIExpression()), !dbg !9397
  store i8* %x2, i8** %x2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x2.addr, metadata !9398, metadata !DIExpression()), !dbg !9399
  call void @llvm.dbg.declare(metadata %struct.types_used_by_vars_entry** %e1, metadata !9400, metadata !DIExpression()), !dbg !9401
  %0 = load i8*, i8** %x1.addr, align 8, !dbg !9402
  %1 = bitcast i8* %0 to %struct.types_used_by_vars_entry*, !dbg !9403
  store %struct.types_used_by_vars_entry* %1, %struct.types_used_by_vars_entry** %e1, align 8, !dbg !9401
  call void @llvm.dbg.declare(metadata %struct.types_used_by_vars_entry** %e2, metadata !9404, metadata !DIExpression()), !dbg !9405
  %2 = load i8*, i8** %x2.addr, align 8, !dbg !9406
  %3 = bitcast i8* %2 to %struct.types_used_by_vars_entry*, !dbg !9407
  store %struct.types_used_by_vars_entry* %3, %struct.types_used_by_vars_entry** %e2, align 8, !dbg !9405
  %4 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %e1, align 8, !dbg !9408
  %var_decl = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %4, i32 0, i32 1, !dbg !9409
  %5 = load %union.tree_node*, %union.tree_node** %var_decl, align 8, !dbg !9409
  %6 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %e2, align 8, !dbg !9410
  %var_decl1 = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %6, i32 0, i32 1, !dbg !9411
  %7 = load %union.tree_node*, %union.tree_node** %var_decl1, align 8, !dbg !9411
  %cmp = icmp eq %union.tree_node* %5, %7, !dbg !9412
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !9413

land.rhs:                                         ; preds = %entry
  %8 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %e1, align 8, !dbg !9414
  %type = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %8, i32 0, i32 0, !dbg !9415
  %9 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9415
  %10 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %e2, align 8, !dbg !9416
  %type2 = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %10, i32 0, i32 0, !dbg !9417
  %11 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !9417
  %cmp3 = icmp eq %union.tree_node* %9, %11, !dbg !9418
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %12 = phi i1 [ false, %entry ], [ %cmp3, %land.rhs ], !dbg !9419
  %land.ext = zext i1 %12 to i32, !dbg !9413
  ret i32 %land.ext, !dbg !9420
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @types_used_by_var_decl_insert(%union.tree_node* %type, %union.tree_node* %var_decl) #0 !dbg !9421 {
entry:
  %type.addr = alloca %union.tree_node*, align 8
  %var_decl.addr = alloca %union.tree_node*, align 8
  %slot = alloca i8**, align 8
  %e = alloca %struct.types_used_by_vars_entry, align 8
  %entry10 = alloca %struct.types_used_by_vars_entry*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9424, metadata !DIExpression()), !dbg !9425
  store %union.tree_node* %var_decl, %union.tree_node** %var_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var_decl.addr, metadata !9426, metadata !DIExpression()), !dbg !9427
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9428
  %cmp = icmp ne %union.tree_node* %0, null, !dbg !9430
  br i1 %cmp, label %land.lhs.true, label %if.end15, !dbg !9431

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !9432
  %cmp1 = icmp ne %union.tree_node* %1, null, !dbg !9433
  br i1 %cmp1, label %if.then, label %if.end15, !dbg !9434

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !9435, metadata !DIExpression()), !dbg !9437
  call void @llvm.dbg.declare(metadata %struct.types_used_by_vars_entry* %e, metadata !9438, metadata !DIExpression()), !dbg !9439
  %2 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !9440
  %var_decl2 = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %e, i32 0, i32 1, !dbg !9441
  store %union.tree_node* %2, %union.tree_node** %var_decl2, align 8, !dbg !9442
  %3 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9443
  %type3 = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %e, i32 0, i32 0, !dbg !9444
  store %union.tree_node* %3, %union.tree_node** %type3, align 8, !dbg !9445
  %4 = load %struct.htab*, %struct.htab** @types_used_by_vars_hash, align 8, !dbg !9446
  %cmp4 = icmp eq %struct.htab* %4, null, !dbg !9448
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !9449

if.then5:                                         ; preds = %if.then
  %call = call %struct.htab* @htab_create_alloc(i64 37, i32 (i8*)* @types_used_by_vars_do_hash, i32 (i8*, i8*)* @types_used_by_vars_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !9450
  store %struct.htab* %call, %struct.htab** @types_used_by_vars_hash, align 8, !dbg !9451
  br label %if.end, !dbg !9452

if.end:                                           ; preds = %if.then5, %if.then
  %5 = load %struct.htab*, %struct.htab** @types_used_by_vars_hash, align 8, !dbg !9453
  %6 = bitcast %struct.types_used_by_vars_entry* %e to i8*, !dbg !9454
  %call6 = call i32 @hash_types_used_by_vars_entry(%struct.types_used_by_vars_entry* %e), !dbg !9455
  %call7 = call i8** @htab_find_slot_with_hash(%struct.htab* %5, i8* %6, i32 %call6, i32 1), !dbg !9456
  store i8** %call7, i8*** %slot, align 8, !dbg !9457
  %7 = load i8**, i8*** %slot, align 8, !dbg !9458
  %8 = load i8*, i8** %7, align 8, !dbg !9460
  %cmp8 = icmp eq i8* %8, null, !dbg !9461
  br i1 %cmp8, label %if.then9, label %if.end14, !dbg !9462

if.then9:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.types_used_by_vars_entry** %entry10, metadata !9463, metadata !DIExpression()), !dbg !9465
  %call11 = call i8* @ggc_alloc_stat(i64 16), !dbg !9466
  %9 = bitcast i8* %call11 to %struct.types_used_by_vars_entry*, !dbg !9467
  store %struct.types_used_by_vars_entry* %9, %struct.types_used_by_vars_entry** %entry10, align 8, !dbg !9468
  %10 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9469
  %11 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %entry10, align 8, !dbg !9470
  %type12 = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %11, i32 0, i32 0, !dbg !9471
  store %union.tree_node* %10, %union.tree_node** %type12, align 8, !dbg !9472
  %12 = load %union.tree_node*, %union.tree_node** %var_decl.addr, align 8, !dbg !9473
  %13 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %entry10, align 8, !dbg !9474
  %var_decl13 = getelementptr inbounds %struct.types_used_by_vars_entry, %struct.types_used_by_vars_entry* %13, i32 0, i32 1, !dbg !9475
  store %union.tree_node* %12, %union.tree_node** %var_decl13, align 8, !dbg !9476
  %14 = load %struct.types_used_by_vars_entry*, %struct.types_used_by_vars_entry** %entry10, align 8, !dbg !9477
  %15 = bitcast %struct.types_used_by_vars_entry* %14 to i8*, !dbg !9477
  %16 = load i8**, i8*** %slot, align 8, !dbg !9478
  store i8* %15, i8** %16, align 8, !dbg !9479
  br label %if.end14, !dbg !9480

if.end14:                                         ; preds = %if.then9, %if.end
  br label %if.end15, !dbg !9481

if.end15:                                         ; preds = %if.end14, %land.lhs.true, %entry
  ret void, !dbg !9482
}

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_check_leaf_regs() #0 !dbg !9483 {
entry:
  ret i32 0, !dbg !9484
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_thread_prologue_and_epilogue() #0 !dbg !9485 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !9486
  %tobool = icmp ne i32 %0, 0, !dbg !9486
  br i1 %tobool, label %if.then, label %if.end, !dbg !9488

if.then:                                          ; preds = %entry
  %call = call zeroext i8 @cleanup_cfg(i32 1), !dbg !9489
  br label %if.end, !dbg !9489

if.end:                                           ; preds = %if.then, %entry
  call void @thread_prologue_and_epilogue_insns(), !dbg !9490
  ret i32 0, !dbg !9491
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_match_asm_constraints() #0 !dbg !9492 {
entry:
  %retval = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %p_sets = alloca %struct.rtx_def**, align 8
  %noutputs = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9493, metadata !DIExpression()), !dbg !9494
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9495, metadata !DIExpression()), !dbg !9496
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !9497, metadata !DIExpression()), !dbg !9498
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %p_sets, metadata !9499, metadata !DIExpression()), !dbg !9500
  call void @llvm.dbg.declare(metadata i32* %noutputs, metadata !9501, metadata !DIExpression()), !dbg !9502
  %0 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 32), align 4, !dbg !9503
  %tobool = icmp ne i8 %0, 0, !dbg !9505
  br i1 %tobool, label %if.end, label %if.then, !dbg !9506

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !9507
  br label %return, !dbg !9507

if.end:                                           ; preds = %entry
  %call = call i32 @df_set_flags(i32 32), !dbg !9508
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9509
  %cfg = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 1, !dbg !9509
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9509
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !9509
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !9509
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 6, !dbg !9509
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !9509
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !9509
  br label %for.cond, !dbg !9509

for.cond:                                         ; preds = %for.inc65, %if.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9511
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9511
  %cfg1 = getelementptr inbounds %struct.function, %struct.function* %6, i32 0, i32 1, !dbg !9511
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg1, align 8, !dbg !9511
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !9511
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !9511
  %cmp = icmp ne %struct.basic_block_def* %5, %8, !dbg !9511
  br i1 %cmp, label %for.body, label %for.end67, !dbg !9509

for.body:                                         ; preds = %for.cond
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9513
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 7, !dbg !9513
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9513
  %10 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9513
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %10, i32 0, i32 0, !dbg !9513
  %11 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9513
  store %struct.rtx_def* %11, %struct.rtx_def** %insn, align 8, !dbg !9513
  br label %for.cond2, !dbg !9513

for.cond2:                                        ; preds = %for.inc, %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9516
  %tobool3 = icmp ne %struct.rtx_def* %12, null, !dbg !9516
  br i1 %tobool3, label %land.rhs, label %land.end, !dbg !9516

land.rhs:                                         ; preds = %for.cond2
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9516
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9516
  %il4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 7, !dbg !9516
  %rtl5 = bitcast %union.basic_block_il_dependent* %il4 to %struct.rtl_bb_info**, !dbg !9516
  %15 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl5, align 8, !dbg !9516
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %15, i32 0, i32 1, !dbg !9516
  %16 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9516
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !9516
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9516
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9516
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9516
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9516
  %cmp6 = icmp ne %struct.rtx_def* %13, %17, !dbg !9516
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond2
  %18 = phi i1 [ false, %for.cond2 ], [ %cmp6, %land.rhs ], !dbg !9518
  br i1 %18, label %for.body7, label %for.end, !dbg !9513

for.body7:                                        ; preds = %land.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9519
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !9519
  %bf.load = load i32, i32* %20, align 8, !dbg !9519
  %bf.clear = and i32 %bf.load, 65535, !dbg !9519
  %cmp8 = icmp eq i32 %bf.clear, 8, !dbg !9519
  br i1 %cmp8, label %if.end21, label %lor.lhs.false, !dbg !9519

lor.lhs.false:                                    ; preds = %for.body7
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9519
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !9519
  %bf.load9 = load i32, i32* %22, align 8, !dbg !9519
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !9519
  %cmp11 = icmp eq i32 %bf.clear10, 7, !dbg !9519
  br i1 %cmp11, label %if.end21, label %lor.lhs.false12, !dbg !9519

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9519
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !9519
  %bf.load13 = load i32, i32* %24, align 8, !dbg !9519
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !9519
  %cmp15 = icmp eq i32 %bf.clear14, 9, !dbg !9519
  br i1 %cmp15, label %if.end21, label %lor.lhs.false16, !dbg !9519

lor.lhs.false16:                                  ; preds = %lor.lhs.false12
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9519
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !9519
  %bf.load17 = load i32, i32* %26, align 8, !dbg !9519
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !9519
  %cmp19 = icmp eq i32 %bf.clear18, 10, !dbg !9519
  br i1 %cmp19, label %if.end21, label %if.then20, !dbg !9522

if.then20:                                        ; preds = %lor.lhs.false16
  br label %for.inc, !dbg !9523

if.end21:                                         ; preds = %lor.lhs.false16, %lor.lhs.false12, %lor.lhs.false, %for.body7
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9524
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !9524
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !9524
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 5, !dbg !9524
  %rt_rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !9524
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx25, align 8, !dbg !9524
  store %struct.rtx_def* %28, %struct.rtx_def** %pat, align 8, !dbg !9525
  %29 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9526
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !9526
  %bf.load26 = load i32, i32* %30, align 8, !dbg !9526
  %bf.clear27 = and i32 %bf.load26, 65535, !dbg !9526
  %cmp28 = icmp eq i32 %bf.clear27, 15, !dbg !9528
  br i1 %cmp28, label %if.then29, label %if.else, !dbg !9529

if.then29:                                        ; preds = %if.end21
  %31 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9530
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !9530
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !9530
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 0, !dbg !9530
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtvec_def**, !dbg !9530
  %32 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !9530
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %32, i32 0, i32 1, !dbg !9530
  %arrayidx33 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !9530
  store %struct.rtx_def** %arrayidx33, %struct.rtx_def*** %p_sets, align 8, !dbg !9531
  %33 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9532
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !9532
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !9532
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 0, !dbg !9532
  %rt_rtvec37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtvec_def**, !dbg !9532
  %34 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec37, align 8, !dbg !9532
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %34, i32 0, i32 0, !dbg !9532
  %35 = load i32, i32* %num_elem, align 8, !dbg !9532
  store i32 %35, i32* %noutputs, align 4, !dbg !9533
  br label %if.end48, !dbg !9534

if.else:                                          ; preds = %if.end21
  %36 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !9535
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !9535
  %bf.load38 = load i32, i32* %37, align 8, !dbg !9535
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !9535
  %cmp40 = icmp eq i32 %bf.clear39, 23, !dbg !9537
  br i1 %cmp40, label %if.then41, label %if.else46, !dbg !9538

if.then41:                                        ; preds = %if.else
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9539
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !9539
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !9539
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 5, !dbg !9539
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !9539
  store %struct.rtx_def** %rt_rtx45, %struct.rtx_def*** %p_sets, align 8, !dbg !9540
  store i32 1, i32* %noutputs, align 4, !dbg !9541
  br label %if.end47, !dbg !9542

if.else46:                                        ; preds = %if.else
  br label %for.inc, !dbg !9543

if.end47:                                         ; preds = %if.then41
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then29
  %39 = load %struct.rtx_def**, %struct.rtx_def*** %p_sets, align 8, !dbg !9544
  %40 = load %struct.rtx_def*, %struct.rtx_def** %39, align 8, !dbg !9544
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !9544
  %bf.load49 = load i32, i32* %41, align 8, !dbg !9544
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !9544
  %cmp51 = icmp eq i32 %bf.clear50, 23, !dbg !9546
  br i1 %cmp51, label %land.lhs.true, label %if.end60, !dbg !9547

land.lhs.true:                                    ; preds = %if.end48
  %42 = load %struct.rtx_def**, %struct.rtx_def*** %p_sets, align 8, !dbg !9548
  %43 = load %struct.rtx_def*, %struct.rtx_def** %42, align 8, !dbg !9548
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !9548
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !9548
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 1, !dbg !9548
  %rt_rtx55 = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**, !dbg !9548
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx55, align 8, !dbg !9548
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !9548
  %bf.load56 = load i32, i32* %45, align 8, !dbg !9548
  %bf.clear57 = and i32 %bf.load56, 65535, !dbg !9548
  %cmp58 = icmp eq i32 %bf.clear57, 17, !dbg !9549
  br i1 %cmp58, label %if.then59, label %if.end60, !dbg !9550

if.then59:                                        ; preds = %land.lhs.true
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9551
  %47 = load %struct.rtx_def**, %struct.rtx_def*** %p_sets, align 8, !dbg !9552
  %48 = load i32, i32* %noutputs, align 4, !dbg !9553
  call void @match_asm_constraints_1(%struct.rtx_def* %46, %struct.rtx_def** %47, i32 %48), !dbg !9554
  br label %if.end60, !dbg !9554

if.end60:                                         ; preds = %if.then59, %land.lhs.true, %if.end48
  br label %for.inc, !dbg !9555

for.inc:                                          ; preds = %if.end60, %if.else46, %if.then20
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9516
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !9516
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !9516
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 2, !dbg !9516
  %rt_rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**, !dbg !9516
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx64, align 8, !dbg !9516
  store %struct.rtx_def* %50, %struct.rtx_def** %insn, align 8, !dbg !9516
  br label %for.cond2, !dbg !9516, !llvm.loop !9556

for.end:                                          ; preds = %land.end
  br label %for.inc65, !dbg !9558

for.inc65:                                        ; preds = %for.end
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9511
  %next_bb66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 6, !dbg !9511
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb66, align 8, !dbg !9511
  store %struct.basic_block_def* %52, %struct.basic_block_def** %bb, align 8, !dbg !9511
  br label %for.cond, !dbg !9511, !llvm.loop !9559

for.end67:                                        ; preds = %for.cond
  store i32 131072, i32* %retval, align 4, !dbg !9561
  br label %return, !dbg !9561

return:                                           ; preds = %for.end67, %if.then
  %53 = load i32, i32* %retval, align 4, !dbg !9562
  ret i32 %53, !dbg !9562
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_mx_temp_slot_address_entry(i8* %x_p) #0 !dbg !9563 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.temp_slot_address_entry*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !9564, metadata !DIExpression()), !dbg !9565
  call void @llvm.dbg.declare(metadata %struct.temp_slot_address_entry** %x, metadata !9566, metadata !DIExpression()), !dbg !9568
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !9569
  %1 = bitcast i8* %0 to %struct.temp_slot_address_entry*, !dbg !9570
  store %struct.temp_slot_address_entry* %1, %struct.temp_slot_address_entry** %x, align 8, !dbg !9568
  %2 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9571
  %cmp = icmp ne %struct.temp_slot_address_entry* %2, null, !dbg !9571
  br i1 %cmp, label %land.lhs.true, label %if.end12, !dbg !9571

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9571
  %4 = bitcast %struct.temp_slot_address_entry* %3 to i8*, !dbg !9571
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !9571
  br i1 %cmp1, label %land.lhs.true2, label %if.end12, !dbg !9571

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9571
  %6 = bitcast %struct.temp_slot_address_entry* %5 to i8*, !dbg !9571
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !9571
  %tobool = icmp ne i32 %call, 0, !dbg !9571
  br i1 %tobool, label %if.end12, label %if.then, !dbg !9573

if.then:                                          ; preds = %land.lhs.true2
  br label %do.body, !dbg !9574

do.body:                                          ; preds = %if.then
  %7 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9576
  %address = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %7, i32 0, i32 1, !dbg !9576
  %8 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8, !dbg !9576
  %cmp3 = icmp ne %struct.rtx_def* %8, null, !dbg !9576
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !9579

if.then4:                                         ; preds = %do.body
  %9 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9576
  %address5 = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %9, i32 0, i32 1, !dbg !9576
  %10 = load %struct.rtx_def*, %struct.rtx_def** %address5, align 8, !dbg !9576
  %11 = bitcast %struct.rtx_def* %10 to i8*, !dbg !9576
  call void @gt_ggc_mx_rtx_def(i8* %11), !dbg !9576
  br label %if.end, !dbg !9576

if.end:                                           ; preds = %if.then4, %do.body
  br label %do.end, !dbg !9579

do.end:                                           ; preds = %if.end
  br label %do.body6, !dbg !9580

do.body6:                                         ; preds = %do.end
  %12 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9581
  %temp_slot = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %12, i32 0, i32 2, !dbg !9581
  %13 = load %struct.temp_slot*, %struct.temp_slot** %temp_slot, align 8, !dbg !9581
  %cmp7 = icmp ne %struct.temp_slot* %13, null, !dbg !9581
  br i1 %cmp7, label %if.then8, label %if.end10, !dbg !9584

if.then8:                                         ; preds = %do.body6
  %14 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9581
  %temp_slot9 = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %14, i32 0, i32 2, !dbg !9581
  %15 = load %struct.temp_slot*, %struct.temp_slot** %temp_slot9, align 8, !dbg !9581
  %16 = bitcast %struct.temp_slot* %15 to i8*, !dbg !9581
  call void @gt_ggc_mx_temp_slot(i8* %16), !dbg !9581
  br label %if.end10, !dbg !9581

if.end10:                                         ; preds = %if.then8, %do.body6
  br label %do.end11, !dbg !9584

do.end11:                                         ; preds = %if.end10
  br label %if.end12, !dbg !9585

if.end12:                                         ; preds = %do.end11, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !9586
}

declare dso_local i32 @ggc_set_mark(i8*) #2

declare dso_local void @gt_ggc_mx_rtx_def(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_mx_temp_slot(i8* %x_p) #0 !dbg !9587 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.temp_slot*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !9588, metadata !DIExpression()), !dbg !9589
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %x, metadata !9590, metadata !DIExpression()), !dbg !9592
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !9593
  %1 = bitcast i8* %0 to %struct.temp_slot*, !dbg !9594
  store %struct.temp_slot* %1, %struct.temp_slot** %x, align 8, !dbg !9592
  %2 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9595
  %cmp = icmp ne %struct.temp_slot* %2, null, !dbg !9595
  br i1 %cmp, label %land.lhs.true, label %if.end24, !dbg !9595

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9595
  %4 = bitcast %struct.temp_slot* %3 to i8*, !dbg !9595
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !9595
  br i1 %cmp1, label %land.lhs.true2, label %if.end24, !dbg !9595

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9595
  %6 = bitcast %struct.temp_slot* %5 to i8*, !dbg !9595
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !9595
  %tobool = icmp ne i32 %call, 0, !dbg !9595
  br i1 %tobool, label %if.end24, label %if.then, !dbg !9597

if.then:                                          ; preds = %land.lhs.true2
  br label %do.body, !dbg !9598

do.body:                                          ; preds = %if.then
  %7 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9600
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %7, i32 0, i32 0, !dbg !9600
  %8 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !9600
  %cmp3 = icmp ne %struct.temp_slot* %8, null, !dbg !9600
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !9603

if.then4:                                         ; preds = %do.body
  %9 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9600
  %next5 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %9, i32 0, i32 0, !dbg !9600
  %10 = load %struct.temp_slot*, %struct.temp_slot** %next5, align 8, !dbg !9600
  %11 = bitcast %struct.temp_slot* %10 to i8*, !dbg !9600
  call void @gt_ggc_mx_temp_slot(i8* %11), !dbg !9600
  br label %if.end, !dbg !9600

if.end:                                           ; preds = %if.then4, %do.body
  br label %do.end, !dbg !9603

do.end:                                           ; preds = %if.end
  br label %do.body6, !dbg !9604

do.body6:                                         ; preds = %do.end
  %12 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9605
  %prev = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %12, i32 0, i32 1, !dbg !9605
  %13 = load %struct.temp_slot*, %struct.temp_slot** %prev, align 8, !dbg !9605
  %cmp7 = icmp ne %struct.temp_slot* %13, null, !dbg !9605
  br i1 %cmp7, label %if.then8, label %if.end10, !dbg !9608

if.then8:                                         ; preds = %do.body6
  %14 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9605
  %prev9 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %14, i32 0, i32 1, !dbg !9605
  %15 = load %struct.temp_slot*, %struct.temp_slot** %prev9, align 8, !dbg !9605
  %16 = bitcast %struct.temp_slot* %15 to i8*, !dbg !9605
  call void @gt_ggc_mx_temp_slot(i8* %16), !dbg !9605
  br label %if.end10, !dbg !9605

if.end10:                                         ; preds = %if.then8, %do.body6
  br label %do.end11, !dbg !9608

do.end11:                                         ; preds = %if.end10
  br label %do.body12, !dbg !9609

do.body12:                                        ; preds = %do.end11
  %17 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9610
  %slot = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %17, i32 0, i32 2, !dbg !9610
  %18 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !9610
  %cmp13 = icmp ne %struct.rtx_def* %18, null, !dbg !9610
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !9613

if.then14:                                        ; preds = %do.body12
  %19 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9610
  %slot15 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %19, i32 0, i32 2, !dbg !9610
  %20 = load %struct.rtx_def*, %struct.rtx_def** %slot15, align 8, !dbg !9610
  %21 = bitcast %struct.rtx_def* %20 to i8*, !dbg !9610
  call void @gt_ggc_mx_rtx_def(i8* %21), !dbg !9610
  br label %if.end16, !dbg !9610

if.end16:                                         ; preds = %if.then14, %do.body12
  br label %do.end17, !dbg !9613

do.end17:                                         ; preds = %if.end16
  br label %do.body18, !dbg !9614

do.body18:                                        ; preds = %do.end17
  %22 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9615
  %type = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %22, i32 0, i32 4, !dbg !9615
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9615
  %cmp19 = icmp ne %union.tree_node* %23, null, !dbg !9615
  br i1 %cmp19, label %if.then20, label %if.end22, !dbg !9618

if.then20:                                        ; preds = %do.body18
  %24 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9615
  %type21 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %24, i32 0, i32 4, !dbg !9615
  %25 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !9615
  %26 = bitcast %union.tree_node* %25 to i8*, !dbg !9615
  call void @gt_ggc_mx_lang_tree_node(i8* %26), !dbg !9615
  br label %if.end22, !dbg !9615

if.end22:                                         ; preds = %if.then20, %do.body18
  br label %do.end23, !dbg !9618

do.end23:                                         ; preds = %if.end22
  br label %if.end24, !dbg !9619

if.end24:                                         ; preds = %do.end23, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !9620
}

declare dso_local void @gt_ggc_mx_lang_tree_node(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_ggc_m_P23temp_slot_address_entry4htab(i8* %x_p) #0 !dbg !9621 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  %a__ = alloca i8*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !9622, metadata !DIExpression()), !dbg !9623
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !9624, metadata !DIExpression()), !dbg !9626
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !9627
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !9628
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !9626
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9629
  %cmp = icmp ne %struct.htab* %2, null, !dbg !9629
  br i1 %cmp, label %land.lhs.true, label %if.end21, !dbg !9629

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9629
  %4 = bitcast %struct.htab* %3 to i8*, !dbg !9629
  %cmp1 = icmp ne i8* %4, inttoptr (i64 1 to i8*), !dbg !9629
  br i1 %cmp1, label %land.lhs.true2, label %if.end21, !dbg !9629

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9629
  %6 = bitcast %struct.htab* %5 to i8*, !dbg !9629
  %call = call i32 @ggc_set_mark(i8* %6), !dbg !9629
  %tobool = icmp ne i32 %call, 0, !dbg !9629
  br i1 %tobool, label %if.end21, label %if.then, !dbg !9631

if.then:                                          ; preds = %land.lhs.true2
  %7 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9632
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %7, i32 0, i32 3, !dbg !9635
  %8 = load i8**, i8*** %entries, align 8, !dbg !9635
  %cmp3 = icmp ne i8** %8, null, !dbg !9636
  br i1 %cmp3, label %if.then4, label %if.end20, !dbg !9637

if.then4:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !9638, metadata !DIExpression()), !dbg !9640
  store i64 0, i64* %i0, align 8, !dbg !9641
  br label %for.cond, !dbg !9643

for.cond:                                         ; preds = %for.inc, %if.then4
  %9 = load i64, i64* %i0, align 8, !dbg !9644
  %10 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9646
  %size = getelementptr inbounds %struct.htab, %struct.htab* %10, i32 0, i32 4, !dbg !9647
  %11 = load i64, i64* %size, align 8, !dbg !9647
  %cmp5 = icmp ne i64 %9, %11, !dbg !9648
  br i1 %cmp5, label %for.body, label %for.end, !dbg !9649

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !9650

do.body:                                          ; preds = %for.body
  %12 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9652
  %entries6 = getelementptr inbounds %struct.htab, %struct.htab* %12, i32 0, i32 3, !dbg !9652
  %13 = load i8**, i8*** %entries6, align 8, !dbg !9652
  %14 = load i64, i64* %i0, align 8, !dbg !9652
  %arrayidx = getelementptr inbounds i8*, i8** %13, i64 %14, !dbg !9652
  %15 = load i8*, i8** %arrayidx, align 8, !dbg !9652
  %cmp7 = icmp ne i8* %15, null, !dbg !9652
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !9655

if.then8:                                         ; preds = %do.body
  %16 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9652
  %entries9 = getelementptr inbounds %struct.htab, %struct.htab* %16, i32 0, i32 3, !dbg !9652
  %17 = load i8**, i8*** %entries9, align 8, !dbg !9652
  %18 = load i64, i64* %i0, align 8, !dbg !9652
  %arrayidx10 = getelementptr inbounds i8*, i8** %17, i64 %18, !dbg !9652
  %19 = load i8*, i8** %arrayidx10, align 8, !dbg !9652
  call void @gt_ggc_mx_temp_slot_address_entry(i8* %19), !dbg !9652
  br label %if.end, !dbg !9652

if.end:                                           ; preds = %if.then8, %do.body
  br label %do.end, !dbg !9655

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !9656

for.inc:                                          ; preds = %do.end
  %20 = load i64, i64* %i0, align 8, !dbg !9657
  %inc = add i64 %20, 1, !dbg !9657
  store i64 %inc, i64* %i0, align 8, !dbg !9657
  br label %for.cond, !dbg !9658, !llvm.loop !9659

for.end:                                          ; preds = %for.cond
  br label %do.body11, !dbg !9661

do.body11:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i8** %a__, metadata !9662, metadata !DIExpression()), !dbg !9665
  %21 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9665
  %entries12 = getelementptr inbounds %struct.htab, %struct.htab* %21, i32 0, i32 3, !dbg !9665
  %22 = load i8**, i8*** %entries12, align 8, !dbg !9665
  %23 = bitcast i8** %22 to i8*, !dbg !9665
  store i8* %23, i8** %a__, align 8, !dbg !9665
  %24 = load i8*, i8** %a__, align 8, !dbg !9666
  %cmp13 = icmp ne i8* %24, null, !dbg !9666
  br i1 %cmp13, label %land.lhs.true14, label %if.end18, !dbg !9666

land.lhs.true14:                                  ; preds = %do.body11
  %25 = load i8*, i8** %a__, align 8, !dbg !9666
  %cmp15 = icmp ne i8* %25, inttoptr (i64 1 to i8*), !dbg !9666
  br i1 %cmp15, label %if.then16, label %if.end18, !dbg !9665

if.then16:                                        ; preds = %land.lhs.true14
  %26 = load i8*, i8** %a__, align 8, !dbg !9666
  %call17 = call i32 @ggc_set_mark(i8* %26), !dbg !9666
  br label %if.end18, !dbg !9666

if.end18:                                         ; preds = %if.then16, %land.lhs.true14, %do.body11
  br label %do.end19, !dbg !9665

do.end19:                                         ; preds = %if.end18
  br label %if.end20, !dbg !9668

if.end20:                                         ; preds = %do.end19, %if.then
  br label %if.end21, !dbg !9669

if.end21:                                         ; preds = %if.end20, %land.lhs.true2, %land.lhs.true, %entry
  ret void, !dbg !9670
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_nx_temp_slot_address_entry(i8* %x_p) #0 !dbg !9671 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.temp_slot_address_entry*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !9672, metadata !DIExpression()), !dbg !9673
  call void @llvm.dbg.declare(metadata %struct.temp_slot_address_entry** %x, metadata !9674, metadata !DIExpression()), !dbg !9675
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !9676
  %1 = bitcast i8* %0 to %struct.temp_slot_address_entry*, !dbg !9677
  store %struct.temp_slot_address_entry* %1, %struct.temp_slot_address_entry** %x, align 8, !dbg !9675
  %2 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9678
  %3 = bitcast %struct.temp_slot_address_entry* %2 to i8*, !dbg !9678
  %4 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9680
  %5 = bitcast %struct.temp_slot_address_entry* %4 to i8*, !dbg !9680
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_23temp_slot_address_entry, i32 63), !dbg !9681
  %tobool = icmp ne i32 %call, 0, !dbg !9681
  br i1 %tobool, label %if.then, label %if.end9, !dbg !9682

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !9683

do.body:                                          ; preds = %if.then
  %6 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9685
  %address = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %6, i32 0, i32 1, !dbg !9685
  %7 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8, !dbg !9685
  %cmp = icmp ne %struct.rtx_def* %7, null, !dbg !9685
  br i1 %cmp, label %if.then1, label %if.end, !dbg !9688

if.then1:                                         ; preds = %do.body
  %8 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9685
  %address2 = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %8, i32 0, i32 1, !dbg !9685
  %9 = load %struct.rtx_def*, %struct.rtx_def** %address2, align 8, !dbg !9685
  %10 = bitcast %struct.rtx_def* %9 to i8*, !dbg !9685
  call void @gt_pch_nx_rtx_def(i8* %10), !dbg !9685
  br label %if.end, !dbg !9685

if.end:                                           ; preds = %if.then1, %do.body
  br label %do.end, !dbg !9688

do.end:                                           ; preds = %if.end
  br label %do.body3, !dbg !9689

do.body3:                                         ; preds = %do.end
  %11 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9690
  %temp_slot = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %11, i32 0, i32 2, !dbg !9690
  %12 = load %struct.temp_slot*, %struct.temp_slot** %temp_slot, align 8, !dbg !9690
  %cmp4 = icmp ne %struct.temp_slot* %12, null, !dbg !9690
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !9693

if.then5:                                         ; preds = %do.body3
  %13 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9690
  %temp_slot6 = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %13, i32 0, i32 2, !dbg !9690
  %14 = load %struct.temp_slot*, %struct.temp_slot** %temp_slot6, align 8, !dbg !9690
  %15 = bitcast %struct.temp_slot* %14 to i8*, !dbg !9690
  call void @gt_pch_nx_temp_slot(i8* %15), !dbg !9690
  br label %if.end7, !dbg !9690

if.end7:                                          ; preds = %if.then5, %do.body3
  br label %do.end8, !dbg !9693

do.end8:                                          ; preds = %if.end7
  br label %if.end9, !dbg !9694

if.end9:                                          ; preds = %do.end8, %entry
  ret void, !dbg !9695
}

declare dso_local i32 @gt_pch_note_object(i8*, i8*, void (i8*, i8*, void (i8*, i8*)*, i8*)*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_23temp_slot_address_entry(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !9696 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.temp_slot_address_entry*, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !9700, metadata !DIExpression()), !dbg !9701
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !9702, metadata !DIExpression()), !dbg !9703
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !9704, metadata !DIExpression()), !dbg !9705
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !9706, metadata !DIExpression()), !dbg !9707
  call void @llvm.dbg.declare(metadata %struct.temp_slot_address_entry** %x, metadata !9708, metadata !DIExpression()), !dbg !9709
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !9710
  %1 = bitcast i8* %0 to %struct.temp_slot_address_entry*, !dbg !9711
  store %struct.temp_slot_address_entry* %1, %struct.temp_slot_address_entry** %x, align 8, !dbg !9709
  %2 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9712
  %3 = bitcast %struct.temp_slot_address_entry* %2 to i8*, !dbg !9714
  %4 = load i8*, i8** %this_obj.addr, align 8, !dbg !9715
  %cmp = icmp eq i8* %3, %4, !dbg !9716
  br i1 %cmp, label %if.then, label %if.end, !dbg !9717

if.then:                                          ; preds = %entry
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !9718
  %6 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9719
  %address = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %6, i32 0, i32 1, !dbg !9720
  %7 = bitcast %struct.rtx_def** %address to i8*, !dbg !9721
  %8 = load i8*, i8** %cookie.addr, align 8, !dbg !9722
  call void %5(i8* %7, i8* %8), !dbg !9718
  br label %if.end, !dbg !9718

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9723
  %10 = bitcast %struct.temp_slot_address_entry* %9 to i8*, !dbg !9725
  %11 = load i8*, i8** %this_obj.addr, align 8, !dbg !9726
  %cmp1 = icmp eq i8* %10, %11, !dbg !9727
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !9728

if.then2:                                         ; preds = %if.end
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !9729
  %13 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %x, align 8, !dbg !9730
  %temp_slot = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %13, i32 0, i32 2, !dbg !9731
  %14 = bitcast %struct.temp_slot** %temp_slot to i8*, !dbg !9732
  %15 = load i8*, i8** %cookie.addr, align 8, !dbg !9733
  call void %12(i8* %14, i8* %15), !dbg !9729
  br label %if.end3, !dbg !9729

if.end3:                                          ; preds = %if.then2, %if.end
  ret void, !dbg !9734
}

declare dso_local void @gt_pch_nx_rtx_def(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_nx_temp_slot(i8* %x_p) #0 !dbg !9735 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.temp_slot*, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !9736, metadata !DIExpression()), !dbg !9737
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %x, metadata !9738, metadata !DIExpression()), !dbg !9739
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !9740
  %1 = bitcast i8* %0 to %struct.temp_slot*, !dbg !9741
  store %struct.temp_slot* %1, %struct.temp_slot** %x, align 8, !dbg !9739
  %2 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9742
  %3 = bitcast %struct.temp_slot* %2 to i8*, !dbg !9742
  %4 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9744
  %5 = bitcast %struct.temp_slot* %4 to i8*, !dbg !9744
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_9temp_slot, i32 124), !dbg !9745
  %tobool = icmp ne i32 %call, 0, !dbg !9745
  br i1 %tobool, label %if.then, label %if.end21, !dbg !9746

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !9747

do.body:                                          ; preds = %if.then
  %6 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9749
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %6, i32 0, i32 0, !dbg !9749
  %7 = load %struct.temp_slot*, %struct.temp_slot** %next, align 8, !dbg !9749
  %cmp = icmp ne %struct.temp_slot* %7, null, !dbg !9749
  br i1 %cmp, label %if.then1, label %if.end, !dbg !9752

if.then1:                                         ; preds = %do.body
  %8 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9749
  %next2 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %8, i32 0, i32 0, !dbg !9749
  %9 = load %struct.temp_slot*, %struct.temp_slot** %next2, align 8, !dbg !9749
  %10 = bitcast %struct.temp_slot* %9 to i8*, !dbg !9749
  call void @gt_pch_nx_temp_slot(i8* %10), !dbg !9749
  br label %if.end, !dbg !9749

if.end:                                           ; preds = %if.then1, %do.body
  br label %do.end, !dbg !9752

do.end:                                           ; preds = %if.end
  br label %do.body3, !dbg !9753

do.body3:                                         ; preds = %do.end
  %11 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9754
  %prev = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %11, i32 0, i32 1, !dbg !9754
  %12 = load %struct.temp_slot*, %struct.temp_slot** %prev, align 8, !dbg !9754
  %cmp4 = icmp ne %struct.temp_slot* %12, null, !dbg !9754
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !9757

if.then5:                                         ; preds = %do.body3
  %13 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9754
  %prev6 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %13, i32 0, i32 1, !dbg !9754
  %14 = load %struct.temp_slot*, %struct.temp_slot** %prev6, align 8, !dbg !9754
  %15 = bitcast %struct.temp_slot* %14 to i8*, !dbg !9754
  call void @gt_pch_nx_temp_slot(i8* %15), !dbg !9754
  br label %if.end7, !dbg !9754

if.end7:                                          ; preds = %if.then5, %do.body3
  br label %do.end8, !dbg !9757

do.end8:                                          ; preds = %if.end7
  br label %do.body9, !dbg !9758

do.body9:                                         ; preds = %do.end8
  %16 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9759
  %slot = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %16, i32 0, i32 2, !dbg !9759
  %17 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !9759
  %cmp10 = icmp ne %struct.rtx_def* %17, null, !dbg !9759
  br i1 %cmp10, label %if.then11, label %if.end13, !dbg !9762

if.then11:                                        ; preds = %do.body9
  %18 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9759
  %slot12 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %18, i32 0, i32 2, !dbg !9759
  %19 = load %struct.rtx_def*, %struct.rtx_def** %slot12, align 8, !dbg !9759
  %20 = bitcast %struct.rtx_def* %19 to i8*, !dbg !9759
  call void @gt_pch_nx_rtx_def(i8* %20), !dbg !9759
  br label %if.end13, !dbg !9759

if.end13:                                         ; preds = %if.then11, %do.body9
  br label %do.end14, !dbg !9762

do.end14:                                         ; preds = %if.end13
  br label %do.body15, !dbg !9763

do.body15:                                        ; preds = %do.end14
  %21 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9764
  %type = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %21, i32 0, i32 4, !dbg !9764
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9764
  %cmp16 = icmp ne %union.tree_node* %22, null, !dbg !9764
  br i1 %cmp16, label %if.then17, label %if.end19, !dbg !9767

if.then17:                                        ; preds = %do.body15
  %23 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9764
  %type18 = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %23, i32 0, i32 4, !dbg !9764
  %24 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !9764
  %25 = bitcast %union.tree_node* %24 to i8*, !dbg !9764
  call void @gt_pch_nx_lang_tree_node(i8* %25), !dbg !9764
  br label %if.end19, !dbg !9764

if.end19:                                         ; preds = %if.then17, %do.body15
  br label %do.end20, !dbg !9767

do.end20:                                         ; preds = %if.end19
  br label %if.end21, !dbg !9768

if.end21:                                         ; preds = %do.end20, %entry
  ret void, !dbg !9769
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_9temp_slot(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !9770 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.temp_slot*, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !9771, metadata !DIExpression()), !dbg !9772
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !9773, metadata !DIExpression()), !dbg !9774
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !9775, metadata !DIExpression()), !dbg !9776
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !9777, metadata !DIExpression()), !dbg !9778
  call void @llvm.dbg.declare(metadata %struct.temp_slot** %x, metadata !9779, metadata !DIExpression()), !dbg !9780
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !9781
  %1 = bitcast i8* %0 to %struct.temp_slot*, !dbg !9782
  store %struct.temp_slot* %1, %struct.temp_slot** %x, align 8, !dbg !9780
  %2 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9783
  %3 = bitcast %struct.temp_slot* %2 to i8*, !dbg !9785
  %4 = load i8*, i8** %this_obj.addr, align 8, !dbg !9786
  %cmp = icmp eq i8* %3, %4, !dbg !9787
  br i1 %cmp, label %if.then, label %if.end, !dbg !9788

if.then:                                          ; preds = %entry
  %5 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !9789
  %6 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9790
  %next = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %6, i32 0, i32 0, !dbg !9791
  %7 = bitcast %struct.temp_slot** %next to i8*, !dbg !9792
  %8 = load i8*, i8** %cookie.addr, align 8, !dbg !9793
  call void %5(i8* %7, i8* %8), !dbg !9789
  br label %if.end, !dbg !9789

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9794
  %10 = bitcast %struct.temp_slot* %9 to i8*, !dbg !9796
  %11 = load i8*, i8** %this_obj.addr, align 8, !dbg !9797
  %cmp1 = icmp eq i8* %10, %11, !dbg !9798
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !9799

if.then2:                                         ; preds = %if.end
  %12 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !9800
  %13 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9801
  %prev = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %13, i32 0, i32 1, !dbg !9802
  %14 = bitcast %struct.temp_slot** %prev to i8*, !dbg !9803
  %15 = load i8*, i8** %cookie.addr, align 8, !dbg !9804
  call void %12(i8* %14, i8* %15), !dbg !9800
  br label %if.end3, !dbg !9800

if.end3:                                          ; preds = %if.then2, %if.end
  %16 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9805
  %17 = bitcast %struct.temp_slot* %16 to i8*, !dbg !9807
  %18 = load i8*, i8** %this_obj.addr, align 8, !dbg !9808
  %cmp4 = icmp eq i8* %17, %18, !dbg !9809
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !9810

if.then5:                                         ; preds = %if.end3
  %19 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !9811
  %20 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9812
  %slot = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %20, i32 0, i32 2, !dbg !9813
  %21 = bitcast %struct.rtx_def** %slot to i8*, !dbg !9814
  %22 = load i8*, i8** %cookie.addr, align 8, !dbg !9815
  call void %19(i8* %21, i8* %22), !dbg !9811
  br label %if.end6, !dbg !9811

if.end6:                                          ; preds = %if.then5, %if.end3
  %23 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9816
  %24 = bitcast %struct.temp_slot* %23 to i8*, !dbg !9818
  %25 = load i8*, i8** %this_obj.addr, align 8, !dbg !9819
  %cmp7 = icmp eq i8* %24, %25, !dbg !9820
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !9821

if.then8:                                         ; preds = %if.end6
  %26 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !9822
  %27 = load %struct.temp_slot*, %struct.temp_slot** %x, align 8, !dbg !9823
  %type = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %27, i32 0, i32 4, !dbg !9824
  %28 = bitcast %union.tree_node** %type to i8*, !dbg !9825
  %29 = load i8*, i8** %cookie.addr, align 8, !dbg !9826
  call void %26(i8* %28, i8* %29), !dbg !9822
  br label %if.end9, !dbg !9822

if.end9:                                          ; preds = %if.then8, %if.end6
  ret void, !dbg !9827
}

declare dso_local void @gt_pch_nx_lang_tree_node(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_n_P23temp_slot_address_entry4htab(i8* %x_p) #0 !dbg !9828 {
entry:
  %x_p.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !9829, metadata !DIExpression()), !dbg !9830
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !9831, metadata !DIExpression()), !dbg !9832
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !9833
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !9834
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !9832
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9835
  %3 = bitcast %struct.htab* %2 to i8*, !dbg !9835
  %4 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9837
  %5 = bitcast %struct.htab* %4 to i8*, !dbg !9837
  %call = call i32 @gt_pch_note_object(i8* %3, i8* %5, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_P23temp_slot_address_entry4htab, i32 199), !dbg !9838
  %tobool = icmp ne i32 %call, 0, !dbg !9838
  br i1 %tobool, label %if.then, label %if.end11, !dbg !9839

if.then:                                          ; preds = %entry
  %6 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9840
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %6, i32 0, i32 3, !dbg !9843
  %7 = load i8**, i8*** %entries, align 8, !dbg !9843
  %cmp = icmp ne i8** %7, null, !dbg !9844
  br i1 %cmp, label %if.then1, label %if.end10, !dbg !9845

if.then1:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !9846, metadata !DIExpression()), !dbg !9848
  store i64 0, i64* %i0, align 8, !dbg !9849
  br label %for.cond, !dbg !9851

for.cond:                                         ; preds = %for.inc, %if.then1
  %8 = load i64, i64* %i0, align 8, !dbg !9852
  %9 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9854
  %size = getelementptr inbounds %struct.htab, %struct.htab* %9, i32 0, i32 4, !dbg !9855
  %10 = load i64, i64* %size, align 8, !dbg !9855
  %cmp2 = icmp ne i64 %8, %10, !dbg !9856
  br i1 %cmp2, label %for.body, label %for.end, !dbg !9857

for.body:                                         ; preds = %for.cond
  br label %do.body, !dbg !9858

do.body:                                          ; preds = %for.body
  %11 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9860
  %entries3 = getelementptr inbounds %struct.htab, %struct.htab* %11, i32 0, i32 3, !dbg !9860
  %12 = load i8**, i8*** %entries3, align 8, !dbg !9860
  %13 = load i64, i64* %i0, align 8, !dbg !9860
  %arrayidx = getelementptr inbounds i8*, i8** %12, i64 %13, !dbg !9860
  %14 = load i8*, i8** %arrayidx, align 8, !dbg !9860
  %cmp4 = icmp ne i8* %14, null, !dbg !9860
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !9863

if.then5:                                         ; preds = %do.body
  %15 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9860
  %entries6 = getelementptr inbounds %struct.htab, %struct.htab* %15, i32 0, i32 3, !dbg !9860
  %16 = load i8**, i8*** %entries6, align 8, !dbg !9860
  %17 = load i64, i64* %i0, align 8, !dbg !9860
  %arrayidx7 = getelementptr inbounds i8*, i8** %16, i64 %17, !dbg !9860
  %18 = load i8*, i8** %arrayidx7, align 8, !dbg !9860
  call void @gt_pch_nx_temp_slot_address_entry(i8* %18), !dbg !9860
  br label %if.end, !dbg !9860

if.end:                                           ; preds = %if.then5, %do.body
  br label %do.end, !dbg !9863

do.end:                                           ; preds = %if.end
  br label %for.inc, !dbg !9864

for.inc:                                          ; preds = %do.end
  %19 = load i64, i64* %i0, align 8, !dbg !9865
  %inc = add i64 %19, 1, !dbg !9865
  store i64 %inc, i64* %i0, align 8, !dbg !9865
  br label %for.cond, !dbg !9866, !llvm.loop !9867

for.end:                                          ; preds = %for.cond
  %20 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9869
  %entries8 = getelementptr inbounds %struct.htab, %struct.htab* %20, i32 0, i32 3, !dbg !9870
  %21 = load i8**, i8*** %entries8, align 8, !dbg !9870
  %22 = bitcast i8** %21 to i8*, !dbg !9871
  %23 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9872
  %24 = bitcast %struct.htab* %23 to i8*, !dbg !9872
  %call9 = call i32 @gt_pch_note_object(i8* %22, i8* %24, void (i8*, i8*, void (i8*, i8*)*, i8*)* @gt_pch_p_P23temp_slot_address_entry4htab, i32 217), !dbg !9873
  br label %if.end10, !dbg !9874

if.end10:                                         ; preds = %for.end, %if.then
  br label %if.end11, !dbg !9875

if.end11:                                         ; preds = %if.end10, %entry
  ret void, !dbg !9876
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gt_pch_p_P23temp_slot_address_entry4htab(i8* %this_obj, i8* %x_p, void (i8*, i8*)* %op, i8* %cookie) #0 !dbg !9877 {
entry:
  %this_obj.addr = alloca i8*, align 8
  %x_p.addr = alloca i8*, align 8
  %op.addr = alloca void (i8*, i8*)*, align 8
  %cookie.addr = alloca i8*, align 8
  %x = alloca %struct.htab*, align 8
  %i0 = alloca i64, align 8
  store i8* %this_obj, i8** %this_obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %this_obj.addr, metadata !9878, metadata !DIExpression()), !dbg !9879
  store i8* %x_p, i8** %x_p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x_p.addr, metadata !9880, metadata !DIExpression()), !dbg !9881
  store void (i8*, i8*)* %op, void (i8*, i8*)** %op.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %op.addr, metadata !9882, metadata !DIExpression()), !dbg !9883
  store i8* %cookie, i8** %cookie.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cookie.addr, metadata !9884, metadata !DIExpression()), !dbg !9885
  call void @llvm.dbg.declare(metadata %struct.htab** %x, metadata !9886, metadata !DIExpression()), !dbg !9887
  %0 = load i8*, i8** %x_p.addr, align 8, !dbg !9888
  %1 = bitcast i8* %0 to %struct.htab*, !dbg !9889
  store %struct.htab* %1, %struct.htab** %x, align 8, !dbg !9887
  %2 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9890
  %entries = getelementptr inbounds %struct.htab, %struct.htab* %2, i32 0, i32 3, !dbg !9892
  %3 = load i8**, i8*** %entries, align 8, !dbg !9892
  %cmp = icmp ne i8** %3, null, !dbg !9893
  br i1 %cmp, label %if.then, label %if.end10, !dbg !9894

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i0, metadata !9895, metadata !DIExpression()), !dbg !9897
  store i64 0, i64* %i0, align 8, !dbg !9898
  br label %for.cond, !dbg !9900

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load i64, i64* %i0, align 8, !dbg !9901
  %5 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9903
  %size = getelementptr inbounds %struct.htab, %struct.htab* %5, i32 0, i32 4, !dbg !9904
  %6 = load i64, i64* %size, align 8, !dbg !9904
  %cmp1 = icmp ne i64 %4, %6, !dbg !9905
  br i1 %cmp1, label %for.body, label %for.end, !dbg !9906

for.body:                                         ; preds = %for.cond
  %7 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9907
  %entries2 = getelementptr inbounds %struct.htab, %struct.htab* %7, i32 0, i32 3, !dbg !9910
  %8 = load i8**, i8*** %entries2, align 8, !dbg !9910
  %9 = bitcast i8** %8 to i8*, !dbg !9911
  %10 = load i8*, i8** %this_obj.addr, align 8, !dbg !9912
  %cmp3 = icmp eq i8* %9, %10, !dbg !9913
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !9914

if.then4:                                         ; preds = %for.body
  %11 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !9915
  %12 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9916
  %entries5 = getelementptr inbounds %struct.htab, %struct.htab* %12, i32 0, i32 3, !dbg !9917
  %13 = load i8**, i8*** %entries5, align 8, !dbg !9917
  %14 = load i64, i64* %i0, align 8, !dbg !9918
  %arrayidx = getelementptr inbounds i8*, i8** %13, i64 %14, !dbg !9919
  %15 = bitcast i8** %arrayidx to i8*, !dbg !9920
  %16 = load i8*, i8** %cookie.addr, align 8, !dbg !9921
  call void %11(i8* %15, i8* %16), !dbg !9915
  br label %if.end, !dbg !9915

if.end:                                           ; preds = %if.then4, %for.body
  br label %for.inc, !dbg !9922

for.inc:                                          ; preds = %if.end
  %17 = load i64, i64* %i0, align 8, !dbg !9923
  %inc = add i64 %17, 1, !dbg !9923
  store i64 %inc, i64* %i0, align 8, !dbg !9923
  br label %for.cond, !dbg !9924, !llvm.loop !9925

for.end:                                          ; preds = %for.cond
  %18 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9927
  %19 = bitcast %struct.htab* %18 to i8*, !dbg !9929
  %20 = load i8*, i8** %this_obj.addr, align 8, !dbg !9930
  %cmp6 = icmp eq i8* %19, %20, !dbg !9931
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !9932

if.then7:                                         ; preds = %for.end
  %21 = load void (i8*, i8*)*, void (i8*, i8*)** %op.addr, align 8, !dbg !9933
  %22 = load %struct.htab*, %struct.htab** %x, align 8, !dbg !9934
  %entries8 = getelementptr inbounds %struct.htab, %struct.htab* %22, i32 0, i32 3, !dbg !9935
  %23 = bitcast i8*** %entries8 to i8*, !dbg !9936
  %24 = load i8*, i8** %cookie.addr, align 8, !dbg !9937
  call void %21(i8* %23, i8* %24), !dbg !9933
  br label %if.end9, !dbg !9933

if.end9:                                          ; preds = %if.then7, %for.end
  br label %if.end10, !dbg !9938

if.end10:                                         ; preds = %if.end9, %entry
  ret void, !dbg !9939
}

declare dso_local i32 @ggc_marked_p(i8*) #2

declare dso_local void @gt_ggc_m_P7rtx_def4htab(i8*) #2

declare dso_local void @gt_pch_n_P7rtx_def4htab(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_function_p_heap_reserve(%struct.VEC_function_p_heap** %vec_, i32 %alloc_) #0 !dbg !9940 {
entry:
  %vec_.addr = alloca %struct.VEC_function_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_function_p_heap** %vec_, %struct.VEC_function_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_function_p_heap*** %vec_.addr, metadata !9943, metadata !DIExpression()), !dbg !9944
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9945, metadata !DIExpression()), !dbg !9944
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !9946, metadata !DIExpression()), !dbg !9944
  %0 = load %struct.VEC_function_p_heap**, %struct.VEC_function_p_heap*** %vec_.addr, align 8, !dbg !9944
  %1 = load %struct.VEC_function_p_heap*, %struct.VEC_function_p_heap** %0, align 8, !dbg !9944
  %tobool = icmp ne %struct.VEC_function_p_heap* %1, null, !dbg !9944
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9944

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_function_p_heap**, %struct.VEC_function_p_heap*** %vec_.addr, align 8, !dbg !9944
  %3 = load %struct.VEC_function_p_heap*, %struct.VEC_function_p_heap** %2, align 8, !dbg !9944
  %base = getelementptr inbounds %struct.VEC_function_p_heap, %struct.VEC_function_p_heap* %3, i32 0, i32 0, !dbg !9944
  br label %cond.end, !dbg !9944

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9944

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_function_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9944
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !9944
  %call = call i32 @VEC_function_p_base_space(%struct.VEC_function_p_base* %cond, i32 %4), !dbg !9944
  %tobool1 = icmp ne i32 %call, 0, !dbg !9944
  %lnot = xor i1 %tobool1, true, !dbg !9944
  %lnot.ext = zext i1 %lnot to i32, !dbg !9944
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !9944
  %5 = load i32, i32* %extend, align 4, !dbg !9947
  %tobool2 = icmp ne i32 %5, 0, !dbg !9947
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9944

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_function_p_heap**, %struct.VEC_function_p_heap*** %vec_.addr, align 8, !dbg !9947
  %7 = load %struct.VEC_function_p_heap*, %struct.VEC_function_p_heap** %6, align 8, !dbg !9947
  %8 = bitcast %struct.VEC_function_p_heap* %7 to i8*, !dbg !9947
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !9947
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !9947
  %10 = bitcast i8* %call3 to %struct.VEC_function_p_heap*, !dbg !9947
  %11 = load %struct.VEC_function_p_heap**, %struct.VEC_function_p_heap*** %vec_.addr, align 8, !dbg !9947
  store %struct.VEC_function_p_heap* %10, %struct.VEC_function_p_heap** %11, align 8, !dbg !9947
  br label %if.end, !dbg !9947

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !9944
  ret i32 %12, !dbg !9944
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.function** @VEC_function_p_base_quick_push(%struct.VEC_function_p_base* %vec_, %struct.function* %obj_) #0 !dbg !9949 {
entry:
  %vec_.addr = alloca %struct.VEC_function_p_base*, align 8
  %obj_.addr = alloca %struct.function*, align 8
  %slot_ = alloca %struct.function**, align 8
  store %struct.VEC_function_p_base* %vec_, %struct.VEC_function_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_function_p_base** %vec_.addr, metadata !9952, metadata !DIExpression()), !dbg !9953
  store %struct.function* %obj_, %struct.function** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %obj_.addr, metadata !9954, metadata !DIExpression()), !dbg !9953
  call void @llvm.dbg.declare(metadata %struct.function*** %slot_, metadata !9955, metadata !DIExpression()), !dbg !9953
  %0 = load %struct.VEC_function_p_base*, %struct.VEC_function_p_base** %vec_.addr, align 8, !dbg !9953
  %num = getelementptr inbounds %struct.VEC_function_p_base, %struct.VEC_function_p_base* %0, i32 0, i32 0, !dbg !9953
  %1 = load i32, i32* %num, align 8, !dbg !9953
  %2 = load %struct.VEC_function_p_base*, %struct.VEC_function_p_base** %vec_.addr, align 8, !dbg !9953
  %alloc = getelementptr inbounds %struct.VEC_function_p_base, %struct.VEC_function_p_base* %2, i32 0, i32 1, !dbg !9953
  %3 = load i32, i32* %alloc, align 4, !dbg !9953
  %cmp = icmp ult i32 %1, %3, !dbg !9953
  %conv = zext i1 %cmp to i32, !dbg !9953
  %4 = load %struct.VEC_function_p_base*, %struct.VEC_function_p_base** %vec_.addr, align 8, !dbg !9953
  %vec = getelementptr inbounds %struct.VEC_function_p_base, %struct.VEC_function_p_base* %4, i32 0, i32 2, !dbg !9953
  %5 = load %struct.VEC_function_p_base*, %struct.VEC_function_p_base** %vec_.addr, align 8, !dbg !9953
  %num1 = getelementptr inbounds %struct.VEC_function_p_base, %struct.VEC_function_p_base* %5, i32 0, i32 0, !dbg !9953
  %6 = load i32, i32* %num1, align 8, !dbg !9953
  %inc = add i32 %6, 1, !dbg !9953
  store i32 %inc, i32* %num1, align 8, !dbg !9953
  %idxprom = zext i32 %6 to i64, !dbg !9953
  %arrayidx = getelementptr inbounds [1 x %struct.function*], [1 x %struct.function*]* %vec, i64 0, i64 %idxprom, !dbg !9953
  store %struct.function** %arrayidx, %struct.function*** %slot_, align 8, !dbg !9953
  %7 = load %struct.function*, %struct.function** %obj_.addr, align 8, !dbg !9953
  %8 = load %struct.function**, %struct.function*** %slot_, align 8, !dbg !9953
  store %struct.function* %7, %struct.function** %8, align 8, !dbg !9953
  %9 = load %struct.function**, %struct.function*** %slot_, align 8, !dbg !9953
  ret %struct.function** %9, !dbg !9953
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_function_p_base_space(%struct.VEC_function_p_base* %vec_, i32 %alloc_) #0 !dbg !9956 {
entry:
  %vec_.addr = alloca %struct.VEC_function_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_function_p_base* %vec_, %struct.VEC_function_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_function_p_base** %vec_.addr, metadata !9959, metadata !DIExpression()), !dbg !9960
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9961, metadata !DIExpression()), !dbg !9960
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !9960
  %cmp = icmp sge i32 %0, 0, !dbg !9960
  %conv = zext i1 %cmp to i32, !dbg !9960
  %1 = load %struct.VEC_function_p_base*, %struct.VEC_function_p_base** %vec_.addr, align 8, !dbg !9960
  %tobool = icmp ne %struct.VEC_function_p_base* %1, null, !dbg !9960
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9960

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_function_p_base*, %struct.VEC_function_p_base** %vec_.addr, align 8, !dbg !9960
  %alloc = getelementptr inbounds %struct.VEC_function_p_base, %struct.VEC_function_p_base* %2, i32 0, i32 1, !dbg !9960
  %3 = load i32, i32* %alloc, align 4, !dbg !9960
  %4 = load %struct.VEC_function_p_base*, %struct.VEC_function_p_base** %vec_.addr, align 8, !dbg !9960
  %num = getelementptr inbounds %struct.VEC_function_p_base, %struct.VEC_function_p_base* %4, i32 0, i32 0, !dbg !9960
  %5 = load i32, i32* %num, align 8, !dbg !9960
  %sub = sub i32 %3, %5, !dbg !9960
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !9960
  %cmp1 = icmp uge i32 %sub, %6, !dbg !9960
  %conv2 = zext i1 %cmp1 to i32, !dbg !9960
  br label %cond.end, !dbg !9960

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !9960
  %tobool3 = icmp ne i32 %7, 0, !dbg !9960
  %lnot = xor i1 %tobool3, true, !dbg !9960
  %lnot.ext = zext i1 %lnot to i32, !dbg !9960
  br label %cond.end, !dbg !9960

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !9960
  ret i32 %cond, !dbg !9960
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

declare dso_local i32 @ix86_local_alignment(%union.tree_node*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_temp_slot_p_base_length(%struct.VEC_temp_slot_p_base* %vec_) #0 !dbg !9962 {
entry:
  %vec_.addr = alloca %struct.VEC_temp_slot_p_base*, align 8
  store %struct.VEC_temp_slot_p_base* %vec_, %struct.VEC_temp_slot_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_temp_slot_p_base** %vec_.addr, metadata !9967, metadata !DIExpression()), !dbg !9968
  %0 = load %struct.VEC_temp_slot_p_base*, %struct.VEC_temp_slot_p_base** %vec_.addr, align 8, !dbg !9968
  %tobool = icmp ne %struct.VEC_temp_slot_p_base* %0, null, !dbg !9968
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9968

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_temp_slot_p_base*, %struct.VEC_temp_slot_p_base** %vec_.addr, align 8, !dbg !9968
  %num = getelementptr inbounds %struct.VEC_temp_slot_p_base, %struct.VEC_temp_slot_p_base* %1, i32 0, i32 0, !dbg !9968
  %2 = load i32, i32* %num, align 8, !dbg !9968
  br label %cond.end, !dbg !9968

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9968

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !9968
  ret i32 %cond, !dbg !9968
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_temp_slot_p_gc_safe_grow_cleared(%struct.VEC_temp_slot_p_gc** %vec_, i32 %size_) #0 !dbg !9969 {
entry:
  %vec_.addr = alloca %struct.VEC_temp_slot_p_gc**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_temp_slot_p_gc** %vec_, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_temp_slot_p_gc*** %vec_.addr, metadata !9973, metadata !DIExpression()), !dbg !9974
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !9975, metadata !DIExpression()), !dbg !9974
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !9976, metadata !DIExpression()), !dbg !9974
  %0 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9974
  %1 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %0, align 8, !dbg !9974
  %tobool = icmp ne %struct.VEC_temp_slot_p_gc* %1, null, !dbg !9974
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9974

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9974
  %3 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %2, align 8, !dbg !9974
  %base = getelementptr inbounds %struct.VEC_temp_slot_p_gc, %struct.VEC_temp_slot_p_gc* %3, i32 0, i32 0, !dbg !9974
  br label %cond.end, !dbg !9974

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9974

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_temp_slot_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9974
  %call = call i32 @VEC_temp_slot_p_base_length(%struct.VEC_temp_slot_p_base* %cond), !dbg !9974
  store i32 %call, i32* %oldsize, align 4, !dbg !9974
  %4 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9974
  %5 = load i32, i32* %size_.addr, align 4, !dbg !9974
  call void @VEC_temp_slot_p_gc_safe_grow(%struct.VEC_temp_slot_p_gc** %4, i32 %5), !dbg !9974
  %6 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9974
  %7 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %6, align 8, !dbg !9974
  %tobool1 = icmp ne %struct.VEC_temp_slot_p_gc* %7, null, !dbg !9974
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !9974

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9974
  %9 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %8, align 8, !dbg !9974
  %base3 = getelementptr inbounds %struct.VEC_temp_slot_p_gc, %struct.VEC_temp_slot_p_gc* %9, i32 0, i32 0, !dbg !9974
  br label %cond.end5, !dbg !9974

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9974

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_temp_slot_p_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !9974
  %call7 = call %struct.temp_slot** @VEC_temp_slot_p_base_address(%struct.VEC_temp_slot_p_base* %cond6), !dbg !9974
  %10 = load i32, i32* %oldsize, align 4, !dbg !9974
  %idxprom = sext i32 %10 to i64, !dbg !9974
  %arrayidx = getelementptr inbounds %struct.temp_slot*, %struct.temp_slot** %call7, i64 %idxprom, !dbg !9974
  %11 = bitcast %struct.temp_slot** %arrayidx to i8*, !dbg !9974
  %12 = load i32, i32* %size_.addr, align 4, !dbg !9974
  %13 = load i32, i32* %oldsize, align 4, !dbg !9974
  %sub = sub nsw i32 %12, %13, !dbg !9974
  %conv = sext i32 %sub to i64, !dbg !9974
  %mul = mul i64 8, %conv, !dbg !9974
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !9974
  ret void, !dbg !9974
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.temp_slot** @VEC_temp_slot_p_base_address(%struct.VEC_temp_slot_p_base* %vec_) #0 !dbg !9977 {
entry:
  %vec_.addr = alloca %struct.VEC_temp_slot_p_base*, align 8
  store %struct.VEC_temp_slot_p_base* %vec_, %struct.VEC_temp_slot_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_temp_slot_p_base** %vec_.addr, metadata !9982, metadata !DIExpression()), !dbg !9983
  %0 = load %struct.VEC_temp_slot_p_base*, %struct.VEC_temp_slot_p_base** %vec_.addr, align 8, !dbg !9983
  %tobool = icmp ne %struct.VEC_temp_slot_p_base* %0, null, !dbg !9983
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9983

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_temp_slot_p_base*, %struct.VEC_temp_slot_p_base** %vec_.addr, align 8, !dbg !9983
  %vec = getelementptr inbounds %struct.VEC_temp_slot_p_base, %struct.VEC_temp_slot_p_base* %1, i32 0, i32 2, !dbg !9983
  %arraydecay = getelementptr inbounds [1 x %struct.temp_slot*], [1 x %struct.temp_slot*]* %vec, i64 0, i64 0, !dbg !9983
  br label %cond.end, !dbg !9983

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9983

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.temp_slot** [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !9983
  ret %struct.temp_slot** %cond, !dbg !9983
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_temp_slot_p_gc_safe_grow(%struct.VEC_temp_slot_p_gc** %vec_, i32 %size_) #0 !dbg !9984 {
entry:
  %vec_.addr = alloca %struct.VEC_temp_slot_p_gc**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_temp_slot_p_gc** %vec_, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_temp_slot_p_gc*** %vec_.addr, metadata !9985, metadata !DIExpression()), !dbg !9986
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !9987, metadata !DIExpression()), !dbg !9986
  %0 = load i32, i32* %size_.addr, align 4, !dbg !9986
  %cmp = icmp sge i32 %0, 0, !dbg !9986
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !9986

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9986
  %2 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %1, align 8, !dbg !9986
  %tobool = icmp ne %struct.VEC_temp_slot_p_gc* %2, null, !dbg !9986
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9986

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9986
  %4 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %3, align 8, !dbg !9986
  %base = getelementptr inbounds %struct.VEC_temp_slot_p_gc, %struct.VEC_temp_slot_p_gc* %4, i32 0, i32 0, !dbg !9986
  br label %cond.end, !dbg !9986

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !9986

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_temp_slot_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9986
  %call = call i32 @VEC_temp_slot_p_base_length(%struct.VEC_temp_slot_p_base* %cond), !dbg !9986
  %5 = load i32, i32* %size_.addr, align 4, !dbg !9986
  %cmp1 = icmp ule i32 %call, %5, !dbg !9986
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !9988
  %land.ext = zext i1 %6 to i32, !dbg !9986
  %7 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9986
  %8 = load i32, i32* %size_.addr, align 4, !dbg !9986
  %9 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9986
  %10 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %9, align 8, !dbg !9986
  %tobool2 = icmp ne %struct.VEC_temp_slot_p_gc* %10, null, !dbg !9986
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !9986

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9986
  %12 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %11, align 8, !dbg !9986
  %tobool4 = icmp ne %struct.VEC_temp_slot_p_gc* %12, null, !dbg !9986
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !9986

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9986
  %14 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %13, align 8, !dbg !9986
  %base6 = getelementptr inbounds %struct.VEC_temp_slot_p_gc, %struct.VEC_temp_slot_p_gc* %14, i32 0, i32 0, !dbg !9986
  br label %cond.end8, !dbg !9986

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !9986

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_temp_slot_p_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !9986
  %num = getelementptr inbounds %struct.VEC_temp_slot_p_base, %struct.VEC_temp_slot_p_base* %cond9, i32 0, i32 0, !dbg !9986
  %15 = load i32, i32* %num, align 8, !dbg !9986
  br label %cond.end11, !dbg !9986

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !9986

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !9986
  %sub = sub nsw i32 %8, %cond12, !dbg !9986
  %call13 = call i32 @VEC_temp_slot_p_gc_reserve_exact(%struct.VEC_temp_slot_p_gc** %7, i32 %sub), !dbg !9986
  %16 = load i32, i32* %size_.addr, align 4, !dbg !9986
  %17 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9986
  %18 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %17, align 8, !dbg !9986
  %tobool14 = icmp ne %struct.VEC_temp_slot_p_gc* %18, null, !dbg !9986
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !9986

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9986
  %20 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %19, align 8, !dbg !9986
  %base16 = getelementptr inbounds %struct.VEC_temp_slot_p_gc, %struct.VEC_temp_slot_p_gc* %20, i32 0, i32 0, !dbg !9986
  br label %cond.end18, !dbg !9986

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !9986

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_temp_slot_p_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !9986
  %num20 = getelementptr inbounds %struct.VEC_temp_slot_p_base, %struct.VEC_temp_slot_p_base* %cond19, i32 0, i32 0, !dbg !9986
  store i32 %16, i32* %num20, align 8, !dbg !9986
  ret void, !dbg !9986
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_temp_slot_p_gc_reserve_exact(%struct.VEC_temp_slot_p_gc** %vec_, i32 %alloc_) #0 !dbg !9989 {
entry:
  %vec_.addr = alloca %struct.VEC_temp_slot_p_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_temp_slot_p_gc** %vec_, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_temp_slot_p_gc*** %vec_.addr, metadata !9992, metadata !DIExpression()), !dbg !9993
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9994, metadata !DIExpression()), !dbg !9993
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !9995, metadata !DIExpression()), !dbg !9993
  %0 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9993
  %1 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %0, align 8, !dbg !9993
  %tobool = icmp ne %struct.VEC_temp_slot_p_gc* %1, null, !dbg !9993
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9993

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9993
  %3 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %2, align 8, !dbg !9993
  %base = getelementptr inbounds %struct.VEC_temp_slot_p_gc, %struct.VEC_temp_slot_p_gc* %3, i32 0, i32 0, !dbg !9993
  br label %cond.end, !dbg !9993

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9993

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_temp_slot_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9993
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !9993
  %call = call i32 @VEC_temp_slot_p_base_space(%struct.VEC_temp_slot_p_base* %cond, i32 %4), !dbg !9993
  %tobool1 = icmp ne i32 %call, 0, !dbg !9993
  %lnot = xor i1 %tobool1, true, !dbg !9993
  %lnot.ext = zext i1 %lnot to i32, !dbg !9993
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !9993
  %5 = load i32, i32* %extend, align 4, !dbg !9996
  %tobool2 = icmp ne i32 %5, 0, !dbg !9996
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9993

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9996
  %7 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** %6, align 8, !dbg !9996
  %8 = bitcast %struct.VEC_temp_slot_p_gc* %7 to i8*, !dbg !9996
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !9996
  %call3 = call i8* @vec_gc_p_reserve_exact(i8* %8, i32 %9), !dbg !9996
  %10 = bitcast i8* %call3 to %struct.VEC_temp_slot_p_gc*, !dbg !9996
  %11 = load %struct.VEC_temp_slot_p_gc**, %struct.VEC_temp_slot_p_gc*** %vec_.addr, align 8, !dbg !9996
  store %struct.VEC_temp_slot_p_gc* %10, %struct.VEC_temp_slot_p_gc** %11, align 8, !dbg !9996
  br label %if.end, !dbg !9996

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !9993
  ret i32 %12, !dbg !9993
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_temp_slot_p_base_space(%struct.VEC_temp_slot_p_base* %vec_, i32 %alloc_) #0 !dbg !9998 {
entry:
  %vec_.addr = alloca %struct.VEC_temp_slot_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_temp_slot_p_base* %vec_, %struct.VEC_temp_slot_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_temp_slot_p_base** %vec_.addr, metadata !10001, metadata !DIExpression()), !dbg !10002
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10003, metadata !DIExpression()), !dbg !10002
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !10002
  %cmp = icmp sge i32 %0, 0, !dbg !10002
  %conv = zext i1 %cmp to i32, !dbg !10002
  %1 = load %struct.VEC_temp_slot_p_base*, %struct.VEC_temp_slot_p_base** %vec_.addr, align 8, !dbg !10002
  %tobool = icmp ne %struct.VEC_temp_slot_p_base* %1, null, !dbg !10002
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10002

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_temp_slot_p_base*, %struct.VEC_temp_slot_p_base** %vec_.addr, align 8, !dbg !10002
  %alloc = getelementptr inbounds %struct.VEC_temp_slot_p_base, %struct.VEC_temp_slot_p_base* %2, i32 0, i32 1, !dbg !10002
  %3 = load i32, i32* %alloc, align 4, !dbg !10002
  %4 = load %struct.VEC_temp_slot_p_base*, %struct.VEC_temp_slot_p_base** %vec_.addr, align 8, !dbg !10002
  %num = getelementptr inbounds %struct.VEC_temp_slot_p_base, %struct.VEC_temp_slot_p_base* %4, i32 0, i32 0, !dbg !10002
  %5 = load i32, i32* %num, align 8, !dbg !10002
  %sub = sub i32 %3, %5, !dbg !10002
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !10002
  %cmp1 = icmp uge i32 %sub, %6, !dbg !10002
  %conv2 = zext i1 %cmp1 to i32, !dbg !10002
  br label %cond.end, !dbg !10002

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !10002
  %tobool3 = icmp ne i32 %7, 0, !dbg !10002
  %lnot = xor i1 %tobool3, true, !dbg !10002
  %lnot.ext = zext i1 %lnot to i32, !dbg !10002
  br label %cond.end, !dbg !10002

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !10002
  ret i32 %cond, !dbg !10002
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @temp_slot_address_compute_hash(%struct.temp_slot_address_entry* %t) #0 !dbg !10004 {
entry:
  %t.addr = alloca %struct.temp_slot_address_entry*, align 8
  %do_not_record = alloca i32, align 4
  store %struct.temp_slot_address_entry* %t, %struct.temp_slot_address_entry** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.temp_slot_address_entry** %t.addr, metadata !10007, metadata !DIExpression()), !dbg !10008
  call void @llvm.dbg.declare(metadata i32* %do_not_record, metadata !10009, metadata !DIExpression()), !dbg !10010
  store i32 0, i32* %do_not_record, align 4, !dbg !10010
  %0 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t.addr, align 8, !dbg !10011
  %address = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %0, i32 0, i32 1, !dbg !10012
  %1 = load %struct.rtx_def*, %struct.rtx_def** %address, align 8, !dbg !10012
  %2 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t.addr, align 8, !dbg !10013
  %address1 = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %2, i32 0, i32 1, !dbg !10013
  %3 = load %struct.rtx_def*, %struct.rtx_def** %address1, align 8, !dbg !10013
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !10013
  %bf.load = load i32, i32* %4, align 8, !dbg !10013
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !10013
  %bf.clear = and i32 %bf.lshr, 255, !dbg !10013
  %call = call i32 @hash_rtx(%struct.rtx_def* %1, i32 %bf.clear, i32* %do_not_record, i32* null, i8 zeroext 0), !dbg !10014
  ret i32 %call, !dbg !10015
}

declare dso_local i32 @hash_rtx(%struct.rtx_def*, i32, i32*, i32*, i8 zeroext) #2

declare dso_local i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @max_slot_level() #0 !dbg !10016 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 19), align 8, !dbg !10017
  %tobool = icmp ne %struct.VEC_temp_slot_p_gc* %0, null, !dbg !10017
  br i1 %tobool, label %if.end, label %if.then, !dbg !10019

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !10020
  br label %return, !dbg !10020

if.end:                                           ; preds = %entry
  %1 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 19), align 8, !dbg !10021
  %tobool1 = icmp ne %struct.VEC_temp_slot_p_gc* %1, null, !dbg !10021
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !10021

cond.true:                                        ; preds = %if.end
  %2 = load %struct.VEC_temp_slot_p_gc*, %struct.VEC_temp_slot_p_gc** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 19), align 8, !dbg !10021
  %base = getelementptr inbounds %struct.VEC_temp_slot_p_gc, %struct.VEC_temp_slot_p_gc* %2, i32 0, i32 0, !dbg !10021
  br label %cond.end, !dbg !10021

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !10021

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_temp_slot_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10021
  %call = call i32 @VEC_temp_slot_p_base_length(%struct.VEC_temp_slot_p_base* %cond), !dbg !10021
  %sub = sub i32 %call, 1, !dbg !10022
  store i32 %sub, i32* %retval, align 4, !dbg !10023
  br label %return, !dbg !10023

return:                                           ; preds = %cond.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !10024
  ret i32 %3, !dbg !10024
}

declare dso_local void @htab_traverse(%struct.htab*, i32 (i8**, i8*)*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @remove_unused_temp_slot_addresses_1(i8** %slot, i8* %data) #0 !dbg !10025 {
entry:
  %slot.addr = alloca i8**, align 8
  %data.addr = alloca i8*, align 8
  %t = alloca %struct.temp_slot_address_entry*, align 8
  store i8** %slot, i8*** %slot.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %slot.addr, metadata !10028, metadata !DIExpression()), !dbg !10029
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !10030, metadata !DIExpression()), !dbg !10031
  call void @llvm.dbg.declare(metadata %struct.temp_slot_address_entry** %t, metadata !10032, metadata !DIExpression()), !dbg !10033
  %0 = load i8**, i8*** %slot.addr, align 8, !dbg !10034
  %1 = load i8*, i8** %0, align 8, !dbg !10035
  %2 = bitcast i8* %1 to %struct.temp_slot_address_entry*, !dbg !10036
  store %struct.temp_slot_address_entry* %2, %struct.temp_slot_address_entry** %t, align 8, !dbg !10037
  %3 = load %struct.temp_slot_address_entry*, %struct.temp_slot_address_entry** %t, align 8, !dbg !10038
  %temp_slot = getelementptr inbounds %struct.temp_slot_address_entry, %struct.temp_slot_address_entry* %3, i32 0, i32 2, !dbg !10040
  %4 = load %struct.temp_slot*, %struct.temp_slot** %temp_slot, align 8, !dbg !10040
  %in_use = getelementptr inbounds %struct.temp_slot, %struct.temp_slot* %4, i32 0, i32 6, !dbg !10041
  %5 = load i8, i8* %in_use, align 4, !dbg !10041
  %tobool = icmp ne i8 %5, 0, !dbg !10038
  br i1 %tobool, label %if.end, label %if.then, !dbg !10042

if.then:                                          ; preds = %entry
  %6 = load i8**, i8*** %slot.addr, align 8, !dbg !10043
  store i8* null, i8** %6, align 8, !dbg !10044
  br label %if.end, !dbg !10045

if.end:                                           ; preds = %if.then, %entry
  ret i32 1, !dbg !10046
}

declare dso_local i32 @exp_equiv_p(%struct.rtx_def*, %struct.rtx_def*, i32, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %x, i64* %poffset) #0 !dbg !10047 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %poffset.addr = alloca i64*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  %offset = alloca i64, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !10051, metadata !DIExpression()), !dbg !10052
  store i64* %poffset, i64** %poffset.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %poffset.addr, metadata !10053, metadata !DIExpression()), !dbg !10054
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !10055, metadata !DIExpression()), !dbg !10056
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !10057, metadata !DIExpression()), !dbg !10058
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10059
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 6), align 16, !dbg !10061
  %cmp = icmp eq %struct.rtx_def* %0, %1, !dbg !10062
  br i1 %cmp, label %if.then, label %if.else5, !dbg !10063

if.then:                                          ; preds = %entry
  %2 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 43), align 1, !dbg !10064
  %conv = zext i8 %2 to i32, !dbg !10064
  %tobool = icmp ne i32 %conv, 0, !dbg !10064
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !10064

land.lhs.true:                                    ; preds = %if.then
  %3 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 45), align 1, !dbg !10064
  %conv1 = zext i8 %3 to i32, !dbg !10064
  %tobool2 = icmp ne i32 %conv1, 0, !dbg !10064
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !10067

if.then3:                                         ; preds = %land.lhs.true
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !10068
  store %struct.rtx_def* %4, %struct.rtx_def** %new_rtx, align 8, !dbg !10070
  store i64 0, i64* %offset, align 8, !dbg !10071
  br label %if.end, !dbg !10072

if.else:                                          ; preds = %land.lhs.true, %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !dbg !10073
  store %struct.rtx_def* %5, %struct.rtx_def** %new_rtx, align 8, !dbg !10074
  %6 = load i32, i32* @in_arg_offset, align 4, !dbg !10075
  %conv4 = sext i32 %6 to i64, !dbg !10075
  store i64 %conv4, i64* %offset, align 8, !dbg !10076
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end30, !dbg !10077

if.else5:                                         ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10078
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 7), align 8, !dbg !10080
  %cmp6 = icmp eq %struct.rtx_def* %7, %8, !dbg !10081
  br i1 %cmp6, label %if.then8, label %if.else10, !dbg !10082

if.then8:                                         ; preds = %if.else5
  %9 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 3), align 8, !dbg !10083
  store %struct.rtx_def* %9, %struct.rtx_def** %new_rtx, align 8, !dbg !10084
  %10 = load i32, i32* @var_offset, align 4, !dbg !10085
  %conv9 = sext i32 %10 to i64, !dbg !10085
  store i64 %conv9, i64* %offset, align 8, !dbg !10086
  br label %if.end29, !dbg !10087

if.else10:                                        ; preds = %if.else5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10088
  %12 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 16, !dbg !10090
  %cmp11 = icmp eq %struct.rtx_def* %11, %12, !dbg !10091
  br i1 %cmp11, label %if.then13, label %if.else15, !dbg !10092

if.then13:                                        ; preds = %if.else10
  %13 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !dbg !10093
  store %struct.rtx_def* %13, %struct.rtx_def** %new_rtx, align 8, !dbg !10094
  %14 = load i32, i32* @dynamic_offset, align 4, !dbg !10095
  %conv14 = sext i32 %14 to i64, !dbg !10095
  store i64 %conv14, i64* %offset, align 8, !dbg !10096
  br label %if.end28, !dbg !10097

if.else15:                                        ; preds = %if.else10
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10098
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !dbg !10100
  %cmp16 = icmp eq %struct.rtx_def* %15, %16, !dbg !10101
  br i1 %cmp16, label %if.then18, label %if.else20, !dbg !10102

if.then18:                                        ; preds = %if.else15
  %17 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !dbg !10103
  store %struct.rtx_def* %17, %struct.rtx_def** %new_rtx, align 8, !dbg !10104
  %18 = load i32, i32* @out_arg_offset, align 4, !dbg !10105
  %conv19 = sext i32 %18 to i64, !dbg !10105
  store i64 %conv19, i64* %offset, align 8, !dbg !10106
  br label %if.end27, !dbg !10107

if.else20:                                        ; preds = %if.else15
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10108
  %20 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 10), align 16, !dbg !10110
  %cmp21 = icmp eq %struct.rtx_def* %19, %20, !dbg !10111
  br i1 %cmp21, label %if.then23, label %if.else25, !dbg !10112

if.then23:                                        ; preds = %if.else20
  %21 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 5), align 8, !dbg !10113
  store %struct.rtx_def* %21, %struct.rtx_def** %new_rtx, align 8, !dbg !10115
  %22 = load i32, i32* @cfa_offset, align 4, !dbg !10116
  %conv24 = sext i32 %22 to i64, !dbg !10116
  store i64 %conv24, i64* %offset, align 8, !dbg !10117
  br label %if.end26, !dbg !10118

if.else25:                                        ; preds = %if.else20
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10119
  br label %return, !dbg !10119

if.end26:                                         ; preds = %if.then23
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then18
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then13
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then8
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.end
  %23 = load i64, i64* %offset, align 8, !dbg !10120
  %24 = load i64*, i64** %poffset.addr, align 8, !dbg !10121
  store i64 %23, i64* %24, align 8, !dbg !10122
  %25 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10123
  store %struct.rtx_def* %25, %struct.rtx_def** %retval, align 8, !dbg !10124
  br label %return, !dbg !10124

return:                                           ; preds = %if.end30, %if.else25
  %26 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !10125
  ret %struct.rtx_def* %26, !dbg !10125
}

declare dso_local %struct.rtx_def* @simplify_gen_binary(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @ix86_cfun_abi() #2

declare dso_local i32 @ix86_function_type_abi(%union.tree_node*) #2

declare dso_local void @init_recog() #2

; Function Attrs: noinline nounwind uwtable
define internal void @instantiate_virtual_regs_in_insn(%struct.rtx_def* %insn) #0 !dbg !10126 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %offset = alloca i64, align 8
  %insn_code = alloca i32, align 4
  %i = alloca i32, align 4
  %any_change = alloca i8, align 1
  %set = alloca %struct.rtx_def*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %changed = alloca i8, align 1
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10127, metadata !DIExpression()), !dbg !10128
  call void @llvm.dbg.declare(metadata i64* %offset, metadata !10129, metadata !DIExpression()), !dbg !10130
  call void @llvm.dbg.declare(metadata i32* %insn_code, metadata !10131, metadata !DIExpression()), !dbg !10132
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10133, metadata !DIExpression()), !dbg !10134
  call void @llvm.dbg.declare(metadata i8* %any_change, metadata !10135, metadata !DIExpression()), !dbg !10136
  store i8 0, i8* %any_change, align 1, !dbg !10136
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !10137, metadata !DIExpression()), !dbg !10138
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !10139, metadata !DIExpression()), !dbg !10140
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !10141, metadata !DIExpression()), !dbg !10142
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !10143, metadata !DIExpression()), !dbg !10144
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10145
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !10145
  %bf.load = load i32, i32* %1, align 8, !dbg !10145
  %bf.clear = and i32 %bf.load, 65535, !dbg !10145
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !10145
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !10145

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10145
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !10145
  %bf.load1 = load i32, i32* %3, align 8, !dbg !10145
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !10145
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !10145
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !10145

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10145
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !10145
  %bf.load5 = load i32, i32* %5, align 8, !dbg !10145
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !10145
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !10145
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !10145

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10145
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !10145
  %bf.load9 = load i32, i32* %7, align 8, !dbg !10145
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !10145
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !10145
  br i1 %cmp11, label %cond.true, label %cond.false24, !dbg !10145

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10145
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !10145
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10145
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !10145
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10145
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10145
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !10145
  %bf.load12 = load i32, i32* %10, align 8, !dbg !10145
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !10145
  %cmp14 = icmp eq i32 %bf.clear13, 23, !dbg !10145
  br i1 %cmp14, label %cond.true15, label %cond.false, !dbg !10145

cond.true15:                                      ; preds = %cond.true
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10145
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !10145
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !10145
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !10145
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !10145
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !10145
  br label %cond.end, !dbg !10145

cond.false:                                       ; preds = %cond.true
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10145
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10145
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !10145
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !10145
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 5, !dbg !10145
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !10145
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !10145
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %13, %struct.rtx_def* %15), !dbg !10145
  br label %cond.end, !dbg !10145

cond.end:                                         ; preds = %cond.false, %cond.true15
  %cond = phi %struct.rtx_def* [ %12, %cond.true15 ], [ %call, %cond.false ], !dbg !10145
  br label %cond.end25, !dbg !10145

cond.false24:                                     ; preds = %lor.lhs.false8
  br label %cond.end25, !dbg !10145

cond.end25:                                       ; preds = %cond.false24, %cond.end
  %cond26 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false24 ], !dbg !10145
  store %struct.rtx_def* %cond26, %struct.rtx_def** %set, align 8, !dbg !10146
  %16 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10147
  %tobool = icmp ne %struct.rtx_def* %16, null, !dbg !10147
  br i1 %tobool, label %if.then, label %if.else, !dbg !10149

if.then:                                          ; preds = %cond.end25
  %17 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10150
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !10150
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !10150
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !10150
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !10150
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !10150
  %call31 = call %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %18, i64* %offset), !dbg !10152
  store %struct.rtx_def* %call31, %struct.rtx_def** %new_rtx, align 8, !dbg !10153
  %19 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10154
  %tobool32 = icmp ne %struct.rtx_def* %19, null, !dbg !10154
  br i1 %tobool32, label %if.then33, label %if.end54, !dbg !10156

if.then33:                                        ; preds = %if.then
  call void @start_sequence(), !dbg !10157
  %20 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10159
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !10159
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !10159
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 1, !dbg !10159
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !10159
  %call38 = call i32 @for_each_rtx(%struct.rtx_def** %rt_rtx37, i32 (%struct.rtx_def**, i8*)* @instantiate_virtual_regs_in_rtx, i8* null), !dbg !10160
  %21 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10161
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !10161
  %bf.load39 = load i32, i32* %22, align 8, !dbg !10161
  %bf.lshr = lshr i32 %bf.load39, 16, !dbg !10161
  %bf.clear40 = and i32 %bf.lshr, 255, !dbg !10161
  %23 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10162
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !10162
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !10162
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 1, !dbg !10162
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !10162
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx44, align 8, !dbg !10162
  %25 = load i64, i64* %offset, align 8, !dbg !10163
  %sub = sub nsw i64 0, %25, !dbg !10163
  %call45 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub), !dbg !10163
  %call46 = call %struct.rtx_def* @simplify_gen_binary(i32 49, i32 %bf.clear40, %struct.rtx_def* %24, %struct.rtx_def* %call45), !dbg !10164
  store %struct.rtx_def* %call46, %struct.rtx_def** %x, align 8, !dbg !10165
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10166
  %27 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10167
  %call47 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %26, %struct.rtx_def* %27), !dbg !10168
  store %struct.rtx_def* %call47, %struct.rtx_def** %x, align 8, !dbg !10169
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10170
  %29 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10172
  %cmp48 = icmp ne %struct.rtx_def* %28, %29, !dbg !10173
  br i1 %cmp48, label %if.then49, label %if.end, !dbg !10174

if.then49:                                        ; preds = %if.then33
  %30 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10175
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10176
  %call50 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %30, %struct.rtx_def* %31), !dbg !10177
  br label %if.end, !dbg !10177

if.end:                                           ; preds = %if.then49, %if.then33
  %call51 = call %struct.rtx_def* @get_insns(), !dbg !10178
  store %struct.rtx_def* %call51, %struct.rtx_def** %seq, align 8, !dbg !10179
  call void @end_sequence(), !dbg !10180
  %32 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10181
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10182
  %call52 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %32, %struct.rtx_def* %33), !dbg !10183
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10184
  %call53 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %34), !dbg !10185
  br label %if.end358, !dbg !10186

if.end54:                                         ; preds = %if.then
  %35 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10187
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !10187
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !10187
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 1, !dbg !10187
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !10187
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !10187
  %call59 = call %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %36, i64* %offset), !dbg !10188
  store %struct.rtx_def* %call59, %struct.rtx_def** %new_rtx, align 8, !dbg !10189
  %37 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10190
  %tobool60 = icmp ne %struct.rtx_def* %37, null, !dbg !10190
  br i1 %tobool60, label %land.lhs.true, label %if.end106, !dbg !10192

land.lhs.true:                                    ; preds = %if.end54
  %38 = load i64, i64* %offset, align 8, !dbg !10193
  %cmp61 = icmp ne i64 %38, 0, !dbg !10194
  br i1 %cmp61, label %land.lhs.true62, label %if.end106, !dbg !10195

land.lhs.true62:                                  ; preds = %land.lhs.true
  %39 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10196
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !10196
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !10196
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 0, !dbg !10196
  %rt_rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**, !dbg !10196
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx66, align 8, !dbg !10196
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !10196
  %bf.load67 = load i32, i32* %41, align 8, !dbg !10196
  %bf.clear68 = and i32 %bf.load67, 65535, !dbg !10196
  %cmp69 = icmp eq i32 %bf.clear68, 37, !dbg !10196
  br i1 %cmp69, label %land.lhs.true70, label %if.end106, !dbg !10197

land.lhs.true70:                                  ; preds = %land.lhs.true62
  %42 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10198
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !10198
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !10198
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 0, !dbg !10198
  %rt_rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**, !dbg !10198
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx74, align 8, !dbg !10198
  %call75 = call i32 @rhs_regno(%struct.rtx_def* %43), !dbg !10198
  %cmp76 = icmp ugt i32 %call75, 57, !dbg !10199
  br i1 %cmp76, label %if.then77, label %if.end106, !dbg !10200

if.then77:                                        ; preds = %land.lhs.true70
  call void @start_sequence(), !dbg !10201
  %44 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10203
  %u78 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !10203
  %fld79 = bitcast %union.u* %u78 to [1 x %union.rtunion_def]*, !dbg !10203
  %arrayidx80 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld79, i64 0, i64 0, !dbg !10203
  %rt_rtx81 = bitcast %union.rtunion_def* %arrayidx80 to %struct.rtx_def**, !dbg !10203
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx81, align 8, !dbg !10203
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !10203
  %bf.load82 = load i32, i32* %46, align 8, !dbg !10203
  %bf.lshr83 = lshr i32 %bf.load82, 16, !dbg !10203
  %bf.clear84 = and i32 %bf.lshr83, 255, !dbg !10203
  %47 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10204
  %48 = load i64, i64* %offset, align 8, !dbg !10205
  %call85 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %48), !dbg !10205
  %49 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10206
  %u86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !10206
  %fld87 = bitcast %union.u* %u86 to [1 x %union.rtunion_def]*, !dbg !10206
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i64 0, i64 0, !dbg !10206
  %rt_rtx89 = bitcast %union.rtunion_def* %arrayidx88 to %struct.rtx_def**, !dbg !10206
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx89, align 8, !dbg !10206
  %call90 = call %struct.rtx_def* @expand_simple_binop(i32 %bf.clear84, i32 49, %struct.rtx_def* %47, %struct.rtx_def* %call85, %struct.rtx_def* %50, i32 1, i32 3), !dbg !10207
  store %struct.rtx_def* %call90, %struct.rtx_def** %x, align 8, !dbg !10208
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10209
  %52 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10211
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !10211
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !10211
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 0, !dbg !10211
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !10211
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx94, align 8, !dbg !10211
  %cmp95 = icmp ne %struct.rtx_def* %51, %53, !dbg !10212
  br i1 %cmp95, label %if.then96, label %if.end102, !dbg !10213

if.then96:                                        ; preds = %if.then77
  %54 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10214
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !10214
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !10214
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 0, !dbg !10214
  %rt_rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**, !dbg !10214
  %55 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx100, align 8, !dbg !10214
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10215
  %call101 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %55, %struct.rtx_def* %56), !dbg !10216
  br label %if.end102, !dbg !10216

if.end102:                                        ; preds = %if.then96, %if.then77
  %call103 = call %struct.rtx_def* @get_insns(), !dbg !10217
  store %struct.rtx_def* %call103, %struct.rtx_def** %seq, align 8, !dbg !10218
  call void @end_sequence(), !dbg !10219
  %57 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10220
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10221
  %call104 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %57, %struct.rtx_def* %58), !dbg !10222
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10223
  %call105 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %59), !dbg !10224
  br label %if.end358, !dbg !10225

if.end106:                                        ; preds = %land.lhs.true70, %land.lhs.true62, %land.lhs.true, %if.end54
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10226
  call void @extract_insn(%struct.rtx_def* %60), !dbg !10227
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10228
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !10228
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !10228
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 6, !dbg !10228
  %rt_int = bitcast %union.rtunion_def* %arrayidx109 to i32*, !dbg !10228
  %62 = load i32, i32* %rt_int, align 8, !dbg !10228
  store i32 %62, i32* %insn_code, align 4, !dbg !10229
  %63 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10230
  %u110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !10230
  %fld111 = bitcast %union.u* %u110 to [1 x %union.rtunion_def]*, !dbg !10230
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i64 0, i64 1, !dbg !10230
  %rt_rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**, !dbg !10230
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx113, align 8, !dbg !10230
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !10230
  %bf.load114 = load i32, i32* %65, align 8, !dbg !10230
  %bf.clear115 = and i32 %bf.load114, 65535, !dbg !10230
  %cmp116 = icmp eq i32 %bf.clear115, 49, !dbg !10232
  br i1 %cmp116, label %land.lhs.true117, label %if.end190, !dbg !10233

land.lhs.true117:                                 ; preds = %if.end106
  %66 = load i8, i8* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 7), align 2, !dbg !10234
  %conv = sext i8 %66 to i32, !dbg !10235
  %cmp118 = icmp sge i32 %conv, 3, !dbg !10236
  br i1 %cmp118, label %land.lhs.true120, label %if.end190, !dbg !10237

land.lhs.true120:                                 ; preds = %land.lhs.true117
  %67 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 1, i64 1), align 8, !dbg !10238
  %68 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10239
  %u121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !10239
  %fld122 = bitcast %union.u* %u121 to [1 x %union.rtunion_def]*, !dbg !10239
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i64 0, i64 1, !dbg !10239
  %rt_rtx124 = bitcast %union.rtunion_def* %arrayidx123 to %struct.rtx_def**, !dbg !10239
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx124, align 8, !dbg !10239
  %u125 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !10239
  %fld126 = bitcast %union.u* %u125 to [1 x %union.rtunion_def]*, !dbg !10239
  %arrayidx127 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld126, i64 0, i64 0, !dbg !10239
  %rt_rtx128 = bitcast %union.rtunion_def* %arrayidx127 to %struct.rtx_def**, !dbg !10239
  %cmp129 = icmp eq %struct.rtx_def** %67, %rt_rtx128, !dbg !10240
  br i1 %cmp129, label %land.lhs.true131, label %if.end190, !dbg !10241

land.lhs.true131:                                 ; preds = %land.lhs.true120
  %70 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 1, i64 2), align 8, !dbg !10242
  %71 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10243
  %u132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !10243
  %fld133 = bitcast %union.u* %u132 to [1 x %union.rtunion_def]*, !dbg !10243
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i64 0, i64 1, !dbg !10243
  %rt_rtx135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.rtx_def**, !dbg !10243
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx135, align 8, !dbg !10243
  %u136 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !10243
  %fld137 = bitcast %union.u* %u136 to [1 x %union.rtunion_def]*, !dbg !10243
  %arrayidx138 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld137, i64 0, i64 1, !dbg !10243
  %rt_rtx139 = bitcast %union.rtunion_def* %arrayidx138 to %struct.rtx_def**, !dbg !10243
  %cmp140 = icmp eq %struct.rtx_def** %70, %rt_rtx139, !dbg !10244
  br i1 %cmp140, label %land.lhs.true142, label %if.end190, !dbg !10245

land.lhs.true142:                                 ; preds = %land.lhs.true131
  %73 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0, i64 2), align 8, !dbg !10246
  %74 = bitcast %struct.rtx_def* %73 to i32*, !dbg !10246
  %bf.load143 = load i32, i32* %74, align 8, !dbg !10246
  %bf.clear144 = and i32 %bf.load143, 65535, !dbg !10246
  %cmp145 = icmp eq i32 %bf.clear144, 30, !dbg !10246
  br i1 %cmp145, label %land.lhs.true147, label %if.end190, !dbg !10247

land.lhs.true147:                                 ; preds = %land.lhs.true142
  %75 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0, i64 1), align 8, !dbg !10248
  %call148 = call %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %75, i64* %offset), !dbg !10249
  store %struct.rtx_def* %call148, %struct.rtx_def** %new_rtx, align 8, !dbg !10250
  %tobool149 = icmp ne %struct.rtx_def* %call148, null, !dbg !10250
  br i1 %tobool149, label %if.then150, label %if.end190, !dbg !10251

if.then150:                                       ; preds = %land.lhs.true147
  %76 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0, i64 2), align 8, !dbg !10252
  %u151 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !10252
  %hwint = bitcast %union.u* %u151 to [1 x i64]*, !dbg !10252
  %arrayidx152 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !10252
  %77 = load i64, i64* %arrayidx152, align 8, !dbg !10252
  %78 = load i64, i64* %offset, align 8, !dbg !10254
  %add = add nsw i64 %78, %77, !dbg !10254
  store i64 %add, i64* %offset, align 8, !dbg !10254
  %79 = load i64, i64* %offset, align 8, !dbg !10255
  %cmp153 = icmp eq i64 %79, 0, !dbg !10257
  br i1 %cmp153, label %land.lhs.true155, label %if.end181, !dbg !10258

land.lhs.true155:                                 ; preds = %if.then150
  %80 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10259
  %u156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !10259
  %fld157 = bitcast %union.u* %u156 to [1 x %union.rtunion_def]*, !dbg !10259
  %arrayidx158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld157, i64 0, i64 0, !dbg !10259
  %rt_rtx159 = bitcast %union.rtunion_def* %arrayidx158 to %struct.rtx_def**, !dbg !10259
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx159, align 8, !dbg !10259
  %82 = bitcast %struct.rtx_def* %81 to i32*, !dbg !10259
  %bf.load160 = load i32, i32* %82, align 8, !dbg !10259
  %bf.clear161 = and i32 %bf.load160, 65535, !dbg !10259
  %cmp162 = icmp eq i32 %bf.clear161, 37, !dbg !10259
  br i1 %cmp162, label %land.lhs.true164, label %if.end181, !dbg !10260

land.lhs.true164:                                 ; preds = %land.lhs.true155
  %83 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10261
  %u165 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !10261
  %fld166 = bitcast %union.u* %u165 to [1 x %union.rtunion_def]*, !dbg !10261
  %arrayidx167 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld166, i64 0, i64 0, !dbg !10261
  %rt_rtx168 = bitcast %union.rtunion_def* %arrayidx167 to %struct.rtx_def**, !dbg !10261
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx168, align 8, !dbg !10261
  %call169 = call i32 @rhs_regno(%struct.rtx_def* %84), !dbg !10261
  %cmp170 = icmp ugt i32 %call169, 57, !dbg !10262
  br i1 %cmp170, label %if.then172, label %if.end181, !dbg !10263

if.then172:                                       ; preds = %land.lhs.true164
  call void @start_sequence(), !dbg !10264
  %85 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10266
  %u173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1, !dbg !10266
  %fld174 = bitcast %union.u* %u173 to [1 x %union.rtunion_def]*, !dbg !10266
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i64 0, i64 0, !dbg !10266
  %rt_rtx176 = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**, !dbg !10266
  %86 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx176, align 8, !dbg !10266
  %87 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10267
  %call177 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %86, %struct.rtx_def* %87), !dbg !10268
  %call178 = call %struct.rtx_def* @get_insns(), !dbg !10269
  store %struct.rtx_def* %call178, %struct.rtx_def** %seq, align 8, !dbg !10270
  call void @end_sequence(), !dbg !10271
  %88 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10272
  %89 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10273
  %call179 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %88, %struct.rtx_def* %89), !dbg !10274
  %90 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10275
  %call180 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %90), !dbg !10276
  br label %if.end358, !dbg !10277

if.end181:                                        ; preds = %land.lhs.true164, %land.lhs.true155, %if.then150
  %91 = load i64, i64* %offset, align 8, !dbg !10278
  %92 = load i32, i32* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 3, i64 2), align 8, !dbg !10279
  %call182 = call %struct.rtx_def* @gen_int_mode(i64 %91, i32 %92), !dbg !10280
  store %struct.rtx_def* %call182, %struct.rtx_def** %x, align 8, !dbg !10281
  %93 = load i32, i32* %insn_code, align 4, !dbg !10282
  %94 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10284
  %call183 = call i32 @safe_insn_predicate(i32 %93, i32 1, %struct.rtx_def* %94), !dbg !10285
  %tobool184 = icmp ne i32 %call183, 0, !dbg !10285
  br i1 %tobool184, label %land.lhs.true185, label %if.end189, !dbg !10286

land.lhs.true185:                                 ; preds = %if.end181
  %95 = load i32, i32* %insn_code, align 4, !dbg !10287
  %96 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10288
  %call186 = call i32 @safe_insn_predicate(i32 %95, i32 2, %struct.rtx_def* %96), !dbg !10289
  %tobool187 = icmp ne i32 %call186, 0, !dbg !10289
  br i1 %tobool187, label %if.then188, label %if.end189, !dbg !10290

if.then188:                                       ; preds = %land.lhs.true185
  %97 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10291
  store %struct.rtx_def* %97, %struct.rtx_def** getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0, i64 1), align 8, !dbg !10293
  %98 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 1, i64 1), align 8, !dbg !10294
  store %struct.rtx_def* %97, %struct.rtx_def** %98, align 8, !dbg !10295
  %99 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10296
  store %struct.rtx_def* %99, %struct.rtx_def** getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0, i64 2), align 8, !dbg !10297
  %100 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 1, i64 2), align 8, !dbg !10298
  store %struct.rtx_def* %99, %struct.rtx_def** %100, align 8, !dbg !10299
  store i8 1, i8* %any_change, align 1, !dbg !10300
  br label %if.end189, !dbg !10301

if.end189:                                        ; preds = %if.then188, %land.lhs.true185, %if.end181
  br label %if.end190, !dbg !10302

if.end190:                                        ; preds = %if.end189, %land.lhs.true147, %land.lhs.true142, %land.lhs.true131, %land.lhs.true120, %land.lhs.true117, %if.end106
  br label %if.end195, !dbg !10303

if.else:                                          ; preds = %cond.end25
  %101 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10304
  call void @extract_insn(%struct.rtx_def* %101), !dbg !10306
  %102 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10307
  %u191 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1, !dbg !10307
  %fld192 = bitcast %union.u* %u191 to [1 x %union.rtunion_def]*, !dbg !10307
  %arrayidx193 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld192, i64 0, i64 6, !dbg !10307
  %rt_int194 = bitcast %union.rtunion_def* %arrayidx193 to i32*, !dbg !10307
  %103 = load i32, i32* %rt_int194, align 8, !dbg !10307
  store i32 %103, i32* %insn_code, align 4, !dbg !10308
  br label %if.end195

if.end195:                                        ; preds = %if.else, %if.end190
  store i32 0, i32* %i, align 4, !dbg !10309
  br label %for.cond, !dbg !10311

for.cond:                                         ; preds = %for.inc, %if.end195
  %104 = load i32, i32* %i, align 4, !dbg !10312
  %105 = load i8, i8* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 7), align 2, !dbg !10314
  %conv196 = sext i8 %105 to i32, !dbg !10315
  %cmp197 = icmp slt i32 %104, %conv196, !dbg !10316
  br i1 %cmp197, label %for.body, label %for.end, !dbg !10317

for.body:                                         ; preds = %for.cond
  %106 = load i32, i32* %i, align 4, !dbg !10318
  %idxprom = sext i32 %106 to i64, !dbg !10320
  %arrayidx199 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom, !dbg !10320
  %107 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx199, align 8, !dbg !10320
  store %struct.rtx_def* %107, %struct.rtx_def** %x, align 8, !dbg !10321
  %108 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10322
  %109 = bitcast %struct.rtx_def* %108 to i32*, !dbg !10322
  %bf.load200 = load i32, i32* %109, align 8, !dbg !10322
  %bf.clear201 = and i32 %bf.load200, 65535, !dbg !10322
  switch i32 %bf.clear201, label %sw.default [
    i32 43, label %sw.bb
    i32 37, label %sw.bb225
    i32 39, label %sw.bb243
  ], !dbg !10323

sw.bb:                                            ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !10324, metadata !DIExpression()), !dbg !10327
  %110 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10328
  %u202 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1, !dbg !10328
  %fld203 = bitcast %union.u* %u202 to [1 x %union.rtunion_def]*, !dbg !10328
  %arrayidx204 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld203, i64 0, i64 0, !dbg !10328
  %rt_rtx205 = bitcast %union.rtunion_def* %arrayidx204 to %struct.rtx_def**, !dbg !10328
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx205, align 8, !dbg !10328
  store %struct.rtx_def* %111, %struct.rtx_def** %addr, align 8, !dbg !10327
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !10329, metadata !DIExpression()), !dbg !10330
  store i8 0, i8* %changed, align 1, !dbg !10330
  %call206 = call i32 @for_each_rtx(%struct.rtx_def** %addr, i32 (%struct.rtx_def**, i8*)* @instantiate_virtual_regs_in_rtx, i8* %changed), !dbg !10331
  %112 = load i8, i8* %changed, align 1, !dbg !10332
  %tobool207 = icmp ne i8 %112, 0, !dbg !10332
  br i1 %tobool207, label %if.end209, label %if.then208, !dbg !10334

if.then208:                                       ; preds = %sw.bb
  br label %for.inc, !dbg !10335

if.end209:                                        ; preds = %sw.bb
  call void @start_sequence(), !dbg !10336
  %113 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10337
  %114 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10338
  %call210 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %113, %struct.rtx_def* %114), !dbg !10339
  store %struct.rtx_def* %call210, %struct.rtx_def** %x, align 8, !dbg !10340
  %115 = load i32, i32* %insn_code, align 4, !dbg !10341
  %116 = load i32, i32* %i, align 4, !dbg !10343
  %117 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10344
  %call211 = call i32 @safe_insn_predicate(i32 %115, i32 %116, %struct.rtx_def* %117), !dbg !10345
  %tobool212 = icmp ne i32 %call211, 0, !dbg !10345
  br i1 %tobool212, label %if.end219, label %if.then213, !dbg !10346

if.then213:                                       ; preds = %if.end209
  %118 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10347
  %119 = bitcast %struct.rtx_def* %118 to i32*, !dbg !10347
  %bf.load214 = load i32, i32* %119, align 8, !dbg !10347
  %bf.lshr215 = lshr i32 %bf.load214, 16, !dbg !10347
  %bf.clear216 = and i32 %bf.lshr215, 255, !dbg !10347
  %120 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10349
  %call217 = call %struct.rtx_def* @force_reg(i32 %bf.clear216, %struct.rtx_def* %120), !dbg !10350
  store %struct.rtx_def* %call217, %struct.rtx_def** %addr, align 8, !dbg !10351
  %121 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10352
  %122 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !10353
  %call218 = call %struct.rtx_def* @replace_equiv_address(%struct.rtx_def* %121, %struct.rtx_def* %122), !dbg !10354
  store %struct.rtx_def* %call218, %struct.rtx_def** %x, align 8, !dbg !10355
  br label %if.end219, !dbg !10356

if.end219:                                        ; preds = %if.then213, %if.end209
  %call220 = call %struct.rtx_def* @get_insns(), !dbg !10357
  store %struct.rtx_def* %call220, %struct.rtx_def** %seq, align 8, !dbg !10358
  call void @end_sequence(), !dbg !10359
  %123 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10360
  %tobool221 = icmp ne %struct.rtx_def* %123, null, !dbg !10360
  br i1 %tobool221, label %if.then222, label %if.end224, !dbg !10362

if.then222:                                       ; preds = %if.end219
  %124 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10363
  %125 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10364
  %call223 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %124, %struct.rtx_def* %125), !dbg !10365
  br label %if.end224, !dbg !10365

if.end224:                                        ; preds = %if.then222, %if.end219
  br label %sw.epilog, !dbg !10366

sw.bb225:                                         ; preds = %for.body
  %126 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10367
  %call226 = call %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %126, i64* %offset), !dbg !10368
  store %struct.rtx_def* %call226, %struct.rtx_def** %new_rtx, align 8, !dbg !10369
  %127 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10370
  %cmp227 = icmp eq %struct.rtx_def* %127, null, !dbg !10372
  br i1 %cmp227, label %if.then229, label %if.end230, !dbg !10373

if.then229:                                       ; preds = %sw.bb225
  br label %for.inc, !dbg !10374

if.end230:                                        ; preds = %sw.bb225
  %128 = load i64, i64* %offset, align 8, !dbg !10375
  %cmp231 = icmp eq i64 %128, 0, !dbg !10377
  br i1 %cmp231, label %if.then233, label %if.else234, !dbg !10378

if.then233:                                       ; preds = %if.end230
  %129 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10379
  store %struct.rtx_def* %129, %struct.rtx_def** %x, align 8, !dbg !10380
  br label %if.end242, !dbg !10381

if.else234:                                       ; preds = %if.end230
  call void @start_sequence(), !dbg !10382
  %130 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10384
  %131 = bitcast %struct.rtx_def* %130 to i32*, !dbg !10384
  %bf.load235 = load i32, i32* %131, align 8, !dbg !10384
  %bf.lshr236 = lshr i32 %bf.load235, 16, !dbg !10384
  %bf.clear237 = and i32 %bf.lshr236, 255, !dbg !10384
  %132 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10385
  %133 = load i64, i64* %offset, align 8, !dbg !10386
  %call238 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %133), !dbg !10386
  %call239 = call %struct.rtx_def* @expand_simple_binop(i32 %bf.clear237, i32 49, %struct.rtx_def* %132, %struct.rtx_def* %call238, %struct.rtx_def* null, i32 1, i32 3), !dbg !10387
  store %struct.rtx_def* %call239, %struct.rtx_def** %x, align 8, !dbg !10388
  %call240 = call %struct.rtx_def* @get_insns(), !dbg !10389
  store %struct.rtx_def* %call240, %struct.rtx_def** %seq, align 8, !dbg !10390
  call void @end_sequence(), !dbg !10391
  %134 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10392
  %135 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10393
  %call241 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %134, %struct.rtx_def* %135), !dbg !10394
  br label %if.end242

if.end242:                                        ; preds = %if.else234, %if.then233
  br label %sw.epilog, !dbg !10395

sw.bb243:                                         ; preds = %for.body
  %136 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10396
  %u244 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1, !dbg !10396
  %fld245 = bitcast %union.u* %u244 to [1 x %union.rtunion_def]*, !dbg !10396
  %arrayidx246 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld245, i64 0, i64 0, !dbg !10396
  %rt_rtx247 = bitcast %union.rtunion_def* %arrayidx246 to %struct.rtx_def**, !dbg !10396
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx247, align 8, !dbg !10396
  %call248 = call %struct.rtx_def* @instantiate_new_reg(%struct.rtx_def* %137, i64* %offset), !dbg !10397
  store %struct.rtx_def* %call248, %struct.rtx_def** %new_rtx, align 8, !dbg !10398
  %138 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10399
  %cmp249 = icmp eq %struct.rtx_def* %138, null, !dbg !10401
  br i1 %cmp249, label %if.then251, label %if.end252, !dbg !10402

if.then251:                                       ; preds = %sw.bb243
  br label %for.inc, !dbg !10403

if.end252:                                        ; preds = %sw.bb243
  %139 = load i64, i64* %offset, align 8, !dbg !10404
  %cmp253 = icmp ne i64 %139, 0, !dbg !10406
  br i1 %cmp253, label %if.then255, label %if.end263, !dbg !10407

if.then255:                                       ; preds = %if.end252
  call void @start_sequence(), !dbg !10408
  %140 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10410
  %141 = bitcast %struct.rtx_def* %140 to i32*, !dbg !10410
  %bf.load256 = load i32, i32* %141, align 8, !dbg !10410
  %bf.lshr257 = lshr i32 %bf.load256, 16, !dbg !10410
  %bf.clear258 = and i32 %bf.lshr257, 255, !dbg !10410
  %142 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10411
  %143 = load i64, i64* %offset, align 8, !dbg !10412
  %call259 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %143), !dbg !10412
  %call260 = call %struct.rtx_def* @expand_simple_binop(i32 %bf.clear258, i32 49, %struct.rtx_def* %142, %struct.rtx_def* %call259, %struct.rtx_def* null, i32 1, i32 3), !dbg !10413
  store %struct.rtx_def* %call260, %struct.rtx_def** %new_rtx, align 8, !dbg !10414
  %call261 = call %struct.rtx_def* @get_insns(), !dbg !10415
  store %struct.rtx_def* %call261, %struct.rtx_def** %seq, align 8, !dbg !10416
  call void @end_sequence(), !dbg !10417
  %144 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10418
  %145 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10419
  %call262 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %144, %struct.rtx_def* %145), !dbg !10420
  br label %if.end263, !dbg !10421

if.end263:                                        ; preds = %if.then255, %if.end252
  %146 = load i32, i32* %i, align 4, !dbg !10422
  %idxprom264 = sext i32 %146 to i64, !dbg !10423
  %arrayidx265 = getelementptr inbounds [30 x i32], [30 x i32]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 3), i64 0, i64 %idxprom264, !dbg !10423
  %147 = load i32, i32* %arrayidx265, align 4, !dbg !10423
  %148 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10424
  %149 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !10425
  %150 = bitcast %struct.rtx_def* %149 to i32*, !dbg !10425
  %bf.load266 = load i32, i32* %150, align 8, !dbg !10425
  %bf.lshr267 = lshr i32 %bf.load266, 16, !dbg !10425
  %bf.clear268 = and i32 %bf.lshr267, 255, !dbg !10425
  %151 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10426
  %u269 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1, !dbg !10426
  %fld270 = bitcast %union.u* %u269 to [1 x %union.rtunion_def]*, !dbg !10426
  %arrayidx271 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld270, i64 0, i64 1, !dbg !10426
  %rt_uint = bitcast %union.rtunion_def* %arrayidx271 to i32*, !dbg !10426
  %152 = load i32, i32* %rt_uint, align 8, !dbg !10426
  %call272 = call %struct.rtx_def* @simplify_gen_subreg(i32 %147, %struct.rtx_def* %148, i32 %bf.clear268, i32 %152), !dbg !10427
  store %struct.rtx_def* %call272, %struct.rtx_def** %x, align 8, !dbg !10428
  %153 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10429
  %tobool273 = icmp ne %struct.rtx_def* %153, null, !dbg !10429
  br i1 %tobool273, label %cond.false275, label %cond.true274, !dbg !10429

cond.true274:                                     ; preds = %if.end263
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1600, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !10429
  br label %cond.end276, !dbg !10429

cond.false275:                                    ; preds = %if.end263
  br label %cond.end276, !dbg !10429

cond.end276:                                      ; preds = %cond.false275, %cond.true274
  %cond277 = phi i32 [ 0, %cond.true274 ], [ 0, %cond.false275 ], !dbg !10429
  br label %sw.epilog, !dbg !10430

sw.default:                                       ; preds = %for.body
  br label %for.inc, !dbg !10431

sw.epilog:                                        ; preds = %cond.end276, %if.end242, %if.end224
  %154 = load i32, i32* %insn_code, align 4, !dbg !10432
  %155 = load i32, i32* %i, align 4, !dbg !10434
  %156 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10435
  %call278 = call i32 @safe_insn_predicate(i32 %154, i32 %155, %struct.rtx_def* %156), !dbg !10436
  %tobool279 = icmp ne i32 %call278, 0, !dbg !10436
  br i1 %tobool279, label %if.end307, label %if.then280, !dbg !10437

if.then280:                                       ; preds = %sw.epilog
  call void @start_sequence(), !dbg !10438
  %157 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10440
  %158 = bitcast %struct.rtx_def* %157 to i32*, !dbg !10440
  %bf.load281 = load i32, i32* %158, align 8, !dbg !10440
  %bf.clear282 = and i32 %bf.load281, 65535, !dbg !10440
  %cmp283 = icmp eq i32 %bf.clear282, 37, !dbg !10440
  br i1 %cmp283, label %if.then285, label %if.else294, !dbg !10442

if.then285:                                       ; preds = %if.then280
  %159 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10443
  %call286 = call i32 @rhs_regno(%struct.rtx_def* %159), !dbg !10443
  %cmp287 = icmp ule i32 %call286, 57, !dbg !10443
  br i1 %cmp287, label %cond.false290, label %cond.true289, !dbg !10443

cond.true289:                                     ; preds = %if.then285
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1615, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !10443
  br label %cond.end291, !dbg !10443

cond.false290:                                    ; preds = %if.then285
  br label %cond.end291, !dbg !10443

cond.end291:                                      ; preds = %cond.false290, %cond.true289
  %cond292 = phi i32 [ 0, %cond.true289 ], [ 0, %cond.false290 ], !dbg !10443
  %160 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10445
  %call293 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %160), !dbg !10446
  store %struct.rtx_def* %call293, %struct.rtx_def** %x, align 8, !dbg !10447
  br label %if.end301, !dbg !10448

if.else294:                                       ; preds = %if.then280
  %161 = load i32, i32* %insn_code, align 4, !dbg !10449
  %idxprom295 = sext i32 %161 to i64, !dbg !10450
  %arrayidx296 = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom295, !dbg !10450
  %operand = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx296, i32 0, i32 3, !dbg !10451
  %162 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !10451
  %163 = load i32, i32* %i, align 4, !dbg !10452
  %idxprom297 = sext i32 %163 to i64, !dbg !10450
  %arrayidx298 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %162, i64 %idxprom297, !dbg !10450
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %arrayidx298, i32 0, i32 2, !dbg !10453
  %bf.load299 = load i16, i16* %mode, align 8, !dbg !10453
  %bf.cast = zext i16 %bf.load299 to i32, !dbg !10453
  %164 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10454
  %call300 = call %struct.rtx_def* @force_reg(i32 %bf.cast, %struct.rtx_def* %164), !dbg !10455
  store %struct.rtx_def* %call300, %struct.rtx_def** %x, align 8, !dbg !10456
  br label %if.end301

if.end301:                                        ; preds = %if.else294, %cond.end291
  %call302 = call %struct.rtx_def* @get_insns(), !dbg !10457
  store %struct.rtx_def* %call302, %struct.rtx_def** %seq, align 8, !dbg !10458
  call void @end_sequence(), !dbg !10459
  %165 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10460
  %tobool303 = icmp ne %struct.rtx_def* %165, null, !dbg !10460
  br i1 %tobool303, label %if.then304, label %if.end306, !dbg !10462

if.then304:                                       ; preds = %if.end301
  %166 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !10463
  %167 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10464
  %call305 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %166, %struct.rtx_def* %167), !dbg !10465
  br label %if.end306, !dbg !10465

if.end306:                                        ; preds = %if.then304, %if.end301
  br label %if.end307, !dbg !10466

if.end307:                                        ; preds = %if.end306, %sw.epilog
  %168 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !10467
  %169 = load i32, i32* %i, align 4, !dbg !10468
  %idxprom308 = sext i32 %169 to i64, !dbg !10469
  %arrayidx309 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom308, !dbg !10469
  store %struct.rtx_def* %168, %struct.rtx_def** %arrayidx309, align 8, !dbg !10470
  %170 = load i32, i32* %i, align 4, !dbg !10471
  %idxprom310 = sext i32 %170 to i64, !dbg !10472
  %arrayidx311 = getelementptr inbounds [30 x %struct.rtx_def**], [30 x %struct.rtx_def**]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 1), i64 0, i64 %idxprom310, !dbg !10472
  %171 = load %struct.rtx_def**, %struct.rtx_def*** %arrayidx311, align 8, !dbg !10472
  store %struct.rtx_def* %168, %struct.rtx_def** %171, align 8, !dbg !10473
  store i8 1, i8* %any_change, align 1, !dbg !10474
  br label %for.inc, !dbg !10475

for.inc:                                          ; preds = %if.end307, %sw.default, %if.then251, %if.then229, %if.then208
  %172 = load i32, i32* %i, align 4, !dbg !10476
  %inc = add nsw i32 %172, 1, !dbg !10476
  store i32 %inc, i32* %i, align 4, !dbg !10476
  br label %for.cond, !dbg !10477, !llvm.loop !10478

for.end:                                          ; preds = %for.cond
  %173 = load i8, i8* %any_change, align 1, !dbg !10480
  %tobool312 = icmp ne i8 %173, 0, !dbg !10480
  br i1 %tobool312, label %if.then313, label %if.end334, !dbg !10482

if.then313:                                       ; preds = %for.end
  store i32 0, i32* %i, align 4, !dbg !10483
  br label %for.cond314, !dbg !10486

for.cond314:                                      ; preds = %for.inc327, %if.then313
  %174 = load i32, i32* %i, align 4, !dbg !10487
  %175 = load i8, i8* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 8), align 1, !dbg !10489
  %conv315 = sext i8 %175 to i32, !dbg !10490
  %cmp316 = icmp slt i32 %174, %conv315, !dbg !10491
  br i1 %cmp316, label %for.body318, label %for.end329, !dbg !10492

for.body318:                                      ; preds = %for.cond314
  %176 = load i32, i32* %i, align 4, !dbg !10493
  %idxprom319 = sext i32 %176 to i64, !dbg !10494
  %arrayidx320 = getelementptr inbounds [14 x i8], [14 x i8]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 6), i64 0, i64 %idxprom319, !dbg !10494
  %177 = load i8, i8* %arrayidx320, align 1, !dbg !10494
  %conv321 = sext i8 %177 to i32, !dbg !10495
  %idxprom322 = zext i32 %conv321 to i64, !dbg !10496
  %arrayidx323 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom322, !dbg !10496
  %178 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx323, align 8, !dbg !10496
  %call324 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %178), !dbg !10497
  %179 = load i32, i32* %i, align 4, !dbg !10498
  %idxprom325 = sext i32 %179 to i64, !dbg !10499
  %arrayidx326 = getelementptr inbounds [14 x %struct.rtx_def**], [14 x %struct.rtx_def**]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 5), i64 0, i64 %idxprom325, !dbg !10499
  %180 = load %struct.rtx_def**, %struct.rtx_def*** %arrayidx326, align 8, !dbg !10499
  store %struct.rtx_def* %call324, %struct.rtx_def** %180, align 8, !dbg !10500
  br label %for.inc327, !dbg !10501

for.inc327:                                       ; preds = %for.body318
  %181 = load i32, i32* %i, align 4, !dbg !10502
  %inc328 = add nsw i32 %181, 1, !dbg !10502
  store i32 %inc328, i32* %i, align 4, !dbg !10502
  br label %for.cond314, !dbg !10503, !llvm.loop !10504

for.end329:                                       ; preds = %for.cond314
  %182 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10506
  %u330 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %182, i32 0, i32 1, !dbg !10506
  %fld331 = bitcast %union.u* %u330 to [1 x %union.rtunion_def]*, !dbg !10506
  %arrayidx332 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld331, i64 0, i64 6, !dbg !10506
  %rt_int333 = bitcast %union.rtunion_def* %arrayidx332 to i32*, !dbg !10506
  store i32 -1, i32* %rt_int333, align 8, !dbg !10507
  br label %if.end334, !dbg !10508

if.end334:                                        ; preds = %for.end329, %for.end
  %183 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10509
  %u335 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %183, i32 0, i32 1, !dbg !10509
  %fld336 = bitcast %union.u* %u335 to [1 x %union.rtunion_def]*, !dbg !10509
  %arrayidx337 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld336, i64 0, i64 5, !dbg !10509
  %rt_rtx338 = bitcast %union.rtunion_def* %arrayidx337 to %struct.rtx_def**, !dbg !10509
  %184 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx338, align 8, !dbg !10509
  %call339 = call i32 @asm_noperands(%struct.rtx_def* %184), !dbg !10511
  %cmp340 = icmp sge i32 %call339, 0, !dbg !10512
  br i1 %cmp340, label %if.then342, label %if.else352, !dbg !10513

if.then342:                                       ; preds = %if.end334
  %185 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10514
  %u343 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %185, i32 0, i32 1, !dbg !10514
  %fld344 = bitcast %union.u* %u343 to [1 x %union.rtunion_def]*, !dbg !10514
  %arrayidx345 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld344, i64 0, i64 5, !dbg !10514
  %rt_rtx346 = bitcast %union.rtunion_def* %arrayidx345 to %struct.rtx_def**, !dbg !10514
  %186 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx346, align 8, !dbg !10514
  %call347 = call i32 @check_asm_operands(%struct.rtx_def* %186), !dbg !10517
  %tobool348 = icmp ne i32 %call347, 0, !dbg !10517
  br i1 %tobool348, label %if.end351, label %if.then349, !dbg !10518

if.then349:                                       ; preds = %if.then342
  %187 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10519
  call void (%struct.rtx_def*, i8*, ...) @error_for_asm(%struct.rtx_def* %187, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12, i64 0, i64 0)), !dbg !10521
  %188 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10522
  %call350 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %188), !dbg !10523
  br label %if.end351, !dbg !10524

if.end351:                                        ; preds = %if.then349, %if.then342
  br label %if.end358, !dbg !10525

if.else352:                                       ; preds = %if.end334
  %189 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10526
  %call353 = call i32 @recog_memoized(%struct.rtx_def* %189), !dbg !10529
  %cmp354 = icmp slt i32 %call353, 0, !dbg !10530
  br i1 %cmp354, label %if.then356, label %if.end357, !dbg !10531

if.then356:                                       ; preds = %if.else352
  %190 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10532
  call void @_fatal_insn_not_found(%struct.rtx_def* %190, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 1652, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !10532
  br label %if.end357, !dbg !10532

if.end357:                                        ; preds = %if.then356, %if.else352
  br label %if.end358

if.end358:                                        ; preds = %if.end, %if.end102, %if.then172, %if.end357, %if.end351
  ret void, !dbg !10533
}

; Function Attrs: noinline nounwind uwtable
define internal void @instantiate_decls(%union.tree_node* %fndecl) #0 !dbg !10534 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %next = alloca %union.tree_node*, align 8
  %v = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !10535, metadata !DIExpression()), !dbg !10536
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !10537, metadata !DIExpression()), !dbg !10538
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !10539, metadata !DIExpression()), !dbg !10540
  call void @llvm.dbg.declare(metadata %union.tree_node** %next, metadata !10541, metadata !DIExpression()), !dbg !10542
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10543
  %decl_non_common = bitcast %union.tree_node* %0 to %struct.tree_decl_non_common*, !dbg !10543
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !10543
  %1 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !10543
  store %union.tree_node* %1, %union.tree_node** %decl, align 8, !dbg !10545
  br label %for.cond, !dbg !10546

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10547
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !10549
  br i1 %tobool, label %for.body, label %for.end, !dbg !10549

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10550
  %decl_with_rtl = bitcast %union.tree_node* %3 to %struct.tree_decl_with_rtl*, !dbg !10550
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !10550
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !10550
  %tobool1 = icmp ne %struct.rtx_def* %4, null, !dbg !10550
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !10550

cond.true:                                        ; preds = %for.body
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10550
  %decl_with_rtl2 = bitcast %union.tree_node* %5 to %struct.tree_decl_with_rtl*, !dbg !10550
  %rtl3 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl2, i32 0, i32 1, !dbg !10550
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rtl3, align 8, !dbg !10550
  br label %cond.end, !dbg !10550

cond.false:                                       ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10550
  call void @make_decl_rtl(%union.tree_node* %7), !dbg !10550
  %8 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10550
  %decl_with_rtl4 = bitcast %union.tree_node* %8 to %struct.tree_decl_with_rtl*, !dbg !10550
  %rtl5 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl4, i32 0, i32 1, !dbg !10550
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8, !dbg !10550
  br label %cond.end, !dbg !10550

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %6, %cond.true ], [ %9, %cond.false ], !dbg !10550
  call void @instantiate_decl_rtl(%struct.rtx_def* %cond), !dbg !10552
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10553
  %parm_decl = bitcast %union.tree_node* %10 to %struct.tree_parm_decl*, !dbg !10553
  %incoming_rtl = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 1, !dbg !10553
  %11 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl, align 8, !dbg !10553
  call void @instantiate_decl_rtl(%struct.rtx_def* %11), !dbg !10554
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10555
  %decl_common = bitcast %union.tree_node* %12 to %struct.tree_decl_common*, !dbg !10555
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !10555
  %13 = bitcast i40* %decl_flag_2 to i64*, !dbg !10555
  %bf.load = load i64, i64* %13, align 8, !dbg !10555
  %bf.lshr = lshr i64 %bf.load, 26, !dbg !10555
  %bf.clear = and i64 %bf.lshr, 1, !dbg !10555
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10555
  %tobool6 = icmp ne i32 %bf.cast, 0, !dbg !10555
  br i1 %tobool6, label %if.then, label %if.end, !dbg !10557

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %v, metadata !10558, metadata !DIExpression()), !dbg !10560
  %14 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10561
  %call = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %14), !dbg !10561
  store %union.tree_node* %call, %union.tree_node** %v, align 8, !dbg !10560
  %call7 = call %union.tree_node* @walk_tree_1(%union.tree_node** %v, %union.tree_node* (%union.tree_node**, i32*, i8*)* @instantiate_expr, i8* null, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !10562
  br label %if.end, !dbg !10563

if.end:                                           ; preds = %if.then, %cond.end
  br label %for.inc, !dbg !10564

for.inc:                                          ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10565
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !10565
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !10565
  %16 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !10565
  store %union.tree_node* %16, %union.tree_node** %decl, align 8, !dbg !10566
  br label %for.cond, !dbg !10567, !llvm.loop !10568

for.end:                                          ; preds = %for.cond
  %17 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !10570
  %decl_common8 = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !10570
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common8, i32 0, i32 5, !dbg !10570
  %18 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !10570
  call void @instantiate_decls_1(%union.tree_node* %18), !dbg !10571
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10572
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %19, i32 0, i32 9, !dbg !10573
  %20 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !10573
  store %union.tree_node* %20, %union.tree_node** %t, align 8, !dbg !10574
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10575
  %local_decls9 = getelementptr inbounds %struct.function, %struct.function* %21, i32 0, i32 9, !dbg !10576
  store %union.tree_node* null, %union.tree_node** %local_decls9, align 8, !dbg !10577
  br label %for.cond10, !dbg !10578

for.cond10:                                       ; preds = %for.inc36, %for.end
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10579
  %tobool11 = icmp ne %union.tree_node* %22, null, !dbg !10582
  br i1 %tobool11, label %for.body12, label %for.end37, !dbg !10582

for.body12:                                       ; preds = %for.cond10
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10583
  %common13 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !10583
  %chain14 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common13, i32 0, i32 1, !dbg !10583
  %24 = load %union.tree_node*, %union.tree_node** %chain14, align 8, !dbg !10583
  store %union.tree_node* %24, %union.tree_node** %next, align 8, !dbg !10585
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10586
  %list = bitcast %union.tree_node* %25 to %struct.tree_list*, !dbg !10586
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !10586
  %26 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !10586
  store %union.tree_node* %26, %union.tree_node** %decl, align 8, !dbg !10587
  %27 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10588
  %base = bitcast %union.tree_node* %27 to %struct.tree_base*, !dbg !10588
  %28 = bitcast %struct.tree_base* %base to i64*, !dbg !10588
  %bf.load15 = load i64, i64* %28, align 8, !dbg !10588
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !10588
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !10588
  %idxprom = zext i32 %bf.cast17 to i64, !dbg !10588
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !10588
  %arrayidx18 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !10588
  %29 = load i8, i8* %arrayidx18, align 1, !dbg !10588
  %conv = zext i8 %29 to i32, !dbg !10588
  %tobool19 = icmp ne i32 %conv, 0, !dbg !10588
  br i1 %tobool19, label %land.lhs.true, label %if.end35, !dbg !10588

land.lhs.true:                                    ; preds = %for.body12
  %30 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10588
  %decl_with_rtl20 = bitcast %union.tree_node* %30 to %struct.tree_decl_with_rtl*, !dbg !10588
  %rtl21 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl20, i32 0, i32 1, !dbg !10588
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtl21, align 8, !dbg !10588
  %cmp = icmp ne %struct.rtx_def* %31, null, !dbg !10588
  br i1 %cmp, label %if.then23, label %if.end35, !dbg !10590

if.then23:                                        ; preds = %land.lhs.true
  %32 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10591
  %decl_with_rtl24 = bitcast %union.tree_node* %32 to %struct.tree_decl_with_rtl*, !dbg !10591
  %rtl25 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl24, i32 0, i32 1, !dbg !10591
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rtl25, align 8, !dbg !10591
  %tobool26 = icmp ne %struct.rtx_def* %33, null, !dbg !10591
  br i1 %tobool26, label %cond.true27, label %cond.false30, !dbg !10591

cond.true27:                                      ; preds = %if.then23
  %34 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10591
  %decl_with_rtl28 = bitcast %union.tree_node* %34 to %struct.tree_decl_with_rtl*, !dbg !10591
  %rtl29 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl28, i32 0, i32 1, !dbg !10591
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtl29, align 8, !dbg !10591
  br label %cond.end33, !dbg !10591

cond.false30:                                     ; preds = %if.then23
  %36 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10591
  call void @make_decl_rtl(%union.tree_node* %36), !dbg !10591
  %37 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10591
  %decl_with_rtl31 = bitcast %union.tree_node* %37 to %struct.tree_decl_with_rtl*, !dbg !10591
  %rtl32 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl31, i32 0, i32 1, !dbg !10591
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rtl32, align 8, !dbg !10591
  br label %cond.end33, !dbg !10591

cond.end33:                                       ; preds = %cond.false30, %cond.true27
  %cond34 = phi %struct.rtx_def* [ %35, %cond.true27 ], [ %38, %cond.false30 ], !dbg !10591
  call void @instantiate_decl_rtl(%struct.rtx_def* %cond34), !dbg !10592
  br label %if.end35, !dbg !10592

if.end35:                                         ; preds = %cond.end33, %land.lhs.true, %for.body12
  %39 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10593
  %40 = bitcast %union.tree_node* %39 to i8*, !dbg !10593
  call void @ggc_free(i8* %40), !dbg !10594
  br label %for.inc36, !dbg !10595

for.inc36:                                        ; preds = %if.end35
  %41 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !10596
  store %union.tree_node* %41, %union.tree_node** %t, align 8, !dbg !10597
  br label %for.cond10, !dbg !10598, !llvm.loop !10599

for.end37:                                        ; preds = %for.cond10
  ret void, !dbg !10601
}

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @delete_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @expand_simple_binop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

declare dso_local void @extract_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_int_mode(i64, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @safe_insn_predicate(i32 %code, i32 %operand, %struct.rtx_def* %x) #0 !dbg !10602 {
entry:
  %retval = alloca i32, align 4
  %code.addr = alloca i32, align 4
  %operand.addr = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %op_data = alloca %struct.insn_operand_data*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !10605, metadata !DIExpression()), !dbg !10606
  store i32 %operand, i32* %operand.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %operand.addr, metadata !10607, metadata !DIExpression()), !dbg !10608
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !10609, metadata !DIExpression()), !dbg !10610
  call void @llvm.dbg.declare(metadata %struct.insn_operand_data** %op_data, metadata !10611, metadata !DIExpression()), !dbg !10629
  %0 = load i32, i32* %code.addr, align 4, !dbg !10630
  %cmp = icmp slt i32 %0, 0, !dbg !10632
  br i1 %cmp, label %if.then, label %if.end, !dbg !10633

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !10634
  br label %return, !dbg !10634

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %code.addr, align 4, !dbg !10635
  %idxprom = sext i32 %1 to i64, !dbg !10636
  %arrayidx = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom, !dbg !10636
  %operand1 = getelementptr inbounds %struct.insn_data, %struct.insn_data* %arrayidx, i32 0, i32 3, !dbg !10637
  %2 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand1, align 8, !dbg !10637
  %3 = load i32, i32* %operand.addr, align 4, !dbg !10638
  %idxprom2 = sext i32 %3 to i64, !dbg !10636
  %arrayidx3 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %2, i64 %idxprom2, !dbg !10636
  store %struct.insn_operand_data* %arrayidx3, %struct.insn_operand_data** %op_data, align 8, !dbg !10639
  %4 = load %struct.insn_operand_data*, %struct.insn_operand_data** %op_data, align 8, !dbg !10640
  %predicate = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %4, i32 0, i32 0, !dbg !10642
  %5 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate, align 8, !dbg !10642
  %cmp4 = icmp eq i32 (%struct.rtx_def*, i32)* %5, null, !dbg !10643
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !10644

if.then5:                                         ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !10645
  br label %return, !dbg !10645

if.end6:                                          ; preds = %if.end
  %6 = load %struct.insn_operand_data*, %struct.insn_operand_data** %op_data, align 8, !dbg !10646
  %predicate7 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %6, i32 0, i32 0, !dbg !10647
  %7 = load i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)** %predicate7, align 8, !dbg !10647
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !10648
  %9 = load %struct.insn_operand_data*, %struct.insn_operand_data** %op_data, align 8, !dbg !10649
  %mode = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %9, i32 0, i32 2, !dbg !10650
  %bf.load = load i16, i16* %mode, align 8, !dbg !10650
  %bf.cast = zext i16 %bf.load to i32, !dbg !10650
  %call = call i32 %7(%struct.rtx_def* %8, i32 %bf.cast), !dbg !10646
  store i32 %call, i32* %retval, align 4, !dbg !10651
  br label %return, !dbg !10651

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !10652
  ret i32 %10, !dbg !10652
}

declare dso_local %struct.rtx_def* @replace_equiv_address(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @simplify_gen_subreg(i32, %struct.rtx_def*, i32, i32) #2

declare dso_local %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

declare dso_local i32 @asm_noperands(%struct.rtx_def*) #2

declare dso_local i32 @check_asm_operands(%struct.rtx_def*) #2

declare dso_local void @error_for_asm(%struct.rtx_def*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @recog_memoized(%struct.rtx_def* %insn) #0 !dbg !10653 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !10656, metadata !DIExpression()), !dbg !10657
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10658
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !10658
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10658
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 6, !dbg !10658
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !10658
  %1 = load i32, i32* %rt_int, align 8, !dbg !10658
  %cmp = icmp slt i32 %1, 0, !dbg !10660
  br i1 %cmp, label %if.then, label %if.end, !dbg !10661

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10662
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !10662
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !10662
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !10662
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !10662
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10662
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10663
  %call = call i32 @recog(%struct.rtx_def* %3, %struct.rtx_def* %4, i32* null), !dbg !10664
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10665
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !10665
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !10665
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 6, !dbg !10665
  %rt_int7 = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !10665
  store i32 %call, i32* %rt_int7, align 8, !dbg !10666
  br label %if.end, !dbg !10665

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !10667
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !10667
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !10667
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 6, !dbg !10667
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !10667
  %7 = load i32, i32* %rt_int11, align 8, !dbg !10667
  ret i32 %7, !dbg !10668
}

declare dso_local void @_fatal_insn_not_found(%struct.rtx_def*, i8*, i32, i8*) #2

declare dso_local i32 @recog(%struct.rtx_def*, %struct.rtx_def*, i32*) #2

declare dso_local %union.tree_node* @decl_value_expr_lookup(%union.tree_node*) #2

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_expr(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #0 !dbg !10669 {
entry:
  %tp.addr = alloca %union.tree_node**, align 8
  %walk_subtrees.addr = alloca i32*, align 8
  %data.addr = alloca i8*, align 8
  %t = alloca %union.tree_node*, align 8
  store %union.tree_node** %tp, %union.tree_node*** %tp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %tp.addr, metadata !10670, metadata !DIExpression()), !dbg !10671
  store i32* %walk_subtrees, i32** %walk_subtrees.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %walk_subtrees.addr, metadata !10672, metadata !DIExpression()), !dbg !10673
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !10674, metadata !DIExpression()), !dbg !10675
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !10676, metadata !DIExpression()), !dbg !10677
  %0 = load %union.tree_node**, %union.tree_node*** %tp.addr, align 8, !dbg !10678
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !10679
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !10677
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10680
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !10680
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !10680
  %bf.load = load i64, i64* %3, align 8, !dbg !10680
  %bf.clear = and i64 %bf.load, 65535, !dbg !10680
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10680
  %idxprom = sext i32 %bf.cast to i64, !dbg !10680
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10680
  %4 = load i32, i32* %arrayidx, align 4, !dbg !10680
  %cmp = icmp uge i32 %4, 4, !dbg !10680
  br i1 %cmp, label %land.lhs.true, label %if.then, !dbg !10680

land.lhs.true:                                    ; preds = %entry
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10680
  %base1 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !10680
  %6 = bitcast %struct.tree_base* %base1 to i64*, !dbg !10680
  %bf.load2 = load i64, i64* %6, align 8, !dbg !10680
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !10680
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !10680
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !10680
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !10680
  %7 = load i32, i32* %arrayidx6, align 4, !dbg !10680
  %cmp7 = icmp ule i32 %7, 10, !dbg !10680
  br i1 %cmp7, label %if.end34, label %if.then, !dbg !10682

if.then:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %walk_subtrees.addr, align 8, !dbg !10683
  store i32 0, i32* %8, align 4, !dbg !10685
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10686
  %base8 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !10686
  %10 = bitcast %struct.tree_base* %base8 to i64*, !dbg !10686
  %bf.load9 = load i64, i64* %10, align 8, !dbg !10686
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !10686
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !10686
  %idxprom12 = sext i32 %bf.cast11 to i64, !dbg !10686
  %arrayidx13 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom12, !dbg !10686
  %11 = load i32, i32* %arrayidx13, align 4, !dbg !10686
  %cmp14 = icmp eq i32 %11, 3, !dbg !10686
  br i1 %cmp14, label %land.lhs.true15, label %if.end, !dbg !10688

land.lhs.true15:                                  ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10689
  %base16 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !10689
  %13 = bitcast %struct.tree_base* %base16 to i64*, !dbg !10689
  %bf.load17 = load i64, i64* %13, align 8, !dbg !10689
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !10689
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !10689
  %idxprom20 = zext i32 %bf.cast19 to i64, !dbg !10689
  %arrayidx21 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom20, !dbg !10689
  %arrayidx22 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx21, i64 0, i64 11, !dbg !10689
  %14 = load i8, i8* %arrayidx22, align 1, !dbg !10689
  %conv = zext i8 %14 to i32, !dbg !10689
  %tobool = icmp ne i32 %conv, 0, !dbg !10689
  br i1 %tobool, label %land.lhs.true23, label %if.end, !dbg !10689

land.lhs.true23:                                  ; preds = %land.lhs.true15
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10689
  %decl_with_rtl = bitcast %union.tree_node* %15 to %struct.tree_decl_with_rtl*, !dbg !10689
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !10689
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !10689
  %cmp24 = icmp ne %struct.rtx_def* %16, null, !dbg !10689
  br i1 %cmp24, label %if.then26, label %if.end, !dbg !10690

if.then26:                                        ; preds = %land.lhs.true23
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10691
  %decl_with_rtl27 = bitcast %union.tree_node* %17 to %struct.tree_decl_with_rtl*, !dbg !10691
  %rtl28 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl27, i32 0, i32 1, !dbg !10691
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rtl28, align 8, !dbg !10691
  %tobool29 = icmp ne %struct.rtx_def* %18, null, !dbg !10691
  br i1 %tobool29, label %cond.true, label %cond.false, !dbg !10691

cond.true:                                        ; preds = %if.then26
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10691
  %decl_with_rtl30 = bitcast %union.tree_node* %19 to %struct.tree_decl_with_rtl*, !dbg !10691
  %rtl31 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl30, i32 0, i32 1, !dbg !10691
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl31, align 8, !dbg !10691
  br label %cond.end, !dbg !10691

cond.false:                                       ; preds = %if.then26
  %21 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10691
  call void @make_decl_rtl(%union.tree_node* %21), !dbg !10691
  %22 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10691
  %decl_with_rtl32 = bitcast %union.tree_node* %22 to %struct.tree_decl_with_rtl*, !dbg !10691
  %rtl33 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl32, i32 0, i32 1, !dbg !10691
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rtl33, align 8, !dbg !10691
  br label %cond.end, !dbg !10691

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %20, %cond.true ], [ %23, %cond.false ], !dbg !10691
  call void @instantiate_decl_rtl(%struct.rtx_def* %cond), !dbg !10692
  br label %if.end, !dbg !10692

if.end:                                           ; preds = %cond.end, %land.lhs.true23, %land.lhs.true15, %if.then
  br label %if.end34, !dbg !10693

if.end34:                                         ; preds = %if.end, %land.lhs.true
  ret %union.tree_node* null, !dbg !10694
}

; Function Attrs: noinline nounwind uwtable
define internal void @instantiate_decls_1(%union.tree_node* %let) #0 !dbg !10695 {
entry:
  %let.addr = alloca %union.tree_node*, align 8
  %t = alloca %union.tree_node*, align 8
  %v = alloca %union.tree_node*, align 8
  store %union.tree_node* %let, %union.tree_node** %let.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %let.addr, metadata !10696, metadata !DIExpression()), !dbg !10697
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !10698, metadata !DIExpression()), !dbg !10699
  %0 = load %union.tree_node*, %union.tree_node** %let.addr, align 8, !dbg !10700
  %block = bitcast %union.tree_node* %0 to %struct.tree_block*, !dbg !10700
  %vars = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block, i32 0, i32 3, !dbg !10700
  %1 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !10700
  store %union.tree_node* %1, %union.tree_node** %t, align 8, !dbg !10702
  br label %for.cond, !dbg !10703

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10704
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !10706
  br i1 %tobool, label %for.body, label %for.end, !dbg !10706

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10707
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !10707
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !10707
  %bf.load = load i64, i64* %4, align 8, !dbg !10707
  %bf.clear = and i64 %bf.load, 65535, !dbg !10707
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10707
  %idxprom = zext i32 %bf.cast to i64, !dbg !10707
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !10707
  %arrayidx1 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !10707
  %5 = load i8, i8* %arrayidx1, align 1, !dbg !10707
  %conv = zext i8 %5 to i32, !dbg !10707
  %tobool2 = icmp ne i32 %conv, 0, !dbg !10707
  br i1 %tobool2, label %land.lhs.true, label %if.end, !dbg !10707

land.lhs.true:                                    ; preds = %for.body
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10707
  %decl_with_rtl = bitcast %union.tree_node* %6 to %struct.tree_decl_with_rtl*, !dbg !10707
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !10707
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !10707
  %cmp = icmp ne %struct.rtx_def* %7, null, !dbg !10707
  br i1 %cmp, label %if.then, label %if.end, !dbg !10710

if.then:                                          ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10711
  %decl_with_rtl4 = bitcast %union.tree_node* %8 to %struct.tree_decl_with_rtl*, !dbg !10711
  %rtl5 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl4, i32 0, i32 1, !dbg !10711
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl5, align 8, !dbg !10711
  %tobool6 = icmp ne %struct.rtx_def* %9, null, !dbg !10711
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !10711

cond.true:                                        ; preds = %if.then
  %10 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10711
  %decl_with_rtl7 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_rtl*, !dbg !10711
  %rtl8 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl7, i32 0, i32 1, !dbg !10711
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl8, align 8, !dbg !10711
  br label %cond.end, !dbg !10711

cond.false:                                       ; preds = %if.then
  %12 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10711
  call void @make_decl_rtl(%union.tree_node* %12), !dbg !10711
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10711
  %decl_with_rtl9 = bitcast %union.tree_node* %13 to %struct.tree_decl_with_rtl*, !dbg !10711
  %rtl10 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl9, i32 0, i32 1, !dbg !10711
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtl10, align 8, !dbg !10711
  br label %cond.end, !dbg !10711

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %11, %cond.true ], [ %14, %cond.false ], !dbg !10711
  call void @instantiate_decl_rtl(%struct.rtx_def* %cond), !dbg !10712
  br label %if.end, !dbg !10712

if.end:                                           ; preds = %cond.end, %land.lhs.true, %for.body
  %15 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10713
  %base11 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !10713
  %16 = bitcast %struct.tree_base* %base11 to i64*, !dbg !10713
  %bf.load12 = load i64, i64* %16, align 8, !dbg !10713
  %bf.clear13 = and i64 %bf.load12, 65535, !dbg !10713
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !10713
  %cmp15 = icmp eq i32 %bf.cast14, 32, !dbg !10715
  br i1 %cmp15, label %land.lhs.true17, label %if.end24, !dbg !10716

land.lhs.true17:                                  ; preds = %if.end
  %17 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10717
  %decl_common = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !10717
  %decl_flag_2 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !10717
  %18 = bitcast i40* %decl_flag_2 to i64*, !dbg !10717
  %bf.load18 = load i64, i64* %18, align 8, !dbg !10717
  %bf.lshr = lshr i64 %bf.load18, 26, !dbg !10717
  %bf.clear19 = and i64 %bf.lshr, 1, !dbg !10717
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !10717
  %tobool21 = icmp ne i32 %bf.cast20, 0, !dbg !10717
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !10718

if.then22:                                        ; preds = %land.lhs.true17
  call void @llvm.dbg.declare(metadata %union.tree_node** %v, metadata !10719, metadata !DIExpression()), !dbg !10721
  %19 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10722
  %call = call %union.tree_node* @decl_value_expr_lookup(%union.tree_node* %19), !dbg !10722
  store %union.tree_node* %call, %union.tree_node** %v, align 8, !dbg !10721
  %call23 = call %union.tree_node* @walk_tree_1(%union.tree_node** %v, %union.tree_node* (%union.tree_node**, i32*, i8*)* @instantiate_expr, i8* null, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null), !dbg !10723
  br label %if.end24, !dbg !10724

if.end24:                                         ; preds = %if.then22, %land.lhs.true17, %if.end
  br label %for.inc, !dbg !10725

for.inc:                                          ; preds = %if.end24
  %20 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10726
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !10726
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !10726
  %21 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !10726
  store %union.tree_node* %21, %union.tree_node** %t, align 8, !dbg !10727
  br label %for.cond, !dbg !10728, !llvm.loop !10729

for.end:                                          ; preds = %for.cond
  %22 = load %union.tree_node*, %union.tree_node** %let.addr, align 8, !dbg !10731
  %block25 = bitcast %union.tree_node* %22 to %struct.tree_block*, !dbg !10731
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block25, i32 0, i32 5, !dbg !10731
  %23 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !10731
  store %union.tree_node* %23, %union.tree_node** %t, align 8, !dbg !10733
  br label %for.cond26, !dbg !10734

for.cond26:                                       ; preds = %for.inc29, %for.end
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10735
  %tobool27 = icmp ne %union.tree_node* %24, null, !dbg !10737
  br i1 %tobool27, label %for.body28, label %for.end32, !dbg !10737

for.body28:                                       ; preds = %for.cond26
  %25 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10738
  call void @instantiate_decls_1(%union.tree_node* %25), !dbg !10739
  br label %for.inc29, !dbg !10739

for.inc29:                                        ; preds = %for.body28
  %26 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10740
  %common30 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !10740
  %chain31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 1, !dbg !10740
  %27 = load %union.tree_node*, %union.tree_node** %chain31, align 8, !dbg !10740
  store %union.tree_node* %27, %union.tree_node** %t, align 8, !dbg !10741
  br label %for.cond26, !dbg !10742, !llvm.loop !10743

for.end32:                                        ; preds = %for.cond26
  ret void, !dbg !10745
}

declare dso_local void @init_cumulative_args(%struct.ix86_args*, %union.tree_node*, %struct.rtx_def*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !10746 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !10749, metadata !DIExpression()), !dbg !10750
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !10751, metadata !DIExpression()), !dbg !10750
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10750
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !10750
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10750
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !10750
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !10750
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10750

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10750
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !10750
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !10750
  br label %cond.end, !dbg !10750

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10750

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10750
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !10750
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !10750
  ret %union.tree_node** %call1, !dbg !10750
}

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_insert(%struct.VEC_tree_heap** %vec_, i32 %ix_, %union.tree_node* %obj_) #0 !dbg !10752 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !10755, metadata !DIExpression()), !dbg !10756
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !10757, metadata !DIExpression()), !dbg !10756
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !10758, metadata !DIExpression()), !dbg !10756
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10756
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !10756
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10756
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !10756
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !10756
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10756

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10756
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !10756
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !10756
  br label %cond.end, !dbg !10756

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10756

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10756
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !10756
  %6 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !10756
  %call1 = call %union.tree_node** @VEC_tree_base_quick_insert(%struct.VEC_tree_base* %cond, i32 %5, %union.tree_node* %6), !dbg !10756
  ret %union.tree_node** %call1, !dbg !10756
}

; Function Attrs: noinline nounwind uwtable
define internal void @split_complex_args(%struct.VEC_tree_heap** %args) #0 !dbg !10759 {
entry:
  %args.addr = alloca %struct.VEC_tree_heap**, align 8
  %i = alloca i32, align 4
  %p = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %subtype = alloca %union.tree_node*, align 8
  %addressable = alloca i8, align 1
  store %struct.VEC_tree_heap** %args, %struct.VEC_tree_heap*** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %args.addr, metadata !10760, metadata !DIExpression()), !dbg !10761
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10762, metadata !DIExpression()), !dbg !10763
  call void @llvm.dbg.declare(metadata %union.tree_node** %p, metadata !10764, metadata !DIExpression()), !dbg !10765
  store i32 0, i32* %i, align 4, !dbg !10766
  br label %for.cond, !dbg !10768

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %args.addr, align 8, !dbg !10769
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !10769
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !10769
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10769

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %args.addr, align 8, !dbg !10769
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !10769
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !10769
  br label %cond.end, !dbg !10769

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10769

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10769
  %4 = load i32, i32* %i, align 4, !dbg !10769
  %call = call i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond, i32 %4, %union.tree_node** %p), !dbg !10769
  %tobool1 = icmp ne i32 %call, 0, !dbg !10771
  br i1 %tobool1, label %for.body, label %for.end, !dbg !10771

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !10772, metadata !DIExpression()), !dbg !10774
  %5 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10775
  %common = bitcast %union.tree_node* %5 to %struct.tree_common*, !dbg !10775
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !10775
  %6 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !10775
  store %union.tree_node* %6, %union.tree_node** %type, align 8, !dbg !10774
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10776
  %base3 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !10776
  %8 = bitcast %struct.tree_base* %base3 to i64*, !dbg !10776
  %bf.load = load i64, i64* %8, align 8, !dbg !10776
  %bf.clear = and i64 %bf.load, 65535, !dbg !10776
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !10776
  %cmp = icmp eq i32 %bf.cast, 13, !dbg !10778
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !10779

land.lhs.true:                                    ; preds = %for.body
  %9 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 10), align 8, !dbg !10780
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10781
  %call4 = call zeroext i8 %9(%union.tree_node* %10), !dbg !10782
  %conv = zext i8 %call4 to i32, !dbg !10782
  %tobool5 = icmp ne i32 %conv, 0, !dbg !10782
  br i1 %tobool5, label %if.then, label %if.end, !dbg !10783

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !10784, metadata !DIExpression()), !dbg !10786
  call void @llvm.dbg.declare(metadata %union.tree_node** %subtype, metadata !10787, metadata !DIExpression()), !dbg !10788
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !10789
  %common6 = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !10789
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !10789
  %12 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !10789
  store %union.tree_node* %12, %union.tree_node** %subtype, align 8, !dbg !10788
  call void @llvm.dbg.declare(metadata i8* %addressable, metadata !10790, metadata !DIExpression()), !dbg !10791
  %13 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10792
  %base8 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !10792
  %14 = bitcast %struct.tree_base* %base8 to i64*, !dbg !10792
  %bf.load9 = load i64, i64* %14, align 8, !dbg !10792
  %bf.lshr = lshr i64 %bf.load9, 18, !dbg !10792
  %bf.clear10 = and i64 %bf.lshr, 1, !dbg !10792
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !10792
  %conv12 = trunc i32 %bf.cast11 to i8, !dbg !10792
  store i8 %conv12, i8* %addressable, align 1, !dbg !10791
  %15 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10793
  %call13 = call %union.tree_node* @copy_node_stat(%union.tree_node* %15), !dbg !10793
  store %union.tree_node* %call13, %union.tree_node** %p, align 8, !dbg !10794
  %16 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !10795
  %17 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10796
  %common14 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !10796
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !10796
  store %union.tree_node* %16, %union.tree_node** %type15, align 8, !dbg !10797
  %18 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10798
  %decl_common = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !10798
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !10798
  %19 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !10798
  %common16 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !10798
  %type17 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common16, i32 0, i32 2, !dbg !10798
  %20 = load %union.tree_node*, %union.tree_node** %type17, align 8, !dbg !10798
  %21 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10799
  %decl_common18 = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !10799
  %initial19 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common18, i32 0, i32 5, !dbg !10799
  store %union.tree_node* %20, %union.tree_node** %initial19, align 8, !dbg !10800
  %22 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10801
  %decl_common20 = bitcast %union.tree_node* %22 to %struct.tree_decl_common*, !dbg !10801
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common20, i32 0, i32 2, !dbg !10801
  %23 = bitcast i40* %mode to i64*, !dbg !10801
  %bf.load21 = load i64, i64* %23, align 8, !dbg !10802
  %bf.clear22 = and i64 %bf.load21, -256, !dbg !10802
  store i64 %bf.clear22, i64* %23, align 8, !dbg !10802
  %24 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10803
  %decl_common23 = bitcast %union.tree_node* %24 to %struct.tree_decl_common*, !dbg !10803
  %size = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common23, i32 0, i32 1, !dbg !10803
  store %union.tree_node* null, %union.tree_node** %size, align 8, !dbg !10804
  %25 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10805
  %decl_common24 = bitcast %union.tree_node* %25 to %struct.tree_decl_common*, !dbg !10805
  %size_unit = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common24, i32 0, i32 4, !dbg !10805
  store %union.tree_node* null, %union.tree_node** %size_unit, align 8, !dbg !10806
  %26 = load i8, i8* %addressable, align 1, !dbg !10807
  %conv25 = zext i8 %26 to i32, !dbg !10807
  %27 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10808
  %decl_common26 = bitcast %union.tree_node* %27 to %struct.tree_decl_common*, !dbg !10808
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common26, i32 0, i32 2, !dbg !10808
  %28 = bitcast i40* %artificial_flag to i64*, !dbg !10808
  %29 = zext i32 %conv25 to i64, !dbg !10809
  %bf.load27 = load i64, i64* %28, align 8, !dbg !10809
  %bf.value = and i64 %29, 1, !dbg !10809
  %bf.shl = shl i64 %bf.value, 12, !dbg !10809
  %bf.clear28 = and i64 %bf.load27, -4097, !dbg !10809
  %bf.set = or i64 %bf.clear28, %bf.shl, !dbg !10809
  store i64 %bf.set, i64* %28, align 8, !dbg !10809
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !10809
  %30 = load i8, i8* %addressable, align 1, !dbg !10810
  %conv29 = zext i8 %30 to i32, !dbg !10810
  %31 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10811
  %decl_common30 = bitcast %union.tree_node* %31 to %struct.tree_decl_common*, !dbg !10811
  %ignored_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common30, i32 0, i32 2, !dbg !10811
  %32 = bitcast i40* %ignored_flag to i64*, !dbg !10811
  %33 = zext i32 %conv29 to i64, !dbg !10812
  %bf.load31 = load i64, i64* %32, align 8, !dbg !10812
  %bf.value32 = and i64 %33, 1, !dbg !10812
  %bf.shl33 = shl i64 %bf.value32, 10, !dbg !10812
  %bf.clear34 = and i64 %bf.load31, -1025, !dbg !10812
  %bf.set35 = or i64 %bf.clear34, %bf.shl33, !dbg !10812
  store i64 %bf.set35, i64* %32, align 8, !dbg !10812
  %bf.result.cast36 = trunc i64 %bf.value32 to i32, !dbg !10812
  %34 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10813
  %base37 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !10813
  %35 = bitcast %struct.tree_base* %base37 to i64*, !dbg !10813
  %bf.load38 = load i64, i64* %35, align 8, !dbg !10814
  %bf.clear39 = and i64 %bf.load38, -262145, !dbg !10814
  store i64 %bf.clear39, i64* %35, align 8, !dbg !10814
  %36 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10815
  call void @layout_decl(%union.tree_node* %36, i32 0), !dbg !10816
  %37 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %args.addr, align 8, !dbg !10817
  %38 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %37, align 8, !dbg !10817
  %tobool40 = icmp ne %struct.VEC_tree_heap* %38, null, !dbg !10817
  br i1 %tobool40, label %cond.true41, label %cond.false43, !dbg !10817

cond.true41:                                      ; preds = %if.then
  %39 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %args.addr, align 8, !dbg !10817
  %40 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %39, align 8, !dbg !10817
  %base42 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %40, i32 0, i32 0, !dbg !10817
  br label %cond.end44, !dbg !10817

cond.false43:                                     ; preds = %if.then
  br label %cond.end44, !dbg !10817

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi %struct.VEC_tree_base* [ %base42, %cond.true41 ], [ null, %cond.false43 ], !dbg !10817
  %41 = load i32, i32* %i, align 4, !dbg !10817
  %42 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10817
  %call46 = call %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %cond45, i32 %41, %union.tree_node* %42), !dbg !10817
  %43 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10818
  %base47 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !10818
  %44 = bitcast %struct.tree_base* %base47 to i64*, !dbg !10818
  %bf.load48 = load i64, i64* %44, align 8, !dbg !10818
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !10818
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !10818
  %idxprom = sext i32 %bf.cast50 to i64, !dbg !10818
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10818
  %45 = load i32, i32* %arrayidx, align 4, !dbg !10818
  %cmp51 = icmp uge i32 %45, 4, !dbg !10818
  br i1 %cmp51, label %land.lhs.true53, label %cond.false63, !dbg !10818

land.lhs.true53:                                  ; preds = %cond.end44
  %46 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10818
  %base54 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !10818
  %47 = bitcast %struct.tree_base* %base54 to i64*, !dbg !10818
  %bf.load55 = load i64, i64* %47, align 8, !dbg !10818
  %bf.clear56 = and i64 %bf.load55, 65535, !dbg !10818
  %bf.cast57 = trunc i64 %bf.clear56 to i32, !dbg !10818
  %idxprom58 = sext i32 %bf.cast57 to i64, !dbg !10818
  %arrayidx59 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom58, !dbg !10818
  %48 = load i32, i32* %arrayidx59, align 4, !dbg !10818
  %cmp60 = icmp ule i32 %48, 10, !dbg !10818
  br i1 %cmp60, label %cond.true62, label %cond.false63, !dbg !10818

cond.true62:                                      ; preds = %land.lhs.true53
  %49 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10818
  %exp = bitcast %union.tree_node* %49 to %struct.tree_exp*, !dbg !10818
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 1, !dbg !10818
  %50 = load i32, i32* %locus, align 8, !dbg !10818
  br label %cond.end64, !dbg !10818

cond.false63:                                     ; preds = %land.lhs.true53, %cond.end44
  br label %cond.end64, !dbg !10818

cond.end64:                                       ; preds = %cond.false63, %cond.true62
  %cond65 = phi i32 [ %50, %cond.true62 ], [ 0, %cond.false63 ], !dbg !10818
  %51 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !10818
  %call66 = call %union.tree_node* @build_decl_stat(i32 %cond65, i32 34, %union.tree_node* null, %union.tree_node* %51), !dbg !10818
  store %union.tree_node* %call66, %union.tree_node** %decl, align 8, !dbg !10819
  %52 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !10820
  %decl_common67 = bitcast %union.tree_node* %52 to %struct.tree_decl_common*, !dbg !10820
  %initial68 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common67, i32 0, i32 5, !dbg !10820
  %53 = load %union.tree_node*, %union.tree_node** %initial68, align 8, !dbg !10820
  %54 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10821
  %decl_common69 = bitcast %union.tree_node* %54 to %struct.tree_decl_common*, !dbg !10821
  %initial70 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common69, i32 0, i32 5, !dbg !10821
  store %union.tree_node* %53, %union.tree_node** %initial70, align 8, !dbg !10822
  %55 = load i8, i8* %addressable, align 1, !dbg !10823
  %conv71 = zext i8 %55 to i32, !dbg !10823
  %56 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10824
  %decl_common72 = bitcast %union.tree_node* %56 to %struct.tree_decl_common*, !dbg !10824
  %artificial_flag73 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common72, i32 0, i32 2, !dbg !10824
  %57 = bitcast i40* %artificial_flag73 to i64*, !dbg !10824
  %58 = zext i32 %conv71 to i64, !dbg !10825
  %bf.load74 = load i64, i64* %57, align 8, !dbg !10825
  %bf.value75 = and i64 %58, 1, !dbg !10825
  %bf.shl76 = shl i64 %bf.value75, 12, !dbg !10825
  %bf.clear77 = and i64 %bf.load74, -4097, !dbg !10825
  %bf.set78 = or i64 %bf.clear77, %bf.shl76, !dbg !10825
  store i64 %bf.set78, i64* %57, align 8, !dbg !10825
  %bf.result.cast79 = trunc i64 %bf.value75 to i32, !dbg !10825
  %59 = load i8, i8* %addressable, align 1, !dbg !10826
  %conv80 = zext i8 %59 to i32, !dbg !10826
  %60 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10827
  %decl_common81 = bitcast %union.tree_node* %60 to %struct.tree_decl_common*, !dbg !10827
  %ignored_flag82 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common81, i32 0, i32 2, !dbg !10827
  %61 = bitcast i40* %ignored_flag82 to i64*, !dbg !10827
  %62 = zext i32 %conv80 to i64, !dbg !10828
  %bf.load83 = load i64, i64* %61, align 8, !dbg !10828
  %bf.value84 = and i64 %62, 1, !dbg !10828
  %bf.shl85 = shl i64 %bf.value84, 10, !dbg !10828
  %bf.clear86 = and i64 %bf.load83, -1025, !dbg !10828
  %bf.set87 = or i64 %bf.clear86, %bf.shl85, !dbg !10828
  store i64 %bf.set87, i64* %61, align 8, !dbg !10828
  %bf.result.cast88 = trunc i64 %bf.value84 to i32, !dbg !10828
  %63 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10829
  call void @layout_decl(%union.tree_node* %63, i32 0), !dbg !10830
  %64 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %args.addr, align 8, !dbg !10831
  %65 = load i32, i32* %i, align 4, !dbg !10831
  %inc = add i32 %65, 1, !dbg !10831
  store i32 %inc, i32* %i, align 4, !dbg !10831
  %66 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !10831
  %call89 = call %union.tree_node** @VEC_tree_heap_safe_insert(%struct.VEC_tree_heap** %64, i32 %inc, %union.tree_node* %66), !dbg !10831
  br label %if.end, !dbg !10832

if.end:                                           ; preds = %cond.end64, %land.lhs.true, %for.body
  br label %for.inc, !dbg !10833

for.inc:                                          ; preds = %if.end
  %67 = load i32, i32* %i, align 4, !dbg !10834
  %inc90 = add i32 %67, 1, !dbg !10834
  store i32 %inc90, i32* %i, align 4, !dbg !10834
  br label %for.cond, !dbg !10835, !llvm.loop !10836

for.end:                                          ; preds = %cond.end
  ret void, !dbg !10838
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !10839 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !10842, metadata !DIExpression()), !dbg !10843
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10844, metadata !DIExpression()), !dbg !10843
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !10845, metadata !DIExpression()), !dbg !10843
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10843
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !10843
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !10843
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10843

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10843
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !10843
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !10843
  br label %cond.end, !dbg !10843

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10843

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10843
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !10843
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !10843
  %tobool1 = icmp ne i32 %call, 0, !dbg !10843
  %lnot = xor i1 %tobool1, true, !dbg !10843
  %lnot.ext = zext i1 %lnot to i32, !dbg !10843
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !10843
  %5 = load i32, i32* %extend, align 4, !dbg !10846
  %tobool2 = icmp ne i32 %5, 0, !dbg !10846
  br i1 %tobool2, label %if.then, label %if.end, !dbg !10843

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10846
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !10846
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !10846
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !10846
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !10846
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !10846
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !10846
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !10846
  br label %if.end, !dbg !10846

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !10843
  ret i32 %12, !dbg !10843
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !10848 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10852, metadata !DIExpression()), !dbg !10853
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !10854, metadata !DIExpression()), !dbg !10853
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !10855, metadata !DIExpression()), !dbg !10853
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10853
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !10853
  %1 = load i32, i32* %num, align 8, !dbg !10853
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10853
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !10853
  %3 = load i32, i32* %alloc, align 4, !dbg !10853
  %cmp = icmp ult i32 %1, %3, !dbg !10853
  %conv = zext i1 %cmp to i32, !dbg !10853
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10853
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !10853
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10853
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !10853
  %6 = load i32, i32* %num1, align 8, !dbg !10853
  %inc = add i32 %6, 1, !dbg !10853
  store i32 %inc, i32* %num1, align 8, !dbg !10853
  %idxprom = zext i32 %6 to i64, !dbg !10853
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !10853
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !10853
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !10853
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !10853
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !10853
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !10853
  ret %union.tree_node** %9, !dbg !10853
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !10856 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10859, metadata !DIExpression()), !dbg !10860
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !10861, metadata !DIExpression()), !dbg !10860
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !10860
  %cmp = icmp sge i32 %0, 0, !dbg !10860
  %conv = zext i1 %cmp to i32, !dbg !10860
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10860
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !10860
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10860

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10860
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !10860
  %3 = load i32, i32* %alloc, align 4, !dbg !10860
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10860
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !10860
  %5 = load i32, i32* %num, align 8, !dbg !10860
  %sub = sub i32 %3, %5, !dbg !10860
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !10860
  %cmp1 = icmp uge i32 %sub, %6, !dbg !10860
  %conv2 = zext i1 %cmp1 to i32, !dbg !10860
  br label %cond.end, !dbg !10860

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !10860
  %tobool3 = icmp ne i32 %7, 0, !dbg !10860
  %lnot = xor i1 %tobool3, true, !dbg !10860
  %lnot.ext = zext i1 %lnot to i32, !dbg !10860
  br label %cond.end, !dbg !10860

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !10860
  ret i32 %cond, !dbg !10860
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_insert(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node* %obj_) #0 !dbg !10862 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10865, metadata !DIExpression()), !dbg !10866
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !10867, metadata !DIExpression()), !dbg !10866
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !10868, metadata !DIExpression()), !dbg !10866
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !10869, metadata !DIExpression()), !dbg !10866
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10866
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !10866
  %1 = load i32, i32* %num, align 8, !dbg !10866
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10866
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !10866
  %3 = load i32, i32* %alloc, align 4, !dbg !10866
  %cmp = icmp ult i32 %1, %3, !dbg !10866
  %conv = zext i1 %cmp to i32, !dbg !10866
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !10866
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10866
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !10866
  %6 = load i32, i32* %num1, align 8, !dbg !10866
  %cmp2 = icmp ule i32 %4, %6, !dbg !10866
  %conv3 = zext i1 %cmp2 to i32, !dbg !10866
  %7 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10866
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %7, i32 0, i32 2, !dbg !10866
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !10866
  %idxprom = zext i32 %8 to i64, !dbg !10866
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !10866
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !10866
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !10866
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %9, i64 1, !dbg !10866
  %10 = bitcast %union.tree_node** %add.ptr to i8*, !dbg !10866
  %11 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !10866
  %12 = bitcast %union.tree_node** %11 to i8*, !dbg !10866
  %13 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10866
  %num4 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %13, i32 0, i32 0, !dbg !10866
  %14 = load i32, i32* %num4, align 8, !dbg !10866
  %inc = add i32 %14, 1, !dbg !10866
  store i32 %inc, i32* %num4, align 8, !dbg !10866
  %15 = load i32, i32* %ix_.addr, align 4, !dbg !10866
  %sub = sub i32 %14, %15, !dbg !10866
  %conv5 = zext i32 %sub to i64, !dbg !10866
  %mul = mul i64 %conv5, 8, !dbg !10866
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %12, i64 %mul, i1 false), !dbg !10866
  %16 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !10866
  %17 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !10866
  store %union.tree_node* %16, %union.tree_node** %17, align 8, !dbg !10866
  %18 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !10866
  ret %union.tree_node** %18, !dbg !10866
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

declare dso_local void @layout_decl(%union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_replace(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node* %obj_) #0 !dbg !10870 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %union.tree_node*, align 8
  %old_obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10873, metadata !DIExpression()), !dbg !10874
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !10875, metadata !DIExpression()), !dbg !10874
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !10876, metadata !DIExpression()), !dbg !10874
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_obj_, metadata !10877, metadata !DIExpression()), !dbg !10874
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !10874
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10874
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !10874
  %2 = load i32, i32* %num, align 8, !dbg !10874
  %cmp = icmp ult i32 %0, %2, !dbg !10874
  %conv = zext i1 %cmp to i32, !dbg !10874
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10874
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 2, !dbg !10874
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !10874
  %idxprom = zext i32 %4 to i64, !dbg !10874
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !10874
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10874
  store %union.tree_node* %5, %union.tree_node** %old_obj_, align 8, !dbg !10874
  %6 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !10874
  %7 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10874
  %vec1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %7, i32 0, i32 2, !dbg !10874
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !10874
  %idxprom2 = zext i32 %8 to i64, !dbg !10874
  %arrayidx3 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec1, i64 0, i64 %idxprom2, !dbg !10874
  store %union.tree_node* %6, %union.tree_node** %arrayidx3, align 8, !dbg !10874
  %9 = load %union.tree_node*, %union.tree_node** %old_obj_, align 8, !dbg !10874
  ret %union.tree_node* %9, !dbg !10874
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @gimplify_type_sizes(%union.tree_node*, %struct.gimple_seq_d**) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @regno_clobbered_at_setjmp(%struct.bitmap_head_def* %setjmp_crosses, i32 %regno) #0 !dbg !10878 {
entry:
  %retval = alloca i8, align 1
  %setjmp_crosses.addr = alloca %struct.bitmap_head_def*, align 8
  %regno.addr = alloca i32, align 4
  store %struct.bitmap_head_def* %setjmp_crosses, %struct.bitmap_head_def** %setjmp_crosses.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %setjmp_crosses.addr, metadata !10881, metadata !DIExpression()), !dbg !10882
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !10883, metadata !DIExpression()), !dbg !10884
  %0 = load i32, i32* %regno.addr, align 4, !dbg !10885
  %call = call i32 @max_reg_num(), !dbg !10887
  %cmp = icmp sge i32 %0, %call, !dbg !10888
  br i1 %cmp, label %if.then, label %if.end, !dbg !10889

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !10890
  br label %return, !dbg !10890

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %regno.addr, align 4, !dbg !10891
  %call1 = call i32 @REG_N_SETS(i32 %1), !dbg !10892
  %cmp2 = icmp sgt i32 %call1, 1, !dbg !10893
  br i1 %cmp2, label %land.rhs, label %lor.lhs.false, !dbg !10894

lor.lhs.false:                                    ; preds = %if.end
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10895
  %cfg = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 1, !dbg !10895
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10895
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 0, !dbg !10895
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10895
  %call3 = call %struct.bitmap_head_def* @df_get_live_out(%struct.basic_block_def* %4), !dbg !10895
  %5 = load i32, i32* %regno.addr, align 4, !dbg !10895
  %call4 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %call3, i32 %5), !dbg !10895
  %tobool = icmp ne i32 %call4, 0, !dbg !10895
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !10896

land.rhs:                                         ; preds = %lor.lhs.false, %if.end
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %setjmp_crosses.addr, align 8, !dbg !10897
  %7 = load i32, i32* %regno.addr, align 4, !dbg !10897
  %call5 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %6, i32 %7), !dbg !10897
  %tobool6 = icmp ne i32 %call5, 0, !dbg !10896
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false
  %8 = phi i1 [ false, %lor.lhs.false ], [ %tobool6, %land.rhs ], !dbg !10898
  %land.ext = zext i1 %8 to i32, !dbg !10896
  %conv = trunc i32 %land.ext to i8, !dbg !10899
  store i8 %conv, i8* %retval, align 1, !dbg !10900
  br label %return, !dbg !10900

return:                                           ; preds = %land.end, %if.then
  %9 = load i8, i8* %retval, align 1, !dbg !10901
  ret i8 %9, !dbg !10901
}

declare dso_local i32 @max_reg_num() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @REG_N_SETS(i32 %regno) #0 !dbg !10902 {
entry:
  %regno.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !10906, metadata !DIExpression()), !dbg !10907
  %0 = load %struct.regstat_n_sets_and_refs_t*, %struct.regstat_n_sets_and_refs_t** @regstat_n_sets_and_refs, align 8, !dbg !10908
  %1 = load i32, i32* %regno.addr, align 4, !dbg !10909
  %idxprom = sext i32 %1 to i64, !dbg !10908
  %arrayidx = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, %struct.regstat_n_sets_and_refs_t* %0, i64 %idxprom, !dbg !10908
  %sets = getelementptr inbounds %struct.regstat_n_sets_and_refs_t, %struct.regstat_n_sets_and_refs_t* %arrayidx, i32 0, i32 0, !dbg !10910
  %2 = load i32, i32* %sets, align 4, !dbg !10910
  ret i32 %2, !dbg !10911
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local %struct.bitmap_head_def* @df_get_live_out(%struct.basic_block_def*) #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %vec_) #0 !dbg !10912 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !10915, metadata !DIExpression()), !dbg !10916
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_, metadata !10917, metadata !DIExpression()), !dbg !10916
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10916
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !10916
  %1 = load i32, i32* %num, align 8, !dbg !10916
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10916
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 2, !dbg !10916
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !10916
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 0, !dbg !10916
  %4 = load i32, i32* %num1, align 8, !dbg !10916
  %dec = add i32 %4, -1, !dbg !10916
  store i32 %dec, i32* %num1, align 8, !dbg !10916
  %idxprom = zext i32 %dec to i64, !dbg !10916
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !10916
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !10916
  store %union.tree_node* %5, %union.tree_node** %obj_, align 8, !dbg !10916
  %6 = load %union.tree_node*, %union.tree_node** %obj_, align 8, !dbg !10916
  ret %union.tree_node* %6, !dbg !10916
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @all_blocks(%union.tree_node* %block, %union.tree_node** %vector) #0 !dbg !10918 {
entry:
  %block.addr = alloca %union.tree_node*, align 8
  %vector.addr = alloca %union.tree_node**, align 8
  %n_blocks = alloca i32, align 4
  store %union.tree_node* %block, %union.tree_node** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %block.addr, metadata !10921, metadata !DIExpression()), !dbg !10922
  store %union.tree_node** %vector, %union.tree_node*** %vector.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %vector.addr, metadata !10923, metadata !DIExpression()), !dbg !10924
  call void @llvm.dbg.declare(metadata i32* %n_blocks, metadata !10925, metadata !DIExpression()), !dbg !10926
  store i32 0, i32* %n_blocks, align 4, !dbg !10926
  br label %while.cond, !dbg !10927

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !10928
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !10927
  br i1 %tobool, label %while.body, label %while.end, !dbg !10927

while.body:                                       ; preds = %while.cond
  %1 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !10929
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !10929
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !10929
  %bf.load = load i64, i64* %2, align 8, !dbg !10931
  %bf.clear = and i64 %bf.load, -4194305, !dbg !10931
  store i64 %bf.clear, i64* %2, align 8, !dbg !10931
  %3 = load %union.tree_node**, %union.tree_node*** %vector.addr, align 8, !dbg !10932
  %tobool1 = icmp ne %union.tree_node** %3, null, !dbg !10932
  br i1 %tobool1, label %if.then, label %if.end, !dbg !10934

if.then:                                          ; preds = %while.body
  %4 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !10935
  %5 = load %union.tree_node**, %union.tree_node*** %vector.addr, align 8, !dbg !10936
  %6 = load i32, i32* %n_blocks, align 4, !dbg !10937
  %idxprom = sext i32 %6 to i64, !dbg !10936
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %5, i64 %idxprom, !dbg !10936
  store %union.tree_node* %4, %union.tree_node** %arrayidx, align 8, !dbg !10938
  br label %if.end, !dbg !10936

if.end:                                           ; preds = %if.then, %while.body
  %7 = load i32, i32* %n_blocks, align 4, !dbg !10939
  %inc = add nsw i32 %7, 1, !dbg !10939
  store i32 %inc, i32* %n_blocks, align 4, !dbg !10939
  %8 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !10940
  %block2 = bitcast %union.tree_node* %8 to %struct.tree_block*, !dbg !10940
  %subblocks = getelementptr inbounds %struct.tree_block, %struct.tree_block* %block2, i32 0, i32 5, !dbg !10940
  %9 = load %union.tree_node*, %union.tree_node** %subblocks, align 8, !dbg !10940
  %10 = load %union.tree_node**, %union.tree_node*** %vector.addr, align 8, !dbg !10941
  %tobool3 = icmp ne %union.tree_node** %10, null, !dbg !10941
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !10941

cond.true:                                        ; preds = %if.end
  %11 = load %union.tree_node**, %union.tree_node*** %vector.addr, align 8, !dbg !10942
  %12 = load i32, i32* %n_blocks, align 4, !dbg !10943
  %idx.ext = sext i32 %12 to i64, !dbg !10944
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %11, i64 %idx.ext, !dbg !10944
  br label %cond.end, !dbg !10941

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !10941

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node** [ %add.ptr, %cond.true ], [ null, %cond.false ], !dbg !10941
  %call = call i32 @all_blocks(%union.tree_node* %9, %union.tree_node** %cond), !dbg !10945
  %13 = load i32, i32* %n_blocks, align 4, !dbg !10946
  %add = add nsw i32 %13, %call, !dbg !10946
  store i32 %add, i32* %n_blocks, align 4, !dbg !10946
  %14 = load %union.tree_node*, %union.tree_node** %block.addr, align 8, !dbg !10947
  %common = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !10947
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !10947
  %15 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !10947
  store %union.tree_node* %15, %union.tree_node** %block.addr, align 8, !dbg !10948
  br label %while.cond, !dbg !10927, !llvm.loop !10949

while.end:                                        ; preds = %while.cond
  %16 = load i32, i32* %n_blocks, align 4, !dbg !10951
  ret i32 %16, !dbg !10952
}

declare dso_local i8* @xmalloc(i64) #2

declare dso_local void @cl_optimization_restore(%struct.cl_optimization*) #2

declare dso_local void @init_emit() #2

declare dso_local void @init_varasm_status() #2

declare dso_local void @init_expr() #2

declare dso_local void @default_rtl_profile() #2

declare dso_local %struct.rtx_def* @expand_expr_real(%union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def**) #2

declare dso_local i32 @ix86_minimum_alignment(%union.tree_node*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parms_setup_varargs(%struct.assign_parm_data_all* %all, %struct.assign_parm_data_one* %data, i8 zeroext %no_rtl) #0 !dbg !10953 {
entry:
  %all.addr = alloca %struct.assign_parm_data_all*, align 8
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  %no_rtl.addr = alloca i8, align 1
  %varargs_pretend_bytes = alloca i32, align 4
  store %struct.assign_parm_data_all* %all, %struct.assign_parm_data_all** %all.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all** %all.addr, metadata !10956, metadata !DIExpression()), !dbg !10957
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !10958, metadata !DIExpression()), !dbg !10959
  store i8 %no_rtl, i8* %no_rtl.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %no_rtl.addr, metadata !10960, metadata !DIExpression()), !dbg !10961
  call void @llvm.dbg.declare(metadata i32* %varargs_pretend_bytes, metadata !10962, metadata !DIExpression()), !dbg !10963
  store i32 0, i32* %varargs_pretend_bytes, align 4, !dbg !10963
  %0 = load void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 7), align 8, !dbg !10964
  %1 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !10965
  %args_so_far = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %1, i32 0, i32 0, !dbg !10966
  %2 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !10967
  %promoted_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %2, i32 0, i32 6, !dbg !10968
  %3 = load i32, i32* %promoted_mode, align 8, !dbg !10968
  %4 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !10969
  %passed_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %4, i32 0, i32 1, !dbg !10970
  %5 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !10970
  %6 = load i8, i8* %no_rtl.addr, align 1, !dbg !10971
  %conv = zext i8 %6 to i32, !dbg !10971
  call void %0(%struct.ix86_args* %args_so_far, i32 %3, %union.tree_node* %5, i32* %varargs_pretend_bytes, i32 %conv), !dbg !10972
  %7 = load i32, i32* %varargs_pretend_bytes, align 4, !dbg !10973
  %cmp = icmp sgt i32 %7, 0, !dbg !10975
  br i1 %cmp, label %if.then, label %if.end, !dbg !10976

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %varargs_pretend_bytes, align 4, !dbg !10977
  %conv2 = sext i32 %8 to i64, !dbg !10977
  %9 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !10978
  %pretend_args_size = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %9, i32 0, i32 6, !dbg !10979
  store i64 %conv2, i64* %pretend_args_size, align 8, !dbg !10980
  br label %if.end, !dbg !10978

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !10981
}

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parm_find_entry_rtl(%struct.assign_parm_data_all* %all, %struct.assign_parm_data_one* %data) #0 !dbg !10982 {
entry:
  %all.addr = alloca %struct.assign_parm_data_all*, align 8
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  %pretend_bytes = alloca i64, align 8
  %entry_parm = alloca %struct.rtx_def*, align 8
  %in_regs = alloca i8, align 1
  %tem = alloca %struct.rtx_def*, align 8
  %partial = alloca i32, align 4
  store %struct.assign_parm_data_all* %all, %struct.assign_parm_data_all** %all.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all** %all.addr, metadata !10985, metadata !DIExpression()), !dbg !10986
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !10987, metadata !DIExpression()), !dbg !10988
  call void @llvm.dbg.declare(metadata i64* %pretend_bytes, metadata !10989, metadata !DIExpression()), !dbg !10990
  store i64 0, i64* %pretend_bytes, align 8, !dbg !10990
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %entry_parm, metadata !10991, metadata !DIExpression()), !dbg !10992
  call void @llvm.dbg.declare(metadata i8* %in_regs, metadata !10993, metadata !DIExpression()), !dbg !10994
  %0 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !10995
  %promoted_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %0, i32 0, i32 6, !dbg !10997
  %1 = load i32, i32* %promoted_mode, align 8, !dbg !10997
  %cmp = icmp eq i32 %1, 0, !dbg !10998
  br i1 %cmp, label %if.then, label %if.end, !dbg !10999

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11000
  %3 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11002
  %stack_parm = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %3, i32 0, i32 3, !dbg !11003
  store %struct.rtx_def* %2, %struct.rtx_def** %stack_parm, align 8, !dbg !11004
  %4 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11005
  %entry_parm1 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %4, i32 0, i32 2, !dbg !11006
  store %struct.rtx_def* %2, %struct.rtx_def** %entry_parm1, align 8, !dbg !11007
  br label %return, !dbg !11008

if.end:                                           ; preds = %entry
  %5 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11009
  %args_so_far = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %5, i32 0, i32 0, !dbg !11009
  %6 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11009
  %promoted_mode2 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %6, i32 0, i32 6, !dbg !11009
  %7 = load i32, i32* %promoted_mode2, align 8, !dbg !11009
  %8 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11009
  %passed_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %8, i32 0, i32 1, !dbg !11009
  %9 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !11009
  %10 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11009
  %named_arg = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %10, i32 0, i32 9, !dbg !11009
  %bf.load = load i8, i8* %named_arg, align 4, !dbg !11009
  %bf.clear = and i8 %bf.load, 1, !dbg !11009
  %bf.cast = zext i8 %bf.clear to i32, !dbg !11009
  %call = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 %7, %union.tree_node* %9, i32 %bf.cast), !dbg !11009
  store %struct.rtx_def* %call, %struct.rtx_def** %entry_parm, align 8, !dbg !11010
  %11 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11011
  %cmp3 = icmp eq %struct.rtx_def* %11, null, !dbg !11013
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !11014

if.then4:                                         ; preds = %if.end
  %12 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11015
  %passed_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %12, i32 0, i32 5, !dbg !11016
  %13 = load i32, i32* %passed_mode, align 4, !dbg !11016
  %14 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11017
  %promoted_mode5 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %14, i32 0, i32 6, !dbg !11018
  store i32 %13, i32* %promoted_mode5, align 8, !dbg !11019
  br label %if.end6, !dbg !11017

if.end6:                                          ; preds = %if.then4, %if.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11020
  %cmp7 = icmp ne %struct.rtx_def* %15, null, !dbg !11021
  %conv = zext i1 %cmp7 to i32, !dbg !11021
  %conv8 = trunc i32 %conv to i8, !dbg !11020
  store i8 %conv8, i8* %in_regs, align 1, !dbg !11022
  %16 = load i8, i8* %in_regs, align 1, !dbg !11023
  %tobool = icmp ne i8 %16, 0, !dbg !11023
  br i1 %tobool, label %if.end27, label %land.lhs.true, !dbg !11025

land.lhs.true:                                    ; preds = %if.end6
  %17 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11026
  %named_arg9 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %17, i32 0, i32 9, !dbg !11027
  %bf.load10 = load i8, i8* %named_arg9, align 4, !dbg !11027
  %bf.clear11 = and i8 %bf.load10, 1, !dbg !11027
  %bf.cast12 = zext i8 %bf.clear11 to i32, !dbg !11027
  %tobool13 = icmp ne i32 %bf.cast12, 0, !dbg !11026
  br i1 %tobool13, label %if.end27, label %if.then14, !dbg !11028

if.then14:                                        ; preds = %land.lhs.true
  %18 = load i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 9), align 8, !dbg !11029
  %19 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11032
  %args_so_far15 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %19, i32 0, i32 0, !dbg !11033
  %call16 = call zeroext i8 %18(%struct.ix86_args* %args_so_far15), !dbg !11034
  %tobool17 = icmp ne i8 %call16, 0, !dbg !11034
  br i1 %tobool17, label %if.then18, label %if.end26, !dbg !11035

if.then18:                                        ; preds = %if.then14
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !11036, metadata !DIExpression()), !dbg !11038
  %20 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11039
  %args_so_far19 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %20, i32 0, i32 0, !dbg !11039
  %21 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11039
  %promoted_mode20 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %21, i32 0, i32 6, !dbg !11039
  %22 = load i32, i32* %promoted_mode20, align 8, !dbg !11039
  %23 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11039
  %passed_type21 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %23, i32 0, i32 1, !dbg !11039
  %24 = load %union.tree_node*, %union.tree_node** %passed_type21, align 8, !dbg !11039
  %call22 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far19, i32 %22, %union.tree_node* %24, i32 1), !dbg !11039
  store %struct.rtx_def* %call22, %struct.rtx_def** %tem, align 8, !dbg !11040
  %25 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11041
  %cmp23 = icmp ne %struct.rtx_def* %25, null, !dbg !11042
  %conv24 = zext i1 %cmp23 to i32, !dbg !11042
  %conv25 = trunc i32 %conv24 to i8, !dbg !11041
  store i8 %conv25, i8* %in_regs, align 1, !dbg !11043
  br label %if.end26, !dbg !11044

if.end26:                                         ; preds = %if.then18, %if.then14
  br label %if.end27, !dbg !11045

if.end27:                                         ; preds = %if.end26, %land.lhs.true, %if.end6
  %26 = load i8 (i32, %union.tree_node*)*, i8 (i32, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 11), align 8, !dbg !11046
  %27 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11048
  %promoted_mode28 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %27, i32 0, i32 6, !dbg !11049
  %28 = load i32, i32* %promoted_mode28, align 8, !dbg !11049
  %29 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11050
  %passed_type29 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %29, i32 0, i32 1, !dbg !11051
  %30 = load %union.tree_node*, %union.tree_node** %passed_type29, align 8, !dbg !11051
  %call30 = call zeroext i8 %26(i32 %28, %union.tree_node* %30), !dbg !11052
  %tobool31 = icmp ne i8 %call30, 0, !dbg !11052
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !11053

if.then32:                                        ; preds = %if.end27
  store %struct.rtx_def* null, %struct.rtx_def** %entry_parm, align 8, !dbg !11054
  br label %if.end33, !dbg !11055

if.end33:                                         ; preds = %if.then32, %if.end27
  %31 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11056
  %tobool34 = icmp ne %struct.rtx_def* %31, null, !dbg !11056
  br i1 %tobool34, label %if.then35, label %if.end60, !dbg !11058

if.then35:                                        ; preds = %if.end33
  call void @llvm.dbg.declare(metadata i32* %partial, metadata !11059, metadata !DIExpression()), !dbg !11061
  %32 = load i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 13), align 8, !dbg !11062
  %33 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11063
  %args_so_far36 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %33, i32 0, i32 0, !dbg !11064
  %34 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11065
  %promoted_mode37 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %34, i32 0, i32 6, !dbg !11066
  %35 = load i32, i32* %promoted_mode37, align 8, !dbg !11066
  %36 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11067
  %passed_type38 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %36, i32 0, i32 1, !dbg !11068
  %37 = load %union.tree_node*, %union.tree_node** %passed_type38, align 8, !dbg !11068
  %38 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11069
  %named_arg39 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %38, i32 0, i32 9, !dbg !11070
  %bf.load40 = load i8, i8* %named_arg39, align 4, !dbg !11070
  %bf.clear41 = and i8 %bf.load40, 1, !dbg !11070
  %bf.cast42 = zext i8 %bf.clear41 to i32, !dbg !11070
  %conv43 = trunc i32 %bf.cast42 to i8, !dbg !11069
  %call44 = call i32 %32(%struct.ix86_args* %args_so_far36, i32 %35, %union.tree_node* %37, i8 zeroext %conv43), !dbg !11071
  store i32 %call44, i32* %partial, align 4, !dbg !11072
  %39 = load i32, i32* %partial, align 4, !dbg !11073
  %40 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11074
  %partial45 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %40, i32 0, i32 8, !dbg !11075
  store i32 %39, i32* %partial45, align 8, !dbg !11076
  %41 = load i32, i32* %partial, align 4, !dbg !11077
  %cmp46 = icmp ne i32 %41, 0, !dbg !11079
  br i1 %cmp46, label %land.lhs.true48, label %if.end59, !dbg !11080

land.lhs.true48:                                  ; preds = %if.then35
  %42 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11081
  %reg_parm_stack_space = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %42, i32 0, i32 8, !dbg !11082
  %43 = load i32, i32* %reg_parm_stack_space, align 8, !dbg !11082
  %cmp49 = icmp eq i32 %43, 0, !dbg !11083
  br i1 %cmp49, label %if.then51, label %if.end59, !dbg !11084

if.then51:                                        ; preds = %land.lhs.true48
  %44 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11085
  %extra_pretend_bytes = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %44, i32 0, i32 7, !dbg !11085
  %45 = load i64, i64* %extra_pretend_bytes, align 8, !dbg !11085
  %tobool52 = icmp ne i64 %45, 0, !dbg !11085
  br i1 %tobool52, label %cond.true, label %land.lhs.true53, !dbg !11085

land.lhs.true53:                                  ; preds = %if.then51
  %46 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11085
  %pretend_args_size = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %46, i32 0, i32 6, !dbg !11085
  %47 = load i64, i64* %pretend_args_size, align 8, !dbg !11085
  %tobool54 = icmp ne i64 %47, 0, !dbg !11085
  br i1 %tobool54, label %cond.true, label %cond.false, !dbg !11085

cond.true:                                        ; preds = %land.lhs.true53, %if.then51
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 2379, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11085
  br label %cond.end, !dbg !11085

cond.false:                                       ; preds = %land.lhs.true53
  br label %cond.end, !dbg !11085

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11085
  %48 = load i32, i32* %partial, align 4, !dbg !11087
  %conv55 = sext i32 %48 to i64, !dbg !11087
  store i64 %conv55, i64* %pretend_bytes, align 8, !dbg !11088
  %49 = load i64, i64* %pretend_bytes, align 8, !dbg !11089
  %add = add nsw i64 %49, 4, !dbg !11089
  %sub = sub nsw i64 %add, 1, !dbg !11089
  %and = and i64 %sub, -4, !dbg !11089
  %50 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11090
  %pretend_args_size56 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %50, i32 0, i32 6, !dbg !11091
  store i64 %and, i64* %pretend_args_size56, align 8, !dbg !11092
  %51 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11093
  %pretend_args_size57 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %51, i32 0, i32 6, !dbg !11094
  %52 = load i64, i64* %pretend_args_size57, align 8, !dbg !11094
  %53 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11095
  %extra_pretend_bytes58 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %53, i32 0, i32 7, !dbg !11096
  store i64 %52, i64* %extra_pretend_bytes58, align 8, !dbg !11097
  br label %if.end59, !dbg !11098

if.end59:                                         ; preds = %cond.end, %land.lhs.true48, %if.then35
  br label %if.end60, !dbg !11099

if.end60:                                         ; preds = %if.end59, %if.end33
  %54 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11100
  %promoted_mode61 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %54, i32 0, i32 6, !dbg !11101
  %55 = load i32, i32* %promoted_mode61, align 8, !dbg !11101
  %56 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11102
  %passed_type62 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %56, i32 0, i32 1, !dbg !11103
  %57 = load %union.tree_node*, %union.tree_node** %passed_type62, align 8, !dbg !11103
  %58 = load i8, i8* %in_regs, align 1, !dbg !11104
  %conv63 = zext i8 %58 to i32, !dbg !11104
  %59 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11105
  %tobool64 = icmp ne %struct.rtx_def* %59, null, !dbg !11105
  br i1 %tobool64, label %cond.true65, label %cond.false67, !dbg !11105

cond.true65:                                      ; preds = %if.end60
  %60 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11106
  %partial66 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %60, i32 0, i32 8, !dbg !11107
  %61 = load i32, i32* %partial66, align 8, !dbg !11107
  br label %cond.end68, !dbg !11105

cond.false67:                                     ; preds = %if.end60
  br label %cond.end68, !dbg !11105

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi i32 [ %61, %cond.true65 ], [ 0, %cond.false67 ], !dbg !11105
  %62 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !11108
  %63 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11109
  %stack_args_size = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %63, i32 0, i32 1, !dbg !11110
  %64 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11111
  %locate = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %64, i32 0, i32 7, !dbg !11112
  call void @locate_and_pad_parm(i32 %55, %union.tree_node* %57, i32 %conv63, i32 %cond69, %union.tree_node* %62, %struct.args_size* %stack_args_size, %struct.locate_and_pad_arg_data* %locate), !dbg !11113
  %65 = load i8, i8* %in_regs, align 1, !dbg !11114
  %tobool70 = icmp ne i8 %65, 0, !dbg !11114
  br i1 %tobool70, label %if.end78, label %land.lhs.true71, !dbg !11116

land.lhs.true71:                                  ; preds = %cond.end68
  %66 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 24), align 4, !dbg !11117
  %67 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11118
  %locate72 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %67, i32 0, i32 7, !dbg !11119
  %boundary = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate72, i32 0, i32 5, !dbg !11120
  %68 = load i32, i32* %boundary, align 4, !dbg !11120
  %cmp73 = icmp ult i32 %66, %68, !dbg !11121
  br i1 %cmp73, label %if.then75, label %if.end78, !dbg !11122

if.then75:                                        ; preds = %land.lhs.true71
  %69 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11123
  %locate76 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %69, i32 0, i32 7, !dbg !11124
  %boundary77 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate76, i32 0, i32 5, !dbg !11125
  %70 = load i32, i32* %boundary77, align 4, !dbg !11125
  store i32 %70, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 24), align 4, !dbg !11126
  br label %if.end78, !dbg !11127

if.end78:                                         ; preds = %if.then75, %land.lhs.true71, %cond.end68
  %71 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11128
  %extra_pretend_bytes79 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %71, i32 0, i32 7, !dbg !11129
  %72 = load i64, i64* %extra_pretend_bytes79, align 8, !dbg !11129
  %73 = load i64, i64* %pretend_bytes, align 8, !dbg !11130
  %sub80 = sub nsw i64 %72, %73, !dbg !11131
  store i64 %sub80, i64* %pretend_bytes, align 8, !dbg !11132
  %74 = load i64, i64* %pretend_bytes, align 8, !dbg !11133
  %75 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11134
  %locate81 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %75, i32 0, i32 7, !dbg !11135
  %slot_offset = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate81, i32 0, i32 2, !dbg !11136
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset, i32 0, i32 0, !dbg !11137
  %76 = load i64, i64* %constant, align 8, !dbg !11138
  %add82 = add nsw i64 %76, %74, !dbg !11138
  store i64 %add82, i64* %constant, align 8, !dbg !11138
  %77 = load i64, i64* %pretend_bytes, align 8, !dbg !11139
  %78 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11140
  %locate83 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %78, i32 0, i32 7, !dbg !11141
  %offset = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate83, i32 0, i32 1, !dbg !11142
  %constant84 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset, i32 0, i32 0, !dbg !11143
  %79 = load i64, i64* %constant84, align 8, !dbg !11144
  %add85 = add nsw i64 %79, %77, !dbg !11144
  store i64 %add85, i64* %constant84, align 8, !dbg !11144
  %80 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11145
  %81 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11146
  %entry_parm86 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %81, i32 0, i32 2, !dbg !11147
  store %struct.rtx_def* %80, %struct.rtx_def** %entry_parm86, align 8, !dbg !11148
  br label %return, !dbg !11149

return:                                           ; preds = %if.end78, %if.then
  ret void, !dbg !11149
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @assign_parm_is_stack_parm(%struct.assign_parm_data_all* %all, %struct.assign_parm_data_one* %data) #0 !dbg !11150 {
entry:
  %retval = alloca i8, align 1
  %all.addr = alloca %struct.assign_parm_data_all*, align 8
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  %inc = alloca %union.tree_node*, align 8
  store %struct.assign_parm_data_all* %all, %struct.assign_parm_data_all** %all.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all** %all.addr, metadata !11153, metadata !DIExpression()), !dbg !11154
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !11155, metadata !DIExpression()), !dbg !11156
  %0 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11157
  %entry_parm = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %0, i32 0, i32 2, !dbg !11159
  %1 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11159
  %cmp = icmp eq %struct.rtx_def* %1, null, !dbg !11160
  br i1 %cmp, label %if.then, label %if.else, !dbg !11161

if.then:                                          ; preds = %entry
  br label %if.end19, !dbg !11161

if.else:                                          ; preds = %entry
  %2 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11162
  %partial = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %2, i32 0, i32 8, !dbg !11164
  %3 = load i32, i32* %partial, align 8, !dbg !11164
  %cmp1 = icmp ne i32 %3, 0, !dbg !11165
  br i1 %cmp1, label %if.then2, label %if.else3, !dbg !11166

if.then2:                                         ; preds = %if.else
  br label %if.end18, !dbg !11166

if.else3:                                         ; preds = %if.else
  %4 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11167
  %entry_parm4 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %4, i32 0, i32 2, !dbg !11167
  %5 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm4, align 8, !dbg !11167
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !11167
  %bf.load = load i32, i32* %6, align 8, !dbg !11167
  %bf.clear = and i32 %bf.load, 65535, !dbg !11167
  %cmp5 = icmp eq i32 %bf.clear, 15, !dbg !11169
  br i1 %cmp5, label %land.lhs.true, label %if.else13, !dbg !11170

land.lhs.true:                                    ; preds = %if.else3
  %7 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11171
  %entry_parm6 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %7, i32 0, i32 2, !dbg !11171
  %8 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm6, align 8, !dbg !11171
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !11171
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11171
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11171
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**, !dbg !11171
  %9 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !11171
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %9, i32 0, i32 1, !dbg !11171
  %arrayidx7 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !11171
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx7, align 8, !dbg !11171
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !11171
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !11171
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !11171
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !11171
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11171
  %cmp11 = icmp eq %struct.rtx_def* %11, null, !dbg !11172
  br i1 %cmp11, label %if.then12, label %if.else13, !dbg !11173

if.then12:                                        ; preds = %land.lhs.true
  br label %if.end17, !dbg !11173

if.else13:                                        ; preds = %land.lhs.true, %if.else3
  %12 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11174
  %reg_parm_stack_space = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %12, i32 0, i32 8, !dbg !11176
  %13 = load i32, i32* %reg_parm_stack_space, align 8, !dbg !11176
  %cmp14 = icmp sgt i32 %13, 0, !dbg !11177
  br i1 %cmp14, label %if.then15, label %if.else16, !dbg !11178

if.then15:                                        ; preds = %if.else13
  br label %if.end, !dbg !11178

if.else16:                                        ; preds = %if.else13
  store i8 0, i8* %retval, align 1, !dbg !11179
  br label %return, !dbg !11179

if.end:                                           ; preds = %if.then15
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then12
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then2
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then
  %14 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11180
  %locate = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %14, i32 0, i32 7, !dbg !11181
  %size = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate, i32 0, i32 0, !dbg !11182
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %size, i32 0, i32 0, !dbg !11183
  %15 = load i64, i64* %constant, align 8, !dbg !11183
  %16 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11184
  %stack_args_size = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %16, i32 0, i32 1, !dbg !11185
  %constant20 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size, i32 0, i32 0, !dbg !11186
  %17 = load i64, i64* %constant20, align 8, !dbg !11187
  %add = add nsw i64 %17, %15, !dbg !11187
  store i64 %add, i64* %constant20, align 8, !dbg !11187
  %18 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11188
  %locate21 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %18, i32 0, i32 7, !dbg !11190
  %size22 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate21, i32 0, i32 0, !dbg !11191
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %size22, i32 0, i32 1, !dbg !11192
  %19 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11192
  %tobool = icmp ne %union.tree_node* %19, null, !dbg !11188
  br i1 %tobool, label %if.then23, label %if.end50, !dbg !11193

if.then23:                                        ; preds = %if.end19
  br label %do.body, !dbg !11194

do.body:                                          ; preds = %if.then23
  call void @llvm.dbg.declare(metadata %union.tree_node** %inc, metadata !11195, metadata !DIExpression()), !dbg !11197
  %20 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11197
  %locate24 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %20, i32 0, i32 7, !dbg !11197
  %size25 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate24, i32 0, i32 0, !dbg !11197
  %var26 = getelementptr inbounds %struct.args_size, %struct.args_size* %size25, i32 0, i32 1, !dbg !11197
  %21 = load %union.tree_node*, %union.tree_node** %var26, align 8, !dbg !11197
  store %union.tree_node* %21, %union.tree_node** %inc, align 8, !dbg !11197
  %22 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !11198
  %call = call i32 @host_integerp(%union.tree_node* %22, i32 0), !dbg !11198
  %tobool27 = icmp ne i32 %call, 0, !dbg !11198
  br i1 %tobool27, label %if.then28, label %if.else33, !dbg !11197

if.then28:                                        ; preds = %do.body
  %23 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !11198
  %call29 = call i64 @tree_low_cst(%union.tree_node* %23, i32 0), !dbg !11198
  %24 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11198
  %stack_args_size30 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %24, i32 0, i32 1, !dbg !11198
  %constant31 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size30, i32 0, i32 0, !dbg !11198
  %25 = load i64, i64* %constant31, align 8, !dbg !11198
  %add32 = add nsw i64 %25, %call29, !dbg !11198
  store i64 %add32, i64* %constant31, align 8, !dbg !11198
  br label %if.end49, !dbg !11198

if.else33:                                        ; preds = %do.body
  %26 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11200
  %stack_args_size34 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %26, i32 0, i32 1, !dbg !11200
  %var35 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size34, i32 0, i32 1, !dbg !11200
  %27 = load %union.tree_node*, %union.tree_node** %var35, align 8, !dbg !11200
  %cmp36 = icmp eq %union.tree_node* %27, null, !dbg !11200
  br i1 %cmp36, label %if.then37, label %if.else41, !dbg !11198

if.then37:                                        ; preds = %if.else33
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !11200
  %29 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !11200
  %call38 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %28, %union.tree_node* %29), !dbg !11200
  %30 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11200
  %stack_args_size39 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %30, i32 0, i32 1, !dbg !11200
  %var40 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size39, i32 0, i32 1, !dbg !11200
  store %union.tree_node* %call38, %union.tree_node** %var40, align 8, !dbg !11200
  br label %if.end48, !dbg !11200

if.else41:                                        ; preds = %if.else33
  %31 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11200
  %stack_args_size42 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %31, i32 0, i32 1, !dbg !11200
  %var43 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size42, i32 0, i32 1, !dbg !11200
  %32 = load %union.tree_node*, %union.tree_node** %var43, align 8, !dbg !11200
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !11200
  %34 = load %union.tree_node*, %union.tree_node** %inc, align 8, !dbg !11200
  %call44 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %33, %union.tree_node* %34), !dbg !11200
  %call45 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %32, %union.tree_node* %call44), !dbg !11200
  %35 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11200
  %stack_args_size46 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %35, i32 0, i32 1, !dbg !11200
  %var47 = getelementptr inbounds %struct.args_size, %struct.args_size* %stack_args_size46, i32 0, i32 1, !dbg !11200
  store %union.tree_node* %call45, %union.tree_node** %var47, align 8, !dbg !11200
  br label %if.end48

if.end48:                                         ; preds = %if.else41, %if.then37
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then28
  br label %do.end, !dbg !11197

do.end:                                           ; preds = %if.end49
  br label %if.end50, !dbg !11197

if.end50:                                         ; preds = %do.end, %if.end19
  store i8 1, i8* %retval, align 1, !dbg !11202
  br label %return, !dbg !11202

return:                                           ; preds = %if.end50, %if.else16
  %36 = load i8, i8* %retval, align 1, !dbg !11203
  ret i8 %36, !dbg !11203
}

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parm_find_stack_rtl(%union.tree_node* %parm, %struct.assign_parm_data_one* %data) #0 !dbg !11204 {
entry:
  %parm.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  %offset_rtx = alloca %struct.rtx_def*, align 8
  %stack_parm = alloca %struct.rtx_def*, align 8
  %align = alloca i32, align 4
  %boundary = alloca i32, align 4
  %offset102 = alloca i32, align 4
  store %union.tree_node* %parm, %union.tree_node** %parm.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm.addr, metadata !11207, metadata !DIExpression()), !dbg !11208
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !11209, metadata !DIExpression()), !dbg !11210
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %offset_rtx, metadata !11211, metadata !DIExpression()), !dbg !11212
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stack_parm, metadata !11213, metadata !DIExpression()), !dbg !11214
  call void @llvm.dbg.declare(metadata i32* %align, metadata !11215, metadata !DIExpression()), !dbg !11216
  call void @llvm.dbg.declare(metadata i32* %boundary, metadata !11217, metadata !DIExpression()), !dbg !11218
  %0 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11219
  %entry_parm = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %0, i32 0, i32 2, !dbg !11221
  %1 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11221
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !11219
  br i1 %tobool, label %if.then, label %if.else, !dbg !11222

if.then:                                          ; preds = %entry
  %2 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11223
  %locate = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %2, i32 0, i32 7, !dbg !11223
  %slot_offset = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate, i32 0, i32 2, !dbg !11223
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset, i32 0, i32 1, !dbg !11223
  %3 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11223
  %cmp = icmp eq %union.tree_node* %3, null, !dbg !11223
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11223

cond.true:                                        ; preds = %if.then
  %4 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11223
  %locate1 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %4, i32 0, i32 7, !dbg !11223
  %slot_offset2 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate1, i32 0, i32 2, !dbg !11223
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset2, i32 0, i32 0, !dbg !11223
  %5 = load i64, i64* %constant, align 8, !dbg !11223
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %5), !dbg !11223
  br label %cond.end23, !dbg !11223

cond.false:                                       ; preds = %if.then
  %6 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11223
  %locate3 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %6, i32 0, i32 7, !dbg !11223
  %slot_offset4 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate3, i32 0, i32 2, !dbg !11223
  %var5 = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset4, i32 0, i32 1, !dbg !11223
  %7 = load %union.tree_node*, %union.tree_node** %var5, align 8, !dbg !11223
  %cmp6 = icmp eq %union.tree_node* %7, null, !dbg !11223
  br i1 %cmp6, label %cond.true7, label %cond.false12, !dbg !11223

cond.true7:                                       ; preds = %cond.false
  %8 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11223
  %locate8 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %8, i32 0, i32 7, !dbg !11223
  %slot_offset9 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate8, i32 0, i32 2, !dbg !11223
  %constant10 = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset9, i32 0, i32 0, !dbg !11223
  %9 = load i64, i64* %constant10, align 8, !dbg !11223
  %call11 = call %union.tree_node* @size_int_kind(i64 %9, i32 1), !dbg !11223
  br label %cond.end, !dbg !11223

cond.false12:                                     ; preds = %cond.false
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !11223
  %11 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11223
  %locate13 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %11, i32 0, i32 7, !dbg !11223
  %slot_offset14 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate13, i32 0, i32 2, !dbg !11223
  %var15 = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset14, i32 0, i32 1, !dbg !11223
  %12 = load %union.tree_node*, %union.tree_node** %var15, align 8, !dbg !11223
  %call16 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %10, %union.tree_node* %12), !dbg !11223
  %13 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11223
  %locate17 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %13, i32 0, i32 7, !dbg !11223
  %slot_offset18 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate17, i32 0, i32 2, !dbg !11223
  %constant19 = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset18, i32 0, i32 0, !dbg !11223
  %14 = load i64, i64* %constant19, align 8, !dbg !11223
  %call20 = call %union.tree_node* @size_int_kind(i64 %14, i32 1), !dbg !11223
  %call21 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call16, %union.tree_node* %call20), !dbg !11223
  br label %cond.end, !dbg !11223

cond.end:                                         ; preds = %cond.false12, %cond.true7
  %cond = phi %union.tree_node* [ %call11, %cond.true7 ], [ %call21, %cond.false12 ], !dbg !11223
  %call22 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond), !dbg !11223
  br label %cond.end23, !dbg !11223

cond.end23:                                       ; preds = %cond.end, %cond.true
  %cond24 = phi %struct.rtx_def* [ %call, %cond.true ], [ %call22, %cond.end ], !dbg !11223
  store %struct.rtx_def* %cond24, %struct.rtx_def** %offset_rtx, align 8, !dbg !11224
  br label %if.end, !dbg !11225

if.else:                                          ; preds = %entry
  %15 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11226
  %locate25 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %15, i32 0, i32 7, !dbg !11226
  %offset = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate25, i32 0, i32 1, !dbg !11226
  %var26 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset, i32 0, i32 1, !dbg !11226
  %16 = load %union.tree_node*, %union.tree_node** %var26, align 8, !dbg !11226
  %cmp27 = icmp eq %union.tree_node* %16, null, !dbg !11226
  br i1 %cmp27, label %cond.true28, label %cond.false33, !dbg !11226

cond.true28:                                      ; preds = %if.else
  %17 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11226
  %locate29 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %17, i32 0, i32 7, !dbg !11226
  %offset30 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate29, i32 0, i32 1, !dbg !11226
  %constant31 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset30, i32 0, i32 0, !dbg !11226
  %18 = load i64, i64* %constant31, align 8, !dbg !11226
  %call32 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %18), !dbg !11226
  br label %cond.end56, !dbg !11226

cond.false33:                                     ; preds = %if.else
  %19 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11226
  %locate34 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %19, i32 0, i32 7, !dbg !11226
  %offset35 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate34, i32 0, i32 1, !dbg !11226
  %var36 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset35, i32 0, i32 1, !dbg !11226
  %20 = load %union.tree_node*, %union.tree_node** %var36, align 8, !dbg !11226
  %cmp37 = icmp eq %union.tree_node* %20, null, !dbg !11226
  br i1 %cmp37, label %cond.true38, label %cond.false43, !dbg !11226

cond.true38:                                      ; preds = %cond.false33
  %21 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11226
  %locate39 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %21, i32 0, i32 7, !dbg !11226
  %offset40 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate39, i32 0, i32 1, !dbg !11226
  %constant41 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset40, i32 0, i32 0, !dbg !11226
  %22 = load i64, i64* %constant41, align 8, !dbg !11226
  %call42 = call %union.tree_node* @size_int_kind(i64 %22, i32 1), !dbg !11226
  br label %cond.end53, !dbg !11226

cond.false43:                                     ; preds = %cond.false33
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !11226
  %24 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11226
  %locate44 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %24, i32 0, i32 7, !dbg !11226
  %offset45 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate44, i32 0, i32 1, !dbg !11226
  %var46 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset45, i32 0, i32 1, !dbg !11226
  %25 = load %union.tree_node*, %union.tree_node** %var46, align 8, !dbg !11226
  %call47 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %23, %union.tree_node* %25), !dbg !11226
  %26 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11226
  %locate48 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %26, i32 0, i32 7, !dbg !11226
  %offset49 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate48, i32 0, i32 1, !dbg !11226
  %constant50 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset49, i32 0, i32 0, !dbg !11226
  %27 = load i64, i64* %constant50, align 8, !dbg !11226
  %call51 = call %union.tree_node* @size_int_kind(i64 %27, i32 1), !dbg !11226
  %call52 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call47, %union.tree_node* %call51), !dbg !11226
  br label %cond.end53, !dbg !11226

cond.end53:                                       ; preds = %cond.false43, %cond.true38
  %cond54 = phi %union.tree_node* [ %call42, %cond.true38 ], [ %call52, %cond.false43 ], !dbg !11226
  %call55 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond54), !dbg !11226
  br label %cond.end56, !dbg !11226

cond.end56:                                       ; preds = %cond.end53, %cond.true28
  %cond57 = phi %struct.rtx_def* [ %call32, %cond.true28 ], [ %call55, %cond.end53 ], !dbg !11226
  store %struct.rtx_def* %cond57, %struct.rtx_def** %offset_rtx, align 8, !dbg !11227
  br label %if.end

if.end:                                           ; preds = %cond.end56, %cond.end23
  %28 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !11228
  store %struct.rtx_def* %28, %struct.rtx_def** %stack_parm, align 8, !dbg !11229
  %29 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8, !dbg !11230
  %30 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !11232
  %cmp58 = icmp ne %struct.rtx_def* %29, %30, !dbg !11233
  br i1 %cmp58, label %if.then59, label %if.end61, !dbg !11234

if.then59:                                        ; preds = %if.end
  %31 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11235
  %32 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8, !dbg !11235
  %call60 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 16, %struct.rtx_def* %31, %struct.rtx_def* %32), !dbg !11235
  store %struct.rtx_def* %call60, %struct.rtx_def** %stack_parm, align 8, !dbg !11236
  br label %if.end61, !dbg !11237

if.end61:                                         ; preds = %if.then59, %if.end
  %33 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11238
  %promoted_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %33, i32 0, i32 6, !dbg !11239
  %34 = load i32, i32* %promoted_mode, align 8, !dbg !11239
  %35 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11240
  %call62 = call %struct.rtx_def* @gen_rtx_MEM(i32 %34, %struct.rtx_def* %35), !dbg !11241
  store %struct.rtx_def* %call62, %struct.rtx_def** %stack_parm, align 8, !dbg !11242
  %36 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11243
  %passed_pointer = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %36, i32 0, i32 9, !dbg !11245
  %bf.load = load i8, i8* %passed_pointer, align 4, !dbg !11245
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !11245
  %bf.clear = and i8 %bf.lshr, 1, !dbg !11245
  %bf.cast = zext i8 %bf.clear to i32, !dbg !11245
  %tobool63 = icmp ne i32 %bf.cast, 0, !dbg !11243
  br i1 %tobool63, label %if.end132, label %if.then64, !dbg !11246

if.then64:                                        ; preds = %if.end61
  %37 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11247
  %38 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11249
  call void @set_mem_attributes(%struct.rtx_def* %37, %union.tree_node* %38, i32 1), !dbg !11250
  %39 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11251
  %promoted_mode65 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %39, i32 0, i32 6, !dbg !11253
  %40 = load i32, i32* %promoted_mode65, align 8, !dbg !11253
  %cmp66 = icmp ne i32 %40, 1, !dbg !11254
  br i1 %cmp66, label %land.lhs.true, label %if.end131, !dbg !11255

land.lhs.true:                                    ; preds = %if.then64
  %41 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11256
  %promoted_mode67 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %41, i32 0, i32 6, !dbg !11257
  %42 = load i32, i32* %promoted_mode67, align 8, !dbg !11257
  %43 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11258
  %decl_common = bitcast %union.tree_node* %43 to %struct.tree_decl_common*, !dbg !11258
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11258
  %44 = bitcast i40* %mode to i64*, !dbg !11258
  %bf.load68 = load i64, i64* %44, align 8, !dbg !11258
  %bf.clear69 = and i64 %bf.load68, 255, !dbg !11258
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !11258
  %cmp71 = icmp ne i32 %42, %bf.cast70, !dbg !11259
  br i1 %cmp71, label %if.then72, label %if.end131, !dbg !11260

if.then72:                                        ; preds = %land.lhs.true
  %45 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11261
  %46 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11263
  %promoted_mode73 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %46, i32 0, i32 6, !dbg !11263
  %47 = load i32, i32* %promoted_mode73, align 8, !dbg !11263
  %idxprom = zext i32 %47 to i64, !dbg !11263
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !11263
  %48 = load i8, i8* %arrayidx, align 1, !dbg !11263
  %conv = zext i8 %48 to i16, !dbg !11263
  %conv74 = zext i16 %conv to i64, !dbg !11263
  %call75 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv74), !dbg !11263
  call void @set_mem_size(%struct.rtx_def* %45, %struct.rtx_def* %call75), !dbg !11264
  %49 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11265
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !11265
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11265
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !11265
  %rt_mem = bitcast %union.rtunion_def* %arrayidx76 to %struct.mem_attrs**, !dbg !11265
  %50 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !11265
  %cmp77 = icmp eq %struct.mem_attrs* %50, null, !dbg !11265
  br i1 %cmp77, label %cond.true79, label %cond.false80, !dbg !11267

cond.true79:                                      ; preds = %if.then72
  br i1 false, label %land.lhs.true86, label %if.end130, !dbg !11265

cond.false80:                                     ; preds = %if.then72
  %51 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11265
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !11265
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !11265
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 1, !dbg !11265
  %rt_mem84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.mem_attrs**, !dbg !11265
  %52 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem84, align 8, !dbg !11265
  %expr = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %52, i32 0, i32 0, !dbg !11265
  %53 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !11265
  %tobool85 = icmp ne %union.tree_node* %53, null, !dbg !11265
  br i1 %tobool85, label %land.lhs.true86, label %if.end130, !dbg !11267

land.lhs.true86:                                  ; preds = %cond.false80, %cond.true79
  %54 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11268
  %u87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !11268
  %fld88 = bitcast %union.u* %u87 to [1 x %union.rtunion_def]*, !dbg !11268
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i64 0, i64 1, !dbg !11268
  %rt_mem90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.mem_attrs**, !dbg !11268
  %55 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem90, align 8, !dbg !11268
  %cmp91 = icmp eq %struct.mem_attrs* %55, null, !dbg !11268
  br i1 %cmp91, label %cond.true93, label %cond.false94, !dbg !11269

cond.true93:                                      ; preds = %land.lhs.true86
  br i1 false, label %if.then101, label %if.end130, !dbg !11268

cond.false94:                                     ; preds = %land.lhs.true86
  %56 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11268
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !11268
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !11268
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 1, !dbg !11268
  %rt_mem98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.mem_attrs**, !dbg !11268
  %57 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem98, align 8, !dbg !11268
  %offset99 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %57, i32 0, i32 1, !dbg !11268
  %58 = load %struct.rtx_def*, %struct.rtx_def** %offset99, align 8, !dbg !11268
  %tobool100 = icmp ne %struct.rtx_def* %58, null, !dbg !11268
  br i1 %tobool100, label %if.then101, label %if.end130, !dbg !11269

if.then101:                                       ; preds = %cond.false94, %cond.true93
  call void @llvm.dbg.declare(metadata i32* %offset102, metadata !11270, metadata !DIExpression()), !dbg !11272
  %59 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11273
  %decl_common103 = bitcast %union.tree_node* %59 to %struct.tree_decl_common*, !dbg !11273
  %mode104 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common103, i32 0, i32 2, !dbg !11273
  %60 = bitcast i40* %mode104 to i64*, !dbg !11273
  %bf.load105 = load i64, i64* %60, align 8, !dbg !11273
  %bf.clear106 = and i64 %bf.load105, 255, !dbg !11273
  %bf.cast107 = trunc i64 %bf.clear106 to i32, !dbg !11273
  %61 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11274
  %promoted_mode108 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %61, i32 0, i32 6, !dbg !11275
  %62 = load i32, i32* %promoted_mode108, align 8, !dbg !11275
  %call109 = call i32 @subreg_lowpart_offset(i32 %bf.cast107, i32 %62), !dbg !11276
  store i32 %call109, i32* %offset102, align 4, !dbg !11272
  %63 = load i32, i32* %offset102, align 4, !dbg !11277
  %tobool110 = icmp ne i32 %63, 0, !dbg !11277
  br i1 %tobool110, label %if.then111, label %if.end129, !dbg !11279

if.then111:                                       ; preds = %if.then101
  %64 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11280
  %65 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11281
  %u112 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !11281
  %fld113 = bitcast %union.u* %u112 to [1 x %union.rtunion_def]*, !dbg !11281
  %arrayidx114 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld113, i64 0, i64 1, !dbg !11281
  %rt_mem115 = bitcast %union.rtunion_def* %arrayidx114 to %struct.mem_attrs**, !dbg !11281
  %66 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem115, align 8, !dbg !11281
  %cmp116 = icmp eq %struct.mem_attrs* %66, null, !dbg !11281
  br i1 %cmp116, label %cond.true118, label %cond.false119, !dbg !11281

cond.true118:                                     ; preds = %if.then111
  br label %cond.end125, !dbg !11281

cond.false119:                                    ; preds = %if.then111
  %67 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11281
  %u120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !11281
  %fld121 = bitcast %union.u* %u120 to [1 x %union.rtunion_def]*, !dbg !11281
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i64 0, i64 1, !dbg !11281
  %rt_mem123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.mem_attrs**, !dbg !11281
  %68 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem123, align 8, !dbg !11281
  %offset124 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %68, i32 0, i32 1, !dbg !11281
  %69 = load %struct.rtx_def*, %struct.rtx_def** %offset124, align 8, !dbg !11281
  br label %cond.end125, !dbg !11281

cond.end125:                                      ; preds = %cond.false119, %cond.true118
  %cond126 = phi %struct.rtx_def* [ null, %cond.true118 ], [ %69, %cond.false119 ], !dbg !11281
  %70 = load i32, i32* %offset102, align 4, !dbg !11282
  %sub = sub nsw i32 0, %70, !dbg !11283
  %conv127 = sext i32 %sub to i64, !dbg !11283
  %call128 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %cond126, i64 %conv127), !dbg !11284
  call void @set_mem_offset(%struct.rtx_def* %64, %struct.rtx_def* %call128), !dbg !11285
  br label %if.end129, !dbg !11285

if.end129:                                        ; preds = %cond.end125, %if.then101
  br label %if.end130, !dbg !11286

if.end130:                                        ; preds = %if.end129, %cond.false94, %cond.true93, %cond.false80, %cond.true79
  br label %if.end131, !dbg !11287

if.end131:                                        ; preds = %if.end130, %land.lhs.true, %if.then64
  br label %if.end132, !dbg !11288

if.end132:                                        ; preds = %if.end131, %if.end61
  %71 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11289
  %locate133 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %71, i32 0, i32 7, !dbg !11290
  %boundary134 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate133, i32 0, i32 5, !dbg !11291
  %72 = load i32, i32* %boundary134, align 4, !dbg !11291
  store i32 %72, i32* %boundary, align 4, !dbg !11292
  store i32 8, i32* %align, align 4, !dbg !11293
  %73 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11294
  %locate135 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %73, i32 0, i32 7, !dbg !11296
  %where_pad = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate135, i32 0, i32 4, !dbg !11297
  %74 = load i32, i32* %where_pad, align 8, !dbg !11297
  %cmp136 = icmp ne i32 %74, 2, !dbg !11298
  br i1 %cmp136, label %if.then140, label %lor.lhs.false, !dbg !11299

lor.lhs.false:                                    ; preds = %if.end132
  %75 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11300
  %entry_parm138 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %75, i32 0, i32 2, !dbg !11301
  %76 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm138, align 8, !dbg !11301
  %tobool139 = icmp ne %struct.rtx_def* %76, null, !dbg !11300
  br i1 %tobool139, label %if.then140, label %if.else141, !dbg !11302

if.then140:                                       ; preds = %lor.lhs.false, %if.end132
  %77 = load i32, i32* %boundary, align 4, !dbg !11303
  store i32 %77, i32* %align, align 4, !dbg !11304
  br label %if.end153, !dbg !11305

if.else141:                                       ; preds = %lor.lhs.false
  %78 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8, !dbg !11306
  %79 = bitcast %struct.rtx_def* %78 to i32*, !dbg !11306
  %bf.load142 = load i32, i32* %79, align 8, !dbg !11306
  %bf.clear143 = and i32 %bf.load142, 65535, !dbg !11306
  %cmp144 = icmp eq i32 %bf.clear143, 30, !dbg !11306
  br i1 %cmp144, label %if.then146, label %if.end152, !dbg !11308

if.then146:                                       ; preds = %if.else141
  %80 = load %struct.rtx_def*, %struct.rtx_def** %offset_rtx, align 8, !dbg !11309
  %u147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !11309
  %hwint = bitcast %union.u* %u147 to [1 x i64]*, !dbg !11309
  %arrayidx148 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !11309
  %81 = load i64, i64* %arrayidx148, align 8, !dbg !11309
  %mul = mul nsw i64 %81, 8, !dbg !11311
  %82 = load i32, i32* %boundary, align 4, !dbg !11312
  %conv149 = zext i32 %82 to i64, !dbg !11312
  %or = or i64 %mul, %conv149, !dbg !11313
  %conv150 = trunc i64 %or to i32, !dbg !11309
  store i32 %conv150, i32* %align, align 4, !dbg !11314
  %83 = load i32, i32* %align, align 4, !dbg !11315
  %84 = load i32, i32* %align, align 4, !dbg !11316
  %sub151 = sub i32 0, %84, !dbg !11317
  %and = and i32 %83, %sub151, !dbg !11318
  store i32 %and, i32* %align, align 4, !dbg !11319
  br label %if.end152, !dbg !11320

if.end152:                                        ; preds = %if.then146, %if.else141
  br label %if.end153

if.end153:                                        ; preds = %if.end152, %if.then140
  %85 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11321
  %86 = load i32, i32* %align, align 4, !dbg !11322
  call void @set_mem_align(%struct.rtx_def* %85, i32 %86), !dbg !11323
  %87 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11324
  %entry_parm154 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %87, i32 0, i32 2, !dbg !11326
  %88 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm154, align 8, !dbg !11326
  %tobool155 = icmp ne %struct.rtx_def* %88, null, !dbg !11324
  br i1 %tobool155, label %if.then156, label %if.end158, !dbg !11327

if.then156:                                       ; preds = %if.end153
  %89 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11328
  %entry_parm157 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %89, i32 0, i32 2, !dbg !11329
  %90 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm157, align 8, !dbg !11329
  %91 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11330
  call void @set_reg_attrs_for_parm(%struct.rtx_def* %90, %struct.rtx_def* %91), !dbg !11331
  br label %if.end158, !dbg !11331

if.end158:                                        ; preds = %if.then156, %if.end153
  %92 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11332
  %93 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11333
  %stack_parm159 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %93, i32 0, i32 3, !dbg !11334
  store %struct.rtx_def* %92, %struct.rtx_def** %stack_parm159, align 8, !dbg !11335
  ret void, !dbg !11336
}

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parm_adjust_entry_rtl(%struct.assign_parm_data_one* %data) #0 !dbg !11337 {
entry:
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  %entry_parm = alloca %struct.rtx_def*, align 8
  %stack_parm = alloca %struct.rtx_def*, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !11340, metadata !DIExpression()), !dbg !11341
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %entry_parm, metadata !11342, metadata !DIExpression()), !dbg !11343
  %0 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11344
  %entry_parm1 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %0, i32 0, i32 2, !dbg !11345
  %1 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm1, align 8, !dbg !11345
  store %struct.rtx_def* %1, %struct.rtx_def** %entry_parm, align 8, !dbg !11343
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stack_parm, metadata !11346, metadata !DIExpression()), !dbg !11347
  %2 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11348
  %stack_parm2 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %2, i32 0, i32 3, !dbg !11349
  %3 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm2, align 8, !dbg !11349
  store %struct.rtx_def* %3, %struct.rtx_def** %stack_parm, align 8, !dbg !11347
  %4 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11350
  %partial = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %4, i32 0, i32 8, !dbg !11352
  %5 = load i32, i32* %partial, align 8, !dbg !11352
  %cmp = icmp ne i32 %5, 0, !dbg !11353
  br i1 %cmp, label %if.then, label %if.else13, !dbg !11354

if.then:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11355
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !11355
  %bf.load = load i32, i32* %7, align 8, !dbg !11355
  %bf.clear = and i32 %bf.load, 65535, !dbg !11355
  %cmp3 = icmp eq i32 %bf.clear, 15, !dbg !11358
  br i1 %cmp3, label %if.then4, label %if.else, !dbg !11359

if.then4:                                         ; preds = %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11360
  %call = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %8), !dbg !11361
  %9 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11362
  %10 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11363
  %passed_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %10, i32 0, i32 1, !dbg !11364
  %11 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !11364
  %12 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11365
  %passed_type5 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %12, i32 0, i32 1, !dbg !11366
  %13 = load %union.tree_node*, %union.tree_node** %passed_type5, align 8, !dbg !11366
  %call6 = call i64 @int_size_in_bytes(%union.tree_node* %13), !dbg !11367
  %conv = trunc i64 %call6 to i32, !dbg !11367
  call void @emit_group_store(%struct.rtx_def* %call, %struct.rtx_def* %9, %union.tree_node* %11, i32 %conv), !dbg !11368
  br label %if.end, !dbg !11368

if.else:                                          ; preds = %if.then
  %14 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11369
  %partial7 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %14, i32 0, i32 8, !dbg !11369
  %15 = load i32, i32* %partial7, align 8, !dbg !11369
  %rem = srem i32 %15, 4, !dbg !11369
  %cmp8 = icmp eq i32 %rem, 0, !dbg !11369
  br i1 %cmp8, label %cond.false, label %cond.true, !dbg !11369

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 2530, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11369
  br label %cond.end, !dbg !11369

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !11369

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11369
  %16 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11371
  %call10 = call i32 @rhs_regno(%struct.rtx_def* %16), !dbg !11371
  %17 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11372
  %call11 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %17), !dbg !11373
  %18 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11374
  %partial12 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %18, i32 0, i32 8, !dbg !11375
  %19 = load i32, i32* %partial12, align 8, !dbg !11375
  %div = sdiv i32 %19, 4, !dbg !11376
  call void @move_block_from_reg(i32 %call10, %struct.rtx_def* %call11, i32 %div), !dbg !11377
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then4
  %20 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11378
  store %struct.rtx_def* %20, %struct.rtx_def** %entry_parm, align 8, !dbg !11379
  br label %if.end101, !dbg !11380

if.else13:                                        ; preds = %entry
  %21 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11381
  %cmp14 = icmp eq %struct.rtx_def* %21, null, !dbg !11383
  br i1 %cmp14, label %if.then16, label %if.else17, !dbg !11384

if.then16:                                        ; preds = %if.else13
  %22 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11385
  store %struct.rtx_def* %22, %struct.rtx_def** %entry_parm, align 8, !dbg !11386
  br label %if.end100, !dbg !11387

if.else17:                                        ; preds = %if.else13
  %23 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11388
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !11388
  %bf.load18 = load i32, i32* %24, align 8, !dbg !11388
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !11388
  %cmp20 = icmp eq i32 %bf.clear19, 15, !dbg !11390
  br i1 %cmp20, label %land.lhs.true, label %if.end99, !dbg !11391

land.lhs.true:                                    ; preds = %if.else17
  %25 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11392
  %nominal_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %25, i32 0, i32 4, !dbg !11393
  %26 = load i32, i32* %nominal_mode, align 8, !dbg !11393
  %cmp22 = icmp ne i32 %26, 1, !dbg !11394
  br i1 %cmp22, label %land.lhs.true24, label %if.end99, !dbg !11395

land.lhs.true24:                                  ; preds = %land.lhs.true
  %27 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11396
  %passed_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %27, i32 0, i32 5, !dbg !11397
  %28 = load i32, i32* %passed_mode, align 4, !dbg !11397
  %cmp25 = icmp ne i32 %28, 1, !dbg !11398
  br i1 %cmp25, label %if.then27, label %if.end99, !dbg !11399

if.then27:                                        ; preds = %land.lhs.true24
  call void @llvm.dbg.declare(metadata i64* %i, metadata !11400, metadata !DIExpression()), !dbg !11402
  call void @llvm.dbg.declare(metadata i64* %len, metadata !11403, metadata !DIExpression()), !dbg !11404
  %29 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11405
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !11405
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11405
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11405
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**, !dbg !11405
  %30 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !11405
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %30, i32 0, i32 0, !dbg !11405
  %31 = load i32, i32* %num_elem, align 8, !dbg !11405
  %conv28 = sext i32 %31 to i64, !dbg !11405
  store i64 %conv28, i64* %len, align 8, !dbg !11404
  store i64 0, i64* %i, align 8, !dbg !11406
  br label %for.cond, !dbg !11408

for.cond:                                         ; preds = %for.inc, %if.then27
  %32 = load i64, i64* %i, align 8, !dbg !11409
  %33 = load i64, i64* %len, align 8, !dbg !11411
  %cmp29 = icmp ult i64 %32, %33, !dbg !11412
  br i1 %cmp29, label %for.body, label %for.end, !dbg !11413

for.body:                                         ; preds = %for.cond
  %34 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11414
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !11414
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !11414
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 0, !dbg !11414
  %rt_rtvec34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtvec_def**, !dbg !11414
  %35 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec34, align 8, !dbg !11414
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %35, i32 0, i32 1, !dbg !11414
  %36 = load i64, i64* %i, align 8, !dbg !11414
  %arrayidx35 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %36, !dbg !11414
  %37 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx35, align 8, !dbg !11414
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !11414
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !11414
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 0, !dbg !11414
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !11414
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11414
  %cmp39 = icmp ne %struct.rtx_def* %38, null, !dbg !11416
  br i1 %cmp39, label %land.lhs.true41, label %if.end98, !dbg !11417

land.lhs.true41:                                  ; preds = %for.body
  %39 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11418
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !11418
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !11418
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 0, !dbg !11418
  %rt_rtvec45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtvec_def**, !dbg !11418
  %40 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec45, align 8, !dbg !11418
  %elem46 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %40, i32 0, i32 1, !dbg !11418
  %41 = load i64, i64* %i, align 8, !dbg !11418
  %arrayidx47 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem46, i64 0, i64 %41, !dbg !11418
  %42 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx47, align 8, !dbg !11418
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !11418
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !11418
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 0, !dbg !11418
  %rt_rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**, !dbg !11418
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx51, align 8, !dbg !11418
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !11418
  %bf.load52 = load i32, i32* %44, align 8, !dbg !11418
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !11418
  %cmp54 = icmp eq i32 %bf.clear53, 37, !dbg !11418
  br i1 %cmp54, label %land.lhs.true56, label %if.end98, !dbg !11419

land.lhs.true56:                                  ; preds = %land.lhs.true41
  %45 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11420
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !11420
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !11420
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 0, !dbg !11420
  %rt_rtvec60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtvec_def**, !dbg !11420
  %46 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec60, align 8, !dbg !11420
  %elem61 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %46, i32 0, i32 1, !dbg !11420
  %47 = load i64, i64* %i, align 8, !dbg !11420
  %arrayidx62 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem61, i64 0, i64 %47, !dbg !11420
  %48 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx62, align 8, !dbg !11420
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !11420
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !11420
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 0, !dbg !11420
  %rt_rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**, !dbg !11420
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx66, align 8, !dbg !11420
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !11420
  %bf.load67 = load i32, i32* %50, align 8, !dbg !11420
  %bf.lshr = lshr i32 %bf.load67, 16, !dbg !11420
  %bf.clear68 = and i32 %bf.lshr, 255, !dbg !11420
  %51 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11421
  %passed_mode69 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %51, i32 0, i32 5, !dbg !11422
  %52 = load i32, i32* %passed_mode69, align 4, !dbg !11422
  %cmp70 = icmp eq i32 %bf.clear68, %52, !dbg !11423
  br i1 %cmp70, label %land.lhs.true72, label %if.end98, !dbg !11424

land.lhs.true72:                                  ; preds = %land.lhs.true56
  %53 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11425
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !11425
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !11425
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 0, !dbg !11425
  %rt_rtvec76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtvec_def**, !dbg !11425
  %54 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec76, align 8, !dbg !11425
  %elem77 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %54, i32 0, i32 1, !dbg !11425
  %55 = load i64, i64* %i, align 8, !dbg !11425
  %arrayidx78 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem77, i64 0, i64 %55, !dbg !11425
  %56 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx78, align 8, !dbg !11425
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !11425
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !11425
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 1, !dbg !11425
  %rt_rtx82 = bitcast %union.rtunion_def* %arrayidx81 to %struct.rtx_def**, !dbg !11425
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx82, align 8, !dbg !11425
  %u83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !11425
  %hwint = bitcast %union.u* %u83 to [1 x i64]*, !dbg !11425
  %arrayidx84 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !11425
  %58 = load i64, i64* %arrayidx84, align 8, !dbg !11425
  %cmp85 = icmp eq i64 %58, 0, !dbg !11426
  br i1 %cmp85, label %if.then87, label %if.end98, !dbg !11427

if.then87:                                        ; preds = %land.lhs.true72
  %59 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11428
  %u88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !11428
  %fld89 = bitcast %union.u* %u88 to [1 x %union.rtunion_def]*, !dbg !11428
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i64 0, i64 0, !dbg !11428
  %rt_rtvec91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtvec_def**, !dbg !11428
  %60 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec91, align 8, !dbg !11428
  %elem92 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %60, i32 0, i32 1, !dbg !11428
  %61 = load i64, i64* %i, align 8, !dbg !11428
  %arrayidx93 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem92, i64 0, i64 %61, !dbg !11428
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx93, align 8, !dbg !11428
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !11428
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !11428
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 0, !dbg !11428
  %rt_rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**, !dbg !11428
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx97, align 8, !dbg !11428
  store %struct.rtx_def* %63, %struct.rtx_def** %entry_parm, align 8, !dbg !11430
  br label %for.end, !dbg !11431

if.end98:                                         ; preds = %land.lhs.true72, %land.lhs.true56, %land.lhs.true41, %for.body
  br label %for.inc, !dbg !11432

for.inc:                                          ; preds = %if.end98
  %64 = load i64, i64* %i, align 8, !dbg !11433
  %inc = add i64 %64, 1, !dbg !11433
  store i64 %inc, i64* %i, align 8, !dbg !11433
  br label %for.cond, !dbg !11434, !llvm.loop !11435

for.end:                                          ; preds = %if.then87, %for.cond
  br label %if.end99, !dbg !11437

if.end99:                                         ; preds = %for.end, %land.lhs.true24, %land.lhs.true, %if.else17
  br label %if.end100

if.end100:                                        ; preds = %if.end99, %if.then16
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.end
  %65 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11438
  %66 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11439
  %entry_parm102 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %66, i32 0, i32 2, !dbg !11440
  store %struct.rtx_def* %65, %struct.rtx_def** %entry_parm102, align 8, !dbg !11441
  ret void, !dbg !11442
}

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parm_adjust_stack_rtl(%struct.assign_parm_data_one* %data) #0 !dbg !11443 {
entry:
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  %stack_parm = alloca %struct.rtx_def*, align 8
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !11444, metadata !DIExpression()), !dbg !11445
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stack_parm, metadata !11446, metadata !DIExpression()), !dbg !11447
  %0 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11448
  %stack_parm1 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %0, i32 0, i32 3, !dbg !11449
  %1 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm1, align 8, !dbg !11449
  store %struct.rtx_def* %1, %struct.rtx_def** %stack_parm, align 8, !dbg !11447
  %2 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11450
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !11450
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !11452

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11453
  %nominal_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %3, i32 0, i32 0, !dbg !11454
  %4 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8, !dbg !11454
  %tobool2 = icmp ne %union.tree_node* %4, null, !dbg !11453
  br i1 %tobool2, label %land.lhs.true3, label %if.else, !dbg !11455

land.lhs.true3:                                   ; preds = %land.lhs.true
  %5 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11456
  %nominal_type4 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %5, i32 0, i32 0, !dbg !11456
  %6 = load %union.tree_node*, %union.tree_node** %nominal_type4, align 8, !dbg !11456
  %type = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !11456
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 7, !dbg !11456
  %7 = load i32, i32* %align, align 8, !dbg !11456
  %8 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11457
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !11457
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11457
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !11457
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !11457
  %9 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !11457
  %cmp = icmp ne %struct.mem_attrs* %9, null, !dbg !11457
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11457

cond.true:                                        ; preds = %land.lhs.true3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11457
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !11457
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !11457
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !11457
  %rt_mem8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.mem_attrs**, !dbg !11457
  %11 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem8, align 8, !dbg !11457
  %align9 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %11, i32 0, i32 4, !dbg !11457
  %12 = load i32, i32* %align9, align 4, !dbg !11457
  br label %cond.end, !dbg !11457

cond.false:                                       ; preds = %land.lhs.true3
  br label %cond.end, !dbg !11457

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %12, %cond.true ], [ 8, %cond.false ], !dbg !11457
  %cmp10 = icmp ugt i32 %7, %cond, !dbg !11458
  br i1 %cmp10, label %land.lhs.true11, label %if.else, !dbg !11459

land.lhs.true11:                                  ; preds = %cond.end
  %13 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11460
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !11460
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !11460
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 1, !dbg !11460
  %rt_mem15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.mem_attrs**, !dbg !11460
  %14 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem15, align 8, !dbg !11460
  %cmp16 = icmp ne %struct.mem_attrs* %14, null, !dbg !11460
  br i1 %cmp16, label %cond.true17, label %cond.false23, !dbg !11460

cond.true17:                                      ; preds = %land.lhs.true11
  %15 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11460
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !11460
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !11460
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !11460
  %rt_mem21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.mem_attrs**, !dbg !11460
  %16 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem21, align 8, !dbg !11460
  %align22 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %16, i32 0, i32 4, !dbg !11460
  %17 = load i32, i32* %align22, align 4, !dbg !11460
  br label %cond.end24, !dbg !11460

cond.false23:                                     ; preds = %land.lhs.true11
  br label %cond.end24, !dbg !11460

cond.end24:                                       ; preds = %cond.false23, %cond.true17
  %cond25 = phi i32 [ %17, %cond.true17 ], [ 8, %cond.false23 ], !dbg !11460
  %18 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !11461
  %cmp26 = icmp ult i32 %cond25, %18, !dbg !11462
  br i1 %cmp26, label %if.then, label %if.else, !dbg !11463

if.then:                                          ; preds = %cond.end24
  store %struct.rtx_def* null, %struct.rtx_def** %stack_parm, align 8, !dbg !11464
  br label %if.end54, !dbg !11465

if.else:                                          ; preds = %cond.end24, %cond.end, %land.lhs.true, %entry
  %19 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11466
  %entry_parm = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %19, i32 0, i32 2, !dbg !11468
  %20 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11468
  %21 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11469
  %cmp27 = icmp eq %struct.rtx_def* %20, %21, !dbg !11470
  br i1 %cmp27, label %land.lhs.true28, label %if.else34, !dbg !11471

land.lhs.true28:                                  ; preds = %if.else
  %22 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11472
  %nominal_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %22, i32 0, i32 4, !dbg !11473
  %23 = load i32, i32* %nominal_mode, align 8, !dbg !11473
  %cmp29 = icmp ne i32 %23, 1, !dbg !11474
  br i1 %cmp29, label %land.lhs.true30, label %if.else34, !dbg !11475

land.lhs.true30:                                  ; preds = %land.lhs.true28
  %24 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11476
  %nominal_mode31 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %24, i32 0, i32 4, !dbg !11477
  %25 = load i32, i32* %nominal_mode31, align 8, !dbg !11477
  %26 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11478
  %passed_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %26, i32 0, i32 5, !dbg !11479
  %27 = load i32, i32* %passed_mode, align 4, !dbg !11479
  %cmp32 = icmp ne i32 %25, %27, !dbg !11480
  br i1 %cmp32, label %if.then33, label %if.else34, !dbg !11481

if.then33:                                        ; preds = %land.lhs.true30
  store %struct.rtx_def* null, %struct.rtx_def** %stack_parm, align 8, !dbg !11482
  br label %if.end53, !dbg !11483

if.else34:                                        ; preds = %land.lhs.true30, %land.lhs.true28, %if.else
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 9), align 8, !dbg !11484
  %tobool35 = icmp ne %union.tree_node* %28, null, !dbg !11486
  br i1 %tobool35, label %land.lhs.true36, label %if.end, !dbg !11487

land.lhs.true36:                                  ; preds = %if.else34
  %29 = load i32, i32* @flag_stack_protect, align 4, !dbg !11488
  %cmp37 = icmp eq i32 %29, 2, !dbg !11489
  br i1 %cmp37, label %if.then52, label %lor.lhs.false, !dbg !11490

lor.lhs.false:                                    ; preds = %land.lhs.true36
  %30 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11491
  %passed_pointer = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %30, i32 0, i32 9, !dbg !11492
  %bf.load = load i8, i8* %passed_pointer, align 4, !dbg !11492
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !11492
  %bf.clear = and i8 %bf.lshr, 1, !dbg !11492
  %bf.cast = zext i8 %bf.clear to i32, !dbg !11492
  %tobool38 = icmp ne i32 %bf.cast, 0, !dbg !11491
  br i1 %tobool38, label %if.then52, label %lor.lhs.false39, !dbg !11493

lor.lhs.false39:                                  ; preds = %lor.lhs.false
  %31 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11494
  %nominal_type40 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %31, i32 0, i32 0, !dbg !11494
  %32 = load %union.tree_node*, %union.tree_node** %nominal_type40, align 8, !dbg !11494
  %base = bitcast %union.tree_node* %32 to %struct.tree_base*, !dbg !11494
  %33 = bitcast %struct.tree_base* %base to i64*, !dbg !11494
  %bf.load41 = load i64, i64* %33, align 8, !dbg !11494
  %bf.clear42 = and i64 %bf.load41, 65535, !dbg !11494
  %bf.cast43 = trunc i64 %bf.clear42 to i32, !dbg !11494
  %cmp44 = icmp eq i32 %bf.cast43, 10, !dbg !11494
  br i1 %cmp44, label %if.then52, label %lor.lhs.false45, !dbg !11494

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %34 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11494
  %nominal_type46 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %34, i32 0, i32 0, !dbg !11494
  %35 = load %union.tree_node*, %union.tree_node** %nominal_type46, align 8, !dbg !11494
  %base47 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !11494
  %36 = bitcast %struct.tree_base* %base47 to i64*, !dbg !11494
  %bf.load48 = load i64, i64* %36, align 8, !dbg !11494
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !11494
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !11494
  %cmp51 = icmp eq i32 %bf.cast50, 12, !dbg !11494
  br i1 %cmp51, label %if.then52, label %if.end, !dbg !11495

if.then52:                                        ; preds = %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false, %land.lhs.true36
  store %struct.rtx_def* null, %struct.rtx_def** %stack_parm, align 8, !dbg !11496
  br label %if.end, !dbg !11497

if.end:                                           ; preds = %if.then52, %lor.lhs.false45, %if.else34
  br label %if.end53

if.end53:                                         ; preds = %if.end, %if.then33
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then
  %37 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11498
  %38 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11499
  %stack_parm55 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %38, i32 0, i32 3, !dbg !11500
  store %struct.rtx_def* %37, %struct.rtx_def** %stack_parm55, align 8, !dbg !11501
  ret void, !dbg !11502
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @assign_parm_setup_block_p(%struct.assign_parm_data_one* %data) #0 !dbg !11503 {
entry:
  %retval = alloca i8, align 1
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !11506, metadata !DIExpression()), !dbg !11507
  %0 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11508
  %nominal_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %0, i32 0, i32 4, !dbg !11510
  %1 = load i32, i32* %nominal_mode, align 8, !dbg !11510
  %cmp = icmp eq i32 %1, 1, !dbg !11511
  br i1 %cmp, label %if.then, label %if.end, !dbg !11512

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !11513
  br label %return, !dbg !11513

if.end:                                           ; preds = %entry
  %2 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11514
  %entry_parm = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %2, i32 0, i32 2, !dbg !11514
  %3 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11514
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !11514
  %bf.load = load i32, i32* %4, align 8, !dbg !11514
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !11514
  %bf.clear = and i32 %bf.lshr, 255, !dbg !11514
  %cmp1 = icmp eq i32 %bf.clear, 1, !dbg !11516
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !11517

if.then2:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !11518
  br label %return, !dbg !11518

if.end3:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !11519
  br label %return, !dbg !11519

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !11520
  ret i8 %5, !dbg !11520
}

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parm_setup_block(%struct.assign_parm_data_all* %all, %union.tree_node* %parm, %struct.assign_parm_data_one* %data) #0 !dbg !11521 {
entry:
  %all.addr = alloca %struct.assign_parm_data_all*, align 8
  %parm.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  %entry_parm = alloca %struct.rtx_def*, align 8
  %stack_parm = alloca %struct.rtx_def*, align 8
  %size = alloca i64, align 8
  %size_stored = alloca i64, align 8
  %mem = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %by = alloca i32, align 4
  %reg89 = alloca %struct.rtx_def*, align 8
  store %struct.assign_parm_data_all* %all, %struct.assign_parm_data_all** %all.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all** %all.addr, metadata !11522, metadata !DIExpression()), !dbg !11523
  store %union.tree_node* %parm, %union.tree_node** %parm.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm.addr, metadata !11524, metadata !DIExpression()), !dbg !11525
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !11526, metadata !DIExpression()), !dbg !11527
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %entry_parm, metadata !11528, metadata !DIExpression()), !dbg !11529
  %0 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11530
  %entry_parm1 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %0, i32 0, i32 2, !dbg !11531
  %1 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm1, align 8, !dbg !11531
  store %struct.rtx_def* %1, %struct.rtx_def** %entry_parm, align 8, !dbg !11529
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stack_parm, metadata !11532, metadata !DIExpression()), !dbg !11533
  %2 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11534
  %stack_parm2 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %2, i32 0, i32 3, !dbg !11535
  %3 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm2, align 8, !dbg !11535
  store %struct.rtx_def* %3, %struct.rtx_def** %stack_parm, align 8, !dbg !11533
  call void @llvm.dbg.declare(metadata i64* %size, metadata !11536, metadata !DIExpression()), !dbg !11537
  call void @llvm.dbg.declare(metadata i64* %size_stored, metadata !11538, metadata !DIExpression()), !dbg !11539
  %4 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11540
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !11540
  %bf.load = load i32, i32* %5, align 8, !dbg !11540
  %bf.clear = and i32 %bf.load, 65535, !dbg !11540
  %cmp = icmp eq i32 %bf.clear, 15, !dbg !11542
  br i1 %cmp, label %if.then, label %if.end, !dbg !11543

if.then:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11544
  %call = call %struct.rtx_def* @emit_group_move_into_temps(%struct.rtx_def* %6), !dbg !11545
  store %struct.rtx_def* %call, %struct.rtx_def** %entry_parm, align 8, !dbg !11546
  br label %if.end, !dbg !11547

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11548
  %passed_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %7, i32 0, i32 1, !dbg !11549
  %8 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !11549
  %call3 = call i64 @int_size_in_bytes(%union.tree_node* %8), !dbg !11550
  store i64 %call3, i64* %size, align 8, !dbg !11551
  %9 = load i64, i64* %size, align 8, !dbg !11552
  %add = add nsw i64 %9, 4, !dbg !11552
  %sub = sub nsw i64 %add, 1, !dbg !11552
  %and = and i64 %sub, -4, !dbg !11552
  store i64 %and, i64* %size_stored, align 8, !dbg !11553
  %10 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11554
  %cmp4 = icmp eq %struct.rtx_def* %10, null, !dbg !11556
  br i1 %cmp4, label %if.then5, label %if.end26, !dbg !11557

if.then5:                                         ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11558
  %decl_common = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !11558
  %align = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 3, !dbg !11558
  %12 = load i32, i32* %align, align 8, !dbg !11558
  %cmp6 = icmp ugt i32 %12, 32, !dbg !11558
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !11558

cond.true:                                        ; preds = %if.then5
  %13 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11558
  %decl_common7 = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !11558
  %align8 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common7, i32 0, i32 3, !dbg !11558
  %14 = load i32, i32* %align8, align 8, !dbg !11558
  br label %cond.end, !dbg !11558

cond.false:                                       ; preds = %if.then5
  br label %cond.end, !dbg !11558

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %14, %cond.true ], [ 32, %cond.false ], !dbg !11558
  %15 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11560
  %decl_common9 = bitcast %union.tree_node* %15 to %struct.tree_decl_common*, !dbg !11560
  %align10 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common9, i32 0, i32 3, !dbg !11560
  store i32 %cond, i32* %align10, align 8, !dbg !11561
  %16 = load i64, i64* %size_stored, align 8, !dbg !11562
  %17 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11563
  %decl_common11 = bitcast %union.tree_node* %17 to %struct.tree_decl_common*, !dbg !11563
  %align12 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common11, i32 0, i32 3, !dbg !11563
  %18 = load i32, i32* %align12, align 8, !dbg !11563
  %call13 = call %struct.rtx_def* @assign_stack_local(i32 1, i64 %16, i32 %18), !dbg !11564
  store %struct.rtx_def* %call13, %struct.rtx_def** %stack_parm, align 8, !dbg !11565
  %19 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11566
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !11566
  %bf.load14 = load i32, i32* %20, align 8, !dbg !11566
  %bf.lshr = lshr i32 %bf.load14, 16, !dbg !11566
  %bf.clear15 = and i32 %bf.lshr, 255, !dbg !11566
  %idxprom = zext i32 %bf.clear15 to i64, !dbg !11566
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !11566
  %21 = load i8, i8* %arrayidx, align 1, !dbg !11566
  %conv = zext i8 %21 to i16, !dbg !11566
  %conv16 = zext i16 %conv to i64, !dbg !11566
  %22 = load i64, i64* %size, align 8, !dbg !11568
  %cmp17 = icmp eq i64 %conv16, %22, !dbg !11569
  br i1 %cmp17, label %if.then19, label %if.end25, !dbg !11570

if.then19:                                        ; preds = %cond.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11571
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !11571
  %bf.load20 = load i32, i32* %24, align 8, !dbg !11571
  %bf.lshr21 = lshr i32 %bf.load20, 16, !dbg !11571
  %bf.clear22 = and i32 %bf.lshr21, 255, !dbg !11571
  %25 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11571
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !11571
  %bf.load23 = load i32, i32* %26, align 8, !dbg !11571
  %bf.value = and i32 %bf.clear22, 255, !dbg !11571
  %bf.shl = shl i32 %bf.value, 16, !dbg !11571
  %bf.clear24 = and i32 %bf.load23, -16711681, !dbg !11571
  %bf.set = or i32 %bf.clear24, %bf.shl, !dbg !11571
  store i32 %bf.set, i32* %26, align 8, !dbg !11571
  br label %if.end25, !dbg !11571

if.end25:                                         ; preds = %if.then19, %cond.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11572
  %28 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11573
  call void @set_mem_attributes(%struct.rtx_def* %27, %union.tree_node* %28, i32 1), !dbg !11574
  br label %if.end26, !dbg !11575

if.end26:                                         ; preds = %if.end25, %if.end
  %29 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11576
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !11576
  %bf.load27 = load i32, i32* %30, align 8, !dbg !11576
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !11576
  %cmp29 = icmp eq i32 %bf.clear28, 37, !dbg !11576
  br i1 %cmp29, label %if.then35, label %lor.lhs.false, !dbg !11578

lor.lhs.false:                                    ; preds = %if.end26
  %31 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11579
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !11579
  %bf.load31 = load i32, i32* %32, align 8, !dbg !11579
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !11579
  %cmp33 = icmp eq i32 %bf.clear32, 15, !dbg !11580
  br i1 %cmp33, label %if.then35, label %if.else109, !dbg !11581

if.then35:                                        ; preds = %lor.lhs.false, %if.end26
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem, metadata !11582, metadata !DIExpression()), !dbg !11584
  %33 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11585
  %stack_parm36 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %33, i32 0, i32 3, !dbg !11587
  %34 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm36, align 8, !dbg !11587
  %cmp37 = icmp eq %struct.rtx_def* %34, null, !dbg !11588
  br i1 %cmp37, label %if.then39, label %if.else, !dbg !11589

if.then39:                                        ; preds = %if.then35
  br label %if.end52, !dbg !11589

if.else:                                          ; preds = %if.then35
  %35 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11590
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !11590
  %bf.load40 = load i32, i32* %36, align 8, !dbg !11590
  %bf.clear41 = and i32 %bf.load40, 65535, !dbg !11590
  %cmp42 = icmp eq i32 %bf.clear41, 15, !dbg !11592
  br i1 %cmp42, label %if.then44, label %if.else45, !dbg !11593

if.then44:                                        ; preds = %if.else
  br label %if.end51, !dbg !11593

if.else45:                                        ; preds = %if.else
  %37 = load i64, i64* %size, align 8, !dbg !11594
  %tobool = icmp ne i64 %37, 0, !dbg !11594
  br i1 %tobool, label %lor.lhs.false46, label %cond.false48, !dbg !11594

lor.lhs.false46:                                  ; preds = %if.else45
  br i1 false, label %cond.true47, label %cond.false48, !dbg !11594

cond.true47:                                      ; preds = %lor.lhs.false46
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 2698, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !11594
  br label %cond.end49, !dbg !11594

cond.false48:                                     ; preds = %lor.lhs.false46, %if.else45
  br label %cond.end49, !dbg !11594

cond.end49:                                       ; preds = %cond.false48, %cond.true47
  %cond50 = phi i32 [ 0, %cond.true47 ], [ 0, %cond.false48 ], !dbg !11594
  br label %if.end51

if.end51:                                         ; preds = %cond.end49, %if.then44
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.then39
  %38 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11595
  %call53 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %38), !dbg !11596
  store %struct.rtx_def* %call53, %struct.rtx_def** %mem, align 8, !dbg !11597
  %39 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11598
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !11598
  %bf.load54 = load i32, i32* %40, align 8, !dbg !11598
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !11598
  %cmp56 = icmp eq i32 %bf.clear55, 15, !dbg !11600
  br i1 %cmp56, label %if.then58, label %if.else65, !dbg !11601

if.then58:                                        ; preds = %if.end52
  %41 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11602
  %first_conversion_insn = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %41, i32 0, i32 4, !dbg !11604
  %42 = load %struct.rtx_def*, %struct.rtx_def** %first_conversion_insn, align 8, !dbg !11604
  %43 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11605
  %last_conversion_insn = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %43, i32 0, i32 5, !dbg !11606
  %44 = load %struct.rtx_def*, %struct.rtx_def** %last_conversion_insn, align 8, !dbg !11606
  call void @push_to_sequence2(%struct.rtx_def* %42, %struct.rtx_def* %44), !dbg !11607
  %45 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !11608
  %46 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11609
  %47 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11610
  %passed_type59 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %47, i32 0, i32 1, !dbg !11611
  %48 = load %union.tree_node*, %union.tree_node** %passed_type59, align 8, !dbg !11611
  %49 = load i64, i64* %size, align 8, !dbg !11612
  %conv60 = trunc i64 %49 to i32, !dbg !11612
  call void @emit_group_store(%struct.rtx_def* %45, %struct.rtx_def* %46, %union.tree_node* %48, i32 %conv60), !dbg !11613
  %call61 = call %struct.rtx_def* @get_insns(), !dbg !11614
  %50 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11615
  %first_conversion_insn62 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %50, i32 0, i32 4, !dbg !11616
  store %struct.rtx_def* %call61, %struct.rtx_def** %first_conversion_insn62, align 8, !dbg !11617
  %call63 = call %struct.rtx_def* @get_last_insn(), !dbg !11618
  %51 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11619
  %last_conversion_insn64 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %51, i32 0, i32 5, !dbg !11620
  store %struct.rtx_def* %call63, %struct.rtx_def** %last_conversion_insn64, align 8, !dbg !11621
  call void @end_sequence(), !dbg !11622
  br label %if.end108, !dbg !11623

if.else65:                                        ; preds = %if.end52
  %52 = load i64, i64* %size, align 8, !dbg !11624
  %cmp66 = icmp eq i64 %52, 0, !dbg !11626
  br i1 %cmp66, label %if.then68, label %if.else69, !dbg !11627

if.then68:                                        ; preds = %if.else65
  br label %if.end107, !dbg !11627

if.else69:                                        ; preds = %if.else65
  %53 = load i64, i64* %size, align 8, !dbg !11628
  %cmp70 = icmp sle i64 %53, 4, !dbg !11630
  br i1 %cmp70, label %if.then72, label %if.else102, !dbg !11631

if.then72:                                        ; preds = %if.else69
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !11632, metadata !DIExpression()), !dbg !11634
  %54 = load i64, i64* %size, align 8, !dbg !11635
  %mul = mul nsw i64 %54, 8, !dbg !11636
  %conv73 = trunc i64 %mul to i32, !dbg !11635
  %call74 = call i32 @mode_for_size(i32 %conv73, i32 2, i32 0), !dbg !11637
  store i32 %call74, i32* %mode, align 4, !dbg !11634
  %55 = load i32, i32* %mode, align 4, !dbg !11638
  %cmp75 = icmp ne i32 %55, 1, !dbg !11640
  br i1 %cmp75, label %if.then77, label %if.else82, !dbg !11641

if.then77:                                        ; preds = %if.then72
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !11642, metadata !DIExpression()), !dbg !11644
  %56 = load i32, i32* %mode, align 4, !dbg !11645
  %57 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11647
  %call78 = call i32 @rhs_regno(%struct.rtx_def* %57), !dbg !11647
  %call79 = call %struct.rtx_def* @gen_rtx_REG(i32 %56, i32 %call78), !dbg !11648
  store %struct.rtx_def* %call79, %struct.rtx_def** %reg, align 8, !dbg !11649
  %58 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !11650
  %59 = load i32, i32* %mode, align 4, !dbg !11651
  %call80 = call %struct.rtx_def* @change_address(%struct.rtx_def* %58, i32 %59, %struct.rtx_def* null), !dbg !11652
  %60 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !11653
  %call81 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call80, %struct.rtx_def* %60), !dbg !11654
  br label %if.end101, !dbg !11655

if.else82:                                        ; preds = %if.then72
  %61 = load i64, i64* %size, align 8, !dbg !11656
  %cmp83 = icmp ne i64 %61, 4, !dbg !11658
  br i1 %cmp83, label %land.lhs.true, label %if.else97, !dbg !11659

land.lhs.true:                                    ; preds = %if.else82
  br i1 false, label %if.then85, label %if.else97, !dbg !11660

if.then85:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !11661, metadata !DIExpression()), !dbg !11663
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !11664, metadata !DIExpression()), !dbg !11665
  call void @llvm.dbg.declare(metadata i32* %by, metadata !11666, metadata !DIExpression()), !dbg !11667
  %62 = load i64, i64* %size, align 8, !dbg !11668
  %sub86 = sub nsw i64 4, %62, !dbg !11669
  %mul87 = mul nsw i64 %sub86, 8, !dbg !11670
  %conv88 = trunc i64 %mul87 to i32, !dbg !11671
  store i32 %conv88, i32* %by, align 4, !dbg !11667
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg89, metadata !11672, metadata !DIExpression()), !dbg !11673
  %63 = load i32, i32* @word_mode, align 4, !dbg !11674
  %64 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11675
  %call90 = call i32 @rhs_regno(%struct.rtx_def* %64), !dbg !11675
  %call91 = call %struct.rtx_def* @gen_rtx_REG(i32 %63, i32 %call90), !dbg !11676
  store %struct.rtx_def* %call91, %struct.rtx_def** %reg89, align 8, !dbg !11673
  %65 = load i32, i32* @word_mode, align 4, !dbg !11677
  %66 = load %struct.rtx_def*, %struct.rtx_def** %reg89, align 8, !dbg !11678
  %67 = load i32, i32* %by, align 4, !dbg !11679
  %conv92 = sext i32 %67 to i64, !dbg !11679
  %call93 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv92), !dbg !11680
  %call94 = call %struct.rtx_def* @expand_shift(i32 83, i32 %65, %struct.rtx_def* %66, %union.tree_node* %call93, %struct.rtx_def* null, i32 1), !dbg !11681
  store %struct.rtx_def* %call94, %struct.rtx_def** %x, align 8, !dbg !11682
  %68 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !11683
  %69 = load i32, i32* @word_mode, align 4, !dbg !11684
  %call95 = call %struct.rtx_def* @change_address(%struct.rtx_def* %68, i32 %69, %struct.rtx_def* null), !dbg !11685
  store %struct.rtx_def* %call95, %struct.rtx_def** %tem, align 8, !dbg !11686
  %70 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !11687
  %71 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11688
  %call96 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %70, %struct.rtx_def* %71), !dbg !11689
  br label %if.end100, !dbg !11690

if.else97:                                        ; preds = %land.lhs.true, %if.else82
  %72 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11691
  %call98 = call i32 @rhs_regno(%struct.rtx_def* %72), !dbg !11691
  %73 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !11692
  %74 = load i64, i64* %size_stored, align 8, !dbg !11693
  %div = sdiv i64 %74, 4, !dbg !11694
  %conv99 = trunc i64 %div to i32, !dbg !11693
  call void @move_block_from_reg(i32 %call98, %struct.rtx_def* %73, i32 %conv99), !dbg !11695
  br label %if.end100

if.end100:                                        ; preds = %if.else97, %if.then85
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.then77
  br label %if.end106, !dbg !11696

if.else102:                                       ; preds = %if.else69
  %75 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11697
  %call103 = call i32 @rhs_regno(%struct.rtx_def* %75), !dbg !11697
  %76 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !11698
  %77 = load i64, i64* %size_stored, align 8, !dbg !11699
  %div104 = sdiv i64 %77, 4, !dbg !11700
  %conv105 = trunc i64 %div104 to i32, !dbg !11699
  call void @move_block_from_reg(i32 %call103, %struct.rtx_def* %76, i32 %conv105), !dbg !11701
  br label %if.end106

if.end106:                                        ; preds = %if.else102, %if.end101
  br label %if.end107

if.end107:                                        ; preds = %if.end106, %if.then68
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.then58
  br label %if.end124, !dbg !11702

if.else109:                                       ; preds = %lor.lhs.false
  %78 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11703
  %stack_parm110 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %78, i32 0, i32 3, !dbg !11705
  %79 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm110, align 8, !dbg !11705
  %cmp111 = icmp eq %struct.rtx_def* %79, null, !dbg !11706
  br i1 %cmp111, label %if.then113, label %if.end123, !dbg !11707

if.then113:                                       ; preds = %if.else109
  %80 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11708
  %first_conversion_insn114 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %80, i32 0, i32 4, !dbg !11710
  %81 = load %struct.rtx_def*, %struct.rtx_def** %first_conversion_insn114, align 8, !dbg !11710
  %82 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11711
  %last_conversion_insn115 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %82, i32 0, i32 5, !dbg !11712
  %83 = load %struct.rtx_def*, %struct.rtx_def** %last_conversion_insn115, align 8, !dbg !11712
  call void @push_to_sequence2(%struct.rtx_def* %81, %struct.rtx_def* %83), !dbg !11713
  %84 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11714
  %85 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11715
  %entry_parm116 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %85, i32 0, i32 2, !dbg !11716
  %86 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm116, align 8, !dbg !11716
  %87 = load i64, i64* %size, align 8, !dbg !11717
  %call117 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %87), !dbg !11717
  %call118 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %84, %struct.rtx_def* %86, %struct.rtx_def* %call117, i32 0), !dbg !11718
  %call119 = call %struct.rtx_def* @get_insns(), !dbg !11719
  %88 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11720
  %first_conversion_insn120 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %88, i32 0, i32 4, !dbg !11721
  store %struct.rtx_def* %call119, %struct.rtx_def** %first_conversion_insn120, align 8, !dbg !11722
  %call121 = call %struct.rtx_def* @get_last_insn(), !dbg !11723
  %89 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11724
  %last_conversion_insn122 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %89, i32 0, i32 5, !dbg !11725
  store %struct.rtx_def* %call121, %struct.rtx_def** %last_conversion_insn122, align 8, !dbg !11726
  call void @end_sequence(), !dbg !11727
  br label %if.end123, !dbg !11728

if.end123:                                        ; preds = %if.then113, %if.else109
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %if.end108
  %90 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11729
  %91 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11730
  %stack_parm125 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %91, i32 0, i32 3, !dbg !11731
  store %struct.rtx_def* %90, %struct.rtx_def** %stack_parm125, align 8, !dbg !11732
  %92 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11733
  %93 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !11733
  call void @set_decl_rtl(%union.tree_node* %92, %struct.rtx_def* %93), !dbg !11733
  ret void, !dbg !11734
}

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parm_setup_reg(%struct.assign_parm_data_all* %all, %union.tree_node* %parm, %struct.assign_parm_data_one* %data) #0 !dbg !11735 {
entry:
  %all.addr = alloca %struct.assign_parm_data_all*, align 8
  %parm.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  %parmreg = alloca %struct.rtx_def*, align 8
  %promoted_nominal_mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %did_conversion = alloca i8, align 1
  %x = alloca %struct.rtx_def*, align 8
  %save_tree_used = alloca i32, align 4
  %tempreg = alloca %struct.rtx_def*, align 8
  %_rtx = alloca %struct.rtx_def*, align 8
  %tempreg246 = alloca %struct.rtx_def*, align 8
  %unsigned_p = alloca i32, align 4
  %linsn = alloca %struct.rtx_def*, align 8
  %sinsn = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %submode = alloca i32, align 4
  %regnor = alloca i32, align 4
  %regnoi = alloca i32, align 4
  %stackr = alloca %struct.rtx_def*, align 8
  %stacki = alloca %struct.rtx_def*, align 8
  store %struct.assign_parm_data_all* %all, %struct.assign_parm_data_all** %all.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all** %all.addr, metadata !11736, metadata !DIExpression()), !dbg !11737
  store %union.tree_node* %parm, %union.tree_node** %parm.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm.addr, metadata !11738, metadata !DIExpression()), !dbg !11739
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !11740, metadata !DIExpression()), !dbg !11741
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %parmreg, metadata !11742, metadata !DIExpression()), !dbg !11743
  call void @llvm.dbg.declare(metadata i32* %promoted_nominal_mode, metadata !11744, metadata !DIExpression()), !dbg !11745
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !11746, metadata !DIExpression()), !dbg !11747
  %0 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11748
  %common = bitcast %union.tree_node* %0 to %struct.tree_common*, !dbg !11748
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !11748
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11748
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !11748
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !11748
  %bf.load = load i64, i64* %2, align 8, !dbg !11748
  %bf.lshr = lshr i64 %bf.load, 21, !dbg !11748
  %bf.clear = and i64 %bf.lshr, 1, !dbg !11748
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !11748
  store i32 %bf.cast, i32* %unsignedp, align 4, !dbg !11747
  call void @llvm.dbg.declare(metadata i8* %did_conversion, metadata !11749, metadata !DIExpression()), !dbg !11750
  store i8 0, i8* %did_conversion, align 1, !dbg !11750
  %3 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11751
  %nominal_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %3, i32 0, i32 0, !dbg !11752
  %4 = load %union.tree_node*, %union.tree_node** %nominal_type, align 8, !dbg !11752
  %5 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11753
  %nominal_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %5, i32 0, i32 4, !dbg !11754
  %6 = load i32, i32* %nominal_mode, align 8, !dbg !11754
  %7 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !11755
  %common1 = bitcast %union.tree_node* %7 to %struct.tree_common*, !dbg !11755
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !11755
  %8 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !11755
  %call = call i32 @promote_function_mode(%union.tree_node* %4, i32 %6, i32* %unsignedp, %union.tree_node* %8, i32 2), !dbg !11756
  store i32 %call, i32* %promoted_nominal_mode, align 4, !dbg !11757
  %9 = load i32, i32* %promoted_nominal_mode, align 4, !dbg !11758
  %call3 = call %struct.rtx_def* @gen_reg_rtx(i32 %9), !dbg !11759
  store %struct.rtx_def* %call3, %struct.rtx_def** %parmreg, align 8, !dbg !11760
  %10 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11761
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !11761
  %artificial_flag = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !11761
  %11 = bitcast i40* %artificial_flag to i64*, !dbg !11761
  %bf.load4 = load i64, i64* %11, align 8, !dbg !11761
  %bf.lshr5 = lshr i64 %bf.load4, 12, !dbg !11761
  %bf.clear6 = and i64 %bf.lshr5, 1, !dbg !11761
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !11761
  %tobool = icmp ne i32 %bf.cast7, 0, !dbg !11761
  br i1 %tobool, label %if.end, label %if.then, !dbg !11763

if.then:                                          ; preds = %entry
  %12 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11764
  call void @mark_user_reg(%struct.rtx_def* %12), !dbg !11765
  br label %if.end, !dbg !11765

if.end:                                           ; preds = %if.then, %entry
  %13 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11766
  %passed_pointer = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %13, i32 0, i32 9, !dbg !11768
  %bf.load8 = load i8, i8* %passed_pointer, align 4, !dbg !11768
  %bf.lshr9 = lshr i8 %bf.load8, 1, !dbg !11768
  %bf.clear10 = and i8 %bf.lshr9, 1, !dbg !11768
  %bf.cast11 = zext i8 %bf.clear10 to i32, !dbg !11768
  %tobool12 = icmp ne i32 %bf.cast11, 0, !dbg !11766
  br i1 %tobool12, label %if.then13, label %if.else, !dbg !11769

if.then13:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !11770, metadata !DIExpression()), !dbg !11772
  %14 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11773
  %passed_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %14, i32 0, i32 1, !dbg !11773
  %15 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !11773
  %common14 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !11773
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !11773
  %16 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !11773
  %base16 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !11773
  %17 = bitcast %struct.tree_base* %base16 to i64*, !dbg !11773
  %bf.load17 = load i64, i64* %17, align 8, !dbg !11773
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !11773
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !11773
  %cmp = icmp eq i32 %bf.cast19, 14, !dbg !11773
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11773

cond.true:                                        ; preds = %if.then13
  %18 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11773
  %passed_type20 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %18, i32 0, i32 1, !dbg !11773
  %19 = load %union.tree_node*, %union.tree_node** %passed_type20, align 8, !dbg !11773
  %common21 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !11773
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !11773
  %20 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !11773
  %call23 = call i32 @vector_type_mode(%union.tree_node* %20), !dbg !11773
  br label %cond.end, !dbg !11773

cond.false:                                       ; preds = %if.then13
  %21 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11773
  %passed_type24 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %21, i32 0, i32 1, !dbg !11773
  %22 = load %union.tree_node*, %union.tree_node** %passed_type24, align 8, !dbg !11773
  %common25 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !11773
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !11773
  %23 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !11773
  %type27 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !11773
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 6, !dbg !11773
  %bf.load28 = load i32, i32* %mode, align 4, !dbg !11773
  %bf.lshr29 = lshr i32 %bf.load28, 16, !dbg !11773
  %bf.clear30 = and i32 %bf.lshr29, 255, !dbg !11773
  br label %cond.end, !dbg !11773

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call23, %cond.true ], [ %bf.clear30, %cond.false ], !dbg !11773
  %24 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11774
  %call31 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond, %struct.rtx_def* %24), !dbg !11775
  store %struct.rtx_def* %call31, %struct.rtx_def** %x, align 8, !dbg !11772
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11776
  %26 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11777
  call void @set_mem_attributes(%struct.rtx_def* %25, %union.tree_node* %26, i32 1), !dbg !11778
  %27 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11779
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !11779
  call void @set_decl_rtl(%union.tree_node* %27, %struct.rtx_def* %28), !dbg !11779
  br label %if.end32, !dbg !11780

if.else:                                          ; preds = %if.end
  %29 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11781
  %30 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11781
  call void @set_decl_rtl(%union.tree_node* %29, %struct.rtx_def* %30), !dbg !11781
  br label %if.end32

if.end32:                                         ; preds = %if.else, %cond.end
  %31 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11782
  call void @assign_parm_remove_parallels(%struct.assign_parm_data_one* %31), !dbg !11783
  %32 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11784
  %nominal_mode33 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %32, i32 0, i32 4, !dbg !11786
  %33 = load i32, i32* %nominal_mode33, align 8, !dbg !11786
  %34 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11787
  %passed_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %34, i32 0, i32 5, !dbg !11788
  %35 = load i32, i32* %passed_mode, align 4, !dbg !11788
  %cmp34 = icmp ne i32 %33, %35, !dbg !11789
  br i1 %cmp34, label %if.then36, label %lor.lhs.false, !dbg !11790

lor.lhs.false:                                    ; preds = %if.end32
  %36 = load i32, i32* %promoted_nominal_mode, align 4, !dbg !11791
  %37 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11792
  %promoted_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %37, i32 0, i32 6, !dbg !11793
  %38 = load i32, i32* %promoted_mode, align 8, !dbg !11793
  %cmp35 = icmp ne i32 %36, %38, !dbg !11794
  br i1 %cmp35, label %if.then36, label %if.else125, !dbg !11795

if.then36:                                        ; preds = %lor.lhs.false, %if.end32
  call void @llvm.dbg.declare(metadata i32* %save_tree_used, metadata !11796, metadata !DIExpression()), !dbg !11798
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tempreg, metadata !11799, metadata !DIExpression()), !dbg !11800
  %39 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11801
  %entry_parm = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %39, i32 0, i32 2, !dbg !11801
  %40 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !11801
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !11801
  %bf.load37 = load i32, i32* %41, align 8, !dbg !11801
  %bf.lshr38 = lshr i32 %bf.load37, 16, !dbg !11801
  %bf.clear39 = and i32 %bf.lshr38, 255, !dbg !11801
  %call40 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear39), !dbg !11802
  store %struct.rtx_def* %call40, %struct.rtx_def** %tempreg, align 8, !dbg !11800
  %42 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !11803
  %43 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11804
  %entry_parm41 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %43, i32 0, i32 2, !dbg !11805
  %44 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm41, align 8, !dbg !11805
  %call42 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %44), !dbg !11806
  %call43 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %42, %struct.rtx_def* %call42), !dbg !11807
  %45 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11808
  %first_conversion_insn = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %45, i32 0, i32 4, !dbg !11809
  %46 = load %struct.rtx_def*, %struct.rtx_def** %first_conversion_insn, align 8, !dbg !11809
  %47 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11810
  %last_conversion_insn = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %47, i32 0, i32 5, !dbg !11811
  %48 = load %struct.rtx_def*, %struct.rtx_def** %last_conversion_insn, align 8, !dbg !11811
  call void @push_to_sequence2(%struct.rtx_def* %46, %struct.rtx_def* %48), !dbg !11812
  %49 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11813
  %nominal_mode44 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %49, i32 0, i32 4, !dbg !11814
  %50 = load i32, i32* %nominal_mode44, align 8, !dbg !11814
  %51 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !11815
  %52 = load i32, i32* %unsignedp, align 4, !dbg !11816
  %call45 = call %struct.rtx_def* @convert_to_mode(i32 %50, %struct.rtx_def* %51, i32 %52), !dbg !11817
  store %struct.rtx_def* %call45, %struct.rtx_def** %tempreg, align 8, !dbg !11818
  %53 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !11819
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !11819
  %bf.load46 = load i32, i32* %54, align 8, !dbg !11819
  %bf.clear47 = and i32 %bf.load46, 65535, !dbg !11819
  %cmp48 = icmp eq i32 %bf.clear47, 39, !dbg !11821
  br i1 %cmp48, label %land.lhs.true, label %if.end107, !dbg !11822

land.lhs.true:                                    ; preds = %if.then36
  %55 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !11823
  %56 = bitcast %struct.rtx_def* %55 to i32*, !dbg !11823
  %bf.load49 = load i32, i32* %56, align 8, !dbg !11823
  %bf.lshr50 = lshr i32 %bf.load49, 16, !dbg !11823
  %bf.clear51 = and i32 %bf.lshr50, 255, !dbg !11823
  %57 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11824
  %nominal_mode52 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %57, i32 0, i32 4, !dbg !11825
  %58 = load i32, i32* %nominal_mode52, align 8, !dbg !11825
  %cmp53 = icmp eq i32 %bf.clear51, %58, !dbg !11826
  br i1 %cmp53, label %land.lhs.true54, label %if.end107, !dbg !11827

land.lhs.true54:                                  ; preds = %land.lhs.true
  %59 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !11828
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !11828
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11828
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11828
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !11828
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11828
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !11828
  %bf.load55 = load i32, i32* %61, align 8, !dbg !11828
  %bf.clear56 = and i32 %bf.load55, 65535, !dbg !11828
  %cmp57 = icmp eq i32 %bf.clear56, 37, !dbg !11828
  br i1 %cmp57, label %land.lhs.true58, label %if.end107, !dbg !11829

land.lhs.true58:                                  ; preds = %land.lhs.true54
  %62 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11830
  %nominal_mode59 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %62, i32 0, i32 4, !dbg !11831
  %63 = load i32, i32* %nominal_mode59, align 8, !dbg !11831
  %64 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11832
  %passed_mode60 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %64, i32 0, i32 5, !dbg !11833
  %65 = load i32, i32* %passed_mode60, align 4, !dbg !11833
  %cmp61 = icmp eq i32 %63, %65, !dbg !11834
  br i1 %cmp61, label %land.lhs.true62, label %if.end107, !dbg !11835

land.lhs.true62:                                  ; preds = %land.lhs.true58
  %66 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !11836
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !11836
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !11836
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 0, !dbg !11836
  %rt_rtx66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.rtx_def**, !dbg !11836
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx66, align 8, !dbg !11836
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !11836
  %bf.load67 = load i32, i32* %68, align 8, !dbg !11836
  %bf.lshr68 = lshr i32 %bf.load67, 16, !dbg !11836
  %bf.clear69 = and i32 %bf.lshr68, 255, !dbg !11836
  %69 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11837
  %entry_parm70 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %69, i32 0, i32 2, !dbg !11837
  %70 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm70, align 8, !dbg !11837
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !11837
  %bf.load71 = load i32, i32* %71, align 8, !dbg !11837
  %bf.lshr72 = lshr i32 %bf.load71, 16, !dbg !11837
  %bf.clear73 = and i32 %bf.lshr72, 255, !dbg !11837
  %cmp74 = icmp eq i32 %bf.clear69, %bf.clear73, !dbg !11838
  br i1 %cmp74, label %land.lhs.true75, label %if.end107, !dbg !11839

land.lhs.true75:                                  ; preds = %land.lhs.true62
  %72 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !11840
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !11840
  %bf.load76 = load i32, i32* %73, align 8, !dbg !11840
  %bf.lshr77 = lshr i32 %bf.load76, 16, !dbg !11840
  %bf.clear78 = and i32 %bf.lshr77, 255, !dbg !11840
  %idxprom = zext i32 %bf.clear78 to i64, !dbg !11840
  %arrayidx79 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !11840
  %74 = load i8, i8* %arrayidx79, align 1, !dbg !11840
  %conv = zext i8 %74 to i16, !dbg !11840
  %conv80 = zext i16 %conv to i32, !dbg !11840
  %75 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11841
  %entry_parm81 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %75, i32 0, i32 2, !dbg !11841
  %76 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm81, align 8, !dbg !11841
  %77 = bitcast %struct.rtx_def* %76 to i32*, !dbg !11841
  %bf.load82 = load i32, i32* %77, align 8, !dbg !11841
  %bf.lshr83 = lshr i32 %bf.load82, 16, !dbg !11841
  %bf.clear84 = and i32 %bf.lshr83, 255, !dbg !11841
  %idxprom85 = zext i32 %bf.clear84 to i64, !dbg !11841
  %arrayidx86 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom85, !dbg !11841
  %78 = load i8, i8* %arrayidx86, align 1, !dbg !11841
  %conv87 = zext i8 %78 to i16, !dbg !11841
  %conv88 = zext i16 %conv87 to i32, !dbg !11841
  %cmp89 = icmp slt i32 %conv80, %conv88, !dbg !11842
  br i1 %cmp89, label %if.then91, label %if.end107, !dbg !11843

if.then91:                                        ; preds = %land.lhs.true75
  %79 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !11844
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !11844
  %bf.load92 = load i32, i32* %80, align 8, !dbg !11846
  %bf.clear93 = and i32 %bf.load92, -268435457, !dbg !11846
  %bf.set = or i32 %bf.clear93, 268435456, !dbg !11846
  store i32 %bf.set, i32* %80, align 8, !dbg !11846
  br label %do.body, !dbg !11847

do.body:                                          ; preds = %if.then91
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %_rtx, metadata !11848, metadata !DIExpression()), !dbg !11851
  %81 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !11851
  store %struct.rtx_def* %81, %struct.rtx_def** %_rtx, align 8, !dbg !11851
  %82 = load i32, i32* %unsignedp, align 4, !dbg !11852
  %cmp94 = icmp slt i32 %82, 0, !dbg !11852
  br i1 %cmp94, label %if.then96, label %if.else100, !dbg !11851

if.then96:                                        ; preds = %do.body
  %83 = load %struct.rtx_def*, %struct.rtx_def** %_rtx, align 8, !dbg !11852
  %84 = bitcast %struct.rtx_def* %83 to i32*, !dbg !11852
  %bf.load97 = load i32, i32* %84, align 8, !dbg !11852
  %bf.clear98 = and i32 %bf.load97, -134217729, !dbg !11852
  %bf.set99 = or i32 %bf.clear98, 134217728, !dbg !11852
  store i32 %bf.set99, i32* %84, align 8, !dbg !11852
  br label %if.end106, !dbg !11852

if.else100:                                       ; preds = %do.body
  %85 = load %struct.rtx_def*, %struct.rtx_def** %_rtx, align 8, !dbg !11854
  %86 = bitcast %struct.rtx_def* %85 to i32*, !dbg !11854
  %bf.load101 = load i32, i32* %86, align 8, !dbg !11854
  %bf.clear102 = and i32 %bf.load101, -134217729, !dbg !11854
  store i32 %bf.clear102, i32* %86, align 8, !dbg !11854
  %87 = load i32, i32* %unsignedp, align 4, !dbg !11854
  %88 = load %struct.rtx_def*, %struct.rtx_def** %_rtx, align 8, !dbg !11854
  %89 = bitcast %struct.rtx_def* %88 to i32*, !dbg !11854
  %bf.load103 = load i32, i32* %89, align 8, !dbg !11854
  %bf.value = and i32 %87, 1, !dbg !11854
  %bf.shl = shl i32 %bf.value, 26, !dbg !11854
  %bf.clear104 = and i32 %bf.load103, -67108865, !dbg !11854
  %bf.set105 = or i32 %bf.clear104, %bf.shl, !dbg !11854
  store i32 %bf.set105, i32* %89, align 8, !dbg !11854
  br label %if.end106

if.end106:                                        ; preds = %if.else100, %if.then96
  br label %do.end, !dbg !11851

do.end:                                           ; preds = %if.end106
  br label %if.end107, !dbg !11856

if.end107:                                        ; preds = %do.end, %land.lhs.true75, %land.lhs.true62, %land.lhs.true58, %land.lhs.true54, %land.lhs.true, %if.then36
  %90 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11857
  %base108 = bitcast %union.tree_node* %90 to %struct.tree_base*, !dbg !11857
  %91 = bitcast %struct.tree_base* %base108 to i64*, !dbg !11857
  %bf.load109 = load i64, i64* %91, align 8, !dbg !11857
  %bf.lshr110 = lshr i64 %bf.load109, 24, !dbg !11857
  %bf.clear111 = and i64 %bf.lshr110, 1, !dbg !11857
  %bf.cast112 = trunc i64 %bf.clear111 to i32, !dbg !11857
  store i32 %bf.cast112, i32* %save_tree_used, align 4, !dbg !11858
  %92 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11859
  %93 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11860
  %nominal_type113 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %93, i32 0, i32 0, !dbg !11861
  %94 = load %union.tree_node*, %union.tree_node** %nominal_type113, align 8, !dbg !11861
  %95 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !11862
  %call114 = call %union.tree_node* @make_tree(%union.tree_node* %94, %struct.rtx_def* %95), !dbg !11863
  call void @expand_assignment(%union.tree_node* %92, %union.tree_node* %call114, i8 zeroext 0), !dbg !11864
  %96 = load i32, i32* %save_tree_used, align 4, !dbg !11865
  %97 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11866
  %base115 = bitcast %union.tree_node* %97 to %struct.tree_base*, !dbg !11866
  %98 = bitcast %struct.tree_base* %base115 to i64*, !dbg !11866
  %99 = zext i32 %96 to i64, !dbg !11867
  %bf.load116 = load i64, i64* %98, align 8, !dbg !11867
  %bf.value117 = and i64 %99, 1, !dbg !11867
  %bf.shl118 = shl i64 %bf.value117, 24, !dbg !11867
  %bf.clear119 = and i64 %bf.load116, -16777217, !dbg !11867
  %bf.set120 = or i64 %bf.clear119, %bf.shl118, !dbg !11867
  store i64 %bf.set120, i64* %98, align 8, !dbg !11867
  %bf.result.cast = trunc i64 %bf.value117 to i32, !dbg !11867
  %call121 = call %struct.rtx_def* @get_insns(), !dbg !11868
  %100 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11869
  %first_conversion_insn122 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %100, i32 0, i32 4, !dbg !11870
  store %struct.rtx_def* %call121, %struct.rtx_def** %first_conversion_insn122, align 8, !dbg !11871
  %call123 = call %struct.rtx_def* @get_last_insn(), !dbg !11872
  %101 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11873
  %last_conversion_insn124 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %101, i32 0, i32 5, !dbg !11874
  store %struct.rtx_def* %call123, %struct.rtx_def** %last_conversion_insn124, align 8, !dbg !11875
  call void @end_sequence(), !dbg !11876
  store i8 1, i8* %did_conversion, align 1, !dbg !11877
  br label %if.end129, !dbg !11878

if.else125:                                       ; preds = %lor.lhs.false
  %102 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11879
  %103 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11880
  %entry_parm126 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %103, i32 0, i32 2, !dbg !11881
  %104 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm126, align 8, !dbg !11881
  %call127 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %104), !dbg !11882
  %call128 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %102, %struct.rtx_def* %call127), !dbg !11883
  br label %if.end129

if.end129:                                        ; preds = %if.else125, %if.end107
  %105 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11884
  %passed_pointer130 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %105, i32 0, i32 9, !dbg !11886
  %bf.load131 = load i8, i8* %passed_pointer130, align 4, !dbg !11886
  %bf.lshr132 = lshr i8 %bf.load131, 1, !dbg !11886
  %bf.clear133 = and i8 %bf.lshr132, 1, !dbg !11886
  %bf.cast134 = zext i8 %bf.clear133 to i32, !dbg !11886
  %tobool135 = icmp ne i32 %bf.cast134, 0, !dbg !11884
  br i1 %tobool135, label %land.lhs.true136, label %if.end306, !dbg !11887

land.lhs.true136:                                 ; preds = %if.end129
  %106 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11888
  %common137 = bitcast %union.tree_node* %106 to %struct.tree_common*, !dbg !11888
  %type138 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common137, i32 0, i32 2, !dbg !11888
  %107 = load %union.tree_node*, %union.tree_node** %type138, align 8, !dbg !11888
  %base139 = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !11888
  %108 = bitcast %struct.tree_base* %base139 to i64*, !dbg !11888
  %bf.load140 = load i64, i64* %108, align 8, !dbg !11888
  %bf.clear141 = and i64 %bf.load140, 65535, !dbg !11888
  %bf.cast142 = trunc i64 %bf.clear141 to i32, !dbg !11888
  %cmp143 = icmp eq i32 %bf.cast142, 14, !dbg !11888
  br i1 %cmp143, label %cond.true145, label %cond.false149, !dbg !11888

cond.true145:                                     ; preds = %land.lhs.true136
  %109 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11888
  %common146 = bitcast %union.tree_node* %109 to %struct.tree_common*, !dbg !11888
  %type147 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common146, i32 0, i32 2, !dbg !11888
  %110 = load %union.tree_node*, %union.tree_node** %type147, align 8, !dbg !11888
  %call148 = call i32 @vector_type_mode(%union.tree_node* %110), !dbg !11888
  br label %cond.end157, !dbg !11888

cond.false149:                                    ; preds = %land.lhs.true136
  %111 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11888
  %common150 = bitcast %union.tree_node* %111 to %struct.tree_common*, !dbg !11888
  %type151 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common150, i32 0, i32 2, !dbg !11888
  %112 = load %union.tree_node*, %union.tree_node** %type151, align 8, !dbg !11888
  %type152 = bitcast %union.tree_node* %112 to %struct.tree_type*, !dbg !11888
  %mode153 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type152, i32 0, i32 6, !dbg !11888
  %bf.load154 = load i32, i32* %mode153, align 4, !dbg !11888
  %bf.lshr155 = lshr i32 %bf.load154, 16, !dbg !11888
  %bf.clear156 = and i32 %bf.lshr155, 255, !dbg !11888
  br label %cond.end157, !dbg !11888

cond.end157:                                      ; preds = %cond.false149, %cond.true145
  %cond158 = phi i32 [ %call148, %cond.true145 ], [ %bf.clear156, %cond.false149 ], !dbg !11888
  %cmp159 = icmp ne i32 %cond158, 1, !dbg !11889
  br i1 %cmp159, label %land.lhs.true161, label %if.end306, !dbg !11890

land.lhs.true161:                                 ; preds = %cond.end157
  %113 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11891
  %common162 = bitcast %union.tree_node* %113 to %struct.tree_common*, !dbg !11891
  %type163 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common162, i32 0, i32 2, !dbg !11891
  %114 = load %union.tree_node*, %union.tree_node** %type163, align 8, !dbg !11891
  %base164 = bitcast %union.tree_node* %114 to %struct.tree_base*, !dbg !11891
  %115 = bitcast %struct.tree_base* %base164 to i64*, !dbg !11891
  %bf.load165 = load i64, i64* %115, align 8, !dbg !11891
  %bf.clear166 = and i64 %bf.load165, 65535, !dbg !11891
  %bf.cast167 = trunc i64 %bf.clear166 to i32, !dbg !11891
  %cmp168 = icmp eq i32 %bf.cast167, 14, !dbg !11891
  br i1 %cmp168, label %cond.true170, label %cond.false174, !dbg !11891

cond.true170:                                     ; preds = %land.lhs.true161
  %116 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11891
  %common171 = bitcast %union.tree_node* %116 to %struct.tree_common*, !dbg !11891
  %type172 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common171, i32 0, i32 2, !dbg !11891
  %117 = load %union.tree_node*, %union.tree_node** %type172, align 8, !dbg !11891
  %call173 = call i32 @vector_type_mode(%union.tree_node* %117), !dbg !11891
  br label %cond.end182, !dbg !11891

cond.false174:                                    ; preds = %land.lhs.true161
  %118 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11891
  %common175 = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !11891
  %type176 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common175, i32 0, i32 2, !dbg !11891
  %119 = load %union.tree_node*, %union.tree_node** %type176, align 8, !dbg !11891
  %type177 = bitcast %union.tree_node* %119 to %struct.tree_type*, !dbg !11891
  %mode178 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type177, i32 0, i32 6, !dbg !11891
  %bf.load179 = load i32, i32* %mode178, align 4, !dbg !11891
  %bf.lshr180 = lshr i32 %bf.load179, 16, !dbg !11891
  %bf.clear181 = and i32 %bf.lshr180, 255, !dbg !11891
  br label %cond.end182, !dbg !11891

cond.end182:                                      ; preds = %cond.false174, %cond.true170
  %cond183 = phi i32 [ %call173, %cond.true170 ], [ %bf.clear181, %cond.false174 ], !dbg !11891
  %120 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11892
  %decl_with_rtl = bitcast %union.tree_node* %120 to %struct.tree_decl_with_rtl*, !dbg !11892
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !11892
  %121 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !11892
  %tobool184 = icmp ne %struct.rtx_def* %121, null, !dbg !11892
  br i1 %tobool184, label %cond.true185, label %cond.false188, !dbg !11892

cond.true185:                                     ; preds = %cond.end182
  %122 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11892
  %decl_with_rtl186 = bitcast %union.tree_node* %122 to %struct.tree_decl_with_rtl*, !dbg !11892
  %rtl187 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl186, i32 0, i32 1, !dbg !11892
  %123 = load %struct.rtx_def*, %struct.rtx_def** %rtl187, align 8, !dbg !11892
  br label %cond.end191, !dbg !11892

cond.false188:                                    ; preds = %cond.end182
  %124 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11892
  call void @make_decl_rtl(%union.tree_node* %124), !dbg !11892
  %125 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11892
  %decl_with_rtl189 = bitcast %union.tree_node* %125 to %struct.tree_decl_with_rtl*, !dbg !11892
  %rtl190 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl189, i32 0, i32 1, !dbg !11892
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rtl190, align 8, !dbg !11892
  br label %cond.end191, !dbg !11892

cond.end191:                                      ; preds = %cond.false188, %cond.true185
  %cond192 = phi %struct.rtx_def* [ %123, %cond.true185 ], [ %126, %cond.false188 ], !dbg !11892
  %127 = bitcast %struct.rtx_def* %cond192 to i32*, !dbg !11892
  %bf.load193 = load i32, i32* %127, align 8, !dbg !11892
  %bf.lshr194 = lshr i32 %bf.load193, 16, !dbg !11892
  %bf.clear195 = and i32 %bf.lshr194, 255, !dbg !11892
  %cmp196 = icmp ne i32 %cond183, %bf.clear195, !dbg !11893
  br i1 %cmp196, label %if.then202, label %lor.lhs.false198, !dbg !11894

lor.lhs.false198:                                 ; preds = %cond.end191
  %128 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11895
  %call199 = call zeroext i8 @use_register_for_decl(%union.tree_node* %128), !dbg !11896
  %conv200 = zext i8 %call199 to i32, !dbg !11896
  %tobool201 = icmp ne i32 %conv200, 0, !dbg !11896
  br i1 %tobool201, label %if.then202, label %if.end306, !dbg !11897

if.then202:                                       ; preds = %lor.lhs.false198, %cond.end191
  %129 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11898
  %common203 = bitcast %union.tree_node* %129 to %struct.tree_common*, !dbg !11898
  %type204 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common203, i32 0, i32 2, !dbg !11898
  %130 = load %union.tree_node*, %union.tree_node** %type204, align 8, !dbg !11898
  %base205 = bitcast %union.tree_node* %130 to %struct.tree_base*, !dbg !11898
  %131 = bitcast %struct.tree_base* %base205 to i64*, !dbg !11898
  %bf.load206 = load i64, i64* %131, align 8, !dbg !11898
  %bf.clear207 = and i64 %bf.load206, 65535, !dbg !11898
  %bf.cast208 = trunc i64 %bf.clear207 to i32, !dbg !11898
  %cmp209 = icmp eq i32 %bf.cast208, 14, !dbg !11898
  br i1 %cmp209, label %cond.true211, label %cond.false215, !dbg !11898

cond.true211:                                     ; preds = %if.then202
  %132 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11898
  %common212 = bitcast %union.tree_node* %132 to %struct.tree_common*, !dbg !11898
  %type213 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common212, i32 0, i32 2, !dbg !11898
  %133 = load %union.tree_node*, %union.tree_node** %type213, align 8, !dbg !11898
  %call214 = call i32 @vector_type_mode(%union.tree_node* %133), !dbg !11898
  br label %cond.end223, !dbg !11898

cond.false215:                                    ; preds = %if.then202
  %134 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11898
  %common216 = bitcast %union.tree_node* %134 to %struct.tree_common*, !dbg !11898
  %type217 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common216, i32 0, i32 2, !dbg !11898
  %135 = load %union.tree_node*, %union.tree_node** %type217, align 8, !dbg !11898
  %type218 = bitcast %union.tree_node* %135 to %struct.tree_type*, !dbg !11898
  %mode219 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type218, i32 0, i32 6, !dbg !11898
  %bf.load220 = load i32, i32* %mode219, align 4, !dbg !11898
  %bf.lshr221 = lshr i32 %bf.load220, 16, !dbg !11898
  %bf.clear222 = and i32 %bf.lshr221, 255, !dbg !11898
  br label %cond.end223, !dbg !11898

cond.end223:                                      ; preds = %cond.false215, %cond.true211
  %cond224 = phi i32 [ %call214, %cond.true211 ], [ %bf.clear222, %cond.false215 ], !dbg !11898
  %call225 = call %struct.rtx_def* @gen_reg_rtx(i32 %cond224), !dbg !11900
  store %struct.rtx_def* %call225, %struct.rtx_def** %parmreg, align 8, !dbg !11901
  %136 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11902
  call void @mark_user_reg(%struct.rtx_def* %136), !dbg !11903
  %137 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11904
  %138 = bitcast %struct.rtx_def* %137 to i32*, !dbg !11904
  %bf.load226 = load i32, i32* %138, align 8, !dbg !11904
  %bf.lshr227 = lshr i32 %bf.load226, 16, !dbg !11904
  %bf.clear228 = and i32 %bf.lshr227, 255, !dbg !11904
  %139 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11906
  %decl_with_rtl229 = bitcast %union.tree_node* %139 to %struct.tree_decl_with_rtl*, !dbg !11906
  %rtl230 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl229, i32 0, i32 1, !dbg !11906
  %140 = load %struct.rtx_def*, %struct.rtx_def** %rtl230, align 8, !dbg !11906
  %tobool231 = icmp ne %struct.rtx_def* %140, null, !dbg !11906
  br i1 %tobool231, label %cond.true232, label %cond.false235, !dbg !11906

cond.true232:                                     ; preds = %cond.end223
  %141 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11906
  %decl_with_rtl233 = bitcast %union.tree_node* %141 to %struct.tree_decl_with_rtl*, !dbg !11906
  %rtl234 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl233, i32 0, i32 1, !dbg !11906
  %142 = load %struct.rtx_def*, %struct.rtx_def** %rtl234, align 8, !dbg !11906
  br label %cond.end238, !dbg !11906

cond.false235:                                    ; preds = %cond.end223
  %143 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11906
  call void @make_decl_rtl(%union.tree_node* %143), !dbg !11906
  %144 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11906
  %decl_with_rtl236 = bitcast %union.tree_node* %144 to %struct.tree_decl_with_rtl*, !dbg !11906
  %rtl237 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl236, i32 0, i32 1, !dbg !11906
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rtl237, align 8, !dbg !11906
  br label %cond.end238, !dbg !11906

cond.end238:                                      ; preds = %cond.false235, %cond.true232
  %cond239 = phi %struct.rtx_def* [ %142, %cond.true232 ], [ %145, %cond.false235 ], !dbg !11906
  %146 = bitcast %struct.rtx_def* %cond239 to i32*, !dbg !11906
  %bf.load240 = load i32, i32* %146, align 8, !dbg !11906
  %bf.lshr241 = lshr i32 %bf.load240, 16, !dbg !11906
  %bf.clear242 = and i32 %bf.lshr241, 255, !dbg !11906
  %cmp243 = icmp ne i32 %bf.clear228, %bf.clear242, !dbg !11907
  br i1 %cmp243, label %if.then245, label %if.else292, !dbg !11908

if.then245:                                       ; preds = %cond.end238
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tempreg246, metadata !11909, metadata !DIExpression()), !dbg !11911
  %147 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11912
  %decl_with_rtl247 = bitcast %union.tree_node* %147 to %struct.tree_decl_with_rtl*, !dbg !11912
  %rtl248 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl247, i32 0, i32 1, !dbg !11912
  %148 = load %struct.rtx_def*, %struct.rtx_def** %rtl248, align 8, !dbg !11912
  %tobool249 = icmp ne %struct.rtx_def* %148, null, !dbg !11912
  br i1 %tobool249, label %cond.true250, label %cond.false253, !dbg !11912

cond.true250:                                     ; preds = %if.then245
  %149 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11912
  %decl_with_rtl251 = bitcast %union.tree_node* %149 to %struct.tree_decl_with_rtl*, !dbg !11912
  %rtl252 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl251, i32 0, i32 1, !dbg !11912
  %150 = load %struct.rtx_def*, %struct.rtx_def** %rtl252, align 8, !dbg !11912
  br label %cond.end256, !dbg !11912

cond.false253:                                    ; preds = %if.then245
  %151 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11912
  call void @make_decl_rtl(%union.tree_node* %151), !dbg !11912
  %152 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11912
  %decl_with_rtl254 = bitcast %union.tree_node* %152 to %struct.tree_decl_with_rtl*, !dbg !11912
  %rtl255 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl254, i32 0, i32 1, !dbg !11912
  %153 = load %struct.rtx_def*, %struct.rtx_def** %rtl255, align 8, !dbg !11912
  br label %cond.end256, !dbg !11912

cond.end256:                                      ; preds = %cond.false253, %cond.true250
  %cond257 = phi %struct.rtx_def* [ %150, %cond.true250 ], [ %153, %cond.false253 ], !dbg !11912
  %154 = bitcast %struct.rtx_def* %cond257 to i32*, !dbg !11912
  %bf.load258 = load i32, i32* %154, align 8, !dbg !11912
  %bf.lshr259 = lshr i32 %bf.load258, 16, !dbg !11912
  %bf.clear260 = and i32 %bf.lshr259, 255, !dbg !11912
  %call261 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear260), !dbg !11913
  store %struct.rtx_def* %call261, %struct.rtx_def** %tempreg246, align 8, !dbg !11911
  call void @llvm.dbg.declare(metadata i32* %unsigned_p, metadata !11914, metadata !DIExpression()), !dbg !11915
  %155 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11916
  %common262 = bitcast %union.tree_node* %155 to %struct.tree_common*, !dbg !11916
  %type263 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common262, i32 0, i32 2, !dbg !11916
  %156 = load %union.tree_node*, %union.tree_node** %type263, align 8, !dbg !11916
  %base264 = bitcast %union.tree_node* %156 to %struct.tree_base*, !dbg !11916
  %157 = bitcast %struct.tree_base* %base264 to i64*, !dbg !11916
  %bf.load265 = load i64, i64* %157, align 8, !dbg !11916
  %bf.lshr266 = lshr i64 %bf.load265, 21, !dbg !11916
  %bf.clear267 = and i64 %bf.lshr266, 1, !dbg !11916
  %bf.cast268 = trunc i64 %bf.clear267 to i32, !dbg !11916
  store i32 %bf.cast268, i32* %unsigned_p, align 4, !dbg !11915
  %158 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11917
  %first_conversion_insn269 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %158, i32 0, i32 4, !dbg !11918
  %159 = load %struct.rtx_def*, %struct.rtx_def** %first_conversion_insn269, align 8, !dbg !11918
  %160 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11919
  %last_conversion_insn270 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %160, i32 0, i32 5, !dbg !11920
  %161 = load %struct.rtx_def*, %struct.rtx_def** %last_conversion_insn270, align 8, !dbg !11920
  call void @push_to_sequence2(%struct.rtx_def* %159, %struct.rtx_def* %161), !dbg !11921
  %162 = load %struct.rtx_def*, %struct.rtx_def** %tempreg246, align 8, !dbg !11922
  %163 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11923
  %decl_with_rtl271 = bitcast %union.tree_node* %163 to %struct.tree_decl_with_rtl*, !dbg !11923
  %rtl272 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl271, i32 0, i32 1, !dbg !11923
  %164 = load %struct.rtx_def*, %struct.rtx_def** %rtl272, align 8, !dbg !11923
  %tobool273 = icmp ne %struct.rtx_def* %164, null, !dbg !11923
  br i1 %tobool273, label %cond.true274, label %cond.false277, !dbg !11923

cond.true274:                                     ; preds = %cond.end256
  %165 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11923
  %decl_with_rtl275 = bitcast %union.tree_node* %165 to %struct.tree_decl_with_rtl*, !dbg !11923
  %rtl276 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl275, i32 0, i32 1, !dbg !11923
  %166 = load %struct.rtx_def*, %struct.rtx_def** %rtl276, align 8, !dbg !11923
  br label %cond.end280, !dbg !11923

cond.false277:                                    ; preds = %cond.end256
  %167 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11923
  call void @make_decl_rtl(%union.tree_node* %167), !dbg !11923
  %168 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11923
  %decl_with_rtl278 = bitcast %union.tree_node* %168 to %struct.tree_decl_with_rtl*, !dbg !11923
  %rtl279 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl278, i32 0, i32 1, !dbg !11923
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rtl279, align 8, !dbg !11923
  br label %cond.end280, !dbg !11923

cond.end280:                                      ; preds = %cond.false277, %cond.true274
  %cond281 = phi %struct.rtx_def* [ %166, %cond.true274 ], [ %169, %cond.false277 ], !dbg !11923
  %call282 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %162, %struct.rtx_def* %cond281), !dbg !11924
  %170 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11925
  %171 = bitcast %struct.rtx_def* %170 to i32*, !dbg !11925
  %bf.load283 = load i32, i32* %171, align 8, !dbg !11925
  %bf.lshr284 = lshr i32 %bf.load283, 16, !dbg !11925
  %bf.clear285 = and i32 %bf.lshr284, 255, !dbg !11925
  %172 = load %struct.rtx_def*, %struct.rtx_def** %tempreg246, align 8, !dbg !11926
  %173 = load i32, i32* %unsigned_p, align 4, !dbg !11927
  %call286 = call %struct.rtx_def* @convert_to_mode(i32 %bf.clear285, %struct.rtx_def* %172, i32 %173), !dbg !11928
  store %struct.rtx_def* %call286, %struct.rtx_def** %tempreg246, align 8, !dbg !11929
  %174 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11930
  %175 = load %struct.rtx_def*, %struct.rtx_def** %tempreg246, align 8, !dbg !11931
  %call287 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %174, %struct.rtx_def* %175), !dbg !11932
  %call288 = call %struct.rtx_def* @get_insns(), !dbg !11933
  %176 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11934
  %first_conversion_insn289 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %176, i32 0, i32 4, !dbg !11935
  store %struct.rtx_def* %call288, %struct.rtx_def** %first_conversion_insn289, align 8, !dbg !11936
  %call290 = call %struct.rtx_def* @get_last_insn(), !dbg !11937
  %177 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !11938
  %last_conversion_insn291 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %177, i32 0, i32 5, !dbg !11939
  store %struct.rtx_def* %call290, %struct.rtx_def** %last_conversion_insn291, align 8, !dbg !11940
  call void @end_sequence(), !dbg !11941
  store i8 1, i8* %did_conversion, align 1, !dbg !11942
  br label %if.end305, !dbg !11943

if.else292:                                       ; preds = %cond.end238
  %178 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11944
  %179 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11945
  %decl_with_rtl293 = bitcast %union.tree_node* %179 to %struct.tree_decl_with_rtl*, !dbg !11945
  %rtl294 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl293, i32 0, i32 1, !dbg !11945
  %180 = load %struct.rtx_def*, %struct.rtx_def** %rtl294, align 8, !dbg !11945
  %tobool295 = icmp ne %struct.rtx_def* %180, null, !dbg !11945
  br i1 %tobool295, label %cond.true296, label %cond.false299, !dbg !11945

cond.true296:                                     ; preds = %if.else292
  %181 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11945
  %decl_with_rtl297 = bitcast %union.tree_node* %181 to %struct.tree_decl_with_rtl*, !dbg !11945
  %rtl298 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl297, i32 0, i32 1, !dbg !11945
  %182 = load %struct.rtx_def*, %struct.rtx_def** %rtl298, align 8, !dbg !11945
  br label %cond.end302, !dbg !11945

cond.false299:                                    ; preds = %if.else292
  %183 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11945
  call void @make_decl_rtl(%union.tree_node* %183), !dbg !11945
  %184 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11945
  %decl_with_rtl300 = bitcast %union.tree_node* %184 to %struct.tree_decl_with_rtl*, !dbg !11945
  %rtl301 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl300, i32 0, i32 1, !dbg !11945
  %185 = load %struct.rtx_def*, %struct.rtx_def** %rtl301, align 8, !dbg !11945
  br label %cond.end302, !dbg !11945

cond.end302:                                      ; preds = %cond.false299, %cond.true296
  %cond303 = phi %struct.rtx_def* [ %182, %cond.true296 ], [ %185, %cond.false299 ], !dbg !11945
  %call304 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %178, %struct.rtx_def* %cond303), !dbg !11946
  br label %if.end305

if.end305:                                        ; preds = %cond.end302, %cond.end280
  %186 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !11947
  %187 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11947
  call void @set_decl_rtl(%union.tree_node* %186, %struct.rtx_def* %187), !dbg !11947
  %188 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11948
  %stack_parm = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %188, i32 0, i32 3, !dbg !11949
  store %struct.rtx_def* null, %struct.rtx_def** %stack_parm, align 8, !dbg !11950
  br label %if.end306, !dbg !11951

if.end306:                                        ; preds = %if.end305, %lor.lhs.false198, %cond.end157, %if.end129
  %189 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11952
  %nominal_mode307 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %189, i32 0, i32 4, !dbg !11954
  %190 = load i32, i32* %nominal_mode307, align 8, !dbg !11954
  %191 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11955
  %passed_mode308 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %191, i32 0, i32 5, !dbg !11956
  %192 = load i32, i32* %passed_mode308, align 4, !dbg !11956
  %cmp309 = icmp eq i32 %190, %192, !dbg !11957
  br i1 %cmp309, label %land.lhs.true311, label %if.end498, !dbg !11958

land.lhs.true311:                                 ; preds = %if.end306
  %193 = load i8, i8* %did_conversion, align 1, !dbg !11959
  %tobool312 = icmp ne i8 %193, 0, !dbg !11959
  br i1 %tobool312, label %if.end498, label %land.lhs.true313, !dbg !11960

land.lhs.true313:                                 ; preds = %land.lhs.true311
  %194 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11961
  %stack_parm314 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %194, i32 0, i32 3, !dbg !11962
  %195 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm314, align 8, !dbg !11962
  %cmp315 = icmp ne %struct.rtx_def* %195, null, !dbg !11963
  br i1 %cmp315, label %land.lhs.true317, label %if.end498, !dbg !11964

land.lhs.true317:                                 ; preds = %land.lhs.true313
  %196 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11965
  %stack_parm318 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %196, i32 0, i32 3, !dbg !11965
  %197 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm318, align 8, !dbg !11965
  %198 = bitcast %struct.rtx_def* %197 to i32*, !dbg !11965
  %bf.load319 = load i32, i32* %198, align 8, !dbg !11965
  %bf.clear320 = and i32 %bf.load319, 65535, !dbg !11965
  %cmp321 = icmp eq i32 %bf.clear320, 43, !dbg !11965
  br i1 %cmp321, label %land.lhs.true323, label %if.end498, !dbg !11966

land.lhs.true323:                                 ; preds = %land.lhs.true317
  %199 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11967
  %locate = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %199, i32 0, i32 7, !dbg !11968
  %offset = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate, i32 0, i32 1, !dbg !11969
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %offset, i32 0, i32 1, !dbg !11970
  %200 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !11970
  %cmp324 = icmp eq %union.tree_node* %200, null, !dbg !11971
  br i1 %cmp324, label %land.lhs.true326, label %if.end498, !dbg !11972

land.lhs.true326:                                 ; preds = %land.lhs.true323
  %201 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 6), align 16, !dbg !11973
  %202 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !11974
  %stack_parm327 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %202, i32 0, i32 3, !dbg !11974
  %203 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm327, align 8, !dbg !11974
  %u328 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %203, i32 0, i32 1, !dbg !11974
  %fld329 = bitcast %union.u* %u328 to [1 x %union.rtunion_def]*, !dbg !11974
  %arrayidx330 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld329, i64 0, i64 0, !dbg !11974
  %rt_rtx331 = bitcast %union.rtunion_def* %arrayidx330 to %struct.rtx_def**, !dbg !11974
  %204 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx331, align 8, !dbg !11974
  %call332 = call i32 @reg_mentioned_p(%struct.rtx_def* %201, %struct.rtx_def* %204), !dbg !11975
  %tobool333 = icmp ne i32 %call332, 0, !dbg !11975
  br i1 %tobool333, label %if.then334, label %if.end498, !dbg !11976

if.then334:                                       ; preds = %land.lhs.true326
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %linsn, metadata !11977, metadata !DIExpression()), !dbg !11979
  %call335 = call %struct.rtx_def* @get_last_insn(), !dbg !11980
  store %struct.rtx_def* %call335, %struct.rtx_def** %linsn, align 8, !dbg !11979
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sinsn, metadata !11981, metadata !DIExpression()), !dbg !11982
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !11983, metadata !DIExpression()), !dbg !11984
  %205 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11985
  %206 = bitcast %struct.rtx_def* %205 to i32*, !dbg !11985
  %bf.load336 = load i32, i32* %206, align 8, !dbg !11985
  %bf.clear337 = and i32 %bf.load336, 65535, !dbg !11985
  %cmp338 = icmp eq i32 %bf.clear337, 41, !dbg !11987
  br i1 %cmp338, label %if.then340, label %if.else439, !dbg !11988

if.then340:                                       ; preds = %if.then334
  call void @llvm.dbg.declare(metadata i32* %submode, metadata !11989, metadata !DIExpression()), !dbg !11991
  %207 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11992
  %208 = bitcast %struct.rtx_def* %207 to i32*, !dbg !11992
  %bf.load341 = load i32, i32* %208, align 8, !dbg !11992
  %bf.lshr342 = lshr i32 %bf.load341, 16, !dbg !11992
  %bf.clear343 = and i32 %bf.lshr342, 255, !dbg !11992
  %idxprom344 = zext i32 %bf.clear343 to i64, !dbg !11992
  %arrayidx345 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom344, !dbg !11992
  %209 = load i8, i8* %arrayidx345, align 1, !dbg !11992
  %conv346 = zext i8 %209 to i32, !dbg !11992
  store i32 %conv346, i32* %submode, align 4, !dbg !11991
  call void @llvm.dbg.declare(metadata i32* %regnor, metadata !11993, metadata !DIExpression()), !dbg !11994
  %210 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11995
  %u347 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %210, i32 0, i32 1, !dbg !11995
  %fld348 = bitcast %union.u* %u347 to [1 x %union.rtunion_def]*, !dbg !11995
  %arrayidx349 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld348, i64 0, i64 0, !dbg !11995
  %rt_rtx350 = bitcast %union.rtunion_def* %arrayidx349 to %struct.rtx_def**, !dbg !11995
  %211 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx350, align 8, !dbg !11995
  %call351 = call i32 @rhs_regno(%struct.rtx_def* %211), !dbg !11995
  store i32 %call351, i32* %regnor, align 4, !dbg !11994
  call void @llvm.dbg.declare(metadata i32* %regnoi, metadata !11996, metadata !DIExpression()), !dbg !11997
  %212 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !11998
  %u352 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %212, i32 0, i32 1, !dbg !11998
  %fld353 = bitcast %union.u* %u352 to [1 x %union.rtunion_def]*, !dbg !11998
  %arrayidx354 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld353, i64 0, i64 1, !dbg !11998
  %rt_rtx355 = bitcast %union.rtunion_def* %arrayidx354 to %struct.rtx_def**, !dbg !11998
  %213 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx355, align 8, !dbg !11998
  %call356 = call i32 @rhs_regno(%struct.rtx_def* %213), !dbg !11998
  store i32 %call356, i32* %regnoi, align 4, !dbg !11997
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stackr, metadata !11999, metadata !DIExpression()), !dbg !12000
  %214 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12001
  %stack_parm357 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %214, i32 0, i32 3, !dbg !12001
  %215 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm357, align 8, !dbg !12001
  %216 = load i32, i32* %submode, align 4, !dbg !12001
  %call358 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %215, i32 %216, i64 0, i32 0, i32 1), !dbg !12001
  store %struct.rtx_def* %call358, %struct.rtx_def** %stackr, align 8, !dbg !12000
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stacki, metadata !12002, metadata !DIExpression()), !dbg !12003
  %217 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12004
  %stack_parm359 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %217, i32 0, i32 3, !dbg !12004
  %218 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm359, align 8, !dbg !12004
  %219 = load i32, i32* %submode, align 4, !dbg !12004
  %220 = load i32, i32* %submode, align 4, !dbg !12004
  %idxprom360 = zext i32 %220 to i64, !dbg !12004
  %arrayidx361 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom360, !dbg !12004
  %221 = load i8, i8* %arrayidx361, align 1, !dbg !12004
  %conv362 = zext i8 %221 to i16, !dbg !12004
  %conv363 = zext i16 %conv362 to i64, !dbg !12004
  %call364 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %218, i32 %219, i64 %conv363, i32 0, i32 1), !dbg !12004
  store %struct.rtx_def* %call364, %struct.rtx_def** %stacki, align 8, !dbg !12003
  %222 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8, !dbg !12005
  store %struct.rtx_def* %222, %struct.rtx_def** %sinsn, align 8, !dbg !12007
  br label %for.cond, !dbg !12008

for.cond:                                         ; preds = %for.inc, %if.then340
  %223 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12009
  %cmp365 = icmp ne %struct.rtx_def* %223, null, !dbg !12011
  br i1 %cmp365, label %for.body, label %for.end, !dbg !12012

for.body:                                         ; preds = %for.cond
  %224 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12013
  %225 = bitcast %struct.rtx_def* %224 to i32*, !dbg !12013
  %bf.load367 = load i32, i32* %225, align 8, !dbg !12013
  %bf.clear368 = and i32 %bf.load367, 65535, !dbg !12013
  %cmp369 = icmp eq i32 %bf.clear368, 8, !dbg !12013
  br i1 %cmp369, label %cond.true386, label %lor.lhs.false371, !dbg !12013

lor.lhs.false371:                                 ; preds = %for.body
  %226 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12013
  %227 = bitcast %struct.rtx_def* %226 to i32*, !dbg !12013
  %bf.load372 = load i32, i32* %227, align 8, !dbg !12013
  %bf.clear373 = and i32 %bf.load372, 65535, !dbg !12013
  %cmp374 = icmp eq i32 %bf.clear373, 7, !dbg !12013
  br i1 %cmp374, label %cond.true386, label %lor.lhs.false376, !dbg !12013

lor.lhs.false376:                                 ; preds = %lor.lhs.false371
  %228 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12013
  %229 = bitcast %struct.rtx_def* %228 to i32*, !dbg !12013
  %bf.load377 = load i32, i32* %229, align 8, !dbg !12013
  %bf.clear378 = and i32 %bf.load377, 65535, !dbg !12013
  %cmp379 = icmp eq i32 %bf.clear378, 9, !dbg !12013
  br i1 %cmp379, label %cond.true386, label %lor.lhs.false381, !dbg !12013

lor.lhs.false381:                                 ; preds = %lor.lhs.false376
  %230 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12013
  %231 = bitcast %struct.rtx_def* %230 to i32*, !dbg !12013
  %bf.load382 = load i32, i32* %231, align 8, !dbg !12013
  %bf.clear383 = and i32 %bf.load382, 65535, !dbg !12013
  %cmp384 = icmp eq i32 %bf.clear383, 10, !dbg !12013
  br i1 %cmp384, label %cond.true386, label %cond.false408, !dbg !12013

cond.true386:                                     ; preds = %lor.lhs.false381, %lor.lhs.false376, %lor.lhs.false371, %for.body
  %232 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12013
  %u387 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %232, i32 0, i32 1, !dbg !12013
  %fld388 = bitcast %union.u* %u387 to [1 x %union.rtunion_def]*, !dbg !12013
  %arrayidx389 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld388, i64 0, i64 5, !dbg !12013
  %rt_rtx390 = bitcast %union.rtunion_def* %arrayidx389 to %struct.rtx_def**, !dbg !12013
  %233 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx390, align 8, !dbg !12013
  %234 = bitcast %struct.rtx_def* %233 to i32*, !dbg !12013
  %bf.load391 = load i32, i32* %234, align 8, !dbg !12013
  %bf.clear392 = and i32 %bf.load391, 65535, !dbg !12013
  %cmp393 = icmp eq i32 %bf.clear392, 23, !dbg !12013
  br i1 %cmp393, label %cond.true395, label %cond.false400, !dbg !12013

cond.true395:                                     ; preds = %cond.true386
  %235 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12013
  %u396 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %235, i32 0, i32 1, !dbg !12013
  %fld397 = bitcast %union.u* %u396 to [1 x %union.rtunion_def]*, !dbg !12013
  %arrayidx398 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld397, i64 0, i64 5, !dbg !12013
  %rt_rtx399 = bitcast %union.rtunion_def* %arrayidx398 to %struct.rtx_def**, !dbg !12013
  %236 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx399, align 8, !dbg !12013
  br label %cond.end406, !dbg !12013

cond.false400:                                    ; preds = %cond.true386
  %237 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12013
  %238 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12013
  %u401 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %238, i32 0, i32 1, !dbg !12013
  %fld402 = bitcast %union.u* %u401 to [1 x %union.rtunion_def]*, !dbg !12013
  %arrayidx403 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld402, i64 0, i64 5, !dbg !12013
  %rt_rtx404 = bitcast %union.rtunion_def* %arrayidx403 to %struct.rtx_def**, !dbg !12013
  %239 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx404, align 8, !dbg !12013
  %call405 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %237, %struct.rtx_def* %239), !dbg !12013
  br label %cond.end406, !dbg !12013

cond.end406:                                      ; preds = %cond.false400, %cond.true395
  %cond407 = phi %struct.rtx_def* [ %236, %cond.true395 ], [ %call405, %cond.false400 ], !dbg !12013
  br label %cond.end409, !dbg !12013

cond.false408:                                    ; preds = %lor.lhs.false381
  br label %cond.end409, !dbg !12013

cond.end409:                                      ; preds = %cond.false408, %cond.end406
  %cond410 = phi %struct.rtx_def* [ %cond407, %cond.end406 ], [ null, %cond.false408 ], !dbg !12013
  store %struct.rtx_def* %cond410, %struct.rtx_def** %set, align 8, !dbg !12015
  %240 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !12016
  %cmp411 = icmp eq %struct.rtx_def* %240, null, !dbg !12018
  br i1 %cmp411, label %if.then413, label %if.end414, !dbg !12019

if.then413:                                       ; preds = %cond.end409
  br label %for.inc, !dbg !12020

if.end414:                                        ; preds = %cond.end409
  %241 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !12021
  %u415 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %241, i32 0, i32 1, !dbg !12021
  %fld416 = bitcast %union.u* %u415 to [1 x %union.rtunion_def]*, !dbg !12021
  %arrayidx417 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld416, i64 0, i64 0, !dbg !12021
  %rt_rtx418 = bitcast %union.rtunion_def* %arrayidx417 to %struct.rtx_def**, !dbg !12021
  %242 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx418, align 8, !dbg !12021
  %243 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !12023
  %244 = load i32, i32* %regnoi, align 4, !dbg !12024
  %idxprom419 = sext i32 %244 to i64, !dbg !12023
  %arrayidx420 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %243, i64 %idxprom419, !dbg !12023
  %245 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx420, align 8, !dbg !12023
  %cmp421 = icmp eq %struct.rtx_def* %242, %245, !dbg !12025
  br i1 %cmp421, label %if.then423, label %if.else425, !dbg !12026

if.then423:                                       ; preds = %if.end414
  %246 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12027
  %247 = load %struct.rtx_def*, %struct.rtx_def** %stacki, align 8, !dbg !12028
  %call424 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %246, i32 3, %struct.rtx_def* %247), !dbg !12029
  br label %if.end437, !dbg !12029

if.else425:                                       ; preds = %if.end414
  %248 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !12030
  %u426 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %248, i32 0, i32 1, !dbg !12030
  %fld427 = bitcast %union.u* %u426 to [1 x %union.rtunion_def]*, !dbg !12030
  %arrayidx428 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld427, i64 0, i64 0, !dbg !12030
  %rt_rtx429 = bitcast %union.rtunion_def* %arrayidx428 to %struct.rtx_def**, !dbg !12030
  %249 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx429, align 8, !dbg !12030
  %250 = load %struct.rtx_def**, %struct.rtx_def*** @regno_reg_rtx, align 8, !dbg !12032
  %251 = load i32, i32* %regnor, align 4, !dbg !12033
  %idxprom430 = sext i32 %251 to i64, !dbg !12032
  %arrayidx431 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %250, i64 %idxprom430, !dbg !12032
  %252 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx431, align 8, !dbg !12032
  %cmp432 = icmp eq %struct.rtx_def* %249, %252, !dbg !12034
  br i1 %cmp432, label %if.then434, label %if.end436, !dbg !12035

if.then434:                                       ; preds = %if.else425
  %253 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12036
  %254 = load %struct.rtx_def*, %struct.rtx_def** %stackr, align 8, !dbg !12037
  %call435 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %253, i32 3, %struct.rtx_def* %254), !dbg !12038
  br label %if.end436, !dbg !12038

if.end436:                                        ; preds = %if.then434, %if.else425
  br label %if.end437

if.end437:                                        ; preds = %if.end436, %if.then423
  br label %for.inc, !dbg !12039

for.inc:                                          ; preds = %if.end437, %if.then413
  %255 = load %struct.rtx_def*, %struct.rtx_def** %sinsn, align 8, !dbg !12040
  %call438 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %255), !dbg !12041
  store %struct.rtx_def* %call438, %struct.rtx_def** %sinsn, align 8, !dbg !12042
  br label %for.cond, !dbg !12043, !llvm.loop !12044

for.end:                                          ; preds = %for.cond
  br label %if.end497, !dbg !12046

if.else439:                                       ; preds = %if.then334
  %256 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8, !dbg !12047
  %257 = bitcast %struct.rtx_def* %256 to i32*, !dbg !12047
  %bf.load440 = load i32, i32* %257, align 8, !dbg !12047
  %bf.clear441 = and i32 %bf.load440, 65535, !dbg !12047
  %cmp442 = icmp eq i32 %bf.clear441, 8, !dbg !12047
  br i1 %cmp442, label %cond.true459, label %lor.lhs.false444, !dbg !12047

lor.lhs.false444:                                 ; preds = %if.else439
  %258 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8, !dbg !12047
  %259 = bitcast %struct.rtx_def* %258 to i32*, !dbg !12047
  %bf.load445 = load i32, i32* %259, align 8, !dbg !12047
  %bf.clear446 = and i32 %bf.load445, 65535, !dbg !12047
  %cmp447 = icmp eq i32 %bf.clear446, 7, !dbg !12047
  br i1 %cmp447, label %cond.true459, label %lor.lhs.false449, !dbg !12047

lor.lhs.false449:                                 ; preds = %lor.lhs.false444
  %260 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8, !dbg !12047
  %261 = bitcast %struct.rtx_def* %260 to i32*, !dbg !12047
  %bf.load450 = load i32, i32* %261, align 8, !dbg !12047
  %bf.clear451 = and i32 %bf.load450, 65535, !dbg !12047
  %cmp452 = icmp eq i32 %bf.clear451, 9, !dbg !12047
  br i1 %cmp452, label %cond.true459, label %lor.lhs.false454, !dbg !12047

lor.lhs.false454:                                 ; preds = %lor.lhs.false449
  %262 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8, !dbg !12047
  %263 = bitcast %struct.rtx_def* %262 to i32*, !dbg !12047
  %bf.load455 = load i32, i32* %263, align 8, !dbg !12047
  %bf.clear456 = and i32 %bf.load455, 65535, !dbg !12047
  %cmp457 = icmp eq i32 %bf.clear456, 10, !dbg !12047
  br i1 %cmp457, label %cond.true459, label %cond.false481, !dbg !12047

cond.true459:                                     ; preds = %lor.lhs.false454, %lor.lhs.false449, %lor.lhs.false444, %if.else439
  %264 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8, !dbg !12047
  %u460 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %264, i32 0, i32 1, !dbg !12047
  %fld461 = bitcast %union.u* %u460 to [1 x %union.rtunion_def]*, !dbg !12047
  %arrayidx462 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld461, i64 0, i64 5, !dbg !12047
  %rt_rtx463 = bitcast %union.rtunion_def* %arrayidx462 to %struct.rtx_def**, !dbg !12047
  %265 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx463, align 8, !dbg !12047
  %266 = bitcast %struct.rtx_def* %265 to i32*, !dbg !12047
  %bf.load464 = load i32, i32* %266, align 8, !dbg !12047
  %bf.clear465 = and i32 %bf.load464, 65535, !dbg !12047
  %cmp466 = icmp eq i32 %bf.clear465, 23, !dbg !12047
  br i1 %cmp466, label %cond.true468, label %cond.false473, !dbg !12047

cond.true468:                                     ; preds = %cond.true459
  %267 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8, !dbg !12047
  %u469 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %267, i32 0, i32 1, !dbg !12047
  %fld470 = bitcast %union.u* %u469 to [1 x %union.rtunion_def]*, !dbg !12047
  %arrayidx471 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld470, i64 0, i64 5, !dbg !12047
  %rt_rtx472 = bitcast %union.rtunion_def* %arrayidx471 to %struct.rtx_def**, !dbg !12047
  %268 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx472, align 8, !dbg !12047
  br label %cond.end479, !dbg !12047

cond.false473:                                    ; preds = %cond.true459
  %269 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8, !dbg !12047
  %270 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8, !dbg !12047
  %u474 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %270, i32 0, i32 1, !dbg !12047
  %fld475 = bitcast %union.u* %u474 to [1 x %union.rtunion_def]*, !dbg !12047
  %arrayidx476 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld475, i64 0, i64 5, !dbg !12047
  %rt_rtx477 = bitcast %union.rtunion_def* %arrayidx476 to %struct.rtx_def**, !dbg !12047
  %271 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx477, align 8, !dbg !12047
  %call478 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %269, %struct.rtx_def* %271), !dbg !12047
  br label %cond.end479, !dbg !12047

cond.end479:                                      ; preds = %cond.false473, %cond.true468
  %cond480 = phi %struct.rtx_def* [ %268, %cond.true468 ], [ %call478, %cond.false473 ], !dbg !12047
  br label %cond.end482, !dbg !12047

cond.false481:                                    ; preds = %lor.lhs.false454
  br label %cond.end482, !dbg !12047

cond.end482:                                      ; preds = %cond.false481, %cond.end479
  %cond483 = phi %struct.rtx_def* [ %cond480, %cond.end479 ], [ null, %cond.false481 ], !dbg !12047
  store %struct.rtx_def* %cond483, %struct.rtx_def** %set, align 8, !dbg !12049
  %cmp484 = icmp ne %struct.rtx_def* %cond483, null, !dbg !12050
  br i1 %cmp484, label %land.lhs.true486, label %if.end496, !dbg !12051

land.lhs.true486:                                 ; preds = %cond.end482
  %272 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !12052
  %u487 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %272, i32 0, i32 1, !dbg !12052
  %fld488 = bitcast %union.u* %u487 to [1 x %union.rtunion_def]*, !dbg !12052
  %arrayidx489 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld488, i64 0, i64 0, !dbg !12052
  %rt_rtx490 = bitcast %union.rtunion_def* %arrayidx489 to %struct.rtx_def**, !dbg !12052
  %273 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx490, align 8, !dbg !12052
  %274 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !12053
  %cmp491 = icmp eq %struct.rtx_def* %273, %274, !dbg !12054
  br i1 %cmp491, label %if.then493, label %if.end496, !dbg !12055

if.then493:                                       ; preds = %land.lhs.true486
  %275 = load %struct.rtx_def*, %struct.rtx_def** %linsn, align 8, !dbg !12056
  %276 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12057
  %stack_parm494 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %276, i32 0, i32 3, !dbg !12058
  %277 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm494, align 8, !dbg !12058
  %call495 = call %struct.rtx_def* @set_unique_reg_note(%struct.rtx_def* %275, i32 3, %struct.rtx_def* %277), !dbg !12059
  br label %if.end496, !dbg !12059

if.end496:                                        ; preds = %if.then493, %land.lhs.true486, %cond.end482
  br label %if.end497

if.end497:                                        ; preds = %if.end496, %for.end
  br label %if.end498, !dbg !12060

if.end498:                                        ; preds = %if.end497, %land.lhs.true326, %land.lhs.true323, %land.lhs.true317, %land.lhs.true313, %land.lhs.true311, %if.end306
  %278 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !12061
  %common499 = bitcast %union.tree_node* %278 to %struct.tree_common*, !dbg !12061
  %type500 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common499, i32 0, i32 2, !dbg !12061
  %279 = load %union.tree_node*, %union.tree_node** %type500, align 8, !dbg !12061
  %base501 = bitcast %union.tree_node* %279 to %struct.tree_base*, !dbg !12061
  %280 = bitcast %struct.tree_base* %base501 to i64*, !dbg !12061
  %bf.load502 = load i64, i64* %280, align 8, !dbg !12061
  %bf.clear503 = and i64 %bf.load502, 65535, !dbg !12061
  %bf.cast504 = trunc i64 %bf.clear503 to i32, !dbg !12061
  %cmp505 = icmp eq i32 %bf.cast504, 10, !dbg !12061
  br i1 %cmp505, label %if.then516, label %lor.lhs.false507, !dbg !12061

lor.lhs.false507:                                 ; preds = %if.end498
  %281 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !12061
  %common508 = bitcast %union.tree_node* %281 to %struct.tree_common*, !dbg !12061
  %type509 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common508, i32 0, i32 2, !dbg !12061
  %282 = load %union.tree_node*, %union.tree_node** %type509, align 8, !dbg !12061
  %base510 = bitcast %union.tree_node* %282 to %struct.tree_base*, !dbg !12061
  %283 = bitcast %struct.tree_base* %base510 to i64*, !dbg !12061
  %bf.load511 = load i64, i64* %283, align 8, !dbg !12061
  %bf.clear512 = and i64 %bf.load511, 65535, !dbg !12061
  %bf.cast513 = trunc i64 %bf.clear512 to i32, !dbg !12061
  %cmp514 = icmp eq i32 %bf.cast513, 12, !dbg !12061
  br i1 %cmp514, label %if.then516, label %if.end522, !dbg !12063

if.then516:                                       ; preds = %lor.lhs.false507, %if.end498
  %284 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !12064
  %285 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !12065
  %common517 = bitcast %union.tree_node* %285 to %struct.tree_common*, !dbg !12065
  %type518 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common517, i32 0, i32 2, !dbg !12065
  %286 = load %union.tree_node*, %union.tree_node** %type518, align 8, !dbg !12065
  %common519 = bitcast %union.tree_node* %286 to %struct.tree_common*, !dbg !12065
  %type520 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common519, i32 0, i32 2, !dbg !12065
  %287 = load %union.tree_node*, %union.tree_node** %type520, align 8, !dbg !12065
  %type521 = bitcast %union.tree_node* %287 to %struct.tree_type*, !dbg !12065
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type521, i32 0, i32 7, !dbg !12065
  %288 = load i32, i32* %align, align 8, !dbg !12065
  call void @mark_reg_pointer(%struct.rtx_def* %284, i32 %288), !dbg !12066
  br label %if.end522, !dbg !12066

if.end522:                                        ; preds = %if.then516, %lor.lhs.false507
  ret void, !dbg !12067
}

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parm_setup_stack(%struct.assign_parm_data_all* %all, %union.tree_node* %parm, %struct.assign_parm_data_one* %data) #0 !dbg !12068 {
entry:
  %all.addr = alloca %struct.assign_parm_data_all*, align 8
  %parm.addr = alloca %union.tree_node*, align 8
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  %to_conversion = alloca i8, align 1
  %tempreg = alloca %struct.rtx_def*, align 8
  %offset = alloca i32, align 4
  %src = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %align = alloca i32, align 4
  store %struct.assign_parm_data_all* %all, %struct.assign_parm_data_all** %all.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all** %all.addr, metadata !12069, metadata !DIExpression()), !dbg !12070
  store %union.tree_node* %parm, %union.tree_node** %parm.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm.addr, metadata !12071, metadata !DIExpression()), !dbg !12072
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !12073, metadata !DIExpression()), !dbg !12074
  call void @llvm.dbg.declare(metadata i8* %to_conversion, metadata !12075, metadata !DIExpression()), !dbg !12076
  store i8 0, i8* %to_conversion, align 1, !dbg !12076
  %0 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12077
  call void @assign_parm_remove_parallels(%struct.assign_parm_data_one* %0), !dbg !12078
  %1 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12079
  %promoted_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %1, i32 0, i32 6, !dbg !12081
  %2 = load i32, i32* %promoted_mode, align 8, !dbg !12081
  %3 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12082
  %nominal_mode = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %3, i32 0, i32 4, !dbg !12083
  %4 = load i32, i32* %nominal_mode, align 8, !dbg !12083
  %cmp = icmp ne i32 %2, %4, !dbg !12084
  br i1 %cmp, label %if.then, label %if.end49, !dbg !12085

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tempreg, metadata !12086, metadata !DIExpression()), !dbg !12088
  %5 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12089
  %entry_parm = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %5, i32 0, i32 2, !dbg !12089
  %6 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !12089
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !12089
  %bf.load = load i32, i32* %7, align 8, !dbg !12089
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !12089
  %bf.clear = and i32 %bf.lshr, 255, !dbg !12089
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear), !dbg !12090
  store %struct.rtx_def* %call, %struct.rtx_def** %tempreg, align 8, !dbg !12088
  %8 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !12091
  %9 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12092
  %entry_parm1 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %9, i32 0, i32 2, !dbg !12093
  %10 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm1, align 8, !dbg !12093
  %call2 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %10), !dbg !12094
  %call3 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %8, %struct.rtx_def* %call2), !dbg !12095
  %11 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !12096
  %first_conversion_insn = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %11, i32 0, i32 4, !dbg !12097
  %12 = load %struct.rtx_def*, %struct.rtx_def** %first_conversion_insn, align 8, !dbg !12097
  %13 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !12098
  %last_conversion_insn = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %13, i32 0, i32 5, !dbg !12099
  %14 = load %struct.rtx_def*, %struct.rtx_def** %last_conversion_insn, align 8, !dbg !12099
  call void @push_to_sequence2(%struct.rtx_def* %12, %struct.rtx_def* %14), !dbg !12100
  store i8 1, i8* %to_conversion, align 1, !dbg !12101
  %15 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12102
  %nominal_mode4 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %15, i32 0, i32 4, !dbg !12103
  %16 = load i32, i32* %nominal_mode4, align 8, !dbg !12103
  %17 = load %struct.rtx_def*, %struct.rtx_def** %tempreg, align 8, !dbg !12104
  %18 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !12105
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !12105
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12105
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12105
  %base = bitcast %union.tree_node* %19 to %struct.tree_base*, !dbg !12105
  %20 = bitcast %struct.tree_base* %base to i64*, !dbg !12105
  %bf.load5 = load i64, i64* %20, align 8, !dbg !12105
  %bf.lshr6 = lshr i64 %bf.load5, 21, !dbg !12105
  %bf.clear7 = and i64 %bf.lshr6, 1, !dbg !12105
  %bf.cast = trunc i64 %bf.clear7 to i32, !dbg !12105
  %call8 = call %struct.rtx_def* @convert_to_mode(i32 %16, %struct.rtx_def* %17, i32 %bf.cast), !dbg !12106
  %21 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12107
  %entry_parm9 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %21, i32 0, i32 2, !dbg !12108
  store %struct.rtx_def* %call8, %struct.rtx_def** %entry_parm9, align 8, !dbg !12109
  %22 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12110
  %stack_parm = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %22, i32 0, i32 3, !dbg !12112
  %23 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm, align 8, !dbg !12112
  %tobool = icmp ne %struct.rtx_def* %23, null, !dbg !12110
  br i1 %tobool, label %if.then10, label %if.end48, !dbg !12113

if.then10:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !12114, metadata !DIExpression()), !dbg !12116
  %24 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12117
  %nominal_mode11 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %24, i32 0, i32 4, !dbg !12118
  %25 = load i32, i32* %nominal_mode11, align 8, !dbg !12118
  %26 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12119
  %stack_parm12 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %26, i32 0, i32 3, !dbg !12119
  %27 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm12, align 8, !dbg !12119
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !12119
  %bf.load13 = load i32, i32* %28, align 8, !dbg !12119
  %bf.lshr14 = lshr i32 %bf.load13, 16, !dbg !12119
  %bf.clear15 = and i32 %bf.lshr14, 255, !dbg !12119
  %call16 = call i32 @subreg_lowpart_offset(i32 %25, i32 %bf.clear15), !dbg !12120
  store i32 %call16, i32* %offset, align 4, !dbg !12116
  %29 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12121
  %stack_parm17 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %29, i32 0, i32 3, !dbg !12121
  %30 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm17, align 8, !dbg !12121
  %31 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12121
  %nominal_mode18 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %31, i32 0, i32 4, !dbg !12121
  %32 = load i32, i32* %nominal_mode18, align 8, !dbg !12121
  %call19 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %30, i32 %32, i64 0, i32 1, i32 1), !dbg !12121
  %33 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12122
  %stack_parm20 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %33, i32 0, i32 3, !dbg !12123
  store %struct.rtx_def* %call19, %struct.rtx_def** %stack_parm20, align 8, !dbg !12124
  %34 = load i32, i32* %offset, align 4, !dbg !12125
  %tobool21 = icmp ne i32 %34, 0, !dbg !12125
  br i1 %tobool21, label %land.lhs.true, label %if.end, !dbg !12127

land.lhs.true:                                    ; preds = %if.then10
  %35 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12128
  %stack_parm22 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %35, i32 0, i32 3, !dbg !12128
  %36 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm22, align 8, !dbg !12128
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !12128
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12128
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !12128
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !12128
  %37 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !12128
  %cmp23 = icmp eq %struct.mem_attrs* %37, null, !dbg !12128
  br i1 %cmp23, label %cond.true, label %cond.false, !dbg !12129

cond.true:                                        ; preds = %land.lhs.true
  br i1 false, label %if.then31, label %if.end, !dbg !12128

cond.false:                                       ; preds = %land.lhs.true
  %38 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12128
  %stack_parm24 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %38, i32 0, i32 3, !dbg !12128
  %39 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm24, align 8, !dbg !12128
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !12128
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !12128
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 1, !dbg !12128
  %rt_mem28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.mem_attrs**, !dbg !12128
  %40 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem28, align 8, !dbg !12128
  %offset29 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %40, i32 0, i32 1, !dbg !12128
  %41 = load %struct.rtx_def*, %struct.rtx_def** %offset29, align 8, !dbg !12128
  %tobool30 = icmp ne %struct.rtx_def* %41, null, !dbg !12128
  br i1 %tobool30, label %if.then31, label %if.end, !dbg !12129

if.then31:                                        ; preds = %cond.false, %cond.true
  %42 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12130
  %stack_parm32 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %42, i32 0, i32 3, !dbg !12131
  %43 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm32, align 8, !dbg !12131
  %44 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12132
  %stack_parm33 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %44, i32 0, i32 3, !dbg !12132
  %45 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm33, align 8, !dbg !12132
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !12132
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !12132
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 1, !dbg !12132
  %rt_mem37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.mem_attrs**, !dbg !12132
  %46 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem37, align 8, !dbg !12132
  %cmp38 = icmp eq %struct.mem_attrs* %46, null, !dbg !12132
  br i1 %cmp38, label %cond.true39, label %cond.false40, !dbg !12132

cond.true39:                                      ; preds = %if.then31
  br label %cond.end, !dbg !12132

cond.false40:                                     ; preds = %if.then31
  %47 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12132
  %stack_parm41 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %47, i32 0, i32 3, !dbg !12132
  %48 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm41, align 8, !dbg !12132
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !12132
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !12132
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 1, !dbg !12132
  %rt_mem45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.mem_attrs**, !dbg !12132
  %49 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem45, align 8, !dbg !12132
  %offset46 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %49, i32 0, i32 1, !dbg !12132
  %50 = load %struct.rtx_def*, %struct.rtx_def** %offset46, align 8, !dbg !12132
  br label %cond.end, !dbg !12132

cond.end:                                         ; preds = %cond.false40, %cond.true39
  %cond = phi %struct.rtx_def* [ null, %cond.true39 ], [ %50, %cond.false40 ], !dbg !12132
  %51 = load i32, i32* %offset, align 4, !dbg !12133
  %conv = sext i32 %51 to i64, !dbg !12133
  %call47 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %cond, i64 %conv), !dbg !12134
  call void @set_mem_offset(%struct.rtx_def* %43, %struct.rtx_def* %call47), !dbg !12135
  br label %if.end, !dbg !12135

if.end:                                           ; preds = %cond.end, %cond.false, %cond.true, %if.then10
  br label %if.end48, !dbg !12136

if.end48:                                         ; preds = %if.end, %if.then
  br label %if.end49, !dbg !12137

if.end49:                                         ; preds = %if.end48, %entry
  %52 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12138
  %entry_parm50 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %52, i32 0, i32 2, !dbg !12140
  %53 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm50, align 8, !dbg !12140
  %54 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12141
  %stack_parm51 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %54, i32 0, i32 3, !dbg !12142
  %55 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm51, align 8, !dbg !12142
  %cmp52 = icmp ne %struct.rtx_def* %53, %55, !dbg !12143
  br i1 %cmp52, label %if.then54, label %if.end102, !dbg !12144

if.then54:                                        ; preds = %if.end49
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !12145, metadata !DIExpression()), !dbg !12147
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !12148, metadata !DIExpression()), !dbg !12149
  %56 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12150
  %stack_parm55 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %56, i32 0, i32 3, !dbg !12152
  %57 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm55, align 8, !dbg !12152
  %cmp56 = icmp eq %struct.rtx_def* %57, null, !dbg !12153
  br i1 %cmp56, label %if.then58, label %if.end81, !dbg !12154

if.then58:                                        ; preds = %if.then54
  call void @llvm.dbg.declare(metadata i32* %align, metadata !12155, metadata !DIExpression()), !dbg !12157
  %58 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12158
  %passed_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %58, i32 0, i32 1, !dbg !12158
  %59 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !12158
  %60 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12158
  %entry_parm59 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %60, i32 0, i32 2, !dbg !12158
  %61 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm59, align 8, !dbg !12158
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !12158
  %bf.load60 = load i32, i32* %62, align 8, !dbg !12158
  %bf.lshr61 = lshr i32 %bf.load60, 16, !dbg !12158
  %bf.clear62 = and i32 %bf.lshr61, 255, !dbg !12158
  %63 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12158
  %passed_type63 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %63, i32 0, i32 1, !dbg !12158
  %64 = load %union.tree_node*, %union.tree_node** %passed_type63, align 8, !dbg !12158
  %type64 = bitcast %union.tree_node* %64 to %struct.tree_type*, !dbg !12158
  %align65 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type64, i32 0, i32 7, !dbg !12158
  %65 = load i32, i32* %align65, align 8, !dbg !12158
  %call66 = call i32 @ix86_local_alignment(%union.tree_node* %59, i32 %bf.clear62, i32 %65), !dbg !12158
  store i32 %call66, i32* %align, align 4, !dbg !12157
  %66 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12159
  %entry_parm67 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %66, i32 0, i32 2, !dbg !12159
  %67 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm67, align 8, !dbg !12159
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !12159
  %bf.load68 = load i32, i32* %68, align 8, !dbg !12159
  %bf.lshr69 = lshr i32 %bf.load68, 16, !dbg !12159
  %bf.clear70 = and i32 %bf.lshr69, 255, !dbg !12159
  %69 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12160
  %entry_parm71 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %69, i32 0, i32 2, !dbg !12160
  %70 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm71, align 8, !dbg !12160
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !12160
  %bf.load72 = load i32, i32* %71, align 8, !dbg !12160
  %bf.lshr73 = lshr i32 %bf.load72, 16, !dbg !12160
  %bf.clear74 = and i32 %bf.lshr73, 255, !dbg !12160
  %idxprom = zext i32 %bf.clear74 to i64, !dbg !12160
  %arrayidx75 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !12160
  %72 = load i8, i8* %arrayidx75, align 1, !dbg !12160
  %conv76 = zext i8 %72 to i16, !dbg !12160
  %conv77 = zext i16 %conv76 to i64, !dbg !12160
  %73 = load i32, i32* %align, align 4, !dbg !12161
  %call78 = call %struct.rtx_def* @assign_stack_local(i32 %bf.clear70, i64 %conv77, i32 %73), !dbg !12162
  %74 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12163
  %stack_parm79 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %74, i32 0, i32 3, !dbg !12164
  store %struct.rtx_def* %call78, %struct.rtx_def** %stack_parm79, align 8, !dbg !12165
  %75 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12166
  %stack_parm80 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %75, i32 0, i32 3, !dbg !12167
  %76 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm80, align 8, !dbg !12167
  %77 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !12168
  call void @set_mem_attributes(%struct.rtx_def* %76, %union.tree_node* %77, i32 1), !dbg !12169
  br label %if.end81, !dbg !12170

if.end81:                                         ; preds = %if.then58, %if.then54
  %78 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12171
  %stack_parm82 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %78, i32 0, i32 3, !dbg !12172
  %79 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm82, align 8, !dbg !12172
  %call83 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %79), !dbg !12173
  store %struct.rtx_def* %call83, %struct.rtx_def** %dest, align 8, !dbg !12174
  %80 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12175
  %entry_parm84 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %80, i32 0, i32 2, !dbg !12176
  %81 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm84, align 8, !dbg !12176
  %call85 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %81), !dbg !12177
  store %struct.rtx_def* %call85, %struct.rtx_def** %src, align 8, !dbg !12178
  %82 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !12179
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !12179
  %bf.load86 = load i32, i32* %83, align 8, !dbg !12179
  %bf.clear87 = and i32 %bf.load86, 65535, !dbg !12179
  %cmp88 = icmp eq i32 %bf.clear87, 43, !dbg !12179
  br i1 %cmp88, label %if.then90, label %if.else, !dbg !12181

if.then90:                                        ; preds = %if.end81
  %84 = load i8, i8* %to_conversion, align 1, !dbg !12182
  %tobool91 = icmp ne i8 %84, 0, !dbg !12182
  br i1 %tobool91, label %if.end95, label %if.then92, !dbg !12185

if.then92:                                        ; preds = %if.then90
  %85 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !12186
  %first_conversion_insn93 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %85, i32 0, i32 4, !dbg !12187
  %86 = load %struct.rtx_def*, %struct.rtx_def** %first_conversion_insn93, align 8, !dbg !12187
  %87 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !12188
  %last_conversion_insn94 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %87, i32 0, i32 5, !dbg !12189
  %88 = load %struct.rtx_def*, %struct.rtx_def** %last_conversion_insn94, align 8, !dbg !12189
  call void @push_to_sequence2(%struct.rtx_def* %86, %struct.rtx_def* %88), !dbg !12190
  br label %if.end95, !dbg !12190

if.end95:                                         ; preds = %if.then92, %if.then90
  store i8 1, i8* %to_conversion, align 1, !dbg !12191
  %89 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !12192
  %90 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !12193
  %91 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12194
  %passed_type96 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %91, i32 0, i32 1, !dbg !12194
  %92 = load %union.tree_node*, %union.tree_node** %passed_type96, align 8, !dbg !12194
  %call97 = call i64 @int_size_in_bytes(%union.tree_node* %92), !dbg !12194
  %call98 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %call97), !dbg !12194
  %call99 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %89, %struct.rtx_def* %90, %struct.rtx_def* %call98, i32 0), !dbg !12195
  br label %if.end101, !dbg !12196

if.else:                                          ; preds = %if.end81
  %93 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !12197
  %94 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !12198
  %call100 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %93, %struct.rtx_def* %94), !dbg !12199
  br label %if.end101

if.end101:                                        ; preds = %if.else, %if.end95
  br label %if.end102, !dbg !12200

if.end102:                                        ; preds = %if.end101, %if.end49
  %95 = load i8, i8* %to_conversion, align 1, !dbg !12201
  %tobool103 = icmp ne i8 %95, 0, !dbg !12201
  br i1 %tobool103, label %if.then104, label %if.end109, !dbg !12203

if.then104:                                       ; preds = %if.end102
  %call105 = call %struct.rtx_def* @get_insns(), !dbg !12204
  %96 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !12206
  %first_conversion_insn106 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %96, i32 0, i32 4, !dbg !12207
  store %struct.rtx_def* %call105, %struct.rtx_def** %first_conversion_insn106, align 8, !dbg !12208
  %call107 = call %struct.rtx_def* @get_last_insn(), !dbg !12209
  %97 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !12210
  %last_conversion_insn108 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %97, i32 0, i32 5, !dbg !12211
  store %struct.rtx_def* %call107, %struct.rtx_def** %last_conversion_insn108, align 8, !dbg !12212
  call void @end_sequence(), !dbg !12213
  br label %if.end109, !dbg !12214

if.end109:                                        ; preds = %if.then104, %if.end102
  %98 = load %union.tree_node*, %union.tree_node** %parm.addr, align 8, !dbg !12215
  %99 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12215
  %stack_parm110 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %99, i32 0, i32 3, !dbg !12215
  %100 = load %struct.rtx_def*, %struct.rtx_def** %stack_parm110, align 8, !dbg !12215
  call void @set_decl_rtl(%union.tree_node* %98, %struct.rtx_def* %100), !dbg !12215
  ret void, !dbg !12216
}

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parms_unsplit_complex(%struct.assign_parm_data_all* %all, %struct.VEC_tree_heap* %fnargs) #0 !dbg !12217 {
entry:
  %all.addr = alloca %struct.assign_parm_data_all*, align 8
  %fnargs.addr = alloca %struct.VEC_tree_heap*, align 8
  %parm = alloca %union.tree_node*, align 8
  %orig_fnargs = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %tmp = alloca %struct.rtx_def*, align 8
  %real = alloca %struct.rtx_def*, align 8
  %imag = alloca %struct.rtx_def*, align 8
  %inner = alloca i32, align 4
  %rmem = alloca %struct.rtx_def*, align 8
  %imem = alloca %struct.rtx_def*, align 8
  %size = alloca i64, align 8
  %align = alloca i32, align 4
  store %struct.assign_parm_data_all* %all, %struct.assign_parm_data_all** %all.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_all** %all.addr, metadata !12220, metadata !DIExpression()), !dbg !12221
  store %struct.VEC_tree_heap* %fnargs, %struct.VEC_tree_heap** %fnargs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap** %fnargs.addr, metadata !12222, metadata !DIExpression()), !dbg !12223
  call void @llvm.dbg.declare(metadata %union.tree_node** %parm, metadata !12224, metadata !DIExpression()), !dbg !12225
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_fnargs, metadata !12226, metadata !DIExpression()), !dbg !12227
  %0 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !12228
  %orig_fnargs1 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %0, i32 0, i32 3, !dbg !12229
  %1 = load %union.tree_node*, %union.tree_node** %orig_fnargs1, align 8, !dbg !12229
  store %union.tree_node* %1, %union.tree_node** %orig_fnargs, align 8, !dbg !12227
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12230, metadata !DIExpression()), !dbg !12231
  store i32 0, i32* %i, align 4, !dbg !12231
  %2 = load %union.tree_node*, %union.tree_node** %orig_fnargs, align 8, !dbg !12232
  store %union.tree_node* %2, %union.tree_node** %parm, align 8, !dbg !12234
  br label %for.cond, !dbg !12235

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12236
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !12238
  br i1 %tobool, label %for.body, label %for.end, !dbg !12238

for.body:                                         ; preds = %for.cond
  %4 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12239
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !12239
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !12239
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !12239
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !12239
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !12239
  %bf.load = load i64, i64* %6, align 8, !dbg !12239
  %bf.clear = and i64 %bf.load, 65535, !dbg !12239
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !12239
  %cmp = icmp eq i32 %bf.cast, 13, !dbg !12242
  br i1 %cmp, label %land.lhs.true, label %if.end170, !dbg !12243

land.lhs.true:                                    ; preds = %for.body
  %7 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 10), align 8, !dbg !12244
  %8 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12245
  %common2 = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !12245
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !12245
  %9 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !12245
  %call = call zeroext i8 %7(%union.tree_node* %9), !dbg !12246
  %conv = zext i8 %call to i32, !dbg !12246
  %tobool4 = icmp ne i32 %conv, 0, !dbg !12246
  br i1 %tobool4, label %if.then, label %if.end170, !dbg !12247

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !12248, metadata !DIExpression()), !dbg !12250
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %real, metadata !12251, metadata !DIExpression()), !dbg !12252
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %imag, metadata !12253, metadata !DIExpression()), !dbg !12254
  call void @llvm.dbg.declare(metadata i32* %inner, metadata !12255, metadata !DIExpression()), !dbg !12256
  %10 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12257
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !12257
  %mode = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !12257
  %11 = bitcast i40* %mode to i64*, !dbg !12257
  %bf.load5 = load i64, i64* %11, align 8, !dbg !12257
  %bf.clear6 = and i64 %bf.load5, 255, !dbg !12257
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !12257
  %idxprom = zext i32 %bf.cast7 to i64, !dbg !12257
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom, !dbg !12257
  %12 = load i8, i8* %arrayidx, align 1, !dbg !12257
  %conv8 = zext i8 %12 to i32, !dbg !12257
  store i32 %conv8, i32* %inner, align 4, !dbg !12256
  %13 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12258
  %tobool9 = icmp ne %struct.VEC_tree_heap* %13, null, !dbg !12258
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !12258

cond.true:                                        ; preds = %if.then
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12258
  %base10 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %14, i32 0, i32 0, !dbg !12258
  br label %cond.end, !dbg !12258

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !12258

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base10, %cond.true ], [ null, %cond.false ], !dbg !12258
  %15 = load i32, i32* %i, align 4, !dbg !12258
  %call11 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %15), !dbg !12258
  %decl_with_rtl = bitcast %union.tree_node* %call11 to %struct.tree_decl_with_rtl*, !dbg !12258
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !12258
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !12258
  %tobool12 = icmp ne %struct.rtx_def* %16, null, !dbg !12258
  br i1 %tobool12, label %cond.true13, label %cond.false23, !dbg !12258

cond.true13:                                      ; preds = %cond.end
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12258
  %tobool14 = icmp ne %struct.VEC_tree_heap* %17, null, !dbg !12258
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !12258

cond.true15:                                      ; preds = %cond.true13
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12258
  %base16 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %18, i32 0, i32 0, !dbg !12258
  br label %cond.end18, !dbg !12258

cond.false17:                                     ; preds = %cond.true13
  br label %cond.end18, !dbg !12258

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_tree_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !12258
  %19 = load i32, i32* %i, align 4, !dbg !12258
  %call20 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond19, i32 %19), !dbg !12258
  %decl_with_rtl21 = bitcast %union.tree_node* %call20 to %struct.tree_decl_with_rtl*, !dbg !12258
  %rtl22 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl21, i32 0, i32 1, !dbg !12258
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl22, align 8, !dbg !12258
  br label %cond.end40, !dbg !12258

cond.false23:                                     ; preds = %cond.end
  %21 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12258
  %tobool24 = icmp ne %struct.VEC_tree_heap* %21, null, !dbg !12258
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !12258

cond.true25:                                      ; preds = %cond.false23
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12258
  %base26 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %22, i32 0, i32 0, !dbg !12258
  br label %cond.end28, !dbg !12258

cond.false27:                                     ; preds = %cond.false23
  br label %cond.end28, !dbg !12258

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.VEC_tree_base* [ %base26, %cond.true25 ], [ null, %cond.false27 ], !dbg !12258
  %23 = load i32, i32* %i, align 4, !dbg !12258
  %call30 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond29, i32 %23), !dbg !12258
  call void @make_decl_rtl(%union.tree_node* %call30), !dbg !12258
  %24 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12258
  %tobool31 = icmp ne %struct.VEC_tree_heap* %24, null, !dbg !12258
  br i1 %tobool31, label %cond.true32, label %cond.false34, !dbg !12258

cond.true32:                                      ; preds = %cond.end28
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12258
  %base33 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %25, i32 0, i32 0, !dbg !12258
  br label %cond.end35, !dbg !12258

cond.false34:                                     ; preds = %cond.end28
  br label %cond.end35, !dbg !12258

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi %struct.VEC_tree_base* [ %base33, %cond.true32 ], [ null, %cond.false34 ], !dbg !12258
  %26 = load i32, i32* %i, align 4, !dbg !12258
  %call37 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond36, i32 %26), !dbg !12258
  %decl_with_rtl38 = bitcast %union.tree_node* %call37 to %struct.tree_decl_with_rtl*, !dbg !12258
  %rtl39 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl38, i32 0, i32 1, !dbg !12258
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtl39, align 8, !dbg !12258
  br label %cond.end40, !dbg !12258

cond.end40:                                       ; preds = %cond.end35, %cond.end18
  %cond41 = phi %struct.rtx_def* [ %20, %cond.end18 ], [ %27, %cond.end35 ], !dbg !12258
  store %struct.rtx_def* %cond41, %struct.rtx_def** %real, align 8, !dbg !12259
  %28 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12260
  %tobool42 = icmp ne %struct.VEC_tree_heap* %28, null, !dbg !12260
  br i1 %tobool42, label %cond.true43, label %cond.false45, !dbg !12260

cond.true43:                                      ; preds = %cond.end40
  %29 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12260
  %base44 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %29, i32 0, i32 0, !dbg !12260
  br label %cond.end46, !dbg !12260

cond.false45:                                     ; preds = %cond.end40
  br label %cond.end46, !dbg !12260

cond.end46:                                       ; preds = %cond.false45, %cond.true43
  %cond47 = phi %struct.VEC_tree_base* [ %base44, %cond.true43 ], [ null, %cond.false45 ], !dbg !12260
  %30 = load i32, i32* %i, align 4, !dbg !12260
  %add = add i32 %30, 1, !dbg !12260
  %call48 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond47, i32 %add), !dbg !12260
  %decl_with_rtl49 = bitcast %union.tree_node* %call48 to %struct.tree_decl_with_rtl*, !dbg !12260
  %rtl50 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl49, i32 0, i32 1, !dbg !12260
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rtl50, align 8, !dbg !12260
  %tobool51 = icmp ne %struct.rtx_def* %31, null, !dbg !12260
  br i1 %tobool51, label %cond.true52, label %cond.false63, !dbg !12260

cond.true52:                                      ; preds = %cond.end46
  %32 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12260
  %tobool53 = icmp ne %struct.VEC_tree_heap* %32, null, !dbg !12260
  br i1 %tobool53, label %cond.true54, label %cond.false56, !dbg !12260

cond.true54:                                      ; preds = %cond.true52
  %33 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12260
  %base55 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %33, i32 0, i32 0, !dbg !12260
  br label %cond.end57, !dbg !12260

cond.false56:                                     ; preds = %cond.true52
  br label %cond.end57, !dbg !12260

cond.end57:                                       ; preds = %cond.false56, %cond.true54
  %cond58 = phi %struct.VEC_tree_base* [ %base55, %cond.true54 ], [ null, %cond.false56 ], !dbg !12260
  %34 = load i32, i32* %i, align 4, !dbg !12260
  %add59 = add i32 %34, 1, !dbg !12260
  %call60 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond58, i32 %add59), !dbg !12260
  %decl_with_rtl61 = bitcast %union.tree_node* %call60 to %struct.tree_decl_with_rtl*, !dbg !12260
  %rtl62 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl61, i32 0, i32 1, !dbg !12260
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rtl62, align 8, !dbg !12260
  br label %cond.end82, !dbg !12260

cond.false63:                                     ; preds = %cond.end46
  %36 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12260
  %tobool64 = icmp ne %struct.VEC_tree_heap* %36, null, !dbg !12260
  br i1 %tobool64, label %cond.true65, label %cond.false67, !dbg !12260

cond.true65:                                      ; preds = %cond.false63
  %37 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12260
  %base66 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %37, i32 0, i32 0, !dbg !12260
  br label %cond.end68, !dbg !12260

cond.false67:                                     ; preds = %cond.false63
  br label %cond.end68, !dbg !12260

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi %struct.VEC_tree_base* [ %base66, %cond.true65 ], [ null, %cond.false67 ], !dbg !12260
  %38 = load i32, i32* %i, align 4, !dbg !12260
  %add70 = add i32 %38, 1, !dbg !12260
  %call71 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond69, i32 %add70), !dbg !12260
  call void @make_decl_rtl(%union.tree_node* %call71), !dbg !12260
  %39 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12260
  %tobool72 = icmp ne %struct.VEC_tree_heap* %39, null, !dbg !12260
  br i1 %tobool72, label %cond.true73, label %cond.false75, !dbg !12260

cond.true73:                                      ; preds = %cond.end68
  %40 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12260
  %base74 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %40, i32 0, i32 0, !dbg !12260
  br label %cond.end76, !dbg !12260

cond.false75:                                     ; preds = %cond.end68
  br label %cond.end76, !dbg !12260

cond.end76:                                       ; preds = %cond.false75, %cond.true73
  %cond77 = phi %struct.VEC_tree_base* [ %base74, %cond.true73 ], [ null, %cond.false75 ], !dbg !12260
  %41 = load i32, i32* %i, align 4, !dbg !12260
  %add78 = add i32 %41, 1, !dbg !12260
  %call79 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond77, i32 %add78), !dbg !12260
  %decl_with_rtl80 = bitcast %union.tree_node* %call79 to %struct.tree_decl_with_rtl*, !dbg !12260
  %rtl81 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl80, i32 0, i32 1, !dbg !12260
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rtl81, align 8, !dbg !12260
  br label %cond.end82, !dbg !12260

cond.end82:                                       ; preds = %cond.end76, %cond.end57
  %cond83 = phi %struct.rtx_def* [ %35, %cond.end57 ], [ %42, %cond.end76 ], !dbg !12260
  store %struct.rtx_def* %cond83, %struct.rtx_def** %imag, align 8, !dbg !12261
  %43 = load i32, i32* %inner, align 4, !dbg !12262
  %44 = load %struct.rtx_def*, %struct.rtx_def** %real, align 8, !dbg !12264
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !12264
  %bf.load84 = load i32, i32* %45, align 8, !dbg !12264
  %bf.lshr = lshr i32 %bf.load84, 16, !dbg !12264
  %bf.clear85 = and i32 %bf.lshr, 255, !dbg !12264
  %cmp86 = icmp ne i32 %43, %bf.clear85, !dbg !12265
  br i1 %cmp86, label %if.then88, label %if.end, !dbg !12266

if.then88:                                        ; preds = %cond.end82
  %46 = load i32, i32* %inner, align 4, !dbg !12267
  %47 = load %struct.rtx_def*, %struct.rtx_def** %real, align 8, !dbg !12269
  %call89 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %46, %struct.rtx_def* %47), !dbg !12270
  store %struct.rtx_def* %call89, %struct.rtx_def** %real, align 8, !dbg !12271
  %48 = load i32, i32* %inner, align 4, !dbg !12272
  %49 = load %struct.rtx_def*, %struct.rtx_def** %imag, align 8, !dbg !12273
  %call90 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %48, %struct.rtx_def* %49), !dbg !12274
  store %struct.rtx_def* %call90, %struct.rtx_def** %imag, align 8, !dbg !12275
  br label %if.end, !dbg !12276

if.end:                                           ; preds = %if.then88, %cond.end82
  %50 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12277
  %base91 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !12277
  %51 = bitcast %struct.tree_base* %base91 to i64*, !dbg !12277
  %bf.load92 = load i64, i64* %51, align 8, !dbg !12277
  %bf.lshr93 = lshr i64 %bf.load92, 18, !dbg !12277
  %bf.clear94 = and i64 %bf.lshr93, 1, !dbg !12277
  %bf.cast95 = trunc i64 %bf.clear94 to i32, !dbg !12277
  %tobool96 = icmp ne i32 %bf.cast95, 0, !dbg !12277
  br i1 %tobool96, label %if.then97, label %if.else, !dbg !12279

if.then97:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rmem, metadata !12280, metadata !DIExpression()), !dbg !12282
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %imem, metadata !12283, metadata !DIExpression()), !dbg !12284
  call void @llvm.dbg.declare(metadata i64* %size, metadata !12285, metadata !DIExpression()), !dbg !12286
  %52 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12287
  %common98 = bitcast %union.tree_node* %52 to %struct.tree_common*, !dbg !12287
  %type99 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common98, i32 0, i32 2, !dbg !12287
  %53 = load %union.tree_node*, %union.tree_node** %type99, align 8, !dbg !12287
  %call100 = call i64 @int_size_in_bytes(%union.tree_node* %53), !dbg !12288
  store i64 %call100, i64* %size, align 8, !dbg !12286
  call void @llvm.dbg.declare(metadata i32* %align, metadata !12289, metadata !DIExpression()), !dbg !12290
  %54 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12291
  %common101 = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !12291
  %type102 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common101, i32 0, i32 2, !dbg !12291
  %55 = load %union.tree_node*, %union.tree_node** %type102, align 8, !dbg !12291
  %56 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12291
  %decl_common103 = bitcast %union.tree_node* %56 to %struct.tree_decl_common*, !dbg !12291
  %mode104 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common103, i32 0, i32 2, !dbg !12291
  %57 = bitcast i40* %mode104 to i64*, !dbg !12291
  %bf.load105 = load i64, i64* %57, align 8, !dbg !12291
  %bf.clear106 = and i64 %bf.load105, 255, !dbg !12291
  %bf.cast107 = trunc i64 %bf.clear106 to i32, !dbg !12291
  %58 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12291
  %common108 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !12291
  %type109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 2, !dbg !12291
  %59 = load %union.tree_node*, %union.tree_node** %type109, align 8, !dbg !12291
  %type110 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !12291
  %align111 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type110, i32 0, i32 7, !dbg !12291
  %60 = load i32, i32* %align111, align 8, !dbg !12291
  %call112 = call i32 @ix86_local_alignment(%union.tree_node* %55, i32 %bf.cast107, i32 %60), !dbg !12291
  store i32 %call112, i32* %align, align 4, !dbg !12290
  %61 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12292
  %decl_common113 = bitcast %union.tree_node* %61 to %struct.tree_decl_common*, !dbg !12292
  %mode114 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common113, i32 0, i32 2, !dbg !12292
  %62 = bitcast i40* %mode114 to i64*, !dbg !12292
  %bf.load115 = load i64, i64* %62, align 8, !dbg !12292
  %bf.clear116 = and i64 %bf.load115, 255, !dbg !12292
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !12292
  %63 = load i64, i64* %size, align 8, !dbg !12293
  %64 = load i32, i32* %align, align 4, !dbg !12294
  %call118 = call %struct.rtx_def* @assign_stack_local(i32 %bf.cast117, i64 %63, i32 %64), !dbg !12295
  store %struct.rtx_def* %call118, %struct.rtx_def** %tmp, align 8, !dbg !12296
  %65 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !12297
  %66 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12298
  call void @set_mem_attributes(%struct.rtx_def* %65, %union.tree_node* %66, i32 1), !dbg !12299
  %67 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !12300
  %68 = load i32, i32* %inner, align 4, !dbg !12300
  %call119 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %67, i32 %68, i64 0, i32 0, i32 1), !dbg !12300
  store %struct.rtx_def* %call119, %struct.rtx_def** %rmem, align 8, !dbg !12301
  %69 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !12302
  %70 = load i32, i32* %inner, align 4, !dbg !12302
  %71 = load i32, i32* %inner, align 4, !dbg !12302
  %idxprom120 = zext i32 %71 to i64, !dbg !12302
  %arrayidx121 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom120, !dbg !12302
  %72 = load i8, i8* %arrayidx121, align 1, !dbg !12302
  %conv122 = zext i8 %72 to i16, !dbg !12302
  %conv123 = zext i16 %conv122 to i64, !dbg !12302
  %call124 = call %struct.rtx_def* @adjust_address_1(%struct.rtx_def* %69, i32 %70, i64 %conv123, i32 0, i32 1), !dbg !12302
  store %struct.rtx_def* %call124, %struct.rtx_def** %imem, align 8, !dbg !12303
  %73 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !12304
  %first_conversion_insn = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %73, i32 0, i32 4, !dbg !12305
  %74 = load %struct.rtx_def*, %struct.rtx_def** %first_conversion_insn, align 8, !dbg !12305
  %75 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !12306
  %last_conversion_insn = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %75, i32 0, i32 5, !dbg !12307
  %76 = load %struct.rtx_def*, %struct.rtx_def** %last_conversion_insn, align 8, !dbg !12307
  call void @push_to_sequence2(%struct.rtx_def* %74, %struct.rtx_def* %76), !dbg !12308
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rmem, align 8, !dbg !12309
  %78 = load %struct.rtx_def*, %struct.rtx_def** %real, align 8, !dbg !12310
  %call125 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %77, %struct.rtx_def* %78), !dbg !12311
  %79 = load %struct.rtx_def*, %struct.rtx_def** %imem, align 8, !dbg !12312
  %80 = load %struct.rtx_def*, %struct.rtx_def** %imag, align 8, !dbg !12313
  %call126 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %79, %struct.rtx_def* %80), !dbg !12314
  %call127 = call %struct.rtx_def* @get_insns(), !dbg !12315
  %81 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !12316
  %first_conversion_insn128 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %81, i32 0, i32 4, !dbg !12317
  store %struct.rtx_def* %call127, %struct.rtx_def** %first_conversion_insn128, align 8, !dbg !12318
  %call129 = call %struct.rtx_def* @get_last_insn(), !dbg !12319
  %82 = load %struct.assign_parm_data_all*, %struct.assign_parm_data_all** %all.addr, align 8, !dbg !12320
  %last_conversion_insn130 = getelementptr inbounds %struct.assign_parm_data_all, %struct.assign_parm_data_all* %82, i32 0, i32 5, !dbg !12321
  store %struct.rtx_def* %call129, %struct.rtx_def** %last_conversion_insn130, align 8, !dbg !12322
  call void @end_sequence(), !dbg !12323
  br label %if.end137, !dbg !12324

if.else:                                          ; preds = %if.end
  %83 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12325
  %decl_common131 = bitcast %union.tree_node* %83 to %struct.tree_decl_common*, !dbg !12325
  %mode132 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common131, i32 0, i32 2, !dbg !12325
  %84 = bitcast i40* %mode132 to i64*, !dbg !12325
  %bf.load133 = load i64, i64* %84, align 8, !dbg !12325
  %bf.clear134 = and i64 %bf.load133, 255, !dbg !12325
  %bf.cast135 = trunc i64 %bf.clear134 to i32, !dbg !12325
  %85 = load %struct.rtx_def*, %struct.rtx_def** %real, align 8, !dbg !12325
  %86 = load %struct.rtx_def*, %struct.rtx_def** %imag, align 8, !dbg !12325
  %call136 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 41, i32 %bf.cast135, %struct.rtx_def* %85, %struct.rtx_def* %86), !dbg !12325
  store %struct.rtx_def* %call136, %struct.rtx_def** %tmp, align 8, !dbg !12326
  br label %if.end137

if.end137:                                        ; preds = %if.else, %if.then97
  %87 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12327
  %88 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !12327
  call void @set_decl_rtl(%union.tree_node* %87, %struct.rtx_def* %88), !dbg !12327
  %89 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12328
  %tobool138 = icmp ne %struct.VEC_tree_heap* %89, null, !dbg !12328
  br i1 %tobool138, label %cond.true139, label %cond.false141, !dbg !12328

cond.true139:                                     ; preds = %if.end137
  %90 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12328
  %base140 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %90, i32 0, i32 0, !dbg !12328
  br label %cond.end142, !dbg !12328

cond.false141:                                    ; preds = %if.end137
  br label %cond.end142, !dbg !12328

cond.end142:                                      ; preds = %cond.false141, %cond.true139
  %cond143 = phi %struct.VEC_tree_base* [ %base140, %cond.true139 ], [ null, %cond.false141 ], !dbg !12328
  %91 = load i32, i32* %i, align 4, !dbg !12328
  %call144 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond143, i32 %91), !dbg !12328
  %parm_decl = bitcast %union.tree_node* %call144 to %struct.tree_parm_decl*, !dbg !12328
  %incoming_rtl = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl, i32 0, i32 1, !dbg !12328
  %92 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl, align 8, !dbg !12328
  store %struct.rtx_def* %92, %struct.rtx_def** %real, align 8, !dbg !12329
  %93 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12330
  %tobool145 = icmp ne %struct.VEC_tree_heap* %93, null, !dbg !12330
  br i1 %tobool145, label %cond.true146, label %cond.false148, !dbg !12330

cond.true146:                                     ; preds = %cond.end142
  %94 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %fnargs.addr, align 8, !dbg !12330
  %base147 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %94, i32 0, i32 0, !dbg !12330
  br label %cond.end149, !dbg !12330

cond.false148:                                    ; preds = %cond.end142
  br label %cond.end149, !dbg !12330

cond.end149:                                      ; preds = %cond.false148, %cond.true146
  %cond150 = phi %struct.VEC_tree_base* [ %base147, %cond.true146 ], [ null, %cond.false148 ], !dbg !12330
  %95 = load i32, i32* %i, align 4, !dbg !12330
  %add151 = add i32 %95, 1, !dbg !12330
  %call152 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond150, i32 %add151), !dbg !12330
  %parm_decl153 = bitcast %union.tree_node* %call152 to %struct.tree_parm_decl*, !dbg !12330
  %incoming_rtl154 = getelementptr inbounds %struct.tree_parm_decl, %struct.tree_parm_decl* %parm_decl153, i32 0, i32 1, !dbg !12330
  %96 = load %struct.rtx_def*, %struct.rtx_def** %incoming_rtl154, align 8, !dbg !12330
  store %struct.rtx_def* %96, %struct.rtx_def** %imag, align 8, !dbg !12331
  %97 = load i32, i32* %inner, align 4, !dbg !12332
  %98 = load %struct.rtx_def*, %struct.rtx_def** %real, align 8, !dbg !12334
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !12334
  %bf.load155 = load i32, i32* %99, align 8, !dbg !12334
  %bf.lshr156 = lshr i32 %bf.load155, 16, !dbg !12334
  %bf.clear157 = and i32 %bf.lshr156, 255, !dbg !12334
  %cmp158 = icmp ne i32 %97, %bf.clear157, !dbg !12335
  br i1 %cmp158, label %if.then160, label %if.end163, !dbg !12336

if.then160:                                       ; preds = %cond.end149
  %100 = load i32, i32* %inner, align 4, !dbg !12337
  %101 = load %struct.rtx_def*, %struct.rtx_def** %real, align 8, !dbg !12339
  %call161 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %100, %struct.rtx_def* %101), !dbg !12340
  store %struct.rtx_def* %call161, %struct.rtx_def** %real, align 8, !dbg !12341
  %102 = load i32, i32* %inner, align 4, !dbg !12342
  %103 = load %struct.rtx_def*, %struct.rtx_def** %imag, align 8, !dbg !12343
  %call162 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %102, %struct.rtx_def* %103), !dbg !12344
  store %struct.rtx_def* %call162, %struct.rtx_def** %imag, align 8, !dbg !12345
  br label %if.end163, !dbg !12346

if.end163:                                        ; preds = %if.then160, %cond.end149
  %104 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12347
  %decl_common164 = bitcast %union.tree_node* %104 to %struct.tree_decl_common*, !dbg !12347
  %mode165 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common164, i32 0, i32 2, !dbg !12347
  %105 = bitcast i40* %mode165 to i64*, !dbg !12347
  %bf.load166 = load i64, i64* %105, align 8, !dbg !12347
  %bf.clear167 = and i64 %bf.load166, 255, !dbg !12347
  %bf.cast168 = trunc i64 %bf.clear167 to i32, !dbg !12347
  %106 = load %struct.rtx_def*, %struct.rtx_def** %real, align 8, !dbg !12347
  %107 = load %struct.rtx_def*, %struct.rtx_def** %imag, align 8, !dbg !12347
  %call169 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 41, i32 %bf.cast168, %struct.rtx_def* %106, %struct.rtx_def* %107), !dbg !12347
  store %struct.rtx_def* %call169, %struct.rtx_def** %tmp, align 8, !dbg !12348
  %108 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12349
  %109 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !12350
  call void @set_decl_incoming_rtl(%union.tree_node* %108, %struct.rtx_def* %109, i8 zeroext 0), !dbg !12351
  %110 = load i32, i32* %i, align 4, !dbg !12352
  %inc = add i32 %110, 1, !dbg !12352
  store i32 %inc, i32* %i, align 4, !dbg !12352
  br label %if.end170, !dbg !12353

if.end170:                                        ; preds = %if.end163, %land.lhs.true, %for.body
  br label %for.inc, !dbg !12354

for.inc:                                          ; preds = %if.end170
  %111 = load %union.tree_node*, %union.tree_node** %parm, align 8, !dbg !12355
  %common171 = bitcast %union.tree_node* %111 to %struct.tree_common*, !dbg !12355
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common171, i32 0, i32 1, !dbg !12355
  %112 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !12355
  store %union.tree_node* %112, %union.tree_node** %parm, align 8, !dbg !12356
  %113 = load i32, i32* %i, align 4, !dbg !12357
  %inc172 = add i32 %113, 1, !dbg !12357
  store i32 %inc172, i32* %i, align 4, !dbg !12357
  br label %for.cond, !dbg !12358, !llvm.loop !12359

for.end:                                          ; preds = %for.cond
  ret void, !dbg !12361
}

declare dso_local i32 @ix86_return_pops_args(%union.tree_node*, %union.tree_node*, i32) #2

declare dso_local %struct.rtx_def* @function_arg(%struct.ix86_args*, i32, %union.tree_node*, i32) #2

declare dso_local void @set_mem_size(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @subreg_lowpart_offset(i32, i32) #2

declare dso_local void @set_mem_offset(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @set_reg_attrs_for_parm(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @emit_group_store(%struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, i32) #2

declare dso_local void @move_block_from_reg(i32, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @emit_group_move_into_temps(%struct.rtx_def*) #2

declare dso_local void @push_to_sequence2(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @mode_for_size(i32, i32, i32) #2

declare dso_local %struct.rtx_def* @change_address(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @expand_shift(i32, i32, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, i32) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local %struct.rtx_def* @emit_block_move(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local void @mark_user_reg(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @assign_parm_remove_parallels(%struct.assign_parm_data_one* %data) #0 !dbg !12362 {
entry:
  %data.addr = alloca %struct.assign_parm_data_one*, align 8
  %entry_parm = alloca %struct.rtx_def*, align 8
  %parmreg = alloca %struct.rtx_def*, align 8
  store %struct.assign_parm_data_one* %data, %struct.assign_parm_data_one** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.assign_parm_data_one** %data.addr, metadata !12363, metadata !DIExpression()), !dbg !12364
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %entry_parm, metadata !12365, metadata !DIExpression()), !dbg !12366
  %0 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12367
  %entry_parm1 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %0, i32 0, i32 2, !dbg !12368
  %1 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm1, align 8, !dbg !12368
  store %struct.rtx_def* %1, %struct.rtx_def** %entry_parm, align 8, !dbg !12366
  %2 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !12369
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !12369
  %bf.load = load i32, i32* %3, align 8, !dbg !12369
  %bf.clear = and i32 %bf.load, 65535, !dbg !12369
  %cmp = icmp eq i32 %bf.clear, 15, !dbg !12371
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !12372

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !12373
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !12373
  %bf.load2 = load i32, i32* %5, align 8, !dbg !12373
  %bf.lshr = lshr i32 %bf.load2, 16, !dbg !12373
  %bf.clear3 = and i32 %bf.lshr, 255, !dbg !12373
  %cmp4 = icmp ne i32 %bf.clear3, 1, !dbg !12374
  br i1 %cmp4, label %if.then, label %if.end, !dbg !12375

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %parmreg, metadata !12376, metadata !DIExpression()), !dbg !12378
  %6 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !12379
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !12379
  %bf.load5 = load i32, i32* %7, align 8, !dbg !12379
  %bf.lshr6 = lshr i32 %bf.load5, 16, !dbg !12379
  %bf.clear7 = and i32 %bf.lshr6, 255, !dbg !12379
  %call = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear7), !dbg !12380
  store %struct.rtx_def* %call, %struct.rtx_def** %parmreg, align 8, !dbg !12378
  %8 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !12381
  %9 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !12382
  %10 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12383
  %passed_type = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %10, i32 0, i32 1, !dbg !12384
  %11 = load %union.tree_node*, %union.tree_node** %passed_type, align 8, !dbg !12384
  %12 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !12385
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !12385
  %bf.load8 = load i32, i32* %13, align 8, !dbg !12385
  %bf.lshr9 = lshr i32 %bf.load8, 16, !dbg !12385
  %bf.clear10 = and i32 %bf.lshr9, 255, !dbg !12385
  %idxprom = zext i32 %bf.clear10 to i64, !dbg !12385
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !12385
  %14 = load i8, i8* %arrayidx, align 1, !dbg !12385
  %conv = zext i8 %14 to i16, !dbg !12385
  %conv11 = zext i16 %conv to i32, !dbg !12385
  call void @emit_group_store(%struct.rtx_def* %8, %struct.rtx_def* %9, %union.tree_node* %11, i32 %conv11), !dbg !12386
  %15 = load %struct.rtx_def*, %struct.rtx_def** %parmreg, align 8, !dbg !12387
  store %struct.rtx_def* %15, %struct.rtx_def** %entry_parm, align 8, !dbg !12388
  br label %if.end, !dbg !12389

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %16 = load %struct.rtx_def*, %struct.rtx_def** %entry_parm, align 8, !dbg !12390
  %17 = load %struct.assign_parm_data_one*, %struct.assign_parm_data_one** %data.addr, align 8, !dbg !12391
  %entry_parm12 = getelementptr inbounds %struct.assign_parm_data_one, %struct.assign_parm_data_one* %17, i32 0, i32 2, !dbg !12392
  store %struct.rtx_def* %16, %struct.rtx_def** %entry_parm12, align 8, !dbg !12393
  ret void, !dbg !12394
}

declare dso_local %struct.rtx_def* @convert_to_mode(i32, %struct.rtx_def*, i32) #2

declare dso_local void @expand_assignment(%union.tree_node*, %union.tree_node*, i8 zeroext) #2

declare dso_local %union.tree_node* @make_tree(%union.tree_node*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !12395 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !12398, metadata !DIExpression()), !dbg !12399
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !12400, metadata !DIExpression()), !dbg !12399
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12399
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !12399
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12399

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !12399
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12399
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !12399
  %3 = load i32, i32* %num, align 8, !dbg !12399
  %cmp = icmp ult i32 %1, %3, !dbg !12399
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !12401
  %land.ext = zext i1 %4 to i32, !dbg !12399
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !12399
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !12399
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !12399
  %idxprom = zext i32 %6 to i64, !dbg !12399
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !12399
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !12399
  ret %union.tree_node* %7, !dbg !12399
}

declare dso_local %struct.rtx_def* @gen_lowpart_SUBREG(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_clobber(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @do_use_return_reg(%struct.rtx_def* %reg, i8* %arg) #0 !dbg !12402 {
entry:
  %reg.addr = alloca %struct.rtx_def*, align 8
  %arg.addr = alloca i8*, align 8
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !12403, metadata !DIExpression()), !dbg !12404
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !12405, metadata !DIExpression()), !dbg !12406
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !12407
  %call = call %struct.rtx_def* @emit_use(%struct.rtx_def* %0), !dbg !12408
  ret void, !dbg !12409
}

declare dso_local %struct.rtx_def* @emit_use(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !12410 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !12413, metadata !DIExpression()), !dbg !12414
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !12415
  %3 = load i32, i32* %index, align 8, !dbg !12415
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !12416
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !12416
  %6 = load i32, i32* %5, align 8, !dbg !12416
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !12416
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !12416
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !12416
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !12416
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12416

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !12416
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !12416
  %11 = load i32, i32* %10, align 8, !dbg !12416
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !12416
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !12416
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !12416
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !12416
  br label %cond.end, !dbg !12416

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12416

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12416
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !12416
  %cmp = icmp eq i32 %3, %call2, !dbg !12417
  %conv = zext i1 %cmp to i32, !dbg !12417
  %conv3 = trunc i32 %conv to i8, !dbg !12418
  ret i8 %conv3, !dbg !12419
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !12420 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !12423, metadata !DIExpression()), !dbg !12424
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !12425
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !12425
  %5 = load i32, i32* %4, align 8, !dbg !12425
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !12425
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !12425
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !12425
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !12425
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12425

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !12425
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !12425
  %10 = load i32, i32* %9, align 8, !dbg !12425
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !12425
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !12425
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !12425
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !12425
  br label %cond.end, !dbg !12425

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12425

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12425
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !12425
  %13 = load i32, i32* %index, align 8, !dbg !12425
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !12425
  ret %struct.edge_def* %call2, !dbg !12426
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !12427 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !12432, metadata !DIExpression()), !dbg !12433
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !12433
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !12433
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12433

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !12433
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !12433
  %2 = load i32, i32* %num, align 8, !dbg !12433
  br label %cond.end, !dbg !12433

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12433

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !12433
  ret i32 %cond, !dbg !12433
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !12434 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !12437, metadata !DIExpression()), !dbg !12438
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !12439
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !12439
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !12439
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !12439

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12439
  br label %cond.end, !dbg !12439

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12439

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12439
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !12440
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !12440
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !12441
  ret %struct.VEC_edge_gc* %5, !dbg !12442
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !12443 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !12446, metadata !DIExpression()), !dbg !12447
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !12448, metadata !DIExpression()), !dbg !12447
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !12447
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !12447
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !12447

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !12447
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !12447
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !12447
  %3 = load i32, i32* %num, align 8, !dbg !12447
  %cmp = icmp ult i32 %1, %3, !dbg !12447
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !12449
  %land.ext = zext i1 %4 to i32, !dbg !12447
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !12447
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !12447
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !12447
  %idxprom = zext i32 %6 to i64, !dbg !12447
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !12447
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !12447
  ret %struct.edge_def* %7, !dbg !12447
}

declare dso_local i32 @iterative_hash(i8*, i64, i32) #2

declare dso_local zeroext i8 @cleanup_cfg(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @thread_prologue_and_epilogue_insns() #0 !dbg !12450 {
entry:
  %inserted = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %epilogue_end = alloca %struct.rtx_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %last = alloca %struct.basic_block_def*, align 8
  %label = alloca %struct.rtx_def*, align 8
  %tmp37 = alloca %struct.edge_iterator, align 8
  %ei2 = alloca %struct.edge_iterator, align 8
  %tmp74 = alloca %struct.edge_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %tmp136 = alloca %struct.edge_iterator, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %last145 = alloca %struct.rtx_def*, align 8
  %trial = alloca %struct.rtx_def*, align 8
  %tmp183 = alloca %struct.edge_iterator, align 8
  %tmp209 = alloca %struct.edge_iterator, align 8
  %tmp236 = alloca %struct.edge_iterator, align 8
  %bb245 = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %insn268 = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %inserted, metadata !12451, metadata !DIExpression()), !dbg !12452
  store i32 0, i32* %inserted, align 4, !dbg !12452
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !12453, metadata !DIExpression()), !dbg !12454
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !12455, metadata !DIExpression()), !dbg !12456
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %epilogue_end, metadata !12457, metadata !DIExpression()), !dbg !12458
  store %struct.rtx_def* null, %struct.rtx_def** %epilogue_end, align 8, !dbg !12458
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !12459, metadata !DIExpression()), !dbg !12460
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12461
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i32 0, i32 1, !dbg !12461
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !12461
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !12461
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !12461
  call void @rtl_profile_for_bb(%struct.basic_block_def* %2), !dbg !12462
  call void @start_sequence(), !dbg !12463
  %call = call %struct.rtx_def* @gen_prologue(), !dbg !12466
  store %struct.rtx_def* %call, %struct.rtx_def** %seq, align 8, !dbg !12467
  %3 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12468
  %call1 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %3), !dbg !12469
  %4 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 35), align 1, !dbg !12470
  %conv = zext i8 %4 to i32, !dbg !12472
  %tobool = icmp ne i32 %conv, 0, !dbg !12472
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !12473

land.lhs.true:                                    ; preds = %entry
  %5 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 41), align 1, !dbg !12474
  %conv2 = zext i8 %5 to i32, !dbg !12474
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !12474
  br i1 %tobool3, label %if.then, label %if.end, !dbg !12475

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 4), align 16, !dbg !12476
  %call4 = call %struct.rtx_def* @emit_use(%struct.rtx_def* %6), !dbg !12477
  br label %if.end, !dbg !12477

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12478
  call void @record_insns(%struct.rtx_def* %7, %struct.rtx_def* null, %struct.htab** @prologue_insn_hash), !dbg !12479
  %call5 = call %struct.rtx_def* @emit_note(i32 5), !dbg !12480
  %8 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 35), align 1, !dbg !12481
  %tobool6 = icmp ne i8 %8, 0, !dbg !12483
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !12484

if.then7:                                         ; preds = %if.end
  %call8 = call %struct.rtx_def* @gen_blockage(), !dbg !12485
  %call9 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call8), !dbg !12486
  br label %if.end10, !dbg !12486

if.end10:                                         ; preds = %if.then7, %if.end
  %call11 = call %struct.rtx_def* @get_insns(), !dbg !12487
  store %struct.rtx_def* %call11, %struct.rtx_def** %seq, align 8, !dbg !12488
  call void @end_sequence(), !dbg !12489
  %9 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12490
  %10 = load i32, i32* @prologue_locator, align 4, !dbg !12491
  call void @set_insn_locators(%struct.rtx_def* %9, i32 %10), !dbg !12492
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12493
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %11, i32 0, i32 1, !dbg !12493
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !12493
  %x_entry_block_ptr13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 0, !dbg !12493
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr13, align 8, !dbg !12493
  %call14 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %13), !dbg !12493
  %tobool15 = icmp ne i8 %call14, 0, !dbg !12493
  br i1 %tobool15, label %cond.false, label %cond.true, !dbg !12493

cond.true:                                        ; preds = %if.end10
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5052, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12493
  br label %cond.end, !dbg !12493

cond.false:                                       ; preds = %if.end10
  br label %cond.end, !dbg !12493

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12493
  %14 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12494
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12495
  %cfg16 = getelementptr inbounds %struct.function, %struct.function* %15, i32 0, i32 1, !dbg !12495
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg16, align 8, !dbg !12495
  %x_entry_block_ptr17 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 0, !dbg !12495
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr17, align 8, !dbg !12495
  %call18 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %17), !dbg !12496
  call void @insert_insn_on_edge(%struct.rtx_def* %14, %struct.edge_def* %call18), !dbg !12497
  store i32 1, i32* %inserted, align 4, !dbg !12498
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12499
  %cfg19 = getelementptr inbounds %struct.function, %struct.function* %18, i32 0, i32 1, !dbg !12499
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg19, align 8, !dbg !12499
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 1, !dbg !12499
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !12499
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 0, !dbg !12499
  %call20 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !12499
  %21 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !12499
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 0, !dbg !12499
  %23 = extractvalue { i32, %struct.VEC_edge_gc** } %call20, 0, !dbg !12499
  store i32 %23, i32* %22, align 8, !dbg !12499
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %21, i32 0, i32 1, !dbg !12499
  %25 = extractvalue { i32, %struct.VEC_edge_gc** } %call20, 1, !dbg !12499
  store %struct.VEC_edge_gc** %25, %struct.VEC_edge_gc*** %24, align 8, !dbg !12499
  %26 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !12499
  %27 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !12499
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !dbg !12499
  br label %for.cond, !dbg !12499

for.cond:                                         ; preds = %for.inc, %cond.end
  %28 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !12501
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 0, !dbg !12501
  %30 = load i32, i32* %29, align 8, !dbg !12501
  %31 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %28, i32 0, i32 1, !dbg !12501
  %32 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %31, align 8, !dbg !12501
  %call21 = call zeroext i8 @ei_cond(i32 %30, %struct.VEC_edge_gc** %32, %struct.edge_def** %e), !dbg !12501
  %tobool22 = icmp ne i8 %call21, 0, !dbg !12499
  br i1 %tobool22, label %for.body, label %for.end, !dbg !12499

for.body:                                         ; preds = %for.cond
  %33 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12503
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 7, !dbg !12505
  %34 = load i32, i32* %flags, align 8, !dbg !12505
  %and = and i32 %34, 16, !dbg !12506
  %cmp = icmp eq i32 %and, 0, !dbg !12507
  br i1 %cmp, label %if.then24, label %if.end25, !dbg !12508

if.then24:                                        ; preds = %for.body
  br label %for.end, !dbg !12509

if.end25:                                         ; preds = %for.body
  br label %for.inc, !dbg !12510

for.inc:                                          ; preds = %if.end25
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12501
  br label %for.cond, !dbg !12501, !llvm.loop !12511

for.end:                                          ; preds = %if.then24, %for.cond
  %35 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12513
  %cmp26 = icmp eq %struct.edge_def* %35, null, !dbg !12515
  br i1 %cmp26, label %if.then28, label %if.end29, !dbg !12516

if.then28:                                        ; preds = %for.end
  br label %epilogue_done, !dbg !12517

if.end29:                                         ; preds = %for.end
  %36 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12518
  %cfg30 = getelementptr inbounds %struct.function, %struct.function* %36, i32 0, i32 1, !dbg !12518
  %37 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg30, align 8, !dbg !12518
  %x_exit_block_ptr31 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %37, i32 0, i32 1, !dbg !12518
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr31, align 8, !dbg !12518
  call void @rtl_profile_for_bb(%struct.basic_block_def* %38), !dbg !12519
  %39 = load i32, i32* @optimize, align 4, !dbg !12520
  %tobool32 = icmp ne i32 %39, 0, !dbg !12520
  br i1 %tobool32, label %land.lhs.true33, label %if.end135, !dbg !12522

land.lhs.true33:                                  ; preds = %if.end29
  %call34 = call i32 @ix86_can_use_return_insn_p(), !dbg !12523
  %tobool35 = icmp ne i32 %call34, 0, !dbg !12523
  br i1 %tobool35, label %if.then36, label %if.end135, !dbg !12524

if.then36:                                        ; preds = %land.lhs.true33
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last, metadata !12525, metadata !DIExpression()), !dbg !12527
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label, metadata !12528, metadata !DIExpression()), !dbg !12529
  %40 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12530
  %cfg38 = getelementptr inbounds %struct.function, %struct.function* %40, i32 0, i32 1, !dbg !12530
  %41 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg38, align 8, !dbg !12530
  %x_exit_block_ptr39 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %41, i32 0, i32 1, !dbg !12530
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr39, align 8, !dbg !12530
  %preds40 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 0, !dbg !12530
  %call41 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds40), !dbg !12530
  %43 = bitcast %struct.edge_iterator* %tmp37 to { i32, %struct.VEC_edge_gc** }*, !dbg !12530
  %44 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 0, !dbg !12530
  %45 = extractvalue { i32, %struct.VEC_edge_gc** } %call41, 0, !dbg !12530
  store i32 %45, i32* %44, align 8, !dbg !12530
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 1, !dbg !12530
  %47 = extractvalue { i32, %struct.VEC_edge_gc** } %call41, 1, !dbg !12530
  store %struct.VEC_edge_gc** %47, %struct.VEC_edge_gc*** %46, align 8, !dbg !12530
  %48 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !12530
  %49 = bitcast %struct.edge_iterator* %tmp37 to i8*, !dbg !12530
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 16, i1 false), !dbg !12530
  br label %for.cond42, !dbg !12530

for.cond42:                                       ; preds = %for.inc51, %if.then36
  %50 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !12532
  %51 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 0, !dbg !12532
  %52 = load i32, i32* %51, align 8, !dbg !12532
  %53 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 1, !dbg !12532
  %54 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %53, align 8, !dbg !12532
  %call43 = call zeroext i8 @ei_cond(i32 %52, %struct.VEC_edge_gc** %54, %struct.edge_def** %e), !dbg !12532
  %tobool44 = icmp ne i8 %call43, 0, !dbg !12530
  br i1 %tobool44, label %for.body45, label %for.end52, !dbg !12530

for.body45:                                       ; preds = %for.cond42
  %55 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12534
  %flags46 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 7, !dbg !12536
  %56 = load i32, i32* %flags46, align 8, !dbg !12536
  %and47 = and i32 %56, 1, !dbg !12537
  %tobool48 = icmp ne i32 %and47, 0, !dbg !12537
  br i1 %tobool48, label %if.then49, label %if.end50, !dbg !12538

if.then49:                                        ; preds = %for.body45
  br label %for.end52, !dbg !12539

if.end50:                                         ; preds = %for.body45
  br label %for.inc51, !dbg !12540

for.inc51:                                        ; preds = %if.end50
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12532
  br label %for.cond42, !dbg !12532, !llvm.loop !12541

for.end52:                                        ; preds = %if.then49, %for.cond42
  %57 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12543
  %cmp53 = icmp eq %struct.edge_def* %57, null, !dbg !12545
  br i1 %cmp53, label %if.then55, label %if.end56, !dbg !12546

if.then55:                                        ; preds = %for.end52
  br label %epilogue_done, !dbg !12547

if.end56:                                         ; preds = %for.end52
  %58 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12548
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %58, i32 0, i32 0, !dbg !12549
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !12549
  store %struct.basic_block_def* %59, %struct.basic_block_def** %last, align 8, !dbg !12550
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !12551
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 7, !dbg !12551
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !12551
  %61 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !12551
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %61, i32 0, i32 1, !dbg !12551
  %62 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !12551
  store %struct.rtx_def* %62, %struct.rtx_def** %label, align 8, !dbg !12552
  br label %while.cond, !dbg !12553

while.cond:                                       ; preds = %if.end63, %if.end56
  %63 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !12554
  %tobool57 = icmp ne %struct.rtx_def* %63, null, !dbg !12554
  br i1 %tobool57, label %land.rhs, label %land.end, !dbg !12555

land.rhs:                                         ; preds = %while.cond
  %64 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !12556
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !12556
  %bf.load = load i32, i32* %65, align 8, !dbg !12556
  %bf.clear = and i32 %bf.load, 65535, !dbg !12556
  %cmp58 = icmp eq i32 %bf.clear, 12, !dbg !12556
  %lnot = xor i1 %cmp58, true, !dbg !12557
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %66 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !12558
  br i1 %66, label %while.body, label %while.end, !dbg !12553

while.body:                                       ; preds = %land.end
  %67 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !12559
  %call60 = call i32 @active_insn_p(%struct.rtx_def* %67), !dbg !12562
  %tobool61 = icmp ne i32 %call60, 0, !dbg !12562
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !12563

if.then62:                                        ; preds = %while.body
  br label %while.end, !dbg !12564

if.end63:                                         ; preds = %while.body
  %68 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !12565
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !12565
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12565
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !12565
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !12565
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !12565
  store %struct.rtx_def* %69, %struct.rtx_def** %label, align 8, !dbg !12566
  br label %while.cond, !dbg !12553, !llvm.loop !12567

while.end:                                        ; preds = %if.then62, %land.end
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !12569
  %il64 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %70, i32 0, i32 7, !dbg !12569
  %rtl65 = bitcast %union.basic_block_il_dependent* %il64 to %struct.rtl_bb_info**, !dbg !12569
  %71 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl65, align 8, !dbg !12569
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %71, i32 0, i32 0, !dbg !12569
  %72 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !12569
  %73 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !12571
  %cmp66 = icmp eq %struct.rtx_def* %72, %73, !dbg !12572
  br i1 %cmp66, label %land.lhs.true68, label %if.end134, !dbg !12573

land.lhs.true68:                                  ; preds = %while.end
  %74 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !12574
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !12574
  %bf.load69 = load i32, i32* %75, align 8, !dbg !12574
  %bf.clear70 = and i32 %bf.load69, 65535, !dbg !12574
  %cmp71 = icmp eq i32 %bf.clear70, 12, !dbg !12574
  br i1 %cmp71, label %if.then73, label %if.end134, !dbg !12575

if.then73:                                        ; preds = %land.lhs.true68
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei2, metadata !12576, metadata !DIExpression()), !dbg !12578
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !12579
  %preds75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %76, i32 0, i32 0, !dbg !12579
  %call76 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds75), !dbg !12579
  %77 = bitcast %struct.edge_iterator* %tmp74 to { i32, %struct.VEC_edge_gc** }*, !dbg !12579
  %78 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %77, i32 0, i32 0, !dbg !12579
  %79 = extractvalue { i32, %struct.VEC_edge_gc** } %call76, 0, !dbg !12579
  store i32 %79, i32* %78, align 8, !dbg !12579
  %80 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %77, i32 0, i32 1, !dbg !12579
  %81 = extractvalue { i32, %struct.VEC_edge_gc** } %call76, 1, !dbg !12579
  store %struct.VEC_edge_gc** %81, %struct.VEC_edge_gc*** %80, align 8, !dbg !12579
  %82 = bitcast %struct.edge_iterator* %ei2 to i8*, !dbg !12579
  %83 = bitcast %struct.edge_iterator* %tmp74 to i8*, !dbg !12579
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 16, i1 false), !dbg !12579
  br label %for.cond77, !dbg !12581

for.cond77:                                       ; preds = %if.end120, %if.else118, %if.then116, %if.then112, %if.then101, %if.then86, %if.then73
  %84 = bitcast %struct.edge_iterator* %ei2 to { i32, %struct.VEC_edge_gc** }*, !dbg !12582
  %85 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %84, i32 0, i32 0, !dbg !12582
  %86 = load i32, i32* %85, align 8, !dbg !12582
  %87 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %84, i32 0, i32 1, !dbg !12582
  %88 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %87, align 8, !dbg !12582
  %call78 = call %struct.edge_def* @ei_safe_edge(i32 %86, %struct.VEC_edge_gc** %88), !dbg !12582
  store %struct.edge_def* %call78, %struct.edge_def** %e, align 8, !dbg !12584
  %tobool79 = icmp ne %struct.edge_def* %call78, null, !dbg !12585
  br i1 %tobool79, label %for.body80, label %for.end123, !dbg !12585

for.body80:                                       ; preds = %for.cond77
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !12586, metadata !DIExpression()), !dbg !12588
  %89 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12589
  %src81 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %89, i32 0, i32 0, !dbg !12590
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %src81, align 8, !dbg !12590
  store %struct.basic_block_def* %90, %struct.basic_block_def** %bb, align 8, !dbg !12588
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !12591, metadata !DIExpression()), !dbg !12592
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12593
  %92 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12595
  %cfg82 = getelementptr inbounds %struct.function, %struct.function* %92, i32 0, i32 1, !dbg !12595
  %93 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg82, align 8, !dbg !12595
  %x_entry_block_ptr83 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %93, i32 0, i32 0, !dbg !12595
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr83, align 8, !dbg !12595
  %cmp84 = icmp eq %struct.basic_block_def* %91, %94, !dbg !12596
  br i1 %cmp84, label %if.then86, label %if.end87, !dbg !12597

if.then86:                                        ; preds = %for.body80
  call void @ei_next(%struct.edge_iterator* %ei2), !dbg !12598
  br label %for.cond77, !dbg !12600, !llvm.loop !12601

if.end87:                                         ; preds = %for.body80
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12603
  %il88 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 7, !dbg !12603
  %rtl89 = bitcast %union.basic_block_il_dependent* %il88 to %struct.rtl_bb_info**, !dbg !12603
  %96 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl89, align 8, !dbg !12603
  %end_90 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %96, i32 0, i32 1, !dbg !12603
  %97 = load %struct.rtx_def*, %struct.rtx_def** %end_90, align 8, !dbg !12603
  store %struct.rtx_def* %97, %struct.rtx_def** %jump, align 8, !dbg !12604
  %98 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !12605
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !12605
  %bf.load91 = load i32, i32* %99, align 8, !dbg !12605
  %bf.clear92 = and i32 %bf.load91, 65535, !dbg !12605
  %cmp93 = icmp eq i32 %bf.clear92, 9, !dbg !12605
  br i1 %cmp93, label %lor.lhs.false, label %if.then101, !dbg !12607

lor.lhs.false:                                    ; preds = %if.end87
  %100 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !12608
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1, !dbg !12608
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !12608
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 8, !dbg !12608
  %rt_rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**, !dbg !12608
  %101 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx98, align 8, !dbg !12608
  %102 = load %struct.rtx_def*, %struct.rtx_def** %label, align 8, !dbg !12609
  %cmp99 = icmp ne %struct.rtx_def* %101, %102, !dbg !12610
  br i1 %cmp99, label %if.then101, label %if.end102, !dbg !12611

if.then101:                                       ; preds = %lor.lhs.false, %if.end87
  call void @ei_next(%struct.edge_iterator* %ei2), !dbg !12612
  br label %for.cond77, !dbg !12614, !llvm.loop !12601

if.end102:                                        ; preds = %lor.lhs.false
  %103 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !12615
  %call103 = call i32 @simplejump_p(%struct.rtx_def* %103), !dbg !12617
  %tobool104 = icmp ne i32 %call103, 0, !dbg !12617
  br i1 %tobool104, label %if.then105, label %if.else, !dbg !12618

if.then105:                                       ; preds = %if.end102
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12619
  call void @emit_return_into_block(%struct.basic_block_def* %104), !dbg !12621
  %105 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !12622
  %call106 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %105), !dbg !12623
  br label %if.end120, !dbg !12624

if.else:                                          ; preds = %if.end102
  %106 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !12625
  %call107 = call i32 @condjump_p(%struct.rtx_def* %106), !dbg !12627
  %tobool108 = icmp ne i32 %call107, 0, !dbg !12627
  br i1 %tobool108, label %if.then109, label %if.else118, !dbg !12628

if.then109:                                       ; preds = %if.else
  %107 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !12629
  %call110 = call i32 @redirect_jump(%struct.rtx_def* %107, %struct.rtx_def* null, i32 0), !dbg !12632
  %tobool111 = icmp ne i32 %call110, 0, !dbg !12632
  br i1 %tobool111, label %if.end113, label %if.then112, !dbg !12633

if.then112:                                       ; preds = %if.then109
  call void @ei_next(%struct.edge_iterator* %ei2), !dbg !12634
  br label %for.cond77, !dbg !12636, !llvm.loop !12601

if.end113:                                        ; preds = %if.then109
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !12637
  %call114 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %108), !dbg !12639
  %tobool115 = icmp ne i8 %call114, 0, !dbg !12639
  br i1 %tobool115, label %if.then116, label %if.end117, !dbg !12640

if.then116:                                       ; preds = %if.end113
  call void @ei_next(%struct.edge_iterator* %ei2), !dbg !12641
  br label %for.cond77, !dbg !12643, !llvm.loop !12601

if.end117:                                        ; preds = %if.end113
  br label %if.end119, !dbg !12644

if.else118:                                       ; preds = %if.else
  call void @ei_next(%struct.edge_iterator* %ei2), !dbg !12645
  br label %for.cond77, !dbg !12647, !llvm.loop !12601

if.end119:                                        ; preds = %if.end117
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %if.then105
  %109 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12648
  %110 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12649
  %cfg121 = getelementptr inbounds %struct.function, %struct.function* %110, i32 0, i32 1, !dbg !12649
  %111 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg121, align 8, !dbg !12649
  %x_exit_block_ptr122 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %111, i32 0, i32 1, !dbg !12649
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr122, align 8, !dbg !12649
  call void @redirect_edge_succ(%struct.edge_def* %109, %struct.basic_block_def* %112), !dbg !12650
  br label %for.cond77, !dbg !12651, !llvm.loop !12601

for.end123:                                       ; preds = %for.cond77
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !12652
  %il124 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %113, i32 0, i32 7, !dbg !12652
  %rtl125 = bitcast %union.basic_block_il_dependent* %il124 to %struct.rtl_bb_info**, !dbg !12652
  %114 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl125, align 8, !dbg !12652
  %end_126 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %114, i32 0, i32 1, !dbg !12652
  %115 = load %struct.rtx_def*, %struct.rtx_def** %end_126, align 8, !dbg !12652
  %call127 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %115), !dbg !12653
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !12654
  call void @emit_return_into_block(%struct.basic_block_def* %116), !dbg !12655
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !12656
  %il128 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %117, i32 0, i32 7, !dbg !12656
  %rtl129 = bitcast %union.basic_block_il_dependent* %il128 to %struct.rtl_bb_info**, !dbg !12656
  %118 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl129, align 8, !dbg !12656
  %end_130 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %118, i32 0, i32 1, !dbg !12656
  %119 = load %struct.rtx_def*, %struct.rtx_def** %end_130, align 8, !dbg !12656
  store %struct.rtx_def* %119, %struct.rtx_def** %epilogue_end, align 8, !dbg !12657
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !12658
  %call131 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %120), !dbg !12659
  %flags132 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call131, i32 0, i32 7, !dbg !12660
  %121 = load i32, i32* %flags132, align 8, !dbg !12661
  %and133 = and i32 %121, -2, !dbg !12661
  store i32 %and133, i32* %flags132, align 8, !dbg !12661
  br label %epilogue_done, !dbg !12662

if.end134:                                        ; preds = %land.lhs.true68, %while.end
  br label %if.end135, !dbg !12663

if.end135:                                        ; preds = %if.end134, %land.lhs.true33, %if.end29
  store i32 1, i32* @epilogue_completed, align 4, !dbg !12664
  %122 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12665
  %cfg137 = getelementptr inbounds %struct.function, %struct.function* %122, i32 0, i32 1, !dbg !12665
  %123 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg137, align 8, !dbg !12665
  %x_exit_block_ptr138 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %123, i32 0, i32 1, !dbg !12665
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr138, align 8, !dbg !12665
  %preds139 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %124, i32 0, i32 0, !dbg !12665
  %call140 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds139), !dbg !12665
  %125 = bitcast %struct.edge_iterator* %tmp136 to { i32, %struct.VEC_edge_gc** }*, !dbg !12665
  %126 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %125, i32 0, i32 0, !dbg !12665
  %127 = extractvalue { i32, %struct.VEC_edge_gc** } %call140, 0, !dbg !12665
  store i32 %127, i32* %126, align 8, !dbg !12665
  %128 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %125, i32 0, i32 1, !dbg !12665
  %129 = extractvalue { i32, %struct.VEC_edge_gc** } %call140, 1, !dbg !12665
  store %struct.VEC_edge_gc** %129, %struct.VEC_edge_gc*** %128, align 8, !dbg !12665
  %130 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !12665
  %131 = bitcast %struct.edge_iterator* %tmp136 to i8*, !dbg !12665
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* align 8 %131, i64 16, i1 false), !dbg !12665
  br label %for.cond141, !dbg !12665

for.cond141:                                      ; preds = %for.inc181, %if.end135
  %132 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !12667
  %133 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %132, i32 0, i32 0, !dbg !12667
  %134 = load i32, i32* %133, align 8, !dbg !12667
  %135 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %132, i32 0, i32 1, !dbg !12667
  %136 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %135, align 8, !dbg !12667
  %call142 = call zeroext i8 @ei_cond(i32 %134, %struct.VEC_edge_gc** %136, %struct.edge_def** %e), !dbg !12667
  %tobool143 = icmp ne i8 %call142, 0, !dbg !12665
  br i1 %tobool143, label %for.body144, label %for.end182, !dbg !12665

for.body144:                                      ; preds = %for.cond141
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !12669, metadata !DIExpression()), !dbg !12671
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last145, metadata !12672, metadata !DIExpression()), !dbg !12673
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %trial, metadata !12674, metadata !DIExpression()), !dbg !12675
  %137 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12676
  %flags146 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %137, i32 0, i32 7, !dbg !12678
  %138 = load i32, i32* %flags146, align 8, !dbg !12678
  %and147 = and i32 %138, 1, !dbg !12679
  %tobool148 = icmp ne i32 %and147, 0, !dbg !12679
  br i1 %tobool148, label %if.then149, label %if.end150, !dbg !12680

if.then149:                                       ; preds = %for.body144
  br label %for.inc181, !dbg !12681

if.end150:                                        ; preds = %for.body144
  %139 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12682
  %src151 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %139, i32 0, i32 0, !dbg !12682
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %src151, align 8, !dbg !12682
  %il152 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %140, i32 0, i32 7, !dbg !12682
  %rtl153 = bitcast %union.basic_block_il_dependent* %il152 to %struct.rtl_bb_info**, !dbg !12682
  %141 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl153, align 8, !dbg !12682
  %end_154 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %141, i32 0, i32 1, !dbg !12682
  %142 = load %struct.rtx_def*, %struct.rtx_def** %end_154, align 8, !dbg !12682
  store %struct.rtx_def* %142, %struct.rtx_def** %last145, align 8, !dbg !12683
  %143 = load %struct.rtx_def*, %struct.rtx_def** %last145, align 8, !dbg !12684
  %call155 = call i32 @eh_returnjump_p(%struct.rtx_def* %143), !dbg !12686
  %tobool156 = icmp ne i32 %call155, 0, !dbg !12686
  br i1 %tobool156, label %if.end158, label %if.then157, !dbg !12687

if.then157:                                       ; preds = %if.end150
  br label %for.inc181, !dbg !12688

if.end158:                                        ; preds = %if.end150
  %144 = load %struct.rtx_def*, %struct.rtx_def** %last145, align 8, !dbg !12689
  %u159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1, !dbg !12689
  %fld160 = bitcast %union.u* %u159 to [1 x %union.rtunion_def]*, !dbg !12689
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i64 0, i64 1, !dbg !12689
  %rt_rtx162 = bitcast %union.rtunion_def* %arrayidx161 to %struct.rtx_def**, !dbg !12689
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx162, align 8, !dbg !12689
  store %struct.rtx_def* %145, %struct.rtx_def** %prev, align 8, !dbg !12690
  %146 = load %struct.rtx_def*, %struct.rtx_def** %last145, align 8, !dbg !12691
  %u163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1, !dbg !12691
  %fld164 = bitcast %union.u* %u163 to [1 x %union.rtunion_def]*, !dbg !12691
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i64 0, i64 5, !dbg !12691
  %rt_rtx166 = bitcast %union.rtunion_def* %arrayidx165 to %struct.rtx_def**, !dbg !12691
  %147 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx166, align 8, !dbg !12691
  %148 = load %struct.rtx_def*, %struct.rtx_def** %last145, align 8, !dbg !12692
  %call167 = call %struct.rtx_def* @try_split(%struct.rtx_def* %147, %struct.rtx_def* %148, i32 1), !dbg !12693
  store %struct.rtx_def* %call167, %struct.rtx_def** %trial, align 8, !dbg !12694
  %149 = load %struct.rtx_def*, %struct.rtx_def** %trial, align 8, !dbg !12695
  %150 = load %struct.rtx_def*, %struct.rtx_def** %last145, align 8, !dbg !12697
  %cmp168 = icmp eq %struct.rtx_def* %149, %150, !dbg !12698
  br i1 %cmp168, label %if.then170, label %if.end171, !dbg !12699

if.then170:                                       ; preds = %if.end158
  br label %for.inc181, !dbg !12700

if.end171:                                        ; preds = %if.end158
  %151 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !12701
  %u172 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1, !dbg !12701
  %fld173 = bitcast %union.u* %u172 to [1 x %union.rtunion_def]*, !dbg !12701
  %arrayidx174 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld173, i64 0, i64 2, !dbg !12701
  %rt_rtx175 = bitcast %union.rtunion_def* %arrayidx174 to %struct.rtx_def**, !dbg !12701
  %152 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx175, align 8, !dbg !12701
  %153 = load %struct.rtx_def*, %struct.rtx_def** %trial, align 8, !dbg !12702
  %u176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %153, i32 0, i32 1, !dbg !12702
  %fld177 = bitcast %union.u* %u176 to [1 x %union.rtunion_def]*, !dbg !12702
  %arrayidx178 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld177, i64 0, i64 2, !dbg !12702
  %rt_rtx179 = bitcast %union.rtunion_def* %arrayidx178 to %struct.rtx_def**, !dbg !12702
  %154 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx179, align 8, !dbg !12702
  call void @record_insns(%struct.rtx_def* %152, %struct.rtx_def* %154, %struct.htab** @epilogue_insn_hash), !dbg !12703
  %155 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !12704
  %call180 = call %struct.rtx_def* @emit_note_after(i32 6, %struct.rtx_def* %155), !dbg !12705
  br label %for.inc181, !dbg !12706

for.inc181:                                       ; preds = %if.end171, %if.then170, %if.then157, %if.then149
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12667
  br label %for.cond141, !dbg !12667, !llvm.loop !12707

for.end182:                                       ; preds = %for.cond141
  %156 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12709
  %cfg184 = getelementptr inbounds %struct.function, %struct.function* %156, i32 0, i32 1, !dbg !12709
  %157 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg184, align 8, !dbg !12709
  %x_exit_block_ptr185 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %157, i32 0, i32 1, !dbg !12709
  %158 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr185, align 8, !dbg !12709
  %preds186 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %158, i32 0, i32 0, !dbg !12709
  %call187 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds186), !dbg !12709
  %159 = bitcast %struct.edge_iterator* %tmp183 to { i32, %struct.VEC_edge_gc** }*, !dbg !12709
  %160 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %159, i32 0, i32 0, !dbg !12709
  %161 = extractvalue { i32, %struct.VEC_edge_gc** } %call187, 0, !dbg !12709
  store i32 %161, i32* %160, align 8, !dbg !12709
  %162 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %159, i32 0, i32 1, !dbg !12709
  %163 = extractvalue { i32, %struct.VEC_edge_gc** } %call187, 1, !dbg !12709
  store %struct.VEC_edge_gc** %163, %struct.VEC_edge_gc*** %162, align 8, !dbg !12709
  %164 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !12709
  %165 = bitcast %struct.edge_iterator* %tmp183 to i8*, !dbg !12709
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %164, i8* align 8 %165, i64 16, i1 false), !dbg !12709
  br label %for.cond188, !dbg !12709

for.cond188:                                      ; preds = %for.inc197, %for.end182
  %166 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !12711
  %167 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %166, i32 0, i32 0, !dbg !12711
  %168 = load i32, i32* %167, align 8, !dbg !12711
  %169 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %166, i32 0, i32 1, !dbg !12711
  %170 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %169, align 8, !dbg !12711
  %call189 = call zeroext i8 @ei_cond(i32 %168, %struct.VEC_edge_gc** %170, %struct.edge_def** %e), !dbg !12711
  %tobool190 = icmp ne i8 %call189, 0, !dbg !12709
  br i1 %tobool190, label %for.body191, label %for.end198, !dbg !12709

for.body191:                                      ; preds = %for.cond188
  %171 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12713
  %flags192 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %171, i32 0, i32 7, !dbg !12715
  %172 = load i32, i32* %flags192, align 8, !dbg !12715
  %and193 = and i32 %172, 1, !dbg !12716
  %tobool194 = icmp ne i32 %and193, 0, !dbg !12716
  br i1 %tobool194, label %if.then195, label %if.end196, !dbg !12717

if.then195:                                       ; preds = %for.body191
  br label %for.end198, !dbg !12718

if.end196:                                        ; preds = %for.body191
  br label %for.inc197, !dbg !12719

for.inc197:                                       ; preds = %if.end196
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12711
  br label %for.cond188, !dbg !12711, !llvm.loop !12720

for.end198:                                       ; preds = %if.then195, %for.cond188
  %173 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12722
  %cmp199 = icmp eq %struct.edge_def* %173, null, !dbg !12724
  br i1 %cmp199, label %if.then201, label %if.end202, !dbg !12725

if.then201:                                       ; preds = %for.end198
  br label %epilogue_done, !dbg !12726

if.end202:                                        ; preds = %for.end198
  call void @start_sequence(), !dbg !12727
  %call203 = call %struct.rtx_def* @emit_note(i32 6), !dbg !12730
  store %struct.rtx_def* %call203, %struct.rtx_def** %epilogue_end, align 8, !dbg !12731
  %call204 = call %struct.rtx_def* @gen_epilogue(), !dbg !12732
  store %struct.rtx_def* %call204, %struct.rtx_def** %seq, align 8, !dbg !12733
  %174 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12734
  %call205 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %174), !dbg !12735
  %175 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12736
  call void @record_insns(%struct.rtx_def* %175, %struct.rtx_def* null, %struct.htab** @epilogue_insn_hash), !dbg !12737
  %176 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12738
  %177 = load i32, i32* @epilogue_locator, align 4, !dbg !12739
  call void @set_insn_locators(%struct.rtx_def* %176, i32 %177), !dbg !12740
  %call206 = call %struct.rtx_def* @get_insns(), !dbg !12741
  store %struct.rtx_def* %call206, %struct.rtx_def** %seq, align 8, !dbg !12742
  call void @end_sequence(), !dbg !12743
  %178 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12744
  %179 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12745
  call void @insert_insn_on_edge(%struct.rtx_def* %178, %struct.edge_def* %179), !dbg !12746
  store i32 1, i32* %inserted, align 4, !dbg !12747
  br label %epilogue_done, !dbg !12748

epilogue_done:                                    ; preds = %if.end202, %if.then201, %for.end123, %if.then55, %if.then28
  call void @llvm.dbg.label(metadata !12749), !dbg !12750
  call void @default_rtl_profile(), !dbg !12751
  %180 = load i32, i32* %inserted, align 4, !dbg !12752
  %tobool207 = icmp ne i32 %180, 0, !dbg !12752
  br i1 %tobool207, label %if.then208, label %if.end235, !dbg !12754

if.then208:                                       ; preds = %epilogue_done
  call void @commit_edge_insertions(), !dbg !12755
  %181 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12757
  %cfg210 = getelementptr inbounds %struct.function, %struct.function* %181, i32 0, i32 1, !dbg !12757
  %182 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg210, align 8, !dbg !12757
  %x_exit_block_ptr211 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %182, i32 0, i32 1, !dbg !12757
  %183 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr211, align 8, !dbg !12757
  %preds212 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %183, i32 0, i32 0, !dbg !12757
  %call213 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds212), !dbg !12757
  %184 = bitcast %struct.edge_iterator* %tmp209 to { i32, %struct.VEC_edge_gc** }*, !dbg !12757
  %185 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %184, i32 0, i32 0, !dbg !12757
  %186 = extractvalue { i32, %struct.VEC_edge_gc** } %call213, 0, !dbg !12757
  store i32 %186, i32* %185, align 8, !dbg !12757
  %187 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %184, i32 0, i32 1, !dbg !12757
  %188 = extractvalue { i32, %struct.VEC_edge_gc** } %call213, 1, !dbg !12757
  store %struct.VEC_edge_gc** %188, %struct.VEC_edge_gc*** %187, align 8, !dbg !12757
  %189 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !12757
  %190 = bitcast %struct.edge_iterator* %tmp209 to i8*, !dbg !12757
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %189, i8* align 8 %190, i64 16, i1 false), !dbg !12757
  br label %for.cond214, !dbg !12757

for.cond214:                                      ; preds = %for.inc233, %if.then208
  %191 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !12759
  %192 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %191, i32 0, i32 0, !dbg !12759
  %193 = load i32, i32* %192, align 8, !dbg !12759
  %194 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %191, i32 0, i32 1, !dbg !12759
  %195 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %194, align 8, !dbg !12759
  %call215 = call zeroext i8 @ei_cond(i32 %193, %struct.VEC_edge_gc** %195, %struct.edge_def** %e), !dbg !12759
  %tobool216 = icmp ne i8 %call215, 0, !dbg !12757
  br i1 %tobool216, label %for.body217, label %for.end234, !dbg !12757

for.body217:                                      ; preds = %for.cond214
  %196 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12761
  %flags218 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %196, i32 0, i32 7, !dbg !12764
  %197 = load i32, i32* %flags218, align 8, !dbg !12764
  %and219 = and i32 %197, 1, !dbg !12765
  %cmp220 = icmp ne i32 %and219, 0, !dbg !12766
  br i1 %cmp220, label %land.lhs.true222, label %if.end232, !dbg !12767

land.lhs.true222:                                 ; preds = %for.body217
  %198 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12768
  %src223 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %198, i32 0, i32 0, !dbg !12768
  %199 = load %struct.basic_block_def*, %struct.basic_block_def** %src223, align 8, !dbg !12768
  %il224 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %199, i32 0, i32 7, !dbg !12768
  %rtl225 = bitcast %union.basic_block_il_dependent* %il224 to %struct.rtl_bb_info**, !dbg !12768
  %200 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl225, align 8, !dbg !12768
  %end_226 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %200, i32 0, i32 1, !dbg !12768
  %201 = load %struct.rtx_def*, %struct.rtx_def** %end_226, align 8, !dbg !12768
  %call227 = call i32 @returnjump_p(%struct.rtx_def* %201), !dbg !12769
  %tobool228 = icmp ne i32 %call227, 0, !dbg !12769
  br i1 %tobool228, label %if.then229, label %if.end232, !dbg !12770

if.then229:                                       ; preds = %land.lhs.true222
  %202 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12771
  %flags230 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %202, i32 0, i32 7, !dbg !12772
  %203 = load i32, i32* %flags230, align 8, !dbg !12773
  %and231 = and i32 %203, -2, !dbg !12773
  store i32 %and231, i32* %flags230, align 8, !dbg !12773
  br label %if.end232, !dbg !12771

if.end232:                                        ; preds = %if.then229, %land.lhs.true222, %for.body217
  br label %for.inc233, !dbg !12774

for.inc233:                                       ; preds = %if.end232
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12759
  br label %for.cond214, !dbg !12759, !llvm.loop !12775

for.end234:                                       ; preds = %for.cond214
  br label %if.end235, !dbg !12777

if.end235:                                        ; preds = %for.end234, %epilogue_done
  %204 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !12778
  %cfg237 = getelementptr inbounds %struct.function, %struct.function* %204, i32 0, i32 1, !dbg !12778
  %205 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg237, align 8, !dbg !12778
  %x_exit_block_ptr238 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %205, i32 0, i32 1, !dbg !12778
  %206 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr238, align 8, !dbg !12778
  %preds239 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %206, i32 0, i32 0, !dbg !12778
  %call240 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds239), !dbg !12778
  %207 = bitcast %struct.edge_iterator* %tmp236 to { i32, %struct.VEC_edge_gc** }*, !dbg !12778
  %208 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %207, i32 0, i32 0, !dbg !12778
  %209 = extractvalue { i32, %struct.VEC_edge_gc** } %call240, 0, !dbg !12778
  store i32 %209, i32* %208, align 8, !dbg !12778
  %210 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %207, i32 0, i32 1, !dbg !12778
  %211 = extractvalue { i32, %struct.VEC_edge_gc** } %call240, 1, !dbg !12778
  store %struct.VEC_edge_gc** %211, %struct.VEC_edge_gc*** %210, align 8, !dbg !12778
  %212 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !12778
  %213 = bitcast %struct.edge_iterator* %tmp236 to i8*, !dbg !12778
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %212, i8* align 8 %213, i64 16, i1 false), !dbg !12778
  br label %for.cond241, !dbg !12780

for.cond241:                                      ; preds = %if.end259, %if.then258, %if.end235
  %214 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !12781
  %215 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %214, i32 0, i32 0, !dbg !12781
  %216 = load i32, i32* %215, align 8, !dbg !12781
  %217 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %214, i32 0, i32 1, !dbg !12781
  %218 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %217, align 8, !dbg !12781
  %call242 = call %struct.edge_def* @ei_safe_edge(i32 %216, %struct.VEC_edge_gc** %218), !dbg !12781
  store %struct.edge_def* %call242, %struct.edge_def** %e, align 8, !dbg !12783
  %tobool243 = icmp ne %struct.edge_def* %call242, null, !dbg !12784
  br i1 %tobool243, label %for.body244, label %for.end265, !dbg !12784

for.body244:                                      ; preds = %for.cond241
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb245, metadata !12785, metadata !DIExpression()), !dbg !12787
  %219 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12788
  %src246 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %219, i32 0, i32 0, !dbg !12789
  %220 = load %struct.basic_block_def*, %struct.basic_block_def** %src246, align 8, !dbg !12789
  store %struct.basic_block_def* %220, %struct.basic_block_def** %bb245, align 8, !dbg !12787
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !12790, metadata !DIExpression()), !dbg !12791
  %221 = load %struct.basic_block_def*, %struct.basic_block_def** %bb245, align 8, !dbg !12792
  %il247 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %221, i32 0, i32 7, !dbg !12792
  %rtl248 = bitcast %union.basic_block_il_dependent* %il247 to %struct.rtl_bb_info**, !dbg !12792
  %222 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl248, align 8, !dbg !12792
  %end_249 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %222, i32 0, i32 1, !dbg !12792
  %223 = load %struct.rtx_def*, %struct.rtx_def** %end_249, align 8, !dbg !12792
  store %struct.rtx_def* %223, %struct.rtx_def** %insn, align 8, !dbg !12791
  %224 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !12793
  %225 = bitcast %struct.rtx_def* %224 to i32*, !dbg !12793
  %bf.load250 = load i32, i32* %225, align 8, !dbg !12793
  %bf.clear251 = and i32 %bf.load250, 65535, !dbg !12793
  %cmp252 = icmp eq i32 %bf.clear251, 10, !dbg !12793
  br i1 %cmp252, label %lor.lhs.false254, label %if.then258, !dbg !12795

lor.lhs.false254:                                 ; preds = %for.body244
  %226 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !12796
  %227 = bitcast %struct.rtx_def* %226 to i32*, !dbg !12796
  %bf.load255 = load i32, i32* %227, align 8, !dbg !12796
  %bf.lshr = lshr i32 %bf.load255, 24, !dbg !12796
  %bf.clear256 = and i32 %bf.lshr, 1, !dbg !12796
  %tobool257 = icmp ne i32 %bf.clear256, 0, !dbg !12796
  br i1 %tobool257, label %if.end259, label %if.then258, !dbg !12797

if.then258:                                       ; preds = %lor.lhs.false254, %for.body244
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12798
  br label %for.cond241, !dbg !12800, !llvm.loop !12801

if.end259:                                        ; preds = %lor.lhs.false254
  call void @start_sequence(), !dbg !12803
  %call260 = call %struct.rtx_def* @emit_note(i32 6), !dbg !12804
  %call261 = call %struct.rtx_def* @gen_sibcall_epilogue(), !dbg !12805
  %call262 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call261), !dbg !12806
  %call263 = call %struct.rtx_def* @get_insns(), !dbg !12807
  store %struct.rtx_def* %call263, %struct.rtx_def** %seq, align 8, !dbg !12808
  call void @end_sequence(), !dbg !12809
  %228 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12810
  call void @record_insns(%struct.rtx_def* %228, %struct.rtx_def* null, %struct.htab** @epilogue_insn_hash), !dbg !12811
  %229 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12812
  %230 = load i32, i32* @epilogue_locator, align 4, !dbg !12813
  call void @set_insn_locators(%struct.rtx_def* %229, i32 %230), !dbg !12814
  %231 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !12815
  %232 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !12816
  %call264 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %231, %struct.rtx_def* %232), !dbg !12817
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12818
  br label %for.cond241, !dbg !12819, !llvm.loop !12801

for.end265:                                       ; preds = %for.cond241
  %233 = load %struct.rtx_def*, %struct.rtx_def** %epilogue_end, align 8, !dbg !12820
  %tobool266 = icmp ne %struct.rtx_def* %233, null, !dbg !12820
  br i1 %tobool266, label %if.then267, label %if.end294, !dbg !12822

if.then267:                                       ; preds = %for.end265
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn268, metadata !12823, metadata !DIExpression()), !dbg !12825
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !12826, metadata !DIExpression()), !dbg !12827
  %234 = load %struct.rtx_def*, %struct.rtx_def** %epilogue_end, align 8, !dbg !12828
  store %struct.rtx_def* %234, %struct.rtx_def** %insn268, align 8, !dbg !12830
  br label %for.cond269, !dbg !12831

for.cond269:                                      ; preds = %for.inc292, %if.then267
  %235 = load %struct.rtx_def*, %struct.rtx_def** %insn268, align 8, !dbg !12832
  %tobool270 = icmp ne %struct.rtx_def* %235, null, !dbg !12834
  br i1 %tobool270, label %for.body271, label %for.end293, !dbg !12834

for.body271:                                      ; preds = %for.cond269
  %236 = load %struct.rtx_def*, %struct.rtx_def** %insn268, align 8, !dbg !12835
  %u272 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %236, i32 0, i32 1, !dbg !12835
  %fld273 = bitcast %union.u* %u272 to [1 x %union.rtunion_def]*, !dbg !12835
  %arrayidx274 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld273, i64 0, i64 2, !dbg !12835
  %rt_rtx275 = bitcast %union.rtunion_def* %arrayidx274 to %struct.rtx_def**, !dbg !12835
  %237 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx275, align 8, !dbg !12835
  store %struct.rtx_def* %237, %struct.rtx_def** %next, align 8, !dbg !12837
  %238 = load %struct.rtx_def*, %struct.rtx_def** %insn268, align 8, !dbg !12838
  %239 = bitcast %struct.rtx_def* %238 to i32*, !dbg !12838
  %bf.load276 = load i32, i32* %239, align 8, !dbg !12838
  %bf.clear277 = and i32 %bf.load276, 65535, !dbg !12838
  %cmp278 = icmp eq i32 %bf.clear277, 13, !dbg !12838
  br i1 %cmp278, label %land.lhs.true280, label %if.end291, !dbg !12840

land.lhs.true280:                                 ; preds = %for.body271
  %240 = load %struct.rtx_def*, %struct.rtx_def** %insn268, align 8, !dbg !12841
  %u281 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %240, i32 0, i32 1, !dbg !12841
  %fld282 = bitcast %union.u* %u281 to [1 x %union.rtunion_def]*, !dbg !12841
  %arrayidx283 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld282, i64 0, i64 5, !dbg !12841
  %rt_int = bitcast %union.rtunion_def* %arrayidx283 to i32*, !dbg !12841
  %241 = load i32, i32* %rt_int, align 8, !dbg !12841
  %cmp284 = icmp eq i32 %241, 4, !dbg !12842
  br i1 %cmp284, label %if.then286, label %if.end291, !dbg !12843

if.then286:                                       ; preds = %land.lhs.true280
  %242 = load %struct.rtx_def*, %struct.rtx_def** %insn268, align 8, !dbg !12844
  %243 = load %struct.rtx_def*, %struct.rtx_def** %insn268, align 8, !dbg !12845
  %244 = load %struct.rtx_def*, %struct.rtx_def** %epilogue_end, align 8, !dbg !12846
  %u287 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %244, i32 0, i32 1, !dbg !12846
  %fld288 = bitcast %union.u* %u287 to [1 x %union.rtunion_def]*, !dbg !12846
  %arrayidx289 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld288, i64 0, i64 1, !dbg !12846
  %rt_rtx290 = bitcast %union.rtunion_def* %arrayidx289 to %struct.rtx_def**, !dbg !12846
  %245 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx290, align 8, !dbg !12846
  call void @reorder_insns(%struct.rtx_def* %242, %struct.rtx_def* %243, %struct.rtx_def* %245), !dbg !12847
  br label %if.end291, !dbg !12847

if.end291:                                        ; preds = %if.then286, %land.lhs.true280, %for.body271
  br label %for.inc292, !dbg !12848

for.inc292:                                       ; preds = %if.end291
  %246 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !12849
  store %struct.rtx_def* %246, %struct.rtx_def** %insn268, align 8, !dbg !12850
  br label %for.cond269, !dbg !12851, !llvm.loop !12852

for.end293:                                       ; preds = %for.cond269
  br label %if.end294, !dbg !12854

if.end294:                                        ; preds = %for.end293, %for.end265
  store i32 1, i32* @epilogue_completed, align 4, !dbg !12855
  call void @df_update_entry_exit_and_calls(), !dbg !12856
  ret void, !dbg !12857
}

declare dso_local void @rtl_profile_for_bb(%struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @gen_prologue() #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_insns(%struct.rtx_def* %insns, %struct.rtx_def* %end, %struct.htab** %hashp) #0 !dbg !12858 {
entry:
  %insns.addr = alloca %struct.rtx_def*, align 8
  %end.addr = alloca %struct.rtx_def*, align 8
  %hashp.addr = alloca %struct.htab**, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %hash = alloca %struct.htab*, align 8
  %slot = alloca i8**, align 8
  store %struct.rtx_def* %insns, %struct.rtx_def** %insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns.addr, metadata !12862, metadata !DIExpression()), !dbg !12863
  store %struct.rtx_def* %end, %struct.rtx_def** %end.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end.addr, metadata !12864, metadata !DIExpression()), !dbg !12865
  store %struct.htab** %hashp, %struct.htab*** %hashp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab*** %hashp.addr, metadata !12866, metadata !DIExpression()), !dbg !12867
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !12868, metadata !DIExpression()), !dbg !12869
  call void @llvm.dbg.declare(metadata %struct.htab** %hash, metadata !12870, metadata !DIExpression()), !dbg !12871
  %0 = load %struct.htab**, %struct.htab*** %hashp.addr, align 8, !dbg !12872
  %1 = load %struct.htab*, %struct.htab** %0, align 8, !dbg !12873
  store %struct.htab* %1, %struct.htab** %hash, align 8, !dbg !12871
  %2 = load %struct.htab*, %struct.htab** %hash, align 8, !dbg !12874
  %cmp = icmp eq %struct.htab* %2, null, !dbg !12876
  br i1 %cmp, label %if.then, label %if.end, !dbg !12877

if.then:                                          ; preds = %entry
  %3 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !12878
  %4 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** @htab_eq_pointer, align 8, !dbg !12878
  %call = call %struct.htab* @htab_create_alloc(i64 17, i32 (i8*)* %3, i32 (i8*, i8*)* %4, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !12878
  store %struct.htab* %call, %struct.htab** %hash, align 8, !dbg !12879
  %5 = load %struct.htab**, %struct.htab*** %hashp.addr, align 8, !dbg !12880
  store %struct.htab* %call, %struct.htab** %5, align 8, !dbg !12881
  br label %if.end, !dbg !12882

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insns.addr, align 8, !dbg !12883
  store %struct.rtx_def* %6, %struct.rtx_def** %tmp, align 8, !dbg !12885
  br label %for.cond, !dbg !12886

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !12887
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !12889
  %cmp1 = icmp ne %struct.rtx_def* %7, %8, !dbg !12890
  br i1 %cmp1, label %for.body, label %for.end, !dbg !12891

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !12892, metadata !DIExpression()), !dbg !12894
  %9 = load %struct.htab*, %struct.htab** %hash, align 8, !dbg !12895
  %10 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !12896
  %11 = bitcast %struct.rtx_def* %10 to i8*, !dbg !12896
  %call2 = call i8** @htab_find_slot(%struct.htab* %9, i8* %11, i32 1), !dbg !12897
  store i8** %call2, i8*** %slot, align 8, !dbg !12894
  %12 = load i8**, i8*** %slot, align 8, !dbg !12898
  %13 = load i8*, i8** %12, align 8, !dbg !12898
  %cmp3 = icmp eq i8* %13, null, !dbg !12898
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !12898

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 4927, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12898
  br label %cond.end, !dbg !12898

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !12898

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12898
  %14 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !12899
  %15 = bitcast %struct.rtx_def* %14 to i8*, !dbg !12899
  %16 = load i8**, i8*** %slot, align 8, !dbg !12900
  store i8* %15, i8** %16, align 8, !dbg !12901
  br label %for.inc, !dbg !12902

for.inc:                                          ; preds = %cond.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !12903
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !12903
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12903
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !12903
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !12903
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !12903
  store %struct.rtx_def* %18, %struct.rtx_def** %tmp, align 8, !dbg !12904
  br label %for.cond, !dbg !12905, !llvm.loop !12906

for.end:                                          ; preds = %for.cond
  ret void, !dbg !12908
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_insn_locators(%struct.rtx_def* %insn, i32 %loc) #0 !dbg !12909 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %loc.addr = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !12912, metadata !DIExpression()), !dbg !12913
  store i32 %loc, i32* %loc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loc.addr, metadata !12914, metadata !DIExpression()), !dbg !12915
  br label %while.cond, !dbg !12916

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12917
  %cmp = icmp ne %struct.rtx_def* %0, null, !dbg !12918
  br i1 %cmp, label %while.body, label %while.end, !dbg !12916

while.body:                                       ; preds = %while.cond
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12919
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !12919
  %bf.load = load i32, i32* %2, align 8, !dbg !12919
  %bf.clear = and i32 %bf.load, 65535, !dbg !12919
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !12919
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !12919

lor.lhs.false:                                    ; preds = %while.body
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12919
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !12919
  %bf.load2 = load i32, i32* %4, align 8, !dbg !12919
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !12919
  %cmp4 = icmp eq i32 %bf.clear3, 7, !dbg !12919
  br i1 %cmp4, label %if.then, label %lor.lhs.false5, !dbg !12919

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12919
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !12919
  %bf.load6 = load i32, i32* %6, align 8, !dbg !12919
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !12919
  %cmp8 = icmp eq i32 %bf.clear7, 9, !dbg !12919
  br i1 %cmp8, label %if.then, label %lor.lhs.false9, !dbg !12919

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12919
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !12919
  %bf.load10 = load i32, i32* %8, align 8, !dbg !12919
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !12919
  %cmp12 = icmp eq i32 %bf.clear11, 10, !dbg !12919
  br i1 %cmp12, label %if.then, label %if.end, !dbg !12922

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %while.body
  %9 = load i32, i32* %loc.addr, align 4, !dbg !12923
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12924
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !12924
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12924
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 4, !dbg !12924
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !12924
  store i32 %9, i32* %rt_int, align 8, !dbg !12925
  br label %if.end, !dbg !12924

if.end:                                           ; preds = %if.then, %lor.lhs.false9
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12926
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !12926
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !12926
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 2, !dbg !12926
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !12926
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !12926
  store %struct.rtx_def* %12, %struct.rtx_def** %insn.addr, align 8, !dbg !12927
  br label %while.cond, !dbg !12916, !llvm.loop !12928

while.end:                                        ; preds = %while.cond
  ret void, !dbg !12930
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !12931 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12937, metadata !DIExpression()), !dbg !12938
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12939
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !12939
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !12939
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !12939
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12939

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12939
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !12939
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !12939
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !12939
  br label %cond.end, !dbg !12939

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12939

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12939
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !12939
  %cmp = icmp eq i32 %call, 1, !dbg !12940
  %conv = zext i1 %cmp to i32, !dbg !12940
  %conv2 = trunc i32 %conv to i8, !dbg !12939
  ret i8 %conv2, !dbg !12941
}

declare dso_local void @insert_insn_on_edge(%struct.rtx_def*, %struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !12942 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12945, metadata !DIExpression()), !dbg !12946
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12947
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !12947
  %tobool = icmp ne i8 %call, 0, !dbg !12947
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !12947

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !12947
  br label %cond.end, !dbg !12947

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12947

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12947
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12948
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !12948
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !12948
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !12948
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !12948

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12948
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !12948
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !12948
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !12948
  br label %cond.end5, !dbg !12948

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !12948

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !12948
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !12948
  ret %struct.edge_def* %call7, !dbg !12949
}

declare dso_local i32 @ix86_can_use_return_insn_p() #2

declare dso_local i32 @active_insn_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_safe_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !12950 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !12951, metadata !DIExpression()), !dbg !12952
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !12953
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !12953
  %5 = load i32, i32* %4, align 8, !dbg !12953
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !12953
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !12953
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !12953
  %tobool = icmp ne i8 %call, 0, !dbg !12953
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !12954

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !12955
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !12955
  %10 = load i32, i32* %9, align 8, !dbg !12955
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !12955
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !12955
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !12955
  br label %cond.end, !dbg !12954

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12954

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !12954
  ret %struct.edge_def* %cond, !dbg !12956
}

declare dso_local i32 @simplejump_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @emit_return_into_block(%struct.basic_block_def* %bb) #0 !dbg !12957 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12960, metadata !DIExpression()), !dbg !12961
  %call = call %struct.rtx_def* @gen_return(), !dbg !12962
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12963
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !12963
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !12963
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !12963
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !12963
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !12963
  %call1 = call %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %call, %struct.rtx_def* %2), !dbg !12964
  ret void, !dbg !12965
}

declare dso_local i32 @condjump_p(%struct.rtx_def*) #2

declare dso_local i32 @redirect_jump(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @emit_barrier_after(%struct.rtx_def*) #2

declare dso_local i32 @eh_returnjump_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @try_split(%struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local %struct.rtx_def* @emit_note_after(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_epilogue() #2

declare dso_local %struct.rtx_def* @emit_jump_insn(%struct.rtx_def*) #2

declare dso_local void @commit_edge_insertions() #2

declare dso_local i32 @returnjump_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_sibcall_epilogue() #2

declare dso_local void @df_update_entry_exit_and_calls() #2

declare dso_local %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_return() #2

declare dso_local i32 @df_set_flags(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @match_asm_constraints_1(%struct.rtx_def* %insn, %struct.rtx_def** %p_sets, i32 %noutputs) #0 !dbg !12966 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %p_sets.addr = alloca %struct.rtx_def**, align 8
  %noutputs.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %changed = alloca i8, align 1
  %op = alloca %struct.rtx_def*, align 8
  %ninputs = alloca i32, align 4
  %inputs = alloca %struct.rtvec_def*, align 8
  %output_matched = alloca i8*, align 8
  %input = alloca %struct.rtx_def*, align 8
  %output = alloca %struct.rtx_def*, align 8
  %insns = alloca %struct.rtx_def*, align 8
  %constraint = alloca i8*, align 8
  %end = alloca i8*, align 8
  %match = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !12969, metadata !DIExpression()), !dbg !12970
  store %struct.rtx_def** %p_sets, %struct.rtx_def*** %p_sets.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %p_sets.addr, metadata !12971, metadata !DIExpression()), !dbg !12972
  store i32 %noutputs, i32* %noutputs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %noutputs.addr, metadata !12973, metadata !DIExpression()), !dbg !12974
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12975, metadata !DIExpression()), !dbg !12976
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !12977, metadata !DIExpression()), !dbg !12978
  store i8 0, i8* %changed, align 1, !dbg !12978
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op, metadata !12979, metadata !DIExpression()), !dbg !12980
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %p_sets.addr, align 8, !dbg !12981
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %0, i64 0, !dbg !12981
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !12981
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !12981
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12981
  %arrayidx1 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !12981
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx1 to %struct.rtx_def**, !dbg !12981
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !12981
  store %struct.rtx_def* %2, %struct.rtx_def** %op, align 8, !dbg !12980
  call void @llvm.dbg.declare(metadata i32* %ninputs, metadata !12982, metadata !DIExpression()), !dbg !12983
  %3 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8, !dbg !12984
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !12984
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !12984
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 3, !dbg !12984
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtvec_def**, !dbg !12984
  %4 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !12984
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %4, i32 0, i32 0, !dbg !12984
  %5 = load i32, i32* %num_elem, align 8, !dbg !12984
  store i32 %5, i32* %ninputs, align 4, !dbg !12983
  call void @llvm.dbg.declare(metadata %struct.rtvec_def** %inputs, metadata !12985, metadata !DIExpression()), !dbg !12986
  %6 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8, !dbg !12987
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !12987
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !12987
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 3, !dbg !12987
  %rt_rtvec8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtvec_def**, !dbg !12987
  %7 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec8, align 8, !dbg !12987
  store %struct.rtvec_def* %7, %struct.rtvec_def** %inputs, align 8, !dbg !12986
  call void @llvm.dbg.declare(metadata i8** %output_matched, metadata !12988, metadata !DIExpression()), !dbg !12989
  %8 = load i32, i32* %noutputs.addr, align 4, !dbg !12990
  %conv = sext i32 %8 to i64, !dbg !12990
  %mul = mul i64 1, %conv, !dbg !12990
  %9 = alloca i8, i64 %mul, align 16, !dbg !12990
  store i8* %9, i8** %output_matched, align 8, !dbg !12989
  %10 = load i8*, i8** %output_matched, align 8, !dbg !12991
  %11 = load i32, i32* %noutputs.addr, align 4, !dbg !12992
  %conv9 = sext i32 %11 to i64, !dbg !12992
  %mul10 = mul i64 %conv9, 1, !dbg !12993
  call void @llvm.memset.p0i8.i64(i8* align 1 %10, i8 0, i64 %mul10, i1 false), !dbg !12994
  store i32 0, i32* %i, align 4, !dbg !12995
  br label %for.cond, !dbg !12997

for.cond:                                         ; preds = %for.inc167, %entry
  %12 = load i32, i32* %i, align 4, !dbg !12998
  %13 = load i32, i32* %ninputs, align 4, !dbg !13000
  %cmp = icmp slt i32 %12, %13, !dbg !13001
  br i1 %cmp, label %for.body, label %for.end169, !dbg !13002

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %input, metadata !13003, metadata !DIExpression()), !dbg !13005
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %output, metadata !13006, metadata !DIExpression()), !dbg !13007
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !13008, metadata !DIExpression()), !dbg !13009
  call void @llvm.dbg.declare(metadata i8** %constraint, metadata !13010, metadata !DIExpression()), !dbg !13011
  %14 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8, !dbg !13012
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !13012
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !13012
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 4, !dbg !13012
  %rt_rtvec15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtvec_def**, !dbg !13012
  %15 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec15, align 8, !dbg !13012
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %15, i32 0, i32 1, !dbg !13012
  %16 = load i32, i32* %i, align 4, !dbg !13012
  %idxprom = sext i32 %16 to i64, !dbg !13012
  %arrayidx16 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !13012
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx16, align 8, !dbg !13012
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !13012
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !13012
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 0, !dbg !13012
  %rt_str = bitcast %union.rtunion_def* %arrayidx19 to i8**, !dbg !13012
  %18 = load i8*, i8** %rt_str, align 8, !dbg !13012
  store i8* %18, i8** %constraint, align 8, !dbg !13011
  call void @llvm.dbg.declare(metadata i8** %end, metadata !13013, metadata !DIExpression()), !dbg !13014
  call void @llvm.dbg.declare(metadata i32* %match, metadata !13015, metadata !DIExpression()), !dbg !13016
  call void @llvm.dbg.declare(metadata i32* %j, metadata !13017, metadata !DIExpression()), !dbg !13018
  %19 = load i8*, i8** %constraint, align 8, !dbg !13019
  %20 = load i8, i8* %19, align 1, !dbg !13021
  %conv20 = sext i8 %20 to i32, !dbg !13021
  %cmp21 = icmp eq i32 %conv20, 37, !dbg !13022
  br i1 %cmp21, label %if.then, label %if.end, !dbg !13023

if.then:                                          ; preds = %for.body
  %21 = load i8*, i8** %constraint, align 8, !dbg !13024
  %incdec.ptr = getelementptr inbounds i8, i8* %21, i32 1, !dbg !13024
  store i8* %incdec.ptr, i8** %constraint, align 8, !dbg !13024
  br label %if.end, !dbg !13025

if.end:                                           ; preds = %if.then, %for.body
  %22 = load i8*, i8** %constraint, align 8, !dbg !13026
  %call = call i64 @strtoul(i8* %22, i8** %end, i32 10), !dbg !13027
  %conv23 = trunc i64 %call to i32, !dbg !13027
  store i32 %conv23, i32* %match, align 4, !dbg !13028
  %23 = load i8*, i8** %end, align 8, !dbg !13029
  %24 = load i8*, i8** %constraint, align 8, !dbg !13031
  %cmp24 = icmp eq i8* %23, %24, !dbg !13032
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !13033

if.then26:                                        ; preds = %if.end
  br label %for.inc167, !dbg !13034

if.end27:                                         ; preds = %if.end
  %25 = load i32, i32* %match, align 4, !dbg !13035
  %26 = load i32, i32* %noutputs.addr, align 4, !dbg !13035
  %cmp28 = icmp slt i32 %25, %26, !dbg !13035
  br i1 %cmp28, label %cond.false, label %cond.true, !dbg !13035

cond.true:                                        ; preds = %if.end27
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 5680, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !13035
  br label %cond.end, !dbg !13035

cond.false:                                       ; preds = %if.end27
  br label %cond.end, !dbg !13035

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13035
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %p_sets.addr, align 8, !dbg !13036
  %28 = load i32, i32* %match, align 4, !dbg !13036
  %idxprom30 = sext i32 %28 to i64, !dbg !13036
  %arrayidx31 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %27, i64 %idxprom30, !dbg !13036
  %29 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx31, align 8, !dbg !13036
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !13036
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !13036
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !13036
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !13036
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !13036
  store %struct.rtx_def* %30, %struct.rtx_def** %output, align 8, !dbg !13037
  %31 = load %struct.rtvec_def*, %struct.rtvec_def** %inputs, align 8, !dbg !13038
  %elem36 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %31, i32 0, i32 1, !dbg !13038
  %32 = load i32, i32* %i, align 4, !dbg !13038
  %idxprom37 = sext i32 %32 to i64, !dbg !13038
  %arrayidx38 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem36, i64 0, i64 %idxprom37, !dbg !13038
  %33 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8, !dbg !13038
  store %struct.rtx_def* %33, %struct.rtx_def** %input, align 8, !dbg !13039
  %34 = load %struct.rtx_def*, %struct.rtx_def** %output, align 8, !dbg !13040
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !13040
  %bf.load = load i32, i32* %35, align 8, !dbg !13040
  %bf.clear = and i32 %bf.load, 65535, !dbg !13040
  %cmp39 = icmp eq i32 %bf.clear, 37, !dbg !13040
  br i1 %cmp39, label %lor.lhs.false, label %if.then55, !dbg !13042

lor.lhs.false:                                    ; preds = %cond.end
  %36 = load %struct.rtx_def*, %struct.rtx_def** %output, align 8, !dbg !13043
  %37 = load %struct.rtx_def*, %struct.rtx_def** %input, align 8, !dbg !13044
  %call41 = call i32 @rtx_equal_p(%struct.rtx_def* %36, %struct.rtx_def* %37), !dbg !13045
  %tobool = icmp ne i32 %call41, 0, !dbg !13045
  br i1 %tobool, label %if.then55, label %lor.lhs.false42, !dbg !13046

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %38 = load %struct.rtx_def*, %struct.rtx_def** %input, align 8, !dbg !13047
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !13047
  %bf.load43 = load i32, i32* %39, align 8, !dbg !13047
  %bf.lshr = lshr i32 %bf.load43, 16, !dbg !13047
  %bf.clear44 = and i32 %bf.lshr, 255, !dbg !13047
  %cmp45 = icmp ne i32 %bf.clear44, 0, !dbg !13048
  br i1 %cmp45, label %land.lhs.true, label %if.end56, !dbg !13049

land.lhs.true:                                    ; preds = %lor.lhs.false42
  %40 = load %struct.rtx_def*, %struct.rtx_def** %input, align 8, !dbg !13050
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !13050
  %bf.load47 = load i32, i32* %41, align 8, !dbg !13050
  %bf.lshr48 = lshr i32 %bf.load47, 16, !dbg !13050
  %bf.clear49 = and i32 %bf.lshr48, 255, !dbg !13050
  %42 = load %struct.rtx_def*, %struct.rtx_def** %output, align 8, !dbg !13051
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !13051
  %bf.load50 = load i32, i32* %43, align 8, !dbg !13051
  %bf.lshr51 = lshr i32 %bf.load50, 16, !dbg !13051
  %bf.clear52 = and i32 %bf.lshr51, 255, !dbg !13051
  %cmp53 = icmp ne i32 %bf.clear49, %bf.clear52, !dbg !13052
  br i1 %cmp53, label %if.then55, label %if.end56, !dbg !13053

if.then55:                                        ; preds = %land.lhs.true, %lor.lhs.false, %cond.end
  br label %for.inc167, !dbg !13054

if.end56:                                         ; preds = %land.lhs.true, %lor.lhs.false42
  store i32 0, i32* %j, align 4, !dbg !13055
  br label %for.cond57, !dbg !13057

for.cond57:                                       ; preds = %for.inc, %if.end56
  %44 = load i32, i32* %j, align 4, !dbg !13058
  %45 = load i32, i32* %ninputs, align 4, !dbg !13060
  %cmp58 = icmp slt i32 %44, %45, !dbg !13061
  br i1 %cmp58, label %for.body60, label %for.end, !dbg !13062

for.body60:                                       ; preds = %for.cond57
  %46 = load %struct.rtx_def*, %struct.rtx_def** %output, align 8, !dbg !13063
  %47 = load %struct.rtvec_def*, %struct.rtvec_def** %inputs, align 8, !dbg !13065
  %elem61 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %47, i32 0, i32 1, !dbg !13065
  %48 = load i32, i32* %j, align 4, !dbg !13065
  %idxprom62 = sext i32 %48 to i64, !dbg !13065
  %arrayidx63 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem61, i64 0, i64 %idxprom62, !dbg !13065
  %49 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx63, align 8, !dbg !13065
  %call64 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %46, %struct.rtx_def* %49), !dbg !13066
  %tobool65 = icmp ne i32 %call64, 0, !dbg !13066
  br i1 %tobool65, label %if.then66, label %if.end67, !dbg !13067

if.then66:                                        ; preds = %for.body60
  br label %for.end, !dbg !13068

if.end67:                                         ; preds = %for.body60
  br label %for.inc, !dbg !13069

for.inc:                                          ; preds = %if.end67
  %50 = load i32, i32* %j, align 4, !dbg !13070
  %inc = add nsw i32 %50, 1, !dbg !13070
  store i32 %inc, i32* %j, align 4, !dbg !13070
  br label %for.cond57, !dbg !13071, !llvm.loop !13072

for.end:                                          ; preds = %if.then66, %for.cond57
  %51 = load i32, i32* %j, align 4, !dbg !13074
  %52 = load i32, i32* %ninputs, align 4, !dbg !13076
  %cmp68 = icmp ne i32 %51, %52, !dbg !13077
  br i1 %cmp68, label %if.then70, label %if.end71, !dbg !13078

if.then70:                                        ; preds = %for.end
  br label %for.inc167, !dbg !13079

if.end71:                                         ; preds = %for.end
  %53 = load i32, i32* %i, align 4, !dbg !13080
  %cmp72 = icmp sgt i32 %53, 0, !dbg !13082
  br i1 %cmp72, label %if.then74, label %if.end101, !dbg !13083

if.then74:                                        ; preds = %if.end71
  store i32 0, i32* %j, align 4, !dbg !13084
  br label %for.cond75, !dbg !13087

for.cond75:                                       ; preds = %for.inc94, %if.then74
  %54 = load i32, i32* %j, align 4, !dbg !13088
  %55 = load i32, i32* %noutputs.addr, align 4, !dbg !13090
  %cmp76 = icmp slt i32 %54, %55, !dbg !13091
  br i1 %cmp76, label %for.body78, label %for.end96, !dbg !13092

for.body78:                                       ; preds = %for.cond75
  %56 = load i8*, i8** %output_matched, align 8, !dbg !13093
  %57 = load i32, i32* %j, align 4, !dbg !13095
  %idxprom79 = sext i32 %57 to i64, !dbg !13093
  %arrayidx80 = getelementptr inbounds i8, i8* %56, i64 %idxprom79, !dbg !13093
  %58 = load i8, i8* %arrayidx80, align 1, !dbg !13093
  %conv81 = zext i8 %58 to i32, !dbg !13093
  %tobool82 = icmp ne i32 %conv81, 0, !dbg !13093
  br i1 %tobool82, label %land.lhs.true83, label %if.end93, !dbg !13096

land.lhs.true83:                                  ; preds = %for.body78
  %59 = load %struct.rtx_def*, %struct.rtx_def** %input, align 8, !dbg !13097
  %60 = load %struct.rtx_def**, %struct.rtx_def*** %p_sets.addr, align 8, !dbg !13098
  %61 = load i32, i32* %j, align 4, !dbg !13098
  %idxprom84 = sext i32 %61 to i64, !dbg !13098
  %arrayidx85 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %60, i64 %idxprom84, !dbg !13098
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx85, align 8, !dbg !13098
  %u86 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !13098
  %fld87 = bitcast %union.u* %u86 to [1 x %union.rtunion_def]*, !dbg !13098
  %arrayidx88 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld87, i64 0, i64 0, !dbg !13098
  %rt_rtx89 = bitcast %union.rtunion_def* %arrayidx88 to %struct.rtx_def**, !dbg !13098
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx89, align 8, !dbg !13098
  %cmp90 = icmp eq %struct.rtx_def* %59, %63, !dbg !13099
  br i1 %cmp90, label %if.then92, label %if.end93, !dbg !13100

if.then92:                                        ; preds = %land.lhs.true83
  br label %for.end96, !dbg !13101

if.end93:                                         ; preds = %land.lhs.true83, %for.body78
  br label %for.inc94, !dbg !13098

for.inc94:                                        ; preds = %if.end93
  %64 = load i32, i32* %j, align 4, !dbg !13102
  %inc95 = add nsw i32 %64, 1, !dbg !13102
  store i32 %inc95, i32* %j, align 4, !dbg !13102
  br label %for.cond75, !dbg !13103, !llvm.loop !13104

for.end96:                                        ; preds = %if.then92, %for.cond75
  %65 = load i32, i32* %j, align 4, !dbg !13106
  %66 = load i32, i32* %noutputs.addr, align 4, !dbg !13108
  %cmp97 = icmp ne i32 %65, %66, !dbg !13109
  br i1 %cmp97, label %if.then99, label %if.end100, !dbg !13110

if.then99:                                        ; preds = %for.end96
  br label %for.inc167, !dbg !13111

if.end100:                                        ; preds = %for.end96
  br label %if.end101, !dbg !13112

if.end101:                                        ; preds = %if.end100, %if.end71
  %67 = load i8*, i8** %output_matched, align 8, !dbg !13113
  %68 = load i32, i32* %match, align 4, !dbg !13114
  %idxprom102 = sext i32 %68 to i64, !dbg !13113
  %arrayidx103 = getelementptr inbounds i8, i8* %67, i64 %idxprom102, !dbg !13113
  store i8 1, i8* %arrayidx103, align 1, !dbg !13115
  call void @start_sequence(), !dbg !13116
  %69 = load %struct.rtx_def*, %struct.rtx_def** %output, align 8, !dbg !13117
  %70 = load %struct.rtx_def*, %struct.rtx_def** %input, align 8, !dbg !13118
  %call104 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %69, %struct.rtx_def* %70), !dbg !13119
  %call105 = call %struct.rtx_def* @get_insns(), !dbg !13120
  store %struct.rtx_def* %call105, %struct.rtx_def** %insns, align 8, !dbg !13121
  call void @end_sequence(), !dbg !13122
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !13123
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !13124
  %call106 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %71, %struct.rtx_def* %72), !dbg !13125
  store i32 0, i32* %j, align 4, !dbg !13126
  br label %for.cond107, !dbg !13128

for.cond107:                                      ; preds = %for.inc143, %if.end101
  %73 = load i32, i32* %j, align 4, !dbg !13129
  %74 = load i32, i32* %noutputs.addr, align 4, !dbg !13131
  %cmp108 = icmp slt i32 %73, %74, !dbg !13132
  br i1 %cmp108, label %for.body110, label %for.end145, !dbg !13133

for.body110:                                      ; preds = %for.cond107
  %75 = load %struct.rtx_def**, %struct.rtx_def*** %p_sets.addr, align 8, !dbg !13134
  %76 = load i32, i32* %j, align 4, !dbg !13134
  %idxprom111 = sext i32 %76 to i64, !dbg !13134
  %arrayidx112 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %75, i64 %idxprom111, !dbg !13134
  %77 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx112, align 8, !dbg !13134
  %u113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !13134
  %fld114 = bitcast %union.u* %u113 to [1 x %union.rtunion_def]*, !dbg !13134
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i64 0, i64 0, !dbg !13134
  %rt_rtx116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtx_def**, !dbg !13134
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx116, align 8, !dbg !13134
  %79 = load %struct.rtx_def*, %struct.rtx_def** %input, align 8, !dbg !13136
  %call117 = call i32 @rtx_equal_p(%struct.rtx_def* %78, %struct.rtx_def* %79), !dbg !13137
  %tobool118 = icmp ne i32 %call117, 0, !dbg !13137
  br i1 %tobool118, label %if.end142, label %land.lhs.true119, !dbg !13138

land.lhs.true119:                                 ; preds = %for.body110
  %80 = load %struct.rtx_def*, %struct.rtx_def** %input, align 8, !dbg !13139
  %81 = load %struct.rtx_def**, %struct.rtx_def*** %p_sets.addr, align 8, !dbg !13140
  %82 = load i32, i32* %j, align 4, !dbg !13140
  %idxprom120 = sext i32 %82 to i64, !dbg !13140
  %arrayidx121 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %81, i64 %idxprom120, !dbg !13140
  %83 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx121, align 8, !dbg !13140
  %u122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !13140
  %fld123 = bitcast %union.u* %u122 to [1 x %union.rtunion_def]*, !dbg !13140
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i64 0, i64 0, !dbg !13140
  %rt_rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**, !dbg !13140
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx125, align 8, !dbg !13140
  %call126 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %80, %struct.rtx_def* %84), !dbg !13141
  %tobool127 = icmp ne i32 %call126, 0, !dbg !13141
  br i1 %tobool127, label %if.then128, label %if.end142, !dbg !13142

if.then128:                                       ; preds = %land.lhs.true119
  %85 = load %struct.rtx_def**, %struct.rtx_def*** %p_sets.addr, align 8, !dbg !13143
  %86 = load i32, i32* %j, align 4, !dbg !13143
  %idxprom129 = sext i32 %86 to i64, !dbg !13143
  %arrayidx130 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %85, i64 %idxprom129, !dbg !13143
  %87 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx130, align 8, !dbg !13143
  %u131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1, !dbg !13143
  %fld132 = bitcast %union.u* %u131 to [1 x %union.rtunion_def]*, !dbg !13143
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i64 0, i64 0, !dbg !13143
  %rt_rtx134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtx_def**, !dbg !13143
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx134, align 8, !dbg !13143
  %89 = load %struct.rtx_def*, %struct.rtx_def** %input, align 8, !dbg !13144
  %90 = load %struct.rtx_def*, %struct.rtx_def** %output, align 8, !dbg !13145
  %call135 = call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %88, %struct.rtx_def* %89, %struct.rtx_def* %90), !dbg !13146
  %91 = load %struct.rtx_def**, %struct.rtx_def*** %p_sets.addr, align 8, !dbg !13147
  %92 = load i32, i32* %j, align 4, !dbg !13147
  %idxprom136 = sext i32 %92 to i64, !dbg !13147
  %arrayidx137 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %91, i64 %idxprom136, !dbg !13147
  %93 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx137, align 8, !dbg !13147
  %u138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1, !dbg !13147
  %fld139 = bitcast %union.u* %u138 to [1 x %union.rtunion_def]*, !dbg !13147
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i64 0, i64 0, !dbg !13147
  %rt_rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**, !dbg !13147
  store %struct.rtx_def* %call135, %struct.rtx_def** %rt_rtx141, align 8, !dbg !13148
  br label %if.end142, !dbg !13147

if.end142:                                        ; preds = %if.then128, %land.lhs.true119, %for.body110
  br label %for.inc143, !dbg !13149

for.inc143:                                       ; preds = %if.end142
  %94 = load i32, i32* %j, align 4, !dbg !13150
  %inc144 = add nsw i32 %94, 1, !dbg !13150
  store i32 %inc144, i32* %j, align 4, !dbg !13150
  br label %for.cond107, !dbg !13151, !llvm.loop !13152

for.end145:                                       ; preds = %for.cond107
  store i32 0, i32* %j, align 4, !dbg !13154
  br label %for.cond146, !dbg !13156

for.cond146:                                      ; preds = %for.inc164, %for.end145
  %95 = load i32, i32* %j, align 4, !dbg !13157
  %96 = load i32, i32* %ninputs, align 4, !dbg !13159
  %cmp147 = icmp slt i32 %95, %96, !dbg !13160
  br i1 %cmp147, label %for.body149, label %for.end166, !dbg !13161

for.body149:                                      ; preds = %for.cond146
  %97 = load %struct.rtx_def*, %struct.rtx_def** %input, align 8, !dbg !13162
  %98 = load %struct.rtvec_def*, %struct.rtvec_def** %inputs, align 8, !dbg !13164
  %elem150 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %98, i32 0, i32 1, !dbg !13164
  %99 = load i32, i32* %j, align 4, !dbg !13164
  %idxprom151 = sext i32 %99 to i64, !dbg !13164
  %arrayidx152 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem150, i64 0, i64 %idxprom151, !dbg !13164
  %100 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx152, align 8, !dbg !13164
  %call153 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %97, %struct.rtx_def* %100), !dbg !13165
  %tobool154 = icmp ne i32 %call153, 0, !dbg !13165
  br i1 %tobool154, label %if.then155, label %if.end163, !dbg !13166

if.then155:                                       ; preds = %for.body149
  %101 = load %struct.rtvec_def*, %struct.rtvec_def** %inputs, align 8, !dbg !13167
  %elem156 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %101, i32 0, i32 1, !dbg !13167
  %102 = load i32, i32* %j, align 4, !dbg !13167
  %idxprom157 = sext i32 %102 to i64, !dbg !13167
  %arrayidx158 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem156, i64 0, i64 %idxprom157, !dbg !13167
  %103 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx158, align 8, !dbg !13167
  %104 = load %struct.rtx_def*, %struct.rtx_def** %input, align 8, !dbg !13168
  %105 = load %struct.rtx_def*, %struct.rtx_def** %output, align 8, !dbg !13169
  %call159 = call %struct.rtx_def* @replace_rtx(%struct.rtx_def* %103, %struct.rtx_def* %104, %struct.rtx_def* %105), !dbg !13170
  %106 = load %struct.rtvec_def*, %struct.rtvec_def** %inputs, align 8, !dbg !13171
  %elem160 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %106, i32 0, i32 1, !dbg !13171
  %107 = load i32, i32* %j, align 4, !dbg !13171
  %idxprom161 = sext i32 %107 to i64, !dbg !13171
  %arrayidx162 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem160, i64 0, i64 %idxprom161, !dbg !13171
  store %struct.rtx_def* %call159, %struct.rtx_def** %arrayidx162, align 8, !dbg !13172
  br label %if.end163, !dbg !13171

if.end163:                                        ; preds = %if.then155, %for.body149
  br label %for.inc164, !dbg !13173

for.inc164:                                       ; preds = %if.end163
  %108 = load i32, i32* %j, align 4, !dbg !13174
  %inc165 = add nsw i32 %108, 1, !dbg !13174
  store i32 %inc165, i32* %j, align 4, !dbg !13174
  br label %for.cond146, !dbg !13175, !llvm.loop !13176

for.end166:                                       ; preds = %for.cond146
  store i8 1, i8* %changed, align 1, !dbg !13178
  br label %for.inc167, !dbg !13179

for.inc167:                                       ; preds = %for.end166, %if.then99, %if.then70, %if.then55, %if.then26
  %109 = load i32, i32* %i, align 4, !dbg !13180
  %inc168 = add nsw i32 %109, 1, !dbg !13180
  store i32 %inc168, i32* %i, align 4, !dbg !13180
  br label %for.cond, !dbg !13181, !llvm.loop !13182

for.end169:                                       ; preds = %for.cond
  %110 = load i8, i8* %changed, align 1, !dbg !13184
  %tobool170 = icmp ne i8 %110, 0, !dbg !13184
  br i1 %tobool170, label %if.then171, label %if.end173, !dbg !13186

if.then171:                                       ; preds = %for.end169
  %111 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !13187
  %call172 = call zeroext i8 @df_insn_rescan(%struct.rtx_def* %111), !dbg !13188
  br label %if.end173, !dbg !13188

if.end173:                                        ; preds = %if.then171, %for.end169
  ret void, !dbg !13189
}

declare dso_local i64 @strtoul(i8*, i8**, i32) #2

declare dso_local i32 @reg_overlap_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @replace_rtx(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @df_insn_rescan(%struct.rtx_def*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!4462, !4463, !4464}
!llvm.ident = !{!4465}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "cfun", scope: !2, file: !3, line: 125, type: !3291, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !2915, globals: !4346, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "function.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !13, !141, !336, !354, !361, !368, !374, !379, !384, !399, !541, !554, !569, !576, !752, !758, !765, !1485, !1492, !1498, !1632, !2506, !2538, !2542, !2576, !2613, !2622, !2638, !2660, !2665, !2671, !2892, !2899, !2905}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !6, line: 30, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !14, line: 7, baseType: !7, size: 32, elements: !15)
!14 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140}
!16 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!17 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!20 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!21 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!22 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!23 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!24 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!25 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!26 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!27 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!28 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!29 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!30 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!31 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!32 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!33 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!34 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!35 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!36 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!37 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!38 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!39 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!40 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!41 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!42 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!43 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!44 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!45 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!46 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!47 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!48 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!49 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!50 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!51 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!52 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!53 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!54 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!55 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!56 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!57 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!58 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!59 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!60 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!61 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!62 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!63 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!64 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!65 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!66 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!67 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!68 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!69 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!70 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!71 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!72 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!73 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!74 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!75 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!76 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!77 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!78 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!79 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!80 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!81 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!82 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!83 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!84 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!85 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!86 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!87 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!88 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!89 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!90 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!91 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!92 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!93 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!94 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!95 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!96 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!97 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!98 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!99 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!100 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!101 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!102 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!103 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!104 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!106 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!107 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!108 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!109 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!110 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!111 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!112 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!113 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!114 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!115 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!116 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!117 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!118 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!119 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!120 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!121 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!122 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!123 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!124 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!125 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!126 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!127 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!128 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!129 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!130 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!132 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!133 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!134 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!135 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!137 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!139 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!140 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !142, line: 39, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335}
!144 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!147 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!148 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!149 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!150 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!151 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!152 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!153 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!154 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!155 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!156 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!157 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!158 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!159 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!160 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!161 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!162 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!163 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!164 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!165 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!166 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!167 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!168 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!169 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!170 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!171 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!172 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!173 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!174 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!175 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!176 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!177 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!178 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!179 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!180 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!181 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!182 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!183 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!184 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!185 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!186 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!187 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!188 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!189 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!190 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!191 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!192 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!193 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!194 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!195 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!196 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!197 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!198 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!199 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!200 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!201 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!202 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!203 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!204 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!205 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!206 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!207 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!208 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!209 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!210 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!211 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!212 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!213 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!214 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!215 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!216 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!217 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!218 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!219 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!220 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!221 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!222 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!223 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!224 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!225 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!226 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!227 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!228 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!229 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!230 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!231 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!232 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!233 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!234 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!235 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!236 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!237 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!238 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!239 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!240 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!241 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!242 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!243 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!244 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!245 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!246 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!247 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!248 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!249 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!250 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!251 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!252 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!253 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!254 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!255 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!256 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!257 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!259 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!260 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!261 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!262 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!263 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!264 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!265 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!266 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!267 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!268 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!269 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!270 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!271 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!272 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!273 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!274 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!275 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!276 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!277 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!278 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!279 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!280 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!281 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!282 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!283 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!284 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!285 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!286 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!287 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!288 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!289 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!290 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!291 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!292 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!293 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!294 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!295 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!296 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!301 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!302 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!303 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!304 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!305 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!306 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!307 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!308 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!309 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!310 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!311 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!312 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!313 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!322 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!323 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!324 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!325 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!326 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!327 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!328 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!329 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!330 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!331 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!332 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!333 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!334 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!335 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !142, line: 280, baseType: !7, size: 32, elements: !337)
!337 = !{!338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353}
!338 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!349 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!350 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!354 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !142, line: 1817, baseType: !7, size: 32, elements: !355)
!355 = !{!356, !357, !358, !359, !360}
!356 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!361 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !142, line: 1805, baseType: !7, size: 32, elements: !362)
!362 = !{!363, !364, !365, !366, !367}
!363 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!368 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !369, line: 363, baseType: !7, size: 32, elements: !370)
!369 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!370 = !{!371, !372, !373}
!371 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!372 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!373 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!374 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !369, line: 355, baseType: !7, size: 32, elements: !375)
!375 = !{!376, !377, !378}
!376 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!377 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!378 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!379 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !380, line: 474, baseType: !7, size: 32, elements: !381)
!380 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!381 = !{!382, !383}
!382 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!383 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !385, line: 1994, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!386 = !{!387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398}
!387 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!391 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!392 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!393 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!394 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!395 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!396 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!397 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!398 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!399 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !385, line: 45, baseType: !7, size: 32, elements: !400)
!400 = !{!401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540}
!401 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!402 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!403 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!404 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!405 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!406 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!407 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!408 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!409 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!410 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!411 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!412 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!413 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!414 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!415 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!416 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!417 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!418 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!419 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!420 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!421 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!422 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!423 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!424 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!425 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!426 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!427 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!428 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!429 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!430 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!431 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!432 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!433 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!434 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!435 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!436 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!437 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!438 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!439 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!440 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!441 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!442 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!443 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!444 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!445 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!446 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!447 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!448 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!449 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!450 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!451 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!452 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!453 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!454 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!455 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!456 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!457 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!458 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!459 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!460 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!461 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!462 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!463 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!464 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!465 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!466 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!467 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!468 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!469 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!470 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!471 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!472 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!473 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!474 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!475 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!476 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!477 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!478 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!479 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!480 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!481 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!482 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!483 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!484 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!485 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!486 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!487 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!488 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!489 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!490 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!491 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!492 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!493 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!494 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!495 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!496 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!497 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!498 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!499 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!500 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!501 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!502 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!503 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!504 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!505 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!506 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!507 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!508 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!509 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!510 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!511 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!512 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!513 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!514 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!515 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!516 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!517 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!518 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!519 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!520 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!521 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!522 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!523 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!524 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!525 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!526 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!527 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!528 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!529 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!530 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!531 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!532 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!533 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!534 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!535 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!536 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!537 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!538 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!539 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!540 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!541 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !142, line: 58, baseType: !7, size: 32, elements: !542)
!542 = !{!543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553}
!543 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!544 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!545 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!546 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!547 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!548 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!549 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!550 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!551 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!552 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!553 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!554 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !385, line: 60, baseType: !7, size: 32, elements: !555)
!555 = !{!556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568}
!556 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!557 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!558 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!559 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!560 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!561 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!562 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!563 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!564 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!565 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!566 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!567 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!568 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!569 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !570, line: 104, baseType: !7, size: 32, elements: !571)
!570 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!571 = !{!572, !573, !574, !575}
!572 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!573 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!574 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!575 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!576 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !577, line: 74, baseType: !7, size: 32, elements: !578)
!577 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!578 = !{!579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751}
!579 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!589 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!590 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!591 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!592 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!593 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!594 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!595 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!596 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!597 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!598 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!599 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!600 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!601 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!602 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!603 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!604 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!605 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!606 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!607 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!608 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!609 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!610 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!611 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!612 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!613 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!614 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!615 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!616 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!617 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!618 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!619 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!620 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!621 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!622 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!623 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!624 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!625 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!626 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!627 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!628 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!629 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!630 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!631 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!632 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!633 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!634 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!635 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!636 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!637 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!638 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!639 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!640 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!641 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!642 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!643 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!644 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!645 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!646 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!647 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!648 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!649 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!650 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!651 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!652 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!653 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!654 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!655 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!656 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!657 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!658 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!659 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!660 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!661 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!662 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!663 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!664 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!665 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!666 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!667 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!668 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!669 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!670 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!671 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!672 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!673 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!674 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!675 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!676 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!677 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!678 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!679 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!680 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!681 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!682 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!683 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!684 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!685 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!686 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!687 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!688 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!689 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!690 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!691 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!692 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!693 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!694 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!695 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!696 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!697 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!698 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!699 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!700 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!701 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!702 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!703 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!704 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!705 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!706 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!707 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!708 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!709 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!710 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!711 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!712 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!713 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!714 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!715 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!716 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!717 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!718 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!719 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!720 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!721 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!722 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!723 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!724 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!725 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!726 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!727 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!728 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!729 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!730 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!731 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!732 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!733 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!734 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!735 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!736 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!737 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!738 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!739 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!740 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!741 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!742 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!743 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!744 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!745 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!746 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!747 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!748 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!749 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!750 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!751 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!752 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "direction", file: !753, line: 95, baseType: !7, size: 32, elements: !754)
!753 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!754 = !{!755, !756, !757}
!755 = !DIEnumerator(name: "none", value: 0, isUnsigned: true)
!756 = !DIEnumerator(name: "upward", value: 1, isUnsigned: true)
!757 = !DIEnumerator(name: "downward", value: 2, isUnsigned: true)
!758 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "stack_check_type", file: !759, line: 310, baseType: !7, size: 32, elements: !760)
!759 = !DIFile(filename: "./flags.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!760 = !{!761, !762, !763, !764}
!761 = !DIEnumerator(name: "NO_STACK_CHECK", value: 0, isUnsigned: true)
!762 = !DIEnumerator(name: "GENERIC_STACK_CHECK", value: 1, isUnsigned: true)
!763 = !DIEnumerator(name: "STATIC_BUILTIN_STACK_CHECK", value: 2, isUnsigned: true)
!764 = !DIEnumerator(name: "FULL_BUILTIN_STACK_CHECK", value: 3, isUnsigned: true)
!765 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !142, line: 220, baseType: !7, size: 32, elements: !766)
!766 = !{!767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484}
!767 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1400 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1401 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1402 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1403 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1404 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1405 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1406 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1407 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1408 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1409 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1410 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1411 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1412 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1413 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1414 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1415 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1416 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1417 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1418 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1419 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1420 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1421 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1422 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1423 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1424 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1425 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1426 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1427 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1428 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1429 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1430 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1431 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1432 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1433 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1434 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1435 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1436 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1437 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1438 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1439 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1440 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1441 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1442 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1443 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1444 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1445 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1446 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1447 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1448 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1449 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1450 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1451 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1452 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1453 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1454 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1455 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1456 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1457 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1458 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1459 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1460 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1461 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1462 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1463 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1464 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1465 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1466 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1467 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1468 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1469 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1470 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1471 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1472 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1473 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1474 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1475 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1476 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1477 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1478 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1479 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1480 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1481 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1482 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1483 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1484 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1485 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !142, line: 4288, baseType: !7, size: 32, elements: !1486)
!1486 = !{!1487, !1488, !1489, !1490, !1491}
!1487 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!1488 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!1489 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!1490 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!1491 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!1492 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "function_frequency", file: !1493, line: 179, baseType: !7, size: 32, elements: !1494)
!1493 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1494 = !{!1495, !1496, !1497}
!1495 = !DIEnumerator(name: "FUNCTION_FREQUENCY_UNLIKELY_EXECUTED", value: 0, isUnsigned: true)
!1496 = !DIEnumerator(name: "FUNCTION_FREQUENCY_NORMAL", value: 1, isUnsigned: true)
!1497 = !DIEnumerator(name: "FUNCTION_FREQUENCY_HOT", value: 2, isUnsigned: true)
!1498 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !142, line: 3410, baseType: !7, size: 32, elements: !1499)
!1499 = !{!1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631}
!1500 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1501 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1502 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1503 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1504 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1505 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1506 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1507 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1508 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1509 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1510 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1511 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1512 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1513 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1514 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1515 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1516 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1517 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1518 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1519 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1520 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1521 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1522 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1523 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1524 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1525 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1526 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1527 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1528 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1529 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1530 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1531 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1532 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1533 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1534 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1535 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1536 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1537 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1538 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1539 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1540 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1541 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1542 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1543 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!1544 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1545 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1546 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1547 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1548 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1549 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1550 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1551 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1552 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1553 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1554 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1555 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1556 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1557 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1558 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1559 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1560 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1561 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1562 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1563 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1564 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1565 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1566 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1567 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1568 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1569 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1570 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1571 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1572 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1573 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1574 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1575 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1576 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1577 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1578 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1579 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1580 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1581 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1582 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1583 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1584 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1585 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1586 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1587 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1588 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1589 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1590 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1591 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1592 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1593 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1594 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1595 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1596 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1597 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1598 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1599 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1600 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1601 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1602 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1603 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1604 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1605 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1606 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1607 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1608 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1609 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1610 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1611 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1612 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1613 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1614 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1615 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1616 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1617 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1618 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1619 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1620 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1621 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1622 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1623 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1624 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1625 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1626 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1627 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1628 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1629 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1630 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1631 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1632 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !1633, line: 723, baseType: !7, size: 32, elements: !1634)
!1633 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1634 = !{!1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505}
!1635 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!1636 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!1637 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!1638 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!1639 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!1640 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!1641 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!1642 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!1643 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!1644 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!1645 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!1646 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!1647 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!1648 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!1649 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!1650 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!1651 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!1652 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!1653 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!1654 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!1655 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!1656 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!1657 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!1658 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!1659 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!1660 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!1661 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!1662 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!1663 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!1664 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!1665 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!1666 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!1667 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!1668 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!1669 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!1670 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!1671 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!1672 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!1673 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!1674 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!1675 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!1676 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!1677 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!1678 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!1679 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!1680 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!1681 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!1682 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!1683 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!1684 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!1685 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!1686 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!1687 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!1688 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!1689 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!1690 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!1691 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!1692 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!1693 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!1694 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!1695 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!1696 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!1697 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!1698 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!1699 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!1700 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!1701 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!1702 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!1703 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!1704 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!1705 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!1706 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!1707 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!1708 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!1709 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!1710 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!1711 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!1712 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!1713 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!1714 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!1715 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!1716 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!1717 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!1718 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!1719 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!1720 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!1721 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!1722 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!1723 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!1724 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!1725 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!1726 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!1727 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!1728 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!1729 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!1730 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!1731 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!1732 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!1733 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!1734 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!1735 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!1736 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!1737 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!1738 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!1739 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!1740 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!1741 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!1742 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!1743 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!1744 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!1745 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!1746 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!1747 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!1748 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!1749 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!1750 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!1751 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!1752 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!1753 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!1754 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!1755 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!1756 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!1757 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!1758 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!1759 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!1760 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!1761 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!1762 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!1763 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!1764 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!1765 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!1766 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!1767 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!1768 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!1769 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!1770 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!1771 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!1772 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!1773 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!1774 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!1775 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!1776 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!1777 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!1778 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!1779 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!1780 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!1781 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!1782 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!1783 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!1784 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!1785 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!1786 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!1787 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!1788 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!1789 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!1790 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!1791 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!1792 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!1793 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!1794 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!1795 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!1796 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!1797 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!1798 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!1799 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!1800 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!1801 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!1802 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!1803 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!1804 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!1805 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!1806 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!1807 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!1808 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!1809 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!1810 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!1811 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!1812 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!1813 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!1814 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!1815 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!1816 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!1817 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!1818 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!1819 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!1820 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!1821 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!1822 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!1823 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!1824 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!1825 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!1826 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!1827 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!1828 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!1829 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!1830 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!1831 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!1832 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!1833 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!1834 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!1835 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!1836 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!1837 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!1838 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!1839 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!1840 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!1841 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!1842 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!1843 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!1844 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!1845 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!1846 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!1847 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!1848 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!1849 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!1850 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!1851 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!1852 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!1853 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!1854 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!1855 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!1856 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!1857 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!1858 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!1859 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!1860 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!1861 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!1862 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!1863 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!1864 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!1865 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!1866 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!1867 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!1868 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!1869 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!1870 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!1871 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!1872 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!1873 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!1874 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!1875 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!1876 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!1877 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!1878 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!1879 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!1880 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!1881 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!1882 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!1883 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!1884 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!1885 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!1886 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!1887 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!1888 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!1889 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!1890 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!1891 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!1892 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!1893 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!1894 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!1895 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!1896 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!1897 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!1898 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!1899 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!1900 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!1901 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!1902 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!1903 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!1904 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!1905 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!1906 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!1907 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!1908 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!1909 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!1910 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!1911 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!1912 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!1913 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!1914 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!1915 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!1916 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!1917 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!1918 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!1919 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!1920 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!1921 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!1922 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!1923 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!1924 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!1925 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!1926 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!1927 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!1928 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!1929 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!1930 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!1931 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!1932 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!1933 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!1934 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!1935 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!1936 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!1937 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!1938 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!1939 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!1940 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!1941 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!1942 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!1943 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!1944 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!1945 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!1946 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!1947 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!1948 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!1949 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!1950 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!1951 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!1952 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!1953 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!1954 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!1955 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!1956 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!1957 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!1958 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!1959 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!1960 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!1961 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!1962 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!1963 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!1964 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!1965 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!1966 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!1967 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!1968 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!1969 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!1970 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!1971 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!1972 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!1973 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!1974 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!1975 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!1976 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!1977 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!1978 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!1979 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!1980 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!1981 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!1982 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!1983 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!1984 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!1985 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!1986 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!1987 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!1988 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!1989 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!1990 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!1991 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!1992 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!1993 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!1994 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!1995 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!1996 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!1997 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!1998 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!1999 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!2000 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!2001 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!2002 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!2003 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!2004 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!2005 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!2006 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!2007 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!2008 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!2009 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!2010 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!2011 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!2012 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!2013 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!2014 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!2015 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!2016 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!2017 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!2018 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!2019 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!2020 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!2021 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!2022 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!2023 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!2024 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!2025 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!2026 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!2027 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!2028 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!2029 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!2030 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!2031 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!2032 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!2033 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!2034 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!2035 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!2036 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!2037 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!2038 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!2039 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!2040 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!2041 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!2042 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!2043 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!2044 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!2045 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!2046 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!2047 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!2048 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!2049 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!2050 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!2051 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!2052 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!2053 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!2054 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!2055 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!2056 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!2057 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!2058 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!2059 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!2060 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!2061 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!2062 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!2063 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!2064 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!2065 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!2066 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!2067 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!2068 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!2069 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!2070 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!2071 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!2072 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!2073 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!2074 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!2075 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!2076 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!2077 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!2078 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!2079 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!2080 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!2081 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!2082 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!2083 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!2084 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!2085 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!2086 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!2087 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!2088 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!2089 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!2090 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!2091 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!2092 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!2093 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!2094 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!2095 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!2096 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!2097 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!2098 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!2099 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!2100 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!2101 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!2102 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!2103 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!2104 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!2105 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!2106 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!2107 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!2108 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!2109 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!2110 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!2111 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!2112 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!2113 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!2114 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!2115 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!2116 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!2117 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!2118 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!2119 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!2120 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!2121 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!2122 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!2123 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!2124 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!2125 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!2126 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!2127 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!2128 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!2129 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!2130 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!2131 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!2132 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!2133 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!2134 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!2135 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!2136 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!2137 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!2138 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!2139 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!2140 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!2141 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!2142 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!2143 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!2144 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!2145 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!2146 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!2147 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!2148 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!2149 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!2150 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!2151 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!2152 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!2153 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!2154 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!2155 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!2156 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!2157 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!2158 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!2159 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!2160 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!2161 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!2162 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!2163 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!2164 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!2165 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!2166 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!2167 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!2168 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!2169 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!2170 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!2171 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!2172 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!2173 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!2174 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!2175 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!2176 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!2177 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!2178 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!2179 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!2180 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!2181 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!2182 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!2183 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!2184 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!2185 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!2186 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!2187 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!2188 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!2189 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!2190 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!2191 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!2192 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!2193 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!2194 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!2195 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!2196 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!2197 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!2198 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!2199 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!2200 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!2201 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!2202 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!2203 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!2204 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!2205 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!2206 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!2207 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!2208 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!2209 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!2210 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!2211 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!2212 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!2213 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!2214 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!2215 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!2216 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!2217 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!2218 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!2219 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!2220 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!2221 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!2222 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!2223 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!2224 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!2225 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!2226 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!2227 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!2228 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!2229 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!2230 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!2231 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!2232 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!2233 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!2234 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!2235 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!2236 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!2237 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!2238 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!2239 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!2240 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!2241 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!2242 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!2243 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!2244 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!2245 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!2246 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!2247 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!2248 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!2249 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!2250 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!2251 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!2252 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!2253 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!2254 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!2255 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!2256 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!2257 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!2258 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!2259 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!2260 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!2261 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!2262 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!2263 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!2264 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!2265 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!2266 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!2267 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!2268 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!2269 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!2270 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!2271 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!2272 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!2273 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!2274 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!2275 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!2276 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!2277 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!2278 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!2279 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!2280 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!2281 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!2282 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!2283 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!2284 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!2285 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!2286 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!2287 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!2288 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!2289 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!2290 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!2291 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!2292 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!2293 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!2294 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!2295 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!2296 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!2297 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!2298 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!2299 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!2300 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!2301 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!2302 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!2303 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!2304 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!2305 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!2306 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!2307 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!2308 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!2309 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!2310 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!2311 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!2312 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!2313 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!2314 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!2315 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!2316 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!2317 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!2318 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!2319 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!2320 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!2321 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!2322 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!2323 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!2324 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!2325 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!2326 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!2327 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!2328 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!2329 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!2330 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!2331 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!2332 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!2333 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!2334 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!2335 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!2336 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!2337 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!2338 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!2339 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!2340 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!2341 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!2342 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!2343 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!2344 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!2345 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!2346 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!2347 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!2348 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!2349 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!2350 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!2351 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!2352 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!2353 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!2354 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!2355 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!2356 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!2357 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!2358 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!2359 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!2360 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!2361 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!2362 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!2363 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!2364 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!2365 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!2366 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!2367 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!2368 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!2369 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!2370 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!2371 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!2372 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!2373 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!2374 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!2375 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!2376 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!2377 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!2378 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!2379 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!2380 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!2381 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!2382 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!2383 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!2384 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!2385 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!2386 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!2387 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!2388 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!2389 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!2390 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!2391 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!2392 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!2393 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!2394 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!2395 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!2396 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!2397 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!2398 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!2399 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!2400 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!2401 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!2402 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!2403 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!2404 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!2405 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!2406 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!2407 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!2408 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!2409 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!2410 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!2411 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!2412 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!2413 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!2414 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!2415 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!2416 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!2417 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!2418 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!2419 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!2420 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!2421 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!2422 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!2423 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!2424 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!2425 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!2426 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!2427 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!2428 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!2429 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!2430 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!2431 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!2432 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!2433 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!2434 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!2435 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!2436 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!2437 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!2438 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!2439 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!2440 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!2441 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!2442 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!2443 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!2444 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!2445 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!2446 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!2447 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!2448 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!2449 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!2450 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!2451 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!2452 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!2453 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!2454 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!2455 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!2456 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!2457 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!2458 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!2459 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!2460 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!2461 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!2462 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!2463 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!2464 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!2465 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!2466 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!2467 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!2468 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!2469 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!2470 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!2471 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!2472 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!2473 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!2474 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!2475 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!2476 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!2477 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!2478 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!2479 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!2480 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!2481 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!2482 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!2483 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!2484 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!2485 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!2486 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!2487 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!2488 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!2489 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!2490 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!2491 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!2492 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!2493 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!2494 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!2495 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!2496 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!2497 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!2498 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!2499 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!2500 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!2501 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!2502 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!2503 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!2504 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!2505 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!2506 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "br_predictor", file: !2507, line: 24, baseType: !7, size: 32, elements: !2508)
!2507 = !DIFile(filename: "./predict.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2508 = !{!2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537}
!2509 = !DIEnumerator(name: "PRED_COMBINED", value: 0, isUnsigned: true)
!2510 = !DIEnumerator(name: "PRED_DS_THEORY", value: 1, isUnsigned: true)
!2511 = !DIEnumerator(name: "PRED_FIRST_MATCH", value: 2, isUnsigned: true)
!2512 = !DIEnumerator(name: "PRED_NO_PREDICTION", value: 3, isUnsigned: true)
!2513 = !DIEnumerator(name: "PRED_UNCONDITIONAL", value: 4, isUnsigned: true)
!2514 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS", value: 5, isUnsigned: true)
!2515 = !DIEnumerator(name: "PRED_BUILTIN_EXPECT", value: 6, isUnsigned: true)
!2516 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS_GUESSED", value: 7, isUnsigned: true)
!2517 = !DIEnumerator(name: "PRED_CONTINUE", value: 8, isUnsigned: true)
!2518 = !DIEnumerator(name: "PRED_NORETURN", value: 9, isUnsigned: true)
!2519 = !DIEnumerator(name: "PRED_COLD_FUNCTION", value: 10, isUnsigned: true)
!2520 = !DIEnumerator(name: "PRED_LOOP_BRANCH", value: 11, isUnsigned: true)
!2521 = !DIEnumerator(name: "PRED_LOOP_EXIT", value: 12, isUnsigned: true)
!2522 = !DIEnumerator(name: "PRED_POINTER", value: 13, isUnsigned: true)
!2523 = !DIEnumerator(name: "PRED_TREE_POINTER", value: 14, isUnsigned: true)
!2524 = !DIEnumerator(name: "PRED_OPCODE_POSITIVE", value: 15, isUnsigned: true)
!2525 = !DIEnumerator(name: "PRED_OPCODE_NONEQUAL", value: 16, isUnsigned: true)
!2526 = !DIEnumerator(name: "PRED_FPOPCODE", value: 17, isUnsigned: true)
!2527 = !DIEnumerator(name: "PRED_TREE_OPCODE_POSITIVE", value: 18, isUnsigned: true)
!2528 = !DIEnumerator(name: "PRED_TREE_OPCODE_NONEQUAL", value: 19, isUnsigned: true)
!2529 = !DIEnumerator(name: "PRED_TREE_FPOPCODE", value: 20, isUnsigned: true)
!2530 = !DIEnumerator(name: "PRED_CALL", value: 21, isUnsigned: true)
!2531 = !DIEnumerator(name: "PRED_TREE_EARLY_RETURN", value: 22, isUnsigned: true)
!2532 = !DIEnumerator(name: "PRED_GOTO", value: 23, isUnsigned: true)
!2533 = !DIEnumerator(name: "PRED_CONST_RETURN", value: 24, isUnsigned: true)
!2534 = !DIEnumerator(name: "PRED_NEGATIVE_RETURN", value: 25, isUnsigned: true)
!2535 = !DIEnumerator(name: "PRED_NULL_RETURN", value: 26, isUnsigned: true)
!2536 = !DIEnumerator(name: "PRED_MUDFLAP", value: 27, isUnsigned: true)
!2537 = !DIEnumerator(name: "END_PREDICTORS", value: 28, isUnsigned: true)
!2538 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "prediction", file: !2507, line: 32, baseType: !7, size: 32, elements: !2539)
!2539 = !{!2540, !2541}
!2540 = !DIEnumerator(name: "NOT_TAKEN", value: 0, isUnsigned: true)
!2541 = !DIEnumerator(name: "TAKEN", value: 1, isUnsigned: true)
!2542 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !385, line: 836, baseType: !7, size: 32, elements: !2543)
!2543 = !{!2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575}
!2544 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!2545 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!2546 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!2547 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!2548 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!2549 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!2550 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!2551 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!2552 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!2553 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!2554 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!2555 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!2556 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!2557 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!2558 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!2559 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!2560 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!2561 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!2562 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!2563 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!2564 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!2565 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!2566 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!2567 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!2568 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!2569 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!2570 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!2571 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!2572 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!2573 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!2574 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!2575 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!2576 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !142, line: 630, baseType: !7, size: 32, elements: !2577)
!2577 = !{!2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612}
!2578 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!2579 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!2580 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!2581 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!2582 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!2583 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!2584 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!2585 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!2586 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!2587 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!2588 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!2589 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!2590 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!2591 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!2592 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!2593 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!2594 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!2595 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!2596 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!2597 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!2598 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!2599 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!2600 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!2601 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!2602 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!2603 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!2604 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!2605 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!2606 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!2607 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!2608 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!2609 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!2610 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!2611 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!2612 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!2613 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "expand_modifier", file: !753, line: 52, baseType: !7, size: 32, elements: !2614)
!2614 = !{!2615, !2616, !2617, !2618, !2619, !2620, !2621}
!2615 = !DIEnumerator(name: "EXPAND_NORMAL", value: 0, isUnsigned: true)
!2616 = !DIEnumerator(name: "EXPAND_STACK_PARM", value: 1, isUnsigned: true)
!2617 = !DIEnumerator(name: "EXPAND_SUM", value: 2, isUnsigned: true)
!2618 = !DIEnumerator(name: "EXPAND_CONST_ADDRESS", value: 3, isUnsigned: true)
!2619 = !DIEnumerator(name: "EXPAND_INITIALIZER", value: 4, isUnsigned: true)
!2620 = !DIEnumerator(name: "EXPAND_WRITE", value: 5, isUnsigned: true)
!2621 = !DIEnumerator(name: "EXPAND_MEMORY", value: 6, isUnsigned: true)
!2622 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !385, line: 956, baseType: !7, size: 32, elements: !2623)
!2623 = !{!2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637}
!2624 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!2625 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!2626 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!2627 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!2628 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!2629 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!2630 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!2631 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!2632 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!2633 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!2634 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!2635 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!2636 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!2637 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!2638 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !2639, line: 36, baseType: !7, size: 32, elements: !2640)
!2639 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2640 = !{!2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659}
!2641 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!2642 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!2643 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!2644 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!2645 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!2646 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!2647 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!2648 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!2649 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!2650 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!2651 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!2652 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!2653 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!2654 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!2655 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!2656 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!2657 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!2658 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!2659 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!2660 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !2661, line: 147, baseType: !7, size: 32, elements: !2662)
!2661 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2662 = !{!2663, !2664}
!2663 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!2664 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!2665 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_info_level", file: !759, line: 46, baseType: !7, size: 32, elements: !2666)
!2666 = !{!2667, !2668, !2669, !2670}
!2667 = !DIEnumerator(name: "DINFO_LEVEL_NONE", value: 0, isUnsigned: true)
!2668 = !DIEnumerator(name: "DINFO_LEVEL_TERSE", value: 1, isUnsigned: true)
!2669 = !DIEnumerator(name: "DINFO_LEVEL_NORMAL", value: 2, isUnsigned: true)
!2670 = !DIEnumerator(name: "DINFO_LEVEL_VERBOSE", value: 3, isUnsigned: true)
!2671 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gt_types_enum", file: !2672, line: 23, baseType: !7, size: 32, elements: !2673)
!2672 = !DIFile(filename: "./gtype-desc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2673 = !{!2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891}
!2674 = !DIEnumerator(name: "gt_ggc_e_15interface_tuple", value: 0, isUnsigned: true)
!2675 = !DIEnumerator(name: "gt_ggc_e_16volatilized_type", value: 1, isUnsigned: true)
!2676 = !DIEnumerator(name: "gt_ggc_e_17string_descriptor", value: 2, isUnsigned: true)
!2677 = !DIEnumerator(name: "gt_ggc_e_15c_inline_static", value: 3, isUnsigned: true)
!2678 = !DIEnumerator(name: "gt_ggc_e_24VEC_c_goto_bindings_p_gc", value: 4, isUnsigned: true)
!2679 = !DIEnumerator(name: "gt_ggc_e_15c_goto_bindings", value: 5, isUnsigned: true)
!2680 = !DIEnumerator(name: "gt_ggc_e_7c_scope", value: 6, isUnsigned: true)
!2681 = !DIEnumerator(name: "gt_ggc_e_9c_binding", value: 7, isUnsigned: true)
!2682 = !DIEnumerator(name: "gt_ggc_e_12c_label_vars", value: 8, isUnsigned: true)
!2683 = !DIEnumerator(name: "gt_ggc_e_8c_parser", value: 9, isUnsigned: true)
!2684 = !DIEnumerator(name: "gt_ggc_e_9imp_entry", value: 10, isUnsigned: true)
!2685 = !DIEnumerator(name: "gt_ggc_e_16hashed_attribute", value: 11, isUnsigned: true)
!2686 = !DIEnumerator(name: "gt_ggc_e_12hashed_entry", value: 12, isUnsigned: true)
!2687 = !DIEnumerator(name: "gt_ggc_e_14type_assertion", value: 13, isUnsigned: true)
!2688 = !DIEnumerator(name: "gt_ggc_e_18treetreehash_entry", value: 14, isUnsigned: true)
!2689 = !DIEnumerator(name: "gt_ggc_e_5CPool", value: 15, isUnsigned: true)
!2690 = !DIEnumerator(name: "gt_ggc_e_3JCF", value: 16, isUnsigned: true)
!2691 = !DIEnumerator(name: "gt_ggc_e_17module_htab_entry", value: 17, isUnsigned: true)
!2692 = !DIEnumerator(name: "gt_ggc_e_13binding_level", value: 18, isUnsigned: true)
!2693 = !DIEnumerator(name: "gt_ggc_e_9opt_stack", value: 19, isUnsigned: true)
!2694 = !DIEnumerator(name: "gt_ggc_e_11align_stack", value: 20, isUnsigned: true)
!2695 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_gc_vec_gc", value: 21, isUnsigned: true)
!2696 = !DIEnumerator(name: "gt_ggc_e_19VEC_const_char_p_gc", value: 22, isUnsigned: true)
!2697 = !DIEnumerator(name: "gt_ggc_e_21pending_abstract_type", value: 23, isUnsigned: true)
!2698 = !DIEnumerator(name: "gt_ggc_e_15VEC_tree_int_gc", value: 24, isUnsigned: true)
!2699 = !DIEnumerator(name: "gt_ggc_e_9cp_parser", value: 25, isUnsigned: true)
!2700 = !DIEnumerator(name: "gt_ggc_e_17cp_parser_context", value: 26, isUnsigned: true)
!2701 = !DIEnumerator(name: "gt_ggc_e_8cp_lexer", value: 27, isUnsigned: true)
!2702 = !DIEnumerator(name: "gt_ggc_e_10tree_check", value: 28, isUnsigned: true)
!2703 = !DIEnumerator(name: "gt_ggc_e_22VEC_deferred_access_gc", value: 29, isUnsigned: true)
!2704 = !DIEnumerator(name: "gt_ggc_e_10spec_entry", value: 30, isUnsigned: true)
!2705 = !DIEnumerator(name: "gt_ggc_e_16pending_template", value: 31, isUnsigned: true)
!2706 = !DIEnumerator(name: "gt_ggc_e_21named_label_use_entry", value: 32, isUnsigned: true)
!2707 = !DIEnumerator(name: "gt_ggc_e_28VEC_deferred_access_check_gc", value: 33, isUnsigned: true)
!2708 = !DIEnumerator(name: "gt_ggc_e_18sorted_fields_type", value: 34, isUnsigned: true)
!2709 = !DIEnumerator(name: "gt_ggc_e_18VEC_tree_pair_s_gc", value: 35, isUnsigned: true)
!2710 = !DIEnumerator(name: "gt_ggc_e_17named_label_entry", value: 36, isUnsigned: true)
!2711 = !DIEnumerator(name: "gt_ggc_e_32VEC_qualified_typedef_usage_t_gc", value: 37, isUnsigned: true)
!2712 = !DIEnumerator(name: "gt_ggc_e_14cp_token_cache", value: 38, isUnsigned: true)
!2713 = !DIEnumerator(name: "gt_ggc_e_11saved_scope", value: 39, isUnsigned: true)
!2714 = !DIEnumerator(name: "gt_ggc_e_16cxx_int_tree_map", value: 40, isUnsigned: true)
!2715 = !DIEnumerator(name: "gt_ggc_e_23VEC_cp_class_binding_gc", value: 41, isUnsigned: true)
!2716 = !DIEnumerator(name: "gt_ggc_e_24VEC_cxx_saved_binding_gc", value: 42, isUnsigned: true)
!2717 = !DIEnumerator(name: "gt_ggc_e_16cp_binding_level", value: 43, isUnsigned: true)
!2718 = !DIEnumerator(name: "gt_ggc_e_11cxx_binding", value: 44, isUnsigned: true)
!2719 = !DIEnumerator(name: "gt_ggc_e_15binding_entry_s", value: 45, isUnsigned: true)
!2720 = !DIEnumerator(name: "gt_ggc_e_15binding_table_s", value: 46, isUnsigned: true)
!2721 = !DIEnumerator(name: "gt_ggc_e_11tinst_level", value: 47, isUnsigned: true)
!2722 = !DIEnumerator(name: "gt_ggc_e_14VEC_tinfo_s_gc", value: 48, isUnsigned: true)
!2723 = !DIEnumerator(name: "gt_ggc_e_18gnat_binding_level", value: 49, isUnsigned: true)
!2724 = !DIEnumerator(name: "gt_ggc_e_9elab_info", value: 50, isUnsigned: true)
!2725 = !DIEnumerator(name: "gt_ggc_e_10stmt_group", value: 51, isUnsigned: true)
!2726 = !DIEnumerator(name: "gt_ggc_e_16VEC_parm_attr_gc", value: 52, isUnsigned: true)
!2727 = !DIEnumerator(name: "gt_ggc_e_11parm_attr_d", value: 53, isUnsigned: true)
!2728 = !DIEnumerator(name: "gt_ggc_e_22VEC_ipa_edge_args_t_gc", value: 54, isUnsigned: true)
!2729 = !DIEnumerator(name: "gt_ggc_e_20lto_symtab_entry_def", value: 55, isUnsigned: true)
!2730 = !DIEnumerator(name: "gt_ggc_e_20ssa_operand_memory_d", value: 56, isUnsigned: true)
!2731 = !DIEnumerator(name: "gt_ggc_e_13scev_info_str", value: 57, isUnsigned: true)
!2732 = !DIEnumerator(name: "gt_ggc_e_24VEC_mem_addr_template_gc", value: 58, isUnsigned: true)
!2733 = !DIEnumerator(name: "gt_ggc_e_13VEC_gimple_gc", value: 59, isUnsigned: true)
!2734 = !DIEnumerator(name: "gt_ggc_e_9type_hash", value: 60, isUnsigned: true)
!2735 = !DIEnumerator(name: "gt_ggc_e_16string_pool_data", value: 61, isUnsigned: true)
!2736 = !DIEnumerator(name: "gt_ggc_e_13libfunc_entry", value: 62, isUnsigned: true)
!2737 = !DIEnumerator(name: "gt_ggc_e_23temp_slot_address_entry", value: 63, isUnsigned: true)
!2738 = !DIEnumerator(name: "gt_ggc_e_15throw_stmt_node", value: 64, isUnsigned: true)
!2739 = !DIEnumerator(name: "gt_ggc_e_21VEC_eh_landing_pad_gc", value: 65, isUnsigned: true)
!2740 = !DIEnumerator(name: "gt_ggc_e_16VEC_eh_region_gc", value: 66, isUnsigned: true)
!2741 = !DIEnumerator(name: "gt_ggc_e_10eh_catch_d", value: 67, isUnsigned: true)
!2742 = !DIEnumerator(name: "gt_ggc_e_16eh_landing_pad_d", value: 68, isUnsigned: true)
!2743 = !DIEnumerator(name: "gt_ggc_e_11eh_region_d", value: 69, isUnsigned: true)
!2744 = !DIEnumerator(name: "gt_ggc_e_10vcall_insn", value: 70, isUnsigned: true)
!2745 = !DIEnumerator(name: "gt_ggc_e_18VEC_vcall_entry_gc", value: 71, isUnsigned: true)
!2746 = !DIEnumerator(name: "gt_ggc_e_18VEC_dcall_entry_gc", value: 72, isUnsigned: true)
!2747 = !DIEnumerator(name: "gt_ggc_e_16var_loc_list_def", value: 73, isUnsigned: true)
!2748 = !DIEnumerator(name: "gt_ggc_e_12var_loc_node", value: 74, isUnsigned: true)
!2749 = !DIEnumerator(name: "gt_ggc_e_20VEC_die_arg_entry_gc", value: 75, isUnsigned: true)
!2750 = !DIEnumerator(name: "gt_ggc_e_16limbo_die_struct", value: 76, isUnsigned: true)
!2751 = !DIEnumerator(name: "gt_ggc_e_20VEC_pubname_entry_gc", value: 77, isUnsigned: true)
!2752 = !DIEnumerator(name: "gt_ggc_e_19VEC_dw_attr_node_gc", value: 78, isUnsigned: true)
!2753 = !DIEnumerator(name: "gt_ggc_e_18comdat_type_struct", value: 79, isUnsigned: true)
!2754 = !DIEnumerator(name: "gt_ggc_e_25dw_ranges_by_label_struct", value: 80, isUnsigned: true)
!2755 = !DIEnumerator(name: "gt_ggc_e_16dw_ranges_struct", value: 81, isUnsigned: true)
!2756 = !DIEnumerator(name: "gt_ggc_e_28dw_separate_line_info_struct", value: 82, isUnsigned: true)
!2757 = !DIEnumerator(name: "gt_ggc_e_19dw_line_info_struct", value: 83, isUnsigned: true)
!2758 = !DIEnumerator(name: "gt_ggc_e_25VEC_deferred_locations_gc", value: 84, isUnsigned: true)
!2759 = !DIEnumerator(name: "gt_ggc_e_18dw_loc_list_struct", value: 85, isUnsigned: true)
!2760 = !DIEnumerator(name: "gt_ggc_e_15dwarf_file_data", value: 86, isUnsigned: true)
!2761 = !DIEnumerator(name: "gt_ggc_e_15queued_reg_save", value: 87, isUnsigned: true)
!2762 = !DIEnumerator(name: "gt_ggc_e_20indirect_string_node", value: 88, isUnsigned: true)
!2763 = !DIEnumerator(name: "gt_ggc_e_19dw_loc_descr_struct", value: 89, isUnsigned: true)
!2764 = !DIEnumerator(name: "gt_ggc_e_13dw_fde_struct", value: 90, isUnsigned: true)
!2765 = !DIEnumerator(name: "gt_ggc_e_13dw_cfi_struct", value: 91, isUnsigned: true)
!2766 = !DIEnumerator(name: "gt_ggc_e_8typeinfo", value: 92, isUnsigned: true)
!2767 = !DIEnumerator(name: "gt_ggc_e_22VEC_alias_set_entry_gc", value: 93, isUnsigned: true)
!2768 = !DIEnumerator(name: "gt_ggc_e_17alias_set_entry_d", value: 94, isUnsigned: true)
!2769 = !DIEnumerator(name: "gt_ggc_e_24constant_descriptor_tree", value: 95, isUnsigned: true)
!2770 = !DIEnumerator(name: "gt_ggc_e_15cgraph_asm_node", value: 96, isUnsigned: true)
!2771 = !DIEnumerator(name: "gt_ggc_e_12varpool_node", value: 97, isUnsigned: true)
!2772 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_set_gc", value: 98, isUnsigned: true)
!2773 = !DIEnumerator(name: "gt_ggc_e_19cgraph_node_set_def", value: 99, isUnsigned: true)
!2774 = !DIEnumerator(name: "gt_ggc_e_27cgraph_node_set_element_def", value: 100, isUnsigned: true)
!2775 = !DIEnumerator(name: "gt_ggc_e_22VEC_cgraph_node_ptr_gc", value: 101, isUnsigned: true)
!2776 = !DIEnumerator(name: "gt_ggc_e_11cgraph_edge", value: 102, isUnsigned: true)
!2777 = !DIEnumerator(name: "gt_ggc_e_24VEC_ipa_replace_map_p_gc", value: 103, isUnsigned: true)
!2778 = !DIEnumerator(name: "gt_ggc_e_15ipa_replace_map", value: 104, isUnsigned: true)
!2779 = !DIEnumerator(name: "gt_ggc_e_11cgraph_node", value: 105, isUnsigned: true)
!2780 = !DIEnumerator(name: "gt_ggc_e_18VEC_basic_block_gc", value: 106, isUnsigned: true)
!2781 = !DIEnumerator(name: "gt_ggc_e_14gimple_bb_info", value: 107, isUnsigned: true)
!2782 = !DIEnumerator(name: "gt_ggc_e_11rtl_bb_info", value: 108, isUnsigned: true)
!2783 = !DIEnumerator(name: "gt_ggc_e_11VEC_edge_gc", value: 109, isUnsigned: true)
!2784 = !DIEnumerator(name: "gt_ggc_e_17cselib_val_struct", value: 110, isUnsigned: true)
!2785 = !DIEnumerator(name: "gt_ggc_e_12elt_loc_list", value: 111, isUnsigned: true)
!2786 = !DIEnumerator(name: "gt_ggc_e_13VEC_loop_p_gc", value: 112, isUnsigned: true)
!2787 = !DIEnumerator(name: "gt_ggc_e_4loop", value: 113, isUnsigned: true)
!2788 = !DIEnumerator(name: "gt_ggc_e_9loop_exit", value: 114, isUnsigned: true)
!2789 = !DIEnumerator(name: "gt_ggc_e_13nb_iter_bound", value: 115, isUnsigned: true)
!2790 = !DIEnumerator(name: "gt_ggc_e_24types_used_by_vars_entry", value: 116, isUnsigned: true)
!2791 = !DIEnumerator(name: "gt_ggc_e_17language_function", value: 117, isUnsigned: true)
!2792 = !DIEnumerator(name: "gt_ggc_e_5loops", value: 118, isUnsigned: true)
!2793 = !DIEnumerator(name: "gt_ggc_e_18control_flow_graph", value: 119, isUnsigned: true)
!2794 = !DIEnumerator(name: "gt_ggc_e_9eh_status", value: 120, isUnsigned: true)
!2795 = !DIEnumerator(name: "gt_ggc_e_20initial_value_struct", value: 121, isUnsigned: true)
!2796 = !DIEnumerator(name: "gt_ggc_e_17rtx_constant_pool", value: 122, isUnsigned: true)
!2797 = !DIEnumerator(name: "gt_ggc_e_18VEC_temp_slot_p_gc", value: 123, isUnsigned: true)
!2798 = !DIEnumerator(name: "gt_ggc_e_9temp_slot", value: 124, isUnsigned: true)
!2799 = !DIEnumerator(name: "gt_ggc_e_9gimple_df", value: 125, isUnsigned: true)
!2800 = !DIEnumerator(name: "gt_ggc_e_23VEC_call_site_record_gc", value: 126, isUnsigned: true)
!2801 = !DIEnumerator(name: "gt_ggc_e_18call_site_record_d", value: 127, isUnsigned: true)
!2802 = !DIEnumerator(name: "gt_ggc_e_14sequence_stack", value: 128, isUnsigned: true)
!2803 = !DIEnumerator(name: "gt_ggc_e_8elt_list", value: 129, isUnsigned: true)
!2804 = !DIEnumerator(name: "gt_ggc_e_17tree_priority_map", value: 130, isUnsigned: true)
!2805 = !DIEnumerator(name: "gt_ggc_e_12tree_int_map", value: 131, isUnsigned: true)
!2806 = !DIEnumerator(name: "gt_ggc_e_8tree_map", value: 132, isUnsigned: true)
!2807 = !DIEnumerator(name: "gt_ggc_e_14lang_tree_node", value: 133, isUnsigned: true)
!2808 = !DIEnumerator(name: "gt_ggc_e_24tree_statement_list_node", value: 134, isUnsigned: true)
!2809 = !DIEnumerator(name: "gt_ggc_e_9var_ann_d", value: 135, isUnsigned: true)
!2810 = !DIEnumerator(name: "gt_ggc_e_9lang_decl", value: 136, isUnsigned: true)
!2811 = !DIEnumerator(name: "gt_ggc_e_9lang_type", value: 137, isUnsigned: true)
!2812 = !DIEnumerator(name: "gt_ggc_e_10die_struct", value: 138, isUnsigned: true)
!2813 = !DIEnumerator(name: "gt_ggc_e_15varray_head_tag", value: 139, isUnsigned: true)
!2814 = !DIEnumerator(name: "gt_ggc_e_12ptr_info_def", value: 140, isUnsigned: true)
!2815 = !DIEnumerator(name: "gt_ggc_e_22VEC_constructor_elt_gc", value: 141, isUnsigned: true)
!2816 = !DIEnumerator(name: "gt_ggc_e_17VEC_alias_pair_gc", value: 142, isUnsigned: true)
!2817 = !DIEnumerator(name: "gt_ggc_e_11VEC_tree_gc", value: 143, isUnsigned: true)
!2818 = !DIEnumerator(name: "gt_ggc_e_12VEC_uchar_gc", value: 144, isUnsigned: true)
!2819 = !DIEnumerator(name: "gt_ggc_e_8function", value: 145, isUnsigned: true)
!2820 = !DIEnumerator(name: "gt_ggc_e_23constant_descriptor_rtx", value: 146, isUnsigned: true)
!2821 = !DIEnumerator(name: "gt_ggc_e_11fixed_value", value: 147, isUnsigned: true)
!2822 = !DIEnumerator(name: "gt_ggc_e_10real_value", value: 148, isUnsigned: true)
!2823 = !DIEnumerator(name: "gt_ggc_e_10VEC_rtx_gc", value: 149, isUnsigned: true)
!2824 = !DIEnumerator(name: "gt_ggc_e_12object_block", value: 150, isUnsigned: true)
!2825 = !DIEnumerator(name: "gt_ggc_e_9reg_attrs", value: 151, isUnsigned: true)
!2826 = !DIEnumerator(name: "gt_ggc_e_9mem_attrs", value: 152, isUnsigned: true)
!2827 = !DIEnumerator(name: "gt_ggc_e_14bitmap_obstack", value: 153, isUnsigned: true)
!2828 = !DIEnumerator(name: "gt_ggc_e_18bitmap_element_def", value: 154, isUnsigned: true)
!2829 = !DIEnumerator(name: "gt_ggc_e_16machine_function", value: 155, isUnsigned: true)
!2830 = !DIEnumerator(name: "gt_ggc_e_17stack_local_entry", value: 156, isUnsigned: true)
!2831 = !DIEnumerator(name: "gt_ggc_e_15basic_block_def", value: 157, isUnsigned: true)
!2832 = !DIEnumerator(name: "gt_ggc_e_8edge_def", value: 158, isUnsigned: true)
!2833 = !DIEnumerator(name: "gt_ggc_e_17gimple_seq_node_d", value: 159, isUnsigned: true)
!2834 = !DIEnumerator(name: "gt_ggc_e_12gimple_seq_d", value: 160, isUnsigned: true)
!2835 = !DIEnumerator(name: "gt_ggc_e_7section", value: 161, isUnsigned: true)
!2836 = !DIEnumerator(name: "gt_ggc_e_18gimple_statement_d", value: 162, isUnsigned: true)
!2837 = !DIEnumerator(name: "gt_ggc_e_9rtvec_def", value: 163, isUnsigned: true)
!2838 = !DIEnumerator(name: "gt_ggc_e_7rtx_def", value: 164, isUnsigned: true)
!2839 = !DIEnumerator(name: "gt_ggc_e_15bitmap_head_def", value: 165, isUnsigned: true)
!2840 = !DIEnumerator(name: "gt_ggc_e_9tree_node", value: 166, isUnsigned: true)
!2841 = !DIEnumerator(name: "gt_ggc_e_6answer", value: 167, isUnsigned: true)
!2842 = !DIEnumerator(name: "gt_ggc_e_9cpp_macro", value: 168, isUnsigned: true)
!2843 = !DIEnumerator(name: "gt_ggc_e_9cpp_token", value: 169, isUnsigned: true)
!2844 = !DIEnumerator(name: "gt_ggc_e_9line_maps", value: 170, isUnsigned: true)
!2845 = !DIEnumerator(name: "gt_e_II17splay_tree_node_s", value: 171, isUnsigned: true)
!2846 = !DIEnumerator(name: "gt_e_SP9tree_node17splay_tree_node_s", value: 172, isUnsigned: true)
!2847 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node17splay_tree_node_s", value: 173, isUnsigned: true)
!2848 = !DIEnumerator(name: "gt_e_IP9tree_node17splay_tree_node_s", value: 174, isUnsigned: true)
!2849 = !DIEnumerator(name: "gt_e_P15interface_tuple4htab", value: 175, isUnsigned: true)
!2850 = !DIEnumerator(name: "gt_e_P16volatilized_type4htab", value: 176, isUnsigned: true)
!2851 = !DIEnumerator(name: "gt_e_P17string_descriptor4htab", value: 177, isUnsigned: true)
!2852 = !DIEnumerator(name: "gt_e_P14type_assertion4htab", value: 178, isUnsigned: true)
!2853 = !DIEnumerator(name: "gt_e_P18treetreehash_entry4htab", value: 179, isUnsigned: true)
!2854 = !DIEnumerator(name: "gt_e_P17module_htab_entry4htab", value: 180, isUnsigned: true)
!2855 = !DIEnumerator(name: "gt_e_P21pending_abstract_type4htab", value: 181, isUnsigned: true)
!2856 = !DIEnumerator(name: "gt_e_P10spec_entry4htab", value: 182, isUnsigned: true)
!2857 = !DIEnumerator(name: "gt_e_P16cxx_int_tree_map4htab", value: 183, isUnsigned: true)
!2858 = !DIEnumerator(name: "gt_e_P17named_label_entry4htab", value: 184, isUnsigned: true)
!2859 = !DIEnumerator(name: "gt_e_P12tree_int_map4htab", value: 185, isUnsigned: true)
!2860 = !DIEnumerator(name: "gt_e_P20lto_symtab_entry_def4htab", value: 186, isUnsigned: true)
!2861 = !DIEnumerator(name: "gt_e_IP9tree_node12splay_tree_s", value: 187, isUnsigned: true)
!2862 = !DIEnumerator(name: "gt_e_P9tree_nodeP9tree_node12splay_tree_s", value: 188, isUnsigned: true)
!2863 = !DIEnumerator(name: "gt_e_P12varpool_node4htab", value: 189, isUnsigned: true)
!2864 = !DIEnumerator(name: "gt_e_P13scev_info_str4htab", value: 190, isUnsigned: true)
!2865 = !DIEnumerator(name: "gt_e_P23constant_descriptor_rtx4htab", value: 191, isUnsigned: true)
!2866 = !DIEnumerator(name: "gt_e_P24constant_descriptor_tree4htab", value: 192, isUnsigned: true)
!2867 = !DIEnumerator(name: "gt_e_P12object_block4htab", value: 193, isUnsigned: true)
!2868 = !DIEnumerator(name: "gt_e_P7section4htab", value: 194, isUnsigned: true)
!2869 = !DIEnumerator(name: "gt_e_P17tree_priority_map4htab", value: 195, isUnsigned: true)
!2870 = !DIEnumerator(name: "gt_e_P8tree_map4htab", value: 196, isUnsigned: true)
!2871 = !DIEnumerator(name: "gt_e_P9type_hash4htab", value: 197, isUnsigned: true)
!2872 = !DIEnumerator(name: "gt_e_P13libfunc_entry4htab", value: 198, isUnsigned: true)
!2873 = !DIEnumerator(name: "gt_e_P23temp_slot_address_entry4htab", value: 199, isUnsigned: true)
!2874 = !DIEnumerator(name: "gt_e_P15throw_stmt_node4htab", value: 200, isUnsigned: true)
!2875 = !DIEnumerator(name: "gt_e_P9reg_attrs4htab", value: 201, isUnsigned: true)
!2876 = !DIEnumerator(name: "gt_e_P9mem_attrs4htab", value: 202, isUnsigned: true)
!2877 = !DIEnumerator(name: "gt_e_P7rtx_def4htab", value: 203, isUnsigned: true)
!2878 = !DIEnumerator(name: "gt_e_SP9tree_node12splay_tree_s", value: 204, isUnsigned: true)
!2879 = !DIEnumerator(name: "gt_e_P10vcall_insn4htab", value: 205, isUnsigned: true)
!2880 = !DIEnumerator(name: "gt_e_P16var_loc_list_def4htab", value: 206, isUnsigned: true)
!2881 = !DIEnumerator(name: "gt_e_P10die_struct4htab", value: 207, isUnsigned: true)
!2882 = !DIEnumerator(name: "gt_e_P15dwarf_file_data4htab", value: 208, isUnsigned: true)
!2883 = !DIEnumerator(name: "gt_e_P20indirect_string_node4htab", value: 209, isUnsigned: true)
!2884 = !DIEnumerator(name: "gt_e_P11cgraph_node4htab", value: 210, isUnsigned: true)
!2885 = !DIEnumerator(name: "gt_e_II12splay_tree_s", value: 211, isUnsigned: true)
!2886 = !DIEnumerator(name: "gt_e_P27cgraph_node_set_element_def4htab", value: 212, isUnsigned: true)
!2887 = !DIEnumerator(name: "gt_e_P11cgraph_edge4htab", value: 213, isUnsigned: true)
!2888 = !DIEnumerator(name: "gt_e_P9loop_exit4htab", value: 214, isUnsigned: true)
!2889 = !DIEnumerator(name: "gt_e_P24types_used_by_vars_entry4htab", value: 215, isUnsigned: true)
!2890 = !DIEnumerator(name: "gt_e_P9tree_node4htab", value: 216, isUnsigned: true)
!2891 = !DIEnumerator(name: "gt_types_enum_last", value: 217, isUnsigned: true)
!2892 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_methods", file: !753, line: 291, baseType: !7, size: 32, elements: !2893)
!2893 = !{!2894, !2895, !2896, !2897, !2898}
!2894 = !DIEnumerator(name: "OPTAB_DIRECT", value: 0, isUnsigned: true)
!2895 = !DIEnumerator(name: "OPTAB_LIB", value: 1, isUnsigned: true)
!2896 = !DIEnumerator(name: "OPTAB_WIDEN", value: 2, isUnsigned: true)
!2897 = !DIEnumerator(name: "OPTAB_LIB_WIDEN", value: 3, isUnsigned: true)
!2898 = !DIEnumerator(name: "OPTAB_MUST_WIDEN", value: 4, isUnsigned: true)
!2899 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "block_op_methods", file: !753, line: 412, baseType: !7, size: 32, elements: !2900)
!2900 = !{!2901, !2902, !2903, !2904}
!2901 = !DIEnumerator(name: "BLOCK_OP_NORMAL", value: 0, isUnsigned: true)
!2902 = !DIEnumerator(name: "BLOCK_OP_NO_LIBCALL", value: 1, isUnsigned: true)
!2903 = !DIEnumerator(name: "BLOCK_OP_CALL_PARM", value: 2, isUnsigned: true)
!2904 = !DIEnumerator(name: "BLOCK_OP_TAILCALL", value: 3, isUnsigned: true)
!2905 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_changeable_flags", file: !2906, line: 463, baseType: !7, size: 32, elements: !2907)
!2906 = !DIFile(filename: "./df.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2907 = !{!2908, !2909, !2910, !2911, !2912, !2913, !2914}
!2908 = !DIEnumerator(name: "DF_LR_RUN_DCE", value: 1, isUnsigned: true)
!2909 = !DIEnumerator(name: "DF_NO_HARD_REGS", value: 2, isUnsigned: true)
!2910 = !DIEnumerator(name: "DF_EQ_NOTES", value: 4, isUnsigned: true)
!2911 = !DIEnumerator(name: "DF_NO_REGS_EVER_LIVE", value: 8, isUnsigned: true)
!2912 = !DIEnumerator(name: "DF_NO_INSN_RESCAN", value: 16, isUnsigned: true)
!2913 = !DIEnumerator(name: "DF_DEFER_INSN_RESCAN", value: 32, isUnsigned: true)
!2914 = !DIEnumerator(name: "DF_VERIFY_SCHEDULED", value: 64, isUnsigned: true)
!2915 = !{!2916, !2917, !7, !13, !2918, !2948, !141, !3045, !3035, !399, !3168, !3291, !2924, !2638, !4298, !4304, !4305, !3376, !3400, !4311, !4324, !4337, !4339, !4340, !4345, !3535}
!2916 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!2917 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2919, size: 64)
!2919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "temp_slot", file: !3, line: 456, size: 576, elements: !2920)
!2920 = !{!2921, !2922, !2923, !4289, !4290, !4291, !4292, !4293, !4294, !4295, !4296, !4297}
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2919, file: !3, line: 458, baseType: !2918, size: 64)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2919, file: !3, line: 460, baseType: !2918, size: 64, offset: 64)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "slot", scope: !2919, file: !3, line: 462, baseType: !2924, size: 64, offset: 128)
!2924 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !2925, line: 50, baseType: !2926)
!2925 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2927, size: 64)
!2927 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !385, line: 240, size: 384, elements: !2928)
!2928 = !{!2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939}
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2927, file: !385, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2927, file: !385, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !2927, file: !385, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2927, file: !385, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !2927, file: !385, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !2927, file: !385, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !2927, file: !385, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2927, file: !385, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !2927, file: !385, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !2927, file: !385, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2927, file: !385, line: 321, baseType: !2940, size: 320, offset: 64)
!2940 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !385, line: 315, size: 320, elements: !2941)
!2941 = !{!2942, !4224, !4226, !4287, !4288}
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2940, file: !385, line: 316, baseType: !2943, size: 64)
!2943 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2944, size: 64, elements: !2963)
!2944 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !385, line: 183, baseType: !2945)
!2945 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !385, line: 166, size: 64, elements: !2946)
!2946 = !{!2947, !2949, !2950, !2954, !2955, !2965, !2966, !2978, !2981, !3044, !4202, !4203, !4214, !4221}
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !2945, file: !385, line: 168, baseType: !2948, size: 32)
!2948 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !2945, file: !385, line: 169, baseType: !7, size: 32)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !2945, file: !385, line: 170, baseType: !2951, size: 64)
!2951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2952, size: 64)
!2952 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2953)
!2953 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !2945, file: !385, line: 171, baseType: !2924, size: 64)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !2945, file: !385, line: 172, baseType: !2956, size: 64)
!2956 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !2925, line: 53, baseType: !2957)
!2957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2958, size: 64)
!2958 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !385, line: 359, size: 128, elements: !2959)
!2959 = !{!2960, !2961}
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !2958, file: !385, line: 360, baseType: !2948, size: 32)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !2958, file: !385, line: 361, baseType: !2962, size: 64, offset: 64)
!2962 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2924, size: 64, elements: !2963)
!2963 = !{!2964}
!2964 = !DISubrange(count: 1)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !2945, file: !385, line: 173, baseType: !13, size: 32)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !2945, file: !385, line: 174, baseType: !2967, size: 32)
!2967 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !385, line: 133, baseType: !2968)
!2968 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !385, line: 115, size: 32, elements: !2969)
!2969 = !{!2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977}
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !2968, file: !385, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !2968, file: !385, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !2968, file: !385, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !2968, file: !385, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !2968, file: !385, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !2968, file: !385, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !2968, file: !385, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !2968, file: !385, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !2945, file: !385, line: 175, baseType: !2979, size: 64)
!2979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2980, size: 64)
!2980 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !385, line: 175, flags: DIFlagFwdDecl)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !2945, file: !385, line: 176, baseType: !2982, size: 64)
!2982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2983, size: 64)
!2983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2984, line: 75, size: 256, elements: !2985)
!2984 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2985 = !{!2986, !3000, !3001, !3002}
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2983, file: !2984, line: 76, baseType: !2987, size: 64)
!2987 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2988, size: 64)
!2988 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2984, line: 68, baseType: !2989)
!2989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2984, line: 63, size: 320, elements: !2990)
!2990 = !{!2991, !2993, !2994, !2995}
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2989, file: !2984, line: 64, baseType: !2992, size: 64)
!2992 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2989, size: 64)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2989, file: !2984, line: 65, baseType: !2992, size: 64, offset: 64)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2989, file: !2984, line: 66, baseType: !7, size: 32, offset: 128)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2989, file: !2984, line: 67, baseType: !2996, size: 128, offset: 192)
!2996 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2997, size: 128, elements: !2998)
!2997 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2984, line: 29, baseType: !2916)
!2998 = !{!2999}
!2999 = !DISubrange(count: 2)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2983, file: !2984, line: 77, baseType: !2987, size: 64, offset: 64)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2983, file: !2984, line: 78, baseType: !7, size: 32, offset: 128)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2983, file: !2984, line: 79, baseType: !3003, size: 64, offset: 192)
!3003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3004, size: 64)
!3004 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2984, line: 49, baseType: !3005)
!3005 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2984, line: 45, size: 832, elements: !3006)
!3006 = !{!3007, !3008, !3009}
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !3005, file: !2984, line: 46, baseType: !2992, size: 64)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !3005, file: !2984, line: 47, baseType: !2982, size: 64, offset: 64)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !3005, file: !2984, line: 48, baseType: !3010, size: 704, offset: 128)
!3010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !3011, line: 164, size: 704, elements: !3012)
!3011 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3012 = !{!3013, !3015, !3026, !3027, !3028, !3029, !3030, !3031, !3036, !3040, !3041, !3042, !3043}
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !3010, file: !3011, line: 166, baseType: !3014, size: 64)
!3014 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !3010, file: !3011, line: 167, baseType: !3016, size: 64, offset: 64)
!3016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3017, size: 64)
!3017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !3011, line: 157, size: 192, elements: !3018)
!3018 = !{!3019, !3021, !3022}
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !3017, file: !3011, line: 159, baseType: !3020, size: 64)
!3020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2953, size: 64)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3017, file: !3011, line: 160, baseType: !3016, size: 64, offset: 64)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !3017, file: !3011, line: 161, baseType: !3023, size: 32, offset: 128)
!3023 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2953, size: 32, elements: !3024)
!3024 = !{!3025}
!3025 = !DISubrange(count: 4)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !3010, file: !3011, line: 168, baseType: !3020, size: 64, offset: 128)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !3010, file: !3011, line: 169, baseType: !3020, size: 64, offset: 192)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !3010, file: !3011, line: 170, baseType: !3020, size: 64, offset: 256)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !3010, file: !3011, line: 171, baseType: !3014, size: 64, offset: 320)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !3010, file: !3011, line: 172, baseType: !2948, size: 32, offset: 384)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !3010, file: !3011, line: 176, baseType: !3032, size: 64, offset: 448)
!3032 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3033, size: 64)
!3033 = !DISubroutineType(types: !3034)
!3034 = !{!3016, !3035, !3014}
!3035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !3010, file: !3011, line: 177, baseType: !3037, size: 64, offset: 512)
!3037 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3038, size: 64)
!3038 = !DISubroutineType(types: !3039)
!3039 = !{null, !3035, !3016}
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !3010, file: !3011, line: 178, baseType: !3035, size: 64, offset: 576)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !3010, file: !3011, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !3010, file: !3011, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !3010, file: !3011, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !2945, file: !385, line: 177, baseType: !3045, size: 64)
!3045 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !2925, line: 56, baseType: !3046)
!3046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3047, size: 64)
!3047 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !142, line: 3371, size: 1792, elements: !3048)
!3048 = !{!3049, !3082, !3088, !3099, !3118, !3129, !3134, !3141, !3147, !3161, !3173, !3211, !3216, !3244, !3252, !3253, !3258, !3267, !3273, !3278, !3282, !3286, !3854, !3903, !3909, !3915, !3922, !3933, !3947, !3964, !3976, !3998, !4013, !4184}
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3047, file: !142, line: 3372, baseType: !3050, size: 64)
!3050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !142, line: 360, size: 64, elements: !3051)
!3051 = !{!3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081}
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3050, file: !142, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !3050, file: !142, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !3050, file: !142, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !3050, file: !142, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !3050, file: !142, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !3050, file: !142, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !3050, file: !142, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !3050, file: !142, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !3050, file: !142, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !3050, file: !142, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !3050, file: !142, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !3050, file: !142, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !3050, file: !142, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !3050, file: !142, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !3050, file: !142, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !3050, file: !142, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !3050, file: !142, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !3050, file: !142, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3050, file: !142, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3050, file: !142, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3050, file: !142, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3050, file: !142, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3050, file: !142, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3050, file: !142, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3050, file: !142, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3050, file: !142, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !3050, file: !142, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !3050, file: !142, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !3050, file: !142, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !3050, file: !142, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3047, file: !142, line: 3373, baseType: !3083, size: 192)
!3083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !142, line: 402, size: 192, elements: !3084)
!3084 = !{!3085, !3086, !3087}
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3083, file: !142, line: 403, baseType: !3050, size: 64)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !3083, file: !142, line: 404, baseType: !3045, size: 64, offset: 64)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3083, file: !142, line: 405, baseType: !3045, size: 64, offset: 128)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !3047, file: !142, line: 3374, baseType: !3089, size: 320)
!3089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !142, line: 1384, size: 320, elements: !3090)
!3090 = !{!3091, !3092}
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3089, file: !142, line: 1385, baseType: !3083, size: 192)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !3089, file: !142, line: 1386, baseType: !3093, size: 128, offset: 192)
!3093 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !3094, line: 58, baseType: !3095)
!3094 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3095 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3094, line: 54, size: 128, elements: !3096)
!3096 = !{!3097, !3098}
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !3095, file: !3094, line: 56, baseType: !2916, size: 64)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !3095, file: !3094, line: 57, baseType: !3014, size: 64, offset: 64)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !3047, file: !142, line: 3375, baseType: !3100, size: 256)
!3100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !142, line: 1397, size: 256, elements: !3101)
!3101 = !{!3102, !3103}
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3100, file: !142, line: 1398, baseType: !3083, size: 192)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !3100, file: !142, line: 1399, baseType: !3104, size: 64, offset: 192)
!3104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3105, size: 64)
!3105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !3106, line: 52, size: 256, elements: !3107)
!3106 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3107 = !{!3108, !3109, !3110, !3111, !3112, !3113, !3114}
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !3105, file: !3106, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !3105, file: !3106, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !3105, file: !3106, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !3105, file: !3106, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3105, file: !3106, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !3105, file: !3106, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !3105, file: !3106, line: 62, baseType: !3115, size: 192, offset: 64)
!3115 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2916, size: 192, elements: !3116)
!3116 = !{!3117}
!3117 = !DISubrange(count: 3)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !3047, file: !142, line: 3376, baseType: !3119, size: 256)
!3119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !142, line: 1408, size: 256, elements: !3120)
!3120 = !{!3121, !3122}
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3119, file: !142, line: 1409, baseType: !3083, size: 192)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !3119, file: !142, line: 1410, baseType: !3123, size: 64, offset: 192)
!3123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3124, size: 64)
!3124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !3125, line: 27, size: 192, elements: !3126)
!3125 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3126 = !{!3127, !3128}
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3124, file: !3125, line: 29, baseType: !3093, size: 128)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3124, file: !3125, line: 30, baseType: !13, size: 32, offset: 128)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !3047, file: !142, line: 3377, baseType: !3130, size: 256)
!3130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !142, line: 1437, size: 256, elements: !3131)
!3131 = !{!3132, !3133}
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3130, file: !142, line: 1438, baseType: !3083, size: 192)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !3130, file: !142, line: 1439, baseType: !3045, size: 64, offset: 192)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3047, file: !142, line: 3378, baseType: !3135, size: 256)
!3135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !142, line: 1418, size: 256, elements: !3136)
!3136 = !{!3137, !3138, !3139}
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3135, file: !142, line: 1419, baseType: !3083, size: 192)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3135, file: !142, line: 1420, baseType: !2948, size: 32, offset: 192)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !3135, file: !142, line: 1421, baseType: !3140, size: 8, offset: 224)
!3140 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2953, size: 8, elements: !2963)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !3047, file: !142, line: 3379, baseType: !3142, size: 320)
!3142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !142, line: 1428, size: 320, elements: !3143)
!3143 = !{!3144, !3145, !3146}
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3142, file: !142, line: 1429, baseType: !3083, size: 192)
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !3142, file: !142, line: 1430, baseType: !3045, size: 64, offset: 192)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !3142, file: !142, line: 1431, baseType: !3045, size: 64, offset: 256)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !3047, file: !142, line: 3380, baseType: !3148, size: 320)
!3148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !142, line: 1460, size: 320, elements: !3149)
!3149 = !{!3150, !3151}
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3148, file: !142, line: 1461, baseType: !3083, size: 192)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !3148, file: !142, line: 1462, baseType: !3152, size: 128, offset: 192)
!3152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !3153, line: 31, size: 128, elements: !3154)
!3153 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3154 = !{!3155, !3159, !3160}
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !3152, file: !3153, line: 32, baseType: !3156, size: 64)
!3156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3157, size: 64)
!3157 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3158)
!3158 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !3152, file: !3153, line: 33, baseType: !7, size: 32, offset: 64)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !3152, file: !3153, line: 34, baseType: !7, size: 32, offset: 96)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !3047, file: !142, line: 3381, baseType: !3162, size: 384)
!3162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !142, line: 2507, size: 384, elements: !3163)
!3163 = !{!3164, !3165, !3170, !3171, !3172}
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3162, file: !142, line: 2508, baseType: !3083, size: 192)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3162, file: !142, line: 2509, baseType: !3166, size: 32, offset: 192)
!3166 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !3167, line: 58, baseType: !3168)
!3167 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3168 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !3169, line: 44, baseType: !7)
!3169 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3162, file: !142, line: 2510, baseType: !7, size: 32, offset: 224)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3162, file: !142, line: 2511, baseType: !3045, size: 64, offset: 256)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3162, file: !142, line: 2512, baseType: !3045, size: 64, offset: 320)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !3047, file: !142, line: 3382, baseType: !3174, size: 896)
!3174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !142, line: 2652, size: 896, elements: !3175)
!3175 = !{!3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3191, !3192, !3193, !3194, !3195, !3196, !3197, !3198, !3199, !3200, !3201, !3202, !3203, !3204, !3205, !3206, !3207, !3208}
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3174, file: !142, line: 2653, baseType: !3162, size: 384)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3174, file: !142, line: 2654, baseType: !3045, size: 64, offset: 384)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3174, file: !142, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !3174, file: !142, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !3174, file: !142, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !3174, file: !142, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3174, file: !142, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !3174, file: !142, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !3174, file: !142, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !3174, file: !142, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3174, file: !142, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3174, file: !142, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3174, file: !142, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3174, file: !142, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3174, file: !142, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3174, file: !142, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3174, file: !142, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !3174, file: !142, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !3174, file: !142, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !3174, file: !142, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !3174, file: !142, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !3174, file: !142, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !3174, file: !142, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !3174, file: !142, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !3174, file: !142, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !3174, file: !142, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !3174, file: !142, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3174, file: !142, line: 2703, baseType: !7, size: 32, offset: 512)
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3174, file: !142, line: 2705, baseType: !3045, size: 64, offset: 576)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !3174, file: !142, line: 2706, baseType: !3045, size: 64, offset: 640)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3174, file: !142, line: 2707, baseType: !3045, size: 64, offset: 704)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3174, file: !142, line: 2708, baseType: !3045, size: 64, offset: 768)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3174, file: !142, line: 2711, baseType: !3209, size: 64, offset: 832)
!3209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3210, size: 64)
!3210 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !142, line: 2711, flags: DIFlagFwdDecl)
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !3047, file: !142, line: 3383, baseType: !3212, size: 960)
!3212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !142, line: 2756, size: 960, elements: !3213)
!3213 = !{!3214, !3215}
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3212, file: !142, line: 2757, baseType: !3174, size: 896)
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3212, file: !142, line: 2758, baseType: !2924, size: 64, offset: 896)
!3216 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !3047, file: !142, line: 3384, baseType: !3217, size: 1472)
!3217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !142, line: 3114, size: 1472, elements: !3218)
!3218 = !{!3219, !3240, !3241, !3242, !3243}
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3217, file: !142, line: 3115, baseType: !3220, size: 1216)
!3220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !142, line: 2984, size: 1216, elements: !3221)
!3221 = !{!3222, !3223, !3224, !3225, !3226, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3238, !3239}
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3220, file: !142, line: 2985, baseType: !3212, size: 960)
!3223 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !3220, file: !142, line: 2986, baseType: !3045, size: 64, offset: 960)
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !3220, file: !142, line: 2987, baseType: !3045, size: 64, offset: 1024)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !3220, file: !142, line: 2988, baseType: !3045, size: 64, offset: 1088)
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !3220, file: !142, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !3220, file: !142, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !3220, file: !142, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !3220, file: !142, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !3220, file: !142, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !3220, file: !142, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !3220, file: !142, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !3220, file: !142, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !3220, file: !142, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !3220, file: !142, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !3220, file: !142, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !3220, file: !142, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !3220, file: !142, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!3239 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !3220, file: !142, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!3240 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !3217, file: !142, line: 3117, baseType: !3045, size: 64, offset: 1216)
!3241 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !3217, file: !142, line: 3119, baseType: !3045, size: 64, offset: 1280)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !3217, file: !142, line: 3121, baseType: !3045, size: 64, offset: 1344)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !3217, file: !142, line: 3123, baseType: !3045, size: 64, offset: 1408)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !3047, file: !142, line: 3385, baseType: !3245, size: 1088)
!3245 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !142, line: 2874, size: 1088, elements: !3246)
!3246 = !{!3247, !3248, !3249}
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3245, file: !142, line: 2875, baseType: !3212, size: 960)
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !3245, file: !142, line: 2876, baseType: !2924, size: 64, offset: 960)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3245, file: !142, line: 2877, baseType: !3250, size: 64, offset: 1024)
!3250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3251, size: 64)
!3251 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !142, line: 2856, flags: DIFlagFwdDecl)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !3047, file: !142, line: 3386, baseType: !3220, size: 1216)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !3047, file: !142, line: 3387, baseType: !3254, size: 1280)
!3254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !142, line: 3093, size: 1280, elements: !3255)
!3255 = !{!3256, !3257}
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3254, file: !142, line: 3094, baseType: !3220, size: 1216)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3254, file: !142, line: 3095, baseType: !3250, size: 64, offset: 1216)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !3047, file: !142, line: 3388, baseType: !3259, size: 1216)
!3259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !142, line: 2824, size: 1216, elements: !3260)
!3260 = !{!3261, !3262, !3263, !3264, !3265, !3266}
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3259, file: !142, line: 2825, baseType: !3174, size: 896)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3259, file: !142, line: 2827, baseType: !3045, size: 64, offset: 896)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !3259, file: !142, line: 2828, baseType: !3045, size: 64, offset: 960)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !3259, file: !142, line: 2829, baseType: !3045, size: 64, offset: 1024)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !3259, file: !142, line: 2830, baseType: !3045, size: 64, offset: 1088)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !3259, file: !142, line: 2831, baseType: !3045, size: 64, offset: 1152)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !3047, file: !142, line: 3389, baseType: !3268, size: 1024)
!3268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !142, line: 2850, size: 1024, elements: !3269)
!3269 = !{!3270, !3271, !3272}
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3268, file: !142, line: 2851, baseType: !3212, size: 960)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !3268, file: !142, line: 2852, baseType: !2948, size: 32, offset: 960)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !3268, file: !142, line: 2853, baseType: !2948, size: 32, offset: 992)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !3047, file: !142, line: 3390, baseType: !3274, size: 1024)
!3274 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !142, line: 2857, size: 1024, elements: !3275)
!3275 = !{!3276, !3277}
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3274, file: !142, line: 2858, baseType: !3212, size: 960)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !3274, file: !142, line: 2859, baseType: !3250, size: 64, offset: 960)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !3047, file: !142, line: 3391, baseType: !3279, size: 960)
!3279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !142, line: 2862, size: 960, elements: !3280)
!3280 = !{!3281}
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3279, file: !142, line: 2863, baseType: !3212, size: 960)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !3047, file: !142, line: 3392, baseType: !3283, size: 1472)
!3283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !142, line: 3304, size: 1472, elements: !3284)
!3284 = !{!3285}
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3283, file: !142, line: 3305, baseType: !3217, size: 1472)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !3047, file: !142, line: 3393, baseType: !3287, size: 1792)
!3287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !142, line: 3248, size: 1792, elements: !3288)
!3288 = !{!3289, !3290, !3833, !3834, !3835, !3836, !3837, !3838, !3839, !3840, !3841, !3842, !3843, !3844, !3845, !3846, !3847, !3848, !3849, !3850, !3851, !3852, !3853}
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3287, file: !142, line: 3249, baseType: !3217, size: 1472)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !3287, file: !142, line: 3251, baseType: !3291, size: 64, offset: 1472)
!3291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3292, size: 64)
!3292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1493, line: 463, size: 1152, elements: !3293)
!3293 = !{!3294, !3457, !3770, !3771, !3774, !3777, !3778, !3779, !3780, !3781, !3782, !3806, !3809, !3810, !3811, !3812, !3813, !3814, !3815, !3816, !3817, !3818, !3819, !3820, !3821, !3822, !3823, !3824, !3825, !3826, !3827, !3828, !3829, !3830, !3831, !3832}
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !3292, file: !1493, line: 464, baseType: !3295, size: 64)
!3295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3296, size: 64)
!3296 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !6, line: 194, size: 384, elements: !3297)
!3297 = !{!3298, !3347, !3360, !3374, !3425, !3438}
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !3296, file: !6, line: 197, baseType: !3299, size: 64)
!3299 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !6, line: 182, baseType: !3300)
!3300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3301, size: 64)
!3301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !6, line: 116, size: 704, elements: !3302)
!3302 = !{!3303, !3304, !3305, !3306, !3307, !3308, !3335, !3344, !3345, !3346}
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !3301, file: !6, line: 119, baseType: !3300, size: 64)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !3301, file: !6, line: 122, baseType: !3300, size: 64, offset: 64)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !3301, file: !6, line: 123, baseType: !3300, size: 64, offset: 128)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3301, file: !6, line: 126, baseType: !2948, size: 32, offset: 192)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3301, file: !6, line: 129, baseType: !5, size: 32, offset: 224)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !3301, file: !6, line: 165, baseType: !3309, size: 192, offset: 256)
!3309 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !6, line: 132, size: 192, elements: !3310)
!3310 = !{!3311, !3324, !3330}
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !3309, file: !6, line: 137, baseType: !3312, size: 128)
!3312 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !6, line: 133, size: 128, elements: !3313)
!3313 = !{!3314, !3323}
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !3312, file: !6, line: 135, baseType: !3315, size: 64)
!3315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3316, size: 64)
!3316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !6, line: 93, size: 320, elements: !3317)
!3317 = !{!3318, !3319, !3320, !3321, !3322}
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !3316, file: !6, line: 96, baseType: !3315, size: 64)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !3316, file: !6, line: 97, baseType: !3315, size: 64, offset: 64)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !3316, file: !6, line: 101, baseType: !3045, size: 64, offset: 128)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !3316, file: !6, line: 106, baseType: !3045, size: 64, offset: 192)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !3316, file: !6, line: 111, baseType: !3045, size: 64, offset: 256)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !3312, file: !6, line: 136, baseType: !3315, size: 64, offset: 64)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !3309, file: !6, line: 151, baseType: !3325, size: 192)
!3325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !6, line: 139, size: 192, elements: !3326)
!3326 = !{!3327, !3328, !3329}
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !3325, file: !6, line: 141, baseType: !3045, size: 64)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !3325, file: !6, line: 145, baseType: !3045, size: 64, offset: 64)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !3325, file: !6, line: 150, baseType: !2948, size: 32, offset: 128)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !3309, file: !6, line: 164, baseType: !3331, size: 128)
!3331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !6, line: 153, size: 128, elements: !3332)
!3332 = !{!3333, !3334}
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !3331, file: !6, line: 161, baseType: !3045, size: 64)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !3331, file: !6, line: 163, baseType: !3166, size: 32, offset: 64)
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !3301, file: !6, line: 168, baseType: !3336, size: 64, offset: 448)
!3336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3337, size: 64)
!3337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !6, line: 67, size: 320, elements: !3338)
!3338 = !{!3339, !3340, !3341, !3342, !3343}
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !3337, file: !6, line: 70, baseType: !3336, size: 64)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !3337, file: !6, line: 73, baseType: !3300, size: 64, offset: 64)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !3337, file: !6, line: 78, baseType: !3045, size: 64, offset: 128)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !3337, file: !6, line: 85, baseType: !2924, size: 64, offset: 192)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3337, file: !6, line: 88, baseType: !2948, size: 32, offset: 256)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !3301, file: !6, line: 173, baseType: !2924, size: 64, offset: 512)
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !3301, file: !6, line: 173, baseType: !2924, size: 64, offset: 576)
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !3301, file: !6, line: 177, baseType: !3158, size: 8, offset: 640)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !3296, file: !6, line: 200, baseType: !3348, size: 64, offset: 64)
!3348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3349, size: 64)
!3349 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !6, line: 185, baseType: !3350)
!3350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !6, line: 185, size: 128, elements: !3351)
!3351 = !{!3352}
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3350, file: !6, line: 185, baseType: !3353, size: 128)
!3353 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !6, line: 184, baseType: !3354)
!3354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !6, line: 184, size: 128, elements: !3355)
!3355 = !{!3356, !3357, !3358}
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3354, file: !6, line: 184, baseType: !7, size: 32)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3354, file: !6, line: 184, baseType: !7, size: 32, offset: 32)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3354, file: !6, line: 184, baseType: !3359, size: 64, offset: 64)
!3359 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3299, size: 64, elements: !2963)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !3296, file: !6, line: 203, baseType: !3361, size: 64, offset: 128)
!3361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3362, size: 64)
!3362 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !6, line: 189, baseType: !3363)
!3363 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !6, line: 189, size: 128, elements: !3364)
!3364 = !{!3365}
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3363, file: !6, line: 189, baseType: !3366, size: 128)
!3366 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !6, line: 188, baseType: !3367)
!3367 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !6, line: 188, size: 128, elements: !3368)
!3368 = !{!3369, !3370, !3371}
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3367, file: !6, line: 188, baseType: !7, size: 32)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3367, file: !6, line: 188, baseType: !7, size: 32, offset: 32)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3367, file: !6, line: 188, baseType: !3372, size: 64, offset: 64)
!3372 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3373, size: 64, elements: !2963)
!3373 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !6, line: 180, baseType: !3336)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !3296, file: !6, line: 207, baseType: !3375, size: 64, offset: 192)
!3375 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2661, line: 144, baseType: !3376)
!3376 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3377, size: 64)
!3377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2661, line: 100, size: 896, elements: !3378)
!3378 = !{!3379, !3387, !3392, !3397, !3399, !3402, !3403, !3404, !3405, !3406, !3411, !3413, !3414, !3419, !3424}
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !3377, file: !2661, line: 102, baseType: !3380, size: 64)
!3380 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2661, line: 52, baseType: !3381)
!3381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3382, size: 64)
!3382 = !DISubroutineType(types: !3383)
!3383 = !{!3384, !3385}
!3384 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2661, line: 47, baseType: !7)
!3385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3386, size: 64)
!3386 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !3377, file: !2661, line: 105, baseType: !3388, size: 64, offset: 64)
!3388 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2661, line: 59, baseType: !3389)
!3389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3390, size: 64)
!3390 = !DISubroutineType(types: !3391)
!3391 = !{!2948, !3385, !3385}
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !3377, file: !2661, line: 108, baseType: !3393, size: 64, offset: 128)
!3393 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2661, line: 63, baseType: !3394)
!3394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3395, size: 64)
!3395 = !DISubroutineType(types: !3396)
!3396 = !{null, !3035}
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !3377, file: !2661, line: 111, baseType: !3398, size: 64, offset: 192)
!3398 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3035, size: 64)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3377, file: !2661, line: 114, baseType: !3400, size: 64, offset: 256)
!3400 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !3401, line: 46, baseType: !2916)
!3401 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !3377, file: !2661, line: 117, baseType: !3400, size: 64, offset: 320)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !3377, file: !2661, line: 120, baseType: !3400, size: 64, offset: 384)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !3377, file: !2661, line: 124, baseType: !7, size: 32, offset: 448)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !3377, file: !2661, line: 128, baseType: !7, size: 32, offset: 480)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !3377, file: !2661, line: 131, baseType: !3407, size: 64, offset: 512)
!3407 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2661, line: 75, baseType: !3408)
!3408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3409, size: 64)
!3409 = !DISubroutineType(types: !3410)
!3410 = !{!3035, !3400, !3400}
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !3377, file: !2661, line: 132, baseType: !3412, size: 64, offset: 576)
!3412 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2661, line: 78, baseType: !3394)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !3377, file: !2661, line: 135, baseType: !3035, size: 64, offset: 640)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !3377, file: !2661, line: 136, baseType: !3415, size: 64, offset: 704)
!3415 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2661, line: 82, baseType: !3416)
!3416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3417, size: 64)
!3417 = !DISubroutineType(types: !3418)
!3418 = !{!3035, !3035, !3400, !3400}
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !3377, file: !2661, line: 137, baseType: !3420, size: 64, offset: 768)
!3420 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2661, line: 83, baseType: !3421)
!3421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3422, size: 64)
!3422 = !DISubroutineType(types: !3423)
!3423 = !{null, !3035, !3035}
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !3377, file: !2661, line: 141, baseType: !7, size: 32, offset: 832)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !3296, file: !6, line: 211, baseType: !3426, size: 64, offset: 256)
!3426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3427, size: 64)
!3427 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !142, line: 183, baseType: !3428)
!3428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !142, line: 183, size: 128, elements: !3429)
!3429 = !{!3430}
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3428, file: !142, line: 183, baseType: !3431, size: 128)
!3431 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !142, line: 182, baseType: !3432)
!3432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !142, line: 182, size: 128, elements: !3433)
!3433 = !{!3434, !3435, !3436}
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3432, file: !142, line: 182, baseType: !7, size: 32)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3432, file: !142, line: 182, baseType: !7, size: 32, offset: 32)
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3432, file: !142, line: 182, baseType: !3437, size: 64, offset: 64)
!3437 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3045, size: 64, elements: !2963)
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !3296, file: !6, line: 220, baseType: !3439, size: 64, offset: 320)
!3439 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !6, line: 217, size: 64, elements: !3440)
!3440 = !{!3441, !3442}
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !3439, file: !6, line: 218, baseType: !3426, size: 64)
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !3439, file: !6, line: 219, baseType: !3443, size: 64)
!3443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3444, size: 64)
!3444 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !3445, line: 29, baseType: !3446)
!3445 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3446 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !3445, line: 29, size: 96, elements: !3447)
!3447 = !{!3448}
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3446, file: !3445, line: 29, baseType: !3449, size: 96)
!3449 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !3445, line: 27, baseType: !3450)
!3450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !3445, line: 27, size: 96, elements: !3451)
!3451 = !{!3452, !3453, !3454}
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3450, file: !3445, line: 27, baseType: !7, size: 32)
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3450, file: !3445, line: 27, baseType: !7, size: 32, offset: 32)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3450, file: !3445, line: 27, baseType: !3455, size: 8, offset: 64)
!3455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3456, size: 8, elements: !2963)
!3456 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !3445, line: 26, baseType: !3158)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !3292, file: !1493, line: 467, baseType: !3458, size: 64, offset: 64)
!3458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3459, size: 64)
!3459 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !369, line: 374, size: 640, elements: !3460)
!3460 = !{!3461, !3745, !3746, !3759, !3760, !3761, !3762, !3763, !3764, !3766, !3768, !3769}
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !3459, file: !369, line: 377, baseType: !3462, size: 64)
!3462 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !2925, line: 111, baseType: !3463)
!3463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3464, size: 64)
!3464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !369, line: 217, size: 832, elements: !3465)
!3465 = !{!3466, !3710, !3711, !3712, !3715, !3719, !3720, !3721, !3739, !3740, !3741, !3742, !3743, !3744}
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !3464, file: !369, line: 219, baseType: !3467, size: 64)
!3467 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3468, size: 64)
!3468 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !369, line: 151, baseType: !3469)
!3469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !369, line: 151, size: 128, elements: !3470)
!3470 = !{!3471}
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3469, file: !369, line: 151, baseType: !3472, size: 128)
!3472 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !369, line: 150, baseType: !3473)
!3473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !369, line: 150, size: 128, elements: !3474)
!3474 = !{!3475, !3476, !3477}
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3473, file: !369, line: 150, baseType: !7, size: 32)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3473, file: !369, line: 150, baseType: !7, size: 32, offset: 32)
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3473, file: !369, line: 150, baseType: !3478, size: 64, offset: 64)
!3478 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3479, size: 64, elements: !2963)
!3479 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !2925, line: 108, baseType: !3480)
!3480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3481, size: 64)
!3481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !369, line: 122, size: 512, elements: !3482)
!3482 = !{!3483, !3484, !3485, !3702, !3703, !3704, !3705, !3706, !3707, !3708}
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !3481, file: !369, line: 124, baseType: !3463, size: 64)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !3481, file: !369, line: 125, baseType: !3463, size: 64, offset: 64)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !3481, file: !369, line: 131, baseType: !3486, size: 64, offset: 128)
!3486 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !369, line: 128, size: 64, elements: !3487)
!3487 = !{!3488, !3701}
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !3486, file: !369, line: 129, baseType: !3489, size: 64)
!3489 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !2925, line: 66, baseType: !3490)
!3490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3491, size: 64)
!3491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !3492, line: 143, size: 192, elements: !3493)
!3492 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3493 = !{!3494, !3699, !3700}
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !3491, file: !3492, line: 145, baseType: !3495, size: 64)
!3495 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !2925, line: 69, baseType: !3496)
!3496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3497, size: 64)
!3497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !3492, line: 136, size: 192, elements: !3498)
!3498 = !{!3499, !3697, !3698}
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3497, file: !3492, line: 137, baseType: !3500, size: 64)
!3500 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !2925, line: 58, baseType: !3501)
!3501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3502, size: 64)
!3502 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !3492, line: 737, size: 768, elements: !3503)
!3503 = !{!3504, !3521, !3554, !3560, !3565, !3570, !3577, !3583, !3589, !3594, !3608, !3613, !3619, !3624, !3634, !3639, !3655, !3662, !3669, !3675, !3680, !3686, !3692}
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3502, file: !3492, line: 738, baseType: !3505, size: 256)
!3505 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !3492, line: 271, size: 256, elements: !3506)
!3506 = !{!3507, !3508, !3509, !3510, !3511, !3512, !3513, !3514, !3515, !3516, !3517, !3518, !3519, !3520}
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3505, file: !3492, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !3505, file: !3492, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3505, file: !3492, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !3505, file: !3492, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !3505, file: !3492, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !3505, file: !3492, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !3505, file: !3492, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !3505, file: !3492, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3505, file: !3492, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3505, file: !3492, line: 312, baseType: !7, size: 32, offset: 32)
!3517 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !3505, file: !3492, line: 316, baseType: !3166, size: 32, offset: 64)
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !3505, file: !3492, line: 319, baseType: !7, size: 32, offset: 96)
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3505, file: !3492, line: 323, baseType: !3463, size: 64, offset: 128)
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3505, file: !3492, line: 327, baseType: !3045, size: 64, offset: 192)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !3502, file: !3492, line: 739, baseType: !3522, size: 448)
!3522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !3492, line: 350, size: 448, elements: !3523)
!3523 = !{!3524, !3553}
!3524 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !3522, file: !3492, line: 353, baseType: !3525, size: 384)
!3525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !3492, line: 333, size: 384, elements: !3526)
!3526 = !{!3527, !3528, !3536}
!3527 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3525, file: !3492, line: 336, baseType: !3505, size: 256)
!3528 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !3525, file: !3492, line: 343, baseType: !3529, size: 64, offset: 256)
!3529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3530, size: 64)
!3530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !3531, line: 37, size: 128, elements: !3532)
!3531 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3532 = !{!3533, !3534}
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3530, file: !3531, line: 39, baseType: !3529, size: 64)
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !3530, file: !3531, line: 40, baseType: !3535, size: 64, offset: 64)
!3535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3045, size: 64)
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !3525, file: !3492, line: 344, baseType: !3537, size: 64, offset: 320)
!3537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3538, size: 64)
!3538 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !3531, line: 45, size: 320, elements: !3539)
!3539 = !{!3540, !3541}
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3538, file: !3531, line: 47, baseType: !3537, size: 64)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !3538, file: !3531, line: 48, baseType: !3542, size: 256, offset: 64)
!3542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !142, line: 1883, size: 256, elements: !3543)
!3543 = !{!3544, !3546, !3547, !3552}
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3542, file: !142, line: 1884, baseType: !3545, size: 64)
!3545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3542, size: 64)
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3542, file: !142, line: 1885, baseType: !3545, size: 64, offset: 64)
!3547 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !3542, file: !142, line: 1891, baseType: !3548, size: 64, offset: 128)
!3548 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3542, file: !142, line: 1891, size: 64, elements: !3549)
!3549 = !{!3550, !3551}
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3548, file: !142, line: 1891, baseType: !3500, size: 64)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !3548, file: !142, line: 1891, baseType: !3045, size: 64)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !3542, file: !142, line: 1892, baseType: !3535, size: 64, offset: 192)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3522, file: !3492, line: 359, baseType: !3437, size: 64, offset: 384)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !3502, file: !3492, line: 740, baseType: !3555, size: 512)
!3555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !3492, line: 365, size: 512, elements: !3556)
!3556 = !{!3557, !3558, !3559}
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !3555, file: !3492, line: 368, baseType: !3525, size: 384)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !3555, file: !3492, line: 373, baseType: !3045, size: 64, offset: 384)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !3555, file: !3492, line: 374, baseType: !3045, size: 64, offset: 448)
!3560 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !3502, file: !3492, line: 741, baseType: !3561, size: 576)
!3561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !3492, line: 380, size: 576, elements: !3562)
!3562 = !{!3563, !3564}
!3563 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !3561, file: !3492, line: 383, baseType: !3555, size: 512)
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3561, file: !3492, line: 389, baseType: !3437, size: 64, offset: 512)
!3565 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3502, file: !3492, line: 742, baseType: !3566, size: 320)
!3566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !3492, line: 395, size: 320, elements: !3567)
!3567 = !{!3568, !3569}
!3568 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3566, file: !3492, line: 397, baseType: !3505, size: 256)
!3569 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !3566, file: !3492, line: 400, baseType: !3489, size: 64, offset: 256)
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !3502, file: !3492, line: 743, baseType: !3571, size: 448)
!3571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !3492, line: 406, size: 448, elements: !3572)
!3572 = !{!3573, !3574, !3575, !3576}
!3573 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3571, file: !3492, line: 408, baseType: !3505, size: 256)
!3574 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3571, file: !3492, line: 412, baseType: !3045, size: 64, offset: 256)
!3575 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3571, file: !3492, line: 420, baseType: !3045, size: 64, offset: 320)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !3571, file: !3492, line: 423, baseType: !3489, size: 64, offset: 384)
!3577 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !3502, file: !3492, line: 744, baseType: !3578, size: 384)
!3578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !3492, line: 429, size: 384, elements: !3579)
!3579 = !{!3580, !3581, !3582}
!3580 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3578, file: !3492, line: 431, baseType: !3505, size: 256)
!3581 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !3578, file: !3492, line: 434, baseType: !3045, size: 64, offset: 256)
!3582 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !3578, file: !3492, line: 437, baseType: !3489, size: 64, offset: 320)
!3583 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !3502, file: !3492, line: 745, baseType: !3584, size: 384)
!3584 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !3492, line: 443, size: 384, elements: !3585)
!3585 = !{!3586, !3587, !3588}
!3586 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3584, file: !3492, line: 445, baseType: !3505, size: 256)
!3587 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !3584, file: !3492, line: 449, baseType: !3045, size: 64, offset: 256)
!3588 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !3584, file: !3492, line: 453, baseType: !3489, size: 64, offset: 320)
!3589 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !3502, file: !3492, line: 746, baseType: !3590, size: 320)
!3590 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !3492, line: 459, size: 320, elements: !3591)
!3591 = !{!3592, !3593}
!3592 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3590, file: !3492, line: 461, baseType: !3505, size: 256)
!3593 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !3590, file: !3492, line: 464, baseType: !3045, size: 64, offset: 256)
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !3502, file: !3492, line: 747, baseType: !3595, size: 768)
!3595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !3492, line: 469, size: 768, elements: !3596)
!3596 = !{!3597, !3598, !3599, !3600, !3601}
!3597 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3595, file: !3492, line: 471, baseType: !3505, size: 256)
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !3595, file: !3492, line: 474, baseType: !7, size: 32, offset: 256)
!3599 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !3595, file: !3492, line: 475, baseType: !7, size: 32, offset: 288)
!3600 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !3595, file: !3492, line: 478, baseType: !3045, size: 64, offset: 320)
!3601 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !3595, file: !3492, line: 481, baseType: !3602, size: 384, offset: 384)
!3602 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3603, size: 384, elements: !2963)
!3603 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !142, line: 1917, size: 384, elements: !3604)
!3604 = !{!3605, !3606, !3607}
!3605 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !3603, file: !142, line: 1920, baseType: !3542, size: 256)
!3606 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !3603, file: !142, line: 1921, baseType: !3045, size: 64, offset: 256)
!3607 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3603, file: !142, line: 1922, baseType: !3166, size: 32, offset: 320)
!3608 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !3502, file: !3492, line: 748, baseType: !3609, size: 320)
!3609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !3492, line: 487, size: 320, elements: !3610)
!3610 = !{!3611, !3612}
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3609, file: !3492, line: 490, baseType: !3505, size: 256)
!3612 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !3609, file: !3492, line: 494, baseType: !2948, size: 32, offset: 256)
!3613 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !3502, file: !3492, line: 749, baseType: !3614, size: 384)
!3614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !3492, line: 500, size: 384, elements: !3615)
!3615 = !{!3616, !3617, !3618}
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3614, file: !3492, line: 502, baseType: !3505, size: 256)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !3614, file: !3492, line: 506, baseType: !3489, size: 64, offset: 256)
!3618 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !3614, file: !3492, line: 510, baseType: !3489, size: 64, offset: 320)
!3619 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !3502, file: !3492, line: 750, baseType: !3620, size: 320)
!3620 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !3492, line: 529, size: 320, elements: !3621)
!3621 = !{!3622, !3623}
!3622 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3620, file: !3492, line: 531, baseType: !3505, size: 256)
!3623 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !3620, file: !3492, line: 540, baseType: !3489, size: 64, offset: 256)
!3624 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !3502, file: !3492, line: 751, baseType: !3625, size: 704)
!3625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !3492, line: 546, size: 704, elements: !3626)
!3626 = !{!3627, !3628, !3629, !3630, !3631, !3632, !3633}
!3627 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !3625, file: !3492, line: 549, baseType: !3555, size: 512)
!3628 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !3625, file: !3492, line: 553, baseType: !2951, size: 64, offset: 512)
!3629 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !3625, file: !3492, line: 557, baseType: !3158, size: 8, offset: 576)
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !3625, file: !3492, line: 558, baseType: !3158, size: 8, offset: 584)
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !3625, file: !3492, line: 559, baseType: !3158, size: 8, offset: 592)
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !3625, file: !3492, line: 560, baseType: !3158, size: 8, offset: 600)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3625, file: !3492, line: 566, baseType: !3437, size: 64, offset: 640)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !3502, file: !3492, line: 752, baseType: !3635, size: 384)
!3635 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !3492, line: 571, size: 384, elements: !3636)
!3636 = !{!3637, !3638}
!3637 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3635, file: !3492, line: 573, baseType: !3566, size: 320)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3635, file: !3492, line: 577, baseType: !3045, size: 64, offset: 320)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !3502, file: !3492, line: 753, baseType: !3640, size: 576)
!3640 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !3492, line: 600, size: 576, elements: !3641)
!3641 = !{!3642, !3643, !3644, !3645, !3654}
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3640, file: !3492, line: 602, baseType: !3566, size: 320)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3640, file: !3492, line: 605, baseType: !3045, size: 64, offset: 320)
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !3640, file: !3492, line: 609, baseType: !3400, size: 64, offset: 384)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !3640, file: !3492, line: 612, baseType: !3646, size: 64, offset: 448)
!3646 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3647, size: 64)
!3647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !3492, line: 581, size: 320, elements: !3648)
!3648 = !{!3649, !3650, !3651, !3652, !3653}
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !3647, file: !3492, line: 583, baseType: !141, size: 32)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3647, file: !3492, line: 586, baseType: !3045, size: 64, offset: 64)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !3647, file: !3492, line: 589, baseType: !3045, size: 64, offset: 128)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !3647, file: !3492, line: 592, baseType: !3045, size: 64, offset: 192)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !3647, file: !3492, line: 595, baseType: !3045, size: 64, offset: 256)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !3640, file: !3492, line: 616, baseType: !3489, size: 64, offset: 512)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !3502, file: !3492, line: 754, baseType: !3656, size: 512)
!3656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !3492, line: 622, size: 512, elements: !3657)
!3657 = !{!3658, !3659, !3660, !3661}
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3656, file: !3492, line: 624, baseType: !3566, size: 320)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3656, file: !3492, line: 628, baseType: !3045, size: 64, offset: 320)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !3656, file: !3492, line: 632, baseType: !3045, size: 64, offset: 384)
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !3656, file: !3492, line: 636, baseType: !3045, size: 64, offset: 448)
!3662 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !3502, file: !3492, line: 755, baseType: !3663, size: 704)
!3663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !3492, line: 642, size: 704, elements: !3664)
!3664 = !{!3665, !3666, !3667, !3668}
!3665 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !3663, file: !3492, line: 644, baseType: !3656, size: 512)
!3666 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !3663, file: !3492, line: 648, baseType: !3045, size: 64, offset: 512)
!3667 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !3663, file: !3492, line: 652, baseType: !3045, size: 64, offset: 576)
!3668 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !3663, file: !3492, line: 653, baseType: !3045, size: 64, offset: 640)
!3669 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !3502, file: !3492, line: 756, baseType: !3670, size: 448)
!3670 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !3492, line: 663, size: 448, elements: !3671)
!3671 = !{!3672, !3673, !3674}
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3670, file: !3492, line: 665, baseType: !3566, size: 320)
!3673 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3670, file: !3492, line: 668, baseType: !3045, size: 64, offset: 320)
!3674 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !3670, file: !3492, line: 673, baseType: !3045, size: 64, offset: 384)
!3675 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !3502, file: !3492, line: 757, baseType: !3676, size: 384)
!3676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !3492, line: 694, size: 384, elements: !3677)
!3677 = !{!3678, !3679}
!3678 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !3676, file: !3492, line: 696, baseType: !3566, size: 320)
!3679 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !3676, file: !3492, line: 699, baseType: !3045, size: 64, offset: 320)
!3680 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !3502, file: !3492, line: 758, baseType: !3681, size: 384)
!3681 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !3492, line: 681, size: 384, elements: !3682)
!3682 = !{!3683, !3684, !3685}
!3683 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3681, file: !3492, line: 683, baseType: !3505, size: 256)
!3684 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !3681, file: !3492, line: 686, baseType: !3045, size: 64, offset: 256)
!3685 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !3681, file: !3492, line: 689, baseType: !3045, size: 64, offset: 320)
!3686 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !3502, file: !3492, line: 759, baseType: !3687, size: 384)
!3687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !3492, line: 707, size: 384, elements: !3688)
!3688 = !{!3689, !3690, !3691}
!3689 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3687, file: !3492, line: 709, baseType: !3505, size: 256)
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !3687, file: !3492, line: 712, baseType: !3045, size: 64, offset: 256)
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !3687, file: !3492, line: 712, baseType: !3045, size: 64, offset: 320)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !3502, file: !3492, line: 760, baseType: !3693, size: 320)
!3693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !3492, line: 718, size: 320, elements: !3694)
!3694 = !{!3695, !3696}
!3695 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !3693, file: !3492, line: 720, baseType: !3505, size: 256)
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3693, file: !3492, line: 723, baseType: !3045, size: 64, offset: 256)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3497, file: !3492, line: 138, baseType: !3496, size: 64, offset: 64)
!3698 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3497, file: !3492, line: 139, baseType: !3496, size: 64, offset: 128)
!3699 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !3491, file: !3492, line: 146, baseType: !3495, size: 64, offset: 64)
!3700 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !3491, file: !3492, line: 152, baseType: !3489, size: 64, offset: 128)
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !3486, file: !369, line: 130, baseType: !2924, size: 64)
!3702 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3481, file: !369, line: 134, baseType: !3035, size: 64, offset: 192)
!3703 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !3481, file: !369, line: 137, baseType: !3045, size: 64, offset: 256)
!3704 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !3481, file: !369, line: 138, baseType: !3166, size: 32, offset: 320)
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !3481, file: !369, line: 142, baseType: !7, size: 32, offset: 352)
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3481, file: !369, line: 144, baseType: !2948, size: 32, offset: 384)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !3481, file: !369, line: 145, baseType: !2948, size: 32, offset: 416)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3481, file: !369, line: 146, baseType: !3709, size: 64, offset: 448)
!3709 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !369, line: 119, baseType: !3014)
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !3464, file: !369, line: 220, baseType: !3467, size: 64, offset: 64)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3464, file: !369, line: 223, baseType: !3035, size: 64, offset: 128)
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !3464, file: !369, line: 226, baseType: !3713, size: 64, offset: 192)
!3713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3714, size: 64)
!3714 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !369, line: 185, flags: DIFlagFwdDecl)
!3715 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !3464, file: !369, line: 229, baseType: !3716, size: 128, offset: 256)
!3716 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3717, size: 128, elements: !2998)
!3717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3718, size: 64)
!3718 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !369, line: 229, flags: DIFlagFwdDecl)
!3719 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !3464, file: !369, line: 232, baseType: !3463, size: 64, offset: 384)
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !3464, file: !369, line: 233, baseType: !3463, size: 64, offset: 448)
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !3464, file: !369, line: 238, baseType: !3722, size: 64, offset: 512)
!3722 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !369, line: 235, size: 64, elements: !3723)
!3723 = !{!3724, !3730}
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !3722, file: !369, line: 236, baseType: !3725, size: 64)
!3725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3726, size: 64)
!3726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !369, line: 273, size: 128, elements: !3727)
!3727 = !{!3728, !3729}
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3726, file: !369, line: 275, baseType: !3489, size: 64)
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !3726, file: !369, line: 278, baseType: !3489, size: 64, offset: 64)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3722, file: !369, line: 237, baseType: !3731, size: 64)
!3731 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3732, size: 64)
!3732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !369, line: 259, size: 320, elements: !3733)
!3733 = !{!3734, !3735, !3736, !3737, !3738}
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !3732, file: !369, line: 261, baseType: !2924, size: 64)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !3732, file: !369, line: 262, baseType: !2924, size: 64, offset: 64)
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !3732, file: !369, line: 266, baseType: !2924, size: 64, offset: 128)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !3732, file: !369, line: 267, baseType: !2924, size: 64, offset: 192)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3732, file: !369, line: 270, baseType: !2948, size: 32, offset: 256)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3464, file: !369, line: 241, baseType: !3709, size: 64, offset: 576)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3464, file: !369, line: 244, baseType: !2948, size: 32, offset: 640)
!3741 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !3464, file: !369, line: 247, baseType: !2948, size: 32, offset: 672)
!3742 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3464, file: !369, line: 250, baseType: !2948, size: 32, offset: 704)
!3743 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !3464, file: !369, line: 253, baseType: !2948, size: 32, offset: 736)
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3464, file: !369, line: 256, baseType: !2948, size: 32, offset: 768)
!3745 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !3459, file: !369, line: 378, baseType: !3462, size: 64, offset: 64)
!3746 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !3459, file: !369, line: 381, baseType: !3747, size: 64, offset: 128)
!3747 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3748, size: 64)
!3748 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !369, line: 282, baseType: !3749)
!3749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !369, line: 282, size: 128, elements: !3750)
!3750 = !{!3751}
!3751 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3749, file: !369, line: 282, baseType: !3752, size: 128)
!3752 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !369, line: 281, baseType: !3753)
!3753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !369, line: 281, size: 128, elements: !3754)
!3754 = !{!3755, !3756, !3757}
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3753, file: !369, line: 281, baseType: !7, size: 32)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3753, file: !369, line: 281, baseType: !7, size: 32, offset: 32)
!3757 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3753, file: !369, line: 281, baseType: !3758, size: 64, offset: 64)
!3758 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3462, size: 64, elements: !2963)
!3759 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !3459, file: !369, line: 384, baseType: !2948, size: 32, offset: 192)
!3760 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !3459, file: !369, line: 387, baseType: !2948, size: 32, offset: 224)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !3459, file: !369, line: 390, baseType: !2948, size: 32, offset: 256)
!3762 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !3459, file: !369, line: 394, baseType: !3747, size: 64, offset: 320)
!3763 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !3459, file: !369, line: 396, baseType: !368, size: 32, offset: 384)
!3764 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !3459, file: !369, line: 399, baseType: !3765, size: 64, offset: 416)
!3765 = !DICompositeType(tag: DW_TAG_array_type, baseType: !374, size: 64, elements: !2998)
!3766 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !3459, file: !369, line: 402, baseType: !3767, size: 64, offset: 480)
!3767 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !2998)
!3768 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !3459, file: !369, line: 406, baseType: !2948, size: 32, offset: 544)
!3769 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !3459, file: !369, line: 409, baseType: !2948, size: 32, offset: 576)
!3770 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !3292, file: !1493, line: 470, baseType: !3490, size: 64, offset: 128)
!3771 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !3292, file: !1493, line: 473, baseType: !3772, size: 64, offset: 192)
!3772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3773, size: 64)
!3773 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1493, line: 166, flags: DIFlagFwdDecl)
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !3292, file: !1493, line: 476, baseType: !3775, size: 64, offset: 256)
!3775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3776, size: 64)
!3776 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1493, line: 476, flags: DIFlagFwdDecl)
!3777 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !3292, file: !1493, line: 479, baseType: !3375, size: 64, offset: 320)
!3778 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3292, file: !1493, line: 484, baseType: !3045, size: 64, offset: 384)
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !3292, file: !1493, line: 488, baseType: !3045, size: 64, offset: 448)
!3780 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !3292, file: !1493, line: 493, baseType: !3045, size: 64, offset: 512)
!3781 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !3292, file: !1493, line: 496, baseType: !3045, size: 64, offset: 576)
!3782 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !3292, file: !1493, line: 501, baseType: !3783, size: 64, offset: 640)
!3783 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3784, size: 64)
!3784 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !380, line: 2355, size: 576, elements: !3785)
!3785 = !{!3786, !3789, !3790, !3791, !3792, !3794, !3795, !3800, !3801, !3802, !3803, !3804, !3805}
!3786 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !3784, file: !380, line: 2356, baseType: !3787, size: 64)
!3787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3788, size: 64)
!3788 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !380, line: 2356, flags: DIFlagFwdDecl)
!3789 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !3784, file: !380, line: 2357, baseType: !2951, size: 64, offset: 64)
!3790 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !3784, file: !380, line: 2358, baseType: !2948, size: 32, offset: 128)
!3791 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !3784, file: !380, line: 2359, baseType: !2948, size: 32, offset: 160)
!3792 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !3784, file: !380, line: 2360, baseType: !3793, size: 128, offset: 192)
!3793 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2948, size: 128, elements: !3024)
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !3784, file: !380, line: 2364, baseType: !2948, size: 32, offset: 320)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !3784, file: !380, line: 2367, baseType: !3796, size: 128, offset: 384)
!3796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !380, line: 2349, size: 128, elements: !3797)
!3797 = !{!3798, !3799}
!3798 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3796, file: !380, line: 2351, baseType: !2924, size: 64)
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3796, file: !380, line: 2352, baseType: !3014, size: 64, offset: 64)
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !3784, file: !380, line: 2371, baseType: !379, size: 32, offset: 512)
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !3784, file: !380, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !3784, file: !380, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!3803 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !3784, file: !380, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!3804 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !3784, file: !380, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!3805 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !3784, file: !380, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!3806 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !3292, file: !1493, line: 504, baseType: !3807, size: 64, offset: 704)
!3807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3808, size: 64)
!3808 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1493, line: 504, flags: DIFlagFwdDecl)
!3809 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !3292, file: !1493, line: 507, baseType: !3375, size: 64, offset: 768)
!3810 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !3292, file: !1493, line: 510, baseType: !2948, size: 32, offset: 832)
!3811 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !3292, file: !1493, line: 513, baseType: !2948, size: 32, offset: 864)
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !3292, file: !1493, line: 516, baseType: !3166, size: 32, offset: 896)
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !3292, file: !1493, line: 519, baseType: !3166, size: 32, offset: 928)
!3814 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !3292, file: !1493, line: 522, baseType: !7, size: 32, offset: 960)
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !3292, file: !1493, line: 523, baseType: !7, size: 32, offset: 992)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !3292, file: !1493, line: 528, baseType: !2951, size: 64, offset: 1024)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !3292, file: !1493, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!3818 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !3292, file: !1493, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!3819 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !3292, file: !1493, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!3820 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !3292, file: !1493, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!3821 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !3292, file: !1493, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !3292, file: !1493, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !3292, file: !1493, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !3292, file: !1493, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !3292, file: !1493, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !3292, file: !1493, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !3292, file: !1493, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !3292, file: !1493, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!3829 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !3292, file: !1493, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!3830 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !3292, file: !1493, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!3831 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !3292, file: !1493, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!3832 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !3292, file: !1493, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!3833 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !3287, file: !142, line: 3254, baseType: !3045, size: 64, offset: 1536)
!3834 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !3287, file: !142, line: 3257, baseType: !3045, size: 64, offset: 1600)
!3835 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !3287, file: !142, line: 3258, baseType: !3045, size: 64, offset: 1664)
!3836 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !3287, file: !142, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!3837 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !3287, file: !142, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!3838 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !3287, file: !142, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!3839 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !3287, file: !142, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !3287, file: !142, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!3841 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !3287, file: !142, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!3842 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !3287, file: !142, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!3843 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !3287, file: !142, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!3844 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !3287, file: !142, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!3845 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !3287, file: !142, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!3846 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !3287, file: !142, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!3847 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !3287, file: !142, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!3848 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !3287, file: !142, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!3849 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !3287, file: !142, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!3850 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !3287, file: !142, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!3851 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3287, file: !142, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!3852 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !3287, file: !142, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !3287, file: !142, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!3854 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3047, file: !142, line: 3394, baseType: !3855, size: 1344)
!3855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !142, line: 2279, size: 1344, elements: !3856)
!3856 = !{!3857, !3858, !3859, !3860, !3861, !3862, !3863, !3864, !3865, !3866, !3867, !3868, !3869, !3870, !3871, !3872, !3873, !3874, !3875, !3876, !3877, !3878, !3879, !3882, !3883, !3884, !3892, !3893, !3894, !3895, !3896, !3897, !3898, !3899, !3900}
!3857 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3855, file: !142, line: 2280, baseType: !3083, size: 192)
!3858 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !3855, file: !142, line: 2281, baseType: !3045, size: 64, offset: 192)
!3859 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3855, file: !142, line: 2282, baseType: !3045, size: 64, offset: 256)
!3860 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3855, file: !142, line: 2283, baseType: !3045, size: 64, offset: 320)
!3861 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3855, file: !142, line: 2284, baseType: !3045, size: 64, offset: 384)
!3862 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3855, file: !142, line: 2285, baseType: !7, size: 32, offset: 448)
!3863 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !3855, file: !142, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!3864 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !3855, file: !142, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!3865 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !3855, file: !142, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!3866 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !3855, file: !142, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!3867 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !3855, file: !142, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!3868 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !3855, file: !142, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3855, file: !142, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !3855, file: !142, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!3871 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3855, file: !142, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!3872 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3855, file: !142, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!3873 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3855, file: !142, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!3874 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3855, file: !142, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!3875 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3855, file: !142, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!3876 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3855, file: !142, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!3877 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3855, file: !142, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!3878 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3855, file: !142, line: 2305, baseType: !7, size: 32, offset: 512)
!3879 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !3855, file: !142, line: 2306, baseType: !3880, size: 32, offset: 544)
!3880 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !3881, line: 31, baseType: !2948)
!3881 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3882 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !3855, file: !142, line: 2307, baseType: !3045, size: 64, offset: 576)
!3883 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !3855, file: !142, line: 2308, baseType: !3045, size: 64, offset: 640)
!3884 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !3855, file: !142, line: 2314, baseType: !3885, size: 64, offset: 704)
!3885 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !142, line: 2309, size: 64, elements: !3886)
!3886 = !{!3887, !3888, !3889}
!3887 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !3885, file: !142, line: 2310, baseType: !2948, size: 32)
!3888 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !3885, file: !142, line: 2311, baseType: !2951, size: 64)
!3889 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !3885, file: !142, line: 2312, baseType: !3890, size: 64)
!3890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3891, size: 64)
!3891 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !142, line: 2277, flags: DIFlagFwdDecl)
!3892 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3855, file: !142, line: 2315, baseType: !3045, size: 64, offset: 768)
!3893 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !3855, file: !142, line: 2316, baseType: !3045, size: 64, offset: 832)
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !3855, file: !142, line: 2317, baseType: !3045, size: 64, offset: 896)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !3855, file: !142, line: 2318, baseType: !3045, size: 64, offset: 960)
!3896 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !3855, file: !142, line: 2319, baseType: !3045, size: 64, offset: 1024)
!3897 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3855, file: !142, line: 2320, baseType: !3045, size: 64, offset: 1088)
!3898 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3855, file: !142, line: 2321, baseType: !3045, size: 64, offset: 1152)
!3899 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3855, file: !142, line: 2322, baseType: !3045, size: 64, offset: 1216)
!3900 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3855, file: !142, line: 2324, baseType: !3901, size: 64, offset: 1280)
!3901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3902, size: 64)
!3902 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !142, line: 2324, flags: DIFlagFwdDecl)
!3903 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !3047, file: !142, line: 3395, baseType: !3904, size: 320)
!3904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !142, line: 1469, size: 320, elements: !3905)
!3905 = !{!3906, !3907, !3908}
!3906 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3904, file: !142, line: 1470, baseType: !3083, size: 192)
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !3904, file: !142, line: 1471, baseType: !3045, size: 64, offset: 192)
!3908 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3904, file: !142, line: 1472, baseType: !3045, size: 64, offset: 256)
!3909 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3047, file: !142, line: 3396, baseType: !3910, size: 320)
!3910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !142, line: 1482, size: 320, elements: !3911)
!3911 = !{!3912, !3913, !3914}
!3912 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3910, file: !142, line: 1483, baseType: !3083, size: 192)
!3913 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3910, file: !142, line: 1484, baseType: !2948, size: 32, offset: 192)
!3914 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3910, file: !142, line: 1485, baseType: !3437, size: 64, offset: 256)
!3915 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !3047, file: !142, line: 3397, baseType: !3916, size: 384)
!3916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !142, line: 1829, size: 384, elements: !3917)
!3917 = !{!3918, !3919, !3920, !3921}
!3918 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3916, file: !142, line: 1830, baseType: !3083, size: 192)
!3919 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3916, file: !142, line: 1831, baseType: !3166, size: 32, offset: 192)
!3920 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3916, file: !142, line: 1832, baseType: !3045, size: 64, offset: 256)
!3921 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !3916, file: !142, line: 1835, baseType: !3437, size: 64, offset: 320)
!3922 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !3047, file: !142, line: 3398, baseType: !3923, size: 704)
!3923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !142, line: 1898, size: 704, elements: !3924)
!3924 = !{!3925, !3926, !3927, !3928, !3929, !3932}
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3923, file: !142, line: 1899, baseType: !3083, size: 192)
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !3923, file: !142, line: 1902, baseType: !3045, size: 64, offset: 192)
!3927 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !3923, file: !142, line: 1905, baseType: !3500, size: 64, offset: 256)
!3928 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !3923, file: !142, line: 1908, baseType: !7, size: 32, offset: 320)
!3929 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3923, file: !142, line: 1911, baseType: !3930, size: 64, offset: 384)
!3930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3931, size: 64)
!3931 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !142, line: 1876, flags: DIFlagFwdDecl)
!3932 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !3923, file: !142, line: 1914, baseType: !3542, size: 256, offset: 448)
!3933 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3047, file: !142, line: 3399, baseType: !3934, size: 704)
!3934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !142, line: 2008, size: 704, elements: !3935)
!3935 = !{!3936, !3937, !3938, !3939, !3940, !3941, !3942, !3943, !3944, !3945, !3946}
!3936 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3934, file: !142, line: 2009, baseType: !3083, size: 192)
!3937 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3934, file: !142, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !3934, file: !142, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!3939 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3934, file: !142, line: 2014, baseType: !3166, size: 32, offset: 224)
!3940 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3934, file: !142, line: 2016, baseType: !3045, size: 64, offset: 256)
!3941 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !3934, file: !142, line: 2017, baseType: !3426, size: 64, offset: 320)
!3942 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !3934, file: !142, line: 2019, baseType: !3045, size: 64, offset: 384)
!3943 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !3934, file: !142, line: 2020, baseType: !3045, size: 64, offset: 448)
!3944 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3934, file: !142, line: 2021, baseType: !3045, size: 64, offset: 512)
!3945 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !3934, file: !142, line: 2022, baseType: !3045, size: 64, offset: 576)
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !3934, file: !142, line: 2023, baseType: !3045, size: 64, offset: 640)
!3947 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3047, file: !142, line: 3400, baseType: !3948, size: 832)
!3948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !142, line: 2430, size: 832, elements: !3949)
!3949 = !{!3950, !3951, !3952, !3953, !3954, !3955, !3956, !3957, !3958, !3959}
!3950 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3948, file: !142, line: 2431, baseType: !3083, size: 192)
!3951 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3948, file: !142, line: 2433, baseType: !3045, size: 64, offset: 192)
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !3948, file: !142, line: 2434, baseType: !3045, size: 64, offset: 256)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !3948, file: !142, line: 2435, baseType: !3045, size: 64, offset: 320)
!3954 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !3948, file: !142, line: 2436, baseType: !3045, size: 64, offset: 384)
!3955 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !3948, file: !142, line: 2437, baseType: !3426, size: 64, offset: 448)
!3956 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !3948, file: !142, line: 2438, baseType: !3045, size: 64, offset: 512)
!3957 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !3948, file: !142, line: 2440, baseType: !3045, size: 64, offset: 576)
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !3948, file: !142, line: 2441, baseType: !3045, size: 64, offset: 640)
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !3948, file: !142, line: 2443, baseType: !3960, size: 128, offset: 704)
!3960 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !142, line: 182, baseType: !3961)
!3961 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !142, line: 182, size: 128, elements: !3962)
!3962 = !{!3963}
!3963 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3961, file: !142, line: 182, baseType: !3431, size: 128)
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !3047, file: !142, line: 3401, baseType: !3965, size: 320)
!3965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !142, line: 3327, size: 320, elements: !3966)
!3966 = !{!3967, !3968, !3975}
!3967 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3965, file: !142, line: 3329, baseType: !3083, size: 192)
!3968 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !3965, file: !142, line: 3330, baseType: !3969, size: 64, offset: 192)
!3969 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3970, size: 64)
!3970 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !142, line: 3320, size: 192, elements: !3971)
!3971 = !{!3972, !3973, !3974}
!3972 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3970, file: !142, line: 3322, baseType: !3969, size: 64)
!3973 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3970, file: !142, line: 3323, baseType: !3969, size: 64, offset: 64)
!3974 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3970, file: !142, line: 3324, baseType: !3045, size: 64, offset: 128)
!3975 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !3965, file: !142, line: 3331, baseType: !3969, size: 64, offset: 256)
!3976 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !3047, file: !142, line: 3402, baseType: !3977, size: 256)
!3977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !142, line: 1540, size: 256, elements: !3978)
!3978 = !{!3979, !3980}
!3979 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3977, file: !142, line: 1541, baseType: !3083, size: 192)
!3980 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !3977, file: !142, line: 1542, baseType: !3981, size: 64, offset: 192)
!3981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3982, size: 64)
!3982 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !142, line: 1538, baseType: !3983)
!3983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !142, line: 1538, size: 192, elements: !3984)
!3984 = !{!3985}
!3985 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3983, file: !142, line: 1538, baseType: !3986, size: 192)
!3986 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !142, line: 1537, baseType: !3987)
!3987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !142, line: 1537, size: 192, elements: !3988)
!3988 = !{!3989, !3990, !3991}
!3989 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3987, file: !142, line: 1537, baseType: !7, size: 32)
!3990 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3987, file: !142, line: 1537, baseType: !7, size: 32, offset: 32)
!3991 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3987, file: !142, line: 1537, baseType: !3992, size: 128, offset: 64)
!3992 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3993, size: 128, elements: !2963)
!3993 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !142, line: 1535, baseType: !3994)
!3994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !142, line: 1532, size: 128, elements: !3995)
!3995 = !{!3996, !3997}
!3996 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3994, file: !142, line: 1533, baseType: !3045, size: 64)
!3997 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3994, file: !142, line: 1534, baseType: !3045, size: 64, offset: 64)
!3998 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !3047, file: !142, line: 3403, baseType: !3999, size: 512)
!3999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !142, line: 1938, size: 512, elements: !4000)
!4000 = !{!4001, !4002, !4003, !4004, !4010, !4011, !4012}
!4001 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3999, file: !142, line: 1939, baseType: !3083, size: 192)
!4002 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3999, file: !142, line: 1940, baseType: !3166, size: 32, offset: 192)
!4003 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3999, file: !142, line: 1941, baseType: !336, size: 32, offset: 224)
!4004 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3999, file: !142, line: 1946, baseType: !4005, size: 32, offset: 256)
!4005 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !142, line: 1942, size: 32, elements: !4006)
!4006 = !{!4007, !4008, !4009}
!4007 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !4005, file: !142, line: 1943, baseType: !354, size: 32)
!4008 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !4005, file: !142, line: 1944, baseType: !361, size: 32)
!4009 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !4005, file: !142, line: 1945, baseType: !141, size: 32)
!4010 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !3999, file: !142, line: 1950, baseType: !3489, size: 64, offset: 320)
!4011 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !3999, file: !142, line: 1951, baseType: !3489, size: 64, offset: 384)
!4012 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3999, file: !142, line: 1953, baseType: !3437, size: 64, offset: 448)
!4013 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !3047, file: !142, line: 3404, baseType: !4014, size: 1664)
!4014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !142, line: 3337, size: 1664, elements: !4015)
!4015 = !{!4016, !4017}
!4016 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4014, file: !142, line: 3338, baseType: !3083, size: 192)
!4017 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !4014, file: !142, line: 3341, baseType: !4018, size: 1472, offset: 192)
!4018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1633, line: 410, size: 1472, elements: !4019)
!4019 = !{!4020, !4021, !4022, !4023, !4024, !4025, !4026, !4027, !4028, !4030, !4031, !4032, !4033, !4034, !4035, !4036, !4037, !4038, !4039, !4040, !4041, !4042, !4043, !4044, !4045, !4046, !4047, !4048, !4049, !4050, !4051, !4052, !4053, !4054, !4055, !4056, !4057, !4058, !4059, !4060, !4061, !4062, !4063, !4064, !4065, !4066, !4067, !4068, !4069, !4070, !4071, !4072, !4073, !4074, !4075, !4076, !4077, !4078, !4079, !4080, !4081, !4082, !4083, !4084, !4085, !4086, !4087, !4088, !4089, !4090, !4091, !4092, !4093, !4094, !4095, !4096, !4097, !4098, !4099, !4100, !4101, !4102, !4103, !4104, !4105, !4106, !4107, !4108, !4109, !4110, !4111, !4112, !4113, !4114, !4115, !4116, !4117, !4118, !4119, !4120, !4121, !4122, !4123, !4124, !4125, !4126, !4127, !4128, !4129, !4130, !4131, !4132, !4133, !4134, !4135, !4136, !4137, !4138, !4139, !4140, !4141, !4142, !4143, !4144, !4145, !4146, !4147, !4148, !4149, !4150, !4151, !4152, !4153, !4154, !4155, !4156, !4157, !4158, !4159, !4160, !4161, !4162, !4163, !4164, !4165, !4166, !4167, !4168, !4169, !4170, !4171, !4172, !4173, !4174, !4175, !4176, !4177, !4178, !4179, !4180, !4181, !4182, !4183}
!4020 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !4018, file: !1633, line: 412, baseType: !2948, size: 32)
!4021 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !4018, file: !1633, line: 413, baseType: !2948, size: 32, offset: 32)
!4022 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !4018, file: !1633, line: 414, baseType: !2948, size: 32, offset: 64)
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !4018, file: !1633, line: 415, baseType: !2948, size: 32, offset: 96)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !4018, file: !1633, line: 416, baseType: !2948, size: 32, offset: 128)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !4018, file: !1633, line: 417, baseType: !2948, size: 32, offset: 160)
!4026 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !4018, file: !1633, line: 418, baseType: !3158, size: 8, offset: 192)
!4027 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !4018, file: !1633, line: 419, baseType: !3158, size: 8, offset: 200)
!4028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !4018, file: !1633, line: 420, baseType: !4029, size: 8, offset: 208)
!4029 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!4030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !4018, file: !1633, line: 421, baseType: !4029, size: 8, offset: 216)
!4031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !4018, file: !1633, line: 422, baseType: !4029, size: 8, offset: 224)
!4032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !4018, file: !1633, line: 423, baseType: !4029, size: 8, offset: 232)
!4033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !4018, file: !1633, line: 424, baseType: !4029, size: 8, offset: 240)
!4034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !4018, file: !1633, line: 425, baseType: !4029, size: 8, offset: 248)
!4035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !4018, file: !1633, line: 426, baseType: !4029, size: 8, offset: 256)
!4036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !4018, file: !1633, line: 427, baseType: !4029, size: 8, offset: 264)
!4037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !4018, file: !1633, line: 428, baseType: !4029, size: 8, offset: 272)
!4038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !4018, file: !1633, line: 429, baseType: !4029, size: 8, offset: 280)
!4039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !4018, file: !1633, line: 430, baseType: !4029, size: 8, offset: 288)
!4040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !4018, file: !1633, line: 431, baseType: !4029, size: 8, offset: 296)
!4041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !4018, file: !1633, line: 432, baseType: !4029, size: 8, offset: 304)
!4042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !4018, file: !1633, line: 433, baseType: !4029, size: 8, offset: 312)
!4043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !4018, file: !1633, line: 434, baseType: !4029, size: 8, offset: 320)
!4044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !4018, file: !1633, line: 435, baseType: !4029, size: 8, offset: 328)
!4045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !4018, file: !1633, line: 436, baseType: !4029, size: 8, offset: 336)
!4046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !4018, file: !1633, line: 437, baseType: !4029, size: 8, offset: 344)
!4047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !4018, file: !1633, line: 438, baseType: !4029, size: 8, offset: 352)
!4048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !4018, file: !1633, line: 439, baseType: !4029, size: 8, offset: 360)
!4049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !4018, file: !1633, line: 440, baseType: !4029, size: 8, offset: 368)
!4050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !4018, file: !1633, line: 441, baseType: !4029, size: 8, offset: 376)
!4051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !4018, file: !1633, line: 442, baseType: !4029, size: 8, offset: 384)
!4052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !4018, file: !1633, line: 443, baseType: !4029, size: 8, offset: 392)
!4053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !4018, file: !1633, line: 444, baseType: !4029, size: 8, offset: 400)
!4054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !4018, file: !1633, line: 445, baseType: !4029, size: 8, offset: 408)
!4055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !4018, file: !1633, line: 446, baseType: !4029, size: 8, offset: 416)
!4056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !4018, file: !1633, line: 447, baseType: !4029, size: 8, offset: 424)
!4057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !4018, file: !1633, line: 448, baseType: !4029, size: 8, offset: 432)
!4058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !4018, file: !1633, line: 449, baseType: !4029, size: 8, offset: 440)
!4059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !4018, file: !1633, line: 450, baseType: !4029, size: 8, offset: 448)
!4060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !4018, file: !1633, line: 451, baseType: !4029, size: 8, offset: 456)
!4061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !4018, file: !1633, line: 452, baseType: !4029, size: 8, offset: 464)
!4062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !4018, file: !1633, line: 453, baseType: !4029, size: 8, offset: 472)
!4063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !4018, file: !1633, line: 454, baseType: !4029, size: 8, offset: 480)
!4064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !4018, file: !1633, line: 455, baseType: !4029, size: 8, offset: 488)
!4065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !4018, file: !1633, line: 456, baseType: !4029, size: 8, offset: 496)
!4066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !4018, file: !1633, line: 457, baseType: !4029, size: 8, offset: 504)
!4067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !4018, file: !1633, line: 458, baseType: !4029, size: 8, offset: 512)
!4068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !4018, file: !1633, line: 459, baseType: !4029, size: 8, offset: 520)
!4069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !4018, file: !1633, line: 460, baseType: !4029, size: 8, offset: 528)
!4070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !4018, file: !1633, line: 461, baseType: !4029, size: 8, offset: 536)
!4071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !4018, file: !1633, line: 462, baseType: !4029, size: 8, offset: 544)
!4072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !4018, file: !1633, line: 463, baseType: !4029, size: 8, offset: 552)
!4073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !4018, file: !1633, line: 464, baseType: !4029, size: 8, offset: 560)
!4074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !4018, file: !1633, line: 465, baseType: !4029, size: 8, offset: 568)
!4075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !4018, file: !1633, line: 466, baseType: !4029, size: 8, offset: 576)
!4076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !4018, file: !1633, line: 467, baseType: !4029, size: 8, offset: 584)
!4077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !4018, file: !1633, line: 468, baseType: !4029, size: 8, offset: 592)
!4078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !4018, file: !1633, line: 469, baseType: !4029, size: 8, offset: 600)
!4079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !4018, file: !1633, line: 470, baseType: !4029, size: 8, offset: 608)
!4080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !4018, file: !1633, line: 471, baseType: !4029, size: 8, offset: 616)
!4081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !4018, file: !1633, line: 472, baseType: !4029, size: 8, offset: 624)
!4082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !4018, file: !1633, line: 473, baseType: !4029, size: 8, offset: 632)
!4083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !4018, file: !1633, line: 474, baseType: !4029, size: 8, offset: 640)
!4084 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !4018, file: !1633, line: 475, baseType: !4029, size: 8, offset: 648)
!4085 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !4018, file: !1633, line: 476, baseType: !4029, size: 8, offset: 656)
!4086 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !4018, file: !1633, line: 477, baseType: !4029, size: 8, offset: 664)
!4087 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !4018, file: !1633, line: 478, baseType: !4029, size: 8, offset: 672)
!4088 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !4018, file: !1633, line: 479, baseType: !4029, size: 8, offset: 680)
!4089 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !4018, file: !1633, line: 480, baseType: !4029, size: 8, offset: 688)
!4090 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !4018, file: !1633, line: 481, baseType: !4029, size: 8, offset: 696)
!4091 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !4018, file: !1633, line: 482, baseType: !4029, size: 8, offset: 704)
!4092 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !4018, file: !1633, line: 483, baseType: !4029, size: 8, offset: 712)
!4093 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !4018, file: !1633, line: 484, baseType: !4029, size: 8, offset: 720)
!4094 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !4018, file: !1633, line: 485, baseType: !4029, size: 8, offset: 728)
!4095 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !4018, file: !1633, line: 486, baseType: !4029, size: 8, offset: 736)
!4096 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !4018, file: !1633, line: 487, baseType: !4029, size: 8, offset: 744)
!4097 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !4018, file: !1633, line: 488, baseType: !4029, size: 8, offset: 752)
!4098 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !4018, file: !1633, line: 489, baseType: !4029, size: 8, offset: 760)
!4099 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !4018, file: !1633, line: 490, baseType: !4029, size: 8, offset: 768)
!4100 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !4018, file: !1633, line: 491, baseType: !4029, size: 8, offset: 776)
!4101 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !4018, file: !1633, line: 492, baseType: !4029, size: 8, offset: 784)
!4102 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !4018, file: !1633, line: 493, baseType: !4029, size: 8, offset: 792)
!4103 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !4018, file: !1633, line: 494, baseType: !4029, size: 8, offset: 800)
!4104 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !4018, file: !1633, line: 495, baseType: !4029, size: 8, offset: 808)
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !4018, file: !1633, line: 496, baseType: !4029, size: 8, offset: 816)
!4106 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !4018, file: !1633, line: 497, baseType: !4029, size: 8, offset: 824)
!4107 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !4018, file: !1633, line: 498, baseType: !4029, size: 8, offset: 832)
!4108 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !4018, file: !1633, line: 499, baseType: !4029, size: 8, offset: 840)
!4109 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !4018, file: !1633, line: 500, baseType: !4029, size: 8, offset: 848)
!4110 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !4018, file: !1633, line: 501, baseType: !4029, size: 8, offset: 856)
!4111 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !4018, file: !1633, line: 502, baseType: !4029, size: 8, offset: 864)
!4112 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !4018, file: !1633, line: 503, baseType: !4029, size: 8, offset: 872)
!4113 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !4018, file: !1633, line: 504, baseType: !4029, size: 8, offset: 880)
!4114 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !4018, file: !1633, line: 505, baseType: !4029, size: 8, offset: 888)
!4115 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !4018, file: !1633, line: 506, baseType: !4029, size: 8, offset: 896)
!4116 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !4018, file: !1633, line: 507, baseType: !4029, size: 8, offset: 904)
!4117 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !4018, file: !1633, line: 508, baseType: !4029, size: 8, offset: 912)
!4118 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !4018, file: !1633, line: 509, baseType: !4029, size: 8, offset: 920)
!4119 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !4018, file: !1633, line: 510, baseType: !4029, size: 8, offset: 928)
!4120 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !4018, file: !1633, line: 511, baseType: !4029, size: 8, offset: 936)
!4121 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !4018, file: !1633, line: 512, baseType: !4029, size: 8, offset: 944)
!4122 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !4018, file: !1633, line: 513, baseType: !4029, size: 8, offset: 952)
!4123 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !4018, file: !1633, line: 514, baseType: !4029, size: 8, offset: 960)
!4124 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !4018, file: !1633, line: 515, baseType: !4029, size: 8, offset: 968)
!4125 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !4018, file: !1633, line: 516, baseType: !4029, size: 8, offset: 976)
!4126 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !4018, file: !1633, line: 517, baseType: !4029, size: 8, offset: 984)
!4127 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !4018, file: !1633, line: 518, baseType: !4029, size: 8, offset: 992)
!4128 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !4018, file: !1633, line: 519, baseType: !4029, size: 8, offset: 1000)
!4129 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !4018, file: !1633, line: 520, baseType: !4029, size: 8, offset: 1008)
!4130 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !4018, file: !1633, line: 521, baseType: !4029, size: 8, offset: 1016)
!4131 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !4018, file: !1633, line: 522, baseType: !4029, size: 8, offset: 1024)
!4132 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !4018, file: !1633, line: 523, baseType: !4029, size: 8, offset: 1032)
!4133 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !4018, file: !1633, line: 524, baseType: !4029, size: 8, offset: 1040)
!4134 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !4018, file: !1633, line: 525, baseType: !4029, size: 8, offset: 1048)
!4135 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !4018, file: !1633, line: 526, baseType: !4029, size: 8, offset: 1056)
!4136 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !4018, file: !1633, line: 527, baseType: !4029, size: 8, offset: 1064)
!4137 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !4018, file: !1633, line: 528, baseType: !4029, size: 8, offset: 1072)
!4138 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !4018, file: !1633, line: 529, baseType: !4029, size: 8, offset: 1080)
!4139 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !4018, file: !1633, line: 530, baseType: !4029, size: 8, offset: 1088)
!4140 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !4018, file: !1633, line: 531, baseType: !4029, size: 8, offset: 1096)
!4141 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !4018, file: !1633, line: 532, baseType: !4029, size: 8, offset: 1104)
!4142 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !4018, file: !1633, line: 533, baseType: !4029, size: 8, offset: 1112)
!4143 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !4018, file: !1633, line: 534, baseType: !4029, size: 8, offset: 1120)
!4144 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !4018, file: !1633, line: 535, baseType: !4029, size: 8, offset: 1128)
!4145 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !4018, file: !1633, line: 536, baseType: !4029, size: 8, offset: 1136)
!4146 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !4018, file: !1633, line: 537, baseType: !4029, size: 8, offset: 1144)
!4147 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !4018, file: !1633, line: 538, baseType: !4029, size: 8, offset: 1152)
!4148 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !4018, file: !1633, line: 539, baseType: !4029, size: 8, offset: 1160)
!4149 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !4018, file: !1633, line: 540, baseType: !4029, size: 8, offset: 1168)
!4150 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !4018, file: !1633, line: 541, baseType: !4029, size: 8, offset: 1176)
!4151 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !4018, file: !1633, line: 542, baseType: !4029, size: 8, offset: 1184)
!4152 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !4018, file: !1633, line: 543, baseType: !4029, size: 8, offset: 1192)
!4153 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !4018, file: !1633, line: 544, baseType: !4029, size: 8, offset: 1200)
!4154 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !4018, file: !1633, line: 545, baseType: !4029, size: 8, offset: 1208)
!4155 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !4018, file: !1633, line: 546, baseType: !4029, size: 8, offset: 1216)
!4156 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !4018, file: !1633, line: 547, baseType: !4029, size: 8, offset: 1224)
!4157 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !4018, file: !1633, line: 548, baseType: !4029, size: 8, offset: 1232)
!4158 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !4018, file: !1633, line: 549, baseType: !4029, size: 8, offset: 1240)
!4159 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !4018, file: !1633, line: 550, baseType: !4029, size: 8, offset: 1248)
!4160 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !4018, file: !1633, line: 551, baseType: !4029, size: 8, offset: 1256)
!4161 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !4018, file: !1633, line: 552, baseType: !4029, size: 8, offset: 1264)
!4162 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !4018, file: !1633, line: 553, baseType: !4029, size: 8, offset: 1272)
!4163 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !4018, file: !1633, line: 554, baseType: !4029, size: 8, offset: 1280)
!4164 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !4018, file: !1633, line: 555, baseType: !4029, size: 8, offset: 1288)
!4165 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !4018, file: !1633, line: 556, baseType: !4029, size: 8, offset: 1296)
!4166 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !4018, file: !1633, line: 557, baseType: !4029, size: 8, offset: 1304)
!4167 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !4018, file: !1633, line: 558, baseType: !4029, size: 8, offset: 1312)
!4168 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !4018, file: !1633, line: 559, baseType: !4029, size: 8, offset: 1320)
!4169 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !4018, file: !1633, line: 560, baseType: !4029, size: 8, offset: 1328)
!4170 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !4018, file: !1633, line: 561, baseType: !4029, size: 8, offset: 1336)
!4171 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !4018, file: !1633, line: 562, baseType: !4029, size: 8, offset: 1344)
!4172 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !4018, file: !1633, line: 563, baseType: !4029, size: 8, offset: 1352)
!4173 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !4018, file: !1633, line: 564, baseType: !4029, size: 8, offset: 1360)
!4174 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !4018, file: !1633, line: 565, baseType: !4029, size: 8, offset: 1368)
!4175 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !4018, file: !1633, line: 566, baseType: !4029, size: 8, offset: 1376)
!4176 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !4018, file: !1633, line: 567, baseType: !4029, size: 8, offset: 1384)
!4177 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !4018, file: !1633, line: 568, baseType: !4029, size: 8, offset: 1392)
!4178 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !4018, file: !1633, line: 569, baseType: !4029, size: 8, offset: 1400)
!4179 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !4018, file: !1633, line: 570, baseType: !4029, size: 8, offset: 1408)
!4180 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !4018, file: !1633, line: 571, baseType: !4029, size: 8, offset: 1416)
!4181 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !4018, file: !1633, line: 572, baseType: !4029, size: 8, offset: 1424)
!4182 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !4018, file: !1633, line: 573, baseType: !4029, size: 8, offset: 1432)
!4183 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !4018, file: !1633, line: 574, baseType: !4029, size: 8, offset: 1440)
!4184 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !3047, file: !142, line: 3405, baseType: !4185, size: 384)
!4185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !142, line: 3352, size: 384, elements: !4186)
!4186 = !{!4187, !4188}
!4187 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4185, file: !142, line: 3353, baseType: !3083, size: 192)
!4188 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !4185, file: !142, line: 3356, baseType: !4189, size: 192, offset: 192)
!4189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1633, line: 578, size: 192, elements: !4190)
!4190 = !{!4191, !4192, !4193, !4194, !4195, !4196, !4197, !4198, !4199, !4200, !4201}
!4191 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !4189, file: !1633, line: 580, baseType: !2948, size: 32)
!4192 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !4189, file: !1633, line: 581, baseType: !2948, size: 32, offset: 32)
!4193 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !4189, file: !1633, line: 582, baseType: !2948, size: 32, offset: 64)
!4194 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !4189, file: !1633, line: 583, baseType: !2948, size: 32, offset: 96)
!4195 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !4189, file: !1633, line: 584, baseType: !3158, size: 8, offset: 128)
!4196 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !4189, file: !1633, line: 585, baseType: !3158, size: 8, offset: 136)
!4197 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !4189, file: !1633, line: 586, baseType: !3158, size: 8, offset: 144)
!4198 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !4189, file: !1633, line: 587, baseType: !3158, size: 8, offset: 152)
!4199 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !4189, file: !1633, line: 588, baseType: !3158, size: 8, offset: 160)
!4200 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !4189, file: !1633, line: 589, baseType: !3158, size: 8, offset: 168)
!4201 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !4189, file: !1633, line: 590, baseType: !3158, size: 8, offset: 176)
!4202 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !2945, file: !385, line: 178, baseType: !3463, size: 64)
!4203 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !2945, file: !385, line: 179, baseType: !4204, size: 64)
!4204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4205, size: 64)
!4205 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !385, line: 150, baseType: !4206)
!4206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !385, line: 142, size: 320, elements: !4207)
!4207 = !{!4208, !4209, !4210, !4211, !4212, !4213}
!4208 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !4206, file: !385, line: 144, baseType: !3045, size: 64)
!4209 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !4206, file: !385, line: 145, baseType: !2924, size: 64, offset: 64)
!4210 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4206, file: !385, line: 146, baseType: !2924, size: 64, offset: 128)
!4211 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !4206, file: !385, line: 147, baseType: !3880, size: 32, offset: 192)
!4212 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !4206, file: !385, line: 148, baseType: !7, size: 32, offset: 224)
!4213 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !4206, file: !385, line: 149, baseType: !3158, size: 8, offset: 256)
!4214 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !2945, file: !385, line: 180, baseType: !4215, size: 64)
!4215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4216, size: 64)
!4216 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !385, line: 162, baseType: !4217)
!4217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !385, line: 159, size: 128, elements: !4218)
!4218 = !{!4219, !4220}
!4219 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !4217, file: !385, line: 160, baseType: !3045, size: 64)
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !4217, file: !385, line: 161, baseType: !3014, size: 64, offset: 64)
!4221 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !2945, file: !385, line: 181, baseType: !4222, size: 64)
!4222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4223, size: 64)
!4223 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !385, line: 181, flags: DIFlagFwdDecl)
!4224 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !2940, file: !385, line: 317, baseType: !4225, size: 64)
!4225 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3014, size: 64, elements: !2963)
!4226 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !2940, file: !385, line: 318, baseType: !4227, size: 320)
!4227 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !385, line: 188, size: 320, elements: !4228)
!4228 = !{!4229, !4231, !4286}
!4229 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !4227, file: !385, line: 190, baseType: !4230, size: 192)
!4230 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2944, size: 192, elements: !3116)
!4231 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !4227, file: !385, line: 193, baseType: !4232, size: 64, offset: 192)
!4232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4233, size: 64)
!4233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !385, line: 206, size: 320, elements: !4234)
!4234 = !{!4235, !4271, !4272, !4273, !4285}
!4235 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !4233, file: !385, line: 208, baseType: !4236, size: 64)
!4236 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4237, size: 64)
!4237 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !2925, line: 62, baseType: !4238)
!4238 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !4239, line: 538, size: 256, elements: !4240)
!4239 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4240 = !{!4241, !4245, !4251, !4262}
!4241 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4238, file: !4239, line: 539, baseType: !4242, size: 32)
!4242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !4239, line: 482, size: 32, elements: !4243)
!4243 = !{!4244}
!4244 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4242, file: !4239, line: 484, baseType: !7, size: 32)
!4245 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !4238, file: !4239, line: 540, baseType: !4246, size: 192)
!4246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !4239, line: 488, size: 192, elements: !4247)
!4247 = !{!4248, !4249, !4250}
!4248 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4246, file: !4239, line: 489, baseType: !4242, size: 32)
!4249 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4246, file: !4239, line: 492, baseType: !2951, size: 64, offset: 64)
!4250 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !4246, file: !4239, line: 496, baseType: !3045, size: 64, offset: 128)
!4251 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !4238, file: !4239, line: 541, baseType: !4252, size: 256)
!4252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !4239, line: 504, size: 256, elements: !4253)
!4253 = !{!4254, !4255, !4260, !4261}
!4254 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4252, file: !4239, line: 505, baseType: !4242, size: 32)
!4255 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !4252, file: !4239, line: 509, baseType: !4256, size: 64, offset: 64)
!4256 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !4239, line: 501, baseType: !4257)
!4257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4258, size: 64)
!4258 = !DISubroutineType(types: !4259)
!4259 = !{null, !3385}
!4260 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4252, file: !4239, line: 510, baseType: !3385, size: 64, offset: 128)
!4261 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4252, file: !4239, line: 513, baseType: !4236, size: 64, offset: 192)
!4262 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !4238, file: !4239, line: 542, baseType: !4263, size: 128)
!4263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !4239, line: 530, size: 128, elements: !4264)
!4264 = !{!4265, !4266}
!4265 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !4263, file: !4239, line: 531, baseType: !4242, size: 32)
!4266 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !4263, file: !4239, line: 534, baseType: !4267, size: 64, offset: 64)
!4267 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !4239, line: 525, baseType: !4268)
!4268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4269, size: 64)
!4269 = !DISubroutineType(types: !4270)
!4270 = !{!3158, !3045, !2951, !2916, !2916}
!4271 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !4233, file: !385, line: 211, baseType: !7, size: 32, offset: 64)
!4272 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4233, file: !385, line: 214, baseType: !3014, size: 64, offset: 128)
!4273 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !4233, file: !385, line: 224, baseType: !4274, size: 64, offset: 192)
!4274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4275, size: 64)
!4275 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !385, line: 202, baseType: !4276)
!4276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !385, line: 202, size: 128, elements: !4277)
!4277 = !{!4278}
!4278 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4276, file: !385, line: 202, baseType: !4279, size: 128)
!4279 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !385, line: 200, baseType: !4280)
!4280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !385, line: 200, size: 128, elements: !4281)
!4281 = !{!4282, !4283, !4284}
!4282 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4280, file: !385, line: 200, baseType: !7, size: 32)
!4283 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4280, file: !385, line: 200, baseType: !7, size: 32, offset: 32)
!4284 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4280, file: !385, line: 200, baseType: !2962, size: 64, offset: 64)
!4285 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !4233, file: !385, line: 234, baseType: !4274, size: 64, offset: 256)
!4286 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !4227, file: !385, line: 197, baseType: !3014, size: 64, offset: 256)
!4287 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !2940, file: !385, line: 319, baseType: !3105, size: 256)
!4288 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !2940, file: !385, line: 320, baseType: !3124, size: 192)
!4289 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2919, file: !3, line: 464, baseType: !3014, size: 64, offset: 192)
!4290 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2919, file: !3, line: 469, baseType: !3045, size: 64, offset: 256)
!4291 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2919, file: !3, line: 471, baseType: !7, size: 32, offset: 320)
!4292 = !DIDerivedType(tag: DW_TAG_member, name: "in_use", scope: !2919, file: !3, line: 473, baseType: !2953, size: 8, offset: 352)
!4293 = !DIDerivedType(tag: DW_TAG_member, name: "addr_taken", scope: !2919, file: !3, line: 475, baseType: !2953, size: 8, offset: 360)
!4294 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !2919, file: !3, line: 477, baseType: !2948, size: 32, offset: 384)
!4295 = !DIDerivedType(tag: DW_TAG_member, name: "keep", scope: !2919, file: !3, line: 479, baseType: !2948, size: 32, offset: 416)
!4296 = !DIDerivedType(tag: DW_TAG_member, name: "base_offset", scope: !2919, file: !3, line: 482, baseType: !3014, size: 64, offset: 448)
!4297 = !DIDerivedType(tag: DW_TAG_member, name: "full_size", scope: !2919, file: !3, line: 485, baseType: !3014, size: 64, offset: 512)
!4298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4299, size: 64)
!4299 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4300)
!4300 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "types_used_by_vars_entry", file: !1493, line: 620, size: 128, elements: !4301)
!4301 = !{!4302, !4303}
!4302 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4300, file: !1493, line: 621, baseType: !3045, size: 64)
!4303 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !4300, file: !1493, line: 622, baseType: !3045, size: 64, offset: 64)
!4304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4300, size: 64)
!4305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4306, size: 64)
!4306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "temp_slot_address_entry", file: !3, line: 493, size: 192, elements: !4307)
!4307 = !{!4308, !4309, !4310}
!4308 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !4306, file: !3, line: 494, baseType: !3384, size: 32)
!4309 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !4306, file: !3, line: 495, baseType: !2924, size: 64, offset: 64)
!4310 = !DIDerivedType(tag: DW_TAG_member, name: "temp_slot", scope: !4306, file: !3, line: 496, baseType: !2918, size: 64, offset: 128)
!4311 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4312, size: 64)
!4312 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_function_p_heap", file: !3, line: 164, baseType: !4313)
!4313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_function_p_heap", file: !3, line: 164, size: 128, elements: !4314)
!4314 = !{!4315}
!4315 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4313, file: !3, line: 164, baseType: !4316, size: 128)
!4316 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_function_p_base", file: !3, line: 163, baseType: !4317)
!4317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_function_p_base", file: !3, line: 163, size: 128, elements: !4318)
!4318 = !{!4319, !4320, !4321}
!4319 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4317, file: !3, line: 163, baseType: !7, size: 32)
!4320 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4317, file: !3, line: 163, baseType: !7, size: 32, offset: 32)
!4321 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4317, file: !3, line: 163, baseType: !4322, size: 64, offset: 64)
!4322 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4323, size: 64, elements: !2963)
!4323 = !DIDerivedType(tag: DW_TAG_typedef, name: "function_p", file: !3, line: 161, baseType: !3291)
!4324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4325, size: 64)
!4325 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_temp_slot_p_gc", file: !1493, line: 172, baseType: !4326)
!4326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_temp_slot_p_gc", file: !1493, line: 172, size: 128, elements: !4327)
!4327 = !{!4328}
!4328 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4326, file: !1493, line: 172, baseType: !4329, size: 128)
!4329 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_temp_slot_p_base", file: !1493, line: 171, baseType: !4330)
!4330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_temp_slot_p_base", file: !1493, line: 171, size: 128, elements: !4331)
!4331 = !{!4332, !4333, !4334}
!4332 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4330, file: !1493, line: 171, baseType: !7, size: 32)
!4333 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4330, file: !1493, line: 171, baseType: !7, size: 32, offset: 32)
!4334 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4330, file: !1493, line: 171, baseType: !4335, size: 64, offset: 64)
!4335 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4336, size: 64, elements: !2963)
!4336 = !DIDerivedType(tag: DW_TAG_typedef, name: "temp_slot_p", file: !1493, line: 168, baseType: !2918)
!4337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4338, size: 64)
!4338 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4306)
!4339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3158, size: 64)
!4340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4341, size: 64)
!4341 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !142, line: 184, baseType: !4342)
!4342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !142, line: 184, size: 128, elements: !4343)
!4343 = !{!4344}
!4344 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4342, file: !142, line: 184, baseType: !3431, size: 128)
!4345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3489, size: 64)
!4346 = !{!0, !4347, !4349, !4351, !4379, !4381, !4383, !4385, !4387, !4401, !4417, !4419, !4421, !4423, !4425, !4427, !4429, !4431, !4436, !4438, !4440, !4442, !4444, !4446, !4448, !4450, !4452, !4454, !4456, !4458, !4460}
!4347 = !DIGlobalVariableExpression(var: !4348, expr: !DIExpression())
!4348 = distinct !DIGlobalVariable(name: "types_used_by_vars_hash", scope: !2, file: !3, line: 134, type: !3375, isLocal: false, isDefinition: true)
!4349 = !DIGlobalVariableExpression(var: !4350, expr: !DIExpression())
!4350 = distinct !DIGlobalVariable(name: "types_used_by_cur_var_decl", scope: !2, file: !3, line: 135, type: !3045, isLocal: false, isDefinition: true)
!4351 = !DIGlobalVariableExpression(var: !4352, expr: !DIExpression())
!4352 = distinct !DIGlobalVariable(name: "pass_instantiate_virtual_regs", scope: !2, file: !3, line: 1828, type: !4353, isLocal: false, isDefinition: true)
!4353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !570, line: 162, size: 640, elements: !4354)
!4354 = !{!4355}
!4355 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !4353, file: !570, line: 164, baseType: !4356, size: 640)
!4356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !570, line: 114, size: 640, elements: !4357)
!4357 = !{!4358, !4359, !4360, !4364, !4368, !4370, !4371, !4372, !4374, !4375, !4376, !4377, !4378}
!4358 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4356, file: !570, line: 117, baseType: !569, size: 32)
!4359 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4356, file: !570, line: 121, baseType: !2951, size: 64, offset: 64)
!4360 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !4356, file: !570, line: 125, baseType: !4361, size: 64, offset: 128)
!4361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4362, size: 64)
!4362 = !DISubroutineType(types: !4363)
!4363 = !{!3158}
!4364 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !4356, file: !570, line: 130, baseType: !4365, size: 64, offset: 192)
!4365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4366, size: 64)
!4366 = !DISubroutineType(types: !4367)
!4367 = !{!7}
!4368 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !4356, file: !570, line: 133, baseType: !4369, size: 64, offset: 256)
!4369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4356, size: 64)
!4370 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4356, file: !570, line: 136, baseType: !4369, size: 64, offset: 320)
!4371 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !4356, file: !570, line: 139, baseType: !2948, size: 32, offset: 384)
!4372 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !4356, file: !570, line: 143, baseType: !4373, size: 32, offset: 416)
!4373 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !577, line: 80, baseType: !576)
!4374 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !4356, file: !570, line: 146, baseType: !7, size: 32, offset: 448)
!4375 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !4356, file: !570, line: 147, baseType: !7, size: 32, offset: 480)
!4376 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !4356, file: !570, line: 148, baseType: !7, size: 32, offset: 512)
!4377 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !4356, file: !570, line: 151, baseType: !7, size: 32, offset: 544)
!4378 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !4356, file: !570, line: 152, baseType: !7, size: 32, offset: 576)
!4379 = !DIGlobalVariableExpression(var: !4380, expr: !DIExpression())
!4380 = distinct !DIGlobalVariable(name: "pass_init_function", scope: !2, file: !3, line: 4247, type: !4353, isLocal: false, isDefinition: true)
!4381 = !DIGlobalVariableExpression(var: !4382, expr: !DIExpression())
!4382 = distinct !DIGlobalVariable(name: "pass_leaf_regs", scope: !2, file: !3, line: 5557, type: !4353, isLocal: false, isDefinition: true)
!4383 = !DIGlobalVariableExpression(var: !4384, expr: !DIExpression())
!4384 = distinct !DIGlobalVariable(name: "pass_thread_prologue_and_epilogue", scope: !2, file: !3, line: 5590, type: !4353, isLocal: false, isDefinition: true)
!4385 = !DIGlobalVariableExpression(var: !4386, expr: !DIExpression())
!4386 = distinct !DIGlobalVariable(name: "pass_match_asm_constraints", scope: !2, file: !3, line: 5792, type: !4353, isLocal: false, isDefinition: true)
!4387 = !DIGlobalVariableExpression(var: !4388, expr: !DIExpression())
!4388 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_function_h", scope: !2, file: !4389, line: 152, type: !4390, isLocal: false, isDefinition: true)
!4389 = !DIFile(filename: "./gt-function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4391, size: 960, elements: !3116)
!4391 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4392)
!4392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !4393, line: 69, size: 320, elements: !4394)
!4393 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4394 = !{!4395, !4396, !4397, !4398, !4400}
!4395 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4392, file: !4393, line: 70, baseType: !3035, size: 64)
!4396 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !4392, file: !4393, line: 71, baseType: !3400, size: 64, offset: 64)
!4397 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !4392, file: !4393, line: 72, baseType: !3400, size: 64, offset: 128)
!4398 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !4392, file: !4393, line: 73, baseType: !4399, size: 64, offset: 192)
!4399 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !4393, line: 65, baseType: !3394)
!4400 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !4392, file: !4393, line: 74, baseType: !4399, size: 64, offset: 256)
!4401 = !DIGlobalVariableExpression(var: !4402, expr: !DIExpression())
!4402 = distinct !DIGlobalVariable(name: "gt_ggc_rc_gt_function_h", scope: !2, file: !4389, line: 170, type: !4403, isLocal: false, isDefinition: true)
!4403 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4404, size: 1152, elements: !3116)
!4404 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4405)
!4405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_cache_tab", file: !4393, line: 85, size: 384, elements: !4406)
!4406 = !{!4407, !4409, !4410, !4411, !4412, !4413}
!4407 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4405, file: !4393, line: 86, baseType: !4408, size: 64)
!4408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3376, size: 64)
!4409 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !4405, file: !4393, line: 87, baseType: !3400, size: 64, offset: 64)
!4410 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !4405, file: !4393, line: 88, baseType: !3400, size: 64, offset: 128)
!4411 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !4405, file: !4393, line: 89, baseType: !4399, size: 64, offset: 192)
!4412 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !4405, file: !4393, line: 90, baseType: !4399, size: 64, offset: 256)
!4413 = !DIDerivedType(tag: DW_TAG_member, name: "marked_p", scope: !4405, file: !4393, line: 91, baseType: !4414, size: 64, offset: 320)
!4414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4415, size: 64)
!4415 = !DISubroutineType(types: !4416)
!4416 = !{!2948, !3385}
!4417 = !DIGlobalVariableExpression(var: !4418, expr: !DIExpression())
!4418 = distinct !DIGlobalVariable(name: "gt_pch_rc_gt_function_h", scope: !2, file: !4389, line: 190, type: !4390, isLocal: false, isDefinition: true)
!4419 = !DIGlobalVariableExpression(var: !4420, expr: !DIExpression())
!4420 = distinct !DIGlobalVariable(name: "gt_pch_rs_gt_function_h", scope: !2, file: !4389, line: 208, type: !4390, isLocal: false, isDefinition: true)
!4421 = !DIGlobalVariableExpression(var: !4422, expr: !DIExpression())
!4422 = distinct !DIGlobalVariable(name: "current_function_is_leaf", scope: !2, file: !3, line: 99, type: !2948, isLocal: false, isDefinition: true)
!4423 = !DIGlobalVariableExpression(var: !4424, expr: !DIExpression())
!4424 = distinct !DIGlobalVariable(name: "current_function_sp_is_unchanging", scope: !2, file: !3, line: 104, type: !2948, isLocal: false, isDefinition: true)
!4425 = !DIGlobalVariableExpression(var: !4426, expr: !DIExpression())
!4426 = distinct !DIGlobalVariable(name: "current_function_uses_only_leaf_regs", scope: !2, file: !3, line: 109, type: !2948, isLocal: false, isDefinition: true)
!4427 = !DIGlobalVariableExpression(var: !4428, expr: !DIExpression())
!4428 = distinct !DIGlobalVariable(name: "virtuals_instantiated", scope: !2, file: !3, line: 115, type: !2948, isLocal: false, isDefinition: true)
!4429 = !DIGlobalVariableExpression(var: !4430, expr: !DIExpression())
!4430 = distinct !DIGlobalVariable(name: "funcdef_no", scope: !2, file: !3, line: 118, type: !2948, isLocal: true, isDefinition: true)
!4431 = !DIGlobalVariableExpression(var: !4432, expr: !DIExpression())
!4432 = distinct !DIGlobalVariable(name: "init_machine_status", scope: !2, file: !3, line: 122, type: !4433, isLocal: false, isDefinition: true)
!4433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4434, size: 64)
!4434 = !DISubroutineType(types: !4435)
!4435 = !{!3783}
!4436 = !DIGlobalVariableExpression(var: !4437, expr: !DIExpression())
!4437 = distinct !DIGlobalVariable(name: "prologue_insn_hash", scope: !2, file: !3, line: 129, type: !3375, isLocal: true, isDefinition: true)
!4438 = !DIGlobalVariableExpression(var: !4439, expr: !DIExpression())
!4439 = distinct !DIGlobalVariable(name: "epilogue_insn_hash", scope: !2, file: !3, line: 131, type: !3375, isLocal: true, isDefinition: true)
!4440 = !DIGlobalVariableExpression(var: !4441, expr: !DIExpression())
!4441 = distinct !DIGlobalVariable(name: "function_context_stack", scope: !2, file: !3, line: 165, type: !4311, isLocal: true, isDefinition: true)
!4442 = !DIGlobalVariableExpression(var: !4443, expr: !DIExpression())
!4443 = distinct !DIGlobalVariable(name: "temp_slot_address_table", scope: !2, file: !3, line: 490, type: !3375, isLocal: true, isDefinition: true)
!4444 = !DIGlobalVariableExpression(var: !4445, expr: !DIExpression())
!4445 = distinct !DIGlobalVariable(name: "in_dummy_function", scope: !2, file: !3, line: 4035, type: !3158, isLocal: true, isDefinition: true)
!4446 = !DIGlobalVariableExpression(var: !4447, expr: !DIExpression())
!4447 = distinct !DIGlobalVariable(name: "cfun_stack", scope: !2, file: !3, line: 4077, type: !4311, isLocal: true, isDefinition: true)
!4448 = !DIGlobalVariableExpression(var: !4449, expr: !DIExpression())
!4449 = distinct !DIGlobalVariable(name: "initial_trampoline", scope: !2, file: !3, line: 4633, type: !2924, isLocal: true, isDefinition: true)
!4450 = !DIGlobalVariableExpression(var: !4451, expr: !DIExpression())
!4451 = distinct !DIGlobalVariable(name: "in_arg_offset", scope: !2, file: !3, line: 1247, type: !2948, isLocal: true, isDefinition: true)
!4452 = !DIGlobalVariableExpression(var: !4453, expr: !DIExpression())
!4453 = distinct !DIGlobalVariable(name: "var_offset", scope: !2, file: !3, line: 1248, type: !2948, isLocal: true, isDefinition: true)
!4454 = !DIGlobalVariableExpression(var: !4455, expr: !DIExpression())
!4455 = distinct !DIGlobalVariable(name: "dynamic_offset", scope: !2, file: !3, line: 1249, type: !2948, isLocal: true, isDefinition: true)
!4456 = !DIGlobalVariableExpression(var: !4457, expr: !DIExpression())
!4457 = distinct !DIGlobalVariable(name: "out_arg_offset", scope: !2, file: !3, line: 1250, type: !2948, isLocal: true, isDefinition: true)
!4458 = !DIGlobalVariableExpression(var: !4459, expr: !DIExpression())
!4459 = distinct !DIGlobalVariable(name: "cfa_offset", scope: !2, file: !3, line: 1251, type: !2948, isLocal: true, isDefinition: true)
!4460 = !DIGlobalVariableExpression(var: !4461, expr: !DIExpression())
!4461 = distinct !DIGlobalVariable(name: "next_block_index", scope: !2, file: !3, line: 3978, type: !2948, isLocal: true, isDefinition: true)
!4462 = !{i32 7, !"Dwarf Version", i32 4}
!4463 = !{i32 2, !"Debug Info Version", i32 3}
!4464 = !{i32 1, !"wchar_size", i32 4}
!4465 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!4466 = distinct !DISubprogram(name: "push_function_context", scope: !3, file: !3, line: 171, type: !4467, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4467 = !DISubroutineType(types: !4468)
!4468 = !{null}
!4469 = !{}
!4470 = !DILocation(line: 173, column: 7, scope: !4471)
!4471 = distinct !DILexicalBlock(scope: !4466, file: !3, line: 173, column: 7)
!4472 = !DILocation(line: 173, column: 12, scope: !4471)
!4473 = !DILocation(line: 173, column: 7, scope: !4466)
!4474 = !DILocation(line: 174, column: 5, scope: !4471)
!4475 = !DILocation(line: 176, column: 3, scope: !4466)
!4476 = !DILocation(line: 177, column: 3, scope: !4466)
!4477 = !DILocation(line: 178, column: 1, scope: !4466)
!4478 = distinct !DISubprogram(name: "allocate_struct_function", scope: !3, file: !3, line: 4118, type: !4479, scopeLine: 4119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4479 = !DISubroutineType(types: !4480)
!4480 = !{null, !3045, !3158}
!4481 = !DILocalVariable(name: "fndecl", arg: 1, scope: !4478, file: !3, line: 4118, type: !3045)
!4482 = !DILocation(line: 4118, column: 32, scope: !4478)
!4483 = !DILocalVariable(name: "abstract_p", arg: 2, scope: !4478, file: !3, line: 4118, type: !3158)
!4484 = !DILocation(line: 4118, column: 45, scope: !4478)
!4485 = !DILocalVariable(name: "result", scope: !4478, file: !3, line: 4120, type: !3045)
!4486 = !DILocation(line: 4120, column: 8, scope: !4478)
!4487 = !DILocalVariable(name: "fntype", scope: !4478, file: !3, line: 4121, type: !3045)
!4488 = !DILocation(line: 4121, column: 8, scope: !4478)
!4489 = !DILocation(line: 4121, column: 17, scope: !4478)
!4490 = !DILocation(line: 4121, column: 26, scope: !4478)
!4491 = !DILocation(line: 4123, column: 10, scope: !4478)
!4492 = !DILocation(line: 4123, column: 8, scope: !4478)
!4493 = !DILocation(line: 4125, column: 3, scope: !4478)
!4494 = !DILocation(line: 4125, column: 9, scope: !4478)
!4495 = !DILocation(line: 4125, column: 28, scope: !4478)
!4496 = !DILocation(line: 4127, column: 3, scope: !4478)
!4497 = !DILocation(line: 4129, column: 7, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4478, file: !3, line: 4129, column: 7)
!4499 = !DILocation(line: 4129, column: 7, scope: !4478)
!4500 = !DILocation(line: 4130, column: 23, scope: !4498)
!4501 = !DILocation(line: 4130, column: 21, scope: !4498)
!4502 = !DILocation(line: 4130, column: 5, scope: !4498)
!4503 = !DILocation(line: 4130, column: 11, scope: !4498)
!4504 = !DILocation(line: 4130, column: 19, scope: !4498)
!4505 = !DILocation(line: 4133, column: 3, scope: !4478)
!4506 = !DILocation(line: 4136, column: 37, scope: !4478)
!4507 = !DILocation(line: 4136, column: 3, scope: !4478)
!4508 = !DILocation(line: 4138, column: 7, scope: !4509)
!4509 = distinct !DILexicalBlock(scope: !4478, file: !3, line: 4138, column: 7)
!4510 = !DILocation(line: 4138, column: 14, scope: !4509)
!4511 = !DILocation(line: 4138, column: 7, scope: !4478)
!4512 = !DILocation(line: 4140, column: 39, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4509, file: !3, line: 4139, column: 5)
!4514 = !DILocation(line: 4140, column: 7, scope: !4513)
!4515 = !DILocation(line: 4140, column: 37, scope: !4513)
!4516 = !DILocation(line: 4141, column: 20, scope: !4513)
!4517 = !DILocation(line: 4141, column: 7, scope: !4513)
!4518 = !DILocation(line: 4141, column: 13, scope: !4513)
!4519 = !DILocation(line: 4141, column: 18, scope: !4513)
!4520 = !DILocation(line: 4142, column: 37, scope: !4513)
!4521 = !DILocation(line: 4142, column: 7, scope: !4513)
!4522 = !DILocation(line: 4142, column: 35, scope: !4513)
!4523 = !DILocation(line: 4144, column: 16, scope: !4513)
!4524 = !DILocation(line: 4144, column: 14, scope: !4513)
!4525 = !DILocation(line: 4145, column: 12, scope: !4526)
!4526 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 4145, column: 11)
!4527 = !DILocation(line: 4145, column: 23, scope: !4526)
!4528 = !DILocation(line: 4145, column: 45, scope: !4526)
!4529 = !DILocation(line: 4145, column: 53, scope: !4526)
!4530 = !DILocation(line: 4145, column: 26, scope: !4526)
!4531 = !DILocation(line: 4145, column: 11, scope: !4513)
!4532 = !DILocation(line: 4150, column: 4, scope: !4533)
!4533 = distinct !DILexicalBlock(scope: !4526, file: !3, line: 4146, column: 2)
!4534 = !DILocation(line: 4150, column: 10, scope: !4533)
!4535 = !DILocation(line: 4150, column: 25, scope: !4533)
!4536 = !DILocation(line: 4151, column: 2, scope: !4533)
!4537 = !DILocation(line: 4154, column: 5, scope: !4513)
!4538 = !DILocation(line: 4155, column: 5, scope: !4513)
!4539 = !DILocation(line: 4155, column: 8, scope: !4513)
!4540 = !DILocation(line: 4155, column: 32, scope: !4513)
!4541 = !DILocation(line: 4156, column: 5, scope: !4513)
!4542 = !DILocation(line: 4156, column: 9, scope: !4513)
!4543 = !DILocation(line: 4157, column: 12, scope: !4513)
!4544 = !DILocation(line: 4157, column: 9, scope: !4513)
!4545 = !DILocation(line: 0, scope: !4513)
!4546 = !DILocation(line: 4153, column: 7, scope: !4513)
!4547 = !DILocation(line: 4153, column: 13, scope: !4513)
!4548 = !DILocation(line: 4154, column: 2, scope: !4513)
!4549 = !DILocation(line: 4160, column: 7, scope: !4513)
!4550 = !DILocation(line: 4160, column: 13, scope: !4513)
!4551 = !DILocation(line: 4160, column: 30, scope: !4513)
!4552 = !DILocation(line: 4161, column: 7, scope: !4513)
!4553 = !DILocation(line: 4161, column: 13, scope: !4513)
!4554 = !DILocation(line: 4161, column: 30, scope: !4513)
!4555 = !DILocation(line: 4162, column: 5, scope: !4513)
!4556 = !DILocation(line: 4163, column: 1, scope: !4478)
!4557 = distinct !DISubprogram(name: "VEC_function_p_heap_safe_push", scope: !3, file: !3, line: 164, type: !4558, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4558 = !DISubroutineType(types: !4559)
!4559 = !{!4560, !4561, !4323}
!4560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4323, size: 64)
!4561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4311, size: 64)
!4562 = !DILocalVariable(name: "vec_", arg: 1, scope: !4557, file: !3, line: 164, type: !4561)
!4563 = !DILocation(line: 164, column: 1, scope: !4557)
!4564 = !DILocalVariable(name: "obj_", arg: 2, scope: !4557, file: !3, line: 164, type: !4323)
!4565 = distinct !DISubprogram(name: "set_cfun", scope: !3, file: !3, line: 4066, type: !4566, scopeLine: 4067, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4566 = !DISubroutineType(types: !4567)
!4567 = !{null, !3291}
!4568 = !DILocalVariable(name: "new_cfun", arg: 1, scope: !4565, file: !3, line: 4066, type: !3291)
!4569 = !DILocation(line: 4066, column: 28, scope: !4565)
!4570 = !DILocation(line: 4068, column: 7, scope: !4571)
!4571 = distinct !DILexicalBlock(scope: !4565, file: !3, line: 4068, column: 7)
!4572 = !DILocation(line: 4068, column: 15, scope: !4571)
!4573 = !DILocation(line: 4068, column: 12, scope: !4571)
!4574 = !DILocation(line: 4068, column: 7, scope: !4565)
!4575 = !DILocation(line: 4070, column: 14, scope: !4576)
!4576 = distinct !DILexicalBlock(scope: !4571, file: !3, line: 4069, column: 5)
!4577 = !DILocation(line: 4070, column: 12, scope: !4576)
!4578 = !DILocation(line: 4071, column: 41, scope: !4576)
!4579 = !DILocation(line: 4071, column: 52, scope: !4576)
!4580 = !DILocation(line: 4071, column: 62, scope: !4576)
!4581 = !DILocation(line: 4071, column: 7, scope: !4576)
!4582 = !DILocation(line: 4072, column: 5, scope: !4576)
!4583 = !DILocation(line: 4073, column: 1, scope: !4565)
!4584 = distinct !DISubprogram(name: "pop_function_context", scope: !3, file: !3, line: 184, type: !4467, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4585 = !DILocalVariable(name: "p", scope: !4584, file: !3, line: 186, type: !3291)
!4586 = !DILocation(line: 186, column: 20, scope: !4584)
!4587 = !DILocation(line: 186, column: 24, scope: !4584)
!4588 = !DILocation(line: 187, column: 13, scope: !4584)
!4589 = !DILocation(line: 187, column: 3, scope: !4584)
!4590 = !DILocation(line: 188, column: 27, scope: !4584)
!4591 = !DILocation(line: 188, column: 30, scope: !4584)
!4592 = !DILocation(line: 188, column: 25, scope: !4584)
!4593 = !DILocation(line: 191, column: 25, scope: !4584)
!4594 = !DILocation(line: 192, column: 23, scope: !4584)
!4595 = !DILocation(line: 193, column: 1, scope: !4584)
!4596 = distinct !DISubprogram(name: "VEC_function_p_base_pop", scope: !3, file: !3, line: 163, type: !4597, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4597 = !DISubroutineType(types: !4598)
!4598 = !{!4323, !4599}
!4599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4316, size: 64)
!4600 = !DILocalVariable(name: "vec_", arg: 1, scope: !4596, file: !3, line: 163, type: !4599)
!4601 = !DILocation(line: 163, column: 1, scope: !4596)
!4602 = !DILocalVariable(name: "obj_", scope: !4596, file: !3, line: 163, type: !4323)
!4603 = distinct !DISubprogram(name: "free_after_parsing", scope: !3, file: !3, line: 200, type: !4566, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4604 = !DILocalVariable(name: "f", arg: 1, scope: !4603, file: !3, line: 200, type: !3291)
!4605 = !DILocation(line: 200, column: 38, scope: !4603)
!4606 = !DILocation(line: 202, column: 3, scope: !4603)
!4607 = !DILocation(line: 202, column: 6, scope: !4603)
!4608 = !DILocation(line: 202, column: 15, scope: !4603)
!4609 = !DILocation(line: 203, column: 1, scope: !4603)
!4610 = distinct !DISubprogram(name: "free_after_compilation", scope: !3, file: !3, line: 210, type: !4566, scopeLine: 211, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4611 = !DILocalVariable(name: "f", arg: 1, scope: !4610, file: !3, line: 210, type: !3291)
!4612 = !DILocation(line: 210, column: 42, scope: !4610)
!4613 = !DILocation(line: 212, column: 22, scope: !4610)
!4614 = !DILocation(line: 213, column: 22, scope: !4610)
!4615 = !DILocation(line: 215, column: 18, scope: !4616)
!4616 = distinct !DILexicalBlock(scope: !4610, file: !3, line: 215, column: 7)
!4617 = !DILocation(line: 215, column: 7, scope: !4616)
!4618 = !DILocation(line: 215, column: 7, scope: !4610)
!4619 = !DILocation(line: 216, column: 22, scope: !4616)
!4620 = !DILocation(line: 216, column: 5, scope: !4616)
!4621 = !DILocation(line: 218, column: 3, scope: !4610)
!4622 = !DILocation(line: 219, column: 3, scope: !4610)
!4623 = !DILocation(line: 219, column: 6, scope: !4610)
!4624 = !DILocation(line: 219, column: 9, scope: !4610)
!4625 = !DILocation(line: 220, column: 3, scope: !4610)
!4626 = !DILocation(line: 220, column: 6, scope: !4610)
!4627 = !DILocation(line: 220, column: 14, scope: !4610)
!4628 = !DILocation(line: 221, column: 3, scope: !4610)
!4629 = !DILocation(line: 221, column: 6, scope: !4610)
!4630 = !DILocation(line: 221, column: 10, scope: !4610)
!4631 = !DILocation(line: 223, column: 17, scope: !4610)
!4632 = !DILocation(line: 224, column: 3, scope: !4610)
!4633 = !DILocation(line: 225, column: 1, scope: !4610)
!4634 = distinct !DISubprogram(name: "get_frame_size", scope: !3, file: !3, line: 232, type: !4635, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4635 = !DISubroutineType(types: !4636)
!4636 = !{!3014}
!4637 = !DILocation(line: 235, column: 13, scope: !4638)
!4638 = distinct !DILexicalBlock(scope: !4634, file: !3, line: 234, column: 7)
!4639 = !DILocation(line: 235, column: 12, scope: !4638)
!4640 = !DILocation(line: 235, column: 5, scope: !4638)
!4641 = distinct !DISubprogram(name: "frame_offset_overflow", scope: !3, file: !3, line: 245, type: !4642, scopeLine: 246, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4642 = !DISubroutineType(types: !4643)
!4643 = !{!3158, !3014, !3045}
!4644 = !DILocalVariable(name: "offset", arg: 1, scope: !4641, file: !3, line: 245, type: !3014)
!4645 = !DILocation(line: 245, column: 38, scope: !4641)
!4646 = !DILocalVariable(name: "func", arg: 2, scope: !4641, file: !3, line: 245, type: !3045)
!4647 = !DILocation(line: 245, column: 51, scope: !4641)
!4648 = !DILocalVariable(name: "size", scope: !4641, file: !3, line: 247, type: !2916)
!4649 = !DILocation(line: 247, column: 26, scope: !4641)
!4650 = !DILocation(line: 247, column: 57, scope: !4641)
!4651 = !DILocation(line: 247, column: 56, scope: !4641)
!4652 = !DILocation(line: 249, column: 7, scope: !4653)
!4653 = distinct !DILexicalBlock(scope: !4641, file: !3, line: 249, column: 7)
!4654 = !DILocation(line: 249, column: 46, scope: !4653)
!4655 = !DILocation(line: 249, column: 71, scope: !4653)
!4656 = !DILocation(line: 249, column: 42, scope: !4653)
!4657 = !DILocation(line: 251, column: 9, scope: !4653)
!4658 = !DILocation(line: 249, column: 12, scope: !4653)
!4659 = !DILocation(line: 249, column: 7, scope: !4641)
!4660 = !DILocation(line: 253, column: 17, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4653, file: !3, line: 252, column: 5)
!4662 = !DILocation(line: 253, column: 7, scope: !4661)
!4663 = !DILocation(line: 255, column: 7, scope: !4661)
!4664 = !DILocation(line: 258, column: 3, scope: !4641)
!4665 = !DILocation(line: 259, column: 1, scope: !4641)
!4666 = distinct !DISubprogram(name: "assign_stack_local_1", scope: !3, file: !3, line: 295, type: !4667, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4667 = !DISubroutineType(types: !4668)
!4668 = !{!2924, !13, !3014, !2948, !3158}
!4669 = !DILocalVariable(name: "mode", arg: 1, scope: !4666, file: !3, line: 295, type: !13)
!4670 = !DILocation(line: 295, column: 41, scope: !4666)
!4671 = !DILocalVariable(name: "size", arg: 2, scope: !4666, file: !3, line: 295, type: !3014)
!4672 = !DILocation(line: 295, column: 61, scope: !4666)
!4673 = !DILocalVariable(name: "align", arg: 3, scope: !4666, file: !3, line: 296, type: !2948)
!4674 = !DILocation(line: 296, column: 13, scope: !4666)
!4675 = !DILocalVariable(name: "reduce_alignment_ok", arg: 4, scope: !4666, file: !3, line: 297, type: !3158)
!4676 = !DILocation(line: 297, column: 14, scope: !4666)
!4677 = !DILocalVariable(name: "x", scope: !4666, file: !3, line: 299, type: !2924)
!4678 = !DILocation(line: 299, column: 7, scope: !4666)
!4679 = !DILocalVariable(name: "addr", scope: !4666, file: !3, line: 299, type: !2924)
!4680 = !DILocation(line: 299, column: 10, scope: !4666)
!4681 = !DILocalVariable(name: "bigend_correction", scope: !4666, file: !3, line: 300, type: !2948)
!4682 = !DILocation(line: 300, column: 7, scope: !4666)
!4683 = !DILocalVariable(name: "alignment", scope: !4666, file: !3, line: 301, type: !7)
!4684 = !DILocation(line: 301, column: 16, scope: !4666)
!4685 = !DILocalVariable(name: "alignment_in_bits", scope: !4666, file: !3, line: 301, type: !7)
!4686 = !DILocation(line: 301, column: 27, scope: !4666)
!4687 = !DILocalVariable(name: "frame_off", scope: !4666, file: !3, line: 302, type: !2948)
!4688 = !DILocation(line: 302, column: 7, scope: !4666)
!4689 = !DILocalVariable(name: "frame_alignment", scope: !4666, file: !3, line: 302, type: !2948)
!4690 = !DILocation(line: 302, column: 18, scope: !4666)
!4691 = !DILocalVariable(name: "frame_phase", scope: !4666, file: !3, line: 302, type: !2948)
!4692 = !DILocation(line: 302, column: 35, scope: !4666)
!4693 = !DILocation(line: 304, column: 7, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 304, column: 7)
!4695 = !DILocation(line: 304, column: 13, scope: !4694)
!4696 = !DILocation(line: 304, column: 7, scope: !4666)
!4697 = !DILocation(line: 306, column: 52, scope: !4698)
!4698 = distinct !DILexicalBlock(scope: !4694, file: !3, line: 305, column: 5)
!4699 = !DILocation(line: 306, column: 19, scope: !4698)
!4700 = !DILocation(line: 306, column: 17, scope: !4698)
!4701 = !DILocation(line: 307, column: 17, scope: !4698)
!4702 = !DILocation(line: 308, column: 5, scope: !4698)
!4703 = !DILocation(line: 309, column: 12, scope: !4704)
!4704 = distinct !DILexicalBlock(scope: !4694, file: !3, line: 309, column: 12)
!4705 = !DILocation(line: 309, column: 18, scope: !4704)
!4706 = !DILocation(line: 309, column: 12, scope: !4694)
!4707 = !DILocation(line: 311, column: 19, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 310, column: 5)
!4709 = !DILocation(line: 311, column: 37, scope: !4708)
!4710 = !DILocation(line: 311, column: 17, scope: !4708)
!4711 = !DILocation(line: 312, column: 14, scope: !4708)
!4712 = !DILocation(line: 312, column: 12, scope: !4708)
!4713 = !DILocation(line: 313, column: 5, scope: !4708)
!4714 = !DILocation(line: 314, column: 12, scope: !4715)
!4715 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 314, column: 12)
!4716 = !DILocation(line: 314, column: 18, scope: !4715)
!4717 = !DILocation(line: 314, column: 12, scope: !4704)
!4718 = !DILocation(line: 315, column: 15, scope: !4715)
!4719 = !DILocation(line: 315, column: 5, scope: !4715)
!4720 = !DILocation(line: 317, column: 17, scope: !4715)
!4721 = !DILocation(line: 317, column: 23, scope: !4715)
!4722 = !DILocation(line: 317, column: 15, scope: !4715)
!4723 = !DILocation(line: 319, column: 23, scope: !4666)
!4724 = !DILocation(line: 319, column: 33, scope: !4666)
!4725 = !DILocation(line: 319, column: 21, scope: !4666)
!4726 = !DILocation(line: 322, column: 21, scope: !4727)
!4727 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 321, column: 7)
!4728 = !DILocation(line: 322, column: 18, scope: !4727)
!4729 = !DILocation(line: 325, column: 7, scope: !4730)
!4730 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 325, column: 7)
!4731 = !DILocation(line: 325, column: 25, scope: !4730)
!4732 = !DILocation(line: 325, column: 7, scope: !4666)
!4733 = !DILocation(line: 327, column: 25, scope: !4734)
!4734 = distinct !DILexicalBlock(scope: !4730, file: !3, line: 326, column: 5)
!4735 = !DILocation(line: 328, column: 19, scope: !4734)
!4736 = !DILocation(line: 328, column: 37, scope: !4734)
!4737 = !DILocation(line: 328, column: 17, scope: !4734)
!4738 = !DILocation(line: 329, column: 5, scope: !4734)
!4739 = !DILocation(line: 333, column: 17, scope: !4740)
!4740 = distinct !DILexicalBlock(scope: !4741, file: !3, line: 333, column: 11)
!4741 = distinct !DILexicalBlock(scope: !4742, file: !3, line: 332, column: 5)
!4742 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 331, column: 7)
!4743 = !DILocation(line: 333, column: 45, scope: !4740)
!4744 = !DILocation(line: 333, column: 43, scope: !4740)
!4745 = !DILocation(line: 333, column: 11, scope: !4741)
!4746 = !DILocation(line: 335, column: 22, scope: !4747)
!4747 = distinct !DILexicalBlock(scope: !4748, file: !3, line: 335, column: 15)
!4748 = distinct !DILexicalBlock(scope: !4740, file: !3, line: 334, column: 2)
!4749 = !DILocation(line: 335, column: 16, scope: !4747)
!4750 = !DILocation(line: 335, column: 15, scope: !4748)
!4751 = !DILocation(line: 336, column: 40, scope: !4747)
!4752 = !DILocation(line: 336, column: 38, scope: !4747)
!4753 = !DILocation(line: 336, column: 6, scope: !4747)
!4754 = !DILocation(line: 344, column: 8, scope: !4755)
!4755 = distinct !DILexicalBlock(scope: !4747, file: !3, line: 338, column: 6)
!4756 = !DILocation(line: 345, column: 19, scope: !4757)
!4757 = distinct !DILexicalBlock(scope: !4755, file: !3, line: 345, column: 12)
!4758 = !DILocation(line: 345, column: 13, scope: !4757)
!4759 = !DILocation(line: 345, column: 12, scope: !4755)
!4760 = !DILocation(line: 350, column: 5, scope: !4761)
!4761 = distinct !DILexicalBlock(scope: !4757, file: !3, line: 346, column: 3)
!4762 = !DILocation(line: 354, column: 31, scope: !4761)
!4763 = !DILocation(line: 354, column: 23, scope: !4761)
!4764 = !DILocation(line: 355, column: 17, scope: !4761)
!4765 = !DILocation(line: 355, column: 35, scope: !4761)
!4766 = !DILocation(line: 355, column: 15, scope: !4761)
!4767 = !DILocation(line: 356, column: 3, scope: !4761)
!4768 = !DILocation(line: 358, column: 2, scope: !4748)
!4769 = !DILocation(line: 361, column: 13, scope: !4770)
!4770 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 361, column: 7)
!4771 = !DILocation(line: 361, column: 38, scope: !4770)
!4772 = !DILocation(line: 361, column: 36, scope: !4770)
!4773 = !DILocation(line: 361, column: 7, scope: !4666)
!4774 = !DILocation(line: 362, column: 36, scope: !4770)
!4775 = !DILocation(line: 362, column: 34, scope: !4770)
!4776 = !DILocation(line: 362, column: 5, scope: !4770)
!4777 = !DILocation(line: 363, column: 13, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 363, column: 7)
!4779 = !DILocation(line: 363, column: 45, scope: !4778)
!4780 = !DILocation(line: 363, column: 43, scope: !4778)
!4781 = !DILocation(line: 363, column: 7, scope: !4666)
!4782 = !DILocation(line: 364, column: 43, scope: !4778)
!4783 = !DILocation(line: 364, column: 41, scope: !4778)
!4784 = !DILocation(line: 364, column: 5, scope: !4778)
!4785 = !DILocation(line: 368, column: 21, scope: !4666)
!4786 = !DILocation(line: 368, column: 46, scope: !4666)
!4787 = !DILocation(line: 368, column: 19, scope: !4666)
!4788 = !DILocation(line: 369, column: 39, scope: !4666)
!4789 = !DILocation(line: 369, column: 37, scope: !4666)
!4790 = !DILocation(line: 369, column: 13, scope: !4666)
!4791 = !DILocation(line: 370, column: 17, scope: !4666)
!4792 = !DILocation(line: 370, column: 29, scope: !4666)
!4793 = !DILocation(line: 370, column: 47, scope: !4666)
!4794 = !DILocation(line: 370, column: 45, scope: !4666)
!4795 = !DILocation(line: 370, column: 15, scope: !4666)
!4796 = !DILocation(line: 385, column: 7, scope: !4797)
!4797 = distinct !DILexicalBlock(scope: !4798, file: !3, line: 383, column: 11)
!4798 = distinct !DILexicalBlock(scope: !4799, file: !3, line: 378, column: 5)
!4799 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 375, column: 7)
!4800 = !DILocation(line: 387, column: 9, scope: !4797)
!4801 = !DILocation(line: 387, column: 7, scope: !4797)
!4802 = !DILocation(line: 385, column: 4, scope: !4797)
!4803 = !DILocation(line: 402, column: 7, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 402, column: 7)
!4805 = !DILocation(line: 402, column: 7, scope: !4666)
!4806 = !DILocation(line: 403, column: 27, scope: !4804)
!4807 = !DILocation(line: 405, column: 7, scope: !4804)
!4808 = !DILocation(line: 405, column: 22, scope: !4804)
!4809 = !DILocation(line: 405, column: 20, scope: !4804)
!4810 = !DILocation(line: 406, column: 7, scope: !4804)
!4811 = !DILocation(line: 404, column: 6, scope: !4804)
!4812 = !DILocation(line: 403, column: 12, scope: !4804)
!4813 = !DILocation(line: 403, column: 10, scope: !4804)
!4814 = !DILocation(line: 403, column: 5, scope: !4804)
!4815 = !DILocation(line: 408, column: 27, scope: !4804)
!4816 = !DILocation(line: 410, column: 7, scope: !4804)
!4817 = !DILocation(line: 410, column: 22, scope: !4804)
!4818 = !DILocation(line: 410, column: 20, scope: !4804)
!4819 = !DILocation(line: 409, column: 6, scope: !4804)
!4820 = !DILocation(line: 408, column: 12, scope: !4804)
!4821 = !DILocation(line: 408, column: 10, scope: !4804)
!4822 = !DILocation(line: 416, column: 20, scope: !4666)
!4823 = !DILocation(line: 416, column: 26, scope: !4666)
!4824 = !DILocation(line: 416, column: 7, scope: !4666)
!4825 = !DILocation(line: 416, column: 5, scope: !4666)
!4826 = !DILocation(line: 417, column: 18, scope: !4666)
!4827 = !DILocation(line: 417, column: 21, scope: !4666)
!4828 = !DILocation(line: 417, column: 3, scope: !4666)
!4829 = !DILocation(line: 418, column: 3, scope: !4666)
!4830 = !DILocation(line: 418, column: 20, scope: !4666)
!4831 = !DILocation(line: 421, column: 7, scope: !4666)
!4832 = !DILocation(line: 421, column: 5, scope: !4666)
!4833 = !DILocation(line: 423, column: 30, scope: !4834)
!4834 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 423, column: 7)
!4835 = !DILocation(line: 423, column: 44, scope: !4834)
!4836 = !DILocation(line: 423, column: 7, scope: !4834)
!4837 = !DILocation(line: 423, column: 7, scope: !4666)
!4838 = !DILocation(line: 424, column: 18, scope: !4834)
!4839 = !DILocation(line: 424, column: 5, scope: !4834)
!4840 = !DILocation(line: 426, column: 10, scope: !4666)
!4841 = !DILocation(line: 426, column: 3, scope: !4666)
!4842 = distinct !DISubprogram(name: "get_stack_local_alignment", scope: !3, file: !3, line: 264, type: !4843, scopeLine: 265, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4843 = !DISubroutineType(types: !4844)
!4844 = !{!7, !3045, !13}
!4845 = !DILocalVariable(name: "type", arg: 1, scope: !4842, file: !3, line: 264, type: !3045)
!4846 = !DILocation(line: 264, column: 33, scope: !4842)
!4847 = !DILocalVariable(name: "mode", arg: 2, scope: !4842, file: !3, line: 264, type: !13)
!4848 = !DILocation(line: 264, column: 57, scope: !4842)
!4849 = !DILocalVariable(name: "alignment", scope: !4842, file: !3, line: 266, type: !7)
!4850 = !DILocation(line: 266, column: 16, scope: !4842)
!4851 = !DILocation(line: 268, column: 7, scope: !4852)
!4852 = distinct !DILexicalBlock(scope: !4842, file: !3, line: 268, column: 7)
!4853 = !DILocation(line: 268, column: 12, scope: !4852)
!4854 = !DILocation(line: 268, column: 7, scope: !4842)
!4855 = !DILocation(line: 269, column: 17, scope: !4852)
!4856 = !DILocation(line: 269, column: 15, scope: !4852)
!4857 = !DILocation(line: 269, column: 5, scope: !4852)
!4858 = !DILocation(line: 271, column: 17, scope: !4852)
!4859 = !DILocation(line: 271, column: 15, scope: !4852)
!4860 = !DILocation(line: 275, column: 9, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4842, file: !3, line: 275, column: 7)
!4862 = !DILocation(line: 275, column: 7, scope: !4842)
!4863 = !DILocation(line: 276, column: 29, scope: !4861)
!4864 = !DILocation(line: 276, column: 44, scope: !4861)
!4865 = !DILocation(line: 276, column: 12, scope: !4861)
!4866 = !DILocation(line: 276, column: 10, scope: !4861)
!4867 = !DILocation(line: 276, column: 5, scope: !4861)
!4868 = !DILocation(line: 278, column: 10, scope: !4842)
!4869 = !DILocation(line: 278, column: 3, scope: !4842)
!4870 = distinct !DISubprogram(name: "assign_stack_local", scope: !3, file: !3, line: 432, type: !4871, scopeLine: 433, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4871 = !DISubroutineType(types: !4872)
!4872 = !{!2924, !13, !3014, !2948}
!4873 = !DILocalVariable(name: "mode", arg: 1, scope: !4870, file: !3, line: 432, type: !13)
!4874 = !DILocation(line: 432, column: 39, scope: !4870)
!4875 = !DILocalVariable(name: "size", arg: 2, scope: !4870, file: !3, line: 432, type: !3014)
!4876 = !DILocation(line: 432, column: 59, scope: !4870)
!4877 = !DILocalVariable(name: "align", arg: 3, scope: !4870, file: !3, line: 432, type: !2948)
!4878 = !DILocation(line: 432, column: 69, scope: !4870)
!4879 = !DILocation(line: 434, column: 32, scope: !4870)
!4880 = !DILocation(line: 434, column: 38, scope: !4870)
!4881 = !DILocation(line: 434, column: 44, scope: !4870)
!4882 = !DILocation(line: 434, column: 10, scope: !4870)
!4883 = !DILocation(line: 434, column: 3, scope: !4870)
!4884 = distinct !DISubprogram(name: "assign_stack_temp_for_type", scope: !3, file: !3, line: 694, type: !4885, scopeLine: 696, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!4885 = !DISubroutineType(types: !4886)
!4886 = !{!2924, !13, !3014, !2948, !3045}
!4887 = !DILocalVariable(name: "mode", arg: 1, scope: !4884, file: !3, line: 694, type: !13)
!4888 = !DILocation(line: 694, column: 47, scope: !4884)
!4889 = !DILocalVariable(name: "size", arg: 2, scope: !4884, file: !3, line: 694, type: !3014)
!4890 = !DILocation(line: 694, column: 67, scope: !4884)
!4891 = !DILocalVariable(name: "keep", arg: 3, scope: !4884, file: !3, line: 695, type: !2948)
!4892 = !DILocation(line: 695, column: 12, scope: !4884)
!4893 = !DILocalVariable(name: "type", arg: 4, scope: !4884, file: !3, line: 695, type: !3045)
!4894 = !DILocation(line: 695, column: 23, scope: !4884)
!4895 = !DILocalVariable(name: "align", scope: !4884, file: !3, line: 697, type: !7)
!4896 = !DILocation(line: 697, column: 16, scope: !4884)
!4897 = !DILocalVariable(name: "p", scope: !4884, file: !3, line: 698, type: !2918)
!4898 = !DILocation(line: 698, column: 21, scope: !4884)
!4899 = !DILocalVariable(name: "best_p", scope: !4884, file: !3, line: 698, type: !2918)
!4900 = !DILocation(line: 698, column: 25, scope: !4884)
!4901 = !DILocalVariable(name: "selected", scope: !4884, file: !3, line: 698, type: !2918)
!4902 = !DILocation(line: 698, column: 38, scope: !4884)
!4903 = !DILocalVariable(name: "pp", scope: !4884, file: !3, line: 698, type: !4904)
!4904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2918, size: 64)
!4905 = !DILocation(line: 698, column: 57, scope: !4884)
!4906 = !DILocalVariable(name: "slot", scope: !4884, file: !3, line: 699, type: !2924)
!4907 = !DILocation(line: 699, column: 7, scope: !4884)
!4908 = !DILocation(line: 703, column: 3, scope: !4884)
!4909 = !DILocation(line: 706, column: 3, scope: !4884)
!4910 = !DILocation(line: 708, column: 38, scope: !4884)
!4911 = !DILocation(line: 708, column: 44, scope: !4884)
!4912 = !DILocation(line: 708, column: 11, scope: !4884)
!4913 = !DILocation(line: 708, column: 9, scope: !4884)
!4914 = !DILocation(line: 717, column: 8, scope: !4915)
!4915 = distinct !DILexicalBlock(scope: !4884, file: !3, line: 717, column: 7)
!4916 = !DILocation(line: 717, column: 7, scope: !4884)
!4917 = !DILocation(line: 719, column: 16, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4919, file: !3, line: 719, column: 7)
!4919 = distinct !DILexicalBlock(scope: !4915, file: !3, line: 718, column: 5)
!4920 = !DILocation(line: 719, column: 14, scope: !4918)
!4921 = !DILocation(line: 719, column: 12, scope: !4918)
!4922 = !DILocation(line: 719, column: 34, scope: !4923)
!4923 = distinct !DILexicalBlock(scope: !4918, file: !3, line: 719, column: 7)
!4924 = !DILocation(line: 719, column: 7, scope: !4918)
!4925 = !DILocation(line: 721, column: 8, scope: !4926)
!4926 = distinct !DILexicalBlock(scope: !4927, file: !3, line: 721, column: 8)
!4927 = distinct !DILexicalBlock(scope: !4923, file: !3, line: 720, column: 2)
!4928 = !DILocation(line: 721, column: 11, scope: !4926)
!4929 = !DILocation(line: 721, column: 20, scope: !4926)
!4930 = !DILocation(line: 721, column: 17, scope: !4926)
!4931 = !DILocation(line: 721, column: 26, scope: !4926)
!4932 = !DILocation(line: 721, column: 29, scope: !4926)
!4933 = !DILocation(line: 721, column: 32, scope: !4926)
!4934 = !DILocation(line: 721, column: 40, scope: !4926)
!4935 = !DILocation(line: 721, column: 37, scope: !4926)
!4936 = !DILocation(line: 722, column: 8, scope: !4926)
!4937 = !DILocation(line: 722, column: 11, scope: !4926)
!4938 = !DILocation(line: 722, column: 33, scope: !4926)
!4939 = !DILocation(line: 722, column: 30, scope: !4926)
!4940 = !DILocation(line: 723, column: 8, scope: !4926)
!4941 = !DILocation(line: 723, column: 36, scope: !4926)
!4942 = !DILocation(line: 723, column: 39, scope: !4926)
!4943 = !DILocation(line: 723, column: 45, scope: !4926)
!4944 = !DILocation(line: 723, column: 11, scope: !4926)
!4945 = !DILocation(line: 724, column: 8, scope: !4926)
!4946 = !DILocation(line: 724, column: 12, scope: !4926)
!4947 = !DILocation(line: 724, column: 19, scope: !4926)
!4948 = !DILocation(line: 724, column: 24, scope: !4926)
!4949 = !DILocation(line: 724, column: 27, scope: !4926)
!4950 = !DILocation(line: 724, column: 35, scope: !4926)
!4951 = !DILocation(line: 724, column: 42, scope: !4926)
!4952 = !DILocation(line: 724, column: 45, scope: !4926)
!4953 = !DILocation(line: 724, column: 40, scope: !4926)
!4954 = !DILocation(line: 725, column: 5, scope: !4926)
!4955 = !DILocation(line: 725, column: 9, scope: !4926)
!4956 = !DILocation(line: 725, column: 17, scope: !4926)
!4957 = !DILocation(line: 725, column: 25, scope: !4926)
!4958 = !DILocation(line: 725, column: 28, scope: !4926)
!4959 = !DILocation(line: 725, column: 22, scope: !4926)
!4960 = !DILocation(line: 725, column: 33, scope: !4926)
!4961 = !DILocation(line: 725, column: 36, scope: !4926)
!4962 = !DILocation(line: 725, column: 44, scope: !4926)
!4963 = !DILocation(line: 725, column: 52, scope: !4926)
!4964 = !DILocation(line: 725, column: 55, scope: !4926)
!4965 = !DILocation(line: 725, column: 50, scope: !4926)
!4966 = !DILocation(line: 721, column: 8, scope: !4927)
!4967 = !DILocation(line: 727, column: 12, scope: !4968)
!4968 = distinct !DILexicalBlock(scope: !4969, file: !3, line: 727, column: 12)
!4969 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 726, column: 6)
!4970 = !DILocation(line: 727, column: 15, scope: !4968)
!4971 = !DILocation(line: 727, column: 24, scope: !4968)
!4972 = !DILocation(line: 727, column: 21, scope: !4968)
!4973 = !DILocation(line: 727, column: 30, scope: !4968)
!4974 = !DILocation(line: 727, column: 33, scope: !4968)
!4975 = !DILocation(line: 727, column: 36, scope: !4968)
!4976 = !DILocation(line: 727, column: 44, scope: !4968)
!4977 = !DILocation(line: 727, column: 41, scope: !4968)
!4978 = !DILocation(line: 727, column: 12, scope: !4969)
!4979 = !DILocation(line: 729, column: 16, scope: !4980)
!4980 = distinct !DILexicalBlock(scope: !4968, file: !3, line: 728, column: 3)
!4981 = !DILocation(line: 729, column: 14, scope: !4980)
!4982 = !DILocation(line: 730, column: 25, scope: !4980)
!4983 = !DILocation(line: 730, column: 5, scope: !4980)
!4984 = !DILocation(line: 731, column: 12, scope: !4980)
!4985 = !DILocation(line: 732, column: 5, scope: !4980)
!4986 = !DILocation(line: 734, column: 17, scope: !4969)
!4987 = !DILocation(line: 734, column: 15, scope: !4969)
!4988 = !DILocation(line: 735, column: 6, scope: !4969)
!4989 = !DILocation(line: 736, column: 2, scope: !4927)
!4990 = !DILocation(line: 719, column: 41, scope: !4923)
!4991 = !DILocation(line: 719, column: 44, scope: !4923)
!4992 = !DILocation(line: 719, column: 39, scope: !4923)
!4993 = !DILocation(line: 719, column: 7, scope: !4923)
!4994 = distinct !{!4994, !4924, !4995}
!4995 = !DILocation(line: 736, column: 2, scope: !4918)
!4996 = !DILocation(line: 737, column: 5, scope: !4919)
!4997 = !DILocation(line: 740, column: 7, scope: !4998)
!4998 = distinct !DILexicalBlock(scope: !4884, file: !3, line: 740, column: 7)
!4999 = !DILocation(line: 740, column: 7, scope: !4884)
!5000 = !DILocation(line: 742, column: 18, scope: !5001)
!5001 = distinct !DILexicalBlock(scope: !4998, file: !3, line: 741, column: 5)
!5002 = !DILocation(line: 742, column: 16, scope: !5001)
!5003 = !DILocation(line: 743, column: 27, scope: !5001)
!5004 = !DILocation(line: 743, column: 7, scope: !5001)
!5005 = !DILocation(line: 748, column: 11, scope: !5006)
!5006 = distinct !DILexicalBlock(scope: !5001, file: !3, line: 748, column: 11)
!5007 = !DILocation(line: 748, column: 35, scope: !5006)
!5008 = !DILocation(line: 748, column: 11, scope: !5001)
!5009 = !DILocalVariable(name: "alignment", scope: !5010, file: !3, line: 750, type: !2948)
!5010 = distinct !DILexicalBlock(scope: !5006, file: !3, line: 749, column: 2)
!5011 = !DILocation(line: 750, column: 8, scope: !5010)
!5012 = !DILocation(line: 750, column: 20, scope: !5010)
!5013 = !DILocation(line: 750, column: 28, scope: !5010)
!5014 = !DILocation(line: 750, column: 34, scope: !5010)
!5015 = !DILocalVariable(name: "rounded_size", scope: !5010, file: !3, line: 751, type: !3014)
!5016 = !DILocation(line: 751, column: 18, scope: !5010)
!5017 = !DILocation(line: 751, column: 33, scope: !5010)
!5018 = !DILocation(line: 753, column: 8, scope: !5019)
!5019 = distinct !DILexicalBlock(scope: !5010, file: !3, line: 753, column: 8)
!5020 = !DILocation(line: 753, column: 16, scope: !5019)
!5021 = !DILocation(line: 753, column: 23, scope: !5019)
!5022 = !DILocation(line: 753, column: 21, scope: !5019)
!5023 = !DILocation(line: 753, column: 39, scope: !5019)
!5024 = !DILocation(line: 753, column: 36, scope: !5019)
!5025 = !DILocation(line: 753, column: 8, scope: !5010)
!5026 = !DILocation(line: 755, column: 12, scope: !5027)
!5027 = distinct !DILexicalBlock(scope: !5019, file: !3, line: 754, column: 6)
!5028 = !DILocation(line: 755, column: 10, scope: !5027)
!5029 = !DILocation(line: 756, column: 20, scope: !5027)
!5030 = !DILocation(line: 756, column: 23, scope: !5027)
!5031 = !DILocation(line: 756, column: 34, scope: !5027)
!5032 = !DILocation(line: 756, column: 8, scope: !5027)
!5033 = !DILocation(line: 756, column: 11, scope: !5027)
!5034 = !DILocation(line: 756, column: 18, scope: !5027)
!5035 = !DILocation(line: 757, column: 18, scope: !5027)
!5036 = !DILocation(line: 757, column: 26, scope: !5027)
!5037 = !DILocation(line: 757, column: 33, scope: !5027)
!5038 = !DILocation(line: 757, column: 31, scope: !5027)
!5039 = !DILocation(line: 757, column: 8, scope: !5027)
!5040 = !DILocation(line: 757, column: 11, scope: !5027)
!5041 = !DILocation(line: 757, column: 16, scope: !5027)
!5042 = !DILocation(line: 758, column: 25, scope: !5027)
!5043 = !DILocation(line: 758, column: 33, scope: !5027)
!5044 = !DILocation(line: 758, column: 47, scope: !5027)
!5045 = !DILocation(line: 758, column: 45, scope: !5027)
!5046 = !DILocation(line: 758, column: 8, scope: !5027)
!5047 = !DILocation(line: 758, column: 11, scope: !5027)
!5048 = !DILocation(line: 758, column: 23, scope: !5027)
!5049 = !DILocation(line: 759, column: 23, scope: !5027)
!5050 = !DILocation(line: 759, column: 31, scope: !5027)
!5051 = !DILocation(line: 759, column: 43, scope: !5027)
!5052 = !DILocation(line: 759, column: 41, scope: !5027)
!5053 = !DILocation(line: 759, column: 8, scope: !5027)
!5054 = !DILocation(line: 759, column: 11, scope: !5027)
!5055 = !DILocation(line: 759, column: 21, scope: !5027)
!5056 = !DILocation(line: 760, column: 18, scope: !5027)
!5057 = !DILocation(line: 760, column: 8, scope: !5027)
!5058 = !DILocation(line: 760, column: 11, scope: !5027)
!5059 = !DILocation(line: 760, column: 16, scope: !5027)
!5060 = !DILocation(line: 761, column: 19, scope: !5027)
!5061 = !DILocation(line: 761, column: 27, scope: !5027)
!5062 = !DILocation(line: 761, column: 8, scope: !5027)
!5063 = !DILocation(line: 761, column: 11, scope: !5027)
!5064 = !DILocation(line: 761, column: 17, scope: !5027)
!5065 = !DILocation(line: 762, column: 18, scope: !5027)
!5066 = !DILocation(line: 762, column: 26, scope: !5027)
!5067 = !DILocation(line: 762, column: 8, scope: !5027)
!5068 = !DILocation(line: 762, column: 11, scope: !5027)
!5069 = !DILocation(line: 762, column: 16, scope: !5027)
!5070 = !DILocation(line: 763, column: 29, scope: !5027)
!5071 = !DILocation(line: 763, column: 8, scope: !5027)
!5072 = !DILocation(line: 765, column: 26, scope: !5027)
!5073 = !DILocation(line: 765, column: 24, scope: !5027)
!5074 = !DILocation(line: 768, column: 23, scope: !5027)
!5075 = !DILocation(line: 768, column: 8, scope: !5027)
!5076 = !DILocation(line: 768, column: 16, scope: !5027)
!5077 = !DILocation(line: 768, column: 21, scope: !5027)
!5078 = !DILocation(line: 769, column: 28, scope: !5027)
!5079 = !DILocation(line: 769, column: 8, scope: !5027)
!5080 = !DILocation(line: 769, column: 16, scope: !5027)
!5081 = !DILocation(line: 769, column: 26, scope: !5027)
!5082 = !DILocation(line: 770, column: 6, scope: !5027)
!5083 = !DILocation(line: 771, column: 2, scope: !5010)
!5084 = !DILocation(line: 772, column: 5, scope: !5001)
!5085 = !DILocation(line: 775, column: 7, scope: !5086)
!5086 = distinct !DILexicalBlock(scope: !4884, file: !3, line: 775, column: 7)
!5087 = !DILocation(line: 775, column: 16, scope: !5086)
!5088 = !DILocation(line: 775, column: 7, scope: !4884)
!5089 = !DILocalVariable(name: "frame_offset_old", scope: !5090, file: !3, line: 777, type: !3014)
!5090 = distinct !DILexicalBlock(scope: !5086, file: !3, line: 776, column: 5)
!5091 = !DILocation(line: 777, column: 21, scope: !5090)
!5092 = !DILocation(line: 777, column: 40, scope: !5090)
!5093 = !DILocation(line: 779, column: 11, scope: !5090)
!5094 = !DILocation(line: 779, column: 9, scope: !5090)
!5095 = !DILocation(line: 788, column: 7, scope: !5090)
!5096 = !DILocation(line: 789, column: 37, scope: !5090)
!5097 = !DILocation(line: 790, column: 10, scope: !5090)
!5098 = !DILocation(line: 790, column: 15, scope: !5090)
!5099 = !DILocation(line: 791, column: 12, scope: !5090)
!5100 = !DILocation(line: 792, column: 12, scope: !5090)
!5101 = !DILocation(line: 793, column: 9, scope: !5090)
!5102 = !DILocation(line: 789, column: 17, scope: !5090)
!5103 = !DILocation(line: 789, column: 7, scope: !5090)
!5104 = !DILocation(line: 789, column: 10, scope: !5090)
!5105 = !DILocation(line: 789, column: 15, scope: !5090)
!5106 = !DILocation(line: 795, column: 18, scope: !5090)
!5107 = !DILocation(line: 795, column: 7, scope: !5090)
!5108 = !DILocation(line: 795, column: 10, scope: !5090)
!5109 = !DILocation(line: 795, column: 16, scope: !5090)
!5110 = !DILocation(line: 805, column: 12, scope: !5111)
!5111 = distinct !DILexicalBlock(scope: !5090, file: !3, line: 804, column: 11)
!5112 = !DILocation(line: 805, column: 31, scope: !5111)
!5113 = !DILocation(line: 805, column: 29, scope: !5111)
!5114 = !DILocation(line: 805, column: 2, scope: !5111)
!5115 = !DILocation(line: 805, column: 5, scope: !5111)
!5116 = !DILocation(line: 805, column: 10, scope: !5111)
!5117 = !DILocation(line: 812, column: 21, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5119, file: !3, line: 811, column: 2)
!5119 = distinct !DILexicalBlock(scope: !5090, file: !3, line: 810, column: 11)
!5120 = !DILocation(line: 812, column: 4, scope: !5118)
!5121 = !DILocation(line: 812, column: 7, scope: !5118)
!5122 = !DILocation(line: 812, column: 19, scope: !5118)
!5123 = !DILocation(line: 813, column: 19, scope: !5118)
!5124 = !DILocation(line: 813, column: 38, scope: !5118)
!5125 = !DILocation(line: 813, column: 36, scope: !5118)
!5126 = !DILocation(line: 813, column: 4, scope: !5118)
!5127 = !DILocation(line: 813, column: 7, scope: !5118)
!5128 = !DILocation(line: 813, column: 17, scope: !5118)
!5129 = !DILocation(line: 821, column: 18, scope: !5090)
!5130 = !DILocation(line: 821, column: 16, scope: !5090)
!5131 = !DILocation(line: 822, column: 5, scope: !5090)
!5132 = !DILocation(line: 824, column: 7, scope: !4884)
!5133 = !DILocation(line: 824, column: 5, scope: !4884)
!5134 = !DILocation(line: 825, column: 3, scope: !4884)
!5135 = !DILocation(line: 825, column: 6, scope: !4884)
!5136 = !DILocation(line: 825, column: 13, scope: !4884)
!5137 = !DILocation(line: 826, column: 3, scope: !4884)
!5138 = !DILocation(line: 826, column: 6, scope: !4884)
!5139 = !DILocation(line: 826, column: 17, scope: !4884)
!5140 = !DILocation(line: 827, column: 13, scope: !4884)
!5141 = !DILocation(line: 827, column: 3, scope: !4884)
!5142 = !DILocation(line: 827, column: 6, scope: !4884)
!5143 = !DILocation(line: 827, column: 11, scope: !4884)
!5144 = !DILocation(line: 828, column: 14, scope: !4884)
!5145 = !DILocation(line: 828, column: 3, scope: !4884)
!5146 = !DILocation(line: 828, column: 6, scope: !4884)
!5147 = !DILocation(line: 828, column: 12, scope: !4884)
!5148 = !DILocation(line: 829, column: 13, scope: !4884)
!5149 = !DILocation(line: 829, column: 3, scope: !4884)
!5150 = !DILocation(line: 829, column: 6, scope: !4884)
!5151 = !DILocation(line: 829, column: 11, scope: !4884)
!5152 = !DILocation(line: 831, column: 29, scope: !4884)
!5153 = !DILocation(line: 831, column: 32, scope: !4884)
!5154 = !DILocation(line: 831, column: 8, scope: !4884)
!5155 = !DILocation(line: 831, column: 6, scope: !4884)
!5156 = !DILocation(line: 832, column: 24, scope: !4884)
!5157 = !DILocation(line: 832, column: 27, scope: !4884)
!5158 = !DILocation(line: 832, column: 3, scope: !4884)
!5159 = !DILocation(line: 833, column: 29, scope: !4884)
!5160 = !DILocation(line: 833, column: 48, scope: !4884)
!5161 = !DILocation(line: 833, column: 3, scope: !4884)
!5162 = !DILocation(line: 836, column: 23, scope: !4884)
!5163 = !DILocation(line: 836, column: 29, scope: !4884)
!5164 = !DILocation(line: 836, column: 10, scope: !4884)
!5165 = !DILocation(line: 836, column: 8, scope: !4884)
!5166 = !DILocation(line: 837, column: 21, scope: !4884)
!5167 = !DILocation(line: 837, column: 19, scope: !4884)
!5168 = !DILocation(line: 842, column: 22, scope: !4884)
!5169 = !DILocation(line: 842, column: 28, scope: !4884)
!5170 = !DILocation(line: 842, column: 50, scope: !4884)
!5171 = !DILocation(line: 842, column: 35, scope: !4884)
!5172 = !DILocation(line: 842, column: 3, scope: !4884)
!5173 = !DILocation(line: 843, column: 18, scope: !4884)
!5174 = !DILocation(line: 843, column: 24, scope: !4884)
!5175 = !DILocation(line: 843, column: 3, scope: !4884)
!5176 = !DILocation(line: 846, column: 7, scope: !5177)
!5177 = distinct !DILexicalBlock(scope: !4884, file: !3, line: 846, column: 7)
!5178 = !DILocation(line: 846, column: 12, scope: !5177)
!5179 = !DILocation(line: 846, column: 7, scope: !4884)
!5180 = !DILocation(line: 848, column: 31, scope: !5181)
!5181 = distinct !DILexicalBlock(scope: !5177, file: !3, line: 847, column: 5)
!5182 = !DILocation(line: 848, column: 7, scope: !5181)
!5183 = !DILocation(line: 848, column: 29, scope: !5181)
!5184 = !DILocation(line: 849, column: 7, scope: !5181)
!5185 = !DILocation(line: 849, column: 7, scope: !5186)
!5186 = distinct !DILexicalBlock(scope: !5187, file: !3, line: 849, column: 7)
!5187 = distinct !DILexicalBlock(scope: !5181, file: !3, line: 849, column: 7)
!5188 = !DILocation(line: 849, column: 7, scope: !5187)
!5189 = !DILocation(line: 849, column: 7, scope: !5190)
!5190 = distinct !DILexicalBlock(scope: !5186, file: !3, line: 849, column: 7)
!5191 = !DILocation(line: 849, column: 7, scope: !5192)
!5192 = distinct !DILexicalBlock(scope: !5186, file: !3, line: 849, column: 7)
!5193 = !DILocation(line: 851, column: 5, scope: !5181)
!5194 = !DILocation(line: 852, column: 3, scope: !4884)
!5195 = !DILocation(line: 852, column: 23, scope: !4884)
!5196 = !DILocation(line: 854, column: 10, scope: !4884)
!5197 = !DILocation(line: 854, column: 3, scope: !4884)
!5198 = distinct !DISubprogram(name: "cut_slot_from_list", scope: !3, file: !3, line: 502, type: !5199, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5199 = !DISubroutineType(types: !5200)
!5200 = !{null, !2918, !4904}
!5201 = !DILocalVariable(name: "temp", arg: 1, scope: !5198, file: !3, line: 502, type: !2918)
!5202 = !DILocation(line: 502, column: 39, scope: !5198)
!5203 = !DILocalVariable(name: "list", arg: 2, scope: !5198, file: !3, line: 502, type: !4904)
!5204 = !DILocation(line: 502, column: 64, scope: !5198)
!5205 = !DILocation(line: 504, column: 7, scope: !5206)
!5206 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 504, column: 7)
!5207 = !DILocation(line: 504, column: 13, scope: !5206)
!5208 = !DILocation(line: 504, column: 7, scope: !5198)
!5209 = !DILocation(line: 505, column: 24, scope: !5206)
!5210 = !DILocation(line: 505, column: 30, scope: !5206)
!5211 = !DILocation(line: 505, column: 5, scope: !5206)
!5212 = !DILocation(line: 505, column: 11, scope: !5206)
!5213 = !DILocation(line: 505, column: 17, scope: !5206)
!5214 = !DILocation(line: 505, column: 22, scope: !5206)
!5215 = !DILocation(line: 506, column: 7, scope: !5216)
!5216 = distinct !DILexicalBlock(scope: !5198, file: !3, line: 506, column: 7)
!5217 = !DILocation(line: 506, column: 13, scope: !5216)
!5218 = !DILocation(line: 506, column: 7, scope: !5198)
!5219 = !DILocation(line: 507, column: 24, scope: !5216)
!5220 = !DILocation(line: 507, column: 30, scope: !5216)
!5221 = !DILocation(line: 507, column: 5, scope: !5216)
!5222 = !DILocation(line: 507, column: 11, scope: !5216)
!5223 = !DILocation(line: 507, column: 17, scope: !5216)
!5224 = !DILocation(line: 507, column: 22, scope: !5216)
!5225 = !DILocation(line: 509, column: 13, scope: !5216)
!5226 = !DILocation(line: 509, column: 19, scope: !5216)
!5227 = !DILocation(line: 509, column: 6, scope: !5216)
!5228 = !DILocation(line: 509, column: 11, scope: !5216)
!5229 = !DILocation(line: 511, column: 16, scope: !5198)
!5230 = !DILocation(line: 511, column: 22, scope: !5198)
!5231 = !DILocation(line: 511, column: 27, scope: !5198)
!5232 = !DILocation(line: 511, column: 3, scope: !5198)
!5233 = !DILocation(line: 511, column: 9, scope: !5198)
!5234 = !DILocation(line: 511, column: 14, scope: !5198)
!5235 = !DILocation(line: 512, column: 1, scope: !5198)
!5236 = distinct !DISubprogram(name: "insert_slot_to_list", scope: !3, file: !3, line: 517, type: !5199, scopeLine: 518, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5237 = !DILocalVariable(name: "temp", arg: 1, scope: !5236, file: !3, line: 517, type: !2918)
!5238 = !DILocation(line: 517, column: 40, scope: !5236)
!5239 = !DILocalVariable(name: "list", arg: 2, scope: !5236, file: !3, line: 517, type: !4904)
!5240 = !DILocation(line: 517, column: 65, scope: !5236)
!5241 = !DILocation(line: 519, column: 17, scope: !5236)
!5242 = !DILocation(line: 519, column: 16, scope: !5236)
!5243 = !DILocation(line: 519, column: 3, scope: !5236)
!5244 = !DILocation(line: 519, column: 9, scope: !5236)
!5245 = !DILocation(line: 519, column: 14, scope: !5236)
!5246 = !DILocation(line: 520, column: 8, scope: !5247)
!5247 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 520, column: 7)
!5248 = !DILocation(line: 520, column: 7, scope: !5247)
!5249 = !DILocation(line: 520, column: 7, scope: !5236)
!5250 = !DILocation(line: 521, column: 21, scope: !5247)
!5251 = !DILocation(line: 521, column: 7, scope: !5247)
!5252 = !DILocation(line: 521, column: 6, scope: !5247)
!5253 = !DILocation(line: 521, column: 14, scope: !5247)
!5254 = !DILocation(line: 521, column: 19, scope: !5247)
!5255 = !DILocation(line: 521, column: 5, scope: !5247)
!5256 = !DILocation(line: 522, column: 3, scope: !5236)
!5257 = !DILocation(line: 522, column: 9, scope: !5236)
!5258 = !DILocation(line: 522, column: 14, scope: !5236)
!5259 = !DILocation(line: 523, column: 11, scope: !5236)
!5260 = !DILocation(line: 523, column: 4, scope: !5236)
!5261 = !DILocation(line: 523, column: 9, scope: !5236)
!5262 = !DILocation(line: 524, column: 1, scope: !5236)
!5263 = distinct !DISubprogram(name: "temp_slots_at_level", scope: !3, file: !3, line: 529, type: !5264, scopeLine: 530, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5264 = !DISubroutineType(types: !5265)
!5265 = !{!4904, !2948}
!5266 = !DILocalVariable(name: "level", arg: 1, scope: !5263, file: !3, line: 529, type: !2948)
!5267 = !DILocation(line: 529, column: 26, scope: !5263)
!5268 = !DILocation(line: 531, column: 7, scope: !5269)
!5269 = distinct !DILexicalBlock(scope: !5263, file: !3, line: 531, column: 7)
!5270 = !DILocation(line: 531, column: 22, scope: !5269)
!5271 = !DILocation(line: 531, column: 13, scope: !5269)
!5272 = !DILocation(line: 531, column: 7, scope: !5263)
!5273 = !DILocation(line: 532, column: 5, scope: !5269)
!5274 = !DILocation(line: 534, column: 12, scope: !5263)
!5275 = !DILocation(line: 534, column: 55, scope: !5263)
!5276 = !DILocation(line: 534, column: 3, scope: !5263)
!5277 = distinct !DISubprogram(name: "insert_temp_slot_address", scope: !3, file: !3, line: 600, type: !5278, scopeLine: 601, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5278 = !DISubroutineType(types: !5279)
!5279 = !{null, !2924, !2918}
!5280 = !DILocalVariable(name: "address", arg: 1, scope: !5277, file: !3, line: 600, type: !2924)
!5281 = !DILocation(line: 600, column: 31, scope: !5277)
!5282 = !DILocalVariable(name: "temp_slot", arg: 2, scope: !5277, file: !3, line: 600, type: !2918)
!5283 = !DILocation(line: 600, column: 58, scope: !5277)
!5284 = !DILocalVariable(name: "slot", scope: !5277, file: !3, line: 602, type: !3398)
!5285 = !DILocation(line: 602, column: 10, scope: !5277)
!5286 = !DILocalVariable(name: "t", scope: !5277, file: !3, line: 603, type: !4305)
!5287 = !DILocation(line: 603, column: 35, scope: !5277)
!5288 = !DILocation(line: 603, column: 39, scope: !5277)
!5289 = !DILocation(line: 604, column: 16, scope: !5277)
!5290 = !DILocation(line: 604, column: 3, scope: !5277)
!5291 = !DILocation(line: 604, column: 6, scope: !5277)
!5292 = !DILocation(line: 604, column: 14, scope: !5277)
!5293 = !DILocation(line: 605, column: 18, scope: !5277)
!5294 = !DILocation(line: 605, column: 3, scope: !5277)
!5295 = !DILocation(line: 605, column: 6, scope: !5277)
!5296 = !DILocation(line: 605, column: 16, scope: !5277)
!5297 = !DILocation(line: 606, column: 45, scope: !5277)
!5298 = !DILocation(line: 606, column: 13, scope: !5277)
!5299 = !DILocation(line: 606, column: 3, scope: !5277)
!5300 = !DILocation(line: 606, column: 6, scope: !5277)
!5301 = !DILocation(line: 606, column: 11, scope: !5277)
!5302 = !DILocation(line: 607, column: 36, scope: !5277)
!5303 = !DILocation(line: 607, column: 61, scope: !5277)
!5304 = !DILocation(line: 607, column: 64, scope: !5277)
!5305 = !DILocation(line: 607, column: 67, scope: !5277)
!5306 = !DILocation(line: 607, column: 10, scope: !5277)
!5307 = !DILocation(line: 607, column: 8, scope: !5277)
!5308 = !DILocation(line: 608, column: 11, scope: !5277)
!5309 = !DILocation(line: 608, column: 4, scope: !5277)
!5310 = !DILocation(line: 608, column: 9, scope: !5277)
!5311 = !DILocation(line: 609, column: 1, scope: !5277)
!5312 = distinct !DISubprogram(name: "assign_stack_temp", scope: !3, file: !3, line: 861, type: !4871, scopeLine: 862, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5313 = !DILocalVariable(name: "mode", arg: 1, scope: !5312, file: !3, line: 861, type: !13)
!5314 = !DILocation(line: 861, column: 38, scope: !5312)
!5315 = !DILocalVariable(name: "size", arg: 2, scope: !5312, file: !3, line: 861, type: !3014)
!5316 = !DILocation(line: 861, column: 58, scope: !5312)
!5317 = !DILocalVariable(name: "keep", arg: 3, scope: !5312, file: !3, line: 861, type: !2948)
!5318 = !DILocation(line: 861, column: 68, scope: !5312)
!5319 = !DILocation(line: 863, column: 38, scope: !5312)
!5320 = !DILocation(line: 863, column: 44, scope: !5312)
!5321 = !DILocation(line: 863, column: 50, scope: !5312)
!5322 = !DILocation(line: 863, column: 10, scope: !5312)
!5323 = !DILocation(line: 863, column: 3, scope: !5312)
!5324 = distinct !DISubprogram(name: "assign_temp", scope: !3, file: !3, line: 877, type: !5325, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5325 = !DISubroutineType(types: !5326)
!5326 = !{!2924, !3045, !2948, !2948, !2948}
!5327 = !DILocalVariable(name: "type_or_decl", arg: 1, scope: !5324, file: !3, line: 877, type: !3045)
!5328 = !DILocation(line: 877, column: 19, scope: !5324)
!5329 = !DILocalVariable(name: "keep", arg: 2, scope: !5324, file: !3, line: 877, type: !2948)
!5330 = !DILocation(line: 877, column: 37, scope: !5324)
!5331 = !DILocalVariable(name: "memory_required", arg: 3, scope: !5324, file: !3, line: 877, type: !2948)
!5332 = !DILocation(line: 877, column: 47, scope: !5324)
!5333 = !DILocalVariable(name: "dont_promote", arg: 4, scope: !5324, file: !3, line: 878, type: !2948)
!5334 = !DILocation(line: 878, column: 11, scope: !5324)
!5335 = !DILocalVariable(name: "type", scope: !5324, file: !3, line: 880, type: !3045)
!5336 = !DILocation(line: 880, column: 8, scope: !5324)
!5337 = !DILocalVariable(name: "decl", scope: !5324, file: !3, line: 880, type: !3045)
!5338 = !DILocation(line: 880, column: 14, scope: !5324)
!5339 = !DILocalVariable(name: "mode", scope: !5324, file: !3, line: 881, type: !13)
!5340 = !DILocation(line: 881, column: 21, scope: !5324)
!5341 = !DILocalVariable(name: "unsignedp", scope: !5324, file: !3, line: 883, type: !2948)
!5342 = !DILocation(line: 883, column: 7, scope: !5324)
!5343 = !DILocation(line: 886, column: 7, scope: !5344)
!5344 = distinct !DILexicalBlock(scope: !5324, file: !3, line: 886, column: 7)
!5345 = !DILocation(line: 886, column: 7, scope: !5324)
!5346 = !DILocation(line: 887, column: 12, scope: !5344)
!5347 = !DILocation(line: 887, column: 10, scope: !5344)
!5348 = !DILocation(line: 887, column: 33, scope: !5344)
!5349 = !DILocation(line: 887, column: 31, scope: !5344)
!5350 = !DILocation(line: 887, column: 5, scope: !5344)
!5351 = !DILocation(line: 889, column: 10, scope: !5344)
!5352 = !DILocation(line: 889, column: 25, scope: !5344)
!5353 = !DILocation(line: 889, column: 23, scope: !5344)
!5354 = !DILocation(line: 891, column: 10, scope: !5324)
!5355 = !DILocation(line: 891, column: 8, scope: !5324)
!5356 = !DILocation(line: 893, column: 15, scope: !5324)
!5357 = !DILocation(line: 893, column: 13, scope: !5324)
!5358 = !DILocation(line: 896, column: 7, scope: !5359)
!5359 = distinct !DILexicalBlock(scope: !5324, file: !3, line: 896, column: 7)
!5360 = !DILocation(line: 896, column: 12, scope: !5359)
!5361 = !DILocation(line: 896, column: 23, scope: !5359)
!5362 = !DILocation(line: 896, column: 26, scope: !5359)
!5363 = !DILocation(line: 896, column: 7, scope: !5324)
!5364 = !DILocalVariable(name: "size", scope: !5365, file: !3, line: 898, type: !3014)
!5365 = distinct !DILexicalBlock(scope: !5359, file: !3, line: 897, column: 5)
!5366 = !DILocation(line: 898, column: 21, scope: !5365)
!5367 = !DILocation(line: 898, column: 47, scope: !5365)
!5368 = !DILocation(line: 898, column: 28, scope: !5365)
!5369 = !DILocalVariable(name: "tmp", scope: !5365, file: !3, line: 899, type: !2924)
!5370 = !DILocation(line: 899, column: 11, scope: !5365)
!5371 = !DILocation(line: 903, column: 11, scope: !5372)
!5372 = distinct !DILexicalBlock(scope: !5365, file: !3, line: 903, column: 11)
!5373 = !DILocation(line: 903, column: 16, scope: !5372)
!5374 = !DILocation(line: 903, column: 11, scope: !5365)
!5375 = !DILocation(line: 904, column: 7, scope: !5372)
!5376 = !DILocation(line: 904, column: 2, scope: !5372)
!5377 = !DILocation(line: 909, column: 16, scope: !5378)
!5378 = distinct !DILexicalBlock(scope: !5372, file: !3, line: 909, column: 16)
!5379 = !DILocation(line: 909, column: 21, scope: !5378)
!5380 = !DILocation(line: 909, column: 16, scope: !5372)
!5381 = !DILocation(line: 910, column: 32, scope: !5378)
!5382 = !DILocation(line: 910, column: 9, scope: !5378)
!5383 = !DILocation(line: 910, column: 7, scope: !5378)
!5384 = !DILocation(line: 910, column: 2, scope: !5378)
!5385 = !DILocation(line: 916, column: 11, scope: !5386)
!5386 = distinct !DILexicalBlock(scope: !5365, file: !3, line: 916, column: 11)
!5387 = !DILocation(line: 916, column: 16, scope: !5386)
!5388 = !DILocation(line: 916, column: 19, scope: !5386)
!5389 = !DILocation(line: 916, column: 24, scope: !5386)
!5390 = !DILocation(line: 917, column: 4, scope: !5386)
!5391 = !DILocation(line: 917, column: 7, scope: !5386)
!5392 = !DILocation(line: 917, column: 41, scope: !5386)
!5393 = !DILocation(line: 916, column: 11, scope: !5365)
!5394 = !DILocation(line: 919, column: 49, scope: !5395)
!5395 = distinct !DILexicalBlock(scope: !5386, file: !3, line: 918, column: 2)
!5396 = !DILocation(line: 919, column: 4, scope: !5395)
!5397 = !DILocation(line: 920, column: 9, scope: !5395)
!5398 = !DILocation(line: 921, column: 2, scope: !5395)
!5399 = !DILocation(line: 923, column: 41, scope: !5365)
!5400 = !DILocation(line: 923, column: 47, scope: !5365)
!5401 = !DILocation(line: 923, column: 53, scope: !5365)
!5402 = !DILocation(line: 923, column: 59, scope: !5365)
!5403 = !DILocation(line: 923, column: 13, scope: !5365)
!5404 = !DILocation(line: 923, column: 11, scope: !5365)
!5405 = !DILocation(line: 924, column: 14, scope: !5365)
!5406 = !DILocation(line: 924, column: 7, scope: !5365)
!5407 = !DILocation(line: 928, column: 9, scope: !5408)
!5408 = distinct !DILexicalBlock(scope: !5324, file: !3, line: 928, column: 7)
!5409 = !DILocation(line: 928, column: 7, scope: !5324)
!5410 = !DILocation(line: 929, column: 26, scope: !5408)
!5411 = !DILocation(line: 929, column: 32, scope: !5408)
!5412 = !DILocation(line: 929, column: 12, scope: !5408)
!5413 = !DILocation(line: 929, column: 10, scope: !5408)
!5414 = !DILocation(line: 929, column: 5, scope: !5408)
!5415 = !DILocation(line: 932, column: 23, scope: !5324)
!5416 = !DILocation(line: 932, column: 10, scope: !5324)
!5417 = !DILocation(line: 932, column: 3, scope: !5324)
!5418 = !DILocation(line: 933, column: 1, scope: !5324)
!5419 = distinct !DISubprogram(name: "update_temp_slot_address", scope: !3, file: !3, line: 1006, type: !5420, scopeLine: 1007, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5420 = !DISubroutineType(types: !5421)
!5421 = !{null, !2924, !2924}
!5422 = !DILocalVariable(name: "old_rtx", arg: 1, scope: !5419, file: !3, line: 1006, type: !2924)
!5423 = !DILocation(line: 1006, column: 31, scope: !5419)
!5424 = !DILocalVariable(name: "new_rtx", arg: 2, scope: !5419, file: !3, line: 1006, type: !2924)
!5425 = !DILocation(line: 1006, column: 44, scope: !5419)
!5426 = !DILocalVariable(name: "p", scope: !5419, file: !3, line: 1008, type: !2918)
!5427 = !DILocation(line: 1008, column: 21, scope: !5419)
!5428 = !DILocation(line: 1010, column: 20, scope: !5429)
!5429 = distinct !DILexicalBlock(scope: !5419, file: !3, line: 1010, column: 7)
!5430 = !DILocation(line: 1010, column: 29, scope: !5429)
!5431 = !DILocation(line: 1010, column: 7, scope: !5429)
!5432 = !DILocation(line: 1010, column: 7, scope: !5419)
!5433 = !DILocation(line: 1011, column: 5, scope: !5429)
!5434 = !DILocation(line: 1013, column: 36, scope: !5419)
!5435 = !DILocation(line: 1013, column: 7, scope: !5419)
!5436 = !DILocation(line: 1013, column: 5, scope: !5419)
!5437 = !DILocation(line: 1021, column: 7, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5419, file: !3, line: 1021, column: 7)
!5439 = !DILocation(line: 1021, column: 9, scope: !5438)
!5440 = !DILocation(line: 1021, column: 7, scope: !5419)
!5441 = !DILocation(line: 1023, column: 11, scope: !5442)
!5442 = distinct !DILexicalBlock(scope: !5443, file: !3, line: 1023, column: 11)
!5443 = distinct !DILexicalBlock(scope: !5438, file: !3, line: 1022, column: 5)
!5444 = !DILocation(line: 1023, column: 30, scope: !5442)
!5445 = !DILocation(line: 1023, column: 11, scope: !5443)
!5446 = !DILocation(line: 1024, column: 2, scope: !5442)
!5447 = !DILocation(line: 1026, column: 11, scope: !5448)
!5448 = distinct !DILexicalBlock(scope: !5443, file: !3, line: 1026, column: 11)
!5449 = !DILocation(line: 1026, column: 11, scope: !5443)
!5450 = !DILocation(line: 1028, column: 30, scope: !5451)
!5451 = distinct !DILexicalBlock(scope: !5448, file: !3, line: 1027, column: 2)
!5452 = !DILocation(line: 1028, column: 49, scope: !5451)
!5453 = !DILocation(line: 1028, column: 4, scope: !5451)
!5454 = !DILocation(line: 1029, column: 30, scope: !5451)
!5455 = !DILocation(line: 1029, column: 49, scope: !5451)
!5456 = !DILocation(line: 1029, column: 4, scope: !5451)
!5457 = !DILocation(line: 1030, column: 4, scope: !5451)
!5458 = !DILocation(line: 1032, column: 16, scope: !5459)
!5459 = distinct !DILexicalBlock(scope: !5448, file: !3, line: 1032, column: 16)
!5460 = !DILocation(line: 1032, column: 35, scope: !5459)
!5461 = !DILocation(line: 1032, column: 16, scope: !5448)
!5462 = !DILocation(line: 1033, column: 2, scope: !5459)
!5463 = !DILocation(line: 1035, column: 24, scope: !5464)
!5464 = distinct !DILexicalBlock(scope: !5443, file: !3, line: 1035, column: 11)
!5465 = !DILocation(line: 1035, column: 43, scope: !5464)
!5466 = !DILocation(line: 1035, column: 11, scope: !5464)
!5467 = !DILocation(line: 1035, column: 11, scope: !5443)
!5468 = !DILocation(line: 1036, column: 28, scope: !5464)
!5469 = !DILocation(line: 1036, column: 47, scope: !5464)
!5470 = !DILocation(line: 1036, column: 2, scope: !5464)
!5471 = !DILocation(line: 1037, column: 29, scope: !5472)
!5472 = distinct !DILexicalBlock(scope: !5464, file: !3, line: 1037, column: 16)
!5473 = !DILocation(line: 1037, column: 48, scope: !5472)
!5474 = !DILocation(line: 1037, column: 16, scope: !5472)
!5475 = !DILocation(line: 1037, column: 16, scope: !5464)
!5476 = !DILocation(line: 1038, column: 28, scope: !5472)
!5477 = !DILocation(line: 1038, column: 47, scope: !5472)
!5478 = !DILocation(line: 1038, column: 2, scope: !5472)
!5479 = !DILocation(line: 1039, column: 29, scope: !5480)
!5480 = distinct !DILexicalBlock(scope: !5472, file: !3, line: 1039, column: 16)
!5481 = !DILocation(line: 1039, column: 48, scope: !5480)
!5482 = !DILocation(line: 1039, column: 16, scope: !5480)
!5483 = !DILocation(line: 1039, column: 16, scope: !5472)
!5484 = !DILocation(line: 1040, column: 28, scope: !5480)
!5485 = !DILocation(line: 1040, column: 47, scope: !5480)
!5486 = !DILocation(line: 1040, column: 2, scope: !5480)
!5487 = !DILocation(line: 1041, column: 29, scope: !5488)
!5488 = distinct !DILexicalBlock(scope: !5480, file: !3, line: 1041, column: 16)
!5489 = !DILocation(line: 1041, column: 48, scope: !5488)
!5490 = !DILocation(line: 1041, column: 16, scope: !5488)
!5491 = !DILocation(line: 1041, column: 16, scope: !5480)
!5492 = !DILocation(line: 1042, column: 28, scope: !5488)
!5493 = !DILocation(line: 1042, column: 47, scope: !5488)
!5494 = !DILocation(line: 1042, column: 2, scope: !5488)
!5495 = !DILocation(line: 1044, column: 7, scope: !5443)
!5496 = !DILocation(line: 1048, column: 29, scope: !5419)
!5497 = !DILocation(line: 1048, column: 38, scope: !5419)
!5498 = !DILocation(line: 1048, column: 3, scope: !5419)
!5499 = !DILocation(line: 1049, column: 1, scope: !5419)
!5500 = distinct !DISubprogram(name: "find_temp_slot_from_address", scope: !3, file: !3, line: 635, type: !5501, scopeLine: 636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5501 = !DISubroutineType(types: !5502)
!5502 = !{!2918, !2924}
!5503 = !DILocalVariable(name: "x", arg: 1, scope: !5500, file: !3, line: 635, type: !2924)
!5504 = !DILocation(line: 635, column: 34, scope: !5500)
!5505 = !DILocalVariable(name: "p", scope: !5500, file: !3, line: 637, type: !2918)
!5506 = !DILocation(line: 637, column: 21, scope: !5500)
!5507 = !DILocalVariable(name: "tmp", scope: !5500, file: !3, line: 638, type: !4306)
!5508 = !DILocation(line: 638, column: 34, scope: !5500)
!5509 = !DILocalVariable(name: "t", scope: !5500, file: !3, line: 638, type: !4305)
!5510 = !DILocation(line: 638, column: 40, scope: !5500)
!5511 = !DILocation(line: 642, column: 17, scope: !5500)
!5512 = !DILocation(line: 642, column: 7, scope: !5500)
!5513 = !DILocation(line: 642, column: 15, scope: !5500)
!5514 = !DILocation(line: 643, column: 7, scope: !5500)
!5515 = !DILocation(line: 643, column: 17, scope: !5500)
!5516 = !DILocation(line: 644, column: 14, scope: !5500)
!5517 = !DILocation(line: 644, column: 7, scope: !5500)
!5518 = !DILocation(line: 644, column: 12, scope: !5500)
!5519 = !DILocation(line: 646, column: 26, scope: !5500)
!5520 = !DILocation(line: 646, column: 51, scope: !5500)
!5521 = !DILocation(line: 646, column: 61, scope: !5500)
!5522 = !DILocation(line: 646, column: 5, scope: !5500)
!5523 = !DILocation(line: 645, column: 7, scope: !5500)
!5524 = !DILocation(line: 645, column: 5, scope: !5500)
!5525 = !DILocation(line: 647, column: 7, scope: !5526)
!5526 = distinct !DILexicalBlock(scope: !5500, file: !3, line: 647, column: 7)
!5527 = !DILocation(line: 647, column: 7, scope: !5500)
!5528 = !DILocation(line: 648, column: 12, scope: !5526)
!5529 = !DILocation(line: 648, column: 15, scope: !5526)
!5530 = !DILocation(line: 648, column: 5, scope: !5526)
!5531 = !DILocation(line: 652, column: 7, scope: !5532)
!5532 = distinct !DILexicalBlock(scope: !5500, file: !3, line: 652, column: 7)
!5533 = !DILocation(line: 652, column: 20, scope: !5532)
!5534 = !DILocation(line: 652, column: 28, scope: !5532)
!5535 = !DILocation(line: 652, column: 31, scope: !5532)
!5536 = !DILocation(line: 653, column: 7, scope: !5532)
!5537 = !DILocation(line: 653, column: 44, scope: !5532)
!5538 = !DILocation(line: 653, column: 15, scope: !5532)
!5539 = !DILocation(line: 653, column: 13, scope: !5532)
!5540 = !DILocation(line: 653, column: 58, scope: !5532)
!5541 = !DILocation(line: 652, column: 7, scope: !5500)
!5542 = !DILocation(line: 654, column: 12, scope: !5532)
!5543 = !DILocation(line: 654, column: 5, scope: !5532)
!5544 = !DILocation(line: 655, column: 12, scope: !5545)
!5545 = distinct !DILexicalBlock(scope: !5532, file: !3, line: 655, column: 12)
!5546 = !DILocation(line: 655, column: 25, scope: !5545)
!5547 = !DILocation(line: 655, column: 33, scope: !5545)
!5548 = !DILocation(line: 655, column: 36, scope: !5545)
!5549 = !DILocation(line: 656, column: 5, scope: !5545)
!5550 = !DILocation(line: 656, column: 42, scope: !5545)
!5551 = !DILocation(line: 656, column: 13, scope: !5545)
!5552 = !DILocation(line: 656, column: 11, scope: !5545)
!5553 = !DILocation(line: 656, column: 56, scope: !5545)
!5554 = !DILocation(line: 655, column: 12, scope: !5532)
!5555 = !DILocation(line: 657, column: 12, scope: !5545)
!5556 = !DILocation(line: 657, column: 5, scope: !5545)
!5557 = !DILocation(line: 660, column: 7, scope: !5558)
!5558 = distinct !DILexicalBlock(scope: !5500, file: !3, line: 660, column: 7)
!5559 = !DILocation(line: 660, column: 20, scope: !5558)
!5560 = !DILocation(line: 661, column: 7, scope: !5558)
!5561 = !DILocation(line: 661, column: 10, scope: !5558)
!5562 = !DILocation(line: 661, column: 25, scope: !5558)
!5563 = !DILocation(line: 661, column: 22, scope: !5558)
!5564 = !DILocation(line: 662, column: 7, scope: !5558)
!5565 = !DILocation(line: 662, column: 10, scope: !5558)
!5566 = !DILocation(line: 660, column: 7, scope: !5500)
!5567 = !DILocalVariable(name: "i", scope: !5568, file: !3, line: 664, type: !2948)
!5568 = distinct !DILexicalBlock(scope: !5558, file: !3, line: 663, column: 5)
!5569 = !DILocation(line: 664, column: 11, scope: !5568)
!5570 = !DILocation(line: 665, column: 16, scope: !5571)
!5571 = distinct !DILexicalBlock(scope: !5568, file: !3, line: 665, column: 7)
!5572 = !DILocation(line: 665, column: 14, scope: !5571)
!5573 = !DILocation(line: 665, column: 12, scope: !5571)
!5574 = !DILocation(line: 665, column: 35, scope: !5575)
!5575 = distinct !DILexicalBlock(scope: !5571, file: !3, line: 665, column: 7)
!5576 = !DILocation(line: 665, column: 37, scope: !5575)
!5577 = !DILocation(line: 665, column: 7, scope: !5571)
!5578 = !DILocation(line: 666, column: 33, scope: !5579)
!5579 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 666, column: 2)
!5580 = !DILocation(line: 666, column: 12, scope: !5579)
!5581 = !DILocation(line: 666, column: 11, scope: !5579)
!5582 = !DILocation(line: 666, column: 9, scope: !5579)
!5583 = !DILocation(line: 666, column: 7, scope: !5579)
!5584 = !DILocation(line: 666, column: 37, scope: !5585)
!5585 = distinct !DILexicalBlock(scope: !5579, file: !3, line: 666, column: 2)
!5586 = !DILocation(line: 666, column: 2, scope: !5579)
!5587 = !DILocation(line: 668, column: 10, scope: !5588)
!5588 = distinct !DILexicalBlock(scope: !5589, file: !3, line: 668, column: 10)
!5589 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 667, column: 4)
!5590 = !DILocation(line: 668, column: 34, scope: !5588)
!5591 = !DILocation(line: 668, column: 37, scope: !5588)
!5592 = !DILocation(line: 668, column: 31, scope: !5588)
!5593 = !DILocation(line: 669, column: 3, scope: !5588)
!5594 = !DILocation(line: 669, column: 6, scope: !5588)
!5595 = !DILocation(line: 669, column: 29, scope: !5588)
!5596 = !DILocation(line: 669, column: 32, scope: !5588)
!5597 = !DILocation(line: 669, column: 46, scope: !5588)
!5598 = !DILocation(line: 669, column: 49, scope: !5588)
!5599 = !DILocation(line: 669, column: 44, scope: !5588)
!5600 = !DILocation(line: 669, column: 27, scope: !5588)
!5601 = !DILocation(line: 668, column: 10, scope: !5589)
!5602 = !DILocation(line: 670, column: 15, scope: !5588)
!5603 = !DILocation(line: 670, column: 8, scope: !5588)
!5604 = !DILocation(line: 671, column: 4, scope: !5589)
!5605 = !DILocation(line: 666, column: 44, scope: !5585)
!5606 = !DILocation(line: 666, column: 47, scope: !5585)
!5607 = !DILocation(line: 666, column: 42, scope: !5585)
!5608 = !DILocation(line: 666, column: 2, scope: !5585)
!5609 = distinct !{!5609, !5586, !5610}
!5610 = !DILocation(line: 671, column: 4, scope: !5579)
!5611 = !DILocation(line: 665, column: 44, scope: !5575)
!5612 = !DILocation(line: 665, column: 7, scope: !5575)
!5613 = distinct !{!5613, !5577, !5614}
!5614 = !DILocation(line: 671, column: 4, scope: !5571)
!5615 = !DILocation(line: 672, column: 5, scope: !5568)
!5616 = !DILocation(line: 674, column: 3, scope: !5500)
!5617 = !DILocation(line: 675, column: 1, scope: !5500)
!5618 = distinct !DISubprogram(name: "mark_temp_addr_taken", scope: !3, file: !3, line: 1055, type: !5619, scopeLine: 1056, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5619 = !DISubroutineType(types: !5620)
!5620 = !{null, !2924}
!5621 = !DILocalVariable(name: "x", arg: 1, scope: !5618, file: !3, line: 1055, type: !2924)
!5622 = !DILocation(line: 1055, column: 27, scope: !5618)
!5623 = !DILocalVariable(name: "p", scope: !5618, file: !3, line: 1057, type: !2918)
!5624 = !DILocation(line: 1057, column: 21, scope: !5618)
!5625 = !DILocation(line: 1059, column: 7, scope: !5626)
!5626 = distinct !DILexicalBlock(scope: !5618, file: !3, line: 1059, column: 7)
!5627 = !DILocation(line: 1059, column: 9, scope: !5626)
!5628 = !DILocation(line: 1059, column: 7, scope: !5618)
!5629 = !DILocation(line: 1060, column: 5, scope: !5626)
!5630 = !DILocation(line: 1064, column: 8, scope: !5631)
!5631 = distinct !DILexicalBlock(scope: !5618, file: !3, line: 1064, column: 7)
!5632 = !DILocation(line: 1064, column: 18, scope: !5631)
!5633 = !DILocation(line: 1064, column: 21, scope: !5631)
!5634 = !DILocation(line: 1064, column: 7, scope: !5618)
!5635 = !DILocation(line: 1065, column: 5, scope: !5631)
!5636 = !DILocation(line: 1067, column: 36, scope: !5618)
!5637 = !DILocation(line: 1067, column: 7, scope: !5618)
!5638 = !DILocation(line: 1067, column: 5, scope: !5618)
!5639 = !DILocation(line: 1068, column: 7, scope: !5640)
!5640 = distinct !DILexicalBlock(scope: !5618, file: !3, line: 1068, column: 7)
!5641 = !DILocation(line: 1068, column: 9, scope: !5640)
!5642 = !DILocation(line: 1068, column: 7, scope: !5618)
!5643 = !DILocation(line: 1069, column: 5, scope: !5640)
!5644 = !DILocation(line: 1069, column: 8, scope: !5640)
!5645 = !DILocation(line: 1069, column: 19, scope: !5640)
!5646 = !DILocation(line: 1070, column: 1, scope: !5618)
!5647 = distinct !DISubprogram(name: "preserve_temp_slots", scope: !3, file: !3, line: 1082, type: !5619, scopeLine: 1083, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5648 = !DILocalVariable(name: "x", arg: 1, scope: !5647, file: !3, line: 1082, type: !2924)
!5649 = !DILocation(line: 1082, column: 26, scope: !5647)
!5650 = !DILocalVariable(name: "p", scope: !5647, file: !3, line: 1084, type: !2918)
!5651 = !DILocation(line: 1084, column: 21, scope: !5647)
!5652 = !DILocalVariable(name: "next", scope: !5647, file: !3, line: 1084, type: !2918)
!5653 = !DILocation(line: 1084, column: 29, scope: !5647)
!5654 = !DILocation(line: 1088, column: 7, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 1088, column: 7)
!5656 = !DILocation(line: 1088, column: 9, scope: !5655)
!5657 = !DILocation(line: 1088, column: 7, scope: !5647)
!5658 = !DILocation(line: 1090, column: 38, scope: !5659)
!5659 = distinct !DILexicalBlock(scope: !5660, file: !3, line: 1090, column: 7)
!5660 = distinct !DILexicalBlock(scope: !5655, file: !3, line: 1089, column: 5)
!5661 = !DILocation(line: 1090, column: 17, scope: !5659)
!5662 = !DILocation(line: 1090, column: 16, scope: !5659)
!5663 = !DILocation(line: 1090, column: 14, scope: !5659)
!5664 = !DILocation(line: 1090, column: 12, scope: !5659)
!5665 = !DILocation(line: 1090, column: 56, scope: !5666)
!5666 = distinct !DILexicalBlock(scope: !5659, file: !3, line: 1090, column: 7)
!5667 = !DILocation(line: 1090, column: 7, scope: !5659)
!5668 = !DILocation(line: 1092, column: 11, scope: !5669)
!5669 = distinct !DILexicalBlock(scope: !5666, file: !3, line: 1091, column: 2)
!5670 = !DILocation(line: 1092, column: 14, scope: !5669)
!5671 = !DILocation(line: 1092, column: 9, scope: !5669)
!5672 = !DILocation(line: 1094, column: 8, scope: !5673)
!5673 = distinct !DILexicalBlock(scope: !5669, file: !3, line: 1094, column: 8)
!5674 = !DILocation(line: 1094, column: 11, scope: !5673)
!5675 = !DILocation(line: 1094, column: 8, scope: !5669)
!5676 = !DILocation(line: 1095, column: 26, scope: !5673)
!5677 = !DILocation(line: 1095, column: 29, scope: !5673)
!5678 = !DILocation(line: 1095, column: 45, scope: !5673)
!5679 = !DILocation(line: 1095, column: 6, scope: !5673)
!5680 = !DILocation(line: 1096, column: 2, scope: !5669)
!5681 = !DILocation(line: 1090, column: 63, scope: !5666)
!5682 = !DILocation(line: 1090, column: 61, scope: !5666)
!5683 = !DILocation(line: 1090, column: 7, scope: !5666)
!5684 = distinct !{!5684, !5667, !5685}
!5685 = !DILocation(line: 1096, column: 2, scope: !5659)
!5686 = !DILocation(line: 1098, column: 7, scope: !5660)
!5687 = !DILocation(line: 1105, column: 7, scope: !5688)
!5688 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 1105, column: 7)
!5689 = !DILocation(line: 1105, column: 17, scope: !5688)
!5690 = !DILocation(line: 1105, column: 20, scope: !5688)
!5691 = !DILocation(line: 1105, column: 7, scope: !5647)
!5692 = !DILocation(line: 1106, column: 38, scope: !5688)
!5693 = !DILocation(line: 1106, column: 9, scope: !5688)
!5694 = !DILocation(line: 1106, column: 7, scope: !5688)
!5695 = !DILocation(line: 1106, column: 5, scope: !5688)
!5696 = !DILocation(line: 1111, column: 7, scope: !5697)
!5697 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 1111, column: 7)
!5698 = !DILocation(line: 1111, column: 9, scope: !5697)
!5699 = !DILocation(line: 1111, column: 14, scope: !5697)
!5700 = !DILocation(line: 1111, column: 19, scope: !5697)
!5701 = !DILocation(line: 1111, column: 29, scope: !5697)
!5702 = !DILocation(line: 1111, column: 32, scope: !5697)
!5703 = !DILocation(line: 1111, column: 7, scope: !5647)
!5704 = !DILocation(line: 1113, column: 38, scope: !5705)
!5705 = distinct !DILexicalBlock(scope: !5706, file: !3, line: 1113, column: 7)
!5706 = distinct !DILexicalBlock(scope: !5697, file: !3, line: 1112, column: 5)
!5707 = !DILocation(line: 1113, column: 17, scope: !5705)
!5708 = !DILocation(line: 1113, column: 16, scope: !5705)
!5709 = !DILocation(line: 1113, column: 14, scope: !5705)
!5710 = !DILocation(line: 1113, column: 12, scope: !5705)
!5711 = !DILocation(line: 1113, column: 56, scope: !5712)
!5712 = distinct !DILexicalBlock(scope: !5705, file: !3, line: 1113, column: 7)
!5713 = !DILocation(line: 1113, column: 7, scope: !5705)
!5714 = !DILocation(line: 1115, column: 11, scope: !5715)
!5715 = distinct !DILexicalBlock(scope: !5712, file: !3, line: 1114, column: 2)
!5716 = !DILocation(line: 1115, column: 14, scope: !5715)
!5717 = !DILocation(line: 1115, column: 9, scope: !5715)
!5718 = !DILocation(line: 1117, column: 8, scope: !5719)
!5719 = distinct !DILexicalBlock(scope: !5715, file: !3, line: 1117, column: 8)
!5720 = !DILocation(line: 1117, column: 11, scope: !5719)
!5721 = !DILocation(line: 1117, column: 8, scope: !5715)
!5722 = !DILocation(line: 1118, column: 26, scope: !5719)
!5723 = !DILocation(line: 1118, column: 29, scope: !5719)
!5724 = !DILocation(line: 1118, column: 45, scope: !5719)
!5725 = !DILocation(line: 1118, column: 6, scope: !5719)
!5726 = !DILocation(line: 1119, column: 2, scope: !5715)
!5727 = !DILocation(line: 1113, column: 63, scope: !5712)
!5728 = !DILocation(line: 1113, column: 61, scope: !5712)
!5729 = !DILocation(line: 1113, column: 7, scope: !5712)
!5730 = distinct !{!5730, !5713, !5731}
!5731 = !DILocation(line: 1119, column: 2, scope: !5705)
!5732 = !DILocation(line: 1121, column: 7, scope: !5706)
!5733 = !DILocation(line: 1125, column: 7, scope: !5734)
!5734 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 1125, column: 7)
!5735 = !DILocation(line: 1125, column: 9, scope: !5734)
!5736 = !DILocation(line: 1125, column: 7, scope: !5647)
!5737 = !DILocation(line: 1126, column: 38, scope: !5734)
!5738 = !DILocation(line: 1126, column: 9, scope: !5734)
!5739 = !DILocation(line: 1126, column: 7, scope: !5734)
!5740 = !DILocation(line: 1126, column: 5, scope: !5734)
!5741 = !DILocation(line: 1128, column: 7, scope: !5742)
!5742 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 1128, column: 7)
!5743 = !DILocation(line: 1128, column: 9, scope: !5742)
!5744 = !DILocation(line: 1128, column: 7, scope: !5647)
!5745 = !DILocalVariable(name: "q", scope: !5746, file: !3, line: 1132, type: !2918)
!5746 = distinct !DILexicalBlock(scope: !5742, file: !3, line: 1129, column: 5)
!5747 = !DILocation(line: 1132, column: 25, scope: !5746)
!5748 = !DILocation(line: 1134, column: 11, scope: !5749)
!5749 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 1134, column: 11)
!5750 = !DILocation(line: 1134, column: 14, scope: !5749)
!5751 = !DILocation(line: 1134, column: 23, scope: !5749)
!5752 = !DILocation(line: 1134, column: 20, scope: !5749)
!5753 = !DILocation(line: 1134, column: 11, scope: !5746)
!5754 = !DILocation(line: 1136, column: 35, scope: !5755)
!5755 = distinct !DILexicalBlock(scope: !5756, file: !3, line: 1136, column: 4)
!5756 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 1135, column: 2)
!5757 = !DILocation(line: 1136, column: 14, scope: !5755)
!5758 = !DILocation(line: 1136, column: 13, scope: !5755)
!5759 = !DILocation(line: 1136, column: 11, scope: !5755)
!5760 = !DILocation(line: 1136, column: 9, scope: !5755)
!5761 = !DILocation(line: 1136, column: 53, scope: !5762)
!5762 = distinct !DILexicalBlock(scope: !5755, file: !3, line: 1136, column: 4)
!5763 = !DILocation(line: 1136, column: 4, scope: !5755)
!5764 = !DILocation(line: 1138, column: 15, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5762, file: !3, line: 1137, column: 6)
!5766 = !DILocation(line: 1138, column: 18, scope: !5765)
!5767 = !DILocation(line: 1138, column: 13, scope: !5765)
!5768 = !DILocation(line: 1140, column: 12, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5765, file: !3, line: 1140, column: 12)
!5770 = !DILocation(line: 1140, column: 17, scope: !5769)
!5771 = !DILocation(line: 1140, column: 14, scope: !5769)
!5772 = !DILocation(line: 1140, column: 19, scope: !5769)
!5773 = !DILocation(line: 1140, column: 22, scope: !5769)
!5774 = !DILocation(line: 1140, column: 25, scope: !5769)
!5775 = !DILocation(line: 1140, column: 12, scope: !5765)
!5776 = !DILocation(line: 1141, column: 23, scope: !5769)
!5777 = !DILocation(line: 1141, column: 26, scope: !5769)
!5778 = !DILocation(line: 1141, column: 42, scope: !5769)
!5779 = !DILocation(line: 1141, column: 3, scope: !5769)
!5780 = !DILocation(line: 1142, column: 6, scope: !5765)
!5781 = !DILocation(line: 1136, column: 60, scope: !5762)
!5782 = !DILocation(line: 1136, column: 58, scope: !5762)
!5783 = !DILocation(line: 1136, column: 4, scope: !5762)
!5784 = distinct !{!5784, !5763, !5785}
!5785 = !DILocation(line: 1142, column: 6, scope: !5755)
!5786 = !DILocation(line: 1144, column: 24, scope: !5756)
!5787 = !DILocation(line: 1144, column: 27, scope: !5756)
!5788 = !DILocation(line: 1144, column: 43, scope: !5756)
!5789 = !DILocation(line: 1144, column: 4, scope: !5756)
!5790 = !DILocation(line: 1145, column: 4, scope: !5756)
!5791 = !DILocation(line: 1145, column: 7, scope: !5756)
!5792 = !DILocation(line: 1145, column: 18, scope: !5756)
!5793 = !DILocation(line: 1146, column: 2, scope: !5756)
!5794 = !DILocation(line: 1147, column: 7, scope: !5746)
!5795 = !DILocation(line: 1151, column: 34, scope: !5796)
!5796 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 1151, column: 3)
!5797 = !DILocation(line: 1151, column: 13, scope: !5796)
!5798 = !DILocation(line: 1151, column: 12, scope: !5796)
!5799 = !DILocation(line: 1151, column: 10, scope: !5796)
!5800 = !DILocation(line: 1151, column: 8, scope: !5796)
!5801 = !DILocation(line: 1151, column: 52, scope: !5802)
!5802 = distinct !DILexicalBlock(scope: !5796, file: !3, line: 1151, column: 3)
!5803 = !DILocation(line: 1151, column: 3, scope: !5796)
!5804 = !DILocation(line: 1153, column: 14, scope: !5805)
!5805 = distinct !DILexicalBlock(scope: !5802, file: !3, line: 1152, column: 5)
!5806 = !DILocation(line: 1153, column: 17, scope: !5805)
!5807 = !DILocation(line: 1153, column: 12, scope: !5805)
!5808 = !DILocation(line: 1155, column: 12, scope: !5809)
!5809 = distinct !DILexicalBlock(scope: !5805, file: !3, line: 1155, column: 11)
!5810 = !DILocation(line: 1155, column: 15, scope: !5809)
!5811 = !DILocation(line: 1155, column: 11, scope: !5805)
!5812 = !DILocation(line: 1156, column: 22, scope: !5809)
!5813 = !DILocation(line: 1156, column: 25, scope: !5809)
!5814 = !DILocation(line: 1156, column: 41, scope: !5809)
!5815 = !DILocation(line: 1156, column: 2, scope: !5809)
!5816 = !DILocation(line: 1157, column: 5, scope: !5805)
!5817 = !DILocation(line: 1151, column: 59, scope: !5802)
!5818 = !DILocation(line: 1151, column: 57, scope: !5802)
!5819 = !DILocation(line: 1151, column: 3, scope: !5802)
!5820 = distinct !{!5820, !5803, !5821}
!5821 = !DILocation(line: 1157, column: 5, scope: !5796)
!5822 = !DILocation(line: 1158, column: 1, scope: !5647)
!5823 = distinct !DISubprogram(name: "move_slot_to_level", scope: !3, file: !3, line: 551, type: !5824, scopeLine: 552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5824 = !DISubroutineType(types: !5825)
!5825 = !{null, !2918, !2948}
!5826 = !DILocalVariable(name: "temp", arg: 1, scope: !5823, file: !3, line: 551, type: !2918)
!5827 = !DILocation(line: 551, column: 39, scope: !5823)
!5828 = !DILocalVariable(name: "level", arg: 2, scope: !5823, file: !3, line: 551, type: !2948)
!5829 = !DILocation(line: 551, column: 49, scope: !5823)
!5830 = !DILocation(line: 553, column: 23, scope: !5823)
!5831 = !DILocation(line: 553, column: 50, scope: !5823)
!5832 = !DILocation(line: 553, column: 56, scope: !5823)
!5833 = !DILocation(line: 553, column: 29, scope: !5823)
!5834 = !DILocation(line: 553, column: 3, scope: !5823)
!5835 = !DILocation(line: 554, column: 24, scope: !5823)
!5836 = !DILocation(line: 554, column: 51, scope: !5823)
!5837 = !DILocation(line: 554, column: 30, scope: !5823)
!5838 = !DILocation(line: 554, column: 3, scope: !5823)
!5839 = !DILocation(line: 555, column: 17, scope: !5823)
!5840 = !DILocation(line: 555, column: 3, scope: !5823)
!5841 = !DILocation(line: 555, column: 9, scope: !5823)
!5842 = !DILocation(line: 555, column: 15, scope: !5823)
!5843 = !DILocation(line: 556, column: 1, scope: !5823)
!5844 = distinct !DISubprogram(name: "free_temp_slots", scope: !3, file: !3, line: 1164, type: !4467, scopeLine: 1165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5845 = !DILocalVariable(name: "p", scope: !5844, file: !3, line: 1166, type: !2918)
!5846 = !DILocation(line: 1166, column: 21, scope: !5844)
!5847 = !DILocalVariable(name: "next", scope: !5844, file: !3, line: 1166, type: !2918)
!5848 = !DILocation(line: 1166, column: 25, scope: !5844)
!5849 = !DILocalVariable(name: "some_available", scope: !5844, file: !3, line: 1167, type: !3158)
!5850 = !DILocation(line: 1167, column: 8, scope: !5844)
!5851 = !DILocation(line: 1169, column: 34, scope: !5852)
!5852 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 1169, column: 3)
!5853 = !DILocation(line: 1169, column: 13, scope: !5852)
!5854 = !DILocation(line: 1169, column: 12, scope: !5852)
!5855 = !DILocation(line: 1169, column: 10, scope: !5852)
!5856 = !DILocation(line: 1169, column: 8, scope: !5852)
!5857 = !DILocation(line: 1169, column: 52, scope: !5858)
!5858 = distinct !DILexicalBlock(scope: !5852, file: !3, line: 1169, column: 3)
!5859 = !DILocation(line: 1169, column: 3, scope: !5852)
!5860 = !DILocation(line: 1171, column: 14, scope: !5861)
!5861 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 1170, column: 5)
!5862 = !DILocation(line: 1171, column: 17, scope: !5861)
!5863 = !DILocation(line: 1171, column: 12, scope: !5861)
!5864 = !DILocation(line: 1173, column: 12, scope: !5865)
!5865 = distinct !DILexicalBlock(scope: !5861, file: !3, line: 1173, column: 11)
!5866 = !DILocation(line: 1173, column: 15, scope: !5865)
!5867 = !DILocation(line: 1173, column: 11, scope: !5861)
!5868 = !DILocation(line: 1175, column: 25, scope: !5869)
!5869 = distinct !DILexicalBlock(scope: !5865, file: !3, line: 1174, column: 2)
!5870 = !DILocation(line: 1175, column: 4, scope: !5869)
!5871 = !DILocation(line: 1176, column: 19, scope: !5869)
!5872 = !DILocation(line: 1177, column: 2, scope: !5869)
!5873 = !DILocation(line: 1178, column: 5, scope: !5861)
!5874 = !DILocation(line: 1169, column: 59, scope: !5858)
!5875 = !DILocation(line: 1169, column: 57, scope: !5858)
!5876 = !DILocation(line: 1169, column: 3, scope: !5858)
!5877 = distinct !{!5877, !5859, !5878}
!5878 = !DILocation(line: 1178, column: 5, scope: !5852)
!5879 = !DILocation(line: 1180, column: 7, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 1180, column: 7)
!5881 = !DILocation(line: 1180, column: 7, scope: !5844)
!5882 = !DILocation(line: 1182, column: 7, scope: !5883)
!5883 = distinct !DILexicalBlock(scope: !5880, file: !3, line: 1181, column: 5)
!5884 = !DILocation(line: 1183, column: 7, scope: !5883)
!5885 = !DILocation(line: 1184, column: 5, scope: !5883)
!5886 = !DILocation(line: 1185, column: 1, scope: !5844)
!5887 = distinct !DISubprogram(name: "make_slot_available", scope: !3, file: !3, line: 561, type: !5888, scopeLine: 562, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5888 = !DISubroutineType(types: !5889)
!5889 = !{null, !2918}
!5890 = !DILocalVariable(name: "temp", arg: 1, scope: !5887, file: !3, line: 561, type: !2918)
!5891 = !DILocation(line: 561, column: 40, scope: !5887)
!5892 = !DILocation(line: 563, column: 23, scope: !5887)
!5893 = !DILocation(line: 563, column: 50, scope: !5887)
!5894 = !DILocation(line: 563, column: 56, scope: !5887)
!5895 = !DILocation(line: 563, column: 29, scope: !5887)
!5896 = !DILocation(line: 563, column: 3, scope: !5887)
!5897 = !DILocation(line: 564, column: 24, scope: !5887)
!5898 = !DILocation(line: 564, column: 3, scope: !5887)
!5899 = !DILocation(line: 565, column: 3, scope: !5887)
!5900 = !DILocation(line: 565, column: 9, scope: !5887)
!5901 = !DILocation(line: 565, column: 16, scope: !5887)
!5902 = !DILocation(line: 566, column: 3, scope: !5887)
!5903 = !DILocation(line: 566, column: 9, scope: !5887)
!5904 = !DILocation(line: 566, column: 15, scope: !5887)
!5905 = !DILocation(line: 567, column: 1, scope: !5887)
!5906 = distinct !DISubprogram(name: "remove_unused_temp_slot_addresses", scope: !3, file: !3, line: 625, type: !4467, scopeLine: 626, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5907 = !DILocation(line: 627, column: 18, scope: !5906)
!5908 = !DILocation(line: 627, column: 3, scope: !5906)
!5909 = !DILocation(line: 630, column: 1, scope: !5906)
!5910 = distinct !DISubprogram(name: "combine_temp_slots", scope: !3, file: !3, line: 942, type: !4467, scopeLine: 943, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!5911 = !DILocalVariable(name: "p", scope: !5910, file: !3, line: 944, type: !2918)
!5912 = !DILocation(line: 944, column: 21, scope: !5910)
!5913 = !DILocalVariable(name: "q", scope: !5910, file: !3, line: 944, type: !2918)
!5914 = !DILocation(line: 944, column: 25, scope: !5910)
!5915 = !DILocalVariable(name: "next", scope: !5910, file: !3, line: 944, type: !2918)
!5916 = !DILocation(line: 944, column: 29, scope: !5910)
!5917 = !DILocalVariable(name: "next_q", scope: !5910, file: !3, line: 944, type: !2918)
!5918 = !DILocation(line: 944, column: 36, scope: !5910)
!5919 = !DILocalVariable(name: "num_slots", scope: !5910, file: !3, line: 945, type: !2948)
!5920 = !DILocation(line: 945, column: 7, scope: !5910)
!5921 = !DILocation(line: 949, column: 7, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 949, column: 7)
!5923 = !DILocation(line: 949, column: 7, scope: !5910)
!5924 = !DILocation(line: 950, column: 5, scope: !5922)
!5925 = !DILocation(line: 954, column: 9, scope: !5926)
!5926 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 954, column: 7)
!5927 = !DILocation(line: 954, column: 7, scope: !5910)
!5928 = !DILocation(line: 955, column: 14, scope: !5929)
!5929 = distinct !DILexicalBlock(scope: !5926, file: !3, line: 955, column: 5)
!5930 = !DILocation(line: 955, column: 12, scope: !5929)
!5931 = !DILocation(line: 955, column: 42, scope: !5929)
!5932 = !DILocation(line: 955, column: 10, scope: !5929)
!5933 = !DILocation(line: 955, column: 47, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5929, file: !3, line: 955, column: 5)
!5935 = !DILocation(line: 955, column: 5, scope: !5929)
!5936 = !DILocation(line: 956, column: 11, scope: !5937)
!5937 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 956, column: 11)
!5938 = !DILocation(line: 956, column: 21, scope: !5937)
!5939 = !DILocation(line: 956, column: 27, scope: !5937)
!5940 = !DILocation(line: 956, column: 31, scope: !5937)
!5941 = !DILocation(line: 956, column: 41, scope: !5937)
!5942 = !DILocation(line: 956, column: 46, scope: !5937)
!5943 = !DILocation(line: 956, column: 49, scope: !5937)
!5944 = !DILocation(line: 956, column: 58, scope: !5937)
!5945 = !DILocation(line: 956, column: 11, scope: !5934)
!5946 = !DILocation(line: 957, column: 2, scope: !5937)
!5947 = !DILocation(line: 956, column: 62, scope: !5937)
!5948 = !DILocation(line: 955, column: 54, scope: !5934)
!5949 = !DILocation(line: 955, column: 57, scope: !5934)
!5950 = !DILocation(line: 955, column: 52, scope: !5934)
!5951 = !DILocation(line: 955, column: 72, scope: !5934)
!5952 = !DILocation(line: 955, column: 5, scope: !5934)
!5953 = distinct !{!5953, !5935, !5954}
!5954 = !DILocation(line: 957, column: 2, scope: !5929)
!5955 = !DILocation(line: 959, column: 12, scope: !5956)
!5956 = distinct !DILexicalBlock(scope: !5910, file: !3, line: 959, column: 3)
!5957 = !DILocation(line: 959, column: 10, scope: !5956)
!5958 = !DILocation(line: 959, column: 8, scope: !5956)
!5959 = !DILocation(line: 959, column: 30, scope: !5960)
!5960 = distinct !DILexicalBlock(scope: !5956, file: !3, line: 959, column: 3)
!5961 = !DILocation(line: 959, column: 3, scope: !5956)
!5962 = !DILocalVariable(name: "delete_p", scope: !5963, file: !3, line: 961, type: !2948)
!5963 = distinct !DILexicalBlock(scope: !5960, file: !3, line: 960, column: 5)
!5964 = !DILocation(line: 961, column: 11, scope: !5963)
!5965 = !DILocation(line: 963, column: 14, scope: !5963)
!5966 = !DILocation(line: 963, column: 17, scope: !5963)
!5967 = !DILocation(line: 963, column: 12, scope: !5963)
!5968 = !DILocation(line: 965, column: 11, scope: !5969)
!5969 = distinct !DILexicalBlock(scope: !5963, file: !3, line: 965, column: 11)
!5970 = !DILocation(line: 965, column: 30, scope: !5969)
!5971 = !DILocation(line: 965, column: 11, scope: !5963)
!5972 = !DILocation(line: 966, column: 2, scope: !5969)
!5973 = !DILocation(line: 968, column: 16, scope: !5974)
!5974 = distinct !DILexicalBlock(scope: !5963, file: !3, line: 968, column: 7)
!5975 = !DILocation(line: 968, column: 19, scope: !5974)
!5976 = !DILocation(line: 968, column: 14, scope: !5974)
!5977 = !DILocation(line: 968, column: 12, scope: !5974)
!5978 = !DILocation(line: 968, column: 25, scope: !5979)
!5979 = distinct !DILexicalBlock(scope: !5974, file: !3, line: 968, column: 7)
!5980 = !DILocation(line: 968, column: 7, scope: !5974)
!5981 = !DILocalVariable(name: "delete_q", scope: !5982, file: !3, line: 970, type: !2948)
!5982 = distinct !DILexicalBlock(scope: !5979, file: !3, line: 969, column: 2)
!5983 = !DILocation(line: 970, column: 15, scope: !5982)
!5984 = !DILocation(line: 972, column: 13, scope: !5982)
!5985 = !DILocation(line: 972, column: 16, scope: !5982)
!5986 = !DILocation(line: 972, column: 11, scope: !5982)
!5987 = !DILocation(line: 974, column: 8, scope: !5988)
!5988 = distinct !DILexicalBlock(scope: !5982, file: !3, line: 974, column: 8)
!5989 = !DILocation(line: 974, column: 27, scope: !5988)
!5990 = !DILocation(line: 974, column: 8, scope: !5982)
!5991 = !DILocation(line: 975, column: 6, scope: !5988)
!5992 = !DILocation(line: 977, column: 8, scope: !5993)
!5993 = distinct !DILexicalBlock(scope: !5982, file: !3, line: 977, column: 8)
!5994 = !DILocation(line: 977, column: 11, scope: !5993)
!5995 = !DILocation(line: 977, column: 25, scope: !5993)
!5996 = !DILocation(line: 977, column: 28, scope: !5993)
!5997 = !DILocation(line: 977, column: 23, scope: !5993)
!5998 = !DILocation(line: 977, column: 41, scope: !5993)
!5999 = !DILocation(line: 977, column: 44, scope: !5993)
!6000 = !DILocation(line: 977, column: 38, scope: !5993)
!6001 = !DILocation(line: 977, column: 8, scope: !5982)
!6002 = !DILocation(line: 980, column: 19, scope: !6003)
!6003 = distinct !DILexicalBlock(scope: !5993, file: !3, line: 978, column: 6)
!6004 = !DILocation(line: 980, column: 22, scope: !6003)
!6005 = !DILocation(line: 980, column: 8, scope: !6003)
!6006 = !DILocation(line: 980, column: 11, scope: !6003)
!6007 = !DILocation(line: 980, column: 16, scope: !6003)
!6008 = !DILocation(line: 981, column: 24, scope: !6003)
!6009 = !DILocation(line: 981, column: 27, scope: !6003)
!6010 = !DILocation(line: 981, column: 8, scope: !6003)
!6011 = !DILocation(line: 981, column: 11, scope: !6003)
!6012 = !DILocation(line: 981, column: 21, scope: !6003)
!6013 = !DILocation(line: 982, column: 17, scope: !6003)
!6014 = !DILocation(line: 983, column: 6, scope: !6003)
!6015 = !DILocation(line: 984, column: 13, scope: !6016)
!6016 = distinct !DILexicalBlock(scope: !5993, file: !3, line: 984, column: 13)
!6017 = !DILocation(line: 984, column: 16, scope: !6016)
!6018 = !DILocation(line: 984, column: 30, scope: !6016)
!6019 = !DILocation(line: 984, column: 33, scope: !6016)
!6020 = !DILocation(line: 984, column: 28, scope: !6016)
!6021 = !DILocation(line: 984, column: 46, scope: !6016)
!6022 = !DILocation(line: 984, column: 49, scope: !6016)
!6023 = !DILocation(line: 984, column: 43, scope: !6016)
!6024 = !DILocation(line: 984, column: 13, scope: !5993)
!6025 = !DILocation(line: 987, column: 19, scope: !6026)
!6026 = distinct !DILexicalBlock(scope: !6016, file: !3, line: 985, column: 6)
!6027 = !DILocation(line: 987, column: 22, scope: !6026)
!6028 = !DILocation(line: 987, column: 8, scope: !6026)
!6029 = !DILocation(line: 987, column: 11, scope: !6026)
!6030 = !DILocation(line: 987, column: 16, scope: !6026)
!6031 = !DILocation(line: 988, column: 24, scope: !6026)
!6032 = !DILocation(line: 988, column: 27, scope: !6026)
!6033 = !DILocation(line: 988, column: 8, scope: !6026)
!6034 = !DILocation(line: 988, column: 11, scope: !6026)
!6035 = !DILocation(line: 988, column: 21, scope: !6026)
!6036 = !DILocation(line: 989, column: 17, scope: !6026)
!6037 = !DILocation(line: 990, column: 8, scope: !6026)
!6038 = !DILocation(line: 992, column: 8, scope: !6039)
!6039 = distinct !DILexicalBlock(scope: !5982, file: !3, line: 992, column: 8)
!6040 = !DILocation(line: 992, column: 8, scope: !5982)
!6041 = !DILocation(line: 993, column: 26, scope: !6039)
!6042 = !DILocation(line: 993, column: 6, scope: !6039)
!6043 = !DILocation(line: 994, column: 2, scope: !5982)
!6044 = !DILocation(line: 968, column: 32, scope: !5979)
!6045 = !DILocation(line: 968, column: 30, scope: !5979)
!6046 = !DILocation(line: 968, column: 7, scope: !5979)
!6047 = distinct !{!6047, !5980, !6048}
!6048 = !DILocation(line: 994, column: 2, scope: !5974)
!6049 = !DILocation(line: 997, column: 11, scope: !6050)
!6050 = distinct !DILexicalBlock(scope: !5963, file: !3, line: 997, column: 11)
!6051 = !DILocation(line: 997, column: 11, scope: !5963)
!6052 = !DILocation(line: 998, column: 22, scope: !6050)
!6053 = !DILocation(line: 998, column: 2, scope: !6050)
!6054 = !DILocation(line: 999, column: 5, scope: !5963)
!6055 = !DILocation(line: 959, column: 37, scope: !5960)
!6056 = !DILocation(line: 959, column: 35, scope: !5960)
!6057 = !DILocation(line: 959, column: 3, scope: !5960)
!6058 = distinct !{!6058, !5961, !6059}
!6059 = !DILocation(line: 999, column: 5, scope: !5956)
!6060 = !DILocation(line: 1000, column: 1, scope: !5910)
!6061 = distinct !DISubprogram(name: "push_temp_slots", scope: !3, file: !3, line: 1190, type: !4467, scopeLine: 1191, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6062 = !DILocation(line: 1192, column: 18, scope: !6061)
!6063 = !DILocation(line: 1193, column: 1, scope: !6061)
!6064 = distinct !DISubprogram(name: "pop_temp_slots", scope: !3, file: !3, line: 1199, type: !4467, scopeLine: 1200, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6065 = !DILocalVariable(name: "p", scope: !6064, file: !3, line: 1201, type: !2918)
!6066 = !DILocation(line: 1201, column: 21, scope: !6064)
!6067 = !DILocalVariable(name: "next", scope: !6064, file: !3, line: 1201, type: !2918)
!6068 = !DILocation(line: 1201, column: 25, scope: !6064)
!6069 = !DILocalVariable(name: "some_available", scope: !6064, file: !3, line: 1202, type: !3158)
!6070 = !DILocation(line: 1202, column: 8, scope: !6064)
!6071 = !DILocation(line: 1204, column: 34, scope: !6072)
!6072 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 1204, column: 3)
!6073 = !DILocation(line: 1204, column: 13, scope: !6072)
!6074 = !DILocation(line: 1204, column: 12, scope: !6072)
!6075 = !DILocation(line: 1204, column: 10, scope: !6072)
!6076 = !DILocation(line: 1204, column: 8, scope: !6072)
!6077 = !DILocation(line: 1204, column: 52, scope: !6078)
!6078 = distinct !DILexicalBlock(scope: !6072, file: !3, line: 1204, column: 3)
!6079 = !DILocation(line: 1204, column: 3, scope: !6072)
!6080 = !DILocation(line: 1206, column: 14, scope: !6081)
!6081 = distinct !DILexicalBlock(scope: !6078, file: !3, line: 1205, column: 5)
!6082 = !DILocation(line: 1206, column: 17, scope: !6081)
!6083 = !DILocation(line: 1206, column: 12, scope: !6081)
!6084 = !DILocation(line: 1207, column: 28, scope: !6081)
!6085 = !DILocation(line: 1207, column: 7, scope: !6081)
!6086 = !DILocation(line: 1208, column: 22, scope: !6081)
!6087 = !DILocation(line: 1209, column: 5, scope: !6081)
!6088 = !DILocation(line: 1204, column: 59, scope: !6078)
!6089 = !DILocation(line: 1204, column: 57, scope: !6078)
!6090 = !DILocation(line: 1204, column: 3, scope: !6078)
!6091 = distinct !{!6091, !6079, !6092}
!6092 = !DILocation(line: 1209, column: 5, scope: !6072)
!6093 = !DILocation(line: 1211, column: 7, scope: !6094)
!6094 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 1211, column: 7)
!6095 = !DILocation(line: 1211, column: 7, scope: !6064)
!6096 = !DILocation(line: 1213, column: 7, scope: !6097)
!6097 = distinct !DILexicalBlock(scope: !6094, file: !3, line: 1212, column: 5)
!6098 = !DILocation(line: 1214, column: 7, scope: !6097)
!6099 = !DILocation(line: 1215, column: 5, scope: !6097)
!6100 = !DILocation(line: 1217, column: 18, scope: !6064)
!6101 = !DILocation(line: 1218, column: 1, scope: !6064)
!6102 = distinct !DISubprogram(name: "init_temp_slots", scope: !3, file: !3, line: 1223, type: !4467, scopeLine: 1224, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6103 = !DILocation(line: 1226, column: 20, scope: !6102)
!6104 = !DILocation(line: 1227, column: 19, scope: !6102)
!6105 = !DILocation(line: 1228, column: 19, scope: !6102)
!6106 = !DILocation(line: 1231, column: 9, scope: !6107)
!6107 = distinct !DILexicalBlock(scope: !6102, file: !3, line: 1231, column: 7)
!6108 = !DILocation(line: 1231, column: 7, scope: !6102)
!6109 = !DILocation(line: 1232, column: 31, scope: !6107)
!6110 = !DILocation(line: 1232, column: 29, scope: !6107)
!6111 = !DILocation(line: 1232, column: 5, scope: !6107)
!6112 = !DILocation(line: 1237, column: 17, scope: !6107)
!6113 = !DILocation(line: 1237, column: 5, scope: !6107)
!6114 = !DILocation(line: 1238, column: 1, scope: !6102)
!6115 = distinct !DISubprogram(name: "temp_slot_address_hash", scope: !3, file: !3, line: 581, type: !3382, scopeLine: 582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6116 = !DILocalVariable(name: "p", arg: 1, scope: !6115, file: !3, line: 581, type: !3385)
!6117 = !DILocation(line: 581, column: 37, scope: !6115)
!6118 = !DILocalVariable(name: "t", scope: !6115, file: !3, line: 583, type: !4337)
!6119 = !DILocation(line: 583, column: 41, scope: !6115)
!6120 = !DILocation(line: 584, column: 48, scope: !6115)
!6121 = !DILocation(line: 584, column: 7, scope: !6115)
!6122 = !DILocation(line: 584, column: 5, scope: !6115)
!6123 = !DILocation(line: 585, column: 10, scope: !6115)
!6124 = !DILocation(line: 585, column: 13, scope: !6115)
!6125 = !DILocation(line: 585, column: 3, scope: !6115)
!6126 = distinct !DISubprogram(name: "temp_slot_address_eq", scope: !3, file: !3, line: 590, type: !3390, scopeLine: 591, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6127 = !DILocalVariable(name: "p1", arg: 1, scope: !6126, file: !3, line: 590, type: !3385)
!6128 = !DILocation(line: 590, column: 35, scope: !6126)
!6129 = !DILocalVariable(name: "p2", arg: 2, scope: !6126, file: !3, line: 590, type: !3385)
!6130 = !DILocation(line: 590, column: 51, scope: !6126)
!6131 = !DILocalVariable(name: "t1", scope: !6126, file: !3, line: 592, type: !4337)
!6132 = !DILocation(line: 592, column: 41, scope: !6126)
!6133 = !DILocalVariable(name: "t2", scope: !6126, file: !3, line: 592, type: !4337)
!6134 = !DILocation(line: 592, column: 46, scope: !6126)
!6135 = !DILocation(line: 593, column: 49, scope: !6126)
!6136 = !DILocation(line: 593, column: 8, scope: !6126)
!6137 = !DILocation(line: 593, column: 6, scope: !6126)
!6138 = !DILocation(line: 594, column: 49, scope: !6126)
!6139 = !DILocation(line: 594, column: 8, scope: !6126)
!6140 = !DILocation(line: 594, column: 6, scope: !6126)
!6141 = !DILocation(line: 595, column: 23, scope: !6126)
!6142 = !DILocation(line: 595, column: 27, scope: !6126)
!6143 = !DILocation(line: 595, column: 36, scope: !6126)
!6144 = !DILocation(line: 595, column: 40, scope: !6126)
!6145 = !DILocation(line: 595, column: 10, scope: !6126)
!6146 = !DILocation(line: 595, column: 3, scope: !6126)
!6147 = distinct !DISubprogram(name: "instantiate_decl_rtl", scope: !3, file: !3, line: 1660, type: !5619, scopeLine: 1661, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6148 = !DILocalVariable(name: "x", arg: 1, scope: !6147, file: !3, line: 1660, type: !2924)
!6149 = !DILocation(line: 1660, column: 27, scope: !6147)
!6150 = !DILocalVariable(name: "addr", scope: !6147, file: !3, line: 1662, type: !2924)
!6151 = !DILocation(line: 1662, column: 7, scope: !6147)
!6152 = !DILocation(line: 1664, column: 7, scope: !6153)
!6153 = distinct !DILexicalBlock(scope: !6147, file: !3, line: 1664, column: 7)
!6154 = !DILocation(line: 1664, column: 9, scope: !6153)
!6155 = !DILocation(line: 1664, column: 7, scope: !6147)
!6156 = !DILocation(line: 1665, column: 5, scope: !6153)
!6157 = !DILocation(line: 1668, column: 7, scope: !6158)
!6158 = distinct !DILexicalBlock(scope: !6147, file: !3, line: 1668, column: 7)
!6159 = !DILocation(line: 1668, column: 20, scope: !6158)
!6160 = !DILocation(line: 1668, column: 7, scope: !6147)
!6161 = !DILocation(line: 1670, column: 29, scope: !6162)
!6162 = distinct !DILexicalBlock(scope: !6158, file: !3, line: 1669, column: 5)
!6163 = !DILocation(line: 1670, column: 7, scope: !6162)
!6164 = !DILocation(line: 1671, column: 29, scope: !6162)
!6165 = !DILocation(line: 1671, column: 7, scope: !6162)
!6166 = !DILocation(line: 1672, column: 7, scope: !6162)
!6167 = !DILocation(line: 1677, column: 8, scope: !6168)
!6168 = distinct !DILexicalBlock(scope: !6147, file: !3, line: 1677, column: 7)
!6169 = !DILocation(line: 1677, column: 7, scope: !6147)
!6170 = !DILocation(line: 1678, column: 5, scope: !6168)
!6171 = !DILocation(line: 1680, column: 10, scope: !6147)
!6172 = !DILocation(line: 1680, column: 8, scope: !6147)
!6173 = !DILocation(line: 1681, column: 7, scope: !6174)
!6174 = distinct !DILexicalBlock(scope: !6147, file: !3, line: 1681, column: 7)
!6175 = !DILocation(line: 1682, column: 7, scope: !6174)
!6176 = !DILocation(line: 1682, column: 11, scope: !6174)
!6177 = !DILocation(line: 1683, column: 4, scope: !6174)
!6178 = !DILocation(line: 1683, column: 8, scope: !6174)
!6179 = !DILocation(line: 1683, column: 21, scope: !6174)
!6180 = !DILocation(line: 1684, column: 8, scope: !6174)
!6181 = !DILocation(line: 1684, column: 11, scope: !6174)
!6182 = !DILocation(line: 1684, column: 24, scope: !6174)
!6183 = !DILocation(line: 1681, column: 7, scope: !6147)
!6184 = !DILocation(line: 1685, column: 5, scope: !6174)
!6185 = !DILocation(line: 1687, column: 18, scope: !6147)
!6186 = !DILocation(line: 1687, column: 3, scope: !6147)
!6187 = !DILocation(line: 1688, column: 1, scope: !6147)
!6188 = distinct !DISubprogram(name: "rhs_regno", scope: !385, file: !385, line: 1051, type: !6189, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6189 = !DISubroutineType(types: !6190)
!6190 = !{!7, !6191}
!6191 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !2925, line: 51, baseType: !6192)
!6192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6193, size: 64)
!6193 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2927)
!6194 = !DILocalVariable(name: "x", arg: 1, scope: !6188, file: !385, line: 1051, type: !6191)
!6195 = !DILocation(line: 1051, column: 22, scope: !6188)
!6196 = !DILocation(line: 1053, column: 10, scope: !6188)
!6197 = !DILocation(line: 1053, column: 3, scope: !6188)
!6198 = distinct !DISubprogram(name: "instantiate_virtual_regs_in_rtx", scope: !3, file: !3, line: 1340, type: !6199, scopeLine: 1341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6199 = !DISubroutineType(types: !6200)
!6200 = !{!2948, !6201, !3035}
!6201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2924, size: 64)
!6202 = !DILocalVariable(name: "loc", arg: 1, scope: !6198, file: !3, line: 1340, type: !6201)
!6203 = !DILocation(line: 1340, column: 39, scope: !6198)
!6204 = !DILocalVariable(name: "data", arg: 2, scope: !6198, file: !3, line: 1340, type: !3035)
!6205 = !DILocation(line: 1340, column: 50, scope: !6198)
!6206 = !DILocalVariable(name: "offset", scope: !6198, file: !3, line: 1342, type: !3014)
!6207 = !DILocation(line: 1342, column: 17, scope: !6198)
!6208 = !DILocalVariable(name: "changed", scope: !6198, file: !3, line: 1343, type: !4339)
!6209 = !DILocation(line: 1343, column: 9, scope: !6198)
!6210 = !DILocation(line: 1343, column: 28, scope: !6198)
!6211 = !DILocalVariable(name: "x", scope: !6198, file: !3, line: 1344, type: !2924)
!6212 = !DILocation(line: 1344, column: 7, scope: !6198)
!6213 = !DILocalVariable(name: "new_rtx", scope: !6198, file: !3, line: 1344, type: !2924)
!6214 = !DILocation(line: 1344, column: 10, scope: !6198)
!6215 = !DILocation(line: 1346, column: 8, scope: !6198)
!6216 = !DILocation(line: 1346, column: 7, scope: !6198)
!6217 = !DILocation(line: 1346, column: 5, scope: !6198)
!6218 = !DILocation(line: 1347, column: 7, scope: !6219)
!6219 = distinct !DILexicalBlock(scope: !6198, file: !3, line: 1347, column: 7)
!6220 = !DILocation(line: 1347, column: 9, scope: !6219)
!6221 = !DILocation(line: 1347, column: 7, scope: !6198)
!6222 = !DILocation(line: 1348, column: 5, scope: !6219)
!6223 = !DILocation(line: 1350, column: 11, scope: !6198)
!6224 = !DILocation(line: 1350, column: 3, scope: !6198)
!6225 = !DILocation(line: 1353, column: 38, scope: !6226)
!6226 = distinct !DILexicalBlock(scope: !6198, file: !3, line: 1351, column: 5)
!6227 = !DILocation(line: 1353, column: 17, scope: !6226)
!6228 = !DILocation(line: 1353, column: 15, scope: !6226)
!6229 = !DILocation(line: 1354, column: 11, scope: !6230)
!6230 = distinct !DILexicalBlock(scope: !6226, file: !3, line: 1354, column: 11)
!6231 = !DILocation(line: 1354, column: 11, scope: !6226)
!6232 = !DILocation(line: 1356, column: 26, scope: !6233)
!6233 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 1355, column: 2)
!6234 = !DILocation(line: 1356, column: 35, scope: !6233)
!6235 = !DILocation(line: 1356, column: 11, scope: !6233)
!6236 = !DILocation(line: 1356, column: 5, scope: !6233)
!6237 = !DILocation(line: 1356, column: 9, scope: !6233)
!6238 = !DILocation(line: 1357, column: 8, scope: !6239)
!6239 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 1357, column: 8)
!6240 = !DILocation(line: 1357, column: 8, scope: !6233)
!6241 = !DILocation(line: 1358, column: 7, scope: !6239)
!6242 = !DILocation(line: 1358, column: 15, scope: !6239)
!6243 = !DILocation(line: 1358, column: 6, scope: !6239)
!6244 = !DILocation(line: 1359, column: 2, scope: !6233)
!6245 = !DILocation(line: 1360, column: 7, scope: !6226)
!6246 = !DILocation(line: 1363, column: 38, scope: !6226)
!6247 = !DILocation(line: 1363, column: 17, scope: !6226)
!6248 = !DILocation(line: 1363, column: 15, scope: !6226)
!6249 = !DILocation(line: 1364, column: 11, scope: !6250)
!6250 = distinct !DILexicalBlock(scope: !6226, file: !3, line: 1364, column: 11)
!6251 = !DILocation(line: 1364, column: 11, scope: !6226)
!6252 = !DILocation(line: 1366, column: 29, scope: !6253)
!6253 = distinct !DILexicalBlock(scope: !6250, file: !3, line: 1365, column: 2)
!6254 = !DILocation(line: 1366, column: 38, scope: !6253)
!6255 = !DILocation(line: 1366, column: 14, scope: !6253)
!6256 = !DILocation(line: 1366, column: 12, scope: !6253)
!6257 = !DILocation(line: 1367, column: 38, scope: !6253)
!6258 = !DILocation(line: 1367, column: 52, scope: !6253)
!6259 = !DILocation(line: 1367, column: 61, scope: !6253)
!6260 = !DILocation(line: 1367, column: 11, scope: !6253)
!6261 = !DILocation(line: 1367, column: 5, scope: !6253)
!6262 = !DILocation(line: 1367, column: 9, scope: !6253)
!6263 = !DILocation(line: 1368, column: 8, scope: !6264)
!6264 = distinct !DILexicalBlock(scope: !6253, file: !3, line: 1368, column: 8)
!6265 = !DILocation(line: 1368, column: 8, scope: !6253)
!6266 = !DILocation(line: 1369, column: 7, scope: !6264)
!6267 = !DILocation(line: 1369, column: 15, scope: !6264)
!6268 = !DILocation(line: 1369, column: 6, scope: !6264)
!6269 = !DILocation(line: 1370, column: 4, scope: !6253)
!6270 = !DILocation(line: 1377, column: 7, scope: !6226)
!6271 = !DILocation(line: 1380, column: 7, scope: !6226)
!6272 = !DILocation(line: 1383, column: 3, scope: !6198)
!6273 = !DILocation(line: 1384, column: 1, scope: !6198)
!6274 = distinct !DISubprogram(name: "instantiate_virtual_regs", scope: !3, file: !3, line: 1769, type: !4366, scopeLine: 1770, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6275 = !DILocalVariable(name: "insn", scope: !6274, file: !3, line: 1771, type: !2924)
!6276 = !DILocation(line: 1771, column: 7, scope: !6274)
!6277 = !DILocation(line: 1774, column: 17, scope: !6274)
!6278 = !DILocation(line: 1775, column: 14, scope: !6274)
!6279 = !DILocation(line: 1776, column: 20, scope: !6274)
!6280 = !DILocation(line: 1776, column: 18, scope: !6274)
!6281 = !DILocation(line: 1777, column: 18, scope: !6274)
!6282 = !DILocation(line: 1781, column: 16, scope: !6274)
!6283 = !DILocation(line: 1781, column: 14, scope: !6274)
!6284 = !DILocation(line: 1785, column: 3, scope: !6274)
!6285 = !DILocation(line: 1789, column: 15, scope: !6286)
!6286 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 1789, column: 3)
!6287 = !DILocation(line: 1789, column: 13, scope: !6286)
!6288 = !DILocation(line: 1789, column: 8, scope: !6286)
!6289 = !DILocation(line: 1789, column: 29, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6286, file: !3, line: 1789, column: 3)
!6291 = !DILocation(line: 1789, column: 3, scope: !6286)
!6292 = !DILocation(line: 1790, column: 9, scope: !6293)
!6293 = distinct !DILexicalBlock(scope: !6290, file: !3, line: 1790, column: 9)
!6294 = !DILocation(line: 1790, column: 9, scope: !6290)
!6295 = !DILocation(line: 1794, column: 6, scope: !6296)
!6296 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 1794, column: 6)
!6297 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 1791, column: 7)
!6298 = !DILocation(line: 1794, column: 32, scope: !6296)
!6299 = !DILocation(line: 1795, column: 6, scope: !6296)
!6300 = !DILocation(line: 1795, column: 9, scope: !6296)
!6301 = !DILocation(line: 1795, column: 35, scope: !6296)
!6302 = !DILocation(line: 1796, column: 6, scope: !6296)
!6303 = !DILocation(line: 1796, column: 9, scope: !6296)
!6304 = !DILocation(line: 1796, column: 35, scope: !6296)
!6305 = !DILocation(line: 1797, column: 6, scope: !6296)
!6306 = !DILocation(line: 1797, column: 9, scope: !6296)
!6307 = !DILocation(line: 1797, column: 35, scope: !6296)
!6308 = !DILocation(line: 1798, column: 6, scope: !6296)
!6309 = !DILocation(line: 1798, column: 9, scope: !6296)
!6310 = !DILocation(line: 1798, column: 35, scope: !6296)
!6311 = !DILocation(line: 1794, column: 6, scope: !6297)
!6312 = !DILocation(line: 1799, column: 4, scope: !6296)
!6313 = !DILocation(line: 1800, column: 11, scope: !6314)
!6314 = distinct !DILexicalBlock(scope: !6296, file: !3, line: 1800, column: 11)
!6315 = !DILocation(line: 1800, column: 11, scope: !6296)
!6316 = !DILocation(line: 1801, column: 19, scope: !6314)
!6317 = !DILocation(line: 1801, column: 4, scope: !6314)
!6318 = !DILocation(line: 1804, column: 38, scope: !6314)
!6319 = !DILocation(line: 1804, column: 4, scope: !6314)
!6320 = !DILocation(line: 1806, column: 6, scope: !6321)
!6321 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 1806, column: 6)
!6322 = !DILocation(line: 1806, column: 6, scope: !6297)
!6323 = !DILocation(line: 1807, column: 4, scope: !6321)
!6324 = !DILocation(line: 1809, column: 17, scope: !6297)
!6325 = !DILocation(line: 1809, column: 2, scope: !6297)
!6326 = !DILocation(line: 1812, column: 6, scope: !6327)
!6327 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 1812, column: 6)
!6328 = !DILocation(line: 1812, column: 6, scope: !6297)
!6329 = !DILocation(line: 1813, column: 19, scope: !6327)
!6330 = !DILocation(line: 1813, column: 4, scope: !6327)
!6331 = !DILocation(line: 1815, column: 7, scope: !6297)
!6332 = !DILocation(line: 1789, column: 42, scope: !6290)
!6333 = !DILocation(line: 1789, column: 40, scope: !6290)
!6334 = !DILocation(line: 1789, column: 3, scope: !6290)
!6335 = distinct !{!6335, !6291, !6336}
!6336 = !DILocation(line: 1815, column: 7, scope: !6286)
!6337 = !DILocation(line: 1818, column: 22, scope: !6274)
!6338 = !DILocation(line: 1818, column: 3, scope: !6274)
!6339 = !DILocation(line: 1820, column: 11, scope: !6274)
!6340 = !DILocation(line: 1820, column: 3, scope: !6274)
!6341 = !DILocation(line: 1824, column: 25, scope: !6274)
!6342 = !DILocation(line: 1825, column: 3, scope: !6274)
!6343 = distinct !DISubprogram(name: "aggregate_value_p", scope: !3, file: !3, line: 1854, type: !6344, scopeLine: 1855, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6344 = !DISubroutineType(types: !6345)
!6345 = !{!2948, !6346, !6346}
!6346 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !2925, line: 59, baseType: !6347)
!6347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6348, size: 64)
!6348 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3047)
!6349 = !DILocalVariable(name: "exp", arg: 1, scope: !6343, file: !3, line: 1854, type: !6346)
!6350 = !DILocation(line: 1854, column: 31, scope: !6343)
!6351 = !DILocalVariable(name: "fntype", arg: 2, scope: !6343, file: !3, line: 1854, type: !6346)
!6352 = !DILocation(line: 1854, column: 47, scope: !6343)
!6353 = !DILocalVariable(name: "i", scope: !6343, file: !3, line: 1856, type: !2948)
!6354 = !DILocation(line: 1856, column: 7, scope: !6343)
!6355 = !DILocalVariable(name: "regno", scope: !6343, file: !3, line: 1856, type: !2948)
!6356 = !DILocation(line: 1856, column: 10, scope: !6343)
!6357 = !DILocalVariable(name: "nregs", scope: !6343, file: !3, line: 1856, type: !2948)
!6358 = !DILocation(line: 1856, column: 17, scope: !6343)
!6359 = !DILocalVariable(name: "reg", scope: !6343, file: !3, line: 1857, type: !2924)
!6360 = !DILocation(line: 1857, column: 7, scope: !6343)
!6361 = !DILocalVariable(name: "type", scope: !6343, file: !3, line: 1859, type: !6346)
!6362 = !DILocation(line: 1859, column: 14, scope: !6343)
!6363 = !DILocation(line: 1859, column: 22, scope: !6343)
!6364 = !DILocation(line: 1859, column: 21, scope: !6343)
!6365 = !DILocation(line: 1859, column: 38, scope: !6343)
!6366 = !DILocation(line: 1859, column: 44, scope: !6343)
!6367 = !DILocalVariable(name: "fndecl", scope: !6343, file: !3, line: 1864, type: !6346)
!6368 = !DILocation(line: 1864, column: 14, scope: !6343)
!6369 = !DILocation(line: 1866, column: 7, scope: !6370)
!6370 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1866, column: 7)
!6371 = !DILocation(line: 1866, column: 7, scope: !6343)
!6372 = !DILocation(line: 1867, column: 13, scope: !6370)
!6373 = !DILocation(line: 1867, column: 5, scope: !6370)
!6374 = !DILocation(line: 1870, column: 30, scope: !6375)
!6375 = distinct !DILexicalBlock(scope: !6370, file: !3, line: 1868, column: 7)
!6376 = !DILocation(line: 1870, column: 11, scope: !6375)
!6377 = !DILocation(line: 1870, column: 9, scope: !6375)
!6378 = !DILocation(line: 1871, column: 12, scope: !6375)
!6379 = !DILocation(line: 1872, column: 7, scope: !6375)
!6380 = !DILocation(line: 1873, column: 7, scope: !6375)
!6381 = !DILocation(line: 1871, column: 9, scope: !6375)
!6382 = !DILocation(line: 1874, column: 2, scope: !6375)
!6383 = !DILocation(line: 1876, column: 11, scope: !6375)
!6384 = !DILocation(line: 1876, column: 9, scope: !6375)
!6385 = !DILocation(line: 1877, column: 11, scope: !6375)
!6386 = !DILocation(line: 1877, column: 9, scope: !6375)
!6387 = !DILocation(line: 1878, column: 2, scope: !6375)
!6388 = !DILocation(line: 1881, column: 9, scope: !6375)
!6389 = !DILocation(line: 1883, column: 9, scope: !6375)
!6390 = !DILocation(line: 1884, column: 2, scope: !6375)
!6391 = !DILocation(line: 1887, column: 2, scope: !6375)
!6392 = !DILocation(line: 1888, column: 7, scope: !6375)
!6393 = !DILocation(line: 1890, column: 7, scope: !6394)
!6394 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1890, column: 7)
!6395 = !DILocation(line: 1890, column: 24, scope: !6394)
!6396 = !DILocation(line: 1890, column: 7, scope: !6343)
!6397 = !DILocation(line: 1891, column: 5, scope: !6394)
!6398 = !DILocation(line: 1895, column: 7, scope: !6399)
!6399 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1895, column: 7)
!6400 = !DILocation(line: 1895, column: 24, scope: !6399)
!6401 = !DILocation(line: 1895, column: 39, scope: !6399)
!6402 = !DILocation(line: 1895, column: 42, scope: !6399)
!6403 = !DILocation(line: 1895, column: 7, scope: !6343)
!6404 = !DILocation(line: 1896, column: 44, scope: !6399)
!6405 = !DILocation(line: 1896, column: 31, scope: !6399)
!6406 = !DILocation(line: 1896, column: 51, scope: !6399)
!6407 = !DILocation(line: 1896, column: 12, scope: !6399)
!6408 = !DILocation(line: 1896, column: 5, scope: !6399)
!6409 = !DILocation(line: 1900, column: 8, scope: !6410)
!6410 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1900, column: 7)
!6411 = !DILocation(line: 1900, column: 24, scope: !6410)
!6412 = !DILocation(line: 1900, column: 37, scope: !6410)
!6413 = !DILocation(line: 1900, column: 40, scope: !6410)
!6414 = !DILocation(line: 1900, column: 56, scope: !6410)
!6415 = !DILocation(line: 1901, column: 7, scope: !6410)
!6416 = !DILocation(line: 1901, column: 10, scope: !6410)
!6417 = !DILocation(line: 1900, column: 7, scope: !6343)
!6418 = !DILocation(line: 1902, column: 5, scope: !6410)
!6419 = !DILocation(line: 1910, column: 7, scope: !6420)
!6420 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1910, column: 7)
!6421 = !DILocation(line: 1910, column: 23, scope: !6420)
!6422 = !DILocation(line: 1910, column: 36, scope: !6420)
!6423 = !DILocation(line: 1910, column: 39, scope: !6420)
!6424 = !DILocation(line: 1910, column: 46, scope: !6420)
!6425 = !DILocation(line: 1910, column: 49, scope: !6420)
!6426 = !DILocation(line: 1911, column: 7, scope: !6420)
!6427 = !DILocation(line: 1911, column: 10, scope: !6420)
!6428 = !DILocation(line: 1910, column: 7, scope: !6343)
!6429 = !DILocation(line: 1912, column: 5, scope: !6420)
!6430 = !DILocation(line: 1914, column: 21, scope: !6431)
!6431 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1914, column: 7)
!6432 = !DILocation(line: 1914, column: 39, scope: !6431)
!6433 = !DILocation(line: 1914, column: 45, scope: !6431)
!6434 = !DILocation(line: 1914, column: 7, scope: !6431)
!6435 = !DILocation(line: 1914, column: 7, scope: !6343)
!6436 = !DILocation(line: 1915, column: 5, scope: !6431)
!6437 = !DILocation(line: 1918, column: 7, scope: !6438)
!6438 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1918, column: 7)
!6439 = !DILocation(line: 1918, column: 7, scope: !6343)
!6440 = !DILocation(line: 1919, column: 5, scope: !6438)
!6441 = !DILocation(line: 1920, column: 7, scope: !6442)
!6442 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1920, column: 7)
!6443 = !DILocation(line: 1920, column: 30, scope: !6442)
!6444 = !DILocation(line: 1920, column: 33, scope: !6442)
!6445 = !DILocation(line: 1920, column: 7, scope: !6343)
!6446 = !DILocation(line: 1921, column: 5, scope: !6442)
!6447 = !DILocation(line: 1924, column: 30, scope: !6343)
!6448 = !DILocation(line: 1924, column: 39, scope: !6343)
!6449 = !DILocation(line: 1924, column: 9, scope: !6343)
!6450 = !DILocation(line: 1924, column: 7, scope: !6343)
!6451 = !DILocation(line: 1928, column: 8, scope: !6452)
!6452 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1928, column: 7)
!6453 = !DILocation(line: 1928, column: 7, scope: !6343)
!6454 = !DILocation(line: 1929, column: 5, scope: !6452)
!6455 = !DILocation(line: 1931, column: 11, scope: !6343)
!6456 = !DILocation(line: 1931, column: 9, scope: !6343)
!6457 = !DILocation(line: 1932, column: 28, scope: !6343)
!6458 = !DILocation(line: 1932, column: 11, scope: !6343)
!6459 = !DILocation(line: 1932, column: 35, scope: !6343)
!6460 = !DILocation(line: 1932, column: 9, scope: !6343)
!6461 = !DILocation(line: 1933, column: 10, scope: !6462)
!6462 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 1933, column: 3)
!6463 = !DILocation(line: 1933, column: 8, scope: !6462)
!6464 = !DILocation(line: 1933, column: 15, scope: !6465)
!6465 = distinct !DILexicalBlock(scope: !6462, file: !3, line: 1933, column: 3)
!6466 = !DILocation(line: 1933, column: 19, scope: !6465)
!6467 = !DILocation(line: 1933, column: 17, scope: !6465)
!6468 = !DILocation(line: 1933, column: 3, scope: !6462)
!6469 = !DILocation(line: 1934, column: 26, scope: !6470)
!6470 = distinct !DILexicalBlock(scope: !6465, file: !3, line: 1934, column: 9)
!6471 = !DILocation(line: 1934, column: 34, scope: !6470)
!6472 = !DILocation(line: 1934, column: 32, scope: !6470)
!6473 = !DILocation(line: 1934, column: 11, scope: !6470)
!6474 = !DILocation(line: 1934, column: 9, scope: !6465)
!6475 = !DILocation(line: 1935, column: 7, scope: !6470)
!6476 = !DILocation(line: 1934, column: 35, scope: !6470)
!6477 = !DILocation(line: 1933, column: 27, scope: !6465)
!6478 = !DILocation(line: 1933, column: 3, scope: !6465)
!6479 = distinct !{!6479, !6468, !6480}
!6480 = !DILocation(line: 1935, column: 14, scope: !6462)
!6481 = !DILocation(line: 1936, column: 3, scope: !6343)
!6482 = !DILocation(line: 1937, column: 1, scope: !6343)
!6483 = distinct !DISubprogram(name: "use_register_for_decl", scope: !3, file: !3, line: 1943, type: !6484, scopeLine: 1944, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6484 = !DISubroutineType(types: !6485)
!6485 = !{!3158, !6346}
!6486 = !DILocalVariable(name: "decl", arg: 1, scope: !6483, file: !3, line: 1943, type: !6346)
!6487 = !DILocation(line: 1943, column: 35, scope: !6483)
!6488 = !DILocation(line: 1945, column: 22, scope: !6489)
!6489 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 1945, column: 7)
!6490 = !DILocation(line: 1945, column: 8, scope: !6489)
!6491 = !DILocation(line: 1945, column: 7, scope: !6483)
!6492 = !DILocation(line: 1946, column: 5, scope: !6489)
!6493 = !DILocation(line: 1949, column: 7, scope: !6494)
!6494 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 1949, column: 7)
!6495 = !DILocation(line: 1949, column: 7, scope: !6483)
!6496 = !DILocation(line: 1950, column: 5, scope: !6494)
!6497 = !DILocation(line: 1953, column: 7, scope: !6498)
!6498 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 1953, column: 7)
!6499 = !DILocation(line: 1953, column: 7, scope: !6483)
!6500 = !DILocation(line: 1954, column: 5, scope: !6498)
!6501 = !DILocation(line: 1957, column: 7, scope: !6502)
!6502 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 1957, column: 7)
!6503 = !DILocation(line: 1957, column: 24, scope: !6502)
!6504 = !DILocation(line: 1957, column: 7, scope: !6483)
!6505 = !DILocation(line: 1958, column: 5, scope: !6502)
!6506 = !DILocation(line: 1964, column: 7, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 1964, column: 7)
!6508 = !DILocation(line: 1964, column: 24, scope: !6507)
!6509 = !DILocation(line: 1964, column: 27, scope: !6507)
!6510 = !DILocation(line: 1964, column: 7, scope: !6483)
!6511 = !DILocation(line: 1965, column: 5, scope: !6507)
!6512 = !DILocation(line: 1969, column: 7, scope: !6513)
!6513 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 1969, column: 7)
!6514 = !DILocation(line: 1969, column: 7, scope: !6483)
!6515 = !DILocation(line: 1970, column: 5, scope: !6513)
!6516 = !DILocation(line: 1972, column: 7, scope: !6517)
!6517 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 1972, column: 7)
!6518 = !DILocation(line: 1972, column: 7, scope: !6483)
!6519 = !DILocation(line: 1973, column: 5, scope: !6517)
!6520 = !DILocation(line: 1975, column: 8, scope: !6521)
!6521 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 1975, column: 7)
!6522 = !DILocation(line: 1975, column: 7, scope: !6483)
!6523 = !DILocation(line: 1976, column: 5, scope: !6521)
!6524 = !DILocation(line: 1978, column: 11, scope: !6483)
!6525 = !DILocation(line: 1978, column: 3, scope: !6483)
!6526 = !DILocation(line: 1986, column: 11, scope: !6527)
!6527 = distinct !DILexicalBlock(scope: !6528, file: !3, line: 1986, column: 11)
!6528 = distinct !DILexicalBlock(scope: !6483, file: !3, line: 1979, column: 5)
!6529 = !DILocation(line: 1986, column: 11, scope: !6528)
!6530 = !DILocation(line: 1987, column: 2, scope: !6527)
!6531 = !DILocation(line: 1988, column: 7, scope: !6528)
!6532 = !DILocation(line: 1990, column: 7, scope: !6528)
!6533 = !DILocation(line: 1993, column: 3, scope: !6483)
!6534 = !DILocation(line: 1994, column: 1, scope: !6483)
!6535 = distinct !DISubprogram(name: "pass_by_reference", scope: !3, file: !3, line: 1999, type: !6536, scopeLine: 2001, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6536 = !DISubroutineType(types: !6537)
!6537 = !{!3158, !6538, !13, !3045, !3158}
!6538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6539, size: 64)
!6539 = !DIDerivedType(tag: DW_TAG_typedef, name: "CUMULATIVE_ARGS", file: !380, line: 1598, baseType: !6540)
!6540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ix86_args", file: !380, line: 1579, size: 512, elements: !6541)
!6541 = !{!6542, !6543, !6544, !6545, !6546, !6547, !6548, !6549, !6550, !6551, !6552, !6553, !6554, !6555, !6556, !6557}
!6542 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !6540, file: !380, line: 1580, baseType: !2948, size: 32)
!6543 = !DIDerivedType(tag: DW_TAG_member, name: "nregs", scope: !6540, file: !380, line: 1581, baseType: !2948, size: 32, offset: 32)
!6544 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !6540, file: !380, line: 1582, baseType: !2948, size: 32, offset: 64)
!6545 = !DIDerivedType(tag: DW_TAG_member, name: "fastcall", scope: !6540, file: !380, line: 1583, baseType: !2948, size: 32, offset: 96)
!6546 = !DIDerivedType(tag: DW_TAG_member, name: "sse_words", scope: !6540, file: !380, line: 1584, baseType: !2948, size: 32, offset: 128)
!6547 = !DIDerivedType(tag: DW_TAG_member, name: "sse_nregs", scope: !6540, file: !380, line: 1585, baseType: !2948, size: 32, offset: 160)
!6548 = !DIDerivedType(tag: DW_TAG_member, name: "warn_avx", scope: !6540, file: !380, line: 1586, baseType: !2948, size: 32, offset: 192)
!6549 = !DIDerivedType(tag: DW_TAG_member, name: "warn_sse", scope: !6540, file: !380, line: 1587, baseType: !2948, size: 32, offset: 224)
!6550 = !DIDerivedType(tag: DW_TAG_member, name: "warn_mmx", scope: !6540, file: !380, line: 1588, baseType: !2948, size: 32, offset: 256)
!6551 = !DIDerivedType(tag: DW_TAG_member, name: "sse_regno", scope: !6540, file: !380, line: 1589, baseType: !2948, size: 32, offset: 288)
!6552 = !DIDerivedType(tag: DW_TAG_member, name: "mmx_words", scope: !6540, file: !380, line: 1590, baseType: !2948, size: 32, offset: 320)
!6553 = !DIDerivedType(tag: DW_TAG_member, name: "mmx_nregs", scope: !6540, file: !380, line: 1591, baseType: !2948, size: 32, offset: 352)
!6554 = !DIDerivedType(tag: DW_TAG_member, name: "mmx_regno", scope: !6540, file: !380, line: 1592, baseType: !2948, size: 32, offset: 384)
!6555 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_vaarg", scope: !6540, file: !380, line: 1593, baseType: !2948, size: 32, offset: 416)
!6556 = !DIDerivedType(tag: DW_TAG_member, name: "float_in_sse", scope: !6540, file: !380, line: 1594, baseType: !2948, size: 32, offset: 448)
!6557 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !6540, file: !380, line: 1596, baseType: !379, size: 32, offset: 480)
!6558 = !DILocalVariable(name: "ca", arg: 1, scope: !6535, file: !3, line: 1999, type: !6538)
!6559 = !DILocation(line: 1999, column: 37, scope: !6535)
!6560 = !DILocalVariable(name: "mode", arg: 2, scope: !6535, file: !3, line: 1999, type: !13)
!6561 = !DILocation(line: 1999, column: 59, scope: !6535)
!6562 = !DILocalVariable(name: "type", arg: 3, scope: !6535, file: !3, line: 2000, type: !3045)
!6563 = !DILocation(line: 2000, column: 11, scope: !6535)
!6564 = !DILocalVariable(name: "named_arg", arg: 4, scope: !6535, file: !3, line: 2000, type: !3158)
!6565 = !DILocation(line: 2000, column: 22, scope: !6535)
!6566 = !DILocation(line: 2002, column: 7, scope: !6567)
!6567 = distinct !DILexicalBlock(scope: !6535, file: !3, line: 2002, column: 7)
!6568 = !DILocation(line: 2002, column: 7, scope: !6535)
!6569 = !DILocation(line: 2006, column: 11, scope: !6570)
!6570 = distinct !DILexicalBlock(scope: !6571, file: !3, line: 2006, column: 11)
!6571 = distinct !DILexicalBlock(scope: !6567, file: !3, line: 2003, column: 5)
!6572 = !DILocation(line: 2006, column: 11, scope: !6571)
!6573 = !DILocation(line: 2007, column: 2, scope: !6570)
!6574 = !DILocation(line: 2010, column: 12, scope: !6575)
!6575 = distinct !DILexicalBlock(scope: !6571, file: !3, line: 2010, column: 11)
!6576 = !DILocation(line: 2010, column: 29, scope: !6575)
!6577 = !DILocation(line: 2010, column: 32, scope: !6575)
!6578 = !DILocation(line: 2010, column: 61, scope: !6575)
!6579 = !DILocation(line: 2010, column: 11, scope: !6571)
!6580 = !DILocation(line: 2011, column: 2, scope: !6575)
!6581 = !DILocation(line: 2015, column: 11, scope: !6582)
!6582 = distinct !DILexicalBlock(scope: !6571, file: !3, line: 2015, column: 11)
!6583 = !DILocation(line: 2015, column: 28, scope: !6582)
!6584 = !DILocation(line: 2015, column: 43, scope: !6582)
!6585 = !DILocation(line: 2015, column: 46, scope: !6582)
!6586 = !DILocation(line: 2015, column: 11, scope: !6571)
!6587 = !DILocation(line: 2017, column: 11, scope: !6588)
!6588 = distinct !DILexicalBlock(scope: !6582, file: !3, line: 2016, column: 2)
!6589 = !DILocation(line: 2017, column: 9, scope: !6588)
!6590 = !DILocation(line: 2018, column: 11, scope: !6588)
!6591 = !DILocation(line: 2018, column: 9, scope: !6588)
!6592 = !DILocation(line: 2019, column: 2, scope: !6588)
!6593 = !DILocation(line: 2020, column: 5, scope: !6571)
!6594 = !DILocation(line: 2022, column: 24, scope: !6535)
!6595 = !DILocation(line: 2022, column: 43, scope: !6535)
!6596 = !DILocation(line: 2022, column: 47, scope: !6535)
!6597 = !DILocation(line: 2022, column: 53, scope: !6535)
!6598 = !DILocation(line: 2022, column: 59, scope: !6535)
!6599 = !DILocation(line: 2022, column: 10, scope: !6535)
!6600 = !DILocation(line: 2022, column: 3, scope: !6535)
!6601 = !DILocation(line: 2023, column: 1, scope: !6535)
!6602 = distinct !DISubprogram(name: "reference_callee_copied", scope: !3, file: !3, line: 2029, type: !6536, scopeLine: 2031, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6603 = !DILocalVariable(name: "ca", arg: 1, scope: !6602, file: !3, line: 2029, type: !6538)
!6604 = !DILocation(line: 2029, column: 43, scope: !6602)
!6605 = !DILocalVariable(name: "mode", arg: 2, scope: !6602, file: !3, line: 2029, type: !13)
!6606 = !DILocation(line: 2029, column: 65, scope: !6602)
!6607 = !DILocalVariable(name: "type", arg: 3, scope: !6602, file: !3, line: 2030, type: !3045)
!6608 = !DILocation(line: 2030, column: 10, scope: !6602)
!6609 = !DILocalVariable(name: "named_arg", arg: 4, scope: !6602, file: !3, line: 2030, type: !3158)
!6610 = !DILocation(line: 2030, column: 21, scope: !6602)
!6611 = !DILocation(line: 2032, column: 7, scope: !6612)
!6612 = distinct !DILexicalBlock(scope: !6602, file: !3, line: 2032, column: 7)
!6613 = !DILocation(line: 2032, column: 12, scope: !6612)
!6614 = !DILocation(line: 2032, column: 15, scope: !6612)
!6615 = !DILocation(line: 2032, column: 7, scope: !6602)
!6616 = !DILocation(line: 2033, column: 5, scope: !6612)
!6617 = !DILocation(line: 2034, column: 24, scope: !6602)
!6618 = !DILocation(line: 2034, column: 39, scope: !6602)
!6619 = !DILocation(line: 2034, column: 43, scope: !6602)
!6620 = !DILocation(line: 2034, column: 49, scope: !6602)
!6621 = !DILocation(line: 2034, column: 55, scope: !6602)
!6622 = !DILocation(line: 2034, column: 10, scope: !6602)
!6623 = !DILocation(line: 2034, column: 3, scope: !6602)
!6624 = !DILocation(line: 2035, column: 1, scope: !6602)
!6625 = distinct !DISubprogram(name: "gimplify_parameters", scope: !3, file: !3, line: 3368, type: !6626, scopeLine: 3369, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6626 = !DISubroutineType(types: !6627)
!6627 = !{!3489}
!6628 = !DILocalVariable(name: "all", scope: !6625, file: !3, line: 3370, type: !6629)
!6629 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "assign_parm_data_all", file: !3, line: 2041, size: 1088, elements: !6630)
!6630 = !{!6631, !6632, !6637, !6638, !6639, !6640, !6641, !6642, !6643}
!6631 = !DIDerivedType(tag: DW_TAG_member, name: "args_so_far", scope: !6629, file: !3, line: 2043, baseType: !6539, size: 512)
!6632 = !DIDerivedType(tag: DW_TAG_member, name: "stack_args_size", scope: !6629, file: !3, line: 2044, baseType: !6633, size: 128, offset: 512)
!6633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "args_size", file: !753, line: 102, size: 128, elements: !6634)
!6634 = !{!6635, !6636}
!6635 = !DIDerivedType(tag: DW_TAG_member, name: "constant", scope: !6633, file: !753, line: 104, baseType: !3014, size: 64)
!6636 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !6633, file: !753, line: 105, baseType: !3045, size: 64, offset: 64)
!6637 = !DIDerivedType(tag: DW_TAG_member, name: "function_result_decl", scope: !6629, file: !3, line: 2045, baseType: !3045, size: 64, offset: 640)
!6638 = !DIDerivedType(tag: DW_TAG_member, name: "orig_fnargs", scope: !6629, file: !3, line: 2046, baseType: !3045, size: 64, offset: 704)
!6639 = !DIDerivedType(tag: DW_TAG_member, name: "first_conversion_insn", scope: !6629, file: !3, line: 2047, baseType: !2924, size: 64, offset: 768)
!6640 = !DIDerivedType(tag: DW_TAG_member, name: "last_conversion_insn", scope: !6629, file: !3, line: 2048, baseType: !2924, size: 64, offset: 832)
!6641 = !DIDerivedType(tag: DW_TAG_member, name: "pretend_args_size", scope: !6629, file: !3, line: 2049, baseType: !3014, size: 64, offset: 896)
!6642 = !DIDerivedType(tag: DW_TAG_member, name: "extra_pretend_bytes", scope: !6629, file: !3, line: 2050, baseType: !3014, size: 64, offset: 960)
!6643 = !DIDerivedType(tag: DW_TAG_member, name: "reg_parm_stack_space", scope: !6629, file: !3, line: 2051, baseType: !2948, size: 32, offset: 1024)
!6644 = !DILocation(line: 3370, column: 31, scope: !6625)
!6645 = !DILocalVariable(name: "parm", scope: !6625, file: !3, line: 3371, type: !3045)
!6646 = !DILocation(line: 3371, column: 8, scope: !6625)
!6647 = !DILocalVariable(name: "stmts", scope: !6625, file: !3, line: 3372, type: !3489)
!6648 = !DILocation(line: 3372, column: 14, scope: !6625)
!6649 = !DILocalVariable(name: "fnargs", scope: !6625, file: !3, line: 3373, type: !4340)
!6650 = !DILocation(line: 3373, column: 20, scope: !6625)
!6651 = !DILocalVariable(name: "i", scope: !6625, file: !3, line: 3374, type: !7)
!6652 = !DILocation(line: 3374, column: 12, scope: !6625)
!6653 = !DILocation(line: 3376, column: 3, scope: !6625)
!6654 = !DILocation(line: 3377, column: 12, scope: !6625)
!6655 = !DILocation(line: 3377, column: 10, scope: !6625)
!6656 = !DILocation(line: 3379, column: 10, scope: !6657)
!6657 = distinct !DILexicalBlock(scope: !6625, file: !3, line: 3379, column: 3)
!6658 = !DILocation(line: 3379, column: 8, scope: !6657)
!6659 = !DILocation(line: 3379, column: 15, scope: !6660)
!6660 = distinct !DILexicalBlock(scope: !6657, file: !3, line: 3379, column: 3)
!6661 = !DILocation(line: 3379, column: 3, scope: !6657)
!6662 = !DILocalVariable(name: "data", scope: !6663, file: !3, line: 3381, type: !6664)
!6663 = distinct !DILexicalBlock(scope: !6660, file: !3, line: 3380, column: 5)
!6664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "assign_parm_data_one", file: !3, line: 2054, size: 1024, elements: !6665)
!6665 = !{!6666, !6667, !6668, !6669, !6670, !6671, !6672, !6673, !6682, !6683, !6684, !6685, !6686}
!6666 = !DIDerivedType(tag: DW_TAG_member, name: "nominal_type", scope: !6664, file: !3, line: 2056, baseType: !3045, size: 64)
!6667 = !DIDerivedType(tag: DW_TAG_member, name: "passed_type", scope: !6664, file: !3, line: 2057, baseType: !3045, size: 64, offset: 64)
!6668 = !DIDerivedType(tag: DW_TAG_member, name: "entry_parm", scope: !6664, file: !3, line: 2058, baseType: !2924, size: 64, offset: 128)
!6669 = !DIDerivedType(tag: DW_TAG_member, name: "stack_parm", scope: !6664, file: !3, line: 2059, baseType: !2924, size: 64, offset: 192)
!6670 = !DIDerivedType(tag: DW_TAG_member, name: "nominal_mode", scope: !6664, file: !3, line: 2060, baseType: !13, size: 32, offset: 256)
!6671 = !DIDerivedType(tag: DW_TAG_member, name: "passed_mode", scope: !6664, file: !3, line: 2061, baseType: !13, size: 32, offset: 288)
!6672 = !DIDerivedType(tag: DW_TAG_member, name: "promoted_mode", scope: !6664, file: !3, line: 2062, baseType: !13, size: 32, offset: 320)
!6673 = !DIDerivedType(tag: DW_TAG_member, name: "locate", scope: !6664, file: !3, line: 2063, baseType: !6674, size: 576, offset: 384)
!6674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "locate_and_pad_arg_data", file: !753, line: 110, size: 576, elements: !6675)
!6675 = !{!6676, !6677, !6678, !6679, !6680, !6681}
!6676 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !6674, file: !753, line: 115, baseType: !6633, size: 128)
!6677 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !6674, file: !753, line: 117, baseType: !6633, size: 128, offset: 128)
!6678 = !DIDerivedType(tag: DW_TAG_member, name: "slot_offset", scope: !6674, file: !753, line: 120, baseType: !6633, size: 128, offset: 256)
!6679 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_pad", scope: !6674, file: !753, line: 123, baseType: !6633, size: 128, offset: 384)
!6680 = !DIDerivedType(tag: DW_TAG_member, name: "where_pad", scope: !6674, file: !753, line: 125, baseType: !752, size: 32, offset: 512)
!6681 = !DIDerivedType(tag: DW_TAG_member, name: "boundary", scope: !6674, file: !753, line: 127, baseType: !7, size: 32, offset: 544)
!6682 = !DIDerivedType(tag: DW_TAG_member, name: "partial", scope: !6664, file: !3, line: 2064, baseType: !2948, size: 32, offset: 960)
!6683 = !DIDerivedType(tag: DW_TAG_member, name: "named_arg", scope: !6664, file: !3, line: 2065, baseType: !7, size: 1, offset: 992, flags: DIFlagBitField, extraData: i64 992)
!6684 = !DIDerivedType(tag: DW_TAG_member, name: "passed_pointer", scope: !6664, file: !3, line: 2066, baseType: !7, size: 1, offset: 993, flags: DIFlagBitField, extraData: i64 992)
!6685 = !DIDerivedType(tag: DW_TAG_member, name: "on_stack", scope: !6664, file: !3, line: 2067, baseType: !7, size: 1, offset: 994, flags: DIFlagBitField, extraData: i64 992)
!6686 = !DIDerivedType(tag: DW_TAG_member, name: "loaded_in_reg", scope: !6664, file: !3, line: 2068, baseType: !7, size: 1, offset: 995, flags: DIFlagBitField, extraData: i64 992)
!6687 = !DILocation(line: 3381, column: 35, scope: !6663)
!6688 = !DILocation(line: 3384, column: 42, scope: !6663)
!6689 = !DILocation(line: 3384, column: 7, scope: !6663)
!6690 = !DILocation(line: 3387, column: 16, scope: !6691)
!6691 = distinct !DILexicalBlock(scope: !6663, file: !3, line: 3387, column: 11)
!6692 = !DILocation(line: 3387, column: 28, scope: !6691)
!6693 = !DILocation(line: 3387, column: 40, scope: !6691)
!6694 = !DILocation(line: 3387, column: 43, scope: !6691)
!6695 = !DILocation(line: 3387, column: 60, scope: !6691)
!6696 = !DILocation(line: 3387, column: 11, scope: !6663)
!6697 = !DILocation(line: 3388, column: 2, scope: !6691)
!6698 = !DILocation(line: 3391, column: 7, scope: !6663)
!6699 = !DILocation(line: 3398, column: 7, scope: !6663)
!6700 = !DILocation(line: 3401, column: 11, scope: !6701)
!6701 = distinct !DILexicalBlock(scope: !6663, file: !3, line: 3401, column: 11)
!6702 = !DILocation(line: 3401, column: 45, scope: !6701)
!6703 = !DILocation(line: 3401, column: 11, scope: !6663)
!6704 = !DILocation(line: 3403, column: 27, scope: !6705)
!6705 = distinct !DILexicalBlock(scope: !6701, file: !3, line: 3402, column: 2)
!6706 = !DILocation(line: 3403, column: 4, scope: !6705)
!6707 = !DILocation(line: 3404, column: 27, scope: !6705)
!6708 = !DILocation(line: 3404, column: 4, scope: !6705)
!6709 = !DILocation(line: 3405, column: 2, scope: !6705)
!6710 = !DILocation(line: 3407, column: 16, scope: !6711)
!6711 = distinct !DILexicalBlock(scope: !6663, file: !3, line: 3407, column: 11)
!6712 = !DILocation(line: 3407, column: 11, scope: !6711)
!6713 = !DILocation(line: 3407, column: 11, scope: !6663)
!6714 = !DILocalVariable(name: "type", scope: !6715, file: !3, line: 3409, type: !3045)
!6715 = distinct !DILexicalBlock(scope: !6711, file: !3, line: 3408, column: 2)
!6716 = !DILocation(line: 3409, column: 16, scope: !6715)
!6717 = !DILocation(line: 3409, column: 23, scope: !6715)
!6718 = !DILocation(line: 3410, column: 38, scope: !6719)
!6719 = distinct !DILexicalBlock(scope: !6715, file: !3, line: 3410, column: 8)
!6720 = !DILocation(line: 3410, column: 51, scope: !6719)
!6721 = !DILocation(line: 3411, column: 12, scope: !6719)
!6722 = !DILocation(line: 3411, column: 23, scope: !6719)
!6723 = !DILocation(line: 3411, column: 18, scope: !6719)
!6724 = !DILocation(line: 3410, column: 8, scope: !6719)
!6725 = !DILocation(line: 3410, column: 8, scope: !6715)
!6726 = !DILocalVariable(name: "local", scope: !6727, file: !3, line: 3413, type: !3045)
!6727 = distinct !DILexicalBlock(scope: !6719, file: !3, line: 3412, column: 6)
!6728 = !DILocation(line: 3413, column: 13, scope: !6727)
!6729 = !DILocalVariable(name: "t", scope: !6727, file: !3, line: 3413, type: !3045)
!6730 = !DILocation(line: 3413, column: 20, scope: !6727)
!6731 = !DILocation(line: 3417, column: 12, scope: !6732)
!6732 = distinct !DILexicalBlock(scope: !6727, file: !3, line: 3417, column: 12)
!6733 = !DILocation(line: 3417, column: 46, scope: !6732)
!6734 = !DILocation(line: 3418, column: 5, scope: !6732)
!6735 = !DILocation(line: 3418, column: 10, scope: !6732)
!6736 = !DILocation(line: 3418, column: 27, scope: !6732)
!6737 = !DILocation(line: 3419, column: 10, scope: !6732)
!6738 = !DILocation(line: 3419, column: 31, scope: !6732)
!6739 = !DILocation(line: 3419, column: 13, scope: !6732)
!6740 = !DILocation(line: 3420, column: 36, scope: !6732)
!6741 = !DILocation(line: 3417, column: 12, scope: !6727)
!6742 = !DILocation(line: 3422, column: 29, scope: !6743)
!6743 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 3421, column: 3)
!6744 = !DILocation(line: 3422, column: 45, scope: !6743)
!6745 = !DILocation(line: 3422, column: 35, scope: !6743)
!6746 = !DILocation(line: 3422, column: 13, scope: !6743)
!6747 = !DILocation(line: 3422, column: 11, scope: !6743)
!6748 = !DILocation(line: 3423, column: 5, scope: !6743)
!6749 = !DILocation(line: 3423, column: 28, scope: !6743)
!6750 = !DILocation(line: 3427, column: 9, scope: !6751)
!6751 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 3427, column: 9)
!6752 = !DILocation(line: 3427, column: 9, scope: !6743)
!6753 = !DILocation(line: 3429, column: 9, scope: !6754)
!6754 = distinct !DILexicalBlock(scope: !6751, file: !3, line: 3428, column: 7)
!6755 = !DILocation(line: 3429, column: 33, scope: !6754)
!6756 = !DILocation(line: 3430, column: 9, scope: !6754)
!6757 = !DILocation(line: 3430, column: 34, scope: !6754)
!6758 = !DILocation(line: 3431, column: 7, scope: !6754)
!6759 = !DILocation(line: 3432, column: 3, scope: !6743)
!6760 = !DILocalVariable(name: "ptr_type", scope: !6761, file: !3, line: 3435, type: !3045)
!6761 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 3434, column: 3)
!6762 = !DILocation(line: 3435, column: 10, scope: !6761)
!6763 = !DILocalVariable(name: "addr", scope: !6761, file: !3, line: 3435, type: !3045)
!6764 = !DILocation(line: 3435, column: 20, scope: !6761)
!6765 = !DILocation(line: 3437, column: 36, scope: !6761)
!6766 = !DILocation(line: 3437, column: 16, scope: !6761)
!6767 = !DILocation(line: 3437, column: 14, scope: !6761)
!6768 = !DILocation(line: 3438, column: 28, scope: !6761)
!6769 = !DILocation(line: 3438, column: 48, scope: !6761)
!6770 = !DILocation(line: 3438, column: 38, scope: !6761)
!6771 = !DILocation(line: 3438, column: 12, scope: !6761)
!6772 = !DILocation(line: 3438, column: 10, scope: !6761)
!6773 = !DILocation(line: 3439, column: 5, scope: !6761)
!6774 = !DILocation(line: 3439, column: 27, scope: !6761)
!6775 = !DILocation(line: 3440, column: 13, scope: !6761)
!6776 = !DILocation(line: 3440, column: 11, scope: !6761)
!6777 = !DILocation(line: 3442, column: 9, scope: !6761)
!6778 = !DILocation(line: 3442, column: 7, scope: !6761)
!6779 = !DILocation(line: 3443, column: 9, scope: !6761)
!6780 = !DILocation(line: 3443, column: 7, scope: !6761)
!6781 = !DILocation(line: 3444, column: 9, scope: !6761)
!6782 = !DILocation(line: 3444, column: 7, scope: !6761)
!6783 = !DILocation(line: 3445, column: 9, scope: !6761)
!6784 = !DILocation(line: 3445, column: 7, scope: !6761)
!6785 = !DILocation(line: 3446, column: 23, scope: !6761)
!6786 = !DILocation(line: 3446, column: 5, scope: !6761)
!6787 = !DILocation(line: 3449, column: 25, scope: !6727)
!6788 = !DILocation(line: 3449, column: 32, scope: !6727)
!6789 = !DILocation(line: 3449, column: 8, scope: !6727)
!6790 = !DILocation(line: 3451, column: 8, scope: !6727)
!6791 = !DILocation(line: 3452, column: 8, scope: !6727)
!6792 = !DILocation(line: 3452, column: 37, scope: !6727)
!6793 = !DILocation(line: 3453, column: 6, scope: !6727)
!6794 = !DILocation(line: 3454, column: 2, scope: !6715)
!6795 = !DILocation(line: 3455, column: 5, scope: !6663)
!6796 = !DILocation(line: 3379, column: 52, scope: !6660)
!6797 = !DILocation(line: 3379, column: 3, scope: !6660)
!6798 = distinct !{!6798, !6661, !6799}
!6799 = !DILocation(line: 3455, column: 5, scope: !6657)
!6800 = !DILocation(line: 3457, column: 3, scope: !6625)
!6801 = !DILocation(line: 3459, column: 10, scope: !6625)
!6802 = !DILocation(line: 3459, column: 3, scope: !6625)
!6803 = distinct !DISubprogram(name: "assign_parms_initialize_all", scope: !3, file: !3, line: 2074, type: !6804, scopeLine: 2075, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6804 = !DISubroutineType(types: !6805)
!6805 = !{null, !6806}
!6806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6629, size: 64)
!6807 = !DILocalVariable(name: "all", arg: 1, scope: !6803, file: !3, line: 2074, type: !6806)
!6808 = !DILocation(line: 2074, column: 59, scope: !6803)
!6809 = !DILocalVariable(name: "fntype", scope: !6803, file: !3, line: 2076, type: !3045)
!6810 = !DILocation(line: 2076, column: 8, scope: !6803)
!6811 = !DILocation(line: 2078, column: 11, scope: !6803)
!6812 = !DILocation(line: 2078, column: 3, scope: !6803)
!6813 = !DILocation(line: 2080, column: 12, scope: !6803)
!6814 = !DILocation(line: 2080, column: 10, scope: !6803)
!6815 = !DILocation(line: 2085, column: 3, scope: !6803)
!6816 = !DILocation(line: 2090, column: 31, scope: !6803)
!6817 = !DILocation(line: 2090, column: 3, scope: !6803)
!6818 = !DILocation(line: 2090, column: 8, scope: !6803)
!6819 = !DILocation(line: 2090, column: 29, scope: !6803)
!6820 = !DILocation(line: 2092, column: 1, scope: !6803)
!6821 = distinct !DISubprogram(name: "assign_parms_augmented_arg_list", scope: !3, file: !3, line: 2148, type: !6822, scopeLine: 2149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6822 = !DISubroutineType(types: !6823)
!6823 = !{!4340, !6806}
!6824 = !DILocalVariable(name: "all", arg: 1, scope: !6821, file: !3, line: 2148, type: !6806)
!6825 = !DILocation(line: 2148, column: 63, scope: !6821)
!6826 = !DILocalVariable(name: "fndecl", scope: !6821, file: !3, line: 2150, type: !3045)
!6827 = !DILocation(line: 2150, column: 8, scope: !6821)
!6828 = !DILocation(line: 2150, column: 17, scope: !6821)
!6829 = !DILocalVariable(name: "fntype", scope: !6821, file: !3, line: 2151, type: !3045)
!6830 = !DILocation(line: 2151, column: 8, scope: !6821)
!6831 = !DILocation(line: 2151, column: 17, scope: !6821)
!6832 = !DILocalVariable(name: "fnargs", scope: !6821, file: !3, line: 2152, type: !4340)
!6833 = !DILocation(line: 2152, column: 20, scope: !6821)
!6834 = !DILocalVariable(name: "arg", scope: !6821, file: !3, line: 2153, type: !3045)
!6835 = !DILocation(line: 2153, column: 8, scope: !6821)
!6836 = !DILocation(line: 2155, column: 14, scope: !6837)
!6837 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 2155, column: 3)
!6838 = !DILocation(line: 2155, column: 12, scope: !6837)
!6839 = !DILocation(line: 2155, column: 8, scope: !6837)
!6840 = !DILocation(line: 2155, column: 39, scope: !6841)
!6841 = distinct !DILexicalBlock(scope: !6837, file: !3, line: 2155, column: 3)
!6842 = !DILocation(line: 2155, column: 3, scope: !6837)
!6843 = !DILocation(line: 2156, column: 5, scope: !6841)
!6844 = !DILocation(line: 2155, column: 50, scope: !6841)
!6845 = !DILocation(line: 2155, column: 48, scope: !6841)
!6846 = !DILocation(line: 2155, column: 3, scope: !6841)
!6847 = distinct !{!6847, !6842, !6848}
!6848 = !DILocation(line: 2156, column: 5, scope: !6837)
!6849 = !DILocation(line: 2158, column: 22, scope: !6821)
!6850 = !DILocation(line: 2158, column: 3, scope: !6821)
!6851 = !DILocation(line: 2158, column: 8, scope: !6821)
!6852 = !DILocation(line: 2158, column: 20, scope: !6821)
!6853 = !DILocation(line: 2161, column: 26, scope: !6854)
!6854 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 2161, column: 7)
!6855 = !DILocation(line: 2161, column: 48, scope: !6854)
!6856 = !DILocation(line: 2161, column: 7, scope: !6854)
!6857 = !DILocation(line: 2162, column: 7, scope: !6854)
!6858 = !DILocation(line: 2162, column: 12, scope: !6854)
!6859 = !DILocation(line: 2162, column: 18, scope: !6854)
!6860 = !DILocation(line: 2163, column: 7, scope: !6854)
!6861 = !DILocation(line: 2163, column: 24, scope: !6854)
!6862 = !DILocation(line: 2163, column: 42, scope: !6854)
!6863 = !DILocation(line: 2163, column: 10, scope: !6854)
!6864 = !DILocation(line: 2163, column: 65, scope: !6854)
!6865 = !DILocation(line: 2161, column: 7, scope: !6821)
!6866 = !DILocalVariable(name: "type", scope: !6867, file: !3, line: 2165, type: !3045)
!6867 = distinct !DILexicalBlock(scope: !6854, file: !3, line: 2164, column: 5)
!6868 = !DILocation(line: 2165, column: 12, scope: !6867)
!6869 = !DILocation(line: 2165, column: 39, scope: !6867)
!6870 = !DILocation(line: 2165, column: 19, scope: !6867)
!6871 = !DILocalVariable(name: "decl", scope: !6867, file: !3, line: 2166, type: !3045)
!6872 = !DILocation(line: 2166, column: 12, scope: !6867)
!6873 = !DILocation(line: 2168, column: 14, scope: !6867)
!6874 = !DILocation(line: 2168, column: 12, scope: !6867)
!6875 = !DILocation(line: 2170, column: 30, scope: !6867)
!6876 = !DILocation(line: 2170, column: 7, scope: !6867)
!6877 = !DILocation(line: 2170, column: 28, scope: !6867)
!6878 = !DILocation(line: 2171, column: 7, scope: !6867)
!6879 = !DILocation(line: 2171, column: 30, scope: !6867)
!6880 = !DILocation(line: 2172, column: 7, scope: !6867)
!6881 = !DILocation(line: 2172, column: 29, scope: !6867)
!6882 = !DILocation(line: 2174, column: 27, scope: !6867)
!6883 = !DILocation(line: 2174, column: 32, scope: !6867)
!6884 = !DILocation(line: 2174, column: 7, scope: !6867)
!6885 = !DILocation(line: 2174, column: 25, scope: !6867)
!6886 = !DILocation(line: 2175, column: 26, scope: !6867)
!6887 = !DILocation(line: 2175, column: 7, scope: !6867)
!6888 = !DILocation(line: 2175, column: 12, scope: !6867)
!6889 = !DILocation(line: 2175, column: 24, scope: !6867)
!6890 = !DILocation(line: 2176, column: 7, scope: !6867)
!6891 = !DILocation(line: 2178, column: 35, scope: !6867)
!6892 = !DILocation(line: 2178, column: 7, scope: !6867)
!6893 = !DILocation(line: 2178, column: 12, scope: !6867)
!6894 = !DILocation(line: 2178, column: 33, scope: !6867)
!6895 = !DILocation(line: 2179, column: 5, scope: !6867)
!6896 = !DILocation(line: 2182, column: 21, scope: !6897)
!6897 = distinct !DILexicalBlock(scope: !6821, file: !3, line: 2182, column: 7)
!6898 = !DILocation(line: 2182, column: 7, scope: !6897)
!6899 = !DILocation(line: 2182, column: 7, scope: !6821)
!6900 = !DILocation(line: 2183, column: 5, scope: !6897)
!6901 = !DILocation(line: 2185, column: 10, scope: !6821)
!6902 = !DILocation(line: 2185, column: 3, scope: !6821)
!6903 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !142, file: !142, line: 182, type: !6904, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6904 = !DISubroutineType(types: !6905)
!6905 = !{!2948, !6906, !7, !3535}
!6906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6907, size: 64)
!6907 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3431)
!6908 = !DILocalVariable(name: "vec_", arg: 1, scope: !6903, file: !142, line: 182, type: !6906)
!6909 = !DILocation(line: 182, column: 1, scope: !6903)
!6910 = !DILocalVariable(name: "ix_", arg: 2, scope: !6903, file: !142, line: 182, type: !7)
!6911 = !DILocalVariable(name: "ptr", arg: 3, scope: !6903, file: !142, line: 182, type: !3535)
!6912 = !DILocation(line: 182, column: 1, scope: !6913)
!6913 = distinct !DILexicalBlock(scope: !6903, file: !142, line: 182, column: 1)
!6914 = !DILocation(line: 182, column: 1, scope: !6915)
!6915 = distinct !DILexicalBlock(scope: !6913, file: !142, line: 182, column: 1)
!6916 = !DILocation(line: 182, column: 1, scope: !6917)
!6917 = distinct !DILexicalBlock(scope: !6913, file: !142, line: 182, column: 1)
!6918 = distinct !DISubprogram(name: "assign_parm_find_data_types", scope: !3, file: !3, line: 2193, type: !6919, scopeLine: 2195, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!6919 = !DISubroutineType(types: !6920)
!6920 = !{null, !6806, !3045, !6921}
!6921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6664, size: 64)
!6922 = !DILocalVariable(name: "all", arg: 1, scope: !6918, file: !3, line: 2193, type: !6806)
!6923 = !DILocation(line: 2193, column: 59, scope: !6918)
!6924 = !DILocalVariable(name: "parm", arg: 2, scope: !6918, file: !3, line: 2193, type: !3045)
!6925 = !DILocation(line: 2193, column: 69, scope: !6918)
!6926 = !DILocalVariable(name: "data", arg: 3, scope: !6918, file: !3, line: 2194, type: !6921)
!6927 = !DILocation(line: 2194, column: 38, scope: !6918)
!6928 = !DILocalVariable(name: "nominal_type", scope: !6918, file: !3, line: 2196, type: !3045)
!6929 = !DILocation(line: 2196, column: 8, scope: !6918)
!6930 = !DILocalVariable(name: "passed_type", scope: !6918, file: !3, line: 2196, type: !3045)
!6931 = !DILocation(line: 2196, column: 22, scope: !6918)
!6932 = !DILocalVariable(name: "nominal_mode", scope: !6918, file: !3, line: 2197, type: !13)
!6933 = !DILocation(line: 2197, column: 21, scope: !6918)
!6934 = !DILocalVariable(name: "passed_mode", scope: !6918, file: !3, line: 2197, type: !13)
!6935 = !DILocation(line: 2197, column: 35, scope: !6918)
!6936 = !DILocalVariable(name: "promoted_mode", scope: !6918, file: !3, line: 2197, type: !13)
!6937 = !DILocation(line: 2197, column: 48, scope: !6918)
!6938 = !DILocalVariable(name: "unsignedp", scope: !6918, file: !3, line: 2198, type: !2948)
!6939 = !DILocation(line: 2198, column: 7, scope: !6918)
!6940 = !DILocation(line: 2200, column: 11, scope: !6918)
!6941 = !DILocation(line: 2200, column: 3, scope: !6918)
!6942 = !DILocation(line: 2203, column: 8, scope: !6943)
!6943 = distinct !DILexicalBlock(scope: !6918, file: !3, line: 2203, column: 7)
!6944 = !DILocation(line: 2203, column: 14, scope: !6943)
!6945 = !DILocation(line: 2203, column: 7, scope: !6918)
!6946 = !DILocation(line: 2204, column: 5, scope: !6943)
!6947 = !DILocation(line: 2204, column: 11, scope: !6943)
!6948 = !DILocation(line: 2204, column: 21, scope: !6943)
!6949 = !DILocation(line: 2205, column: 12, scope: !6950)
!6950 = distinct !DILexicalBlock(scope: !6943, file: !3, line: 2205, column: 12)
!6951 = !DILocation(line: 2205, column: 12, scope: !6943)
!6952 = !DILocation(line: 2206, column: 5, scope: !6950)
!6953 = !DILocation(line: 2206, column: 11, scope: !6950)
!6954 = !DILocation(line: 2206, column: 21, scope: !6950)
!6955 = !DILocation(line: 2207, column: 26, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !6950, file: !3, line: 2207, column: 12)
!6957 = !DILocation(line: 2207, column: 51, scope: !6956)
!6958 = !DILocation(line: 2207, column: 56, scope: !6956)
!6959 = !DILocation(line: 2207, column: 12, scope: !6956)
!6960 = !DILocation(line: 2207, column: 12, scope: !6950)
!6961 = !DILocation(line: 2208, column: 5, scope: !6956)
!6962 = !DILocation(line: 2208, column: 11, scope: !6956)
!6963 = !DILocation(line: 2208, column: 21, scope: !6956)
!6964 = !DILocation(line: 2210, column: 5, scope: !6956)
!6965 = !DILocation(line: 2210, column: 11, scope: !6956)
!6966 = !DILocation(line: 2210, column: 21, scope: !6956)
!6967 = !DILocation(line: 2212, column: 18, scope: !6918)
!6968 = !DILocation(line: 2212, column: 16, scope: !6918)
!6969 = !DILocation(line: 2213, column: 17, scope: !6918)
!6970 = !DILocation(line: 2213, column: 15, scope: !6918)
!6971 = !DILocation(line: 2217, column: 7, scope: !6972)
!6972 = distinct !DILexicalBlock(scope: !6918, file: !3, line: 2217, column: 7)
!6973 = !DILocation(line: 2217, column: 27, scope: !6972)
!6974 = !DILocation(line: 2217, column: 24, scope: !6972)
!6975 = !DILocation(line: 2220, column: 7, scope: !6972)
!6976 = !DILocation(line: 2220, column: 10, scope: !6972)
!6977 = !DILocation(line: 2220, column: 27, scope: !6972)
!6978 = !DILocation(line: 2221, column: 7, scope: !6972)
!6979 = !DILocation(line: 2221, column: 10, scope: !6972)
!6980 = !DILocation(line: 2221, column: 22, scope: !6972)
!6981 = !DILocation(line: 2222, column: 7, scope: !6972)
!6982 = !DILocation(line: 2222, column: 10, scope: !6972)
!6983 = !DILocation(line: 2217, column: 7, scope: !6918)
!6984 = !DILocation(line: 2224, column: 36, scope: !6985)
!6985 = distinct !DILexicalBlock(scope: !6972, file: !3, line: 2223, column: 5)
!6986 = !DILocation(line: 2224, column: 34, scope: !6985)
!6987 = !DILocation(line: 2224, column: 20, scope: !6985)
!6988 = !DILocation(line: 2225, column: 50, scope: !6985)
!6989 = !DILocation(line: 2225, column: 34, scope: !6985)
!6990 = !DILocation(line: 2225, column: 20, scope: !6985)
!6991 = !DILocation(line: 2226, column: 7, scope: !6985)
!6992 = !DILocation(line: 2231, column: 17, scope: !6918)
!6993 = !DILocation(line: 2231, column: 15, scope: !6918)
!6994 = !DILocation(line: 2232, column: 18, scope: !6918)
!6995 = !DILocation(line: 2232, column: 16, scope: !6918)
!6996 = !DILocation(line: 2237, column: 8, scope: !6997)
!6997 = distinct !DILexicalBlock(scope: !6918, file: !3, line: 2237, column: 7)
!6998 = !DILocation(line: 2237, column: 32, scope: !6997)
!6999 = !DILocation(line: 2238, column: 8, scope: !6997)
!7000 = !DILocation(line: 2238, column: 11, scope: !6997)
!7001 = !DILocation(line: 2238, column: 35, scope: !6997)
!7002 = !DILocation(line: 2239, column: 7, scope: !6997)
!7003 = !DILocation(line: 2239, column: 10, scope: !6997)
!7004 = !DILocation(line: 2237, column: 7, scope: !6918)
!7005 = !DILocation(line: 2240, column: 19, scope: !6997)
!7006 = !DILocation(line: 2240, column: 17, scope: !6997)
!7007 = !DILocation(line: 2240, column: 5, scope: !6997)
!7008 = !DILocation(line: 2243, column: 27, scope: !7009)
!7009 = distinct !DILexicalBlock(scope: !6918, file: !3, line: 2243, column: 7)
!7010 = !DILocation(line: 2243, column: 32, scope: !7009)
!7011 = !DILocation(line: 2243, column: 45, scope: !7009)
!7012 = !DILocation(line: 2244, column: 5, scope: !7009)
!7013 = !DILocation(line: 2244, column: 18, scope: !7009)
!7014 = !DILocation(line: 2244, column: 24, scope: !7009)
!7015 = !DILocation(line: 2243, column: 7, scope: !7009)
!7016 = !DILocation(line: 2243, column: 7, scope: !6918)
!7017 = !DILocation(line: 2246, column: 56, scope: !7018)
!7018 = distinct !DILexicalBlock(scope: !7009, file: !3, line: 2245, column: 5)
!7019 = !DILocation(line: 2246, column: 36, scope: !7018)
!7020 = !DILocation(line: 2246, column: 34, scope: !7018)
!7021 = !DILocation(line: 2246, column: 19, scope: !7018)
!7022 = !DILocation(line: 2247, column: 7, scope: !7018)
!7023 = !DILocation(line: 2247, column: 13, scope: !7018)
!7024 = !DILocation(line: 2247, column: 28, scope: !7018)
!7025 = !DILocation(line: 2248, column: 34, scope: !7018)
!7026 = !DILocation(line: 2248, column: 19, scope: !7018)
!7027 = !DILocation(line: 2249, column: 5, scope: !7018)
!7028 = !DILocation(line: 2252, column: 15, scope: !6918)
!7029 = !DILocation(line: 2252, column: 13, scope: !6918)
!7030 = !DILocation(line: 2253, column: 42, scope: !6918)
!7031 = !DILocation(line: 2253, column: 55, scope: !6918)
!7032 = !DILocation(line: 2254, column: 14, scope: !6918)
!7033 = !DILocation(line: 2253, column: 19, scope: !6918)
!7034 = !DILocation(line: 2253, column: 17, scope: !6918)
!7035 = !DILocation(line: 2253, column: 3, scope: !6918)
!7036 = !DILabel(scope: !6918, name: "egress", file: !3, line: 2256)
!7037 = !DILocation(line: 2256, column: 2, scope: !6918)
!7038 = !DILocation(line: 2257, column: 24, scope: !6918)
!7039 = !DILocation(line: 2257, column: 3, scope: !6918)
!7040 = !DILocation(line: 2257, column: 9, scope: !6918)
!7041 = !DILocation(line: 2257, column: 22, scope: !6918)
!7042 = !DILocation(line: 2258, column: 23, scope: !6918)
!7043 = !DILocation(line: 2258, column: 3, scope: !6918)
!7044 = !DILocation(line: 2258, column: 9, scope: !6918)
!7045 = !DILocation(line: 2258, column: 21, scope: !6918)
!7046 = !DILocation(line: 2259, column: 24, scope: !6918)
!7047 = !DILocation(line: 2259, column: 3, scope: !6918)
!7048 = !DILocation(line: 2259, column: 9, scope: !6918)
!7049 = !DILocation(line: 2259, column: 22, scope: !6918)
!7050 = !DILocation(line: 2260, column: 23, scope: !6918)
!7051 = !DILocation(line: 2260, column: 3, scope: !6918)
!7052 = !DILocation(line: 2260, column: 9, scope: !6918)
!7053 = !DILocation(line: 2260, column: 21, scope: !6918)
!7054 = !DILocation(line: 2261, column: 25, scope: !6918)
!7055 = !DILocation(line: 2261, column: 3, scope: !6918)
!7056 = !DILocation(line: 2261, column: 9, scope: !6918)
!7057 = !DILocation(line: 2261, column: 23, scope: !6918)
!7058 = !DILocation(line: 2262, column: 1, scope: !6918)
!7059 = distinct !DISubprogram(name: "gimplify_parm_type", scope: !3, file: !3, line: 3342, type: !7060, scopeLine: 3343, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7060 = !DISubroutineType(types: !7061)
!7061 = !{!3045, !3535, !7062, !3035}
!7062 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2948, size: 64)
!7063 = !DILocalVariable(name: "tp", arg: 1, scope: !7059, file: !3, line: 3342, type: !3535)
!7064 = !DILocation(line: 3342, column: 27, scope: !7059)
!7065 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !7059, file: !3, line: 3342, type: !7062)
!7066 = !DILocation(line: 3342, column: 36, scope: !7059)
!7067 = !DILocalVariable(name: "data", arg: 3, scope: !7059, file: !3, line: 3342, type: !3035)
!7068 = !DILocation(line: 3342, column: 57, scope: !7059)
!7069 = !DILocalVariable(name: "t", scope: !7059, file: !3, line: 3344, type: !3045)
!7070 = !DILocation(line: 3344, column: 8, scope: !7059)
!7071 = !DILocation(line: 3344, column: 13, scope: !7059)
!7072 = !DILocation(line: 3344, column: 12, scope: !7059)
!7073 = !DILocation(line: 3346, column: 4, scope: !7059)
!7074 = !DILocation(line: 3346, column: 18, scope: !7059)
!7075 = !DILocation(line: 3347, column: 7, scope: !7076)
!7076 = distinct !DILexicalBlock(scope: !7059, file: !3, line: 3347, column: 7)
!7077 = !DILocation(line: 3347, column: 7, scope: !7059)
!7078 = !DILocation(line: 3349, column: 11, scope: !7079)
!7079 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 3349, column: 11)
!7080 = distinct !DILexicalBlock(scope: !7076, file: !3, line: 3348, column: 5)
!7081 = !DILocation(line: 3349, column: 11, scope: !7080)
!7082 = !DILocation(line: 3350, column: 3, scope: !7079)
!7083 = !DILocation(line: 3350, column: 17, scope: !7079)
!7084 = !DILocation(line: 3350, column: 2, scope: !7079)
!7085 = !DILocation(line: 3351, column: 16, scope: !7086)
!7086 = distinct !DILexicalBlock(scope: !7079, file: !3, line: 3351, column: 16)
!7087 = !DILocation(line: 3351, column: 30, scope: !7086)
!7088 = !DILocation(line: 3351, column: 34, scope: !7086)
!7089 = !DILocation(line: 3352, column: 9, scope: !7086)
!7090 = !DILocation(line: 3352, column: 13, scope: !7086)
!7091 = !DILocation(line: 3351, column: 16, scope: !7079)
!7092 = !DILocation(line: 3354, column: 25, scope: !7093)
!7093 = distinct !DILexicalBlock(scope: !7086, file: !3, line: 3353, column: 2)
!7094 = !DILocation(line: 3354, column: 43, scope: !7093)
!7095 = !DILocation(line: 3354, column: 28, scope: !7093)
!7096 = !DILocation(line: 3354, column: 4, scope: !7093)
!7097 = !DILocation(line: 3355, column: 5, scope: !7093)
!7098 = !DILocation(line: 3355, column: 19, scope: !7093)
!7099 = !DILocation(line: 3356, column: 2, scope: !7093)
!7100 = !DILocation(line: 3357, column: 5, scope: !7080)
!7101 = !DILocation(line: 3359, column: 3, scope: !7059)
!7102 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !142, file: !142, line: 184, type: !7103, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7103 = !DISubroutineType(types: !7104)
!7104 = !{null, !7105}
!7105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4340, size: 64)
!7106 = !DILocalVariable(name: "vec_", arg: 1, scope: !7102, file: !142, line: 184, type: !7105)
!7107 = !DILocation(line: 184, column: 1, scope: !7102)
!7108 = !DILocation(line: 184, column: 1, scope: !7109)
!7109 = distinct !DILexicalBlock(scope: !7102, file: !142, line: 184, column: 1)
!7110 = distinct !DISubprogram(name: "locate_and_pad_parm", scope: !3, file: !3, line: 3495, type: !7111, scopeLine: 3499, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7111 = !DISubroutineType(types: !7112)
!7112 = !{null, !13, !3045, !2948, !2948, !3045, !7113, !7114}
!7113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6633, size: 64)
!7114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6674, size: 64)
!7115 = !DILocalVariable(name: "passed_mode", arg: 1, scope: !7110, file: !3, line: 3495, type: !13)
!7116 = !DILocation(line: 3495, column: 40, scope: !7110)
!7117 = !DILocalVariable(name: "type", arg: 2, scope: !7110, file: !3, line: 3495, type: !3045)
!7118 = !DILocation(line: 3495, column: 58, scope: !7110)
!7119 = !DILocalVariable(name: "in_regs", arg: 3, scope: !7110, file: !3, line: 3495, type: !2948)
!7120 = !DILocation(line: 3495, column: 68, scope: !7110)
!7121 = !DILocalVariable(name: "partial", arg: 4, scope: !7110, file: !3, line: 3496, type: !2948)
!7122 = !DILocation(line: 3496, column: 12, scope: !7110)
!7123 = !DILocalVariable(name: "fndecl", arg: 5, scope: !7110, file: !3, line: 3496, type: !3045)
!7124 = !DILocation(line: 3496, column: 26, scope: !7110)
!7125 = !DILocalVariable(name: "initial_offset_ptr", arg: 6, scope: !7110, file: !3, line: 3497, type: !7113)
!7126 = !DILocation(line: 3497, column: 26, scope: !7110)
!7127 = !DILocalVariable(name: "locate", arg: 7, scope: !7110, file: !3, line: 3498, type: !7114)
!7128 = !DILocation(line: 3498, column: 40, scope: !7110)
!7129 = !DILocalVariable(name: "sizetree", scope: !7110, file: !3, line: 3500, type: !3045)
!7130 = !DILocation(line: 3500, column: 8, scope: !7110)
!7131 = !DILocalVariable(name: "where_pad", scope: !7110, file: !3, line: 3501, type: !752)
!7132 = !DILocation(line: 3501, column: 18, scope: !7110)
!7133 = !DILocalVariable(name: "boundary", scope: !7110, file: !3, line: 3502, type: !7)
!7134 = !DILocation(line: 3502, column: 16, scope: !7110)
!7135 = !DILocalVariable(name: "reg_parm_stack_space", scope: !7110, file: !3, line: 3503, type: !2948)
!7136 = !DILocation(line: 3503, column: 7, scope: !7110)
!7137 = !DILocalVariable(name: "part_size_in_regs", scope: !7110, file: !3, line: 3504, type: !2948)
!7138 = !DILocation(line: 3504, column: 7, scope: !7110)
!7139 = !DILocation(line: 3507, column: 26, scope: !7110)
!7140 = !DILocation(line: 3507, column: 24, scope: !7110)
!7141 = !DILocation(line: 3511, column: 9, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 3511, column: 7)
!7143 = !DILocation(line: 3511, column: 7, scope: !7110)
!7144 = !DILocation(line: 3513, column: 11, scope: !7145)
!7145 = distinct !DILexicalBlock(scope: !7146, file: !3, line: 3513, column: 11)
!7146 = distinct !DILexicalBlock(scope: !7142, file: !3, line: 3512, column: 5)
!7147 = !DILocation(line: 3513, column: 32, scope: !7145)
!7148 = !DILocation(line: 3513, column: 11, scope: !7146)
!7149 = !DILocation(line: 3515, column: 8, scope: !7150)
!7150 = distinct !DILexicalBlock(scope: !7151, file: !3, line: 3515, column: 8)
!7151 = distinct !DILexicalBlock(scope: !7145, file: !3, line: 3514, column: 2)
!7152 = !DILocation(line: 3515, column: 28, scope: !7150)
!7153 = !DILocation(line: 3515, column: 8, scope: !7151)
!7154 = !DILocation(line: 3518, column: 5, scope: !7155)
!7155 = distinct !DILexicalBlock(scope: !7150, file: !3, line: 3516, column: 6)
!7156 = !DILocation(line: 3517, column: 8, scope: !7155)
!7157 = !DILocation(line: 3517, column: 28, scope: !7155)
!7158 = !DILocation(line: 3518, column: 3, scope: !7155)
!7159 = !DILocation(line: 3520, column: 8, scope: !7155)
!7160 = !DILocation(line: 3520, column: 28, scope: !7155)
!7161 = !DILocation(line: 3520, column: 37, scope: !7155)
!7162 = !DILocation(line: 3521, column: 6, scope: !7155)
!7163 = !DILocation(line: 3522, column: 13, scope: !7164)
!7164 = distinct !DILexicalBlock(scope: !7150, file: !3, line: 3522, column: 13)
!7165 = !DILocation(line: 3522, column: 33, scope: !7164)
!7166 = !DILocation(line: 3522, column: 44, scope: !7164)
!7167 = !DILocation(line: 3522, column: 42, scope: !7164)
!7168 = !DILocation(line: 3522, column: 13, scope: !7150)
!7169 = !DILocation(line: 3523, column: 37, scope: !7164)
!7170 = !DILocation(line: 3523, column: 6, scope: !7164)
!7171 = !DILocation(line: 3523, column: 26, scope: !7164)
!7172 = !DILocation(line: 3523, column: 35, scope: !7164)
!7173 = !DILocation(line: 3524, column: 2, scope: !7151)
!7174 = !DILocation(line: 3525, column: 5, scope: !7146)
!7175 = !DILocation(line: 3528, column: 24, scope: !7110)
!7176 = !DILocation(line: 3528, column: 45, scope: !7110)
!7177 = !DILocation(line: 3528, column: 52, scope: !7110)
!7178 = !DILocation(line: 3528, column: 21, scope: !7110)
!7179 = !DILocation(line: 3531, column: 7, scope: !7110)
!7180 = !DILocation(line: 3531, column: 29, scope: !7110)
!7181 = !DILocation(line: 3531, column: 14, scope: !7110)
!7182 = !DILocation(line: 3531, column: 37, scope: !7110)
!7183 = !DILocation(line: 3531, column: 5, scope: !7110)
!7184 = !DILocation(line: 3532, column: 13, scope: !7110)
!7185 = !DILocation(line: 3533, column: 14, scope: !7110)
!7186 = !DILocation(line: 3533, column: 12, scope: !7110)
!7187 = !DILocation(line: 3534, column: 23, scope: !7110)
!7188 = !DILocation(line: 3534, column: 3, scope: !7110)
!7189 = !DILocation(line: 3534, column: 11, scope: !7110)
!7190 = !DILocation(line: 3534, column: 21, scope: !7110)
!7191 = !DILocation(line: 3537, column: 7, scope: !7192)
!7192 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 3537, column: 7)
!7193 = !DILocation(line: 3537, column: 16, scope: !7192)
!7194 = !DILocation(line: 3537, column: 7, scope: !7110)
!7195 = !DILocation(line: 3538, column: 14, scope: !7192)
!7196 = !DILocation(line: 3538, column: 5, scope: !7192)
!7197 = !DILocation(line: 3540, column: 22, scope: !7110)
!7198 = !DILocation(line: 3540, column: 3, scope: !7110)
!7199 = !DILocation(line: 3540, column: 11, scope: !7110)
!7200 = !DILocation(line: 3540, column: 20, scope: !7110)
!7201 = !DILocation(line: 3546, column: 17, scope: !7202)
!7202 = distinct !DILexicalBlock(scope: !7203, file: !3, line: 3546, column: 11)
!7203 = distinct !DILexicalBlock(scope: !7204, file: !3, line: 3543, column: 5)
!7204 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 3542, column: 7)
!7205 = !DILocation(line: 3546, column: 45, scope: !7202)
!7206 = !DILocation(line: 3546, column: 43, scope: !7202)
!7207 = !DILocation(line: 3546, column: 11, scope: !7203)
!7208 = !DILocation(line: 3548, column: 22, scope: !7209)
!7209 = distinct !DILexicalBlock(scope: !7210, file: !3, line: 3548, column: 15)
!7210 = distinct !DILexicalBlock(scope: !7202, file: !3, line: 3547, column: 9)
!7211 = !DILocation(line: 3548, column: 16, scope: !7209)
!7212 = !DILocation(line: 3548, column: 15, scope: !7210)
!7213 = !DILocation(line: 3549, column: 40, scope: !7209)
!7214 = !DILocation(line: 3549, column: 38, scope: !7209)
!7215 = !DILocation(line: 3549, column: 6, scope: !7209)
!7216 = !DILocation(line: 3557, column: 8, scope: !7217)
!7217 = distinct !DILexicalBlock(scope: !7209, file: !3, line: 3551, column: 6)
!7218 = !DILocation(line: 3560, column: 2, scope: !7210)
!7219 = !DILocation(line: 3565, column: 13, scope: !7220)
!7220 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 3565, column: 7)
!7221 = !DILocation(line: 3565, column: 38, scope: !7220)
!7222 = !DILocation(line: 3565, column: 36, scope: !7220)
!7223 = !DILocation(line: 3565, column: 7, scope: !7110)
!7224 = !DILocation(line: 3566, column: 36, scope: !7220)
!7225 = !DILocation(line: 3566, column: 34, scope: !7220)
!7226 = !DILocation(line: 3566, column: 5, scope: !7220)
!7227 = !DILocation(line: 3567, column: 13, scope: !7228)
!7228 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 3567, column: 7)
!7229 = !DILocation(line: 3567, column: 40, scope: !7228)
!7230 = !DILocation(line: 3567, column: 38, scope: !7228)
!7231 = !DILocation(line: 3567, column: 7, scope: !7110)
!7232 = !DILocation(line: 3568, column: 38, scope: !7228)
!7233 = !DILocation(line: 3568, column: 36, scope: !7228)
!7234 = !DILocation(line: 3568, column: 5, scope: !7228)
!7235 = !DILocation(line: 3611, column: 8, scope: !7236)
!7236 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 3611, column: 7)
!7237 = !DILocation(line: 3613, column: 7, scope: !7236)
!7238 = !DILocation(line: 3613, column: 10, scope: !7236)
!7239 = !DILocation(line: 3613, column: 40, scope: !7236)
!7240 = !DILocation(line: 3611, column: 7, scope: !7110)
!7241 = !DILocation(line: 3616, column: 27, scope: !7236)
!7242 = !DILocation(line: 3616, column: 47, scope: !7236)
!7243 = !DILocation(line: 3617, column: 7, scope: !7236)
!7244 = !DILocation(line: 3617, column: 15, scope: !7236)
!7245 = !DILocation(line: 3616, column: 5, scope: !7236)
!7246 = !DILocation(line: 3618, column: 3, scope: !7110)
!7247 = !DILocation(line: 3618, column: 11, scope: !7110)
!7248 = !DILocation(line: 3618, column: 26, scope: !7110)
!7249 = !DILocation(line: 3618, column: 25, scope: !7110)
!7250 = !DILocation(line: 3621, column: 7, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 3621, column: 7)
!7252 = !DILocation(line: 3621, column: 19, scope: !7251)
!7253 = !DILocation(line: 3621, column: 7, scope: !7110)
!7254 = !DILocation(line: 3622, column: 16, scope: !7251)
!7255 = !DILocation(line: 3622, column: 14, scope: !7251)
!7256 = !DILocation(line: 3622, column: 5, scope: !7251)
!7257 = !DILocation(line: 3627, column: 3, scope: !7110)
!7258 = !DILocation(line: 3627, column: 11, scope: !7110)
!7259 = !DILocation(line: 3627, column: 20, scope: !7110)
!7260 = !DILocation(line: 3627, column: 28, scope: !7110)
!7261 = !DILocation(line: 3628, column: 7, scope: !7262)
!7262 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 3628, column: 7)
!7263 = !DILocation(line: 3628, column: 17, scope: !7262)
!7264 = !DILocation(line: 3628, column: 7, scope: !7110)
!7265 = !DILocation(line: 3629, column: 17, scope: !7262)
!7266 = !DILocation(line: 3629, column: 25, scope: !7262)
!7267 = !DILocation(line: 3629, column: 33, scope: !7262)
!7268 = !DILocation(line: 3629, column: 46, scope: !7262)
!7269 = !DILocation(line: 3629, column: 5, scope: !7262)
!7270 = !DILocation(line: 3631, column: 7, scope: !7271)
!7271 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 3631, column: 7)
!7272 = !DILocation(line: 3631, column: 17, scope: !7271)
!7273 = !DILocation(line: 3632, column: 7, scope: !7271)
!7274 = !DILocation(line: 3632, column: 27, scope: !7271)
!7275 = !DILocation(line: 3632, column: 12, scope: !7271)
!7276 = !DILocation(line: 3633, column: 4, scope: !7271)
!7277 = !DILocation(line: 3633, column: 22, scope: !7271)
!7278 = !DILocation(line: 3633, column: 8, scope: !7271)
!7279 = !DILocation(line: 3633, column: 35, scope: !7271)
!7280 = !DILocation(line: 3633, column: 52, scope: !7271)
!7281 = !DILocation(line: 3631, column: 7, scope: !7110)
!7282 = !DILocation(line: 3634, column: 16, scope: !7271)
!7283 = !DILocation(line: 3634, column: 14, scope: !7271)
!7284 = !DILocation(line: 3634, column: 5, scope: !7271)
!7285 = !DILocation(line: 3636, column: 3, scope: !7110)
!7286 = !DILocalVariable(name: "inc", scope: !7287, file: !3, line: 3636, type: !3045)
!7287 = distinct !DILexicalBlock(scope: !7110, file: !3, line: 3636, column: 3)
!7288 = !DILocation(line: 3636, column: 3, scope: !7287)
!7289 = !DILocation(line: 3636, column: 3, scope: !7290)
!7290 = distinct !DILexicalBlock(scope: !7287, file: !3, line: 3636, column: 3)
!7291 = !DILocation(line: 3636, column: 3, scope: !7292)
!7292 = distinct !DILexicalBlock(scope: !7290, file: !3, line: 3636, column: 3)
!7293 = !DILocation(line: 3638, column: 28, scope: !7110)
!7294 = !DILocation(line: 3638, column: 3, scope: !7110)
!7295 = !DILocation(line: 3638, column: 11, scope: !7110)
!7296 = !DILocation(line: 3638, column: 16, scope: !7110)
!7297 = !DILocation(line: 3638, column: 25, scope: !7110)
!7298 = !DILocation(line: 3644, column: 1, scope: !7110)
!7299 = distinct !DISubprogram(name: "pad_to_arg_alignment", scope: !3, file: !3, line: 3650, type: !7300, scopeLine: 3652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7300 = !DISubroutineType(types: !7301)
!7301 = !{null, !7113, !2948, !7113}
!7302 = !DILocalVariable(name: "offset_ptr", arg: 1, scope: !7299, file: !3, line: 3650, type: !7113)
!7303 = !DILocation(line: 3650, column: 41, scope: !7299)
!7304 = !DILocalVariable(name: "boundary", arg: 2, scope: !7299, file: !3, line: 3650, type: !2948)
!7305 = !DILocation(line: 3650, column: 57, scope: !7299)
!7306 = !DILocalVariable(name: "alignment_pad", arg: 3, scope: !7299, file: !3, line: 3651, type: !7113)
!7307 = !DILocation(line: 3651, column: 27, scope: !7299)
!7308 = !DILocalVariable(name: "save_var", scope: !7299, file: !3, line: 3653, type: !3045)
!7309 = !DILocation(line: 3653, column: 8, scope: !7299)
!7310 = !DILocalVariable(name: "save_constant", scope: !7299, file: !3, line: 3654, type: !3014)
!7311 = !DILocation(line: 3654, column: 17, scope: !7299)
!7312 = !DILocalVariable(name: "boundary_in_bytes", scope: !7299, file: !3, line: 3655, type: !2948)
!7313 = !DILocation(line: 3655, column: 7, scope: !7299)
!7314 = !DILocation(line: 3655, column: 27, scope: !7299)
!7315 = !DILocation(line: 3655, column: 36, scope: !7299)
!7316 = !DILocalVariable(name: "sp_offset", scope: !7299, file: !3, line: 3656, type: !3014)
!7317 = !DILocation(line: 3656, column: 17, scope: !7299)
!7318 = !DILocation(line: 3666, column: 7, scope: !7319)
!7319 = distinct !DILexicalBlock(scope: !7299, file: !3, line: 3666, column: 7)
!7320 = !DILocation(line: 3666, column: 16, scope: !7319)
!7321 = !DILocation(line: 3666, column: 7, scope: !7299)
!7322 = !DILocation(line: 3668, column: 18, scope: !7323)
!7323 = distinct !DILexicalBlock(scope: !7319, file: !3, line: 3667, column: 5)
!7324 = !DILocation(line: 3668, column: 30, scope: !7323)
!7325 = !DILocation(line: 3668, column: 16, scope: !7323)
!7326 = !DILocation(line: 3669, column: 23, scope: !7323)
!7327 = !DILocation(line: 3669, column: 35, scope: !7323)
!7328 = !DILocation(line: 3669, column: 21, scope: !7323)
!7329 = !DILocation(line: 3670, column: 5, scope: !7323)
!7330 = !DILocation(line: 3672, column: 3, scope: !7299)
!7331 = !DILocation(line: 3672, column: 18, scope: !7299)
!7332 = !DILocation(line: 3672, column: 22, scope: !7299)
!7333 = !DILocation(line: 3673, column: 3, scope: !7299)
!7334 = !DILocation(line: 3673, column: 18, scope: !7299)
!7335 = !DILocation(line: 3673, column: 27, scope: !7299)
!7336 = !DILocation(line: 3675, column: 7, scope: !7337)
!7337 = distinct !DILexicalBlock(scope: !7299, file: !3, line: 3675, column: 7)
!7338 = !DILocation(line: 3675, column: 16, scope: !7337)
!7339 = !DILocation(line: 3675, column: 7, scope: !7299)
!7340 = !DILocation(line: 3677, column: 11, scope: !7341)
!7341 = distinct !DILexicalBlock(scope: !7342, file: !3, line: 3677, column: 11)
!7342 = distinct !DILexicalBlock(scope: !7337, file: !3, line: 3676, column: 5)
!7343 = !DILocation(line: 3677, column: 23, scope: !7341)
!7344 = !DILocation(line: 3677, column: 11, scope: !7342)
!7345 = !DILocalVariable(name: "sp_offset_tree", scope: !7346, file: !3, line: 3679, type: !3045)
!7346 = distinct !DILexicalBlock(scope: !7341, file: !3, line: 3678, column: 2)
!7347 = !DILocation(line: 3679, column: 9, scope: !7346)
!7348 = !DILocation(line: 3679, column: 26, scope: !7346)
!7349 = !DILocalVariable(name: "offset", scope: !7346, file: !3, line: 3680, type: !3045)
!7350 = !DILocation(line: 3680, column: 9, scope: !7346)
!7351 = !DILocation(line: 3680, column: 18, scope: !7346)
!7352 = !DILocalVariable(name: "rounded", scope: !7346, file: !3, line: 3686, type: !3045)
!7353 = !DILocation(line: 3686, column: 9, scope: !7346)
!7354 = !DILocation(line: 3686, column: 19, scope: !7346)
!7355 = !DILocation(line: 3689, column: 22, scope: !7346)
!7356 = !DILocation(line: 3689, column: 4, scope: !7346)
!7357 = !DILocation(line: 3689, column: 16, scope: !7346)
!7358 = !DILocation(line: 3689, column: 20, scope: !7346)
!7359 = !DILocation(line: 3691, column: 4, scope: !7346)
!7360 = !DILocation(line: 3691, column: 16, scope: !7346)
!7361 = !DILocation(line: 3691, column: 25, scope: !7346)
!7362 = !DILocation(line: 3692, column: 8, scope: !7363)
!7363 = distinct !DILexicalBlock(scope: !7346, file: !3, line: 3692, column: 8)
!7364 = !DILocation(line: 3692, column: 17, scope: !7363)
!7365 = !DILocation(line: 3692, column: 8, scope: !7346)
!7366 = !DILocation(line: 3693, column: 27, scope: !7363)
!7367 = !DILocation(line: 3693, column: 6, scope: !7363)
!7368 = !DILocation(line: 3693, column: 21, scope: !7363)
!7369 = !DILocation(line: 3693, column: 25, scope: !7363)
!7370 = !DILocation(line: 3695, column: 2, scope: !7346)
!7371 = !DILocation(line: 3698, column: 28, scope: !7372)
!7372 = distinct !DILexicalBlock(scope: !7341, file: !3, line: 3697, column: 2)
!7373 = !DILocation(line: 3698, column: 27, scope: !7372)
!7374 = !DILocation(line: 3702, column: 6, scope: !7372)
!7375 = !DILocation(line: 3698, column: 38, scope: !7372)
!7376 = !DILocation(line: 3698, column: 4, scope: !7372)
!7377 = !DILocation(line: 3698, column: 16, scope: !7372)
!7378 = !DILocation(line: 3698, column: 25, scope: !7372)
!7379 = !DILocation(line: 3704, column: 10, scope: !7380)
!7380 = distinct !DILexicalBlock(scope: !7372, file: !3, line: 3704, column: 10)
!7381 = !DILocation(line: 3704, column: 19, scope: !7380)
!7382 = !DILocation(line: 3704, column: 10, scope: !7372)
!7383 = !DILocation(line: 3705, column: 34, scope: !7380)
!7384 = !DILocation(line: 3705, column: 46, scope: !7380)
!7385 = !DILocation(line: 3705, column: 57, scope: !7380)
!7386 = !DILocation(line: 3705, column: 55, scope: !7380)
!7387 = !DILocation(line: 3705, column: 8, scope: !7380)
!7388 = !DILocation(line: 3705, column: 23, scope: !7380)
!7389 = !DILocation(line: 3705, column: 32, scope: !7380)
!7390 = !DILocation(line: 3707, column: 5, scope: !7342)
!7391 = !DILocation(line: 3708, column: 1, scope: !7299)
!7392 = distinct !DISubprogram(name: "pad_below", scope: !3, file: !3, line: 3711, type: !7393, scopeLine: 3712, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7393 = !DISubroutineType(types: !7394)
!7394 = !{null, !7113, !13, !3045}
!7395 = !DILocalVariable(name: "offset_ptr", arg: 1, scope: !7392, file: !3, line: 3711, type: !7113)
!7396 = !DILocation(line: 3711, column: 30, scope: !7392)
!7397 = !DILocalVariable(name: "passed_mode", arg: 2, scope: !7392, file: !3, line: 3711, type: !13)
!7398 = !DILocation(line: 3711, column: 60, scope: !7392)
!7399 = !DILocalVariable(name: "sizetree", arg: 3, scope: !7392, file: !3, line: 3711, type: !3045)
!7400 = !DILocation(line: 3711, column: 78, scope: !7392)
!7401 = !DILocation(line: 3713, column: 7, scope: !7402)
!7402 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 3713, column: 7)
!7403 = !DILocation(line: 3713, column: 19, scope: !7402)
!7404 = !DILocation(line: 3713, column: 7, scope: !7392)
!7405 = !DILocation(line: 3715, column: 11, scope: !7406)
!7406 = distinct !DILexicalBlock(scope: !7407, file: !3, line: 3715, column: 11)
!7407 = distinct !DILexicalBlock(scope: !7402, file: !3, line: 3714, column: 5)
!7408 = !DILocation(line: 3715, column: 42, scope: !7406)
!7409 = !DILocation(line: 3715, column: 11, scope: !7407)
!7410 = !DILocation(line: 3717, column: 10, scope: !7406)
!7411 = !DILocation(line: 3717, column: 41, scope: !7406)
!7412 = !DILocation(line: 3717, column: 57, scope: !7406)
!7413 = !DILocation(line: 3718, column: 9, scope: !7406)
!7414 = !DILocation(line: 3718, column: 25, scope: !7406)
!7415 = !DILocation(line: 3718, column: 41, scope: !7406)
!7416 = !DILocation(line: 3719, column: 10, scope: !7406)
!7417 = !DILocation(line: 3719, column: 8, scope: !7406)
!7418 = !DILocation(line: 3717, column: 7, scope: !7406)
!7419 = !DILocation(line: 3716, column: 2, scope: !7406)
!7420 = !DILocation(line: 3716, column: 14, scope: !7406)
!7421 = !DILocation(line: 3717, column: 4, scope: !7406)
!7422 = !DILocation(line: 3720, column: 5, scope: !7407)
!7423 = !DILocation(line: 3723, column: 11, scope: !7424)
!7424 = distinct !DILexicalBlock(scope: !7425, file: !3, line: 3723, column: 11)
!7425 = distinct !DILexicalBlock(scope: !7402, file: !3, line: 3722, column: 5)
!7426 = !DILocation(line: 3723, column: 32, scope: !7424)
!7427 = !DILocation(line: 3724, column: 4, scope: !7424)
!7428 = !DILocation(line: 3724, column: 8, scope: !7424)
!7429 = !DILocation(line: 3724, column: 36, scope: !7424)
!7430 = !DILocation(line: 3724, column: 53, scope: !7424)
!7431 = !DILocation(line: 3723, column: 11, scope: !7425)
!7432 = !DILocalVariable(name: "s2", scope: !7433, file: !3, line: 3727, type: !3045)
!7433 = distinct !DILexicalBlock(scope: !7424, file: !3, line: 3725, column: 2)
!7434 = !DILocation(line: 3727, column: 9, scope: !7433)
!7435 = !DILocation(line: 3727, column: 14, scope: !7433)
!7436 = !DILocation(line: 3729, column: 4, scope: !7433)
!7437 = !DILocalVariable(name: "inc", scope: !7438, file: !3, line: 3729, type: !3045)
!7438 = distinct !DILexicalBlock(scope: !7433, file: !3, line: 3729, column: 4)
!7439 = !DILocation(line: 3729, column: 4, scope: !7438)
!7440 = !DILocation(line: 3729, column: 4, scope: !7441)
!7441 = distinct !DILexicalBlock(scope: !7438, file: !3, line: 3729, column: 4)
!7442 = !DILocation(line: 3729, column: 4, scope: !7443)
!7443 = distinct !DILexicalBlock(scope: !7441, file: !3, line: 3729, column: 4)
!7444 = !DILocation(line: 3730, column: 4, scope: !7433)
!7445 = !DILocalVariable(name: "dec", scope: !7446, file: !3, line: 3730, type: !3045)
!7446 = distinct !DILexicalBlock(scope: !7433, file: !3, line: 3730, column: 4)
!7447 = !DILocation(line: 3730, column: 4, scope: !7446)
!7448 = !DILocation(line: 3730, column: 4, scope: !7449)
!7449 = distinct !DILexicalBlock(scope: !7446, file: !3, line: 3730, column: 4)
!7450 = !DILocation(line: 3730, column: 4, scope: !7451)
!7451 = distinct !DILexicalBlock(scope: !7449, file: !3, line: 3730, column: 4)
!7452 = !DILocation(line: 3731, column: 2, scope: !7433)
!7453 = !DILocation(line: 3733, column: 1, scope: !7392)
!7454 = distinct !DISubprogram(name: "generate_setjmp_warnings", scope: !3, file: !3, line: 3798, type: !4467, scopeLine: 3799, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7455 = !DILocalVariable(name: "setjmp_crosses", scope: !7454, file: !3, line: 3800, type: !7456)
!7456 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !2925, line: 47, baseType: !2982)
!7457 = !DILocation(line: 3800, column: 10, scope: !7454)
!7458 = !DILocation(line: 3800, column: 27, scope: !7454)
!7459 = !DILocation(line: 3802, column: 7, scope: !7460)
!7460 = distinct !DILexicalBlock(scope: !7454, file: !3, line: 3802, column: 7)
!7461 = !DILocation(line: 3802, column: 22, scope: !7460)
!7462 = !DILocation(line: 3803, column: 7, scope: !7460)
!7463 = !DILocation(line: 3803, column: 10, scope: !7460)
!7464 = !DILocation(line: 3802, column: 7, scope: !7454)
!7465 = !DILocation(line: 3804, column: 5, scope: !7460)
!7466 = !DILocation(line: 3806, column: 24, scope: !7454)
!7467 = !DILocation(line: 3806, column: 40, scope: !7454)
!7468 = !DILocation(line: 3806, column: 3, scope: !7454)
!7469 = !DILocation(line: 3807, column: 24, scope: !7454)
!7470 = !DILocation(line: 3807, column: 3, scope: !7454)
!7471 = !DILocation(line: 3808, column: 1, scope: !7454)
!7472 = distinct !DISubprogram(name: "setjmp_vars_warning", scope: !3, file: !3, line: 3760, type: !7473, scopeLine: 3761, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7473 = !DISubroutineType(types: !7474)
!7474 = !{null, !7456, !3045}
!7475 = !DILocalVariable(name: "setjmp_crosses", arg: 1, scope: !7472, file: !3, line: 3760, type: !7456)
!7476 = !DILocation(line: 3760, column: 29, scope: !7472)
!7477 = !DILocalVariable(name: "block", arg: 2, scope: !7472, file: !3, line: 3760, type: !3045)
!7478 = !DILocation(line: 3760, column: 50, scope: !7472)
!7479 = !DILocalVariable(name: "decl", scope: !7472, file: !3, line: 3762, type: !3045)
!7480 = !DILocation(line: 3762, column: 8, scope: !7472)
!7481 = !DILocalVariable(name: "sub", scope: !7472, file: !3, line: 3762, type: !3045)
!7482 = !DILocation(line: 3762, column: 14, scope: !7472)
!7483 = !DILocation(line: 3764, column: 15, scope: !7484)
!7484 = distinct !DILexicalBlock(scope: !7472, file: !3, line: 3764, column: 3)
!7485 = !DILocation(line: 3764, column: 13, scope: !7484)
!7486 = !DILocation(line: 3764, column: 8, scope: !7484)
!7487 = !DILocation(line: 3764, column: 35, scope: !7488)
!7488 = distinct !DILexicalBlock(scope: !7484, file: !3, line: 3764, column: 3)
!7489 = !DILocation(line: 3764, column: 3, scope: !7484)
!7490 = !DILocation(line: 3766, column: 11, scope: !7491)
!7491 = distinct !DILexicalBlock(scope: !7492, file: !3, line: 3766, column: 11)
!7492 = distinct !DILexicalBlock(scope: !7488, file: !3, line: 3765, column: 5)
!7493 = !DILocation(line: 3766, column: 28, scope: !7491)
!7494 = !DILocation(line: 3767, column: 4, scope: !7491)
!7495 = !DILocation(line: 3767, column: 7, scope: !7491)
!7496 = !DILocation(line: 3768, column: 4, scope: !7491)
!7497 = !DILocation(line: 3768, column: 7, scope: !7491)
!7498 = !DILocation(line: 3769, column: 4, scope: !7491)
!7499 = !DILocation(line: 3769, column: 34, scope: !7491)
!7500 = !DILocation(line: 3769, column: 50, scope: !7491)
!7501 = !DILocation(line: 3769, column: 7, scope: !7491)
!7502 = !DILocation(line: 3766, column: 11, scope: !7492)
!7503 = !DILocation(line: 3771, column: 47, scope: !7491)
!7504 = !DILocation(line: 3770, column: 2, scope: !7491)
!7505 = !DILocation(line: 3772, column: 5, scope: !7492)
!7506 = !DILocation(line: 3764, column: 48, scope: !7488)
!7507 = !DILocation(line: 3764, column: 46, scope: !7488)
!7508 = !DILocation(line: 3764, column: 3, scope: !7488)
!7509 = distinct !{!7509, !7489, !7510}
!7510 = !DILocation(line: 3772, column: 5, scope: !7484)
!7511 = !DILocation(line: 3774, column: 14, scope: !7512)
!7512 = distinct !DILexicalBlock(scope: !7472, file: !3, line: 3774, column: 3)
!7513 = !DILocation(line: 3774, column: 12, scope: !7512)
!7514 = !DILocation(line: 3774, column: 8, scope: !7512)
!7515 = !DILocation(line: 3774, column: 39, scope: !7516)
!7516 = distinct !DILexicalBlock(scope: !7512, file: !3, line: 3774, column: 3)
!7517 = !DILocation(line: 3774, column: 3, scope: !7512)
!7518 = !DILocation(line: 3775, column: 26, scope: !7516)
!7519 = !DILocation(line: 3775, column: 42, scope: !7516)
!7520 = !DILocation(line: 3775, column: 5, scope: !7516)
!7521 = !DILocation(line: 3774, column: 50, scope: !7516)
!7522 = !DILocation(line: 3774, column: 48, scope: !7516)
!7523 = !DILocation(line: 3774, column: 3, scope: !7516)
!7524 = distinct !{!7524, !7517, !7525}
!7525 = !DILocation(line: 3775, column: 45, scope: !7512)
!7526 = !DILocation(line: 3776, column: 1, scope: !7472)
!7527 = distinct !DISubprogram(name: "setjmp_args_warning", scope: !3, file: !3, line: 3782, type: !7528, scopeLine: 3783, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7528 = !DISubroutineType(types: !7529)
!7529 = !{null, !7456}
!7530 = !DILocalVariable(name: "setjmp_crosses", arg: 1, scope: !7527, file: !3, line: 3782, type: !7456)
!7531 = !DILocation(line: 3782, column: 29, scope: !7527)
!7532 = !DILocalVariable(name: "decl", scope: !7527, file: !3, line: 3784, type: !3045)
!7533 = !DILocation(line: 3784, column: 8, scope: !7527)
!7534 = !DILocation(line: 3785, column: 15, scope: !7535)
!7535 = distinct !DILexicalBlock(scope: !7527, file: !3, line: 3785, column: 3)
!7536 = !DILocation(line: 3785, column: 13, scope: !7535)
!7537 = !DILocation(line: 3785, column: 8, scope: !7535)
!7538 = !DILocation(line: 3786, column: 8, scope: !7539)
!7539 = distinct !DILexicalBlock(scope: !7535, file: !3, line: 3785, column: 3)
!7540 = !DILocation(line: 3785, column: 3, scope: !7535)
!7541 = !DILocation(line: 3787, column: 9, scope: !7542)
!7542 = distinct !DILexicalBlock(scope: !7539, file: !3, line: 3787, column: 9)
!7543 = !DILocation(line: 3787, column: 25, scope: !7542)
!7544 = !DILocation(line: 3788, column: 2, scope: !7542)
!7545 = !DILocation(line: 3788, column: 5, scope: !7542)
!7546 = !DILocation(line: 3789, column: 2, scope: !7542)
!7547 = !DILocation(line: 3789, column: 32, scope: !7542)
!7548 = !DILocation(line: 3789, column: 48, scope: !7542)
!7549 = !DILocation(line: 3789, column: 5, scope: !7542)
!7550 = !DILocation(line: 3787, column: 9, scope: !7539)
!7551 = !DILocation(line: 3792, column: 9, scope: !7542)
!7552 = !DILocation(line: 3790, column: 7, scope: !7542)
!7553 = !DILocation(line: 3789, column: 71, scope: !7542)
!7554 = !DILocation(line: 3786, column: 21, scope: !7539)
!7555 = !DILocation(line: 3786, column: 19, scope: !7539)
!7556 = !DILocation(line: 3785, column: 3, scope: !7539)
!7557 = distinct !{!7557, !7540, !7558}
!7558 = !DILocation(line: 3792, column: 13, scope: !7535)
!7559 = !DILocation(line: 3793, column: 1, scope: !7527)
!7560 = distinct !DISubprogram(name: "reorder_blocks", scope: !3, file: !3, line: 3818, type: !4467, scopeLine: 3819, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7561 = !DILocalVariable(name: "block", scope: !7560, file: !3, line: 3820, type: !3045)
!7562 = !DILocation(line: 3820, column: 8, scope: !7560)
!7563 = !DILocation(line: 3820, column: 16, scope: !7560)
!7564 = !DILocalVariable(name: "block_stack", scope: !7560, file: !3, line: 3821, type: !4340)
!7565 = !DILocation(line: 3821, column: 19, scope: !7560)
!7566 = !DILocation(line: 3823, column: 7, scope: !7567)
!7567 = distinct !DILexicalBlock(scope: !7560, file: !3, line: 3823, column: 7)
!7568 = !DILocation(line: 3823, column: 13, scope: !7567)
!7569 = !DILocation(line: 3823, column: 7, scope: !7560)
!7570 = !DILocation(line: 3824, column: 5, scope: !7567)
!7571 = !DILocation(line: 3826, column: 17, scope: !7560)
!7572 = !DILocation(line: 3826, column: 15, scope: !7560)
!7573 = !DILocation(line: 3829, column: 22, scope: !7560)
!7574 = !DILocation(line: 3829, column: 3, scope: !7560)
!7575 = !DILocation(line: 3832, column: 3, scope: !7560)
!7576 = !DILocation(line: 3832, column: 27, scope: !7560)
!7577 = !DILocation(line: 3833, column: 3, scope: !7560)
!7578 = !DILocation(line: 3833, column: 23, scope: !7560)
!7579 = !DILocation(line: 3836, column: 21, scope: !7560)
!7580 = !DILocation(line: 3836, column: 35, scope: !7560)
!7581 = !DILocation(line: 3836, column: 3, scope: !7560)
!7582 = !DILocation(line: 3837, column: 46, scope: !7560)
!7583 = !DILocation(line: 3837, column: 29, scope: !7560)
!7584 = !DILocation(line: 3837, column: 3, scope: !7560)
!7585 = !DILocation(line: 3837, column: 27, scope: !7560)
!7586 = !DILocation(line: 3839, column: 3, scope: !7560)
!7587 = !DILocation(line: 3840, column: 1, scope: !7560)
!7588 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !142, file: !142, line: 184, type: !7589, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7589 = !DISubroutineType(types: !7590)
!7590 = !{!4340, !2948}
!7591 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7588, file: !142, line: 184, type: !2948)
!7592 = !DILocation(line: 184, column: 1, scope: !7588)
!7593 = distinct !DISubprogram(name: "clear_block_marks", scope: !3, file: !3, line: 3845, type: !7594, scopeLine: 3846, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7594 = !DISubroutineType(types: !7595)
!7595 = !{null, !3045}
!7596 = !DILocalVariable(name: "block", arg: 1, scope: !7593, file: !3, line: 3845, type: !3045)
!7597 = !DILocation(line: 3845, column: 25, scope: !7593)
!7598 = !DILocation(line: 3847, column: 3, scope: !7593)
!7599 = !DILocation(line: 3847, column: 10, scope: !7593)
!7600 = !DILocation(line: 3849, column: 7, scope: !7601)
!7601 = distinct !DILexicalBlock(scope: !7593, file: !3, line: 3848, column: 5)
!7602 = !DILocation(line: 3849, column: 32, scope: !7601)
!7603 = !DILocation(line: 3850, column: 26, scope: !7601)
!7604 = !DILocation(line: 3850, column: 7, scope: !7601)
!7605 = !DILocation(line: 3851, column: 15, scope: !7601)
!7606 = !DILocation(line: 3851, column: 13, scope: !7601)
!7607 = distinct !{!7607, !7598, !7608}
!7608 = !DILocation(line: 3852, column: 5, scope: !7593)
!7609 = !DILocation(line: 3853, column: 1, scope: !7593)
!7610 = distinct !DISubprogram(name: "reorder_blocks_1", scope: !3, file: !3, line: 3856, type: !7611, scopeLine: 3857, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7611 = !DISubroutineType(types: !7612)
!7612 = !{null, !2924, !3045, !7105}
!7613 = !DILocalVariable(name: "insns", arg: 1, scope: !7610, file: !3, line: 3856, type: !2924)
!7614 = !DILocation(line: 3856, column: 23, scope: !7610)
!7615 = !DILocalVariable(name: "current_block", arg: 2, scope: !7610, file: !3, line: 3856, type: !3045)
!7616 = !DILocation(line: 3856, column: 35, scope: !7610)
!7617 = !DILocalVariable(name: "p_block_stack", arg: 3, scope: !7610, file: !3, line: 3856, type: !7105)
!7618 = !DILocation(line: 3856, column: 67, scope: !7610)
!7619 = !DILocalVariable(name: "insn", scope: !7610, file: !3, line: 3858, type: !2924)
!7620 = !DILocation(line: 3858, column: 7, scope: !7610)
!7621 = !DILocation(line: 3860, column: 15, scope: !7622)
!7622 = distinct !DILexicalBlock(scope: !7610, file: !3, line: 3860, column: 3)
!7623 = !DILocation(line: 3860, column: 13, scope: !7622)
!7624 = !DILocation(line: 3860, column: 8, scope: !7622)
!7625 = !DILocation(line: 3860, column: 22, scope: !7626)
!7626 = distinct !DILexicalBlock(scope: !7622, file: !3, line: 3860, column: 3)
!7627 = !DILocation(line: 3860, column: 3, scope: !7622)
!7628 = !DILocation(line: 3862, column: 11, scope: !7629)
!7629 = distinct !DILexicalBlock(scope: !7630, file: !3, line: 3862, column: 11)
!7630 = distinct !DILexicalBlock(scope: !7626, file: !3, line: 3861, column: 5)
!7631 = !DILocation(line: 3862, column: 11, scope: !7630)
!7632 = !DILocation(line: 3864, column: 8, scope: !7633)
!7633 = distinct !DILexicalBlock(scope: !7634, file: !3, line: 3864, column: 8)
!7634 = distinct !DILexicalBlock(scope: !7629, file: !3, line: 3863, column: 2)
!7635 = !DILocation(line: 3864, column: 25, scope: !7633)
!7636 = !DILocation(line: 3864, column: 8, scope: !7634)
!7637 = !DILocalVariable(name: "block", scope: !7638, file: !3, line: 3866, type: !3045)
!7638 = distinct !DILexicalBlock(scope: !7633, file: !3, line: 3865, column: 6)
!7639 = !DILocation(line: 3866, column: 13, scope: !7638)
!7640 = !DILocation(line: 3866, column: 21, scope: !7638)
!7641 = !DILocalVariable(name: "origin", scope: !7638, file: !3, line: 3867, type: !3045)
!7642 = !DILocation(line: 3867, column: 13, scope: !7638)
!7643 = !DILocation(line: 3869, column: 18, scope: !7638)
!7644 = !DILocation(line: 3870, column: 6, scope: !7638)
!7645 = !DILocation(line: 3871, column: 6, scope: !7638)
!7646 = !DILocation(line: 3869, column: 15, scope: !7638)
!7647 = !DILocation(line: 3875, column: 12, scope: !7648)
!7648 = distinct !DILexicalBlock(scope: !7638, file: !3, line: 3875, column: 12)
!7649 = !DILocation(line: 3875, column: 12, scope: !7638)
!7650 = !DILocalVariable(name: "new_block", scope: !7651, file: !3, line: 3877, type: !3045)
!7651 = distinct !DILexicalBlock(scope: !7648, file: !3, line: 3876, column: 3)
!7652 = !DILocation(line: 3877, column: 10, scope: !7651)
!7653 = !DILocation(line: 3877, column: 22, scope: !7651)
!7654 = !DILocation(line: 3879, column: 41, scope: !7651)
!7655 = !DILocation(line: 3879, column: 5, scope: !7651)
!7656 = !DILocation(line: 3879, column: 39, scope: !7651)
!7657 = !DILocation(line: 3881, column: 9, scope: !7651)
!7658 = !DILocation(line: 3880, column: 5, scope: !7651)
!7659 = !DILocation(line: 3881, column: 7, scope: !7651)
!7660 = !DILocation(line: 3882, column: 37, scope: !7651)
!7661 = !DILocation(line: 3882, column: 5, scope: !7651)
!7662 = !DILocation(line: 3882, column: 35, scope: !7651)
!7663 = !DILocation(line: 3884, column: 25, scope: !7651)
!7664 = !DILocation(line: 3884, column: 5, scope: !7651)
!7665 = !DILocation(line: 3884, column: 23, scope: !7651)
!7666 = !DILocation(line: 3885, column: 13, scope: !7651)
!7667 = !DILocation(line: 3885, column: 11, scope: !7651)
!7668 = !DILocation(line: 3886, column: 3, scope: !7651)
!7669 = !DILocation(line: 3888, column: 8, scope: !7638)
!7670 = !DILocation(line: 3888, column: 32, scope: !7638)
!7671 = !DILocation(line: 3889, column: 8, scope: !7638)
!7672 = !DILocation(line: 3889, column: 33, scope: !7638)
!7673 = !DILocation(line: 3893, column: 12, scope: !7674)
!7674 = distinct !DILexicalBlock(scope: !7638, file: !3, line: 3893, column: 12)
!7675 = !DILocation(line: 3893, column: 21, scope: !7674)
!7676 = !DILocation(line: 3893, column: 18, scope: !7674)
!7677 = !DILocation(line: 3893, column: 12, scope: !7638)
!7678 = !DILocation(line: 3895, column: 9, scope: !7679)
!7679 = distinct !DILexicalBlock(scope: !7680, file: !3, line: 3895, column: 9)
!7680 = distinct !DILexicalBlock(scope: !7674, file: !3, line: 3894, column: 3)
!7681 = !DILocation(line: 3895, column: 18, scope: !7679)
!7682 = !DILocation(line: 3895, column: 15, scope: !7679)
!7683 = !DILocation(line: 3895, column: 9, scope: !7680)
!7684 = !DILocation(line: 3896, column: 7, scope: !7679)
!7685 = !DILocation(line: 3898, column: 34, scope: !7680)
!7686 = !DILocation(line: 3898, column: 5, scope: !7680)
!7687 = !DILocation(line: 3898, column: 32, scope: !7680)
!7688 = !DILocation(line: 3899, column: 27, scope: !7680)
!7689 = !DILocation(line: 3899, column: 5, scope: !7680)
!7690 = !DILocation(line: 3899, column: 25, scope: !7680)
!7691 = !DILocation(line: 3900, column: 39, scope: !7680)
!7692 = !DILocation(line: 3900, column: 5, scope: !7680)
!7693 = !DILocation(line: 3900, column: 37, scope: !7680)
!7694 = !DILocation(line: 3901, column: 21, scope: !7680)
!7695 = !DILocation(line: 3901, column: 19, scope: !7680)
!7696 = !DILocation(line: 3902, column: 3, scope: !7680)
!7697 = !DILocation(line: 3903, column: 8, scope: !7638)
!7698 = !DILocation(line: 3904, column: 6, scope: !7638)
!7699 = !DILocation(line: 3905, column: 13, scope: !7700)
!7700 = distinct !DILexicalBlock(scope: !7633, file: !3, line: 3905, column: 13)
!7701 = !DILocation(line: 3905, column: 30, scope: !7700)
!7702 = !DILocation(line: 3905, column: 13, scope: !7633)
!7703 = !DILocation(line: 3907, column: 28, scope: !7704)
!7704 = distinct !DILexicalBlock(scope: !7700, file: !3, line: 3906, column: 6)
!7705 = !DILocation(line: 3907, column: 8, scope: !7704)
!7706 = !DILocation(line: 3907, column: 26, scope: !7704)
!7707 = !DILocation(line: 3909, column: 22, scope: !7704)
!7708 = !DILocation(line: 3909, column: 5, scope: !7704)
!7709 = !DILocation(line: 3908, column: 8, scope: !7704)
!7710 = !DILocation(line: 3909, column: 3, scope: !7704)
!7711 = !DILocation(line: 3910, column: 24, scope: !7704)
!7712 = !DILocation(line: 3910, column: 22, scope: !7704)
!7713 = !DILocation(line: 3911, column: 6, scope: !7704)
!7714 = !DILocation(line: 3912, column: 2, scope: !7634)
!7715 = !DILocation(line: 3913, column: 5, scope: !7630)
!7716 = !DILocation(line: 3860, column: 35, scope: !7626)
!7717 = !DILocation(line: 3860, column: 33, scope: !7626)
!7718 = !DILocation(line: 3860, column: 3, scope: !7626)
!7719 = distinct !{!7719, !7627, !7720}
!7720 = !DILocation(line: 3913, column: 5, scope: !7622)
!7721 = !DILocation(line: 3914, column: 1, scope: !7610)
!7722 = distinct !DISubprogram(name: "blocks_nreverse", scope: !3, file: !3, line: 3920, type: !7723, scopeLine: 3921, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7723 = !DISubroutineType(types: !7724)
!7724 = !{!3045, !3045}
!7725 = !DILocalVariable(name: "t", arg: 1, scope: !7722, file: !3, line: 3920, type: !3045)
!7726 = !DILocation(line: 3920, column: 23, scope: !7722)
!7727 = !DILocalVariable(name: "prev", scope: !7722, file: !3, line: 3922, type: !3045)
!7728 = !DILocation(line: 3922, column: 8, scope: !7722)
!7729 = !DILocalVariable(name: "decl", scope: !7722, file: !3, line: 3922, type: !3045)
!7730 = !DILocation(line: 3922, column: 18, scope: !7722)
!7731 = !DILocalVariable(name: "next", scope: !7722, file: !3, line: 3922, type: !3045)
!7732 = !DILocation(line: 3922, column: 24, scope: !7722)
!7733 = !DILocation(line: 3923, column: 15, scope: !7734)
!7734 = distinct !DILexicalBlock(scope: !7722, file: !3, line: 3923, column: 3)
!7735 = !DILocation(line: 3923, column: 13, scope: !7734)
!7736 = !DILocation(line: 3923, column: 8, scope: !7734)
!7737 = !DILocation(line: 3923, column: 18, scope: !7738)
!7738 = distinct !DILexicalBlock(scope: !7734, file: !3, line: 3923, column: 3)
!7739 = !DILocation(line: 3923, column: 3, scope: !7734)
!7740 = !DILocation(line: 3925, column: 14, scope: !7741)
!7741 = distinct !DILexicalBlock(scope: !7738, file: !3, line: 3924, column: 5)
!7742 = !DILocation(line: 3925, column: 12, scope: !7741)
!7743 = !DILocation(line: 3926, column: 28, scope: !7741)
!7744 = !DILocation(line: 3926, column: 7, scope: !7741)
!7745 = !DILocation(line: 3926, column: 26, scope: !7741)
!7746 = !DILocation(line: 3927, column: 14, scope: !7741)
!7747 = !DILocation(line: 3927, column: 12, scope: !7741)
!7748 = !DILocation(line: 3928, column: 5, scope: !7741)
!7749 = !DILocation(line: 3923, column: 31, scope: !7738)
!7750 = !DILocation(line: 3923, column: 29, scope: !7738)
!7751 = !DILocation(line: 3923, column: 3, scope: !7738)
!7752 = distinct !{!7752, !7739, !7753}
!7753 = !DILocation(line: 3928, column: 5, scope: !7734)
!7754 = !DILocation(line: 3929, column: 10, scope: !7722)
!7755 = !DILocation(line: 3929, column: 3, scope: !7722)
!7756 = distinct !DISubprogram(name: "number_blocks", scope: !3, file: !3, line: 3983, type: !7594, scopeLine: 3984, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7757 = !DILocalVariable(name: "fn", arg: 1, scope: !7756, file: !3, line: 3983, type: !3045)
!7758 = !DILocation(line: 3983, column: 21, scope: !7756)
!7759 = !DILocalVariable(name: "i", scope: !7756, file: !3, line: 3985, type: !2948)
!7760 = !DILocation(line: 3985, column: 7, scope: !7756)
!7761 = !DILocalVariable(name: "n_blocks", scope: !7756, file: !3, line: 3986, type: !2948)
!7762 = !DILocation(line: 3986, column: 7, scope: !7756)
!7763 = !DILocalVariable(name: "block_vector", scope: !7756, file: !3, line: 3987, type: !3535)
!7764 = !DILocation(line: 3987, column: 9, scope: !7756)
!7765 = !DILocation(line: 3997, column: 36, scope: !7756)
!7766 = !DILocation(line: 3997, column: 18, scope: !7756)
!7767 = !DILocation(line: 3997, column: 16, scope: !7756)
!7768 = !DILocation(line: 4000, column: 10, scope: !7769)
!7769 = distinct !DILexicalBlock(scope: !7756, file: !3, line: 4000, column: 3)
!7770 = !DILocation(line: 4000, column: 8, scope: !7769)
!7771 = !DILocation(line: 4000, column: 15, scope: !7772)
!7772 = distinct !DILexicalBlock(scope: !7769, file: !3, line: 4000, column: 3)
!7773 = !DILocation(line: 4000, column: 19, scope: !7772)
!7774 = !DILocation(line: 4000, column: 17, scope: !7772)
!7775 = !DILocation(line: 4000, column: 3, scope: !7769)
!7776 = !DILocation(line: 4002, column: 54, scope: !7772)
!7777 = !DILocation(line: 4002, column: 5, scope: !7772)
!7778 = !DILocation(line: 4002, column: 36, scope: !7772)
!7779 = !DILocation(line: 4000, column: 29, scope: !7772)
!7780 = !DILocation(line: 4000, column: 3, scope: !7772)
!7781 = distinct !{!7781, !7775, !7782}
!7782 = !DILocation(line: 4002, column: 54, scope: !7769)
!7783 = !DILocation(line: 4004, column: 9, scope: !7756)
!7784 = !DILocation(line: 4004, column: 3, scope: !7756)
!7785 = !DILocation(line: 4006, column: 3, scope: !7756)
!7786 = distinct !DISubprogram(name: "get_block_vector", scope: !3, file: !3, line: 3967, type: !7787, scopeLine: 3968, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7787 = !DISubroutineType(types: !7788)
!7788 = !{!3535, !3045, !7062}
!7789 = !DILocalVariable(name: "block", arg: 1, scope: !7786, file: !3, line: 3967, type: !3045)
!7790 = !DILocation(line: 3967, column: 24, scope: !7786)
!7791 = !DILocalVariable(name: "n_blocks_p", arg: 2, scope: !7786, file: !3, line: 3967, type: !7062)
!7792 = !DILocation(line: 3967, column: 36, scope: !7786)
!7793 = !DILocalVariable(name: "block_vector", scope: !7786, file: !3, line: 3969, type: !3535)
!7794 = !DILocation(line: 3969, column: 9, scope: !7786)
!7795 = !DILocation(line: 3971, column: 29, scope: !7786)
!7796 = !DILocation(line: 3971, column: 17, scope: !7786)
!7797 = !DILocation(line: 3971, column: 4, scope: !7786)
!7798 = !DILocation(line: 3971, column: 15, scope: !7786)
!7799 = !DILocation(line: 3972, column: 18, scope: !7786)
!7800 = !DILocation(line: 3972, column: 16, scope: !7786)
!7801 = !DILocation(line: 3973, column: 15, scope: !7786)
!7802 = !DILocation(line: 3973, column: 22, scope: !7786)
!7803 = !DILocation(line: 3973, column: 3, scope: !7786)
!7804 = !DILocation(line: 3975, column: 10, scope: !7786)
!7805 = !DILocation(line: 3975, column: 3, scope: !7786)
!7806 = distinct !DISubprogram(name: "debug_find_var_in_block_tree", scope: !3, file: !3, line: 4012, type: !7807, scopeLine: 4013, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7807 = !DISubroutineType(types: !7808)
!7808 = !{!3045, !3045, !3045}
!7809 = !DILocalVariable(name: "var", arg: 1, scope: !7806, file: !3, line: 4012, type: !3045)
!7810 = !DILocation(line: 4012, column: 36, scope: !7806)
!7811 = !DILocalVariable(name: "block", arg: 2, scope: !7806, file: !3, line: 4012, type: !3045)
!7812 = !DILocation(line: 4012, column: 46, scope: !7806)
!7813 = !DILocalVariable(name: "t", scope: !7806, file: !3, line: 4014, type: !3045)
!7814 = !DILocation(line: 4014, column: 8, scope: !7806)
!7815 = !DILocation(line: 4016, column: 12, scope: !7816)
!7816 = distinct !DILexicalBlock(scope: !7806, file: !3, line: 4016, column: 3)
!7817 = !DILocation(line: 4016, column: 10, scope: !7816)
!7818 = !DILocation(line: 4016, column: 8, scope: !7816)
!7819 = !DILocation(line: 4016, column: 32, scope: !7820)
!7820 = distinct !DILexicalBlock(scope: !7816, file: !3, line: 4016, column: 3)
!7821 = !DILocation(line: 4016, column: 3, scope: !7816)
!7822 = !DILocation(line: 4017, column: 9, scope: !7823)
!7823 = distinct !DILexicalBlock(scope: !7820, file: !3, line: 4017, column: 9)
!7824 = !DILocation(line: 4017, column: 14, scope: !7823)
!7825 = !DILocation(line: 4017, column: 11, scope: !7823)
!7826 = !DILocation(line: 4017, column: 9, scope: !7820)
!7827 = !DILocation(line: 4018, column: 14, scope: !7823)
!7828 = !DILocation(line: 4018, column: 7, scope: !7823)
!7829 = !DILocation(line: 4016, column: 39, scope: !7820)
!7830 = !DILocation(line: 4016, column: 37, scope: !7820)
!7831 = !DILocation(line: 4016, column: 3, scope: !7820)
!7832 = distinct !{!7832, !7821, !7833}
!7833 = !DILocation(line: 4018, column: 14, scope: !7816)
!7834 = !DILocation(line: 4020, column: 12, scope: !7835)
!7835 = distinct !DILexicalBlock(scope: !7806, file: !3, line: 4020, column: 3)
!7836 = !DILocation(line: 4020, column: 10, scope: !7835)
!7837 = !DILocation(line: 4020, column: 8, scope: !7835)
!7838 = !DILocation(line: 4020, column: 37, scope: !7839)
!7839 = distinct !DILexicalBlock(scope: !7835, file: !3, line: 4020, column: 3)
!7840 = !DILocation(line: 4020, column: 3, scope: !7835)
!7841 = !DILocalVariable(name: "ret", scope: !7842, file: !3, line: 4022, type: !3045)
!7842 = distinct !DILexicalBlock(scope: !7839, file: !3, line: 4021, column: 5)
!7843 = !DILocation(line: 4022, column: 12, scope: !7842)
!7844 = !DILocation(line: 4022, column: 48, scope: !7842)
!7845 = !DILocation(line: 4022, column: 53, scope: !7842)
!7846 = !DILocation(line: 4022, column: 18, scope: !7842)
!7847 = !DILocation(line: 4023, column: 11, scope: !7848)
!7848 = distinct !DILexicalBlock(scope: !7842, file: !3, line: 4023, column: 11)
!7849 = !DILocation(line: 4023, column: 11, scope: !7842)
!7850 = !DILocation(line: 4024, column: 9, scope: !7848)
!7851 = !DILocation(line: 4024, column: 2, scope: !7848)
!7852 = !DILocation(line: 4025, column: 5, scope: !7842)
!7853 = !DILocation(line: 4020, column: 44, scope: !7839)
!7854 = !DILocation(line: 4020, column: 42, scope: !7839)
!7855 = !DILocation(line: 4020, column: 3, scope: !7839)
!7856 = distinct !{!7856, !7840, !7857}
!7857 = !DILocation(line: 4025, column: 5, scope: !7835)
!7858 = !DILocation(line: 4027, column: 3, scope: !7806)
!7859 = !DILocation(line: 4028, column: 1, scope: !7806)
!7860 = distinct !DISubprogram(name: "invoke_set_current_function_hook", scope: !3, file: !3, line: 4041, type: !7594, scopeLine: 4042, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7861 = !DILocalVariable(name: "fndecl", arg: 1, scope: !7860, file: !3, line: 4041, type: !3045)
!7862 = !DILocation(line: 4041, column: 40, scope: !7860)
!7863 = !DILocation(line: 4043, column: 8, scope: !7864)
!7864 = distinct !DILexicalBlock(scope: !7860, file: !3, line: 4043, column: 7)
!7865 = !DILocation(line: 4043, column: 7, scope: !7860)
!7866 = !DILocalVariable(name: "opts", scope: !7867, file: !3, line: 4045, type: !3045)
!7867 = distinct !DILexicalBlock(scope: !7864, file: !3, line: 4044, column: 5)
!7868 = !DILocation(line: 4045, column: 12, scope: !7867)
!7869 = !DILocation(line: 4045, column: 21, scope: !7867)
!7870 = !DILocation(line: 4045, column: 20, scope: !7867)
!7871 = !DILocation(line: 4046, column: 8, scope: !7867)
!7872 = !DILocation(line: 4047, column: 8, scope: !7867)
!7873 = !DILocation(line: 4049, column: 12, scope: !7874)
!7874 = distinct !DILexicalBlock(scope: !7867, file: !3, line: 4049, column: 11)
!7875 = !DILocation(line: 4049, column: 11, scope: !7867)
!7876 = !DILocation(line: 4050, column: 9, scope: !7874)
!7877 = !DILocation(line: 4050, column: 7, scope: !7874)
!7878 = !DILocation(line: 4050, column: 2, scope: !7874)
!7879 = !DILocation(line: 4053, column: 11, scope: !7880)
!7880 = distinct !DILexicalBlock(scope: !7867, file: !3, line: 4053, column: 11)
!7881 = !DILocation(line: 4053, column: 40, scope: !7880)
!7882 = !DILocation(line: 4053, column: 37, scope: !7880)
!7883 = !DILocation(line: 4053, column: 11, scope: !7867)
!7884 = !DILocation(line: 4055, column: 32, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7880, file: !3, line: 4054, column: 2)
!7886 = !DILocation(line: 4055, column: 30, scope: !7885)
!7887 = !DILocation(line: 4056, column: 29, scope: !7885)
!7888 = !DILocation(line: 4056, column: 4, scope: !7885)
!7889 = !DILocation(line: 4057, column: 2, scope: !7885)
!7890 = !DILocation(line: 4059, column: 15, scope: !7867)
!7891 = !DILocation(line: 4059, column: 37, scope: !7867)
!7892 = !DILocation(line: 4059, column: 7, scope: !7867)
!7893 = !DILocation(line: 4060, column: 5, scope: !7867)
!7894 = !DILocation(line: 4061, column: 1, scope: !7860)
!7895 = distinct !DISubprogram(name: "push_cfun", scope: !3, file: !3, line: 4082, type: !4566, scopeLine: 4083, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7896 = !DILocalVariable(name: "new_cfun", arg: 1, scope: !7895, file: !3, line: 4082, type: !3291)
!7897 = !DILocation(line: 4082, column: 29, scope: !7895)
!7898 = !DILocation(line: 4084, column: 3, scope: !7895)
!7899 = !DILocation(line: 4085, column: 13, scope: !7895)
!7900 = !DILocation(line: 4085, column: 3, scope: !7895)
!7901 = !DILocation(line: 4086, column: 1, scope: !7895)
!7902 = distinct !DISubprogram(name: "pop_cfun", scope: !3, file: !3, line: 4091, type: !4467, scopeLine: 4092, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7903 = !DILocalVariable(name: "new_cfun", scope: !7902, file: !3, line: 4093, type: !3291)
!7904 = !DILocation(line: 4093, column: 20, scope: !7902)
!7905 = !DILocation(line: 4093, column: 31, scope: !7902)
!7906 = !DILocation(line: 4094, column: 13, scope: !7902)
!7907 = !DILocation(line: 4094, column: 3, scope: !7902)
!7908 = !DILocation(line: 4095, column: 1, scope: !7902)
!7909 = distinct !DISubprogram(name: "get_next_funcdef_no", scope: !3, file: !3, line: 4099, type: !7910, scopeLine: 4100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7910 = !DISubroutineType(types: !7911)
!7911 = !{!2948}
!7912 = !DILocation(line: 4101, column: 20, scope: !7909)
!7913 = !DILocation(line: 4101, column: 3, scope: !7909)
!7914 = distinct !DISubprogram(name: "push_struct_function", scope: !3, file: !3, line: 4169, type: !7594, scopeLine: 4170, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7915 = !DILocalVariable(name: "fndecl", arg: 1, scope: !7914, file: !3, line: 4169, type: !3045)
!7916 = !DILocation(line: 4169, column: 28, scope: !7914)
!7917 = !DILocation(line: 4171, column: 3, scope: !7914)
!7918 = !DILocation(line: 4172, column: 29, scope: !7914)
!7919 = !DILocation(line: 4172, column: 3, scope: !7914)
!7920 = !DILocation(line: 4173, column: 1, scope: !7914)
!7921 = distinct !DISubprogram(name: "init_dummy_function_start", scope: !3, file: !3, line: 4212, type: !4467, scopeLine: 4213, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7922 = !DILocation(line: 4214, column: 3, scope: !7921)
!7923 = !DILocation(line: 4215, column: 21, scope: !7921)
!7924 = !DILocation(line: 4216, column: 3, scope: !7921)
!7925 = !DILocation(line: 4217, column: 3, scope: !7921)
!7926 = !DILocation(line: 4218, column: 1, scope: !7921)
!7927 = distinct !DISubprogram(name: "prepare_function_start", scope: !3, file: !3, line: 4179, type: !4467, scopeLine: 4180, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7928 = !DILocation(line: 4181, column: 3, scope: !7927)
!7929 = !DILocation(line: 4182, column: 3, scope: !7927)
!7930 = !DILocation(line: 4183, column: 3, scope: !7927)
!7931 = !DILocation(line: 4184, column: 3, scope: !7927)
!7932 = !DILocation(line: 4185, column: 3, scope: !7927)
!7933 = !DILocation(line: 4186, column: 3, scope: !7927)
!7934 = !DILocation(line: 4188, column: 24, scope: !7927)
!7935 = !DILocation(line: 4188, column: 22, scope: !7927)
!7936 = !DILocation(line: 4188, column: 20, scope: !7927)
!7937 = !DILocation(line: 4191, column: 22, scope: !7927)
!7938 = !DILocation(line: 4194, column: 16, scope: !7927)
!7939 = !DILocation(line: 4197, column: 25, scope: !7927)
!7940 = !DILocation(line: 4200, column: 23, scope: !7927)
!7941 = !DILocation(line: 4203, column: 24, scope: !7927)
!7942 = !DILocation(line: 4204, column: 1, scope: !7927)
!7943 = distinct !DISubprogram(name: "init_function_start", scope: !3, file: !3, line: 4225, type: !7594, scopeLine: 4226, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7944 = !DILocalVariable(name: "subr", arg: 1, scope: !7943, file: !3, line: 4225, type: !3045)
!7945 = !DILocation(line: 4225, column: 27, scope: !7943)
!7946 = !DILocation(line: 4227, column: 7, scope: !7947)
!7947 = distinct !DILexicalBlock(scope: !7943, file: !3, line: 4227, column: 7)
!7948 = !DILocation(line: 4227, column: 12, scope: !7947)
!7949 = !DILocation(line: 4227, column: 15, scope: !7947)
!7950 = !DILocation(line: 4227, column: 7, scope: !7943)
!7951 = !DILocation(line: 4228, column: 15, scope: !7947)
!7952 = !DILocation(line: 4228, column: 5, scope: !7947)
!7953 = !DILocation(line: 4230, column: 31, scope: !7947)
!7954 = !DILocation(line: 4230, column: 5, scope: !7947)
!7955 = !DILocation(line: 4231, column: 3, scope: !7943)
!7956 = !DILocation(line: 4235, column: 7, scope: !7957)
!7957 = distinct !DILexicalBlock(scope: !7943, file: !3, line: 4235, column: 7)
!7958 = !DILocation(line: 4235, column: 7, scope: !7943)
!7959 = !DILocation(line: 4236, column: 5, scope: !7957)
!7960 = !DILocation(line: 4237, column: 1, scope: !7943)
!7961 = distinct !DISubprogram(name: "init_function_for_compilation", scope: !3, file: !3, line: 4241, type: !4366, scopeLine: 4242, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7962 = !DILocation(line: 4243, column: 16, scope: !7961)
!7963 = !DILocation(line: 4244, column: 3, scope: !7961)
!7964 = distinct !DISubprogram(name: "expand_main_function", scope: !3, file: !3, line: 4268, type: !4467, scopeLine: 4269, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7965 = !DILocation(line: 4276, column: 1, scope: !7964)
!7966 = distinct !DISubprogram(name: "stack_protect_prologue", scope: !3, file: !3, line: 4287, type: !4467, scopeLine: 4288, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!7967 = !DILocalVariable(name: "guard_decl", scope: !7966, file: !3, line: 4289, type: !3045)
!7968 = !DILocation(line: 4289, column: 8, scope: !7966)
!7969 = !DILocation(line: 4289, column: 29, scope: !7966)
!7970 = !DILocation(line: 4289, column: 21, scope: !7966)
!7971 = !DILocalVariable(name: "x", scope: !7966, file: !3, line: 4290, type: !2924)
!7972 = !DILocation(line: 4290, column: 7, scope: !7966)
!7973 = !DILocalVariable(name: "y", scope: !7966, file: !3, line: 4290, type: !2924)
!7974 = !DILocation(line: 4290, column: 10, scope: !7966)
!7975 = !DILocation(line: 4292, column: 28, scope: !7966)
!7976 = !DILocation(line: 4292, column: 7, scope: !7966)
!7977 = !DILocation(line: 4292, column: 5, scope: !7966)
!7978 = !DILocation(line: 4293, column: 22, scope: !7966)
!7979 = !DILocation(line: 4293, column: 7, scope: !7966)
!7980 = !DILocation(line: 4293, column: 5, scope: !7966)
!7981 = !DILocalVariable(name: "insn", scope: !7982, file: !3, line: 4299, type: !2924)
!7982 = distinct !DILexicalBlock(scope: !7983, file: !3, line: 4298, column: 5)
!7983 = distinct !DILexicalBlock(scope: !7966, file: !3, line: 4297, column: 7)
!7984 = !DILocation(line: 4299, column: 11, scope: !7982)
!7985 = !DILocation(line: 4299, column: 41, scope: !7982)
!7986 = !DILocation(line: 4299, column: 44, scope: !7982)
!7987 = !DILocation(line: 4299, column: 18, scope: !7982)
!7988 = !DILocation(line: 4300, column: 11, scope: !7989)
!7989 = distinct !DILexicalBlock(scope: !7982, file: !3, line: 4300, column: 11)
!7990 = !DILocation(line: 4300, column: 11, scope: !7982)
!7991 = !DILocation(line: 4302, column: 15, scope: !7992)
!7992 = distinct !DILexicalBlock(scope: !7989, file: !3, line: 4301, column: 2)
!7993 = !DILocation(line: 4302, column: 4, scope: !7992)
!7994 = !DILocation(line: 4303, column: 4, scope: !7992)
!7995 = !DILocation(line: 4308, column: 19, scope: !7966)
!7996 = !DILocation(line: 4308, column: 22, scope: !7966)
!7997 = !DILocation(line: 4308, column: 3, scope: !7966)
!7998 = !DILocation(line: 4309, column: 1, scope: !7966)
!7999 = distinct !DISubprogram(name: "expand_normal", scope: !753, file: !753, line: 562, type: !8000, scopeLine: 563, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8000 = !DISubroutineType(types: !8001)
!8001 = !{!2924, !3045}
!8002 = !DILocalVariable(name: "exp", arg: 1, scope: !7999, file: !753, line: 562, type: !3045)
!8003 = !DILocation(line: 562, column: 21, scope: !7999)
!8004 = !DILocation(line: 564, column: 28, scope: !7999)
!8005 = !DILocation(line: 564, column: 10, scope: !7999)
!8006 = !DILocation(line: 564, column: 3, scope: !7999)
!8007 = distinct !DISubprogram(name: "stack_protect_epilogue", scope: !3, file: !3, line: 4320, type: !4467, scopeLine: 4321, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8008 = !DILocalVariable(name: "guard_decl", scope: !8007, file: !3, line: 4322, type: !3045)
!8009 = !DILocation(line: 4322, column: 8, scope: !8007)
!8010 = !DILocation(line: 4322, column: 29, scope: !8007)
!8011 = !DILocation(line: 4322, column: 21, scope: !8007)
!8012 = !DILocalVariable(name: "label", scope: !8007, file: !3, line: 4323, type: !2924)
!8013 = !DILocation(line: 4323, column: 7, scope: !8007)
!8014 = !DILocation(line: 4323, column: 15, scope: !8007)
!8015 = !DILocalVariable(name: "x", scope: !8007, file: !3, line: 4324, type: !2924)
!8016 = !DILocation(line: 4324, column: 7, scope: !8007)
!8017 = !DILocalVariable(name: "y", scope: !8007, file: !3, line: 4324, type: !2924)
!8018 = !DILocation(line: 4324, column: 10, scope: !8007)
!8019 = !DILocalVariable(name: "tmp", scope: !8007, file: !3, line: 4324, type: !2924)
!8020 = !DILocation(line: 4324, column: 13, scope: !8007)
!8021 = !DILocation(line: 4326, column: 28, scope: !8007)
!8022 = !DILocation(line: 4326, column: 7, scope: !8007)
!8023 = !DILocation(line: 4326, column: 5, scope: !8007)
!8024 = !DILocation(line: 4327, column: 22, scope: !8007)
!8025 = !DILocation(line: 4327, column: 7, scope: !8007)
!8026 = !DILocation(line: 4327, column: 5, scope: !8007)
!8027 = !DILocation(line: 4331, column: 3, scope: !8007)
!8028 = !DILocation(line: 4334, column: 37, scope: !8029)
!8029 = distinct !DILexicalBlock(scope: !8007, file: !3, line: 4332, column: 5)
!8030 = !DILocation(line: 4334, column: 40, scope: !8029)
!8031 = !DILocation(line: 4334, column: 43, scope: !8029)
!8032 = !DILocation(line: 4334, column: 13, scope: !8029)
!8033 = !DILocation(line: 4334, column: 11, scope: !8029)
!8034 = !DILocation(line: 4335, column: 11, scope: !8035)
!8035 = distinct !DILexicalBlock(scope: !8029, file: !3, line: 4335, column: 11)
!8036 = !DILocation(line: 4335, column: 11, scope: !8029)
!8037 = !DILocation(line: 4337, column: 15, scope: !8038)
!8038 = distinct !DILexicalBlock(scope: !8035, file: !3, line: 4336, column: 2)
!8039 = !DILocation(line: 4337, column: 4, scope: !8038)
!8040 = !DILocation(line: 4338, column: 4, scope: !8038)
!8041 = !DILocation(line: 4343, column: 32, scope: !8029)
!8042 = !DILocation(line: 4343, column: 35, scope: !8029)
!8043 = !DILocation(line: 4343, column: 52, scope: !8029)
!8044 = !DILocation(line: 4343, column: 65, scope: !8029)
!8045 = !DILocation(line: 4343, column: 7, scope: !8029)
!8046 = !DILocation(line: 4344, column: 7, scope: !8029)
!8047 = !DILocation(line: 4352, column: 9, scope: !8007)
!8048 = !DILocation(line: 4352, column: 7, scope: !8007)
!8049 = !DILocation(line: 4353, column: 7, scope: !8050)
!8050 = distinct !DILexicalBlock(scope: !8007, file: !3, line: 4353, column: 7)
!8051 = !DILocation(line: 4353, column: 7, scope: !8007)
!8052 = !DILocation(line: 4354, column: 23, scope: !8050)
!8053 = !DILocation(line: 4354, column: 5, scope: !8050)
!8054 = !DILocation(line: 4356, column: 29, scope: !8007)
!8055 = !DILocation(line: 4356, column: 21, scope: !8007)
!8056 = !DILocation(line: 4356, column: 3, scope: !8007)
!8057 = !DILocation(line: 4357, column: 15, scope: !8007)
!8058 = !DILocation(line: 4357, column: 3, scope: !8007)
!8059 = !DILocation(line: 4358, column: 1, scope: !8007)
!8060 = distinct !DISubprogram(name: "expand_function_start", scope: !3, file: !3, line: 4367, type: !7594, scopeLine: 4368, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8061 = !DILocalVariable(name: "subr", arg: 1, scope: !8060, file: !3, line: 4367, type: !3045)
!8062 = !DILocation(line: 4367, column: 29, scope: !8060)
!8063 = !DILocation(line: 4371, column: 3, scope: !8060)
!8064 = !DILocation(line: 4374, column: 8, scope: !8060)
!8065 = !DILocation(line: 4375, column: 8, scope: !8060)
!8066 = !DILocation(line: 4375, column: 13, scope: !8060)
!8067 = !DILocation(line: 4375, column: 11, scope: !8060)
!8068 = !DILocation(line: 0, scope: !8060)
!8069 = !DILocation(line: 4374, column: 7, scope: !8060)
!8070 = !DILocation(line: 4374, column: 5, scope: !8060)
!8071 = !DILocation(line: 4378, column: 8, scope: !8060)
!8072 = !DILocation(line: 4378, column: 24, scope: !8060)
!8073 = !DILocation(line: 4378, column: 36, scope: !8060)
!8074 = !DILocation(line: 4378, column: 41, scope: !8060)
!8075 = !DILocation(line: 4378, column: 39, scope: !8060)
!8076 = !DILocation(line: 4378, column: 7, scope: !8060)
!8077 = !DILocation(line: 4378, column: 5, scope: !8060)
!8078 = !DILocation(line: 4383, column: 18, scope: !8060)
!8079 = !DILocation(line: 4383, column: 16, scope: !8060)
!8080 = !DILocation(line: 4390, column: 26, scope: !8081)
!8081 = distinct !DILexicalBlock(scope: !8060, file: !3, line: 4390, column: 7)
!8082 = !DILocation(line: 4390, column: 46, scope: !8081)
!8083 = !DILocation(line: 4390, column: 7, scope: !8081)
!8084 = !DILocation(line: 4390, column: 7, scope: !8060)
!8085 = !DILocalVariable(name: "value_address", scope: !8086, file: !3, line: 4393, type: !2924)
!8086 = distinct !DILexicalBlock(scope: !8081, file: !3, line: 4391, column: 5)
!8087 = !DILocation(line: 4393, column: 11, scope: !8086)
!8088 = !DILocalVariable(name: "sv", scope: !8089, file: !3, line: 4404, type: !2924)
!8089 = distinct !DILexicalBlock(scope: !8086, file: !3, line: 4403, column: 2)
!8090 = !DILocation(line: 4404, column: 8, scope: !8089)
!8091 = !DILocation(line: 4404, column: 27, scope: !8089)
!8092 = !DILocation(line: 4404, column: 45, scope: !8089)
!8093 = !DILocation(line: 4404, column: 13, scope: !8089)
!8094 = !DILocation(line: 4408, column: 8, scope: !8095)
!8095 = distinct !DILexicalBlock(scope: !8089, file: !3, line: 4408, column: 8)
!8096 = !DILocation(line: 4408, column: 8, scope: !8089)
!8097 = !DILocation(line: 4410, column: 24, scope: !8098)
!8098 = distinct !DILexicalBlock(scope: !8095, file: !3, line: 4409, column: 6)
!8099 = !DILocation(line: 4410, column: 22, scope: !8098)
!8100 = !DILocation(line: 4411, column: 24, scope: !8098)
!8101 = !DILocation(line: 4411, column: 39, scope: !8098)
!8102 = !DILocation(line: 4411, column: 8, scope: !8098)
!8103 = !DILocation(line: 4412, column: 6, scope: !8098)
!8104 = !DILocation(line: 4414, column: 11, scope: !8105)
!8105 = distinct !DILexicalBlock(scope: !8086, file: !3, line: 4414, column: 11)
!8106 = !DILocation(line: 4414, column: 11, scope: !8086)
!8107 = !DILocalVariable(name: "x", scope: !8108, file: !3, line: 4416, type: !2924)
!8108 = distinct !DILexicalBlock(scope: !8105, file: !3, line: 4415, column: 2)
!8109 = !DILocation(line: 4416, column: 8, scope: !8108)
!8110 = !DILocation(line: 4416, column: 12, scope: !8108)
!8111 = !DILocation(line: 4417, column: 9, scope: !8112)
!8112 = distinct !DILexicalBlock(scope: !8108, file: !3, line: 4417, column: 8)
!8113 = !DILocation(line: 4417, column: 8, scope: !8108)
!8114 = !DILocation(line: 4419, column: 25, scope: !8115)
!8115 = distinct !DILexicalBlock(scope: !8112, file: !3, line: 4418, column: 6)
!8116 = !DILocation(line: 4419, column: 57, scope: !8115)
!8117 = !DILocation(line: 4419, column: 12, scope: !8115)
!8118 = !DILocation(line: 4419, column: 10, scope: !8115)
!8119 = !DILocation(line: 4420, column: 28, scope: !8115)
!8120 = !DILocation(line: 4420, column: 31, scope: !8115)
!8121 = !DILocation(line: 4420, column: 8, scope: !8115)
!8122 = !DILocation(line: 4421, column: 6, scope: !8115)
!8123 = !DILocation(line: 4422, column: 4, scope: !8108)
!8124 = !DILocation(line: 4423, column: 2, scope: !8108)
!8125 = !DILocation(line: 4424, column: 5, scope: !8086)
!8126 = !DILocation(line: 4425, column: 12, scope: !8127)
!8127 = distinct !DILexicalBlock(scope: !8081, file: !3, line: 4425, column: 12)
!8128 = !DILocation(line: 4425, column: 43, scope: !8127)
!8129 = !DILocation(line: 4425, column: 12, scope: !8081)
!8130 = !DILocation(line: 4427, column: 5, scope: !8127)
!8131 = !DILocalVariable(name: "return_type", scope: !8132, file: !3, line: 4432, type: !3045)
!8132 = distinct !DILexicalBlock(scope: !8127, file: !3, line: 4429, column: 5)
!8133 = !DILocation(line: 4432, column: 12, scope: !8132)
!8134 = !DILocation(line: 4432, column: 26, scope: !8132)
!8135 = !DILocation(line: 4433, column: 11, scope: !8136)
!8136 = distinct !DILexicalBlock(scope: !8132, file: !3, line: 4433, column: 11)
!8137 = !DILocation(line: 4433, column: 35, scope: !8136)
!8138 = !DILocation(line: 4434, column: 4, scope: !8136)
!8139 = !DILocation(line: 4434, column: 21, scope: !8136)
!8140 = !DILocation(line: 4434, column: 36, scope: !8136)
!8141 = !DILocation(line: 4434, column: 7, scope: !8136)
!8142 = !DILocation(line: 4433, column: 11, scope: !8132)
!8143 = !DILocation(line: 4438, column: 2, scope: !8136)
!8144 = !DILocalVariable(name: "hard_reg", scope: !8145, file: !3, line: 4445, type: !2924)
!8145 = distinct !DILexicalBlock(scope: !8136, file: !3, line: 4441, column: 2)
!8146 = !DILocation(line: 4445, column: 8, scope: !8145)
!8147 = !DILocation(line: 4445, column: 40, scope: !8145)
!8148 = !DILocation(line: 4445, column: 53, scope: !8145)
!8149 = !DILocation(line: 4445, column: 19, scope: !8145)
!8150 = !DILocation(line: 4449, column: 8, scope: !8151)
!8151 = distinct !DILexicalBlock(scope: !8145, file: !3, line: 4449, column: 8)
!8152 = !DILocation(line: 4449, column: 8, scope: !8145)
!8153 = !DILocation(line: 4450, column: 6, scope: !8151)
!8154 = !DILocation(line: 4454, column: 8, scope: !8155)
!8155 = distinct !DILexicalBlock(scope: !8151, file: !3, line: 4453, column: 6)
!8156 = !DILocation(line: 4455, column: 8, scope: !8155)
!8157 = !DILocation(line: 4461, column: 7, scope: !8132)
!8158 = !DILocation(line: 4461, column: 42, scope: !8132)
!8159 = !DILocation(line: 4466, column: 17, scope: !8060)
!8160 = !DILocation(line: 4466, column: 3, scope: !8060)
!8161 = !DILocation(line: 4469, column: 7, scope: !8162)
!8162 = distinct !DILexicalBlock(scope: !8060, file: !3, line: 4469, column: 7)
!8163 = !DILocation(line: 4469, column: 13, scope: !8162)
!8164 = !DILocation(line: 4469, column: 7, scope: !8060)
!8165 = !DILocalVariable(name: "parm", scope: !8166, file: !3, line: 4471, type: !3045)
!8166 = distinct !DILexicalBlock(scope: !8162, file: !3, line: 4470, column: 5)
!8167 = !DILocation(line: 4471, column: 12, scope: !8166)
!8168 = !DILocation(line: 4471, column: 19, scope: !8166)
!8169 = !DILocation(line: 4471, column: 25, scope: !8166)
!8170 = !DILocalVariable(name: "local", scope: !8166, file: !3, line: 4472, type: !2924)
!8171 = !DILocation(line: 4472, column: 11, scope: !8166)
!8172 = !DILocalVariable(name: "chain", scope: !8166, file: !3, line: 4472, type: !2924)
!8173 = !DILocation(line: 4472, column: 18, scope: !8166)
!8174 = !DILocalVariable(name: "insn", scope: !8166, file: !3, line: 4472, type: !2924)
!8175 = !DILocation(line: 4472, column: 25, scope: !8166)
!8176 = !DILocation(line: 4474, column: 15, scope: !8166)
!8177 = !DILocation(line: 4474, column: 13, scope: !8166)
!8178 = !DILocation(line: 4475, column: 29, scope: !8166)
!8179 = !DILocation(line: 4475, column: 43, scope: !8166)
!8180 = !DILocation(line: 4475, column: 15, scope: !8166)
!8181 = !DILocation(line: 4475, column: 13, scope: !8166)
!8182 = !DILocation(line: 4477, column: 30, scope: !8166)
!8183 = !DILocation(line: 4477, column: 36, scope: !8166)
!8184 = !DILocation(line: 4477, column: 7, scope: !8166)
!8185 = !DILocation(line: 4478, column: 7, scope: !8166)
!8186 = !DILocation(line: 4479, column: 25, scope: !8166)
!8187 = !DILocation(line: 4479, column: 32, scope: !8166)
!8188 = !DILocation(line: 4479, column: 7, scope: !8166)
!8189 = !DILocation(line: 4481, column: 30, scope: !8166)
!8190 = !DILocation(line: 4481, column: 37, scope: !8166)
!8191 = !DILocation(line: 4481, column: 14, scope: !8166)
!8192 = !DILocation(line: 4481, column: 12, scope: !8166)
!8193 = !DILocation(line: 4484, column: 11, scope: !8194)
!8194 = distinct !DILexicalBlock(scope: !8166, file: !3, line: 4484, column: 11)
!8195 = !DILocation(line: 4485, column: 4, scope: !8194)
!8196 = !DILocation(line: 4485, column: 24, scope: !8194)
!8197 = !DILocation(line: 4485, column: 41, scope: !8194)
!8198 = !DILocation(line: 4485, column: 7, scope: !8194)
!8199 = !DILocation(line: 4484, column: 11, scope: !8166)
!8200 = !DILocation(line: 4486, column: 23, scope: !8194)
!8201 = !DILocation(line: 4486, column: 40, scope: !8194)
!8202 = !DILocation(line: 4486, column: 2, scope: !8194)
!8203 = !DILocation(line: 4487, column: 5, scope: !8166)
!8204 = !DILocation(line: 4491, column: 7, scope: !8205)
!8205 = distinct !DILexicalBlock(scope: !8060, file: !3, line: 4491, column: 7)
!8206 = !DILocation(line: 4491, column: 13, scope: !8205)
!8207 = !DILocation(line: 4491, column: 7, scope: !8060)
!8208 = !DILocalVariable(name: "t_save", scope: !8209, file: !3, line: 4493, type: !3045)
!8209 = distinct !DILexicalBlock(scope: !8205, file: !3, line: 4492, column: 5)
!8210 = !DILocation(line: 4493, column: 12, scope: !8209)
!8211 = !DILocalVariable(name: "r_save", scope: !8209, file: !3, line: 4494, type: !2924)
!8212 = !DILocation(line: 4494, column: 11, scope: !8209)
!8213 = !DILocalVariable(name: "var", scope: !8209, file: !3, line: 4498, type: !3045)
!8214 = !DILocation(line: 4498, column: 12, scope: !8209)
!8215 = !DILocation(line: 4498, column: 18, scope: !8209)
!8216 = !DILocation(line: 4499, column: 12, scope: !8217)
!8217 = distinct !DILexicalBlock(scope: !8209, file: !3, line: 4499, column: 11)
!8218 = !DILocation(line: 4499, column: 11, scope: !8209)
!8219 = !DILocation(line: 4500, column: 15, scope: !8217)
!8220 = !DILocation(line: 4500, column: 2, scope: !8217)
!8221 = !DILocation(line: 4502, column: 16, scope: !8209)
!8222 = !DILocation(line: 4502, column: 14, scope: !8209)
!8223 = !DILocation(line: 4505, column: 29, scope: !8209)
!8224 = !DILocation(line: 4505, column: 16, scope: !8209)
!8225 = !DILocation(line: 4505, column: 14, scope: !8209)
!8226 = !DILocation(line: 4506, column: 16, scope: !8209)
!8227 = !DILocation(line: 4506, column: 14, scope: !8209)
!8228 = !DILocation(line: 4508, column: 23, scope: !8209)
!8229 = !DILocation(line: 4508, column: 39, scope: !8209)
!8230 = !DILocation(line: 4508, column: 31, scope: !8209)
!8231 = !DILocation(line: 4508, column: 7, scope: !8209)
!8232 = !DILocation(line: 4509, column: 7, scope: !8209)
!8233 = !DILocation(line: 4510, column: 5, scope: !8209)
!8234 = !DILocation(line: 4516, column: 3, scope: !8060)
!8235 = !DILocation(line: 4518, column: 3, scope: !8060)
!8236 = !DILocation(line: 4520, column: 21, scope: !8060)
!8237 = !DILocation(line: 4520, column: 19, scope: !8060)
!8238 = !DILocation(line: 4522, column: 13, scope: !8239)
!8239 = distinct !DILexicalBlock(scope: !8060, file: !3, line: 4522, column: 7)
!8240 = !DILocation(line: 4522, column: 7, scope: !8239)
!8241 = !DILocation(line: 4522, column: 7, scope: !8060)
!8242 = !DILocation(line: 4527, column: 5, scope: !8243)
!8243 = distinct !DILexicalBlock(scope: !8239, file: !3, line: 4523, column: 5)
!8244 = !DILocation(line: 4531, column: 6, scope: !8245)
!8245 = distinct !DILexicalBlock(scope: !8060, file: !3, line: 4531, column: 6)
!8246 = !DILocation(line: 4531, column: 6, scope: !8060)
!8247 = !DILocation(line: 4532, column: 30, scope: !8245)
!8248 = !DILocation(line: 4532, column: 28, scope: !8245)
!8249 = !DILocation(line: 4532, column: 5, scope: !8245)
!8250 = !DILocation(line: 4535, column: 3, scope: !8060)
!8251 = !DILocation(line: 4536, column: 1, scope: !8060)
!8252 = distinct !DISubprogram(name: "assign_parms", scope: !3, file: !3, line: 3139, type: !7594, scopeLine: 3140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8253 = !DILocalVariable(name: "fndecl", arg: 1, scope: !8252, file: !3, line: 3139, type: !3045)
!8254 = !DILocation(line: 3139, column: 20, scope: !8252)
!8255 = !DILocalVariable(name: "all", scope: !8252, file: !3, line: 3141, type: !6629)
!8256 = !DILocation(line: 3141, column: 31, scope: !8252)
!8257 = !DILocalVariable(name: "parm", scope: !8252, file: !3, line: 3142, type: !3045)
!8258 = !DILocation(line: 3142, column: 8, scope: !8252)
!8259 = !DILocalVariable(name: "fnargs", scope: !8252, file: !3, line: 3143, type: !4340)
!8260 = !DILocation(line: 3143, column: 20, scope: !8252)
!8261 = !DILocalVariable(name: "i", scope: !8252, file: !3, line: 3144, type: !7)
!8262 = !DILocation(line: 3144, column: 12, scope: !8252)
!8263 = !DILocation(line: 3147, column: 21, scope: !8252)
!8264 = !DILocation(line: 3147, column: 7, scope: !8252)
!8265 = !DILocation(line: 3147, column: 5, scope: !8252)
!8266 = !DILocation(line: 3149, column: 3, scope: !8252)
!8267 = !DILocation(line: 3150, column: 12, scope: !8252)
!8268 = !DILocation(line: 3150, column: 10, scope: !8252)
!8269 = !DILocation(line: 3152, column: 10, scope: !8270)
!8270 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 3152, column: 3)
!8271 = !DILocation(line: 3152, column: 8, scope: !8270)
!8272 = !DILocation(line: 3152, column: 15, scope: !8273)
!8273 = distinct !DILexicalBlock(scope: !8270, file: !3, line: 3152, column: 3)
!8274 = !DILocation(line: 3152, column: 3, scope: !8270)
!8275 = !DILocalVariable(name: "data", scope: !8276, file: !3, line: 3154, type: !6664)
!8276 = distinct !DILexicalBlock(scope: !8273, file: !3, line: 3153, column: 5)
!8277 = !DILocation(line: 3154, column: 35, scope: !8276)
!8278 = !DILocation(line: 3157, column: 42, scope: !8276)
!8279 = !DILocation(line: 3157, column: 7, scope: !8276)
!8280 = !DILocation(line: 3160, column: 16, scope: !8281)
!8281 = distinct !DILexicalBlock(scope: !8276, file: !3, line: 3160, column: 11)
!8282 = !DILocation(line: 3160, column: 28, scope: !8281)
!8283 = !DILocation(line: 3160, column: 11, scope: !8276)
!8284 = !DILocation(line: 3162, column: 4, scope: !8285)
!8285 = distinct !DILexicalBlock(scope: !8281, file: !3, line: 3161, column: 2)
!8286 = !DILocation(line: 3163, column: 31, scope: !8285)
!8287 = !DILocation(line: 3163, column: 4, scope: !8285)
!8288 = !DILocation(line: 3163, column: 29, scope: !8285)
!8289 = !DILocation(line: 3164, column: 4, scope: !8285)
!8290 = !DILocalVariable(name: "align", scope: !8291, file: !3, line: 3170, type: !7)
!8291 = distinct !DILexicalBlock(scope: !8292, file: !3, line: 3169, column: 9)
!8292 = distinct !DILexicalBlock(scope: !8276, file: !3, line: 3168, column: 11)
!8293 = !DILocation(line: 3170, column: 24, scope: !8291)
!8294 = !DILocation(line: 3170, column: 32, scope: !8291)
!8295 = !DILocation(line: 3172, column: 12, scope: !8291)
!8296 = !DILocation(line: 3172, column: 10, scope: !8291)
!8297 = !DILocation(line: 3174, column: 8, scope: !8298)
!8298 = distinct !DILexicalBlock(scope: !8291, file: !3, line: 3174, column: 8)
!8299 = !DILocation(line: 3174, column: 41, scope: !8298)
!8300 = !DILocation(line: 3174, column: 39, scope: !8298)
!8301 = !DILocation(line: 3174, column: 8, scope: !8291)
!8302 = !DILocation(line: 3175, column: 14, scope: !8298)
!8303 = !DILocation(line: 3175, column: 12, scope: !8298)
!8304 = !DILocation(line: 3175, column: 6, scope: !8298)
!8305 = !DILocation(line: 3178, column: 14, scope: !8306)
!8306 = distinct !DILexicalBlock(scope: !8291, file: !3, line: 3178, column: 8)
!8307 = !DILocation(line: 3178, column: 42, scope: !8306)
!8308 = !DILocation(line: 3178, column: 40, scope: !8306)
!8309 = !DILocation(line: 3178, column: 8, scope: !8291)
!8310 = !DILocation(line: 3180, column: 8, scope: !8311)
!8311 = distinct !DILexicalBlock(scope: !8306, file: !3, line: 3179, column: 6)
!8312 = !DILocation(line: 3181, column: 42, scope: !8311)
!8313 = !DILocation(line: 3181, column: 40, scope: !8311)
!8314 = !DILocation(line: 3182, column: 6, scope: !8311)
!8315 = !DILocation(line: 3185, column: 11, scope: !8316)
!8316 = distinct !DILexicalBlock(scope: !8276, file: !3, line: 3185, column: 11)
!8317 = !DILocation(line: 3185, column: 17, scope: !8316)
!8318 = !DILocation(line: 3185, column: 24, scope: !8316)
!8319 = !DILocation(line: 3185, column: 28, scope: !8316)
!8320 = !DILocation(line: 3185, column: 11, scope: !8276)
!8321 = !DILocation(line: 3186, column: 2, scope: !8316)
!8322 = !DILocation(line: 3189, column: 7, scope: !8276)
!8323 = !DILocation(line: 3192, column: 11, scope: !8324)
!8324 = distinct !DILexicalBlock(scope: !8276, file: !3, line: 3192, column: 11)
!8325 = !DILocation(line: 3192, column: 11, scope: !8276)
!8326 = !DILocation(line: 3194, column: 32, scope: !8327)
!8327 = distinct !DILexicalBlock(scope: !8324, file: !3, line: 3193, column: 2)
!8328 = !DILocation(line: 3194, column: 4, scope: !8327)
!8329 = !DILocation(line: 3195, column: 4, scope: !8327)
!8330 = !DILocation(line: 3196, column: 2, scope: !8327)
!8331 = !DILocation(line: 3199, column: 30, scope: !8276)
!8332 = !DILocation(line: 3199, column: 41, scope: !8276)
!8333 = !DILocation(line: 3199, column: 58, scope: !8276)
!8334 = !DILocation(line: 3199, column: 53, scope: !8276)
!8335 = !DILocation(line: 3199, column: 7, scope: !8276)
!8336 = !DILocation(line: 3202, column: 7, scope: !8276)
!8337 = !DILocation(line: 3205, column: 7, scope: !8276)
!8338 = !DILocation(line: 3207, column: 11, scope: !8339)
!8339 = distinct !DILexicalBlock(scope: !8276, file: !3, line: 3207, column: 11)
!8340 = !DILocation(line: 3207, column: 11, scope: !8276)
!8341 = !DILocation(line: 3208, column: 33, scope: !8339)
!8342 = !DILocation(line: 3208, column: 2, scope: !8339)
!8343 = !DILocation(line: 3209, column: 21, scope: !8344)
!8344 = distinct !DILexicalBlock(scope: !8339, file: !3, line: 3209, column: 16)
!8345 = !DILocation(line: 3209, column: 16, scope: !8344)
!8346 = !DILocation(line: 3209, column: 36, scope: !8344)
!8347 = !DILocation(line: 3209, column: 62, scope: !8344)
!8348 = !DILocation(line: 3209, column: 39, scope: !8344)
!8349 = !DILocation(line: 3209, column: 16, scope: !8339)
!8350 = !DILocation(line: 3210, column: 31, scope: !8344)
!8351 = !DILocation(line: 3210, column: 2, scope: !8344)
!8352 = !DILocation(line: 3212, column: 33, scope: !8344)
!8353 = !DILocation(line: 3212, column: 2, scope: !8344)
!8354 = !DILocation(line: 3213, column: 5, scope: !8276)
!8355 = !DILocation(line: 3152, column: 52, scope: !8273)
!8356 = !DILocation(line: 3152, column: 3, scope: !8273)
!8357 = distinct !{!8357, !8274, !8358}
!8358 = !DILocation(line: 3213, column: 5, scope: !8270)
!8359 = !DILocation(line: 3215, column: 21, scope: !8360)
!8360 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 3215, column: 7)
!8361 = !DILocation(line: 3215, column: 7, scope: !8360)
!8362 = !DILocation(line: 3215, column: 7, scope: !8252)
!8363 = !DILocation(line: 3216, column: 41, scope: !8360)
!8364 = !DILocation(line: 3216, column: 5, scope: !8360)
!8365 = !DILocation(line: 3218, column: 3, scope: !8252)
!8366 = !DILocation(line: 3222, column: 18, scope: !8252)
!8367 = !DILocation(line: 3222, column: 3, scope: !8252)
!8368 = !DILocation(line: 3227, column: 11, scope: !8369)
!8369 = distinct !DILexicalBlock(scope: !8370, file: !3, line: 3227, column: 11)
!8370 = distinct !DILexicalBlock(scope: !8371, file: !3, line: 3226, column: 5)
!8371 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 3225, column: 7)
!8372 = !DILocation(line: 3227, column: 11, scope: !8370)
!8373 = !DILocalVariable(name: "type", scope: !8374, file: !3, line: 3229, type: !3045)
!8374 = distinct !DILexicalBlock(scope: !8369, file: !3, line: 3228, column: 2)
!8375 = !DILocation(line: 3229, column: 9, scope: !8374)
!8376 = !DILocation(line: 3229, column: 16, scope: !8374)
!8377 = !DILocalVariable(name: "mode", scope: !8374, file: !3, line: 3230, type: !13)
!8378 = !DILocation(line: 3230, column: 22, scope: !8374)
!8379 = !DILocation(line: 3230, column: 29, scope: !8374)
!8380 = !DILocation(line: 3232, column: 8, scope: !8381)
!8381 = distinct !DILexicalBlock(scope: !8374, file: !3, line: 3232, column: 8)
!8382 = !DILocation(line: 3232, column: 13, scope: !8381)
!8383 = !DILocation(line: 3233, column: 8, scope: !8381)
!8384 = !DILocation(line: 3233, column: 11, scope: !8381)
!8385 = !DILocation(line: 3233, column: 16, scope: !8381)
!8386 = !DILocation(line: 3234, column: 8, scope: !8381)
!8387 = !DILocation(line: 3234, column: 12, scope: !8381)
!8388 = !DILocation(line: 3232, column: 8, scope: !8374)
!8389 = !DILocalVariable(name: "align", scope: !8390, file: !3, line: 3236, type: !7)
!8390 = distinct !DILexicalBlock(scope: !8381, file: !3, line: 3235, column: 6)
!8391 = !DILocation(line: 3236, column: 21, scope: !8390)
!8392 = !DILocation(line: 3236, column: 29, scope: !8390)
!8393 = !DILocation(line: 3237, column: 18, scope: !8394)
!8394 = distinct !DILexicalBlock(scope: !8390, file: !3, line: 3237, column: 12)
!8395 = !DILocation(line: 3237, column: 46, scope: !8394)
!8396 = !DILocation(line: 3237, column: 44, scope: !8394)
!8397 = !DILocation(line: 3237, column: 12, scope: !8390)
!8398 = !DILocation(line: 3239, column: 5, scope: !8399)
!8399 = distinct !DILexicalBlock(scope: !8394, file: !3, line: 3238, column: 3)
!8400 = !DILocation(line: 3240, column: 39, scope: !8399)
!8401 = !DILocation(line: 3240, column: 37, scope: !8399)
!8402 = !DILocation(line: 3241, column: 3, scope: !8399)
!8403 = !DILocation(line: 3242, column: 6, scope: !8390)
!8404 = !DILocation(line: 3243, column: 2, scope: !8374)
!8405 = !DILocation(line: 3250, column: 11, scope: !8406)
!8406 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 3250, column: 7)
!8407 = !DILocation(line: 3250, column: 7, scope: !8406)
!8408 = !DILocation(line: 3250, column: 7, scope: !8252)
!8409 = !DILocalVariable(name: "result", scope: !8410, file: !3, line: 3252, type: !3045)
!8410 = distinct !DILexicalBlock(scope: !8406, file: !3, line: 3251, column: 5)
!8411 = !DILocation(line: 3252, column: 12, scope: !8410)
!8412 = !DILocation(line: 3252, column: 21, scope: !8410)
!8413 = !DILocalVariable(name: "addr", scope: !8410, file: !3, line: 3253, type: !2924)
!8414 = !DILocation(line: 3253, column: 11, scope: !8410)
!8415 = !DILocation(line: 3253, column: 18, scope: !8410)
!8416 = !DILocalVariable(name: "x", scope: !8410, file: !3, line: 3254, type: !2924)
!8417 = !DILocation(line: 3254, column: 11, scope: !8410)
!8418 = !DILocation(line: 3256, column: 11, scope: !8419)
!8419 = distinct !DILexicalBlock(scope: !8410, file: !3, line: 3256, column: 11)
!8420 = !DILocation(line: 3256, column: 11, scope: !8410)
!8421 = !DILocation(line: 3257, column: 6, scope: !8419)
!8422 = !DILocation(line: 3257, column: 4, scope: !8419)
!8423 = !DILocation(line: 3257, column: 2, scope: !8419)
!8424 = !DILocation(line: 3260, column: 11, scope: !8425)
!8425 = distinct !DILexicalBlock(scope: !8419, file: !3, line: 3259, column: 2)
!8426 = !DILocation(line: 3260, column: 9, scope: !8425)
!8427 = !DILocation(line: 3261, column: 21, scope: !8425)
!8428 = !DILocation(line: 3261, column: 41, scope: !8425)
!8429 = !DILocation(line: 3261, column: 8, scope: !8425)
!8430 = !DILocation(line: 3261, column: 6, scope: !8425)
!8431 = !DILocation(line: 3262, column: 24, scope: !8425)
!8432 = !DILocation(line: 3262, column: 27, scope: !8425)
!8433 = !DILocation(line: 3262, column: 4, scope: !8425)
!8434 = !DILocation(line: 3264, column: 7, scope: !8410)
!8435 = !DILocation(line: 3265, column: 5, scope: !8410)
!8436 = !DILocation(line: 3268, column: 38, scope: !8252)
!8437 = !DILocation(line: 3268, column: 34, scope: !8252)
!8438 = !DILocation(line: 3268, column: 32, scope: !8252)
!8439 = !DILocation(line: 3269, column: 39, scope: !8252)
!8440 = !DILocation(line: 3269, column: 7, scope: !8252)
!8441 = !DILocation(line: 3269, column: 23, scope: !8252)
!8442 = !DILocation(line: 3269, column: 32, scope: !8252)
!8443 = !DILocation(line: 3270, column: 25, scope: !8252)
!8444 = !DILocation(line: 3270, column: 41, scope: !8252)
!8445 = !DILocation(line: 3270, column: 21, scope: !8252)
!8446 = !DILocation(line: 3270, column: 19, scope: !8252)
!8447 = !DILocation(line: 3276, column: 21, scope: !8252)
!8448 = !DILocation(line: 3276, column: 19, scope: !8252)
!8449 = !DILocation(line: 3280, column: 21, scope: !8252)
!8450 = !DILocation(line: 3280, column: 19, scope: !8252)
!8451 = !DILocation(line: 3290, column: 31, scope: !8252)
!8452 = !DILocation(line: 3290, column: 29, scope: !8252)
!8453 = !DILocation(line: 3296, column: 26, scope: !8252)
!8454 = !DILocation(line: 3296, column: 24, scope: !8252)
!8455 = !DILocation(line: 3302, column: 25, scope: !8252)
!8456 = !DILocation(line: 3310, column: 8, scope: !8252)
!8457 = !DILocation(line: 3311, column: 10, scope: !8252)
!8458 = !DILocation(line: 3310, column: 5, scope: !8252)
!8459 = !DILocation(line: 3316, column: 7, scope: !8460)
!8460 = distinct !DILexicalBlock(scope: !8252, file: !3, line: 3316, column: 7)
!8461 = !DILocation(line: 3316, column: 7, scope: !8252)
!8462 = !DILocalVariable(name: "decl_result", scope: !8463, file: !3, line: 3318, type: !3045)
!8463 = distinct !DILexicalBlock(scope: !8460, file: !3, line: 3317, column: 5)
!8464 = !DILocation(line: 3318, column: 12, scope: !8463)
!8465 = !DILocation(line: 3318, column: 26, scope: !8463)
!8466 = !DILocalVariable(name: "decl_rtl", scope: !8463, file: !3, line: 3319, type: !2924)
!8467 = !DILocation(line: 3319, column: 11, scope: !8463)
!8468 = !DILocation(line: 3319, column: 22, scope: !8463)
!8469 = !DILocation(line: 3321, column: 11, scope: !8470)
!8470 = distinct !DILexicalBlock(scope: !8463, file: !3, line: 3321, column: 11)
!8471 = !DILocation(line: 3321, column: 11, scope: !8463)
!8472 = !DILocation(line: 3322, column: 6, scope: !8470)
!8473 = !DILocation(line: 3322, column: 23, scope: !8470)
!8474 = !DILocation(line: 3323, column: 6, scope: !8470)
!8475 = !DILocalVariable(name: "real_decl_rtl", scope: !8476, file: !3, line: 3325, type: !2924)
!8476 = distinct !DILexicalBlock(scope: !8470, file: !3, line: 3324, column: 2)
!8477 = !DILocation(line: 3325, column: 8, scope: !8476)
!8478 = !DILocation(line: 3327, column: 34, scope: !8476)
!8479 = !DILocation(line: 3327, column: 50, scope: !8476)
!8480 = !DILocation(line: 3328, column: 8, scope: !8476)
!8481 = !DILocation(line: 3327, column: 20, scope: !8476)
!8482 = !DILocation(line: 3327, column: 18, scope: !8476)
!8483 = !DILocation(line: 3329, column: 4, scope: !8476)
!8484 = !DILocation(line: 3329, column: 41, scope: !8476)
!8485 = !DILocation(line: 3333, column: 23, scope: !8476)
!8486 = !DILocation(line: 3333, column: 21, scope: !8476)
!8487 = !DILocation(line: 3334, column: 2, scope: !8476)
!8488 = !DILocation(line: 3335, column: 5, scope: !8463)
!8489 = !DILocation(line: 3336, column: 1, scope: !8252)
!8490 = distinct !DISubprogram(name: "expand_expr", scope: !753, file: !753, line: 555, type: !8491, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8491 = !DISubroutineType(types: !8492)
!8492 = !{!2924, !3045, !2924, !13, !2613}
!8493 = !DILocalVariable(name: "exp", arg: 1, scope: !8490, file: !753, line: 555, type: !3045)
!8494 = !DILocation(line: 555, column: 19, scope: !8490)
!8495 = !DILocalVariable(name: "target", arg: 2, scope: !8490, file: !753, line: 555, type: !2924)
!8496 = !DILocation(line: 555, column: 28, scope: !8490)
!8497 = !DILocalVariable(name: "mode", arg: 3, scope: !8490, file: !753, line: 555, type: !13)
!8498 = !DILocation(line: 555, column: 54, scope: !8490)
!8499 = !DILocalVariable(name: "modifier", arg: 4, scope: !8490, file: !753, line: 556, type: !2613)
!8500 = !DILocation(line: 556, column: 28, scope: !8490)
!8501 = !DILocation(line: 558, column: 28, scope: !8490)
!8502 = !DILocation(line: 558, column: 33, scope: !8490)
!8503 = !DILocation(line: 558, column: 41, scope: !8490)
!8504 = !DILocation(line: 558, column: 47, scope: !8490)
!8505 = !DILocation(line: 558, column: 10, scope: !8490)
!8506 = !DILocation(line: 558, column: 3, scope: !8490)
!8507 = distinct !DISubprogram(name: "expand_dummy_function_end", scope: !3, file: !3, line: 4540, type: !4467, scopeLine: 4541, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8508 = !DILocation(line: 4542, column: 3, scope: !8507)
!8509 = !DILocation(line: 4545, column: 3, scope: !8507)
!8510 = !DILocation(line: 4545, column: 10, scope: !8507)
!8511 = !DILocation(line: 4546, column: 5, scope: !8507)
!8512 = distinct !{!8512, !8509, !8513}
!8513 = !DILocation(line: 4546, column: 19, scope: !8507)
!8514 = !DILocation(line: 4551, column: 23, scope: !8507)
!8515 = !DILocation(line: 4551, column: 3, scope: !8507)
!8516 = !DILocation(line: 4552, column: 27, scope: !8507)
!8517 = !DILocation(line: 4552, column: 3, scope: !8507)
!8518 = !DILocation(line: 4553, column: 3, scope: !8507)
!8519 = !DILocation(line: 4554, column: 21, scope: !8507)
!8520 = !DILocation(line: 4555, column: 1, scope: !8507)
!8521 = distinct !DISubprogram(name: "diddle_return_value", scope: !3, file: !3, line: 4561, type: !8522, scopeLine: 4562, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8522 = !DISubroutineType(types: !8523)
!8523 = !{null, !8524, !3035}
!8524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8525, size: 64)
!8525 = !DISubroutineType(types: !8526)
!8526 = !{null, !2924, !3035}
!8527 = !DILocalVariable(name: "doit", arg: 1, scope: !8521, file: !3, line: 4561, type: !8524)
!8528 = !DILocation(line: 4561, column: 29, scope: !8521)
!8529 = !DILocalVariable(name: "arg", arg: 2, scope: !8521, file: !3, line: 4561, type: !3035)
!8530 = !DILocation(line: 4561, column: 56, scope: !8521)
!8531 = !DILocalVariable(name: "outgoing", scope: !8521, file: !3, line: 4563, type: !2924)
!8532 = !DILocation(line: 4563, column: 7, scope: !8521)
!8533 = !DILocation(line: 4563, column: 24, scope: !8521)
!8534 = !DILocation(line: 4565, column: 9, scope: !8535)
!8535 = distinct !DILexicalBlock(scope: !8521, file: !3, line: 4565, column: 7)
!8536 = !DILocation(line: 4565, column: 7, scope: !8521)
!8537 = !DILocation(line: 4566, column: 5, scope: !8535)
!8538 = !DILocation(line: 4568, column: 7, scope: !8539)
!8539 = distinct !DILexicalBlock(scope: !8521, file: !3, line: 4568, column: 7)
!8540 = !DILocation(line: 4568, column: 7, scope: !8521)
!8541 = !DILocation(line: 4569, column: 7, scope: !8539)
!8542 = !DILocation(line: 4569, column: 14, scope: !8539)
!8543 = !DILocation(line: 4569, column: 24, scope: !8539)
!8544 = !DILocation(line: 4569, column: 5, scope: !8539)
!8545 = !DILocation(line: 4570, column: 12, scope: !8546)
!8546 = distinct !DILexicalBlock(scope: !8539, file: !3, line: 4570, column: 12)
!8547 = !DILocation(line: 4570, column: 32, scope: !8546)
!8548 = !DILocation(line: 4570, column: 12, scope: !8539)
!8549 = !DILocalVariable(name: "i", scope: !8550, file: !3, line: 4572, type: !2948)
!8550 = distinct !DILexicalBlock(scope: !8546, file: !3, line: 4571, column: 5)
!8551 = !DILocation(line: 4572, column: 11, scope: !8550)
!8552 = !DILocation(line: 4574, column: 14, scope: !8553)
!8553 = distinct !DILexicalBlock(scope: !8550, file: !3, line: 4574, column: 7)
!8554 = !DILocation(line: 4574, column: 12, scope: !8553)
!8555 = !DILocation(line: 4574, column: 19, scope: !8556)
!8556 = distinct !DILexicalBlock(scope: !8553, file: !3, line: 4574, column: 7)
!8557 = !DILocation(line: 4574, column: 23, scope: !8556)
!8558 = !DILocation(line: 4574, column: 21, scope: !8556)
!8559 = !DILocation(line: 4574, column: 7, scope: !8553)
!8560 = !DILocalVariable(name: "x", scope: !8561, file: !3, line: 4576, type: !2924)
!8561 = distinct !DILexicalBlock(scope: !8556, file: !3, line: 4575, column: 2)
!8562 = !DILocation(line: 4576, column: 8, scope: !8561)
!8563 = !DILocation(line: 4576, column: 12, scope: !8561)
!8564 = !DILocation(line: 4578, column: 8, scope: !8565)
!8565 = distinct !DILexicalBlock(scope: !8561, file: !3, line: 4578, column: 8)
!8566 = !DILocation(line: 4578, column: 18, scope: !8565)
!8567 = !DILocation(line: 4578, column: 21, scope: !8565)
!8568 = !DILocation(line: 4578, column: 31, scope: !8565)
!8569 = !DILocation(line: 4578, column: 8, scope: !8561)
!8570 = !DILocation(line: 4579, column: 8, scope: !8565)
!8571 = !DILocation(line: 4579, column: 15, scope: !8565)
!8572 = !DILocation(line: 4579, column: 18, scope: !8565)
!8573 = !DILocation(line: 4579, column: 6, scope: !8565)
!8574 = !DILocation(line: 4580, column: 2, scope: !8561)
!8575 = !DILocation(line: 4574, column: 47, scope: !8556)
!8576 = !DILocation(line: 4574, column: 7, scope: !8556)
!8577 = distinct !{!8577, !8559, !8578}
!8578 = !DILocation(line: 4580, column: 2, scope: !8553)
!8579 = !DILocation(line: 4581, column: 5, scope: !8550)
!8580 = !DILocation(line: 4582, column: 1, scope: !8521)
!8581 = distinct !DISubprogram(name: "clobber_return_register", scope: !3, file: !3, line: 4591, type: !4467, scopeLine: 4592, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8582 = !DILocation(line: 4593, column: 3, scope: !8581)
!8583 = !DILocation(line: 4596, column: 7, scope: !8584)
!8584 = distinct !DILexicalBlock(scope: !8581, file: !3, line: 4596, column: 7)
!8585 = !DILocation(line: 4596, column: 7, scope: !8581)
!8586 = !DILocalVariable(name: "decl_result", scope: !8587, file: !3, line: 4598, type: !3045)
!8587 = distinct !DILexicalBlock(scope: !8584, file: !3, line: 4597, column: 5)
!8588 = !DILocation(line: 4598, column: 12, scope: !8587)
!8589 = !DILocation(line: 4598, column: 26, scope: !8587)
!8590 = !DILocalVariable(name: "decl_rtl", scope: !8587, file: !3, line: 4599, type: !2924)
!8591 = !DILocation(line: 4599, column: 11, scope: !8587)
!8592 = !DILocation(line: 4599, column: 22, scope: !8587)
!8593 = !DILocation(line: 4600, column: 11, scope: !8594)
!8594 = distinct !DILexicalBlock(scope: !8587, file: !3, line: 4600, column: 11)
!8595 = !DILocation(line: 4600, column: 28, scope: !8594)
!8596 = !DILocation(line: 4600, column: 31, scope: !8594)
!8597 = !DILocation(line: 4600, column: 48, scope: !8594)
!8598 = !DILocation(line: 4600, column: 11, scope: !8587)
!8599 = !DILocation(line: 4602, column: 27, scope: !8600)
!8600 = distinct !DILexicalBlock(scope: !8594, file: !3, line: 4601, column: 2)
!8601 = !DILocation(line: 4602, column: 4, scope: !8600)
!8602 = !DILocation(line: 4603, column: 2, scope: !8600)
!8603 = !DILocation(line: 4604, column: 5, scope: !8587)
!8604 = !DILocation(line: 4605, column: 1, scope: !8581)
!8605 = distinct !DISubprogram(name: "do_clobber_return_reg", scope: !3, file: !3, line: 4585, type: !8525, scopeLine: 4586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8606 = !DILocalVariable(name: "reg", arg: 1, scope: !8605, file: !3, line: 4585, type: !2924)
!8607 = !DILocation(line: 4585, column: 28, scope: !8605)
!8608 = !DILocalVariable(name: "arg", arg: 2, scope: !8605, file: !3, line: 4585, type: !3035)
!8609 = !DILocation(line: 4585, column: 39, scope: !8605)
!8610 = !DILocation(line: 4587, column: 17, scope: !8605)
!8611 = !DILocation(line: 4587, column: 3, scope: !8605)
!8612 = !DILocation(line: 4588, column: 1, scope: !8605)
!8613 = distinct !DISubprogram(name: "do_warn_unused_parameter", scope: !3, file: !3, line: 4621, type: !7594, scopeLine: 4622, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8614 = !DILocalVariable(name: "fn", arg: 1, scope: !8613, file: !3, line: 4621, type: !3045)
!8615 = !DILocation(line: 4621, column: 32, scope: !8613)
!8616 = !DILocalVariable(name: "decl", scope: !8613, file: !3, line: 4623, type: !3045)
!8617 = !DILocation(line: 4623, column: 8, scope: !8613)
!8618 = !DILocation(line: 4625, column: 15, scope: !8619)
!8619 = distinct !DILexicalBlock(scope: !8613, file: !3, line: 4625, column: 3)
!8620 = !DILocation(line: 4625, column: 13, scope: !8619)
!8621 = !DILocation(line: 4625, column: 8, scope: !8619)
!8622 = !DILocation(line: 4626, column: 8, scope: !8623)
!8623 = distinct !DILexicalBlock(scope: !8619, file: !3, line: 4625, column: 3)
!8624 = !DILocation(line: 4625, column: 3, scope: !8619)
!8625 = !DILocation(line: 4627, column: 10, scope: !8626)
!8626 = distinct !DILexicalBlock(scope: !8623, file: !3, line: 4627, column: 9)
!8627 = !DILocation(line: 4627, column: 27, scope: !8626)
!8628 = !DILocation(line: 4627, column: 30, scope: !8626)
!8629 = !DILocation(line: 4627, column: 47, scope: !8626)
!8630 = !DILocation(line: 4628, column: 2, scope: !8626)
!8631 = !DILocation(line: 4628, column: 5, scope: !8626)
!8632 = !DILocation(line: 4628, column: 22, scope: !8626)
!8633 = !DILocation(line: 4628, column: 26, scope: !8626)
!8634 = !DILocation(line: 4629, column: 2, scope: !8626)
!8635 = !DILocation(line: 4629, column: 6, scope: !8626)
!8636 = !DILocation(line: 4627, column: 9, scope: !8623)
!8637 = !DILocation(line: 4630, column: 64, scope: !8626)
!8638 = !DILocation(line: 4630, column: 7, scope: !8626)
!8639 = !DILocation(line: 4626, column: 21, scope: !8623)
!8640 = !DILocation(line: 4626, column: 19, scope: !8623)
!8641 = !DILocation(line: 4625, column: 3, scope: !8623)
!8642 = distinct !{!8642, !8624, !8643}
!8643 = !DILocation(line: 4630, column: 68, scope: !8619)
!8644 = !DILocation(line: 4631, column: 1, scope: !8613)
!8645 = distinct !DISubprogram(name: "expand_function_end", scope: !3, file: !3, line: 4638, type: !4467, scopeLine: 4639, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8646 = !DILocalVariable(name: "clobber_after", scope: !8645, file: !3, line: 4640, type: !2924)
!8647 = !DILocation(line: 4640, column: 7, scope: !8645)
!8648 = !DILocation(line: 4644, column: 7, scope: !8649)
!8649 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 4644, column: 7)
!8650 = !DILocation(line: 4644, column: 29, scope: !8649)
!8651 = !DILocation(line: 4644, column: 40, scope: !8649)
!8652 = !DILocation(line: 4644, column: 34, scope: !8649)
!8653 = !DILocation(line: 4644, column: 7, scope: !8645)
!8654 = !DILocation(line: 4645, column: 5, scope: !8649)
!8655 = !DILocation(line: 4650, column: 7, scope: !8656)
!8656 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 4650, column: 7)
!8657 = !DILocation(line: 4650, column: 24, scope: !8656)
!8658 = !DILocation(line: 4650, column: 7, scope: !8645)
!8659 = !DILocalVariable(name: "insn", scope: !8660, file: !3, line: 4652, type: !2924)
!8660 = distinct !DILexicalBlock(scope: !8656, file: !3, line: 4651, column: 5)
!8661 = !DILocation(line: 4652, column: 11, scope: !8660)
!8662 = !DILocalVariable(name: "seq", scope: !8660, file: !3, line: 4652, type: !2924)
!8663 = !DILocation(line: 4652, column: 17, scope: !8660)
!8664 = !DILocation(line: 4654, column: 19, scope: !8665)
!8665 = distinct !DILexicalBlock(scope: !8660, file: !3, line: 4654, column: 7)
!8666 = !DILocation(line: 4654, column: 17, scope: !8665)
!8667 = !DILocation(line: 4654, column: 12, scope: !8665)
!8668 = !DILocation(line: 4654, column: 33, scope: !8669)
!8669 = distinct !DILexicalBlock(scope: !8665, file: !3, line: 4654, column: 7)
!8670 = !DILocation(line: 4654, column: 7, scope: !8665)
!8671 = !DILocation(line: 4655, column: 6, scope: !8672)
!8672 = distinct !DILexicalBlock(scope: !8669, file: !3, line: 4655, column: 6)
!8673 = !DILocation(line: 4655, column: 6, scope: !8669)
!8674 = !DILocalVariable(name: "max_frame_size", scope: !8675, file: !3, line: 4657, type: !2924)
!8675 = distinct !DILexicalBlock(scope: !8672, file: !3, line: 4656, column: 4)
!8676 = !DILocation(line: 4657, column: 10, scope: !8675)
!8677 = !DILocation(line: 4657, column: 27, scope: !8675)
!8678 = !DILocation(line: 4658, column: 6, scope: !8675)
!8679 = !DILocation(line: 4660, column: 37, scope: !8680)
!8680 = distinct !DILexicalBlock(scope: !8675, file: !3, line: 4659, column: 10)
!8681 = !DILocation(line: 4660, column: 8, scope: !8680)
!8682 = !DILocation(line: 4663, column: 12, scope: !8675)
!8683 = !DILocation(line: 4663, column: 10, scope: !8675)
!8684 = !DILocation(line: 4664, column: 6, scope: !8675)
!8685 = !DILocation(line: 4665, column: 24, scope: !8675)
!8686 = !DILocation(line: 4665, column: 29, scope: !8675)
!8687 = !DILocation(line: 4665, column: 6, scope: !8675)
!8688 = !DILocation(line: 4666, column: 6, scope: !8675)
!8689 = !DILocation(line: 4654, column: 46, scope: !8669)
!8690 = !DILocation(line: 4654, column: 44, scope: !8669)
!8691 = !DILocation(line: 4654, column: 7, scope: !8669)
!8692 = distinct !{!8692, !8670, !8693}
!8693 = !DILocation(line: 4667, column: 4, scope: !8665)
!8694 = !DILocation(line: 4668, column: 5, scope: !8660)
!8695 = !DILocation(line: 4671, column: 3, scope: !8645)
!8696 = !DILocation(line: 4671, column: 10, scope: !8645)
!8697 = !DILocation(line: 4672, column: 5, scope: !8645)
!8698 = distinct !{!8698, !8695, !8699}
!8699 = !DILocation(line: 4672, column: 19, scope: !8645)
!8700 = !DILocation(line: 4674, column: 3, scope: !8645)
!8701 = !DILocation(line: 4675, column: 3, scope: !8645)
!8702 = !DILocation(line: 4679, column: 3, scope: !8645)
!8703 = !DILocation(line: 4680, column: 34, scope: !8645)
!8704 = !DILocation(line: 4680, column: 3, scope: !8645)
!8705 = !DILocation(line: 4690, column: 19, scope: !8645)
!8706 = !DILocation(line: 4690, column: 17, scope: !8645)
!8707 = !DILocation(line: 4693, column: 15, scope: !8645)
!8708 = !DILocation(line: 4693, column: 3, scope: !8645)
!8709 = !DILocation(line: 4707, column: 11, scope: !8710)
!8710 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 4707, column: 11)
!8711 = distinct !DILexicalBlock(scope: !8712, file: !3, line: 4703, column: 5)
!8712 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 4695, column: 7)
!8713 = !DILocation(line: 4707, column: 11, scope: !8711)
!8714 = !DILocation(line: 4708, column: 13, scope: !8710)
!8715 = !DILocation(line: 4708, column: 2, scope: !8710)
!8716 = !DILocation(line: 4713, column: 3, scope: !8645)
!8717 = !DILocation(line: 4718, column: 7, scope: !8718)
!8718 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 4718, column: 7)
!8719 = !DILocation(line: 4718, column: 7, scope: !8645)
!8720 = !DILocalVariable(name: "decl_result", scope: !8721, file: !3, line: 4720, type: !3045)
!8721 = distinct !DILexicalBlock(scope: !8718, file: !3, line: 4719, column: 5)
!8722 = !DILocation(line: 4720, column: 12, scope: !8721)
!8723 = !DILocation(line: 4720, column: 26, scope: !8721)
!8724 = !DILocalVariable(name: "decl_rtl", scope: !8721, file: !3, line: 4721, type: !2924)
!8725 = !DILocation(line: 4721, column: 11, scope: !8721)
!8726 = !DILocation(line: 4721, column: 22, scope: !8721)
!8727 = !DILocation(line: 4723, column: 11, scope: !8728)
!8728 = distinct !DILexicalBlock(scope: !8721, file: !3, line: 4723, column: 11)
!8729 = !DILocation(line: 4723, column: 11, scope: !8721)
!8730 = !DILocation(line: 4724, column: 6, scope: !8728)
!8731 = !DILocation(line: 4724, column: 23, scope: !8728)
!8732 = !DILocation(line: 4725, column: 6, scope: !8728)
!8733 = !DILocalVariable(name: "real_decl_rtl", scope: !8734, file: !3, line: 4727, type: !2924)
!8734 = distinct !DILexicalBlock(scope: !8728, file: !3, line: 4726, column: 2)
!8735 = !DILocation(line: 4727, column: 8, scope: !8734)
!8736 = !DILocation(line: 4727, column: 30, scope: !8734)
!8737 = !DILocation(line: 4730, column: 4, scope: !8734)
!8738 = !DILocation(line: 4736, column: 8, scope: !8739)
!8739 = distinct !DILexicalBlock(scope: !8734, file: !3, line: 4736, column: 8)
!8740 = !DILocation(line: 4736, column: 33, scope: !8739)
!8741 = !DILocation(line: 4736, column: 8, scope: !8734)
!8742 = !DILocation(line: 4737, column: 6, scope: !8739)
!8743 = !DILocation(line: 4743, column: 8, scope: !8744)
!8744 = distinct !DILexicalBlock(scope: !8734, file: !3, line: 4743, column: 8)
!8745 = !DILocation(line: 4743, column: 44, scope: !8744)
!8746 = !DILocation(line: 4744, column: 8, scope: !8744)
!8747 = !DILocation(line: 4744, column: 25, scope: !8744)
!8748 = !DILocation(line: 4744, column: 40, scope: !8744)
!8749 = !DILocation(line: 4744, column: 11, scope: !8744)
!8750 = !DILocation(line: 4743, column: 8, scope: !8734)
!8751 = !DILocation(line: 4746, column: 37, scope: !8752)
!8752 = distinct !DILexicalBlock(scope: !8744, file: !3, line: 4745, column: 6)
!8753 = !DILocation(line: 4747, column: 9, scope: !8752)
!8754 = !DILocation(line: 4746, column: 24, scope: !8752)
!8755 = !DILocation(line: 4748, column: 10, scope: !8752)
!8756 = !DILocation(line: 4746, column: 8, scope: !8752)
!8757 = !DILocation(line: 4749, column: 28, scope: !8752)
!8758 = !DILocation(line: 4749, column: 55, scope: !8752)
!8759 = !DILocation(line: 4749, column: 8, scope: !8752)
!8760 = !DILocation(line: 4750, column: 6, scope: !8752)
!8761 = !DILocation(line: 4754, column: 13, scope: !8762)
!8762 = distinct !DILexicalBlock(scope: !8744, file: !3, line: 4754, column: 13)
!8763 = !DILocation(line: 4754, column: 41, scope: !8762)
!8764 = !DILocation(line: 4754, column: 38, scope: !8762)
!8765 = !DILocation(line: 4754, column: 13, scope: !8744)
!8766 = !DILocalVariable(name: "unsignedp", scope: !8767, file: !3, line: 4756, type: !2948)
!8767 = distinct !DILexicalBlock(scope: !8762, file: !3, line: 4755, column: 6)
!8768 = !DILocation(line: 4756, column: 12, scope: !8767)
!8769 = !DILocation(line: 4756, column: 24, scope: !8767)
!8770 = !DILocation(line: 4757, column: 31, scope: !8767)
!8771 = !DILocation(line: 4758, column: 10, scope: !8767)
!8772 = !DILocation(line: 4759, column: 10, scope: !8767)
!8773 = !DILocation(line: 4757, column: 8, scope: !8767)
!8774 = !DILocation(line: 4761, column: 22, scope: !8767)
!8775 = !DILocation(line: 4761, column: 37, scope: !8767)
!8776 = !DILocation(line: 4761, column: 47, scope: !8767)
!8777 = !DILocation(line: 4761, column: 8, scope: !8767)
!8778 = !DILocation(line: 4762, column: 6, scope: !8767)
!8779 = !DILocation(line: 4763, column: 13, scope: !8780)
!8780 = distinct !DILexicalBlock(scope: !8762, file: !3, line: 4763, column: 13)
!8781 = !DILocation(line: 4763, column: 38, scope: !8780)
!8782 = !DILocation(line: 4763, column: 13, scope: !8762)
!8783 = !DILocation(line: 4768, column: 12, scope: !8784)
!8784 = distinct !DILexicalBlock(scope: !8785, file: !3, line: 4768, column: 12)
!8785 = distinct !DILexicalBlock(scope: !8780, file: !3, line: 4764, column: 6)
!8786 = !DILocation(line: 4768, column: 32, scope: !8784)
!8787 = !DILocation(line: 4768, column: 12, scope: !8785)
!8788 = !DILocation(line: 4769, column: 20, scope: !8784)
!8789 = !DILocation(line: 4769, column: 35, scope: !8784)
!8790 = !DILocation(line: 4769, column: 3, scope: !8784)
!8791 = !DILocation(line: 4771, column: 20, scope: !8784)
!8792 = !DILocation(line: 4771, column: 35, scope: !8784)
!8793 = !DILocation(line: 4772, column: 6, scope: !8784)
!8794 = !DILocation(line: 4773, column: 25, scope: !8784)
!8795 = !DILocation(line: 4773, column: 6, scope: !8784)
!8796 = !DILocation(line: 4771, column: 3, scope: !8784)
!8797 = !DILocation(line: 4774, column: 6, scope: !8785)
!8798 = !DILocation(line: 4778, column: 13, scope: !8799)
!8799 = distinct !DILexicalBlock(scope: !8780, file: !3, line: 4778, column: 13)
!8800 = !DILocation(line: 4778, column: 33, scope: !8799)
!8801 = !DILocation(line: 4779, column: 6, scope: !8799)
!8802 = !DILocation(line: 4779, column: 9, scope: !8799)
!8803 = !DILocation(line: 4779, column: 46, scope: !8799)
!8804 = !DILocation(line: 4780, column: 6, scope: !8799)
!8805 = !DILocation(line: 4780, column: 9, scope: !8799)
!8806 = !DILocation(line: 4780, column: 48, scope: !8799)
!8807 = !DILocation(line: 4778, column: 13, scope: !8780)
!8808 = !DILocalVariable(name: "old_generating_concat_p", scope: !8809, file: !3, line: 4782, type: !2948)
!8809 = distinct !DILexicalBlock(scope: !8799, file: !3, line: 4781, column: 6)
!8810 = !DILocation(line: 4782, column: 12, scope: !8809)
!8811 = !DILocalVariable(name: "tmp", scope: !8809, file: !3, line: 4783, type: !2924)
!8812 = !DILocation(line: 4783, column: 12, scope: !8809)
!8813 = !DILocation(line: 4785, column: 34, scope: !8809)
!8814 = !DILocation(line: 4785, column: 32, scope: !8809)
!8815 = !DILocation(line: 4786, column: 28, scope: !8809)
!8816 = !DILocation(line: 4787, column: 27, scope: !8809)
!8817 = !DILocation(line: 4787, column: 14, scope: !8809)
!8818 = !DILocation(line: 4787, column: 12, scope: !8809)
!8819 = !DILocation(line: 4788, column: 30, scope: !8809)
!8820 = !DILocation(line: 4788, column: 28, scope: !8809)
!8821 = !DILocation(line: 4790, column: 24, scope: !8809)
!8822 = !DILocation(line: 4790, column: 29, scope: !8809)
!8823 = !DILocation(line: 4790, column: 8, scope: !8809)
!8824 = !DILocation(line: 4791, column: 24, scope: !8809)
!8825 = !DILocation(line: 4791, column: 39, scope: !8809)
!8826 = !DILocation(line: 4791, column: 8, scope: !8809)
!8827 = !DILocation(line: 4792, column: 6, scope: !8809)
!8828 = !DILocation(line: 4794, column: 22, scope: !8799)
!8829 = !DILocation(line: 4794, column: 37, scope: !8799)
!8830 = !DILocation(line: 4794, column: 6, scope: !8799)
!8831 = !DILocation(line: 4795, column: 2, scope: !8734)
!8832 = !DILocation(line: 4796, column: 5, scope: !8721)
!8833 = !DILocation(line: 4804, column: 7, scope: !8834)
!8834 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 4804, column: 7)
!8835 = !DILocation(line: 4804, column: 13, scope: !8834)
!8836 = !DILocation(line: 4805, column: 7, scope: !8834)
!8837 = !DILocation(line: 4805, column: 10, scope: !8834)
!8838 = !DILocation(line: 4805, column: 16, scope: !8834)
!8839 = !DILocation(line: 4804, column: 7, scope: !8645)
!8840 = !DILocalVariable(name: "value_address", scope: !8841, file: !3, line: 4807, type: !2924)
!8841 = distinct !DILexicalBlock(scope: !8834, file: !3, line: 4806, column: 5)
!8842 = !DILocation(line: 4807, column: 11, scope: !8841)
!8843 = !DILocation(line: 4807, column: 27, scope: !8841)
!8844 = !DILocalVariable(name: "type", scope: !8841, file: !3, line: 4808, type: !3045)
!8845 = !DILocation(line: 4808, column: 12, scope: !8841)
!8846 = !DILocation(line: 4808, column: 19, scope: !8841)
!8847 = !DILocalVariable(name: "outgoing", scope: !8841, file: !3, line: 4809, type: !2924)
!8848 = !DILocation(line: 4809, column: 11, scope: !8841)
!8849 = !DILocation(line: 4811, column: 11, scope: !8850)
!8850 = distinct !DILexicalBlock(scope: !8841, file: !3, line: 4811, column: 11)
!8851 = !DILocation(line: 4811, column: 11, scope: !8841)
!8852 = !DILocation(line: 4812, column: 9, scope: !8850)
!8853 = !DILocation(line: 4812, column: 7, scope: !8850)
!8854 = !DILocation(line: 4812, column: 2, scope: !8850)
!8855 = !DILocation(line: 4814, column: 18, scope: !8850)
!8856 = !DILocation(line: 4814, column: 16, scope: !8850)
!8857 = !DILocation(line: 4816, column: 32, scope: !8841)
!8858 = !DILocation(line: 4816, column: 68, scope: !8841)
!8859 = !DILocation(line: 4816, column: 48, scope: !8841)
!8860 = !DILocation(line: 4817, column: 13, scope: !8841)
!8861 = !DILocation(line: 4816, column: 18, scope: !8841)
!8862 = !DILocation(line: 4816, column: 16, scope: !8841)
!8863 = !DILocation(line: 4821, column: 7, scope: !8841)
!8864 = !DILocation(line: 4821, column: 39, scope: !8841)
!8865 = !DILocation(line: 4824, column: 23, scope: !8841)
!8866 = !DILocation(line: 4824, column: 21, scope: !8841)
!8867 = !DILocation(line: 4827, column: 23, scope: !8841)
!8868 = !DILocation(line: 4827, column: 33, scope: !8841)
!8869 = !DILocation(line: 4827, column: 7, scope: !8841)
!8870 = !DILocation(line: 4831, column: 26, scope: !8841)
!8871 = !DILocation(line: 4831, column: 24, scope: !8841)
!8872 = !DILocation(line: 4832, column: 5, scope: !8841)
!8873 = !DILocalVariable(name: "seq", scope: !8874, file: !3, line: 4836, type: !2924)
!8874 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 4835, column: 3)
!8875 = !DILocation(line: 4836, column: 9, scope: !8874)
!8876 = !DILocation(line: 4838, column: 5, scope: !8874)
!8877 = !DILocation(line: 4839, column: 5, scope: !8874)
!8878 = !DILocation(line: 4840, column: 11, scope: !8874)
!8879 = !DILocation(line: 4840, column: 9, scope: !8874)
!8880 = !DILocation(line: 4841, column: 5, scope: !8874)
!8881 = !DILocation(line: 4843, column: 22, scope: !8874)
!8882 = !DILocation(line: 4843, column: 27, scope: !8874)
!8883 = !DILocation(line: 4843, column: 5, scope: !8874)
!8884 = !DILocation(line: 4847, column: 7, scope: !8885)
!8885 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 4847, column: 7)
!8886 = !DILocation(line: 4847, column: 7, scope: !8645)
!8887 = !DILocation(line: 4848, column: 17, scope: !8885)
!8888 = !DILocation(line: 4848, column: 5, scope: !8885)
!8889 = !DILocation(line: 4853, column: 34, scope: !8890)
!8890 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 4853, column: 7)
!8891 = !DILocation(line: 4853, column: 7, scope: !8645)
!8892 = !DILocation(line: 4854, column: 16, scope: !8890)
!8893 = !DILocation(line: 4854, column: 5, scope: !8890)
!8894 = !DILocation(line: 4857, column: 13, scope: !8895)
!8895 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 4857, column: 7)
!8896 = !DILocation(line: 4857, column: 7, scope: !8895)
!8897 = !DILocation(line: 4857, column: 7, scope: !8645)
!8898 = !DILocation(line: 4858, column: 5, scope: !8895)
!8899 = !DILocation(line: 4876, column: 3, scope: !8645)
!8900 = !DILocation(line: 4877, column: 1, scope: !8645)
!8901 = distinct !DISubprogram(name: "get_arg_pointer_save_area", scope: !3, file: !3, line: 4880, type: !8902, scopeLine: 4881, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8902 = !DISubroutineType(types: !8903)
!8903 = !{!2924}
!8904 = !DILocalVariable(name: "ret", scope: !8901, file: !3, line: 4882, type: !2924)
!8905 = !DILocation(line: 4882, column: 7, scope: !8901)
!8906 = !DILocation(line: 4882, column: 13, scope: !8901)
!8907 = !DILocation(line: 4884, column: 9, scope: !8908)
!8908 = distinct !DILexicalBlock(scope: !8901, file: !3, line: 4884, column: 7)
!8909 = !DILocation(line: 4884, column: 7, scope: !8901)
!8910 = !DILocation(line: 4886, column: 40, scope: !8911)
!8911 = distinct !DILexicalBlock(scope: !8908, file: !3, line: 4885, column: 5)
!8912 = !DILocation(line: 4886, column: 13, scope: !8911)
!8913 = !DILocation(line: 4886, column: 11, scope: !8911)
!8914 = !DILocation(line: 4887, column: 31, scope: !8911)
!8915 = !DILocation(line: 4887, column: 29, scope: !8911)
!8916 = !DILocation(line: 4888, column: 5, scope: !8911)
!8917 = !DILocation(line: 4890, column: 15, scope: !8918)
!8918 = distinct !DILexicalBlock(scope: !8901, file: !3, line: 4890, column: 7)
!8919 = !DILocation(line: 4890, column: 9, scope: !8918)
!8920 = !DILocation(line: 4890, column: 7, scope: !8901)
!8921 = !DILocalVariable(name: "seq", scope: !8922, file: !3, line: 4892, type: !2924)
!8922 = distinct !DILexicalBlock(scope: !8918, file: !3, line: 4891, column: 5)
!8923 = !DILocation(line: 4892, column: 11, scope: !8922)
!8924 = !DILocation(line: 4897, column: 7, scope: !8922)
!8925 = !DILocation(line: 4898, column: 37, scope: !8922)
!8926 = !DILocation(line: 4898, column: 23, scope: !8922)
!8927 = !DILocation(line: 4899, column: 34, scope: !8922)
!8928 = !DILocation(line: 4898, column: 7, scope: !8922)
!8929 = !DILocation(line: 4900, column: 13, scope: !8922)
!8930 = !DILocation(line: 4900, column: 11, scope: !8922)
!8931 = !DILocation(line: 4901, column: 7, scope: !8922)
!8932 = !DILocation(line: 4903, column: 7, scope: !8922)
!8933 = !DILocation(line: 4904, column: 24, scope: !8922)
!8934 = !DILocation(line: 4904, column: 29, scope: !8922)
!8935 = !DILocation(line: 4904, column: 7, scope: !8922)
!8936 = !DILocation(line: 4905, column: 7, scope: !8922)
!8937 = !DILocation(line: 4906, column: 5, scope: !8922)
!8938 = !DILocation(line: 4908, column: 10, scope: !8901)
!8939 = !DILocation(line: 4908, column: 3, scope: !8901)
!8940 = distinct !DISubprogram(name: "use_return_register", scope: !3, file: !3, line: 4614, type: !4467, scopeLine: 4615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8941 = !DILocation(line: 4616, column: 3, scope: !8940)
!8942 = !DILocation(line: 4617, column: 1, scope: !8940)
!8943 = distinct !DISubprogram(name: "maybe_copy_epilogue_insn", scope: !3, file: !3, line: 4936, type: !5420, scopeLine: 4937, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8944 = !DILocalVariable(name: "insn", arg: 1, scope: !8943, file: !3, line: 4936, type: !2924)
!8945 = !DILocation(line: 4936, column: 31, scope: !8943)
!8946 = !DILocalVariable(name: "copy", arg: 2, scope: !8943, file: !3, line: 4936, type: !2924)
!8947 = !DILocation(line: 4936, column: 41, scope: !8943)
!8948 = !DILocalVariable(name: "slot", scope: !8943, file: !3, line: 4938, type: !3398)
!8949 = !DILocation(line: 4938, column: 10, scope: !8943)
!8950 = !DILocation(line: 4940, column: 7, scope: !8951)
!8951 = distinct !DILexicalBlock(scope: !8943, file: !3, line: 4940, column: 7)
!8952 = !DILocation(line: 4940, column: 26, scope: !8951)
!8953 = !DILocation(line: 4941, column: 7, scope: !8951)
!8954 = !DILocation(line: 4941, column: 21, scope: !8951)
!8955 = !DILocation(line: 4941, column: 41, scope: !8951)
!8956 = !DILocation(line: 4941, column: 10, scope: !8951)
!8957 = !DILocation(line: 4941, column: 47, scope: !8951)
!8958 = !DILocation(line: 4940, column: 7, scope: !8943)
!8959 = !DILocation(line: 4942, column: 5, scope: !8951)
!8960 = !DILocation(line: 4944, column: 26, scope: !8943)
!8961 = !DILocation(line: 4944, column: 46, scope: !8943)
!8962 = !DILocation(line: 4944, column: 10, scope: !8943)
!8963 = !DILocation(line: 4944, column: 8, scope: !8943)
!8964 = !DILocation(line: 4945, column: 3, scope: !8943)
!8965 = !DILocation(line: 4946, column: 11, scope: !8943)
!8966 = !DILocation(line: 4946, column: 4, scope: !8943)
!8967 = !DILocation(line: 4946, column: 9, scope: !8943)
!8968 = !DILocation(line: 4947, column: 1, scope: !8943)
!8969 = distinct !DISubprogram(name: "prologue_epilogue_contains", scope: !3, file: !3, line: 4983, type: !8970, scopeLine: 4984, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8970 = !DISubroutineType(types: !8971)
!8971 = !{!2948, !6191}
!8972 = !DILocalVariable(name: "insn", arg: 1, scope: !8969, file: !3, line: 4983, type: !6191)
!8973 = !DILocation(line: 4983, column: 39, scope: !8969)
!8974 = !DILocation(line: 4985, column: 17, scope: !8975)
!8975 = distinct !DILexicalBlock(scope: !8969, file: !3, line: 4985, column: 7)
!8976 = !DILocation(line: 4985, column: 23, scope: !8975)
!8977 = !DILocation(line: 4985, column: 7, scope: !8975)
!8978 = !DILocation(line: 4985, column: 7, scope: !8969)
!8979 = !DILocation(line: 4986, column: 5, scope: !8975)
!8980 = !DILocation(line: 4987, column: 17, scope: !8981)
!8981 = distinct !DILexicalBlock(scope: !8969, file: !3, line: 4987, column: 7)
!8982 = !DILocation(line: 4987, column: 23, scope: !8981)
!8983 = !DILocation(line: 4987, column: 7, scope: !8981)
!8984 = !DILocation(line: 4987, column: 7, scope: !8969)
!8985 = !DILocation(line: 4988, column: 5, scope: !8981)
!8986 = !DILocation(line: 4989, column: 3, scope: !8969)
!8987 = !DILocation(line: 4990, column: 1, scope: !8969)
!8988 = distinct !DISubprogram(name: "contains", scope: !3, file: !3, line: 4965, type: !8989, scopeLine: 4966, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!8989 = !DISubroutineType(types: !8990)
!8990 = !{!3158, !6191, !3375}
!8991 = !DILocalVariable(name: "insn", arg: 1, scope: !8988, file: !3, line: 4965, type: !6191)
!8992 = !DILocation(line: 4965, column: 21, scope: !8988)
!8993 = !DILocalVariable(name: "hash", arg: 2, scope: !8988, file: !3, line: 4965, type: !3375)
!8994 = !DILocation(line: 4965, column: 34, scope: !8988)
!8995 = !DILocation(line: 4967, column: 7, scope: !8996)
!8996 = distinct !DILexicalBlock(scope: !8988, file: !3, line: 4967, column: 7)
!8997 = !DILocation(line: 4967, column: 12, scope: !8996)
!8998 = !DILocation(line: 4967, column: 7, scope: !8988)
!8999 = !DILocation(line: 4968, column: 5, scope: !8996)
!9000 = !DILocation(line: 4970, column: 7, scope: !9001)
!9001 = distinct !DILexicalBlock(scope: !8988, file: !3, line: 4970, column: 7)
!9002 = !DILocation(line: 4970, column: 29, scope: !9001)
!9003 = !DILocation(line: 4970, column: 32, scope: !9001)
!9004 = !DILocation(line: 4970, column: 58, scope: !9001)
!9005 = !DILocation(line: 4970, column: 7, scope: !8988)
!9006 = !DILocalVariable(name: "i", scope: !9007, file: !3, line: 4972, type: !2948)
!9007 = distinct !DILexicalBlock(scope: !9001, file: !3, line: 4971, column: 5)
!9008 = !DILocation(line: 4972, column: 11, scope: !9007)
!9009 = !DILocation(line: 4973, column: 16, scope: !9010)
!9010 = distinct !DILexicalBlock(scope: !9007, file: !3, line: 4973, column: 7)
!9011 = !DILocation(line: 4973, column: 44, scope: !9010)
!9012 = !DILocation(line: 4973, column: 14, scope: !9010)
!9013 = !DILocation(line: 4973, column: 12, scope: !9010)
!9014 = !DILocation(line: 4973, column: 49, scope: !9015)
!9015 = distinct !DILexicalBlock(scope: !9010, file: !3, line: 4973, column: 7)
!9016 = !DILocation(line: 4973, column: 51, scope: !9015)
!9017 = !DILocation(line: 4973, column: 7, scope: !9010)
!9018 = !DILocation(line: 4974, column: 17, scope: !9019)
!9019 = distinct !DILexicalBlock(scope: !9015, file: !3, line: 4974, column: 6)
!9020 = !DILocation(line: 4974, column: 23, scope: !9019)
!9021 = !DILocation(line: 4974, column: 6, scope: !9019)
!9022 = !DILocation(line: 4974, column: 6, scope: !9015)
!9023 = !DILocation(line: 4975, column: 4, scope: !9019)
!9024 = !DILocation(line: 4974, column: 53, scope: !9019)
!9025 = !DILocation(line: 4973, column: 58, scope: !9015)
!9026 = !DILocation(line: 4973, column: 7, scope: !9015)
!9027 = distinct !{!9027, !9017, !9028}
!9028 = !DILocation(line: 4975, column: 11, scope: !9010)
!9029 = !DILocation(line: 4976, column: 7, scope: !9007)
!9030 = !DILocation(line: 4979, column: 21, scope: !8988)
!9031 = !DILocation(line: 4979, column: 27, scope: !8988)
!9032 = !DILocation(line: 4979, column: 10, scope: !8988)
!9033 = !DILocation(line: 4979, column: 33, scope: !8988)
!9034 = !DILocation(line: 4979, column: 3, scope: !8988)
!9035 = !DILocation(line: 4980, column: 1, scope: !8988)
!9036 = distinct !DISubprogram(name: "reposition_prologue_and_epilogue_notes", scope: !3, file: !3, line: 5326, type: !4467, scopeLine: 5327, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9037 = !DILocation(line: 5332, column: 7, scope: !9038)
!9038 = distinct !DILexicalBlock(scope: !9036, file: !3, line: 5332, column: 7)
!9039 = !DILocation(line: 5332, column: 26, scope: !9038)
!9040 = !DILocation(line: 5332, column: 7, scope: !9036)
!9041 = !DILocalVariable(name: "len", scope: !9042, file: !3, line: 5334, type: !3400)
!9042 = distinct !DILexicalBlock(scope: !9038, file: !3, line: 5333, column: 5)
!9043 = !DILocation(line: 5334, column: 14, scope: !9042)
!9044 = !DILocation(line: 5334, column: 35, scope: !9042)
!9045 = !DILocation(line: 5334, column: 20, scope: !9042)
!9046 = !DILocalVariable(name: "insn", scope: !9042, file: !3, line: 5335, type: !2924)
!9047 = !DILocation(line: 5335, column: 11, scope: !9042)
!9048 = !DILocalVariable(name: "last", scope: !9042, file: !3, line: 5335, type: !2924)
!9049 = !DILocation(line: 5335, column: 17, scope: !9042)
!9050 = !DILocalVariable(name: "note", scope: !9042, file: !3, line: 5335, type: !2924)
!9051 = !DILocation(line: 5335, column: 30, scope: !9042)
!9052 = !DILocation(line: 5342, column: 19, scope: !9053)
!9053 = distinct !DILexicalBlock(scope: !9042, file: !3, line: 5342, column: 7)
!9054 = !DILocation(line: 5342, column: 17, scope: !9053)
!9055 = !DILocation(line: 5342, column: 12, scope: !9053)
!9056 = !DILocation(line: 5342, column: 33, scope: !9057)
!9057 = distinct !DILexicalBlock(scope: !9053, file: !3, line: 5342, column: 7)
!9058 = !DILocation(line: 5342, column: 7, scope: !9053)
!9059 = !DILocation(line: 5344, column: 8, scope: !9060)
!9060 = distinct !DILexicalBlock(scope: !9061, file: !3, line: 5344, column: 8)
!9061 = distinct !DILexicalBlock(scope: !9057, file: !3, line: 5343, column: 2)
!9062 = !DILocation(line: 5344, column: 8, scope: !9061)
!9063 = !DILocation(line: 5346, column: 12, scope: !9064)
!9064 = distinct !DILexicalBlock(scope: !9065, file: !3, line: 5346, column: 12)
!9065 = distinct !DILexicalBlock(scope: !9060, file: !3, line: 5345, column: 6)
!9066 = !DILocation(line: 5346, column: 29, scope: !9064)
!9067 = !DILocation(line: 5346, column: 12, scope: !9065)
!9068 = !DILocation(line: 5347, column: 10, scope: !9064)
!9069 = !DILocation(line: 5347, column: 8, scope: !9064)
!9070 = !DILocation(line: 5347, column: 3, scope: !9064)
!9071 = !DILocation(line: 5348, column: 6, scope: !9065)
!9072 = !DILocation(line: 5349, column: 23, scope: !9073)
!9073 = distinct !DILexicalBlock(scope: !9060, file: !3, line: 5349, column: 13)
!9074 = !DILocation(line: 5349, column: 29, scope: !9073)
!9075 = !DILocation(line: 5349, column: 13, scope: !9073)
!9076 = !DILocation(line: 5349, column: 13, scope: !9060)
!9077 = !DILocation(line: 5351, column: 15, scope: !9078)
!9078 = distinct !DILexicalBlock(scope: !9073, file: !3, line: 5350, column: 6)
!9079 = !DILocation(line: 5351, column: 13, scope: !9078)
!9080 = !DILocation(line: 5352, column: 12, scope: !9081)
!9081 = distinct !DILexicalBlock(scope: !9078, file: !3, line: 5352, column: 12)
!9082 = !DILocation(line: 5352, column: 18, scope: !9081)
!9083 = !DILocation(line: 5352, column: 12, scope: !9078)
!9084 = !DILocation(line: 5353, column: 3, scope: !9081)
!9085 = !DILocation(line: 5354, column: 6, scope: !9078)
!9086 = !DILocation(line: 5355, column: 2, scope: !9061)
!9087 = !DILocation(line: 5342, column: 46, scope: !9057)
!9088 = !DILocation(line: 5342, column: 44, scope: !9057)
!9089 = !DILocation(line: 5342, column: 7, scope: !9057)
!9090 = distinct !{!9090, !9058, !9091}
!9091 = !DILocation(line: 5355, column: 2, scope: !9053)
!9092 = !DILocation(line: 5357, column: 11, scope: !9093)
!9093 = distinct !DILexicalBlock(scope: !9042, file: !3, line: 5357, column: 11)
!9094 = !DILocation(line: 5357, column: 11, scope: !9042)
!9095 = !DILocation(line: 5359, column: 8, scope: !9096)
!9096 = distinct !DILexicalBlock(scope: !9097, file: !3, line: 5359, column: 8)
!9097 = distinct !DILexicalBlock(scope: !9093, file: !3, line: 5358, column: 2)
!9098 = !DILocation(line: 5359, column: 13, scope: !9096)
!9099 = !DILocation(line: 5359, column: 8, scope: !9097)
!9100 = !DILocation(line: 5364, column: 20, scope: !9101)
!9101 = distinct !DILexicalBlock(scope: !9102, file: !3, line: 5364, column: 8)
!9102 = distinct !DILexicalBlock(scope: !9096, file: !3, line: 5360, column: 6)
!9103 = !DILocation(line: 5364, column: 18, scope: !9101)
!9104 = !DILocation(line: 5364, column: 13, scope: !9101)
!9105 = !DILocation(line: 5366, column: 9, scope: !9106)
!9106 = distinct !DILexicalBlock(scope: !9107, file: !3, line: 5366, column: 9)
!9107 = distinct !DILexicalBlock(scope: !9108, file: !3, line: 5365, column: 3)
!9108 = distinct !DILexicalBlock(scope: !9101, file: !3, line: 5364, column: 8)
!9109 = !DILocation(line: 5367, column: 9, scope: !9106)
!9110 = !DILocation(line: 5367, column: 12, scope: !9106)
!9111 = !DILocation(line: 5367, column: 29, scope: !9106)
!9112 = !DILocation(line: 5366, column: 9, scope: !9107)
!9113 = !DILocation(line: 5368, column: 7, scope: !9106)
!9114 = !DILocation(line: 5369, column: 3, scope: !9107)
!9115 = !DILocation(line: 5364, column: 47, scope: !9108)
!9116 = !DILocation(line: 5364, column: 45, scope: !9108)
!9117 = !DILocation(line: 5364, column: 8, scope: !9108)
!9118 = distinct !{!9118, !9119, !9120}
!9119 = !DILocation(line: 5364, column: 8, scope: !9101)
!9120 = !DILocation(line: 5369, column: 3, scope: !9101)
!9121 = !DILocation(line: 5370, column: 6, scope: !9102)
!9122 = !DILocation(line: 5373, column: 8, scope: !9123)
!9123 = distinct !DILexicalBlock(scope: !9097, file: !3, line: 5373, column: 8)
!9124 = !DILocation(line: 5373, column: 8, scope: !9097)
!9125 = !DILocation(line: 5374, column: 13, scope: !9123)
!9126 = !DILocation(line: 5374, column: 11, scope: !9123)
!9127 = !DILocation(line: 5374, column: 6, scope: !9123)
!9128 = !DILocation(line: 5375, column: 19, scope: !9097)
!9129 = !DILocation(line: 5375, column: 25, scope: !9097)
!9130 = !DILocation(line: 5375, column: 31, scope: !9097)
!9131 = !DILocation(line: 5375, column: 4, scope: !9097)
!9132 = !DILocation(line: 5376, column: 2, scope: !9097)
!9133 = !DILocation(line: 5377, column: 5, scope: !9042)
!9134 = !DILocation(line: 5379, column: 7, scope: !9135)
!9135 = distinct !DILexicalBlock(scope: !9036, file: !3, line: 5379, column: 7)
!9136 = !DILocation(line: 5379, column: 26, scope: !9135)
!9137 = !DILocation(line: 5379, column: 7, scope: !9036)
!9138 = !DILocalVariable(name: "ei", scope: !9139, file: !3, line: 5381, type: !9140)
!9139 = distinct !DILexicalBlock(scope: !9135, file: !3, line: 5380, column: 5)
!9140 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !369, line: 682, baseType: !9141)
!9141 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !369, line: 679, size: 128, elements: !9142)
!9142 = !{!9143, !9144}
!9143 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !9141, file: !369, line: 680, baseType: !7, size: 32)
!9144 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !9141, file: !369, line: 681, baseType: !9145, size: 64, offset: 64)
!9145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3467, size: 64)
!9146 = !DILocation(line: 5381, column: 21, scope: !9139)
!9147 = !DILocalVariable(name: "e", scope: !9139, file: !3, line: 5382, type: !3479)
!9148 = !DILocation(line: 5382, column: 12, scope: !9139)
!9149 = !DILocation(line: 5384, column: 7, scope: !9150)
!9150 = distinct !DILexicalBlock(scope: !9139, file: !3, line: 5384, column: 7)
!9151 = !DILocation(line: 5384, column: 7, scope: !9152)
!9152 = distinct !DILexicalBlock(scope: !9150, file: !3, line: 5384, column: 7)
!9153 = !DILocalVariable(name: "insn", scope: !9154, file: !3, line: 5386, type: !2924)
!9154 = distinct !DILexicalBlock(scope: !9152, file: !3, line: 5385, column: 2)
!9155 = !DILocation(line: 5386, column: 8, scope: !9154)
!9156 = !DILocalVariable(name: "first", scope: !9154, file: !3, line: 5386, type: !2924)
!9157 = !DILocation(line: 5386, column: 14, scope: !9154)
!9158 = !DILocalVariable(name: "note", scope: !9154, file: !3, line: 5386, type: !2924)
!9159 = !DILocation(line: 5386, column: 28, scope: !9154)
!9160 = !DILocalVariable(name: "bb", scope: !9154, file: !3, line: 5387, type: !3462)
!9161 = !DILocation(line: 5387, column: 16, scope: !9154)
!9162 = !DILocation(line: 5387, column: 21, scope: !9154)
!9163 = !DILocation(line: 5387, column: 24, scope: !9154)
!9164 = !DILocation(line: 5390, column: 4, scope: !9165)
!9165 = distinct !DILexicalBlock(scope: !9154, file: !3, line: 5390, column: 4)
!9166 = !DILocation(line: 5390, column: 4, scope: !9167)
!9167 = distinct !DILexicalBlock(scope: !9165, file: !3, line: 5390, column: 4)
!9168 = !DILocation(line: 0, scope: !9167)
!9169 = !DILocation(line: 5392, column: 12, scope: !9170)
!9170 = distinct !DILexicalBlock(scope: !9171, file: !3, line: 5392, column: 12)
!9171 = distinct !DILexicalBlock(scope: !9167, file: !3, line: 5391, column: 6)
!9172 = !DILocation(line: 5392, column: 12, scope: !9171)
!9173 = !DILocation(line: 5394, column: 9, scope: !9174)
!9174 = distinct !DILexicalBlock(scope: !9175, file: !3, line: 5394, column: 9)
!9175 = distinct !DILexicalBlock(scope: !9170, file: !3, line: 5393, column: 3)
!9176 = !DILocation(line: 5394, column: 26, scope: !9174)
!9177 = !DILocation(line: 5394, column: 9, scope: !9175)
!9178 = !DILocation(line: 5396, column: 16, scope: !9179)
!9179 = distinct !DILexicalBlock(scope: !9174, file: !3, line: 5395, column: 7)
!9180 = !DILocation(line: 5396, column: 14, scope: !9179)
!9181 = !DILocation(line: 5397, column: 13, scope: !9182)
!9182 = distinct !DILexicalBlock(scope: !9179, file: !3, line: 5397, column: 13)
!9183 = !DILocation(line: 5397, column: 19, scope: !9182)
!9184 = !DILocation(line: 5397, column: 13, scope: !9179)
!9185 = !DILocation(line: 5398, column: 4, scope: !9182)
!9186 = !DILocation(line: 5399, column: 7, scope: !9179)
!9187 = !DILocation(line: 5400, column: 3, scope: !9175)
!9188 = !DILocation(line: 5401, column: 17, scope: !9189)
!9189 = distinct !DILexicalBlock(scope: !9170, file: !3, line: 5401, column: 17)
!9190 = !DILocation(line: 5401, column: 23, scope: !9189)
!9191 = !DILocation(line: 5401, column: 31, scope: !9189)
!9192 = !DILocation(line: 5401, column: 44, scope: !9189)
!9193 = !DILocation(line: 5401, column: 50, scope: !9189)
!9194 = !DILocation(line: 5401, column: 34, scope: !9189)
!9195 = !DILocation(line: 5401, column: 17, scope: !9170)
!9196 = !DILocation(line: 5403, column: 13, scope: !9197)
!9197 = distinct !DILexicalBlock(scope: !9189, file: !3, line: 5402, column: 3)
!9198 = !DILocation(line: 5403, column: 11, scope: !9197)
!9199 = !DILocation(line: 5404, column: 9, scope: !9200)
!9200 = distinct !DILexicalBlock(scope: !9197, file: !3, line: 5404, column: 9)
!9201 = !DILocation(line: 5404, column: 14, scope: !9200)
!9202 = !DILocation(line: 5404, column: 9, scope: !9197)
!9203 = !DILocation(line: 5405, column: 7, scope: !9200)
!9204 = !DILocation(line: 5406, column: 3, scope: !9197)
!9205 = !DILocation(line: 5407, column: 6, scope: !9171)
!9206 = distinct !{!9206, !9164, !9207}
!9207 = !DILocation(line: 5407, column: 6, scope: !9165)
!9208 = !DILocation(line: 5409, column: 8, scope: !9209)
!9209 = distinct !DILexicalBlock(scope: !9154, file: !3, line: 5409, column: 8)
!9210 = !DILocation(line: 5409, column: 8, scope: !9154)
!9211 = !DILocation(line: 5418, column: 12, scope: !9212)
!9212 = distinct !DILexicalBlock(scope: !9213, file: !3, line: 5418, column: 12)
!9213 = distinct !DILexicalBlock(scope: !9209, file: !3, line: 5410, column: 6)
!9214 = !DILocation(line: 5418, column: 18, scope: !9212)
!9215 = !DILocation(line: 5418, column: 12, scope: !9213)
!9216 = !DILocation(line: 5419, column: 11, scope: !9212)
!9217 = !DILocation(line: 5419, column: 9, scope: !9212)
!9218 = !DILocation(line: 5419, column: 3, scope: !9212)
!9219 = !DILocation(line: 5421, column: 12, scope: !9220)
!9220 = distinct !DILexicalBlock(scope: !9213, file: !3, line: 5421, column: 12)
!9221 = !DILocation(line: 5421, column: 33, scope: !9220)
!9222 = !DILocation(line: 5421, column: 30, scope: !9220)
!9223 = !DILocation(line: 5421, column: 12, scope: !9213)
!9224 = !DILocation(line: 5422, column: 18, scope: !9220)
!9225 = !DILocation(line: 5422, column: 24, scope: !9220)
!9226 = !DILocation(line: 5422, column: 30, scope: !9220)
!9227 = !DILocation(line: 5422, column: 3, scope: !9220)
!9228 = !DILocation(line: 5423, column: 6, scope: !9213)
!9229 = !DILocation(line: 5424, column: 2, scope: !9154)
!9230 = distinct !{!9230, !9149, !9231}
!9231 = !DILocation(line: 5424, column: 2, scope: !9150)
!9232 = !DILocation(line: 5425, column: 5, scope: !9139)
!9233 = !DILocation(line: 5427, column: 1, scope: !9036)
!9234 = distinct !DISubprogram(name: "ei_start_1", scope: !369, file: !369, line: 696, type: !9235, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9235 = !DISubroutineType(types: !9236)
!9236 = !{!9140, !9145}
!9237 = !DILocalVariable(name: "ev", arg: 1, scope: !9234, file: !369, line: 696, type: !9145)
!9238 = !DILocation(line: 696, column: 28, scope: !9234)
!9239 = !DILocalVariable(name: "i", scope: !9234, file: !369, line: 698, type: !9140)
!9240 = !DILocation(line: 698, column: 17, scope: !9234)
!9241 = !DILocation(line: 700, column: 5, scope: !9234)
!9242 = !DILocation(line: 700, column: 11, scope: !9234)
!9243 = !DILocation(line: 701, column: 17, scope: !9234)
!9244 = !DILocation(line: 701, column: 5, scope: !9234)
!9245 = !DILocation(line: 701, column: 15, scope: !9234)
!9246 = !DILocation(line: 703, column: 3, scope: !9234)
!9247 = distinct !DISubprogram(name: "ei_cond", scope: !369, file: !369, line: 771, type: !9248, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9248 = !DISubroutineType(types: !9249)
!9249 = !{!3158, !9140, !9250}
!9250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3479, size: 64)
!9251 = !DILocalVariable(name: "ei", arg: 1, scope: !9247, file: !369, line: 771, type: !9140)
!9252 = !DILocation(line: 771, column: 24, scope: !9247)
!9253 = !DILocalVariable(name: "p", arg: 2, scope: !9247, file: !369, line: 771, type: !9250)
!9254 = !DILocation(line: 771, column: 34, scope: !9247)
!9255 = !DILocation(line: 773, column: 8, scope: !9256)
!9256 = distinct !DILexicalBlock(scope: !9247, file: !369, line: 773, column: 7)
!9257 = !DILocation(line: 773, column: 7, scope: !9247)
!9258 = !DILocation(line: 775, column: 12, scope: !9259)
!9259 = distinct !DILexicalBlock(scope: !9256, file: !369, line: 774, column: 5)
!9260 = !DILocation(line: 775, column: 8, scope: !9259)
!9261 = !DILocation(line: 775, column: 10, scope: !9259)
!9262 = !DILocation(line: 776, column: 7, scope: !9259)
!9263 = !DILocation(line: 780, column: 8, scope: !9264)
!9264 = distinct !DILexicalBlock(scope: !9256, file: !369, line: 779, column: 5)
!9265 = !DILocation(line: 780, column: 10, scope: !9264)
!9266 = !DILocation(line: 781, column: 7, scope: !9264)
!9267 = !DILocation(line: 783, column: 1, scope: !9247)
!9268 = distinct !DISubprogram(name: "ei_next", scope: !369, file: !369, line: 736, type: !9269, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9269 = !DISubroutineType(types: !9270)
!9270 = !{null, !9271}
!9271 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9140, size: 64)
!9272 = !DILocalVariable(name: "i", arg: 1, scope: !9268, file: !369, line: 736, type: !9271)
!9273 = !DILocation(line: 736, column: 25, scope: !9268)
!9274 = !DILocation(line: 738, column: 3, scope: !9268)
!9275 = !DILocation(line: 739, column: 3, scope: !9268)
!9276 = !DILocation(line: 739, column: 6, scope: !9268)
!9277 = !DILocation(line: 739, column: 11, scope: !9268)
!9278 = !DILocation(line: 740, column: 1, scope: !9268)
!9279 = distinct !DISubprogram(name: "current_function_name", scope: !3, file: !3, line: 5431, type: !9280, scopeLine: 5432, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9280 = !DISubroutineType(types: !9281)
!9281 = !{!2951}
!9282 = !DILocation(line: 5433, column: 7, scope: !9283)
!9283 = distinct !DILexicalBlock(scope: !9279, file: !3, line: 5433, column: 7)
!9284 = !DILocation(line: 5433, column: 12, scope: !9283)
!9285 = !DILocation(line: 5433, column: 7, scope: !9279)
!9286 = !DILocation(line: 5434, column: 5, scope: !9283)
!9287 = !DILocation(line: 5435, column: 21, scope: !9279)
!9288 = !DILocation(line: 5435, column: 42, scope: !9279)
!9289 = !DILocation(line: 5435, column: 48, scope: !9279)
!9290 = !DILocation(line: 5435, column: 10, scope: !9279)
!9291 = !DILocation(line: 5435, column: 3, scope: !9279)
!9292 = !DILocation(line: 5436, column: 1, scope: !9279)
!9293 = distinct !DISubprogram(name: "used_types_insert", scope: !3, file: !3, line: 5469, type: !7594, scopeLine: 5470, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9294 = !DILocalVariable(name: "t", arg: 1, scope: !9293, file: !3, line: 5469, type: !3045)
!9295 = !DILocation(line: 5469, column: 25, scope: !9293)
!9296 = !DILocation(line: 5471, column: 3, scope: !9293)
!9297 = !DILocation(line: 5471, column: 10, scope: !9293)
!9298 = !DILocation(line: 5471, column: 29, scope: !9293)
!9299 = !DILocation(line: 5471, column: 32, scope: !9293)
!9300 = !DILocation(line: 5471, column: 46, scope: !9293)
!9301 = !DILocation(line: 5472, column: 9, scope: !9302)
!9302 = distinct !DILexicalBlock(scope: !9293, file: !3, line: 5472, column: 9)
!9303 = !DILocation(line: 5472, column: 9, scope: !9293)
!9304 = !DILocation(line: 5473, column: 7, scope: !9302)
!9305 = !DILocation(line: 5475, column: 11, scope: !9302)
!9306 = !DILocation(line: 5475, column: 9, scope: !9302)
!9307 = distinct !{!9307, !9296, !9308}
!9308 = !DILocation(line: 5475, column: 11, scope: !9293)
!9309 = !DILocation(line: 5476, column: 7, scope: !9310)
!9310 = distinct !DILexicalBlock(scope: !9293, file: !3, line: 5476, column: 7)
!9311 = !DILocation(line: 5476, column: 21, scope: !9310)
!9312 = !DILocation(line: 5477, column: 7, scope: !9310)
!9313 = !DILocation(line: 5477, column: 10, scope: !9310)
!9314 = !DILocation(line: 5477, column: 27, scope: !9310)
!9315 = !DILocation(line: 5477, column: 24, scope: !9310)
!9316 = !DILocation(line: 5476, column: 7, scope: !9293)
!9317 = !DILocation(line: 5478, column: 9, scope: !9310)
!9318 = !DILocation(line: 5478, column: 7, scope: !9310)
!9319 = !DILocation(line: 5478, column: 5, scope: !9310)
!9320 = !DILocation(line: 5479, column: 7, scope: !9321)
!9321 = distinct !DILexicalBlock(scope: !9293, file: !3, line: 5479, column: 7)
!9322 = !DILocation(line: 5479, column: 24, scope: !9321)
!9323 = !DILocation(line: 5479, column: 7, scope: !9293)
!9324 = !DILocation(line: 5481, column: 11, scope: !9325)
!9325 = distinct !DILexicalBlock(scope: !9326, file: !3, line: 5481, column: 11)
!9326 = distinct !DILexicalBlock(scope: !9321, file: !3, line: 5480, column: 5)
!9327 = !DILocation(line: 5481, column: 11, scope: !9326)
!9328 = !DILocation(line: 5482, column: 28, scope: !9325)
!9329 = !DILocation(line: 5482, column: 31, scope: !9325)
!9330 = !DILocation(line: 5482, column: 2, scope: !9325)
!9331 = !DILocation(line: 5488, column: 4, scope: !9325)
!9332 = !DILocation(line: 5487, column: 29, scope: !9325)
!9333 = !DILocation(line: 5490, column: 5, scope: !9326)
!9334 = !DILocation(line: 5491, column: 1, scope: !9293)
!9335 = distinct !DISubprogram(name: "used_types_insert_helper", scope: !3, file: !3, line: 5452, type: !9336, scopeLine: 5453, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9336 = !DISubroutineType(types: !9337)
!9337 = !{null, !3045, !3291}
!9338 = !DILocalVariable(name: "type", arg: 1, scope: !9335, file: !3, line: 5452, type: !3045)
!9339 = !DILocation(line: 5452, column: 32, scope: !9335)
!9340 = !DILocalVariable(name: "func", arg: 2, scope: !9335, file: !3, line: 5452, type: !3291)
!9341 = !DILocation(line: 5452, column: 55, scope: !9335)
!9342 = !DILocation(line: 5454, column: 7, scope: !9343)
!9343 = distinct !DILexicalBlock(scope: !9335, file: !3, line: 5454, column: 7)
!9344 = !DILocation(line: 5454, column: 12, scope: !9343)
!9345 = !DILocation(line: 5454, column: 20, scope: !9343)
!9346 = !DILocation(line: 5454, column: 23, scope: !9343)
!9347 = !DILocation(line: 5454, column: 28, scope: !9343)
!9348 = !DILocation(line: 5454, column: 7, scope: !9335)
!9349 = !DILocalVariable(name: "slot", scope: !9350, file: !3, line: 5456, type: !3398)
!9350 = distinct !DILexicalBlock(scope: !9343, file: !3, line: 5455, column: 5)
!9351 = !DILocation(line: 5456, column: 14, scope: !9350)
!9352 = !DILocation(line: 5458, column: 11, scope: !9353)
!9353 = distinct !DILexicalBlock(scope: !9350, file: !3, line: 5458, column: 11)
!9354 = !DILocation(line: 5458, column: 17, scope: !9353)
!9355 = !DILocation(line: 5458, column: 33, scope: !9353)
!9356 = !DILocation(line: 5458, column: 11, scope: !9350)
!9357 = !DILocation(line: 5459, column: 26, scope: !9353)
!9358 = !DILocation(line: 5459, column: 2, scope: !9353)
!9359 = !DILocation(line: 5459, column: 8, scope: !9353)
!9360 = !DILocation(line: 5459, column: 24, scope: !9353)
!9361 = !DILocation(line: 5461, column: 30, scope: !9350)
!9362 = !DILocation(line: 5461, column: 36, scope: !9350)
!9363 = !DILocation(line: 5461, column: 53, scope: !9350)
!9364 = !DILocation(line: 5461, column: 14, scope: !9350)
!9365 = !DILocation(line: 5461, column: 12, scope: !9350)
!9366 = !DILocation(line: 5462, column: 12, scope: !9367)
!9367 = distinct !DILexicalBlock(scope: !9350, file: !3, line: 5462, column: 11)
!9368 = !DILocation(line: 5462, column: 11, scope: !9367)
!9369 = !DILocation(line: 5462, column: 17, scope: !9367)
!9370 = !DILocation(line: 5462, column: 11, scope: !9350)
!9371 = !DILocation(line: 5463, column: 10, scope: !9367)
!9372 = !DILocation(line: 5463, column: 3, scope: !9367)
!9373 = !DILocation(line: 5463, column: 8, scope: !9367)
!9374 = !DILocation(line: 5463, column: 2, scope: !9367)
!9375 = !DILocation(line: 5464, column: 5, scope: !9350)
!9376 = !DILocation(line: 5465, column: 1, scope: !9335)
!9377 = distinct !DISubprogram(name: "types_used_by_vars_do_hash", scope: !3, file: !3, line: 5507, type: !3382, scopeLine: 5508, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9378 = !DILocalVariable(name: "x", arg: 1, scope: !9377, file: !3, line: 5507, type: !3385)
!9379 = !DILocation(line: 5507, column: 41, scope: !9377)
!9380 = !DILocalVariable(name: "entry", scope: !9377, file: !3, line: 5509, type: !4298)
!9381 = !DILocation(line: 5509, column: 42, scope: !9377)
!9382 = !DILocation(line: 5510, column: 47, scope: !9377)
!9383 = !DILocation(line: 5510, column: 5, scope: !9377)
!9384 = !DILocation(line: 5512, column: 41, scope: !9377)
!9385 = !DILocation(line: 5512, column: 10, scope: !9377)
!9386 = !DILocation(line: 5512, column: 3, scope: !9377)
!9387 = distinct !DISubprogram(name: "hash_types_used_by_vars_entry", scope: !3, file: !3, line: 5496, type: !9388, scopeLine: 5497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9388 = !DISubroutineType(types: !9389)
!9389 = !{!3384, !4298}
!9390 = !DILocalVariable(name: "entry", arg: 1, scope: !9387, file: !3, line: 5496, type: !4298)
!9391 = !DILocation(line: 5496, column: 71, scope: !9387)
!9392 = !DILocation(line: 5498, column: 3, scope: !9387)
!9393 = !DILocation(line: 5500, column: 10, scope: !9387)
!9394 = !DILocation(line: 5500, column: 3, scope: !9387)
!9395 = distinct !DISubprogram(name: "types_used_by_vars_eq", scope: !3, file: !3, line: 5518, type: !3390, scopeLine: 5519, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9396 = !DILocalVariable(name: "x1", arg: 1, scope: !9395, file: !3, line: 5518, type: !3385)
!9397 = !DILocation(line: 5518, column: 36, scope: !9395)
!9398 = !DILocalVariable(name: "x2", arg: 2, scope: !9395, file: !3, line: 5518, type: !3385)
!9399 = !DILocation(line: 5518, column: 52, scope: !9395)
!9400 = !DILocalVariable(name: "e1", scope: !9395, file: !3, line: 5520, type: !4298)
!9401 = !DILocation(line: 5520, column: 42, scope: !9395)
!9402 = !DILocation(line: 5521, column: 47, scope: !9395)
!9403 = !DILocation(line: 5521, column: 5, scope: !9395)
!9404 = !DILocalVariable(name: "e2", scope: !9395, file: !3, line: 5522, type: !4298)
!9405 = !DILocation(line: 5522, column: 42, scope: !9395)
!9406 = !DILocation(line: 5523, column: 46, scope: !9395)
!9407 = !DILocation(line: 5523, column: 5, scope: !9395)
!9408 = !DILocation(line: 5525, column: 11, scope: !9395)
!9409 = !DILocation(line: 5525, column: 15, scope: !9395)
!9410 = !DILocation(line: 5525, column: 27, scope: !9395)
!9411 = !DILocation(line: 5525, column: 31, scope: !9395)
!9412 = !DILocation(line: 5525, column: 24, scope: !9395)
!9413 = !DILocation(line: 5525, column: 40, scope: !9395)
!9414 = !DILocation(line: 5525, column: 43, scope: !9395)
!9415 = !DILocation(line: 5525, column: 47, scope: !9395)
!9416 = !DILocation(line: 5525, column: 55, scope: !9395)
!9417 = !DILocation(line: 5525, column: 59, scope: !9395)
!9418 = !DILocation(line: 5525, column: 52, scope: !9395)
!9419 = !DILocation(line: 0, scope: !9395)
!9420 = !DILocation(line: 5525, column: 3, scope: !9395)
!9421 = distinct !DISubprogram(name: "types_used_by_var_decl_insert", scope: !3, file: !3, line: 5531, type: !9422, scopeLine: 5532, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9422 = !DISubroutineType(types: !9423)
!9423 = !{null, !3045, !3045}
!9424 = !DILocalVariable(name: "type", arg: 1, scope: !9421, file: !3, line: 5531, type: !3045)
!9425 = !DILocation(line: 5531, column: 37, scope: !9421)
!9426 = !DILocalVariable(name: "var_decl", arg: 2, scope: !9421, file: !3, line: 5531, type: !3045)
!9427 = !DILocation(line: 5531, column: 48, scope: !9421)
!9428 = !DILocation(line: 5533, column: 7, scope: !9429)
!9429 = distinct !DILexicalBlock(scope: !9421, file: !3, line: 5533, column: 7)
!9430 = !DILocation(line: 5533, column: 12, scope: !9429)
!9431 = !DILocation(line: 5533, column: 20, scope: !9429)
!9432 = !DILocation(line: 5533, column: 23, scope: !9429)
!9433 = !DILocation(line: 5533, column: 32, scope: !9429)
!9434 = !DILocation(line: 5533, column: 7, scope: !9421)
!9435 = !DILocalVariable(name: "slot", scope: !9436, file: !3, line: 5535, type: !3398)
!9436 = distinct !DILexicalBlock(scope: !9429, file: !3, line: 5534, column: 5)
!9437 = !DILocation(line: 5535, column: 14, scope: !9436)
!9438 = !DILocalVariable(name: "e", scope: !9436, file: !3, line: 5536, type: !4300)
!9439 = !DILocation(line: 5536, column: 39, scope: !9436)
!9440 = !DILocation(line: 5537, column: 20, scope: !9436)
!9441 = !DILocation(line: 5537, column: 9, scope: !9436)
!9442 = !DILocation(line: 5537, column: 18, scope: !9436)
!9443 = !DILocation(line: 5538, column: 16, scope: !9436)
!9444 = !DILocation(line: 5538, column: 9, scope: !9436)
!9445 = !DILocation(line: 5538, column: 14, scope: !9436)
!9446 = !DILocation(line: 5539, column: 11, scope: !9447)
!9447 = distinct !DILexicalBlock(scope: !9436, file: !3, line: 5539, column: 11)
!9448 = !DILocation(line: 5539, column: 35, scope: !9447)
!9449 = !DILocation(line: 5539, column: 11, scope: !9436)
!9450 = !DILocation(line: 5541, column: 4, scope: !9447)
!9451 = !DILocation(line: 5540, column: 26, scope: !9447)
!9452 = !DILocation(line: 5540, column: 2, scope: !9447)
!9453 = !DILocation(line: 5543, column: 40, scope: !9436)
!9454 = !DILocation(line: 5543, column: 65, scope: !9436)
!9455 = !DILocation(line: 5544, column: 12, scope: !9436)
!9456 = !DILocation(line: 5543, column: 14, scope: !9436)
!9457 = !DILocation(line: 5543, column: 12, scope: !9436)
!9458 = !DILocation(line: 5545, column: 12, scope: !9459)
!9459 = distinct !DILexicalBlock(scope: !9436, file: !3, line: 5545, column: 11)
!9460 = !DILocation(line: 5545, column: 11, scope: !9459)
!9461 = !DILocation(line: 5545, column: 17, scope: !9459)
!9462 = !DILocation(line: 5545, column: 11, scope: !9436)
!9463 = !DILocalVariable(name: "entry", scope: !9464, file: !3, line: 5547, type: !4304)
!9464 = distinct !DILexicalBlock(scope: !9459, file: !3, line: 5546, column: 2)
!9465 = !DILocation(line: 5547, column: 37, scope: !9464)
!9466 = !DILocation(line: 5548, column: 47, scope: !9464)
!9467 = !DILocation(line: 5548, column: 12, scope: !9464)
!9468 = !DILocation(line: 5548, column: 10, scope: !9464)
!9469 = !DILocation(line: 5550, column: 18, scope: !9464)
!9470 = !DILocation(line: 5550, column: 4, scope: !9464)
!9471 = !DILocation(line: 5550, column: 11, scope: !9464)
!9472 = !DILocation(line: 5550, column: 16, scope: !9464)
!9473 = !DILocation(line: 5551, column: 22, scope: !9464)
!9474 = !DILocation(line: 5551, column: 4, scope: !9464)
!9475 = !DILocation(line: 5551, column: 11, scope: !9464)
!9476 = !DILocation(line: 5551, column: 20, scope: !9464)
!9477 = !DILocation(line: 5552, column: 12, scope: !9464)
!9478 = !DILocation(line: 5552, column: 5, scope: !9464)
!9479 = !DILocation(line: 5552, column: 10, scope: !9464)
!9480 = !DILocation(line: 5553, column: 2, scope: !9464)
!9481 = !DILocation(line: 5554, column: 5, scope: !9436)
!9482 = !DILocation(line: 5555, column: 1, scope: !9421)
!9483 = distinct !DISubprogram(name: "rest_of_handle_check_leaf_regs", scope: !3, file: !3, line: 5440, type: !4366, scopeLine: 5441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9484 = !DILocation(line: 5446, column: 3, scope: !9483)
!9485 = distinct !DISubprogram(name: "rest_of_handle_thread_prologue_and_epilogue", scope: !3, file: !3, line: 5577, type: !4366, scopeLine: 5578, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9486 = !DILocation(line: 5579, column: 7, scope: !9487)
!9487 = distinct !DILexicalBlock(scope: !9485, file: !3, line: 5579, column: 7)
!9488 = !DILocation(line: 5579, column: 7, scope: !9485)
!9489 = !DILocation(line: 5580, column: 5, scope: !9487)
!9490 = !DILocation(line: 5586, column: 3, scope: !9485)
!9491 = !DILocation(line: 5587, column: 3, scope: !9485)
!9492 = distinct !DISubprogram(name: "rest_of_match_asm_constraints", scope: !3, file: !3, line: 5758, type: !4366, scopeLine: 5759, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9493 = !DILocalVariable(name: "bb", scope: !9492, file: !3, line: 5760, type: !3462)
!9494 = !DILocation(line: 5760, column: 15, scope: !9492)
!9495 = !DILocalVariable(name: "insn", scope: !9492, file: !3, line: 5761, type: !2924)
!9496 = !DILocation(line: 5761, column: 7, scope: !9492)
!9497 = !DILocalVariable(name: "pat", scope: !9492, file: !3, line: 5761, type: !2924)
!9498 = !DILocation(line: 5761, column: 13, scope: !9492)
!9499 = !DILocalVariable(name: "p_sets", scope: !9492, file: !3, line: 5761, type: !6201)
!9500 = !DILocation(line: 5761, column: 19, scope: !9492)
!9501 = !DILocalVariable(name: "noutputs", scope: !9492, file: !3, line: 5762, type: !2948)
!9502 = !DILocation(line: 5762, column: 7, scope: !9492)
!9503 = !DILocation(line: 5764, column: 14, scope: !9504)
!9504 = distinct !DILexicalBlock(scope: !9492, file: !3, line: 5764, column: 7)
!9505 = !DILocation(line: 5764, column: 8, scope: !9504)
!9506 = !DILocation(line: 5764, column: 7, scope: !9492)
!9507 = !DILocation(line: 5765, column: 5, scope: !9504)
!9508 = !DILocation(line: 5767, column: 3, scope: !9492)
!9509 = !DILocation(line: 5768, column: 3, scope: !9510)
!9510 = distinct !DILexicalBlock(scope: !9492, file: !3, line: 5768, column: 3)
!9511 = !DILocation(line: 5768, column: 3, scope: !9512)
!9512 = distinct !DILexicalBlock(scope: !9510, file: !3, line: 5768, column: 3)
!9513 = !DILocation(line: 5770, column: 7, scope: !9514)
!9514 = distinct !DILexicalBlock(scope: !9515, file: !3, line: 5770, column: 7)
!9515 = distinct !DILexicalBlock(scope: !9512, file: !3, line: 5769, column: 5)
!9516 = !DILocation(line: 5770, column: 7, scope: !9517)
!9517 = distinct !DILexicalBlock(scope: !9514, file: !3, line: 5770, column: 7)
!9518 = !DILocation(line: 0, scope: !9517)
!9519 = !DILocation(line: 5772, column: 9, scope: !9520)
!9520 = distinct !DILexicalBlock(scope: !9521, file: !3, line: 5772, column: 8)
!9521 = distinct !DILexicalBlock(scope: !9517, file: !3, line: 5771, column: 2)
!9522 = !DILocation(line: 5772, column: 8, scope: !9521)
!9523 = !DILocation(line: 5773, column: 6, scope: !9520)
!9524 = !DILocation(line: 5775, column: 10, scope: !9521)
!9525 = !DILocation(line: 5775, column: 8, scope: !9521)
!9526 = !DILocation(line: 5776, column: 8, scope: !9527)
!9527 = distinct !DILexicalBlock(scope: !9521, file: !3, line: 5776, column: 8)
!9528 = !DILocation(line: 5776, column: 23, scope: !9527)
!9529 = !DILocation(line: 5776, column: 8, scope: !9521)
!9530 = !DILocation(line: 5777, column: 16, scope: !9527)
!9531 = !DILocation(line: 5777, column: 13, scope: !9527)
!9532 = !DILocation(line: 5777, column: 48, scope: !9527)
!9533 = !DILocation(line: 5777, column: 46, scope: !9527)
!9534 = !DILocation(line: 5777, column: 6, scope: !9527)
!9535 = !DILocation(line: 5778, column: 13, scope: !9536)
!9536 = distinct !DILexicalBlock(scope: !9527, file: !3, line: 5778, column: 13)
!9537 = !DILocation(line: 5778, column: 28, scope: !9536)
!9538 = !DILocation(line: 5778, column: 13, scope: !9527)
!9539 = !DILocation(line: 5779, column: 16, scope: !9536)
!9540 = !DILocation(line: 5779, column: 13, scope: !9536)
!9541 = !DILocation(line: 5779, column: 41, scope: !9536)
!9542 = !DILocation(line: 5779, column: 6, scope: !9536)
!9543 = !DILocation(line: 5781, column: 6, scope: !9536)
!9544 = !DILocation(line: 5783, column: 8, scope: !9545)
!9545 = distinct !DILexicalBlock(scope: !9521, file: !3, line: 5783, column: 8)
!9546 = !DILocation(line: 5783, column: 27, scope: !9545)
!9547 = !DILocation(line: 5784, column: 8, scope: !9545)
!9548 = !DILocation(line: 5784, column: 11, scope: !9545)
!9549 = !DILocation(line: 5784, column: 40, scope: !9545)
!9550 = !DILocation(line: 5783, column: 8, scope: !9521)
!9551 = !DILocation(line: 5785, column: 31, scope: !9545)
!9552 = !DILocation(line: 5785, column: 37, scope: !9545)
!9553 = !DILocation(line: 5785, column: 45, scope: !9545)
!9554 = !DILocation(line: 5785, column: 6, scope: !9545)
!9555 = !DILocation(line: 5786, column: 3, scope: !9521)
!9556 = distinct !{!9556, !9513, !9557}
!9557 = !DILocation(line: 5786, column: 3, scope: !9514)
!9558 = !DILocation(line: 5787, column: 5, scope: !9515)
!9559 = distinct !{!9559, !9509, !9560}
!9560 = !DILocation(line: 5787, column: 5, scope: !9510)
!9561 = !DILocation(line: 5789, column: 3, scope: !9492)
!9562 = !DILocation(line: 5790, column: 1, scope: !9492)
!9563 = distinct !DISubprogram(name: "gt_ggc_mx_temp_slot_address_entry", scope: !4389, file: !4389, line: 23, type: !3395, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9564 = !DILocalVariable(name: "x_p", arg: 1, scope: !9563, file: !4389, line: 23, type: !3035)
!9565 = !DILocation(line: 23, column: 42, scope: !9563)
!9566 = !DILocalVariable(name: "x", scope: !9563, file: !4389, line: 25, type: !9567)
!9567 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4305)
!9568 = !DILocation(line: 25, column: 42, scope: !9563)
!9569 = !DILocation(line: 25, column: 80, scope: !9563)
!9570 = !DILocation(line: 25, column: 46, scope: !9563)
!9571 = !DILocation(line: 26, column: 7, scope: !9572)
!9572 = distinct !DILexicalBlock(scope: !9563, file: !4389, line: 26, column: 7)
!9573 = !DILocation(line: 26, column: 7, scope: !9563)
!9574 = !DILocation(line: 28, column: 7, scope: !9575)
!9575 = distinct !DILexicalBlock(scope: !9572, file: !4389, line: 27, column: 5)
!9576 = !DILocation(line: 28, column: 7, scope: !9577)
!9577 = distinct !DILexicalBlock(scope: !9578, file: !4389, line: 28, column: 7)
!9578 = distinct !DILexicalBlock(scope: !9575, file: !4389, line: 28, column: 7)
!9579 = !DILocation(line: 28, column: 7, scope: !9578)
!9580 = !DILocation(line: 29, column: 7, scope: !9575)
!9581 = !DILocation(line: 29, column: 7, scope: !9582)
!9582 = distinct !DILexicalBlock(scope: !9583, file: !4389, line: 29, column: 7)
!9583 = distinct !DILexicalBlock(scope: !9575, file: !4389, line: 29, column: 7)
!9584 = !DILocation(line: 29, column: 7, scope: !9583)
!9585 = !DILocation(line: 30, column: 5, scope: !9575)
!9586 = !DILocation(line: 31, column: 1, scope: !9563)
!9587 = distinct !DISubprogram(name: "gt_ggc_mx_temp_slot", scope: !4389, file: !4389, line: 34, type: !3395, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9588 = !DILocalVariable(name: "x_p", arg: 1, scope: !9587, file: !4389, line: 34, type: !3035)
!9589 = !DILocation(line: 34, column: 28, scope: !9587)
!9590 = !DILocalVariable(name: "x", scope: !9587, file: !4389, line: 36, type: !9591)
!9591 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2918)
!9592 = !DILocation(line: 36, column: 28, scope: !9587)
!9593 = !DILocation(line: 36, column: 52, scope: !9587)
!9594 = !DILocation(line: 36, column: 32, scope: !9587)
!9595 = !DILocation(line: 37, column: 7, scope: !9596)
!9596 = distinct !DILexicalBlock(scope: !9587, file: !4389, line: 37, column: 7)
!9597 = !DILocation(line: 37, column: 7, scope: !9587)
!9598 = !DILocation(line: 39, column: 7, scope: !9599)
!9599 = distinct !DILexicalBlock(scope: !9596, file: !4389, line: 38, column: 5)
!9600 = !DILocation(line: 39, column: 7, scope: !9601)
!9601 = distinct !DILexicalBlock(scope: !9602, file: !4389, line: 39, column: 7)
!9602 = distinct !DILexicalBlock(scope: !9599, file: !4389, line: 39, column: 7)
!9603 = !DILocation(line: 39, column: 7, scope: !9602)
!9604 = !DILocation(line: 40, column: 7, scope: !9599)
!9605 = !DILocation(line: 40, column: 7, scope: !9606)
!9606 = distinct !DILexicalBlock(scope: !9607, file: !4389, line: 40, column: 7)
!9607 = distinct !DILexicalBlock(scope: !9599, file: !4389, line: 40, column: 7)
!9608 = !DILocation(line: 40, column: 7, scope: !9607)
!9609 = !DILocation(line: 41, column: 7, scope: !9599)
!9610 = !DILocation(line: 41, column: 7, scope: !9611)
!9611 = distinct !DILexicalBlock(scope: !9612, file: !4389, line: 41, column: 7)
!9612 = distinct !DILexicalBlock(scope: !9599, file: !4389, line: 41, column: 7)
!9613 = !DILocation(line: 41, column: 7, scope: !9612)
!9614 = !DILocation(line: 42, column: 7, scope: !9599)
!9615 = !DILocation(line: 42, column: 7, scope: !9616)
!9616 = distinct !DILexicalBlock(scope: !9617, file: !4389, line: 42, column: 7)
!9617 = distinct !DILexicalBlock(scope: !9599, file: !4389, line: 42, column: 7)
!9618 = !DILocation(line: 42, column: 7, scope: !9617)
!9619 = !DILocation(line: 43, column: 5, scope: !9599)
!9620 = !DILocation(line: 44, column: 1, scope: !9587)
!9621 = distinct !DISubprogram(name: "gt_ggc_m_P23temp_slot_address_entry4htab", scope: !4389, file: !4389, line: 47, type: !3395, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9622 = !DILocalVariable(name: "x_p", arg: 1, scope: !9621, file: !4389, line: 47, type: !3035)
!9623 = !DILocation(line: 47, column: 49, scope: !9621)
!9624 = !DILocalVariable(name: "x", scope: !9621, file: !4389, line: 49, type: !9625)
!9625 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3376)
!9626 = !DILocation(line: 49, column: 23, scope: !9621)
!9627 = !DILocation(line: 49, column: 42, scope: !9621)
!9628 = !DILocation(line: 49, column: 27, scope: !9621)
!9629 = !DILocation(line: 50, column: 7, scope: !9630)
!9630 = distinct !DILexicalBlock(scope: !9621, file: !4389, line: 50, column: 7)
!9631 = !DILocation(line: 50, column: 7, scope: !9621)
!9632 = !DILocation(line: 52, column: 13, scope: !9633)
!9633 = distinct !DILexicalBlock(scope: !9634, file: !4389, line: 52, column: 11)
!9634 = distinct !DILexicalBlock(scope: !9630, file: !4389, line: 51, column: 5)
!9635 = !DILocation(line: 52, column: 16, scope: !9633)
!9636 = !DILocation(line: 52, column: 24, scope: !9633)
!9637 = !DILocation(line: 52, column: 11, scope: !9634)
!9638 = !DILocalVariable(name: "i0", scope: !9639, file: !4389, line: 53, type: !3400)
!9639 = distinct !DILexicalBlock(scope: !9633, file: !4389, line: 52, column: 33)
!9640 = !DILocation(line: 53, column: 16, scope: !9639)
!9641 = !DILocation(line: 54, column: 17, scope: !9642)
!9642 = distinct !DILexicalBlock(scope: !9639, file: !4389, line: 54, column: 9)
!9643 = !DILocation(line: 54, column: 14, scope: !9642)
!9644 = !DILocation(line: 54, column: 22, scope: !9645)
!9645 = distinct !DILexicalBlock(scope: !9642, file: !4389, line: 54, column: 9)
!9646 = !DILocation(line: 54, column: 40, scope: !9645)
!9647 = !DILocation(line: 54, column: 44, scope: !9645)
!9648 = !DILocation(line: 54, column: 25, scope: !9645)
!9649 = !DILocation(line: 54, column: 9, scope: !9642)
!9650 = !DILocation(line: 55, column: 11, scope: !9651)
!9651 = distinct !DILexicalBlock(scope: !9645, file: !4389, line: 54, column: 57)
!9652 = !DILocation(line: 55, column: 11, scope: !9653)
!9653 = distinct !DILexicalBlock(scope: !9654, file: !4389, line: 55, column: 11)
!9654 = distinct !DILexicalBlock(scope: !9651, file: !4389, line: 55, column: 11)
!9655 = !DILocation(line: 55, column: 11, scope: !9654)
!9656 = !DILocation(line: 56, column: 9, scope: !9651)
!9657 = !DILocation(line: 54, column: 53, scope: !9645)
!9658 = !DILocation(line: 54, column: 9, scope: !9645)
!9659 = distinct !{!9659, !9649, !9660}
!9660 = !DILocation(line: 56, column: 9, scope: !9642)
!9661 = !DILocation(line: 57, column: 9, scope: !9639)
!9662 = !DILocalVariable(name: "a__", scope: !9663, file: !4389, line: 57, type: !9664)
!9663 = distinct !DILexicalBlock(scope: !9639, file: !4389, line: 57, column: 9)
!9664 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3385)
!9665 = !DILocation(line: 57, column: 9, scope: !9663)
!9666 = !DILocation(line: 57, column: 9, scope: !9667)
!9667 = distinct !DILexicalBlock(scope: !9663, file: !4389, line: 57, column: 9)
!9668 = !DILocation(line: 58, column: 7, scope: !9639)
!9669 = !DILocation(line: 59, column: 5, scope: !9634)
!9670 = !DILocation(line: 60, column: 1, scope: !9621)
!9671 = distinct !DISubprogram(name: "gt_pch_nx_temp_slot_address_entry", scope: !4389, file: !4389, line: 63, type: !3395, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9672 = !DILocalVariable(name: "x_p", arg: 1, scope: !9671, file: !4389, line: 63, type: !3035)
!9673 = !DILocation(line: 63, column: 42, scope: !9671)
!9674 = !DILocalVariable(name: "x", scope: !9671, file: !4389, line: 65, type: !9567)
!9675 = !DILocation(line: 65, column: 42, scope: !9671)
!9676 = !DILocation(line: 65, column: 80, scope: !9671)
!9677 = !DILocation(line: 65, column: 46, scope: !9671)
!9678 = !DILocation(line: 66, column: 27, scope: !9679)
!9679 = distinct !DILexicalBlock(scope: !9671, file: !4389, line: 66, column: 7)
!9680 = !DILocation(line: 66, column: 30, scope: !9679)
!9681 = !DILocation(line: 66, column: 7, scope: !9679)
!9682 = !DILocation(line: 66, column: 7, scope: !9671)
!9683 = !DILocation(line: 68, column: 7, scope: !9684)
!9684 = distinct !DILexicalBlock(scope: !9679, file: !4389, line: 67, column: 5)
!9685 = !DILocation(line: 68, column: 7, scope: !9686)
!9686 = distinct !DILexicalBlock(scope: !9687, file: !4389, line: 68, column: 7)
!9687 = distinct !DILexicalBlock(scope: !9684, file: !4389, line: 68, column: 7)
!9688 = !DILocation(line: 68, column: 7, scope: !9687)
!9689 = !DILocation(line: 69, column: 7, scope: !9684)
!9690 = !DILocation(line: 69, column: 7, scope: !9691)
!9691 = distinct !DILexicalBlock(scope: !9692, file: !4389, line: 69, column: 7)
!9692 = distinct !DILexicalBlock(scope: !9684, file: !4389, line: 69, column: 7)
!9693 = !DILocation(line: 69, column: 7, scope: !9692)
!9694 = !DILocation(line: 70, column: 5, scope: !9684)
!9695 = !DILocation(line: 71, column: 1, scope: !9671)
!9696 = distinct !DISubprogram(name: "gt_pch_p_23temp_slot_address_entry", scope: !4389, file: !4389, line: 103, type: !9697, scopeLine: 107, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9697 = !DISubroutineType(types: !9698)
!9698 = !{null, !3035, !3035, !9699, !3035}
!9699 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_operator", file: !4393, line: 38, baseType: !3421)
!9700 = !DILocalVariable(name: "this_obj", arg: 1, scope: !9696, file: !4389, line: 103, type: !3035)
!9701 = !DILocation(line: 103, column: 60, scope: !9696)
!9702 = !DILocalVariable(name: "x_p", arg: 2, scope: !9696, file: !4389, line: 104, type: !3035)
!9703 = !DILocation(line: 104, column: 8, scope: !9696)
!9704 = !DILocalVariable(name: "op", arg: 3, scope: !9696, file: !4389, line: 105, type: !9699)
!9705 = !DILocation(line: 105, column: 39, scope: !9696)
!9706 = !DILocalVariable(name: "cookie", arg: 4, scope: !9696, file: !4389, line: 106, type: !3035)
!9707 = !DILocation(line: 106, column: 25, scope: !9696)
!9708 = !DILocalVariable(name: "x", scope: !9696, file: !4389, line: 108, type: !9567)
!9709 = !DILocation(line: 108, column: 42, scope: !9696)
!9710 = !DILocation(line: 108, column: 97, scope: !9696)
!9711 = !DILocation(line: 108, column: 63, scope: !9696)
!9712 = !DILocation(line: 109, column: 16, scope: !9713)
!9713 = distinct !DILexicalBlock(scope: !9696, file: !4389, line: 109, column: 7)
!9714 = !DILocation(line: 109, column: 7, scope: !9713)
!9715 = !DILocation(line: 109, column: 22, scope: !9713)
!9716 = !DILocation(line: 109, column: 19, scope: !9713)
!9717 = !DILocation(line: 109, column: 7, scope: !9696)
!9718 = !DILocation(line: 110, column: 5, scope: !9713)
!9719 = !DILocation(line: 110, column: 13, scope: !9713)
!9720 = !DILocation(line: 110, column: 16, scope: !9713)
!9721 = !DILocation(line: 110, column: 9, scope: !9713)
!9722 = !DILocation(line: 110, column: 26, scope: !9713)
!9723 = !DILocation(line: 111, column: 16, scope: !9724)
!9724 = distinct !DILexicalBlock(scope: !9696, file: !4389, line: 111, column: 7)
!9725 = !DILocation(line: 111, column: 7, scope: !9724)
!9726 = !DILocation(line: 111, column: 22, scope: !9724)
!9727 = !DILocation(line: 111, column: 19, scope: !9724)
!9728 = !DILocation(line: 111, column: 7, scope: !9696)
!9729 = !DILocation(line: 112, column: 5, scope: !9724)
!9730 = !DILocation(line: 112, column: 13, scope: !9724)
!9731 = !DILocation(line: 112, column: 16, scope: !9724)
!9732 = !DILocation(line: 112, column: 9, scope: !9724)
!9733 = !DILocation(line: 112, column: 28, scope: !9724)
!9734 = !DILocation(line: 113, column: 1, scope: !9696)
!9735 = distinct !DISubprogram(name: "gt_pch_nx_temp_slot", scope: !4389, file: !4389, line: 74, type: !3395, scopeLine: 75, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9736 = !DILocalVariable(name: "x_p", arg: 1, scope: !9735, file: !4389, line: 74, type: !3035)
!9737 = !DILocation(line: 74, column: 28, scope: !9735)
!9738 = !DILocalVariable(name: "x", scope: !9735, file: !4389, line: 76, type: !9591)
!9739 = !DILocation(line: 76, column: 28, scope: !9735)
!9740 = !DILocation(line: 76, column: 52, scope: !9735)
!9741 = !DILocation(line: 76, column: 32, scope: !9735)
!9742 = !DILocation(line: 77, column: 27, scope: !9743)
!9743 = distinct !DILexicalBlock(scope: !9735, file: !4389, line: 77, column: 7)
!9744 = !DILocation(line: 77, column: 30, scope: !9743)
!9745 = !DILocation(line: 77, column: 7, scope: !9743)
!9746 = !DILocation(line: 77, column: 7, scope: !9735)
!9747 = !DILocation(line: 79, column: 7, scope: !9748)
!9748 = distinct !DILexicalBlock(scope: !9743, file: !4389, line: 78, column: 5)
!9749 = !DILocation(line: 79, column: 7, scope: !9750)
!9750 = distinct !DILexicalBlock(scope: !9751, file: !4389, line: 79, column: 7)
!9751 = distinct !DILexicalBlock(scope: !9748, file: !4389, line: 79, column: 7)
!9752 = !DILocation(line: 79, column: 7, scope: !9751)
!9753 = !DILocation(line: 80, column: 7, scope: !9748)
!9754 = !DILocation(line: 80, column: 7, scope: !9755)
!9755 = distinct !DILexicalBlock(scope: !9756, file: !4389, line: 80, column: 7)
!9756 = distinct !DILexicalBlock(scope: !9748, file: !4389, line: 80, column: 7)
!9757 = !DILocation(line: 80, column: 7, scope: !9756)
!9758 = !DILocation(line: 81, column: 7, scope: !9748)
!9759 = !DILocation(line: 81, column: 7, scope: !9760)
!9760 = distinct !DILexicalBlock(scope: !9761, file: !4389, line: 81, column: 7)
!9761 = distinct !DILexicalBlock(scope: !9748, file: !4389, line: 81, column: 7)
!9762 = !DILocation(line: 81, column: 7, scope: !9761)
!9763 = !DILocation(line: 82, column: 7, scope: !9748)
!9764 = !DILocation(line: 82, column: 7, scope: !9765)
!9765 = distinct !DILexicalBlock(scope: !9766, file: !4389, line: 82, column: 7)
!9766 = distinct !DILexicalBlock(scope: !9748, file: !4389, line: 82, column: 7)
!9767 = !DILocation(line: 82, column: 7, scope: !9766)
!9768 = !DILocation(line: 83, column: 5, scope: !9748)
!9769 = !DILocation(line: 84, column: 1, scope: !9735)
!9770 = distinct !DISubprogram(name: "gt_pch_p_9temp_slot", scope: !4389, file: !4389, line: 116, type: !9697, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9771 = !DILocalVariable(name: "this_obj", arg: 1, scope: !9770, file: !4389, line: 116, type: !3035)
!9772 = !DILocation(line: 116, column: 45, scope: !9770)
!9773 = !DILocalVariable(name: "x_p", arg: 2, scope: !9770, file: !4389, line: 117, type: !3035)
!9774 = !DILocation(line: 117, column: 8, scope: !9770)
!9775 = !DILocalVariable(name: "op", arg: 3, scope: !9770, file: !4389, line: 118, type: !9699)
!9776 = !DILocation(line: 118, column: 39, scope: !9770)
!9777 = !DILocalVariable(name: "cookie", arg: 4, scope: !9770, file: !4389, line: 119, type: !3035)
!9778 = !DILocation(line: 119, column: 25, scope: !9770)
!9779 = !DILocalVariable(name: "x", scope: !9770, file: !4389, line: 121, type: !9591)
!9780 = !DILocation(line: 121, column: 28, scope: !9770)
!9781 = !DILocation(line: 121, column: 69, scope: !9770)
!9782 = !DILocation(line: 121, column: 49, scope: !9770)
!9783 = !DILocation(line: 122, column: 16, scope: !9784)
!9784 = distinct !DILexicalBlock(scope: !9770, file: !4389, line: 122, column: 7)
!9785 = !DILocation(line: 122, column: 7, scope: !9784)
!9786 = !DILocation(line: 122, column: 22, scope: !9784)
!9787 = !DILocation(line: 122, column: 19, scope: !9784)
!9788 = !DILocation(line: 122, column: 7, scope: !9770)
!9789 = !DILocation(line: 123, column: 5, scope: !9784)
!9790 = !DILocation(line: 123, column: 13, scope: !9784)
!9791 = !DILocation(line: 123, column: 16, scope: !9784)
!9792 = !DILocation(line: 123, column: 9, scope: !9784)
!9793 = !DILocation(line: 123, column: 23, scope: !9784)
!9794 = !DILocation(line: 124, column: 16, scope: !9795)
!9795 = distinct !DILexicalBlock(scope: !9770, file: !4389, line: 124, column: 7)
!9796 = !DILocation(line: 124, column: 7, scope: !9795)
!9797 = !DILocation(line: 124, column: 22, scope: !9795)
!9798 = !DILocation(line: 124, column: 19, scope: !9795)
!9799 = !DILocation(line: 124, column: 7, scope: !9770)
!9800 = !DILocation(line: 125, column: 5, scope: !9795)
!9801 = !DILocation(line: 125, column: 13, scope: !9795)
!9802 = !DILocation(line: 125, column: 16, scope: !9795)
!9803 = !DILocation(line: 125, column: 9, scope: !9795)
!9804 = !DILocation(line: 125, column: 23, scope: !9795)
!9805 = !DILocation(line: 126, column: 16, scope: !9806)
!9806 = distinct !DILexicalBlock(scope: !9770, file: !4389, line: 126, column: 7)
!9807 = !DILocation(line: 126, column: 7, scope: !9806)
!9808 = !DILocation(line: 126, column: 22, scope: !9806)
!9809 = !DILocation(line: 126, column: 19, scope: !9806)
!9810 = !DILocation(line: 126, column: 7, scope: !9770)
!9811 = !DILocation(line: 127, column: 5, scope: !9806)
!9812 = !DILocation(line: 127, column: 13, scope: !9806)
!9813 = !DILocation(line: 127, column: 16, scope: !9806)
!9814 = !DILocation(line: 127, column: 9, scope: !9806)
!9815 = !DILocation(line: 127, column: 23, scope: !9806)
!9816 = !DILocation(line: 128, column: 16, scope: !9817)
!9817 = distinct !DILexicalBlock(scope: !9770, file: !4389, line: 128, column: 7)
!9818 = !DILocation(line: 128, column: 7, scope: !9817)
!9819 = !DILocation(line: 128, column: 22, scope: !9817)
!9820 = !DILocation(line: 128, column: 19, scope: !9817)
!9821 = !DILocation(line: 128, column: 7, scope: !9770)
!9822 = !DILocation(line: 129, column: 5, scope: !9817)
!9823 = !DILocation(line: 129, column: 13, scope: !9817)
!9824 = !DILocation(line: 129, column: 16, scope: !9817)
!9825 = !DILocation(line: 129, column: 9, scope: !9817)
!9826 = !DILocation(line: 129, column: 23, scope: !9817)
!9827 = !DILocation(line: 130, column: 1, scope: !9770)
!9828 = distinct !DISubprogram(name: "gt_pch_n_P23temp_slot_address_entry4htab", scope: !4389, file: !4389, line: 87, type: !3395, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9829 = !DILocalVariable(name: "x_p", arg: 1, scope: !9828, file: !4389, line: 87, type: !3035)
!9830 = !DILocation(line: 87, column: 49, scope: !9828)
!9831 = !DILocalVariable(name: "x", scope: !9828, file: !4389, line: 89, type: !9625)
!9832 = !DILocation(line: 89, column: 23, scope: !9828)
!9833 = !DILocation(line: 89, column: 42, scope: !9828)
!9834 = !DILocation(line: 89, column: 27, scope: !9828)
!9835 = !DILocation(line: 90, column: 27, scope: !9836)
!9836 = distinct !DILexicalBlock(scope: !9828, file: !4389, line: 90, column: 7)
!9837 = !DILocation(line: 90, column: 30, scope: !9836)
!9838 = !DILocation(line: 90, column: 7, scope: !9836)
!9839 = !DILocation(line: 90, column: 7, scope: !9828)
!9840 = !DILocation(line: 92, column: 13, scope: !9841)
!9841 = distinct !DILexicalBlock(scope: !9842, file: !4389, line: 92, column: 11)
!9842 = distinct !DILexicalBlock(scope: !9836, file: !4389, line: 91, column: 5)
!9843 = !DILocation(line: 92, column: 16, scope: !9841)
!9844 = !DILocation(line: 92, column: 24, scope: !9841)
!9845 = !DILocation(line: 92, column: 11, scope: !9842)
!9846 = !DILocalVariable(name: "i0", scope: !9847, file: !4389, line: 93, type: !3400)
!9847 = distinct !DILexicalBlock(scope: !9841, file: !4389, line: 92, column: 33)
!9848 = !DILocation(line: 93, column: 16, scope: !9847)
!9849 = !DILocation(line: 94, column: 17, scope: !9850)
!9850 = distinct !DILexicalBlock(scope: !9847, file: !4389, line: 94, column: 9)
!9851 = !DILocation(line: 94, column: 14, scope: !9850)
!9852 = !DILocation(line: 94, column: 22, scope: !9853)
!9853 = distinct !DILexicalBlock(scope: !9850, file: !4389, line: 94, column: 9)
!9854 = !DILocation(line: 94, column: 40, scope: !9853)
!9855 = !DILocation(line: 94, column: 44, scope: !9853)
!9856 = !DILocation(line: 94, column: 25, scope: !9853)
!9857 = !DILocation(line: 94, column: 9, scope: !9850)
!9858 = !DILocation(line: 95, column: 11, scope: !9859)
!9859 = distinct !DILexicalBlock(scope: !9853, file: !4389, line: 94, column: 57)
!9860 = !DILocation(line: 95, column: 11, scope: !9861)
!9861 = distinct !DILexicalBlock(scope: !9862, file: !4389, line: 95, column: 11)
!9862 = distinct !DILexicalBlock(scope: !9859, file: !4389, line: 95, column: 11)
!9863 = !DILocation(line: 95, column: 11, scope: !9862)
!9864 = !DILocation(line: 96, column: 9, scope: !9859)
!9865 = !DILocation(line: 94, column: 53, scope: !9853)
!9866 = !DILocation(line: 94, column: 9, scope: !9853)
!9867 = distinct !{!9867, !9857, !9868}
!9868 = !DILocation(line: 96, column: 9, scope: !9850)
!9869 = !DILocation(line: 97, column: 31, scope: !9847)
!9870 = !DILocation(line: 97, column: 34, scope: !9847)
!9871 = !DILocation(line: 97, column: 29, scope: !9847)
!9872 = !DILocation(line: 97, column: 43, scope: !9847)
!9873 = !DILocation(line: 97, column: 9, scope: !9847)
!9874 = !DILocation(line: 98, column: 7, scope: !9847)
!9875 = !DILocation(line: 99, column: 5, scope: !9842)
!9876 = !DILocation(line: 100, column: 1, scope: !9828)
!9877 = distinct !DISubprogram(name: "gt_pch_p_P23temp_slot_address_entry4htab", scope: !4389, file: !4389, line: 133, type: !9697, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9878 = !DILocalVariable(name: "this_obj", arg: 1, scope: !9877, file: !4389, line: 133, type: !3035)
!9879 = !DILocation(line: 133, column: 66, scope: !9877)
!9880 = !DILocalVariable(name: "x_p", arg: 2, scope: !9877, file: !4389, line: 134, type: !3035)
!9881 = !DILocation(line: 134, column: 8, scope: !9877)
!9882 = !DILocalVariable(name: "op", arg: 3, scope: !9877, file: !4389, line: 135, type: !9699)
!9883 = !DILocation(line: 135, column: 39, scope: !9877)
!9884 = !DILocalVariable(name: "cookie", arg: 4, scope: !9877, file: !4389, line: 136, type: !3035)
!9885 = !DILocation(line: 136, column: 25, scope: !9877)
!9886 = !DILocalVariable(name: "x", scope: !9877, file: !4389, line: 138, type: !9625)
!9887 = !DILocation(line: 138, column: 23, scope: !9877)
!9888 = !DILocation(line: 138, column: 59, scope: !9877)
!9889 = !DILocation(line: 138, column: 44, scope: !9877)
!9890 = !DILocation(line: 139, column: 9, scope: !9891)
!9891 = distinct !DILexicalBlock(scope: !9877, file: !4389, line: 139, column: 7)
!9892 = !DILocation(line: 139, column: 12, scope: !9891)
!9893 = !DILocation(line: 139, column: 20, scope: !9891)
!9894 = !DILocation(line: 139, column: 7, scope: !9877)
!9895 = !DILocalVariable(name: "i0", scope: !9896, file: !4389, line: 140, type: !3400)
!9896 = distinct !DILexicalBlock(scope: !9891, file: !4389, line: 139, column: 29)
!9897 = !DILocation(line: 140, column: 12, scope: !9896)
!9898 = !DILocation(line: 141, column: 13, scope: !9899)
!9899 = distinct !DILexicalBlock(scope: !9896, file: !4389, line: 141, column: 5)
!9900 = !DILocation(line: 141, column: 10, scope: !9899)
!9901 = !DILocation(line: 141, column: 18, scope: !9902)
!9902 = distinct !DILexicalBlock(scope: !9899, file: !4389, line: 141, column: 5)
!9903 = !DILocation(line: 141, column: 36, scope: !9902)
!9904 = !DILocation(line: 141, column: 40, scope: !9902)
!9905 = !DILocation(line: 141, column: 21, scope: !9902)
!9906 = !DILocation(line: 141, column: 5, scope: !9899)
!9907 = !DILocation(line: 142, column: 22, scope: !9908)
!9908 = distinct !DILexicalBlock(scope: !9909, file: !4389, line: 142, column: 11)
!9909 = distinct !DILexicalBlock(scope: !9902, file: !4389, line: 141, column: 53)
!9910 = !DILocation(line: 142, column: 25, scope: !9908)
!9911 = !DILocation(line: 142, column: 11, scope: !9908)
!9912 = !DILocation(line: 142, column: 37, scope: !9908)
!9913 = !DILocation(line: 142, column: 34, scope: !9908)
!9914 = !DILocation(line: 142, column: 11, scope: !9909)
!9915 = !DILocation(line: 143, column: 9, scope: !9908)
!9916 = !DILocation(line: 143, column: 17, scope: !9908)
!9917 = !DILocation(line: 143, column: 20, scope: !9908)
!9918 = !DILocation(line: 143, column: 28, scope: !9908)
!9919 = !DILocation(line: 143, column: 15, scope: !9908)
!9920 = !DILocation(line: 143, column: 13, scope: !9908)
!9921 = !DILocation(line: 143, column: 34, scope: !9908)
!9922 = !DILocation(line: 144, column: 5, scope: !9909)
!9923 = !DILocation(line: 141, column: 49, scope: !9902)
!9924 = !DILocation(line: 141, column: 5, scope: !9902)
!9925 = distinct !{!9925, !9906, !9926}
!9926 = !DILocation(line: 144, column: 5, scope: !9899)
!9927 = !DILocation(line: 145, column: 18, scope: !9928)
!9928 = distinct !DILexicalBlock(scope: !9896, file: !4389, line: 145, column: 9)
!9929 = !DILocation(line: 145, column: 9, scope: !9928)
!9930 = !DILocation(line: 145, column: 24, scope: !9928)
!9931 = !DILocation(line: 145, column: 21, scope: !9928)
!9932 = !DILocation(line: 145, column: 9, scope: !9896)
!9933 = !DILocation(line: 146, column: 7, scope: !9928)
!9934 = !DILocation(line: 146, column: 15, scope: !9928)
!9935 = !DILocation(line: 146, column: 18, scope: !9928)
!9936 = !DILocation(line: 146, column: 11, scope: !9928)
!9937 = !DILocation(line: 146, column: 28, scope: !9928)
!9938 = !DILocation(line: 147, column: 3, scope: !9896)
!9939 = !DILocation(line: 148, column: 1, scope: !9877)
!9940 = distinct !DISubprogram(name: "VEC_function_p_heap_reserve", scope: !3, file: !3, line: 164, type: !9941, scopeLine: 164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9941 = !DISubroutineType(types: !9942)
!9942 = !{!2948, !4561, !2948}
!9943 = !DILocalVariable(name: "vec_", arg: 1, scope: !9940, file: !3, line: 164, type: !4561)
!9944 = !DILocation(line: 164, column: 1, scope: !9940)
!9945 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9940, file: !3, line: 164, type: !2948)
!9946 = !DILocalVariable(name: "extend", scope: !9940, file: !3, line: 164, type: !2948)
!9947 = !DILocation(line: 164, column: 1, scope: !9948)
!9948 = distinct !DILexicalBlock(scope: !9940, file: !3, line: 164, column: 1)
!9949 = distinct !DISubprogram(name: "VEC_function_p_base_quick_push", scope: !3, file: !3, line: 163, type: !9950, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9950 = !DISubroutineType(types: !9951)
!9951 = !{!4560, !4599, !4323}
!9952 = !DILocalVariable(name: "vec_", arg: 1, scope: !9949, file: !3, line: 163, type: !4599)
!9953 = !DILocation(line: 163, column: 1, scope: !9949)
!9954 = !DILocalVariable(name: "obj_", arg: 2, scope: !9949, file: !3, line: 163, type: !4323)
!9955 = !DILocalVariable(name: "slot_", scope: !9949, file: !3, line: 163, type: !4560)
!9956 = distinct !DISubprogram(name: "VEC_function_p_base_space", scope: !3, file: !3, line: 163, type: !9957, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9957 = !DISubroutineType(types: !9958)
!9958 = !{!2948, !4599, !2948}
!9959 = !DILocalVariable(name: "vec_", arg: 1, scope: !9956, file: !3, line: 163, type: !4599)
!9960 = !DILocation(line: 163, column: 1, scope: !9956)
!9961 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9956, file: !3, line: 163, type: !2948)
!9962 = distinct !DISubprogram(name: "VEC_temp_slot_p_base_length", scope: !1493, file: !1493, line: 171, type: !9963, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9963 = !DISubroutineType(types: !9964)
!9964 = !{!7, !9965}
!9965 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9966, size: 64)
!9966 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4329)
!9967 = !DILocalVariable(name: "vec_", arg: 1, scope: !9962, file: !1493, line: 171, type: !9965)
!9968 = !DILocation(line: 171, column: 1, scope: !9962)
!9969 = distinct !DISubprogram(name: "VEC_temp_slot_p_gc_safe_grow_cleared", scope: !1493, file: !1493, line: 172, type: !9970, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9970 = !DISubroutineType(types: !9971)
!9971 = !{null, !9972, !2948}
!9972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4324, size: 64)
!9973 = !DILocalVariable(name: "vec_", arg: 1, scope: !9969, file: !1493, line: 172, type: !9972)
!9974 = !DILocation(line: 172, column: 1, scope: !9969)
!9975 = !DILocalVariable(name: "size_", arg: 2, scope: !9969, file: !1493, line: 172, type: !2948)
!9976 = !DILocalVariable(name: "oldsize", scope: !9969, file: !1493, line: 172, type: !2948)
!9977 = distinct !DISubprogram(name: "VEC_temp_slot_p_base_address", scope: !1493, file: !1493, line: 171, type: !9978, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9978 = !DISubroutineType(types: !9979)
!9979 = !{!9980, !9981}
!9980 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4336, size: 64)
!9981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4329, size: 64)
!9982 = !DILocalVariable(name: "vec_", arg: 1, scope: !9977, file: !1493, line: 171, type: !9981)
!9983 = !DILocation(line: 171, column: 1, scope: !9977)
!9984 = distinct !DISubprogram(name: "VEC_temp_slot_p_gc_safe_grow", scope: !1493, file: !1493, line: 172, type: !9970, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9985 = !DILocalVariable(name: "vec_", arg: 1, scope: !9984, file: !1493, line: 172, type: !9972)
!9986 = !DILocation(line: 172, column: 1, scope: !9984)
!9987 = !DILocalVariable(name: "size_", arg: 2, scope: !9984, file: !1493, line: 172, type: !2948)
!9988 = !DILocation(line: 0, scope: !9984)
!9989 = distinct !DISubprogram(name: "VEC_temp_slot_p_gc_reserve_exact", scope: !1493, file: !1493, line: 172, type: !9990, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9990 = !DISubroutineType(types: !9991)
!9991 = !{!2948, !9972, !2948}
!9992 = !DILocalVariable(name: "vec_", arg: 1, scope: !9989, file: !1493, line: 172, type: !9972)
!9993 = !DILocation(line: 172, column: 1, scope: !9989)
!9994 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9989, file: !1493, line: 172, type: !2948)
!9995 = !DILocalVariable(name: "extend", scope: !9989, file: !1493, line: 172, type: !2948)
!9996 = !DILocation(line: 172, column: 1, scope: !9997)
!9997 = distinct !DILexicalBlock(scope: !9989, file: !1493, line: 172, column: 1)
!9998 = distinct !DISubprogram(name: "VEC_temp_slot_p_base_space", scope: !1493, file: !1493, line: 171, type: !9999, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!9999 = !DISubroutineType(types: !10000)
!10000 = !{!2948, !9981, !2948}
!10001 = !DILocalVariable(name: "vec_", arg: 1, scope: !9998, file: !1493, line: 171, type: !9981)
!10002 = !DILocation(line: 171, column: 1, scope: !9998)
!10003 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9998, file: !1493, line: 171, type: !2948)
!10004 = distinct !DISubprogram(name: "temp_slot_address_compute_hash", scope: !3, file: !3, line: 572, type: !10005, scopeLine: 573, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10005 = !DISubroutineType(types: !10006)
!10006 = !{!3384, !4305}
!10007 = !DILocalVariable(name: "t", arg: 1, scope: !10004, file: !3, line: 572, type: !4305)
!10008 = !DILocation(line: 572, column: 65, scope: !10004)
!10009 = !DILocalVariable(name: "do_not_record", scope: !10004, file: !3, line: 574, type: !2948)
!10010 = !DILocation(line: 574, column: 7, scope: !10004)
!10011 = !DILocation(line: 575, column: 20, scope: !10004)
!10012 = !DILocation(line: 575, column: 23, scope: !10004)
!10013 = !DILocation(line: 575, column: 32, scope: !10004)
!10014 = !DILocation(line: 575, column: 10, scope: !10004)
!10015 = !DILocation(line: 575, column: 3, scope: !10004)
!10016 = distinct !DISubprogram(name: "max_slot_level", scope: !3, file: !3, line: 540, type: !7910, scopeLine: 541, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10017 = !DILocation(line: 542, column: 8, scope: !10018)
!10018 = distinct !DILexicalBlock(scope: !10016, file: !3, line: 542, column: 7)
!10019 = !DILocation(line: 542, column: 7, scope: !10016)
!10020 = !DILocation(line: 543, column: 5, scope: !10018)
!10021 = !DILocation(line: 545, column: 10, scope: !10016)
!10022 = !DILocation(line: 545, column: 52, scope: !10016)
!10023 = !DILocation(line: 545, column: 3, scope: !10016)
!10024 = !DILocation(line: 546, column: 1, scope: !10016)
!10025 = distinct !DISubprogram(name: "remove_unused_temp_slot_addresses_1", scope: !3, file: !3, line: 614, type: !10026, scopeLine: 615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10026 = !DISubroutineType(types: !10027)
!10027 = !{!2948, !3398, !3035}
!10028 = !DILocalVariable(name: "slot", arg: 1, scope: !10025, file: !3, line: 614, type: !3398)
!10029 = !DILocation(line: 614, column: 45, scope: !10025)
!10030 = !DILocalVariable(name: "data", arg: 2, scope: !10025, file: !3, line: 614, type: !3035)
!10031 = !DILocation(line: 614, column: 57, scope: !10025)
!10032 = !DILocalVariable(name: "t", scope: !10025, file: !3, line: 616, type: !4337)
!10033 = !DILocation(line: 616, column: 41, scope: !10025)
!10034 = !DILocation(line: 617, column: 49, scope: !10025)
!10035 = !DILocation(line: 617, column: 48, scope: !10025)
!10036 = !DILocation(line: 617, column: 7, scope: !10025)
!10037 = !DILocation(line: 617, column: 5, scope: !10025)
!10038 = !DILocation(line: 618, column: 9, scope: !10039)
!10039 = distinct !DILexicalBlock(scope: !10025, file: !3, line: 618, column: 7)
!10040 = !DILocation(line: 618, column: 12, scope: !10039)
!10041 = !DILocation(line: 618, column: 23, scope: !10039)
!10042 = !DILocation(line: 618, column: 7, scope: !10025)
!10043 = !DILocation(line: 619, column: 6, scope: !10039)
!10044 = !DILocation(line: 619, column: 11, scope: !10039)
!10045 = !DILocation(line: 619, column: 5, scope: !10039)
!10046 = !DILocation(line: 620, column: 3, scope: !10025)
!10047 = distinct !DISubprogram(name: "instantiate_new_reg", scope: !3, file: !3, line: 1294, type: !10048, scopeLine: 1295, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10048 = !DISubroutineType(types: !10049)
!10049 = !{!2924, !2924, !10050}
!10050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3014, size: 64)
!10051 = !DILocalVariable(name: "x", arg: 1, scope: !10047, file: !3, line: 1294, type: !2924)
!10052 = !DILocation(line: 1294, column: 26, scope: !10047)
!10053 = !DILocalVariable(name: "poffset", arg: 2, scope: !10047, file: !3, line: 1294, type: !10050)
!10054 = !DILocation(line: 1294, column: 44, scope: !10047)
!10055 = !DILocalVariable(name: "new_rtx", scope: !10047, file: !3, line: 1296, type: !2924)
!10056 = !DILocation(line: 1296, column: 7, scope: !10047)
!10057 = !DILocalVariable(name: "offset", scope: !10047, file: !3, line: 1297, type: !3014)
!10058 = !DILocation(line: 1297, column: 17, scope: !10047)
!10059 = !DILocation(line: 1299, column: 7, scope: !10060)
!10060 = distinct !DILexicalBlock(scope: !10047, file: !3, line: 1299, column: 7)
!10061 = !DILocation(line: 1299, column: 12, scope: !10060)
!10062 = !DILocation(line: 1299, column: 9, scope: !10060)
!10063 = !DILocation(line: 1299, column: 7, scope: !10047)
!10064 = !DILocation(line: 1301, column: 11, scope: !10065)
!10065 = distinct !DILexicalBlock(scope: !10066, file: !3, line: 1301, column: 11)
!10066 = distinct !DILexicalBlock(scope: !10060, file: !3, line: 1300, column: 5)
!10067 = !DILocation(line: 1301, column: 11, scope: !10066)
!10068 = !DILocation(line: 1305, column: 32, scope: !10069)
!10069 = distinct !DILexicalBlock(scope: !10065, file: !3, line: 1302, column: 9)
!10070 = !DILocation(line: 1305, column: 19, scope: !10069)
!10071 = !DILocation(line: 1306, column: 18, scope: !10069)
!10072 = !DILocation(line: 1307, column: 9, scope: !10069)
!10073 = !DILocation(line: 1309, column: 19, scope: !10065)
!10074 = !DILocation(line: 1309, column: 17, scope: !10065)
!10075 = !DILocation(line: 1309, column: 45, scope: !10065)
!10076 = !DILocation(line: 1309, column: 43, scope: !10065)
!10077 = !DILocation(line: 1310, column: 5, scope: !10066)
!10078 = !DILocation(line: 1311, column: 12, scope: !10079)
!10079 = distinct !DILexicalBlock(scope: !10060, file: !3, line: 1311, column: 12)
!10080 = !DILocation(line: 1311, column: 17, scope: !10079)
!10081 = !DILocation(line: 1311, column: 14, scope: !10079)
!10082 = !DILocation(line: 1311, column: 12, scope: !10060)
!10083 = !DILocation(line: 1312, column: 15, scope: !10079)
!10084 = !DILocation(line: 1312, column: 13, scope: !10079)
!10085 = !DILocation(line: 1312, column: 43, scope: !10079)
!10086 = !DILocation(line: 1312, column: 41, scope: !10079)
!10087 = !DILocation(line: 1312, column: 5, scope: !10079)
!10088 = !DILocation(line: 1313, column: 12, scope: !10089)
!10089 = distinct !DILexicalBlock(scope: !10079, file: !3, line: 1313, column: 12)
!10090 = !DILocation(line: 1313, column: 17, scope: !10089)
!10091 = !DILocation(line: 1313, column: 14, scope: !10089)
!10092 = !DILocation(line: 1313, column: 12, scope: !10079)
!10093 = !DILocation(line: 1314, column: 15, scope: !10089)
!10094 = !DILocation(line: 1314, column: 13, scope: !10089)
!10095 = !DILocation(line: 1314, column: 43, scope: !10089)
!10096 = !DILocation(line: 1314, column: 41, scope: !10089)
!10097 = !DILocation(line: 1314, column: 5, scope: !10089)
!10098 = !DILocation(line: 1315, column: 12, scope: !10099)
!10099 = distinct !DILexicalBlock(scope: !10089, file: !3, line: 1315, column: 12)
!10100 = !DILocation(line: 1315, column: 17, scope: !10099)
!10101 = !DILocation(line: 1315, column: 14, scope: !10099)
!10102 = !DILocation(line: 1315, column: 12, scope: !10089)
!10103 = !DILocation(line: 1316, column: 15, scope: !10099)
!10104 = !DILocation(line: 1316, column: 13, scope: !10099)
!10105 = !DILocation(line: 1316, column: 43, scope: !10099)
!10106 = !DILocation(line: 1316, column: 41, scope: !10099)
!10107 = !DILocation(line: 1316, column: 5, scope: !10099)
!10108 = !DILocation(line: 1317, column: 12, scope: !10109)
!10109 = distinct !DILexicalBlock(scope: !10099, file: !3, line: 1317, column: 12)
!10110 = !DILocation(line: 1317, column: 17, scope: !10109)
!10111 = !DILocation(line: 1317, column: 14, scope: !10109)
!10112 = !DILocation(line: 1317, column: 12, scope: !10099)
!10113 = !DILocation(line: 1322, column: 17, scope: !10114)
!10114 = distinct !DILexicalBlock(scope: !10109, file: !3, line: 1318, column: 5)
!10115 = !DILocation(line: 1322, column: 15, scope: !10114)
!10116 = !DILocation(line: 1324, column: 16, scope: !10114)
!10117 = !DILocation(line: 1324, column: 14, scope: !10114)
!10118 = !DILocation(line: 1325, column: 5, scope: !10114)
!10119 = !DILocation(line: 1327, column: 5, scope: !10109)
!10120 = !DILocation(line: 1329, column: 14, scope: !10047)
!10121 = !DILocation(line: 1329, column: 4, scope: !10047)
!10122 = !DILocation(line: 1329, column: 12, scope: !10047)
!10123 = !DILocation(line: 1330, column: 10, scope: !10047)
!10124 = !DILocation(line: 1330, column: 3, scope: !10047)
!10125 = !DILocation(line: 1331, column: 1, scope: !10047)
!10126 = distinct !DISubprogram(name: "instantiate_virtual_regs_in_insn", scope: !3, file: !3, line: 1408, type: !5619, scopeLine: 1409, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10127 = !DILocalVariable(name: "insn", arg: 1, scope: !10126, file: !3, line: 1408, type: !2924)
!10128 = !DILocation(line: 1408, column: 39, scope: !10126)
!10129 = !DILocalVariable(name: "offset", scope: !10126, file: !3, line: 1410, type: !3014)
!10130 = !DILocation(line: 1410, column: 17, scope: !10126)
!10131 = !DILocalVariable(name: "insn_code", scope: !10126, file: !3, line: 1411, type: !2948)
!10132 = !DILocation(line: 1411, column: 7, scope: !10126)
!10133 = !DILocalVariable(name: "i", scope: !10126, file: !3, line: 1411, type: !2948)
!10134 = !DILocation(line: 1411, column: 18, scope: !10126)
!10135 = !DILocalVariable(name: "any_change", scope: !10126, file: !3, line: 1412, type: !3158)
!10136 = !DILocation(line: 1412, column: 8, scope: !10126)
!10137 = !DILocalVariable(name: "set", scope: !10126, file: !3, line: 1413, type: !2924)
!10138 = !DILocation(line: 1413, column: 7, scope: !10126)
!10139 = !DILocalVariable(name: "new_rtx", scope: !10126, file: !3, line: 1413, type: !2924)
!10140 = !DILocation(line: 1413, column: 12, scope: !10126)
!10141 = !DILocalVariable(name: "x", scope: !10126, file: !3, line: 1413, type: !2924)
!10142 = !DILocation(line: 1413, column: 21, scope: !10126)
!10143 = !DILocalVariable(name: "seq", scope: !10126, file: !3, line: 1413, type: !2924)
!10144 = !DILocation(line: 1413, column: 24, scope: !10126)
!10145 = !DILocation(line: 1416, column: 9, scope: !10126)
!10146 = !DILocation(line: 1416, column: 7, scope: !10126)
!10147 = !DILocation(line: 1417, column: 7, scope: !10148)
!10148 = distinct !DILexicalBlock(scope: !10126, file: !3, line: 1417, column: 7)
!10149 = !DILocation(line: 1417, column: 7, scope: !10126)
!10150 = !DILocation(line: 1423, column: 38, scope: !10151)
!10151 = distinct !DILexicalBlock(scope: !10148, file: !3, line: 1418, column: 5)
!10152 = !DILocation(line: 1423, column: 17, scope: !10151)
!10153 = !DILocation(line: 1423, column: 15, scope: !10151)
!10154 = !DILocation(line: 1424, column: 11, scope: !10155)
!10155 = distinct !DILexicalBlock(scope: !10151, file: !3, line: 1424, column: 11)
!10156 = !DILocation(line: 1424, column: 11, scope: !10151)
!10157 = !DILocation(line: 1426, column: 4, scope: !10158)
!10158 = distinct !DILexicalBlock(scope: !10155, file: !3, line: 1425, column: 2)
!10159 = !DILocation(line: 1428, column: 19, scope: !10158)
!10160 = !DILocation(line: 1428, column: 4, scope: !10158)
!10161 = !DILocation(line: 1429, column: 35, scope: !10158)
!10162 = !DILocation(line: 1429, column: 55, scope: !10158)
!10163 = !DILocation(line: 1430, column: 8, scope: !10158)
!10164 = !DILocation(line: 1429, column: 8, scope: !10158)
!10165 = !DILocation(line: 1429, column: 6, scope: !10158)
!10166 = !DILocation(line: 1431, column: 23, scope: !10158)
!10167 = !DILocation(line: 1431, column: 26, scope: !10158)
!10168 = !DILocation(line: 1431, column: 8, scope: !10158)
!10169 = !DILocation(line: 1431, column: 6, scope: !10158)
!10170 = !DILocation(line: 1432, column: 8, scope: !10171)
!10171 = distinct !DILexicalBlock(scope: !10158, file: !3, line: 1432, column: 8)
!10172 = !DILocation(line: 1432, column: 13, scope: !10171)
!10173 = !DILocation(line: 1432, column: 10, scope: !10171)
!10174 = !DILocation(line: 1432, column: 8, scope: !10158)
!10175 = !DILocation(line: 1433, column: 22, scope: !10171)
!10176 = !DILocation(line: 1433, column: 31, scope: !10171)
!10177 = !DILocation(line: 1433, column: 6, scope: !10171)
!10178 = !DILocation(line: 1435, column: 10, scope: !10158)
!10179 = !DILocation(line: 1435, column: 8, scope: !10158)
!10180 = !DILocation(line: 1436, column: 4, scope: !10158)
!10181 = !DILocation(line: 1438, column: 22, scope: !10158)
!10182 = !DILocation(line: 1438, column: 27, scope: !10158)
!10183 = !DILocation(line: 1438, column: 4, scope: !10158)
!10184 = !DILocation(line: 1439, column: 17, scope: !10158)
!10185 = !DILocation(line: 1439, column: 4, scope: !10158)
!10186 = !DILocation(line: 1440, column: 4, scope: !10158)
!10187 = !DILocation(line: 1447, column: 38, scope: !10151)
!10188 = !DILocation(line: 1447, column: 17, scope: !10151)
!10189 = !DILocation(line: 1447, column: 15, scope: !10151)
!10190 = !DILocation(line: 1448, column: 11, scope: !10191)
!10191 = distinct !DILexicalBlock(scope: !10151, file: !3, line: 1448, column: 11)
!10192 = !DILocation(line: 1448, column: 19, scope: !10191)
!10193 = !DILocation(line: 1448, column: 22, scope: !10191)
!10194 = !DILocation(line: 1448, column: 29, scope: !10191)
!10195 = !DILocation(line: 1449, column: 4, scope: !10191)
!10196 = !DILocation(line: 1449, column: 7, scope: !10191)
!10197 = !DILocation(line: 1450, column: 4, scope: !10191)
!10198 = !DILocation(line: 1450, column: 7, scope: !10191)
!10199 = !DILocation(line: 1450, column: 30, scope: !10191)
!10200 = !DILocation(line: 1448, column: 11, scope: !10151)
!10201 = !DILocation(line: 1452, column: 4, scope: !10202)
!10202 = distinct !DILexicalBlock(scope: !10191, file: !3, line: 1451, column: 2)
!10203 = !DILocation(line: 1454, column: 29, scope: !10202)
!10204 = !DILocation(line: 1455, column: 8, scope: !10202)
!10205 = !DILocation(line: 1455, column: 17, scope: !10202)
!10206 = !DILocation(line: 1455, column: 35, scope: !10202)
!10207 = !DILocation(line: 1454, column: 8, scope: !10202)
!10208 = !DILocation(line: 1454, column: 6, scope: !10202)
!10209 = !DILocation(line: 1457, column: 8, scope: !10210)
!10210 = distinct !DILexicalBlock(scope: !10202, file: !3, line: 1457, column: 8)
!10211 = !DILocation(line: 1457, column: 13, scope: !10210)
!10212 = !DILocation(line: 1457, column: 10, scope: !10210)
!10213 = !DILocation(line: 1457, column: 8, scope: !10202)
!10214 = !DILocation(line: 1458, column: 22, scope: !10210)
!10215 = !DILocation(line: 1458, column: 38, scope: !10210)
!10216 = !DILocation(line: 1458, column: 6, scope: !10210)
!10217 = !DILocation(line: 1460, column: 10, scope: !10202)
!10218 = !DILocation(line: 1460, column: 8, scope: !10202)
!10219 = !DILocation(line: 1461, column: 4, scope: !10202)
!10220 = !DILocation(line: 1463, column: 22, scope: !10202)
!10221 = !DILocation(line: 1463, column: 27, scope: !10202)
!10222 = !DILocation(line: 1463, column: 4, scope: !10202)
!10223 = !DILocation(line: 1464, column: 17, scope: !10202)
!10224 = !DILocation(line: 1464, column: 4, scope: !10202)
!10225 = !DILocation(line: 1465, column: 4, scope: !10202)
!10226 = !DILocation(line: 1468, column: 21, scope: !10151)
!10227 = !DILocation(line: 1468, column: 7, scope: !10151)
!10228 = !DILocation(line: 1469, column: 19, scope: !10151)
!10229 = !DILocation(line: 1469, column: 17, scope: !10151)
!10230 = !DILocation(line: 1473, column: 11, scope: !10231)
!10231 = distinct !DILexicalBlock(scope: !10151, file: !3, line: 1473, column: 11)
!10232 = !DILocation(line: 1473, column: 36, scope: !10231)
!10233 = !DILocation(line: 1474, column: 4, scope: !10231)
!10234 = !DILocation(line: 1474, column: 18, scope: !10231)
!10235 = !DILocation(line: 1474, column: 7, scope: !10231)
!10236 = !DILocation(line: 1474, column: 29, scope: !10231)
!10237 = !DILocation(line: 1475, column: 4, scope: !10231)
!10238 = !DILocation(line: 1475, column: 7, scope: !10231)
!10239 = !DILocation(line: 1475, column: 37, scope: !10231)
!10240 = !DILocation(line: 1475, column: 33, scope: !10231)
!10241 = !DILocation(line: 1476, column: 4, scope: !10231)
!10242 = !DILocation(line: 1476, column: 7, scope: !10231)
!10243 = !DILocation(line: 1476, column: 37, scope: !10231)
!10244 = !DILocation(line: 1476, column: 33, scope: !10231)
!10245 = !DILocation(line: 1477, column: 4, scope: !10231)
!10246 = !DILocation(line: 1477, column: 7, scope: !10231)
!10247 = !DILocation(line: 1478, column: 4, scope: !10231)
!10248 = !DILocation(line: 1478, column: 39, scope: !10231)
!10249 = !DILocation(line: 1478, column: 18, scope: !10231)
!10250 = !DILocation(line: 1478, column: 16, scope: !10231)
!10251 = !DILocation(line: 1473, column: 11, scope: !10151)
!10252 = !DILocation(line: 1480, column: 14, scope: !10253)
!10253 = distinct !DILexicalBlock(scope: !10231, file: !3, line: 1479, column: 2)
!10254 = !DILocation(line: 1480, column: 11, scope: !10253)
!10255 = !DILocation(line: 1483, column: 8, scope: !10256)
!10256 = distinct !DILexicalBlock(scope: !10253, file: !3, line: 1483, column: 8)
!10257 = !DILocation(line: 1483, column: 15, scope: !10256)
!10258 = !DILocation(line: 1484, column: 8, scope: !10256)
!10259 = !DILocation(line: 1484, column: 11, scope: !10256)
!10260 = !DILocation(line: 1485, column: 8, scope: !10256)
!10261 = !DILocation(line: 1485, column: 11, scope: !10256)
!10262 = !DILocation(line: 1485, column: 34, scope: !10256)
!10263 = !DILocation(line: 1483, column: 8, scope: !10253)
!10264 = !DILocation(line: 1487, column: 8, scope: !10265)
!10265 = distinct !DILexicalBlock(scope: !10256, file: !3, line: 1486, column: 6)
!10266 = !DILocation(line: 1488, column: 24, scope: !10265)
!10267 = !DILocation(line: 1488, column: 40, scope: !10265)
!10268 = !DILocation(line: 1488, column: 8, scope: !10265)
!10269 = !DILocation(line: 1489, column: 14, scope: !10265)
!10270 = !DILocation(line: 1489, column: 12, scope: !10265)
!10271 = !DILocation(line: 1490, column: 8, scope: !10265)
!10272 = !DILocation(line: 1492, column: 26, scope: !10265)
!10273 = !DILocation(line: 1492, column: 31, scope: !10265)
!10274 = !DILocation(line: 1492, column: 8, scope: !10265)
!10275 = !DILocation(line: 1493, column: 21, scope: !10265)
!10276 = !DILocation(line: 1493, column: 8, scope: !10265)
!10277 = !DILocation(line: 1494, column: 8, scope: !10265)
!10278 = !DILocation(line: 1497, column: 22, scope: !10253)
!10279 = !DILocation(line: 1497, column: 30, scope: !10253)
!10280 = !DILocation(line: 1497, column: 8, scope: !10253)
!10281 = !DILocation(line: 1497, column: 6, scope: !10253)
!10282 = !DILocation(line: 1502, column: 29, scope: !10283)
!10283 = distinct !DILexicalBlock(scope: !10253, file: !3, line: 1502, column: 8)
!10284 = !DILocation(line: 1502, column: 43, scope: !10283)
!10285 = !DILocation(line: 1502, column: 8, scope: !10283)
!10286 = !DILocation(line: 1503, column: 8, scope: !10283)
!10287 = !DILocation(line: 1503, column: 32, scope: !10283)
!10288 = !DILocation(line: 1503, column: 46, scope: !10283)
!10289 = !DILocation(line: 1503, column: 11, scope: !10283)
!10290 = !DILocation(line: 1502, column: 8, scope: !10253)
!10291 = !DILocation(line: 1505, column: 61, scope: !10292)
!10292 = distinct !DILexicalBlock(scope: !10283, file: !3, line: 1504, column: 6)
!10293 = !DILocation(line: 1505, column: 59, scope: !10292)
!10294 = !DILocation(line: 1505, column: 9, scope: !10292)
!10295 = !DILocation(line: 1505, column: 35, scope: !10292)
!10296 = !DILocation(line: 1506, column: 61, scope: !10292)
!10297 = !DILocation(line: 1506, column: 59, scope: !10292)
!10298 = !DILocation(line: 1506, column: 9, scope: !10292)
!10299 = !DILocation(line: 1506, column: 35, scope: !10292)
!10300 = !DILocation(line: 1507, column: 19, scope: !10292)
!10301 = !DILocation(line: 1511, column: 6, scope: !10292)
!10302 = !DILocation(line: 1512, column: 2, scope: !10253)
!10303 = !DILocation(line: 1513, column: 5, scope: !10151)
!10304 = !DILocation(line: 1516, column: 21, scope: !10305)
!10305 = distinct !DILexicalBlock(scope: !10148, file: !3, line: 1515, column: 5)
!10306 = !DILocation(line: 1516, column: 7, scope: !10305)
!10307 = !DILocation(line: 1517, column: 19, scope: !10305)
!10308 = !DILocation(line: 1517, column: 17, scope: !10305)
!10309 = !DILocation(line: 1522, column: 10, scope: !10310)
!10310 = distinct !DILexicalBlock(scope: !10126, file: !3, line: 1522, column: 3)
!10311 = !DILocation(line: 1522, column: 8, scope: !10310)
!10312 = !DILocation(line: 1522, column: 15, scope: !10313)
!10313 = distinct !DILexicalBlock(scope: !10310, file: !3, line: 1522, column: 3)
!10314 = !DILocation(line: 1522, column: 30, scope: !10313)
!10315 = !DILocation(line: 1522, column: 19, scope: !10313)
!10316 = !DILocation(line: 1522, column: 17, scope: !10313)
!10317 = !DILocation(line: 1522, column: 3, scope: !10310)
!10318 = !DILocation(line: 1524, column: 30, scope: !10319)
!10319 = distinct !DILexicalBlock(scope: !10313, file: !3, line: 1523, column: 5)
!10320 = !DILocation(line: 1524, column: 11, scope: !10319)
!10321 = !DILocation(line: 1524, column: 9, scope: !10319)
!10322 = !DILocation(line: 1525, column: 15, scope: !10319)
!10323 = !DILocation(line: 1525, column: 7, scope: !10319)
!10324 = !DILocalVariable(name: "addr", scope: !10325, file: !3, line: 1529, type: !2924)
!10325 = distinct !DILexicalBlock(scope: !10326, file: !3, line: 1528, column: 4)
!10326 = distinct !DILexicalBlock(scope: !10319, file: !3, line: 1526, column: 2)
!10327 = !DILocation(line: 1529, column: 10, scope: !10325)
!10328 = !DILocation(line: 1529, column: 17, scope: !10325)
!10329 = !DILocalVariable(name: "changed", scope: !10325, file: !3, line: 1530, type: !3158)
!10330 = !DILocation(line: 1530, column: 11, scope: !10325)
!10331 = !DILocation(line: 1532, column: 6, scope: !10325)
!10332 = !DILocation(line: 1533, column: 11, scope: !10333)
!10333 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 1533, column: 10)
!10334 = !DILocation(line: 1533, column: 10, scope: !10325)
!10335 = !DILocation(line: 1534, column: 8, scope: !10333)
!10336 = !DILocation(line: 1536, column: 6, scope: !10325)
!10337 = !DILocation(line: 1537, column: 33, scope: !10325)
!10338 = !DILocation(line: 1537, column: 36, scope: !10325)
!10339 = !DILocation(line: 1537, column: 10, scope: !10325)
!10340 = !DILocation(line: 1537, column: 8, scope: !10325)
!10341 = !DILocation(line: 1547, column: 32, scope: !10342)
!10342 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 1547, column: 10)
!10343 = !DILocation(line: 1547, column: 43, scope: !10342)
!10344 = !DILocation(line: 1547, column: 46, scope: !10342)
!10345 = !DILocation(line: 1547, column: 11, scope: !10342)
!10346 = !DILocation(line: 1547, column: 10, scope: !10325)
!10347 = !DILocation(line: 1549, column: 21, scope: !10348)
!10348 = distinct !DILexicalBlock(scope: !10342, file: !3, line: 1548, column: 8)
!10349 = !DILocation(line: 1549, column: 38, scope: !10348)
!10350 = !DILocation(line: 1549, column: 10, scope: !10348)
!10351 = !DILocation(line: 1549, column: 8, scope: !10348)
!10352 = !DILocation(line: 1550, column: 30, scope: !10348)
!10353 = !DILocation(line: 1550, column: 33, scope: !10348)
!10354 = !DILocation(line: 1550, column: 7, scope: !10348)
!10355 = !DILocation(line: 1550, column: 5, scope: !10348)
!10356 = !DILocation(line: 1551, column: 8, scope: !10348)
!10357 = !DILocation(line: 1552, column: 12, scope: !10325)
!10358 = !DILocation(line: 1552, column: 10, scope: !10325)
!10359 = !DILocation(line: 1553, column: 6, scope: !10325)
!10360 = !DILocation(line: 1554, column: 10, scope: !10361)
!10361 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 1554, column: 10)
!10362 = !DILocation(line: 1554, column: 10, scope: !10325)
!10363 = !DILocation(line: 1555, column: 26, scope: !10361)
!10364 = !DILocation(line: 1555, column: 31, scope: !10361)
!10365 = !DILocation(line: 1555, column: 8, scope: !10361)
!10366 = !DILocation(line: 1557, column: 4, scope: !10326)
!10367 = !DILocation(line: 1560, column: 35, scope: !10326)
!10368 = !DILocation(line: 1560, column: 14, scope: !10326)
!10369 = !DILocation(line: 1560, column: 12, scope: !10326)
!10370 = !DILocation(line: 1561, column: 8, scope: !10371)
!10371 = distinct !DILexicalBlock(scope: !10326, file: !3, line: 1561, column: 8)
!10372 = !DILocation(line: 1561, column: 16, scope: !10371)
!10373 = !DILocation(line: 1561, column: 8, scope: !10326)
!10374 = !DILocation(line: 1562, column: 6, scope: !10371)
!10375 = !DILocation(line: 1563, column: 8, scope: !10376)
!10376 = distinct !DILexicalBlock(scope: !10326, file: !3, line: 1563, column: 8)
!10377 = !DILocation(line: 1563, column: 15, scope: !10376)
!10378 = !DILocation(line: 1563, column: 8, scope: !10326)
!10379 = !DILocation(line: 1564, column: 10, scope: !10376)
!10380 = !DILocation(line: 1564, column: 8, scope: !10376)
!10381 = !DILocation(line: 1564, column: 6, scope: !10376)
!10382 = !DILocation(line: 1567, column: 8, scope: !10383)
!10383 = distinct !DILexicalBlock(scope: !10376, file: !3, line: 1566, column: 6)
!10384 = !DILocation(line: 1575, column: 33, scope: !10383)
!10385 = !DILocation(line: 1575, column: 53, scope: !10383)
!10386 = !DILocation(line: 1576, column: 12, scope: !10383)
!10387 = !DILocation(line: 1575, column: 12, scope: !10383)
!10388 = !DILocation(line: 1575, column: 10, scope: !10383)
!10389 = !DILocation(line: 1578, column: 14, scope: !10383)
!10390 = !DILocation(line: 1578, column: 12, scope: !10383)
!10391 = !DILocation(line: 1579, column: 8, scope: !10383)
!10392 = !DILocation(line: 1580, column: 26, scope: !10383)
!10393 = !DILocation(line: 1580, column: 31, scope: !10383)
!10394 = !DILocation(line: 1580, column: 8, scope: !10383)
!10395 = !DILocation(line: 1582, column: 4, scope: !10326)
!10396 = !DILocation(line: 1585, column: 35, scope: !10326)
!10397 = !DILocation(line: 1585, column: 14, scope: !10326)
!10398 = !DILocation(line: 1585, column: 12, scope: !10326)
!10399 = !DILocation(line: 1586, column: 8, scope: !10400)
!10400 = distinct !DILexicalBlock(scope: !10326, file: !3, line: 1586, column: 8)
!10401 = !DILocation(line: 1586, column: 16, scope: !10400)
!10402 = !DILocation(line: 1586, column: 8, scope: !10326)
!10403 = !DILocation(line: 1587, column: 6, scope: !10400)
!10404 = !DILocation(line: 1588, column: 8, scope: !10405)
!10405 = distinct !DILexicalBlock(scope: !10326, file: !3, line: 1588, column: 8)
!10406 = !DILocation(line: 1588, column: 15, scope: !10405)
!10407 = !DILocation(line: 1588, column: 8, scope: !10326)
!10408 = !DILocation(line: 1590, column: 8, scope: !10409)
!10409 = distinct !DILexicalBlock(scope: !10405, file: !3, line: 1589, column: 6)
!10410 = !DILocation(line: 1591, column: 39, scope: !10409)
!10411 = !DILocation(line: 1591, column: 65, scope: !10409)
!10412 = !DILocation(line: 1592, column: 7, scope: !10409)
!10413 = !DILocation(line: 1591, column: 18, scope: !10409)
!10414 = !DILocation(line: 1591, column: 16, scope: !10409)
!10415 = !DILocation(line: 1594, column: 14, scope: !10409)
!10416 = !DILocation(line: 1594, column: 12, scope: !10409)
!10417 = !DILocation(line: 1595, column: 8, scope: !10409)
!10418 = !DILocation(line: 1596, column: 26, scope: !10409)
!10419 = !DILocation(line: 1596, column: 31, scope: !10409)
!10420 = !DILocation(line: 1596, column: 8, scope: !10409)
!10421 = !DILocation(line: 1597, column: 6, scope: !10409)
!10422 = !DILocation(line: 1598, column: 53, scope: !10326)
!10423 = !DILocation(line: 1598, column: 29, scope: !10326)
!10424 = !DILocation(line: 1598, column: 57, scope: !10326)
!10425 = !DILocation(line: 1599, column: 8, scope: !10326)
!10426 = !DILocation(line: 1599, column: 28, scope: !10326)
!10427 = !DILocation(line: 1598, column: 8, scope: !10326)
!10428 = !DILocation(line: 1598, column: 6, scope: !10326)
!10429 = !DILocation(line: 1600, column: 4, scope: !10326)
!10430 = !DILocation(line: 1601, column: 4, scope: !10326)
!10431 = !DILocation(line: 1604, column: 4, scope: !10326)
!10432 = !DILocation(line: 1610, column: 33, scope: !10433)
!10433 = distinct !DILexicalBlock(scope: !10319, file: !3, line: 1610, column: 11)
!10434 = !DILocation(line: 1610, column: 44, scope: !10433)
!10435 = !DILocation(line: 1610, column: 47, scope: !10433)
!10436 = !DILocation(line: 1610, column: 12, scope: !10433)
!10437 = !DILocation(line: 1610, column: 11, scope: !10319)
!10438 = !DILocation(line: 1612, column: 4, scope: !10439)
!10439 = distinct !DILexicalBlock(scope: !10433, file: !3, line: 1611, column: 2)
!10440 = !DILocation(line: 1613, column: 8, scope: !10441)
!10441 = distinct !DILexicalBlock(scope: !10439, file: !3, line: 1613, column: 8)
!10442 = !DILocation(line: 1613, column: 8, scope: !10439)
!10443 = !DILocation(line: 1615, column: 8, scope: !10444)
!10444 = distinct !DILexicalBlock(scope: !10441, file: !3, line: 1614, column: 6)
!10445 = !DILocation(line: 1616, column: 25, scope: !10444)
!10446 = !DILocation(line: 1616, column: 12, scope: !10444)
!10447 = !DILocation(line: 1616, column: 10, scope: !10444)
!10448 = !DILocation(line: 1617, column: 6, scope: !10444)
!10449 = !DILocation(line: 1619, column: 31, scope: !10441)
!10450 = !DILocation(line: 1619, column: 21, scope: !10441)
!10451 = !DILocation(line: 1619, column: 42, scope: !10441)
!10452 = !DILocation(line: 1619, column: 50, scope: !10441)
!10453 = !DILocation(line: 1619, column: 53, scope: !10441)
!10454 = !DILocation(line: 1619, column: 59, scope: !10441)
!10455 = !DILocation(line: 1619, column: 10, scope: !10441)
!10456 = !DILocation(line: 1619, column: 8, scope: !10441)
!10457 = !DILocation(line: 1620, column: 10, scope: !10439)
!10458 = !DILocation(line: 1620, column: 8, scope: !10439)
!10459 = !DILocation(line: 1621, column: 4, scope: !10439)
!10460 = !DILocation(line: 1622, column: 8, scope: !10461)
!10461 = distinct !DILexicalBlock(scope: !10439, file: !3, line: 1622, column: 8)
!10462 = !DILocation(line: 1622, column: 8, scope: !10439)
!10463 = !DILocation(line: 1623, column: 24, scope: !10461)
!10464 = !DILocation(line: 1623, column: 29, scope: !10461)
!10465 = !DILocation(line: 1623, column: 6, scope: !10461)
!10466 = !DILocation(line: 1624, column: 2, scope: !10439)
!10467 = !DILocation(line: 1626, column: 60, scope: !10319)
!10468 = !DILocation(line: 1626, column: 55, scope: !10319)
!10469 = !DILocation(line: 1626, column: 36, scope: !10319)
!10470 = !DILocation(line: 1626, column: 58, scope: !10319)
!10471 = !DILocation(line: 1626, column: 31, scope: !10319)
!10472 = !DILocation(line: 1626, column: 8, scope: !10319)
!10473 = !DILocation(line: 1626, column: 34, scope: !10319)
!10474 = !DILocation(line: 1627, column: 18, scope: !10319)
!10475 = !DILocation(line: 1628, column: 5, scope: !10319)
!10476 = !DILocation(line: 1522, column: 42, scope: !10313)
!10477 = !DILocation(line: 1522, column: 3, scope: !10313)
!10478 = distinct !{!10478, !10317, !10479}
!10479 = !DILocation(line: 1628, column: 5, scope: !10310)
!10480 = !DILocation(line: 1630, column: 7, scope: !10481)
!10481 = distinct !DILexicalBlock(scope: !10126, file: !3, line: 1630, column: 7)
!10482 = !DILocation(line: 1630, column: 7, scope: !10126)
!10483 = !DILocation(line: 1633, column: 14, scope: !10484)
!10484 = distinct !DILexicalBlock(scope: !10485, file: !3, line: 1633, column: 7)
!10485 = distinct !DILexicalBlock(scope: !10481, file: !3, line: 1631, column: 5)
!10486 = !DILocation(line: 1633, column: 12, scope: !10484)
!10487 = !DILocation(line: 1633, column: 19, scope: !10488)
!10488 = distinct !DILexicalBlock(scope: !10484, file: !3, line: 1633, column: 7)
!10489 = !DILocation(line: 1633, column: 34, scope: !10488)
!10490 = !DILocation(line: 1633, column: 23, scope: !10488)
!10491 = !DILocation(line: 1633, column: 21, scope: !10488)
!10492 = !DILocation(line: 1633, column: 7, scope: !10484)
!10493 = !DILocation(line: 1635, column: 64, scope: !10488)
!10494 = !DILocation(line: 1635, column: 45, scope: !10488)
!10495 = !DILocation(line: 1635, column: 35, scope: !10488)
!10496 = !DILocation(line: 1635, column: 16, scope: !10488)
!10497 = !DILocation(line: 1635, column: 6, scope: !10488)
!10498 = !DILocation(line: 1634, column: 22, scope: !10488)
!10499 = !DILocation(line: 1634, column: 3, scope: !10488)
!10500 = !DILocation(line: 1635, column: 4, scope: !10488)
!10501 = !DILocation(line: 1634, column: 2, scope: !10488)
!10502 = !DILocation(line: 1633, column: 42, scope: !10488)
!10503 = !DILocation(line: 1633, column: 7, scope: !10488)
!10504 = distinct !{!10504, !10492, !10505}
!10505 = !DILocation(line: 1635, column: 67, scope: !10484)
!10506 = !DILocation(line: 1638, column: 7, scope: !10485)
!10507 = !DILocation(line: 1638, column: 24, scope: !10485)
!10508 = !DILocation(line: 1639, column: 5, scope: !10485)
!10509 = !DILocation(line: 1641, column: 22, scope: !10510)
!10510 = distinct !DILexicalBlock(scope: !10126, file: !3, line: 1641, column: 7)
!10511 = !DILocation(line: 1641, column: 7, scope: !10510)
!10512 = !DILocation(line: 1641, column: 38, scope: !10510)
!10513 = !DILocation(line: 1641, column: 7, scope: !10126)
!10514 = !DILocation(line: 1643, column: 32, scope: !10515)
!10515 = distinct !DILexicalBlock(scope: !10516, file: !3, line: 1643, column: 11)
!10516 = distinct !DILexicalBlock(scope: !10510, file: !3, line: 1642, column: 5)
!10517 = !DILocation(line: 1643, column: 12, scope: !10515)
!10518 = !DILocation(line: 1643, column: 11, scope: !10516)
!10519 = !DILocation(line: 1645, column: 19, scope: !10520)
!10520 = distinct !DILexicalBlock(scope: !10515, file: !3, line: 1644, column: 2)
!10521 = !DILocation(line: 1645, column: 4, scope: !10520)
!10522 = !DILocation(line: 1646, column: 17, scope: !10520)
!10523 = !DILocation(line: 1646, column: 4, scope: !10520)
!10524 = !DILocation(line: 1647, column: 2, scope: !10520)
!10525 = !DILocation(line: 1648, column: 5, scope: !10516)
!10526 = !DILocation(line: 1651, column: 27, scope: !10527)
!10527 = distinct !DILexicalBlock(scope: !10528, file: !3, line: 1651, column: 11)
!10528 = distinct !DILexicalBlock(scope: !10510, file: !3, line: 1650, column: 5)
!10529 = !DILocation(line: 1651, column: 11, scope: !10527)
!10530 = !DILocation(line: 1651, column: 33, scope: !10527)
!10531 = !DILocation(line: 1651, column: 11, scope: !10528)
!10532 = !DILocation(line: 1652, column: 2, scope: !10527)
!10533 = !DILocation(line: 1654, column: 1, scope: !10126)
!10534 = distinct !DISubprogram(name: "instantiate_decls", scope: !3, file: !3, line: 1734, type: !7594, scopeLine: 1735, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10535 = !DILocalVariable(name: "fndecl", arg: 1, scope: !10534, file: !3, line: 1734, type: !3045)
!10536 = !DILocation(line: 1734, column: 25, scope: !10534)
!10537 = !DILocalVariable(name: "decl", scope: !10534, file: !3, line: 1736, type: !3045)
!10538 = !DILocation(line: 1736, column: 8, scope: !10534)
!10539 = !DILocalVariable(name: "t", scope: !10534, file: !3, line: 1736, type: !3045)
!10540 = !DILocation(line: 1736, column: 14, scope: !10534)
!10541 = !DILocalVariable(name: "next", scope: !10534, file: !3, line: 1736, type: !3045)
!10542 = !DILocation(line: 1736, column: 17, scope: !10534)
!10543 = !DILocation(line: 1739, column: 15, scope: !10544)
!10544 = distinct !DILexicalBlock(scope: !10534, file: !3, line: 1739, column: 3)
!10545 = !DILocation(line: 1739, column: 13, scope: !10544)
!10546 = !DILocation(line: 1739, column: 8, scope: !10544)
!10547 = !DILocation(line: 1739, column: 40, scope: !10548)
!10548 = distinct !DILexicalBlock(scope: !10544, file: !3, line: 1739, column: 3)
!10549 = !DILocation(line: 1739, column: 3, scope: !10544)
!10550 = !DILocation(line: 1741, column: 29, scope: !10551)
!10551 = distinct !DILexicalBlock(scope: !10548, file: !3, line: 1740, column: 5)
!10552 = !DILocation(line: 1741, column: 7, scope: !10551)
!10553 = !DILocation(line: 1742, column: 29, scope: !10551)
!10554 = !DILocation(line: 1742, column: 7, scope: !10551)
!10555 = !DILocation(line: 1743, column: 11, scope: !10556)
!10556 = distinct !DILexicalBlock(scope: !10551, file: !3, line: 1743, column: 11)
!10557 = !DILocation(line: 1743, column: 11, scope: !10551)
!10558 = !DILocalVariable(name: "v", scope: !10559, file: !3, line: 1745, type: !3045)
!10559 = distinct !DILexicalBlock(scope: !10556, file: !3, line: 1744, column: 2)
!10560 = !DILocation(line: 1745, column: 9, scope: !10559)
!10561 = !DILocation(line: 1745, column: 13, scope: !10559)
!10562 = !DILocation(line: 1746, column: 4, scope: !10559)
!10563 = !DILocation(line: 1747, column: 2, scope: !10559)
!10564 = !DILocation(line: 1748, column: 5, scope: !10551)
!10565 = !DILocation(line: 1739, column: 53, scope: !10548)
!10566 = !DILocation(line: 1739, column: 51, scope: !10548)
!10567 = !DILocation(line: 1739, column: 3, scope: !10548)
!10568 = distinct !{!10568, !10549, !10569}
!10569 = !DILocation(line: 1748, column: 5, scope: !10544)
!10570 = !DILocation(line: 1751, column: 24, scope: !10534)
!10571 = !DILocation(line: 1751, column: 3, scope: !10534)
!10572 = !DILocation(line: 1753, column: 7, scope: !10534)
!10573 = !DILocation(line: 1753, column: 13, scope: !10534)
!10574 = !DILocation(line: 1753, column: 5, scope: !10534)
!10575 = !DILocation(line: 1754, column: 3, scope: !10534)
!10576 = !DILocation(line: 1754, column: 9, scope: !10534)
!10577 = !DILocation(line: 1754, column: 21, scope: !10534)
!10578 = !DILocation(line: 1755, column: 3, scope: !10534)
!10579 = !DILocation(line: 1755, column: 10, scope: !10580)
!10580 = distinct !DILexicalBlock(scope: !10581, file: !3, line: 1755, column: 3)
!10581 = distinct !DILexicalBlock(scope: !10534, file: !3, line: 1755, column: 3)
!10582 = !DILocation(line: 1755, column: 3, scope: !10581)
!10583 = !DILocation(line: 1757, column: 14, scope: !10584)
!10584 = distinct !DILexicalBlock(scope: !10580, file: !3, line: 1756, column: 5)
!10585 = !DILocation(line: 1757, column: 12, scope: !10584)
!10586 = !DILocation(line: 1758, column: 14, scope: !10584)
!10587 = !DILocation(line: 1758, column: 12, scope: !10584)
!10588 = !DILocation(line: 1759, column: 11, scope: !10589)
!10589 = distinct !DILexicalBlock(scope: !10584, file: !3, line: 1759, column: 11)
!10590 = !DILocation(line: 1759, column: 11, scope: !10584)
!10591 = !DILocation(line: 1760, column: 24, scope: !10589)
!10592 = !DILocation(line: 1760, column: 2, scope: !10589)
!10593 = !DILocation(line: 1761, column: 17, scope: !10584)
!10594 = !DILocation(line: 1761, column: 7, scope: !10584)
!10595 = !DILocation(line: 1762, column: 5, scope: !10584)
!10596 = !DILocation(line: 1755, column: 17, scope: !10580)
!10597 = !DILocation(line: 1755, column: 15, scope: !10580)
!10598 = !DILocation(line: 1755, column: 3, scope: !10580)
!10599 = distinct !{!10599, !10582, !10600}
!10600 = !DILocation(line: 1762, column: 5, scope: !10581)
!10601 = !DILocation(line: 1763, column: 1, scope: !10534)
!10602 = distinct !DISubprogram(name: "safe_insn_predicate", scope: !3, file: !3, line: 1390, type: !10603, scopeLine: 1391, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10603 = !DISubroutineType(types: !10604)
!10604 = !{!2948, !2948, !2948, !2924}
!10605 = !DILocalVariable(name: "code", arg: 1, scope: !10602, file: !3, line: 1390, type: !2948)
!10606 = !DILocation(line: 1390, column: 26, scope: !10602)
!10607 = !DILocalVariable(name: "operand", arg: 2, scope: !10602, file: !3, line: 1390, type: !2948)
!10608 = !DILocation(line: 1390, column: 36, scope: !10602)
!10609 = !DILocalVariable(name: "x", arg: 3, scope: !10602, file: !3, line: 1390, type: !2924)
!10610 = !DILocation(line: 1390, column: 49, scope: !10602)
!10611 = !DILocalVariable(name: "op_data", scope: !10602, file: !3, line: 1392, type: !10612)
!10612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10613, size: 64)
!10613 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10614)
!10614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "insn_operand_data", file: !10615, line: 253, size: 192, elements: !10616)
!10615 = !DIFile(filename: "./recog.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!10616 = !{!10617, !10623, !10625, !10627, !10628}
!10617 = !DIDerivedType(tag: DW_TAG_member, name: "predicate", scope: !10614, file: !10615, line: 255, baseType: !10618, size: 64)
!10618 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10619)
!10619 = !DIDerivedType(tag: DW_TAG_typedef, name: "insn_operand_predicate_fn", file: !10615, line: 249, baseType: !10620)
!10620 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10621, size: 64)
!10621 = !DISubroutineType(types: !10622)
!10622 = !{!2948, !2924, !13}
!10623 = !DIDerivedType(tag: DW_TAG_member, name: "constraint", scope: !10614, file: !10615, line: 257, baseType: !10624, size: 64, offset: 64)
!10624 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2951)
!10625 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !10614, file: !10615, line: 259, baseType: !10626, size: 16, offset: 128, flags: DIFlagBitField, extraData: i64 128)
!10626 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!10627 = !DIDerivedType(tag: DW_TAG_member, name: "strict_low", scope: !10614, file: !10615, line: 261, baseType: !2952, size: 8, offset: 144)
!10628 = !DIDerivedType(tag: DW_TAG_member, name: "eliminable", scope: !10614, file: !10615, line: 263, baseType: !2952, size: 8, offset: 152)
!10629 = !DILocation(line: 1392, column: 35, scope: !10602)
!10630 = !DILocation(line: 1394, column: 7, scope: !10631)
!10631 = distinct !DILexicalBlock(scope: !10602, file: !3, line: 1394, column: 7)
!10632 = !DILocation(line: 1394, column: 12, scope: !10631)
!10633 = !DILocation(line: 1394, column: 7, scope: !10602)
!10634 = !DILocation(line: 1395, column: 5, scope: !10631)
!10635 = !DILocation(line: 1397, column: 24, scope: !10602)
!10636 = !DILocation(line: 1397, column: 14, scope: !10602)
!10637 = !DILocation(line: 1397, column: 30, scope: !10602)
!10638 = !DILocation(line: 1397, column: 38, scope: !10602)
!10639 = !DILocation(line: 1397, column: 11, scope: !10602)
!10640 = !DILocation(line: 1398, column: 7, scope: !10641)
!10641 = distinct !DILexicalBlock(scope: !10602, file: !3, line: 1398, column: 7)
!10642 = !DILocation(line: 1398, column: 16, scope: !10641)
!10643 = !DILocation(line: 1398, column: 26, scope: !10641)
!10644 = !DILocation(line: 1398, column: 7, scope: !10602)
!10645 = !DILocation(line: 1399, column: 5, scope: !10641)
!10646 = !DILocation(line: 1401, column: 10, scope: !10602)
!10647 = !DILocation(line: 1401, column: 19, scope: !10602)
!10648 = !DILocation(line: 1401, column: 30, scope: !10602)
!10649 = !DILocation(line: 1401, column: 33, scope: !10602)
!10650 = !DILocation(line: 1401, column: 42, scope: !10602)
!10651 = !DILocation(line: 1401, column: 3, scope: !10602)
!10652 = !DILocation(line: 1402, column: 1, scope: !10602)
!10653 = distinct !DISubprogram(name: "recog_memoized", scope: !10615, file: !10615, line: 150, type: !10654, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10654 = !DISubroutineType(types: !10655)
!10655 = !{!2948, !2924}
!10656 = !DILocalVariable(name: "insn", arg: 1, scope: !10653, file: !10615, line: 150, type: !2924)
!10657 = !DILocation(line: 150, column: 21, scope: !10653)
!10658 = !DILocation(line: 152, column: 7, scope: !10659)
!10659 = distinct !DILexicalBlock(scope: !10653, file: !10615, line: 152, column: 7)
!10660 = !DILocation(line: 152, column: 24, scope: !10659)
!10661 = !DILocation(line: 152, column: 7, scope: !10653)
!10662 = !DILocation(line: 153, column: 31, scope: !10659)
!10663 = !DILocation(line: 153, column: 47, scope: !10659)
!10664 = !DILocation(line: 153, column: 24, scope: !10659)
!10665 = !DILocation(line: 153, column: 5, scope: !10659)
!10666 = !DILocation(line: 153, column: 22, scope: !10659)
!10667 = !DILocation(line: 154, column: 10, scope: !10653)
!10668 = !DILocation(line: 154, column: 3, scope: !10653)
!10669 = distinct !DISubprogram(name: "instantiate_expr", scope: !3, file: !3, line: 1694, type: !7060, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10670 = !DILocalVariable(name: "tp", arg: 1, scope: !10669, file: !3, line: 1694, type: !3535)
!10671 = !DILocation(line: 1694, column: 25, scope: !10669)
!10672 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !10669, file: !3, line: 1694, type: !7062)
!10673 = !DILocation(line: 1694, column: 34, scope: !10669)
!10674 = !DILocalVariable(name: "data", arg: 3, scope: !10669, file: !3, line: 1694, type: !3035)
!10675 = !DILocation(line: 1694, column: 55, scope: !10669)
!10676 = !DILocalVariable(name: "t", scope: !10669, file: !3, line: 1696, type: !3045)
!10677 = !DILocation(line: 1696, column: 8, scope: !10669)
!10678 = !DILocation(line: 1696, column: 13, scope: !10669)
!10679 = !DILocation(line: 1696, column: 12, scope: !10669)
!10680 = !DILocation(line: 1697, column: 9, scope: !10681)
!10681 = distinct !DILexicalBlock(scope: !10669, file: !3, line: 1697, column: 7)
!10682 = !DILocation(line: 1697, column: 7, scope: !10669)
!10683 = !DILocation(line: 1699, column: 8, scope: !10684)
!10684 = distinct !DILexicalBlock(scope: !10681, file: !3, line: 1698, column: 5)
!10685 = !DILocation(line: 1699, column: 22, scope: !10684)
!10686 = !DILocation(line: 1700, column: 11, scope: !10687)
!10687 = distinct !DILexicalBlock(scope: !10684, file: !3, line: 1700, column: 11)
!10688 = !DILocation(line: 1700, column: 22, scope: !10687)
!10689 = !DILocation(line: 1700, column: 25, scope: !10687)
!10690 = !DILocation(line: 1700, column: 11, scope: !10684)
!10691 = !DILocation(line: 1701, column: 24, scope: !10687)
!10692 = !DILocation(line: 1701, column: 2, scope: !10687)
!10693 = !DILocation(line: 1702, column: 5, scope: !10684)
!10694 = !DILocation(line: 1703, column: 3, scope: !10669)
!10695 = distinct !DISubprogram(name: "instantiate_decls_1", scope: !3, file: !3, line: 1710, type: !7594, scopeLine: 1711, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10696 = !DILocalVariable(name: "let", arg: 1, scope: !10695, file: !3, line: 1710, type: !3045)
!10697 = !DILocation(line: 1710, column: 27, scope: !10695)
!10698 = !DILocalVariable(name: "t", scope: !10695, file: !3, line: 1712, type: !3045)
!10699 = !DILocation(line: 1712, column: 8, scope: !10695)
!10700 = !DILocation(line: 1714, column: 12, scope: !10701)
!10701 = distinct !DILexicalBlock(scope: !10695, file: !3, line: 1714, column: 3)
!10702 = !DILocation(line: 1714, column: 10, scope: !10701)
!10703 = !DILocation(line: 1714, column: 8, scope: !10701)
!10704 = !DILocation(line: 1714, column: 30, scope: !10705)
!10705 = distinct !DILexicalBlock(scope: !10701, file: !3, line: 1714, column: 3)
!10706 = !DILocation(line: 1714, column: 3, scope: !10701)
!10707 = !DILocation(line: 1716, column: 11, scope: !10708)
!10708 = distinct !DILexicalBlock(scope: !10709, file: !3, line: 1716, column: 11)
!10709 = distinct !DILexicalBlock(scope: !10705, file: !3, line: 1715, column: 5)
!10710 = !DILocation(line: 1716, column: 11, scope: !10709)
!10711 = !DILocation(line: 1717, column: 24, scope: !10708)
!10712 = !DILocation(line: 1717, column: 2, scope: !10708)
!10713 = !DILocation(line: 1718, column: 11, scope: !10714)
!10714 = distinct !DILexicalBlock(scope: !10709, file: !3, line: 1718, column: 11)
!10715 = !DILocation(line: 1718, column: 25, scope: !10714)
!10716 = !DILocation(line: 1718, column: 37, scope: !10714)
!10717 = !DILocation(line: 1718, column: 40, scope: !10714)
!10718 = !DILocation(line: 1718, column: 11, scope: !10709)
!10719 = !DILocalVariable(name: "v", scope: !10720, file: !3, line: 1720, type: !3045)
!10720 = distinct !DILexicalBlock(scope: !10714, file: !3, line: 1719, column: 2)
!10721 = !DILocation(line: 1720, column: 9, scope: !10720)
!10722 = !DILocation(line: 1720, column: 13, scope: !10720)
!10723 = !DILocation(line: 1721, column: 4, scope: !10720)
!10724 = !DILocation(line: 1722, column: 2, scope: !10720)
!10725 = !DILocation(line: 1723, column: 5, scope: !10709)
!10726 = !DILocation(line: 1714, column: 37, scope: !10705)
!10727 = !DILocation(line: 1714, column: 35, scope: !10705)
!10728 = !DILocation(line: 1714, column: 3, scope: !10705)
!10729 = distinct !{!10729, !10706, !10730}
!10730 = !DILocation(line: 1723, column: 5, scope: !10701)
!10731 = !DILocation(line: 1726, column: 12, scope: !10732)
!10732 = distinct !DILexicalBlock(scope: !10695, file: !3, line: 1726, column: 3)
!10733 = !DILocation(line: 1726, column: 10, scope: !10732)
!10734 = !DILocation(line: 1726, column: 8, scope: !10732)
!10735 = !DILocation(line: 1726, column: 35, scope: !10736)
!10736 = distinct !DILexicalBlock(scope: !10732, file: !3, line: 1726, column: 3)
!10737 = !DILocation(line: 1726, column: 3, scope: !10732)
!10738 = !DILocation(line: 1727, column: 26, scope: !10736)
!10739 = !DILocation(line: 1727, column: 5, scope: !10736)
!10740 = !DILocation(line: 1726, column: 42, scope: !10736)
!10741 = !DILocation(line: 1726, column: 40, scope: !10736)
!10742 = !DILocation(line: 1726, column: 3, scope: !10736)
!10743 = distinct !{!10743, !10737, !10744}
!10744 = !DILocation(line: 1727, column: 27, scope: !10732)
!10745 = !DILocation(line: 1728, column: 1, scope: !10695)
!10746 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !142, file: !142, line: 184, type: !10747, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10747 = !DISubroutineType(types: !10748)
!10748 = !{!3535, !7105, !3045}
!10749 = !DILocalVariable(name: "vec_", arg: 1, scope: !10746, file: !142, line: 184, type: !7105)
!10750 = !DILocation(line: 184, column: 1, scope: !10746)
!10751 = !DILocalVariable(name: "obj_", arg: 2, scope: !10746, file: !142, line: 184, type: !3045)
!10752 = distinct !DISubprogram(name: "VEC_tree_heap_safe_insert", scope: !142, file: !142, line: 184, type: !10753, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10753 = !DISubroutineType(types: !10754)
!10754 = !{!3535, !7105, !7, !3045}
!10755 = !DILocalVariable(name: "vec_", arg: 1, scope: !10752, file: !142, line: 184, type: !7105)
!10756 = !DILocation(line: 184, column: 1, scope: !10752)
!10757 = !DILocalVariable(name: "ix_", arg: 2, scope: !10752, file: !142, line: 184, type: !7)
!10758 = !DILocalVariable(name: "obj_", arg: 3, scope: !10752, file: !142, line: 184, type: !3045)
!10759 = distinct !DISubprogram(name: "split_complex_args", scope: !3, file: !3, line: 2099, type: !7103, scopeLine: 2100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10760 = !DILocalVariable(name: "args", arg: 1, scope: !10759, file: !3, line: 2099, type: !7105)
!10761 = !DILocation(line: 2099, column: 39, scope: !10759)
!10762 = !DILocalVariable(name: "i", scope: !10759, file: !3, line: 2101, type: !7)
!10763 = !DILocation(line: 2101, column: 12, scope: !10759)
!10764 = !DILocalVariable(name: "p", scope: !10759, file: !3, line: 2102, type: !3045)
!10765 = !DILocation(line: 2102, column: 8, scope: !10759)
!10766 = !DILocation(line: 2104, column: 10, scope: !10767)
!10767 = distinct !DILexicalBlock(scope: !10759, file: !3, line: 2104, column: 3)
!10768 = !DILocation(line: 2104, column: 8, scope: !10767)
!10769 = !DILocation(line: 2104, column: 15, scope: !10770)
!10770 = distinct !DILexicalBlock(scope: !10767, file: !3, line: 2104, column: 3)
!10771 = !DILocation(line: 2104, column: 3, scope: !10767)
!10772 = !DILocalVariable(name: "type", scope: !10773, file: !3, line: 2106, type: !3045)
!10773 = distinct !DILexicalBlock(scope: !10770, file: !3, line: 2105, column: 5)
!10774 = !DILocation(line: 2106, column: 12, scope: !10773)
!10775 = !DILocation(line: 2106, column: 19, scope: !10773)
!10776 = !DILocation(line: 2107, column: 11, scope: !10777)
!10777 = distinct !DILexicalBlock(scope: !10773, file: !3, line: 2107, column: 11)
!10778 = !DILocation(line: 2107, column: 28, scope: !10777)
!10779 = !DILocation(line: 2108, column: 4, scope: !10777)
!10780 = !DILocation(line: 2108, column: 21, scope: !10777)
!10781 = !DILocation(line: 2108, column: 40, scope: !10777)
!10782 = !DILocation(line: 2108, column: 7, scope: !10777)
!10783 = !DILocation(line: 2107, column: 11, scope: !10773)
!10784 = !DILocalVariable(name: "decl", scope: !10785, file: !3, line: 2110, type: !3045)
!10785 = distinct !DILexicalBlock(scope: !10777, file: !3, line: 2109, column: 2)
!10786 = !DILocation(line: 2110, column: 9, scope: !10785)
!10787 = !DILocalVariable(name: "subtype", scope: !10785, file: !3, line: 2111, type: !3045)
!10788 = !DILocation(line: 2111, column: 9, scope: !10785)
!10789 = !DILocation(line: 2111, column: 19, scope: !10785)
!10790 = !DILocalVariable(name: "addressable", scope: !10785, file: !3, line: 2112, type: !3158)
!10791 = !DILocation(line: 2112, column: 9, scope: !10785)
!10792 = !DILocation(line: 2112, column: 23, scope: !10785)
!10793 = !DILocation(line: 2115, column: 8, scope: !10785)
!10794 = !DILocation(line: 2115, column: 6, scope: !10785)
!10795 = !DILocation(line: 2116, column: 20, scope: !10785)
!10796 = !DILocation(line: 2116, column: 4, scope: !10785)
!10797 = !DILocation(line: 2116, column: 18, scope: !10785)
!10798 = !DILocation(line: 2117, column: 24, scope: !10785)
!10799 = !DILocation(line: 2117, column: 4, scope: !10785)
!10800 = !DILocation(line: 2117, column: 22, scope: !10785)
!10801 = !DILocation(line: 2118, column: 4, scope: !10785)
!10802 = !DILocation(line: 2118, column: 18, scope: !10785)
!10803 = !DILocation(line: 2119, column: 4, scope: !10785)
!10804 = !DILocation(line: 2119, column: 18, scope: !10785)
!10805 = !DILocation(line: 2120, column: 4, scope: !10785)
!10806 = !DILocation(line: 2120, column: 23, scope: !10785)
!10807 = !DILocation(line: 2125, column: 26, scope: !10785)
!10808 = !DILocation(line: 2125, column: 4, scope: !10785)
!10809 = !DILocation(line: 2125, column: 24, scope: !10785)
!10810 = !DILocation(line: 2126, column: 25, scope: !10785)
!10811 = !DILocation(line: 2126, column: 4, scope: !10785)
!10812 = !DILocation(line: 2126, column: 23, scope: !10785)
!10813 = !DILocation(line: 2127, column: 4, scope: !10785)
!10814 = !DILocation(line: 2127, column: 25, scope: !10785)
!10815 = !DILocation(line: 2128, column: 17, scope: !10785)
!10816 = !DILocation(line: 2128, column: 4, scope: !10785)
!10817 = !DILocation(line: 2129, column: 4, scope: !10785)
!10818 = !DILocation(line: 2132, column: 11, scope: !10785)
!10819 = !DILocation(line: 2132, column: 9, scope: !10785)
!10820 = !DILocation(line: 2134, column: 27, scope: !10785)
!10821 = !DILocation(line: 2134, column: 4, scope: !10785)
!10822 = !DILocation(line: 2134, column: 25, scope: !10785)
!10823 = !DILocation(line: 2135, column: 29, scope: !10785)
!10824 = !DILocation(line: 2135, column: 4, scope: !10785)
!10825 = !DILocation(line: 2135, column: 27, scope: !10785)
!10826 = !DILocation(line: 2136, column: 28, scope: !10785)
!10827 = !DILocation(line: 2136, column: 4, scope: !10785)
!10828 = !DILocation(line: 2136, column: 26, scope: !10785)
!10829 = !DILocation(line: 2137, column: 17, scope: !10785)
!10830 = !DILocation(line: 2137, column: 4, scope: !10785)
!10831 = !DILocation(line: 2138, column: 4, scope: !10785)
!10832 = !DILocation(line: 2139, column: 2, scope: !10785)
!10833 = !DILocation(line: 2140, column: 5, scope: !10773)
!10834 = !DILocation(line: 2104, column: 48, scope: !10770)
!10835 = !DILocation(line: 2104, column: 3, scope: !10770)
!10836 = distinct !{!10836, !10771, !10837}
!10837 = !DILocation(line: 2140, column: 5, scope: !10767)
!10838 = !DILocation(line: 2141, column: 1, scope: !10759)
!10839 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !142, file: !142, line: 184, type: !10840, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10840 = !DISubroutineType(types: !10841)
!10841 = !{!2948, !7105, !2948}
!10842 = !DILocalVariable(name: "vec_", arg: 1, scope: !10839, file: !142, line: 184, type: !7105)
!10843 = !DILocation(line: 184, column: 1, scope: !10839)
!10844 = !DILocalVariable(name: "alloc_", arg: 2, scope: !10839, file: !142, line: 184, type: !2948)
!10845 = !DILocalVariable(name: "extend", scope: !10839, file: !142, line: 184, type: !2948)
!10846 = !DILocation(line: 184, column: 1, scope: !10847)
!10847 = distinct !DILexicalBlock(scope: !10839, file: !142, line: 184, column: 1)
!10848 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !142, file: !142, line: 182, type: !10849, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10849 = !DISubroutineType(types: !10850)
!10850 = !{!3535, !10851, !3045}
!10851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3431, size: 64)
!10852 = !DILocalVariable(name: "vec_", arg: 1, scope: !10848, file: !142, line: 182, type: !10851)
!10853 = !DILocation(line: 182, column: 1, scope: !10848)
!10854 = !DILocalVariable(name: "obj_", arg: 2, scope: !10848, file: !142, line: 182, type: !3045)
!10855 = !DILocalVariable(name: "slot_", scope: !10848, file: !142, line: 182, type: !3535)
!10856 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !142, file: !142, line: 182, type: !10857, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10857 = !DISubroutineType(types: !10858)
!10858 = !{!2948, !10851, !2948}
!10859 = !DILocalVariable(name: "vec_", arg: 1, scope: !10856, file: !142, line: 182, type: !10851)
!10860 = !DILocation(line: 182, column: 1, scope: !10856)
!10861 = !DILocalVariable(name: "alloc_", arg: 2, scope: !10856, file: !142, line: 182, type: !2948)
!10862 = distinct !DISubprogram(name: "VEC_tree_base_quick_insert", scope: !142, file: !142, line: 182, type: !10863, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10863 = !DISubroutineType(types: !10864)
!10864 = !{!3535, !10851, !7, !3045}
!10865 = !DILocalVariable(name: "vec_", arg: 1, scope: !10862, file: !142, line: 182, type: !10851)
!10866 = !DILocation(line: 182, column: 1, scope: !10862)
!10867 = !DILocalVariable(name: "ix_", arg: 2, scope: !10862, file: !142, line: 182, type: !7)
!10868 = !DILocalVariable(name: "obj_", arg: 3, scope: !10862, file: !142, line: 182, type: !3045)
!10869 = !DILocalVariable(name: "slot_", scope: !10862, file: !142, line: 182, type: !3535)
!10870 = distinct !DISubprogram(name: "VEC_tree_base_replace", scope: !142, file: !142, line: 182, type: !10871, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10871 = !DISubroutineType(types: !10872)
!10872 = !{!3045, !10851, !7, !3045}
!10873 = !DILocalVariable(name: "vec_", arg: 1, scope: !10870, file: !142, line: 182, type: !10851)
!10874 = !DILocation(line: 182, column: 1, scope: !10870)
!10875 = !DILocalVariable(name: "ix_", arg: 2, scope: !10870, file: !142, line: 182, type: !7)
!10876 = !DILocalVariable(name: "obj_", arg: 3, scope: !10870, file: !142, line: 182, type: !3045)
!10877 = !DILocalVariable(name: "old_obj_", scope: !10870, file: !142, line: 182, type: !3045)
!10878 = distinct !DISubprogram(name: "regno_clobbered_at_setjmp", scope: !3, file: !3, line: 3741, type: !10879, scopeLine: 3742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10879 = !DISubroutineType(types: !10880)
!10880 = !{!3158, !7456, !2948}
!10881 = !DILocalVariable(name: "setjmp_crosses", arg: 1, scope: !10878, file: !3, line: 3741, type: !7456)
!10882 = !DILocation(line: 3741, column: 35, scope: !10878)
!10883 = !DILocalVariable(name: "regno", arg: 2, scope: !10878, file: !3, line: 3741, type: !2948)
!10884 = !DILocation(line: 3741, column: 55, scope: !10878)
!10885 = !DILocation(line: 3745, column: 7, scope: !10886)
!10886 = distinct !DILexicalBlock(scope: !10878, file: !3, line: 3745, column: 7)
!10887 = !DILocation(line: 3745, column: 16, scope: !10886)
!10888 = !DILocation(line: 3745, column: 13, scope: !10886)
!10889 = !DILocation(line: 3745, column: 7, scope: !10878)
!10890 = !DILocation(line: 3746, column: 5, scope: !10886)
!10891 = !DILocation(line: 3748, column: 24, scope: !10878)
!10892 = !DILocation(line: 3748, column: 12, scope: !10878)
!10893 = !DILocation(line: 3748, column: 31, scope: !10878)
!10894 = !DILocation(line: 3749, column: 5, scope: !10878)
!10895 = !DILocation(line: 3749, column: 8, scope: !10878)
!10896 = !DILocation(line: 3750, column: 4, scope: !10878)
!10897 = !DILocation(line: 3750, column: 7, scope: !10878)
!10898 = !DILocation(line: 0, scope: !10878)
!10899 = !DILocation(line: 3748, column: 10, scope: !10878)
!10900 = !DILocation(line: 3748, column: 3, scope: !10878)
!10901 = !DILocation(line: 3751, column: 1, scope: !10878)
!10902 = distinct !DISubprogram(name: "REG_N_SETS", scope: !10903, file: !10903, line: 90, type: !10904, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10903 = !DIFile(filename: "./regs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!10904 = !DISubroutineType(types: !10905)
!10905 = !{!2948, !2948}
!10906 = !DILocalVariable(name: "regno", arg: 1, scope: !10902, file: !10903, line: 90, type: !2948)
!10907 = !DILocation(line: 90, column: 17, scope: !10902)
!10908 = !DILocation(line: 92, column: 10, scope: !10902)
!10909 = !DILocation(line: 92, column: 34, scope: !10902)
!10910 = !DILocation(line: 92, column: 41, scope: !10902)
!10911 = !DILocation(line: 92, column: 3, scope: !10902)
!10912 = distinct !DISubprogram(name: "VEC_tree_base_pop", scope: !142, file: !142, line: 182, type: !10913, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10913 = !DISubroutineType(types: !10914)
!10914 = !{!3045, !10851}
!10915 = !DILocalVariable(name: "vec_", arg: 1, scope: !10912, file: !142, line: 182, type: !10851)
!10916 = !DILocation(line: 182, column: 1, scope: !10912)
!10917 = !DILocalVariable(name: "obj_", scope: !10912, file: !142, line: 182, type: !3045)
!10918 = distinct !DISubprogram(name: "all_blocks", scope: !3, file: !3, line: 3938, type: !10919, scopeLine: 3939, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10919 = !DISubroutineType(types: !10920)
!10920 = !{!2948, !3045, !3535}
!10921 = !DILocalVariable(name: "block", arg: 1, scope: !10918, file: !3, line: 3938, type: !3045)
!10922 = !DILocation(line: 3938, column: 18, scope: !10918)
!10923 = !DILocalVariable(name: "vector", arg: 2, scope: !10918, file: !3, line: 3938, type: !3535)
!10924 = !DILocation(line: 3938, column: 31, scope: !10918)
!10925 = !DILocalVariable(name: "n_blocks", scope: !10918, file: !3, line: 3940, type: !2948)
!10926 = !DILocation(line: 3940, column: 7, scope: !10918)
!10927 = !DILocation(line: 3942, column: 3, scope: !10918)
!10928 = !DILocation(line: 3942, column: 10, scope: !10918)
!10929 = !DILocation(line: 3944, column: 7, scope: !10930)
!10930 = distinct !DILexicalBlock(scope: !10918, file: !3, line: 3943, column: 5)
!10931 = !DILocation(line: 3944, column: 32, scope: !10930)
!10932 = !DILocation(line: 3947, column: 11, scope: !10933)
!10933 = distinct !DILexicalBlock(scope: !10930, file: !3, line: 3947, column: 11)
!10934 = !DILocation(line: 3947, column: 11, scope: !10930)
!10935 = !DILocation(line: 3948, column: 21, scope: !10933)
!10936 = !DILocation(line: 3948, column: 2, scope: !10933)
!10937 = !DILocation(line: 3948, column: 9, scope: !10933)
!10938 = !DILocation(line: 3948, column: 19, scope: !10933)
!10939 = !DILocation(line: 3950, column: 7, scope: !10930)
!10940 = !DILocation(line: 3953, column: 31, scope: !10930)
!10941 = !DILocation(line: 3954, column: 10, scope: !10930)
!10942 = !DILocation(line: 3954, column: 19, scope: !10930)
!10943 = !DILocation(line: 3954, column: 28, scope: !10930)
!10944 = !DILocation(line: 3954, column: 26, scope: !10930)
!10945 = !DILocation(line: 3953, column: 19, scope: !10930)
!10946 = !DILocation(line: 3953, column: 16, scope: !10930)
!10947 = !DILocation(line: 3955, column: 15, scope: !10930)
!10948 = !DILocation(line: 3955, column: 13, scope: !10930)
!10949 = distinct !{!10949, !10927, !10950}
!10950 = !DILocation(line: 3956, column: 5, scope: !10918)
!10951 = !DILocation(line: 3958, column: 10, scope: !10918)
!10952 = !DILocation(line: 3958, column: 3, scope: !10918)
!10953 = distinct !DISubprogram(name: "assign_parms_setup_varargs", scope: !3, file: !3, line: 2267, type: !10954, scopeLine: 2269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10954 = !DISubroutineType(types: !10955)
!10955 = !{null, !6806, !6921, !3158}
!10956 = !DILocalVariable(name: "all", arg: 1, scope: !10953, file: !3, line: 2267, type: !6806)
!10957 = !DILocation(line: 2267, column: 58, scope: !10953)
!10958 = !DILocalVariable(name: "data", arg: 2, scope: !10953, file: !3, line: 2268, type: !6921)
!10959 = !DILocation(line: 2268, column: 37, scope: !10953)
!10960 = !DILocalVariable(name: "no_rtl", arg: 3, scope: !10953, file: !3, line: 2268, type: !3158)
!10961 = !DILocation(line: 2268, column: 48, scope: !10953)
!10962 = !DILocalVariable(name: "varargs_pretend_bytes", scope: !10953, file: !3, line: 2270, type: !2948)
!10963 = !DILocation(line: 2270, column: 7, scope: !10953)
!10964 = !DILocation(line: 2272, column: 17, scope: !10953)
!10965 = !DILocation(line: 2272, column: 42, scope: !10953)
!10966 = !DILocation(line: 2272, column: 47, scope: !10953)
!10967 = !DILocation(line: 2273, column: 6, scope: !10953)
!10968 = !DILocation(line: 2273, column: 12, scope: !10953)
!10969 = !DILocation(line: 2274, column: 6, scope: !10953)
!10970 = !DILocation(line: 2274, column: 12, scope: !10953)
!10971 = !DILocation(line: 2275, column: 30, scope: !10953)
!10972 = !DILocation(line: 2272, column: 3, scope: !10953)
!10973 = !DILocation(line: 2280, column: 7, scope: !10974)
!10974 = distinct !DILexicalBlock(scope: !10953, file: !3, line: 2280, column: 7)
!10975 = !DILocation(line: 2280, column: 29, scope: !10974)
!10976 = !DILocation(line: 2280, column: 7, scope: !10953)
!10977 = !DILocation(line: 2281, column: 30, scope: !10974)
!10978 = !DILocation(line: 2281, column: 5, scope: !10974)
!10979 = !DILocation(line: 2281, column: 10, scope: !10974)
!10980 = !DILocation(line: 2281, column: 28, scope: !10974)
!10981 = !DILocation(line: 2282, column: 1, scope: !10953)
!10982 = distinct !DISubprogram(name: "assign_parm_find_entry_rtl", scope: !3, file: !3, line: 2288, type: !10983, scopeLine: 2290, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!10983 = !DISubroutineType(types: !10984)
!10984 = !{null, !6806, !6921}
!10985 = !DILocalVariable(name: "all", arg: 1, scope: !10982, file: !3, line: 2288, type: !6806)
!10986 = !DILocation(line: 2288, column: 58, scope: !10982)
!10987 = !DILocalVariable(name: "data", arg: 2, scope: !10982, file: !3, line: 2289, type: !6921)
!10988 = !DILocation(line: 2289, column: 37, scope: !10982)
!10989 = !DILocalVariable(name: "pretend_bytes", scope: !10982, file: !3, line: 2291, type: !3014)
!10990 = !DILocation(line: 2291, column: 17, scope: !10982)
!10991 = !DILocalVariable(name: "entry_parm", scope: !10982, file: !3, line: 2292, type: !2924)
!10992 = !DILocation(line: 2292, column: 7, scope: !10982)
!10993 = !DILocalVariable(name: "in_regs", scope: !10982, file: !3, line: 2293, type: !3158)
!10994 = !DILocation(line: 2293, column: 8, scope: !10982)
!10995 = !DILocation(line: 2295, column: 7, scope: !10996)
!10996 = distinct !DILexicalBlock(scope: !10982, file: !3, line: 2295, column: 7)
!10997 = !DILocation(line: 2295, column: 13, scope: !10996)
!10998 = !DILocation(line: 2295, column: 27, scope: !10996)
!10999 = !DILocation(line: 2295, column: 7, scope: !10982)
!11000 = !DILocation(line: 2297, column: 45, scope: !11001)
!11001 = distinct !DILexicalBlock(scope: !10996, file: !3, line: 2296, column: 5)
!11002 = !DILocation(line: 2297, column: 26, scope: !11001)
!11003 = !DILocation(line: 2297, column: 32, scope: !11001)
!11004 = !DILocation(line: 2297, column: 43, scope: !11001)
!11005 = !DILocation(line: 2297, column: 7, scope: !11001)
!11006 = !DILocation(line: 2297, column: 13, scope: !11001)
!11007 = !DILocation(line: 2297, column: 24, scope: !11001)
!11008 = !DILocation(line: 2298, column: 7, scope: !11001)
!11009 = !DILocation(line: 2305, column: 16, scope: !10982)
!11010 = !DILocation(line: 2305, column: 14, scope: !10982)
!11011 = !DILocation(line: 2309, column: 7, scope: !11012)
!11012 = distinct !DILexicalBlock(scope: !10982, file: !3, line: 2309, column: 7)
!11013 = !DILocation(line: 2309, column: 18, scope: !11012)
!11014 = !DILocation(line: 2309, column: 7, scope: !10982)
!11015 = !DILocation(line: 2310, column: 27, scope: !11012)
!11016 = !DILocation(line: 2310, column: 33, scope: !11012)
!11017 = !DILocation(line: 2310, column: 5, scope: !11012)
!11018 = !DILocation(line: 2310, column: 11, scope: !11012)
!11019 = !DILocation(line: 2310, column: 25, scope: !11012)
!11020 = !DILocation(line: 2322, column: 13, scope: !10982)
!11021 = !DILocation(line: 2322, column: 24, scope: !10982)
!11022 = !DILocation(line: 2322, column: 11, scope: !10982)
!11023 = !DILocation(line: 2326, column: 8, scope: !11024)
!11024 = distinct !DILexicalBlock(scope: !10982, file: !3, line: 2326, column: 7)
!11025 = !DILocation(line: 2326, column: 16, scope: !11024)
!11026 = !DILocation(line: 2326, column: 20, scope: !11024)
!11027 = !DILocation(line: 2326, column: 26, scope: !11024)
!11028 = !DILocation(line: 2326, column: 7, scope: !10982)
!11029 = !DILocation(line: 2328, column: 25, scope: !11030)
!11030 = distinct !DILexicalBlock(scope: !11031, file: !3, line: 2328, column: 11)
!11031 = distinct !DILexicalBlock(scope: !11024, file: !3, line: 2327, column: 5)
!11032 = !DILocation(line: 2328, column: 58, scope: !11030)
!11033 = !DILocation(line: 2328, column: 63, scope: !11030)
!11034 = !DILocation(line: 2328, column: 11, scope: !11030)
!11035 = !DILocation(line: 2328, column: 11, scope: !11031)
!11036 = !DILocalVariable(name: "tem", scope: !11037, file: !3, line: 2330, type: !2924)
!11037 = distinct !DILexicalBlock(scope: !11030, file: !3, line: 2329, column: 2)
!11038 = !DILocation(line: 2330, column: 8, scope: !11037)
!11039 = !DILocation(line: 2335, column: 10, scope: !11037)
!11040 = !DILocation(line: 2335, column: 8, scope: !11037)
!11041 = !DILocation(line: 2338, column: 14, scope: !11037)
!11042 = !DILocation(line: 2338, column: 18, scope: !11037)
!11043 = !DILocation(line: 2338, column: 12, scope: !11037)
!11044 = !DILocation(line: 2339, column: 2, scope: !11037)
!11045 = !DILocation(line: 2340, column: 5, scope: !11031)
!11046 = !DILocation(line: 2344, column: 21, scope: !11047)
!11047 = distinct !DILexicalBlock(scope: !10982, file: !3, line: 2344, column: 7)
!11048 = !DILocation(line: 2344, column: 41, scope: !11047)
!11049 = !DILocation(line: 2344, column: 47, scope: !11047)
!11050 = !DILocation(line: 2345, column: 6, scope: !11047)
!11051 = !DILocation(line: 2345, column: 12, scope: !11047)
!11052 = !DILocation(line: 2344, column: 7, scope: !11047)
!11053 = !DILocation(line: 2344, column: 7, scope: !10982)
!11054 = !DILocation(line: 2346, column: 16, scope: !11047)
!11055 = !DILocation(line: 2346, column: 5, scope: !11047)
!11056 = !DILocation(line: 2348, column: 7, scope: !11057)
!11057 = distinct !DILexicalBlock(scope: !10982, file: !3, line: 2348, column: 7)
!11058 = !DILocation(line: 2348, column: 7, scope: !10982)
!11059 = !DILocalVariable(name: "partial", scope: !11060, file: !3, line: 2350, type: !2948)
!11060 = distinct !DILexicalBlock(scope: !11057, file: !3, line: 2349, column: 5)
!11061 = !DILocation(line: 2350, column: 11, scope: !11060)
!11062 = !DILocation(line: 2352, column: 31, scope: !11060)
!11063 = !DILocation(line: 2352, column: 51, scope: !11060)
!11064 = !DILocation(line: 2352, column: 56, scope: !11060)
!11065 = !DILocation(line: 2353, column: 8, scope: !11060)
!11066 = !DILocation(line: 2353, column: 14, scope: !11060)
!11067 = !DILocation(line: 2354, column: 8, scope: !11060)
!11068 = !DILocation(line: 2354, column: 14, scope: !11060)
!11069 = !DILocation(line: 2355, column: 8, scope: !11060)
!11070 = !DILocation(line: 2355, column: 14, scope: !11060)
!11071 = !DILocation(line: 2352, column: 17, scope: !11060)
!11072 = !DILocation(line: 2352, column: 15, scope: !11060)
!11073 = !DILocation(line: 2356, column: 23, scope: !11060)
!11074 = !DILocation(line: 2356, column: 7, scope: !11060)
!11075 = !DILocation(line: 2356, column: 13, scope: !11060)
!11076 = !DILocation(line: 2356, column: 21, scope: !11060)
!11077 = !DILocation(line: 2360, column: 11, scope: !11078)
!11078 = distinct !DILexicalBlock(scope: !11060, file: !3, line: 2360, column: 11)
!11079 = !DILocation(line: 2360, column: 19, scope: !11078)
!11080 = !DILocation(line: 2360, column: 24, scope: !11078)
!11081 = !DILocation(line: 2360, column: 27, scope: !11078)
!11082 = !DILocation(line: 2360, column: 32, scope: !11078)
!11083 = !DILocation(line: 2360, column: 53, scope: !11078)
!11084 = !DILocation(line: 2360, column: 11, scope: !11060)
!11085 = !DILocation(line: 2379, column: 4, scope: !11086)
!11086 = distinct !DILexicalBlock(scope: !11078, file: !3, line: 2361, column: 2)
!11087 = !DILocation(line: 2381, column: 20, scope: !11086)
!11088 = !DILocation(line: 2381, column: 18, scope: !11086)
!11089 = !DILocation(line: 2382, column: 29, scope: !11086)
!11090 = !DILocation(line: 2382, column: 4, scope: !11086)
!11091 = !DILocation(line: 2382, column: 9, scope: !11086)
!11092 = !DILocation(line: 2382, column: 27, scope: !11086)
!11093 = !DILocation(line: 2386, column: 31, scope: !11086)
!11094 = !DILocation(line: 2386, column: 36, scope: !11086)
!11095 = !DILocation(line: 2386, column: 4, scope: !11086)
!11096 = !DILocation(line: 2386, column: 9, scope: !11086)
!11097 = !DILocation(line: 2386, column: 29, scope: !11086)
!11098 = !DILocation(line: 2387, column: 2, scope: !11086)
!11099 = !DILocation(line: 2388, column: 5, scope: !11060)
!11100 = !DILocation(line: 2390, column: 24, scope: !10982)
!11101 = !DILocation(line: 2390, column: 30, scope: !10982)
!11102 = !DILocation(line: 2390, column: 45, scope: !10982)
!11103 = !DILocation(line: 2390, column: 51, scope: !10982)
!11104 = !DILocation(line: 2390, column: 64, scope: !10982)
!11105 = !DILocation(line: 2391, column: 10, scope: !10982)
!11106 = !DILocation(line: 2391, column: 23, scope: !10982)
!11107 = !DILocation(line: 2391, column: 29, scope: !10982)
!11108 = !DILocation(line: 2391, column: 42, scope: !10982)
!11109 = !DILocation(line: 2392, column: 11, scope: !10982)
!11110 = !DILocation(line: 2392, column: 16, scope: !10982)
!11111 = !DILocation(line: 2392, column: 34, scope: !10982)
!11112 = !DILocation(line: 2392, column: 40, scope: !10982)
!11113 = !DILocation(line: 2390, column: 3, scope: !10982)
!11114 = !DILocation(line: 2396, column: 8, scope: !11115)
!11115 = distinct !DILexicalBlock(scope: !10982, file: !3, line: 2396, column: 7)
!11116 = !DILocation(line: 2396, column: 16, scope: !11115)
!11117 = !DILocation(line: 2396, column: 25, scope: !11115)
!11118 = !DILocation(line: 2396, column: 47, scope: !11115)
!11119 = !DILocation(line: 2396, column: 53, scope: !11115)
!11120 = !DILocation(line: 2396, column: 60, scope: !11115)
!11121 = !DILocation(line: 2396, column: 45, scope: !11115)
!11122 = !DILocation(line: 2396, column: 7, scope: !10982)
!11123 = !DILocation(line: 2397, column: 33, scope: !11115)
!11124 = !DILocation(line: 2397, column: 39, scope: !11115)
!11125 = !DILocation(line: 2397, column: 46, scope: !11115)
!11126 = !DILocation(line: 2397, column: 31, scope: !11115)
!11127 = !DILocation(line: 2397, column: 5, scope: !11115)
!11128 = !DILocation(line: 2400, column: 19, scope: !10982)
!11129 = !DILocation(line: 2400, column: 24, scope: !10982)
!11130 = !DILocation(line: 2400, column: 46, scope: !10982)
!11131 = !DILocation(line: 2400, column: 44, scope: !10982)
!11132 = !DILocation(line: 2400, column: 17, scope: !10982)
!11133 = !DILocation(line: 2401, column: 40, scope: !10982)
!11134 = !DILocation(line: 2401, column: 3, scope: !10982)
!11135 = !DILocation(line: 2401, column: 9, scope: !10982)
!11136 = !DILocation(line: 2401, column: 16, scope: !10982)
!11137 = !DILocation(line: 2401, column: 28, scope: !10982)
!11138 = !DILocation(line: 2401, column: 37, scope: !10982)
!11139 = !DILocation(line: 2402, column: 35, scope: !10982)
!11140 = !DILocation(line: 2402, column: 3, scope: !10982)
!11141 = !DILocation(line: 2402, column: 9, scope: !10982)
!11142 = !DILocation(line: 2402, column: 16, scope: !10982)
!11143 = !DILocation(line: 2402, column: 23, scope: !10982)
!11144 = !DILocation(line: 2402, column: 32, scope: !10982)
!11145 = !DILocation(line: 2404, column: 22, scope: !10982)
!11146 = !DILocation(line: 2404, column: 3, scope: !10982)
!11147 = !DILocation(line: 2404, column: 9, scope: !10982)
!11148 = !DILocation(line: 2404, column: 20, scope: !10982)
!11149 = !DILocation(line: 2405, column: 1, scope: !10982)
!11150 = distinct !DISubprogram(name: "assign_parm_is_stack_parm", scope: !3, file: !3, line: 2411, type: !11151, scopeLine: 2413, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!11151 = !DISubroutineType(types: !11152)
!11152 = !{!3158, !6806, !6921}
!11153 = !DILocalVariable(name: "all", arg: 1, scope: !11150, file: !3, line: 2411, type: !6806)
!11154 = !DILocation(line: 2411, column: 57, scope: !11150)
!11155 = !DILocalVariable(name: "data", arg: 2, scope: !11150, file: !3, line: 2412, type: !6921)
!11156 = !DILocation(line: 2412, column: 36, scope: !11150)
!11157 = !DILocation(line: 2415, column: 7, scope: !11158)
!11158 = distinct !DILexicalBlock(scope: !11150, file: !3, line: 2415, column: 7)
!11159 = !DILocation(line: 2415, column: 13, scope: !11158)
!11160 = !DILocation(line: 2415, column: 24, scope: !11158)
!11161 = !DILocation(line: 2415, column: 7, scope: !11150)
!11162 = !DILocation(line: 2419, column: 12, scope: !11163)
!11163 = distinct !DILexicalBlock(scope: !11158, file: !3, line: 2419, column: 12)
!11164 = !DILocation(line: 2419, column: 18, scope: !11163)
!11165 = !DILocation(line: 2419, column: 26, scope: !11163)
!11166 = !DILocation(line: 2419, column: 12, scope: !11158)
!11167 = !DILocation(line: 2423, column: 12, scope: !11168)
!11168 = distinct !DILexicalBlock(scope: !11163, file: !3, line: 2423, column: 12)
!11169 = !DILocation(line: 2423, column: 40, scope: !11168)
!11170 = !DILocation(line: 2424, column: 5, scope: !11168)
!11171 = !DILocation(line: 2424, column: 8, scope: !11168)
!11172 = !DILocation(line: 2424, column: 51, scope: !11168)
!11173 = !DILocation(line: 2423, column: 12, scope: !11163)
!11174 = !DILocation(line: 2428, column: 12, scope: !11175)
!11175 = distinct !DILexicalBlock(scope: !11168, file: !3, line: 2428, column: 12)
!11176 = !DILocation(line: 2428, column: 17, scope: !11175)
!11177 = !DILocation(line: 2428, column: 38, scope: !11175)
!11178 = !DILocation(line: 2428, column: 12, scope: !11168)
!11179 = !DILocation(line: 2432, column: 5, scope: !11175)
!11180 = !DILocation(line: 2434, column: 36, scope: !11150)
!11181 = !DILocation(line: 2434, column: 42, scope: !11150)
!11182 = !DILocation(line: 2434, column: 49, scope: !11150)
!11183 = !DILocation(line: 2434, column: 54, scope: !11150)
!11184 = !DILocation(line: 2434, column: 3, scope: !11150)
!11185 = !DILocation(line: 2434, column: 8, scope: !11150)
!11186 = !DILocation(line: 2434, column: 24, scope: !11150)
!11187 = !DILocation(line: 2434, column: 33, scope: !11150)
!11188 = !DILocation(line: 2435, column: 7, scope: !11189)
!11189 = distinct !DILexicalBlock(scope: !11150, file: !3, line: 2435, column: 7)
!11190 = !DILocation(line: 2435, column: 13, scope: !11189)
!11191 = !DILocation(line: 2435, column: 20, scope: !11189)
!11192 = !DILocation(line: 2435, column: 25, scope: !11189)
!11193 = !DILocation(line: 2435, column: 7, scope: !11150)
!11194 = !DILocation(line: 2436, column: 5, scope: !11189)
!11195 = !DILocalVariable(name: "inc", scope: !11196, file: !3, line: 2436, type: !3045)
!11196 = distinct !DILexicalBlock(scope: !11189, file: !3, line: 2436, column: 5)
!11197 = !DILocation(line: 2436, column: 5, scope: !11196)
!11198 = !DILocation(line: 2436, column: 5, scope: !11199)
!11199 = distinct !DILexicalBlock(scope: !11196, file: !3, line: 2436, column: 5)
!11200 = !DILocation(line: 2436, column: 5, scope: !11201)
!11201 = distinct !DILexicalBlock(scope: !11199, file: !3, line: 2436, column: 5)
!11202 = !DILocation(line: 2438, column: 3, scope: !11150)
!11203 = !DILocation(line: 2439, column: 1, scope: !11150)
!11204 = distinct !DISubprogram(name: "assign_parm_find_stack_rtl", scope: !3, file: !3, line: 2445, type: !11205, scopeLine: 2446, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!11205 = !DISubroutineType(types: !11206)
!11206 = !{null, !3045, !6921}
!11207 = !DILocalVariable(name: "parm", arg: 1, scope: !11204, file: !3, line: 2445, type: !3045)
!11208 = !DILocation(line: 2445, column: 34, scope: !11204)
!11209 = !DILocalVariable(name: "data", arg: 2, scope: !11204, file: !3, line: 2445, type: !6921)
!11210 = !DILocation(line: 2445, column: 69, scope: !11204)
!11211 = !DILocalVariable(name: "offset_rtx", scope: !11204, file: !3, line: 2447, type: !2924)
!11212 = !DILocation(line: 2447, column: 7, scope: !11204)
!11213 = !DILocalVariable(name: "stack_parm", scope: !11204, file: !3, line: 2447, type: !2924)
!11214 = !DILocation(line: 2447, column: 19, scope: !11204)
!11215 = !DILocalVariable(name: "align", scope: !11204, file: !3, line: 2448, type: !7)
!11216 = !DILocation(line: 2448, column: 16, scope: !11204)
!11217 = !DILocalVariable(name: "boundary", scope: !11204, file: !3, line: 2448, type: !7)
!11218 = !DILocation(line: 2448, column: 23, scope: !11204)
!11219 = !DILocation(line: 2452, column: 7, scope: !11220)
!11220 = distinct !DILexicalBlock(scope: !11204, file: !3, line: 2452, column: 7)
!11221 = !DILocation(line: 2452, column: 13, scope: !11220)
!11222 = !DILocation(line: 2452, column: 7, scope: !11204)
!11223 = !DILocation(line: 2453, column: 18, scope: !11220)
!11224 = !DILocation(line: 2453, column: 16, scope: !11220)
!11225 = !DILocation(line: 2453, column: 5, scope: !11220)
!11226 = !DILocation(line: 2455, column: 18, scope: !11220)
!11227 = !DILocation(line: 2455, column: 16, scope: !11220)
!11228 = !DILocation(line: 2457, column: 27, scope: !11204)
!11229 = !DILocation(line: 2457, column: 14, scope: !11204)
!11230 = !DILocation(line: 2458, column: 7, scope: !11231)
!11231 = distinct !DILexicalBlock(scope: !11204, file: !3, line: 2458, column: 7)
!11232 = !DILocation(line: 2458, column: 21, scope: !11231)
!11233 = !DILocation(line: 2458, column: 18, scope: !11231)
!11234 = !DILocation(line: 2458, column: 7, scope: !11204)
!11235 = !DILocation(line: 2459, column: 18, scope: !11231)
!11236 = !DILocation(line: 2459, column: 16, scope: !11231)
!11237 = !DILocation(line: 2459, column: 5, scope: !11231)
!11238 = !DILocation(line: 2460, column: 29, scope: !11204)
!11239 = !DILocation(line: 2460, column: 35, scope: !11204)
!11240 = !DILocation(line: 2460, column: 50, scope: !11204)
!11241 = !DILocation(line: 2460, column: 16, scope: !11204)
!11242 = !DILocation(line: 2460, column: 14, scope: !11204)
!11243 = !DILocation(line: 2462, column: 8, scope: !11244)
!11244 = distinct !DILexicalBlock(scope: !11204, file: !3, line: 2462, column: 7)
!11245 = !DILocation(line: 2462, column: 14, scope: !11244)
!11246 = !DILocation(line: 2462, column: 7, scope: !11204)
!11247 = !DILocation(line: 2464, column: 27, scope: !11248)
!11248 = distinct !DILexicalBlock(scope: !11244, file: !3, line: 2463, column: 5)
!11249 = !DILocation(line: 2464, column: 39, scope: !11248)
!11250 = !DILocation(line: 2464, column: 7, scope: !11248)
!11251 = !DILocation(line: 2467, column: 11, scope: !11252)
!11252 = distinct !DILexicalBlock(scope: !11248, file: !3, line: 2467, column: 11)
!11253 = !DILocation(line: 2467, column: 17, scope: !11252)
!11254 = !DILocation(line: 2467, column: 31, scope: !11252)
!11255 = !DILocation(line: 2468, column: 4, scope: !11252)
!11256 = !DILocation(line: 2468, column: 7, scope: !11252)
!11257 = !DILocation(line: 2468, column: 13, scope: !11252)
!11258 = !DILocation(line: 2468, column: 30, scope: !11252)
!11259 = !DILocation(line: 2468, column: 27, scope: !11252)
!11260 = !DILocation(line: 2467, column: 11, scope: !11248)
!11261 = !DILocation(line: 2470, column: 18, scope: !11262)
!11262 = distinct !DILexicalBlock(scope: !11252, file: !3, line: 2469, column: 2)
!11263 = !DILocation(line: 2471, column: 4, scope: !11262)
!11264 = !DILocation(line: 2470, column: 4, scope: !11262)
!11265 = !DILocation(line: 2472, column: 8, scope: !11266)
!11266 = distinct !DILexicalBlock(scope: !11262, file: !3, line: 2472, column: 8)
!11267 = !DILocation(line: 2472, column: 30, scope: !11266)
!11268 = !DILocation(line: 2472, column: 33, scope: !11266)
!11269 = !DILocation(line: 2472, column: 8, scope: !11262)
!11270 = !DILocalVariable(name: "offset", scope: !11271, file: !3, line: 2474, type: !2948)
!11271 = distinct !DILexicalBlock(scope: !11266, file: !3, line: 2473, column: 6)
!11272 = !DILocation(line: 2474, column: 12, scope: !11271)
!11273 = !DILocation(line: 2474, column: 44, scope: !11271)
!11274 = !DILocation(line: 2475, column: 9, scope: !11271)
!11275 = !DILocation(line: 2475, column: 15, scope: !11271)
!11276 = !DILocation(line: 2474, column: 21, scope: !11271)
!11277 = !DILocation(line: 2476, column: 12, scope: !11278)
!11278 = distinct !DILexicalBlock(scope: !11271, file: !3, line: 2476, column: 12)
!11279 = !DILocation(line: 2476, column: 12, scope: !11271)
!11280 = !DILocation(line: 2477, column: 19, scope: !11278)
!11281 = !DILocation(line: 2478, column: 20, scope: !11278)
!11282 = !DILocation(line: 2479, column: 14, scope: !11278)
!11283 = !DILocation(line: 2479, column: 13, scope: !11278)
!11284 = !DILocation(line: 2478, column: 5, scope: !11278)
!11285 = !DILocation(line: 2477, column: 3, scope: !11278)
!11286 = !DILocation(line: 2480, column: 6, scope: !11271)
!11287 = !DILocation(line: 2481, column: 2, scope: !11262)
!11288 = !DILocation(line: 2482, column: 5, scope: !11248)
!11289 = !DILocation(line: 2484, column: 14, scope: !11204)
!11290 = !DILocation(line: 2484, column: 20, scope: !11204)
!11291 = !DILocation(line: 2484, column: 27, scope: !11204)
!11292 = !DILocation(line: 2484, column: 12, scope: !11204)
!11293 = !DILocation(line: 2485, column: 9, scope: !11204)
!11294 = !DILocation(line: 2491, column: 7, scope: !11295)
!11295 = distinct !DILexicalBlock(scope: !11204, file: !3, line: 2491, column: 7)
!11296 = !DILocation(line: 2491, column: 13, scope: !11295)
!11297 = !DILocation(line: 2491, column: 20, scope: !11295)
!11298 = !DILocation(line: 2491, column: 30, scope: !11295)
!11299 = !DILocation(line: 2491, column: 42, scope: !11295)
!11300 = !DILocation(line: 2491, column: 45, scope: !11295)
!11301 = !DILocation(line: 2491, column: 51, scope: !11295)
!11302 = !DILocation(line: 2491, column: 7, scope: !11204)
!11303 = !DILocation(line: 2492, column: 13, scope: !11295)
!11304 = !DILocation(line: 2492, column: 11, scope: !11295)
!11305 = !DILocation(line: 2492, column: 5, scope: !11295)
!11306 = !DILocation(line: 2493, column: 12, scope: !11307)
!11307 = distinct !DILexicalBlock(scope: !11295, file: !3, line: 2493, column: 12)
!11308 = !DILocation(line: 2493, column: 12, scope: !11295)
!11309 = !DILocation(line: 2495, column: 15, scope: !11310)
!11310 = distinct !DILexicalBlock(scope: !11307, file: !3, line: 2494, column: 5)
!11311 = !DILocation(line: 2495, column: 35, scope: !11310)
!11312 = !DILocation(line: 2495, column: 53, scope: !11310)
!11313 = !DILocation(line: 2495, column: 51, scope: !11310)
!11314 = !DILocation(line: 2495, column: 13, scope: !11310)
!11315 = !DILocation(line: 2496, column: 15, scope: !11310)
!11316 = !DILocation(line: 2496, column: 24, scope: !11310)
!11317 = !DILocation(line: 2496, column: 23, scope: !11310)
!11318 = !DILocation(line: 2496, column: 21, scope: !11310)
!11319 = !DILocation(line: 2496, column: 13, scope: !11310)
!11320 = !DILocation(line: 2497, column: 5, scope: !11310)
!11321 = !DILocation(line: 2498, column: 18, scope: !11204)
!11322 = !DILocation(line: 2498, column: 30, scope: !11204)
!11323 = !DILocation(line: 2498, column: 3, scope: !11204)
!11324 = !DILocation(line: 2500, column: 7, scope: !11325)
!11325 = distinct !DILexicalBlock(scope: !11204, file: !3, line: 2500, column: 7)
!11326 = !DILocation(line: 2500, column: 13, scope: !11325)
!11327 = !DILocation(line: 2500, column: 7, scope: !11204)
!11328 = !DILocation(line: 2501, column: 29, scope: !11325)
!11329 = !DILocation(line: 2501, column: 35, scope: !11325)
!11330 = !DILocation(line: 2501, column: 47, scope: !11325)
!11331 = !DILocation(line: 2501, column: 5, scope: !11325)
!11332 = !DILocation(line: 2503, column: 22, scope: !11204)
!11333 = !DILocation(line: 2503, column: 3, scope: !11204)
!11334 = !DILocation(line: 2503, column: 9, scope: !11204)
!11335 = !DILocation(line: 2503, column: 20, scope: !11204)
!11336 = !DILocation(line: 2504, column: 1, scope: !11204)
!11337 = distinct !DISubprogram(name: "assign_parm_adjust_entry_rtl", scope: !3, file: !3, line: 2510, type: !11338, scopeLine: 2511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!11338 = !DISubroutineType(types: !11339)
!11339 = !{null, !6921}
!11340 = !DILocalVariable(name: "data", arg: 1, scope: !11337, file: !3, line: 2510, type: !6921)
!11341 = !DILocation(line: 2510, column: 60, scope: !11337)
!11342 = !DILocalVariable(name: "entry_parm", scope: !11337, file: !3, line: 2512, type: !2924)
!11343 = !DILocation(line: 2512, column: 7, scope: !11337)
!11344 = !DILocation(line: 2512, column: 20, scope: !11337)
!11345 = !DILocation(line: 2512, column: 26, scope: !11337)
!11346 = !DILocalVariable(name: "stack_parm", scope: !11337, file: !3, line: 2513, type: !2924)
!11347 = !DILocation(line: 2513, column: 7, scope: !11337)
!11348 = !DILocation(line: 2513, column: 20, scope: !11337)
!11349 = !DILocation(line: 2513, column: 26, scope: !11337)
!11350 = !DILocation(line: 2520, column: 7, scope: !11351)
!11351 = distinct !DILexicalBlock(scope: !11337, file: !3, line: 2520, column: 7)
!11352 = !DILocation(line: 2520, column: 13, scope: !11351)
!11353 = !DILocation(line: 2520, column: 21, scope: !11351)
!11354 = !DILocation(line: 2520, column: 7, scope: !11337)
!11355 = !DILocation(line: 2524, column: 11, scope: !11356)
!11356 = distinct !DILexicalBlock(scope: !11357, file: !3, line: 2524, column: 11)
!11357 = distinct !DILexicalBlock(scope: !11351, file: !3, line: 2521, column: 5)
!11358 = !DILocation(line: 2524, column: 33, scope: !11356)
!11359 = !DILocation(line: 2524, column: 11, scope: !11357)
!11360 = !DILocation(line: 2525, column: 34, scope: !11356)
!11361 = !DILocation(line: 2525, column: 20, scope: !11356)
!11362 = !DILocation(line: 2525, column: 47, scope: !11356)
!11363 = !DILocation(line: 2526, column: 6, scope: !11356)
!11364 = !DILocation(line: 2526, column: 12, scope: !11356)
!11365 = !DILocation(line: 2527, column: 25, scope: !11356)
!11366 = !DILocation(line: 2527, column: 31, scope: !11356)
!11367 = !DILocation(line: 2527, column: 6, scope: !11356)
!11368 = !DILocation(line: 2525, column: 2, scope: !11356)
!11369 = !DILocation(line: 2530, column: 4, scope: !11370)
!11370 = distinct !DILexicalBlock(scope: !11356, file: !3, line: 2529, column: 2)
!11371 = !DILocation(line: 2531, column: 25, scope: !11370)
!11372 = !DILocation(line: 2531, column: 59, scope: !11370)
!11373 = !DILocation(line: 2531, column: 45, scope: !11370)
!11374 = !DILocation(line: 2532, column: 11, scope: !11370)
!11375 = !DILocation(line: 2532, column: 17, scope: !11370)
!11376 = !DILocation(line: 2532, column: 25, scope: !11370)
!11377 = !DILocation(line: 2531, column: 4, scope: !11370)
!11378 = !DILocation(line: 2535, column: 20, scope: !11357)
!11379 = !DILocation(line: 2535, column: 18, scope: !11357)
!11380 = !DILocation(line: 2536, column: 5, scope: !11357)
!11381 = !DILocation(line: 2540, column: 12, scope: !11382)
!11382 = distinct !DILexicalBlock(scope: !11351, file: !3, line: 2540, column: 12)
!11383 = !DILocation(line: 2540, column: 23, scope: !11382)
!11384 = !DILocation(line: 2540, column: 12, scope: !11351)
!11385 = !DILocation(line: 2541, column: 18, scope: !11382)
!11386 = !DILocation(line: 2541, column: 16, scope: !11382)
!11387 = !DILocation(line: 2541, column: 5, scope: !11382)
!11388 = !DILocation(line: 2546, column: 12, scope: !11389)
!11389 = distinct !DILexicalBlock(scope: !11382, file: !3, line: 2546, column: 12)
!11390 = !DILocation(line: 2546, column: 34, scope: !11389)
!11391 = !DILocation(line: 2547, column: 5, scope: !11389)
!11392 = !DILocation(line: 2547, column: 8, scope: !11389)
!11393 = !DILocation(line: 2547, column: 14, scope: !11389)
!11394 = !DILocation(line: 2547, column: 27, scope: !11389)
!11395 = !DILocation(line: 2548, column: 5, scope: !11389)
!11396 = !DILocation(line: 2548, column: 8, scope: !11389)
!11397 = !DILocation(line: 2548, column: 14, scope: !11389)
!11398 = !DILocation(line: 2548, column: 26, scope: !11389)
!11399 = !DILocation(line: 2546, column: 12, scope: !11382)
!11400 = !DILocalVariable(name: "i", scope: !11401, file: !3, line: 2550, type: !3400)
!11401 = distinct !DILexicalBlock(scope: !11389, file: !3, line: 2549, column: 5)
!11402 = !DILocation(line: 2550, column: 14, scope: !11401)
!11403 = !DILocalVariable(name: "len", scope: !11401, file: !3, line: 2550, type: !3400)
!11404 = !DILocation(line: 2550, column: 17, scope: !11401)
!11405 = !DILocation(line: 2550, column: 23, scope: !11401)
!11406 = !DILocation(line: 2552, column: 14, scope: !11407)
!11407 = distinct !DILexicalBlock(scope: !11401, file: !3, line: 2552, column: 7)
!11408 = !DILocation(line: 2552, column: 12, scope: !11407)
!11409 = !DILocation(line: 2552, column: 19, scope: !11410)
!11410 = distinct !DILexicalBlock(scope: !11407, file: !3, line: 2552, column: 7)
!11411 = !DILocation(line: 2552, column: 23, scope: !11410)
!11412 = !DILocation(line: 2552, column: 21, scope: !11410)
!11413 = !DILocation(line: 2552, column: 7, scope: !11407)
!11414 = !DILocation(line: 2553, column: 6, scope: !11415)
!11415 = distinct !DILexicalBlock(scope: !11410, file: !3, line: 2553, column: 6)
!11416 = !DILocation(line: 2553, column: 43, scope: !11415)
!11417 = !DILocation(line: 2554, column: 6, scope: !11415)
!11418 = !DILocation(line: 2554, column: 9, scope: !11415)
!11419 = !DILocation(line: 2555, column: 6, scope: !11415)
!11420 = !DILocation(line: 2555, column: 10, scope: !11415)
!11421 = !DILocation(line: 2556, column: 6, scope: !11415)
!11422 = !DILocation(line: 2556, column: 12, scope: !11415)
!11423 = !DILocation(line: 2556, column: 3, scope: !11415)
!11424 = !DILocation(line: 2557, column: 6, scope: !11415)
!11425 = !DILocation(line: 2557, column: 9, scope: !11415)
!11426 = !DILocation(line: 2557, column: 55, scope: !11415)
!11427 = !DILocation(line: 2553, column: 6, scope: !11410)
!11428 = !DILocation(line: 2559, column: 19, scope: !11429)
!11429 = distinct !DILexicalBlock(scope: !11415, file: !3, line: 2558, column: 4)
!11430 = !DILocation(line: 2559, column: 17, scope: !11429)
!11431 = !DILocation(line: 2560, column: 6, scope: !11429)
!11432 = !DILocation(line: 2557, column: 58, scope: !11415)
!11433 = !DILocation(line: 2552, column: 29, scope: !11410)
!11434 = !DILocation(line: 2552, column: 7, scope: !11410)
!11435 = distinct !{!11435, !11413, !11436}
!11436 = !DILocation(line: 2561, column: 4, scope: !11407)
!11437 = !DILocation(line: 2562, column: 5, scope: !11401)
!11438 = !DILocation(line: 2564, column: 22, scope: !11337)
!11439 = !DILocation(line: 2564, column: 3, scope: !11337)
!11440 = !DILocation(line: 2564, column: 9, scope: !11337)
!11441 = !DILocation(line: 2564, column: 20, scope: !11337)
!11442 = !DILocation(line: 2565, column: 1, scope: !11337)
!11443 = distinct !DISubprogram(name: "assign_parm_adjust_stack_rtl", scope: !3, file: !3, line: 2594, type: !11338, scopeLine: 2595, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!11444 = !DILocalVariable(name: "data", arg: 1, scope: !11443, file: !3, line: 2594, type: !6921)
!11445 = !DILocation(line: 2594, column: 60, scope: !11443)
!11446 = !DILocalVariable(name: "stack_parm", scope: !11443, file: !3, line: 2596, type: !2924)
!11447 = !DILocation(line: 2596, column: 7, scope: !11443)
!11448 = !DILocation(line: 2596, column: 20, scope: !11443)
!11449 = !DILocation(line: 2596, column: 26, scope: !11443)
!11450 = !DILocation(line: 2601, column: 7, scope: !11451)
!11451 = distinct !DILexicalBlock(scope: !11443, file: !3, line: 2601, column: 7)
!11452 = !DILocation(line: 2602, column: 7, scope: !11451)
!11453 = !DILocation(line: 2604, column: 8, scope: !11451)
!11454 = !DILocation(line: 2604, column: 14, scope: !11451)
!11455 = !DILocation(line: 2605, column: 8, scope: !11451)
!11456 = !DILocation(line: 2605, column: 11, scope: !11451)
!11457 = !DILocation(line: 2605, column: 45, scope: !11451)
!11458 = !DILocation(line: 2605, column: 43, scope: !11451)
!11459 = !DILocation(line: 2606, column: 8, scope: !11451)
!11460 = !DILocation(line: 2606, column: 11, scope: !11451)
!11461 = !DILocation(line: 2606, column: 36, scope: !11451)
!11462 = !DILocation(line: 2606, column: 34, scope: !11451)
!11463 = !DILocation(line: 2601, column: 7, scope: !11443)
!11464 = !DILocation(line: 2607, column: 16, scope: !11451)
!11465 = !DILocation(line: 2607, column: 5, scope: !11451)
!11466 = !DILocation(line: 2611, column: 12, scope: !11467)
!11467 = distinct !DILexicalBlock(scope: !11451, file: !3, line: 2611, column: 12)
!11468 = !DILocation(line: 2611, column: 18, scope: !11467)
!11469 = !DILocation(line: 2611, column: 32, scope: !11467)
!11470 = !DILocation(line: 2611, column: 29, scope: !11467)
!11471 = !DILocation(line: 2612, column: 5, scope: !11467)
!11472 = !DILocation(line: 2612, column: 8, scope: !11467)
!11473 = !DILocation(line: 2612, column: 14, scope: !11467)
!11474 = !DILocation(line: 2612, column: 27, scope: !11467)
!11475 = !DILocation(line: 2613, column: 5, scope: !11467)
!11476 = !DILocation(line: 2613, column: 8, scope: !11467)
!11477 = !DILocation(line: 2613, column: 14, scope: !11467)
!11478 = !DILocation(line: 2613, column: 30, scope: !11467)
!11479 = !DILocation(line: 2613, column: 36, scope: !11467)
!11480 = !DILocation(line: 2613, column: 27, scope: !11467)
!11481 = !DILocation(line: 2611, column: 12, scope: !11451)
!11482 = !DILocation(line: 2614, column: 16, scope: !11467)
!11483 = !DILocation(line: 2614, column: 5, scope: !11467)
!11484 = !DILocation(line: 2618, column: 18, scope: !11485)
!11485 = distinct !DILexicalBlock(scope: !11467, file: !3, line: 2618, column: 12)
!11486 = !DILocation(line: 2618, column: 12, scope: !11485)
!11487 = !DILocation(line: 2619, column: 5, scope: !11485)
!11488 = !DILocation(line: 2619, column: 9, scope: !11485)
!11489 = !DILocation(line: 2619, column: 28, scope: !11485)
!11490 = !DILocation(line: 2620, column: 9, scope: !11485)
!11491 = !DILocation(line: 2620, column: 12, scope: !11485)
!11492 = !DILocation(line: 2620, column: 18, scope: !11485)
!11493 = !DILocation(line: 2621, column: 9, scope: !11485)
!11494 = !DILocation(line: 2621, column: 12, scope: !11485)
!11495 = !DILocation(line: 2618, column: 12, scope: !11467)
!11496 = !DILocation(line: 2622, column: 16, scope: !11485)
!11497 = !DILocation(line: 2622, column: 5, scope: !11485)
!11498 = !DILocation(line: 2624, column: 22, scope: !11443)
!11499 = !DILocation(line: 2624, column: 3, scope: !11443)
!11500 = !DILocation(line: 2624, column: 9, scope: !11443)
!11501 = !DILocation(line: 2624, column: 20, scope: !11443)
!11502 = !DILocation(line: 2625, column: 1, scope: !11443)
!11503 = distinct !DISubprogram(name: "assign_parm_setup_block_p", scope: !3, file: !3, line: 2631, type: !11504, scopeLine: 2632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!11504 = !DISubroutineType(types: !11505)
!11505 = !{!3158, !6921}
!11506 = !DILocalVariable(name: "data", arg: 1, scope: !11503, file: !3, line: 2631, type: !6921)
!11507 = !DILocation(line: 2631, column: 57, scope: !11503)
!11508 = !DILocation(line: 2633, column: 7, scope: !11509)
!11509 = distinct !DILexicalBlock(scope: !11503, file: !3, line: 2633, column: 7)
!11510 = !DILocation(line: 2633, column: 13, scope: !11509)
!11511 = !DILocation(line: 2633, column: 26, scope: !11509)
!11512 = !DILocation(line: 2633, column: 7, scope: !11503)
!11513 = !DILocation(line: 2634, column: 5, scope: !11509)
!11514 = !DILocation(line: 2635, column: 7, scope: !11515)
!11515 = distinct !DILexicalBlock(scope: !11503, file: !3, line: 2635, column: 7)
!11516 = !DILocation(line: 2635, column: 35, scope: !11515)
!11517 = !DILocation(line: 2635, column: 7, scope: !11503)
!11518 = !DILocation(line: 2636, column: 5, scope: !11515)
!11519 = !DILocation(line: 2648, column: 3, scope: !11503)
!11520 = !DILocation(line: 2649, column: 1, scope: !11503)
!11521 = distinct !DISubprogram(name: "assign_parm_setup_block", scope: !3, file: !3, line: 2655, type: !6919, scopeLine: 2657, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!11522 = !DILocalVariable(name: "all", arg: 1, scope: !11521, file: !3, line: 2655, type: !6806)
!11523 = !DILocation(line: 2655, column: 55, scope: !11521)
!11524 = !DILocalVariable(name: "parm", arg: 2, scope: !11521, file: !3, line: 2656, type: !3045)
!11525 = !DILocation(line: 2656, column: 10, scope: !11521)
!11526 = !DILocalVariable(name: "data", arg: 3, scope: !11521, file: !3, line: 2656, type: !6921)
!11527 = !DILocation(line: 2656, column: 45, scope: !11521)
!11528 = !DILocalVariable(name: "entry_parm", scope: !11521, file: !3, line: 2658, type: !2924)
!11529 = !DILocation(line: 2658, column: 7, scope: !11521)
!11530 = !DILocation(line: 2658, column: 20, scope: !11521)
!11531 = !DILocation(line: 2658, column: 26, scope: !11521)
!11532 = !DILocalVariable(name: "stack_parm", scope: !11521, file: !3, line: 2659, type: !2924)
!11533 = !DILocation(line: 2659, column: 7, scope: !11521)
!11534 = !DILocation(line: 2659, column: 20, scope: !11521)
!11535 = !DILocation(line: 2659, column: 26, scope: !11521)
!11536 = !DILocalVariable(name: "size", scope: !11521, file: !3, line: 2660, type: !3014)
!11537 = !DILocation(line: 2660, column: 17, scope: !11521)
!11538 = !DILocalVariable(name: "size_stored", scope: !11521, file: !3, line: 2661, type: !3014)
!11539 = !DILocation(line: 2661, column: 17, scope: !11521)
!11540 = !DILocation(line: 2663, column: 7, scope: !11541)
!11541 = distinct !DILexicalBlock(scope: !11521, file: !3, line: 2663, column: 7)
!11542 = !DILocation(line: 2663, column: 29, scope: !11541)
!11543 = !DILocation(line: 2663, column: 7, scope: !11521)
!11544 = !DILocation(line: 2664, column: 46, scope: !11541)
!11545 = !DILocation(line: 2664, column: 18, scope: !11541)
!11546 = !DILocation(line: 2664, column: 16, scope: !11541)
!11547 = !DILocation(line: 2664, column: 5, scope: !11541)
!11548 = !DILocation(line: 2666, column: 29, scope: !11521)
!11549 = !DILocation(line: 2666, column: 35, scope: !11521)
!11550 = !DILocation(line: 2666, column: 10, scope: !11521)
!11551 = !DILocation(line: 2666, column: 8, scope: !11521)
!11552 = !DILocation(line: 2667, column: 17, scope: !11521)
!11553 = !DILocation(line: 2667, column: 15, scope: !11521)
!11554 = !DILocation(line: 2668, column: 7, scope: !11555)
!11555 = distinct !DILexicalBlock(scope: !11521, file: !3, line: 2668, column: 7)
!11556 = !DILocation(line: 2668, column: 18, scope: !11555)
!11557 = !DILocation(line: 2668, column: 7, scope: !11521)
!11558 = !DILocation(line: 2670, column: 27, scope: !11559)
!11559 = distinct !DILexicalBlock(scope: !11555, file: !3, line: 2669, column: 5)
!11560 = !DILocation(line: 2670, column: 7, scope: !11559)
!11561 = !DILocation(line: 2670, column: 25, scope: !11559)
!11562 = !DILocation(line: 2671, column: 49, scope: !11559)
!11563 = !DILocation(line: 2672, column: 12, scope: !11559)
!11564 = !DILocation(line: 2671, column: 20, scope: !11559)
!11565 = !DILocation(line: 2671, column: 18, scope: !11559)
!11566 = !DILocation(line: 2673, column: 11, scope: !11567)
!11567 = distinct !DILexicalBlock(scope: !11559, file: !3, line: 2673, column: 11)
!11568 = !DILocation(line: 2673, column: 52, scope: !11567)
!11569 = !DILocation(line: 2673, column: 49, scope: !11567)
!11570 = !DILocation(line: 2673, column: 11, scope: !11559)
!11571 = !DILocation(line: 2674, column: 2, scope: !11567)
!11572 = !DILocation(line: 2675, column: 27, scope: !11559)
!11573 = !DILocation(line: 2675, column: 39, scope: !11559)
!11574 = !DILocation(line: 2675, column: 7, scope: !11559)
!11575 = !DILocation(line: 2676, column: 5, scope: !11559)
!11576 = !DILocation(line: 2680, column: 7, scope: !11577)
!11577 = distinct !DILexicalBlock(scope: !11521, file: !3, line: 2680, column: 7)
!11578 = !DILocation(line: 2680, column: 26, scope: !11577)
!11579 = !DILocation(line: 2680, column: 29, scope: !11577)
!11580 = !DILocation(line: 2680, column: 51, scope: !11577)
!11581 = !DILocation(line: 2680, column: 7, scope: !11521)
!11582 = !DILocalVariable(name: "mem", scope: !11583, file: !3, line: 2682, type: !2924)
!11583 = distinct !DILexicalBlock(scope: !11577, file: !3, line: 2681, column: 5)
!11584 = !DILocation(line: 2682, column: 11, scope: !11583)
!11585 = !DILocation(line: 2693, column: 11, scope: !11586)
!11586 = distinct !DILexicalBlock(scope: !11583, file: !3, line: 2693, column: 11)
!11587 = !DILocation(line: 2693, column: 17, scope: !11586)
!11588 = !DILocation(line: 2693, column: 28, scope: !11586)
!11589 = !DILocation(line: 2693, column: 11, scope: !11583)
!11590 = !DILocation(line: 2695, column: 16, scope: !11591)
!11591 = distinct !DILexicalBlock(scope: !11586, file: !3, line: 2695, column: 16)
!11592 = !DILocation(line: 2695, column: 38, scope: !11591)
!11593 = !DILocation(line: 2695, column: 16, scope: !11586)
!11594 = !DILocation(line: 2698, column: 2, scope: !11591)
!11595 = !DILocation(line: 2700, column: 27, scope: !11583)
!11596 = !DILocation(line: 2700, column: 13, scope: !11583)
!11597 = !DILocation(line: 2700, column: 11, scope: !11583)
!11598 = !DILocation(line: 2703, column: 11, scope: !11599)
!11599 = distinct !DILexicalBlock(scope: !11583, file: !3, line: 2703, column: 11)
!11600 = !DILocation(line: 2703, column: 33, scope: !11599)
!11601 = !DILocation(line: 2703, column: 11, scope: !11583)
!11602 = !DILocation(line: 2705, column: 23, scope: !11603)
!11603 = distinct !DILexicalBlock(scope: !11599, file: !3, line: 2704, column: 2)
!11604 = !DILocation(line: 2705, column: 28, scope: !11603)
!11605 = !DILocation(line: 2706, column: 9, scope: !11603)
!11606 = !DILocation(line: 2706, column: 14, scope: !11603)
!11607 = !DILocation(line: 2705, column: 4, scope: !11603)
!11608 = !DILocation(line: 2707, column: 22, scope: !11603)
!11609 = !DILocation(line: 2707, column: 27, scope: !11603)
!11610 = !DILocation(line: 2707, column: 39, scope: !11603)
!11611 = !DILocation(line: 2707, column: 45, scope: !11603)
!11612 = !DILocation(line: 2707, column: 58, scope: !11603)
!11613 = !DILocation(line: 2707, column: 4, scope: !11603)
!11614 = !DILocation(line: 2708, column: 33, scope: !11603)
!11615 = !DILocation(line: 2708, column: 4, scope: !11603)
!11616 = !DILocation(line: 2708, column: 9, scope: !11603)
!11617 = !DILocation(line: 2708, column: 31, scope: !11603)
!11618 = !DILocation(line: 2709, column: 32, scope: !11603)
!11619 = !DILocation(line: 2709, column: 4, scope: !11603)
!11620 = !DILocation(line: 2709, column: 9, scope: !11603)
!11621 = !DILocation(line: 2709, column: 30, scope: !11603)
!11622 = !DILocation(line: 2710, column: 4, scope: !11603)
!11623 = !DILocation(line: 2711, column: 2, scope: !11603)
!11624 = !DILocation(line: 2713, column: 16, scope: !11625)
!11625 = distinct !DILexicalBlock(scope: !11599, file: !3, line: 2713, column: 16)
!11626 = !DILocation(line: 2713, column: 21, scope: !11625)
!11627 = !DILocation(line: 2713, column: 16, scope: !11599)
!11628 = !DILocation(line: 2718, column: 16, scope: !11629)
!11629 = distinct !DILexicalBlock(scope: !11625, file: !3, line: 2718, column: 16)
!11630 = !DILocation(line: 2718, column: 21, scope: !11629)
!11631 = !DILocation(line: 2718, column: 16, scope: !11625)
!11632 = !DILocalVariable(name: "mode", scope: !11633, file: !3, line: 2720, type: !13)
!11633 = distinct !DILexicalBlock(scope: !11629, file: !3, line: 2719, column: 2)
!11634 = !DILocation(line: 2720, column: 22, scope: !11633)
!11635 = !DILocation(line: 2721, column: 23, scope: !11633)
!11636 = !DILocation(line: 2721, column: 28, scope: !11633)
!11637 = !DILocation(line: 2721, column: 8, scope: !11633)
!11638 = !DILocation(line: 2723, column: 8, scope: !11639)
!11639 = distinct !DILexicalBlock(scope: !11633, file: !3, line: 2723, column: 8)
!11640 = !DILocation(line: 2723, column: 13, scope: !11639)
!11641 = !DILocation(line: 2723, column: 8, scope: !11633)
!11642 = !DILocalVariable(name: "reg", scope: !11643, file: !3, line: 2731, type: !2924)
!11643 = distinct !DILexicalBlock(scope: !11639, file: !3, line: 2730, column: 6)
!11644 = !DILocation(line: 2731, column: 12, scope: !11643)
!11645 = !DILocation(line: 2740, column: 22, scope: !11646)
!11646 = distinct !DILexicalBlock(scope: !11643, file: !3, line: 2739, column: 12)
!11647 = !DILocation(line: 2740, column: 28, scope: !11646)
!11648 = !DILocation(line: 2740, column: 9, scope: !11646)
!11649 = !DILocation(line: 2740, column: 7, scope: !11646)
!11650 = !DILocation(line: 2746, column: 40, scope: !11643)
!11651 = !DILocation(line: 2746, column: 45, scope: !11643)
!11652 = !DILocation(line: 2746, column: 24, scope: !11643)
!11653 = !DILocation(line: 2746, column: 55, scope: !11643)
!11654 = !DILocation(line: 2746, column: 8, scope: !11643)
!11655 = !DILocation(line: 2747, column: 6, scope: !11643)
!11656 = !DILocation(line: 2753, column: 13, scope: !11657)
!11657 = distinct !DILexicalBlock(scope: !11639, file: !3, line: 2753, column: 13)
!11658 = !DILocation(line: 2753, column: 18, scope: !11657)
!11659 = !DILocation(line: 2758, column: 6, scope: !11657)
!11660 = !DILocation(line: 2753, column: 13, scope: !11639)
!11661 = !DILocalVariable(name: "tem", scope: !11662, file: !3, line: 2762, type: !2924)
!11662 = distinct !DILexicalBlock(scope: !11657, file: !3, line: 2761, column: 6)
!11663 = !DILocation(line: 2762, column: 12, scope: !11662)
!11664 = !DILocalVariable(name: "x", scope: !11662, file: !3, line: 2762, type: !2924)
!11665 = !DILocation(line: 2762, column: 17, scope: !11662)
!11666 = !DILocalVariable(name: "by", scope: !11662, file: !3, line: 2763, type: !2948)
!11667 = !DILocation(line: 2763, column: 12, scope: !11662)
!11668 = !DILocation(line: 2763, column: 35, scope: !11662)
!11669 = !DILocation(line: 2763, column: 33, scope: !11662)
!11670 = !DILocation(line: 2763, column: 41, scope: !11662)
!11671 = !DILocation(line: 2763, column: 17, scope: !11662)
!11672 = !DILocalVariable(name: "reg", scope: !11662, file: !3, line: 2764, type: !2924)
!11673 = !DILocation(line: 2764, column: 12, scope: !11662)
!11674 = !DILocation(line: 2764, column: 31, scope: !11662)
!11675 = !DILocation(line: 2764, column: 42, scope: !11662)
!11676 = !DILocation(line: 2764, column: 18, scope: !11662)
!11677 = !DILocation(line: 2766, column: 39, scope: !11662)
!11678 = !DILocation(line: 2766, column: 50, scope: !11662)
!11679 = !DILocation(line: 2767, column: 31, scope: !11662)
!11680 = !DILocation(line: 2767, column: 5, scope: !11662)
!11681 = !DILocation(line: 2766, column: 12, scope: !11662)
!11682 = !DILocation(line: 2766, column: 10, scope: !11662)
!11683 = !DILocation(line: 2769, column: 30, scope: !11662)
!11684 = !DILocation(line: 2769, column: 35, scope: !11662)
!11685 = !DILocation(line: 2769, column: 14, scope: !11662)
!11686 = !DILocation(line: 2769, column: 12, scope: !11662)
!11687 = !DILocation(line: 2770, column: 24, scope: !11662)
!11688 = !DILocation(line: 2770, column: 29, scope: !11662)
!11689 = !DILocation(line: 2770, column: 8, scope: !11662)
!11690 = !DILocation(line: 2771, column: 6, scope: !11662)
!11691 = !DILocation(line: 2773, column: 27, scope: !11657)
!11692 = !DILocation(line: 2773, column: 47, scope: !11657)
!11693 = !DILocation(line: 2774, column: 6, scope: !11657)
!11694 = !DILocation(line: 2774, column: 18, scope: !11657)
!11695 = !DILocation(line: 2773, column: 6, scope: !11657)
!11696 = !DILocation(line: 2775, column: 2, scope: !11633)
!11697 = !DILocation(line: 2777, column: 23, scope: !11629)
!11698 = !DILocation(line: 2777, column: 43, scope: !11629)
!11699 = !DILocation(line: 2778, column: 9, scope: !11629)
!11700 = !DILocation(line: 2778, column: 21, scope: !11629)
!11701 = !DILocation(line: 2777, column: 2, scope: !11629)
!11702 = !DILocation(line: 2779, column: 5, scope: !11583)
!11703 = !DILocation(line: 2780, column: 12, scope: !11704)
!11704 = distinct !DILexicalBlock(scope: !11577, file: !3, line: 2780, column: 12)
!11705 = !DILocation(line: 2780, column: 18, scope: !11704)
!11706 = !DILocation(line: 2780, column: 29, scope: !11704)
!11707 = !DILocation(line: 2780, column: 12, scope: !11577)
!11708 = !DILocation(line: 2782, column: 26, scope: !11709)
!11709 = distinct !DILexicalBlock(scope: !11704, file: !3, line: 2781, column: 5)
!11710 = !DILocation(line: 2782, column: 31, scope: !11709)
!11711 = !DILocation(line: 2782, column: 54, scope: !11709)
!11712 = !DILocation(line: 2782, column: 59, scope: !11709)
!11713 = !DILocation(line: 2782, column: 7, scope: !11709)
!11714 = !DILocation(line: 2783, column: 24, scope: !11709)
!11715 = !DILocation(line: 2783, column: 36, scope: !11709)
!11716 = !DILocation(line: 2783, column: 42, scope: !11709)
!11717 = !DILocation(line: 2783, column: 54, scope: !11709)
!11718 = !DILocation(line: 2783, column: 7, scope: !11709)
!11719 = !DILocation(line: 2785, column: 36, scope: !11709)
!11720 = !DILocation(line: 2785, column: 7, scope: !11709)
!11721 = !DILocation(line: 2785, column: 12, scope: !11709)
!11722 = !DILocation(line: 2785, column: 34, scope: !11709)
!11723 = !DILocation(line: 2786, column: 35, scope: !11709)
!11724 = !DILocation(line: 2786, column: 7, scope: !11709)
!11725 = !DILocation(line: 2786, column: 12, scope: !11709)
!11726 = !DILocation(line: 2786, column: 33, scope: !11709)
!11727 = !DILocation(line: 2787, column: 7, scope: !11709)
!11728 = !DILocation(line: 2788, column: 5, scope: !11709)
!11729 = !DILocation(line: 2790, column: 22, scope: !11521)
!11730 = !DILocation(line: 2790, column: 3, scope: !11521)
!11731 = !DILocation(line: 2790, column: 9, scope: !11521)
!11732 = !DILocation(line: 2790, column: 20, scope: !11521)
!11733 = !DILocation(line: 2791, column: 3, scope: !11521)
!11734 = !DILocation(line: 2792, column: 1, scope: !11521)
!11735 = distinct !DISubprogram(name: "assign_parm_setup_reg", scope: !3, file: !3, line: 2798, type: !6919, scopeLine: 2800, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!11736 = !DILocalVariable(name: "all", arg: 1, scope: !11735, file: !3, line: 2798, type: !6806)
!11737 = !DILocation(line: 2798, column: 53, scope: !11735)
!11738 = !DILocalVariable(name: "parm", arg: 2, scope: !11735, file: !3, line: 2798, type: !3045)
!11739 = !DILocation(line: 2798, column: 63, scope: !11735)
!11740 = !DILocalVariable(name: "data", arg: 3, scope: !11735, file: !3, line: 2799, type: !6921)
!11741 = !DILocation(line: 2799, column: 39, scope: !11735)
!11742 = !DILocalVariable(name: "parmreg", scope: !11735, file: !3, line: 2801, type: !2924)
!11743 = !DILocation(line: 2801, column: 7, scope: !11735)
!11744 = !DILocalVariable(name: "promoted_nominal_mode", scope: !11735, file: !3, line: 2802, type: !13)
!11745 = !DILocation(line: 2802, column: 21, scope: !11735)
!11746 = !DILocalVariable(name: "unsignedp", scope: !11735, file: !3, line: 2803, type: !2948)
!11747 = !DILocation(line: 2803, column: 7, scope: !11735)
!11748 = !DILocation(line: 2803, column: 19, scope: !11735)
!11749 = !DILocalVariable(name: "did_conversion", scope: !11735, file: !3, line: 2804, type: !3158)
!11750 = !DILocation(line: 2804, column: 8, scope: !11735)
!11751 = !DILocation(line: 2810, column: 30, scope: !11735)
!11752 = !DILocation(line: 2810, column: 36, scope: !11735)
!11753 = !DILocation(line: 2810, column: 50, scope: !11735)
!11754 = !DILocation(line: 2810, column: 56, scope: !11735)
!11755 = !DILocation(line: 2811, column: 9, scope: !11735)
!11756 = !DILocation(line: 2810, column: 7, scope: !11735)
!11757 = !DILocation(line: 2810, column: 5, scope: !11735)
!11758 = !DILocation(line: 2813, column: 26, scope: !11735)
!11759 = !DILocation(line: 2813, column: 13, scope: !11735)
!11760 = !DILocation(line: 2813, column: 11, scope: !11735)
!11761 = !DILocation(line: 2815, column: 8, scope: !11762)
!11762 = distinct !DILexicalBlock(scope: !11735, file: !3, line: 2815, column: 7)
!11763 = !DILocation(line: 2815, column: 7, scope: !11735)
!11764 = !DILocation(line: 2816, column: 20, scope: !11762)
!11765 = !DILocation(line: 2816, column: 5, scope: !11762)
!11766 = !DILocation(line: 2820, column: 7, scope: !11767)
!11767 = distinct !DILexicalBlock(scope: !11735, file: !3, line: 2820, column: 7)
!11768 = !DILocation(line: 2820, column: 13, scope: !11767)
!11769 = !DILocation(line: 2820, column: 7, scope: !11735)
!11770 = !DILocalVariable(name: "x", scope: !11771, file: !3, line: 2822, type: !2924)
!11771 = distinct !DILexicalBlock(scope: !11767, file: !3, line: 2821, column: 5)
!11772 = !DILocation(line: 2822, column: 11, scope: !11771)
!11773 = !DILocation(line: 2822, column: 28, scope: !11771)
!11774 = !DILocation(line: 2822, column: 71, scope: !11771)
!11775 = !DILocation(line: 2822, column: 15, scope: !11771)
!11776 = !DILocation(line: 2823, column: 27, scope: !11771)
!11777 = !DILocation(line: 2823, column: 30, scope: !11771)
!11778 = !DILocation(line: 2823, column: 7, scope: !11771)
!11779 = !DILocation(line: 2824, column: 7, scope: !11771)
!11780 = !DILocation(line: 2825, column: 5, scope: !11771)
!11781 = !DILocation(line: 2827, column: 5, scope: !11767)
!11782 = !DILocation(line: 2829, column: 33, scope: !11735)
!11783 = !DILocation(line: 2829, column: 3, scope: !11735)
!11784 = !DILocation(line: 2833, column: 7, scope: !11785)
!11785 = distinct !DILexicalBlock(scope: !11735, file: !3, line: 2833, column: 7)
!11786 = !DILocation(line: 2833, column: 13, scope: !11785)
!11787 = !DILocation(line: 2833, column: 29, scope: !11785)
!11788 = !DILocation(line: 2833, column: 35, scope: !11785)
!11789 = !DILocation(line: 2833, column: 26, scope: !11785)
!11790 = !DILocation(line: 2834, column: 7, scope: !11785)
!11791 = !DILocation(line: 2834, column: 10, scope: !11785)
!11792 = !DILocation(line: 2834, column: 35, scope: !11785)
!11793 = !DILocation(line: 2834, column: 41, scope: !11785)
!11794 = !DILocation(line: 2834, column: 32, scope: !11785)
!11795 = !DILocation(line: 2833, column: 7, scope: !11735)
!11796 = !DILocalVariable(name: "save_tree_used", scope: !11797, file: !3, line: 2836, type: !2948)
!11797 = distinct !DILexicalBlock(scope: !11785, file: !3, line: 2835, column: 5)
!11798 = !DILocation(line: 2836, column: 11, scope: !11797)
!11799 = !DILocalVariable(name: "tempreg", scope: !11797, file: !3, line: 2857, type: !2924)
!11800 = !DILocation(line: 2857, column: 11, scope: !11797)
!11801 = !DILocation(line: 2857, column: 34, scope: !11797)
!11802 = !DILocation(line: 2857, column: 21, scope: !11797)
!11803 = !DILocation(line: 2859, column: 23, scope: !11797)
!11804 = !DILocation(line: 2859, column: 46, scope: !11797)
!11805 = !DILocation(line: 2859, column: 52, scope: !11797)
!11806 = !DILocation(line: 2859, column: 32, scope: !11797)
!11807 = !DILocation(line: 2859, column: 7, scope: !11797)
!11808 = !DILocation(line: 2861, column: 26, scope: !11797)
!11809 = !DILocation(line: 2861, column: 31, scope: !11797)
!11810 = !DILocation(line: 2861, column: 54, scope: !11797)
!11811 = !DILocation(line: 2861, column: 59, scope: !11797)
!11812 = !DILocation(line: 2861, column: 7, scope: !11797)
!11813 = !DILocation(line: 2862, column: 34, scope: !11797)
!11814 = !DILocation(line: 2862, column: 40, scope: !11797)
!11815 = !DILocation(line: 2862, column: 54, scope: !11797)
!11816 = !DILocation(line: 2862, column: 63, scope: !11797)
!11817 = !DILocation(line: 2862, column: 17, scope: !11797)
!11818 = !DILocation(line: 2862, column: 15, scope: !11797)
!11819 = !DILocation(line: 2864, column: 11, scope: !11820)
!11820 = distinct !DILexicalBlock(scope: !11797, file: !3, line: 2864, column: 11)
!11821 = !DILocation(line: 2864, column: 30, scope: !11820)
!11822 = !DILocation(line: 2865, column: 4, scope: !11820)
!11823 = !DILocation(line: 2865, column: 7, scope: !11820)
!11824 = !DILocation(line: 2865, column: 29, scope: !11820)
!11825 = !DILocation(line: 2865, column: 35, scope: !11820)
!11826 = !DILocation(line: 2865, column: 26, scope: !11820)
!11827 = !DILocation(line: 2866, column: 4, scope: !11820)
!11828 = !DILocation(line: 2866, column: 7, scope: !11820)
!11829 = !DILocation(line: 2867, column: 4, scope: !11820)
!11830 = !DILocation(line: 2867, column: 7, scope: !11820)
!11831 = !DILocation(line: 2867, column: 13, scope: !11820)
!11832 = !DILocation(line: 2867, column: 29, scope: !11820)
!11833 = !DILocation(line: 2867, column: 35, scope: !11820)
!11834 = !DILocation(line: 2867, column: 26, scope: !11820)
!11835 = !DILocation(line: 2868, column: 4, scope: !11820)
!11836 = !DILocation(line: 2868, column: 7, scope: !11820)
!11837 = !DILocation(line: 2868, column: 42, scope: !11820)
!11838 = !DILocation(line: 2868, column: 39, scope: !11820)
!11839 = !DILocation(line: 2869, column: 4, scope: !11820)
!11840 = !DILocation(line: 2869, column: 7, scope: !11820)
!11841 = !DILocation(line: 2870, column: 9, scope: !11820)
!11842 = !DILocation(line: 2870, column: 7, scope: !11820)
!11843 = !DILocation(line: 2864, column: 11, scope: !11797)
!11844 = !DILocation(line: 2874, column: 4, scope: !11845)
!11845 = distinct !DILexicalBlock(scope: !11820, file: !3, line: 2871, column: 2)
!11846 = !DILocation(line: 2874, column: 36, scope: !11845)
!11847 = !DILocation(line: 2875, column: 4, scope: !11845)
!11848 = !DILocalVariable(name: "_rtx", scope: !11849, file: !3, line: 2875, type: !11850)
!11849 = distinct !DILexicalBlock(scope: !11845, file: !3, line: 2875, column: 4)
!11850 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2924)
!11851 = !DILocation(line: 2875, column: 4, scope: !11849)
!11852 = !DILocation(line: 2875, column: 4, scope: !11853)
!11853 = distinct !DILexicalBlock(scope: !11849, file: !3, line: 2875, column: 4)
!11854 = !DILocation(line: 2875, column: 4, scope: !11855)
!11855 = distinct !DILexicalBlock(scope: !11853, file: !3, line: 2875, column: 4)
!11856 = !DILocation(line: 2876, column: 2, scope: !11845)
!11857 = !DILocation(line: 2879, column: 24, scope: !11797)
!11858 = !DILocation(line: 2879, column: 22, scope: !11797)
!11859 = !DILocation(line: 2880, column: 26, scope: !11797)
!11860 = !DILocation(line: 2880, column: 43, scope: !11797)
!11861 = !DILocation(line: 2880, column: 49, scope: !11797)
!11862 = !DILocation(line: 2880, column: 63, scope: !11797)
!11863 = !DILocation(line: 2880, column: 32, scope: !11797)
!11864 = !DILocation(line: 2880, column: 7, scope: !11797)
!11865 = !DILocation(line: 2881, column: 26, scope: !11797)
!11866 = !DILocation(line: 2881, column: 7, scope: !11797)
!11867 = !DILocation(line: 2881, column: 24, scope: !11797)
!11868 = !DILocation(line: 2882, column: 36, scope: !11797)
!11869 = !DILocation(line: 2882, column: 7, scope: !11797)
!11870 = !DILocation(line: 2882, column: 12, scope: !11797)
!11871 = !DILocation(line: 2882, column: 34, scope: !11797)
!11872 = !DILocation(line: 2883, column: 35, scope: !11797)
!11873 = !DILocation(line: 2883, column: 7, scope: !11797)
!11874 = !DILocation(line: 2883, column: 12, scope: !11797)
!11875 = !DILocation(line: 2883, column: 33, scope: !11797)
!11876 = !DILocation(line: 2884, column: 7, scope: !11797)
!11877 = !DILocation(line: 2886, column: 22, scope: !11797)
!11878 = !DILocation(line: 2887, column: 5, scope: !11797)
!11879 = !DILocation(line: 2889, column: 21, scope: !11785)
!11880 = !DILocation(line: 2889, column: 44, scope: !11785)
!11881 = !DILocation(line: 2889, column: 50, scope: !11785)
!11882 = !DILocation(line: 2889, column: 30, scope: !11785)
!11883 = !DILocation(line: 2889, column: 5, scope: !11785)
!11884 = !DILocation(line: 2893, column: 7, scope: !11885)
!11885 = distinct !DILexicalBlock(scope: !11735, file: !3, line: 2893, column: 7)
!11886 = !DILocation(line: 2893, column: 13, scope: !11885)
!11887 = !DILocation(line: 2894, column: 7, scope: !11885)
!11888 = !DILocation(line: 2894, column: 10, scope: !11885)
!11889 = !DILocation(line: 2894, column: 39, scope: !11885)
!11890 = !DILocation(line: 2896, column: 7, scope: !11885)
!11891 = !DILocation(line: 2896, column: 11, scope: !11885)
!11892 = !DILocation(line: 2896, column: 43, scope: !11885)
!11893 = !DILocation(line: 2896, column: 40, scope: !11885)
!11894 = !DILocation(line: 2897, column: 4, scope: !11885)
!11895 = !DILocation(line: 2897, column: 30, scope: !11885)
!11896 = !DILocation(line: 2897, column: 7, scope: !11885)
!11897 = !DILocation(line: 2893, column: 7, scope: !11735)
!11898 = !DILocation(line: 2901, column: 30, scope: !11899)
!11899 = distinct !DILexicalBlock(scope: !11885, file: !3, line: 2898, column: 5)
!11900 = !DILocation(line: 2901, column: 17, scope: !11899)
!11901 = !DILocation(line: 2901, column: 15, scope: !11899)
!11902 = !DILocation(line: 2902, column: 22, scope: !11899)
!11903 = !DILocation(line: 2902, column: 7, scope: !11899)
!11904 = !DILocation(line: 2904, column: 11, scope: !11905)
!11905 = distinct !DILexicalBlock(scope: !11899, file: !3, line: 2904, column: 11)
!11906 = !DILocation(line: 2904, column: 33, scope: !11905)
!11907 = !DILocation(line: 2904, column: 30, scope: !11905)
!11908 = !DILocation(line: 2904, column: 11, scope: !11899)
!11909 = !DILocalVariable(name: "tempreg", scope: !11910, file: !3, line: 2906, type: !2924)
!11910 = distinct !DILexicalBlock(scope: !11905, file: !3, line: 2905, column: 2)
!11911 = !DILocation(line: 2906, column: 8, scope: !11910)
!11912 = !DILocation(line: 2906, column: 31, scope: !11910)
!11913 = !DILocation(line: 2906, column: 18, scope: !11910)
!11914 = !DILocalVariable(name: "unsigned_p", scope: !11910, file: !3, line: 2907, type: !2948)
!11915 = !DILocation(line: 2907, column: 8, scope: !11910)
!11916 = !DILocation(line: 2907, column: 21, scope: !11910)
!11917 = !DILocation(line: 2909, column: 23, scope: !11910)
!11918 = !DILocation(line: 2909, column: 28, scope: !11910)
!11919 = !DILocation(line: 2910, column: 9, scope: !11910)
!11920 = !DILocation(line: 2910, column: 14, scope: !11910)
!11921 = !DILocation(line: 2909, column: 4, scope: !11910)
!11922 = !DILocation(line: 2911, column: 20, scope: !11910)
!11923 = !DILocation(line: 2911, column: 29, scope: !11910)
!11924 = !DILocation(line: 2911, column: 4, scope: !11910)
!11925 = !DILocation(line: 2912, column: 31, scope: !11910)
!11926 = !DILocation(line: 2912, column: 51, scope: !11910)
!11927 = !DILocation(line: 2912, column: 60, scope: !11910)
!11928 = !DILocation(line: 2912, column: 14, scope: !11910)
!11929 = !DILocation(line: 2912, column: 12, scope: !11910)
!11930 = !DILocation(line: 2913, column: 20, scope: !11910)
!11931 = !DILocation(line: 2913, column: 29, scope: !11910)
!11932 = !DILocation(line: 2913, column: 4, scope: !11910)
!11933 = !DILocation(line: 2914, column: 33, scope: !11910)
!11934 = !DILocation(line: 2914, column: 4, scope: !11910)
!11935 = !DILocation(line: 2914, column: 9, scope: !11910)
!11936 = !DILocation(line: 2914, column: 31, scope: !11910)
!11937 = !DILocation(line: 2915, column: 32, scope: !11910)
!11938 = !DILocation(line: 2915, column: 4, scope: !11910)
!11939 = !DILocation(line: 2915, column: 9, scope: !11910)
!11940 = !DILocation(line: 2915, column: 30, scope: !11910)
!11941 = !DILocation(line: 2916, column: 4, scope: !11910)
!11942 = !DILocation(line: 2918, column: 19, scope: !11910)
!11943 = !DILocation(line: 2919, column: 2, scope: !11910)
!11944 = !DILocation(line: 2921, column: 18, scope: !11905)
!11945 = !DILocation(line: 2921, column: 27, scope: !11905)
!11946 = !DILocation(line: 2921, column: 2, scope: !11905)
!11947 = !DILocation(line: 2923, column: 7, scope: !11899)
!11948 = !DILocation(line: 2927, column: 7, scope: !11899)
!11949 = !DILocation(line: 2927, column: 13, scope: !11899)
!11950 = !DILocation(line: 2927, column: 24, scope: !11899)
!11951 = !DILocation(line: 2928, column: 5, scope: !11899)
!11952 = !DILocation(line: 2935, column: 7, scope: !11953)
!11953 = distinct !DILexicalBlock(scope: !11735, file: !3, line: 2935, column: 7)
!11954 = !DILocation(line: 2935, column: 13, scope: !11953)
!11955 = !DILocation(line: 2935, column: 29, scope: !11953)
!11956 = !DILocation(line: 2935, column: 35, scope: !11953)
!11957 = !DILocation(line: 2935, column: 26, scope: !11953)
!11958 = !DILocation(line: 2936, column: 7, scope: !11953)
!11959 = !DILocation(line: 2936, column: 11, scope: !11953)
!11960 = !DILocation(line: 2937, column: 7, scope: !11953)
!11961 = !DILocation(line: 2937, column: 10, scope: !11953)
!11962 = !DILocation(line: 2937, column: 16, scope: !11953)
!11963 = !DILocation(line: 2937, column: 27, scope: !11953)
!11964 = !DILocation(line: 2938, column: 7, scope: !11953)
!11965 = !DILocation(line: 2938, column: 10, scope: !11953)
!11966 = !DILocation(line: 2939, column: 7, scope: !11953)
!11967 = !DILocation(line: 2939, column: 10, scope: !11953)
!11968 = !DILocation(line: 2939, column: 16, scope: !11953)
!11969 = !DILocation(line: 2939, column: 23, scope: !11953)
!11970 = !DILocation(line: 2939, column: 30, scope: !11953)
!11971 = !DILocation(line: 2939, column: 34, scope: !11953)
!11972 = !DILocation(line: 2940, column: 7, scope: !11953)
!11973 = !DILocation(line: 2940, column: 27, scope: !11953)
!11974 = !DILocation(line: 2941, column: 6, scope: !11953)
!11975 = !DILocation(line: 2940, column: 10, scope: !11953)
!11976 = !DILocation(line: 2935, column: 7, scope: !11735)
!11977 = !DILocalVariable(name: "linsn", scope: !11978, file: !3, line: 2943, type: !2924)
!11978 = distinct !DILexicalBlock(scope: !11953, file: !3, line: 2942, column: 5)
!11979 = !DILocation(line: 2943, column: 11, scope: !11978)
!11980 = !DILocation(line: 2943, column: 19, scope: !11978)
!11981 = !DILocalVariable(name: "sinsn", scope: !11978, file: !3, line: 2944, type: !2924)
!11982 = !DILocation(line: 2944, column: 11, scope: !11978)
!11983 = !DILocalVariable(name: "set", scope: !11978, file: !3, line: 2944, type: !2924)
!11984 = !DILocation(line: 2944, column: 18, scope: !11978)
!11985 = !DILocation(line: 2947, column: 11, scope: !11986)
!11986 = distinct !DILexicalBlock(scope: !11978, file: !3, line: 2947, column: 11)
!11987 = !DILocation(line: 2947, column: 30, scope: !11986)
!11988 = !DILocation(line: 2947, column: 11, scope: !11978)
!11989 = !DILocalVariable(name: "submode", scope: !11990, file: !3, line: 2949, type: !13)
!11990 = distinct !DILexicalBlock(scope: !11986, file: !3, line: 2948, column: 2)
!11991 = !DILocation(line: 2949, column: 22, scope: !11990)
!11992 = !DILocation(line: 2950, column: 8, scope: !11990)
!11993 = !DILocalVariable(name: "regnor", scope: !11990, file: !3, line: 2951, type: !2948)
!11994 = !DILocation(line: 2951, column: 8, scope: !11990)
!11995 = !DILocation(line: 2951, column: 17, scope: !11990)
!11996 = !DILocalVariable(name: "regnoi", scope: !11990, file: !3, line: 2952, type: !2948)
!11997 = !DILocation(line: 2952, column: 8, scope: !11990)
!11998 = !DILocation(line: 2952, column: 17, scope: !11990)
!11999 = !DILocalVariable(name: "stackr", scope: !11990, file: !3, line: 2953, type: !2924)
!12000 = !DILocation(line: 2953, column: 8, scope: !11990)
!12001 = !DILocation(line: 2953, column: 17, scope: !11990)
!12002 = !DILocalVariable(name: "stacki", scope: !11990, file: !3, line: 2954, type: !2924)
!12003 = !DILocation(line: 2954, column: 8, scope: !11990)
!12004 = !DILocation(line: 2954, column: 17, scope: !11990)
!12005 = !DILocation(line: 2959, column: 17, scope: !12006)
!12006 = distinct !DILexicalBlock(scope: !11990, file: !3, line: 2959, column: 4)
!12007 = !DILocation(line: 2959, column: 15, scope: !12006)
!12008 = !DILocation(line: 2959, column: 9, scope: !12006)
!12009 = !DILocation(line: 2959, column: 24, scope: !12010)
!12010 = distinct !DILexicalBlock(scope: !12006, file: !3, line: 2959, column: 4)
!12011 = !DILocation(line: 2959, column: 30, scope: !12010)
!12012 = !DILocation(line: 2959, column: 4, scope: !12006)
!12013 = !DILocation(line: 2962, column: 14, scope: !12014)
!12014 = distinct !DILexicalBlock(scope: !12010, file: !3, line: 2961, column: 6)
!12015 = !DILocation(line: 2962, column: 12, scope: !12014)
!12016 = !DILocation(line: 2963, column: 12, scope: !12017)
!12017 = distinct !DILexicalBlock(scope: !12014, file: !3, line: 2963, column: 12)
!12018 = !DILocation(line: 2963, column: 16, scope: !12017)
!12019 = !DILocation(line: 2963, column: 12, scope: !12014)
!12020 = !DILocation(line: 2964, column: 3, scope: !12017)
!12021 = !DILocation(line: 2966, column: 12, scope: !12022)
!12022 = distinct !DILexicalBlock(scope: !12014, file: !3, line: 2966, column: 12)
!12023 = !DILocation(line: 2966, column: 30, scope: !12022)
!12024 = !DILocation(line: 2966, column: 45, scope: !12022)
!12025 = !DILocation(line: 2966, column: 27, scope: !12022)
!12026 = !DILocation(line: 2966, column: 12, scope: !12014)
!12027 = !DILocation(line: 2967, column: 24, scope: !12022)
!12028 = !DILocation(line: 2967, column: 42, scope: !12022)
!12029 = !DILocation(line: 2967, column: 3, scope: !12022)
!12030 = !DILocation(line: 2968, column: 17, scope: !12031)
!12031 = distinct !DILexicalBlock(scope: !12022, file: !3, line: 2968, column: 17)
!12032 = !DILocation(line: 2968, column: 35, scope: !12031)
!12033 = !DILocation(line: 2968, column: 50, scope: !12031)
!12034 = !DILocation(line: 2968, column: 32, scope: !12031)
!12035 = !DILocation(line: 2968, column: 17, scope: !12022)
!12036 = !DILocation(line: 2969, column: 24, scope: !12031)
!12037 = !DILocation(line: 2969, column: 42, scope: !12031)
!12038 = !DILocation(line: 2969, column: 3, scope: !12031)
!12039 = !DILocation(line: 2970, column: 6, scope: !12014)
!12040 = !DILocation(line: 2960, column: 36, scope: !12010)
!12041 = !DILocation(line: 2960, column: 17, scope: !12010)
!12042 = !DILocation(line: 2960, column: 15, scope: !12010)
!12043 = !DILocation(line: 2959, column: 4, scope: !12010)
!12044 = distinct !{!12044, !12012, !12045}
!12045 = !DILocation(line: 2970, column: 6, scope: !12006)
!12046 = !DILocation(line: 2971, column: 2, scope: !11990)
!12047 = !DILocation(line: 2972, column: 23, scope: !12048)
!12048 = distinct !DILexicalBlock(scope: !11986, file: !3, line: 2972, column: 16)
!12049 = !DILocation(line: 2972, column: 21, scope: !12048)
!12050 = !DILocation(line: 2972, column: 43, scope: !12048)
!12051 = !DILocation(line: 2973, column: 9, scope: !12048)
!12052 = !DILocation(line: 2973, column: 12, scope: !12048)
!12053 = !DILocation(line: 2973, column: 30, scope: !12048)
!12054 = !DILocation(line: 2973, column: 27, scope: !12048)
!12055 = !DILocation(line: 2972, column: 16, scope: !11986)
!12056 = !DILocation(line: 2974, column: 23, scope: !12048)
!12057 = !DILocation(line: 2974, column: 41, scope: !12048)
!12058 = !DILocation(line: 2974, column: 47, scope: !12048)
!12059 = !DILocation(line: 2974, column: 2, scope: !12048)
!12060 = !DILocation(line: 2975, column: 5, scope: !11978)
!12061 = !DILocation(line: 2978, column: 7, scope: !12062)
!12062 = distinct !DILexicalBlock(scope: !11735, file: !3, line: 2978, column: 7)
!12063 = !DILocation(line: 2978, column: 7, scope: !11735)
!12064 = !DILocation(line: 2979, column: 23, scope: !12062)
!12065 = !DILocation(line: 2980, column: 9, scope: !12062)
!12066 = !DILocation(line: 2979, column: 5, scope: !12062)
!12067 = !DILocation(line: 2981, column: 1, scope: !11735)
!12068 = distinct !DISubprogram(name: "assign_parm_setup_stack", scope: !3, file: !3, line: 2987, type: !6919, scopeLine: 2989, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12069 = !DILocalVariable(name: "all", arg: 1, scope: !12068, file: !3, line: 2987, type: !6806)
!12070 = !DILocation(line: 2987, column: 55, scope: !12068)
!12071 = !DILocalVariable(name: "parm", arg: 2, scope: !12068, file: !3, line: 2987, type: !3045)
!12072 = !DILocation(line: 2987, column: 65, scope: !12068)
!12073 = !DILocalVariable(name: "data", arg: 3, scope: !12068, file: !3, line: 2988, type: !6921)
!12074 = !DILocation(line: 2988, column: 41, scope: !12068)
!12075 = !DILocalVariable(name: "to_conversion", scope: !12068, file: !3, line: 2992, type: !3158)
!12076 = !DILocation(line: 2992, column: 8, scope: !12068)
!12077 = !DILocation(line: 2994, column: 33, scope: !12068)
!12078 = !DILocation(line: 2994, column: 3, scope: !12068)
!12079 = !DILocation(line: 2996, column: 7, scope: !12080)
!12080 = distinct !DILexicalBlock(scope: !12068, file: !3, line: 2996, column: 7)
!12081 = !DILocation(line: 2996, column: 13, scope: !12080)
!12082 = !DILocation(line: 2996, column: 30, scope: !12080)
!12083 = !DILocation(line: 2996, column: 36, scope: !12080)
!12084 = !DILocation(line: 2996, column: 27, scope: !12080)
!12085 = !DILocation(line: 2996, column: 7, scope: !12068)
!12086 = !DILocalVariable(name: "tempreg", scope: !12087, file: !3, line: 2999, type: !2924)
!12087 = distinct !DILexicalBlock(scope: !12080, file: !3, line: 2997, column: 5)
!12088 = !DILocation(line: 2999, column: 11, scope: !12087)
!12089 = !DILocation(line: 2999, column: 34, scope: !12087)
!12090 = !DILocation(line: 2999, column: 21, scope: !12087)
!12091 = !DILocation(line: 3001, column: 23, scope: !12087)
!12092 = !DILocation(line: 3001, column: 46, scope: !12087)
!12093 = !DILocation(line: 3001, column: 52, scope: !12087)
!12094 = !DILocation(line: 3001, column: 32, scope: !12087)
!12095 = !DILocation(line: 3001, column: 7, scope: !12087)
!12096 = !DILocation(line: 3003, column: 26, scope: !12087)
!12097 = !DILocation(line: 3003, column: 31, scope: !12087)
!12098 = !DILocation(line: 3003, column: 54, scope: !12087)
!12099 = !DILocation(line: 3003, column: 59, scope: !12087)
!12100 = !DILocation(line: 3003, column: 7, scope: !12087)
!12101 = !DILocation(line: 3004, column: 21, scope: !12087)
!12102 = !DILocation(line: 3006, column: 43, scope: !12087)
!12103 = !DILocation(line: 3006, column: 49, scope: !12087)
!12104 = !DILocation(line: 3006, column: 63, scope: !12087)
!12105 = !DILocation(line: 3007, column: 8, scope: !12087)
!12106 = !DILocation(line: 3006, column: 26, scope: !12087)
!12107 = !DILocation(line: 3006, column: 7, scope: !12087)
!12108 = !DILocation(line: 3006, column: 13, scope: !12087)
!12109 = !DILocation(line: 3006, column: 24, scope: !12087)
!12110 = !DILocation(line: 3009, column: 11, scope: !12111)
!12111 = distinct !DILexicalBlock(scope: !12087, file: !3, line: 3009, column: 11)
!12112 = !DILocation(line: 3009, column: 17, scope: !12111)
!12113 = !DILocation(line: 3009, column: 11, scope: !12087)
!12114 = !DILocalVariable(name: "offset", scope: !12115, file: !3, line: 3011, type: !2948)
!12115 = distinct !DILexicalBlock(scope: !12111, file: !3, line: 3010, column: 2)
!12116 = !DILocation(line: 3011, column: 8, scope: !12115)
!12117 = !DILocation(line: 3011, column: 40, scope: !12115)
!12118 = !DILocation(line: 3011, column: 46, scope: !12115)
!12119 = !DILocation(line: 3012, column: 12, scope: !12115)
!12120 = !DILocation(line: 3011, column: 17, scope: !12115)
!12121 = !DILocation(line: 3015, column: 8, scope: !12115)
!12122 = !DILocation(line: 3014, column: 4, scope: !12115)
!12123 = !DILocation(line: 3014, column: 10, scope: !12115)
!12124 = !DILocation(line: 3015, column: 6, scope: !12115)
!12125 = !DILocation(line: 3016, column: 8, scope: !12126)
!12126 = distinct !DILexicalBlock(scope: !12115, file: !3, line: 3016, column: 8)
!12127 = !DILocation(line: 3016, column: 15, scope: !12126)
!12128 = !DILocation(line: 3016, column: 18, scope: !12126)
!12129 = !DILocation(line: 3016, column: 8, scope: !12115)
!12130 = !DILocation(line: 3017, column: 22, scope: !12126)
!12131 = !DILocation(line: 3017, column: 28, scope: !12126)
!12132 = !DILocation(line: 3018, column: 23, scope: !12126)
!12133 = !DILocation(line: 3019, column: 9, scope: !12126)
!12134 = !DILocation(line: 3018, column: 8, scope: !12126)
!12135 = !DILocation(line: 3017, column: 6, scope: !12126)
!12136 = !DILocation(line: 3020, column: 2, scope: !12115)
!12137 = !DILocation(line: 3021, column: 5, scope: !12087)
!12138 = !DILocation(line: 3023, column: 7, scope: !12139)
!12139 = distinct !DILexicalBlock(scope: !12068, file: !3, line: 3023, column: 7)
!12140 = !DILocation(line: 3023, column: 13, scope: !12139)
!12141 = !DILocation(line: 3023, column: 27, scope: !12139)
!12142 = !DILocation(line: 3023, column: 33, scope: !12139)
!12143 = !DILocation(line: 3023, column: 24, scope: !12139)
!12144 = !DILocation(line: 3023, column: 7, scope: !12068)
!12145 = !DILocalVariable(name: "src", scope: !12146, file: !3, line: 3025, type: !2924)
!12146 = distinct !DILexicalBlock(scope: !12139, file: !3, line: 3024, column: 5)
!12147 = !DILocation(line: 3025, column: 11, scope: !12146)
!12148 = !DILocalVariable(name: "dest", scope: !12146, file: !3, line: 3025, type: !2924)
!12149 = !DILocation(line: 3025, column: 16, scope: !12146)
!12150 = !DILocation(line: 3027, column: 11, scope: !12151)
!12151 = distinct !DILexicalBlock(scope: !12146, file: !3, line: 3027, column: 11)
!12152 = !DILocation(line: 3027, column: 17, scope: !12151)
!12153 = !DILocation(line: 3027, column: 28, scope: !12151)
!12154 = !DILocation(line: 3027, column: 11, scope: !12146)
!12155 = !DILocalVariable(name: "align", scope: !12156, file: !3, line: 3029, type: !2948)
!12156 = distinct !DILexicalBlock(scope: !12151, file: !3, line: 3028, column: 2)
!12157 = !DILocation(line: 3029, column: 8, scope: !12156)
!12158 = !DILocation(line: 3029, column: 16, scope: !12156)
!12159 = !DILocation(line: 3033, column: 28, scope: !12156)
!12160 = !DILocation(line: 3034, column: 7, scope: !12156)
!12161 = !DILocation(line: 3035, column: 7, scope: !12156)
!12162 = !DILocation(line: 3033, column: 8, scope: !12156)
!12163 = !DILocation(line: 3032, column: 4, scope: !12156)
!12164 = !DILocation(line: 3032, column: 10, scope: !12156)
!12165 = !DILocation(line: 3033, column: 6, scope: !12156)
!12166 = !DILocation(line: 3036, column: 24, scope: !12156)
!12167 = !DILocation(line: 3036, column: 30, scope: !12156)
!12168 = !DILocation(line: 3036, column: 42, scope: !12156)
!12169 = !DILocation(line: 3036, column: 4, scope: !12156)
!12170 = !DILocation(line: 3037, column: 2, scope: !12156)
!12171 = !DILocation(line: 3039, column: 28, scope: !12146)
!12172 = !DILocation(line: 3039, column: 34, scope: !12146)
!12173 = !DILocation(line: 3039, column: 14, scope: !12146)
!12174 = !DILocation(line: 3039, column: 12, scope: !12146)
!12175 = !DILocation(line: 3040, column: 27, scope: !12146)
!12176 = !DILocation(line: 3040, column: 33, scope: !12146)
!12177 = !DILocation(line: 3040, column: 13, scope: !12146)
!12178 = !DILocation(line: 3040, column: 11, scope: !12146)
!12179 = !DILocation(line: 3042, column: 11, scope: !12180)
!12180 = distinct !DILexicalBlock(scope: !12146, file: !3, line: 3042, column: 11)
!12181 = !DILocation(line: 3042, column: 11, scope: !12146)
!12182 = !DILocation(line: 3045, column: 9, scope: !12183)
!12183 = distinct !DILexicalBlock(scope: !12184, file: !3, line: 3045, column: 8)
!12184 = distinct !DILexicalBlock(scope: !12180, file: !3, line: 3043, column: 2)
!12185 = !DILocation(line: 3045, column: 8, scope: !12184)
!12186 = !DILocation(line: 3046, column: 25, scope: !12183)
!12187 = !DILocation(line: 3046, column: 30, scope: !12183)
!12188 = !DILocation(line: 3047, column: 11, scope: !12183)
!12189 = !DILocation(line: 3047, column: 16, scope: !12183)
!12190 = !DILocation(line: 3046, column: 6, scope: !12183)
!12191 = !DILocation(line: 3048, column: 18, scope: !12184)
!12192 = !DILocation(line: 3050, column: 21, scope: !12184)
!12193 = !DILocation(line: 3050, column: 27, scope: !12184)
!12194 = !DILocation(line: 3051, column: 7, scope: !12184)
!12195 = !DILocation(line: 3050, column: 4, scope: !12184)
!12196 = !DILocation(line: 3053, column: 2, scope: !12184)
!12197 = !DILocation(line: 3055, column: 18, scope: !12180)
!12198 = !DILocation(line: 3055, column: 24, scope: !12180)
!12199 = !DILocation(line: 3055, column: 2, scope: !12180)
!12200 = !DILocation(line: 3056, column: 5, scope: !12146)
!12201 = !DILocation(line: 3058, column: 7, scope: !12202)
!12202 = distinct !DILexicalBlock(scope: !12068, file: !3, line: 3058, column: 7)
!12203 = !DILocation(line: 3058, column: 7, scope: !12068)
!12204 = !DILocation(line: 3060, column: 36, scope: !12205)
!12205 = distinct !DILexicalBlock(scope: !12202, file: !3, line: 3059, column: 5)
!12206 = !DILocation(line: 3060, column: 7, scope: !12205)
!12207 = !DILocation(line: 3060, column: 12, scope: !12205)
!12208 = !DILocation(line: 3060, column: 34, scope: !12205)
!12209 = !DILocation(line: 3061, column: 35, scope: !12205)
!12210 = !DILocation(line: 3061, column: 7, scope: !12205)
!12211 = !DILocation(line: 3061, column: 12, scope: !12205)
!12212 = !DILocation(line: 3061, column: 33, scope: !12205)
!12213 = !DILocation(line: 3062, column: 7, scope: !12205)
!12214 = !DILocation(line: 3063, column: 5, scope: !12205)
!12215 = !DILocation(line: 3065, column: 3, scope: !12068)
!12216 = !DILocation(line: 3066, column: 1, scope: !12068)
!12217 = distinct !DISubprogram(name: "assign_parms_unsplit_complex", scope: !3, file: !3, line: 3072, type: !12218, scopeLine: 3074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12218 = !DISubroutineType(types: !12219)
!12219 = !{null, !6806, !4340}
!12220 = !DILocalVariable(name: "all", arg: 1, scope: !12217, file: !3, line: 3072, type: !6806)
!12221 = !DILocation(line: 3072, column: 60, scope: !12217)
!12222 = !DILocalVariable(name: "fnargs", arg: 2, scope: !12217, file: !3, line: 3073, type: !4340)
!12223 = !DILocation(line: 3073, column: 27, scope: !12217)
!12224 = !DILocalVariable(name: "parm", scope: !12217, file: !3, line: 3075, type: !3045)
!12225 = !DILocation(line: 3075, column: 8, scope: !12217)
!12226 = !DILocalVariable(name: "orig_fnargs", scope: !12217, file: !3, line: 3076, type: !3045)
!12227 = !DILocation(line: 3076, column: 8, scope: !12217)
!12228 = !DILocation(line: 3076, column: 22, scope: !12217)
!12229 = !DILocation(line: 3076, column: 27, scope: !12217)
!12230 = !DILocalVariable(name: "i", scope: !12217, file: !3, line: 3077, type: !7)
!12231 = !DILocation(line: 3077, column: 12, scope: !12217)
!12232 = !DILocation(line: 3079, column: 15, scope: !12233)
!12233 = distinct !DILexicalBlock(scope: !12217, file: !3, line: 3079, column: 3)
!12234 = !DILocation(line: 3079, column: 13, scope: !12233)
!12235 = !DILocation(line: 3079, column: 8, scope: !12233)
!12236 = !DILocation(line: 3079, column: 28, scope: !12237)
!12237 = distinct !DILexicalBlock(scope: !12233, file: !3, line: 3079, column: 3)
!12238 = !DILocation(line: 3079, column: 3, scope: !12233)
!12239 = !DILocation(line: 3081, column: 11, scope: !12240)
!12240 = distinct !DILexicalBlock(scope: !12241, file: !3, line: 3081, column: 11)
!12241 = distinct !DILexicalBlock(scope: !12237, file: !3, line: 3080, column: 5)
!12242 = !DILocation(line: 3081, column: 40, scope: !12240)
!12243 = !DILocation(line: 3082, column: 4, scope: !12240)
!12244 = !DILocation(line: 3082, column: 21, scope: !12240)
!12245 = !DILocation(line: 3082, column: 40, scope: !12240)
!12246 = !DILocation(line: 3082, column: 7, scope: !12240)
!12247 = !DILocation(line: 3081, column: 11, scope: !12241)
!12248 = !DILocalVariable(name: "tmp", scope: !12249, file: !3, line: 3084, type: !2924)
!12249 = distinct !DILexicalBlock(scope: !12240, file: !3, line: 3083, column: 2)
!12250 = !DILocation(line: 3084, column: 8, scope: !12249)
!12251 = !DILocalVariable(name: "real", scope: !12249, file: !3, line: 3084, type: !2924)
!12252 = !DILocation(line: 3084, column: 13, scope: !12249)
!12253 = !DILocalVariable(name: "imag", scope: !12249, file: !3, line: 3084, type: !2924)
!12254 = !DILocation(line: 3084, column: 19, scope: !12249)
!12255 = !DILocalVariable(name: "inner", scope: !12249, file: !3, line: 3085, type: !13)
!12256 = !DILocation(line: 3085, column: 22, scope: !12249)
!12257 = !DILocation(line: 3085, column: 30, scope: !12249)
!12258 = !DILocation(line: 3087, column: 11, scope: !12249)
!12259 = !DILocation(line: 3087, column: 9, scope: !12249)
!12260 = !DILocation(line: 3088, column: 11, scope: !12249)
!12261 = !DILocation(line: 3088, column: 9, scope: !12249)
!12262 = !DILocation(line: 3089, column: 8, scope: !12263)
!12263 = distinct !DILexicalBlock(scope: !12249, file: !3, line: 3089, column: 8)
!12264 = !DILocation(line: 3089, column: 17, scope: !12263)
!12265 = !DILocation(line: 3089, column: 14, scope: !12263)
!12266 = !DILocation(line: 3089, column: 8, scope: !12249)
!12267 = !DILocation(line: 3091, column: 35, scope: !12268)
!12268 = distinct !DILexicalBlock(scope: !12263, file: !3, line: 3090, column: 6)
!12269 = !DILocation(line: 3091, column: 42, scope: !12268)
!12270 = !DILocation(line: 3091, column: 15, scope: !12268)
!12271 = !DILocation(line: 3091, column: 13, scope: !12268)
!12272 = !DILocation(line: 3092, column: 35, scope: !12268)
!12273 = !DILocation(line: 3092, column: 42, scope: !12268)
!12274 = !DILocation(line: 3092, column: 15, scope: !12268)
!12275 = !DILocation(line: 3092, column: 13, scope: !12268)
!12276 = !DILocation(line: 3093, column: 6, scope: !12268)
!12277 = !DILocation(line: 3095, column: 8, scope: !12278)
!12278 = distinct !DILexicalBlock(scope: !12249, file: !3, line: 3095, column: 8)
!12279 = !DILocation(line: 3095, column: 8, scope: !12249)
!12280 = !DILocalVariable(name: "rmem", scope: !12281, file: !3, line: 3097, type: !2924)
!12281 = distinct !DILexicalBlock(scope: !12278, file: !3, line: 3096, column: 6)
!12282 = !DILocation(line: 3097, column: 12, scope: !12281)
!12283 = !DILocalVariable(name: "imem", scope: !12281, file: !3, line: 3097, type: !2924)
!12284 = !DILocation(line: 3097, column: 18, scope: !12281)
!12285 = !DILocalVariable(name: "size", scope: !12281, file: !3, line: 3098, type: !3014)
!12286 = !DILocation(line: 3098, column: 22, scope: !12281)
!12287 = !DILocation(line: 3098, column: 48, scope: !12281)
!12288 = !DILocation(line: 3098, column: 29, scope: !12281)
!12289 = !DILocalVariable(name: "align", scope: !12281, file: !3, line: 3099, type: !2948)
!12290 = !DILocation(line: 3099, column: 12, scope: !12281)
!12291 = !DILocation(line: 3099, column: 20, scope: !12281)
!12292 = !DILocation(line: 3105, column: 34, scope: !12281)
!12293 = !DILocation(line: 3105, column: 52, scope: !12281)
!12294 = !DILocation(line: 3105, column: 58, scope: !12281)
!12295 = !DILocation(line: 3105, column: 14, scope: !12281)
!12296 = !DILocation(line: 3105, column: 12, scope: !12281)
!12297 = !DILocation(line: 3106, column: 28, scope: !12281)
!12298 = !DILocation(line: 3106, column: 33, scope: !12281)
!12299 = !DILocation(line: 3106, column: 8, scope: !12281)
!12300 = !DILocation(line: 3107, column: 15, scope: !12281)
!12301 = !DILocation(line: 3107, column: 13, scope: !12281)
!12302 = !DILocation(line: 3108, column: 15, scope: !12281)
!12303 = !DILocation(line: 3108, column: 13, scope: !12281)
!12304 = !DILocation(line: 3109, column: 27, scope: !12281)
!12305 = !DILocation(line: 3109, column: 32, scope: !12281)
!12306 = !DILocation(line: 3110, column: 6, scope: !12281)
!12307 = !DILocation(line: 3110, column: 11, scope: !12281)
!12308 = !DILocation(line: 3109, column: 8, scope: !12281)
!12309 = !DILocation(line: 3111, column: 24, scope: !12281)
!12310 = !DILocation(line: 3111, column: 30, scope: !12281)
!12311 = !DILocation(line: 3111, column: 8, scope: !12281)
!12312 = !DILocation(line: 3112, column: 24, scope: !12281)
!12313 = !DILocation(line: 3112, column: 30, scope: !12281)
!12314 = !DILocation(line: 3112, column: 8, scope: !12281)
!12315 = !DILocation(line: 3113, column: 37, scope: !12281)
!12316 = !DILocation(line: 3113, column: 8, scope: !12281)
!12317 = !DILocation(line: 3113, column: 13, scope: !12281)
!12318 = !DILocation(line: 3113, column: 35, scope: !12281)
!12319 = !DILocation(line: 3114, column: 36, scope: !12281)
!12320 = !DILocation(line: 3114, column: 8, scope: !12281)
!12321 = !DILocation(line: 3114, column: 13, scope: !12281)
!12322 = !DILocation(line: 3114, column: 34, scope: !12281)
!12323 = !DILocation(line: 3115, column: 8, scope: !12281)
!12324 = !DILocation(line: 3116, column: 6, scope: !12281)
!12325 = !DILocation(line: 3118, column: 12, scope: !12278)
!12326 = !DILocation(line: 3118, column: 10, scope: !12278)
!12327 = !DILocation(line: 3119, column: 4, scope: !12249)
!12328 = !DILocation(line: 3121, column: 11, scope: !12249)
!12329 = !DILocation(line: 3121, column: 9, scope: !12249)
!12330 = !DILocation(line: 3122, column: 11, scope: !12249)
!12331 = !DILocation(line: 3122, column: 9, scope: !12249)
!12332 = !DILocation(line: 3123, column: 8, scope: !12333)
!12333 = distinct !DILexicalBlock(scope: !12249, file: !3, line: 3123, column: 8)
!12334 = !DILocation(line: 3123, column: 17, scope: !12333)
!12335 = !DILocation(line: 3123, column: 14, scope: !12333)
!12336 = !DILocation(line: 3123, column: 8, scope: !12249)
!12337 = !DILocation(line: 3125, column: 35, scope: !12338)
!12338 = distinct !DILexicalBlock(scope: !12333, file: !3, line: 3124, column: 6)
!12339 = !DILocation(line: 3125, column: 42, scope: !12338)
!12340 = !DILocation(line: 3125, column: 15, scope: !12338)
!12341 = !DILocation(line: 3125, column: 13, scope: !12338)
!12342 = !DILocation(line: 3126, column: 35, scope: !12338)
!12343 = !DILocation(line: 3126, column: 42, scope: !12338)
!12344 = !DILocation(line: 3126, column: 15, scope: !12338)
!12345 = !DILocation(line: 3126, column: 13, scope: !12338)
!12346 = !DILocation(line: 3127, column: 6, scope: !12338)
!12347 = !DILocation(line: 3128, column: 10, scope: !12249)
!12348 = !DILocation(line: 3128, column: 8, scope: !12249)
!12349 = !DILocation(line: 3129, column: 27, scope: !12249)
!12350 = !DILocation(line: 3129, column: 33, scope: !12249)
!12351 = !DILocation(line: 3129, column: 4, scope: !12249)
!12352 = !DILocation(line: 3130, column: 5, scope: !12249)
!12353 = !DILocation(line: 3131, column: 2, scope: !12249)
!12354 = !DILocation(line: 3132, column: 5, scope: !12241)
!12355 = !DILocation(line: 3079, column: 41, scope: !12237)
!12356 = !DILocation(line: 3079, column: 39, scope: !12237)
!12357 = !DILocation(line: 3079, column: 60, scope: !12237)
!12358 = !DILocation(line: 3079, column: 3, scope: !12237)
!12359 = distinct !{!12359, !12238, !12360}
!12360 = !DILocation(line: 3132, column: 5, scope: !12233)
!12361 = !DILocation(line: 3133, column: 1, scope: !12217)
!12362 = distinct !DISubprogram(name: "assign_parm_remove_parallels", scope: !3, file: !3, line: 2571, type: !11338, scopeLine: 2572, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12363 = !DILocalVariable(name: "data", arg: 1, scope: !12362, file: !3, line: 2571, type: !6921)
!12364 = !DILocation(line: 2571, column: 60, scope: !12362)
!12365 = !DILocalVariable(name: "entry_parm", scope: !12362, file: !3, line: 2573, type: !2924)
!12366 = !DILocation(line: 2573, column: 7, scope: !12362)
!12367 = !DILocation(line: 2573, column: 20, scope: !12362)
!12368 = !DILocation(line: 2573, column: 26, scope: !12362)
!12369 = !DILocation(line: 2579, column: 7, scope: !12370)
!12370 = distinct !DILexicalBlock(scope: !12362, file: !3, line: 2579, column: 7)
!12371 = !DILocation(line: 2579, column: 29, scope: !12370)
!12372 = !DILocation(line: 2579, column: 41, scope: !12370)
!12373 = !DILocation(line: 2579, column: 44, scope: !12370)
!12374 = !DILocation(line: 2579, column: 66, scope: !12370)
!12375 = !DILocation(line: 2579, column: 7, scope: !12362)
!12376 = !DILocalVariable(name: "parmreg", scope: !12377, file: !3, line: 2581, type: !2924)
!12377 = distinct !DILexicalBlock(scope: !12370, file: !3, line: 2580, column: 5)
!12378 = !DILocation(line: 2581, column: 11, scope: !12377)
!12379 = !DILocation(line: 2581, column: 34, scope: !12377)
!12380 = !DILocation(line: 2581, column: 21, scope: !12377)
!12381 = !DILocation(line: 2582, column: 25, scope: !12377)
!12382 = !DILocation(line: 2582, column: 34, scope: !12377)
!12383 = !DILocation(line: 2582, column: 46, scope: !12377)
!12384 = !DILocation(line: 2582, column: 52, scope: !12377)
!12385 = !DILocation(line: 2583, column: 4, scope: !12377)
!12386 = !DILocation(line: 2582, column: 7, scope: !12377)
!12387 = !DILocation(line: 2584, column: 20, scope: !12377)
!12388 = !DILocation(line: 2584, column: 18, scope: !12377)
!12389 = !DILocation(line: 2585, column: 5, scope: !12377)
!12390 = !DILocation(line: 2587, column: 22, scope: !12362)
!12391 = !DILocation(line: 2587, column: 3, scope: !12362)
!12392 = !DILocation(line: 2587, column: 9, scope: !12362)
!12393 = !DILocation(line: 2587, column: 20, scope: !12362)
!12394 = !DILocation(line: 2588, column: 1, scope: !12362)
!12395 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !142, file: !142, line: 182, type: !12396, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12396 = !DISubroutineType(types: !12397)
!12397 = !{!3045, !6906, !7}
!12398 = !DILocalVariable(name: "vec_", arg: 1, scope: !12395, file: !142, line: 182, type: !6906)
!12399 = !DILocation(line: 182, column: 1, scope: !12395)
!12400 = !DILocalVariable(name: "ix_", arg: 2, scope: !12395, file: !142, line: 182, type: !7)
!12401 = !DILocation(line: 0, scope: !12395)
!12402 = distinct !DISubprogram(name: "do_use_return_reg", scope: !3, file: !3, line: 4608, type: !8525, scopeLine: 4609, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12403 = !DILocalVariable(name: "reg", arg: 1, scope: !12402, file: !3, line: 4608, type: !2924)
!12404 = !DILocation(line: 4608, column: 24, scope: !12402)
!12405 = !DILocalVariable(name: "arg", arg: 2, scope: !12402, file: !3, line: 4608, type: !3035)
!12406 = !DILocation(line: 4608, column: 35, scope: !12402)
!12407 = !DILocation(line: 4610, column: 13, scope: !12402)
!12408 = !DILocation(line: 4610, column: 3, scope: !12402)
!12409 = !DILocation(line: 4611, column: 1, scope: !12402)
!12410 = distinct !DISubprogram(name: "ei_end_p", scope: !369, file: !369, line: 721, type: !12411, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12411 = !DISubroutineType(types: !12412)
!12412 = !{!3158, !9140}
!12413 = !DILocalVariable(name: "i", arg: 1, scope: !12410, file: !369, line: 721, type: !9140)
!12414 = !DILocation(line: 721, column: 25, scope: !12410)
!12415 = !DILocation(line: 723, column: 13, scope: !12410)
!12416 = !DILocation(line: 723, column: 22, scope: !12410)
!12417 = !DILocation(line: 723, column: 19, scope: !12410)
!12418 = !DILocation(line: 723, column: 10, scope: !12410)
!12419 = !DILocation(line: 723, column: 3, scope: !12410)
!12420 = distinct !DISubprogram(name: "ei_edge", scope: !369, file: !369, line: 752, type: !12421, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12421 = !DISubroutineType(types: !12422)
!12422 = !{!3479, !9140}
!12423 = !DILocalVariable(name: "i", arg: 1, scope: !12420, file: !369, line: 752, type: !9140)
!12424 = !DILocation(line: 752, column: 24, scope: !12420)
!12425 = !DILocation(line: 754, column: 10, scope: !12420)
!12426 = !DILocation(line: 754, column: 3, scope: !12420)
!12427 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !369, file: !369, line: 150, type: !12428, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12428 = !DISubroutineType(types: !12429)
!12429 = !{!7, !12430}
!12430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12431, size: 64)
!12431 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3472)
!12432 = !DILocalVariable(name: "vec_", arg: 1, scope: !12427, file: !369, line: 150, type: !12430)
!12433 = !DILocation(line: 150, column: 1, scope: !12427)
!12434 = distinct !DISubprogram(name: "ei_container", scope: !369, file: !369, line: 685, type: !12435, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12435 = !DISubroutineType(types: !12436)
!12436 = !{!3467, !9140}
!12437 = !DILocalVariable(name: "i", arg: 1, scope: !12434, file: !369, line: 685, type: !9140)
!12438 = !DILocation(line: 685, column: 29, scope: !12434)
!12439 = !DILocation(line: 687, column: 3, scope: !12434)
!12440 = !DILocation(line: 688, column: 13, scope: !12434)
!12441 = !DILocation(line: 688, column: 10, scope: !12434)
!12442 = !DILocation(line: 688, column: 3, scope: !12434)
!12443 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !369, file: !369, line: 150, type: !12444, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12444 = !DISubroutineType(types: !12445)
!12445 = !{!3479, !12430, !7}
!12446 = !DILocalVariable(name: "vec_", arg: 1, scope: !12443, file: !369, line: 150, type: !12430)
!12447 = !DILocation(line: 150, column: 1, scope: !12443)
!12448 = !DILocalVariable(name: "ix_", arg: 2, scope: !12443, file: !369, line: 150, type: !7)
!12449 = !DILocation(line: 0, scope: !12443)
!12450 = distinct !DISubprogram(name: "thread_prologue_and_epilogue_insns", scope: !3, file: !3, line: 5008, type: !4467, scopeLine: 5009, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12451 = !DILocalVariable(name: "inserted", scope: !12450, file: !3, line: 5010, type: !2948)
!12452 = !DILocation(line: 5010, column: 7, scope: !12450)
!12453 = !DILocalVariable(name: "e", scope: !12450, file: !3, line: 5011, type: !3479)
!12454 = !DILocation(line: 5011, column: 8, scope: !12450)
!12455 = !DILocalVariable(name: "seq", scope: !12450, file: !3, line: 5013, type: !2924)
!12456 = !DILocation(line: 5013, column: 7, scope: !12450)
!12457 = !DILocalVariable(name: "epilogue_end", scope: !12450, file: !3, line: 5016, type: !2924)
!12458 = !DILocation(line: 5016, column: 7, scope: !12450)
!12459 = !DILocalVariable(name: "ei", scope: !12450, file: !3, line: 5018, type: !9140)
!12460 = !DILocation(line: 5018, column: 17, scope: !12450)
!12461 = !DILocation(line: 5020, column: 23, scope: !12450)
!12462 = !DILocation(line: 5020, column: 3, scope: !12450)
!12463 = !DILocation(line: 5024, column: 7, scope: !12464)
!12464 = distinct !DILexicalBlock(scope: !12465, file: !3, line: 5023, column: 5)
!12465 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 5022, column: 7)
!12466 = !DILocation(line: 5025, column: 13, scope: !12464)
!12467 = !DILocation(line: 5025, column: 11, scope: !12464)
!12468 = !DILocation(line: 5026, column: 18, scope: !12464)
!12469 = !DILocation(line: 5026, column: 7, scope: !12464)
!12470 = !DILocation(line: 5030, column: 17, scope: !12471)
!12471 = distinct !DILexicalBlock(scope: !12464, file: !3, line: 5030, column: 11)
!12472 = !DILocation(line: 5030, column: 11, scope: !12471)
!12473 = !DILocation(line: 5030, column: 25, scope: !12471)
!12474 = !DILocation(line: 5030, column: 28, scope: !12471)
!12475 = !DILocation(line: 5030, column: 11, scope: !12464)
!12476 = !DILocation(line: 5031, column: 12, scope: !12471)
!12477 = !DILocation(line: 5031, column: 2, scope: !12471)
!12478 = !DILocation(line: 5034, column: 21, scope: !12464)
!12479 = !DILocation(line: 5034, column: 7, scope: !12464)
!12480 = !DILocation(line: 5035, column: 7, scope: !12464)
!12481 = !DILocation(line: 5041, column: 17, scope: !12482)
!12482 = distinct !DILexicalBlock(scope: !12464, file: !3, line: 5041, column: 11)
!12483 = !DILocation(line: 5041, column: 11, scope: !12482)
!12484 = !DILocation(line: 5041, column: 11, scope: !12464)
!12485 = !DILocation(line: 5042, column: 20, scope: !12482)
!12486 = !DILocation(line: 5042, column: 9, scope: !12482)
!12487 = !DILocation(line: 5045, column: 13, scope: !12464)
!12488 = !DILocation(line: 5045, column: 11, scope: !12464)
!12489 = !DILocation(line: 5046, column: 7, scope: !12464)
!12490 = !DILocation(line: 5047, column: 26, scope: !12464)
!12491 = !DILocation(line: 5047, column: 31, scope: !12464)
!12492 = !DILocation(line: 5047, column: 7, scope: !12464)
!12493 = !DILocation(line: 5052, column: 7, scope: !12464)
!12494 = !DILocation(line: 5054, column: 28, scope: !12464)
!12495 = !DILocation(line: 5054, column: 51, scope: !12464)
!12496 = !DILocation(line: 5054, column: 33, scope: !12464)
!12497 = !DILocation(line: 5054, column: 7, scope: !12464)
!12498 = !DILocation(line: 5055, column: 16, scope: !12464)
!12499 = !DILocation(line: 5061, column: 3, scope: !12500)
!12500 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 5061, column: 3)
!12501 = !DILocation(line: 5061, column: 3, scope: !12502)
!12502 = distinct !DILexicalBlock(scope: !12500, file: !3, line: 5061, column: 3)
!12503 = !DILocation(line: 5062, column: 10, scope: !12504)
!12504 = distinct !DILexicalBlock(scope: !12502, file: !3, line: 5062, column: 9)
!12505 = !DILocation(line: 5062, column: 13, scope: !12504)
!12506 = !DILocation(line: 5062, column: 19, scope: !12504)
!12507 = !DILocation(line: 5062, column: 32, scope: !12504)
!12508 = !DILocation(line: 5062, column: 9, scope: !12502)
!12509 = !DILocation(line: 5063, column: 7, scope: !12504)
!12510 = !DILocation(line: 5062, column: 35, scope: !12504)
!12511 = distinct !{!12511, !12499, !12512}
!12512 = !DILocation(line: 5063, column: 7, scope: !12500)
!12513 = !DILocation(line: 5064, column: 7, scope: !12514)
!12514 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 5064, column: 7)
!12515 = !DILocation(line: 5064, column: 9, scope: !12514)
!12516 = !DILocation(line: 5064, column: 7, scope: !12450)
!12517 = !DILocation(line: 5065, column: 5, scope: !12514)
!12518 = !DILocation(line: 5067, column: 23, scope: !12450)
!12519 = !DILocation(line: 5067, column: 3, scope: !12450)
!12520 = !DILocation(line: 5069, column: 7, scope: !12521)
!12521 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 5069, column: 7)
!12522 = !DILocation(line: 5069, column: 16, scope: !12521)
!12523 = !DILocation(line: 5069, column: 19, scope: !12521)
!12524 = !DILocation(line: 5069, column: 7, scope: !12450)
!12525 = !DILocalVariable(name: "last", scope: !12526, file: !3, line: 5077, type: !3462)
!12526 = distinct !DILexicalBlock(scope: !12521, file: !3, line: 5070, column: 5)
!12527 = !DILocation(line: 5077, column: 19, scope: !12526)
!12528 = !DILocalVariable(name: "label", scope: !12526, file: !3, line: 5078, type: !2924)
!12529 = !DILocation(line: 5078, column: 11, scope: !12526)
!12530 = !DILocation(line: 5080, column: 7, scope: !12531)
!12531 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 5080, column: 7)
!12532 = !DILocation(line: 5080, column: 7, scope: !12533)
!12533 = distinct !DILexicalBlock(scope: !12531, file: !3, line: 5080, column: 7)
!12534 = !DILocation(line: 5081, column: 6, scope: !12535)
!12535 = distinct !DILexicalBlock(scope: !12533, file: !3, line: 5081, column: 6)
!12536 = !DILocation(line: 5081, column: 9, scope: !12535)
!12537 = !DILocation(line: 5081, column: 15, scope: !12535)
!12538 = !DILocation(line: 5081, column: 6, scope: !12533)
!12539 = !DILocation(line: 5082, column: 4, scope: !12535)
!12540 = !DILocation(line: 5081, column: 17, scope: !12535)
!12541 = distinct !{!12541, !12530, !12542}
!12542 = !DILocation(line: 5082, column: 4, scope: !12531)
!12543 = !DILocation(line: 5083, column: 11, scope: !12544)
!12544 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 5083, column: 11)
!12545 = !DILocation(line: 5083, column: 13, scope: !12544)
!12546 = !DILocation(line: 5083, column: 11, scope: !12526)
!12547 = !DILocation(line: 5084, column: 2, scope: !12544)
!12548 = !DILocation(line: 5085, column: 14, scope: !12526)
!12549 = !DILocation(line: 5085, column: 17, scope: !12526)
!12550 = !DILocation(line: 5085, column: 12, scope: !12526)
!12551 = !DILocation(line: 5088, column: 15, scope: !12526)
!12552 = !DILocation(line: 5088, column: 13, scope: !12526)
!12553 = !DILocation(line: 5089, column: 7, scope: !12526)
!12554 = !DILocation(line: 5089, column: 14, scope: !12526)
!12555 = !DILocation(line: 5089, column: 20, scope: !12526)
!12556 = !DILocation(line: 5089, column: 24, scope: !12526)
!12557 = !DILocation(line: 5089, column: 23, scope: !12526)
!12558 = !DILocation(line: 0, scope: !12526)
!12559 = !DILocation(line: 5091, column: 23, scope: !12560)
!12560 = distinct !DILexicalBlock(scope: !12561, file: !3, line: 5091, column: 8)
!12561 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 5090, column: 2)
!12562 = !DILocation(line: 5091, column: 8, scope: !12560)
!12563 = !DILocation(line: 5091, column: 8, scope: !12561)
!12564 = !DILocation(line: 5092, column: 6, scope: !12560)
!12565 = !DILocation(line: 5093, column: 12, scope: !12561)
!12566 = !DILocation(line: 5093, column: 10, scope: !12561)
!12567 = distinct !{!12567, !12553, !12568}
!12568 = !DILocation(line: 5094, column: 2, scope: !12526)
!12569 = !DILocation(line: 5096, column: 11, scope: !12570)
!12570 = distinct !DILexicalBlock(scope: !12526, file: !3, line: 5096, column: 11)
!12571 = !DILocation(line: 5096, column: 29, scope: !12570)
!12572 = !DILocation(line: 5096, column: 26, scope: !12570)
!12573 = !DILocation(line: 5096, column: 35, scope: !12570)
!12574 = !DILocation(line: 5096, column: 38, scope: !12570)
!12575 = !DILocation(line: 5096, column: 11, scope: !12526)
!12576 = !DILocalVariable(name: "ei2", scope: !12577, file: !3, line: 5098, type: !9140)
!12577 = distinct !DILexicalBlock(scope: !12570, file: !3, line: 5097, column: 2)
!12578 = !DILocation(line: 5098, column: 18, scope: !12577)
!12579 = !DILocation(line: 5100, column: 15, scope: !12580)
!12580 = distinct !DILexicalBlock(scope: !12577, file: !3, line: 5100, column: 4)
!12581 = !DILocation(line: 5100, column: 9, scope: !12580)
!12582 = !DILocation(line: 5100, column: 44, scope: !12583)
!12583 = distinct !DILexicalBlock(scope: !12580, file: !3, line: 5100, column: 4)
!12584 = !DILocation(line: 5100, column: 42, scope: !12583)
!12585 = !DILocation(line: 5100, column: 4, scope: !12580)
!12586 = !DILocalVariable(name: "bb", scope: !12587, file: !3, line: 5102, type: !3462)
!12587 = distinct !DILexicalBlock(scope: !12583, file: !3, line: 5101, column: 6)
!12588 = !DILocation(line: 5102, column: 20, scope: !12587)
!12589 = !DILocation(line: 5102, column: 25, scope: !12587)
!12590 = !DILocation(line: 5102, column: 28, scope: !12587)
!12591 = !DILocalVariable(name: "jump", scope: !12587, file: !3, line: 5103, type: !2924)
!12592 = !DILocation(line: 5103, column: 12, scope: !12587)
!12593 = !DILocation(line: 5105, column: 12, scope: !12594)
!12594 = distinct !DILexicalBlock(scope: !12587, file: !3, line: 5105, column: 12)
!12595 = !DILocation(line: 5105, column: 18, scope: !12594)
!12596 = !DILocation(line: 5105, column: 15, scope: !12594)
!12597 = !DILocation(line: 5105, column: 12, scope: !12587)
!12598 = !DILocation(line: 5107, column: 5, scope: !12599)
!12599 = distinct !DILexicalBlock(scope: !12594, file: !3, line: 5106, column: 3)
!12600 = !DILocation(line: 5108, column: 5, scope: !12599)
!12601 = distinct !{!12601, !12585, !12602}
!12602 = !DILocation(line: 5153, column: 6, scope: !12580)
!12603 = !DILocation(line: 5111, column: 15, scope: !12587)
!12604 = !DILocation(line: 5111, column: 13, scope: !12587)
!12605 = !DILocation(line: 5112, column: 13, scope: !12606)
!12606 = distinct !DILexicalBlock(scope: !12587, file: !3, line: 5112, column: 12)
!12607 = !DILocation(line: 5112, column: 27, scope: !12606)
!12608 = !DILocation(line: 5112, column: 30, scope: !12606)
!12609 = !DILocation(line: 5112, column: 51, scope: !12606)
!12610 = !DILocation(line: 5112, column: 48, scope: !12606)
!12611 = !DILocation(line: 5112, column: 12, scope: !12587)
!12612 = !DILocation(line: 5114, column: 5, scope: !12613)
!12613 = distinct !DILexicalBlock(scope: !12606, file: !3, line: 5113, column: 3)
!12614 = !DILocation(line: 5115, column: 5, scope: !12613)
!12615 = !DILocation(line: 5120, column: 26, scope: !12616)
!12616 = distinct !DILexicalBlock(scope: !12587, file: !3, line: 5120, column: 12)
!12617 = !DILocation(line: 5120, column: 12, scope: !12616)
!12618 = !DILocation(line: 5120, column: 12, scope: !12587)
!12619 = !DILocation(line: 5122, column: 29, scope: !12620)
!12620 = distinct !DILexicalBlock(scope: !12616, file: !3, line: 5121, column: 3)
!12621 = !DILocation(line: 5122, column: 5, scope: !12620)
!12622 = !DILocation(line: 5123, column: 18, scope: !12620)
!12623 = !DILocation(line: 5123, column: 5, scope: !12620)
!12624 = !DILocation(line: 5124, column: 3, scope: !12620)
!12625 = !DILocation(line: 5128, column: 29, scope: !12626)
!12626 = distinct !DILexicalBlock(scope: !12616, file: !3, line: 5128, column: 17)
!12627 = !DILocation(line: 5128, column: 17, scope: !12626)
!12628 = !DILocation(line: 5128, column: 17, scope: !12616)
!12629 = !DILocation(line: 5130, column: 26, scope: !12630)
!12630 = distinct !DILexicalBlock(scope: !12631, file: !3, line: 5130, column: 9)
!12631 = distinct !DILexicalBlock(scope: !12626, file: !3, line: 5129, column: 3)
!12632 = !DILocation(line: 5130, column: 11, scope: !12630)
!12633 = !DILocation(line: 5130, column: 9, scope: !12631)
!12634 = !DILocation(line: 5132, column: 9, scope: !12635)
!12635 = distinct !DILexicalBlock(scope: !12630, file: !3, line: 5131, column: 7)
!12636 = !DILocation(line: 5133, column: 9, scope: !12635)
!12637 = !DILocation(line: 5139, column: 24, scope: !12638)
!12638 = distinct !DILexicalBlock(scope: !12631, file: !3, line: 5139, column: 9)
!12639 = !DILocation(line: 5139, column: 9, scope: !12638)
!12640 = !DILocation(line: 5139, column: 9, scope: !12631)
!12641 = !DILocation(line: 5141, column: 9, scope: !12642)
!12642 = distinct !DILexicalBlock(scope: !12638, file: !3, line: 5140, column: 7)
!12643 = !DILocation(line: 5142, column: 9, scope: !12642)
!12644 = !DILocation(line: 5144, column: 3, scope: !12631)
!12645 = !DILocation(line: 5147, column: 5, scope: !12646)
!12646 = distinct !DILexicalBlock(scope: !12626, file: !3, line: 5146, column: 3)
!12647 = !DILocation(line: 5148, column: 5, scope: !12646)
!12648 = !DILocation(line: 5152, column: 28, scope: !12587)
!12649 = !DILocation(line: 5152, column: 31, scope: !12587)
!12650 = !DILocation(line: 5152, column: 8, scope: !12587)
!12651 = !DILocation(line: 5100, column: 4, scope: !12583)
!12652 = !DILocation(line: 5158, column: 24, scope: !12577)
!12653 = !DILocation(line: 5158, column: 4, scope: !12577)
!12654 = !DILocation(line: 5159, column: 28, scope: !12577)
!12655 = !DILocation(line: 5159, column: 4, scope: !12577)
!12656 = !DILocation(line: 5160, column: 19, scope: !12577)
!12657 = !DILocation(line: 5160, column: 17, scope: !12577)
!12658 = !DILocation(line: 5161, column: 22, scope: !12577)
!12659 = !DILocation(line: 5161, column: 4, scope: !12577)
!12660 = !DILocation(line: 5161, column: 29, scope: !12577)
!12661 = !DILocation(line: 5161, column: 35, scope: !12577)
!12662 = !DILocation(line: 5162, column: 4, scope: !12577)
!12663 = !DILocation(line: 5164, column: 5, scope: !12526)
!12664 = !DILocation(line: 5170, column: 22, scope: !12450)
!12665 = !DILocation(line: 5178, column: 3, scope: !12666)
!12666 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 5178, column: 3)
!12667 = !DILocation(line: 5178, column: 3, scope: !12668)
!12668 = distinct !DILexicalBlock(scope: !12666, file: !3, line: 5178, column: 3)
!12669 = !DILocalVariable(name: "prev", scope: !12670, file: !3, line: 5180, type: !2924)
!12670 = distinct !DILexicalBlock(scope: !12668, file: !3, line: 5179, column: 5)
!12671 = !DILocation(line: 5180, column: 11, scope: !12670)
!12672 = !DILocalVariable(name: "last", scope: !12670, file: !3, line: 5180, type: !2924)
!12673 = !DILocation(line: 5180, column: 17, scope: !12670)
!12674 = !DILocalVariable(name: "trial", scope: !12670, file: !3, line: 5180, type: !2924)
!12675 = !DILocation(line: 5180, column: 23, scope: !12670)
!12676 = !DILocation(line: 5182, column: 11, scope: !12677)
!12677 = distinct !DILexicalBlock(scope: !12670, file: !3, line: 5182, column: 11)
!12678 = !DILocation(line: 5182, column: 14, scope: !12677)
!12679 = !DILocation(line: 5182, column: 20, scope: !12677)
!12680 = !DILocation(line: 5182, column: 11, scope: !12670)
!12681 = !DILocation(line: 5183, column: 2, scope: !12677)
!12682 = !DILocation(line: 5184, column: 14, scope: !12670)
!12683 = !DILocation(line: 5184, column: 12, scope: !12670)
!12684 = !DILocation(line: 5185, column: 29, scope: !12685)
!12685 = distinct !DILexicalBlock(scope: !12670, file: !3, line: 5185, column: 11)
!12686 = !DILocation(line: 5185, column: 12, scope: !12685)
!12687 = !DILocation(line: 5185, column: 11, scope: !12670)
!12688 = !DILocation(line: 5186, column: 2, scope: !12685)
!12689 = !DILocation(line: 5188, column: 14, scope: !12670)
!12690 = !DILocation(line: 5188, column: 12, scope: !12670)
!12691 = !DILocation(line: 5189, column: 26, scope: !12670)
!12692 = !DILocation(line: 5189, column: 42, scope: !12670)
!12693 = !DILocation(line: 5189, column: 15, scope: !12670)
!12694 = !DILocation(line: 5189, column: 13, scope: !12670)
!12695 = !DILocation(line: 5190, column: 11, scope: !12696)
!12696 = distinct !DILexicalBlock(scope: !12670, file: !3, line: 5190, column: 11)
!12697 = !DILocation(line: 5190, column: 20, scope: !12696)
!12698 = !DILocation(line: 5190, column: 17, scope: !12696)
!12699 = !DILocation(line: 5190, column: 11, scope: !12670)
!12700 = !DILocation(line: 5191, column: 2, scope: !12696)
!12701 = !DILocation(line: 5193, column: 21, scope: !12670)
!12702 = !DILocation(line: 5193, column: 39, scope: !12670)
!12703 = !DILocation(line: 5193, column: 7, scope: !12670)
!12704 = !DILocation(line: 5194, column: 48, scope: !12670)
!12705 = !DILocation(line: 5194, column: 7, scope: !12670)
!12706 = !DILocation(line: 5195, column: 5, scope: !12670)
!12707 = distinct !{!12707, !12665, !12708}
!12708 = !DILocation(line: 5195, column: 5, scope: !12666)
!12709 = !DILocation(line: 5203, column: 3, scope: !12710)
!12710 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 5203, column: 3)
!12711 = !DILocation(line: 5203, column: 3, scope: !12712)
!12712 = distinct !DILexicalBlock(scope: !12710, file: !3, line: 5203, column: 3)
!12713 = !DILocation(line: 5204, column: 9, scope: !12714)
!12714 = distinct !DILexicalBlock(scope: !12712, file: !3, line: 5204, column: 9)
!12715 = !DILocation(line: 5204, column: 12, scope: !12714)
!12716 = !DILocation(line: 5204, column: 18, scope: !12714)
!12717 = !DILocation(line: 5204, column: 9, scope: !12712)
!12718 = !DILocation(line: 5205, column: 7, scope: !12714)
!12719 = !DILocation(line: 5204, column: 20, scope: !12714)
!12720 = distinct !{!12720, !12709, !12721}
!12721 = !DILocation(line: 5205, column: 7, scope: !12710)
!12722 = !DILocation(line: 5206, column: 7, scope: !12723)
!12723 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 5206, column: 7)
!12724 = !DILocation(line: 5206, column: 9, scope: !12723)
!12725 = !DILocation(line: 5206, column: 7, scope: !12450)
!12726 = !DILocation(line: 5207, column: 5, scope: !12723)
!12727 = !DILocation(line: 5212, column: 7, scope: !12728)
!12728 = distinct !DILexicalBlock(scope: !12729, file: !3, line: 5211, column: 5)
!12729 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 5210, column: 7)
!12730 = !DILocation(line: 5213, column: 22, scope: !12728)
!12731 = !DILocation(line: 5213, column: 20, scope: !12728)
!12732 = !DILocation(line: 5214, column: 13, scope: !12728)
!12733 = !DILocation(line: 5214, column: 11, scope: !12728)
!12734 = !DILocation(line: 5215, column: 23, scope: !12728)
!12735 = !DILocation(line: 5215, column: 7, scope: !12728)
!12736 = !DILocation(line: 5218, column: 21, scope: !12728)
!12737 = !DILocation(line: 5218, column: 7, scope: !12728)
!12738 = !DILocation(line: 5219, column: 26, scope: !12728)
!12739 = !DILocation(line: 5219, column: 31, scope: !12728)
!12740 = !DILocation(line: 5219, column: 7, scope: !12728)
!12741 = !DILocation(line: 5221, column: 13, scope: !12728)
!12742 = !DILocation(line: 5221, column: 11, scope: !12728)
!12743 = !DILocation(line: 5222, column: 7, scope: !12728)
!12744 = !DILocation(line: 5224, column: 28, scope: !12728)
!12745 = !DILocation(line: 5224, column: 33, scope: !12728)
!12746 = !DILocation(line: 5224, column: 7, scope: !12728)
!12747 = !DILocation(line: 5225, column: 16, scope: !12728)
!12748 = !DILocation(line: 5210, column: 7, scope: !12729)
!12749 = !DILabel(scope: !12450, name: "epilogue_done", file: !3, line: 5248)
!12750 = !DILocation(line: 5248, column: 1, scope: !12450)
!12751 = !DILocation(line: 5249, column: 3, scope: !12450)
!12752 = !DILocation(line: 5251, column: 7, scope: !12753)
!12753 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 5251, column: 7)
!12754 = !DILocation(line: 5251, column: 7, scope: !12450)
!12755 = !DILocation(line: 5253, column: 7, scope: !12756)
!12756 = distinct !DILexicalBlock(scope: !12753, file: !3, line: 5252, column: 5)
!12757 = !DILocation(line: 5257, column: 7, scope: !12758)
!12758 = distinct !DILexicalBlock(scope: !12756, file: !3, line: 5257, column: 7)
!12759 = !DILocation(line: 5257, column: 7, scope: !12760)
!12760 = distinct !DILexicalBlock(scope: !12758, file: !3, line: 5257, column: 7)
!12761 = !DILocation(line: 5259, column: 10, scope: !12762)
!12762 = distinct !DILexicalBlock(scope: !12763, file: !3, line: 5259, column: 8)
!12763 = distinct !DILexicalBlock(scope: !12760, file: !3, line: 5258, column: 2)
!12764 = !DILocation(line: 5259, column: 13, scope: !12762)
!12765 = !DILocation(line: 5259, column: 19, scope: !12762)
!12766 = !DILocation(line: 5259, column: 36, scope: !12762)
!12767 = !DILocation(line: 5260, column: 8, scope: !12762)
!12768 = !DILocation(line: 5260, column: 25, scope: !12762)
!12769 = !DILocation(line: 5260, column: 11, scope: !12762)
!12770 = !DILocation(line: 5259, column: 8, scope: !12763)
!12771 = !DILocation(line: 5261, column: 6, scope: !12762)
!12772 = !DILocation(line: 5261, column: 9, scope: !12762)
!12773 = !DILocation(line: 5261, column: 15, scope: !12762)
!12774 = !DILocation(line: 5262, column: 2, scope: !12763)
!12775 = distinct !{!12775, !12757, !12776}
!12776 = !DILocation(line: 5262, column: 2, scope: !12758)
!12777 = !DILocation(line: 5263, column: 5, scope: !12756)
!12778 = !DILocation(line: 5267, column: 13, scope: !12779)
!12779 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 5267, column: 3)
!12780 = !DILocation(line: 5267, column: 8, scope: !12779)
!12781 = !DILocation(line: 5267, column: 52, scope: !12782)
!12782 = distinct !DILexicalBlock(scope: !12779, file: !3, line: 5267, column: 3)
!12783 = !DILocation(line: 5267, column: 50, scope: !12782)
!12784 = !DILocation(line: 5267, column: 3, scope: !12779)
!12785 = !DILocalVariable(name: "bb", scope: !12786, file: !3, line: 5269, type: !3462)
!12786 = distinct !DILexicalBlock(scope: !12782, file: !3, line: 5268, column: 5)
!12787 = !DILocation(line: 5269, column: 19, scope: !12786)
!12788 = !DILocation(line: 5269, column: 24, scope: !12786)
!12789 = !DILocation(line: 5269, column: 27, scope: !12786)
!12790 = !DILocalVariable(name: "insn", scope: !12786, file: !3, line: 5270, type: !2924)
!12791 = !DILocation(line: 5270, column: 11, scope: !12786)
!12792 = !DILocation(line: 5270, column: 18, scope: !12786)
!12793 = !DILocation(line: 5272, column: 12, scope: !12794)
!12794 = distinct !DILexicalBlock(scope: !12786, file: !3, line: 5272, column: 11)
!12795 = !DILocation(line: 5273, column: 4, scope: !12794)
!12796 = !DILocation(line: 5273, column: 9, scope: !12794)
!12797 = !DILocation(line: 5272, column: 11, scope: !12786)
!12798 = !DILocation(line: 5275, column: 4, scope: !12799)
!12799 = distinct !DILexicalBlock(scope: !12794, file: !3, line: 5274, column: 2)
!12800 = !DILocation(line: 5276, column: 4, scope: !12799)
!12801 = distinct !{!12801, !12784, !12802}
!12802 = !DILocation(line: 5293, column: 5, scope: !12779)
!12803 = !DILocation(line: 5279, column: 7, scope: !12786)
!12804 = !DILocation(line: 5280, column: 7, scope: !12786)
!12805 = !DILocation(line: 5281, column: 18, scope: !12786)
!12806 = !DILocation(line: 5281, column: 7, scope: !12786)
!12807 = !DILocation(line: 5282, column: 13, scope: !12786)
!12808 = !DILocation(line: 5282, column: 11, scope: !12786)
!12809 = !DILocation(line: 5283, column: 7, scope: !12786)
!12810 = !DILocation(line: 5288, column: 21, scope: !12786)
!12811 = !DILocation(line: 5288, column: 7, scope: !12786)
!12812 = !DILocation(line: 5289, column: 26, scope: !12786)
!12813 = !DILocation(line: 5289, column: 31, scope: !12786)
!12814 = !DILocation(line: 5289, column: 7, scope: !12786)
!12815 = !DILocation(line: 5291, column: 25, scope: !12786)
!12816 = !DILocation(line: 5291, column: 30, scope: !12786)
!12817 = !DILocation(line: 5291, column: 7, scope: !12786)
!12818 = !DILocation(line: 5292, column: 7, scope: !12786)
!12819 = !DILocation(line: 5267, column: 3, scope: !12782)
!12820 = !DILocation(line: 5297, column: 7, scope: !12821)
!12821 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 5297, column: 7)
!12822 = !DILocation(line: 5297, column: 7, scope: !12450)
!12823 = !DILocalVariable(name: "insn", scope: !12824, file: !3, line: 5299, type: !2924)
!12824 = distinct !DILexicalBlock(scope: !12821, file: !3, line: 5298, column: 5)
!12825 = !DILocation(line: 5299, column: 11, scope: !12824)
!12826 = !DILocalVariable(name: "next", scope: !12824, file: !3, line: 5299, type: !2924)
!12827 = !DILocation(line: 5299, column: 17, scope: !12824)
!12828 = !DILocation(line: 5306, column: 19, scope: !12829)
!12829 = distinct !DILexicalBlock(scope: !12824, file: !3, line: 5306, column: 7)
!12830 = !DILocation(line: 5306, column: 17, scope: !12829)
!12831 = !DILocation(line: 5306, column: 12, scope: !12829)
!12832 = !DILocation(line: 5306, column: 33, scope: !12833)
!12833 = distinct !DILexicalBlock(scope: !12829, file: !3, line: 5306, column: 7)
!12834 = !DILocation(line: 5306, column: 7, scope: !12829)
!12835 = !DILocation(line: 5308, column: 11, scope: !12836)
!12836 = distinct !DILexicalBlock(scope: !12833, file: !3, line: 5307, column: 2)
!12837 = !DILocation(line: 5308, column: 9, scope: !12836)
!12838 = !DILocation(line: 5309, column: 8, scope: !12839)
!12839 = distinct !DILexicalBlock(scope: !12836, file: !3, line: 5309, column: 8)
!12840 = !DILocation(line: 5310, column: 8, scope: !12839)
!12841 = !DILocation(line: 5310, column: 12, scope: !12839)
!12842 = !DILocation(line: 5310, column: 29, scope: !12839)
!12843 = !DILocation(line: 5309, column: 8, scope: !12836)
!12844 = !DILocation(line: 5311, column: 21, scope: !12839)
!12845 = !DILocation(line: 5311, column: 27, scope: !12839)
!12846 = !DILocation(line: 5311, column: 33, scope: !12839)
!12847 = !DILocation(line: 5311, column: 6, scope: !12839)
!12848 = !DILocation(line: 5312, column: 2, scope: !12836)
!12849 = !DILocation(line: 5306, column: 46, scope: !12833)
!12850 = !DILocation(line: 5306, column: 44, scope: !12833)
!12851 = !DILocation(line: 5306, column: 7, scope: !12833)
!12852 = distinct !{!12852, !12834, !12853}
!12853 = !DILocation(line: 5312, column: 2, scope: !12829)
!12854 = !DILocation(line: 5313, column: 5, scope: !12824)
!12855 = !DILocation(line: 5318, column: 22, scope: !12450)
!12856 = !DILocation(line: 5319, column: 3, scope: !12450)
!12857 = !DILocation(line: 5320, column: 1, scope: !12450)
!12858 = distinct !DISubprogram(name: "record_insns", scope: !3, file: !3, line: 4915, type: !12859, scopeLine: 4916, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12859 = !DISubroutineType(types: !12860)
!12860 = !{null, !2924, !2924, !12861}
!12861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3375, size: 64)
!12862 = !DILocalVariable(name: "insns", arg: 1, scope: !12858, file: !3, line: 4915, type: !2924)
!12863 = !DILocation(line: 4915, column: 19, scope: !12858)
!12864 = !DILocalVariable(name: "end", arg: 2, scope: !12858, file: !3, line: 4915, type: !2924)
!12865 = !DILocation(line: 4915, column: 30, scope: !12858)
!12866 = !DILocalVariable(name: "hashp", arg: 3, scope: !12858, file: !3, line: 4915, type: !12861)
!12867 = !DILocation(line: 4915, column: 43, scope: !12858)
!12868 = !DILocalVariable(name: "tmp", scope: !12858, file: !3, line: 4917, type: !2924)
!12869 = !DILocation(line: 4917, column: 7, scope: !12858)
!12870 = !DILocalVariable(name: "hash", scope: !12858, file: !3, line: 4918, type: !3375)
!12871 = !DILocation(line: 4918, column: 10, scope: !12858)
!12872 = !DILocation(line: 4918, column: 18, scope: !12858)
!12873 = !DILocation(line: 4918, column: 17, scope: !12858)
!12874 = !DILocation(line: 4920, column: 7, scope: !12875)
!12875 = distinct !DILexicalBlock(scope: !12858, file: !3, line: 4920, column: 7)
!12876 = !DILocation(line: 4920, column: 12, scope: !12875)
!12877 = !DILocation(line: 4920, column: 7, scope: !12858)
!12878 = !DILocation(line: 4922, column: 9, scope: !12875)
!12879 = !DILocation(line: 4922, column: 7, scope: !12875)
!12880 = !DILocation(line: 4921, column: 6, scope: !12875)
!12881 = !DILocation(line: 4921, column: 12, scope: !12875)
!12882 = !DILocation(line: 4921, column: 5, scope: !12875)
!12883 = !DILocation(line: 4924, column: 14, scope: !12884)
!12884 = distinct !DILexicalBlock(scope: !12858, file: !3, line: 4924, column: 3)
!12885 = !DILocation(line: 4924, column: 12, scope: !12884)
!12886 = !DILocation(line: 4924, column: 8, scope: !12884)
!12887 = !DILocation(line: 4924, column: 21, scope: !12888)
!12888 = distinct !DILexicalBlock(scope: !12884, file: !3, line: 4924, column: 3)
!12889 = !DILocation(line: 4924, column: 28, scope: !12888)
!12890 = !DILocation(line: 4924, column: 25, scope: !12888)
!12891 = !DILocation(line: 4924, column: 3, scope: !12884)
!12892 = !DILocalVariable(name: "slot", scope: !12893, file: !3, line: 4926, type: !3398)
!12893 = distinct !DILexicalBlock(scope: !12888, file: !3, line: 4925, column: 5)
!12894 = !DILocation(line: 4926, column: 14, scope: !12893)
!12895 = !DILocation(line: 4926, column: 37, scope: !12893)
!12896 = !DILocation(line: 4926, column: 43, scope: !12893)
!12897 = !DILocation(line: 4926, column: 21, scope: !12893)
!12898 = !DILocation(line: 4927, column: 7, scope: !12893)
!12899 = !DILocation(line: 4928, column: 15, scope: !12893)
!12900 = !DILocation(line: 4928, column: 8, scope: !12893)
!12901 = !DILocation(line: 4928, column: 13, scope: !12893)
!12902 = !DILocation(line: 4929, column: 5, scope: !12893)
!12903 = !DILocation(line: 4924, column: 39, scope: !12888)
!12904 = !DILocation(line: 4924, column: 37, scope: !12888)
!12905 = !DILocation(line: 4924, column: 3, scope: !12888)
!12906 = distinct !{!12906, !12891, !12907}
!12907 = !DILocation(line: 4929, column: 5, scope: !12884)
!12908 = !DILocation(line: 4930, column: 1, scope: !12858)
!12909 = distinct !DISubprogram(name: "set_insn_locators", scope: !3, file: !3, line: 4951, type: !12910, scopeLine: 4952, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12910 = !DISubroutineType(types: !12911)
!12911 = !{null, !2924, !2948}
!12912 = !DILocalVariable(name: "insn", arg: 1, scope: !12909, file: !3, line: 4951, type: !2924)
!12913 = !DILocation(line: 4951, column: 24, scope: !12909)
!12914 = !DILocalVariable(name: "loc", arg: 2, scope: !12909, file: !3, line: 4951, type: !2948)
!12915 = !DILocation(line: 4951, column: 34, scope: !12909)
!12916 = !DILocation(line: 4953, column: 3, scope: !12909)
!12917 = !DILocation(line: 4953, column: 10, scope: !12909)
!12918 = !DILocation(line: 4953, column: 15, scope: !12909)
!12919 = !DILocation(line: 4955, column: 11, scope: !12920)
!12920 = distinct !DILexicalBlock(scope: !12921, file: !3, line: 4955, column: 11)
!12921 = distinct !DILexicalBlock(scope: !12909, file: !3, line: 4954, column: 5)
!12922 = !DILocation(line: 4955, column: 11, scope: !12921)
!12923 = !DILocation(line: 4956, column: 24, scope: !12920)
!12924 = !DILocation(line: 4956, column: 2, scope: !12920)
!12925 = !DILocation(line: 4956, column: 22, scope: !12920)
!12926 = !DILocation(line: 4957, column: 14, scope: !12921)
!12927 = !DILocation(line: 4957, column: 12, scope: !12921)
!12928 = distinct !{!12928, !12916, !12929}
!12929 = !DILocation(line: 4958, column: 5, scope: !12909)
!12930 = !DILocation(line: 4959, column: 1, scope: !12909)
!12931 = distinct !DISubprogram(name: "single_succ_p", scope: !369, file: !369, line: 626, type: !12932, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12932 = !DISubroutineType(types: !12933)
!12933 = !{!3158, !12934}
!12934 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !2925, line: 112, baseType: !12935)
!12935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12936, size: 64)
!12936 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3464)
!12937 = !DILocalVariable(name: "bb", arg: 1, scope: !12931, file: !369, line: 626, type: !12934)
!12938 = !DILocation(line: 626, column: 34, scope: !12931)
!12939 = !DILocation(line: 628, column: 10, scope: !12931)
!12940 = !DILocation(line: 628, column: 33, scope: !12931)
!12941 = !DILocation(line: 628, column: 3, scope: !12931)
!12942 = distinct !DISubprogram(name: "single_succ_edge", scope: !369, file: !369, line: 643, type: !12943, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12943 = !DISubroutineType(types: !12944)
!12944 = !{!3479, !12934}
!12945 = !DILocalVariable(name: "bb", arg: 1, scope: !12942, file: !369, line: 643, type: !12934)
!12946 = !DILocation(line: 643, column: 37, scope: !12942)
!12947 = !DILocation(line: 645, column: 3, scope: !12942)
!12948 = !DILocation(line: 646, column: 10, scope: !12942)
!12949 = !DILocation(line: 646, column: 3, scope: !12942)
!12950 = distinct !DISubprogram(name: "ei_safe_edge", scope: !369, file: !369, line: 761, type: !12421, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12951 = !DILocalVariable(name: "i", arg: 1, scope: !12950, file: !369, line: 761, type: !9140)
!12952 = !DILocation(line: 761, column: 29, scope: !12950)
!12953 = !DILocation(line: 763, column: 11, scope: !12950)
!12954 = !DILocation(line: 763, column: 10, scope: !12950)
!12955 = !DILocation(line: 763, column: 26, scope: !12950)
!12956 = !DILocation(line: 763, column: 3, scope: !12950)
!12957 = distinct !DISubprogram(name: "emit_return_into_block", scope: !3, file: !3, line: 4997, type: !12958, scopeLine: 4998, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12958 = !DISubroutineType(types: !12959)
!12959 = !{null, !3462}
!12960 = !DILocalVariable(name: "bb", arg: 1, scope: !12957, file: !3, line: 4997, type: !3462)
!12961 = !DILocation(line: 4997, column: 37, scope: !12957)
!12962 = !DILocation(line: 4999, column: 25, scope: !12957)
!12963 = !DILocation(line: 4999, column: 40, scope: !12957)
!12964 = !DILocation(line: 4999, column: 3, scope: !12957)
!12965 = !DILocation(line: 5000, column: 1, scope: !12957)
!12966 = distinct !DISubprogram(name: "match_asm_constraints_1", scope: !3, file: !3, line: 5656, type: !12967, scopeLine: 5657, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4469)
!12967 = !DISubroutineType(types: !12968)
!12968 = !{null, !2924, !6201, !2948}
!12969 = !DILocalVariable(name: "insn", arg: 1, scope: !12966, file: !3, line: 5656, type: !2924)
!12970 = !DILocation(line: 5656, column: 30, scope: !12966)
!12971 = !DILocalVariable(name: "p_sets", arg: 2, scope: !12966, file: !3, line: 5656, type: !6201)
!12972 = !DILocation(line: 5656, column: 41, scope: !12966)
!12973 = !DILocalVariable(name: "noutputs", arg: 3, scope: !12966, file: !3, line: 5656, type: !2948)
!12974 = !DILocation(line: 5656, column: 53, scope: !12966)
!12975 = !DILocalVariable(name: "i", scope: !12966, file: !3, line: 5658, type: !2948)
!12976 = !DILocation(line: 5658, column: 7, scope: !12966)
!12977 = !DILocalVariable(name: "changed", scope: !12966, file: !3, line: 5659, type: !3158)
!12978 = !DILocation(line: 5659, column: 8, scope: !12966)
!12979 = !DILocalVariable(name: "op", scope: !12966, file: !3, line: 5660, type: !2924)
!12980 = !DILocation(line: 5660, column: 7, scope: !12966)
!12981 = !DILocation(line: 5660, column: 12, scope: !12966)
!12982 = !DILocalVariable(name: "ninputs", scope: !12966, file: !3, line: 5661, type: !2948)
!12983 = !DILocation(line: 5661, column: 7, scope: !12966)
!12984 = !DILocation(line: 5661, column: 17, scope: !12966)
!12985 = !DILocalVariable(name: "inputs", scope: !12966, file: !3, line: 5662, type: !2956)
!12986 = !DILocation(line: 5662, column: 9, scope: !12966)
!12987 = !DILocation(line: 5662, column: 18, scope: !12966)
!12988 = !DILocalVariable(name: "output_matched", scope: !12966, file: !3, line: 5663, type: !4339)
!12989 = !DILocation(line: 5663, column: 9, scope: !12966)
!12990 = !DILocation(line: 5663, column: 26, scope: !12966)
!12991 = !DILocation(line: 5665, column: 11, scope: !12966)
!12992 = !DILocation(line: 5665, column: 30, scope: !12966)
!12993 = !DILocation(line: 5665, column: 39, scope: !12966)
!12994 = !DILocation(line: 5665, column: 3, scope: !12966)
!12995 = !DILocation(line: 5666, column: 10, scope: !12996)
!12996 = distinct !DILexicalBlock(scope: !12966, file: !3, line: 5666, column: 3)
!12997 = !DILocation(line: 5666, column: 8, scope: !12996)
!12998 = !DILocation(line: 5666, column: 15, scope: !12999)
!12999 = distinct !DILexicalBlock(scope: !12996, file: !3, line: 5666, column: 3)
!13000 = !DILocation(line: 5666, column: 19, scope: !12999)
!13001 = !DILocation(line: 5666, column: 17, scope: !12999)
!13002 = !DILocation(line: 5666, column: 3, scope: !12996)
!13003 = !DILocalVariable(name: "input", scope: !13004, file: !3, line: 5668, type: !2924)
!13004 = distinct !DILexicalBlock(scope: !12999, file: !3, line: 5667, column: 5)
!13005 = !DILocation(line: 5668, column: 11, scope: !13004)
!13006 = !DILocalVariable(name: "output", scope: !13004, file: !3, line: 5668, type: !2924)
!13007 = !DILocation(line: 5668, column: 18, scope: !13004)
!13008 = !DILocalVariable(name: "insns", scope: !13004, file: !3, line: 5668, type: !2924)
!13009 = !DILocation(line: 5668, column: 26, scope: !13004)
!13010 = !DILocalVariable(name: "constraint", scope: !13004, file: !3, line: 5669, type: !2951)
!13011 = !DILocation(line: 5669, column: 19, scope: !13004)
!13012 = !DILocation(line: 5669, column: 32, scope: !13004)
!13013 = !DILocalVariable(name: "end", scope: !13004, file: !3, line: 5670, type: !3020)
!13014 = !DILocation(line: 5670, column: 13, scope: !13004)
!13015 = !DILocalVariable(name: "match", scope: !13004, file: !3, line: 5671, type: !2948)
!13016 = !DILocation(line: 5671, column: 11, scope: !13004)
!13017 = !DILocalVariable(name: "j", scope: !13004, file: !3, line: 5671, type: !2948)
!13018 = !DILocation(line: 5671, column: 18, scope: !13004)
!13019 = !DILocation(line: 5673, column: 12, scope: !13020)
!13020 = distinct !DILexicalBlock(scope: !13004, file: !3, line: 5673, column: 11)
!13021 = !DILocation(line: 5673, column: 11, scope: !13020)
!13022 = !DILocation(line: 5673, column: 23, scope: !13020)
!13023 = !DILocation(line: 5673, column: 11, scope: !13004)
!13024 = !DILocation(line: 5674, column: 12, scope: !13020)
!13025 = !DILocation(line: 5674, column: 2, scope: !13020)
!13026 = !DILocation(line: 5676, column: 24, scope: !13004)
!13027 = !DILocation(line: 5676, column: 15, scope: !13004)
!13028 = !DILocation(line: 5676, column: 13, scope: !13004)
!13029 = !DILocation(line: 5677, column: 11, scope: !13030)
!13030 = distinct !DILexicalBlock(scope: !13004, file: !3, line: 5677, column: 11)
!13031 = !DILocation(line: 5677, column: 18, scope: !13030)
!13032 = !DILocation(line: 5677, column: 15, scope: !13030)
!13033 = !DILocation(line: 5677, column: 11, scope: !13004)
!13034 = !DILocation(line: 5678, column: 2, scope: !13030)
!13035 = !DILocation(line: 5680, column: 7, scope: !13004)
!13036 = !DILocation(line: 5681, column: 16, scope: !13004)
!13037 = !DILocation(line: 5681, column: 14, scope: !13004)
!13038 = !DILocation(line: 5682, column: 15, scope: !13004)
!13039 = !DILocation(line: 5682, column: 13, scope: !13004)
!13040 = !DILocation(line: 5684, column: 13, scope: !13041)
!13041 = distinct !DILexicalBlock(scope: !13004, file: !3, line: 5684, column: 11)
!13042 = !DILocation(line: 5685, column: 4, scope: !13041)
!13043 = !DILocation(line: 5685, column: 20, scope: !13041)
!13044 = !DILocation(line: 5685, column: 28, scope: !13041)
!13045 = !DILocation(line: 5685, column: 7, scope: !13041)
!13046 = !DILocation(line: 5686, column: 4, scope: !13041)
!13047 = !DILocation(line: 5686, column: 8, scope: !13041)
!13048 = !DILocation(line: 5686, column: 25, scope: !13041)
!13049 = !DILocation(line: 5687, column: 8, scope: !13041)
!13050 = !DILocation(line: 5687, column: 11, scope: !13041)
!13051 = !DILocation(line: 5687, column: 31, scope: !13041)
!13052 = !DILocation(line: 5687, column: 28, scope: !13041)
!13053 = !DILocation(line: 5684, column: 11, scope: !13004)
!13054 = !DILocation(line: 5688, column: 2, scope: !13041)
!13055 = !DILocation(line: 5692, column: 14, scope: !13056)
!13056 = distinct !DILexicalBlock(scope: !13004, file: !3, line: 5692, column: 7)
!13057 = !DILocation(line: 5692, column: 12, scope: !13056)
!13058 = !DILocation(line: 5692, column: 19, scope: !13059)
!13059 = distinct !DILexicalBlock(scope: !13056, file: !3, line: 5692, column: 7)
!13060 = !DILocation(line: 5692, column: 23, scope: !13059)
!13061 = !DILocation(line: 5692, column: 21, scope: !13059)
!13062 = !DILocation(line: 5692, column: 7, scope: !13056)
!13063 = !DILocation(line: 5693, column: 38, scope: !13064)
!13064 = distinct !DILexicalBlock(scope: !13059, file: !3, line: 5693, column: 13)
!13065 = !DILocation(line: 5693, column: 46, scope: !13064)
!13066 = !DILocation(line: 5693, column: 13, scope: !13064)
!13067 = !DILocation(line: 5693, column: 13, scope: !13059)
!13068 = !DILocation(line: 5694, column: 4, scope: !13064)
!13069 = !DILocation(line: 5693, column: 67, scope: !13064)
!13070 = !DILocation(line: 5692, column: 33, scope: !13059)
!13071 = !DILocation(line: 5692, column: 7, scope: !13059)
!13072 = distinct !{!13072, !13062, !13073}
!13073 = !DILocation(line: 5694, column: 4, scope: !13056)
!13074 = !DILocation(line: 5695, column: 11, scope: !13075)
!13075 = distinct !DILexicalBlock(scope: !13004, file: !3, line: 5695, column: 11)
!13076 = !DILocation(line: 5695, column: 16, scope: !13075)
!13077 = !DILocation(line: 5695, column: 13, scope: !13075)
!13078 = !DILocation(line: 5695, column: 11, scope: !13004)
!13079 = !DILocation(line: 5696, column: 2, scope: !13075)
!13080 = !DILocation(line: 5702, column: 11, scope: !13081)
!13081 = distinct !DILexicalBlock(scope: !13004, file: !3, line: 5702, column: 11)
!13082 = !DILocation(line: 5702, column: 13, scope: !13081)
!13083 = !DILocation(line: 5702, column: 11, scope: !13004)
!13084 = !DILocation(line: 5704, column: 11, scope: !13085)
!13085 = distinct !DILexicalBlock(scope: !13086, file: !3, line: 5704, column: 4)
!13086 = distinct !DILexicalBlock(scope: !13081, file: !3, line: 5703, column: 2)
!13087 = !DILocation(line: 5704, column: 9, scope: !13085)
!13088 = !DILocation(line: 5704, column: 16, scope: !13089)
!13089 = distinct !DILexicalBlock(scope: !13085, file: !3, line: 5704, column: 4)
!13090 = !DILocation(line: 5704, column: 20, scope: !13089)
!13091 = !DILocation(line: 5704, column: 18, scope: !13089)
!13092 = !DILocation(line: 5704, column: 4, scope: !13085)
!13093 = !DILocation(line: 5705, column: 10, scope: !13094)
!13094 = distinct !DILexicalBlock(scope: !13089, file: !3, line: 5705, column: 10)
!13095 = !DILocation(line: 5705, column: 25, scope: !13094)
!13096 = !DILocation(line: 5705, column: 28, scope: !13094)
!13097 = !DILocation(line: 5705, column: 31, scope: !13094)
!13098 = !DILocation(line: 5705, column: 40, scope: !13094)
!13099 = !DILocation(line: 5705, column: 37, scope: !13094)
!13100 = !DILocation(line: 5705, column: 10, scope: !13089)
!13101 = !DILocation(line: 5706, column: 8, scope: !13094)
!13102 = !DILocation(line: 5704, column: 31, scope: !13089)
!13103 = !DILocation(line: 5704, column: 4, scope: !13089)
!13104 = distinct !{!13104, !13092, !13105}
!13105 = !DILocation(line: 5706, column: 8, scope: !13085)
!13106 = !DILocation(line: 5707, column: 8, scope: !13107)
!13107 = distinct !DILexicalBlock(scope: !13086, file: !3, line: 5707, column: 8)
!13108 = !DILocation(line: 5707, column: 13, scope: !13107)
!13109 = !DILocation(line: 5707, column: 10, scope: !13107)
!13110 = !DILocation(line: 5707, column: 8, scope: !13086)
!13111 = !DILocation(line: 5708, column: 6, scope: !13107)
!13112 = !DILocation(line: 5709, column: 2, scope: !13086)
!13113 = !DILocation(line: 5710, column: 7, scope: !13004)
!13114 = !DILocation(line: 5710, column: 22, scope: !13004)
!13115 = !DILocation(line: 5710, column: 29, scope: !13004)
!13116 = !DILocation(line: 5712, column: 7, scope: !13004)
!13117 = !DILocation(line: 5713, column: 23, scope: !13004)
!13118 = !DILocation(line: 5713, column: 31, scope: !13004)
!13119 = !DILocation(line: 5713, column: 7, scope: !13004)
!13120 = !DILocation(line: 5714, column: 15, scope: !13004)
!13121 = !DILocation(line: 5714, column: 13, scope: !13004)
!13122 = !DILocation(line: 5715, column: 7, scope: !13004)
!13123 = !DILocation(line: 5716, column: 25, scope: !13004)
!13124 = !DILocation(line: 5716, column: 32, scope: !13004)
!13125 = !DILocation(line: 5716, column: 7, scope: !13004)
!13126 = !DILocation(line: 5740, column: 14, scope: !13127)
!13127 = distinct !DILexicalBlock(scope: !13004, file: !3, line: 5740, column: 7)
!13128 = !DILocation(line: 5740, column: 12, scope: !13127)
!13129 = !DILocation(line: 5740, column: 19, scope: !13130)
!13130 = distinct !DILexicalBlock(scope: !13127, file: !3, line: 5740, column: 7)
!13131 = !DILocation(line: 5740, column: 23, scope: !13130)
!13132 = !DILocation(line: 5740, column: 21, scope: !13130)
!13133 = !DILocation(line: 5740, column: 7, scope: !13127)
!13134 = !DILocation(line: 5741, column: 20, scope: !13135)
!13135 = distinct !DILexicalBlock(scope: !13130, file: !3, line: 5741, column: 6)
!13136 = !DILocation(line: 5741, column: 42, scope: !13135)
!13137 = !DILocation(line: 5741, column: 7, scope: !13135)
!13138 = !DILocation(line: 5742, column: 6, scope: !13135)
!13139 = !DILocation(line: 5742, column: 34, scope: !13135)
!13140 = !DILocation(line: 5742, column: 41, scope: !13135)
!13141 = !DILocation(line: 5742, column: 9, scope: !13135)
!13142 = !DILocation(line: 5741, column: 6, scope: !13130)
!13143 = !DILocation(line: 5743, column: 40, scope: !13135)
!13144 = !DILocation(line: 5744, column: 12, scope: !13135)
!13145 = !DILocation(line: 5744, column: 19, scope: !13135)
!13146 = !DILocation(line: 5743, column: 27, scope: !13135)
!13147 = !DILocation(line: 5743, column: 4, scope: !13135)
!13148 = !DILocation(line: 5743, column: 25, scope: !13135)
!13149 = !DILocation(line: 5742, column: 61, scope: !13135)
!13150 = !DILocation(line: 5740, column: 34, scope: !13130)
!13151 = !DILocation(line: 5740, column: 7, scope: !13130)
!13152 = distinct !{!13152, !13133, !13153}
!13153 = !DILocation(line: 5744, column: 25, scope: !13127)
!13154 = !DILocation(line: 5745, column: 14, scope: !13155)
!13155 = distinct !DILexicalBlock(scope: !13004, file: !3, line: 5745, column: 7)
!13156 = !DILocation(line: 5745, column: 12, scope: !13155)
!13157 = !DILocation(line: 5745, column: 19, scope: !13158)
!13158 = distinct !DILexicalBlock(scope: !13155, file: !3, line: 5745, column: 7)
!13159 = !DILocation(line: 5745, column: 23, scope: !13158)
!13160 = !DILocation(line: 5745, column: 21, scope: !13158)
!13161 = !DILocation(line: 5745, column: 7, scope: !13155)
!13162 = !DILocation(line: 5746, column: 31, scope: !13163)
!13163 = distinct !DILexicalBlock(scope: !13158, file: !3, line: 5746, column: 6)
!13164 = !DILocation(line: 5746, column: 38, scope: !13163)
!13165 = !DILocation(line: 5746, column: 6, scope: !13163)
!13166 = !DILocation(line: 5746, column: 6, scope: !13158)
!13167 = !DILocation(line: 5747, column: 41, scope: !13163)
!13168 = !DILocation(line: 5748, column: 13, scope: !13163)
!13169 = !DILocation(line: 5748, column: 20, scope: !13163)
!13170 = !DILocation(line: 5747, column: 28, scope: !13163)
!13171 = !DILocation(line: 5747, column: 4, scope: !13163)
!13172 = !DILocation(line: 5747, column: 26, scope: !13163)
!13173 = !DILocation(line: 5746, column: 59, scope: !13163)
!13174 = !DILocation(line: 5745, column: 33, scope: !13158)
!13175 = !DILocation(line: 5745, column: 7, scope: !13158)
!13176 = distinct !{!13176, !13161, !13177}
!13177 = !DILocation(line: 5748, column: 26, scope: !13155)
!13178 = !DILocation(line: 5750, column: 15, scope: !13004)
!13179 = !DILocation(line: 5751, column: 5, scope: !13004)
!13180 = !DILocation(line: 5666, column: 29, scope: !12999)
!13181 = !DILocation(line: 5666, column: 3, scope: !12999)
!13182 = distinct !{!13182, !13002, !13183}
!13183 = !DILocation(line: 5751, column: 5, scope: !12996)
!13184 = !DILocation(line: 5753, column: 7, scope: !13185)
!13185 = distinct !DILexicalBlock(scope: !12966, file: !3, line: 5753, column: 7)
!13186 = !DILocation(line: 5753, column: 7, scope: !12966)
!13187 = !DILocation(line: 5754, column: 21, scope: !13185)
!13188 = !DILocation(line: 5754, column: 5, scope: !13185)
!13189 = !DILocation(line: 5755, column: 1, scope: !12966)
