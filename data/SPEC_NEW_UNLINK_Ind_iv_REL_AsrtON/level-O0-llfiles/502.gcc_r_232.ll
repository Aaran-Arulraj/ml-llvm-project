; ModuleID = 'reg-stack.c'
source_filename = "reg-stack.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VEC_char_heap = type { %struct.VEC_char_base }
%struct.VEC_char_base = type { i32, i32, [1 x i8] }
%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.df = type { [8 x %struct.dataflow*], [8 x %struct.dataflow*], %struct.bitmap_head_def*, %struct.df_ref_info, %struct.df_ref_info, %struct.df_reg_info**, %struct.df_reg_info**, %struct.df_reg_info**, i32, i32, %struct.df_insn_info**, i32, i32, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32*, i32*, i32, i32, i32*, i32, i8, i8, i8 }
%struct.dataflow = type { %struct.df_problem*, i8**, i32, %struct.alloc_pool_def*, %struct.bitmap_head_def*, i8*, i32, i8, i8, i8 }
%struct.df_problem = type { i32, i32, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.basic_block_def*, i8*)*, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.dataflow*, %struct.bitmap_head_def*, i32*, i32)*, void (%struct.basic_block_def*)*, void (%struct.edge_def*)*, i8 (i32)*, void (%struct.bitmap_head_def*)*, void ()*, void ()*, void (%struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void ()*, void ()*, %struct.df_problem*, i32, i8 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.df_ref_info = type { %union.df_ref_d**, i32*, i32*, i32, i32, i32, i32 }
%union.df_ref_d = type { %struct.df_extract_ref }
%struct.df_extract_ref = type { %struct.df_regular_ref, i32, i32, i32 }
%struct.df_regular_ref = type { %struct.df_base_ref, %struct.rtx_def** }
%struct.df_base_ref = type { i32, %struct.rtx_def*, %struct.df_link*, %struct.df_insn_info*, %union.df_ref_d*, %union.df_ref_d*, i32, i32, i32 }
%struct.df_link = type { %union.df_ref_d*, %struct.df_link* }
%struct.df_insn_info = type { %struct.rtx_def*, %union.df_ref_d**, %union.df_ref_d**, %union.df_ref_d**, %struct.df_mw_hardreg**, i32 }
%struct.df_mw_hardreg = type { %struct.rtx_def*, i32, i32, i32, i32 }
%struct.df_reg_info = type { %union.df_ref_d*, i32 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%union.gimple_statement_d = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.recog_data = type { [30 x %struct.rtx_def*], [30 x %struct.rtx_def**], [30 x i8*], [30 x i32], [30 x i32], [14 x %struct.rtx_def**], [14 x i8], i8, i8, i8, [30 x i8], %struct.rtx_def* }
%struct.operand_alternative = type { i8*, i32, i32, i32, i32, i8 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.block_info_def = type { %struct.stack_def, %struct.stack_def, i64, i32, i32 }
%struct.stack_def = type { i32, i64, [8 x i8] }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.real_value = type { i32, [3 x i64] }
%struct.df_lr_bb_info = type { %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }

@regstack_completed = dso_local global i32 0, align 4, !dbg !0
@stack_regs_mentioned_data = internal global %struct.VEC_char_heap* null, align 8, !dbg !2040
@.str = private unnamed_addr constant [12 x i8] c"*stack_regs\00", align 1
@pass_stack_regs = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i32 0, i32 0), i8 ()* @gate_handle_stack_regs, i32 ()* null, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 164, i32 0, i32 0, i32 0, i32 0, i32 0 } }, align 8, !dbg !2010
@.str.1 = private unnamed_addr constant [6 x i8] c"stack\00", align 1
@pass_stack_regs_run = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i32 0, i32 0), i8 ()* null, i32 ()* @rest_of_handle_stack_regs, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 164, i32 0, i32 0, i32 0, i32 0, i32 132099 } }, align 8, !dbg !2038
@rtx_format = external dso_local constant [139 x i8*], align 16
@rtx_length = external dso_local constant [139 x i8], align 16
@cfun = external dso_local global %struct.function*, align 8
@class_narrowest_mode = external dso_local constant [18 x i8], align 16
@FP_mode_reg = internal global [8 x [87 x %struct.rtx_def*]] zeroinitializer, align 16, !dbg !2042
@mode_wider = external dso_local constant [87 x i8], align 16
@ix86_flags_rtx = internal global %struct.rtx_def* null, align 8, !dbg !2047
@flag_pic = external dso_local global i32, align 4
@ix86_cmodel = external dso_local global i32, align 4
@const_tiny_rtx = external dso_local global [3 x [87 x %struct.rtx_def*]], align 16
@not_a_num = internal global %struct.rtx_def* null, align 8, !dbg !2049
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@df = external dso_local global %struct.df*, align 8
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@current_function_decl = external dso_local global %union.tree_node*, align 8
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@targetm = external dso_local global %struct.gcc_target, align 8
@hard_regno_nregs = external dso_local global [53 x [87 x i8]], align 16
@any_malformed_asm = internal global i8 0, align 1, !dbg !2051
@.str.5 = private unnamed_addr constant [30 x i8] c"\0ABasic block %d\0AInput stack: \00", align 1
@current_block = internal global %struct.basic_block_def* null, align 8, !dbg !2053
@starting_stack_p = internal global i8 0, align 1, !dbg !2055
@.str.6 = private unnamed_addr constant [12 x i8] c"reg-stack.c\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"  insn %d input stack: \00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"Expected live registers [\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@.str.10 = private unnamed_addr constant [18 x i8] c" ]\0AOutput stack: \00", align 1
@.str.11 = private unnamed_addr constant [35 x i8] c"Emitting insn initializing reg %d\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"uninitialized\0A\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"empty\0A\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"[ \00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"]\0A\00", align 1
@flag_unsafe_math_optimizations = external dso_local global i32, align 4
@mode_class = external dso_local constant [87 x i8], align 16
@which_alternative = external dso_local global i32, align 4
@recog_data = external dso_local global %struct.recog_data, align 8
@recog_op_alt = external dso_local global [30 x [30 x %struct.operand_alternative]], align 16
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@reg_class_size = external dso_local global [27 x i32], align 16
@.str.17 = private unnamed_addr constant [52 x i8] c"output constraint %d must specify a single register\00", align 1
@.str.18 = private unnamed_addr constant [68 x i8] c"output constraint %d cannot be specified together with \22%s\22 clobber\00", align 1
@reg_names = external dso_local global [53 x i8*], align 16
@.str.19 = private unnamed_addr constant [44 x i8] c"output regs must be grouped at top of stack\00", align 1
@.str.20 = private unnamed_addr constant [55 x i8] c"implicitly popped regs must be grouped at top of stack\00", align 1
@.str.21 = private unnamed_addr constant [44 x i8] c"output operand %d must use %<&%> constraint\00", align 1
@global_rtl = external dso_local global [11 x %struct.rtx_def*], align 16
@rtx_class = external dso_local constant [139 x i32], align 16
@.str.22 = private unnamed_addr constant [14 x i8] c"Edge %d->%d: \00", align 1
@.str.23 = private unnamed_addr constant [19 x i8] c"no changes needed\0A\00", align 1
@.str.24 = private unnamed_addr constant [21 x i8] c"correcting stack to \00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @stack_regs_mentioned(%struct.rtx_def* %insn) #0 !dbg !2061 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %uid = alloca i32, align 4
  %max = alloca i32, align 4
  %test = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !2068, metadata !DIExpression()), !dbg !2069
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !2070, metadata !DIExpression()), !dbg !2071
  call void @llvm.dbg.declare(metadata i32* %max, metadata !2072, metadata !DIExpression()), !dbg !2073
  call void @llvm.dbg.declare(metadata i32* %test, metadata !2074, metadata !DIExpression()), !dbg !2075
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2076
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !2076
  %bf.load = load i32, i32* %1, align 8, !dbg !2076
  %bf.clear = and i32 %bf.load, 65535, !dbg !2076
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !2076
  br i1 %cmp, label %lor.lhs.false12, label %lor.lhs.false, !dbg !2076

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2076
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !2076
  %bf.load1 = load i32, i32* %3, align 8, !dbg !2076
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !2076
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !2076
  br i1 %cmp3, label %lor.lhs.false12, label %lor.lhs.false4, !dbg !2076

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2076
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !2076
  %bf.load5 = load i32, i32* %5, align 8, !dbg !2076
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !2076
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !2076
  br i1 %cmp7, label %lor.lhs.false12, label %lor.lhs.false8, !dbg !2076

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2076
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !2076
  %bf.load9 = load i32, i32* %7, align 8, !dbg !2076
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !2076
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !2076
  br i1 %cmp11, label %lor.lhs.false12, label %if.then, !dbg !2078

lor.lhs.false12:                                  ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** @stack_regs_mentioned_data, align 8, !dbg !2079
  %tobool = icmp ne %struct.VEC_char_heap* %8, null, !dbg !2079
  br i1 %tobool, label %if.end, label %if.then, !dbg !2080

if.then:                                          ; preds = %lor.lhs.false12, %lor.lhs.false8
  store i32 0, i32* %retval, align 4, !dbg !2081
  br label %return, !dbg !2081

if.end:                                           ; preds = %lor.lhs.false12
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2082
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !2082
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2082
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !2082
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !2082
  %10 = load i32, i32* %rt_int, align 8, !dbg !2082
  store i32 %10, i32* %uid, align 4, !dbg !2083
  %11 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** @stack_regs_mentioned_data, align 8, !dbg !2084
  %tobool13 = icmp ne %struct.VEC_char_heap* %11, null, !dbg !2084
  br i1 %tobool13, label %cond.true, label %cond.false, !dbg !2084

cond.true:                                        ; preds = %if.end
  %12 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** @stack_regs_mentioned_data, align 8, !dbg !2084
  %base = getelementptr inbounds %struct.VEC_char_heap, %struct.VEC_char_heap* %12, i32 0, i32 0, !dbg !2084
  br label %cond.end, !dbg !2084

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !2084

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_char_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2084
  %call = call i32 @VEC_char_base_length(%struct.VEC_char_base* %cond), !dbg !2084
  store i32 %call, i32* %max, align 4, !dbg !2085
  %13 = load i32, i32* %uid, align 4, !dbg !2086
  %14 = load i32, i32* %max, align 4, !dbg !2088
  %cmp14 = icmp uge i32 %13, %14, !dbg !2089
  br i1 %cmp14, label %if.then15, label %if.end17, !dbg !2090

if.then15:                                        ; preds = %cond.end
  %15 = load i32, i32* %uid, align 4, !dbg !2091
  %16 = load i32, i32* %uid, align 4, !dbg !2093
  %div = udiv i32 %16, 20, !dbg !2094
  %add = add i32 %15, %div, !dbg !2095
  %add16 = add i32 %add, 1, !dbg !2096
  store i32 %add16, i32* %max, align 4, !dbg !2097
  %17 = load i32, i32* %max, align 4, !dbg !2098
  call void @VEC_char_heap_safe_grow_cleared(%struct.VEC_char_heap** @stack_regs_mentioned_data, i32 %17), !dbg !2098
  br label %if.end17, !dbg !2099

if.end17:                                         ; preds = %if.then15, %cond.end
  %18 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** @stack_regs_mentioned_data, align 8, !dbg !2100
  %tobool18 = icmp ne %struct.VEC_char_heap* %18, null, !dbg !2100
  br i1 %tobool18, label %cond.true19, label %cond.false21, !dbg !2100

cond.true19:                                      ; preds = %if.end17
  %19 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** @stack_regs_mentioned_data, align 8, !dbg !2100
  %base20 = getelementptr inbounds %struct.VEC_char_heap, %struct.VEC_char_heap* %19, i32 0, i32 0, !dbg !2100
  br label %cond.end22, !dbg !2100

cond.false21:                                     ; preds = %if.end17
  br label %cond.end22, !dbg !2100

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi %struct.VEC_char_base* [ %base20, %cond.true19 ], [ null, %cond.false21 ], !dbg !2100
  %20 = load i32, i32* %uid, align 4, !dbg !2100
  %call24 = call signext i8 @VEC_char_base_index(%struct.VEC_char_base* %cond23, i32 %20), !dbg !2100
  %conv = sext i8 %call24 to i32, !dbg !2100
  store i32 %conv, i32* %test, align 4, !dbg !2101
  %21 = load i32, i32* %test, align 4, !dbg !2102
  %cmp25 = icmp eq i32 %21, 0, !dbg !2104
  br i1 %cmp25, label %if.then27, label %if.end42, !dbg !2105

if.then27:                                        ; preds = %cond.end22
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2106
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !2106
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !2106
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 5, !dbg !2106
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !2106
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2106
  %call31 = call i32 @stack_regs_mentioned_p(%struct.rtx_def* %23), !dbg !2108
  %tobool32 = icmp ne i32 %call31, 0, !dbg !2108
  %24 = zext i1 %tobool32 to i64, !dbg !2108
  %cond33 = select i1 %tobool32, i32 1, i32 2, !dbg !2108
  store i32 %cond33, i32* %test, align 4, !dbg !2109
  %25 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** @stack_regs_mentioned_data, align 8, !dbg !2110
  %tobool34 = icmp ne %struct.VEC_char_heap* %25, null, !dbg !2110
  br i1 %tobool34, label %cond.true35, label %cond.false37, !dbg !2110

cond.true35:                                      ; preds = %if.then27
  %26 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** @stack_regs_mentioned_data, align 8, !dbg !2110
  %base36 = getelementptr inbounds %struct.VEC_char_heap, %struct.VEC_char_heap* %26, i32 0, i32 0, !dbg !2110
  br label %cond.end38, !dbg !2110

cond.false37:                                     ; preds = %if.then27
  br label %cond.end38, !dbg !2110

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi %struct.VEC_char_base* [ %base36, %cond.true35 ], [ null, %cond.false37 ], !dbg !2110
  %27 = load i32, i32* %uid, align 4, !dbg !2110
  %28 = load i32, i32* %test, align 4, !dbg !2110
  %conv40 = trunc i32 %28 to i8, !dbg !2110
  %call41 = call signext i8 @VEC_char_base_replace(%struct.VEC_char_base* %cond39, i32 %27, i8 signext %conv40), !dbg !2110
  br label %if.end42, !dbg !2111

if.end42:                                         ; preds = %cond.end38, %cond.end22
  %29 = load i32, i32* %test, align 4, !dbg !2112
  %cmp43 = icmp eq i32 %29, 1, !dbg !2113
  %conv44 = zext i1 %cmp43 to i32, !dbg !2113
  store i32 %conv44, i32* %retval, align 4, !dbg !2114
  br label %return, !dbg !2114

return:                                           ; preds = %if.end42, %if.then
  %30 = load i32, i32* %retval, align 4, !dbg !2115
  ret i32 %30, !dbg !2115
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_char_base_length(%struct.VEC_char_base* %vec_) #0 !dbg !2116 {
entry:
  %vec_.addr = alloca %struct.VEC_char_base*, align 8
  store %struct.VEC_char_base* %vec_, %struct.VEC_char_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_char_base** %vec_.addr, metadata !2121, metadata !DIExpression()), !dbg !2122
  %0 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2122
  %tobool = icmp ne %struct.VEC_char_base* %0, null, !dbg !2122
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2122

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2122
  %num = getelementptr inbounds %struct.VEC_char_base, %struct.VEC_char_base* %1, i32 0, i32 0, !dbg !2122
  %2 = load i32, i32* %num, align 4, !dbg !2122
  br label %cond.end, !dbg !2122

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2122

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2122
  ret i32 %cond, !dbg !2122
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_char_heap_safe_grow_cleared(%struct.VEC_char_heap** %vec_, i32 %size_) #0 !dbg !2123 {
entry:
  %vec_.addr = alloca %struct.VEC_char_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_char_heap** %vec_, %struct.VEC_char_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_char_heap*** %vec_.addr, metadata !2127, metadata !DIExpression()), !dbg !2128
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !2129, metadata !DIExpression()), !dbg !2128
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !2130, metadata !DIExpression()), !dbg !2128
  %0 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2128
  %1 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %0, align 8, !dbg !2128
  %tobool = icmp ne %struct.VEC_char_heap* %1, null, !dbg !2128
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2128

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2128
  %3 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %2, align 8, !dbg !2128
  %base = getelementptr inbounds %struct.VEC_char_heap, %struct.VEC_char_heap* %3, i32 0, i32 0, !dbg !2128
  br label %cond.end, !dbg !2128

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2128

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_char_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2128
  %call = call i32 @VEC_char_base_length(%struct.VEC_char_base* %cond), !dbg !2128
  store i32 %call, i32* %oldsize, align 4, !dbg !2128
  %4 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2128
  %5 = load i32, i32* %size_.addr, align 4, !dbg !2128
  call void @VEC_char_heap_safe_grow(%struct.VEC_char_heap** %4, i32 %5), !dbg !2128
  %6 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2128
  %7 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %6, align 8, !dbg !2128
  %tobool1 = icmp ne %struct.VEC_char_heap* %7, null, !dbg !2128
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !2128

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2128
  %9 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %8, align 8, !dbg !2128
  %base3 = getelementptr inbounds %struct.VEC_char_heap, %struct.VEC_char_heap* %9, i32 0, i32 0, !dbg !2128
  br label %cond.end5, !dbg !2128

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2128

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_char_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !2128
  %call7 = call i8* @VEC_char_base_address(%struct.VEC_char_base* %cond6), !dbg !2128
  %10 = load i32, i32* %oldsize, align 4, !dbg !2128
  %idxprom = sext i32 %10 to i64, !dbg !2128
  %arrayidx = getelementptr inbounds i8, i8* %call7, i64 %idxprom, !dbg !2128
  %11 = load i32, i32* %size_.addr, align 4, !dbg !2128
  %12 = load i32, i32* %oldsize, align 4, !dbg !2128
  %sub = sub nsw i32 %11, %12, !dbg !2128
  %conv = sext i32 %sub to i64, !dbg !2128
  %mul = mul i64 1, %conv, !dbg !2128
  call void @llvm.memset.p0i8.i64(i8* align 1 %arrayidx, i8 0, i64 %mul, i1 false), !dbg !2128
  ret void, !dbg !2128
}

; Function Attrs: noinline nounwind uwtable
define internal signext i8 @VEC_char_base_index(%struct.VEC_char_base* %vec_, i32 %ix_) #0 !dbg !2131 {
entry:
  %vec_.addr = alloca %struct.VEC_char_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_char_base* %vec_, %struct.VEC_char_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_char_base** %vec_.addr, metadata !2134, metadata !DIExpression()), !dbg !2135
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2136, metadata !DIExpression()), !dbg !2135
  %0 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2135
  %tobool = icmp ne %struct.VEC_char_base* %0, null, !dbg !2135
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2135

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2135
  %2 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2135
  %num = getelementptr inbounds %struct.VEC_char_base, %struct.VEC_char_base* %2, i32 0, i32 0, !dbg !2135
  %3 = load i32, i32* %num, align 4, !dbg !2135
  %cmp = icmp ult i32 %1, %3, !dbg !2135
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2137
  %land.ext = zext i1 %4 to i32, !dbg !2135
  %5 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2135
  %vec = getelementptr inbounds %struct.VEC_char_base, %struct.VEC_char_base* %5, i32 0, i32 2, !dbg !2135
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2135
  %idxprom = zext i32 %6 to i64, !dbg !2135
  %arrayidx = getelementptr inbounds [1 x i8], [1 x i8]* %vec, i64 0, i64 %idxprom, !dbg !2135
  %7 = load i8, i8* %arrayidx, align 1, !dbg !2135
  ret i8 %7, !dbg !2135
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @stack_regs_mentioned_p(%struct.rtx_def* %pat) #0 !dbg !2138 {
entry:
  %retval = alloca i32, align 4
  %pat.addr = alloca %struct.rtx_def*, align 8
  %fmt = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !2139, metadata !DIExpression()), !dbg !2140
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !2141, metadata !DIExpression()), !dbg !2142
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2143, metadata !DIExpression()), !dbg !2144
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !2145
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !2145
  %bf.load = load i32, i32* %1, align 8, !dbg !2145
  %bf.clear = and i32 %bf.load, 65535, !dbg !2145
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !2145
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !2145

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !2145
  %call = call i32 @rhs_regno(%struct.rtx_def* %2), !dbg !2145
  %conv = zext i32 %call to i64, !dbg !2145
  %sub = sub i64 %conv, 8, !dbg !2145
  %cmp1 = icmp ule i64 %sub, 7, !dbg !2145
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2147

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !2148
  br label %return, !dbg !2148

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !2149
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !2149
  %bf.load3 = load i32, i32* %4, align 8, !dbg !2149
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !2149
  %idxprom = sext i32 %bf.clear4 to i64, !dbg !2149
  %arrayidx = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom, !dbg !2149
  %5 = load i8*, i8** %arrayidx, align 8, !dbg !2149
  store i8* %5, i8** %fmt, align 8, !dbg !2150
  %6 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !2151
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !2151
  %bf.load5 = load i32, i32* %7, align 8, !dbg !2151
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !2151
  %idxprom7 = sext i32 %bf.clear6 to i64, !dbg !2151
  %arrayidx8 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom7, !dbg !2151
  %8 = load i8, i8* %arrayidx8, align 1, !dbg !2151
  %conv9 = zext i8 %8 to i32, !dbg !2151
  %sub10 = sub nsw i32 %conv9, 1, !dbg !2153
  store i32 %sub10, i32* %i, align 4, !dbg !2154
  br label %for.cond, !dbg !2155

for.cond:                                         ; preds = %for.inc51, %if.end
  %9 = load i32, i32* %i, align 4, !dbg !2156
  %cmp11 = icmp sge i32 %9, 0, !dbg !2158
  br i1 %cmp11, label %for.body, label %for.end53, !dbg !2159

for.body:                                         ; preds = %for.cond
  %10 = load i8*, i8** %fmt, align 8, !dbg !2160
  %11 = load i32, i32* %i, align 4, !dbg !2163
  %idxprom13 = sext i32 %11 to i64, !dbg !2160
  %arrayidx14 = getelementptr inbounds i8, i8* %10, i64 %idxprom13, !dbg !2160
  %12 = load i8, i8* %arrayidx14, align 1, !dbg !2160
  %conv15 = sext i8 %12 to i32, !dbg !2160
  %cmp16 = icmp eq i32 %conv15, 69, !dbg !2164
  br i1 %cmp16, label %if.then18, label %if.else, !dbg !2165

if.then18:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2166, metadata !DIExpression()), !dbg !2168
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !2169
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !2169
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2169
  %14 = load i32, i32* %i, align 4, !dbg !2169
  %idxprom19 = sext i32 %14 to i64, !dbg !2169
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom19, !dbg !2169
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtvec_def**, !dbg !2169
  %15 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !2169
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %15, i32 0, i32 0, !dbg !2169
  %16 = load i32, i32* %num_elem, align 8, !dbg !2169
  %sub21 = sub nsw i32 %16, 1, !dbg !2171
  store i32 %sub21, i32* %j, align 4, !dbg !2172
  br label %for.cond22, !dbg !2173

for.cond22:                                       ; preds = %for.inc, %if.then18
  %17 = load i32, i32* %j, align 4, !dbg !2174
  %cmp23 = icmp sge i32 %17, 0, !dbg !2176
  br i1 %cmp23, label %for.body25, label %for.end, !dbg !2177

for.body25:                                       ; preds = %for.cond22
  %18 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !2178
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !2178
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !2178
  %19 = load i32, i32* %i, align 4, !dbg !2178
  %idxprom28 = sext i32 %19 to i64, !dbg !2178
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 %idxprom28, !dbg !2178
  %rt_rtvec30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtvec_def**, !dbg !2178
  %20 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec30, align 8, !dbg !2178
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %20, i32 0, i32 1, !dbg !2178
  %21 = load i32, i32* %j, align 4, !dbg !2178
  %idxprom31 = sext i32 %21 to i64, !dbg !2178
  %arrayidx32 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom31, !dbg !2178
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx32, align 8, !dbg !2178
  %call33 = call i32 @stack_regs_mentioned_p(%struct.rtx_def* %22), !dbg !2180
  %tobool = icmp ne i32 %call33, 0, !dbg !2180
  br i1 %tobool, label %if.then34, label %if.end35, !dbg !2181

if.then34:                                        ; preds = %for.body25
  store i32 1, i32* %retval, align 4, !dbg !2182
  br label %return, !dbg !2182

if.end35:                                         ; preds = %for.body25
  br label %for.inc, !dbg !2183

for.inc:                                          ; preds = %if.end35
  %23 = load i32, i32* %j, align 4, !dbg !2184
  %dec = add nsw i32 %23, -1, !dbg !2184
  store i32 %dec, i32* %j, align 4, !dbg !2184
  br label %for.cond22, !dbg !2185, !llvm.loop !2186

for.end:                                          ; preds = %for.cond22
  br label %if.end50, !dbg !2188

if.else:                                          ; preds = %for.body
  %24 = load i8*, i8** %fmt, align 8, !dbg !2189
  %25 = load i32, i32* %i, align 4, !dbg !2191
  %idxprom36 = sext i32 %25 to i64, !dbg !2189
  %arrayidx37 = getelementptr inbounds i8, i8* %24, i64 %idxprom36, !dbg !2189
  %26 = load i8, i8* %arrayidx37, align 1, !dbg !2189
  %conv38 = sext i8 %26 to i32, !dbg !2189
  %cmp39 = icmp eq i32 %conv38, 101, !dbg !2192
  br i1 %cmp39, label %land.lhs.true41, label %if.end49, !dbg !2193

land.lhs.true41:                                  ; preds = %if.else
  %27 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !2194
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !2194
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !2194
  %28 = load i32, i32* %i, align 4, !dbg !2194
  %idxprom44 = sext i32 %28 to i64, !dbg !2194
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 %idxprom44, !dbg !2194
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**, !dbg !2194
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2194
  %call46 = call i32 @stack_regs_mentioned_p(%struct.rtx_def* %29), !dbg !2195
  %tobool47 = icmp ne i32 %call46, 0, !dbg !2195
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !2196

if.then48:                                        ; preds = %land.lhs.true41
  store i32 1, i32* %retval, align 4, !dbg !2197
  br label %return, !dbg !2197

if.end49:                                         ; preds = %land.lhs.true41, %if.else
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %for.end
  br label %for.inc51, !dbg !2198

for.inc51:                                        ; preds = %if.end50
  %30 = load i32, i32* %i, align 4, !dbg !2199
  %dec52 = add nsw i32 %30, -1, !dbg !2199
  store i32 %dec52, i32* %i, align 4, !dbg !2199
  br label %for.cond, !dbg !2200, !llvm.loop !2201

for.end53:                                        ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !2203
  br label %return, !dbg !2203

return:                                           ; preds = %for.end53, %if.then48, %if.then34, %if.then
  %31 = load i32, i32* %retval, align 4, !dbg !2204
  ret i32 %31, !dbg !2204
}

; Function Attrs: noinline nounwind uwtable
define internal signext i8 @VEC_char_base_replace(%struct.VEC_char_base* %vec_, i32 %ix_, i8 signext %obj_) #0 !dbg !2205 {
entry:
  %vec_.addr = alloca %struct.VEC_char_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca i8, align 1
  %old_obj_ = alloca i8, align 1
  store %struct.VEC_char_base* %vec_, %struct.VEC_char_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_char_base** %vec_.addr, metadata !2209, metadata !DIExpression()), !dbg !2210
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2211, metadata !DIExpression()), !dbg !2210
  store i8 %obj_, i8* %obj_.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %obj_.addr, metadata !2212, metadata !DIExpression()), !dbg !2210
  call void @llvm.dbg.declare(metadata i8* %old_obj_, metadata !2213, metadata !DIExpression()), !dbg !2210
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !2210
  %1 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2210
  %num = getelementptr inbounds %struct.VEC_char_base, %struct.VEC_char_base* %1, i32 0, i32 0, !dbg !2210
  %2 = load i32, i32* %num, align 4, !dbg !2210
  %cmp = icmp ult i32 %0, %2, !dbg !2210
  %conv = zext i1 %cmp to i32, !dbg !2210
  %3 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2210
  %vec = getelementptr inbounds %struct.VEC_char_base, %struct.VEC_char_base* %3, i32 0, i32 2, !dbg !2210
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !2210
  %idxprom = zext i32 %4 to i64, !dbg !2210
  %arrayidx = getelementptr inbounds [1 x i8], [1 x i8]* %vec, i64 0, i64 %idxprom, !dbg !2210
  %5 = load i8, i8* %arrayidx, align 1, !dbg !2210
  store i8 %5, i8* %old_obj_, align 1, !dbg !2210
  %6 = load i8, i8* %obj_.addr, align 1, !dbg !2210
  %7 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2210
  %vec1 = getelementptr inbounds %struct.VEC_char_base, %struct.VEC_char_base* %7, i32 0, i32 2, !dbg !2210
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !2210
  %idxprom2 = zext i32 %8 to i64, !dbg !2210
  %arrayidx3 = getelementptr inbounds [1 x i8], [1 x i8]* %vec1, i64 0, i64 %idxprom2, !dbg !2210
  store i8 %6, i8* %arrayidx3, align 1, !dbg !2210
  %9 = load i8, i8* %old_obj_, align 1, !dbg !2210
  ret i8 %9, !dbg !2210
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_handle_stack_regs() #0 !dbg !2214 {
entry:
  ret i8 1, !dbg !2215
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_stack_regs() #0 !dbg !2216 {
entry:
  %call = call zeroext i8 @reg_to_stack(), !dbg !2217
  store i32 1, i32* @regstack_completed, align 4, !dbg !2218
  ret i32 0, !dbg !2219
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_char_heap_safe_grow(%struct.VEC_char_heap** %vec_, i32 %size_) #0 !dbg !2220 {
entry:
  %vec_.addr = alloca %struct.VEC_char_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_char_heap** %vec_, %struct.VEC_char_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_char_heap*** %vec_.addr, metadata !2221, metadata !DIExpression()), !dbg !2222
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !2223, metadata !DIExpression()), !dbg !2222
  %0 = load i32, i32* %size_.addr, align 4, !dbg !2222
  %cmp = icmp sge i32 %0, 0, !dbg !2222
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !2222

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2222
  %2 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %1, align 8, !dbg !2222
  %tobool = icmp ne %struct.VEC_char_heap* %2, null, !dbg !2222
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2222

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2222
  %4 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %3, align 8, !dbg !2222
  %base = getelementptr inbounds %struct.VEC_char_heap, %struct.VEC_char_heap* %4, i32 0, i32 0, !dbg !2222
  br label %cond.end, !dbg !2222

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !2222

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_char_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2222
  %call = call i32 @VEC_char_base_length(%struct.VEC_char_base* %cond), !dbg !2222
  %5 = load i32, i32* %size_.addr, align 4, !dbg !2222
  %cmp1 = icmp ule i32 %call, %5, !dbg !2222
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !2224
  %land.ext = zext i1 %6 to i32, !dbg !2222
  %7 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2222
  %8 = load i32, i32* %size_.addr, align 4, !dbg !2222
  %9 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2222
  %10 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %9, align 8, !dbg !2222
  %tobool2 = icmp ne %struct.VEC_char_heap* %10, null, !dbg !2222
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !2222

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2222
  %12 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %11, align 8, !dbg !2222
  %tobool4 = icmp ne %struct.VEC_char_heap* %12, null, !dbg !2222
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !2222

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2222
  %14 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %13, align 8, !dbg !2222
  %base6 = getelementptr inbounds %struct.VEC_char_heap, %struct.VEC_char_heap* %14, i32 0, i32 0, !dbg !2222
  br label %cond.end8, !dbg !2222

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !2222

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_char_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !2222
  %num = getelementptr inbounds %struct.VEC_char_base, %struct.VEC_char_base* %cond9, i32 0, i32 0, !dbg !2222
  %15 = load i32, i32* %num, align 4, !dbg !2222
  br label %cond.end11, !dbg !2222

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !2222

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !2222
  %sub = sub nsw i32 %8, %cond12, !dbg !2222
  %call13 = call i32 @VEC_char_heap_reserve_exact(%struct.VEC_char_heap** %7, i32 %sub), !dbg !2222
  %16 = load i32, i32* %size_.addr, align 4, !dbg !2222
  %17 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2222
  %18 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %17, align 8, !dbg !2222
  %tobool14 = icmp ne %struct.VEC_char_heap* %18, null, !dbg !2222
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !2222

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2222
  %20 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %19, align 8, !dbg !2222
  %base16 = getelementptr inbounds %struct.VEC_char_heap, %struct.VEC_char_heap* %20, i32 0, i32 0, !dbg !2222
  br label %cond.end18, !dbg !2222

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !2222

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_char_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !2222
  %num20 = getelementptr inbounds %struct.VEC_char_base, %struct.VEC_char_base* %cond19, i32 0, i32 0, !dbg !2222
  store i32 %16, i32* %num20, align 4, !dbg !2222
  ret void, !dbg !2222
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @VEC_char_base_address(%struct.VEC_char_base* %vec_) #0 !dbg !2225 {
entry:
  %vec_.addr = alloca %struct.VEC_char_base*, align 8
  store %struct.VEC_char_base* %vec_, %struct.VEC_char_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_char_base** %vec_.addr, metadata !2228, metadata !DIExpression()), !dbg !2229
  %0 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2229
  %tobool = icmp ne %struct.VEC_char_base* %0, null, !dbg !2229
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2229

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2229
  %vec = getelementptr inbounds %struct.VEC_char_base, %struct.VEC_char_base* %1, i32 0, i32 2, !dbg !2229
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %vec, i64 0, i64 0, !dbg !2229
  br label %cond.end, !dbg !2229

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2229

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !2229
  ret i8* %cond, !dbg !2229
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_char_heap_reserve_exact(%struct.VEC_char_heap** %vec_, i32 %alloc_) #0 !dbg !2230 {
entry:
  %vec_.addr = alloca %struct.VEC_char_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_char_heap** %vec_, %struct.VEC_char_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_char_heap*** %vec_.addr, metadata !2233, metadata !DIExpression()), !dbg !2234
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !2235, metadata !DIExpression()), !dbg !2234
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !2236, metadata !DIExpression()), !dbg !2234
  %0 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2234
  %1 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %0, align 8, !dbg !2234
  %tobool = icmp ne %struct.VEC_char_heap* %1, null, !dbg !2234
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2234

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2234
  %3 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %2, align 8, !dbg !2234
  %base = getelementptr inbounds %struct.VEC_char_heap, %struct.VEC_char_heap* %3, i32 0, i32 0, !dbg !2234
  br label %cond.end, !dbg !2234

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2234

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_char_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2234
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !2234
  %call = call i32 @VEC_char_base_space(%struct.VEC_char_base* %cond, i32 %4), !dbg !2234
  %tobool1 = icmp ne i32 %call, 0, !dbg !2234
  %lnot = xor i1 %tobool1, true, !dbg !2234
  %lnot.ext = zext i1 %lnot to i32, !dbg !2234
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !2234
  %5 = load i32, i32* %extend, align 4, !dbg !2237
  %tobool2 = icmp ne i32 %5, 0, !dbg !2237
  br i1 %tobool2, label %if.then, label %if.end, !dbg !2234

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2237
  %7 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %6, align 8, !dbg !2237
  %8 = bitcast %struct.VEC_char_heap* %7 to i8*, !dbg !2237
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !2237
  %call3 = call i8* @vec_heap_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 1), !dbg !2237
  %10 = bitcast i8* %call3 to %struct.VEC_char_heap*, !dbg !2237
  %11 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2237
  store %struct.VEC_char_heap* %10, %struct.VEC_char_heap** %11, align 8, !dbg !2237
  br label %if.end, !dbg !2237

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !2234
  ret i32 %12, !dbg !2234
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_char_base_space(%struct.VEC_char_base* %vec_, i32 %alloc_) #0 !dbg !2239 {
entry:
  %vec_.addr = alloca %struct.VEC_char_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_char_base* %vec_, %struct.VEC_char_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_char_base** %vec_.addr, metadata !2242, metadata !DIExpression()), !dbg !2243
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !2244, metadata !DIExpression()), !dbg !2243
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !2243
  %cmp = icmp sge i32 %0, 0, !dbg !2243
  %conv = zext i1 %cmp to i32, !dbg !2243
  %1 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2243
  %tobool = icmp ne %struct.VEC_char_base* %1, null, !dbg !2243
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2243

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2243
  %alloc = getelementptr inbounds %struct.VEC_char_base, %struct.VEC_char_base* %2, i32 0, i32 1, !dbg !2243
  %3 = load i32, i32* %alloc, align 4, !dbg !2243
  %4 = load %struct.VEC_char_base*, %struct.VEC_char_base** %vec_.addr, align 8, !dbg !2243
  %num = getelementptr inbounds %struct.VEC_char_base, %struct.VEC_char_base* %4, i32 0, i32 0, !dbg !2243
  %5 = load i32, i32* %num, align 4, !dbg !2243
  %sub = sub i32 %3, %5, !dbg !2243
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !2243
  %cmp1 = icmp uge i32 %sub, %6, !dbg !2243
  %conv2 = zext i1 %cmp1 to i32, !dbg !2243
  br label %cond.end, !dbg !2243

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !2243
  %tobool3 = icmp ne i32 %7, 0, !dbg !2243
  %lnot = xor i1 %tobool3, true, !dbg !2243
  %lnot.ext = zext i1 %lnot to i32, !dbg !2243
  br label %cond.end, !dbg !2243

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !2243
  ret i32 %cond, !dbg !2243
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !2245 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !2248, metadata !DIExpression()), !dbg !2249
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2250
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !2250
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2250
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !2250
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !2250
  %1 = load i32, i32* %rt_uint, align 8, !dbg !2250
  ret i32 %1, !dbg !2251
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @reg_to_stack() #0 !dbg !2252 {
entry:
  %retval = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %max_uid = alloca i32, align 4
  %bi = alloca %struct.block_info_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %reg = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  %mode = alloca i32, align 4
  %r = alloca %struct.real_value, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2253, metadata !DIExpression()), !dbg !2254
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2255, metadata !DIExpression()), !dbg !2256
  call void @llvm.dbg.declare(metadata i32* %max_uid, metadata !2257, metadata !DIExpression()), !dbg !2258
  %0 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** @stack_regs_mentioned_data, align 8, !dbg !2259
  %cmp = icmp ne %struct.VEC_char_heap* %0, null, !dbg !2261
  br i1 %cmp, label %if.then, label %if.end, !dbg !2262

if.then:                                          ; preds = %entry
  call void @VEC_char_heap_free(%struct.VEC_char_heap** @stack_regs_mentioned_data), !dbg !2263
  br label %if.end, !dbg !2263

if.end:                                           ; preds = %if.then, %entry
  store i32 8, i32* %i, align 4, !dbg !2264
  br label %for.cond, !dbg !2266

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4, !dbg !2267
  %cmp1 = icmp sle i32 %1, 15, !dbg !2269
  br i1 %cmp1, label %for.body, label %for.end, !dbg !2270

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !2271
  %call = call zeroext i8 @df_regs_ever_live_p(i32 %2), !dbg !2273
  %tobool = icmp ne i8 %call, 0, !dbg !2273
  br i1 %tobool, label %if.then2, label %if.end3, !dbg !2274

if.then2:                                         ; preds = %for.body
  br label %for.end, !dbg !2275

if.end3:                                          ; preds = %for.body
  br label %for.inc, !dbg !2276

for.inc:                                          ; preds = %if.end3
  %3 = load i32, i32* %i, align 4, !dbg !2277
  %inc = add nsw i32 %3, 1, !dbg !2277
  store i32 %inc, i32* %i, align 4, !dbg !2277
  br label %for.cond, !dbg !2278, !llvm.loop !2279

for.end:                                          ; preds = %if.then2, %for.cond
  %4 = load i32, i32* %i, align 4, !dbg !2281
  %cmp4 = icmp sgt i32 %4, 15, !dbg !2283
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !2284

if.then5:                                         ; preds = %for.end
  store i8 0, i8* %retval, align 1, !dbg !2285
  br label %return, !dbg !2285

if.end6:                                          ; preds = %for.end
  call void @df_note_add_problem(), !dbg !2286
  call void @df_analyze(), !dbg !2287
  %call7 = call zeroext i8 @mark_dfs_back_edges(), !dbg !2288
  call void @alloc_aux_for_blocks(i32 64), !dbg !2289
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2290
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !2290
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2290
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2290
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !2290
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2290
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 6, !dbg !2290
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2290
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb, align 8, !dbg !2290
  br label %for.cond8, !dbg !2290

for.cond8:                                        ; preds = %for.inc49, %if.end6
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2292
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2292
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !2292
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !2292
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !2292
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 1, !dbg !2292
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2292
  %cmp11 = icmp ne %struct.basic_block_def* %9, %12, !dbg !2292
  br i1 %cmp11, label %for.body12, label %for.end51, !dbg !2290

for.body12:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata %struct.block_info_def** %bi, metadata !2294, metadata !DIExpression()), !dbg !2296
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2297
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 2, !dbg !2297
  %14 = load i8*, i8** %aux, align 8, !dbg !2297
  %15 = bitcast i8* %14 to %struct.block_info_def*, !dbg !2297
  store %struct.block_info_def* %15, %struct.block_info_def** %bi, align 8, !dbg !2296
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2298, metadata !DIExpression()), !dbg !2305
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2306, metadata !DIExpression()), !dbg !2307
  call void @llvm.dbg.declare(metadata i32* %reg, metadata !2308, metadata !DIExpression()), !dbg !2309
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2310
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 0, !dbg !2310
  %call13 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !2310
  %17 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2310
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %17, i32 0, i32 0, !dbg !2310
  %19 = extractvalue { i32, %struct.VEC_edge_gc** } %call13, 0, !dbg !2310
  store i32 %19, i32* %18, align 8, !dbg !2310
  %20 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %17, i32 0, i32 1, !dbg !2310
  %21 = extractvalue { i32, %struct.VEC_edge_gc** } %call13, 1, !dbg !2310
  store %struct.VEC_edge_gc** %21, %struct.VEC_edge_gc*** %20, align 8, !dbg !2310
  %22 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2310
  %23 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2310
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 16, i1 false), !dbg !2310
  br label %for.cond14, !dbg !2310

for.cond14:                                       ; preds = %for.inc26, %for.body12
  %24 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2312
  %25 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 0, !dbg !2312
  %26 = load i32, i32* %25, align 8, !dbg !2312
  %27 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 1, !dbg !2312
  %28 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %27, align 8, !dbg !2312
  %call15 = call zeroext i8 @ei_cond(i32 %26, %struct.VEC_edge_gc** %28, %struct.edge_def** %e), !dbg !2312
  %tobool16 = icmp ne i8 %call15, 0, !dbg !2310
  br i1 %tobool16, label %for.body17, label %for.end27, !dbg !2310

for.body17:                                       ; preds = %for.cond14
  %29 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2314
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 7, !dbg !2316
  %30 = load i32, i32* %flags, align 8, !dbg !2316
  %and = and i32 %30, 32, !dbg !2317
  %tobool18 = icmp ne i32 %and, 0, !dbg !2317
  br i1 %tobool18, label %if.end25, label %land.lhs.true, !dbg !2318

land.lhs.true:                                    ; preds = %for.body17
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2319
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 0, !dbg !2320
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2320
  %33 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2321
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %33, i64 0, !dbg !2321
  %cfg20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 1, !dbg !2321
  %34 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg20, align 8, !dbg !2321
  %x_entry_block_ptr21 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %34, i32 0, i32 0, !dbg !2321
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr21, align 8, !dbg !2321
  %cmp22 = icmp ne %struct.basic_block_def* %32, %35, !dbg !2322
  br i1 %cmp22, label %if.then23, label %if.end25, !dbg !2323

if.then23:                                        ; preds = %land.lhs.true
  %36 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2324
  %predecessors = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %36, i32 0, i32 4, !dbg !2325
  %37 = load i32, i32* %predecessors, align 4, !dbg !2326
  %inc24 = add nsw i32 %37, 1, !dbg !2326
  store i32 %inc24, i32* %predecessors, align 4, !dbg !2326
  br label %if.end25, !dbg !2324

if.end25:                                         ; preds = %if.then23, %land.lhs.true, %for.body17
  br label %for.inc26, !dbg !2321

for.inc26:                                        ; preds = %if.end25
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2312
  br label %for.cond14, !dbg !2312, !llvm.loop !2327

for.end27:                                        ; preds = %for.cond14
  %38 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2329
  %stack_in = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %38, i32 0, i32 0, !dbg !2330
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %stack_in, i32 0, i32 0, !dbg !2331
  store i32 -2, i32* %top, align 8, !dbg !2332
  store i32 8, i32* %reg, align 4, !dbg !2333
  br label %for.cond28, !dbg !2335

for.cond28:                                       ; preds = %for.inc46, %for.end27
  %39 = load i32, i32* %reg, align 4, !dbg !2336
  %cmp29 = icmp sle i32 %39, 15, !dbg !2338
  br i1 %cmp29, label %for.body30, label %for.end48, !dbg !2339

for.body30:                                       ; preds = %for.cond28
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2340
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 9, !dbg !2340
  %41 = load i32, i32* %index, align 8, !dbg !2340
  %call31 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %41), !dbg !2340
  %out = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call31, i32 0, i32 3, !dbg !2340
  %42 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %out, align 8, !dbg !2340
  %43 = load i32, i32* %reg, align 4, !dbg !2340
  %call32 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %42, i32 %43), !dbg !2340
  %tobool33 = icmp ne i32 %call32, 0, !dbg !2340
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !2343

if.then34:                                        ; preds = %for.body30
  %44 = load i32, i32* %reg, align 4, !dbg !2344
  %sh_prom = zext i32 %44 to i64, !dbg !2344
  %shl = shl i64 1, %sh_prom, !dbg !2344
  %45 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2344
  %out_reg_set = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %45, i32 0, i32 2, !dbg !2344
  %46 = load i64, i64* %out_reg_set, align 8, !dbg !2344
  %or = or i64 %46, %shl, !dbg !2344
  store i64 %or, i64* %out_reg_set, align 8, !dbg !2344
  br label %if.end35, !dbg !2344

if.end35:                                         ; preds = %if.then34, %for.body30
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2345
  %index36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 9, !dbg !2345
  %48 = load i32, i32* %index36, align 8, !dbg !2345
  %call37 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %48), !dbg !2345
  %in = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call37, i32 0, i32 2, !dbg !2345
  %49 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %in, align 8, !dbg !2345
  %50 = load i32, i32* %reg, align 4, !dbg !2345
  %call38 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %49, i32 %50), !dbg !2345
  %tobool39 = icmp ne i32 %call38, 0, !dbg !2345
  br i1 %tobool39, label %if.then40, label %if.end45, !dbg !2347

if.then40:                                        ; preds = %if.end35
  %51 = load i32, i32* %reg, align 4, !dbg !2348
  %sh_prom41 = zext i32 %51 to i64, !dbg !2348
  %shl42 = shl i64 1, %sh_prom41, !dbg !2348
  %52 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2348
  %stack_in43 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %52, i32 0, i32 0, !dbg !2348
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %stack_in43, i32 0, i32 1, !dbg !2348
  %53 = load i64, i64* %reg_set, align 8, !dbg !2348
  %or44 = or i64 %53, %shl42, !dbg !2348
  store i64 %or44, i64* %reg_set, align 8, !dbg !2348
  br label %if.end45, !dbg !2348

if.end45:                                         ; preds = %if.then40, %if.end35
  br label %for.inc46, !dbg !2349

for.inc46:                                        ; preds = %if.end45
  %54 = load i32, i32* %reg, align 4, !dbg !2350
  %inc47 = add nsw i32 %54, 1, !dbg !2350
  store i32 %inc47, i32* %reg, align 4, !dbg !2350
  br label %for.cond28, !dbg !2351, !llvm.loop !2352

for.end48:                                        ; preds = %for.cond28
  br label %for.inc49, !dbg !2354

for.inc49:                                        ; preds = %for.end48
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2292
  %next_bb50 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 6, !dbg !2292
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb50, align 8, !dbg !2292
  store %struct.basic_block_def* %56, %struct.basic_block_def** %bb, align 8, !dbg !2292
  br label %for.cond8, !dbg !2292, !llvm.loop !2355

for.end51:                                        ; preds = %for.cond8
  store i32 8, i32* %i, align 4, !dbg !2357
  br label %for.cond52, !dbg !2359

for.cond52:                                       ; preds = %for.inc83, %for.end51
  %57 = load i32, i32* %i, align 4, !dbg !2360
  %cmp53 = icmp sle i32 %57, 15, !dbg !2362
  br i1 %cmp53, label %for.body54, label %for.end85, !dbg !2363

for.body54:                                       ; preds = %for.cond52
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !2364, metadata !DIExpression()), !dbg !2366
  %58 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 8), align 8, !dbg !2367
  %conv = zext i8 %58 to i32, !dbg !2367
  store i32 %conv, i32* %mode, align 4, !dbg !2369
  br label %for.cond55, !dbg !2370

for.cond55:                                       ; preds = %for.inc62, %for.body54
  %59 = load i32, i32* %mode, align 4, !dbg !2371
  %cmp56 = icmp ne i32 %59, 0, !dbg !2373
  br i1 %cmp56, label %for.body58, label %for.end66, !dbg !2374

for.body58:                                       ; preds = %for.cond55
  %60 = load i32, i32* %mode, align 4, !dbg !2375
  %61 = load i32, i32* %i, align 4, !dbg !2376
  %call59 = call %struct.rtx_def* @gen_rtx_REG(i32 %60, i32 %61), !dbg !2377
  %62 = load i32, i32* %i, align 4, !dbg !2378
  %sub = sub nsw i32 %62, 8, !dbg !2378
  %idxprom = sext i32 %sub to i64, !dbg !2378
  %arrayidx = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom, !dbg !2378
  %63 = load i32, i32* %mode, align 4, !dbg !2378
  %idxprom60 = sext i32 %63 to i64, !dbg !2378
  %arrayidx61 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx, i64 0, i64 %idxprom60, !dbg !2378
  store %struct.rtx_def* %call59, %struct.rtx_def** %arrayidx61, align 8, !dbg !2379
  br label %for.inc62, !dbg !2378

for.inc62:                                        ; preds = %for.body58
  %64 = load i32, i32* %mode, align 4, !dbg !2380
  %idxprom63 = zext i32 %64 to i64, !dbg !2380
  %arrayidx64 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom63, !dbg !2380
  %65 = load i8, i8* %arrayidx64, align 1, !dbg !2380
  %conv65 = zext i8 %65 to i32, !dbg !2380
  store i32 %conv65, i32* %mode, align 4, !dbg !2381
  br label %for.cond55, !dbg !2382, !llvm.loop !2383

for.end66:                                        ; preds = %for.cond55
  %66 = load i8, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @class_narrowest_mode, i64 0, i64 11), align 1, !dbg !2385
  %conv67 = zext i8 %66 to i32, !dbg !2385
  store i32 %conv67, i32* %mode, align 4, !dbg !2387
  br label %for.cond68, !dbg !2388

for.cond68:                                       ; preds = %for.inc78, %for.end66
  %67 = load i32, i32* %mode, align 4, !dbg !2389
  %cmp69 = icmp ne i32 %67, 0, !dbg !2391
  br i1 %cmp69, label %for.body71, label %for.end82, !dbg !2392

for.body71:                                       ; preds = %for.cond68
  %68 = load i32, i32* %mode, align 4, !dbg !2393
  %69 = load i32, i32* %i, align 4, !dbg !2394
  %call72 = call %struct.rtx_def* @gen_rtx_REG(i32 %68, i32 %69), !dbg !2395
  %70 = load i32, i32* %i, align 4, !dbg !2396
  %sub73 = sub nsw i32 %70, 8, !dbg !2396
  %idxprom74 = sext i32 %sub73 to i64, !dbg !2396
  %arrayidx75 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom74, !dbg !2396
  %71 = load i32, i32* %mode, align 4, !dbg !2396
  %idxprom76 = sext i32 %71 to i64, !dbg !2396
  %arrayidx77 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx75, i64 0, i64 %idxprom76, !dbg !2396
  store %struct.rtx_def* %call72, %struct.rtx_def** %arrayidx77, align 8, !dbg !2397
  br label %for.inc78, !dbg !2396

for.inc78:                                        ; preds = %for.body71
  %72 = load i32, i32* %mode, align 4, !dbg !2398
  %idxprom79 = zext i32 %72 to i64, !dbg !2398
  %arrayidx80 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_wider, i64 0, i64 %idxprom79, !dbg !2398
  %73 = load i8, i8* %arrayidx80, align 1, !dbg !2398
  %conv81 = zext i8 %73 to i32, !dbg !2398
  store i32 %conv81, i32* %mode, align 4, !dbg !2399
  br label %for.cond68, !dbg !2400, !llvm.loop !2401

for.end82:                                        ; preds = %for.cond68
  br label %for.inc83, !dbg !2403

for.inc83:                                        ; preds = %for.end82
  %74 = load i32, i32* %i, align 4, !dbg !2404
  %inc84 = add nsw i32 %74, 1, !dbg !2404
  store i32 %inc84, i32* %i, align 4, !dbg !2404
  br label %for.cond52, !dbg !2405, !llvm.loop !2406

for.end85:                                        ; preds = %for.cond52
  %call86 = call %struct.rtx_def* @gen_rtx_REG(i32 2, i32 17), !dbg !2408
  store %struct.rtx_def* %call86, %struct.rtx_def** @ix86_flags_rtx, align 8, !dbg !2409
  %75 = load i32, i32* @flag_pic, align 4, !dbg !2410
  %tobool87 = icmp ne i32 %75, 0, !dbg !2410
  br i1 %tobool87, label %if.then93, label %lor.lhs.false, !dbg !2412

lor.lhs.false:                                    ; preds = %for.end85
  %76 = load i32, i32* @ix86_cmodel, align 4, !dbg !2413
  %cmp88 = icmp eq i32 %76, 4, !dbg !2414
  br i1 %cmp88, label %if.then93, label %lor.lhs.false90, !dbg !2415

lor.lhs.false90:                                  ; preds = %lor.lhs.false
  %77 = load i32, i32* @ix86_cmodel, align 4, !dbg !2416
  %cmp91 = icmp eq i32 %77, 7, !dbg !2417
  br i1 %cmp91, label %if.then93, label %if.else, !dbg !2418

if.then93:                                        ; preds = %lor.lhs.false90, %lor.lhs.false, %for.end85
  %78 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0, i64 38), align 16, !dbg !2419
  store %struct.rtx_def* %78, %struct.rtx_def** @not_a_num, align 8, !dbg !2420
  br label %if.end97, !dbg !2421

if.else:                                          ; preds = %lor.lhs.false90
  call void @llvm.dbg.declare(metadata %struct.real_value* %r, metadata !2422, metadata !DIExpression()), !dbg !2424
  %call94 = call zeroext i8 @real_nan(%struct.real_value* %r, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i64 0, i64 0), i32 1, i32 38), !dbg !2425
  %call95 = call %struct.rtx_def* @const_double_from_real_value(%struct.real_value* byval(%struct.real_value) align 8 %r, i32 38), !dbg !2426
  store %struct.rtx_def* %call95, %struct.rtx_def** @not_a_num, align 8, !dbg !2427
  %79 = load %struct.rtx_def*, %struct.rtx_def** @not_a_num, align 8, !dbg !2428
  %call96 = call %struct.rtx_def* @force_const_mem(i32 38, %struct.rtx_def* %79), !dbg !2429
  store %struct.rtx_def* %call96, %struct.rtx_def** @not_a_num, align 8, !dbg !2430
  br label %if.end97

if.end97:                                         ; preds = %if.else, %if.then93
  %call98 = call i32 @get_max_uid(), !dbg !2431
  store i32 %call98, i32* %max_uid, align 4, !dbg !2432
  %80 = load i32, i32* %max_uid, align 4, !dbg !2433
  %add = add nsw i32 %80, 1, !dbg !2433
  %call99 = call %struct.VEC_char_heap* @VEC_char_heap_alloc(i32 %add), !dbg !2433
  store %struct.VEC_char_heap* %call99, %struct.VEC_char_heap** @stack_regs_mentioned_data, align 8, !dbg !2434
  %81 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** @stack_regs_mentioned_data, align 8, !dbg !2435
  %tobool100 = icmp ne %struct.VEC_char_heap* %81, null, !dbg !2435
  br i1 %tobool100, label %cond.true, label %cond.false, !dbg !2435

cond.true:                                        ; preds = %if.end97
  %82 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** @stack_regs_mentioned_data, align 8, !dbg !2435
  %base = getelementptr inbounds %struct.VEC_char_heap, %struct.VEC_char_heap* %82, i32 0, i32 0, !dbg !2435
  br label %cond.end, !dbg !2435

cond.false:                                       ; preds = %if.end97
  br label %cond.end, !dbg !2435

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_char_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2435
  %call101 = call i8* @VEC_char_base_address(%struct.VEC_char_base* %cond), !dbg !2435
  %83 = load i32, i32* %max_uid, align 4, !dbg !2436
  %add102 = add nsw i32 %83, 1, !dbg !2437
  %conv103 = sext i32 %add102 to i64, !dbg !2438
  %mul = mul i64 1, %conv103, !dbg !2439
  call void @llvm.memset.p0i8.i64(i8* align 1 %call101, i8 0, i64 %mul, i1 false), !dbg !2440
  call void @convert_regs(), !dbg !2441
  call void @free_aux_for_blocks(), !dbg !2442
  store i8 1, i8* %retval, align 1, !dbg !2443
  br label %return, !dbg !2443

return:                                           ; preds = %cond.end, %if.then5
  %84 = load i8, i8* %retval, align 1, !dbg !2444
  ret i8 %84, !dbg !2444
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_char_heap_free(%struct.VEC_char_heap** %vec_) #0 !dbg !2445 {
entry:
  %vec_.addr = alloca %struct.VEC_char_heap**, align 8
  store %struct.VEC_char_heap** %vec_, %struct.VEC_char_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_char_heap*** %vec_.addr, metadata !2448, metadata !DIExpression()), !dbg !2449
  %0 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2450
  %1 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %0, align 8, !dbg !2450
  %tobool = icmp ne %struct.VEC_char_heap* %1, null, !dbg !2450
  br i1 %tobool, label %if.then, label %if.end, !dbg !2449

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2450
  %3 = load %struct.VEC_char_heap*, %struct.VEC_char_heap** %2, align 8, !dbg !2450
  %4 = bitcast %struct.VEC_char_heap* %3 to i8*, !dbg !2450
  call void @free(i8* %4), !dbg !2450
  br label %if.end, !dbg !2450

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_char_heap**, %struct.VEC_char_heap*** %vec_.addr, align 8, !dbg !2449
  store %struct.VEC_char_heap* null, %struct.VEC_char_heap** %5, align 8, !dbg !2449
  ret void, !dbg !2449
}

declare dso_local zeroext i8 @df_regs_ever_live_p(i32) #3

declare dso_local void @df_note_add_problem() #3

declare dso_local void @df_analyze() #3

declare dso_local zeroext i8 @mark_dfs_back_edges() #3

declare dso_local void @alloc_aux_for_blocks(i32) #3

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !2452 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !2455, metadata !DIExpression()), !dbg !2456
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !2457, metadata !DIExpression()), !dbg !2458
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !2459
  store i32 0, i32* %index, align 8, !dbg !2460
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !2461
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !2462
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !2463
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !2464
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !2464
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !2464
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !2465 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2469, metadata !DIExpression()), !dbg !2470
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !2471, metadata !DIExpression()), !dbg !2472
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2473
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2473
  %5 = load i32, i32* %4, align 8, !dbg !2473
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2473
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2473
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2473
  %tobool = icmp ne i8 %call, 0, !dbg !2473
  br i1 %tobool, label %if.else, label %if.then, !dbg !2475

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2476
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !2476
  %10 = load i32, i32* %9, align 8, !dbg !2476
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !2476
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !2476
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !2476
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2478
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !2479
  store i8 1, i8* %retval, align 1, !dbg !2480
  br label %return, !dbg !2480

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2481
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !2483
  store i8 0, i8* %retval, align 1, !dbg !2484
  br label %return, !dbg !2484

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !2485
  ret i8 %15, !dbg !2485
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !2486 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !2490, metadata !DIExpression()), !dbg !2491
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2492
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !2492
  %1 = load i32, i32* %index, align 8, !dbg !2492
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2492
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !2492
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2492
  %5 = load i32, i32* %4, align 8, !dbg !2492
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2492
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2492
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2492
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !2492
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2492

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2492
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !2492
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !2492
  %11 = load i32, i32* %10, align 8, !dbg !2492
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !2492
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !2492
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !2492
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !2492
  br label %cond.end, !dbg !2492

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2492

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2492
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2492
  %cmp = icmp ult i32 %1, %call2, !dbg !2492
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !2492

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !2492
  br label %cond.end5, !dbg !2492

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2492

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !2492
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2493
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !2494
  %15 = load i32, i32* %index7, align 8, !dbg !2495
  %inc = add i32 %15, 1, !dbg !2495
  store i32 %inc, i32* %index7, align 8, !dbg !2495
  ret void, !dbg !2496
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %index) #0 !dbg !2497 {
entry:
  %retval = alloca %struct.df_lr_bb_info*, align 8
  %index.addr = alloca i32, align 4
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !2500, metadata !DIExpression()), !dbg !2501
  %0 = load i32, i32* %index.addr, align 4, !dbg !2502
  %1 = load %struct.df*, %struct.df** @df, align 8, !dbg !2504
  %problems_by_index = getelementptr inbounds %struct.df, %struct.df* %1, i32 0, i32 1, !dbg !2504
  %arrayidx = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index, i64 0, i64 1, !dbg !2504
  %2 = load %struct.dataflow*, %struct.dataflow** %arrayidx, align 8, !dbg !2504
  %block_info_size = getelementptr inbounds %struct.dataflow, %struct.dataflow* %2, i32 0, i32 2, !dbg !2505
  %3 = load i32, i32* %block_info_size, align 8, !dbg !2505
  %cmp = icmp ult i32 %0, %3, !dbg !2506
  br i1 %cmp, label %if.then, label %if.else, !dbg !2507

if.then:                                          ; preds = %entry
  %4 = load %struct.df*, %struct.df** @df, align 8, !dbg !2508
  %problems_by_index1 = getelementptr inbounds %struct.df, %struct.df* %4, i32 0, i32 1, !dbg !2508
  %arrayidx2 = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index1, i64 0, i64 1, !dbg !2508
  %5 = load %struct.dataflow*, %struct.dataflow** %arrayidx2, align 8, !dbg !2508
  %block_info = getelementptr inbounds %struct.dataflow, %struct.dataflow* %5, i32 0, i32 1, !dbg !2509
  %6 = load i8**, i8*** %block_info, align 8, !dbg !2509
  %7 = load i32, i32* %index.addr, align 4, !dbg !2510
  %idxprom = zext i32 %7 to i64, !dbg !2508
  %arrayidx3 = getelementptr inbounds i8*, i8** %6, i64 %idxprom, !dbg !2508
  %8 = load i8*, i8** %arrayidx3, align 8, !dbg !2508
  %9 = bitcast i8* %8 to %struct.df_lr_bb_info*, !dbg !2511
  store %struct.df_lr_bb_info* %9, %struct.df_lr_bb_info** %retval, align 8, !dbg !2512
  br label %return, !dbg !2512

if.else:                                          ; preds = %entry
  store %struct.df_lr_bb_info* null, %struct.df_lr_bb_info** %retval, align 8, !dbg !2513
  br label %return, !dbg !2513

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.df_lr_bb_info*, %struct.df_lr_bb_info** %retval, align 8, !dbg !2514
  ret %struct.df_lr_bb_info* %10, !dbg !2514
}

declare dso_local %struct.rtx_def* @gen_rtx_REG(i32, i32) #3

declare dso_local zeroext i8 @real_nan(%struct.real_value*, i8*, i32, i32) #3

declare dso_local %struct.rtx_def* @const_double_from_real_value(%struct.real_value* byval(%struct.real_value) align 8, i32) #3

declare dso_local %struct.rtx_def* @force_const_mem(i32, %struct.rtx_def*) #3

declare dso_local i32 @get_max_uid() #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_char_heap* @VEC_char_heap_alloc(i32 %alloc_) #0 !dbg !2515 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !2518, metadata !DIExpression()), !dbg !2519
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !2519
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 1), !dbg !2519
  %1 = bitcast i8* %call to %struct.VEC_char_heap*, !dbg !2519
  ret %struct.VEC_char_heap* %1, !dbg !2519
}

; Function Attrs: noinline nounwind uwtable
define internal void @convert_regs() #0 !dbg !2520 {
entry:
  %inserted = alloca i32, align 4
  %b = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %bi = alloca %struct.block_info_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %inserted, metadata !2523, metadata !DIExpression()), !dbg !2524
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b, metadata !2525, metadata !DIExpression()), !dbg !2526
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2527, metadata !DIExpression()), !dbg !2528
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2529, metadata !DIExpression()), !dbg !2530
  %call = call i32 @convert_regs_entry(), !dbg !2531
  store i32 %call, i32* %inserted, align 4, !dbg !2532
  call void @convert_regs_exit(), !dbg !2533
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2534
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2534
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2534
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2534
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 1, !dbg !2534
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2534
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 2, !dbg !2534
  %3 = load i8*, i8** %aux, align 8, !dbg !2534
  %4 = bitcast i8* %3 to %struct.block_info_def*, !dbg !2534
  %done = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %4, i32 0, i32 3, !dbg !2535
  store i32 1, i32* %done, align 8, !dbg !2536
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2537
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !2537
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2537
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2537
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !2537
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2537
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !2537
  %call3 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !2537
  %8 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2537
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !2537
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 0, !dbg !2537
  store i32 %10, i32* %9, align 8, !dbg !2537
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !2537
  %12 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 1, !dbg !2537
  store %struct.VEC_edge_gc** %12, %struct.VEC_edge_gc*** %11, align 8, !dbg !2537
  %13 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2537
  %14 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2537
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false), !dbg !2537
  br label %for.cond, !dbg !2537

for.cond:                                         ; preds = %for.inc, %entry
  %15 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2539
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 0, !dbg !2539
  %17 = load i32, i32* %16, align 8, !dbg !2539
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 1, !dbg !2539
  %19 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %18, align 8, !dbg !2539
  %call4 = call zeroext i8 @ei_cond(i32 %17, %struct.VEC_edge_gc** %19, %struct.edge_def** %e), !dbg !2539
  %tobool = icmp ne i8 %call4, 0, !dbg !2537
  br i1 %tobool, label %for.body, label %for.end, !dbg !2537

for.body:                                         ; preds = %for.cond
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2541
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 1, !dbg !2542
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2542
  call void @convert_regs_2(%struct.basic_block_def* %21), !dbg !2543
  br label %for.inc, !dbg !2543

for.inc:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2539
  br label %for.cond, !dbg !2539, !llvm.loop !2544

for.end:                                          ; preds = %for.cond
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2546
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !2546
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !2546
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !2546
  %x_entry_block_ptr7 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 0, !dbg !2546
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr7, align 8, !dbg !2546
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 6, !dbg !2546
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2546
  store %struct.basic_block_def* %25, %struct.basic_block_def** %b, align 8, !dbg !2546
  br label %for.cond8, !dbg !2546

for.cond8:                                        ; preds = %for.inc16, %for.end
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2548
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2548
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !2548
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !2548
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !2548
  %x_exit_block_ptr11 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 1, !dbg !2548
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr11, align 8, !dbg !2548
  %cmp = icmp ne %struct.basic_block_def* %26, %29, !dbg !2548
  br i1 %cmp, label %for.body12, label %for.end18, !dbg !2546

for.body12:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata %struct.block_info_def** %bi, metadata !2550, metadata !DIExpression()), !dbg !2552
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2553
  %aux13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 2, !dbg !2553
  %31 = load i8*, i8** %aux13, align 8, !dbg !2553
  %32 = bitcast i8* %31 to %struct.block_info_def*, !dbg !2553
  store %struct.block_info_def* %32, %struct.block_info_def** %bi, align 8, !dbg !2552
  %33 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2554
  %done14 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %33, i32 0, i32 3, !dbg !2556
  %34 = load i32, i32* %done14, align 8, !dbg !2556
  %tobool15 = icmp ne i32 %34, 0, !dbg !2554
  br i1 %tobool15, label %if.end, label %if.then, !dbg !2557

if.then:                                          ; preds = %for.body12
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2558
  call void @convert_regs_2(%struct.basic_block_def* %35), !dbg !2559
  br label %if.end, !dbg !2559

if.end:                                           ; preds = %if.then, %for.body12
  br label %for.inc16, !dbg !2560

for.inc16:                                        ; preds = %if.end
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !2548
  %next_bb17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 6, !dbg !2548
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb17, align 8, !dbg !2548
  store %struct.basic_block_def* %37, %struct.basic_block_def** %b, align 8, !dbg !2548
  br label %for.cond8, !dbg !2548, !llvm.loop !2561

for.end18:                                        ; preds = %for.cond8
  %call19 = call zeroext i8 @compensate_edges(), !dbg !2563
  %conv = zext i8 %call19 to i32, !dbg !2563
  %38 = load i32, i32* %inserted, align 4, !dbg !2564
  %or = or i32 %38, %conv, !dbg !2564
  store i32 %or, i32* %inserted, align 4, !dbg !2564
  call void @clear_aux_for_blocks(), !dbg !2565
  call void @fixup_abnormal_edges(), !dbg !2566
  %39 = load i32, i32* %inserted, align 4, !dbg !2567
  %tobool20 = icmp ne i32 %39, 0, !dbg !2567
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !2569

if.then21:                                        ; preds = %for.end18
  call void @commit_edge_insertions(), !dbg !2570
  br label %if.end22, !dbg !2570

if.end22:                                         ; preds = %if.then21, %for.end18
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2571
  %tobool23 = icmp ne %struct._IO_FILE* %40, null, !dbg !2571
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !2573

if.then24:                                        ; preds = %if.end22
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2574
  %call25 = call i32 @fputc(i32 10, %struct._IO_FILE* %41), !dbg !2575
  br label %if.end26, !dbg !2575

if.end26:                                         ; preds = %if.then24, %if.end22
  ret void, !dbg !2576
}

declare dso_local void @free_aux_for_blocks() #3

declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !2577 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !2580, metadata !DIExpression()), !dbg !2581
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !2582
  %3 = load i32, i32* %index, align 8, !dbg !2582
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !2583
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !2583
  %6 = load i32, i32* %5, align 8, !dbg !2583
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !2583
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !2583
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !2583
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !2583
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2583

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !2583
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !2583
  %11 = load i32, i32* %10, align 8, !dbg !2583
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !2583
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !2583
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !2583
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !2583
  br label %cond.end, !dbg !2583

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2583

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2583
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2583
  %cmp = icmp eq i32 %3, %call2, !dbg !2584
  %conv = zext i1 %cmp to i32, !dbg !2584
  %conv3 = trunc i32 %conv to i8, !dbg !2585
  ret i8 %conv3, !dbg !2586
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !2587 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !2590, metadata !DIExpression()), !dbg !2591
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !2592
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2592
  %5 = load i32, i32* %4, align 8, !dbg !2592
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2592
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2592
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2592
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !2592
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2592

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !2592
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !2592
  %10 = load i32, i32* %9, align 8, !dbg !2592
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !2592
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !2592
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !2592
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !2592
  br label %cond.end, !dbg !2592

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2592

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2592
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !2592
  %13 = load i32, i32* %index, align 8, !dbg !2592
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !2592
  ret %struct.edge_def* %call2, !dbg !2593
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !2594 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !2599, metadata !DIExpression()), !dbg !2600
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2600
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !2600
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2600

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2600
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !2600
  %2 = load i32, i32* %num, align 8, !dbg !2600
  br label %cond.end, !dbg !2600

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2600

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !2600
  ret i32 %cond, !dbg !2600
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !2601 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !2604, metadata !DIExpression()), !dbg !2605
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !2606
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !2606
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !2606
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2606

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !2606
  br label %cond.end, !dbg !2606

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2606

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2606
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !2607
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !2607
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !2608
  ret %struct.VEC_edge_gc* %5, !dbg !2609
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !2610 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !2613, metadata !DIExpression()), !dbg !2614
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !2615, metadata !DIExpression()), !dbg !2614
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2614
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !2614
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2614

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !2614
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2614
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !2614
  %3 = load i32, i32* %num, align 8, !dbg !2614
  %cmp = icmp ult i32 %1, %3, !dbg !2614
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !2616
  %land.ext = zext i1 %4 to i32, !dbg !2614
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !2614
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !2614
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !2614
  %idxprom = zext i32 %6 to i64, !dbg !2614
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !2614
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !2614
  ret %struct.edge_def* %7, !dbg !2614
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @convert_regs_entry() #0 !dbg !2617 {
entry:
  %inserted = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %block = alloca %struct.basic_block_def*, align 8
  %bi = alloca %struct.block_info_def*, align 8
  %reg = alloca i32, align 4
  %top = alloca i32, align 4
  %init = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %inserted, metadata !2620, metadata !DIExpression()), !dbg !2621
  store i32 0, i32* %inserted, align 4, !dbg !2621
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2622, metadata !DIExpression()), !dbg !2623
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2624, metadata !DIExpression()), !dbg !2625
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2626
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2626
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2626
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2626
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !2626
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2626
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !2626
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !2626
  %3 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2626
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2626
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !2626
  store i32 %5, i32* %4, align 8, !dbg !2626
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2626
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !2626
  store %struct.VEC_edge_gc** %7, %struct.VEC_edge_gc*** %6, align 8, !dbg !2626
  %8 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2626
  %9 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2626
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false), !dbg !2626
  br label %for.cond, !dbg !2626

for.cond:                                         ; preds = %for.inc10, %entry
  %10 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2628
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 0, !dbg !2628
  %12 = load i32, i32* %11, align 8, !dbg !2628
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 1, !dbg !2628
  %14 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %13, align 8, !dbg !2628
  %call1 = call zeroext i8 @ei_cond(i32 %12, %struct.VEC_edge_gc** %14, %struct.edge_def** %e), !dbg !2628
  %tobool = icmp ne i8 %call1, 0, !dbg !2626
  br i1 %tobool, label %for.body, label %for.end11, !dbg !2626

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block, metadata !2630, metadata !DIExpression()), !dbg !2632
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2633
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 1, !dbg !2634
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2634
  store %struct.basic_block_def* %16, %struct.basic_block_def** %block, align 8, !dbg !2632
  call void @llvm.dbg.declare(metadata %struct.block_info_def** %bi, metadata !2635, metadata !DIExpression()), !dbg !2636
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %block, align 8, !dbg !2637
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 2, !dbg !2637
  %18 = load i8*, i8** %aux, align 8, !dbg !2637
  %19 = bitcast i8* %18 to %struct.block_info_def*, !dbg !2637
  store %struct.block_info_def* %19, %struct.block_info_def** %bi, align 8, !dbg !2636
  call void @llvm.dbg.declare(metadata i32* %reg, metadata !2638, metadata !DIExpression()), !dbg !2639
  call void @llvm.dbg.declare(metadata i32* %top, metadata !2640, metadata !DIExpression()), !dbg !2641
  store i32 -1, i32* %top, align 4, !dbg !2641
  store i32 15, i32* %reg, align 4, !dbg !2642
  br label %for.cond2, !dbg !2644

for.cond2:                                        ; preds = %for.inc, %for.body
  %20 = load i32, i32* %reg, align 4, !dbg !2645
  %cmp = icmp sge i32 %20, 8, !dbg !2647
  br i1 %cmp, label %for.body3, label %for.end, !dbg !2648

for.body3:                                        ; preds = %for.cond2
  %21 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2649
  %stack_in = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %21, i32 0, i32 0, !dbg !2649
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %stack_in, i32 0, i32 1, !dbg !2649
  %22 = load i64, i64* %reg_set, align 8, !dbg !2649
  %23 = load i32, i32* %reg, align 4, !dbg !2649
  %sh_prom = zext i32 %23 to i64, !dbg !2649
  %shl = shl i64 1, %sh_prom, !dbg !2649
  %and = and i64 %22, %shl, !dbg !2649
  %tobool4 = icmp ne i64 %and, 0, !dbg !2649
  br i1 %tobool4, label %if.then, label %if.end, !dbg !2651

if.then:                                          ; preds = %for.body3
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %init, metadata !2652, metadata !DIExpression()), !dbg !2654
  %24 = load i32, i32* %reg, align 4, !dbg !2655
  %conv = trunc i32 %24 to i8, !dbg !2655
  %25 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2656
  %stack_in5 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %25, i32 0, i32 0, !dbg !2657
  %reg6 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %stack_in5, i32 0, i32 2, !dbg !2658
  %26 = load i32, i32* %top, align 4, !dbg !2659
  %inc = add nsw i32 %26, 1, !dbg !2659
  store i32 %inc, i32* %top, align 4, !dbg !2659
  %idxprom = sext i32 %inc to i64, !dbg !2656
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %reg6, i64 0, i64 %idxprom, !dbg !2656
  store i8 %conv, i8* %arrayidx, align 1, !dbg !2660
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 0, i64 38), align 16, !dbg !2661
  %28 = load %struct.rtx_def*, %struct.rtx_def** @not_a_num, align 8, !dbg !2661
  %call7 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %27, %struct.rtx_def* %28), !dbg !2661
  store %struct.rtx_def* %call7, %struct.rtx_def** %init, align 8, !dbg !2662
  %29 = load %struct.rtx_def*, %struct.rtx_def** %init, align 8, !dbg !2663
  %30 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2664
  call void @insert_insn_on_edge(%struct.rtx_def* %29, %struct.edge_def* %30), !dbg !2665
  store i32 1, i32* %inserted, align 4, !dbg !2666
  br label %if.end, !dbg !2667

if.end:                                           ; preds = %if.then, %for.body3
  br label %for.inc, !dbg !2649

for.inc:                                          ; preds = %if.end
  %31 = load i32, i32* %reg, align 4, !dbg !2668
  %dec = add nsw i32 %31, -1, !dbg !2668
  store i32 %dec, i32* %reg, align 4, !dbg !2668
  br label %for.cond2, !dbg !2669, !llvm.loop !2670

for.end:                                          ; preds = %for.cond2
  %32 = load i32, i32* %top, align 4, !dbg !2672
  %33 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2673
  %stack_in8 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %33, i32 0, i32 0, !dbg !2674
  %top9 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %stack_in8, i32 0, i32 0, !dbg !2675
  store i32 %32, i32* %top9, align 8, !dbg !2676
  br label %for.inc10, !dbg !2677

for.inc10:                                        ; preds = %for.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2628
  br label %for.cond, !dbg !2628, !llvm.loop !2678

for.end11:                                        ; preds = %for.cond
  %34 = load i32, i32* %inserted, align 4, !dbg !2680
  ret i32 %34, !dbg !2681
}

; Function Attrs: noinline nounwind uwtable
define internal void @convert_regs_exit() #0 !dbg !2682 {
entry:
  %value_reg_low = alloca i32, align 4
  %value_reg_high = alloca i32, align 4
  %output_stack = alloca %struct.stack_def*, align 8
  %retvalue = alloca %struct.rtx_def*, align 8
  %reg = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %value_reg_low, metadata !2683, metadata !DIExpression()), !dbg !2684
  call void @llvm.dbg.declare(metadata i32* %value_reg_high, metadata !2685, metadata !DIExpression()), !dbg !2686
  call void @llvm.dbg.declare(metadata %struct.stack_def** %output_stack, metadata !2687, metadata !DIExpression()), !dbg !2688
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %retvalue, metadata !2689, metadata !DIExpression()), !dbg !2690
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !2691
  %call = call %struct.rtx_def* @stack_result(%union.tree_node* %0), !dbg !2692
  store %struct.rtx_def* %call, %struct.rtx_def** %retvalue, align 8, !dbg !2693
  store i32 -1, i32* %value_reg_high, align 4, !dbg !2694
  store i32 -1, i32* %value_reg_low, align 4, !dbg !2695
  %1 = load %struct.rtx_def*, %struct.rtx_def** %retvalue, align 8, !dbg !2696
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !2696
  br i1 %tobool, label %if.then, label %if.end, !dbg !2698

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %retvalue, align 8, !dbg !2699
  %call1 = call i32 @rhs_regno(%struct.rtx_def* %2), !dbg !2699
  store i32 %call1, i32* %value_reg_low, align 4, !dbg !2701
  %3 = load %struct.rtx_def*, %struct.rtx_def** %retvalue, align 8, !dbg !2702
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !2702
  %bf.load = load i32, i32* %4, align 8, !dbg !2702
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !2702
  %bf.clear = and i32 %bf.lshr, 255, !dbg !2702
  %5 = load %struct.rtx_def*, %struct.rtx_def** %retvalue, align 8, !dbg !2702
  %call2 = call i32 @rhs_regno(%struct.rtx_def* %5), !dbg !2702
  %call3 = call i32 @end_hard_regno(i32 %bf.clear, i32 %call2), !dbg !2702
  %sub = sub i32 %call3, 1, !dbg !2703
  store i32 %sub, i32* %value_reg_high, align 4, !dbg !2704
  br label %if.end, !dbg !2705

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2706
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !2706
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2706
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2706
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !2706
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2706
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 2, !dbg !2706
  %9 = load i8*, i8** %aux, align 8, !dbg !2706
  %10 = bitcast i8* %9 to %struct.block_info_def*, !dbg !2706
  %stack_in = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %10, i32 0, i32 0, !dbg !2707
  store %struct.stack_def* %stack_in, %struct.stack_def** %output_stack, align 8, !dbg !2708
  %11 = load i32, i32* %value_reg_low, align 4, !dbg !2709
  %cmp = icmp eq i32 %11, -1, !dbg !2711
  br i1 %cmp, label %if.then4, label %if.else, !dbg !2712

if.then4:                                         ; preds = %if.end
  %12 = load %struct.stack_def*, %struct.stack_def** %output_stack, align 8, !dbg !2713
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %12, i32 0, i32 0, !dbg !2714
  store i32 -1, i32* %top, align 8, !dbg !2715
  br label %if.end10, !dbg !2713

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %reg, metadata !2716, metadata !DIExpression()), !dbg !2718
  %13 = load i32, i32* %value_reg_high, align 4, !dbg !2719
  %14 = load i32, i32* %value_reg_low, align 4, !dbg !2720
  %sub5 = sub nsw i32 %13, %14, !dbg !2721
  %15 = load %struct.stack_def*, %struct.stack_def** %output_stack, align 8, !dbg !2722
  %top6 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %15, i32 0, i32 0, !dbg !2723
  store i32 %sub5, i32* %top6, align 8, !dbg !2724
  %16 = load i32, i32* %value_reg_low, align 4, !dbg !2725
  store i32 %16, i32* %reg, align 4, !dbg !2727
  br label %for.cond, !dbg !2728

for.cond:                                         ; preds = %for.inc, %if.else
  %17 = load i32, i32* %reg, align 4, !dbg !2729
  %18 = load i32, i32* %value_reg_high, align 4, !dbg !2731
  %cmp7 = icmp sle i32 %17, %18, !dbg !2732
  br i1 %cmp7, label %for.body, label %for.end, !dbg !2733

for.body:                                         ; preds = %for.cond
  %19 = load i32, i32* %reg, align 4, !dbg !2734
  %conv = trunc i32 %19 to i8, !dbg !2734
  %20 = load %struct.stack_def*, %struct.stack_def** %output_stack, align 8, !dbg !2736
  %reg8 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %20, i32 0, i32 2, !dbg !2737
  %21 = load i32, i32* %value_reg_high, align 4, !dbg !2738
  %22 = load i32, i32* %reg, align 4, !dbg !2739
  %sub9 = sub nsw i32 %21, %22, !dbg !2740
  %idxprom = sext i32 %sub9 to i64, !dbg !2736
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %reg8, i64 0, i64 %idxprom, !dbg !2736
  store i8 %conv, i8* %arrayidx, align 1, !dbg !2741
  %23 = load i32, i32* %reg, align 4, !dbg !2742
  %sh_prom = zext i32 %23 to i64, !dbg !2742
  %shl = shl i64 1, %sh_prom, !dbg !2742
  %24 = load %struct.stack_def*, %struct.stack_def** %output_stack, align 8, !dbg !2742
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %24, i32 0, i32 1, !dbg !2742
  %25 = load i64, i64* %reg_set, align 8, !dbg !2742
  %or = or i64 %25, %shl, !dbg !2742
  store i64 %or, i64* %reg_set, align 8, !dbg !2742
  br label %for.inc, !dbg !2743

for.inc:                                          ; preds = %for.body
  %26 = load i32, i32* %reg, align 4, !dbg !2744
  %inc = add nsw i32 %26, 1, !dbg !2744
  store i32 %inc, i32* %reg, align 4, !dbg !2744
  br label %for.cond, !dbg !2745, !llvm.loop !2746

for.end:                                          ; preds = %for.cond
  br label %if.end10

if.end10:                                         ; preds = %for.end, %if.then4
  ret void, !dbg !2748
}

; Function Attrs: noinline nounwind uwtable
define internal void @convert_regs_2(%struct.basic_block_def* %block) #0 !dbg !2749 {
entry:
  %block.addr = alloca %struct.basic_block_def*, align 8
  %stack = alloca %struct.basic_block_def**, align 8
  %sp = alloca %struct.basic_block_def**, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !2752, metadata !DIExpression()), !dbg !2753
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %stack, metadata !2754, metadata !DIExpression()), !dbg !2755
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %sp, metadata !2756, metadata !DIExpression()), !dbg !2757
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2758
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2758
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2758
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2758
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 3, !dbg !2758
  %2 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !2758
  %conv = sext i32 %2 to i64, !dbg !2758
  %mul = mul i64 8, %conv, !dbg !2758
  %call = call i8* @xmalloc(i64 %mul), !dbg !2758
  %3 = bitcast i8* %call to %struct.basic_block_def**, !dbg !2758
  store %struct.basic_block_def** %3, %struct.basic_block_def*** %stack, align 8, !dbg !2759
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %stack, align 8, !dbg !2760
  store %struct.basic_block_def** %4, %struct.basic_block_def*** %sp, align 8, !dbg !2761
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !2762
  %6 = load %struct.basic_block_def**, %struct.basic_block_def*** %sp, align 8, !dbg !2763
  %incdec.ptr = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %6, i32 1, !dbg !2763
  store %struct.basic_block_def** %incdec.ptr, %struct.basic_block_def*** %sp, align 8, !dbg !2763
  store %struct.basic_block_def* %5, %struct.basic_block_def** %6, align 8, !dbg !2764
  br label %do.body, !dbg !2765

do.body:                                          ; preds = %do.cond, %entry
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2766, metadata !DIExpression()), !dbg !2768
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2769, metadata !DIExpression()), !dbg !2770
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %sp, align 8, !dbg !2771
  %incdec.ptr1 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %7, i32 -1, !dbg !2771
  store %struct.basic_block_def** %incdec.ptr1, %struct.basic_block_def*** %sp, align 8, !dbg !2771
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %incdec.ptr1, align 8, !dbg !2772
  store %struct.basic_block_def* %8, %struct.basic_block_def** %block.addr, align 8, !dbg !2773
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !2774
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 1, !dbg !2774
  %call2 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !2774
  %10 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2774
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 0, !dbg !2774
  %12 = extractvalue { i32, %struct.VEC_edge_gc** } %call2, 0, !dbg !2774
  store i32 %12, i32* %11, align 8, !dbg !2774
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 1, !dbg !2774
  %14 = extractvalue { i32, %struct.VEC_edge_gc** } %call2, 1, !dbg !2774
  store %struct.VEC_edge_gc** %14, %struct.VEC_edge_gc*** %13, align 8, !dbg !2774
  %15 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2774
  %16 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2774
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 16, i1 false), !dbg !2774
  br label %for.cond, !dbg !2774

for.cond:                                         ; preds = %for.inc, %do.body
  %17 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2776
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %17, i32 0, i32 0, !dbg !2776
  %19 = load i32, i32* %18, align 8, !dbg !2776
  %20 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %17, i32 0, i32 1, !dbg !2776
  %21 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %20, align 8, !dbg !2776
  %call3 = call zeroext i8 @ei_cond(i32 %19, %struct.VEC_edge_gc** %21, %struct.edge_def** %e), !dbg !2776
  %tobool = icmp ne i8 %call3, 0, !dbg !2774
  br i1 %tobool, label %for.body, label %for.end, !dbg !2774

for.body:                                         ; preds = %for.cond
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2778
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 7, !dbg !2780
  %23 = load i32, i32* %flags, align 8, !dbg !2780
  %and = and i32 %23, 32, !dbg !2781
  %tobool4 = icmp ne i32 %and, 0, !dbg !2781
  br i1 %tobool4, label %if.end12, label %if.then, !dbg !2782

if.then:                                          ; preds = %for.body
  %24 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2783
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 1, !dbg !2783
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2783
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 2, !dbg !2783
  %26 = load i8*, i8** %aux, align 8, !dbg !2783
  %27 = bitcast i8* %26 to %struct.block_info_def*, !dbg !2783
  %predecessors = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %27, i32 0, i32 4, !dbg !2785
  %28 = load i32, i32* %predecessors, align 4, !dbg !2786
  %dec = add nsw i32 %28, -1, !dbg !2786
  store i32 %dec, i32* %predecessors, align 4, !dbg !2786
  %29 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2787
  %dest5 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 1, !dbg !2787
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %dest5, align 8, !dbg !2787
  %aux6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 2, !dbg !2787
  %31 = load i8*, i8** %aux6, align 8, !dbg !2787
  %32 = bitcast i8* %31 to %struct.block_info_def*, !dbg !2787
  %predecessors7 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %32, i32 0, i32 4, !dbg !2789
  %33 = load i32, i32* %predecessors7, align 4, !dbg !2789
  %tobool8 = icmp ne i32 %33, 0, !dbg !2787
  br i1 %tobool8, label %if.end, label %if.then9, !dbg !2790

if.then9:                                         ; preds = %if.then
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2791
  %dest10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 1, !dbg !2792
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest10, align 8, !dbg !2792
  %36 = load %struct.basic_block_def**, %struct.basic_block_def*** %sp, align 8, !dbg !2793
  %incdec.ptr11 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %36, i32 1, !dbg !2793
  store %struct.basic_block_def** %incdec.ptr11, %struct.basic_block_def*** %sp, align 8, !dbg !2793
  store %struct.basic_block_def* %35, %struct.basic_block_def** %36, align 8, !dbg !2794
  br label %if.end, !dbg !2795

if.end:                                           ; preds = %if.then9, %if.then
  br label %if.end12, !dbg !2796

if.end12:                                         ; preds = %if.end, %for.body
  br label %for.inc, !dbg !2797

for.inc:                                          ; preds = %if.end12
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2776
  br label %for.cond, !dbg !2776, !llvm.loop !2798

for.end:                                          ; preds = %for.cond
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !2800
  call void @convert_regs_1(%struct.basic_block_def* %37), !dbg !2801
  br label %do.cond, !dbg !2802

do.cond:                                          ; preds = %for.end
  %38 = load %struct.basic_block_def**, %struct.basic_block_def*** %sp, align 8, !dbg !2803
  %39 = load %struct.basic_block_def**, %struct.basic_block_def*** %stack, align 8, !dbg !2804
  %cmp = icmp ne %struct.basic_block_def** %38, %39, !dbg !2805
  br i1 %cmp, label %do.body, label %do.end, !dbg !2802, !llvm.loop !2806

do.end:                                           ; preds = %do.cond
  %40 = load %struct.basic_block_def**, %struct.basic_block_def*** %stack, align 8, !dbg !2808
  %41 = bitcast %struct.basic_block_def** %40 to i8*, !dbg !2808
  call void @free(i8* %41), !dbg !2809
  ret void, !dbg !2810
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @compensate_edges() #0 !dbg !2811 {
entry:
  %inserted = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata i8* %inserted, metadata !2812, metadata !DIExpression()), !dbg !2813
  store i8 0, i8* %inserted, align 1, !dbg !2813
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2814, metadata !DIExpression()), !dbg !2815
  store i8 0, i8* @starting_stack_p, align 1, !dbg !2816
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2817
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2817
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2817
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2817
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !2817
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2817
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !2817
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !2817
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !2817
  br label %for.cond, !dbg !2817

for.cond:                                         ; preds = %for.inc13, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2819
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2819
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !2819
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2819
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2819
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !2819
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2819
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !2819
  br i1 %cmp, label %for.body, label %for.end15, !dbg !2817

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2821
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2823
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !2823
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !2823
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !2823
  %x_entry_block_ptr5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 0, !dbg !2823
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr5, align 8, !dbg !2823
  %cmp6 = icmp ne %struct.basic_block_def* %8, %11, !dbg !2824
  br i1 %cmp6, label %if.then, label %if.end, !dbg !2825

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2826, metadata !DIExpression()), !dbg !2828
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2829, metadata !DIExpression()), !dbg !2830
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2831
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 1, !dbg !2831
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !2831
  %13 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2831
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 0, !dbg !2831
  %15 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !2831
  store i32 %15, i32* %14, align 8, !dbg !2831
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 1, !dbg !2831
  %17 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !2831
  store %struct.VEC_edge_gc** %17, %struct.VEC_edge_gc*** %16, align 8, !dbg !2831
  %18 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2831
  %19 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2831
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 16, i1 false), !dbg !2831
  br label %for.cond7, !dbg !2831

for.cond7:                                        ; preds = %for.inc, %if.then
  %20 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2833
  %21 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %20, i32 0, i32 0, !dbg !2833
  %22 = load i32, i32* %21, align 8, !dbg !2833
  %23 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %20, i32 0, i32 1, !dbg !2833
  %24 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %23, align 8, !dbg !2833
  %call8 = call zeroext i8 @ei_cond(i32 %22, %struct.VEC_edge_gc** %24, %struct.edge_def** %e), !dbg !2833
  %tobool = icmp ne i8 %call8, 0, !dbg !2831
  br i1 %tobool, label %for.body9, label %for.end, !dbg !2831

for.body9:                                        ; preds = %for.cond7
  %25 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2835
  %call10 = call zeroext i8 @compensate_edge(%struct.edge_def* %25), !dbg !2836
  %conv = zext i8 %call10 to i32, !dbg !2836
  %26 = load i8, i8* %inserted, align 1, !dbg !2837
  %conv11 = zext i8 %26 to i32, !dbg !2837
  %or = or i32 %conv11, %conv, !dbg !2837
  %conv12 = trunc i32 %or to i8, !dbg !2837
  store i8 %conv12, i8* %inserted, align 1, !dbg !2837
  br label %for.inc, !dbg !2838

for.inc:                                          ; preds = %for.body9
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2833
  br label %for.cond7, !dbg !2833, !llvm.loop !2839

for.end:                                          ; preds = %for.cond7
  br label %if.end, !dbg !2841

if.end:                                           ; preds = %for.end, %for.body
  br label %for.inc13, !dbg !2823

for.inc13:                                        ; preds = %if.end
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2819
  %next_bb14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 6, !dbg !2819
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb14, align 8, !dbg !2819
  store %struct.basic_block_def* %28, %struct.basic_block_def** %bb, align 8, !dbg !2819
  br label %for.cond, !dbg !2819, !llvm.loop !2842

for.end15:                                        ; preds = %for.cond
  %29 = load i8, i8* %inserted, align 1, !dbg !2844
  ret i8 %29, !dbg !2845
}

declare dso_local void @clear_aux_for_blocks() #3

declare dso_local void @fixup_abnormal_edges() #3

declare dso_local void @commit_edge_insertions() #3

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #3

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #3

declare dso_local void @insert_insn_on_edge(%struct.rtx_def*, %struct.edge_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @stack_result(%union.tree_node* %decl) #0 !dbg !2846 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %result = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !2849, metadata !DIExpression()), !dbg !2850
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !2851, metadata !DIExpression()), !dbg !2852
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2853
  %decl_non_common = bitcast %union.tree_node* %0 to %struct.tree_decl_non_common*, !dbg !2853
  %result1 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !2853
  %1 = load %union.tree_node*, %union.tree_node** %result1, align 8, !dbg !2853
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2855
  %call = call i32 @aggregate_value_p(%union.tree_node* %1, %union.tree_node* %2), !dbg !2856
  %tobool = icmp ne i32 %call, 0, !dbg !2856
  br i1 %tobool, label %if.then, label %if.end, !dbg !2857

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !2858
  br label %return, !dbg !2858

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2859
  %decl_non_common2 = bitcast %union.tree_node* %3 to %struct.tree_decl_non_common*, !dbg !2859
  %result3 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common2, i32 0, i32 3, !dbg !2859
  %4 = load %union.tree_node*, %union.tree_node** %result3, align 8, !dbg !2859
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !2859
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !2859
  %bf.load = load i64, i64* %5, align 8, !dbg !2859
  %bf.clear = and i64 %bf.load, 65535, !dbg !2859
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2859
  %idxprom = zext i32 %bf.cast to i64, !dbg !2859
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !2859
  %arrayidx4 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !2859
  %6 = load i8, i8* %arrayidx4, align 1, !dbg !2859
  %conv = zext i8 %6 to i32, !dbg !2859
  %tobool5 = icmp ne i32 %conv, 0, !dbg !2859
  br i1 %tobool5, label %land.lhs.true, label %cond.false25, !dbg !2859

land.lhs.true:                                    ; preds = %if.end
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2859
  %decl_non_common6 = bitcast %union.tree_node* %7 to %struct.tree_decl_non_common*, !dbg !2859
  %result7 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common6, i32 0, i32 3, !dbg !2859
  %8 = load %union.tree_node*, %union.tree_node** %result7, align 8, !dbg !2859
  %decl_with_rtl = bitcast %union.tree_node* %8 to %struct.tree_decl_with_rtl*, !dbg !2859
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !2859
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !2859
  %cmp = icmp ne %struct.rtx_def* %9, null, !dbg !2859
  br i1 %cmp, label %cond.true, label %cond.false25, !dbg !2859

cond.true:                                        ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2859
  %decl_non_common9 = bitcast %union.tree_node* %10 to %struct.tree_decl_non_common*, !dbg !2859
  %result10 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common9, i32 0, i32 3, !dbg !2859
  %11 = load %union.tree_node*, %union.tree_node** %result10, align 8, !dbg !2859
  %decl_with_rtl11 = bitcast %union.tree_node* %11 to %struct.tree_decl_with_rtl*, !dbg !2859
  %rtl12 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl11, i32 0, i32 1, !dbg !2859
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rtl12, align 8, !dbg !2859
  %tobool13 = icmp ne %struct.rtx_def* %12, null, !dbg !2859
  br i1 %tobool13, label %cond.true14, label %cond.false, !dbg !2859

cond.true14:                                      ; preds = %cond.true
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2859
  %decl_non_common15 = bitcast %union.tree_node* %13 to %struct.tree_decl_non_common*, !dbg !2859
  %result16 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common15, i32 0, i32 3, !dbg !2859
  %14 = load %union.tree_node*, %union.tree_node** %result16, align 8, !dbg !2859
  %decl_with_rtl17 = bitcast %union.tree_node* %14 to %struct.tree_decl_with_rtl*, !dbg !2859
  %rtl18 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl17, i32 0, i32 1, !dbg !2859
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rtl18, align 8, !dbg !2859
  br label %cond.end, !dbg !2859

cond.false:                                       ; preds = %cond.true
  %16 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2859
  %decl_non_common19 = bitcast %union.tree_node* %16 to %struct.tree_decl_non_common*, !dbg !2859
  %result20 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common19, i32 0, i32 3, !dbg !2859
  %17 = load %union.tree_node*, %union.tree_node** %result20, align 8, !dbg !2859
  call void @make_decl_rtl(%union.tree_node* %17), !dbg !2859
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2859
  %decl_non_common21 = bitcast %union.tree_node* %18 to %struct.tree_decl_non_common*, !dbg !2859
  %result22 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common21, i32 0, i32 3, !dbg !2859
  %19 = load %union.tree_node*, %union.tree_node** %result22, align 8, !dbg !2859
  %decl_with_rtl23 = bitcast %union.tree_node* %19 to %struct.tree_decl_with_rtl*, !dbg !2859
  %rtl24 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl23, i32 0, i32 1, !dbg !2859
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rtl24, align 8, !dbg !2859
  br label %cond.end, !dbg !2859

cond.end:                                         ; preds = %cond.false, %cond.true14
  %cond = phi %struct.rtx_def* [ %15, %cond.true14 ], [ %20, %cond.false ], !dbg !2859
  br label %cond.end26, !dbg !2859

cond.false25:                                     ; preds = %land.lhs.true, %if.end
  br label %cond.end26, !dbg !2859

cond.end26:                                       ; preds = %cond.false25, %cond.end
  %cond27 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false25 ], !dbg !2859
  store %struct.rtx_def* %cond27, %struct.rtx_def** %result, align 8, !dbg !2860
  %21 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !2861
  %cmp28 = icmp ne %struct.rtx_def* %21, null, !dbg !2863
  br i1 %cmp28, label %if.then30, label %if.end34, !dbg !2864

if.then30:                                        ; preds = %cond.end26
  %22 = load %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 15), align 8, !dbg !2865
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2866
  %decl_non_common31 = bitcast %union.tree_node* %23 to %struct.tree_decl_non_common*, !dbg !2866
  %result32 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common31, i32 0, i32 3, !dbg !2866
  %24 = load %union.tree_node*, %union.tree_node** %result32, align 8, !dbg !2866
  %common = bitcast %union.tree_node* %24 to %struct.tree_common*, !dbg !2866
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2866
  %25 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2866
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !2867
  %call33 = call %struct.rtx_def* %22(%union.tree_node* %25, %union.tree_node* %26, i8 zeroext 1), !dbg !2868
  store %struct.rtx_def* %call33, %struct.rtx_def** %result, align 8, !dbg !2869
  br label %if.end34, !dbg !2870

if.end34:                                         ; preds = %if.then30, %cond.end26
  %27 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !2871
  %cmp35 = icmp ne %struct.rtx_def* %27, null, !dbg !2872
  br i1 %cmp35, label %land.lhs.true37, label %cond.false48, !dbg !2873

land.lhs.true37:                                  ; preds = %if.end34
  %28 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !2874
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !2874
  %bf.load38 = load i32, i32* %29, align 8, !dbg !2874
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !2874
  %cmp40 = icmp eq i32 %bf.clear39, 37, !dbg !2874
  br i1 %cmp40, label %land.lhs.true42, label %cond.false48, !dbg !2874

land.lhs.true42:                                  ; preds = %land.lhs.true37
  %30 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !2874
  %call43 = call i32 @rhs_regno(%struct.rtx_def* %30), !dbg !2874
  %conv44 = zext i32 %call43 to i64, !dbg !2874
  %sub = sub i64 %conv44, 8, !dbg !2874
  %cmp45 = icmp ule i64 %sub, 7, !dbg !2874
  br i1 %cmp45, label %cond.true47, label %cond.false48, !dbg !2871

cond.true47:                                      ; preds = %land.lhs.true42
  %31 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !2875
  br label %cond.end49, !dbg !2871

cond.false48:                                     ; preds = %land.lhs.true42, %land.lhs.true37, %if.end34
  br label %cond.end49, !dbg !2871

cond.end49:                                       ; preds = %cond.false48, %cond.true47
  %cond50 = phi %struct.rtx_def* [ %31, %cond.true47 ], [ null, %cond.false48 ], !dbg !2871
  store %struct.rtx_def* %cond50, %struct.rtx_def** %retval, align 8, !dbg !2876
  br label %return, !dbg !2876

return:                                           ; preds = %cond.end49, %if.then
  %32 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !2877
  ret %struct.rtx_def* %32, !dbg !2877
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @end_hard_regno(i32 %mode, i32 %regno) #0 !dbg !2878 {
entry:
  %mode.addr = alloca i32, align 4
  %regno.addr = alloca i32, align 4
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2882, metadata !DIExpression()), !dbg !2883
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !2884, metadata !DIExpression()), !dbg !2885
  %0 = load i32, i32* %regno.addr, align 4, !dbg !2886
  %1 = load i32, i32* %regno.addr, align 4, !dbg !2887
  %idxprom = zext i32 %1 to i64, !dbg !2888
  %arrayidx = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom, !dbg !2888
  %2 = load i32, i32* %mode.addr, align 4, !dbg !2889
  %idxprom1 = sext i32 %2 to i64, !dbg !2888
  %arrayidx2 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx, i64 0, i64 %idxprom1, !dbg !2888
  %3 = load i8, i8* %arrayidx2, align 1, !dbg !2888
  %conv = zext i8 %3 to i32, !dbg !2888
  %add = add i32 %0, %conv, !dbg !2890
  ret i32 %add, !dbg !2891
}

declare dso_local i32 @aggregate_value_p(%union.tree_node*, %union.tree_node*) #3

declare dso_local void @make_decl_rtl(%union.tree_node*) #3

declare dso_local i8* @xmalloc(i64) #3

; Function Attrs: noinline nounwind uwtable
define internal void @convert_regs_1(%struct.basic_block_def* %block) #0 !dbg !2892 {
entry:
  %block.addr = alloca %struct.basic_block_def*, align 8
  %regstack = alloca %struct.stack_def, align 8
  %bi = alloca %struct.block_info_def*, align 8
  %reg = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %control_flow_insn_deleted = alloca i8, align 1
  %debug_insns_with_starting_stack = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %beste = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %set = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !2893, metadata !DIExpression()), !dbg !2894
  call void @llvm.dbg.declare(metadata %struct.stack_def* %regstack, metadata !2895, metadata !DIExpression()), !dbg !2896
  call void @llvm.dbg.declare(metadata %struct.block_info_def** %bi, metadata !2897, metadata !DIExpression()), !dbg !2898
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !2899
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 2, !dbg !2899
  %1 = load i8*, i8** %aux, align 8, !dbg !2899
  %2 = bitcast i8* %1 to %struct.block_info_def*, !dbg !2899
  store %struct.block_info_def* %2, %struct.block_info_def** %bi, align 8, !dbg !2898
  call void @llvm.dbg.declare(metadata i32* %reg, metadata !2900, metadata !DIExpression()), !dbg !2901
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !2902, metadata !DIExpression()), !dbg !2903
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !2904, metadata !DIExpression()), !dbg !2905
  call void @llvm.dbg.declare(metadata i8* %control_flow_insn_deleted, metadata !2906, metadata !DIExpression()), !dbg !2907
  store i8 0, i8* %control_flow_insn_deleted, align 1, !dbg !2907
  call void @llvm.dbg.declare(metadata i32* %debug_insns_with_starting_stack, metadata !2908, metadata !DIExpression()), !dbg !2909
  store i32 0, i32* %debug_insns_with_starting_stack, align 4, !dbg !2909
  store i8 0, i8* @any_malformed_asm, align 1, !dbg !2910
  %3 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2911
  %stack_in = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %3, i32 0, i32 0, !dbg !2913
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %stack_in, i32 0, i32 0, !dbg !2914
  %4 = load i32, i32* %top, align 8, !dbg !2914
  %cmp = icmp eq i32 %4, -2, !dbg !2915
  br i1 %cmp, label %if.then, label %if.end24, !dbg !2916

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2917, metadata !DIExpression()), !dbg !2919
  call void @llvm.dbg.declare(metadata %struct.edge_def** %beste, metadata !2920, metadata !DIExpression()), !dbg !2921
  store %struct.edge_def* null, %struct.edge_def** %beste, align 8, !dbg !2921
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2922, metadata !DIExpression()), !dbg !2923
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !2924
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 0, !dbg !2924
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !2924
  %6 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2924
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %6, i32 0, i32 0, !dbg !2924
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !2924
  store i32 %8, i32* %7, align 8, !dbg !2924
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %6, i32 0, i32 1, !dbg !2924
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !2924
  store %struct.VEC_edge_gc** %10, %struct.VEC_edge_gc*** %9, align 8, !dbg !2924
  %11 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2924
  %12 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2924
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 16, i1 false), !dbg !2924
  br label %for.cond, !dbg !2924

for.cond:                                         ; preds = %for.inc, %if.then
  %13 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2926
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 0, !dbg !2926
  %15 = load i32, i32* %14, align 8, !dbg !2926
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %13, i32 0, i32 1, !dbg !2926
  %17 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %16, align 8, !dbg !2926
  %call1 = call zeroext i8 @ei_cond(i32 %15, %struct.VEC_edge_gc** %17, %struct.edge_def** %e), !dbg !2926
  %tobool = icmp ne i8 %call1, 0, !dbg !2924
  br i1 %tobool, label %for.body, label %for.end, !dbg !2924

for.body:                                         ; preds = %for.cond
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2928
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 0, !dbg !2928
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2928
  %aux2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 2, !dbg !2928
  %20 = load i8*, i8** %aux2, align 8, !dbg !2928
  %21 = bitcast i8* %20 to %struct.block_info_def*, !dbg !2928
  %done = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %21, i32 0, i32 3, !dbg !2930
  %22 = load i32, i32* %done, align 8, !dbg !2930
  %tobool3 = icmp ne i32 %22, 0, !dbg !2928
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !2931

if.then4:                                         ; preds = %for.body
  %23 = load %struct.edge_def*, %struct.edge_def** %beste, align 8, !dbg !2932
  %24 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2933
  %call5 = call %struct.edge_def* @better_edge(%struct.edge_def* %23, %struct.edge_def* %24), !dbg !2934
  store %struct.edge_def* %call5, %struct.edge_def** %beste, align 8, !dbg !2935
  br label %if.end, !dbg !2936

if.end:                                           ; preds = %if.then4, %for.body
  br label %for.inc, !dbg !2930

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2926
  br label %for.cond, !dbg !2926, !llvm.loop !2937

for.end:                                          ; preds = %for.cond
  %25 = load %struct.edge_def*, %struct.edge_def** %beste, align 8, !dbg !2939
  %tobool6 = icmp ne %struct.edge_def* %25, null, !dbg !2939
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !2941

if.then7:                                         ; preds = %for.end
  %26 = load %struct.edge_def*, %struct.edge_def** %beste, align 8, !dbg !2942
  call void @propagate_stack(%struct.edge_def* %26), !dbg !2943
  br label %if.end23, !dbg !2943

if.else:                                          ; preds = %for.end
  %27 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2944
  %stack_in8 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %27, i32 0, i32 0, !dbg !2946
  %top9 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %stack_in8, i32 0, i32 0, !dbg !2947
  store i32 -1, i32* %top9, align 8, !dbg !2948
  store i32 15, i32* %reg, align 4, !dbg !2949
  br label %for.cond10, !dbg !2951

for.cond10:                                       ; preds = %for.inc21, %if.else
  %28 = load i32, i32* %reg, align 4, !dbg !2952
  %cmp11 = icmp sge i32 %28, 8, !dbg !2954
  br i1 %cmp11, label %for.body12, label %for.end22, !dbg !2955

for.body12:                                       ; preds = %for.cond10
  %29 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2956
  %stack_in13 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %29, i32 0, i32 0, !dbg !2956
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %stack_in13, i32 0, i32 1, !dbg !2956
  %30 = load i64, i64* %reg_set, align 8, !dbg !2956
  %31 = load i32, i32* %reg, align 4, !dbg !2956
  %sh_prom = zext i32 %31 to i64, !dbg !2956
  %shl = shl i64 1, %sh_prom, !dbg !2956
  %and = and i64 %30, %shl, !dbg !2956
  %tobool14 = icmp ne i64 %and, 0, !dbg !2956
  br i1 %tobool14, label %if.then15, label %if.end20, !dbg !2958

if.then15:                                        ; preds = %for.body12
  %32 = load i32, i32* %reg, align 4, !dbg !2959
  %conv = trunc i32 %32 to i8, !dbg !2959
  %33 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2960
  %stack_in16 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %33, i32 0, i32 0, !dbg !2961
  %reg17 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %stack_in16, i32 0, i32 2, !dbg !2962
  %34 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2963
  %stack_in18 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %34, i32 0, i32 0, !dbg !2964
  %top19 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %stack_in18, i32 0, i32 0, !dbg !2965
  %35 = load i32, i32* %top19, align 8, !dbg !2966
  %inc = add nsw i32 %35, 1, !dbg !2966
  store i32 %inc, i32* %top19, align 8, !dbg !2966
  %idxprom = sext i32 %inc to i64, !dbg !2960
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %reg17, i64 0, i64 %idxprom, !dbg !2960
  store i8 %conv, i8* %arrayidx, align 1, !dbg !2967
  br label %if.end20, !dbg !2960

if.end20:                                         ; preds = %if.then15, %for.body12
  br label %for.inc21, !dbg !2956

for.inc21:                                        ; preds = %if.end20
  %36 = load i32, i32* %reg, align 4, !dbg !2968
  %dec = add nsw i32 %36, -1, !dbg !2968
  store i32 %dec, i32* %reg, align 4, !dbg !2968
  br label %for.cond10, !dbg !2969, !llvm.loop !2970

for.end22:                                        ; preds = %for.cond10
  br label %if.end23

if.end23:                                         ; preds = %for.end22, %if.then7
  br label %if.end24, !dbg !2972

if.end24:                                         ; preds = %if.end23, %entry
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2973
  %tobool25 = icmp ne %struct._IO_FILE* %37, null, !dbg !2973
  br i1 %tobool25, label %if.then26, label %if.end29, !dbg !2975

if.then26:                                        ; preds = %if.end24
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2976
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !2978
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 9, !dbg !2979
  %40 = load i32, i32* %index, align 8, !dbg !2979
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i32 %40), !dbg !2980
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2981
  %42 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2982
  %stack_in28 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %42, i32 0, i32 0, !dbg !2983
  call void @print_stack(%struct._IO_FILE* %41, %struct.stack_def* %stack_in28), !dbg !2984
  br label %if.end29, !dbg !2985

if.end29:                                         ; preds = %if.then26, %if.end24
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !2986
  store %struct.basic_block_def* %43, %struct.basic_block_def** @current_block, align 8, !dbg !2987
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !2988
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 7, !dbg !2988
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !2988
  %45 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !2988
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %45, i32 0, i32 0, !dbg !2988
  %46 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !2988
  store %struct.rtx_def* %46, %struct.rtx_def** %next, align 8, !dbg !2989
  %47 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !2990
  %stack_in30 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %47, i32 0, i32 0, !dbg !2991
  %48 = bitcast %struct.stack_def* %regstack to i8*, !dbg !2991
  %49 = bitcast %struct.stack_def* %stack_in30 to i8*, !dbg !2991
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 24, i1 false), !dbg !2991
  store i8 1, i8* @starting_stack_p, align 1, !dbg !2992
  br label %do.body, !dbg !2993

do.body:                                          ; preds = %do.cond, %if.end29
  %50 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !2994
  store %struct.rtx_def* %50, %struct.rtx_def** %insn, align 8, !dbg !2996
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2997
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !2997
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !2997
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !2997
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !2997
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !2997
  store %struct.rtx_def* %52, %struct.rtx_def** %next, align 8, !dbg !2998
  %53 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !2999
  %tobool32 = icmp ne %struct.rtx_def* %53, null, !dbg !2999
  br i1 %tobool32, label %cond.false, label %cond.true, !dbg !2999

cond.true:                                        ; preds = %do.body
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2937, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !2999
  br label %cond.end, !dbg !2999

cond.false:                                       ; preds = %do.body
  br label %cond.end, !dbg !2999

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2999
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3000
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !3002
  %il33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 7, !dbg !3002
  %rtl34 = bitcast %union.basic_block_il_dependent* %il33 to %struct.rtl_bb_info**, !dbg !3002
  %56 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl34, align 8, !dbg !3002
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %56, i32 0, i32 1, !dbg !3002
  %57 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3002
  %cmp35 = icmp eq %struct.rtx_def* %54, %57, !dbg !3003
  br i1 %cmp35, label %if.then37, label %if.end38, !dbg !3004

if.then37:                                        ; preds = %cond.end
  store %struct.rtx_def* null, %struct.rtx_def** %next, align 8, !dbg !3005
  br label %if.end38, !dbg !3006

if.end38:                                         ; preds = %if.then37, %cond.end
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3007
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !3007
  %bf.load = load i32, i32* %59, align 8, !dbg !3007
  %bf.clear = and i32 %bf.load, 65535, !dbg !3007
  %cmp39 = icmp eq i32 %bf.clear, 7, !dbg !3007
  br i1 %cmp39, label %if.then41, label %if.else58, !dbg !3009

if.then41:                                        ; preds = %if.end38
  %60 = load i8, i8* @starting_stack_p, align 1, !dbg !3010
  %tobool42 = icmp ne i8 %60, 0, !dbg !3010
  br i1 %tobool42, label %if.then43, label %if.else45, !dbg !3013

if.then43:                                        ; preds = %if.then41
  %61 = load i32, i32* %debug_insns_with_starting_stack, align 4, !dbg !3014
  %inc44 = add nsw i32 %61, 1, !dbg !3014
  store i32 %inc44, i32* %debug_insns_with_starting_stack, align 4, !dbg !3014
  br label %if.end57, !dbg !3015

if.else45:                                        ; preds = %if.then41
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3016
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !3016
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !3016
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 5, !dbg !3016
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !3016
  %63 = bitcast %struct.stack_def* %regstack to i8*, !dbg !3018
  %call50 = call i32 @for_each_rtx(%struct.rtx_def** %rt_rtx49, i32 (%struct.rtx_def**, i8*)* @subst_stack_regs_in_debug_insn, i8* %63), !dbg !3019
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3020
  %call51 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %64, i32 1, %struct.rtx_def* null), !dbg !3020
  %tobool52 = icmp ne %struct.rtx_def* %call51, null, !dbg !3020
  br i1 %tobool52, label %cond.true53, label %cond.false54, !dbg !3020

cond.true53:                                      ; preds = %if.else45
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2957, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3020
  br label %cond.end55, !dbg !3020

cond.false54:                                     ; preds = %if.else45
  br label %cond.end55, !dbg !3020

cond.end55:                                       ; preds = %cond.false54, %cond.true53
  %cond56 = phi i32 [ 0, %cond.true53 ], [ 0, %cond.false54 ], !dbg !3020
  br label %if.end57

if.end57:                                         ; preds = %cond.end55, %if.then43
  br label %if.end78, !dbg !3021

if.else58:                                        ; preds = %if.end38
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3022
  %call59 = call i32 @stack_regs_mentioned(%struct.rtx_def* %65), !dbg !3024
  %tobool60 = icmp ne i32 %call59, 0, !dbg !3024
  br i1 %tobool60, label %if.then65, label %lor.lhs.false, !dbg !3025

lor.lhs.false:                                    ; preds = %if.else58
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3026
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !3026
  %bf.load61 = load i32, i32* %67, align 8, !dbg !3026
  %bf.clear62 = and i32 %bf.load61, 65535, !dbg !3026
  %cmp63 = icmp eq i32 %bf.clear62, 10, !dbg !3026
  br i1 %cmp63, label %if.then65, label %if.end77, !dbg !3027

if.then65:                                        ; preds = %lor.lhs.false, %if.else58
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3028
  %tobool66 = icmp ne %struct._IO_FILE* %68, null, !dbg !3028
  br i1 %tobool66, label %if.then67, label %if.end72, !dbg !3031

if.then67:                                        ; preds = %if.then65
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3032
  %70 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3034
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !3034
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !3034
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 0, !dbg !3034
  %rt_int = bitcast %union.rtunion_def* %arrayidx70 to i32*, !dbg !3034
  %71 = load i32, i32* %rt_int, align 8, !dbg !3034
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %69, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i32 %71), !dbg !3035
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3036
  call void @print_stack(%struct._IO_FILE* %72, %struct.stack_def* %regstack), !dbg !3037
  br label %if.end72, !dbg !3038

if.end72:                                         ; preds = %if.then67, %if.then65
  %73 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3039
  %call73 = call zeroext i8 @subst_stack_regs(%struct.rtx_def* %73, %struct.stack_def* %regstack), !dbg !3040
  %conv74 = zext i8 %call73 to i32, !dbg !3040
  %74 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !3041
  %conv75 = zext i8 %74 to i32, !dbg !3041
  %or = or i32 %conv75, %conv74, !dbg !3041
  %conv76 = trunc i32 %or to i8, !dbg !3041
  store i8 %conv76, i8* %control_flow_insn_deleted, align 1, !dbg !3041
  store i8 0, i8* @starting_stack_p, align 1, !dbg !3042
  br label %if.end77, !dbg !3043

if.end77:                                         ; preds = %if.end72, %lor.lhs.false
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.end57
  br label %do.cond, !dbg !3044

do.cond:                                          ; preds = %if.end78
  %75 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !3045
  %tobool79 = icmp ne %struct.rtx_def* %75, null, !dbg !3044
  br i1 %tobool79, label %do.body, label %do.end, !dbg !3044, !llvm.loop !3046

do.end:                                           ; preds = %do.cond
  %76 = load i32, i32* %debug_insns_with_starting_stack, align 4, !dbg !3048
  %tobool80 = icmp ne i32 %76, 0, !dbg !3048
  br i1 %tobool80, label %if.then81, label %if.end107, !dbg !3050

if.then81:                                        ; preds = %do.end
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !3051
  %il82 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 7, !dbg !3051
  %rtl83 = bitcast %union.basic_block_il_dependent* %il82 to %struct.rtl_bb_info**, !dbg !3051
  %78 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl83, align 8, !dbg !3051
  %head_84 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %78, i32 0, i32 0, !dbg !3051
  %79 = load %struct.rtx_def*, %struct.rtx_def** %head_84, align 8, !dbg !3051
  store %struct.rtx_def* %79, %struct.rtx_def** %insn, align 8, !dbg !3054
  br label %for.cond85, !dbg !3055

for.cond85:                                       ; preds = %for.inc101, %if.then81
  %80 = load i32, i32* %debug_insns_with_starting_stack, align 4, !dbg !3056
  %tobool86 = icmp ne i32 %80, 0, !dbg !3058
  br i1 %tobool86, label %for.body87, label %for.end106, !dbg !3058

for.body87:                                       ; preds = %for.cond85
  %81 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3059
  %82 = bitcast %struct.rtx_def* %81 to i32*, !dbg !3059
  %bf.load88 = load i32, i32* %82, align 8, !dbg !3059
  %bf.clear89 = and i32 %bf.load88, 65535, !dbg !3059
  %cmp90 = icmp eq i32 %bf.clear89, 7, !dbg !3059
  br i1 %cmp90, label %if.end93, label %if.then92, !dbg !3062

if.then92:                                        ; preds = %for.body87
  br label %for.inc101, !dbg !3063

if.end93:                                         ; preds = %for.body87
  %83 = load i32, i32* %debug_insns_with_starting_stack, align 4, !dbg !3064
  %dec94 = add nsw i32 %83, -1, !dbg !3064
  store i32 %dec94, i32* %debug_insns_with_starting_stack, align 4, !dbg !3064
  %84 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3065
  %u95 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !3065
  %fld96 = bitcast %union.u* %u95 to [1 x %union.rtunion_def]*, !dbg !3065
  %arrayidx97 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld96, i64 0, i64 5, !dbg !3065
  %rt_rtx98 = bitcast %union.rtunion_def* %arrayidx97 to %struct.rtx_def**, !dbg !3065
  %85 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !3066
  %stack_in99 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %85, i32 0, i32 0, !dbg !3067
  %86 = bitcast %struct.stack_def* %stack_in99 to i8*, !dbg !3068
  %call100 = call i32 @for_each_rtx(%struct.rtx_def** %rt_rtx98, i32 (%struct.rtx_def**, i8*)* @subst_stack_regs_in_debug_insn, i8* %86), !dbg !3069
  br label %for.inc101, !dbg !3070

for.inc101:                                       ; preds = %if.end93, %if.then92
  %87 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3071
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1, !dbg !3071
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !3071
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 2, !dbg !3071
  %rt_rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**, !dbg !3071
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx105, align 8, !dbg !3071
  store %struct.rtx_def* %88, %struct.rtx_def** %insn, align 8, !dbg !3072
  br label %for.cond85, !dbg !3073, !llvm.loop !3074

for.end106:                                       ; preds = %for.cond85
  br label %if.end107, !dbg !3076

if.end107:                                        ; preds = %for.end106, %do.end
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3077
  %tobool108 = icmp ne %struct._IO_FILE* %89, null, !dbg !3077
  br i1 %tobool108, label %if.then109, label %if.end126, !dbg !3079

if.then109:                                       ; preds = %if.end107
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3080
  %call110 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0)), !dbg !3082
  store i32 8, i32* %reg, align 4, !dbg !3083
  br label %for.cond111, !dbg !3085

for.cond111:                                      ; preds = %for.inc122, %if.then109
  %91 = load i32, i32* %reg, align 4, !dbg !3086
  %cmp112 = icmp sle i32 %91, 15, !dbg !3088
  br i1 %cmp112, label %for.body114, label %for.end124, !dbg !3089

for.body114:                                      ; preds = %for.cond111
  %92 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !3090
  %out_reg_set = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %92, i32 0, i32 2, !dbg !3090
  %93 = load i64, i64* %out_reg_set, align 8, !dbg !3090
  %94 = load i32, i32* %reg, align 4, !dbg !3090
  %sh_prom115 = zext i32 %94 to i64, !dbg !3090
  %shl116 = shl i64 1, %sh_prom115, !dbg !3090
  %and117 = and i64 %93, %shl116, !dbg !3090
  %tobool118 = icmp ne i64 %and117, 0, !dbg !3090
  br i1 %tobool118, label %if.then119, label %if.end121, !dbg !3092

if.then119:                                       ; preds = %for.body114
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3093
  %96 = load i32, i32* %reg, align 4, !dbg !3094
  %call120 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i32 %96), !dbg !3095
  br label %if.end121, !dbg !3095

if.end121:                                        ; preds = %if.then119, %for.body114
  br label %for.inc122, !dbg !3090

for.inc122:                                       ; preds = %if.end121
  %97 = load i32, i32* %reg, align 4, !dbg !3096
  %inc123 = add nsw i32 %97, 1, !dbg !3096
  store i32 %inc123, i32* %reg, align 4, !dbg !3096
  br label %for.cond111, !dbg !3097, !llvm.loop !3098

for.end124:                                       ; preds = %for.cond111
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3100
  %call125 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %98, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.10, i64 0, i64 0)), !dbg !3101
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3102
  call void @print_stack(%struct._IO_FILE* %99, %struct.stack_def* %regstack), !dbg !3103
  br label %if.end126, !dbg !3104

if.end126:                                        ; preds = %for.end124, %if.end107
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !3105
  %il127 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %100, i32 0, i32 7, !dbg !3105
  %rtl128 = bitcast %union.basic_block_il_dependent* %il127 to %struct.rtl_bb_info**, !dbg !3105
  %101 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl128, align 8, !dbg !3105
  %end_129 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %101, i32 0, i32 1, !dbg !3105
  %102 = load %struct.rtx_def*, %struct.rtx_def** %end_129, align 8, !dbg !3105
  store %struct.rtx_def* %102, %struct.rtx_def** %insn, align 8, !dbg !3106
  %103 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3107
  %104 = bitcast %struct.rtx_def* %103 to i32*, !dbg !3107
  %bf.load130 = load i32, i32* %104, align 8, !dbg !3107
  %bf.clear131 = and i32 %bf.load130, 65535, !dbg !3107
  %cmp132 = icmp eq i32 %bf.clear131, 9, !dbg !3107
  br i1 %cmp132, label %if.then134, label %if.end139, !dbg !3109

if.then134:                                       ; preds = %if.end126
  %105 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3110
  %u135 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1, !dbg !3110
  %fld136 = bitcast %union.u* %u135 to [1 x %union.rtunion_def]*, !dbg !3110
  %arrayidx137 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld136, i64 0, i64 1, !dbg !3110
  %rt_rtx138 = bitcast %union.rtunion_def* %arrayidx137 to %struct.rtx_def**, !dbg !3110
  %106 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx138, align 8, !dbg !3110
  store %struct.rtx_def* %106, %struct.rtx_def** %insn, align 8, !dbg !3111
  br label %if.end139, !dbg !3112

if.end139:                                        ; preds = %if.then134, %if.end126
  store i32 8, i32* %reg, align 4, !dbg !3113
  br label %for.cond140, !dbg !3115

for.cond140:                                      ; preds = %for.inc170, %if.end139
  %107 = load i32, i32* %reg, align 4, !dbg !3116
  %cmp141 = icmp sle i32 %107, 15, !dbg !3118
  br i1 %cmp141, label %for.body143, label %for.end172, !dbg !3119

for.body143:                                      ; preds = %for.cond140
  %108 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !3120
  %out_reg_set144 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %108, i32 0, i32 2, !dbg !3120
  %109 = load i64, i64* %out_reg_set144, align 8, !dbg !3120
  %110 = load i32, i32* %reg, align 4, !dbg !3120
  %sh_prom145 = zext i32 %110 to i64, !dbg !3120
  %shl146 = shl i64 1, %sh_prom145, !dbg !3120
  %and147 = and i64 %109, %shl146, !dbg !3120
  %tobool148 = icmp ne i64 %and147, 0, !dbg !3120
  br i1 %tobool148, label %land.lhs.true, label %if.end169, !dbg !3123

land.lhs.true:                                    ; preds = %for.body143
  %reg_set149 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %regstack, i32 0, i32 1, !dbg !3124
  %111 = load i64, i64* %reg_set149, align 8, !dbg !3124
  %112 = load i32, i32* %reg, align 4, !dbg !3124
  %sh_prom150 = zext i32 %112 to i64, !dbg !3124
  %shl151 = shl i64 1, %sh_prom150, !dbg !3124
  %and152 = and i64 %111, %shl151, !dbg !3124
  %tobool153 = icmp ne i64 %and152, 0, !dbg !3124
  br i1 %tobool153, label %if.end169, label %if.then154, !dbg !3125

if.then154:                                       ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !3126, metadata !DIExpression()), !dbg !3128
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3129
  %tobool155 = icmp ne %struct._IO_FILE* %113, null, !dbg !3129
  br i1 %tobool155, label %if.then156, label %if.end158, !dbg !3131

if.then156:                                       ; preds = %if.then154
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3132
  %115 = load i32, i32* %reg, align 4, !dbg !3133
  %call157 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %114, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.11, i64 0, i64 0), i32 %115), !dbg !3134
  br label %if.end158, !dbg !3134

if.end158:                                        ; preds = %if.then156, %if.then154
  %116 = load i32, i32* %reg, align 4, !dbg !3135
  %sub = sub nsw i32 %116, 8, !dbg !3135
  %idxprom159 = sext i32 %sub to i64, !dbg !3135
  %arrayidx160 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom159, !dbg !3135
  %arrayidx161 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx160, i64 0, i64 38, !dbg !3135
  %117 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx161, align 8, !dbg !3135
  %118 = load %struct.rtx_def*, %struct.rtx_def** @not_a_num, align 8, !dbg !3135
  %call162 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %117, %struct.rtx_def* %118), !dbg !3135
  store %struct.rtx_def* %call162, %struct.rtx_def** %set, align 8, !dbg !3136
  %119 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !3137
  %120 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3138
  %call163 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %119, %struct.rtx_def* %120), !dbg !3139
  store %struct.rtx_def* %call163, %struct.rtx_def** %insn, align 8, !dbg !3140
  %121 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3141
  %call164 = call zeroext i8 @subst_stack_regs(%struct.rtx_def* %121, %struct.stack_def* %regstack), !dbg !3142
  %conv165 = zext i8 %call164 to i32, !dbg !3142
  %122 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !3143
  %conv166 = zext i8 %122 to i32, !dbg !3143
  %or167 = or i32 %conv166, %conv165, !dbg !3143
  %conv168 = trunc i32 %or167 to i8, !dbg !3143
  store i8 %conv168, i8* %control_flow_insn_deleted, align 1, !dbg !3143
  br label %if.end169, !dbg !3144

if.end169:                                        ; preds = %if.end158, %land.lhs.true, %for.body143
  br label %for.inc170, !dbg !3145

for.inc170:                                       ; preds = %if.end169
  %123 = load i32, i32* %reg, align 4, !dbg !3146
  %inc171 = add nsw i32 %123, 1, !dbg !3146
  store i32 %inc171, i32* %reg, align 4, !dbg !3146
  br label %for.cond140, !dbg !3147, !llvm.loop !3148

for.end172:                                       ; preds = %for.cond140
  %124 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !3150
  %tobool173 = icmp ne i8 %124, 0, !dbg !3150
  br i1 %tobool173, label %if.then174, label %if.end176, !dbg !3152

if.then174:                                       ; preds = %for.end172
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !3153
  %call175 = call zeroext i8 @purge_dead_edges(%struct.basic_block_def* %125), !dbg !3154
  br label %if.end176, !dbg !3154

if.end176:                                        ; preds = %if.then174, %for.end172
  %reg_set177 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %regstack, i32 0, i32 1, !dbg !3155
  %126 = load i64, i64* %reg_set177, align 8, !dbg !3155
  %127 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !3155
  %out_reg_set178 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %127, i32 0, i32 2, !dbg !3155
  %128 = load i64, i64* %out_reg_set178, align 8, !dbg !3155
  %call179 = call zeroext i8 @hard_reg_set_equal_p(i64 %126, i64 %128), !dbg !3155
  %conv180 = zext i8 %call179 to i32, !dbg !3155
  %tobool181 = icmp ne i32 %conv180, 0, !dbg !3155
  br i1 %tobool181, label %cond.false186, label %lor.lhs.false182, !dbg !3155

lor.lhs.false182:                                 ; preds = %if.end176
  %129 = load i8, i8* @any_malformed_asm, align 1, !dbg !3155
  %conv183 = zext i8 %129 to i32, !dbg !3155
  %tobool184 = icmp ne i32 %conv183, 0, !dbg !3155
  br i1 %tobool184, label %cond.false186, label %cond.true185, !dbg !3155

cond.true185:                                     ; preds = %lor.lhs.false182
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 3052, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3155
  br label %cond.end187, !dbg !3155

cond.false186:                                    ; preds = %lor.lhs.false182, %if.end176
  br label %cond.end187, !dbg !3155

cond.end187:                                      ; preds = %cond.false186, %cond.true185
  %cond188 = phi i32 [ 0, %cond.true185 ], [ 0, %cond.false186 ], !dbg !3155
  %130 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !3156
  %stack_out = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %130, i32 0, i32 1, !dbg !3157
  %131 = bitcast %struct.stack_def* %stack_out to i8*, !dbg !3158
  %132 = bitcast %struct.stack_def* %regstack to i8*, !dbg !3158
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %131, i8* align 8 %132, i64 24, i1 false), !dbg !3158
  %133 = load %struct.block_info_def*, %struct.block_info_def** %bi, align 8, !dbg !3159
  %done189 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %133, i32 0, i32 3, !dbg !3160
  store i32 1, i32* %done189, align 8, !dbg !3161
  ret void, !dbg !3162
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @better_edge(%struct.edge_def* %e1, %struct.edge_def* %e2) #0 !dbg !3163 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %e1.addr = alloca %struct.edge_def*, align 8
  %e2.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e1, %struct.edge_def** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e1.addr, metadata !3166, metadata !DIExpression()), !dbg !3167
  store %struct.edge_def* %e2, %struct.edge_def** %e2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e2.addr, metadata !3168, metadata !DIExpression()), !dbg !3169
  %0 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3170
  %tobool = icmp ne %struct.edge_def* %0, null, !dbg !3170
  br i1 %tobool, label %if.end, label %if.then, !dbg !3172

if.then:                                          ; preds = %entry
  %1 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3173
  store %struct.edge_def* %1, %struct.edge_def** %retval, align 8, !dbg !3174
  br label %return, !dbg !3174

if.end:                                           ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3175
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !3175
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3175
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 11, !dbg !3175
  %4 = load i32, i32* %frequency, align 8, !dbg !3175
  %5 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3175
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 8, !dbg !3175
  %6 = load i32, i32* %probability, align 4, !dbg !3175
  %mul = mul nsw i32 %4, %6, !dbg !3175
  %add = add nsw i32 %mul, 5000, !dbg !3175
  %div = sdiv i32 %add, 10000, !dbg !3175
  %7 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3177
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 0, !dbg !3177
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !3177
  %frequency2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 11, !dbg !3177
  %9 = load i32, i32* %frequency2, align 8, !dbg !3177
  %10 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3177
  %probability3 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %10, i32 0, i32 8, !dbg !3177
  %11 = load i32, i32* %probability3, align 4, !dbg !3177
  %mul4 = mul nsw i32 %9, %11, !dbg !3177
  %add5 = add nsw i32 %mul4, 5000, !dbg !3177
  %div6 = sdiv i32 %add5, 10000, !dbg !3177
  %cmp = icmp sgt i32 %div, %div6, !dbg !3178
  br i1 %cmp, label %if.then7, label %if.end8, !dbg !3179

if.then7:                                         ; preds = %if.end
  %12 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3180
  store %struct.edge_def* %12, %struct.edge_def** %retval, align 8, !dbg !3181
  br label %return, !dbg !3181

if.end8:                                          ; preds = %if.end
  %13 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3182
  %src9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 0, !dbg !3182
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %src9, align 8, !dbg !3182
  %frequency10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 11, !dbg !3182
  %15 = load i32, i32* %frequency10, align 8, !dbg !3182
  %16 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3182
  %probability11 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 8, !dbg !3182
  %17 = load i32, i32* %probability11, align 4, !dbg !3182
  %mul12 = mul nsw i32 %15, %17, !dbg !3182
  %add13 = add nsw i32 %mul12, 5000, !dbg !3182
  %div14 = sdiv i32 %add13, 10000, !dbg !3182
  %18 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3184
  %src15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 0, !dbg !3184
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %src15, align 8, !dbg !3184
  %frequency16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 11, !dbg !3184
  %20 = load i32, i32* %frequency16, align 8, !dbg !3184
  %21 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3184
  %probability17 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 8, !dbg !3184
  %22 = load i32, i32* %probability17, align 4, !dbg !3184
  %mul18 = mul nsw i32 %20, %22, !dbg !3184
  %add19 = add nsw i32 %mul18, 5000, !dbg !3184
  %div20 = sdiv i32 %add19, 10000, !dbg !3184
  %cmp21 = icmp slt i32 %div14, %div20, !dbg !3185
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !3186

if.then22:                                        ; preds = %if.end8
  %23 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3187
  store %struct.edge_def* %23, %struct.edge_def** %retval, align 8, !dbg !3188
  br label %return, !dbg !3188

if.end23:                                         ; preds = %if.end8
  %24 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3189
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 9, !dbg !3191
  %25 = load i64, i64* %count, align 8, !dbg !3191
  %26 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3192
  %count24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 9, !dbg !3193
  %27 = load i64, i64* %count24, align 8, !dbg !3193
  %cmp25 = icmp sgt i64 %25, %27, !dbg !3194
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !3195

if.then26:                                        ; preds = %if.end23
  %28 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3196
  store %struct.edge_def* %28, %struct.edge_def** %retval, align 8, !dbg !3197
  br label %return, !dbg !3197

if.end27:                                         ; preds = %if.end23
  %29 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3198
  %count28 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 9, !dbg !3200
  %30 = load i64, i64* %count28, align 8, !dbg !3200
  %31 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3201
  %count29 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 9, !dbg !3202
  %32 = load i64, i64* %count29, align 8, !dbg !3202
  %cmp30 = icmp slt i64 %30, %32, !dbg !3203
  br i1 %cmp30, label %if.then31, label %if.end32, !dbg !3204

if.then31:                                        ; preds = %if.end27
  %33 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3205
  store %struct.edge_def* %33, %struct.edge_def** %retval, align 8, !dbg !3206
  br label %return, !dbg !3206

if.end32:                                         ; preds = %if.end27
  %34 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3207
  %src33 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 0, !dbg !3207
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %src33, align 8, !dbg !3207
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 1, !dbg !3207
  %36 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3207
  %tobool34 = icmp ne %struct.VEC_edge_gc* %36, null, !dbg !3207
  br i1 %tobool34, label %cond.true, label %cond.false, !dbg !3207

cond.true:                                        ; preds = %if.end32
  %37 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3207
  %src35 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %37, i32 0, i32 0, !dbg !3207
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %src35, align 8, !dbg !3207
  %succs36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 1, !dbg !3207
  %39 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs36, align 8, !dbg !3207
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %39, i32 0, i32 0, !dbg !3207
  br label %cond.end, !dbg !3207

cond.false:                                       ; preds = %if.end32
  br label %cond.end, !dbg !3207

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3207
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !3207
  %cmp37 = icmp uge i32 %call, 2, !dbg !3207
  br i1 %cmp37, label %land.rhs, label %land.end, !dbg !3207

land.rhs:                                         ; preds = %cond.end
  %40 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3207
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %40, i32 0, i32 1, !dbg !3207
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3207
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 0, !dbg !3207
  %42 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !3207
  %tobool38 = icmp ne %struct.VEC_edge_gc* %42, null, !dbg !3207
  br i1 %tobool38, label %cond.true39, label %cond.false43, !dbg !3207

cond.true39:                                      ; preds = %land.rhs
  %43 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3207
  %dest40 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 1, !dbg !3207
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %dest40, align 8, !dbg !3207
  %preds41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 0, !dbg !3207
  %45 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds41, align 8, !dbg !3207
  %base42 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %45, i32 0, i32 0, !dbg !3207
  br label %cond.end44, !dbg !3207

cond.false43:                                     ; preds = %land.rhs
  br label %cond.end44, !dbg !3207

cond.end44:                                       ; preds = %cond.false43, %cond.true39
  %cond45 = phi %struct.VEC_edge_base* [ %base42, %cond.true39 ], [ null, %cond.false43 ], !dbg !3207
  %call46 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond45), !dbg !3207
  %cmp47 = icmp uge i32 %call46, 2, !dbg !3207
  br label %land.end

land.end:                                         ; preds = %cond.end44, %cond.end
  %46 = phi i1 [ false, %cond.end ], [ %cmp47, %cond.end44 ], !dbg !3209
  %land.ext = zext i1 %46 to i32, !dbg !3207
  %47 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3210
  %src48 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 0, !dbg !3210
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %src48, align 8, !dbg !3210
  %succs49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 1, !dbg !3210
  %49 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs49, align 8, !dbg !3210
  %tobool50 = icmp ne %struct.VEC_edge_gc* %49, null, !dbg !3210
  br i1 %tobool50, label %cond.true51, label %cond.false55, !dbg !3210

cond.true51:                                      ; preds = %land.end
  %50 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3210
  %src52 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %50, i32 0, i32 0, !dbg !3210
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %src52, align 8, !dbg !3210
  %succs53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 1, !dbg !3210
  %52 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs53, align 8, !dbg !3210
  %base54 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %52, i32 0, i32 0, !dbg !3210
  br label %cond.end56, !dbg !3210

cond.false55:                                     ; preds = %land.end
  br label %cond.end56, !dbg !3210

cond.end56:                                       ; preds = %cond.false55, %cond.true51
  %cond57 = phi %struct.VEC_edge_base* [ %base54, %cond.true51 ], [ null, %cond.false55 ], !dbg !3210
  %call58 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond57), !dbg !3210
  %cmp59 = icmp uge i32 %call58, 2, !dbg !3210
  br i1 %cmp59, label %land.rhs60, label %land.end73, !dbg !3210

land.rhs60:                                       ; preds = %cond.end56
  %53 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3210
  %dest61 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %53, i32 0, i32 1, !dbg !3210
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %dest61, align 8, !dbg !3210
  %preds62 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 0, !dbg !3210
  %55 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds62, align 8, !dbg !3210
  %tobool63 = icmp ne %struct.VEC_edge_gc* %55, null, !dbg !3210
  br i1 %tobool63, label %cond.true64, label %cond.false68, !dbg !3210

cond.true64:                                      ; preds = %land.rhs60
  %56 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3210
  %dest65 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 1, !dbg !3210
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %dest65, align 8, !dbg !3210
  %preds66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 0, !dbg !3210
  %58 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds66, align 8, !dbg !3210
  %base67 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %58, i32 0, i32 0, !dbg !3210
  br label %cond.end69, !dbg !3210

cond.false68:                                     ; preds = %land.rhs60
  br label %cond.end69, !dbg !3210

cond.end69:                                       ; preds = %cond.false68, %cond.true64
  %cond70 = phi %struct.VEC_edge_base* [ %base67, %cond.true64 ], [ null, %cond.false68 ], !dbg !3210
  %call71 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond70), !dbg !3210
  %cmp72 = icmp uge i32 %call71, 2, !dbg !3210
  br label %land.end73

land.end73:                                       ; preds = %cond.end69, %cond.end56
  %59 = phi i1 [ false, %cond.end56 ], [ %cmp72, %cond.end69 ], !dbg !3209
  %land.ext74 = zext i1 %59 to i32, !dbg !3210
  %cmp75 = icmp ne i32 %land.ext, %land.ext74, !dbg !3211
  br i1 %cmp75, label %if.then76, label %if.end105, !dbg !3212

if.then76:                                        ; preds = %land.end73
  %60 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3213
  %src77 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %60, i32 0, i32 0, !dbg !3213
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %src77, align 8, !dbg !3213
  %succs78 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 1, !dbg !3213
  %62 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs78, align 8, !dbg !3213
  %tobool79 = icmp ne %struct.VEC_edge_gc* %62, null, !dbg !3213
  br i1 %tobool79, label %cond.true80, label %cond.false84, !dbg !3213

cond.true80:                                      ; preds = %if.then76
  %63 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3213
  %src81 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %63, i32 0, i32 0, !dbg !3213
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %src81, align 8, !dbg !3213
  %succs82 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %64, i32 0, i32 1, !dbg !3213
  %65 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs82, align 8, !dbg !3213
  %base83 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %65, i32 0, i32 0, !dbg !3213
  br label %cond.end85, !dbg !3213

cond.false84:                                     ; preds = %if.then76
  br label %cond.end85, !dbg !3213

cond.end85:                                       ; preds = %cond.false84, %cond.true80
  %cond86 = phi %struct.VEC_edge_base* [ %base83, %cond.true80 ], [ null, %cond.false84 ], !dbg !3213
  %call87 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond86), !dbg !3213
  %cmp88 = icmp uge i32 %call87, 2, !dbg !3213
  br i1 %cmp88, label %land.lhs.true, label %cond.false102, !dbg !3213

land.lhs.true:                                    ; preds = %cond.end85
  %66 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3213
  %dest89 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %66, i32 0, i32 1, !dbg !3213
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %dest89, align 8, !dbg !3213
  %preds90 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 0, !dbg !3213
  %68 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds90, align 8, !dbg !3213
  %tobool91 = icmp ne %struct.VEC_edge_gc* %68, null, !dbg !3213
  br i1 %tobool91, label %cond.true92, label %cond.false96, !dbg !3213

cond.true92:                                      ; preds = %land.lhs.true
  %69 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3213
  %dest93 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 1, !dbg !3213
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %dest93, align 8, !dbg !3213
  %preds94 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %70, i32 0, i32 0, !dbg !3213
  %71 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds94, align 8, !dbg !3213
  %base95 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %71, i32 0, i32 0, !dbg !3213
  br label %cond.end97, !dbg !3213

cond.false96:                                     ; preds = %land.lhs.true
  br label %cond.end97, !dbg !3213

cond.end97:                                       ; preds = %cond.false96, %cond.true92
  %cond98 = phi %struct.VEC_edge_base* [ %base95, %cond.true92 ], [ null, %cond.false96 ], !dbg !3213
  %call99 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond98), !dbg !3213
  %cmp100 = icmp uge i32 %call99, 2, !dbg !3213
  br i1 %cmp100, label %cond.true101, label %cond.false102, !dbg !3213

cond.true101:                                     ; preds = %cond.end97
  %72 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3214
  br label %cond.end103, !dbg !3213

cond.false102:                                    ; preds = %cond.end97, %cond.end85
  %73 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3215
  br label %cond.end103, !dbg !3213

cond.end103:                                      ; preds = %cond.false102, %cond.true101
  %cond104 = phi %struct.edge_def* [ %72, %cond.true101 ], [ %73, %cond.false102 ], !dbg !3213
  store %struct.edge_def* %cond104, %struct.edge_def** %retval, align 8, !dbg !3216
  br label %return, !dbg !3216

if.end105:                                        ; preds = %land.end73
  %74 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3217
  %src106 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %74, i32 0, i32 0, !dbg !3218
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %src106, align 8, !dbg !3218
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 9, !dbg !3219
  %76 = load i32, i32* %index, align 8, !dbg !3219
  %77 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3220
  %src107 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %77, i32 0, i32 0, !dbg !3221
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %src107, align 8, !dbg !3221
  %index108 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 9, !dbg !3222
  %79 = load i32, i32* %index108, align 8, !dbg !3222
  %cmp109 = icmp slt i32 %76, %79, !dbg !3223
  br i1 %cmp109, label %cond.true110, label %cond.false111, !dbg !3224

cond.true110:                                     ; preds = %if.end105
  %80 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3225
  br label %cond.end112, !dbg !3224

cond.false111:                                    ; preds = %if.end105
  %81 = load %struct.edge_def*, %struct.edge_def** %e2.addr, align 8, !dbg !3226
  br label %cond.end112, !dbg !3224

cond.end112:                                      ; preds = %cond.false111, %cond.true110
  %cond113 = phi %struct.edge_def* [ %80, %cond.true110 ], [ %81, %cond.false111 ], !dbg !3224
  store %struct.edge_def* %cond113, %struct.edge_def** %retval, align 8, !dbg !3227
  br label %return, !dbg !3227

return:                                           ; preds = %cond.end112, %cond.end103, %if.then31, %if.then26, %if.then22, %if.then7, %if.then
  %82 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !3228
  ret %struct.edge_def* %82, !dbg !3228
}

; Function Attrs: noinline nounwind uwtable
define internal void @propagate_stack(%struct.edge_def* %e) #0 !dbg !3229 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %src_stack = alloca %struct.stack_def*, align 8
  %dest_stack = alloca %struct.stack_def*, align 8
  %reg = alloca i32, align 4
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3232, metadata !DIExpression()), !dbg !3233
  call void @llvm.dbg.declare(metadata %struct.stack_def** %src_stack, metadata !3234, metadata !DIExpression()), !dbg !3235
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3236
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !3236
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3236
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 2, !dbg !3236
  %2 = load i8*, i8** %aux, align 8, !dbg !3236
  %3 = bitcast i8* %2 to %struct.block_info_def*, !dbg !3236
  %stack_out = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %3, i32 0, i32 1, !dbg !3237
  store %struct.stack_def* %stack_out, %struct.stack_def** %src_stack, align 8, !dbg !3235
  call void @llvm.dbg.declare(metadata %struct.stack_def** %dest_stack, metadata !3238, metadata !DIExpression()), !dbg !3239
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3240
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 1, !dbg !3240
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3240
  %aux1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 2, !dbg !3240
  %6 = load i8*, i8** %aux1, align 8, !dbg !3240
  %7 = bitcast i8* %6 to %struct.block_info_def*, !dbg !3240
  %stack_in = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %7, i32 0, i32 0, !dbg !3241
  store %struct.stack_def* %stack_in, %struct.stack_def** %dest_stack, align 8, !dbg !3239
  call void @llvm.dbg.declare(metadata i32* %reg, metadata !3242, metadata !DIExpression()), !dbg !3243
  %8 = load %struct.stack_def*, %struct.stack_def** %dest_stack, align 8, !dbg !3244
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %8, i32 0, i32 0, !dbg !3245
  store i32 -1, i32* %top, align 8, !dbg !3246
  store i32 0, i32* %reg, align 4, !dbg !3247
  br label %for.cond, !dbg !3249

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load i32, i32* %reg, align 4, !dbg !3250
  %10 = load %struct.stack_def*, %struct.stack_def** %src_stack, align 8, !dbg !3252
  %top2 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %10, i32 0, i32 0, !dbg !3253
  %11 = load i32, i32* %top2, align 8, !dbg !3253
  %cmp = icmp sle i32 %9, %11, !dbg !3254
  br i1 %cmp, label %for.body, label %for.end, !dbg !3255

for.body:                                         ; preds = %for.cond
  %12 = load %struct.stack_def*, %struct.stack_def** %dest_stack, align 8, !dbg !3256
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %12, i32 0, i32 1, !dbg !3256
  %13 = load i64, i64* %reg_set, align 8, !dbg !3256
  %14 = load %struct.stack_def*, %struct.stack_def** %src_stack, align 8, !dbg !3256
  %reg3 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %14, i32 0, i32 2, !dbg !3256
  %15 = load i32, i32* %reg, align 4, !dbg !3256
  %idxprom = sext i32 %15 to i64, !dbg !3256
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %reg3, i64 0, i64 %idxprom, !dbg !3256
  %16 = load i8, i8* %arrayidx, align 1, !dbg !3256
  %conv = zext i8 %16 to i32, !dbg !3256
  %sh_prom = zext i32 %conv to i64, !dbg !3256
  %shl = shl i64 1, %sh_prom, !dbg !3256
  %and = and i64 %13, %shl, !dbg !3256
  %tobool = icmp ne i64 %and, 0, !dbg !3256
  br i1 %tobool, label %if.then, label %if.end, !dbg !3258

if.then:                                          ; preds = %for.body
  %17 = load %struct.stack_def*, %struct.stack_def** %src_stack, align 8, !dbg !3259
  %reg4 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %17, i32 0, i32 2, !dbg !3260
  %18 = load i32, i32* %reg, align 4, !dbg !3261
  %idxprom5 = sext i32 %18 to i64, !dbg !3259
  %arrayidx6 = getelementptr inbounds [8 x i8], [8 x i8]* %reg4, i64 0, i64 %idxprom5, !dbg !3259
  %19 = load i8, i8* %arrayidx6, align 1, !dbg !3259
  %20 = load %struct.stack_def*, %struct.stack_def** %dest_stack, align 8, !dbg !3262
  %reg7 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %20, i32 0, i32 2, !dbg !3263
  %21 = load %struct.stack_def*, %struct.stack_def** %dest_stack, align 8, !dbg !3264
  %top8 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %21, i32 0, i32 0, !dbg !3265
  %22 = load i32, i32* %top8, align 8, !dbg !3266
  %inc = add nsw i32 %22, 1, !dbg !3266
  store i32 %inc, i32* %top8, align 8, !dbg !3266
  %idxprom9 = sext i32 %inc to i64, !dbg !3262
  %arrayidx10 = getelementptr inbounds [8 x i8], [8 x i8]* %reg7, i64 0, i64 %idxprom9, !dbg !3262
  store i8 %19, i8* %arrayidx10, align 1, !dbg !3267
  br label %if.end, !dbg !3262

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !3256

for.inc:                                          ; preds = %if.end
  %23 = load i32, i32* %reg, align 4, !dbg !3268
  %inc11 = add nsw i32 %23, 1, !dbg !3268
  store i32 %inc11, i32* %reg, align 4, !dbg !3268
  br label %for.cond, !dbg !3269, !llvm.loop !3270

for.end:                                          ; preds = %for.cond
  store i32 8, i32* %reg, align 4, !dbg !3272
  br label %for.cond12, !dbg !3274

for.cond12:                                       ; preds = %for.inc34, %for.end
  %24 = load i32, i32* %reg, align 4, !dbg !3275
  %cmp13 = icmp slt i32 %24, 16, !dbg !3277
  br i1 %cmp13, label %for.body15, label %for.end36, !dbg !3278

for.body15:                                       ; preds = %for.cond12
  %25 = load %struct.stack_def*, %struct.stack_def** %dest_stack, align 8, !dbg !3279
  %reg_set16 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %25, i32 0, i32 1, !dbg !3279
  %26 = load i64, i64* %reg_set16, align 8, !dbg !3279
  %27 = load i32, i32* %reg, align 4, !dbg !3279
  %sh_prom17 = zext i32 %27 to i64, !dbg !3279
  %shl18 = shl i64 1, %sh_prom17, !dbg !3279
  %and19 = and i64 %26, %shl18, !dbg !3279
  %tobool20 = icmp ne i64 %and19, 0, !dbg !3279
  br i1 %tobool20, label %land.lhs.true, label %if.end33, !dbg !3281

land.lhs.true:                                    ; preds = %for.body15
  %28 = load %struct.stack_def*, %struct.stack_def** %src_stack, align 8, !dbg !3282
  %reg_set21 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %28, i32 0, i32 1, !dbg !3282
  %29 = load i64, i64* %reg_set21, align 8, !dbg !3282
  %30 = load i32, i32* %reg, align 4, !dbg !3282
  %sh_prom22 = zext i32 %30 to i64, !dbg !3282
  %shl23 = shl i64 1, %sh_prom22, !dbg !3282
  %and24 = and i64 %29, %shl23, !dbg !3282
  %tobool25 = icmp ne i64 %and24, 0, !dbg !3282
  br i1 %tobool25, label %if.end33, label %if.then26, !dbg !3283

if.then26:                                        ; preds = %land.lhs.true
  %31 = load i32, i32* %reg, align 4, !dbg !3284
  %conv27 = trunc i32 %31 to i8, !dbg !3284
  %32 = load %struct.stack_def*, %struct.stack_def** %dest_stack, align 8, !dbg !3285
  %reg28 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %32, i32 0, i32 2, !dbg !3286
  %33 = load %struct.stack_def*, %struct.stack_def** %dest_stack, align 8, !dbg !3287
  %top29 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %33, i32 0, i32 0, !dbg !3288
  %34 = load i32, i32* %top29, align 8, !dbg !3289
  %inc30 = add nsw i32 %34, 1, !dbg !3289
  store i32 %inc30, i32* %top29, align 8, !dbg !3289
  %idxprom31 = sext i32 %inc30 to i64, !dbg !3285
  %arrayidx32 = getelementptr inbounds [8 x i8], [8 x i8]* %reg28, i64 0, i64 %idxprom31, !dbg !3285
  store i8 %conv27, i8* %arrayidx32, align 1, !dbg !3290
  br label %if.end33, !dbg !3285

if.end33:                                         ; preds = %if.then26, %land.lhs.true, %for.body15
  br label %for.inc34, !dbg !3282

for.inc34:                                        ; preds = %if.end33
  %35 = load i32, i32* %reg, align 4, !dbg !3291
  %inc35 = add nsw i32 %35, 1, !dbg !3291
  store i32 %inc35, i32* %reg, align 4, !dbg !3291
  br label %for.cond12, !dbg !3292, !llvm.loop !3293

for.end36:                                        ; preds = %for.cond12
  ret void, !dbg !3295
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define internal void @print_stack(%struct._IO_FILE* %file, %struct.stack_def* %s) #0 !dbg !3296 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %s.addr = alloca %struct.stack_def*, align 8
  %i = alloca i32, align 4
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3350, metadata !DIExpression()), !dbg !3351
  store %struct.stack_def* %s, %struct.stack_def** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %s.addr, metadata !3352, metadata !DIExpression()), !dbg !3353
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3354
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !3354
  br i1 %tobool, label %if.end, label %if.then, !dbg !3356

if.then:                                          ; preds = %entry
  br label %if.end13, !dbg !3357

if.end:                                           ; preds = %entry
  %1 = load %struct.stack_def*, %struct.stack_def** %s.addr, align 8, !dbg !3358
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %1, i32 0, i32 0, !dbg !3360
  %2 = load i32, i32* %top, align 8, !dbg !3360
  %cmp = icmp eq i32 %2, -2, !dbg !3361
  br i1 %cmp, label %if.then1, label %if.else, !dbg !3362

if.then1:                                         ; preds = %if.end
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3363
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0)), !dbg !3364
  br label %if.end13, !dbg !3364

if.else:                                          ; preds = %if.end
  %4 = load %struct.stack_def*, %struct.stack_def** %s.addr, align 8, !dbg !3365
  %top2 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %4, i32 0, i32 0, !dbg !3367
  %5 = load i32, i32* %top2, align 8, !dbg !3367
  %cmp3 = icmp eq i32 %5, -1, !dbg !3368
  br i1 %cmp3, label %if.then4, label %if.else6, !dbg !3369

if.then4:                                         ; preds = %if.else
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3370
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0)), !dbg !3371
  br label %if.end12, !dbg !3371

if.else6:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3372, metadata !DIExpression()), !dbg !3374
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3375
  %call7 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0), %struct._IO_FILE* %7), !dbg !3376
  store i32 0, i32* %i, align 4, !dbg !3377
  br label %for.cond, !dbg !3379

for.cond:                                         ; preds = %for.inc, %if.else6
  %8 = load i32, i32* %i, align 4, !dbg !3380
  %9 = load %struct.stack_def*, %struct.stack_def** %s.addr, align 8, !dbg !3382
  %top8 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %9, i32 0, i32 0, !dbg !3383
  %10 = load i32, i32* %top8, align 8, !dbg !3383
  %cmp9 = icmp sle i32 %8, %10, !dbg !3384
  br i1 %cmp9, label %for.body, label %for.end, !dbg !3385

for.body:                                         ; preds = %for.cond
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3386
  %12 = load %struct.stack_def*, %struct.stack_def** %s.addr, align 8, !dbg !3387
  %reg = getelementptr inbounds %struct.stack_def, %struct.stack_def* %12, i32 0, i32 2, !dbg !3388
  %13 = load i32, i32* %i, align 4, !dbg !3389
  %idxprom = sext i32 %13 to i64, !dbg !3387
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %reg, i64 0, i64 %idxprom, !dbg !3387
  %14 = load i8, i8* %arrayidx, align 1, !dbg !3387
  %conv = zext i8 %14 to i32, !dbg !3387
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0), i32 %conv), !dbg !3390
  br label %for.inc, !dbg !3390

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4, !dbg !3391
  %inc = add nsw i32 %15, 1, !dbg !3391
  store i32 %inc, i32* %i, align 4, !dbg !3391
  br label %for.cond, !dbg !3392, !llvm.loop !3393

for.end:                                          ; preds = %for.cond
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3395
  %call11 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0), %struct._IO_FILE* %16), !dbg !3396
  br label %if.end12

if.end12:                                         ; preds = %for.end, %if.then4
  br label %if.end13

if.end13:                                         ; preds = %if.then, %if.end12, %if.then1
  ret void, !dbg !3397
}

declare dso_local i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @subst_stack_regs_in_debug_insn(%struct.rtx_def** %loc, i8* %data) #0 !dbg !3398 {
entry:
  %retval = alloca i32, align 4
  %loc.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  %tloc = alloca %struct.rtx_def**, align 8
  %regstack = alloca %struct.stack_def*, align 8
  %hard_regno = alloca i32, align 4
  store %struct.rtx_def** %loc, %struct.rtx_def*** %loc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %loc.addr, metadata !3401, metadata !DIExpression()), !dbg !3402
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3403, metadata !DIExpression()), !dbg !3404
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %tloc, metadata !3405, metadata !DIExpression()), !dbg !3406
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8, !dbg !3407
  %call = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %0), !dbg !3408
  store %struct.rtx_def** %call, %struct.rtx_def*** %tloc, align 8, !dbg !3406
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack, metadata !3409, metadata !DIExpression()), !dbg !3410
  %1 = load i8*, i8** %data.addr, align 8, !dbg !3411
  %2 = bitcast i8* %1 to %struct.stack_def*, !dbg !3412
  store %struct.stack_def* %2, %struct.stack_def** %regstack, align 8, !dbg !3410
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !3413, metadata !DIExpression()), !dbg !3414
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %tloc, align 8, !dbg !3415
  %4 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8, !dbg !3415
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !3415
  %bf.load = load i32, i32* %5, align 8, !dbg !3415
  %bf.clear = and i32 %bf.load, 65535, !dbg !3415
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !3415
  br i1 %cmp, label %land.lhs.true, label %if.then, !dbg !3415

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %tloc, align 8, !dbg !3415
  %7 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8, !dbg !3415
  %call1 = call i32 @rhs_regno(%struct.rtx_def* %7), !dbg !3415
  %conv = zext i32 %call1 to i64, !dbg !3415
  %sub = sub i64 %conv, 8, !dbg !3415
  %cmp2 = icmp ule i64 %sub, 7, !dbg !3415
  br i1 %cmp2, label %if.end, label %if.then, !dbg !3417

if.then:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !3418
  br label %return, !dbg !3418

if.end:                                           ; preds = %land.lhs.true
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %tloc, align 8, !dbg !3419
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8, !dbg !3421
  %cmp4 = icmp ne %struct.rtx_def** %8, %9, !dbg !3422
  br i1 %cmp4, label %if.then6, label %if.end7, !dbg !3423

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !3424
  br label %return, !dbg !3424

if.end7:                                          ; preds = %if.end
  %10 = load %struct.stack_def*, %struct.stack_def** %regstack, align 8, !dbg !3425
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8, !dbg !3426
  %12 = load %struct.rtx_def*, %struct.rtx_def** %11, align 8, !dbg !3427
  %call8 = call i32 @get_hard_regnum(%struct.stack_def* %10, %struct.rtx_def* %12), !dbg !3428
  store i32 %call8, i32* %hard_regno, align 4, !dbg !3429
  %13 = load i32, i32* %hard_regno, align 4, !dbg !3430
  %cmp9 = icmp sge i32 %13, 8, !dbg !3430
  br i1 %cmp9, label %cond.false, label %cond.true, !dbg !3430

cond.true:                                        ; preds = %if.end7
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1337, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3430
  br label %cond.end, !dbg !3430

cond.false:                                       ; preds = %if.end7
  br label %cond.end, !dbg !3430

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3430
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %loc.addr, align 8, !dbg !3431
  %15 = load i32, i32* %hard_regno, align 4, !dbg !3432
  call void @replace_reg(%struct.rtx_def** %14, i32 %15), !dbg !3433
  store i32 -1, i32* %retval, align 4, !dbg !3434
  br label %return, !dbg !3434

return:                                           ; preds = %cond.end, %if.then6, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !3435
  ret i32 %16, !dbg !3435
}

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @subst_stack_regs(%struct.rtx_def* %insn, %struct.stack_def* %regstack) #0 !dbg !3436 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regstack.addr = alloca %struct.stack_def*, align 8
  %note_link = alloca %struct.rtx_def**, align 8
  %note = alloca %struct.rtx_def*, align 8
  %control_flow_insn_deleted = alloca i8, align 1
  %i = alloca i32, align 4
  %top = alloca i32, align 4
  %n_operands = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3439, metadata !DIExpression()), !dbg !3440
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !3441, metadata !DIExpression()), !dbg !3442
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %note_link, metadata !3443, metadata !DIExpression()), !dbg !3444
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !3445, metadata !DIExpression()), !dbg !3446
  call void @llvm.dbg.declare(metadata i8* %control_flow_insn_deleted, metadata !3447, metadata !DIExpression()), !dbg !3448
  store i8 0, i8* %control_flow_insn_deleted, align 1, !dbg !3448
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3449, metadata !DIExpression()), !dbg !3450
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3451
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3451
  %bf.load = load i32, i32* %1, align 8, !dbg !3451
  %bf.clear = and i32 %bf.load, 65535, !dbg !3451
  %cmp = icmp eq i32 %bf.clear, 10, !dbg !3451
  br i1 %cmp, label %if.then, label %if.end8, !dbg !3453

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %top, metadata !3454, metadata !DIExpression()), !dbg !3456
  %2 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3457
  %top1 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %2, i32 0, i32 0, !dbg !3458
  %3 = load i32, i32* %top1, align 8, !dbg !3458
  store i32 %3, i32* %top, align 4, !dbg !3456
  %4 = load i32, i32* %top, align 4, !dbg !3459
  %cmp2 = icmp sge i32 %4, 0, !dbg !3461
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !3462

if.then3:                                         ; preds = %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3463
  %6 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3465
  call void @straighten_stack(%struct.rtx_def* %5, %struct.stack_def* %6), !dbg !3466
  br label %while.cond, !dbg !3467

while.cond:                                       ; preds = %while.body, %if.then3
  %7 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3468
  %top4 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %7, i32 0, i32 0, !dbg !3469
  %8 = load i32, i32* %top4, align 8, !dbg !3469
  %cmp5 = icmp sge i32 %8, 0, !dbg !3470
  br i1 %cmp5, label %while.body, label %while.end, !dbg !3467

while.body:                                       ; preds = %while.cond
  %9 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3471
  %top6 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %9, i32 0, i32 0, !dbg !3471
  %10 = load i32, i32* %top6, align 8, !dbg !3471
  %add = add nsw i32 8, %10, !dbg !3471
  %sh_prom = zext i32 %add to i64, !dbg !3471
  %shl = shl i64 1, %sh_prom, !dbg !3471
  %neg = xor i64 %shl, -1, !dbg !3471
  %11 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3471
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %11, i32 0, i32 1, !dbg !3471
  %12 = load i64, i64* %reg_set, align 8, !dbg !3471
  %and = and i64 %12, %neg, !dbg !3471
  store i64 %and, i64* %reg_set, align 8, !dbg !3471
  %13 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3473
  %top7 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %13, i32 0, i32 0, !dbg !3474
  %14 = load i32, i32* %top7, align 8, !dbg !3475
  %dec = add nsw i32 %14, -1, !dbg !3475
  store i32 %dec, i32* %top7, align 8, !dbg !3475
  br label %while.cond, !dbg !3467, !llvm.loop !3476

while.end:                                        ; preds = %while.cond
  br label %if.end, !dbg !3478

if.end:                                           ; preds = %while.end, %if.then
  br label %if.end8, !dbg !3479

if.end8:                                          ; preds = %if.end, %entry
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3480
  %call = call i32 @stack_regs_mentioned(%struct.rtx_def* %15), !dbg !3482
  %tobool = icmp ne i32 %call, 0, !dbg !3482
  br i1 %tobool, label %if.then9, label %if.end106, !dbg !3483

if.then9:                                         ; preds = %if.end8
  call void @llvm.dbg.declare(metadata i32* %n_operands, metadata !3484, metadata !DIExpression()), !dbg !3486
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3487
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !3487
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3487
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !3487
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3487
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3487
  %call10 = call i32 @asm_noperands(%struct.rtx_def* %17), !dbg !3488
  store i32 %call10, i32* %n_operands, align 4, !dbg !3486
  %18 = load i32, i32* %n_operands, align 4, !dbg !3489
  %cmp11 = icmp sge i32 %18, 0, !dbg !3491
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !3492

if.then12:                                        ; preds = %if.then9
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3493
  %20 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3495
  call void @subst_asm_stack_regs(%struct.rtx_def* %19, %struct.stack_def* %20), !dbg !3496
  %21 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !3497
  store i8 %21, i8* %retval, align 1, !dbg !3498
  br label %return, !dbg !3498

if.end13:                                         ; preds = %if.then9
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3499
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !3499
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !3499
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 5, !dbg !3499
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !3499
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !3499
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !3499
  %bf.load18 = load i32, i32* %24, align 8, !dbg !3499
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !3499
  %cmp20 = icmp eq i32 %bf.clear19, 15, !dbg !3501
  br i1 %cmp20, label %if.then21, label %if.else, !dbg !3502

if.then21:                                        ; preds = %if.end13
  store i32 0, i32* %i, align 4, !dbg !3503
  br label %for.cond, !dbg !3505

for.cond:                                         ; preds = %for.inc, %if.then21
  %25 = load i32, i32* %i, align 4, !dbg !3506
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3508
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !3508
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !3508
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 5, !dbg !3508
  %rt_rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !3508
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx25, align 8, !dbg !3508
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !3508
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !3508
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 0, !dbg !3508
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtvec_def**, !dbg !3508
  %28 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !3508
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %28, i32 0, i32 0, !dbg !3508
  %29 = load i32, i32* %num_elem, align 8, !dbg !3508
  %cmp29 = icmp slt i32 %25, %29, !dbg !3509
  br i1 %cmp29, label %for.body, label %for.end, !dbg !3510

for.body:                                         ; preds = %for.cond
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3511
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !3511
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !3511
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 5, !dbg !3511
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !3511
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx33, align 8, !dbg !3511
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !3511
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !3511
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 0, !dbg !3511
  %rt_rtvec37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtvec_def**, !dbg !3511
  %32 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec37, align 8, !dbg !3511
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %32, i32 0, i32 1, !dbg !3511
  %33 = load i32, i32* %i, align 4, !dbg !3511
  %idxprom = sext i32 %33 to i64, !dbg !3511
  %arrayidx38 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom, !dbg !3511
  %34 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8, !dbg !3511
  %call39 = call i32 @stack_regs_mentioned_p(%struct.rtx_def* %34), !dbg !3514
  %tobool40 = icmp ne i32 %call39, 0, !dbg !3514
  br i1 %tobool40, label %if.then41, label %if.end95, !dbg !3515

if.then41:                                        ; preds = %for.body
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3516
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !3516
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !3516
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 5, !dbg !3516
  %rt_rtx45 = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !3516
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx45, align 8, !dbg !3516
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !3516
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !3516
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 0, !dbg !3516
  %rt_rtvec49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtvec_def**, !dbg !3516
  %37 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec49, align 8, !dbg !3516
  %elem50 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %37, i32 0, i32 1, !dbg !3516
  %38 = load i32, i32* %i, align 4, !dbg !3516
  %idxprom51 = sext i32 %38 to i64, !dbg !3516
  %arrayidx52 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem50, i64 0, i64 %idxprom51, !dbg !3516
  %39 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx52, align 8, !dbg !3516
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !3516
  %bf.load53 = load i32, i32* %40, align 8, !dbg !3516
  %bf.clear54 = and i32 %bf.load53, 65535, !dbg !3516
  %cmp55 = icmp eq i32 %bf.clear54, 25, !dbg !3519
  br i1 %cmp55, label %if.then56, label %if.end80, !dbg !3520

if.then56:                                        ; preds = %if.then41
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3521
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !3521
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !3521
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 5, !dbg !3521
  %rt_rtx60 = bitcast %union.rtunion_def* %arrayidx59 to %struct.rtx_def**, !dbg !3521
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx60, align 8, !dbg !3521
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !3521
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !3521
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 0, !dbg !3521
  %rt_rtvec64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtvec_def**, !dbg !3521
  %43 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec64, align 8, !dbg !3521
  %elem65 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %43, i32 0, i32 1, !dbg !3521
  %44 = load i32, i32* %i, align 4, !dbg !3521
  %idxprom66 = sext i32 %44 to i64, !dbg !3521
  %arrayidx67 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem65, i64 0, i64 %idxprom66, !dbg !3521
  %45 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx67, align 8, !dbg !3521
  %call68 = call %struct.rtx_def* @shallow_copy_rtx_stat(%struct.rtx_def* %45), !dbg !3521
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3522
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !3522
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !3522
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 5, !dbg !3522
  %rt_rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**, !dbg !3522
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx72, align 8, !dbg !3522
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !3522
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !3522
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 0, !dbg !3522
  %rt_rtvec76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtvec_def**, !dbg !3522
  %48 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec76, align 8, !dbg !3522
  %elem77 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %48, i32 0, i32 1, !dbg !3522
  %49 = load i32, i32* %i, align 4, !dbg !3522
  %idxprom78 = sext i32 %49 to i64, !dbg !3522
  %arrayidx79 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem77, i64 0, i64 %idxprom78, !dbg !3522
  store %struct.rtx_def* %call68, %struct.rtx_def** %arrayidx79, align 8, !dbg !3523
  br label %if.end80, !dbg !3522

if.end80:                                         ; preds = %if.then56, %if.then41
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3524
  %51 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3525
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3526
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !3526
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !3526
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 5, !dbg !3526
  %rt_rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**, !dbg !3526
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx84, align 8, !dbg !3526
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !3526
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !3526
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 0, !dbg !3526
  %rt_rtvec88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtvec_def**, !dbg !3526
  %54 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec88, align 8, !dbg !3526
  %elem89 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %54, i32 0, i32 1, !dbg !3526
  %55 = load i32, i32* %i, align 4, !dbg !3526
  %idxprom90 = sext i32 %55 to i64, !dbg !3526
  %arrayidx91 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem89, i64 0, i64 %idxprom90, !dbg !3526
  %56 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx91, align 8, !dbg !3526
  %call92 = call zeroext i8 @subst_stack_regs_pat(%struct.rtx_def* %50, %struct.stack_def* %51, %struct.rtx_def* %56), !dbg !3527
  %conv = zext i8 %call92 to i32, !dbg !3527
  %57 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !3528
  %conv93 = zext i8 %57 to i32, !dbg !3528
  %or = or i32 %conv93, %conv, !dbg !3528
  %conv94 = trunc i32 %or to i8, !dbg !3528
  store i8 %conv94, i8* %control_flow_insn_deleted, align 1, !dbg !3528
  br label %if.end95, !dbg !3529

if.end95:                                         ; preds = %if.end80, %for.body
  br label %for.inc, !dbg !3530

for.inc:                                          ; preds = %if.end95
  %58 = load i32, i32* %i, align 4, !dbg !3531
  %inc = add nsw i32 %58, 1, !dbg !3531
  store i32 %inc, i32* %i, align 4, !dbg !3531
  br label %for.cond, !dbg !3532, !llvm.loop !3533

for.end:                                          ; preds = %for.cond
  br label %if.end105, !dbg !3534

if.else:                                          ; preds = %if.end13
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3535
  %60 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3536
  %61 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3537
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !3537
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !3537
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 5, !dbg !3537
  %rt_rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**, !dbg !3537
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx99, align 8, !dbg !3537
  %call100 = call zeroext i8 @subst_stack_regs_pat(%struct.rtx_def* %59, %struct.stack_def* %60, %struct.rtx_def* %62), !dbg !3538
  %conv101 = zext i8 %call100 to i32, !dbg !3538
  %63 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !3539
  %conv102 = zext i8 %63 to i32, !dbg !3539
  %or103 = or i32 %conv102, %conv101, !dbg !3539
  %conv104 = trunc i32 %or103 to i8, !dbg !3539
  store i8 %conv104, i8* %control_flow_insn_deleted, align 1, !dbg !3539
  br label %if.end105

if.end105:                                        ; preds = %if.else, %for.end
  br label %if.end106, !dbg !3540

if.end106:                                        ; preds = %if.end105, %if.end8
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3541
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !3541
  %bf.load107 = load i32, i32* %65, align 8, !dbg !3541
  %bf.clear108 = and i32 %bf.load107, 65535, !dbg !3541
  %cmp109 = icmp eq i32 %bf.clear108, 13, !dbg !3541
  br i1 %cmp109, label %if.then114, label %lor.lhs.false, !dbg !3543

lor.lhs.false:                                    ; preds = %if.end106
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3544
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !3544
  %bf.load111 = load i32, i32* %67, align 8, !dbg !3544
  %bf.lshr = lshr i32 %bf.load111, 27, !dbg !3544
  %bf.clear112 = and i32 %bf.lshr, 1, !dbg !3544
  %tobool113 = icmp ne i32 %bf.clear112, 0, !dbg !3544
  br i1 %tobool113, label %if.then114, label %if.end115, !dbg !3545

if.then114:                                       ; preds = %lor.lhs.false, %if.end106
  %68 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !3546
  store i8 %68, i8* %retval, align 1, !dbg !3547
  br label %return, !dbg !3547

if.end115:                                        ; preds = %lor.lhs.false
  %69 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3548
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !3548
  %bf.load116 = load i32, i32* %70, align 8, !dbg !3548
  %bf.clear117 = and i32 %bf.load116, 65535, !dbg !3548
  %cmp118 = icmp eq i32 %bf.clear117, 10, !dbg !3548
  br i1 %cmp118, label %land.lhs.true, label %if.end125, !dbg !3550

land.lhs.true:                                    ; preds = %if.end115
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3551
  %call120 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %71, i32 27, %struct.rtx_def* null), !dbg !3552
  %tobool121 = icmp ne %struct.rtx_def* %call120, null, !dbg !3552
  br i1 %tobool121, label %if.then122, label %if.end125, !dbg !3553

if.then122:                                       ; preds = %land.lhs.true
  %72 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3554
  %top123 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %72, i32 0, i32 0, !dbg !3556
  store i32 -1, i32* %top123, align 8, !dbg !3557
  %73 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3558
  %reg_set124 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %73, i32 0, i32 1, !dbg !3558
  store i64 0, i64* %reg_set124, align 8, !dbg !3558
  %74 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !3559
  store i8 %74, i8* %retval, align 1, !dbg !3560
  br label %return, !dbg !3560

if.end125:                                        ; preds = %land.lhs.true, %if.end115
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3561
  %u126 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !3561
  %fld127 = bitcast %union.u* %u126 to [1 x %union.rtunion_def]*, !dbg !3561
  %arrayidx128 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld127, i64 0, i64 7, !dbg !3561
  %rt_rtx129 = bitcast %union.rtunion_def* %arrayidx128 to %struct.rtx_def**, !dbg !3561
  store %struct.rtx_def** %rt_rtx129, %struct.rtx_def*** %note_link, align 8, !dbg !3562
  %76 = load %struct.rtx_def**, %struct.rtx_def*** %note_link, align 8, !dbg !3563
  %77 = load %struct.rtx_def*, %struct.rtx_def** %76, align 8, !dbg !3565
  store %struct.rtx_def* %77, %struct.rtx_def** %note, align 8, !dbg !3566
  br label %for.cond130, !dbg !3567

for.cond130:                                      ; preds = %for.inc172, %if.end125
  %78 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3568
  %tobool131 = icmp ne %struct.rtx_def* %78, null, !dbg !3570
  br i1 %tobool131, label %for.body132, label %for.end177, !dbg !3570

for.body132:                                      ; preds = %for.cond130
  %79 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3571
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !3571
  %bf.load133 = load i32, i32* %80, align 8, !dbg !3571
  %bf.lshr134 = lshr i32 %bf.load133, 16, !dbg !3571
  %bf.clear135 = and i32 %bf.lshr134, 255, !dbg !3571
  %cmp136 = icmp eq i32 %bf.clear135, 6, !dbg !3573
  br i1 %cmp136, label %land.lhs.true138, label %if.else166, !dbg !3574

land.lhs.true138:                                 ; preds = %for.body132
  %81 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3575
  %u139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !3575
  %fld140 = bitcast %union.u* %u139 to [1 x %union.rtunion_def]*, !dbg !3575
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i64 0, i64 0, !dbg !3575
  %rt_rtx142 = bitcast %union.rtunion_def* %arrayidx141 to %struct.rtx_def**, !dbg !3575
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx142, align 8, !dbg !3575
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !3575
  %bf.load143 = load i32, i32* %83, align 8, !dbg !3575
  %bf.clear144 = and i32 %bf.load143, 65535, !dbg !3575
  %cmp145 = icmp eq i32 %bf.clear144, 37, !dbg !3575
  br i1 %cmp145, label %land.lhs.true147, label %if.else166, !dbg !3575

land.lhs.true147:                                 ; preds = %land.lhs.true138
  %84 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3575
  %u148 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !3575
  %fld149 = bitcast %union.u* %u148 to [1 x %union.rtunion_def]*, !dbg !3575
  %arrayidx150 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld149, i64 0, i64 0, !dbg !3575
  %rt_rtx151 = bitcast %union.rtunion_def* %arrayidx150 to %struct.rtx_def**, !dbg !3575
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx151, align 8, !dbg !3575
  %call152 = call i32 @rhs_regno(%struct.rtx_def* %85), !dbg !3575
  %conv153 = zext i32 %call152 to i64, !dbg !3575
  %sub = sub i64 %conv153, 8, !dbg !3575
  %cmp154 = icmp ule i64 %sub, 7, !dbg !3575
  br i1 %cmp154, label %if.then156, label %if.else166, !dbg !3576

if.then156:                                       ; preds = %land.lhs.true147
  %86 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3577
  %u157 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1, !dbg !3577
  %fld158 = bitcast %union.u* %u157 to [1 x %union.rtunion_def]*, !dbg !3577
  %arrayidx159 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld158, i64 0, i64 1, !dbg !3577
  %rt_rtx160 = bitcast %union.rtunion_def* %arrayidx159 to %struct.rtx_def**, !dbg !3577
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx160, align 8, !dbg !3577
  %88 = load %struct.rtx_def**, %struct.rtx_def*** %note_link, align 8, !dbg !3579
  store %struct.rtx_def* %87, %struct.rtx_def** %88, align 8, !dbg !3580
  %89 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3581
  %90 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3582
  %91 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3583
  %u161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !3583
  %fld162 = bitcast %union.u* %u161 to [1 x %union.rtunion_def]*, !dbg !3583
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i64 0, i64 0, !dbg !3583
  %rt_rtx164 = bitcast %union.rtunion_def* %arrayidx163 to %struct.rtx_def**, !dbg !3583
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx164, align 8, !dbg !3583
  %call165 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %89, %struct.stack_def* %90, %struct.rtx_def* %92, i32 0), !dbg !3584
  store %struct.rtx_def* %call165, %struct.rtx_def** %insn.addr, align 8, !dbg !3585
  br label %if.end171, !dbg !3586

if.else166:                                       ; preds = %land.lhs.true147, %land.lhs.true138, %for.body132
  %93 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3587
  %u167 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1, !dbg !3587
  %fld168 = bitcast %union.u* %u167 to [1 x %union.rtunion_def]*, !dbg !3587
  %arrayidx169 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld168, i64 0, i64 1, !dbg !3587
  %rt_rtx170 = bitcast %union.rtunion_def* %arrayidx169 to %struct.rtx_def**, !dbg !3587
  store %struct.rtx_def** %rt_rtx170, %struct.rtx_def*** %note_link, align 8, !dbg !3588
  br label %if.end171

if.end171:                                        ; preds = %if.else166, %if.then156
  br label %for.inc172, !dbg !3575

for.inc172:                                       ; preds = %if.end171
  %94 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3589
  %u173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !3589
  %fld174 = bitcast %union.u* %u173 to [1 x %union.rtunion_def]*, !dbg !3589
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i64 0, i64 1, !dbg !3589
  %rt_rtx176 = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**, !dbg !3589
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx176, align 8, !dbg !3589
  store %struct.rtx_def* %95, %struct.rtx_def** %note, align 8, !dbg !3590
  br label %for.cond130, !dbg !3591, !llvm.loop !3592

for.end177:                                       ; preds = %for.cond130
  %96 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !3594
  store i8 %96, i8* %retval, align 1, !dbg !3595
  br label %return, !dbg !3595

return:                                           ; preds = %for.end177, %if.then122, %if.then114, %if.then12
  %97 = load i8, i8* %retval, align 1, !dbg !3596
  ret i8 %97, !dbg !3596
}

declare dso_local %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #3

declare dso_local zeroext i8 @purge_dead_edges(%struct.basic_block_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @hard_reg_set_equal_p(i64 %x, i64 %y) #0 !dbg !3597 {
entry:
  %x.addr = alloca i64, align 8
  %y.addr = alloca i64, align 8
  store i64 %x, i64* %x.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr, metadata !3601, metadata !DIExpression()), !dbg !3602
  store i64 %y, i64* %y.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %y.addr, metadata !3603, metadata !DIExpression()), !dbg !3604
  %0 = load i64, i64* %x.addr, align 8, !dbg !3605
  %1 = load i64, i64* %y.addr, align 8, !dbg !3606
  %cmp = icmp eq i64 %0, %1, !dbg !3607
  %conv = zext i1 %cmp to i32, !dbg !3607
  %conv1 = trunc i32 %conv to i8, !dbg !3605
  ret i8 %conv1, !dbg !3608
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @get_true_reg(%struct.rtx_def** %pat) #0 !dbg !3609 {
entry:
  %retval = alloca %struct.rtx_def**, align 8
  %pat.addr = alloca %struct.rtx_def**, align 8
  %subreg = alloca %struct.rtx_def*, align 8
  %regno_off = alloca i32, align 4
  store %struct.rtx_def** %pat, %struct.rtx_def*** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %pat.addr, metadata !3612, metadata !DIExpression()), !dbg !3613
  br label %for.cond, !dbg !3614

for.cond:                                         ; preds = %sw.epilog, %entry
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3615
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !3615
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !3615
  %bf.load = load i32, i32* %2, align 8, !dbg !3615
  %bf.clear = and i32 %bf.load, 65535, !dbg !3615
  switch i32 %bf.clear, label %sw.default [
    i32 39, label %sw.bb
    i32 103, label %sw.bb27
    i32 104, label %sw.bb27
    i32 101, label %sw.bb27
    i32 18, label %sw.bb32
    i32 102, label %sw.bb44
  ], !dbg !3618

sw.bb:                                            ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %subreg, metadata !3619, metadata !DIExpression()), !dbg !3622
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3623
  %4 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8, !dbg !3623
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !3623
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3623
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3623
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3623
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3623
  store %struct.rtx_def* %5, %struct.rtx_def** %subreg, align 8, !dbg !3623
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !3623
  %bf.load1 = load i32, i32* %6, align 8, !dbg !3623
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !3623
  %cmp = icmp eq i32 %bf.clear2, 37, !dbg !3623
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3623

land.lhs.true:                                    ; preds = %sw.bb
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3623
  %8 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8, !dbg !3623
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !3623
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !3623
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 0, !dbg !3623
  %rt_rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !3623
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx6, align 8, !dbg !3623
  store %struct.rtx_def* %9, %struct.rtx_def** %subreg, align 8, !dbg !3623
  %call = call i32 @rhs_regno(%struct.rtx_def* %9), !dbg !3623
  %conv = zext i32 %call to i64, !dbg !3623
  %sub = sub i64 %conv, 8, !dbg !3623
  %cmp7 = icmp ule i64 %sub, 7, !dbg !3623
  br i1 %cmp7, label %if.then, label %if.end, !dbg !3625

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %regno_off, metadata !3626, metadata !DIExpression()), !dbg !3628
  %10 = load %struct.rtx_def*, %struct.rtx_def** %subreg, align 8, !dbg !3629
  %call9 = call i32 @rhs_regno(%struct.rtx_def* %10), !dbg !3629
  %11 = load %struct.rtx_def*, %struct.rtx_def** %subreg, align 8, !dbg !3630
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !3630
  %bf.load10 = load i32, i32* %12, align 8, !dbg !3630
  %bf.lshr = lshr i32 %bf.load10, 16, !dbg !3630
  %bf.clear11 = and i32 %bf.lshr, 255, !dbg !3630
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3631
  %14 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8, !dbg !3631
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !3631
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !3631
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 1, !dbg !3631
  %rt_uint = bitcast %union.rtunion_def* %arrayidx14 to i32*, !dbg !3631
  %15 = load i32, i32* %rt_uint, align 8, !dbg !3631
  %16 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3632
  %17 = load %struct.rtx_def*, %struct.rtx_def** %16, align 8, !dbg !3632
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !3632
  %bf.load15 = load i32, i32* %18, align 8, !dbg !3632
  %bf.lshr16 = lshr i32 %bf.load15, 16, !dbg !3632
  %bf.clear17 = and i32 %bf.lshr16, 255, !dbg !3632
  %call18 = call i32 @subreg_regno_offset(i32 %call9, i32 %bf.clear11, i32 %15, i32 %bf.clear17), !dbg !3633
  store i32 %call18, i32* %regno_off, align 4, !dbg !3628
  %19 = load %struct.rtx_def*, %struct.rtx_def** %subreg, align 8, !dbg !3634
  %call19 = call i32 @rhs_regno(%struct.rtx_def* %19), !dbg !3634
  %20 = load i32, i32* %regno_off, align 4, !dbg !3634
  %add = add i32 %call19, %20, !dbg !3634
  %sub20 = sub i32 %add, 8, !dbg !3634
  %idxprom = zext i32 %sub20 to i64, !dbg !3634
  %arrayidx21 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom, !dbg !3634
  %21 = load %struct.rtx_def*, %struct.rtx_def** %subreg, align 8, !dbg !3634
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !3634
  %bf.load22 = load i32, i32* %22, align 8, !dbg !3634
  %bf.lshr23 = lshr i32 %bf.load22, 16, !dbg !3634
  %bf.clear24 = and i32 %bf.lshr23, 255, !dbg !3634
  %idxprom25 = sext i32 %bf.clear24 to i64, !dbg !3634
  %arrayidx26 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx21, i64 0, i64 %idxprom25, !dbg !3634
  %23 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx26, align 8, !dbg !3634
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3635
  store %struct.rtx_def* %23, %struct.rtx_def** %24, align 8, !dbg !3636
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3637
  store %struct.rtx_def** %25, %struct.rtx_def*** %retval, align 8, !dbg !3638
  br label %return, !dbg !3638

if.end:                                           ; preds = %land.lhs.true, %sw.bb
  br label %sw.bb27, !dbg !3639

sw.bb27:                                          ; preds = %for.cond, %for.cond, %for.cond, %if.end
  %26 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3640
  %27 = load %struct.rtx_def*, %struct.rtx_def** %26, align 8, !dbg !3640
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !3640
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !3640
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 0, !dbg !3640
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !3640
  store %struct.rtx_def** %rt_rtx31, %struct.rtx_def*** %pat.addr, align 8, !dbg !3641
  br label %sw.epilog, !dbg !3642

sw.bb32:                                          ; preds = %for.cond
  %28 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3643
  %29 = load %struct.rtx_def*, %struct.rtx_def** %28, align 8, !dbg !3643
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !3643
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !3643
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 1, !dbg !3643
  %rt_int = bitcast %union.rtunion_def* %arrayidx35 to i32*, !dbg !3643
  %30 = load i32, i32* %rt_int, align 8, !dbg !3643
  %cmp36 = icmp eq i32 %30, 39, !dbg !3645
  br i1 %cmp36, label %if.then38, label %if.end43, !dbg !3646

if.then38:                                        ; preds = %sw.bb32
  %31 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3647
  %32 = load %struct.rtx_def*, %struct.rtx_def** %31, align 8, !dbg !3647
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !3647
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !3647
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 0, !dbg !3647
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtvec_def**, !dbg !3647
  %33 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !3647
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %33, i32 0, i32 1, !dbg !3647
  %arrayidx42 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !3647
  store %struct.rtx_def** %arrayidx42, %struct.rtx_def*** %pat.addr, align 8, !dbg !3648
  br label %if.end43, !dbg !3649

if.end43:                                         ; preds = %if.then38, %sw.bb32
  %34 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3650
  store %struct.rtx_def** %34, %struct.rtx_def*** %retval, align 8, !dbg !3651
  br label %return, !dbg !3651

sw.bb44:                                          ; preds = %for.cond
  %35 = load i32, i32* @flag_unsafe_math_optimizations, align 4, !dbg !3652
  %tobool = icmp ne i32 %35, 0, !dbg !3652
  br i1 %tobool, label %if.end46, label %if.then45, !dbg !3654

if.then45:                                        ; preds = %sw.bb44
  %36 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3655
  store %struct.rtx_def** %36, %struct.rtx_def*** %retval, align 8, !dbg !3656
  br label %return, !dbg !3656

if.end46:                                         ; preds = %sw.bb44
  %37 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3657
  %38 = load %struct.rtx_def*, %struct.rtx_def** %37, align 8, !dbg !3657
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !3657
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !3657
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 0, !dbg !3657
  %rt_rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**, !dbg !3657
  store %struct.rtx_def** %rt_rtx50, %struct.rtx_def*** %pat.addr, align 8, !dbg !3658
  br label %sw.epilog, !dbg !3659

sw.default:                                       ; preds = %for.cond
  %39 = load %struct.rtx_def**, %struct.rtx_def*** %pat.addr, align 8, !dbg !3660
  store %struct.rtx_def** %39, %struct.rtx_def*** %retval, align 8, !dbg !3661
  br label %return, !dbg !3661

sw.epilog:                                        ; preds = %if.end46, %sw.bb27
  br label %for.cond, !dbg !3662, !llvm.loop !3663

return:                                           ; preds = %sw.default, %if.then45, %if.end43, %if.then
  %40 = load %struct.rtx_def**, %struct.rtx_def*** %retval, align 8, !dbg !3666
  ret %struct.rtx_def** %40, !dbg !3666
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_hard_regnum(%struct.stack_def* %regstack, %struct.rtx_def* %reg) #0 !dbg !3667 {
entry:
  %regstack.addr = alloca %struct.stack_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !3670, metadata !DIExpression()), !dbg !3671
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !3672, metadata !DIExpression()), !dbg !3673
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3674, metadata !DIExpression()), !dbg !3675
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3676
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3676
  %bf.load = load i32, i32* %1, align 8, !dbg !3676
  %bf.clear = and i32 %bf.load, 65535, !dbg !3676
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !3676
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !3676

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3676
  %call = call i32 @rhs_regno(%struct.rtx_def* %2), !dbg !3676
  %conv = zext i32 %call to i64, !dbg !3676
  %sub = sub i64 %conv, 8, !dbg !3676
  %cmp1 = icmp ule i64 %sub, 7, !dbg !3676
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !3676

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 731, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3676
  br label %cond.end, !dbg !3676

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3676

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3676
  %3 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3677
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %3, i32 0, i32 0, !dbg !3679
  %4 = load i32, i32* %top, align 8, !dbg !3679
  store i32 %4, i32* %i, align 4, !dbg !3680
  br label %for.cond, !dbg !3681

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load i32, i32* %i, align 4, !dbg !3682
  %cmp3 = icmp sge i32 %5, 0, !dbg !3684
  br i1 %cmp3, label %for.body, label %for.end, !dbg !3685

for.body:                                         ; preds = %for.cond
  %6 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3686
  %reg5 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %6, i32 0, i32 2, !dbg !3688
  %7 = load i32, i32* %i, align 4, !dbg !3689
  %idxprom = sext i32 %7 to i64, !dbg !3686
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %reg5, i64 0, i64 %idxprom, !dbg !3686
  %8 = load i8, i8* %arrayidx, align 1, !dbg !3686
  %conv6 = zext i8 %8 to i32, !dbg !3686
  %9 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !3690
  %call7 = call i32 @rhs_regno(%struct.rtx_def* %9), !dbg !3690
  %cmp8 = icmp eq i32 %conv6, %call7, !dbg !3691
  br i1 %cmp8, label %if.then, label %if.end, !dbg !3692

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !3693

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3690

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !3694
  %dec = add nsw i32 %10, -1, !dbg !3694
  store i32 %dec, i32* %i, align 4, !dbg !3694
  br label %for.cond, !dbg !3695, !llvm.loop !3696

for.end:                                          ; preds = %if.then, %for.cond
  %11 = load i32, i32* %i, align 4, !dbg !3698
  %cmp10 = icmp sge i32 %11, 0, !dbg !3699
  br i1 %cmp10, label %cond.true12, label %cond.false15, !dbg !3698

cond.true12:                                      ; preds = %for.end
  %12 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3700
  %top13 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %12, i32 0, i32 0, !dbg !3701
  %13 = load i32, i32* %top13, align 8, !dbg !3701
  %add = add nsw i32 8, %13, !dbg !3702
  %14 = load i32, i32* %i, align 4, !dbg !3703
  %sub14 = sub nsw i32 %add, %14, !dbg !3704
  br label %cond.end16, !dbg !3698

cond.false15:                                     ; preds = %for.end
  br label %cond.end16, !dbg !3698

cond.end16:                                       ; preds = %cond.false15, %cond.true12
  %cond17 = phi i32 [ %sub14, %cond.true12 ], [ -1, %cond.false15 ], !dbg !3698
  ret i32 %cond17, !dbg !3705
}

; Function Attrs: noinline nounwind uwtable
define internal void @replace_reg(%struct.rtx_def** %reg, i32 %regno) #0 !dbg !3706 {
entry:
  %reg.addr = alloca %struct.rtx_def**, align 8
  %regno.addr = alloca i32, align 4
  store %struct.rtx_def** %reg, %struct.rtx_def*** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %reg.addr, metadata !3709, metadata !DIExpression()), !dbg !3710
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !3711, metadata !DIExpression()), !dbg !3712
  %0 = load i32, i32* %regno.addr, align 4, !dbg !3713
  %conv = sext i32 %0 to i64, !dbg !3713
  %sub = sub i64 %conv, 8, !dbg !3713
  %cmp = icmp ule i64 %sub, 7, !dbg !3713
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3713

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 691, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3713
  br label %cond.end, !dbg !3713

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3713

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3713
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %reg.addr, align 8, !dbg !3714
  %2 = load %struct.rtx_def*, %struct.rtx_def** %1, align 8, !dbg !3714
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !3714
  %bf.load = load i32, i32* %3, align 8, !dbg !3714
  %bf.clear = and i32 %bf.load, 65535, !dbg !3714
  %cmp2 = icmp eq i32 %bf.clear, 37, !dbg !3714
  br i1 %cmp2, label %land.lhs.true, label %cond.true8, !dbg !3714

land.lhs.true:                                    ; preds = %cond.end
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %reg.addr, align 8, !dbg !3714
  %5 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8, !dbg !3714
  %call = call i32 @rhs_regno(%struct.rtx_def* %5), !dbg !3714
  %conv4 = zext i32 %call to i64, !dbg !3714
  %sub5 = sub i64 %conv4, 8, !dbg !3714
  %cmp6 = icmp ule i64 %sub5, 7, !dbg !3714
  br i1 %cmp6, label %cond.false9, label %cond.true8, !dbg !3714

cond.true8:                                       ; preds = %land.lhs.true, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 692, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3714
  br label %cond.end10, !dbg !3714

cond.false9:                                      ; preds = %land.lhs.true
  br label %cond.end10, !dbg !3714

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !3714
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %reg.addr, align 8, !dbg !3715
  %7 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8, !dbg !3715
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !3715
  %bf.load12 = load i32, i32* %8, align 8, !dbg !3715
  %bf.lshr = lshr i32 %bf.load12, 16, !dbg !3715
  %bf.clear13 = and i32 %bf.lshr, 255, !dbg !3715
  %idxprom = zext i32 %bf.clear13 to i64, !dbg !3715
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !3715
  %9 = load i8, i8* %arrayidx, align 1, !dbg !3715
  %conv14 = zext i8 %9 to i32, !dbg !3715
  %cmp15 = icmp eq i32 %conv14, 8, !dbg !3715
  br i1 %cmp15, label %cond.false35, label %lor.lhs.false, !dbg !3715

lor.lhs.false:                                    ; preds = %cond.end10
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %reg.addr, align 8, !dbg !3715
  %11 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8, !dbg !3715
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !3715
  %bf.load17 = load i32, i32* %12, align 8, !dbg !3715
  %bf.lshr18 = lshr i32 %bf.load17, 16, !dbg !3715
  %bf.clear19 = and i32 %bf.lshr18, 255, !dbg !3715
  %idxprom20 = zext i32 %bf.clear19 to i64, !dbg !3715
  %arrayidx21 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom20, !dbg !3715
  %13 = load i8, i8* %arrayidx21, align 1, !dbg !3715
  %conv22 = zext i8 %13 to i32, !dbg !3715
  %cmp23 = icmp eq i32 %conv22, 9, !dbg !3715
  br i1 %cmp23, label %cond.false35, label %lor.lhs.false25, !dbg !3715

lor.lhs.false25:                                  ; preds = %lor.lhs.false
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %reg.addr, align 8, !dbg !3715
  %15 = load %struct.rtx_def*, %struct.rtx_def** %14, align 8, !dbg !3715
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !3715
  %bf.load26 = load i32, i32* %16, align 8, !dbg !3715
  %bf.lshr27 = lshr i32 %bf.load26, 16, !dbg !3715
  %bf.clear28 = and i32 %bf.lshr27, 255, !dbg !3715
  %idxprom29 = zext i32 %bf.clear28 to i64, !dbg !3715
  %arrayidx30 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom29, !dbg !3715
  %17 = load i8, i8* %arrayidx30, align 1, !dbg !3715
  %conv31 = zext i8 %17 to i32, !dbg !3715
  %cmp32 = icmp eq i32 %conv31, 11, !dbg !3715
  br i1 %cmp32, label %cond.false35, label %cond.true34, !dbg !3715

cond.true34:                                      ; preds = %lor.lhs.false25
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 695, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3715
  br label %cond.end36, !dbg !3715

cond.false35:                                     ; preds = %lor.lhs.false25, %lor.lhs.false, %cond.end10
  br label %cond.end36, !dbg !3715

cond.end36:                                       ; preds = %cond.false35, %cond.true34
  %cond37 = phi i32 [ 0, %cond.true34 ], [ 0, %cond.false35 ], !dbg !3715
  %18 = load i32, i32* %regno.addr, align 4, !dbg !3716
  %sub38 = sub nsw i32 %18, 8, !dbg !3716
  %idxprom39 = sext i32 %sub38 to i64, !dbg !3716
  %arrayidx40 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom39, !dbg !3716
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %reg.addr, align 8, !dbg !3716
  %20 = load %struct.rtx_def*, %struct.rtx_def** %19, align 8, !dbg !3716
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !3716
  %bf.load41 = load i32, i32* %21, align 8, !dbg !3716
  %bf.lshr42 = lshr i32 %bf.load41, 16, !dbg !3716
  %bf.clear43 = and i32 %bf.lshr42, 255, !dbg !3716
  %idxprom44 = sext i32 %bf.clear43 to i64, !dbg !3716
  %arrayidx45 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx40, i64 0, i64 %idxprom44, !dbg !3716
  %22 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx45, align 8, !dbg !3716
  %23 = load %struct.rtx_def**, %struct.rtx_def*** %reg.addr, align 8, !dbg !3717
  store %struct.rtx_def* %22, %struct.rtx_def** %23, align 8, !dbg !3718
  ret void, !dbg !3719
}

declare dso_local i32 @subreg_regno_offset(i32, i32, i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @straighten_stack(%struct.rtx_def* %insn, %struct.stack_def* %regstack) #0 !dbg !3720 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regstack.addr = alloca %struct.stack_def*, align 8
  %temp_stack = alloca %struct.stack_def, align 8
  %top = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3723, metadata !DIExpression()), !dbg !3724
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !3725, metadata !DIExpression()), !dbg !3726
  call void @llvm.dbg.declare(metadata %struct.stack_def* %temp_stack, metadata !3727, metadata !DIExpression()), !dbg !3728
  call void @llvm.dbg.declare(metadata i32* %top, metadata !3729, metadata !DIExpression()), !dbg !3730
  %0 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3731
  %top1 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %0, i32 0, i32 0, !dbg !3733
  %1 = load i32, i32* %top1, align 8, !dbg !3733
  %cmp = icmp sle i32 %1, 0, !dbg !3734
  br i1 %cmp, label %if.then, label %if.end, !dbg !3735

if.then:                                          ; preds = %entry
  br label %return, !dbg !3736

if.end:                                           ; preds = %entry
  %2 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3737
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %2, i32 0, i32 1, !dbg !3737
  %3 = load i64, i64* %reg_set, align 8, !dbg !3737
  %reg_set2 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 1, !dbg !3737
  store i64 %3, i64* %reg_set2, align 8, !dbg !3737
  %4 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3738
  %top3 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %4, i32 0, i32 0, !dbg !3740
  %5 = load i32, i32* %top3, align 8, !dbg !3740
  %top4 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 0, !dbg !3741
  store i32 %5, i32* %top4, align 8, !dbg !3742
  store i32 %5, i32* %top, align 4, !dbg !3743
  br label %for.cond, !dbg !3744

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %top, align 4, !dbg !3745
  %cmp5 = icmp sge i32 %6, 0, !dbg !3747
  br i1 %cmp5, label %for.body, label %for.end, !dbg !3748

for.body:                                         ; preds = %for.cond
  %top6 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 0, !dbg !3749
  %7 = load i32, i32* %top6, align 8, !dbg !3749
  %add = add nsw i32 8, %7, !dbg !3750
  %8 = load i32, i32* %top, align 4, !dbg !3751
  %sub = sub nsw i32 %add, %8, !dbg !3752
  %conv = trunc i32 %sub to i8, !dbg !3753
  %reg = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !3754
  %9 = load i32, i32* %top, align 4, !dbg !3755
  %idxprom = sext i32 %9 to i64, !dbg !3756
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %reg, i64 0, i64 %idxprom, !dbg !3756
  store i8 %conv, i8* %arrayidx, align 1, !dbg !3757
  br label %for.inc, !dbg !3756

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %top, align 4, !dbg !3758
  %dec = add nsw i32 %10, -1, !dbg !3758
  store i32 %dec, i32* %top, align 4, !dbg !3758
  br label %for.cond, !dbg !3759, !llvm.loop !3760

for.end:                                          ; preds = %for.cond
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3762
  %12 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3763
  call void @change_stack(%struct.rtx_def* %11, %struct.stack_def* %12, %struct.stack_def* %temp_stack, i32 1), !dbg !3764
  br label %return, !dbg !3765

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !3765
}

declare dso_local i32 @asm_noperands(%struct.rtx_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @subst_asm_stack_regs(%struct.rtx_def* %insn, %struct.stack_def* %regstack) #0 !dbg !3766 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regstack.addr = alloca %struct.stack_def*, align 8
  %body = alloca %struct.rtx_def*, align 8
  %alt = alloca i32, align 4
  %note_reg = alloca %struct.rtx_def**, align 8
  %note_loc = alloca %struct.rtx_def***, align 8
  %note_kind = alloca i32*, align 8
  %clobber_reg = alloca %struct.rtx_def**, align 8
  %clobber_loc = alloca %struct.rtx_def***, align 8
  %temp_stack = alloca %struct.stack_def, align 8
  %n_notes = alloca i32, align 4
  %n_clobbers = alloca i32, align 4
  %note = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %n_inputs = alloca i32, align 4
  %n_outputs = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %loc = alloca %struct.rtx_def**, align 8
  %clobber = alloca %struct.rtx_def*, align 8
  %reg173 = alloca %struct.rtx_def*, align 8
  %loc178 = alloca %struct.rtx_def**, align 8
  %regno = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %temp = alloca i32, align 4
  %regnum = alloca i32, align 4
  %regnum348 = alloca i32, align 4
  %regnum368 = alloca i32, align 4
  %j405 = alloca i32, align 4
  %j446 = alloca i32, align 4
  %j507 = alloca i32, align 4
  %j557 = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3767, metadata !DIExpression()), !dbg !3768
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !3769, metadata !DIExpression()), !dbg !3770
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %body, metadata !3771, metadata !DIExpression()), !dbg !3772
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3773
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !3773
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3773
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !3773
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3773
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3773
  store %struct.rtx_def* %1, %struct.rtx_def** %body, align 8, !dbg !3772
  call void @llvm.dbg.declare(metadata i32* %alt, metadata !3774, metadata !DIExpression()), !dbg !3775
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %note_reg, metadata !3776, metadata !DIExpression()), !dbg !3777
  call void @llvm.dbg.declare(metadata %struct.rtx_def**** %note_loc, metadata !3778, metadata !DIExpression()), !dbg !3779
  call void @llvm.dbg.declare(metadata i32** %note_kind, metadata !3780, metadata !DIExpression()), !dbg !3781
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %clobber_reg, metadata !3782, metadata !DIExpression()), !dbg !3783
  store %struct.rtx_def** null, %struct.rtx_def*** %clobber_reg, align 8, !dbg !3783
  call void @llvm.dbg.declare(metadata %struct.rtx_def**** %clobber_loc, metadata !3784, metadata !DIExpression()), !dbg !3785
  store %struct.rtx_def*** null, %struct.rtx_def**** %clobber_loc, align 8, !dbg !3785
  call void @llvm.dbg.declare(metadata %struct.stack_def* %temp_stack, metadata !3786, metadata !DIExpression()), !dbg !3787
  call void @llvm.dbg.declare(metadata i32* %n_notes, metadata !3788, metadata !DIExpression()), !dbg !3789
  call void @llvm.dbg.declare(metadata i32* %n_clobbers, metadata !3790, metadata !DIExpression()), !dbg !3791
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !3792, metadata !DIExpression()), !dbg !3793
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3794, metadata !DIExpression()), !dbg !3795
  call void @llvm.dbg.declare(metadata i32* %n_inputs, metadata !3796, metadata !DIExpression()), !dbg !3797
  call void @llvm.dbg.declare(metadata i32* %n_outputs, metadata !3798, metadata !DIExpression()), !dbg !3799
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3800
  %call = call i32 @check_asm_stack_operands(%struct.rtx_def* %2), !dbg !3802
  %tobool = icmp ne i32 %call, 0, !dbg !3802
  br i1 %tobool, label %if.end, label %if.then, !dbg !3803

if.then:                                          ; preds = %entry
  br label %for.end595, !dbg !3804

if.end:                                           ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3805
  call void @extract_insn(%struct.rtx_def* %3), !dbg !3806
  %call1 = call i32 @constrain_operands(i32 1), !dbg !3807
  %4 = load i32, i32* @which_alternative, align 4, !dbg !3808
  store i32 %4, i32* %alt, align 4, !dbg !3809
  call void @preprocess_constraints(), !dbg !3810
  %5 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !3811
  call void @get_asm_operands_in_out(%struct.rtx_def* %5, i32* %n_outputs, i32* %n_inputs), !dbg !3812
  %6 = load i32, i32* %alt, align 4, !dbg !3813
  %cmp = icmp sge i32 %6, 0, !dbg !3813
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3813

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2029, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !3813
  br label %cond.end, !dbg !3813

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3813

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3813
  store i32 0, i32* %i, align 4, !dbg !3814
  br label %for.cond, !dbg !3816

for.cond:                                         ; preds = %for.inc, %cond.end
  %7 = load i32, i32* %i, align 4, !dbg !3817
  %8 = load i8, i8* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 7), align 2, !dbg !3819
  %conv = sext i8 %8 to i32, !dbg !3820
  %cmp2 = icmp slt i32 %7, %conv, !dbg !3821
  br i1 %cmp2, label %for.body, label %for.end, !dbg !3822

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %i, align 4, !dbg !3823
  %idxprom = sext i32 %9 to i64, !dbg !3823
  %arrayidx4 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom, !dbg !3823
  %10 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx4, align 8, !dbg !3823
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !3823
  %bf.load = load i32, i32* %11, align 8, !dbg !3823
  %bf.clear = and i32 %bf.load, 65535, !dbg !3823
  %cmp5 = icmp eq i32 %bf.clear, 39, !dbg !3825
  br i1 %cmp5, label %land.lhs.true, label %if.end34, !dbg !3826

land.lhs.true:                                    ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !3827
  %idxprom7 = sext i32 %12 to i64, !dbg !3827
  %arrayidx8 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom7, !dbg !3827
  %13 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8, !dbg !3827
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !3827
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !3827
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !3827
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !3827
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx12, align 8, !dbg !3827
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !3827
  %bf.load13 = load i32, i32* %15, align 8, !dbg !3827
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !3827
  %cmp15 = icmp eq i32 %bf.clear14, 37, !dbg !3827
  br i1 %cmp15, label %if.then17, label %if.end34, !dbg !3828

if.then17:                                        ; preds = %land.lhs.true
  %16 = load i32, i32* %i, align 4, !dbg !3829
  %idxprom18 = sext i32 %16 to i64, !dbg !3829
  %arrayidx19 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom18, !dbg !3829
  %17 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx19, align 8, !dbg !3829
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !3829
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !3829
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 0, !dbg !3829
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !3829
  %18 = load i32, i32* %i, align 4, !dbg !3831
  %idxprom24 = sext i32 %18 to i64, !dbg !3832
  %arrayidx25 = getelementptr inbounds [30 x %struct.rtx_def**], [30 x %struct.rtx_def**]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 1), i64 0, i64 %idxprom24, !dbg !3832
  store %struct.rtx_def** %rt_rtx23, %struct.rtx_def*** %arrayidx25, align 8, !dbg !3833
  %19 = load i32, i32* %i, align 4, !dbg !3834
  %idxprom26 = sext i32 %19 to i64, !dbg !3834
  %arrayidx27 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom26, !dbg !3834
  %20 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx27, align 8, !dbg !3834
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !3834
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !3834
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 0, !dbg !3834
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !3834
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !3834
  %22 = load i32, i32* %i, align 4, !dbg !3835
  %idxprom32 = sext i32 %22 to i64, !dbg !3836
  %arrayidx33 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom32, !dbg !3836
  store %struct.rtx_def* %21, %struct.rtx_def** %arrayidx33, align 8, !dbg !3837
  br label %if.end34, !dbg !3838

if.end34:                                         ; preds = %if.then17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !3827

for.inc:                                          ; preds = %if.end34
  %23 = load i32, i32* %i, align 4, !dbg !3839
  %inc = add nsw i32 %23, 1, !dbg !3839
  store i32 %inc, i32* %i, align 4, !dbg !3839
  br label %for.cond, !dbg !3840, !llvm.loop !3841

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !3843
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3845
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !3845
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !3845
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 7, !dbg !3845
  %rt_rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !3845
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx38, align 8, !dbg !3845
  store %struct.rtx_def* %25, %struct.rtx_def** %note, align 8, !dbg !3846
  br label %for.cond39, !dbg !3847

for.cond39:                                       ; preds = %for.inc43, %for.end
  %26 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3848
  %tobool40 = icmp ne %struct.rtx_def* %26, null, !dbg !3850
  br i1 %tobool40, label %for.body41, label %for.end48, !dbg !3850

for.body41:                                       ; preds = %for.cond39
  %27 = load i32, i32* %i, align 4, !dbg !3851
  %inc42 = add nsw i32 %27, 1, !dbg !3851
  store i32 %inc42, i32* %i, align 4, !dbg !3851
  br label %for.inc43, !dbg !3852

for.inc43:                                        ; preds = %for.body41
  %28 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3853
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !3853
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !3853
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 1, !dbg !3853
  %rt_rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !3853
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx47, align 8, !dbg !3853
  store %struct.rtx_def* %29, %struct.rtx_def** %note, align 8, !dbg !3854
  br label %for.cond39, !dbg !3855, !llvm.loop !3856

for.end48:                                        ; preds = %for.cond39
  %30 = load i32, i32* %i, align 4, !dbg !3858
  %conv49 = sext i32 %30 to i64, !dbg !3858
  %mul = mul i64 8, %conv49, !dbg !3858
  %31 = alloca i8, i64 %mul, align 16, !dbg !3858
  %32 = bitcast i8* %31 to %struct.rtx_def**, !dbg !3858
  store %struct.rtx_def** %32, %struct.rtx_def*** %note_reg, align 8, !dbg !3859
  %33 = load i32, i32* %i, align 4, !dbg !3860
  %conv50 = sext i32 %33 to i64, !dbg !3860
  %mul51 = mul i64 8, %conv50, !dbg !3860
  %34 = alloca i8, i64 %mul51, align 16, !dbg !3860
  %35 = bitcast i8* %34 to %struct.rtx_def***, !dbg !3860
  store %struct.rtx_def*** %35, %struct.rtx_def**** %note_loc, align 8, !dbg !3861
  %36 = load i32, i32* %i, align 4, !dbg !3862
  %conv52 = sext i32 %36 to i64, !dbg !3862
  %mul53 = mul i64 4, %conv52, !dbg !3862
  %37 = alloca i8, i64 %mul53, align 16, !dbg !3862
  %38 = bitcast i8* %37 to i32*, !dbg !3862
  store i32* %38, i32** %note_kind, align 8, !dbg !3863
  store i32 0, i32* %n_notes, align 4, !dbg !3864
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3865
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !3865
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !3865
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 7, !dbg !3865
  %rt_rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !3865
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx57, align 8, !dbg !3865
  store %struct.rtx_def* %40, %struct.rtx_def** %note, align 8, !dbg !3867
  br label %for.cond58, !dbg !3868

for.cond58:                                       ; preds = %for.inc123, %for.end48
  %41 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3869
  %tobool59 = icmp ne %struct.rtx_def* %41, null, !dbg !3871
  br i1 %tobool59, label %for.body60, label %for.end128, !dbg !3871

for.body60:                                       ; preds = %for.cond58
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !3872, metadata !DIExpression()), !dbg !3874
  %42 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3875
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !3875
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !3875
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 0, !dbg !3875
  %rt_rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**, !dbg !3875
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx64, align 8, !dbg !3875
  store %struct.rtx_def* %43, %struct.rtx_def** %reg, align 8, !dbg !3874
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %loc, metadata !3876, metadata !DIExpression()), !dbg !3877
  %44 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3878
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !3878
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !3878
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 0, !dbg !3878
  %rt_rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**, !dbg !3878
  store %struct.rtx_def** %rt_rtx68, %struct.rtx_def*** %loc, align 8, !dbg !3877
  %45 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3879
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !3879
  %bf.load69 = load i32, i32* %46, align 8, !dbg !3879
  %bf.clear70 = and i32 %bf.load69, 65535, !dbg !3879
  %cmp71 = icmp eq i32 %bf.clear70, 39, !dbg !3881
  br i1 %cmp71, label %land.lhs.true73, label %if.end91, !dbg !3882

land.lhs.true73:                                  ; preds = %for.body60
  %47 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3883
  %u74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !3883
  %fld75 = bitcast %union.u* %u74 to [1 x %union.rtunion_def]*, !dbg !3883
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i64 0, i64 0, !dbg !3883
  %rt_rtx77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtx_def**, !dbg !3883
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx77, align 8, !dbg !3883
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !3883
  %bf.load78 = load i32, i32* %49, align 8, !dbg !3883
  %bf.clear79 = and i32 %bf.load78, 65535, !dbg !3883
  %cmp80 = icmp eq i32 %bf.clear79, 37, !dbg !3883
  br i1 %cmp80, label %if.then82, label %if.end91, !dbg !3884

if.then82:                                        ; preds = %land.lhs.true73
  %50 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3885
  %u83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !3885
  %fld84 = bitcast %union.u* %u83 to [1 x %union.rtunion_def]*, !dbg !3885
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i64 0, i64 0, !dbg !3885
  %rt_rtx86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.rtx_def**, !dbg !3885
  store %struct.rtx_def** %rt_rtx86, %struct.rtx_def*** %loc, align 8, !dbg !3887
  %51 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3888
  %u87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !3888
  %fld88 = bitcast %union.u* %u87 to [1 x %union.rtunion_def]*, !dbg !3888
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i64 0, i64 0, !dbg !3888
  %rt_rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**, !dbg !3888
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx90, align 8, !dbg !3888
  store %struct.rtx_def* %52, %struct.rtx_def** %reg, align 8, !dbg !3889
  br label %if.end91, !dbg !3890

if.end91:                                         ; preds = %if.then82, %land.lhs.true73, %for.body60
  %53 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3891
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !3891
  %bf.load92 = load i32, i32* %54, align 8, !dbg !3891
  %bf.clear93 = and i32 %bf.load92, 65535, !dbg !3891
  %cmp94 = icmp eq i32 %bf.clear93, 37, !dbg !3891
  br i1 %cmp94, label %land.lhs.true96, label %if.end122, !dbg !3891

land.lhs.true96:                                  ; preds = %if.end91
  %55 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3891
  %call97 = call i32 @rhs_regno(%struct.rtx_def* %55), !dbg !3891
  %conv98 = zext i32 %call97 to i64, !dbg !3891
  %sub = sub i64 %conv98, 8, !dbg !3891
  %cmp99 = icmp ule i64 %sub, 7, !dbg !3891
  br i1 %cmp99, label %land.lhs.true101, label %if.end122, !dbg !3893

land.lhs.true101:                                 ; preds = %land.lhs.true96
  %56 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3894
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !3894
  %bf.load102 = load i32, i32* %57, align 8, !dbg !3894
  %bf.lshr = lshr i32 %bf.load102, 16, !dbg !3894
  %bf.clear103 = and i32 %bf.lshr, 255, !dbg !3894
  %cmp104 = icmp eq i32 %bf.clear103, 1, !dbg !3895
  br i1 %cmp104, label %if.then111, label %lor.lhs.false, !dbg !3896

lor.lhs.false:                                    ; preds = %land.lhs.true101
  %58 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3897
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !3897
  %bf.load106 = load i32, i32* %59, align 8, !dbg !3897
  %bf.lshr107 = lshr i32 %bf.load106, 16, !dbg !3897
  %bf.clear108 = and i32 %bf.lshr107, 255, !dbg !3897
  %cmp109 = icmp eq i32 %bf.clear108, 6, !dbg !3898
  br i1 %cmp109, label %if.then111, label %if.end122, !dbg !3899

if.then111:                                       ; preds = %lor.lhs.false, %land.lhs.true101
  %60 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !3900
  %61 = load %struct.rtx_def**, %struct.rtx_def*** %note_reg, align 8, !dbg !3902
  %62 = load i32, i32* %n_notes, align 4, !dbg !3903
  %idxprom112 = sext i32 %62 to i64, !dbg !3902
  %arrayidx113 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %61, i64 %idxprom112, !dbg !3902
  store %struct.rtx_def* %60, %struct.rtx_def** %arrayidx113, align 8, !dbg !3904
  %63 = load %struct.rtx_def**, %struct.rtx_def*** %loc, align 8, !dbg !3905
  %64 = load %struct.rtx_def***, %struct.rtx_def**** %note_loc, align 8, !dbg !3906
  %65 = load i32, i32* %n_notes, align 4, !dbg !3907
  %idxprom114 = sext i32 %65 to i64, !dbg !3906
  %arrayidx115 = getelementptr inbounds %struct.rtx_def**, %struct.rtx_def*** %64, i64 %idxprom114, !dbg !3906
  store %struct.rtx_def** %63, %struct.rtx_def*** %arrayidx115, align 8, !dbg !3908
  %66 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3909
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !3909
  %bf.load116 = load i32, i32* %67, align 8, !dbg !3909
  %bf.lshr117 = lshr i32 %bf.load116, 16, !dbg !3909
  %bf.clear118 = and i32 %bf.lshr117, 255, !dbg !3909
  %68 = load i32*, i32** %note_kind, align 8, !dbg !3910
  %69 = load i32, i32* %n_notes, align 4, !dbg !3911
  %idxprom119 = sext i32 %69 to i64, !dbg !3910
  %arrayidx120 = getelementptr inbounds i32, i32* %68, i64 %idxprom119, !dbg !3910
  store i32 %bf.clear118, i32* %arrayidx120, align 4, !dbg !3912
  %70 = load i32, i32* %n_notes, align 4, !dbg !3913
  %inc121 = add nsw i32 %70, 1, !dbg !3913
  store i32 %inc121, i32* %n_notes, align 4, !dbg !3913
  br label %if.end122, !dbg !3914

if.end122:                                        ; preds = %if.then111, %lor.lhs.false, %land.lhs.true96, %if.end91
  br label %for.inc123, !dbg !3915

for.inc123:                                       ; preds = %if.end122
  %71 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !3916
  %u124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !3916
  %fld125 = bitcast %union.u* %u124 to [1 x %union.rtunion_def]*, !dbg !3916
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i64 0, i64 1, !dbg !3916
  %rt_rtx127 = bitcast %union.rtunion_def* %arrayidx126 to %struct.rtx_def**, !dbg !3916
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx127, align 8, !dbg !3916
  store %struct.rtx_def* %72, %struct.rtx_def** %note, align 8, !dbg !3917
  br label %for.cond58, !dbg !3918, !llvm.loop !3919

for.end128:                                       ; preds = %for.cond58
  store i32 0, i32* %n_clobbers, align 4, !dbg !3921
  %73 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !3922
  %74 = bitcast %struct.rtx_def* %73 to i32*, !dbg !3922
  %bf.load129 = load i32, i32* %74, align 8, !dbg !3922
  %bf.clear130 = and i32 %bf.load129, 65535, !dbg !3922
  %cmp131 = icmp eq i32 %bf.clear130, 15, !dbg !3924
  br i1 %cmp131, label %if.then133, label %if.end227, !dbg !3925

if.then133:                                       ; preds = %for.end128
  %75 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !3926
  %u134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !3926
  %fld135 = bitcast %union.u* %u134 to [1 x %union.rtunion_def]*, !dbg !3926
  %arrayidx136 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld135, i64 0, i64 0, !dbg !3926
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx136 to %struct.rtvec_def**, !dbg !3926
  %76 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !3926
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %76, i32 0, i32 0, !dbg !3926
  %77 = load i32, i32* %num_elem, align 8, !dbg !3926
  %conv137 = sext i32 %77 to i64, !dbg !3926
  %mul138 = mul i64 8, %conv137, !dbg !3926
  %78 = alloca i8, i64 %mul138, align 16, !dbg !3926
  %79 = bitcast i8* %78 to %struct.rtx_def**, !dbg !3926
  store %struct.rtx_def** %79, %struct.rtx_def*** %clobber_reg, align 8, !dbg !3928
  %80 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !3929
  %u139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !3929
  %fld140 = bitcast %union.u* %u139 to [1 x %union.rtunion_def]*, !dbg !3929
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i64 0, i64 0, !dbg !3929
  %rt_rtvec142 = bitcast %union.rtunion_def* %arrayidx141 to %struct.rtvec_def**, !dbg !3929
  %81 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec142, align 8, !dbg !3929
  %num_elem143 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %81, i32 0, i32 0, !dbg !3929
  %82 = load i32, i32* %num_elem143, align 8, !dbg !3929
  %conv144 = sext i32 %82 to i64, !dbg !3929
  %mul145 = mul i64 8, %conv144, !dbg !3929
  %83 = alloca i8, i64 %mul145, align 16, !dbg !3929
  %84 = bitcast i8* %83 to %struct.rtx_def***, !dbg !3929
  store %struct.rtx_def*** %84, %struct.rtx_def**** %clobber_loc, align 8, !dbg !3930
  store i32 0, i32* %i, align 4, !dbg !3931
  br label %for.cond146, !dbg !3933

for.cond146:                                      ; preds = %for.inc224, %if.then133
  %85 = load i32, i32* %i, align 4, !dbg !3934
  %86 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !3936
  %u147 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1, !dbg !3936
  %fld148 = bitcast %union.u* %u147 to [1 x %union.rtunion_def]*, !dbg !3936
  %arrayidx149 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld148, i64 0, i64 0, !dbg !3936
  %rt_rtvec150 = bitcast %union.rtunion_def* %arrayidx149 to %struct.rtvec_def**, !dbg !3936
  %87 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec150, align 8, !dbg !3936
  %num_elem151 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %87, i32 0, i32 0, !dbg !3936
  %88 = load i32, i32* %num_elem151, align 8, !dbg !3936
  %cmp152 = icmp slt i32 %85, %88, !dbg !3937
  br i1 %cmp152, label %for.body154, label %for.end226, !dbg !3938

for.body154:                                      ; preds = %for.cond146
  %89 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !3939
  %u155 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1, !dbg !3939
  %fld156 = bitcast %union.u* %u155 to [1 x %union.rtunion_def]*, !dbg !3939
  %arrayidx157 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld156, i64 0, i64 0, !dbg !3939
  %rt_rtvec158 = bitcast %union.rtunion_def* %arrayidx157 to %struct.rtvec_def**, !dbg !3939
  %90 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec158, align 8, !dbg !3939
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %90, i32 0, i32 1, !dbg !3939
  %91 = load i32, i32* %i, align 4, !dbg !3939
  %idxprom159 = sext i32 %91 to i64, !dbg !3939
  %arrayidx160 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom159, !dbg !3939
  %92 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx160, align 8, !dbg !3939
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !3939
  %bf.load161 = load i32, i32* %93, align 8, !dbg !3939
  %bf.clear162 = and i32 %bf.load161, 65535, !dbg !3939
  %cmp163 = icmp eq i32 %bf.clear162, 25, !dbg !3941
  br i1 %cmp163, label %if.then165, label %if.end223, !dbg !3942

if.then165:                                       ; preds = %for.body154
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %clobber, metadata !3943, metadata !DIExpression()), !dbg !3945
  %94 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !3946
  %u166 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !3946
  %fld167 = bitcast %union.u* %u166 to [1 x %union.rtunion_def]*, !dbg !3946
  %arrayidx168 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld167, i64 0, i64 0, !dbg !3946
  %rt_rtvec169 = bitcast %union.rtunion_def* %arrayidx168 to %struct.rtvec_def**, !dbg !3946
  %95 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec169, align 8, !dbg !3946
  %elem170 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %95, i32 0, i32 1, !dbg !3946
  %96 = load i32, i32* %i, align 4, !dbg !3946
  %idxprom171 = sext i32 %96 to i64, !dbg !3946
  %arrayidx172 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem170, i64 0, i64 %idxprom171, !dbg !3946
  %97 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx172, align 8, !dbg !3946
  store %struct.rtx_def* %97, %struct.rtx_def** %clobber, align 8, !dbg !3945
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg173, metadata !3947, metadata !DIExpression()), !dbg !3948
  %98 = load %struct.rtx_def*, %struct.rtx_def** %clobber, align 8, !dbg !3949
  %u174 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1, !dbg !3949
  %fld175 = bitcast %union.u* %u174 to [1 x %union.rtunion_def]*, !dbg !3949
  %arrayidx176 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld175, i64 0, i64 0, !dbg !3949
  %rt_rtx177 = bitcast %union.rtunion_def* %arrayidx176 to %struct.rtx_def**, !dbg !3949
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx177, align 8, !dbg !3949
  store %struct.rtx_def* %99, %struct.rtx_def** %reg173, align 8, !dbg !3948
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %loc178, metadata !3950, metadata !DIExpression()), !dbg !3951
  %100 = load %struct.rtx_def*, %struct.rtx_def** %clobber, align 8, !dbg !3952
  %u179 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %100, i32 0, i32 1, !dbg !3952
  %fld180 = bitcast %union.u* %u179 to [1 x %union.rtunion_def]*, !dbg !3952
  %arrayidx181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld180, i64 0, i64 0, !dbg !3952
  %rt_rtx182 = bitcast %union.rtunion_def* %arrayidx181 to %struct.rtx_def**, !dbg !3952
  store %struct.rtx_def** %rt_rtx182, %struct.rtx_def*** %loc178, align 8, !dbg !3951
  %101 = load %struct.rtx_def*, %struct.rtx_def** %reg173, align 8, !dbg !3953
  %102 = bitcast %struct.rtx_def* %101 to i32*, !dbg !3953
  %bf.load183 = load i32, i32* %102, align 8, !dbg !3953
  %bf.clear184 = and i32 %bf.load183, 65535, !dbg !3953
  %cmp185 = icmp eq i32 %bf.clear184, 39, !dbg !3955
  br i1 %cmp185, label %land.lhs.true187, label %if.end205, !dbg !3956

land.lhs.true187:                                 ; preds = %if.then165
  %103 = load %struct.rtx_def*, %struct.rtx_def** %reg173, align 8, !dbg !3957
  %u188 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !3957
  %fld189 = bitcast %union.u* %u188 to [1 x %union.rtunion_def]*, !dbg !3957
  %arrayidx190 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld189, i64 0, i64 0, !dbg !3957
  %rt_rtx191 = bitcast %union.rtunion_def* %arrayidx190 to %struct.rtx_def**, !dbg !3957
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx191, align 8, !dbg !3957
  %105 = bitcast %struct.rtx_def* %104 to i32*, !dbg !3957
  %bf.load192 = load i32, i32* %105, align 8, !dbg !3957
  %bf.clear193 = and i32 %bf.load192, 65535, !dbg !3957
  %cmp194 = icmp eq i32 %bf.clear193, 37, !dbg !3957
  br i1 %cmp194, label %if.then196, label %if.end205, !dbg !3958

if.then196:                                       ; preds = %land.lhs.true187
  %106 = load %struct.rtx_def*, %struct.rtx_def** %reg173, align 8, !dbg !3959
  %u197 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !3959
  %fld198 = bitcast %union.u* %u197 to [1 x %union.rtunion_def]*, !dbg !3959
  %arrayidx199 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld198, i64 0, i64 0, !dbg !3959
  %rt_rtx200 = bitcast %union.rtunion_def* %arrayidx199 to %struct.rtx_def**, !dbg !3959
  store %struct.rtx_def** %rt_rtx200, %struct.rtx_def*** %loc178, align 8, !dbg !3961
  %107 = load %struct.rtx_def*, %struct.rtx_def** %reg173, align 8, !dbg !3962
  %u201 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1, !dbg !3962
  %fld202 = bitcast %union.u* %u201 to [1 x %union.rtunion_def]*, !dbg !3962
  %arrayidx203 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld202, i64 0, i64 0, !dbg !3962
  %rt_rtx204 = bitcast %union.rtunion_def* %arrayidx203 to %struct.rtx_def**, !dbg !3962
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx204, align 8, !dbg !3962
  store %struct.rtx_def* %108, %struct.rtx_def** %reg173, align 8, !dbg !3963
  br label %if.end205, !dbg !3964

if.end205:                                        ; preds = %if.then196, %land.lhs.true187, %if.then165
  %109 = load %struct.rtx_def*, %struct.rtx_def** %reg173, align 8, !dbg !3965
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !3965
  %bf.load206 = load i32, i32* %110, align 8, !dbg !3965
  %bf.clear207 = and i32 %bf.load206, 65535, !dbg !3965
  %cmp208 = icmp eq i32 %bf.clear207, 37, !dbg !3965
  br i1 %cmp208, label %land.lhs.true210, label %if.end222, !dbg !3965

land.lhs.true210:                                 ; preds = %if.end205
  %111 = load %struct.rtx_def*, %struct.rtx_def** %reg173, align 8, !dbg !3965
  %call211 = call i32 @rhs_regno(%struct.rtx_def* %111), !dbg !3965
  %conv212 = zext i32 %call211 to i64, !dbg !3965
  %sub213 = sub i64 %conv212, 8, !dbg !3965
  %cmp214 = icmp ule i64 %sub213, 7, !dbg !3965
  br i1 %cmp214, label %if.then216, label %if.end222, !dbg !3967

if.then216:                                       ; preds = %land.lhs.true210
  %112 = load %struct.rtx_def*, %struct.rtx_def** %reg173, align 8, !dbg !3968
  %113 = load %struct.rtx_def**, %struct.rtx_def*** %clobber_reg, align 8, !dbg !3970
  %114 = load i32, i32* %n_clobbers, align 4, !dbg !3971
  %idxprom217 = sext i32 %114 to i64, !dbg !3970
  %arrayidx218 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %113, i64 %idxprom217, !dbg !3970
  store %struct.rtx_def* %112, %struct.rtx_def** %arrayidx218, align 8, !dbg !3972
  %115 = load %struct.rtx_def**, %struct.rtx_def*** %loc178, align 8, !dbg !3973
  %116 = load %struct.rtx_def***, %struct.rtx_def**** %clobber_loc, align 8, !dbg !3974
  %117 = load i32, i32* %n_clobbers, align 4, !dbg !3975
  %idxprom219 = sext i32 %117 to i64, !dbg !3974
  %arrayidx220 = getelementptr inbounds %struct.rtx_def**, %struct.rtx_def*** %116, i64 %idxprom219, !dbg !3974
  store %struct.rtx_def** %115, %struct.rtx_def*** %arrayidx220, align 8, !dbg !3976
  %118 = load i32, i32* %n_clobbers, align 4, !dbg !3977
  %inc221 = add nsw i32 %118, 1, !dbg !3977
  store i32 %inc221, i32* %n_clobbers, align 4, !dbg !3977
  br label %if.end222, !dbg !3978

if.end222:                                        ; preds = %if.then216, %land.lhs.true210, %if.end205
  br label %if.end223, !dbg !3979

if.end223:                                        ; preds = %if.end222, %for.body154
  br label %for.inc224, !dbg !3980

for.inc224:                                       ; preds = %if.end223
  %119 = load i32, i32* %i, align 4, !dbg !3981
  %inc225 = add nsw i32 %119, 1, !dbg !3981
  store i32 %inc225, i32* %i, align 4, !dbg !3981
  br label %for.cond146, !dbg !3982, !llvm.loop !3983

for.end226:                                       ; preds = %for.cond146
  br label %if.end227, !dbg !3985

if.end227:                                        ; preds = %for.end226, %for.end128
  %120 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !3986
  %121 = bitcast %struct.stack_def* %temp_stack to i8*, !dbg !3987
  %122 = bitcast %struct.stack_def* %120 to i8*, !dbg !3987
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 24, i1 false), !dbg !3987
  %123 = load i32, i32* %n_outputs, align 4, !dbg !3988
  store i32 %123, i32* %i, align 4, !dbg !3990
  br label %for.cond228, !dbg !3991

for.cond228:                                      ; preds = %for.inc301, %if.end227
  %124 = load i32, i32* %i, align 4, !dbg !3992
  %125 = load i32, i32* %n_outputs, align 4, !dbg !3994
  %126 = load i32, i32* %n_inputs, align 4, !dbg !3995
  %add = add nsw i32 %125, %126, !dbg !3996
  %cmp229 = icmp slt i32 %124, %add, !dbg !3997
  br i1 %cmp229, label %for.body231, label %for.end303, !dbg !3998

for.body231:                                      ; preds = %for.cond228
  %127 = load i32, i32* %i, align 4, !dbg !3999
  %idxprom232 = sext i32 %127 to i64, !dbg !3999
  %arrayidx233 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom232, !dbg !3999
  %128 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx233, align 8, !dbg !3999
  %129 = bitcast %struct.rtx_def* %128 to i32*, !dbg !3999
  %bf.load234 = load i32, i32* %129, align 8, !dbg !3999
  %bf.clear235 = and i32 %bf.load234, 65535, !dbg !3999
  %cmp236 = icmp eq i32 %bf.clear235, 37, !dbg !3999
  br i1 %cmp236, label %land.lhs.true238, label %if.end300, !dbg !3999

land.lhs.true238:                                 ; preds = %for.body231
  %130 = load i32, i32* %i, align 4, !dbg !3999
  %idxprom239 = sext i32 %130 to i64, !dbg !3999
  %arrayidx240 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom239, !dbg !3999
  %131 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx240, align 8, !dbg !3999
  %call241 = call i32 @rhs_regno(%struct.rtx_def* %131), !dbg !3999
  %conv242 = zext i32 %call241 to i64, !dbg !3999
  %sub243 = sub i64 %conv242, 8, !dbg !3999
  %cmp244 = icmp ule i64 %sub243, 7, !dbg !3999
  br i1 %cmp244, label %land.lhs.true246, label %if.end300, !dbg !4001

land.lhs.true246:                                 ; preds = %land.lhs.true238
  %132 = load i32, i32* %i, align 4, !dbg !4002
  %idxprom247 = sext i32 %132 to i64, !dbg !4003
  %arrayidx248 = getelementptr inbounds [30 x [30 x %struct.operand_alternative]], [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %idxprom247, !dbg !4003
  %133 = load i32, i32* %alt, align 4, !dbg !4004
  %idxprom249 = sext i32 %133 to i64, !dbg !4003
  %arrayidx250 = getelementptr inbounds [30 x %struct.operand_alternative], [30 x %struct.operand_alternative]* %arrayidx248, i64 0, i64 %idxprom249, !dbg !4003
  %cl = getelementptr inbounds %struct.operand_alternative, %struct.operand_alternative* %arrayidx250, i32 0, i32 1, !dbg !4005
  %134 = load i32, i32* %cl, align 8, !dbg !4005
  %call251 = call i32 @reg_class_subset_p(i32 %134, i32 16), !dbg !4006
  %tobool252 = icmp ne i32 %call251, 0, !dbg !4006
  br i1 %tobool252, label %land.lhs.true253, label %if.end300, !dbg !4007

land.lhs.true253:                                 ; preds = %land.lhs.true246
  %135 = load i32, i32* %i, align 4, !dbg !4008
  %idxprom254 = sext i32 %135 to i64, !dbg !4009
  %arrayidx255 = getelementptr inbounds [30 x [30 x %struct.operand_alternative]], [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %idxprom254, !dbg !4009
  %136 = load i32, i32* %alt, align 4, !dbg !4010
  %idxprom256 = sext i32 %136 to i64, !dbg !4009
  %arrayidx257 = getelementptr inbounds [30 x %struct.operand_alternative], [30 x %struct.operand_alternative]* %arrayidx255, i64 0, i64 %idxprom256, !dbg !4009
  %cl258 = getelementptr inbounds %struct.operand_alternative, %struct.operand_alternative* %arrayidx257, i32 0, i32 1, !dbg !4011
  %137 = load i32, i32* %cl258, align 8, !dbg !4011
  %cmp259 = icmp ne i32 %137, 16, !dbg !4012
  br i1 %cmp259, label %if.then261, label %if.end300, !dbg !4013

if.then261:                                       ; preds = %land.lhs.true253
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !4014, metadata !DIExpression()), !dbg !4016
  %138 = load i32, i32* %i, align 4, !dbg !4017
  %idxprom262 = sext i32 %138 to i64, !dbg !4018
  %arrayidx263 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom262, !dbg !4018
  %139 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx263, align 8, !dbg !4018
  %call264 = call i32 @get_hard_regnum(%struct.stack_def* %temp_stack, %struct.rtx_def* %139), !dbg !4019
  store i32 %call264, i32* %regno, align 4, !dbg !4016
  %140 = load i32, i32* %regno, align 4, !dbg !4020
  %cmp265 = icmp sge i32 %140, 0, !dbg !4020
  br i1 %cmp265, label %cond.false268, label %cond.true267, !dbg !4020

cond.true267:                                     ; preds = %if.then261
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2122, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4020
  br label %cond.end269, !dbg !4020

cond.false268:                                    ; preds = %if.then261
  br label %cond.end269, !dbg !4020

cond.end269:                                      ; preds = %cond.false268, %cond.true267
  %cond270 = phi i32 [ 0, %cond.true267 ], [ 0, %cond.false268 ], !dbg !4020
  %141 = load i32, i32* %regno, align 4, !dbg !4021
  %142 = load i32, i32* %i, align 4, !dbg !4023
  %idxprom271 = sext i32 %142 to i64, !dbg !4023
  %arrayidx272 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom271, !dbg !4023
  %143 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx272, align 8, !dbg !4023
  %call273 = call i32 @rhs_regno(%struct.rtx_def* %143), !dbg !4023
  %cmp274 = icmp ne i32 %141, %call273, !dbg !4024
  br i1 %cmp274, label %if.then276, label %if.end299, !dbg !4025

if.then276:                                       ; preds = %cond.end269
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4026, metadata !DIExpression()), !dbg !4028
  call void @llvm.dbg.declare(metadata i32* %k, metadata !4029, metadata !DIExpression()), !dbg !4030
  call void @llvm.dbg.declare(metadata i32* %temp, metadata !4031, metadata !DIExpression()), !dbg !4032
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 0, !dbg !4033
  %144 = load i32, i32* %top, align 8, !dbg !4033
  %145 = load i32, i32* %regno, align 4, !dbg !4034
  %sub277 = sub nsw i32 %145, 8, !dbg !4035
  %sub278 = sub nsw i32 %144, %sub277, !dbg !4036
  store i32 %sub278, i32* %k, align 4, !dbg !4037
  %top279 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 0, !dbg !4038
  %146 = load i32, i32* %top279, align 8, !dbg !4038
  %147 = load i32, i32* %i, align 4, !dbg !4039
  %idxprom280 = sext i32 %147 to i64, !dbg !4039
  %arrayidx281 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom280, !dbg !4039
  %148 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx281, align 8, !dbg !4039
  %call282 = call i32 @rhs_regno(%struct.rtx_def* %148), !dbg !4039
  %sub283 = sub i32 %call282, 8, !dbg !4040
  %sub284 = sub i32 %146, %sub283, !dbg !4041
  store i32 %sub284, i32* %j, align 4, !dbg !4042
  %reg285 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !4043
  %149 = load i32, i32* %k, align 4, !dbg !4044
  %idxprom286 = sext i32 %149 to i64, !dbg !4045
  %arrayidx287 = getelementptr inbounds [8 x i8], [8 x i8]* %reg285, i64 0, i64 %idxprom286, !dbg !4045
  %150 = load i8, i8* %arrayidx287, align 1, !dbg !4045
  %conv288 = zext i8 %150 to i32, !dbg !4045
  store i32 %conv288, i32* %temp, align 4, !dbg !4046
  %reg289 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !4047
  %151 = load i32, i32* %j, align 4, !dbg !4048
  %idxprom290 = sext i32 %151 to i64, !dbg !4049
  %arrayidx291 = getelementptr inbounds [8 x i8], [8 x i8]* %reg289, i64 0, i64 %idxprom290, !dbg !4049
  %152 = load i8, i8* %arrayidx291, align 1, !dbg !4049
  %reg292 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !4050
  %153 = load i32, i32* %k, align 4, !dbg !4051
  %idxprom293 = sext i32 %153 to i64, !dbg !4052
  %arrayidx294 = getelementptr inbounds [8 x i8], [8 x i8]* %reg292, i64 0, i64 %idxprom293, !dbg !4052
  store i8 %152, i8* %arrayidx294, align 1, !dbg !4053
  %154 = load i32, i32* %temp, align 4, !dbg !4054
  %conv295 = trunc i32 %154 to i8, !dbg !4054
  %reg296 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !4055
  %155 = load i32, i32* %j, align 4, !dbg !4056
  %idxprom297 = sext i32 %155 to i64, !dbg !4057
  %arrayidx298 = getelementptr inbounds [8 x i8], [8 x i8]* %reg296, i64 0, i64 %idxprom297, !dbg !4057
  store i8 %conv295, i8* %arrayidx298, align 1, !dbg !4058
  br label %if.end299, !dbg !4059

if.end299:                                        ; preds = %if.then276, %cond.end269
  br label %if.end300, !dbg !4060

if.end300:                                        ; preds = %if.end299, %land.lhs.true253, %land.lhs.true246, %land.lhs.true238, %for.body231
  br label %for.inc301, !dbg !4061

for.inc301:                                       ; preds = %if.end300
  %156 = load i32, i32* %i, align 4, !dbg !4062
  %inc302 = add nsw i32 %156, 1, !dbg !4062
  store i32 %inc302, i32* %i, align 4, !dbg !4062
  br label %for.cond228, !dbg !4063, !llvm.loop !4064

for.end303:                                       ; preds = %for.cond228
  %157 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4066
  %158 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4067
  call void @change_stack(%struct.rtx_def* %157, %struct.stack_def* %158, %struct.stack_def* %temp_stack, i32 1), !dbg !4068
  %159 = load i32, i32* %n_outputs, align 4, !dbg !4069
  store i32 %159, i32* %i, align 4, !dbg !4071
  br label %for.cond304, !dbg !4072

for.cond304:                                      ; preds = %for.inc336, %for.end303
  %160 = load i32, i32* %i, align 4, !dbg !4073
  %161 = load i32, i32* %n_outputs, align 4, !dbg !4075
  %162 = load i32, i32* %n_inputs, align 4, !dbg !4076
  %add305 = add nsw i32 %161, %162, !dbg !4077
  %cmp306 = icmp slt i32 %160, %add305, !dbg !4078
  br i1 %cmp306, label %for.body308, label %for.end338, !dbg !4079

for.body308:                                      ; preds = %for.cond304
  %163 = load i32, i32* %i, align 4, !dbg !4080
  %idxprom309 = sext i32 %163 to i64, !dbg !4080
  %arrayidx310 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom309, !dbg !4080
  %164 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx310, align 8, !dbg !4080
  %165 = bitcast %struct.rtx_def* %164 to i32*, !dbg !4080
  %bf.load311 = load i32, i32* %165, align 8, !dbg !4080
  %bf.clear312 = and i32 %bf.load311, 65535, !dbg !4080
  %cmp313 = icmp eq i32 %bf.clear312, 37, !dbg !4080
  br i1 %cmp313, label %land.lhs.true315, label %if.end335, !dbg !4080

land.lhs.true315:                                 ; preds = %for.body308
  %166 = load i32, i32* %i, align 4, !dbg !4080
  %idxprom316 = sext i32 %166 to i64, !dbg !4080
  %arrayidx317 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom316, !dbg !4080
  %167 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx317, align 8, !dbg !4080
  %call318 = call i32 @rhs_regno(%struct.rtx_def* %167), !dbg !4080
  %conv319 = zext i32 %call318 to i64, !dbg !4080
  %sub320 = sub i64 %conv319, 8, !dbg !4080
  %cmp321 = icmp ule i64 %sub320, 7, !dbg !4080
  br i1 %cmp321, label %if.then323, label %if.end335, !dbg !4082

if.then323:                                       ; preds = %land.lhs.true315
  call void @llvm.dbg.declare(metadata i32* %regnum, metadata !4083, metadata !DIExpression()), !dbg !4085
  %168 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4086
  %169 = load i32, i32* %i, align 4, !dbg !4087
  %idxprom324 = sext i32 %169 to i64, !dbg !4088
  %arrayidx325 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom324, !dbg !4088
  %170 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx325, align 8, !dbg !4088
  %call326 = call i32 @get_hard_regnum(%struct.stack_def* %168, %struct.rtx_def* %170), !dbg !4089
  store i32 %call326, i32* %regnum, align 4, !dbg !4085
  %171 = load i32, i32* %regnum, align 4, !dbg !4090
  %cmp327 = icmp sge i32 %171, 0, !dbg !4090
  br i1 %cmp327, label %cond.false330, label %cond.true329, !dbg !4090

cond.true329:                                     ; preds = %if.then323
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2155, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4090
  br label %cond.end331, !dbg !4090

cond.false330:                                    ; preds = %if.then323
  br label %cond.end331, !dbg !4090

cond.end331:                                      ; preds = %cond.false330, %cond.true329
  %cond332 = phi i32 [ 0, %cond.true329 ], [ 0, %cond.false330 ], !dbg !4090
  %172 = load i32, i32* %i, align 4, !dbg !4091
  %idxprom333 = sext i32 %172 to i64, !dbg !4092
  %arrayidx334 = getelementptr inbounds [30 x %struct.rtx_def**], [30 x %struct.rtx_def**]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 1), i64 0, i64 %idxprom333, !dbg !4092
  %173 = load %struct.rtx_def**, %struct.rtx_def*** %arrayidx334, align 8, !dbg !4092
  %174 = load i32, i32* %regnum, align 4, !dbg !4093
  call void @replace_reg(%struct.rtx_def** %173, i32 %174), !dbg !4094
  br label %if.end335, !dbg !4095

if.end335:                                        ; preds = %cond.end331, %land.lhs.true315, %for.body308
  br label %for.inc336, !dbg !4080

for.inc336:                                       ; preds = %if.end335
  %175 = load i32, i32* %i, align 4, !dbg !4096
  %inc337 = add nsw i32 %175, 1, !dbg !4096
  store i32 %inc337, i32* %i, align 4, !dbg !4096
  br label %for.cond304, !dbg !4097, !llvm.loop !4098

for.end338:                                       ; preds = %for.cond304
  store i32 0, i32* %i, align 4, !dbg !4100
  br label %for.cond339, !dbg !4102

for.cond339:                                      ; preds = %for.inc361, %for.end338
  %176 = load i32, i32* %i, align 4, !dbg !4103
  %177 = load i32, i32* %n_notes, align 4, !dbg !4105
  %cmp340 = icmp slt i32 %176, %177, !dbg !4106
  br i1 %cmp340, label %for.body342, label %for.end363, !dbg !4107

for.body342:                                      ; preds = %for.cond339
  %178 = load i32*, i32** %note_kind, align 8, !dbg !4108
  %179 = load i32, i32* %i, align 4, !dbg !4110
  %idxprom343 = sext i32 %179 to i64, !dbg !4108
  %arrayidx344 = getelementptr inbounds i32, i32* %178, i64 %idxprom343, !dbg !4108
  %180 = load i32, i32* %arrayidx344, align 4, !dbg !4108
  %cmp345 = icmp eq i32 %180, 1, !dbg !4111
  br i1 %cmp345, label %if.then347, label %if.end360, !dbg !4112

if.then347:                                       ; preds = %for.body342
  call void @llvm.dbg.declare(metadata i32* %regnum348, metadata !4113, metadata !DIExpression()), !dbg !4115
  %181 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4116
  %182 = load %struct.rtx_def**, %struct.rtx_def*** %note_reg, align 8, !dbg !4117
  %183 = load i32, i32* %i, align 4, !dbg !4118
  %idxprom349 = sext i32 %183 to i64, !dbg !4117
  %arrayidx350 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %182, i64 %idxprom349, !dbg !4117
  %184 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx350, align 8, !dbg !4117
  %call351 = call i32 @get_hard_regnum(%struct.stack_def* %181, %struct.rtx_def* %184), !dbg !4119
  store i32 %call351, i32* %regnum348, align 4, !dbg !4115
  %185 = load i32, i32* %regnum348, align 4, !dbg !4120
  %cmp352 = icmp sge i32 %185, 0, !dbg !4120
  br i1 %cmp352, label %cond.false355, label %cond.true354, !dbg !4120

cond.true354:                                     ; preds = %if.then347
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2165, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4120
  br label %cond.end356, !dbg !4120

cond.false355:                                    ; preds = %if.then347
  br label %cond.end356, !dbg !4120

cond.end356:                                      ; preds = %cond.false355, %cond.true354
  %cond357 = phi i32 [ 0, %cond.true354 ], [ 0, %cond.false355 ], !dbg !4120
  %186 = load %struct.rtx_def***, %struct.rtx_def**** %note_loc, align 8, !dbg !4121
  %187 = load i32, i32* %i, align 4, !dbg !4122
  %idxprom358 = sext i32 %187 to i64, !dbg !4121
  %arrayidx359 = getelementptr inbounds %struct.rtx_def**, %struct.rtx_def*** %186, i64 %idxprom358, !dbg !4121
  %188 = load %struct.rtx_def**, %struct.rtx_def*** %arrayidx359, align 8, !dbg !4121
  %189 = load i32, i32* %regnum348, align 4, !dbg !4123
  call void @replace_reg(%struct.rtx_def** %188, i32 %189), !dbg !4124
  br label %if.end360, !dbg !4125

if.end360:                                        ; preds = %cond.end356, %for.body342
  br label %for.inc361, !dbg !4126

for.inc361:                                       ; preds = %if.end360
  %190 = load i32, i32* %i, align 4, !dbg !4127
  %inc362 = add nsw i32 %190, 1, !dbg !4127
  store i32 %inc362, i32* %i, align 4, !dbg !4127
  br label %for.cond339, !dbg !4128, !llvm.loop !4129

for.end363:                                       ; preds = %for.cond339
  store i32 0, i32* %i, align 4, !dbg !4131
  br label %for.cond364, !dbg !4133

for.cond364:                                      ; preds = %for.inc382, %for.end363
  %191 = load i32, i32* %i, align 4, !dbg !4134
  %192 = load i32, i32* %n_clobbers, align 4, !dbg !4136
  %cmp365 = icmp slt i32 %191, %192, !dbg !4137
  br i1 %cmp365, label %for.body367, label %for.end384, !dbg !4138

for.body367:                                      ; preds = %for.cond364
  call void @llvm.dbg.declare(metadata i32* %regnum368, metadata !4139, metadata !DIExpression()), !dbg !4141
  %193 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4142
  %194 = load %struct.rtx_def**, %struct.rtx_def*** %clobber_reg, align 8, !dbg !4143
  %195 = load i32, i32* %i, align 4, !dbg !4144
  %idxprom369 = sext i32 %195 to i64, !dbg !4143
  %arrayidx370 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %194, i64 %idxprom369, !dbg !4143
  %196 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx370, align 8, !dbg !4143
  %call371 = call i32 @get_hard_regnum(%struct.stack_def* %193, %struct.rtx_def* %196), !dbg !4145
  store i32 %call371, i32* %regnum368, align 4, !dbg !4141
  %197 = load i32, i32* %regnum368, align 4, !dbg !4146
  %cmp372 = icmp sge i32 %197, 0, !dbg !4148
  br i1 %cmp372, label %if.then374, label %if.end381, !dbg !4149

if.then374:                                       ; preds = %for.body367
  %198 = load i32, i32* %regnum368, align 4, !dbg !4150
  %sub375 = sub nsw i32 %198, 8, !dbg !4150
  %idxprom376 = sext i32 %sub375 to i64, !dbg !4150
  %arrayidx377 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom376, !dbg !4150
  %arrayidx378 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx377, i64 0, i64 39, !dbg !4150
  %199 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx378, align 8, !dbg !4150
  %200 = load %struct.rtx_def***, %struct.rtx_def**** %clobber_loc, align 8, !dbg !4152
  %201 = load i32, i32* %i, align 4, !dbg !4153
  %idxprom379 = sext i32 %201 to i64, !dbg !4152
  %arrayidx380 = getelementptr inbounds %struct.rtx_def**, %struct.rtx_def*** %200, i64 %idxprom379, !dbg !4152
  %202 = load %struct.rtx_def**, %struct.rtx_def*** %arrayidx380, align 8, !dbg !4152
  store %struct.rtx_def* %199, %struct.rtx_def** %202, align 8, !dbg !4154
  br label %if.end381, !dbg !4155

if.end381:                                        ; preds = %if.then374, %for.body367
  br label %for.inc382, !dbg !4156

for.inc382:                                       ; preds = %if.end381
  %203 = load i32, i32* %i, align 4, !dbg !4157
  %inc383 = add nsw i32 %203, 1, !dbg !4157
  store i32 %inc383, i32* %i, align 4, !dbg !4157
  br label %for.cond364, !dbg !4158, !llvm.loop !4159

for.end384:                                       ; preds = %for.cond364
  %204 = load i32, i32* %n_outputs, align 4, !dbg !4161
  store i32 %204, i32* %i, align 4, !dbg !4163
  br label %for.cond385, !dbg !4164

for.cond385:                                      ; preds = %for.inc439, %for.end384
  %205 = load i32, i32* %i, align 4, !dbg !4165
  %206 = load i32, i32* %n_outputs, align 4, !dbg !4167
  %207 = load i32, i32* %n_inputs, align 4, !dbg !4168
  %add386 = add nsw i32 %206, %207, !dbg !4169
  %cmp387 = icmp slt i32 %205, %add386, !dbg !4170
  br i1 %cmp387, label %for.body389, label %for.end441, !dbg !4171

for.body389:                                      ; preds = %for.cond385
  %208 = load i32, i32* %i, align 4, !dbg !4172
  %idxprom390 = sext i32 %208 to i64, !dbg !4172
  %arrayidx391 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom390, !dbg !4172
  %209 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx391, align 8, !dbg !4172
  %210 = bitcast %struct.rtx_def* %209 to i32*, !dbg !4172
  %bf.load392 = load i32, i32* %210, align 8, !dbg !4172
  %bf.clear393 = and i32 %bf.load392, 65535, !dbg !4172
  %cmp394 = icmp eq i32 %bf.clear393, 37, !dbg !4172
  br i1 %cmp394, label %land.lhs.true396, label %if.end438, !dbg !4172

land.lhs.true396:                                 ; preds = %for.body389
  %211 = load i32, i32* %i, align 4, !dbg !4172
  %idxprom397 = sext i32 %211 to i64, !dbg !4172
  %arrayidx398 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom397, !dbg !4172
  %212 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx398, align 8, !dbg !4172
  %call399 = call i32 @rhs_regno(%struct.rtx_def* %212), !dbg !4172
  %conv400 = zext i32 %call399 to i64, !dbg !4172
  %sub401 = sub i64 %conv400, 8, !dbg !4172
  %cmp402 = icmp ule i64 %sub401, 7, !dbg !4172
  br i1 %cmp402, label %if.then404, label %if.end438, !dbg !4174

if.then404:                                       ; preds = %land.lhs.true396
  call void @llvm.dbg.declare(metadata i32* %j405, metadata !4175, metadata !DIExpression()), !dbg !4177
  store i32 0, i32* %j405, align 4, !dbg !4178
  br label %for.cond406, !dbg !4180

for.cond406:                                      ; preds = %for.inc418, %if.then404
  %213 = load i32, i32* %j405, align 4, !dbg !4181
  %214 = load i32, i32* %n_clobbers, align 4, !dbg !4183
  %cmp407 = icmp slt i32 %213, %214, !dbg !4184
  br i1 %cmp407, label %for.body409, label %for.end420, !dbg !4185

for.body409:                                      ; preds = %for.cond406
  %215 = load %struct.rtx_def**, %struct.rtx_def*** %clobber_reg, align 8, !dbg !4186
  %216 = load i32, i32* %j405, align 4, !dbg !4188
  %idxprom410 = sext i32 %216 to i64, !dbg !4186
  %arrayidx411 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %215, i64 %idxprom410, !dbg !4186
  %217 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx411, align 8, !dbg !4186
  %218 = load i32, i32* %i, align 4, !dbg !4189
  %idxprom412 = sext i32 %218 to i64, !dbg !4190
  %arrayidx413 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom412, !dbg !4190
  %219 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx413, align 8, !dbg !4190
  %call414 = call i32 @operands_match_p(%struct.rtx_def* %217, %struct.rtx_def* %219), !dbg !4191
  %tobool415 = icmp ne i32 %call414, 0, !dbg !4191
  br i1 %tobool415, label %if.then416, label %if.end417, !dbg !4192

if.then416:                                       ; preds = %for.body409
  br label %for.end420, !dbg !4193

if.end417:                                        ; preds = %for.body409
  br label %for.inc418, !dbg !4194

for.inc418:                                       ; preds = %if.end417
  %220 = load i32, i32* %j405, align 4, !dbg !4195
  %inc419 = add nsw i32 %220, 1, !dbg !4195
  store i32 %inc419, i32* %j405, align 4, !dbg !4195
  br label %for.cond406, !dbg !4196, !llvm.loop !4197

for.end420:                                       ; preds = %if.then416, %for.cond406
  %221 = load i32, i32* %j405, align 4, !dbg !4199
  %222 = load i32, i32* %n_clobbers, align 4, !dbg !4201
  %cmp421 = icmp slt i32 %221, %222, !dbg !4202
  br i1 %cmp421, label %if.then430, label %lor.lhs.false423, !dbg !4203

lor.lhs.false423:                                 ; preds = %for.end420
  %223 = load i32, i32* %i, align 4, !dbg !4204
  %idxprom424 = sext i32 %223 to i64, !dbg !4205
  %arrayidx425 = getelementptr inbounds [30 x [30 x %struct.operand_alternative]], [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %idxprom424, !dbg !4205
  %224 = load i32, i32* %alt, align 4, !dbg !4206
  %idxprom426 = sext i32 %224 to i64, !dbg !4205
  %arrayidx427 = getelementptr inbounds [30 x %struct.operand_alternative], [30 x %struct.operand_alternative]* %arrayidx425, i64 0, i64 %idxprom426, !dbg !4205
  %matches = getelementptr inbounds %struct.operand_alternative, %struct.operand_alternative* %arrayidx427, i32 0, i32 3, !dbg !4207
  %225 = load i32, i32* %matches, align 16, !dbg !4207
  %cmp428 = icmp sge i32 %225, 0, !dbg !4208
  br i1 %cmp428, label %if.then430, label %if.end437, !dbg !4209

if.then430:                                       ; preds = %lor.lhs.false423, %for.end420
  %226 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4210
  %reg431 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %226, i32 0, i32 2, !dbg !4210
  %227 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4210
  %top432 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %227, i32 0, i32 0, !dbg !4210
  %228 = load i32, i32* %top432, align 8, !dbg !4210
  %idxprom433 = sext i32 %228 to i64, !dbg !4210
  %arrayidx434 = getelementptr inbounds [8 x i8], [8 x i8]* %reg431, i64 0, i64 %idxprom433, !dbg !4210
  %229 = load i8, i8* %arrayidx434, align 1, !dbg !4210
  %conv435 = zext i8 %229 to i32, !dbg !4210
  %sh_prom = zext i32 %conv435 to i64, !dbg !4210
  %shl = shl i64 1, %sh_prom, !dbg !4210
  %neg = xor i64 %shl, -1, !dbg !4210
  %230 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4210
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %230, i32 0, i32 1, !dbg !4210
  %231 = load i64, i64* %reg_set, align 8, !dbg !4210
  %and = and i64 %231, %neg, !dbg !4210
  store i64 %and, i64* %reg_set, align 8, !dbg !4210
  %232 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4212
  %top436 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %232, i32 0, i32 0, !dbg !4213
  %233 = load i32, i32* %top436, align 8, !dbg !4214
  %dec = add nsw i32 %233, -1, !dbg !4214
  store i32 %dec, i32* %top436, align 8, !dbg !4214
  br label %if.end437, !dbg !4215

if.end437:                                        ; preds = %if.then430, %lor.lhs.false423
  br label %if.end438, !dbg !4216

if.end438:                                        ; preds = %if.end437, %land.lhs.true396, %for.body389
  br label %for.inc439, !dbg !4172

for.inc439:                                       ; preds = %if.end438
  %234 = load i32, i32* %i, align 4, !dbg !4217
  %inc440 = add nsw i32 %234, 1, !dbg !4217
  store i32 %inc440, i32* %i, align 4, !dbg !4217
  br label %for.cond385, !dbg !4218, !llvm.loop !4219

for.end441:                                       ; preds = %for.cond385
  store i32 15, i32* %i, align 4, !dbg !4221
  br label %for.cond442, !dbg !4223

for.cond442:                                      ; preds = %for.inc485, %for.end441
  %235 = load i32, i32* %i, align 4, !dbg !4224
  %cmp443 = icmp sge i32 %235, 8, !dbg !4226
  br i1 %cmp443, label %for.body445, label %for.end487, !dbg !4227

for.body445:                                      ; preds = %for.cond442
  call void @llvm.dbg.declare(metadata i32* %j446, metadata !4228, metadata !DIExpression()), !dbg !4230
  store i32 0, i32* %j446, align 4, !dbg !4231
  br label %for.cond447, !dbg !4233

for.cond447:                                      ; preds = %for.inc482, %for.body445
  %236 = load i32, i32* %j446, align 4, !dbg !4234
  %237 = load i32, i32* %n_outputs, align 4, !dbg !4236
  %cmp448 = icmp slt i32 %236, %237, !dbg !4237
  br i1 %cmp448, label %for.body450, label %for.end484, !dbg !4238

for.body450:                                      ; preds = %for.cond447
  %238 = load i32, i32* %j446, align 4, !dbg !4239
  %idxprom451 = sext i32 %238 to i64, !dbg !4239
  %arrayidx452 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom451, !dbg !4239
  %239 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx452, align 8, !dbg !4239
  %240 = bitcast %struct.rtx_def* %239 to i32*, !dbg !4239
  %bf.load453 = load i32, i32* %240, align 8, !dbg !4239
  %bf.clear454 = and i32 %bf.load453, 65535, !dbg !4239
  %cmp455 = icmp eq i32 %bf.clear454, 37, !dbg !4239
  br i1 %cmp455, label %land.lhs.true457, label %if.end481, !dbg !4239

land.lhs.true457:                                 ; preds = %for.body450
  %241 = load i32, i32* %j446, align 4, !dbg !4239
  %idxprom458 = sext i32 %241 to i64, !dbg !4239
  %arrayidx459 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom458, !dbg !4239
  %242 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx459, align 8, !dbg !4239
  %call460 = call i32 @rhs_regno(%struct.rtx_def* %242), !dbg !4239
  %conv461 = zext i32 %call460 to i64, !dbg !4239
  %sub462 = sub i64 %conv461, 8, !dbg !4239
  %cmp463 = icmp ule i64 %sub462, 7, !dbg !4239
  br i1 %cmp463, label %land.lhs.true465, label %if.end481, !dbg !4241

land.lhs.true465:                                 ; preds = %land.lhs.true457
  %243 = load i32, i32* %j446, align 4, !dbg !4242
  %idxprom466 = sext i32 %243 to i64, !dbg !4242
  %arrayidx467 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom466, !dbg !4242
  %244 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx467, align 8, !dbg !4242
  %call468 = call i32 @rhs_regno(%struct.rtx_def* %244), !dbg !4242
  %245 = load i32, i32* %i, align 4, !dbg !4243
  %cmp469 = icmp eq i32 %call468, %245, !dbg !4244
  br i1 %cmp469, label %if.then471, label %if.end481, !dbg !4245

if.then471:                                       ; preds = %land.lhs.true465
  %246 = load i32, i32* %i, align 4, !dbg !4246
  %conv472 = trunc i32 %246 to i8, !dbg !4246
  %247 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4248
  %reg473 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %247, i32 0, i32 2, !dbg !4249
  %248 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4250
  %top474 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %248, i32 0, i32 0, !dbg !4251
  %249 = load i32, i32* %top474, align 8, !dbg !4252
  %inc475 = add nsw i32 %249, 1, !dbg !4252
  store i32 %inc475, i32* %top474, align 8, !dbg !4252
  %idxprom476 = sext i32 %inc475 to i64, !dbg !4248
  %arrayidx477 = getelementptr inbounds [8 x i8], [8 x i8]* %reg473, i64 0, i64 %idxprom476, !dbg !4248
  store i8 %conv472, i8* %arrayidx477, align 1, !dbg !4253
  %250 = load i32, i32* %i, align 4, !dbg !4254
  %sh_prom478 = zext i32 %250 to i64, !dbg !4254
  %shl479 = shl i64 1, %sh_prom478, !dbg !4254
  %251 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4254
  %reg_set480 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %251, i32 0, i32 1, !dbg !4254
  %252 = load i64, i64* %reg_set480, align 8, !dbg !4254
  %or = or i64 %252, %shl479, !dbg !4254
  store i64 %or, i64* %reg_set480, align 8, !dbg !4254
  br label %for.end484, !dbg !4255

if.end481:                                        ; preds = %land.lhs.true465, %land.lhs.true457, %for.body450
  br label %for.inc482, !dbg !4243

for.inc482:                                       ; preds = %if.end481
  %253 = load i32, i32* %j446, align 4, !dbg !4256
  %inc483 = add nsw i32 %253, 1, !dbg !4256
  store i32 %inc483, i32* %j446, align 4, !dbg !4256
  br label %for.cond447, !dbg !4257, !llvm.loop !4258

for.end484:                                       ; preds = %if.then471, %for.cond447
  br label %for.inc485, !dbg !4260

for.inc485:                                       ; preds = %for.end484
  %254 = load i32, i32* %i, align 4, !dbg !4261
  %dec486 = add nsw i32 %254, -1, !dbg !4261
  store i32 %dec486, i32* %i, align 4, !dbg !4261
  br label %for.cond442, !dbg !4262, !llvm.loop !4263

for.end487:                                       ; preds = %for.cond442
  store i32 0, i32* %i, align 4, !dbg !4265
  br label %for.cond488, !dbg !4267

for.cond488:                                      ; preds = %for.inc534, %for.end487
  %255 = load i32, i32* %i, align 4, !dbg !4268
  %256 = load i32, i32* %n_outputs, align 4, !dbg !4270
  %cmp489 = icmp slt i32 %255, %256, !dbg !4271
  br i1 %cmp489, label %for.body491, label %for.end536, !dbg !4272

for.body491:                                      ; preds = %for.cond488
  %257 = load i32, i32* %i, align 4, !dbg !4273
  %idxprom492 = sext i32 %257 to i64, !dbg !4273
  %arrayidx493 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom492, !dbg !4273
  %258 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx493, align 8, !dbg !4273
  %259 = bitcast %struct.rtx_def* %258 to i32*, !dbg !4273
  %bf.load494 = load i32, i32* %259, align 8, !dbg !4273
  %bf.clear495 = and i32 %bf.load494, 65535, !dbg !4273
  %cmp496 = icmp eq i32 %bf.clear495, 37, !dbg !4273
  br i1 %cmp496, label %land.lhs.true498, label %if.end533, !dbg !4273

land.lhs.true498:                                 ; preds = %for.body491
  %260 = load i32, i32* %i, align 4, !dbg !4273
  %idxprom499 = sext i32 %260 to i64, !dbg !4273
  %arrayidx500 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom499, !dbg !4273
  %261 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx500, align 8, !dbg !4273
  %call501 = call i32 @rhs_regno(%struct.rtx_def* %261), !dbg !4273
  %conv502 = zext i32 %call501 to i64, !dbg !4273
  %sub503 = sub i64 %conv502, 8, !dbg !4273
  %cmp504 = icmp ule i64 %sub503, 7, !dbg !4273
  br i1 %cmp504, label %if.then506, label %if.end533, !dbg !4275

if.then506:                                       ; preds = %land.lhs.true498
  call void @llvm.dbg.declare(metadata i32* %j507, metadata !4276, metadata !DIExpression()), !dbg !4278
  store i32 0, i32* %j507, align 4, !dbg !4279
  br label %for.cond508, !dbg !4281

for.cond508:                                      ; preds = %for.inc530, %if.then506
  %262 = load i32, i32* %j507, align 4, !dbg !4282
  %263 = load i32, i32* %n_notes, align 4, !dbg !4284
  %cmp509 = icmp slt i32 %262, %263, !dbg !4285
  br i1 %cmp509, label %for.body511, label %for.end532, !dbg !4286

for.body511:                                      ; preds = %for.cond508
  %264 = load i32, i32* %i, align 4, !dbg !4287
  %idxprom512 = sext i32 %264 to i64, !dbg !4287
  %arrayidx513 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom512, !dbg !4287
  %265 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx513, align 8, !dbg !4287
  %call514 = call i32 @rhs_regno(%struct.rtx_def* %265), !dbg !4287
  %266 = load %struct.rtx_def**, %struct.rtx_def*** %note_reg, align 8, !dbg !4289
  %267 = load i32, i32* %j507, align 4, !dbg !4289
  %idxprom515 = sext i32 %267 to i64, !dbg !4289
  %arrayidx516 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %266, i64 %idxprom515, !dbg !4289
  %268 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx516, align 8, !dbg !4289
  %call517 = call i32 @rhs_regno(%struct.rtx_def* %268), !dbg !4289
  %cmp518 = icmp eq i32 %call514, %call517, !dbg !4290
  br i1 %cmp518, label %land.lhs.true520, label %if.end529, !dbg !4291

land.lhs.true520:                                 ; preds = %for.body511
  %269 = load i32*, i32** %note_kind, align 8, !dbg !4292
  %270 = load i32, i32* %j507, align 4, !dbg !4293
  %idxprom521 = sext i32 %270 to i64, !dbg !4292
  %arrayidx522 = getelementptr inbounds i32, i32* %269, i64 %idxprom521, !dbg !4292
  %271 = load i32, i32* %arrayidx522, align 4, !dbg !4292
  %cmp523 = icmp eq i32 %271, 6, !dbg !4294
  br i1 %cmp523, label %if.then525, label %if.end529, !dbg !4295

if.then525:                                       ; preds = %land.lhs.true520
  %272 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4296
  %273 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4298
  %274 = load i32, i32* %i, align 4, !dbg !4299
  %idxprom526 = sext i32 %274 to i64, !dbg !4300
  %arrayidx527 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom526, !dbg !4300
  %275 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx527, align 8, !dbg !4300
  %call528 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %272, %struct.stack_def* %273, %struct.rtx_def* %275, i32 0), !dbg !4301
  store %struct.rtx_def* %call528, %struct.rtx_def** %insn.addr, align 8, !dbg !4302
  br label %for.end532, !dbg !4303

if.end529:                                        ; preds = %land.lhs.true520, %for.body511
  br label %for.inc530, !dbg !4304

for.inc530:                                       ; preds = %if.end529
  %276 = load i32, i32* %j507, align 4, !dbg !4305
  %inc531 = add nsw i32 %276, 1, !dbg !4305
  store i32 %inc531, i32* %j507, align 4, !dbg !4305
  br label %for.cond508, !dbg !4306, !llvm.loop !4307

for.end532:                                       ; preds = %if.then525, %for.cond508
  br label %if.end533, !dbg !4309

if.end533:                                        ; preds = %for.end532, %land.lhs.true498, %for.body491
  br label %for.inc534, !dbg !4273

for.inc534:                                       ; preds = %if.end533
  %277 = load i32, i32* %i, align 4, !dbg !4310
  %inc535 = add nsw i32 %277, 1, !dbg !4310
  store i32 %inc535, i32* %i, align 4, !dbg !4310
  br label %for.cond488, !dbg !4311, !llvm.loop !4312

for.end536:                                       ; preds = %for.cond488
  %278 = load i32, i32* %n_outputs, align 4, !dbg !4314
  store i32 %278, i32* %i, align 4, !dbg !4316
  br label %for.cond537, !dbg !4317

for.cond537:                                      ; preds = %for.inc593, %for.end536
  %279 = load i32, i32* %i, align 4, !dbg !4318
  %280 = load i32, i32* %n_outputs, align 4, !dbg !4320
  %281 = load i32, i32* %n_inputs, align 4, !dbg !4321
  %add538 = add nsw i32 %280, %281, !dbg !4322
  %cmp539 = icmp slt i32 %279, %add538, !dbg !4323
  br i1 %cmp539, label %for.body541, label %for.end595, !dbg !4324

for.body541:                                      ; preds = %for.cond537
  %282 = load i32, i32* %i, align 4, !dbg !4325
  %idxprom542 = sext i32 %282 to i64, !dbg !4325
  %arrayidx543 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom542, !dbg !4325
  %283 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx543, align 8, !dbg !4325
  %284 = bitcast %struct.rtx_def* %283 to i32*, !dbg !4325
  %bf.load544 = load i32, i32* %284, align 8, !dbg !4325
  %bf.clear545 = and i32 %bf.load544, 65535, !dbg !4325
  %cmp546 = icmp eq i32 %bf.clear545, 37, !dbg !4325
  br i1 %cmp546, label %land.lhs.true548, label %if.end592, !dbg !4325

land.lhs.true548:                                 ; preds = %for.body541
  %285 = load i32, i32* %i, align 4, !dbg !4325
  %idxprom549 = sext i32 %285 to i64, !dbg !4325
  %arrayidx550 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom549, !dbg !4325
  %286 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx550, align 8, !dbg !4325
  %call551 = call i32 @rhs_regno(%struct.rtx_def* %286), !dbg !4325
  %conv552 = zext i32 %call551 to i64, !dbg !4325
  %sub553 = sub i64 %conv552, 8, !dbg !4325
  %cmp554 = icmp ule i64 %sub553, 7, !dbg !4325
  br i1 %cmp554, label %if.then556, label %if.end592, !dbg !4327

if.then556:                                       ; preds = %land.lhs.true548
  call void @llvm.dbg.declare(metadata i32* %j557, metadata !4328, metadata !DIExpression()), !dbg !4330
  store i32 0, i32* %j557, align 4, !dbg !4331
  br label %for.cond558, !dbg !4333

for.cond558:                                      ; preds = %for.inc589, %if.then556
  %287 = load i32, i32* %j557, align 4, !dbg !4334
  %288 = load i32, i32* %n_notes, align 4, !dbg !4336
  %cmp559 = icmp slt i32 %287, %288, !dbg !4337
  br i1 %cmp559, label %for.body561, label %for.end591, !dbg !4338

for.body561:                                      ; preds = %for.cond558
  %289 = load i32, i32* %i, align 4, !dbg !4339
  %idxprom562 = sext i32 %289 to i64, !dbg !4339
  %arrayidx563 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom562, !dbg !4339
  %290 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx563, align 8, !dbg !4339
  %call564 = call i32 @rhs_regno(%struct.rtx_def* %290), !dbg !4339
  %291 = load %struct.rtx_def**, %struct.rtx_def*** %note_reg, align 8, !dbg !4341
  %292 = load i32, i32* %j557, align 4, !dbg !4341
  %idxprom565 = sext i32 %292 to i64, !dbg !4341
  %arrayidx566 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %291, i64 %idxprom565, !dbg !4341
  %293 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx566, align 8, !dbg !4341
  %call567 = call i32 @rhs_regno(%struct.rtx_def* %293), !dbg !4341
  %cmp568 = icmp eq i32 %call564, %call567, !dbg !4342
  br i1 %cmp568, label %land.lhs.true570, label %if.end588, !dbg !4343

land.lhs.true570:                                 ; preds = %for.body561
  %294 = load i32*, i32** %note_kind, align 8, !dbg !4344
  %295 = load i32, i32* %j557, align 4, !dbg !4345
  %idxprom571 = sext i32 %295 to i64, !dbg !4344
  %arrayidx572 = getelementptr inbounds i32, i32* %294, i64 %idxprom571, !dbg !4344
  %296 = load i32, i32* %arrayidx572, align 4, !dbg !4344
  %cmp573 = icmp eq i32 %296, 1, !dbg !4346
  br i1 %cmp573, label %land.lhs.true575, label %if.end588, !dbg !4347

land.lhs.true575:                                 ; preds = %land.lhs.true570
  %297 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4348
  %reg_set576 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %297, i32 0, i32 1, !dbg !4348
  %298 = load i64, i64* %reg_set576, align 8, !dbg !4348
  %299 = load i32, i32* %i, align 4, !dbg !4348
  %idxprom577 = sext i32 %299 to i64, !dbg !4348
  %arrayidx578 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom577, !dbg !4348
  %300 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx578, align 8, !dbg !4348
  %call579 = call i32 @rhs_regno(%struct.rtx_def* %300), !dbg !4348
  %sh_prom580 = zext i32 %call579 to i64, !dbg !4348
  %shl581 = shl i64 1, %sh_prom580, !dbg !4348
  %and582 = and i64 %298, %shl581, !dbg !4348
  %tobool583 = icmp ne i64 %and582, 0, !dbg !4348
  br i1 %tobool583, label %if.then584, label %if.end588, !dbg !4349

if.then584:                                       ; preds = %land.lhs.true575
  %301 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4350
  %302 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4352
  %303 = load i32, i32* %i, align 4, !dbg !4353
  %idxprom585 = sext i32 %303 to i64, !dbg !4354
  %arrayidx586 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom585, !dbg !4354
  %304 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx586, align 8, !dbg !4354
  %call587 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %301, %struct.stack_def* %302, %struct.rtx_def* %304, i32 0), !dbg !4355
  store %struct.rtx_def* %call587, %struct.rtx_def** %insn.addr, align 8, !dbg !4356
  br label %for.end591, !dbg !4357

if.end588:                                        ; preds = %land.lhs.true575, %land.lhs.true570, %for.body561
  br label %for.inc589, !dbg !4348

for.inc589:                                       ; preds = %if.end588
  %305 = load i32, i32* %j557, align 4, !dbg !4358
  %inc590 = add nsw i32 %305, 1, !dbg !4358
  store i32 %inc590, i32* %j557, align 4, !dbg !4358
  br label %for.cond558, !dbg !4359, !llvm.loop !4360

for.end591:                                       ; preds = %if.then584, %for.cond558
  br label %if.end592, !dbg !4362

if.end592:                                        ; preds = %for.end591, %land.lhs.true548, %for.body541
  br label %for.inc593, !dbg !4325

for.inc593:                                       ; preds = %if.end592
  %306 = load i32, i32* %i, align 4, !dbg !4363
  %inc594 = add nsw i32 %306, 1, !dbg !4363
  store i32 %inc594, i32* %i, align 4, !dbg !4363
  br label %for.cond537, !dbg !4364, !llvm.loop !4365

for.end595:                                       ; preds = %if.then, %for.cond537
  ret void, !dbg !4367
}

declare dso_local %struct.rtx_def* @shallow_copy_rtx_stat(%struct.rtx_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @subst_stack_regs_pat(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %pat) #0 !dbg !4368 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regstack.addr = alloca %struct.stack_def*, align 8
  %pat.addr = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def**, align 8
  %src = alloca %struct.rtx_def**, align 8
  %control_flow_insn_deleted = alloca i8, align 1
  %note = alloca %struct.rtx_def*, align 8
  %t = alloca %struct.rtx_def*, align 8
  %u66 = alloca %struct.rtx_def*, align 8
  %pat2 = alloca %struct.rtx_def*, align 8
  %insn2 = alloca %struct.rtx_def*, align 8
  %src1 = alloca %struct.rtx_def**, align 8
  %src2 = alloca %struct.rtx_def**, align 8
  %src1_note = alloca %struct.rtx_def*, align 8
  %src2_note = alloca %struct.rtx_def*, align 8
  %pat_src = alloca %struct.rtx_def*, align 8
  %count = alloca i32, align 4
  %src1_hard_regnum = alloca i32, align 4
  %src2_hard_regnum = alloca i32, align 4
  %pat2291 = alloca %struct.rtx_def*, align 8
  %insn2293 = alloca %struct.rtx_def*, align 8
  %pat2304 = alloca %struct.rtx_def*, align 8
  %insn2306 = alloca %struct.rtx_def*, align 8
  %src1_reg = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  %src2_reg = alloca %struct.rtx_def*, align 8
  %regno426 = alloca i32, align 4
  %tmp = alloca i32, align 4
  %idx1 = alloca i32, align 4
  %idx2 = alloca i32, align 4
  %src_note = alloca [3 x %struct.rtx_def*], align 16
  %i = alloca i32, align 4
  %regno962 = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4371, metadata !DIExpression()), !dbg !4372
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !4373, metadata !DIExpression()), !dbg !4374
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !4375, metadata !DIExpression()), !dbg !4376
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %dest, metadata !4377, metadata !DIExpression()), !dbg !4378
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %src, metadata !4379, metadata !DIExpression()), !dbg !4380
  call void @llvm.dbg.declare(metadata i8* %control_flow_insn_deleted, metadata !4381, metadata !DIExpression()), !dbg !4382
  store i8 0, i8* %control_flow_insn_deleted, align 1, !dbg !4382
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4383
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4383
  %bf.load = load i32, i32* %1, align 8, !dbg !4383
  %bf.clear = and i32 %bf.load, 65535, !dbg !4383
  switch i32 %bf.clear, label %sw.default1010 [
    i32 24, label %sw.bb
    i32 138, label %sw.bb14
    i32 25, label %sw.bb15
    i32 23, label %sw.bb97
  ], !dbg !4384

sw.bb:                                            ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4385
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4385
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4385
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4385
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4385
  %call = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx), !dbg !4387
  store %struct.rtx_def** %call, %struct.rtx_def*** %src, align 8, !dbg !4388
  %3 = load %struct.rtx_def**, %struct.rtx_def*** %src, align 8, !dbg !4389
  %4 = load %struct.rtx_def*, %struct.rtx_def** %3, align 8, !dbg !4389
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4389
  %bf.load1 = load i32, i32* %5, align 8, !dbg !4389
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4389
  %cmp = icmp eq i32 %bf.clear2, 37, !dbg !4389
  br i1 %cmp, label %land.lhs.true, label %if.end13, !dbg !4389

land.lhs.true:                                    ; preds = %sw.bb
  %6 = load %struct.rtx_def**, %struct.rtx_def*** %src, align 8, !dbg !4389
  %7 = load %struct.rtx_def*, %struct.rtx_def** %6, align 8, !dbg !4389
  %call3 = call i32 @rhs_regno(%struct.rtx_def* %7), !dbg !4389
  %conv = zext i32 %call3 to i64, !dbg !4389
  %sub = sub i64 %conv, 8, !dbg !4389
  %cmp4 = icmp ule i64 %sub, 7, !dbg !4389
  br i1 %cmp4, label %land.lhs.true6, label %if.end13, !dbg !4391

land.lhs.true6:                                   ; preds = %land.lhs.true
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4392
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %src, align 8, !dbg !4393
  %10 = load %struct.rtx_def*, %struct.rtx_def** %9, align 8, !dbg !4393
  %call7 = call i32 @rhs_regno(%struct.rtx_def* %10), !dbg !4393
  %call8 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %8, i32 1, i32 %call7), !dbg !4394
  %tobool = icmp ne %struct.rtx_def* %call8, null, !dbg !4394
  br i1 %tobool, label %if.then, label %if.end13, !dbg !4395

if.then:                                          ; preds = %land.lhs.true6
  %11 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4396
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %11, i32 0, i32 1, !dbg !4396
  %12 = load i64, i64* %reg_set, align 8, !dbg !4396
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %src, align 8, !dbg !4396
  %14 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8, !dbg !4396
  %call9 = call i32 @rhs_regno(%struct.rtx_def* %14), !dbg !4396
  %sh_prom = zext i32 %call9 to i64, !dbg !4396
  %shl = shl i64 1, %sh_prom, !dbg !4396
  %and = and i64 %12, %shl, !dbg !4396
  %tobool10 = icmp ne i64 %and, 0, !dbg !4396
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !4399

if.then11:                                        ; preds = %if.then
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4400
  %16 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4401
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %src, align 8, !dbg !4402
  %18 = load %struct.rtx_def*, %struct.rtx_def** %17, align 8, !dbg !4403
  %call12 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %15, %struct.stack_def* %16, %struct.rtx_def* %18, i32 0), !dbg !4404
  br label %if.end, !dbg !4404

if.end:                                           ; preds = %if.then11, %if.then
  %19 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !4405
  store i8 %19, i8* %retval, align 1, !dbg !4406
  br label %return, !dbg !4406

if.end13:                                         ; preds = %land.lhs.true6, %land.lhs.true, %sw.bb
  br label %sw.epilog1011, !dbg !4407

sw.bb14:                                          ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1378, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4408
  br label %sw.bb15, !dbg !4408

sw.bb15:                                          ; preds = %entry, %sw.bb14
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4409, metadata !DIExpression()), !dbg !4411
  %20 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4412
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4412
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !4412
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 0, !dbg !4412
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !4412
  %call20 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx19), !dbg !4413
  store %struct.rtx_def** %call20, %struct.rtx_def*** %dest, align 8, !dbg !4414
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4415
  %22 = load %struct.rtx_def*, %struct.rtx_def** %21, align 8, !dbg !4415
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !4415
  %bf.load21 = load i32, i32* %23, align 8, !dbg !4415
  %bf.clear22 = and i32 %bf.load21, 65535, !dbg !4415
  %cmp23 = icmp eq i32 %bf.clear22, 37, !dbg !4415
  br i1 %cmp23, label %land.lhs.true25, label %if.end96, !dbg !4415

land.lhs.true25:                                  ; preds = %sw.bb15
  %24 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4415
  %25 = load %struct.rtx_def*, %struct.rtx_def** %24, align 8, !dbg !4415
  %call26 = call i32 @rhs_regno(%struct.rtx_def* %25), !dbg !4415
  %conv27 = zext i32 %call26 to i64, !dbg !4415
  %sub28 = sub i64 %conv27, 8, !dbg !4415
  %cmp29 = icmp ule i64 %sub28, 7, !dbg !4415
  br i1 %cmp29, label %if.then31, label %if.end96, !dbg !4417

if.then31:                                        ; preds = %land.lhs.true25
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4418
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4420
  %28 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8, !dbg !4421
  %call32 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %26, i32 1, %struct.rtx_def* %28), !dbg !4422
  store %struct.rtx_def* %call32, %struct.rtx_def** %note, align 8, !dbg !4423
  %29 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4424
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4426
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !4426
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !4426
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 5, !dbg !4426
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !4426
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx36, align 8, !dbg !4426
  %cmp37 = icmp ne %struct.rtx_def* %29, %31, !dbg !4427
  br i1 %cmp37, label %if.then39, label %if.else48, !dbg !4428

if.then39:                                        ; preds = %if.then31
  %32 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4429
  %tobool40 = icmp ne %struct.rtx_def* %32, null, !dbg !4429
  br i1 %tobool40, label %if.then41, label %if.else, !dbg !4432

if.then41:                                        ; preds = %if.then39
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4433
  %34 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4434
  %35 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4435
  %36 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8, !dbg !4436
  %call42 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %33, %struct.stack_def* %34, %struct.rtx_def* %36, i32 1), !dbg !4437
  br label %if.end44, !dbg !4437

if.else:                                          ; preds = %if.then39
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4438
  %38 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4439
  %39 = load %struct.rtx_def*, %struct.rtx_def** %38, align 8, !dbg !4440
  %call43 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %37, i32 6, %struct.rtx_def* %39), !dbg !4441
  store %struct.rtx_def* %call43, %struct.rtx_def** %note, align 8, !dbg !4442
  br label %if.end44

if.end44:                                         ; preds = %if.else, %if.then41
  %40 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4443
  %tobool45 = icmp ne %struct.rtx_def* %40, null, !dbg !4443
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !4445

if.then46:                                        ; preds = %if.end44
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4446
  %42 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4447
  call void @remove_note(%struct.rtx_def* %41, %struct.rtx_def* %42), !dbg !4448
  br label %if.end47, !dbg !4448

if.end47:                                         ; preds = %if.then46, %if.end44
  %43 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4449
  call void @replace_reg(%struct.rtx_def** %43, i32 9), !dbg !4450
  br label %if.end95, !dbg !4451

if.else48:                                        ; preds = %if.then31
  %44 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4452
  %tobool49 = icmp ne %struct.rtx_def* %44, null, !dbg !4452
  br i1 %tobool49, label %if.end94, label %if.then50, !dbg !4455

if.then50:                                        ; preds = %if.else48
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t, metadata !4456, metadata !DIExpression()), !dbg !4458
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4459
  %46 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8, !dbg !4460
  store %struct.rtx_def* %46, %struct.rtx_def** %t, align 8, !dbg !4458
  %47 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !4461
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !4461
  %bf.load51 = load i32, i32* %48, align 8, !dbg !4461
  %bf.lshr = lshr i32 %bf.load51, 16, !dbg !4461
  %bf.clear52 = and i32 %bf.lshr, 255, !dbg !4461
  %idxprom = zext i32 %bf.clear52 to i64, !dbg !4461
  %arrayidx53 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !4461
  %49 = load i8, i8* %arrayidx53, align 1, !dbg !4461
  %conv54 = zext i8 %49 to i32, !dbg !4461
  %cmp55 = icmp eq i32 %conv54, 10, !dbg !4461
  br i1 %cmp55, label %if.then65, label %lor.lhs.false, !dbg !4461

lor.lhs.false:                                    ; preds = %if.then50
  %50 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !4461
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !4461
  %bf.load57 = load i32, i32* %51, align 8, !dbg !4461
  %bf.lshr58 = lshr i32 %bf.load57, 16, !dbg !4461
  %bf.clear59 = and i32 %bf.lshr58, 255, !dbg !4461
  %idxprom60 = zext i32 %bf.clear59 to i64, !dbg !4461
  %arrayidx61 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom60, !dbg !4461
  %52 = load i8, i8* %arrayidx61, align 1, !dbg !4461
  %conv62 = zext i8 %52 to i32, !dbg !4461
  %cmp63 = icmp eq i32 %conv62, 11, !dbg !4461
  br i1 %cmp63, label %if.then65, label %if.end83, !dbg !4463

if.then65:                                        ; preds = %lor.lhs.false, %if.then50
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %u66, metadata !4464, metadata !DIExpression()), !dbg !4466
  %53 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !4467
  %call67 = call i32 @rhs_regno(%struct.rtx_def* %53), !dbg !4467
  %add = add i32 %call67, 1, !dbg !4467
  %sub68 = sub i32 %add, 8, !dbg !4467
  %idxprom69 = zext i32 %sub68 to i64, !dbg !4467
  %arrayidx70 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom69, !dbg !4467
  %arrayidx71 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx70, i64 0, i64 38, !dbg !4467
  %54 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx71, align 8, !dbg !4467
  store %struct.rtx_def* %54, %struct.rtx_def** %u66, align 8, !dbg !4466
  %55 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4468
  %56 = load %struct.rtx_def*, %struct.rtx_def** %u66, align 8, !dbg !4470
  %call72 = call i32 @get_hard_regnum(%struct.stack_def* %55, %struct.rtx_def* %56), !dbg !4471
  %cmp73 = icmp eq i32 %call72, -1, !dbg !4472
  br i1 %cmp73, label %if.then75, label %if.end82, !dbg !4473

if.then75:                                        ; preds = %if.then65
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat2, metadata !4474, metadata !DIExpression()), !dbg !4476
  %57 = load %struct.rtx_def*, %struct.rtx_def** %u66, align 8, !dbg !4477
  %call76 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 25, i32 0, %struct.rtx_def* %57), !dbg !4477
  store %struct.rtx_def* %call76, %struct.rtx_def** %pat2, align 8, !dbg !4476
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn2, metadata !4478, metadata !DIExpression()), !dbg !4479
  %58 = load %struct.rtx_def*, %struct.rtx_def** %pat2, align 8, !dbg !4480
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4481
  %call77 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %58, %struct.rtx_def* %59), !dbg !4482
  store %struct.rtx_def* %call77, %struct.rtx_def** %insn2, align 8, !dbg !4479
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn2, align 8, !dbg !4483
  %61 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4484
  %62 = load %struct.rtx_def*, %struct.rtx_def** %u66, align 8, !dbg !4485
  %call78 = call zeroext i8 @move_nan_for_stack_reg(%struct.rtx_def* %60, %struct.stack_def* %61, %struct.rtx_def* %62), !dbg !4486
  %conv79 = zext i8 %call78 to i32, !dbg !4486
  %63 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !4487
  %conv80 = zext i8 %63 to i32, !dbg !4487
  %or = or i32 %conv80, %conv79, !dbg !4487
  %conv81 = trunc i32 %or to i8, !dbg !4487
  store i8 %conv81, i8* %control_flow_insn_deleted, align 1, !dbg !4487
  br label %if.end82, !dbg !4488

if.end82:                                         ; preds = %if.then75, %if.then65
  br label %if.end83, !dbg !4489

if.end83:                                         ; preds = %if.end82, %lor.lhs.false
  %64 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4490
  %65 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !4492
  %call84 = call i32 @get_hard_regnum(%struct.stack_def* %64, %struct.rtx_def* %65), !dbg !4493
  %cmp85 = icmp eq i32 %call84, -1, !dbg !4494
  br i1 %cmp85, label %if.then87, label %if.end93, !dbg !4495

if.then87:                                        ; preds = %if.end83
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4496
  %67 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4497
  %68 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !4498
  %call88 = call zeroext i8 @move_nan_for_stack_reg(%struct.rtx_def* %66, %struct.stack_def* %67, %struct.rtx_def* %68), !dbg !4499
  %conv89 = zext i8 %call88 to i32, !dbg !4499
  %69 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !4500
  %conv90 = zext i8 %69 to i32, !dbg !4500
  %or91 = or i32 %conv90, %conv89, !dbg !4500
  %conv92 = trunc i32 %or91 to i8, !dbg !4500
  store i8 %conv92, i8* %control_flow_insn_deleted, align 1, !dbg !4500
  br label %if.end93, !dbg !4501

if.end93:                                         ; preds = %if.then87, %if.end83
  br label %if.end94, !dbg !4502

if.end94:                                         ; preds = %if.end93, %if.else48
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %if.end47
  br label %if.end96, !dbg !4503

if.end96:                                         ; preds = %if.end95, %land.lhs.true25, %sw.bb15
  br label %sw.epilog1011, !dbg !4504

sw.bb97:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %src1, metadata !4505, metadata !DIExpression()), !dbg !4507
  store %struct.rtx_def** null, %struct.rtx_def*** %src1, align 8, !dbg !4507
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %src2, metadata !4508, metadata !DIExpression()), !dbg !4509
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src1_note, metadata !4510, metadata !DIExpression()), !dbg !4511
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src2_note, metadata !4512, metadata !DIExpression()), !dbg !4513
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat_src, metadata !4514, metadata !DIExpression()), !dbg !4515
  %70 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4516
  %u98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !4516
  %fld99 = bitcast %union.u* %u98 to [1 x %union.rtunion_def]*, !dbg !4516
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i64 0, i64 0, !dbg !4516
  %rt_rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**, !dbg !4516
  %call102 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx101), !dbg !4517
  store %struct.rtx_def** %call102, %struct.rtx_def*** %dest, align 8, !dbg !4518
  %71 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4519
  %u103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !4519
  %fld104 = bitcast %union.u* %u103 to [1 x %union.rtunion_def]*, !dbg !4519
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i64 0, i64 1, !dbg !4519
  %rt_rtx106 = bitcast %union.rtunion_def* %arrayidx105 to %struct.rtx_def**, !dbg !4519
  %call107 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx106), !dbg !4520
  store %struct.rtx_def** %call107, %struct.rtx_def*** %src, align 8, !dbg !4521
  %72 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4522
  %u108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !4522
  %fld109 = bitcast %union.u* %u108 to [1 x %union.rtunion_def]*, !dbg !4522
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i64 0, i64 1, !dbg !4522
  %rt_rtx111 = bitcast %union.rtunion_def* %arrayidx110 to %struct.rtx_def**, !dbg !4522
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx111, align 8, !dbg !4522
  store %struct.rtx_def* %73, %struct.rtx_def** %pat_src, align 8, !dbg !4523
  %74 = load %struct.rtx_def**, %struct.rtx_def*** %src, align 8, !dbg !4524
  %75 = load %struct.rtx_def*, %struct.rtx_def** %74, align 8, !dbg !4524
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !4524
  %bf.load112 = load i32, i32* %76, align 8, !dbg !4524
  %bf.clear113 = and i32 %bf.load112, 65535, !dbg !4524
  %cmp114 = icmp eq i32 %bf.clear113, 37, !dbg !4524
  br i1 %cmp114, label %land.lhs.true116, label %lor.lhs.false122, !dbg !4524

land.lhs.true116:                                 ; preds = %sw.bb97
  %77 = load %struct.rtx_def**, %struct.rtx_def*** %src, align 8, !dbg !4524
  %78 = load %struct.rtx_def*, %struct.rtx_def** %77, align 8, !dbg !4524
  %call117 = call i32 @rhs_regno(%struct.rtx_def* %78), !dbg !4524
  %conv118 = zext i32 %call117 to i64, !dbg !4524
  %sub119 = sub i64 %conv118, 8, !dbg !4524
  %cmp120 = icmp ule i64 %sub119, 7, !dbg !4524
  br i1 %cmp120, label %if.then148, label %lor.lhs.false122, !dbg !4526

lor.lhs.false122:                                 ; preds = %land.lhs.true116, %sw.bb97
  %79 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4527
  %80 = load %struct.rtx_def*, %struct.rtx_def** %79, align 8, !dbg !4527
  %81 = bitcast %struct.rtx_def* %80 to i32*, !dbg !4527
  %bf.load123 = load i32, i32* %81, align 8, !dbg !4527
  %bf.clear124 = and i32 %bf.load123, 65535, !dbg !4527
  %cmp125 = icmp eq i32 %bf.clear124, 37, !dbg !4527
  br i1 %cmp125, label %land.lhs.true127, label %if.end154, !dbg !4527

land.lhs.true127:                                 ; preds = %lor.lhs.false122
  %82 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4527
  %83 = load %struct.rtx_def*, %struct.rtx_def** %82, align 8, !dbg !4527
  %call128 = call i32 @rhs_regno(%struct.rtx_def* %83), !dbg !4527
  %conv129 = zext i32 %call128 to i64, !dbg !4527
  %sub130 = sub i64 %conv129, 8, !dbg !4527
  %cmp131 = icmp ule i64 %sub130, 7, !dbg !4527
  br i1 %cmp131, label %land.lhs.true133, label %if.end154, !dbg !4528

land.lhs.true133:                                 ; preds = %land.lhs.true127
  %84 = load %struct.rtx_def**, %struct.rtx_def*** %src, align 8, !dbg !4529
  %85 = load %struct.rtx_def*, %struct.rtx_def** %84, align 8, !dbg !4529
  %86 = bitcast %struct.rtx_def* %85 to i32*, !dbg !4529
  %bf.load134 = load i32, i32* %86, align 8, !dbg !4529
  %bf.clear135 = and i32 %bf.load134, 65535, !dbg !4529
  %cmp136 = icmp eq i32 %bf.clear135, 37, !dbg !4529
  br i1 %cmp136, label %if.then148, label %lor.lhs.false138, !dbg !4530

lor.lhs.false138:                                 ; preds = %land.lhs.true133
  %87 = load %struct.rtx_def**, %struct.rtx_def*** %src, align 8, !dbg !4531
  %88 = load %struct.rtx_def*, %struct.rtx_def** %87, align 8, !dbg !4531
  %89 = bitcast %struct.rtx_def* %88 to i32*, !dbg !4531
  %bf.load139 = load i32, i32* %89, align 8, !dbg !4531
  %bf.clear140 = and i32 %bf.load139, 65535, !dbg !4531
  %cmp141 = icmp eq i32 %bf.clear140, 43, !dbg !4531
  br i1 %cmp141, label %if.then148, label %lor.lhs.false143, !dbg !4532

lor.lhs.false143:                                 ; preds = %lor.lhs.false138
  %90 = load %struct.rtx_def**, %struct.rtx_def*** %src, align 8, !dbg !4533
  %91 = load %struct.rtx_def*, %struct.rtx_def** %90, align 8, !dbg !4533
  %92 = bitcast %struct.rtx_def* %91 to i32*, !dbg !4533
  %bf.load144 = load i32, i32* %92, align 8, !dbg !4533
  %bf.clear145 = and i32 %bf.load144, 65535, !dbg !4533
  %cmp146 = icmp eq i32 %bf.clear145, 32, !dbg !4534
  br i1 %cmp146, label %if.then148, label %if.end154, !dbg !4535

if.then148:                                       ; preds = %lor.lhs.false143, %lor.lhs.false138, %land.lhs.true133, %land.lhs.true116
  %93 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4536
  %94 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4538
  %95 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !4539
  %call149 = call zeroext i8 @move_for_stack_reg(%struct.rtx_def* %93, %struct.stack_def* %94, %struct.rtx_def* %95), !dbg !4540
  %conv150 = zext i8 %call149 to i32, !dbg !4540
  %96 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !4541
  %conv151 = zext i8 %96 to i32, !dbg !4541
  %or152 = or i32 %conv151, %conv150, !dbg !4541
  %conv153 = trunc i32 %or152 to i8, !dbg !4541
  store i8 %conv153, i8* %control_flow_insn_deleted, align 1, !dbg !4541
  br label %sw.epilog1011, !dbg !4542

if.end154:                                        ; preds = %lor.lhs.false143, %land.lhs.true127, %lor.lhs.false122
  %97 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4543
  %98 = bitcast %struct.rtx_def* %97 to i32*, !dbg !4543
  %bf.load155 = load i32, i32* %98, align 8, !dbg !4543
  %bf.clear156 = and i32 %bf.load155, 65535, !dbg !4543
  switch i32 %bf.clear156, label %sw.default1008 [
    i32 48, label %sw.bb157
    i32 26, label %sw.bb158
    i32 37, label %sw.bb181
    i32 102, label %sw.bb184
    i32 112, label %sw.bb184
    i32 111, label %sw.bb184
    i32 51, label %sw.bb184
    i32 50, label %sw.bb222
    i32 55, label %sw.bb222
    i32 52, label %sw.bb222
    i32 49, label %sw.bb222
    i32 18, label %sw.bb494
    i32 47, label %sw.bb843
  ], !dbg !4544

sw.bb157:                                         ; preds = %if.end154
  %99 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4545
  %100 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4547
  %101 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4548
  call void @compare_for_stack_reg(%struct.rtx_def* %99, %struct.stack_def* %100, %struct.rtx_def* %101), !dbg !4549
  br label %sw.epilog1009, !dbg !4550

sw.bb158:                                         ; preds = %if.end154
  call void @llvm.dbg.declare(metadata i32* %count, metadata !4551, metadata !DIExpression()), !dbg !4553
  %102 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4554
  %103 = load %struct.rtx_def*, %struct.rtx_def** %102, align 8, !dbg !4554
  %call159 = call i32 @rhs_regno(%struct.rtx_def* %103), !dbg !4554
  %idxprom160 = zext i32 %call159 to i64, !dbg !4556
  %arrayidx161 = getelementptr inbounds [53 x [87 x i8]], [53 x [87 x i8]]* @hard_regno_nregs, i64 0, i64 %idxprom160, !dbg !4556
  %104 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4557
  %105 = load %struct.rtx_def*, %struct.rtx_def** %104, align 8, !dbg !4557
  %106 = bitcast %struct.rtx_def* %105 to i32*, !dbg !4557
  %bf.load162 = load i32, i32* %106, align 8, !dbg !4557
  %bf.lshr163 = lshr i32 %bf.load162, 16, !dbg !4557
  %bf.clear164 = and i32 %bf.lshr163, 255, !dbg !4557
  %idxprom165 = zext i32 %bf.clear164 to i64, !dbg !4556
  %arrayidx166 = getelementptr inbounds [87 x i8], [87 x i8]* %arrayidx161, i64 0, i64 %idxprom165, !dbg !4556
  %107 = load i8, i8* %arrayidx166, align 1, !dbg !4556
  %conv167 = zext i8 %107 to i32, !dbg !4556
  store i32 %conv167, i32* %count, align 4, !dbg !4558
  br label %for.cond, !dbg !4559

for.cond:                                         ; preds = %for.body, %sw.bb158
  %108 = load i32, i32* %count, align 4, !dbg !4560
  %dec = add nsw i32 %108, -1, !dbg !4560
  store i32 %dec, i32* %count, align 4, !dbg !4560
  %cmp168 = icmp sge i32 %dec, 0, !dbg !4562
  br i1 %cmp168, label %for.body, label %for.end, !dbg !4563

for.body:                                         ; preds = %for.cond
  %109 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4564
  %110 = load %struct.rtx_def*, %struct.rtx_def** %109, align 8, !dbg !4564
  %call170 = call i32 @rhs_regno(%struct.rtx_def* %110), !dbg !4564
  %111 = load i32, i32* %count, align 4, !dbg !4566
  %add171 = add i32 %call170, %111, !dbg !4567
  %conv172 = trunc i32 %add171 to i8, !dbg !4564
  %112 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4568
  %reg = getelementptr inbounds %struct.stack_def, %struct.stack_def* %112, i32 0, i32 2, !dbg !4569
  %113 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4570
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %113, i32 0, i32 0, !dbg !4571
  %114 = load i32, i32* %top, align 8, !dbg !4572
  %inc = add nsw i32 %114, 1, !dbg !4572
  store i32 %inc, i32* %top, align 8, !dbg !4572
  %idxprom173 = sext i32 %inc to i64, !dbg !4568
  %arrayidx174 = getelementptr inbounds [8 x i8], [8 x i8]* %reg, i64 0, i64 %idxprom173, !dbg !4568
  store i8 %conv172, i8* %arrayidx174, align 1, !dbg !4573
  %115 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4574
  %116 = load %struct.rtx_def*, %struct.rtx_def** %115, align 8, !dbg !4574
  %call175 = call i32 @rhs_regno(%struct.rtx_def* %116), !dbg !4574
  %117 = load i32, i32* %count, align 4, !dbg !4574
  %add176 = add i32 %call175, %117, !dbg !4574
  %sh_prom177 = zext i32 %add176 to i64, !dbg !4574
  %shl178 = shl i64 1, %sh_prom177, !dbg !4574
  %118 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4574
  %reg_set179 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %118, i32 0, i32 1, !dbg !4574
  %119 = load i64, i64* %reg_set179, align 8, !dbg !4574
  %or180 = or i64 %119, %shl178, !dbg !4574
  store i64 %or180, i64* %reg_set179, align 8, !dbg !4574
  br label %for.cond, !dbg !4575, !llvm.loop !4576

for.end:                                          ; preds = %for.cond
  %120 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4578
  call void @replace_reg(%struct.rtx_def** %120, i32 8), !dbg !4579
  br label %sw.epilog1009, !dbg !4580

sw.bb181:                                         ; preds = %if.end154
  %121 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4581
  %122 = load %struct.rtx_def*, %struct.rtx_def** %121, align 8, !dbg !4581
  %123 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 1), align 8, !dbg !4581
  %cmp182 = icmp eq %struct.rtx_def* %122, %123, !dbg !4581
  br i1 %cmp182, label %cond.false, label %cond.true, !dbg !4581

cond.true:                                        ; preds = %sw.bb181
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1481, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4581
  br label %cond.end, !dbg !4581

cond.false:                                       ; preds = %sw.bb181
  br label %cond.end, !dbg !4581

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4581
  %124 = load %struct.rtx_def**, %struct.rtx_def*** %src, align 8, !dbg !4582
  store %struct.rtx_def** %124, %struct.rtx_def*** %src1, align 8, !dbg !4583
  br label %sw.bb184, !dbg !4584

sw.bb184:                                         ; preds = %if.end154, %if.end154, %if.end154, %if.end154, %cond.end
  %125 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4585
  %cmp185 = icmp eq %struct.rtx_def** %125, null, !dbg !4587
  br i1 %cmp185, label %if.then187, label %if.end193, !dbg !4588

if.then187:                                       ; preds = %sw.bb184
  %126 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4589
  %u188 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %126, i32 0, i32 1, !dbg !4589
  %fld189 = bitcast %union.u* %u188 to [1 x %union.rtunion_def]*, !dbg !4589
  %arrayidx190 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld189, i64 0, i64 0, !dbg !4589
  %rt_rtx191 = bitcast %union.rtunion_def* %arrayidx190 to %struct.rtx_def**, !dbg !4589
  %call192 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx191), !dbg !4590
  store %struct.rtx_def** %call192, %struct.rtx_def*** %src1, align 8, !dbg !4591
  br label %if.end193, !dbg !4592

if.end193:                                        ; preds = %if.then187, %sw.bb184
  %127 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4593
  %128 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4594
  %129 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4595
  %130 = load %struct.rtx_def*, %struct.rtx_def** %129, align 8, !dbg !4596
  call void @emit_swap_insn(%struct.rtx_def* %127, %struct.stack_def* %128, %struct.rtx_def* %130), !dbg !4597
  %131 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4598
  %132 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4599
  %133 = load %struct.rtx_def*, %struct.rtx_def** %132, align 8, !dbg !4599
  %call194 = call i32 @rhs_regno(%struct.rtx_def* %133), !dbg !4599
  %call195 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %131, i32 1, i32 %call194), !dbg !4600
  store %struct.rtx_def* %call195, %struct.rtx_def** %src1_note, align 8, !dbg !4601
  %134 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4602
  %135 = load %struct.rtx_def*, %struct.rtx_def** %134, align 8, !dbg !4602
  %136 = bitcast %struct.rtx_def* %135 to i32*, !dbg !4602
  %bf.load196 = load i32, i32* %136, align 8, !dbg !4602
  %bf.clear197 = and i32 %bf.load196, 65535, !dbg !4602
  %cmp198 = icmp eq i32 %bf.clear197, 37, !dbg !4602
  br i1 %cmp198, label %land.lhs.true200, label %if.end207, !dbg !4602

land.lhs.true200:                                 ; preds = %if.end193
  %137 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4602
  %138 = load %struct.rtx_def*, %struct.rtx_def** %137, align 8, !dbg !4602
  %call201 = call i32 @rhs_regno(%struct.rtx_def* %138), !dbg !4602
  %conv202 = zext i32 %call201 to i64, !dbg !4602
  %sub203 = sub i64 %conv202, 8, !dbg !4602
  %cmp204 = icmp ule i64 %sub203, 7, !dbg !4602
  br i1 %cmp204, label %if.then206, label %if.end207, !dbg !4604

if.then206:                                       ; preds = %land.lhs.true200
  %139 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4605
  call void @replace_reg(%struct.rtx_def** %139, i32 8), !dbg !4606
  br label %if.end207, !dbg !4606

if.end207:                                        ; preds = %if.then206, %land.lhs.true200, %if.end193
  %140 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4607
  %tobool208 = icmp ne %struct.rtx_def* %140, null, !dbg !4607
  br i1 %tobool208, label %if.then209, label %if.end221, !dbg !4609

if.then209:                                       ; preds = %if.end207
  %141 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4610
  %u210 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %141, i32 0, i32 1, !dbg !4610
  %fld211 = bitcast %union.u* %u210 to [1 x %union.rtunion_def]*, !dbg !4610
  %arrayidx212 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld211, i64 0, i64 0, !dbg !4610
  %rt_rtx213 = bitcast %union.rtunion_def* %arrayidx212 to %struct.rtx_def**, !dbg !4610
  call void @replace_reg(%struct.rtx_def** %rt_rtx213, i32 8), !dbg !4612
  %142 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4613
  %top214 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %142, i32 0, i32 0, !dbg !4614
  %143 = load i32, i32* %top214, align 8, !dbg !4615
  %dec215 = add nsw i32 %143, -1, !dbg !4615
  store i32 %dec215, i32* %top214, align 8, !dbg !4615
  %144 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4616
  %145 = load %struct.rtx_def*, %struct.rtx_def** %144, align 8, !dbg !4616
  %call216 = call i32 @rhs_regno(%struct.rtx_def* %145), !dbg !4616
  %sh_prom217 = zext i32 %call216 to i64, !dbg !4616
  %shl218 = shl i64 1, %sh_prom217, !dbg !4616
  %neg = xor i64 %shl218, -1, !dbg !4616
  %146 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4616
  %reg_set219 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %146, i32 0, i32 1, !dbg !4616
  %147 = load i64, i64* %reg_set219, align 8, !dbg !4616
  %and220 = and i64 %147, %neg, !dbg !4616
  store i64 %and220, i64* %reg_set219, align 8, !dbg !4616
  br label %if.end221, !dbg !4617

if.end221:                                        ; preds = %if.then209, %if.end207
  %148 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4618
  call void @replace_reg(%struct.rtx_def** %148, i32 8), !dbg !4619
  br label %sw.epilog1009, !dbg !4620

sw.bb222:                                         ; preds = %if.end154, %if.end154, %if.end154, %if.end154
  %149 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4621
  %u223 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %149, i32 0, i32 1, !dbg !4621
  %fld224 = bitcast %union.u* %u223 to [1 x %union.rtunion_def]*, !dbg !4621
  %arrayidx225 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld224, i64 0, i64 0, !dbg !4621
  %rt_rtx226 = bitcast %union.rtunion_def* %arrayidx225 to %struct.rtx_def**, !dbg !4621
  %call227 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx226), !dbg !4622
  store %struct.rtx_def** %call227, %struct.rtx_def*** %src1, align 8, !dbg !4623
  %150 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4624
  %u228 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %150, i32 0, i32 1, !dbg !4624
  %fld229 = bitcast %union.u* %u228 to [1 x %union.rtunion_def]*, !dbg !4624
  %arrayidx230 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld229, i64 0, i64 1, !dbg !4624
  %rt_rtx231 = bitcast %union.rtunion_def* %arrayidx230 to %struct.rtx_def**, !dbg !4624
  %call232 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx231), !dbg !4625
  store %struct.rtx_def** %call232, %struct.rtx_def*** %src2, align 8, !dbg !4626
  %151 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4627
  %152 = load %struct.rtx_def*, %struct.rtx_def** %151, align 8, !dbg !4627
  %153 = bitcast %struct.rtx_def* %152 to i32*, !dbg !4627
  %bf.load233 = load i32, i32* %153, align 8, !dbg !4627
  %bf.clear234 = and i32 %bf.load233, 65535, !dbg !4627
  %cmp235 = icmp eq i32 %bf.clear234, 37, !dbg !4627
  br i1 %cmp235, label %land.lhs.true237, label %if.else246, !dbg !4627

land.lhs.true237:                                 ; preds = %sw.bb222
  %154 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4627
  %155 = load %struct.rtx_def*, %struct.rtx_def** %154, align 8, !dbg !4627
  %call238 = call i32 @rhs_regno(%struct.rtx_def* %155), !dbg !4627
  %conv239 = zext i32 %call238 to i64, !dbg !4627
  %sub240 = sub i64 %conv239, 8, !dbg !4627
  %cmp241 = icmp ule i64 %sub240, 7, !dbg !4627
  br i1 %cmp241, label %if.then243, label %if.else246, !dbg !4629

if.then243:                                       ; preds = %land.lhs.true237
  %156 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4630
  %157 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4631
  %158 = load %struct.rtx_def*, %struct.rtx_def** %157, align 8, !dbg !4631
  %call244 = call i32 @rhs_regno(%struct.rtx_def* %158), !dbg !4631
  %call245 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %156, i32 1, i32 %call244), !dbg !4632
  store %struct.rtx_def* %call245, %struct.rtx_def** %src1_note, align 8, !dbg !4633
  br label %if.end247, !dbg !4634

if.else246:                                       ; preds = %land.lhs.true237, %sw.bb222
  store %struct.rtx_def* null, %struct.rtx_def** %src1_note, align 8, !dbg !4635
  br label %if.end247

if.end247:                                        ; preds = %if.else246, %if.then243
  %159 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4636
  %160 = load %struct.rtx_def*, %struct.rtx_def** %159, align 8, !dbg !4636
  %161 = bitcast %struct.rtx_def* %160 to i32*, !dbg !4636
  %bf.load248 = load i32, i32* %161, align 8, !dbg !4636
  %bf.clear249 = and i32 %bf.load248, 65535, !dbg !4636
  %cmp250 = icmp eq i32 %bf.clear249, 37, !dbg !4636
  br i1 %cmp250, label %land.lhs.true252, label %if.else261, !dbg !4636

land.lhs.true252:                                 ; preds = %if.end247
  %162 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4636
  %163 = load %struct.rtx_def*, %struct.rtx_def** %162, align 8, !dbg !4636
  %call253 = call i32 @rhs_regno(%struct.rtx_def* %163), !dbg !4636
  %conv254 = zext i32 %call253 to i64, !dbg !4636
  %sub255 = sub i64 %conv254, 8, !dbg !4636
  %cmp256 = icmp ule i64 %sub255, 7, !dbg !4636
  br i1 %cmp256, label %if.then258, label %if.else261, !dbg !4638

if.then258:                                       ; preds = %land.lhs.true252
  %164 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4639
  %165 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4640
  %166 = load %struct.rtx_def*, %struct.rtx_def** %165, align 8, !dbg !4640
  %call259 = call i32 @rhs_regno(%struct.rtx_def* %166), !dbg !4640
  %call260 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %164, i32 1, i32 %call259), !dbg !4641
  store %struct.rtx_def* %call260, %struct.rtx_def** %src2_note, align 8, !dbg !4642
  br label %if.end262, !dbg !4643

if.else261:                                       ; preds = %land.lhs.true252, %if.end247
  store %struct.rtx_def* null, %struct.rtx_def** %src2_note, align 8, !dbg !4644
  br label %if.end262

if.end262:                                        ; preds = %if.else261, %if.then258
  %167 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4645
  %168 = load %struct.rtx_def*, %struct.rtx_def** %167, align 8, !dbg !4645
  %169 = bitcast %struct.rtx_def* %168 to i32*, !dbg !4645
  %bf.load263 = load i32, i32* %169, align 8, !dbg !4645
  %bf.clear264 = and i32 %bf.load263, 65535, !dbg !4645
  %cmp265 = icmp eq i32 %bf.clear264, 37, !dbg !4645
  br i1 %cmp265, label %land.lhs.true267, label %if.then284, !dbg !4645

land.lhs.true267:                                 ; preds = %if.end262
  %170 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4645
  %171 = load %struct.rtx_def*, %struct.rtx_def** %170, align 8, !dbg !4645
  %call268 = call i32 @rhs_regno(%struct.rtx_def* %171), !dbg !4645
  %conv269 = zext i32 %call268 to i64, !dbg !4645
  %sub270 = sub i64 %conv269, 8, !dbg !4645
  %cmp271 = icmp ule i64 %sub270, 7, !dbg !4645
  br i1 %cmp271, label %lor.lhs.false273, label %if.then284, !dbg !4647

lor.lhs.false273:                                 ; preds = %land.lhs.true267
  %172 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4648
  %173 = load %struct.rtx_def*, %struct.rtx_def** %172, align 8, !dbg !4648
  %174 = bitcast %struct.rtx_def* %173 to i32*, !dbg !4648
  %bf.load274 = load i32, i32* %174, align 8, !dbg !4648
  %bf.clear275 = and i32 %bf.load274, 65535, !dbg !4648
  %cmp276 = icmp eq i32 %bf.clear275, 37, !dbg !4648
  br i1 %cmp276, label %land.lhs.true278, label %if.then284, !dbg !4648

land.lhs.true278:                                 ; preds = %lor.lhs.false273
  %175 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4648
  %176 = load %struct.rtx_def*, %struct.rtx_def** %175, align 8, !dbg !4648
  %call279 = call i32 @rhs_regno(%struct.rtx_def* %176), !dbg !4648
  %conv280 = zext i32 %call279 to i64, !dbg !4648
  %sub281 = sub i64 %conv280, 8, !dbg !4648
  %cmp282 = icmp ule i64 %sub281, 7, !dbg !4648
  br i1 %cmp282, label %if.else285, label %if.then284, !dbg !4649

if.then284:                                       ; preds = %land.lhs.true278, %lor.lhs.false273, %land.lhs.true267, %if.end262
  %177 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4650
  %178 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4651
  %179 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4652
  %180 = load %struct.rtx_def*, %struct.rtx_def** %179, align 8, !dbg !4653
  call void @emit_swap_insn(%struct.rtx_def* %177, %struct.stack_def* %178, %struct.rtx_def* %180), !dbg !4654
  br label %if.end321, !dbg !4654

if.else285:                                       ; preds = %land.lhs.true278
  call void @llvm.dbg.declare(metadata i32* %src1_hard_regnum, metadata !4655, metadata !DIExpression()), !dbg !4657
  call void @llvm.dbg.declare(metadata i32* %src2_hard_regnum, metadata !4658, metadata !DIExpression()), !dbg !4659
  %181 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4660
  %182 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4661
  %183 = load %struct.rtx_def*, %struct.rtx_def** %182, align 8, !dbg !4662
  %call286 = call i32 @get_hard_regnum(%struct.stack_def* %181, %struct.rtx_def* %183), !dbg !4663
  store i32 %call286, i32* %src1_hard_regnum, align 4, !dbg !4664
  %184 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4665
  %185 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4666
  %186 = load %struct.rtx_def*, %struct.rtx_def** %185, align 8, !dbg !4667
  %call287 = call i32 @get_hard_regnum(%struct.stack_def* %184, %struct.rtx_def* %186), !dbg !4668
  store i32 %call287, i32* %src2_hard_regnum, align 4, !dbg !4669
  %187 = load i32, i32* %src1_hard_regnum, align 4, !dbg !4670
  %cmp288 = icmp eq i32 %187, -1, !dbg !4672
  br i1 %cmp288, label %if.then290, label %if.end300, !dbg !4673

if.then290:                                       ; preds = %if.else285
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat2291, metadata !4674, metadata !DIExpression()), !dbg !4676
  %188 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4677
  %189 = load %struct.rtx_def*, %struct.rtx_def** %188, align 8, !dbg !4677
  %call292 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 25, i32 0, %struct.rtx_def* %189), !dbg !4677
  store %struct.rtx_def* %call292, %struct.rtx_def** %pat2291, align 8, !dbg !4676
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn2293, metadata !4678, metadata !DIExpression()), !dbg !4679
  %190 = load %struct.rtx_def*, %struct.rtx_def** %pat2291, align 8, !dbg !4680
  %191 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4681
  %call294 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %190, %struct.rtx_def* %191), !dbg !4682
  store %struct.rtx_def* %call294, %struct.rtx_def** %insn2293, align 8, !dbg !4679
  %192 = load %struct.rtx_def*, %struct.rtx_def** %insn2293, align 8, !dbg !4683
  %193 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4684
  %194 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4685
  %195 = load %struct.rtx_def*, %struct.rtx_def** %194, align 8, !dbg !4686
  %call295 = call zeroext i8 @move_nan_for_stack_reg(%struct.rtx_def* %192, %struct.stack_def* %193, %struct.rtx_def* %195), !dbg !4687
  %conv296 = zext i8 %call295 to i32, !dbg !4687
  %196 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !4688
  %conv297 = zext i8 %196 to i32, !dbg !4688
  %or298 = or i32 %conv297, %conv296, !dbg !4688
  %conv299 = trunc i32 %or298 to i8, !dbg !4688
  store i8 %conv299, i8* %control_flow_insn_deleted, align 1, !dbg !4688
  br label %if.end300, !dbg !4689

if.end300:                                        ; preds = %if.then290, %if.else285
  %197 = load i32, i32* %src2_hard_regnum, align 4, !dbg !4690
  %cmp301 = icmp eq i32 %197, -1, !dbg !4692
  br i1 %cmp301, label %if.then303, label %if.end313, !dbg !4693

if.then303:                                       ; preds = %if.end300
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat2304, metadata !4694, metadata !DIExpression()), !dbg !4696
  %198 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4697
  %199 = load %struct.rtx_def*, %struct.rtx_def** %198, align 8, !dbg !4697
  %call305 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 25, i32 0, %struct.rtx_def* %199), !dbg !4697
  store %struct.rtx_def* %call305, %struct.rtx_def** %pat2304, align 8, !dbg !4696
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn2306, metadata !4698, metadata !DIExpression()), !dbg !4699
  %200 = load %struct.rtx_def*, %struct.rtx_def** %pat2304, align 8, !dbg !4700
  %201 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4701
  %call307 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %200, %struct.rtx_def* %201), !dbg !4702
  store %struct.rtx_def* %call307, %struct.rtx_def** %insn2306, align 8, !dbg !4699
  %202 = load %struct.rtx_def*, %struct.rtx_def** %insn2306, align 8, !dbg !4703
  %203 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4704
  %204 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4705
  %205 = load %struct.rtx_def*, %struct.rtx_def** %204, align 8, !dbg !4706
  %call308 = call zeroext i8 @move_nan_for_stack_reg(%struct.rtx_def* %202, %struct.stack_def* %203, %struct.rtx_def* %205), !dbg !4707
  %conv309 = zext i8 %call308 to i32, !dbg !4707
  %206 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !4708
  %conv310 = zext i8 %206 to i32, !dbg !4708
  %or311 = or i32 %conv310, %conv309, !dbg !4708
  %conv312 = trunc i32 %or311 to i8, !dbg !4708
  store i8 %conv312, i8* %control_flow_insn_deleted, align 1, !dbg !4708
  br label %if.end313, !dbg !4709

if.end313:                                        ; preds = %if.then303, %if.end300
  %207 = load i32, i32* %src1_hard_regnum, align 4, !dbg !4710
  %cmp314 = icmp ne i32 %207, 8, !dbg !4712
  br i1 %cmp314, label %land.lhs.true316, label %if.end320, !dbg !4713

land.lhs.true316:                                 ; preds = %if.end313
  %208 = load i32, i32* %src2_hard_regnum, align 4, !dbg !4714
  %cmp317 = icmp ne i32 %208, 8, !dbg !4715
  br i1 %cmp317, label %if.then319, label %if.end320, !dbg !4716

if.then319:                                       ; preds = %land.lhs.true316
  %209 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4717
  %210 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4718
  %211 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4719
  %212 = load %struct.rtx_def*, %struct.rtx_def** %211, align 8, !dbg !4720
  call void @emit_swap_insn(%struct.rtx_def* %209, %struct.stack_def* %210, %struct.rtx_def* %212), !dbg !4721
  br label %if.end320, !dbg !4721

if.end320:                                        ; preds = %if.then319, %land.lhs.true316, %if.end313
  br label %if.end321

if.end321:                                        ; preds = %if.end320, %if.then284
  %213 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4722
  %214 = load %struct.rtx_def*, %struct.rtx_def** %213, align 8, !dbg !4722
  %215 = bitcast %struct.rtx_def* %214 to i32*, !dbg !4722
  %bf.load322 = load i32, i32* %215, align 8, !dbg !4722
  %bf.clear323 = and i32 %bf.load322, 65535, !dbg !4722
  %cmp324 = icmp eq i32 %bf.clear323, 37, !dbg !4722
  br i1 %cmp324, label %land.lhs.true326, label %if.end334, !dbg !4722

land.lhs.true326:                                 ; preds = %if.end321
  %216 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4722
  %217 = load %struct.rtx_def*, %struct.rtx_def** %216, align 8, !dbg !4722
  %call327 = call i32 @rhs_regno(%struct.rtx_def* %217), !dbg !4722
  %conv328 = zext i32 %call327 to i64, !dbg !4722
  %sub329 = sub i64 %conv328, 8, !dbg !4722
  %cmp330 = icmp ule i64 %sub329, 7, !dbg !4722
  br i1 %cmp330, label %if.then332, label %if.end334, !dbg !4724

if.then332:                                       ; preds = %land.lhs.true326
  %218 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4725
  %219 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4726
  %220 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4727
  %221 = load %struct.rtx_def*, %struct.rtx_def** %220, align 8, !dbg !4728
  %call333 = call i32 @get_hard_regnum(%struct.stack_def* %219, %struct.rtx_def* %221), !dbg !4729
  call void @replace_reg(%struct.rtx_def** %218, i32 %call333), !dbg !4730
  br label %if.end334, !dbg !4730

if.end334:                                        ; preds = %if.then332, %land.lhs.true326, %if.end321
  %222 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4731
  %223 = load %struct.rtx_def*, %struct.rtx_def** %222, align 8, !dbg !4731
  %224 = bitcast %struct.rtx_def* %223 to i32*, !dbg !4731
  %bf.load335 = load i32, i32* %224, align 8, !dbg !4731
  %bf.clear336 = and i32 %bf.load335, 65535, !dbg !4731
  %cmp337 = icmp eq i32 %bf.clear336, 37, !dbg !4731
  br i1 %cmp337, label %land.lhs.true339, label %if.end347, !dbg !4731

land.lhs.true339:                                 ; preds = %if.end334
  %225 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4731
  %226 = load %struct.rtx_def*, %struct.rtx_def** %225, align 8, !dbg !4731
  %call340 = call i32 @rhs_regno(%struct.rtx_def* %226), !dbg !4731
  %conv341 = zext i32 %call340 to i64, !dbg !4731
  %sub342 = sub i64 %conv341, 8, !dbg !4731
  %cmp343 = icmp ule i64 %sub342, 7, !dbg !4731
  br i1 %cmp343, label %if.then345, label %if.end347, !dbg !4733

if.then345:                                       ; preds = %land.lhs.true339
  %227 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4734
  %228 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4735
  %229 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4736
  %230 = load %struct.rtx_def*, %struct.rtx_def** %229, align 8, !dbg !4737
  %call346 = call i32 @get_hard_regnum(%struct.stack_def* %228, %struct.rtx_def* %230), !dbg !4738
  call void @replace_reg(%struct.rtx_def** %227, i32 %call346), !dbg !4739
  br label %if.end347, !dbg !4739

if.end347:                                        ; preds = %if.then345, %land.lhs.true339, %if.end334
  %231 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4740
  %tobool348 = icmp ne %struct.rtx_def* %231, null, !dbg !4740
  br i1 %tobool348, label %if.then349, label %if.else403, !dbg !4742

if.then349:                                       ; preds = %if.end347
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src1_reg, metadata !4743, metadata !DIExpression()), !dbg !4745
  %232 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4746
  %u350 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %232, i32 0, i32 1, !dbg !4746
  %fld351 = bitcast %union.u* %u350 to [1 x %union.rtunion_def]*, !dbg !4746
  %arrayidx352 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld351, i64 0, i64 0, !dbg !4746
  %rt_rtx353 = bitcast %union.rtunion_def* %arrayidx352 to %struct.rtx_def**, !dbg !4746
  %233 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx353, align 8, !dbg !4746
  store %struct.rtx_def* %233, %struct.rtx_def** %src1_reg, align 8, !dbg !4745
  %234 = load %struct.rtx_def*, %struct.rtx_def** %src1_reg, align 8, !dbg !4747
  %call354 = call i32 @rhs_regno(%struct.rtx_def* %234), !dbg !4747
  %235 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4749
  %reg355 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %235, i32 0, i32 2, !dbg !4750
  %236 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4751
  %top356 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %236, i32 0, i32 0, !dbg !4752
  %237 = load i32, i32* %top356, align 8, !dbg !4752
  %idxprom357 = sext i32 %237 to i64, !dbg !4749
  %arrayidx358 = getelementptr inbounds [8 x i8], [8 x i8]* %reg355, i64 0, i64 %idxprom357, !dbg !4749
  %238 = load i8, i8* %arrayidx358, align 1, !dbg !4749
  %conv359 = zext i8 %238 to i32, !dbg !4749
  %cmp360 = icmp eq i32 %call354, %conv359, !dbg !4753
  br i1 %cmp360, label %if.then362, label %if.else369, !dbg !4754

if.then362:                                       ; preds = %if.then349
  %239 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4755
  %240 = load %struct.rtx_def*, %struct.rtx_def** %239, align 8, !dbg !4755
  %call363 = call i32 @rhs_regno(%struct.rtx_def* %240), !dbg !4755
  %sh_prom364 = zext i32 %call363 to i64, !dbg !4755
  %shl365 = shl i64 1, %sh_prom364, !dbg !4755
  %241 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4755
  %reg_set366 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %241, i32 0, i32 1, !dbg !4755
  %242 = load i64, i64* %reg_set366, align 8, !dbg !4755
  %or367 = or i64 %242, %shl365, !dbg !4755
  store i64 %or367, i64* %reg_set366, align 8, !dbg !4755
  %243 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4757
  %244 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4758
  %245 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4759
  %246 = load %struct.rtx_def*, %struct.rtx_def** %245, align 8, !dbg !4760
  %call368 = call i32 @get_hard_regnum(%struct.stack_def* %244, %struct.rtx_def* %246), !dbg !4761
  call void @replace_reg(%struct.rtx_def** %243, i32 %call368), !dbg !4762
  br label %if.end386, !dbg !4763

if.else369:                                       ; preds = %if.then349
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !4764, metadata !DIExpression()), !dbg !4766
  %247 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4767
  %248 = load %struct.rtx_def*, %struct.rtx_def** %src1_reg, align 8, !dbg !4768
  %call370 = call i32 @get_hard_regnum(%struct.stack_def* %247, %struct.rtx_def* %248), !dbg !4769
  store i32 %call370, i32* %regno, align 4, !dbg !4766
  %249 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4770
  %250 = load %struct.rtx_def*, %struct.rtx_def** %249, align 8, !dbg !4770
  %call371 = call i32 @rhs_regno(%struct.rtx_def* %250), !dbg !4770
  %sh_prom372 = zext i32 %call371 to i64, !dbg !4770
  %shl373 = shl i64 1, %sh_prom372, !dbg !4770
  %251 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4770
  %reg_set374 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %251, i32 0, i32 1, !dbg !4770
  %252 = load i64, i64* %reg_set374, align 8, !dbg !4770
  %or375 = or i64 %252, %shl373, !dbg !4770
  store i64 %or375, i64* %reg_set374, align 8, !dbg !4770
  %253 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4771
  %254 = load i32, i32* %regno, align 4, !dbg !4772
  call void @replace_reg(%struct.rtx_def** %253, i32 %254), !dbg !4773
  %255 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4774
  %reg376 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %255, i32 0, i32 2, !dbg !4775
  %256 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4776
  %top377 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %256, i32 0, i32 0, !dbg !4777
  %257 = load i32, i32* %top377, align 8, !dbg !4777
  %idxprom378 = sext i32 %257 to i64, !dbg !4774
  %arrayidx379 = getelementptr inbounds [8 x i8], [8 x i8]* %reg376, i64 0, i64 %idxprom378, !dbg !4774
  %258 = load i8, i8* %arrayidx379, align 1, !dbg !4774
  %259 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4778
  %reg380 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %259, i32 0, i32 2, !dbg !4779
  %260 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4780
  %top381 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %260, i32 0, i32 0, !dbg !4781
  %261 = load i32, i32* %top381, align 8, !dbg !4781
  %262 = load i32, i32* %regno, align 4, !dbg !4782
  %sub382 = sub nsw i32 %262, 8, !dbg !4783
  %sub383 = sub nsw i32 %261, %sub382, !dbg !4784
  %idxprom384 = sext i32 %sub383 to i64, !dbg !4778
  %arrayidx385 = getelementptr inbounds [8 x i8], [8 x i8]* %reg380, i64 0, i64 %idxprom384, !dbg !4778
  store i8 %258, i8* %arrayidx385, align 1, !dbg !4785
  br label %if.end386

if.end386:                                        ; preds = %if.else369, %if.then362
  %263 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4786
  %u387 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %263, i32 0, i32 1, !dbg !4786
  %fld388 = bitcast %union.u* %u387 to [1 x %union.rtunion_def]*, !dbg !4786
  %arrayidx389 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld388, i64 0, i64 0, !dbg !4786
  %rt_rtx390 = bitcast %union.rtunion_def* %arrayidx389 to %struct.rtx_def**, !dbg !4786
  %264 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx390, align 8, !dbg !4786
  %call391 = call i32 @rhs_regno(%struct.rtx_def* %264), !dbg !4786
  %sh_prom392 = zext i32 %call391 to i64, !dbg !4786
  %shl393 = shl i64 1, %sh_prom392, !dbg !4786
  %neg394 = xor i64 %shl393, -1, !dbg !4786
  %265 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4786
  %reg_set395 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %265, i32 0, i32 1, !dbg !4786
  %266 = load i64, i64* %reg_set395, align 8, !dbg !4786
  %and396 = and i64 %266, %neg394, !dbg !4786
  store i64 %and396, i64* %reg_set395, align 8, !dbg !4786
  %267 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4787
  %u397 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %267, i32 0, i32 1, !dbg !4787
  %fld398 = bitcast %union.u* %u397 to [1 x %union.rtunion_def]*, !dbg !4787
  %arrayidx399 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld398, i64 0, i64 0, !dbg !4787
  %rt_rtx400 = bitcast %union.rtunion_def* %arrayidx399 to %struct.rtx_def**, !dbg !4787
  call void @replace_reg(%struct.rtx_def** %rt_rtx400, i32 8), !dbg !4788
  %268 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4789
  %top401 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %268, i32 0, i32 0, !dbg !4790
  %269 = load i32, i32* %top401, align 8, !dbg !4791
  %dec402 = add nsw i32 %269, -1, !dbg !4791
  store i32 %dec402, i32* %top401, align 8, !dbg !4791
  br label %if.end468, !dbg !4792

if.else403:                                       ; preds = %if.end347
  %270 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !4793
  %tobool404 = icmp ne %struct.rtx_def* %270, null, !dbg !4793
  br i1 %tobool404, label %if.then405, label %if.else460, !dbg !4795

if.then405:                                       ; preds = %if.else403
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src2_reg, metadata !4796, metadata !DIExpression()), !dbg !4798
  %271 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !4799
  %u406 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %271, i32 0, i32 1, !dbg !4799
  %fld407 = bitcast %union.u* %u406 to [1 x %union.rtunion_def]*, !dbg !4799
  %arrayidx408 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld407, i64 0, i64 0, !dbg !4799
  %rt_rtx409 = bitcast %union.rtunion_def* %arrayidx408 to %struct.rtx_def**, !dbg !4799
  %272 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx409, align 8, !dbg !4799
  store %struct.rtx_def* %272, %struct.rtx_def** %src2_reg, align 8, !dbg !4798
  %273 = load %struct.rtx_def*, %struct.rtx_def** %src2_reg, align 8, !dbg !4800
  %call410 = call i32 @rhs_regno(%struct.rtx_def* %273), !dbg !4800
  %274 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4802
  %reg411 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %274, i32 0, i32 2, !dbg !4803
  %275 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4804
  %top412 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %275, i32 0, i32 0, !dbg !4805
  %276 = load i32, i32* %top412, align 8, !dbg !4805
  %idxprom413 = sext i32 %276 to i64, !dbg !4802
  %arrayidx414 = getelementptr inbounds [8 x i8], [8 x i8]* %reg411, i64 0, i64 %idxprom413, !dbg !4802
  %277 = load i8, i8* %arrayidx414, align 1, !dbg !4802
  %conv415 = zext i8 %277 to i32, !dbg !4802
  %cmp416 = icmp eq i32 %call410, %conv415, !dbg !4806
  br i1 %cmp416, label %if.then418, label %if.else425, !dbg !4807

if.then418:                                       ; preds = %if.then405
  %278 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4808
  %279 = load %struct.rtx_def*, %struct.rtx_def** %278, align 8, !dbg !4808
  %call419 = call i32 @rhs_regno(%struct.rtx_def* %279), !dbg !4808
  %sh_prom420 = zext i32 %call419 to i64, !dbg !4808
  %shl421 = shl i64 1, %sh_prom420, !dbg !4808
  %280 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4808
  %reg_set422 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %280, i32 0, i32 1, !dbg !4808
  %281 = load i64, i64* %reg_set422, align 8, !dbg !4808
  %or423 = or i64 %281, %shl421, !dbg !4808
  store i64 %or423, i64* %reg_set422, align 8, !dbg !4808
  %282 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4810
  %283 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4811
  %284 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4812
  %285 = load %struct.rtx_def*, %struct.rtx_def** %284, align 8, !dbg !4813
  %call424 = call i32 @get_hard_regnum(%struct.stack_def* %283, %struct.rtx_def* %285), !dbg !4814
  call void @replace_reg(%struct.rtx_def** %282, i32 %call424), !dbg !4815
  br label %if.end443, !dbg !4816

if.else425:                                       ; preds = %if.then405
  call void @llvm.dbg.declare(metadata i32* %regno426, metadata !4817, metadata !DIExpression()), !dbg !4819
  %286 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4820
  %287 = load %struct.rtx_def*, %struct.rtx_def** %src2_reg, align 8, !dbg !4821
  %call427 = call i32 @get_hard_regnum(%struct.stack_def* %286, %struct.rtx_def* %287), !dbg !4822
  store i32 %call427, i32* %regno426, align 4, !dbg !4819
  %288 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4823
  %289 = load %struct.rtx_def*, %struct.rtx_def** %288, align 8, !dbg !4823
  %call428 = call i32 @rhs_regno(%struct.rtx_def* %289), !dbg !4823
  %sh_prom429 = zext i32 %call428 to i64, !dbg !4823
  %shl430 = shl i64 1, %sh_prom429, !dbg !4823
  %290 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4823
  %reg_set431 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %290, i32 0, i32 1, !dbg !4823
  %291 = load i64, i64* %reg_set431, align 8, !dbg !4823
  %or432 = or i64 %291, %shl430, !dbg !4823
  store i64 %or432, i64* %reg_set431, align 8, !dbg !4823
  %292 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4824
  %293 = load i32, i32* %regno426, align 4, !dbg !4825
  call void @replace_reg(%struct.rtx_def** %292, i32 %293), !dbg !4826
  %294 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4827
  %reg433 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %294, i32 0, i32 2, !dbg !4828
  %295 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4829
  %top434 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %295, i32 0, i32 0, !dbg !4830
  %296 = load i32, i32* %top434, align 8, !dbg !4830
  %idxprom435 = sext i32 %296 to i64, !dbg !4827
  %arrayidx436 = getelementptr inbounds [8 x i8], [8 x i8]* %reg433, i64 0, i64 %idxprom435, !dbg !4827
  %297 = load i8, i8* %arrayidx436, align 1, !dbg !4827
  %298 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4831
  %reg437 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %298, i32 0, i32 2, !dbg !4832
  %299 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4833
  %top438 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %299, i32 0, i32 0, !dbg !4834
  %300 = load i32, i32* %top438, align 8, !dbg !4834
  %301 = load i32, i32* %regno426, align 4, !dbg !4835
  %sub439 = sub nsw i32 %301, 8, !dbg !4836
  %sub440 = sub nsw i32 %300, %sub439, !dbg !4837
  %idxprom441 = sext i32 %sub440 to i64, !dbg !4831
  %arrayidx442 = getelementptr inbounds [8 x i8], [8 x i8]* %reg437, i64 0, i64 %idxprom441, !dbg !4831
  store i8 %297, i8* %arrayidx442, align 1, !dbg !4838
  br label %if.end443

if.end443:                                        ; preds = %if.else425, %if.then418
  %302 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !4839
  %u444 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %302, i32 0, i32 1, !dbg !4839
  %fld445 = bitcast %union.u* %u444 to [1 x %union.rtunion_def]*, !dbg !4839
  %arrayidx446 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld445, i64 0, i64 0, !dbg !4839
  %rt_rtx447 = bitcast %union.rtunion_def* %arrayidx446 to %struct.rtx_def**, !dbg !4839
  %303 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx447, align 8, !dbg !4839
  %call448 = call i32 @rhs_regno(%struct.rtx_def* %303), !dbg !4839
  %sh_prom449 = zext i32 %call448 to i64, !dbg !4839
  %shl450 = shl i64 1, %sh_prom449, !dbg !4839
  %neg451 = xor i64 %shl450, -1, !dbg !4839
  %304 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4839
  %reg_set452 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %304, i32 0, i32 1, !dbg !4839
  %305 = load i64, i64* %reg_set452, align 8, !dbg !4839
  %and453 = and i64 %305, %neg451, !dbg !4839
  store i64 %and453, i64* %reg_set452, align 8, !dbg !4839
  %306 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !4840
  %u454 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %306, i32 0, i32 1, !dbg !4840
  %fld455 = bitcast %union.u* %u454 to [1 x %union.rtunion_def]*, !dbg !4840
  %arrayidx456 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld455, i64 0, i64 0, !dbg !4840
  %rt_rtx457 = bitcast %union.rtunion_def* %arrayidx456 to %struct.rtx_def**, !dbg !4840
  call void @replace_reg(%struct.rtx_def** %rt_rtx457, i32 8), !dbg !4841
  %307 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4842
  %top458 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %307, i32 0, i32 0, !dbg !4843
  %308 = load i32, i32* %top458, align 8, !dbg !4844
  %dec459 = add nsw i32 %308, -1, !dbg !4844
  store i32 %dec459, i32* %top458, align 8, !dbg !4844
  br label %if.end467, !dbg !4845

if.else460:                                       ; preds = %if.else403
  %309 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4846
  %310 = load %struct.rtx_def*, %struct.rtx_def** %309, align 8, !dbg !4846
  %call461 = call i32 @rhs_regno(%struct.rtx_def* %310), !dbg !4846
  %sh_prom462 = zext i32 %call461 to i64, !dbg !4846
  %shl463 = shl i64 1, %sh_prom462, !dbg !4846
  %311 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4846
  %reg_set464 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %311, i32 0, i32 1, !dbg !4846
  %312 = load i64, i64* %reg_set464, align 8, !dbg !4846
  %or465 = or i64 %312, %shl463, !dbg !4846
  store i64 %or465, i64* %reg_set464, align 8, !dbg !4846
  %313 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4848
  %314 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4849
  %315 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4850
  %316 = load %struct.rtx_def*, %struct.rtx_def** %315, align 8, !dbg !4851
  %call466 = call i32 @get_hard_regnum(%struct.stack_def* %314, %struct.rtx_def* %316), !dbg !4852
  call void @replace_reg(%struct.rtx_def** %313, i32 %call466), !dbg !4853
  br label %if.end467

if.end467:                                        ; preds = %if.else460, %if.end443
  br label %if.end468

if.end468:                                        ; preds = %if.end467, %if.end386
  %317 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4854
  %318 = bitcast %struct.rtx_def* %317 to i32*, !dbg !4854
  %bf.load469 = load i32, i32* %318, align 8, !dbg !4854
  %bf.clear470 = and i32 %bf.load469, 65535, !dbg !4854
  %idxprom471 = sext i32 %bf.clear470 to i64, !dbg !4854
  %arrayidx472 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom471, !dbg !4854
  %319 = load i32, i32* %arrayidx472, align 4, !dbg !4854
  %cmp473 = icmp eq i32 %319, 3, !dbg !4854
  br i1 %cmp473, label %land.lhs.true475, label %if.end493, !dbg !4856

land.lhs.true475:                                 ; preds = %if.end468
  %320 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4857
  %321 = load %struct.rtx_def*, %struct.rtx_def** %320, align 8, !dbg !4857
  %322 = bitcast %struct.rtx_def* %321 to i32*, !dbg !4857
  %bf.load476 = load i32, i32* %322, align 8, !dbg !4857
  %bf.clear477 = and i32 %bf.load476, 65535, !dbg !4857
  %cmp478 = icmp eq i32 %bf.clear477, 37, !dbg !4857
  br i1 %cmp478, label %land.lhs.true480, label %if.end493, !dbg !4858

land.lhs.true480:                                 ; preds = %land.lhs.true475
  %323 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4859
  %324 = load %struct.rtx_def*, %struct.rtx_def** %323, align 8, !dbg !4859
  %325 = bitcast %struct.rtx_def* %324 to i32*, !dbg !4859
  %bf.load481 = load i32, i32* %325, align 8, !dbg !4859
  %bf.clear482 = and i32 %bf.load481, 65535, !dbg !4859
  %cmp483 = icmp eq i32 %bf.clear482, 37, !dbg !4859
  br i1 %cmp483, label %land.lhs.true485, label %if.end493, !dbg !4860

land.lhs.true485:                                 ; preds = %land.lhs.true480
  %326 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4861
  %327 = load %struct.rtx_def*, %struct.rtx_def** %326, align 8, !dbg !4861
  %call486 = call i32 @rhs_regno(%struct.rtx_def* %327), !dbg !4861
  %328 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4862
  %329 = load %struct.rtx_def*, %struct.rtx_def** %328, align 8, !dbg !4862
  %call487 = call i32 @rhs_regno(%struct.rtx_def* %329), !dbg !4862
  %cmp488 = icmp ne i32 %call486, %call487, !dbg !4863
  br i1 %cmp488, label %if.then490, label %if.end493, !dbg !4864

if.then490:                                       ; preds = %land.lhs.true485
  call void @llvm.dbg.declare(metadata i32* %tmp, metadata !4865, metadata !DIExpression()), !dbg !4867
  %330 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4868
  %331 = load %struct.rtx_def*, %struct.rtx_def** %330, align 8, !dbg !4868
  %call491 = call i32 @rhs_regno(%struct.rtx_def* %331), !dbg !4868
  store i32 %call491, i32* %tmp, align 4, !dbg !4867
  %332 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4869
  %333 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4870
  %334 = load %struct.rtx_def*, %struct.rtx_def** %333, align 8, !dbg !4870
  %call492 = call i32 @rhs_regno(%struct.rtx_def* %334), !dbg !4870
  call void @replace_reg(%struct.rtx_def** %332, i32 %call492), !dbg !4871
  %335 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !4872
  %336 = load i32, i32* %tmp, align 4, !dbg !4873
  call void @replace_reg(%struct.rtx_def** %335, i32 %336), !dbg !4874
  br label %if.end493, !dbg !4875

if.end493:                                        ; preds = %if.then490, %land.lhs.true485, %land.lhs.true480, %land.lhs.true475, %if.end468
  br label %sw.epilog1009, !dbg !4876

sw.bb494:                                         ; preds = %if.end154
  %337 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4877
  %u495 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %337, i32 0, i32 1, !dbg !4877
  %fld496 = bitcast %union.u* %u495 to [1 x %union.rtunion_def]*, !dbg !4877
  %arrayidx497 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld496, i64 0, i64 1, !dbg !4877
  %rt_int = bitcast %union.rtunion_def* %arrayidx497 to i32*, !dbg !4877
  %338 = load i32, i32* %rt_int, align 8, !dbg !4877
  switch i32 %338, label %sw.default [
    i32 66, label %sw.bb498
    i32 74, label %sw.bb498
    i32 75, label %sw.bb498
    i32 69, label %sw.bb533
    i32 60, label %sw.bb556
    i32 61, label %sw.bb556
    i32 65, label %sw.bb556
    i32 67, label %sw.bb556
    i32 70, label %sw.bb556
    i32 71, label %sw.bb556
    i32 72, label %sw.bb556
    i32 73, label %sw.bb556
    i32 80, label %sw.bb556
    i32 84, label %sw.bb556
    i32 81, label %sw.bb583
    i32 85, label %sw.bb583
    i32 68, label %sw.bb586
    i32 62, label %sw.bb629
    i32 63, label %sw.bb629
    i32 64, label %sw.bb629
    i32 86, label %sw.bb697
    i32 88, label %sw.bb697
    i32 90, label %sw.bb697
    i32 87, label %sw.bb749
    i32 89, label %sw.bb749
    i32 91, label %sw.bb749
    i32 95, label %sw.bb788
    i32 32, label %sw.bb803
    i32 31, label %sw.bb828
  ], !dbg !4878

sw.bb498:                                         ; preds = %sw.bb494, %sw.bb494, %sw.bb494
  %339 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4879
  %u499 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %339, i32 0, i32 1, !dbg !4879
  %fld500 = bitcast %union.u* %u499 to [1 x %union.rtunion_def]*, !dbg !4879
  %arrayidx501 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld500, i64 0, i64 0, !dbg !4879
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx501 to %struct.rtvec_def**, !dbg !4879
  %340 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !4879
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %340, i32 0, i32 1, !dbg !4879
  %arrayidx502 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !4879
  %call503 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx502), !dbg !4881
  store %struct.rtx_def** %call503, %struct.rtx_def*** %src1, align 8, !dbg !4882
  %341 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4883
  %342 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4884
  %343 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4885
  %344 = load %struct.rtx_def*, %struct.rtx_def** %343, align 8, !dbg !4886
  call void @emit_swap_insn(%struct.rtx_def* %341, %struct.stack_def* %342, %struct.rtx_def* %344), !dbg !4887
  %345 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4888
  %346 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4889
  %347 = load %struct.rtx_def*, %struct.rtx_def** %346, align 8, !dbg !4889
  %call504 = call i32 @rhs_regno(%struct.rtx_def* %347), !dbg !4889
  %call505 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %345, i32 1, i32 %call504), !dbg !4890
  store %struct.rtx_def* %call505, %struct.rtx_def** %src1_note, align 8, !dbg !4891
  %348 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4892
  %349 = load %struct.rtx_def*, %struct.rtx_def** %348, align 8, !dbg !4892
  %350 = bitcast %struct.rtx_def* %349 to i32*, !dbg !4892
  %bf.load506 = load i32, i32* %350, align 8, !dbg !4892
  %bf.clear507 = and i32 %bf.load506, 65535, !dbg !4892
  %cmp508 = icmp eq i32 %bf.clear507, 37, !dbg !4892
  br i1 %cmp508, label %land.lhs.true510, label %if.end517, !dbg !4892

land.lhs.true510:                                 ; preds = %sw.bb498
  %351 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4892
  %352 = load %struct.rtx_def*, %struct.rtx_def** %351, align 8, !dbg !4892
  %call511 = call i32 @rhs_regno(%struct.rtx_def* %352), !dbg !4892
  %conv512 = zext i32 %call511 to i64, !dbg !4892
  %sub513 = sub i64 %conv512, 8, !dbg !4892
  %cmp514 = icmp ule i64 %sub513, 7, !dbg !4892
  br i1 %cmp514, label %if.then516, label %if.end517, !dbg !4894

if.then516:                                       ; preds = %land.lhs.true510
  %353 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4895
  call void @replace_reg(%struct.rtx_def** %353, i32 8), !dbg !4896
  br label %if.end517, !dbg !4896

if.end517:                                        ; preds = %if.then516, %land.lhs.true510, %sw.bb498
  %354 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4897
  %tobool518 = icmp ne %struct.rtx_def* %354, null, !dbg !4897
  br i1 %tobool518, label %if.then519, label %if.end532, !dbg !4899

if.then519:                                       ; preds = %if.end517
  %355 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4900
  %u520 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %355, i32 0, i32 1, !dbg !4900
  %fld521 = bitcast %union.u* %u520 to [1 x %union.rtunion_def]*, !dbg !4900
  %arrayidx522 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld521, i64 0, i64 0, !dbg !4900
  %rt_rtx523 = bitcast %union.rtunion_def* %arrayidx522 to %struct.rtx_def**, !dbg !4900
  call void @replace_reg(%struct.rtx_def** %rt_rtx523, i32 8), !dbg !4902
  %356 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4903
  %top524 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %356, i32 0, i32 0, !dbg !4904
  %357 = load i32, i32* %top524, align 8, !dbg !4905
  %dec525 = add nsw i32 %357, -1, !dbg !4905
  store i32 %dec525, i32* %top524, align 8, !dbg !4905
  %358 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4906
  %359 = load %struct.rtx_def*, %struct.rtx_def** %358, align 8, !dbg !4906
  %call526 = call i32 @rhs_regno(%struct.rtx_def* %359), !dbg !4906
  %sh_prom527 = zext i32 %call526 to i64, !dbg !4906
  %shl528 = shl i64 1, %sh_prom527, !dbg !4906
  %neg529 = xor i64 %shl528, -1, !dbg !4906
  %360 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4906
  %reg_set530 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %360, i32 0, i32 1, !dbg !4906
  %361 = load i64, i64* %reg_set530, align 8, !dbg !4906
  %and531 = and i64 %361, %neg529, !dbg !4906
  store i64 %and531, i64* %reg_set530, align 8, !dbg !4906
  br label %if.end532, !dbg !4907

if.end532:                                        ; preds = %if.then519, %if.end517
  %362 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4908
  call void @replace_reg(%struct.rtx_def** %362, i32 8), !dbg !4909
  br label %sw.epilog, !dbg !4910

sw.bb533:                                         ; preds = %sw.bb494
  %363 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4911
  %u534 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %363, i32 0, i32 1, !dbg !4911
  %fld535 = bitcast %union.u* %u534 to [1 x %union.rtunion_def]*, !dbg !4911
  %arrayidx536 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld535, i64 0, i64 0, !dbg !4911
  %rt_rtvec537 = bitcast %union.rtunion_def* %arrayidx536 to %struct.rtvec_def**, !dbg !4911
  %364 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec537, align 8, !dbg !4911
  %elem538 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %364, i32 0, i32 1, !dbg !4911
  %arrayidx539 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem538, i64 0, i64 0, !dbg !4911
  %call540 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx539), !dbg !4912
  store %struct.rtx_def** %call540, %struct.rtx_def*** %src1, align 8, !dbg !4913
  %365 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4914
  %366 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4915
  %367 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4916
  %368 = load %struct.rtx_def*, %struct.rtx_def** %367, align 8, !dbg !4917
  call void @emit_swap_insn(%struct.rtx_def* %365, %struct.stack_def* %366, %struct.rtx_def* %368), !dbg !4918
  %369 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4919
  %370 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4920
  %371 = load %struct.rtx_def*, %struct.rtx_def** %370, align 8, !dbg !4920
  %call541 = call i32 @rhs_regno(%struct.rtx_def* %371), !dbg !4920
  %call542 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %369, i32 1, i32 %call541), !dbg !4921
  store %struct.rtx_def* %call542, %struct.rtx_def** %src1_note, align 8, !dbg !4922
  %372 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4923
  call void @replace_reg(%struct.rtx_def** %372, i32 8), !dbg !4924
  %373 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4925
  %tobool543 = icmp ne %struct.rtx_def* %373, null, !dbg !4925
  br i1 %tobool543, label %if.then544, label %if.end555, !dbg !4927

if.then544:                                       ; preds = %sw.bb533
  %374 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4928
  %375 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4930
  %u545 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %375, i32 0, i32 1, !dbg !4930
  %fld546 = bitcast %union.u* %u545 to [1 x %union.rtunion_def]*, !dbg !4930
  %arrayidx547 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld546, i64 0, i64 0, !dbg !4930
  %rt_rtx548 = bitcast %union.rtunion_def* %arrayidx547 to %struct.rtx_def**, !dbg !4930
  %376 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx548, align 8, !dbg !4930
  %call549 = call i32 @rhs_regno(%struct.rtx_def* %376), !dbg !4930
  call void @remove_regno_note(%struct.rtx_def* %374, i32 1, i32 %call549), !dbg !4931
  %377 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4932
  %378 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4933
  %379 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4934
  %u550 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %379, i32 0, i32 1, !dbg !4934
  %fld551 = bitcast %union.u* %u550 to [1 x %union.rtunion_def]*, !dbg !4934
  %arrayidx552 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld551, i64 0, i64 0, !dbg !4934
  %rt_rtx553 = bitcast %union.rtunion_def* %arrayidx552 to %struct.rtx_def**, !dbg !4934
  %380 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx553, align 8, !dbg !4934
  %call554 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %377, %struct.stack_def* %378, %struct.rtx_def* %380, i32 0), !dbg !4935
  br label %if.end555, !dbg !4936

if.end555:                                        ; preds = %if.then544, %sw.bb533
  br label %sw.epilog, !dbg !4937

sw.bb556:                                         ; preds = %sw.bb494, %sw.bb494, %sw.bb494, %sw.bb494, %sw.bb494, %sw.bb494, %sw.bb494, %sw.bb494, %sw.bb494, %sw.bb494
  %381 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4938
  %u557 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %381, i32 0, i32 1, !dbg !4938
  %fld558 = bitcast %union.u* %u557 to [1 x %union.rtunion_def]*, !dbg !4938
  %arrayidx559 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld558, i64 0, i64 0, !dbg !4938
  %rt_rtvec560 = bitcast %union.rtunion_def* %arrayidx559 to %struct.rtvec_def**, !dbg !4938
  %382 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec560, align 8, !dbg !4938
  %elem561 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %382, i32 0, i32 1, !dbg !4938
  %arrayidx562 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem561, i64 0, i64 0, !dbg !4938
  %call563 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx562), !dbg !4939
  store %struct.rtx_def** %call563, %struct.rtx_def*** %src1, align 8, !dbg !4940
  %383 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4941
  %384 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4942
  %385 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4943
  %386 = load %struct.rtx_def*, %struct.rtx_def** %385, align 8, !dbg !4944
  call void @emit_swap_insn(%struct.rtx_def* %383, %struct.stack_def* %384, %struct.rtx_def* %386), !dbg !4945
  %387 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4946
  %388 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4947
  %389 = load %struct.rtx_def*, %struct.rtx_def** %388, align 8, !dbg !4947
  %call564 = call i32 @rhs_regno(%struct.rtx_def* %389), !dbg !4947
  %call565 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %387, i32 1, i32 %call564), !dbg !4948
  store %struct.rtx_def* %call565, %struct.rtx_def** %src1_note, align 8, !dbg !4949
  %390 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !4950
  %tobool566 = icmp ne %struct.rtx_def* %390, null, !dbg !4950
  br i1 %tobool566, label %cond.true567, label %cond.false568, !dbg !4950

cond.true567:                                     ; preds = %sw.bb556
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1729, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4950
  br label %cond.end569, !dbg !4950

cond.false568:                                    ; preds = %sw.bb556
  br label %cond.end569, !dbg !4950

cond.end569:                                      ; preds = %cond.false568, %cond.true567
  %cond570 = phi i32 [ 0, %cond.true567 ], [ 0, %cond.false568 ], !dbg !4950
  %391 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4951
  %392 = load %struct.rtx_def*, %struct.rtx_def** %391, align 8, !dbg !4951
  %393 = bitcast %struct.rtx_def* %392 to i32*, !dbg !4951
  %bf.load571 = load i32, i32* %393, align 8, !dbg !4951
  %bf.clear572 = and i32 %bf.load571, 65535, !dbg !4951
  %cmp573 = icmp eq i32 %bf.clear572, 37, !dbg !4951
  br i1 %cmp573, label %land.lhs.true575, label %if.end582, !dbg !4951

land.lhs.true575:                                 ; preds = %cond.end569
  %394 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4951
  %395 = load %struct.rtx_def*, %struct.rtx_def** %394, align 8, !dbg !4951
  %call576 = call i32 @rhs_regno(%struct.rtx_def* %395), !dbg !4951
  %conv577 = zext i32 %call576 to i64, !dbg !4951
  %sub578 = sub i64 %conv577, 8, !dbg !4951
  %cmp579 = icmp ule i64 %sub578, 7, !dbg !4951
  br i1 %cmp579, label %if.then581, label %if.end582, !dbg !4953

if.then581:                                       ; preds = %land.lhs.true575
  %396 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4954
  call void @replace_reg(%struct.rtx_def** %396, i32 8), !dbg !4955
  br label %if.end582, !dbg !4955

if.end582:                                        ; preds = %if.then581, %land.lhs.true575, %cond.end569
  %397 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4956
  call void @replace_reg(%struct.rtx_def** %397, i32 8), !dbg !4957
  br label %sw.epilog, !dbg !4958

sw.bb583:                                         ; preds = %sw.bb494, %sw.bb494
  %398 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4959
  %top584 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %398, i32 0, i32 0, !dbg !4960
  %399 = load i32, i32* %top584, align 8, !dbg !4961
  %inc585 = add nsw i32 %399, 1, !dbg !4961
  store i32 %inc585, i32* %top584, align 8, !dbg !4961
  br label %sw.bb586, !dbg !4959

sw.bb586:                                         ; preds = %sw.bb494, %sw.bb583
  %400 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4962
  %reg587 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %400, i32 0, i32 2, !dbg !4963
  %401 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4964
  %top588 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %401, i32 0, i32 0, !dbg !4965
  %402 = load i32, i32* %top588, align 8, !dbg !4965
  %sub589 = sub nsw i32 %402, 1, !dbg !4966
  %idxprom590 = sext i32 %sub589 to i64, !dbg !4962
  %arrayidx591 = getelementptr inbounds [8 x i8], [8 x i8]* %reg587, i64 0, i64 %idxprom590, !dbg !4962
  %403 = load i8, i8* %arrayidx591, align 1, !dbg !4962
  %404 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4967
  %reg592 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %404, i32 0, i32 2, !dbg !4968
  %405 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4969
  %top593 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %405, i32 0, i32 0, !dbg !4970
  %406 = load i32, i32* %top593, align 8, !dbg !4970
  %idxprom594 = sext i32 %406 to i64, !dbg !4967
  %arrayidx595 = getelementptr inbounds [8 x i8], [8 x i8]* %reg592, i64 0, i64 %idxprom594, !dbg !4967
  store i8 %403, i8* %arrayidx595, align 1, !dbg !4971
  %407 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4972
  %408 = load %struct.rtx_def*, %struct.rtx_def** %407, align 8, !dbg !4972
  %409 = bitcast %struct.rtx_def* %408 to i32*, !dbg !4972
  %bf.load596 = load i32, i32* %409, align 8, !dbg !4972
  %bf.clear597 = and i32 %bf.load596, 65535, !dbg !4972
  %cmp598 = icmp eq i32 %bf.clear597, 37, !dbg !4972
  br i1 %cmp598, label %land.lhs.true600, label %cond.true606, !dbg !4972

land.lhs.true600:                                 ; preds = %sw.bb586
  %410 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4972
  %411 = load %struct.rtx_def*, %struct.rtx_def** %410, align 8, !dbg !4972
  %call601 = call i32 @rhs_regno(%struct.rtx_def* %411), !dbg !4972
  %conv602 = zext i32 %call601 to i64, !dbg !4972
  %sub603 = sub i64 %conv602, 8, !dbg !4972
  %cmp604 = icmp ule i64 %sub603, 7, !dbg !4972
  br i1 %cmp604, label %cond.false607, label %cond.true606, !dbg !4972

cond.true606:                                     ; preds = %land.lhs.true600, %sw.bb586
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1756, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !4972
  br label %cond.end608, !dbg !4972

cond.false607:                                    ; preds = %land.lhs.true600
  br label %cond.end608, !dbg !4972

cond.end608:                                      ; preds = %cond.false607, %cond.true606
  %cond609 = phi i32 [ 0, %cond.true606 ], [ 0, %cond.false607 ], !dbg !4972
  %412 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4973
  %413 = load %struct.rtx_def*, %struct.rtx_def** %412, align 8, !dbg !4973
  %call610 = call i32 @rhs_regno(%struct.rtx_def* %413), !dbg !4973
  %conv611 = trunc i32 %call610 to i8, !dbg !4973
  %414 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4974
  %reg612 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %414, i32 0, i32 2, !dbg !4975
  %415 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4976
  %top613 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %415, i32 0, i32 0, !dbg !4977
  %416 = load i32, i32* %top613, align 8, !dbg !4977
  %sub614 = sub nsw i32 %416, 1, !dbg !4978
  %idxprom615 = sext i32 %sub614 to i64, !dbg !4974
  %arrayidx616 = getelementptr inbounds [8 x i8], [8 x i8]* %reg612, i64 0, i64 %idxprom615, !dbg !4974
  store i8 %conv611, i8* %arrayidx616, align 1, !dbg !4979
  %417 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4980
  %418 = load %struct.rtx_def*, %struct.rtx_def** %417, align 8, !dbg !4980
  %call617 = call i32 @rhs_regno(%struct.rtx_def* %418), !dbg !4980
  %sh_prom618 = zext i32 %call617 to i64, !dbg !4980
  %shl619 = shl i64 1, %sh_prom618, !dbg !4980
  %419 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !4980
  %reg_set620 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %419, i32 0, i32 1, !dbg !4980
  %420 = load i64, i64* %reg_set620, align 8, !dbg !4980
  %or621 = or i64 %420, %shl619, !dbg !4980
  store i64 %or621, i64* %reg_set620, align 8, !dbg !4980
  %421 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !4981
  call void @replace_reg(%struct.rtx_def** %421, i32 9), !dbg !4982
  %422 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4983
  %u622 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %422, i32 0, i32 1, !dbg !4983
  %fld623 = bitcast %union.u* %u622 to [1 x %union.rtunion_def]*, !dbg !4983
  %arrayidx624 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld623, i64 0, i64 0, !dbg !4983
  %rt_rtvec625 = bitcast %union.rtunion_def* %arrayidx624 to %struct.rtvec_def**, !dbg !4983
  %423 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec625, align 8, !dbg !4983
  %elem626 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %423, i32 0, i32 1, !dbg !4983
  %arrayidx627 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem626, i64 0, i64 0, !dbg !4983
  %call628 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx627), !dbg !4984
  store %struct.rtx_def** %call628, %struct.rtx_def*** %src1, align 8, !dbg !4985
  %424 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4986
  call void @replace_reg(%struct.rtx_def** %424, i32 8), !dbg !4987
  br label %sw.epilog, !dbg !4988

sw.bb629:                                         ; preds = %sw.bb494, %sw.bb494, %sw.bb494
  %425 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4989
  %u630 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %425, i32 0, i32 1, !dbg !4989
  %fld631 = bitcast %union.u* %u630 to [1 x %union.rtunion_def]*, !dbg !4989
  %arrayidx632 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld631, i64 0, i64 0, !dbg !4989
  %rt_rtvec633 = bitcast %union.rtunion_def* %arrayidx632 to %struct.rtvec_def**, !dbg !4989
  %426 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec633, align 8, !dbg !4989
  %elem634 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %426, i32 0, i32 1, !dbg !4989
  %arrayidx635 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem634, i64 0, i64 0, !dbg !4989
  %call636 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx635), !dbg !4990
  store %struct.rtx_def** %call636, %struct.rtx_def*** %src1, align 8, !dbg !4991
  %427 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !4992
  %u637 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %427, i32 0, i32 1, !dbg !4992
  %fld638 = bitcast %union.u* %u637 to [1 x %union.rtunion_def]*, !dbg !4992
  %arrayidx639 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld638, i64 0, i64 0, !dbg !4992
  %rt_rtvec640 = bitcast %union.rtunion_def* %arrayidx639 to %struct.rtvec_def**, !dbg !4992
  %428 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec640, align 8, !dbg !4992
  %elem641 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %428, i32 0, i32 1, !dbg !4992
  %arrayidx642 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem641, i64 0, i64 1, !dbg !4992
  %call643 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx642), !dbg !4993
  store %struct.rtx_def** %call643, %struct.rtx_def*** %src2, align 8, !dbg !4994
  %429 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4995
  %430 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !4996
  %431 = load %struct.rtx_def*, %struct.rtx_def** %430, align 8, !dbg !4996
  %call644 = call i32 @rhs_regno(%struct.rtx_def* %431), !dbg !4996
  %call645 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %429, i32 1, i32 %call644), !dbg !4997
  store %struct.rtx_def* %call645, %struct.rtx_def** %src1_note, align 8, !dbg !4998
  %432 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4999
  %433 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5000
  %434 = load %struct.rtx_def*, %struct.rtx_def** %433, align 8, !dbg !5000
  %call646 = call i32 @rhs_regno(%struct.rtx_def* %434), !dbg !5000
  %call647 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %432, i32 1, i32 %call646), !dbg !5001
  store %struct.rtx_def* %call647, %struct.rtx_def** %src2_note, align 8, !dbg !5002
  %435 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5003
  %436 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5004
  %437 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5005
  %438 = load %struct.rtx_def*, %struct.rtx_def** %437, align 8, !dbg !5006
  %439 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5007
  %440 = load %struct.rtx_def*, %struct.rtx_def** %439, align 8, !dbg !5008
  call void @swap_to_top(%struct.rtx_def* %435, %struct.stack_def* %436, %struct.rtx_def* %438, %struct.rtx_def* %440), !dbg !5009
  %441 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5010
  call void @replace_reg(%struct.rtx_def** %441, i32 8), !dbg !5011
  %442 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5012
  call void @replace_reg(%struct.rtx_def** %442, i32 9), !dbg !5013
  %443 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !5014
  %tobool648 = icmp ne %struct.rtx_def* %443, null, !dbg !5014
  br i1 %tobool648, label %if.then649, label %if.end654, !dbg !5016

if.then649:                                       ; preds = %sw.bb629
  %444 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !5017
  %u650 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %444, i32 0, i32 1, !dbg !5017
  %fld651 = bitcast %union.u* %u650 to [1 x %union.rtunion_def]*, !dbg !5017
  %arrayidx652 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld651, i64 0, i64 0, !dbg !5017
  %rt_rtx653 = bitcast %union.rtunion_def* %arrayidx652 to %struct.rtx_def**, !dbg !5017
  call void @replace_reg(%struct.rtx_def** %rt_rtx653, i32 8), !dbg !5018
  br label %if.end654, !dbg !5018

if.end654:                                        ; preds = %if.then649, %sw.bb629
  %445 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !5019
  %tobool655 = icmp ne %struct.rtx_def* %445, null, !dbg !5019
  br i1 %tobool655, label %if.then656, label %if.end661, !dbg !5021

if.then656:                                       ; preds = %if.end654
  %446 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !5022
  %u657 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %446, i32 0, i32 1, !dbg !5022
  %fld658 = bitcast %union.u* %u657 to [1 x %union.rtunion_def]*, !dbg !5022
  %arrayidx659 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld658, i64 0, i64 0, !dbg !5022
  %rt_rtx660 = bitcast %union.rtunion_def* %arrayidx659 to %struct.rtx_def**, !dbg !5022
  call void @replace_reg(%struct.rtx_def** %rt_rtx660, i32 9), !dbg !5023
  br label %if.end661, !dbg !5023

if.end661:                                        ; preds = %if.then656, %if.end654
  %447 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5024
  %reg662 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %447, i32 0, i32 2, !dbg !5024
  %448 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5024
  %top663 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %448, i32 0, i32 0, !dbg !5024
  %449 = load i32, i32* %top663, align 8, !dbg !5024
  %idxprom664 = sext i32 %449 to i64, !dbg !5024
  %arrayidx665 = getelementptr inbounds [8 x i8], [8 x i8]* %reg662, i64 0, i64 %idxprom664, !dbg !5024
  %450 = load i8, i8* %arrayidx665, align 1, !dbg !5024
  %conv666 = zext i8 %450 to i32, !dbg !5024
  %sh_prom667 = zext i32 %conv666 to i64, !dbg !5024
  %shl668 = shl i64 1, %sh_prom667, !dbg !5024
  %neg669 = xor i64 %shl668, -1, !dbg !5024
  %451 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5024
  %reg_set670 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %451, i32 0, i32 1, !dbg !5024
  %452 = load i64, i64* %reg_set670, align 8, !dbg !5024
  %and671 = and i64 %452, %neg669, !dbg !5024
  store i64 %and671, i64* %reg_set670, align 8, !dbg !5024
  %453 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5025
  %reg672 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %453, i32 0, i32 2, !dbg !5025
  %454 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5025
  %top673 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %454, i32 0, i32 0, !dbg !5025
  %455 = load i32, i32* %top673, align 8, !dbg !5025
  %sub674 = sub nsw i32 %455, 1, !dbg !5025
  %idxprom675 = sext i32 %sub674 to i64, !dbg !5025
  %arrayidx676 = getelementptr inbounds [8 x i8], [8 x i8]* %reg672, i64 0, i64 %idxprom675, !dbg !5025
  %456 = load i8, i8* %arrayidx676, align 1, !dbg !5025
  %conv677 = zext i8 %456 to i32, !dbg !5025
  %sh_prom678 = zext i32 %conv677 to i64, !dbg !5025
  %shl679 = shl i64 1, %sh_prom678, !dbg !5025
  %neg680 = xor i64 %shl679, -1, !dbg !5025
  %457 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5025
  %reg_set681 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %457, i32 0, i32 1, !dbg !5025
  %458 = load i64, i64* %reg_set681, align 8, !dbg !5025
  %and682 = and i64 %458, %neg680, !dbg !5025
  store i64 %and682, i64* %reg_set681, align 8, !dbg !5025
  %459 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5026
  %top683 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %459, i32 0, i32 0, !dbg !5027
  %460 = load i32, i32* %top683, align 8, !dbg !5028
  %sub684 = sub nsw i32 %460, 2, !dbg !5028
  store i32 %sub684, i32* %top683, align 8, !dbg !5028
  %461 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5029
  %462 = load %struct.rtx_def*, %struct.rtx_def** %461, align 8, !dbg !5029
  %call685 = call i32 @rhs_regno(%struct.rtx_def* %462), !dbg !5029
  %conv686 = trunc i32 %call685 to i8, !dbg !5029
  %463 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5030
  %reg687 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %463, i32 0, i32 2, !dbg !5031
  %464 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5032
  %top688 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %464, i32 0, i32 0, !dbg !5033
  %465 = load i32, i32* %top688, align 8, !dbg !5034
  %inc689 = add nsw i32 %465, 1, !dbg !5034
  store i32 %inc689, i32* %top688, align 8, !dbg !5034
  %idxprom690 = sext i32 %inc689 to i64, !dbg !5030
  %arrayidx691 = getelementptr inbounds [8 x i8], [8 x i8]* %reg687, i64 0, i64 %idxprom690, !dbg !5030
  store i8 %conv686, i8* %arrayidx691, align 1, !dbg !5035
  %466 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5036
  %467 = load %struct.rtx_def*, %struct.rtx_def** %466, align 8, !dbg !5036
  %call692 = call i32 @rhs_regno(%struct.rtx_def* %467), !dbg !5036
  %sh_prom693 = zext i32 %call692 to i64, !dbg !5036
  %shl694 = shl i64 1, %sh_prom693, !dbg !5036
  %468 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5036
  %reg_set695 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %468, i32 0, i32 1, !dbg !5036
  %469 = load i64, i64* %reg_set695, align 8, !dbg !5036
  %or696 = or i64 %469, %shl694, !dbg !5036
  store i64 %or696, i64* %reg_set695, align 8, !dbg !5036
  %470 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5037
  call void @replace_reg(%struct.rtx_def** %470, i32 8), !dbg !5038
  br label %sw.epilog, !dbg !5039

sw.bb697:                                         ; preds = %sw.bb494, %sw.bb494, %sw.bb494
  %471 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5040
  %u698 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %471, i32 0, i32 1, !dbg !5040
  %fld699 = bitcast %union.u* %u698 to [1 x %union.rtunion_def]*, !dbg !5040
  %arrayidx700 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld699, i64 0, i64 0, !dbg !5040
  %rt_rtvec701 = bitcast %union.rtunion_def* %arrayidx700 to %struct.rtvec_def**, !dbg !5040
  %472 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec701, align 8, !dbg !5040
  %elem702 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %472, i32 0, i32 1, !dbg !5040
  %arrayidx703 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem702, i64 0, i64 0, !dbg !5040
  %call704 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx703), !dbg !5041
  store %struct.rtx_def** %call704, %struct.rtx_def*** %src1, align 8, !dbg !5042
  %473 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5043
  %u705 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %473, i32 0, i32 1, !dbg !5043
  %fld706 = bitcast %union.u* %u705 to [1 x %union.rtunion_def]*, !dbg !5043
  %arrayidx707 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld706, i64 0, i64 0, !dbg !5043
  %rt_rtvec708 = bitcast %union.rtunion_def* %arrayidx707 to %struct.rtvec_def**, !dbg !5043
  %474 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec708, align 8, !dbg !5043
  %elem709 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %474, i32 0, i32 1, !dbg !5043
  %arrayidx710 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem709, i64 0, i64 1, !dbg !5043
  %call711 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx710), !dbg !5044
  store %struct.rtx_def** %call711, %struct.rtx_def*** %src2, align 8, !dbg !5045
  %475 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5046
  %476 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5047
  %477 = load %struct.rtx_def*, %struct.rtx_def** %476, align 8, !dbg !5047
  %call712 = call i32 @rhs_regno(%struct.rtx_def* %477), !dbg !5047
  %call713 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %475, i32 1, i32 %call712), !dbg !5048
  store %struct.rtx_def* %call713, %struct.rtx_def** %src1_note, align 8, !dbg !5049
  %478 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5050
  %479 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5051
  %480 = load %struct.rtx_def*, %struct.rtx_def** %479, align 8, !dbg !5051
  %call714 = call i32 @rhs_regno(%struct.rtx_def* %480), !dbg !5051
  %call715 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %478, i32 1, i32 %call714), !dbg !5052
  store %struct.rtx_def* %call715, %struct.rtx_def** %src2_note, align 8, !dbg !5053
  %481 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !5054
  %tobool716 = icmp ne %struct.rtx_def* %481, null, !dbg !5054
  br i1 %tobool716, label %cond.true717, label %cond.false718, !dbg !5054

cond.true717:                                     ; preds = %sw.bb697
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1815, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5054
  br label %cond.end719, !dbg !5054

cond.false718:                                    ; preds = %sw.bb697
  br label %cond.end719, !dbg !5054

cond.end719:                                      ; preds = %cond.false718, %cond.true717
  %cond720 = phi i32 [ 0, %cond.true717 ], [ 0, %cond.false718 ], !dbg !5054
  %482 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !5055
  %tobool721 = icmp ne %struct.rtx_def* %482, null, !dbg !5055
  br i1 %tobool721, label %cond.true722, label %cond.false723, !dbg !5055

cond.true722:                                     ; preds = %cond.end719
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1816, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5055
  br label %cond.end724, !dbg !5055

cond.false723:                                    ; preds = %cond.end719
  br label %cond.end724, !dbg !5055

cond.end724:                                      ; preds = %cond.false723, %cond.true722
  %cond725 = phi i32 [ 0, %cond.true722 ], [ 0, %cond.false723 ], !dbg !5055
  %483 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5056
  %484 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5057
  %485 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5058
  %486 = load %struct.rtx_def*, %struct.rtx_def** %485, align 8, !dbg !5059
  %487 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5060
  %488 = load %struct.rtx_def*, %struct.rtx_def** %487, align 8, !dbg !5061
  call void @swap_to_top(%struct.rtx_def* %483, %struct.stack_def* %484, %struct.rtx_def* %486, %struct.rtx_def* %488), !dbg !5062
  %489 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5063
  %490 = load %struct.rtx_def*, %struct.rtx_def** %489, align 8, !dbg !5063
  %491 = bitcast %struct.rtx_def* %490 to i32*, !dbg !5063
  %bf.load726 = load i32, i32* %491, align 8, !dbg !5063
  %bf.clear727 = and i32 %bf.load726, 65535, !dbg !5063
  %cmp728 = icmp eq i32 %bf.clear727, 37, !dbg !5063
  br i1 %cmp728, label %land.lhs.true730, label %if.end748, !dbg !5063

land.lhs.true730:                                 ; preds = %cond.end724
  %492 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5063
  %493 = load %struct.rtx_def*, %struct.rtx_def** %492, align 8, !dbg !5063
  %call731 = call i32 @rhs_regno(%struct.rtx_def* %493), !dbg !5063
  %conv732 = zext i32 %call731 to i64, !dbg !5063
  %sub733 = sub i64 %conv732, 8, !dbg !5063
  %cmp734 = icmp ule i64 %sub733, 7, !dbg !5063
  br i1 %cmp734, label %if.then736, label %if.end748, !dbg !5065

if.then736:                                       ; preds = %land.lhs.true730
  %494 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5066
  %495 = load %struct.rtx_def*, %struct.rtx_def** %494, align 8, !dbg !5066
  %call737 = call i32 @rhs_regno(%struct.rtx_def* %495), !dbg !5066
  %conv738 = trunc i32 %call737 to i8, !dbg !5066
  %496 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5068
  %reg739 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %496, i32 0, i32 2, !dbg !5069
  %497 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5070
  %top740 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %497, i32 0, i32 0, !dbg !5071
  %498 = load i32, i32* %top740, align 8, !dbg !5071
  %idxprom741 = sext i32 %498 to i64, !dbg !5068
  %arrayidx742 = getelementptr inbounds [8 x i8], [8 x i8]* %reg739, i64 0, i64 %idxprom741, !dbg !5068
  store i8 %conv738, i8* %arrayidx742, align 1, !dbg !5072
  %499 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5073
  %500 = load %struct.rtx_def*, %struct.rtx_def** %499, align 8, !dbg !5073
  %call743 = call i32 @rhs_regno(%struct.rtx_def* %500), !dbg !5073
  %sh_prom744 = zext i32 %call743 to i64, !dbg !5073
  %shl745 = shl i64 1, %sh_prom744, !dbg !5073
  %501 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5073
  %reg_set746 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %501, i32 0, i32 1, !dbg !5073
  %502 = load i64, i64* %reg_set746, align 8, !dbg !5073
  %or747 = or i64 %502, %shl745, !dbg !5073
  store i64 %or747, i64* %reg_set746, align 8, !dbg !5073
  %503 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5074
  call void @replace_reg(%struct.rtx_def** %503, i32 8), !dbg !5075
  br label %if.end748, !dbg !5076

if.end748:                                        ; preds = %if.then736, %land.lhs.true730, %cond.end724
  %504 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5077
  call void @replace_reg(%struct.rtx_def** %504, i32 8), !dbg !5078
  %505 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5079
  call void @replace_reg(%struct.rtx_def** %505, i32 9), !dbg !5080
  br label %sw.epilog, !dbg !5081

sw.bb749:                                         ; preds = %sw.bb494, %sw.bb494, %sw.bb494
  %506 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5082
  %u750 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %506, i32 0, i32 1, !dbg !5082
  %fld751 = bitcast %union.u* %u750 to [1 x %union.rtunion_def]*, !dbg !5082
  %arrayidx752 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld751, i64 0, i64 0, !dbg !5082
  %rt_rtvec753 = bitcast %union.rtunion_def* %arrayidx752 to %struct.rtvec_def**, !dbg !5082
  %507 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec753, align 8, !dbg !5082
  %elem754 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %507, i32 0, i32 1, !dbg !5082
  %arrayidx755 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem754, i64 0, i64 0, !dbg !5082
  %call756 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx755), !dbg !5083
  store %struct.rtx_def** %call756, %struct.rtx_def*** %src1, align 8, !dbg !5084
  %508 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5085
  %u757 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %508, i32 0, i32 1, !dbg !5085
  %fld758 = bitcast %union.u* %u757 to [1 x %union.rtunion_def]*, !dbg !5085
  %arrayidx759 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld758, i64 0, i64 0, !dbg !5085
  %rt_rtvec760 = bitcast %union.rtunion_def* %arrayidx759 to %struct.rtvec_def**, !dbg !5085
  %509 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec760, align 8, !dbg !5085
  %elem761 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %509, i32 0, i32 1, !dbg !5085
  %arrayidx762 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem761, i64 0, i64 1, !dbg !5085
  %call763 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx762), !dbg !5086
  store %struct.rtx_def** %call763, %struct.rtx_def*** %src2, align 8, !dbg !5087
  %510 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5088
  %511 = load %struct.rtx_def*, %struct.rtx_def** %510, align 8, !dbg !5088
  %512 = bitcast %struct.rtx_def* %511 to i32*, !dbg !5088
  %bf.load764 = load i32, i32* %512, align 8, !dbg !5088
  %bf.clear765 = and i32 %bf.load764, 65535, !dbg !5088
  %cmp766 = icmp eq i32 %bf.clear765, 37, !dbg !5088
  br i1 %cmp766, label %land.lhs.true768, label %if.end787, !dbg !5088

land.lhs.true768:                                 ; preds = %sw.bb749
  %513 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5088
  %514 = load %struct.rtx_def*, %struct.rtx_def** %513, align 8, !dbg !5088
  %call769 = call i32 @rhs_regno(%struct.rtx_def* %514), !dbg !5088
  %conv770 = zext i32 %call769 to i64, !dbg !5088
  %sub771 = sub i64 %conv770, 8, !dbg !5088
  %cmp772 = icmp ule i64 %sub771, 7, !dbg !5088
  br i1 %cmp772, label %if.then774, label %if.end787, !dbg !5090

if.then774:                                       ; preds = %land.lhs.true768
  %515 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5091
  %516 = load %struct.rtx_def*, %struct.rtx_def** %515, align 8, !dbg !5091
  %call775 = call i32 @rhs_regno(%struct.rtx_def* %516), !dbg !5091
  %conv776 = trunc i32 %call775 to i8, !dbg !5091
  %517 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5093
  %reg777 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %517, i32 0, i32 2, !dbg !5094
  %518 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5095
  %top778 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %518, i32 0, i32 0, !dbg !5096
  %519 = load i32, i32* %top778, align 8, !dbg !5096
  %sub779 = sub nsw i32 %519, 1, !dbg !5097
  %idxprom780 = sext i32 %sub779 to i64, !dbg !5093
  %arrayidx781 = getelementptr inbounds [8 x i8], [8 x i8]* %reg777, i64 0, i64 %idxprom780, !dbg !5093
  store i8 %conv776, i8* %arrayidx781, align 1, !dbg !5098
  %520 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5099
  %521 = load %struct.rtx_def*, %struct.rtx_def** %520, align 8, !dbg !5099
  %call782 = call i32 @rhs_regno(%struct.rtx_def* %521), !dbg !5099
  %sh_prom783 = zext i32 %call782 to i64, !dbg !5099
  %shl784 = shl i64 1, %sh_prom783, !dbg !5099
  %522 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5099
  %reg_set785 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %522, i32 0, i32 1, !dbg !5099
  %523 = load i64, i64* %reg_set785, align 8, !dbg !5099
  %or786 = or i64 %523, %shl784, !dbg !5099
  store i64 %or786, i64* %reg_set785, align 8, !dbg !5099
  %524 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5100
  call void @replace_reg(%struct.rtx_def** %524, i32 9), !dbg !5101
  br label %if.end787, !dbg !5102

if.end787:                                        ; preds = %if.then774, %land.lhs.true768, %sw.bb749
  %525 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5103
  call void @replace_reg(%struct.rtx_def** %525, i32 8), !dbg !5104
  %526 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5105
  call void @replace_reg(%struct.rtx_def** %526, i32 9), !dbg !5106
  br label %sw.epilog, !dbg !5107

sw.bb788:                                         ; preds = %sw.bb494
  %527 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5108
  %u789 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %527, i32 0, i32 1, !dbg !5108
  %fld790 = bitcast %union.u* %u789 to [1 x %union.rtunion_def]*, !dbg !5108
  %arrayidx791 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld790, i64 0, i64 0, !dbg !5108
  %rt_rtvec792 = bitcast %union.rtunion_def* %arrayidx791 to %struct.rtvec_def**, !dbg !5108
  %528 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec792, align 8, !dbg !5108
  %elem793 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %528, i32 0, i32 1, !dbg !5108
  %arrayidx794 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem793, i64 0, i64 0, !dbg !5108
  %call795 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx794), !dbg !5109
  store %struct.rtx_def** %call795, %struct.rtx_def*** %src1, align 8, !dbg !5110
  %529 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5111
  %u796 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %529, i32 0, i32 1, !dbg !5111
  %fld797 = bitcast %union.u* %u796 to [1 x %union.rtunion_def]*, !dbg !5111
  %arrayidx798 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld797, i64 0, i64 0, !dbg !5111
  %rt_rtvec799 = bitcast %union.rtunion_def* %arrayidx798 to %struct.rtvec_def**, !dbg !5111
  %530 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec799, align 8, !dbg !5111
  %elem800 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %530, i32 0, i32 1, !dbg !5111
  %arrayidx801 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem800, i64 0, i64 1, !dbg !5111
  %call802 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %arrayidx801), !dbg !5112
  store %struct.rtx_def** %call802, %struct.rtx_def*** %src2, align 8, !dbg !5113
  %531 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5114
  call void @replace_reg(%struct.rtx_def** %531, i32 8), !dbg !5115
  %532 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5116
  call void @replace_reg(%struct.rtx_def** %532, i32 9), !dbg !5117
  br label %sw.epilog, !dbg !5118

sw.bb803:                                         ; preds = %sw.bb494
  %533 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5119
  %u804 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %533, i32 0, i32 1, !dbg !5119
  %fld805 = bitcast %union.u* %u804 to [1 x %union.rtunion_def]*, !dbg !5119
  %arrayidx806 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld805, i64 0, i64 0, !dbg !5119
  %rt_rtvec807 = bitcast %union.rtunion_def* %arrayidx806 to %struct.rtvec_def**, !dbg !5119
  %534 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec807, align 8, !dbg !5119
  %elem808 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %534, i32 0, i32 1, !dbg !5119
  %arrayidx809 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem808, i64 0, i64 0, !dbg !5119
  %535 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx809, align 8, !dbg !5119
  store %struct.rtx_def* %535, %struct.rtx_def** %pat_src, align 8, !dbg !5120
  %536 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5121
  %537 = bitcast %struct.rtx_def* %536 to i32*, !dbg !5121
  %bf.load810 = load i32, i32* %537, align 8, !dbg !5121
  %bf.clear811 = and i32 %bf.load810, 65535, !dbg !5121
  %cmp812 = icmp eq i32 %bf.clear811, 18, !dbg !5121
  br i1 %cmp812, label %cond.false815, label %cond.true814, !dbg !5121

cond.true814:                                     ; preds = %sw.bb803
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1871, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5121
  br label %cond.end816, !dbg !5121

cond.false815:                                    ; preds = %sw.bb803
  br label %cond.end816, !dbg !5121

cond.end816:                                      ; preds = %cond.false815, %cond.true814
  %cond817 = phi i32 [ 0, %cond.true814 ], [ 0, %cond.false815 ], !dbg !5121
  %538 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5122
  %u818 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %538, i32 0, i32 1, !dbg !5122
  %fld819 = bitcast %union.u* %u818 to [1 x %union.rtunion_def]*, !dbg !5122
  %arrayidx820 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld819, i64 0, i64 1, !dbg !5122
  %rt_int821 = bitcast %union.rtunion_def* %arrayidx820 to i32*, !dbg !5122
  %539 = load i32, i32* %rt_int821, align 8, !dbg !5122
  %cmp822 = icmp eq i32 %539, 31, !dbg !5122
  br i1 %cmp822, label %cond.false825, label %cond.true824, !dbg !5122

cond.true824:                                     ; preds = %cond.end816
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1872, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5122
  br label %cond.end826, !dbg !5122

cond.false825:                                    ; preds = %cond.end816
  br label %cond.end826, !dbg !5122

cond.end826:                                      ; preds = %cond.false825, %cond.true824
  %cond827 = phi i32 [ 0, %cond.true824 ], [ 0, %cond.false825 ], !dbg !5122
  br label %sw.bb828, !dbg !5122

sw.bb828:                                         ; preds = %sw.bb494, %cond.end826
  %540 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5123
  %u829 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %540, i32 0, i32 1, !dbg !5123
  %fld830 = bitcast %union.u* %u829 to [1 x %union.rtunion_def]*, !dbg !5123
  %arrayidx831 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld830, i64 0, i64 0, !dbg !5123
  %rt_rtvec832 = bitcast %union.rtunion_def* %arrayidx831 to %struct.rtvec_def**, !dbg !5123
  %541 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec832, align 8, !dbg !5123
  %elem833 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %541, i32 0, i32 1, !dbg !5123
  %arrayidx834 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem833, i64 0, i64 0, !dbg !5123
  %542 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx834, align 8, !dbg !5123
  store %struct.rtx_def* %542, %struct.rtx_def** %pat_src, align 8, !dbg !5124
  %543 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5125
  %544 = bitcast %struct.rtx_def* %543 to i32*, !dbg !5125
  %bf.load835 = load i32, i32* %544, align 8, !dbg !5125
  %bf.clear836 = and i32 %bf.load835, 65535, !dbg !5125
  %cmp837 = icmp eq i32 %bf.clear836, 48, !dbg !5125
  br i1 %cmp837, label %cond.false840, label %cond.true839, !dbg !5125

cond.true839:                                     ; preds = %sw.bb828
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1881, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5125
  br label %cond.end841, !dbg !5125

cond.false840:                                    ; preds = %sw.bb828
  br label %cond.end841, !dbg !5125

cond.end841:                                      ; preds = %cond.false840, %cond.true839
  %cond842 = phi i32 [ 0, %cond.true839 ], [ 0, %cond.false840 ], !dbg !5125
  %545 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5126
  %546 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5127
  %547 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5128
  call void @compare_for_stack_reg(%struct.rtx_def* %545, %struct.stack_def* %546, %struct.rtx_def* %547), !dbg !5129
  br label %sw.epilog, !dbg !5130

sw.default:                                       ; preds = %sw.bb494
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1887, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5131
  br label %sw.epilog, !dbg !5132

sw.epilog:                                        ; preds = %sw.default, %cond.end841, %sw.bb788, %if.end787, %if.end748, %if.end661, %cond.end608, %if.end582, %if.end555, %if.end532
  br label %sw.epilog1009, !dbg !5133

sw.bb843:                                         ; preds = %if.end154
  %548 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5134
  %u844 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %548, i32 0, i32 1, !dbg !5134
  %fld845 = bitcast %union.u* %u844 to [1 x %union.rtunion_def]*, !dbg !5134
  %arrayidx846 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld845, i64 0, i64 1, !dbg !5134
  %rt_rtx847 = bitcast %union.rtunion_def* %arrayidx846 to %struct.rtx_def**, !dbg !5134
  %call848 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx847), !dbg !5135
  store %struct.rtx_def** %call848, %struct.rtx_def*** %src1, align 8, !dbg !5136
  %549 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5137
  %u849 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %549, i32 0, i32 1, !dbg !5137
  %fld850 = bitcast %union.u* %u849 to [1 x %union.rtunion_def]*, !dbg !5137
  %arrayidx851 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld850, i64 0, i64 2, !dbg !5137
  %rt_rtx852 = bitcast %union.rtunion_def* %arrayidx851 to %struct.rtx_def**, !dbg !5137
  %call853 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx852), !dbg !5138
  store %struct.rtx_def** %call853, %struct.rtx_def*** %src2, align 8, !dbg !5139
  %550 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5140
  %551 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5141
  %552 = load %struct.rtx_def*, %struct.rtx_def** %551, align 8, !dbg !5141
  %call854 = call i32 @rhs_regno(%struct.rtx_def* %552), !dbg !5141
  %call855 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %550, i32 1, i32 %call854), !dbg !5142
  store %struct.rtx_def* %call855, %struct.rtx_def** %src1_note, align 8, !dbg !5143
  %553 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5144
  %554 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5145
  %555 = load %struct.rtx_def*, %struct.rtx_def** %554, align 8, !dbg !5145
  %call856 = call i32 @rhs_regno(%struct.rtx_def* %555), !dbg !5145
  %call857 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %553, i32 1, i32 %call856), !dbg !5146
  store %struct.rtx_def* %call857, %struct.rtx_def** %src2_note, align 8, !dbg !5147
  %556 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5148
  %557 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5150
  %558 = load %struct.rtx_def*, %struct.rtx_def** %557, align 8, !dbg !5151
  %call858 = call i32 @get_hard_regnum(%struct.stack_def* %556, %struct.rtx_def* %558), !dbg !5152
  %cmp859 = icmp sge i32 %call858, 8, !dbg !5153
  br i1 %cmp859, label %land.lhs.true861, label %if.end924, !dbg !5154

land.lhs.true861:                                 ; preds = %sw.bb843
  %559 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5155
  %560 = load %struct.rtx_def*, %struct.rtx_def** %559, align 8, !dbg !5155
  %call862 = call i32 @rhs_regno(%struct.rtx_def* %560), !dbg !5155
  %561 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5156
  %reg863 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %561, i32 0, i32 2, !dbg !5157
  %562 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5158
  %top864 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %562, i32 0, i32 0, !dbg !5159
  %563 = load i32, i32* %top864, align 8, !dbg !5159
  %idxprom865 = sext i32 %563 to i64, !dbg !5156
  %arrayidx866 = getelementptr inbounds [8 x i8], [8 x i8]* %reg863, i64 0, i64 %idxprom865, !dbg !5156
  %564 = load i8, i8* %arrayidx866, align 1, !dbg !5156
  %conv867 = zext i8 %564 to i32, !dbg !5156
  %cmp868 = icmp ne i32 %call862, %conv867, !dbg !5160
  br i1 %cmp868, label %if.then870, label %if.end924, !dbg !5161

if.then870:                                       ; preds = %land.lhs.true861
  %565 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5162
  %566 = load %struct.rtx_def*, %struct.rtx_def** %565, align 8, !dbg !5162
  %call871 = call i32 @rhs_regno(%struct.rtx_def* %566), !dbg !5162
  %567 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5165
  %reg872 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %567, i32 0, i32 2, !dbg !5166
  %568 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5167
  %top873 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %568, i32 0, i32 0, !dbg !5168
  %569 = load i32, i32* %top873, align 8, !dbg !5168
  %idxprom874 = sext i32 %569 to i64, !dbg !5165
  %arrayidx875 = getelementptr inbounds [8 x i8], [8 x i8]* %reg872, i64 0, i64 %idxprom874, !dbg !5165
  %570 = load i8, i8* %arrayidx875, align 1, !dbg !5165
  %conv876 = zext i8 %570 to i32, !dbg !5165
  %cmp877 = icmp eq i32 %call871, %conv876, !dbg !5169
  br i1 %cmp877, label %land.lhs.true879, label %lor.lhs.false881, !dbg !5170

land.lhs.true879:                                 ; preds = %if.then870
  %571 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !5171
  %tobool880 = icmp ne %struct.rtx_def* %571, null, !dbg !5171
  br i1 %tobool880, label %if.then892, label %lor.lhs.false881, !dbg !5172

lor.lhs.false881:                                 ; preds = %land.lhs.true879, %if.then870
  %572 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5173
  %573 = load %struct.rtx_def*, %struct.rtx_def** %572, align 8, !dbg !5173
  %call882 = call i32 @rhs_regno(%struct.rtx_def* %573), !dbg !5173
  %574 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5174
  %reg883 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %574, i32 0, i32 2, !dbg !5175
  %575 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5176
  %top884 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %575, i32 0, i32 0, !dbg !5177
  %576 = load i32, i32* %top884, align 8, !dbg !5177
  %idxprom885 = sext i32 %576 to i64, !dbg !5174
  %arrayidx886 = getelementptr inbounds [8 x i8], [8 x i8]* %reg883, i64 0, i64 %idxprom885, !dbg !5174
  %577 = load i8, i8* %arrayidx886, align 1, !dbg !5174
  %conv887 = zext i8 %577 to i32, !dbg !5174
  %cmp888 = icmp eq i32 %call882, %conv887, !dbg !5178
  br i1 %cmp888, label %land.lhs.true890, label %if.else922, !dbg !5179

land.lhs.true890:                                 ; preds = %lor.lhs.false881
  %578 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !5180
  %tobool891 = icmp ne %struct.rtx_def* %578, null, !dbg !5180
  br i1 %tobool891, label %if.then892, label %if.else922, !dbg !5181

if.then892:                                       ; preds = %land.lhs.true890, %land.lhs.true879
  call void @llvm.dbg.declare(metadata i32* %idx1, metadata !5182, metadata !DIExpression()), !dbg !5184
  %579 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5185
  %580 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5186
  %581 = load %struct.rtx_def*, %struct.rtx_def** %580, align 8, !dbg !5187
  %call893 = call i32 @get_hard_regnum(%struct.stack_def* %579, %struct.rtx_def* %581), !dbg !5188
  %sub894 = sub nsw i32 %call893, 8, !dbg !5189
  store i32 %sub894, i32* %idx1, align 4, !dbg !5184
  call void @llvm.dbg.declare(metadata i32* %idx2, metadata !5190, metadata !DIExpression()), !dbg !5191
  %582 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5192
  %583 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5193
  %584 = load %struct.rtx_def*, %struct.rtx_def** %583, align 8, !dbg !5194
  %call895 = call i32 @get_hard_regnum(%struct.stack_def* %582, %struct.rtx_def* %584), !dbg !5195
  %sub896 = sub nsw i32 %call895, 8, !dbg !5196
  store i32 %sub896, i32* %idx2, align 4, !dbg !5191
  %585 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5197
  %586 = load %struct.rtx_def*, %struct.rtx_def** %585, align 8, !dbg !5197
  %call897 = call i32 @rhs_regno(%struct.rtx_def* %586), !dbg !5197
  %conv898 = trunc i32 %call897 to i8, !dbg !5197
  %587 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5198
  %reg899 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %587, i32 0, i32 2, !dbg !5199
  %588 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5200
  %top900 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %588, i32 0, i32 0, !dbg !5201
  %589 = load i32, i32* %top900, align 8, !dbg !5201
  %590 = load i32, i32* %idx1, align 4, !dbg !5202
  %sub901 = sub nsw i32 %589, %590, !dbg !5203
  %idxprom902 = sext i32 %sub901 to i64, !dbg !5198
  %arrayidx903 = getelementptr inbounds [8 x i8], [8 x i8]* %reg899, i64 0, i64 %idxprom902, !dbg !5198
  store i8 %conv898, i8* %arrayidx903, align 1, !dbg !5204
  %591 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5205
  %592 = load %struct.rtx_def*, %struct.rtx_def** %591, align 8, !dbg !5205
  %call904 = call i32 @rhs_regno(%struct.rtx_def* %592), !dbg !5205
  %conv905 = trunc i32 %call904 to i8, !dbg !5205
  %593 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5206
  %reg906 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %593, i32 0, i32 2, !dbg !5207
  %594 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5208
  %top907 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %594, i32 0, i32 0, !dbg !5209
  %595 = load i32, i32* %top907, align 8, !dbg !5209
  %596 = load i32, i32* %idx2, align 4, !dbg !5210
  %sub908 = sub nsw i32 %595, %596, !dbg !5211
  %idxprom909 = sext i32 %sub908 to i64, !dbg !5206
  %arrayidx910 = getelementptr inbounds [8 x i8], [8 x i8]* %reg906, i64 0, i64 %idxprom909, !dbg !5206
  store i8 %conv905, i8* %arrayidx910, align 1, !dbg !5212
  %597 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5213
  %u911 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %597, i32 0, i32 1, !dbg !5213
  %fld912 = bitcast %union.u* %u911 to [1 x %union.rtunion_def]*, !dbg !5213
  %arrayidx913 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld912, i64 0, i64 0, !dbg !5213
  %rt_rtx914 = bitcast %union.rtunion_def* %arrayidx913 to %struct.rtx_def**, !dbg !5213
  %598 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx914, align 8, !dbg !5213
  %599 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5213
  %call915 = call i32 @reversed_comparison_code(%struct.rtx_def* %598, %struct.rtx_def* %599), !dbg !5213
  %600 = load %struct.rtx_def*, %struct.rtx_def** %pat_src, align 8, !dbg !5213
  %u916 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %600, i32 0, i32 1, !dbg !5213
  %fld917 = bitcast %union.u* %u916 to [1 x %union.rtunion_def]*, !dbg !5213
  %arrayidx918 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld917, i64 0, i64 0, !dbg !5213
  %rt_rtx919 = bitcast %union.rtunion_def* %arrayidx918 to %struct.rtx_def**, !dbg !5213
  %601 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx919, align 8, !dbg !5213
  %602 = bitcast %struct.rtx_def* %601 to i32*, !dbg !5213
  %bf.load920 = load i32, i32* %602, align 8, !dbg !5213
  %bf.value = and i32 %call915, 65535, !dbg !5213
  %bf.clear921 = and i32 %bf.load920, -65536, !dbg !5213
  %bf.set = or i32 %bf.clear921, %bf.value, !dbg !5213
  store i32 %bf.set, i32* %602, align 8, !dbg !5213
  br label %if.end923, !dbg !5214

if.else922:                                       ; preds = %land.lhs.true890, %lor.lhs.false881
  %603 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5215
  %604 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5216
  %605 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5217
  %606 = load %struct.rtx_def*, %struct.rtx_def** %605, align 8, !dbg !5218
  call void @emit_swap_insn(%struct.rtx_def* %603, %struct.stack_def* %604, %struct.rtx_def* %606), !dbg !5219
  br label %if.end923

if.end923:                                        ; preds = %if.else922, %if.then892
  br label %if.end924, !dbg !5220

if.end924:                                        ; preds = %if.end923, %land.lhs.true861, %sw.bb843
  call void @llvm.dbg.declare(metadata [3 x %struct.rtx_def*]* %src_note, metadata !5221, metadata !DIExpression()), !dbg !5224
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5225, metadata !DIExpression()), !dbg !5226
  %arrayidx925 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %src_note, i64 0, i64 0, !dbg !5227
  store %struct.rtx_def* null, %struct.rtx_def** %arrayidx925, align 16, !dbg !5228
  %607 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !5229
  %arrayidx926 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %src_note, i64 0, i64 1, !dbg !5230
  store %struct.rtx_def* %607, %struct.rtx_def** %arrayidx926, align 8, !dbg !5231
  %608 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !5232
  %arrayidx927 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %src_note, i64 0, i64 2, !dbg !5233
  store %struct.rtx_def* %608, %struct.rtx_def** %arrayidx927, align 16, !dbg !5234
  %609 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5235
  %610 = load %struct.rtx_def*, %struct.rtx_def** %609, align 8, !dbg !5235
  %611 = bitcast %struct.rtx_def* %610 to i32*, !dbg !5235
  %bf.load928 = load i32, i32* %611, align 8, !dbg !5235
  %bf.clear929 = and i32 %bf.load928, 65535, !dbg !5235
  %cmp930 = icmp eq i32 %bf.clear929, 37, !dbg !5235
  br i1 %cmp930, label %land.lhs.true932, label %if.end940, !dbg !5235

land.lhs.true932:                                 ; preds = %if.end924
  %612 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5235
  %613 = load %struct.rtx_def*, %struct.rtx_def** %612, align 8, !dbg !5235
  %call933 = call i32 @rhs_regno(%struct.rtx_def* %613), !dbg !5235
  %conv934 = zext i32 %call933 to i64, !dbg !5235
  %sub935 = sub i64 %conv934, 8, !dbg !5235
  %cmp936 = icmp ule i64 %sub935, 7, !dbg !5235
  br i1 %cmp936, label %if.then938, label %if.end940, !dbg !5237

if.then938:                                       ; preds = %land.lhs.true932
  %614 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5238
  %615 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5239
  %616 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !5240
  %617 = load %struct.rtx_def*, %struct.rtx_def** %616, align 8, !dbg !5241
  %call939 = call i32 @get_hard_regnum(%struct.stack_def* %615, %struct.rtx_def* %617), !dbg !5242
  call void @replace_reg(%struct.rtx_def** %614, i32 %call939), !dbg !5243
  br label %if.end940, !dbg !5243

if.end940:                                        ; preds = %if.then938, %land.lhs.true932, %if.end924
  %618 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5244
  %619 = load %struct.rtx_def*, %struct.rtx_def** %618, align 8, !dbg !5244
  %620 = bitcast %struct.rtx_def* %619 to i32*, !dbg !5244
  %bf.load941 = load i32, i32* %620, align 8, !dbg !5244
  %bf.clear942 = and i32 %bf.load941, 65535, !dbg !5244
  %cmp943 = icmp eq i32 %bf.clear942, 37, !dbg !5244
  br i1 %cmp943, label %land.lhs.true945, label %if.end953, !dbg !5244

land.lhs.true945:                                 ; preds = %if.end940
  %621 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5244
  %622 = load %struct.rtx_def*, %struct.rtx_def** %621, align 8, !dbg !5244
  %call946 = call i32 @rhs_regno(%struct.rtx_def* %622), !dbg !5244
  %conv947 = zext i32 %call946 to i64, !dbg !5244
  %sub948 = sub i64 %conv947, 8, !dbg !5244
  %cmp949 = icmp ule i64 %sub948, 7, !dbg !5244
  br i1 %cmp949, label %if.then951, label %if.end953, !dbg !5246

if.then951:                                       ; preds = %land.lhs.true945
  %623 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5247
  %624 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5248
  %625 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !5249
  %626 = load %struct.rtx_def*, %struct.rtx_def** %625, align 8, !dbg !5250
  %call952 = call i32 @get_hard_regnum(%struct.stack_def* %624, %struct.rtx_def* %626), !dbg !5251
  call void @replace_reg(%struct.rtx_def** %623, i32 %call952), !dbg !5252
  br label %if.end953, !dbg !5252

if.end953:                                        ; preds = %if.then951, %land.lhs.true945, %if.end940
  store i32 1, i32* %i, align 4, !dbg !5253
  br label %for.cond954, !dbg !5255

for.cond954:                                      ; preds = %for.inc, %if.end953
  %627 = load i32, i32* %i, align 4, !dbg !5256
  %cmp955 = icmp sle i32 %627, 2, !dbg !5258
  br i1 %cmp955, label %for.body957, label %for.end990, !dbg !5259

for.body957:                                      ; preds = %for.cond954
  %628 = load i32, i32* %i, align 4, !dbg !5260
  %idxprom958 = sext i32 %628 to i64, !dbg !5262
  %arrayidx959 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %src_note, i64 0, i64 %idxprom958, !dbg !5262
  %629 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx959, align 8, !dbg !5262
  %tobool960 = icmp ne %struct.rtx_def* %629, null, !dbg !5262
  br i1 %tobool960, label %if.then961, label %if.end988, !dbg !5263

if.then961:                                       ; preds = %for.body957
  call void @llvm.dbg.declare(metadata i32* %regno962, metadata !5264, metadata !DIExpression()), !dbg !5266
  %630 = load i32, i32* %i, align 4, !dbg !5267
  %idxprom963 = sext i32 %630 to i64, !dbg !5267
  %arrayidx964 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %src_note, i64 0, i64 %idxprom963, !dbg !5267
  %631 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx964, align 8, !dbg !5267
  %u965 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %631, i32 0, i32 1, !dbg !5267
  %fld966 = bitcast %union.u* %u965 to [1 x %union.rtunion_def]*, !dbg !5267
  %arrayidx967 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld966, i64 0, i64 0, !dbg !5267
  %rt_rtx968 = bitcast %union.rtunion_def* %arrayidx967 to %struct.rtx_def**, !dbg !5267
  %632 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx968, align 8, !dbg !5267
  %call969 = call i32 @rhs_regno(%struct.rtx_def* %632), !dbg !5267
  store i32 %call969, i32* %regno962, align 4, !dbg !5266
  %633 = load i32, i32* %regno962, align 4, !dbg !5268
  %634 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5268
  %reg970 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %634, i32 0, i32 2, !dbg !5268
  %635 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5268
  %top971 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %635, i32 0, i32 0, !dbg !5268
  %636 = load i32, i32* %top971, align 8, !dbg !5268
  %idxprom972 = sext i32 %636 to i64, !dbg !5268
  %arrayidx973 = getelementptr inbounds [8 x i8], [8 x i8]* %reg970, i64 0, i64 %idxprom972, !dbg !5268
  %637 = load i8, i8* %arrayidx973, align 1, !dbg !5268
  %conv974 = zext i8 %637 to i32, !dbg !5268
  %cmp975 = icmp ne i32 %633, %conv974, !dbg !5268
  br i1 %cmp975, label %cond.false978, label %cond.true977, !dbg !5268

cond.true977:                                     ; preds = %if.then961
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1957, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5268
  br label %cond.end979, !dbg !5268

cond.false978:                                    ; preds = %if.then961
  br label %cond.end979, !dbg !5268

cond.end979:                                      ; preds = %cond.false978, %cond.true977
  %cond980 = phi i32 [ 0, %cond.true977 ], [ 0, %cond.false978 ], !dbg !5268
  %638 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5269
  %639 = load i32, i32* %regno962, align 4, !dbg !5270
  call void @remove_regno_note(%struct.rtx_def* %638, i32 1, i32 %639), !dbg !5271
  %640 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5272
  %641 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5273
  %642 = load i32, i32* %i, align 4, !dbg !5274
  %idxprom981 = sext i32 %642 to i64, !dbg !5274
  %arrayidx982 = getelementptr inbounds [3 x %struct.rtx_def*], [3 x %struct.rtx_def*]* %src_note, i64 0, i64 %idxprom981, !dbg !5274
  %643 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx982, align 8, !dbg !5274
  %u983 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %643, i32 0, i32 1, !dbg !5274
  %fld984 = bitcast %union.u* %u983 to [1 x %union.rtunion_def]*, !dbg !5274
  %arrayidx985 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld984, i64 0, i64 0, !dbg !5274
  %rt_rtx986 = bitcast %union.rtunion_def* %arrayidx985 to %struct.rtx_def**, !dbg !5274
  %644 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx986, align 8, !dbg !5274
  %call987 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %640, %struct.stack_def* %641, %struct.rtx_def* %644, i32 0), !dbg !5275
  br label %if.end988, !dbg !5276

if.end988:                                        ; preds = %cond.end979, %for.body957
  br label %for.inc, !dbg !5277

for.inc:                                          ; preds = %if.end988
  %645 = load i32, i32* %i, align 4, !dbg !5278
  %inc989 = add nsw i32 %645, 1, !dbg !5278
  store i32 %inc989, i32* %i, align 4, !dbg !5278
  br label %for.cond954, !dbg !5279, !llvm.loop !5280

for.end990:                                       ; preds = %for.cond954
  %646 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5282
  %647 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5284
  %648 = load %struct.rtx_def*, %struct.rtx_def** %647, align 8, !dbg !5285
  %call991 = call i32 @get_hard_regnum(%struct.stack_def* %646, %struct.rtx_def* %648), !dbg !5286
  %cmp992 = icmp slt i32 %call991, 8, !dbg !5287
  br i1 %cmp992, label %if.then994, label %if.end1002, !dbg !5288

if.then994:                                       ; preds = %for.end990
  %649 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5289
  %650 = load %struct.rtx_def*, %struct.rtx_def** %649, align 8, !dbg !5289
  %call995 = call i32 @rhs_regno(%struct.rtx_def* %650), !dbg !5289
  %conv996 = trunc i32 %call995 to i8, !dbg !5289
  %651 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5290
  %reg997 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %651, i32 0, i32 2, !dbg !5291
  %652 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5292
  %top998 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %652, i32 0, i32 0, !dbg !5293
  %653 = load i32, i32* %top998, align 8, !dbg !5294
  %inc999 = add nsw i32 %653, 1, !dbg !5294
  store i32 %inc999, i32* %top998, align 8, !dbg !5294
  %idxprom1000 = sext i32 %inc999 to i64, !dbg !5290
  %arrayidx1001 = getelementptr inbounds [8 x i8], [8 x i8]* %reg997, i64 0, i64 %idxprom1000, !dbg !5290
  store i8 %conv996, i8* %arrayidx1001, align 1, !dbg !5295
  br label %if.end1002, !dbg !5290

if.end1002:                                       ; preds = %if.then994, %for.end990
  %654 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5296
  %655 = load %struct.rtx_def*, %struct.rtx_def** %654, align 8, !dbg !5296
  %call1003 = call i32 @rhs_regno(%struct.rtx_def* %655), !dbg !5296
  %sh_prom1004 = zext i32 %call1003 to i64, !dbg !5296
  %shl1005 = shl i64 1, %sh_prom1004, !dbg !5296
  %656 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5296
  %reg_set1006 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %656, i32 0, i32 1, !dbg !5296
  %657 = load i64, i64* %reg_set1006, align 8, !dbg !5296
  %or1007 = or i64 %657, %shl1005, !dbg !5296
  store i64 %or1007, i64* %reg_set1006, align 8, !dbg !5296
  %658 = load %struct.rtx_def**, %struct.rtx_def*** %dest, align 8, !dbg !5297
  call void @replace_reg(%struct.rtx_def** %658, i32 8), !dbg !5298
  br label %sw.epilog1009, !dbg !5299

sw.default1008:                                   ; preds = %if.end154
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1973, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5300
  br label %sw.epilog1009, !dbg !5301

sw.epilog1009:                                    ; preds = %sw.default1008, %if.end1002, %sw.epilog, %if.end493, %if.end221, %for.end, %sw.bb157
  br label %sw.epilog1011, !dbg !5302

sw.default1010:                                   ; preds = %entry
  br label %sw.epilog1011, !dbg !5303

sw.epilog1011:                                    ; preds = %sw.default1010, %sw.epilog1009, %if.then148, %if.end96, %if.end13
  %659 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !5304
  store i8 %659, i8* %retval, align 1, !dbg !5305
  br label %return, !dbg !5305

return:                                           ; preds = %sw.epilog1011, %if.end
  %660 = load i8, i8* %retval, align 1, !dbg !5306
  ret i8 %660, !dbg !5306
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %reg, i32 %where) #0 !dbg !5307 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regstack.addr = alloca %struct.stack_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %where.addr = alloca i32, align 4
  %pop_insn = alloca %struct.rtx_def*, align 8
  %pop_rtx = alloca %struct.rtx_def*, align 8
  %hard_regno = alloca i32, align 4
  %reg1 = alloca %struct.rtx_def*, align 8
  %reg2 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5310, metadata !DIExpression()), !dbg !5311
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !5312, metadata !DIExpression()), !dbg !5313
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !5314, metadata !DIExpression()), !dbg !5315
  store i32 %where, i32* %where.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %where.addr, metadata !5316, metadata !DIExpression()), !dbg !5317
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pop_insn, metadata !5318, metadata !DIExpression()), !dbg !5319
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pop_rtx, metadata !5320, metadata !DIExpression()), !dbg !5321
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !5322, metadata !DIExpression()), !dbg !5323
  %0 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !5324
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !5324
  %bf.load = load i32, i32* %1, align 8, !dbg !5324
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5324
  %bf.clear = and i32 %bf.lshr, 255, !dbg !5324
  %idxprom = zext i32 %bf.clear to i64, !dbg !5324
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !5324
  %2 = load i8, i8* %arrayidx, align 1, !dbg !5324
  %conv = zext i8 %2 to i32, !dbg !5324
  %cmp = icmp eq i32 %conv, 10, !dbg !5324
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5324

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !5324
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !5324
  %bf.load2 = load i32, i32* %4, align 8, !dbg !5324
  %bf.lshr3 = lshr i32 %bf.load2, 16, !dbg !5324
  %bf.clear4 = and i32 %bf.lshr3, 255, !dbg !5324
  %idxprom5 = zext i32 %bf.clear4 to i64, !dbg !5324
  %arrayidx6 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom5, !dbg !5324
  %5 = load i8, i8* %arrayidx6, align 1, !dbg !5324
  %conv7 = zext i8 %5 to i32, !dbg !5324
  %cmp8 = icmp eq i32 %conv7, 11, !dbg !5324
  br i1 %cmp8, label %if.then, label %if.end29, !dbg !5326

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg1, metadata !5327, metadata !DIExpression()), !dbg !5329
  %6 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !5330
  %call = call i32 @rhs_regno(%struct.rtx_def* %6), !dbg !5330
  %sub = sub i32 %call, 8, !dbg !5330
  %idxprom10 = zext i32 %sub to i64, !dbg !5330
  %arrayidx11 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom10, !dbg !5330
  %arrayidx12 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx11, i64 0, i64 39, !dbg !5330
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8, !dbg !5330
  store %struct.rtx_def* %7, %struct.rtx_def** %reg1, align 8, !dbg !5329
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg2, metadata !5331, metadata !DIExpression()), !dbg !5332
  %8 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !5333
  %call13 = call i32 @rhs_regno(%struct.rtx_def* %8), !dbg !5333
  %add = add i32 %call13, 1, !dbg !5333
  %sub14 = sub i32 %add, 8, !dbg !5333
  %idxprom15 = zext i32 %sub14 to i64, !dbg !5333
  %arrayidx16 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom15, !dbg !5333
  %arrayidx17 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx16, i64 0, i64 39, !dbg !5333
  %9 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx17, align 8, !dbg !5333
  store %struct.rtx_def* %9, %struct.rtx_def** %reg2, align 8, !dbg !5332
  store %struct.rtx_def* null, %struct.rtx_def** %pop_insn, align 8, !dbg !5334
  %10 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5335
  %11 = load %struct.rtx_def*, %struct.rtx_def** %reg1, align 8, !dbg !5337
  %call18 = call i32 @get_hard_regnum(%struct.stack_def* %10, %struct.rtx_def* %11), !dbg !5338
  %cmp19 = icmp sge i32 %call18, 0, !dbg !5339
  br i1 %cmp19, label %if.then21, label %if.end, !dbg !5340

if.then21:                                        ; preds = %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5341
  %13 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5342
  %14 = load %struct.rtx_def*, %struct.rtx_def** %reg1, align 8, !dbg !5343
  %15 = load i32, i32* %where.addr, align 4, !dbg !5344
  %call22 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %12, %struct.stack_def* %13, %struct.rtx_def* %14, i32 %15), !dbg !5345
  store %struct.rtx_def* %call22, %struct.rtx_def** %pop_insn, align 8, !dbg !5346
  br label %if.end, !dbg !5347

if.end:                                           ; preds = %if.then21, %if.then
  %16 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5348
  %17 = load %struct.rtx_def*, %struct.rtx_def** %reg2, align 8, !dbg !5350
  %call23 = call i32 @get_hard_regnum(%struct.stack_def* %16, %struct.rtx_def* %17), !dbg !5351
  %cmp24 = icmp sge i32 %call23, 0, !dbg !5352
  br i1 %cmp24, label %if.then26, label %if.end28, !dbg !5353

if.then26:                                        ; preds = %if.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5354
  %19 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5355
  %20 = load %struct.rtx_def*, %struct.rtx_def** %reg2, align 8, !dbg !5356
  %21 = load i32, i32* %where.addr, align 4, !dbg !5357
  %call27 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %18, %struct.stack_def* %19, %struct.rtx_def* %20, i32 %21), !dbg !5358
  store %struct.rtx_def* %call27, %struct.rtx_def** %pop_insn, align 8, !dbg !5359
  br label %if.end28, !dbg !5360

if.end28:                                         ; preds = %if.then26, %if.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** %pop_insn, align 8, !dbg !5361
  %tobool = icmp ne %struct.rtx_def* %22, null, !dbg !5361
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5361

cond.true:                                        ; preds = %if.end28
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 765, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5361
  br label %cond.end, !dbg !5361

cond.false:                                       ; preds = %if.end28
  br label %cond.end, !dbg !5361

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5361
  %23 = load %struct.rtx_def*, %struct.rtx_def** %pop_insn, align 8, !dbg !5362
  store %struct.rtx_def* %23, %struct.rtx_def** %retval, align 8, !dbg !5363
  br label %return, !dbg !5363

if.end29:                                         ; preds = %lor.lhs.false
  %24 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5364
  %25 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !5365
  %call30 = call i32 @get_hard_regnum(%struct.stack_def* %24, %struct.rtx_def* %25), !dbg !5366
  store i32 %call30, i32* %hard_regno, align 4, !dbg !5367
  %26 = load i32, i32* %hard_regno, align 4, !dbg !5368
  %cmp31 = icmp sge i32 %26, 8, !dbg !5368
  br i1 %cmp31, label %cond.false34, label %cond.true33, !dbg !5368

cond.true33:                                      ; preds = %if.end29
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5368
  br label %cond.end35, !dbg !5368

cond.false34:                                     ; preds = %if.end29
  br label %cond.end35, !dbg !5368

cond.end35:                                       ; preds = %cond.false34, %cond.true33
  %cond36 = phi i32 [ 0, %cond.true33 ], [ 0, %cond.false34 ], !dbg !5368
  %27 = load i32, i32* %hard_regno, align 4, !dbg !5369
  %sub37 = sub nsw i32 %27, 8, !dbg !5369
  %idxprom38 = sext i32 %sub37 to i64, !dbg !5369
  %arrayidx39 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom38, !dbg !5369
  %arrayidx40 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx39, i64 0, i64 39, !dbg !5369
  %28 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx40, align 8, !dbg !5369
  %29 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 0, i64 39), align 8, !dbg !5369
  %call41 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %28, %struct.rtx_def* %29), !dbg !5369
  store %struct.rtx_def* %call41, %struct.rtx_def** %pop_rtx, align 8, !dbg !5370
  %30 = load i32, i32* %where.addr, align 4, !dbg !5371
  %cmp42 = icmp eq i32 %30, 0, !dbg !5373
  br i1 %cmp42, label %if.then44, label %if.else, !dbg !5374

if.then44:                                        ; preds = %cond.end35
  %31 = load %struct.rtx_def*, %struct.rtx_def** %pop_rtx, align 8, !dbg !5375
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5376
  %call45 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %31, %struct.rtx_def* %32), !dbg !5377
  store %struct.rtx_def* %call45, %struct.rtx_def** %pop_insn, align 8, !dbg !5378
  br label %if.end47, !dbg !5379

if.else:                                          ; preds = %cond.end35
  %33 = load %struct.rtx_def*, %struct.rtx_def** %pop_rtx, align 8, !dbg !5380
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5381
  %call46 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %33, %struct.rtx_def* %34), !dbg !5382
  store %struct.rtx_def* %call46, %struct.rtx_def** %pop_insn, align 8, !dbg !5383
  br label %if.end47

if.end47:                                         ; preds = %if.else, %if.then44
  %35 = load %struct.rtx_def*, %struct.rtx_def** %pop_insn, align 8, !dbg !5384
  %36 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 0, i64 39), align 8, !dbg !5385
  call void @add_reg_note(%struct.rtx_def* %35, i32 1, %struct.rtx_def* %36), !dbg !5386
  %37 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5387
  %reg48 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %37, i32 0, i32 2, !dbg !5388
  %38 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5389
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %38, i32 0, i32 0, !dbg !5390
  %39 = load i32, i32* %top, align 8, !dbg !5390
  %idxprom49 = sext i32 %39 to i64, !dbg !5387
  %arrayidx50 = getelementptr inbounds [8 x i8], [8 x i8]* %reg48, i64 0, i64 %idxprom49, !dbg !5387
  %40 = load i8, i8* %arrayidx50, align 1, !dbg !5387
  %41 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5391
  %reg51 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %41, i32 0, i32 2, !dbg !5392
  %42 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5393
  %top52 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %42, i32 0, i32 0, !dbg !5394
  %43 = load i32, i32* %top52, align 8, !dbg !5394
  %44 = load i32, i32* %hard_regno, align 4, !dbg !5395
  %sub53 = sub nsw i32 %44, 8, !dbg !5396
  %sub54 = sub nsw i32 %43, %sub53, !dbg !5397
  %idxprom55 = sext i32 %sub54 to i64, !dbg !5391
  %arrayidx56 = getelementptr inbounds [8 x i8], [8 x i8]* %reg51, i64 0, i64 %idxprom55, !dbg !5391
  store i8 %40, i8* %arrayidx56, align 1, !dbg !5398
  %45 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5399
  %top57 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %45, i32 0, i32 0, !dbg !5400
  %46 = load i32, i32* %top57, align 8, !dbg !5401
  %sub58 = sub nsw i32 %46, 1, !dbg !5401
  store i32 %sub58, i32* %top57, align 8, !dbg !5401
  %47 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !5402
  %call59 = call i32 @rhs_regno(%struct.rtx_def* %47), !dbg !5402
  %sh_prom = zext i32 %call59 to i64, !dbg !5402
  %shl = shl i64 1, %sh_prom, !dbg !5402
  %neg = xor i64 %shl, -1, !dbg !5402
  %48 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5402
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %48, i32 0, i32 1, !dbg !5402
  %49 = load i64, i64* %reg_set, align 8, !dbg !5402
  %and = and i64 %49, %neg, !dbg !5402
  store i64 %and, i64* %reg_set, align 8, !dbg !5402
  %50 = load %struct.rtx_def*, %struct.rtx_def** %pop_insn, align 8, !dbg !5403
  store %struct.rtx_def* %50, %struct.rtx_def** %retval, align 8, !dbg !5404
  br label %return, !dbg !5404

return:                                           ; preds = %if.end47, %cond.end
  %51 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5405
  ret %struct.rtx_def* %51, !dbg !5405
}

; Function Attrs: noinline nounwind uwtable
define internal void @change_stack(%struct.rtx_def* %insn, %struct.stack_def* %old, %struct.stack_def* %new_stack, i32 %where) #0 !dbg !5406 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %old.addr = alloca %struct.stack_def*, align 8
  %new_stack.addr = alloca %struct.stack_def*, align 8
  %where.addr = alloca i32, align 4
  %reg = alloca i32, align 4
  %update_end = alloca i32, align 4
  %i = alloca i32, align 4
  %slots = alloca [8 x i8], align 1
  %pops = alloca [8 x i32], align 16
  %next = alloca i32, align 4
  %dest = alloca i32, align 4
  %topsrc = alloca i32, align 4
  %live = alloca i32, align 4
  %next170 = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5409, metadata !DIExpression()), !dbg !5410
  store %struct.stack_def* %old, %struct.stack_def** %old.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %old.addr, metadata !5411, metadata !DIExpression()), !dbg !5412
  store %struct.stack_def* %new_stack, %struct.stack_def** %new_stack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %new_stack.addr, metadata !5413, metadata !DIExpression()), !dbg !5414
  store i32 %where, i32* %where.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %where.addr, metadata !5415, metadata !DIExpression()), !dbg !5416
  call void @llvm.dbg.declare(metadata i32* %reg, metadata !5417, metadata !DIExpression()), !dbg !5418
  call void @llvm.dbg.declare(metadata i32* %update_end, metadata !5419, metadata !DIExpression()), !dbg !5420
  store i32 0, i32* %update_end, align 4, !dbg !5420
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5421, metadata !DIExpression()), !dbg !5422
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !5423
  %tobool = icmp ne %struct.basic_block_def* %0, null, !dbg !5423
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5425

land.lhs.true:                                    ; preds = %entry
  %1 = load i8, i8* @starting_stack_p, align 1, !dbg !5426
  %conv = zext i8 %1 to i32, !dbg !5426
  %tobool1 = icmp ne i32 %conv, 0, !dbg !5426
  br i1 %tobool1, label %land.lhs.true2, label %if.end, !dbg !5427

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i32, i32* %where.addr, align 4, !dbg !5428
  %cmp = icmp eq i32 %2, 1, !dbg !5429
  br i1 %cmp, label %if.then, label %if.end, !dbg !5430

if.then:                                          ; preds = %land.lhs.true2
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !5431
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 2, !dbg !5431
  %4 = load i8*, i8** %aux, align 8, !dbg !5431
  %5 = bitcast i8* %4 to %struct.block_info_def*, !dbg !5431
  %stack_in = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %5, i32 0, i32 0, !dbg !5433
  %6 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5434
  %7 = bitcast %struct.stack_def* %stack_in to i8*, !dbg !5435
  %8 = bitcast %struct.stack_def* %6 to i8*, !dbg !5435
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 24, i1 false), !dbg !5435
  store i8 0, i8* @starting_stack_p, align 1, !dbg !5436
  %9 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5437
  %10 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5438
  %11 = bitcast %struct.stack_def* %9 to i8*, !dbg !5439
  %12 = bitcast %struct.stack_def* %10 to i8*, !dbg !5439
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %12, i64 24, i1 false), !dbg !5439
  br label %if.end386, !dbg !5440

if.end:                                           ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %13 = load i32, i32* %where.addr, align 4, !dbg !5441
  %cmp4 = icmp eq i32 %13, 0, !dbg !5443
  br i1 %cmp4, label %if.then6, label %if.end13, !dbg !5444

if.then6:                                         ; preds = %if.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !5445
  %tobool7 = icmp ne %struct.basic_block_def* %14, null, !dbg !5445
  br i1 %tobool7, label %land.lhs.true8, label %if.end12, !dbg !5448

land.lhs.true8:                                   ; preds = %if.then6
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !5449
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 7, !dbg !5449
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5449
  %16 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5449
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %16, i32 0, i32 1, !dbg !5449
  %17 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5449
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5450
  %cmp9 = icmp eq %struct.rtx_def* %17, %18, !dbg !5451
  br i1 %cmp9, label %if.then11, label %if.end12, !dbg !5452

if.then11:                                        ; preds = %land.lhs.true8
  store i32 1, i32* %update_end, align 4, !dbg !5453
  br label %if.end12, !dbg !5454

if.end12:                                         ; preds = %if.then11, %land.lhs.true8, %if.then6
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5455
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !5455
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5455
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !5455
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5455
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5455
  store %struct.rtx_def* %20, %struct.rtx_def** %insn.addr, align 8, !dbg !5456
  br label %if.end13, !dbg !5457

if.end13:                                         ; preds = %if.end12, %if.end
  store i32 8, i32* %i, align 4, !dbg !5458
  br label %for.cond, !dbg !5460

for.cond:                                         ; preds = %for.inc, %if.end13
  %21 = load i32, i32* %i, align 4, !dbg !5461
  %cmp14 = icmp slt i32 %21, 16, !dbg !5463
  br i1 %cmp14, label %for.body, label %for.end, !dbg !5464

for.body:                                         ; preds = %for.cond
  %22 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5465
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %22, i32 0, i32 1, !dbg !5465
  %23 = load i64, i64* %reg_set, align 8, !dbg !5465
  %24 = load i32, i32* %i, align 4, !dbg !5465
  %sh_prom = zext i32 %24 to i64, !dbg !5465
  %shl = shl i64 1, %sh_prom, !dbg !5465
  %and = and i64 %23, %shl, !dbg !5465
  %tobool16 = icmp ne i64 %and, 0, !dbg !5465
  br i1 %tobool16, label %land.lhs.true17, label %if.end34, !dbg !5467

land.lhs.true17:                                  ; preds = %for.body
  %25 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5468
  %reg_set18 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %25, i32 0, i32 1, !dbg !5468
  %26 = load i64, i64* %reg_set18, align 8, !dbg !5468
  %27 = load i32, i32* %i, align 4, !dbg !5468
  %sh_prom19 = zext i32 %27 to i64, !dbg !5468
  %shl20 = shl i64 1, %sh_prom19, !dbg !5468
  %and21 = and i64 %26, %shl20, !dbg !5468
  %tobool22 = icmp ne i64 %and21, 0, !dbg !5468
  br i1 %tobool22, label %if.end34, label %if.then23, !dbg !5469

if.then23:                                        ; preds = %land.lhs.true17
  %28 = load i32, i32* %i, align 4, !dbg !5470
  %conv24 = trunc i32 %28 to i8, !dbg !5470
  %29 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5472
  %reg25 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %29, i32 0, i32 2, !dbg !5473
  %30 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5474
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %30, i32 0, i32 0, !dbg !5475
  %31 = load i32, i32* %top, align 8, !dbg !5476
  %inc = add nsw i32 %31, 1, !dbg !5476
  store i32 %inc, i32* %top, align 8, !dbg !5476
  %idxprom = sext i32 %inc to i64, !dbg !5472
  %arrayidx26 = getelementptr inbounds [8 x i8], [8 x i8]* %reg25, i64 0, i64 %idxprom, !dbg !5472
  store i8 %conv24, i8* %arrayidx26, align 1, !dbg !5477
  %32 = load i32, i32* %i, align 4, !dbg !5478
  %sh_prom27 = zext i32 %32 to i64, !dbg !5478
  %shl28 = shl i64 1, %sh_prom27, !dbg !5478
  %33 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5478
  %reg_set29 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %33, i32 0, i32 1, !dbg !5478
  %34 = load i64, i64* %reg_set29, align 8, !dbg !5478
  %or = or i64 %34, %shl28, !dbg !5478
  store i64 %or, i64* %reg_set29, align 8, !dbg !5478
  %35 = load i32, i32* %i, align 4, !dbg !5479
  %sub = sub nsw i32 %35, 8, !dbg !5479
  %idxprom30 = sext i32 %sub to i64, !dbg !5479
  %arrayidx31 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom30, !dbg !5479
  %arrayidx32 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx31, i64 0, i64 38, !dbg !5479
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx32, align 8, !dbg !5479
  %37 = load %struct.rtx_def*, %struct.rtx_def** @not_a_num, align 8, !dbg !5479
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %36, %struct.rtx_def* %37), !dbg !5479
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5480
  %call33 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %call, %struct.rtx_def* %38), !dbg !5481
  br label %if.end34, !dbg !5482

if.end34:                                         ; preds = %if.then23, %land.lhs.true17, %for.body
  br label %for.inc, !dbg !5468

for.inc:                                          ; preds = %if.end34
  %39 = load i32, i32* %i, align 4, !dbg !5483
  %inc35 = add nsw i32 %39, 1, !dbg !5483
  store i32 %inc35, i32* %i, align 4, !dbg !5483
  br label %for.cond, !dbg !5484, !llvm.loop !5485

for.end:                                          ; preds = %for.cond
  %40 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5487
  %top36 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %40, i32 0, i32 0, !dbg !5489
  %41 = load i32, i32* %top36, align 8, !dbg !5489
  %cmp37 = icmp sgt i32 %41, 0, !dbg !5490
  br i1 %cmp37, label %if.then39, label %if.else169, !dbg !5491

if.then39:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata [8 x i8]* %slots, metadata !5492, metadata !DIExpression()), !dbg !5494
  call void @llvm.dbg.declare(metadata [8 x i32]* %pops, metadata !5495, metadata !DIExpression()), !dbg !5497
  call void @llvm.dbg.declare(metadata i32* %next, metadata !5498, metadata !DIExpression()), !dbg !5499
  call void @llvm.dbg.declare(metadata i32* %dest, metadata !5500, metadata !DIExpression()), !dbg !5501
  call void @llvm.dbg.declare(metadata i32* %topsrc, metadata !5502, metadata !DIExpression()), !dbg !5503
  store i32 0, i32* %reg, align 4, !dbg !5504
  br label %for.cond40, !dbg !5506

for.cond40:                                       ; preds = %for.inc58, %if.then39
  %42 = load i32, i32* %reg, align 4, !dbg !5507
  %43 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5509
  %top41 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %43, i32 0, i32 0, !dbg !5510
  %44 = load i32, i32* %top41, align 8, !dbg !5510
  %cmp42 = icmp sle i32 %42, %44, !dbg !5511
  br i1 %cmp42, label %for.body44, label %for.end60, !dbg !5512

for.body44:                                       ; preds = %for.cond40
  %45 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5513
  %reg_set45 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %45, i32 0, i32 1, !dbg !5513
  %46 = load i64, i64* %reg_set45, align 8, !dbg !5513
  %47 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5513
  %reg46 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %47, i32 0, i32 2, !dbg !5513
  %48 = load i32, i32* %reg, align 4, !dbg !5513
  %idxprom47 = sext i32 %48 to i64, !dbg !5513
  %arrayidx48 = getelementptr inbounds [8 x i8], [8 x i8]* %reg46, i64 0, i64 %idxprom47, !dbg !5513
  %49 = load i8, i8* %arrayidx48, align 1, !dbg !5513
  %conv49 = zext i8 %49 to i32, !dbg !5513
  %sh_prom50 = zext i32 %conv49 to i64, !dbg !5513
  %shl51 = shl i64 1, %sh_prom50, !dbg !5513
  %and52 = and i64 %46, %shl51, !dbg !5513
  %tobool53 = icmp ne i64 %and52, 0, !dbg !5513
  %lnot = xor i1 %tobool53, true, !dbg !5513
  %lnot54 = xor i1 %lnot, true, !dbg !5513
  %lnot.ext = zext i1 %lnot54 to i32, !dbg !5513
  %conv55 = trunc i32 %lnot.ext to i8, !dbg !5513
  %50 = load i32, i32* %reg, align 4, !dbg !5514
  %idxprom56 = sext i32 %50 to i64, !dbg !5515
  %arrayidx57 = getelementptr inbounds [8 x i8], [8 x i8]* %slots, i64 0, i64 %idxprom56, !dbg !5515
  store i8 %conv55, i8* %arrayidx57, align 1, !dbg !5516
  br label %for.inc58, !dbg !5515

for.inc58:                                        ; preds = %for.body44
  %51 = load i32, i32* %reg, align 4, !dbg !5517
  %inc59 = add nsw i32 %51, 1, !dbg !5517
  store i32 %inc59, i32* %reg, align 4, !dbg !5517
  br label %for.cond40, !dbg !5518, !llvm.loop !5519

for.end60:                                        ; preds = %for.cond40
  store i32 -1, i32* %topsrc, align 4, !dbg !5521
  %52 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5522
  %top61 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %52, i32 0, i32 0, !dbg !5524
  %53 = load i32, i32* %top61, align 8, !dbg !5524
  store i32 %53, i32* %reg, align 4, !dbg !5525
  br label %for.cond62, !dbg !5526

for.cond62:                                       ; preds = %for.inc113, %for.end60
  %54 = load i32, i32* %reg, align 4, !dbg !5527
  %55 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5529
  %top63 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %55, i32 0, i32 0, !dbg !5530
  %56 = load i32, i32* %top63, align 8, !dbg !5530
  %cmp64 = icmp sgt i32 %54, %56, !dbg !5531
  br i1 %cmp64, label %for.body66, label %for.end114, !dbg !5532

for.body66:                                       ; preds = %for.cond62
  %57 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5533
  %reg_set67 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %57, i32 0, i32 1, !dbg !5533
  %58 = load i64, i64* %reg_set67, align 8, !dbg !5533
  %59 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5533
  %reg68 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %59, i32 0, i32 2, !dbg !5533
  %60 = load i32, i32* %reg, align 4, !dbg !5533
  %idxprom69 = sext i32 %60 to i64, !dbg !5533
  %arrayidx70 = getelementptr inbounds [8 x i8], [8 x i8]* %reg68, i64 0, i64 %idxprom69, !dbg !5533
  %61 = load i8, i8* %arrayidx70, align 1, !dbg !5533
  %conv71 = zext i8 %61 to i32, !dbg !5533
  %sh_prom72 = zext i32 %conv71 to i64, !dbg !5533
  %shl73 = shl i64 1, %sh_prom72, !dbg !5533
  %and74 = and i64 %58, %shl73, !dbg !5533
  %tobool75 = icmp ne i64 %and74, 0, !dbg !5533
  br i1 %tobool75, label %if.then76, label %if.else, !dbg !5535

if.then76:                                        ; preds = %for.body66
  store i32 -1, i32* %dest, align 4, !dbg !5536
  store i32 0, i32* %next, align 4, !dbg !5538
  br label %for.cond77, !dbg !5540

for.cond77:                                       ; preds = %for.inc105, %if.then76
  %62 = load i32, i32* %next, align 4, !dbg !5541
  %63 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5543
  %top78 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %63, i32 0, i32 0, !dbg !5544
  %64 = load i32, i32* %top78, align 8, !dbg !5544
  %cmp79 = icmp sle i32 %62, %64, !dbg !5545
  br i1 %cmp79, label %for.body81, label %for.end107, !dbg !5546

for.body81:                                       ; preds = %for.cond77
  %65 = load i32, i32* %next, align 4, !dbg !5547
  %idxprom82 = sext i32 %65 to i64, !dbg !5549
  %arrayidx83 = getelementptr inbounds [8 x i8], [8 x i8]* %slots, i64 0, i64 %idxprom82, !dbg !5549
  %66 = load i8, i8* %arrayidx83, align 1, !dbg !5549
  %tobool84 = icmp ne i8 %66, 0, !dbg !5549
  br i1 %tobool84, label %if.end104, label %land.lhs.true85, !dbg !5550

land.lhs.true85:                                  ; preds = %for.body81
  %67 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5551
  %reg86 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %67, i32 0, i32 2, !dbg !5552
  %68 = load i32, i32* %next, align 4, !dbg !5553
  %idxprom87 = sext i32 %68 to i64, !dbg !5551
  %arrayidx88 = getelementptr inbounds [8 x i8], [8 x i8]* %reg86, i64 0, i64 %idxprom87, !dbg !5551
  %69 = load i8, i8* %arrayidx88, align 1, !dbg !5551
  %conv89 = zext i8 %69 to i32, !dbg !5551
  %70 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5554
  %reg90 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %70, i32 0, i32 2, !dbg !5555
  %71 = load i32, i32* %reg, align 4, !dbg !5556
  %idxprom91 = sext i32 %71 to i64, !dbg !5554
  %arrayidx92 = getelementptr inbounds [8 x i8], [8 x i8]* %reg90, i64 0, i64 %idxprom91, !dbg !5554
  %72 = load i8, i8* %arrayidx92, align 1, !dbg !5554
  %conv93 = zext i8 %72 to i32, !dbg !5554
  %cmp94 = icmp eq i32 %conv89, %conv93, !dbg !5557
  br i1 %cmp94, label %if.then96, label %if.end104, !dbg !5558

if.then96:                                        ; preds = %land.lhs.true85
  %73 = load i32, i32* %next, align 4, !dbg !5559
  %74 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5562
  %top97 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %74, i32 0, i32 0, !dbg !5563
  %75 = load i32, i32* %top97, align 8, !dbg !5563
  %cmp98 = icmp eq i32 %73, %75, !dbg !5564
  br i1 %cmp98, label %if.then100, label %if.end101, !dbg !5565

if.then100:                                       ; preds = %if.then96
  %76 = load i32, i32* %reg, align 4, !dbg !5566
  store i32 %76, i32* %topsrc, align 4, !dbg !5567
  br label %if.end101, !dbg !5568

if.end101:                                        ; preds = %if.then100, %if.then96
  %77 = load i32, i32* %next, align 4, !dbg !5569
  %idxprom102 = sext i32 %77 to i64, !dbg !5570
  %arrayidx103 = getelementptr inbounds [8 x i8], [8 x i8]* %slots, i64 0, i64 %idxprom102, !dbg !5570
  store i8 1, i8* %arrayidx103, align 1, !dbg !5571
  %78 = load i32, i32* %next, align 4, !dbg !5572
  store i32 %78, i32* %dest, align 4, !dbg !5573
  br label %for.end107, !dbg !5574

if.end104:                                        ; preds = %land.lhs.true85, %for.body81
  br label %for.inc105, !dbg !5575

for.inc105:                                       ; preds = %if.end104
  %79 = load i32, i32* %next, align 4, !dbg !5576
  %inc106 = add nsw i32 %79, 1, !dbg !5576
  store i32 %inc106, i32* %next, align 4, !dbg !5576
  br label %for.cond77, !dbg !5577, !llvm.loop !5578

for.end107:                                       ; preds = %if.end101, %for.cond77
  %80 = load i32, i32* %dest, align 4, !dbg !5580
  %81 = load i32, i32* %reg, align 4, !dbg !5581
  %idxprom108 = sext i32 %81 to i64, !dbg !5582
  %arrayidx109 = getelementptr inbounds [8 x i32], [8 x i32]* %pops, i64 0, i64 %idxprom108, !dbg !5582
  store i32 %80, i32* %arrayidx109, align 4, !dbg !5583
  br label %if.end112, !dbg !5584

if.else:                                          ; preds = %for.body66
  %82 = load i32, i32* %reg, align 4, !dbg !5585
  %83 = load i32, i32* %reg, align 4, !dbg !5586
  %idxprom110 = sext i32 %83 to i64, !dbg !5587
  %arrayidx111 = getelementptr inbounds [8 x i32], [8 x i32]* %pops, i64 0, i64 %idxprom110, !dbg !5587
  store i32 %82, i32* %arrayidx111, align 4, !dbg !5588
  br label %if.end112

if.end112:                                        ; preds = %if.else, %for.end107
  br label %for.inc113, !dbg !5533

for.inc113:                                       ; preds = %if.end112
  %84 = load i32, i32* %reg, align 4, !dbg !5589
  %dec = add nsw i32 %84, -1, !dbg !5589
  store i32 %dec, i32* %reg, align 4, !dbg !5589
  br label %for.cond62, !dbg !5590, !llvm.loop !5591

for.end114:                                       ; preds = %for.cond62
  %85 = load i32, i32* %topsrc, align 4, !dbg !5593
  %cmp115 = icmp ne i32 %85, -1, !dbg !5595
  br i1 %cmp115, label %if.then117, label %if.end138, !dbg !5596

if.then117:                                       ; preds = %for.end114
  store i32 0, i32* %reg, align 4, !dbg !5597
  br label %for.cond118, !dbg !5599

for.cond118:                                      ; preds = %for.inc135, %if.then117
  %86 = load i32, i32* %reg, align 4, !dbg !5600
  %87 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5602
  %top119 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %87, i32 0, i32 0, !dbg !5603
  %88 = load i32, i32* %top119, align 8, !dbg !5603
  %cmp120 = icmp slt i32 %86, %88, !dbg !5604
  br i1 %cmp120, label %for.body122, label %for.end137, !dbg !5605

for.body122:                                      ; preds = %for.cond118
  %89 = load i32, i32* %reg, align 4, !dbg !5606
  %idxprom123 = sext i32 %89 to i64, !dbg !5608
  %arrayidx124 = getelementptr inbounds [8 x i8], [8 x i8]* %slots, i64 0, i64 %idxprom123, !dbg !5608
  %90 = load i8, i8* %arrayidx124, align 1, !dbg !5608
  %tobool125 = icmp ne i8 %90, 0, !dbg !5608
  br i1 %tobool125, label %if.end134, label %if.then126, !dbg !5609

if.then126:                                       ; preds = %for.body122
  %91 = load i32, i32* %reg, align 4, !dbg !5610
  %92 = load i32, i32* %topsrc, align 4, !dbg !5612
  %idxprom127 = sext i32 %92 to i64, !dbg !5613
  %arrayidx128 = getelementptr inbounds [8 x i32], [8 x i32]* %pops, i64 0, i64 %idxprom127, !dbg !5613
  store i32 %91, i32* %arrayidx128, align 4, !dbg !5614
  %93 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5615
  %top129 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %93, i32 0, i32 0, !dbg !5616
  %94 = load i32, i32* %top129, align 8, !dbg !5616
  %idxprom130 = sext i32 %94 to i64, !dbg !5617
  %arrayidx131 = getelementptr inbounds [8 x i8], [8 x i8]* %slots, i64 0, i64 %idxprom130, !dbg !5617
  store i8 0, i8* %arrayidx131, align 1, !dbg !5618
  %95 = load i32, i32* %reg, align 4, !dbg !5619
  %idxprom132 = sext i32 %95 to i64, !dbg !5620
  %arrayidx133 = getelementptr inbounds [8 x i8], [8 x i8]* %slots, i64 0, i64 %idxprom132, !dbg !5620
  store i8 1, i8* %arrayidx133, align 1, !dbg !5621
  br label %for.end137, !dbg !5622

if.end134:                                        ; preds = %for.body122
  br label %for.inc135, !dbg !5623

for.inc135:                                       ; preds = %if.end134
  %96 = load i32, i32* %reg, align 4, !dbg !5624
  %inc136 = add nsw i32 %96, 1, !dbg !5624
  store i32 %inc136, i32* %reg, align 4, !dbg !5624
  br label %for.cond118, !dbg !5625, !llvm.loop !5626

for.end137:                                       ; preds = %if.then126, %for.cond118
  br label %if.end138, !dbg !5627

if.end138:                                        ; preds = %for.end137, %for.end114
  %97 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5628
  %top139 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %97, i32 0, i32 0, !dbg !5629
  %98 = load i32, i32* %top139, align 8, !dbg !5629
  store i32 %98, i32* %next, align 4, !dbg !5630
  %99 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5631
  %top140 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %99, i32 0, i32 0, !dbg !5633
  %100 = load i32, i32* %top140, align 8, !dbg !5633
  store i32 %100, i32* %reg, align 4, !dbg !5634
  br label %for.cond141, !dbg !5635

for.cond141:                                      ; preds = %for.inc166, %if.end138
  %101 = load i32, i32* %reg, align 4, !dbg !5636
  %102 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5638
  %top142 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %102, i32 0, i32 0, !dbg !5639
  %103 = load i32, i32* %top142, align 8, !dbg !5639
  %cmp143 = icmp sgt i32 %101, %103, !dbg !5640
  br i1 %cmp143, label %for.body145, label %for.end168, !dbg !5641

for.body145:                                      ; preds = %for.cond141
  %104 = load i32, i32* %reg, align 4, !dbg !5642
  %idxprom146 = sext i32 %104 to i64, !dbg !5644
  %arrayidx147 = getelementptr inbounds [8 x i32], [8 x i32]* %pops, i64 0, i64 %idxprom146, !dbg !5644
  %105 = load i32, i32* %arrayidx147, align 4, !dbg !5644
  store i32 %105, i32* %dest, align 4, !dbg !5645
  %106 = load i32, i32* %dest, align 4, !dbg !5646
  %cmp148 = icmp eq i32 %106, -1, !dbg !5648
  br i1 %cmp148, label %if.then150, label %if.end156, !dbg !5649

if.then150:                                       ; preds = %for.body145
  br label %while.cond, !dbg !5650

while.cond:                                       ; preds = %while.body, %if.then150
  %107 = load i32, i32* %next, align 4, !dbg !5652
  %idxprom151 = sext i32 %107 to i64, !dbg !5653
  %arrayidx152 = getelementptr inbounds [8 x i8], [8 x i8]* %slots, i64 0, i64 %idxprom151, !dbg !5653
  %108 = load i8, i8* %arrayidx152, align 1, !dbg !5653
  %tobool153 = icmp ne i8 %108, 0, !dbg !5650
  br i1 %tobool153, label %while.body, label %while.end, !dbg !5650

while.body:                                       ; preds = %while.cond
  %109 = load i32, i32* %next, align 4, !dbg !5654
  %dec154 = add nsw i32 %109, -1, !dbg !5654
  store i32 %dec154, i32* %next, align 4, !dbg !5654
  br label %while.cond, !dbg !5650, !llvm.loop !5655

while.end:                                        ; preds = %while.cond
  %110 = load i32, i32* %next, align 4, !dbg !5656
  %dec155 = add nsw i32 %110, -1, !dbg !5656
  store i32 %dec155, i32* %next, align 4, !dbg !5656
  store i32 %110, i32* %dest, align 4, !dbg !5657
  br label %if.end156, !dbg !5658

if.end156:                                        ; preds = %while.end, %for.body145
  %111 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5659
  %112 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5660
  %113 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5661
  %reg157 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %113, i32 0, i32 2, !dbg !5661
  %114 = load i32, i32* %dest, align 4, !dbg !5661
  %idxprom158 = sext i32 %114 to i64, !dbg !5661
  %arrayidx159 = getelementptr inbounds [8 x i8], [8 x i8]* %reg157, i64 0, i64 %idxprom158, !dbg !5661
  %115 = load i8, i8* %arrayidx159, align 1, !dbg !5661
  %conv160 = zext i8 %115 to i32, !dbg !5661
  %sub161 = sub nsw i32 %conv160, 8, !dbg !5661
  %idxprom162 = sext i32 %sub161 to i64, !dbg !5661
  %arrayidx163 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom162, !dbg !5661
  %arrayidx164 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx163, i64 0, i64 39, !dbg !5661
  %116 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx164, align 8, !dbg !5661
  %call165 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %111, %struct.stack_def* %112, %struct.rtx_def* %116, i32 1), !dbg !5662
  br label %for.inc166, !dbg !5663

for.inc166:                                       ; preds = %if.end156
  %117 = load i32, i32* %reg, align 4, !dbg !5664
  %dec167 = add nsw i32 %117, -1, !dbg !5664
  store i32 %dec167, i32* %reg, align 4, !dbg !5664
  br label %for.cond141, !dbg !5665, !llvm.loop !5666

for.end168:                                       ; preds = %for.cond141
  br label %if.end246, !dbg !5668

if.else169:                                       ; preds = %for.end
  call void @llvm.dbg.declare(metadata i32* %live, metadata !5669, metadata !DIExpression()), !dbg !5671
  call void @llvm.dbg.declare(metadata i32* %next170, metadata !5672, metadata !DIExpression()), !dbg !5673
  store i32 0, i32* %live, align 4, !dbg !5674
  store i32 0, i32* %reg, align 4, !dbg !5675
  br label %for.cond171, !dbg !5677

for.cond171:                                      ; preds = %for.inc188, %if.else169
  %118 = load i32, i32* %reg, align 4, !dbg !5678
  %119 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5680
  %top172 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %119, i32 0, i32 0, !dbg !5681
  %120 = load i32, i32* %top172, align 8, !dbg !5681
  %cmp173 = icmp sle i32 %118, %120, !dbg !5682
  br i1 %cmp173, label %for.body175, label %for.end190, !dbg !5683

for.body175:                                      ; preds = %for.cond171
  %121 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5684
  %reg_set176 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %121, i32 0, i32 1, !dbg !5684
  %122 = load i64, i64* %reg_set176, align 8, !dbg !5684
  %123 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5684
  %reg177 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %123, i32 0, i32 2, !dbg !5684
  %124 = load i32, i32* %reg, align 4, !dbg !5684
  %idxprom178 = sext i32 %124 to i64, !dbg !5684
  %arrayidx179 = getelementptr inbounds [8 x i8], [8 x i8]* %reg177, i64 0, i64 %idxprom178, !dbg !5684
  %125 = load i8, i8* %arrayidx179, align 1, !dbg !5684
  %conv180 = zext i8 %125 to i32, !dbg !5684
  %sh_prom181 = zext i32 %conv180 to i64, !dbg !5684
  %shl182 = shl i64 1, %sh_prom181, !dbg !5684
  %and183 = and i64 %122, %shl182, !dbg !5684
  %tobool184 = icmp ne i64 %and183, 0, !dbg !5684
  br i1 %tobool184, label %if.then185, label %if.end187, !dbg !5686

if.then185:                                       ; preds = %for.body175
  %126 = load i32, i32* %live, align 4, !dbg !5687
  %inc186 = add nsw i32 %126, 1, !dbg !5687
  store i32 %inc186, i32* %live, align 4, !dbg !5687
  br label %if.end187, !dbg !5688

if.end187:                                        ; preds = %if.then185, %for.body175
  br label %for.inc188, !dbg !5684

for.inc188:                                       ; preds = %if.end187
  %127 = load i32, i32* %reg, align 4, !dbg !5689
  %inc189 = add nsw i32 %127, 1, !dbg !5689
  store i32 %inc189, i32* %reg, align 4, !dbg !5689
  br label %for.cond171, !dbg !5690, !llvm.loop !5691

for.end190:                                       ; preds = %for.cond171
  %128 = load i32, i32* %live, align 4, !dbg !5693
  store i32 %128, i32* %next170, align 4, !dbg !5694
  br label %while.cond191, !dbg !5695

while.cond191:                                    ; preds = %if.end244, %for.end190
  %129 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5696
  %top192 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %129, i32 0, i32 0, !dbg !5697
  %130 = load i32, i32* %top192, align 8, !dbg !5697
  %131 = load i32, i32* %live, align 4, !dbg !5698
  %cmp193 = icmp sge i32 %130, %131, !dbg !5699
  br i1 %cmp193, label %while.body195, label %while.end245, !dbg !5695

while.body195:                                    ; preds = %while.cond191
  %132 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5700
  %reg_set196 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %132, i32 0, i32 1, !dbg !5700
  %133 = load i64, i64* %reg_set196, align 8, !dbg !5700
  %134 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5700
  %reg197 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %134, i32 0, i32 2, !dbg !5700
  %135 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5700
  %top198 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %135, i32 0, i32 0, !dbg !5700
  %136 = load i32, i32* %top198, align 8, !dbg !5700
  %idxprom199 = sext i32 %136 to i64, !dbg !5700
  %arrayidx200 = getelementptr inbounds [8 x i8], [8 x i8]* %reg197, i64 0, i64 %idxprom199, !dbg !5700
  %137 = load i8, i8* %arrayidx200, align 1, !dbg !5700
  %conv201 = zext i8 %137 to i32, !dbg !5700
  %sh_prom202 = zext i32 %conv201 to i64, !dbg !5700
  %shl203 = shl i64 1, %sh_prom202, !dbg !5700
  %and204 = and i64 %133, %shl203, !dbg !5700
  %tobool205 = icmp ne i64 %and204, 0, !dbg !5700
  br i1 %tobool205, label %if.then206, label %if.else233, !dbg !5702

if.then206:                                       ; preds = %while.body195
  br label %while.cond207, !dbg !5703

while.cond207:                                    ; preds = %while.body221, %if.then206
  %138 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5705
  %reg_set208 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %138, i32 0, i32 1, !dbg !5705
  %139 = load i64, i64* %reg_set208, align 8, !dbg !5705
  %140 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5705
  %reg209 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %140, i32 0, i32 2, !dbg !5705
  %141 = load i32, i32* %next170, align 4, !dbg !5705
  %idxprom210 = sext i32 %141 to i64, !dbg !5705
  %arrayidx211 = getelementptr inbounds [8 x i8], [8 x i8]* %reg209, i64 0, i64 %idxprom210, !dbg !5705
  %142 = load i8, i8* %arrayidx211, align 1, !dbg !5705
  %conv212 = zext i8 %142 to i32, !dbg !5705
  %sh_prom213 = zext i32 %conv212 to i64, !dbg !5705
  %shl214 = shl i64 1, %sh_prom213, !dbg !5705
  %and215 = and i64 %139, %shl214, !dbg !5705
  %tobool216 = icmp ne i64 %and215, 0, !dbg !5705
  %lnot217 = xor i1 %tobool216, true, !dbg !5705
  %lnot219 = xor i1 %lnot217, true, !dbg !5705
  br i1 %lnot219, label %while.body221, label %while.end223, !dbg !5703

while.body221:                                    ; preds = %while.cond207
  %143 = load i32, i32* %next170, align 4, !dbg !5706
  %dec222 = add nsw i32 %143, -1, !dbg !5706
  store i32 %dec222, i32* %next170, align 4, !dbg !5706
  br label %while.cond207, !dbg !5703, !llvm.loop !5707

while.end223:                                     ; preds = %while.cond207
  %144 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5708
  %145 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5709
  %146 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5710
  %reg224 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %146, i32 0, i32 2, !dbg !5710
  %147 = load i32, i32* %next170, align 4, !dbg !5710
  %idxprom225 = sext i32 %147 to i64, !dbg !5710
  %arrayidx226 = getelementptr inbounds [8 x i8], [8 x i8]* %reg224, i64 0, i64 %idxprom225, !dbg !5710
  %148 = load i8, i8* %arrayidx226, align 1, !dbg !5710
  %conv227 = zext i8 %148 to i32, !dbg !5710
  %sub228 = sub nsw i32 %conv227, 8, !dbg !5710
  %idxprom229 = sext i32 %sub228 to i64, !dbg !5710
  %arrayidx230 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom229, !dbg !5710
  %arrayidx231 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx230, i64 0, i64 39, !dbg !5710
  %149 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx231, align 8, !dbg !5710
  %call232 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %144, %struct.stack_def* %145, %struct.rtx_def* %149, i32 1), !dbg !5711
  br label %if.end244, !dbg !5712

if.else233:                                       ; preds = %while.body195
  %150 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5713
  %151 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5714
  %152 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5715
  %reg234 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %152, i32 0, i32 2, !dbg !5715
  %153 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5715
  %top235 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %153, i32 0, i32 0, !dbg !5715
  %154 = load i32, i32* %top235, align 8, !dbg !5715
  %idxprom236 = sext i32 %154 to i64, !dbg !5715
  %arrayidx237 = getelementptr inbounds [8 x i8], [8 x i8]* %reg234, i64 0, i64 %idxprom236, !dbg !5715
  %155 = load i8, i8* %arrayidx237, align 1, !dbg !5715
  %conv238 = zext i8 %155 to i32, !dbg !5715
  %sub239 = sub nsw i32 %conv238, 8, !dbg !5715
  %idxprom240 = sext i32 %sub239 to i64, !dbg !5715
  %arrayidx241 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom240, !dbg !5715
  %arrayidx242 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx241, i64 0, i64 39, !dbg !5715
  %156 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx242, align 8, !dbg !5715
  %call243 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %150, %struct.stack_def* %151, %struct.rtx_def* %156, i32 1), !dbg !5716
  br label %if.end244

if.end244:                                        ; preds = %if.else233, %while.end223
  br label %while.cond191, !dbg !5695, !llvm.loop !5717

while.end245:                                     ; preds = %while.cond191
  br label %if.end246

if.end246:                                        ; preds = %while.end245, %for.end168
  %157 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5719
  %top247 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %157, i32 0, i32 0, !dbg !5721
  %158 = load i32, i32* %top247, align 8, !dbg !5721
  %cmp248 = icmp eq i32 %158, -2, !dbg !5722
  br i1 %cmp248, label %if.then250, label %if.else256, !dbg !5723

if.then250:                                       ; preds = %if.end246
  %159 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5724
  %top251 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %159, i32 0, i32 0, !dbg !5726
  %160 = load i32, i32* %top251, align 8, !dbg !5726
  %161 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5727
  %top252 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %161, i32 0, i32 0, !dbg !5728
  store i32 %160, i32* %top252, align 8, !dbg !5729
  %162 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5730
  %reg253 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %162, i32 0, i32 2, !dbg !5731
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %reg253, i64 0, i64 0, !dbg !5732
  %163 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5733
  %reg254 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %163, i32 0, i32 2, !dbg !5734
  %arraydecay255 = getelementptr inbounds [8 x i8], [8 x i8]* %reg254, i64 0, i64 0, !dbg !5732
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %arraydecay, i8* align 8 %arraydecay255, i64 8, i1 false), !dbg !5732
  br label %if.end376, !dbg !5735

if.else256:                                       ; preds = %if.end246
  %164 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5736
  %reg_set257 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %164, i32 0, i32 1, !dbg !5736
  %165 = load i64, i64* %reg_set257, align 8, !dbg !5736
  %166 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5736
  %reg_set258 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %166, i32 0, i32 1, !dbg !5736
  %167 = load i64, i64* %reg_set258, align 8, !dbg !5736
  %call259 = call zeroext i8 @hard_reg_set_equal_p(i64 %165, i64 %167), !dbg !5736
  %tobool260 = icmp ne i8 %call259, 0, !dbg !5736
  br i1 %tobool260, label %cond.false, label %cond.true, !dbg !5736

cond.true:                                        ; preds = %if.else256
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2541, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5736
  br label %cond.end, !dbg !5736

cond.false:                                       ; preds = %if.else256
  br label %cond.end, !dbg !5736

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5736
  %168 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5738
  %top261 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %168, i32 0, i32 0, !dbg !5738
  %169 = load i32, i32* %top261, align 8, !dbg !5738
  %170 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5738
  %top262 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %170, i32 0, i32 0, !dbg !5738
  %171 = load i32, i32* %top262, align 8, !dbg !5738
  %cmp263 = icmp eq i32 %169, %171, !dbg !5738
  br i1 %cmp263, label %cond.false266, label %cond.true265, !dbg !5738

cond.true265:                                     ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2542, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5738
  br label %cond.end267, !dbg !5738

cond.false266:                                    ; preds = %cond.end
  br label %cond.end267, !dbg !5738

cond.end267:                                      ; preds = %cond.false266, %cond.true265
  %cond268 = phi i32 [ 0, %cond.true265 ], [ 0, %cond.false266 ], !dbg !5738
  %172 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5739
  %top269 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %172, i32 0, i32 0, !dbg !5741
  %173 = load i32, i32* %top269, align 8, !dbg !5741
  %cmp270 = icmp ne i32 %173, -1, !dbg !5742
  br i1 %cmp270, label %if.then272, label %if.end353, !dbg !5743

if.then272:                                       ; preds = %cond.end267
  br label %do.body, !dbg !5744

do.body:                                          ; preds = %do.cond, %if.then272
  br label %while.cond273, !dbg !5745

while.cond273:                                    ; preds = %cond.end312, %do.body
  %174 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5747
  %reg274 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %174, i32 0, i32 2, !dbg !5748
  %175 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5749
  %top275 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %175, i32 0, i32 0, !dbg !5750
  %176 = load i32, i32* %top275, align 8, !dbg !5750
  %idxprom276 = sext i32 %176 to i64, !dbg !5747
  %arrayidx277 = getelementptr inbounds [8 x i8], [8 x i8]* %reg274, i64 0, i64 %idxprom276, !dbg !5747
  %177 = load i8, i8* %arrayidx277, align 1, !dbg !5747
  %conv278 = zext i8 %177 to i32, !dbg !5747
  %178 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5751
  %reg279 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %178, i32 0, i32 2, !dbg !5752
  %179 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5753
  %top280 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %179, i32 0, i32 0, !dbg !5754
  %180 = load i32, i32* %top280, align 8, !dbg !5754
  %idxprom281 = sext i32 %180 to i64, !dbg !5751
  %arrayidx282 = getelementptr inbounds [8 x i8], [8 x i8]* %reg279, i64 0, i64 %idxprom281, !dbg !5751
  %181 = load i8, i8* %arrayidx282, align 1, !dbg !5751
  %conv283 = zext i8 %181 to i32, !dbg !5751
  %cmp284 = icmp ne i32 %conv278, %conv283, !dbg !5755
  br i1 %cmp284, label %while.body286, label %while.end322, !dbg !5745

while.body286:                                    ; preds = %while.cond273
  %182 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5756
  %top287 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %182, i32 0, i32 0, !dbg !5759
  %183 = load i32, i32* %top287, align 8, !dbg !5759
  store i32 %183, i32* %reg, align 4, !dbg !5760
  br label %for.cond288, !dbg !5761

for.cond288:                                      ; preds = %for.inc305, %while.body286
  %184 = load i32, i32* %reg, align 4, !dbg !5762
  %cmp289 = icmp sge i32 %184, 0, !dbg !5764
  br i1 %cmp289, label %for.body291, label %for.end307, !dbg !5765

for.body291:                                      ; preds = %for.cond288
  %185 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5766
  %reg292 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %185, i32 0, i32 2, !dbg !5768
  %186 = load i32, i32* %reg, align 4, !dbg !5769
  %idxprom293 = sext i32 %186 to i64, !dbg !5766
  %arrayidx294 = getelementptr inbounds [8 x i8], [8 x i8]* %reg292, i64 0, i64 %idxprom293, !dbg !5766
  %187 = load i8, i8* %arrayidx294, align 1, !dbg !5766
  %conv295 = zext i8 %187 to i32, !dbg !5766
  %188 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5770
  %reg296 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %188, i32 0, i32 2, !dbg !5771
  %189 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5772
  %top297 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %189, i32 0, i32 0, !dbg !5773
  %190 = load i32, i32* %top297, align 8, !dbg !5773
  %idxprom298 = sext i32 %190 to i64, !dbg !5770
  %arrayidx299 = getelementptr inbounds [8 x i8], [8 x i8]* %reg296, i64 0, i64 %idxprom298, !dbg !5770
  %191 = load i8, i8* %arrayidx299, align 1, !dbg !5770
  %conv300 = zext i8 %191 to i32, !dbg !5770
  %cmp301 = icmp eq i32 %conv295, %conv300, !dbg !5774
  br i1 %cmp301, label %if.then303, label %if.end304, !dbg !5775

if.then303:                                       ; preds = %for.body291
  br label %for.end307, !dbg !5776

if.end304:                                        ; preds = %for.body291
  br label %for.inc305, !dbg !5777

for.inc305:                                       ; preds = %if.end304
  %192 = load i32, i32* %reg, align 4, !dbg !5778
  %dec306 = add nsw i32 %192, -1, !dbg !5778
  store i32 %dec306, i32* %reg, align 4, !dbg !5778
  br label %for.cond288, !dbg !5779, !llvm.loop !5780

for.end307:                                       ; preds = %if.then303, %for.cond288
  %193 = load i32, i32* %reg, align 4, !dbg !5782
  %cmp308 = icmp ne i32 %193, -1, !dbg !5782
  br i1 %cmp308, label %cond.false311, label %cond.true310, !dbg !5782

cond.true310:                                     ; preds = %for.end307
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2565, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5782
  br label %cond.end312, !dbg !5782

cond.false311:                                    ; preds = %for.end307
  br label %cond.end312, !dbg !5782

cond.end312:                                      ; preds = %cond.false311, %cond.true310
  %cond313 = phi i32 [ 0, %cond.true310 ], [ 0, %cond.false311 ], !dbg !5782
  %194 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5783
  %195 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5784
  %196 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5785
  %reg314 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %196, i32 0, i32 2, !dbg !5785
  %197 = load i32, i32* %reg, align 4, !dbg !5785
  %idxprom315 = sext i32 %197 to i64, !dbg !5785
  %arrayidx316 = getelementptr inbounds [8 x i8], [8 x i8]* %reg314, i64 0, i64 %idxprom315, !dbg !5785
  %198 = load i8, i8* %arrayidx316, align 1, !dbg !5785
  %conv317 = zext i8 %198 to i32, !dbg !5785
  %sub318 = sub nsw i32 %conv317, 8, !dbg !5785
  %idxprom319 = sext i32 %sub318 to i64, !dbg !5785
  %arrayidx320 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom319, !dbg !5785
  %arrayidx321 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx320, i64 0, i64 39, !dbg !5785
  %199 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx321, align 8, !dbg !5785
  call void @emit_swap_insn(%struct.rtx_def* %194, %struct.stack_def* %195, %struct.rtx_def* %199), !dbg !5786
  br label %while.cond273, !dbg !5745, !llvm.loop !5787

while.end322:                                     ; preds = %while.cond273
  %200 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5789
  %top323 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %200, i32 0, i32 0, !dbg !5791
  %201 = load i32, i32* %top323, align 8, !dbg !5791
  store i32 %201, i32* %reg, align 4, !dbg !5792
  br label %for.cond324, !dbg !5793

for.cond324:                                      ; preds = %for.inc348, %while.end322
  %202 = load i32, i32* %reg, align 4, !dbg !5794
  %cmp325 = icmp sge i32 %202, 0, !dbg !5796
  br i1 %cmp325, label %for.body327, label %for.end350, !dbg !5797

for.body327:                                      ; preds = %for.cond324
  %203 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5798
  %reg328 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %203, i32 0, i32 2, !dbg !5800
  %204 = load i32, i32* %reg, align 4, !dbg !5801
  %idxprom329 = sext i32 %204 to i64, !dbg !5798
  %arrayidx330 = getelementptr inbounds [8 x i8], [8 x i8]* %reg328, i64 0, i64 %idxprom329, !dbg !5798
  %205 = load i8, i8* %arrayidx330, align 1, !dbg !5798
  %conv331 = zext i8 %205 to i32, !dbg !5798
  %206 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5802
  %reg332 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %206, i32 0, i32 2, !dbg !5803
  %207 = load i32, i32* %reg, align 4, !dbg !5804
  %idxprom333 = sext i32 %207 to i64, !dbg !5802
  %arrayidx334 = getelementptr inbounds [8 x i8], [8 x i8]* %reg332, i64 0, i64 %idxprom333, !dbg !5802
  %208 = load i8, i8* %arrayidx334, align 1, !dbg !5802
  %conv335 = zext i8 %208 to i32, !dbg !5802
  %cmp336 = icmp ne i32 %conv331, %conv335, !dbg !5805
  br i1 %cmp336, label %if.then338, label %if.end347, !dbg !5806

if.then338:                                       ; preds = %for.body327
  %209 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5807
  %210 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5809
  %211 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5810
  %reg339 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %211, i32 0, i32 2, !dbg !5810
  %212 = load i32, i32* %reg, align 4, !dbg !5810
  %idxprom340 = sext i32 %212 to i64, !dbg !5810
  %arrayidx341 = getelementptr inbounds [8 x i8], [8 x i8]* %reg339, i64 0, i64 %idxprom340, !dbg !5810
  %213 = load i8, i8* %arrayidx341, align 1, !dbg !5810
  %conv342 = zext i8 %213 to i32, !dbg !5810
  %sub343 = sub nsw i32 %conv342, 8, !dbg !5810
  %idxprom344 = sext i32 %sub343 to i64, !dbg !5810
  %arrayidx345 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom344, !dbg !5810
  %arrayidx346 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx345, i64 0, i64 39, !dbg !5810
  %214 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx346, align 8, !dbg !5810
  call void @emit_swap_insn(%struct.rtx_def* %209, %struct.stack_def* %210, %struct.rtx_def* %214), !dbg !5811
  br label %for.end350, !dbg !5812

if.end347:                                        ; preds = %for.body327
  br label %for.inc348, !dbg !5813

for.inc348:                                       ; preds = %if.end347
  %215 = load i32, i32* %reg, align 4, !dbg !5814
  %dec349 = add nsw i32 %215, -1, !dbg !5814
  store i32 %dec349, i32* %reg, align 4, !dbg !5814
  br label %for.cond324, !dbg !5815, !llvm.loop !5816

for.end350:                                       ; preds = %if.then338, %for.cond324
  br label %do.cond, !dbg !5818

do.cond:                                          ; preds = %for.end350
  %216 = load i32, i32* %reg, align 4, !dbg !5819
  %cmp351 = icmp sge i32 %216, 0, !dbg !5820
  br i1 %cmp351, label %do.body, label %do.end, !dbg !5818, !llvm.loop !5821

do.end:                                           ; preds = %do.cond
  br label %if.end353, !dbg !5818

if.end353:                                        ; preds = %do.end, %cond.end267
  %217 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5823
  %top354 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %217, i32 0, i32 0, !dbg !5825
  %218 = load i32, i32* %top354, align 8, !dbg !5825
  store i32 %218, i32* %reg, align 4, !dbg !5826
  br label %for.cond355, !dbg !5827

for.cond355:                                      ; preds = %for.inc373, %if.end353
  %219 = load i32, i32* %reg, align 4, !dbg !5828
  %cmp356 = icmp sge i32 %219, 0, !dbg !5830
  br i1 %cmp356, label %for.body358, label %for.end375, !dbg !5831

for.body358:                                      ; preds = %for.cond355
  %220 = load %struct.stack_def*, %struct.stack_def** %old.addr, align 8, !dbg !5832
  %reg359 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %220, i32 0, i32 2, !dbg !5832
  %221 = load i32, i32* %reg, align 4, !dbg !5832
  %idxprom360 = sext i32 %221 to i64, !dbg !5832
  %arrayidx361 = getelementptr inbounds [8 x i8], [8 x i8]* %reg359, i64 0, i64 %idxprom360, !dbg !5832
  %222 = load i8, i8* %arrayidx361, align 1, !dbg !5832
  %conv362 = zext i8 %222 to i32, !dbg !5832
  %223 = load %struct.stack_def*, %struct.stack_def** %new_stack.addr, align 8, !dbg !5832
  %reg363 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %223, i32 0, i32 2, !dbg !5832
  %224 = load i32, i32* %reg, align 4, !dbg !5832
  %idxprom364 = sext i32 %224 to i64, !dbg !5832
  %arrayidx365 = getelementptr inbounds [8 x i8], [8 x i8]* %reg363, i64 0, i64 %idxprom364, !dbg !5832
  %225 = load i8, i8* %arrayidx365, align 1, !dbg !5832
  %conv366 = zext i8 %225 to i32, !dbg !5832
  %cmp367 = icmp eq i32 %conv362, %conv366, !dbg !5832
  br i1 %cmp367, label %cond.false370, label %cond.true369, !dbg !5832

cond.true369:                                     ; preds = %for.body358
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2587, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5832
  br label %cond.end371, !dbg !5832

cond.false370:                                    ; preds = %for.body358
  br label %cond.end371, !dbg !5832

cond.end371:                                      ; preds = %cond.false370, %cond.true369
  %cond372 = phi i32 [ 0, %cond.true369 ], [ 0, %cond.false370 ], !dbg !5832
  br label %for.inc373, !dbg !5832

for.inc373:                                       ; preds = %cond.end371
  %226 = load i32, i32* %reg, align 4, !dbg !5833
  %dec374 = add nsw i32 %226, -1, !dbg !5833
  store i32 %dec374, i32* %reg, align 4, !dbg !5833
  br label %for.cond355, !dbg !5834, !llvm.loop !5835

for.end375:                                       ; preds = %for.cond355
  br label %if.end376

if.end376:                                        ; preds = %for.end375, %if.then250
  %227 = load i32, i32* %update_end, align 4, !dbg !5837
  %tobool377 = icmp ne i32 %227, 0, !dbg !5837
  br i1 %tobool377, label %if.then378, label %if.end386, !dbg !5839

if.then378:                                       ; preds = %if.end376
  %228 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5840
  %u379 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %228, i32 0, i32 1, !dbg !5840
  %fld380 = bitcast %union.u* %u379 to [1 x %union.rtunion_def]*, !dbg !5840
  %arrayidx381 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld380, i64 0, i64 1, !dbg !5840
  %rt_rtx382 = bitcast %union.rtunion_def* %arrayidx381 to %struct.rtx_def**, !dbg !5840
  %229 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx382, align 8, !dbg !5840
  %230 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !5841
  %il383 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %230, i32 0, i32 7, !dbg !5841
  %rtl384 = bitcast %union.basic_block_il_dependent* %il383 to %struct.rtl_bb_info**, !dbg !5841
  %231 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl384, align 8, !dbg !5841
  %end_385 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %231, i32 0, i32 1, !dbg !5841
  store %struct.rtx_def* %229, %struct.rtx_def** %end_385, align 8, !dbg !5842
  br label %if.end386, !dbg !5841

if.end386:                                        ; preds = %if.then, %if.then378, %if.end376
  ret void, !dbg !5843
}

declare dso_local %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @emit_swap_insn(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %reg) #0 !dbg !5844 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regstack.addr = alloca %struct.stack_def*, align 8
  %reg.addr = alloca %struct.rtx_def*, align 8
  %hard_regno = alloca i32, align 4
  %swap_rtx = alloca %struct.rtx_def*, align 8
  %tmp = alloca i32, align 4
  %other_reg = alloca i32, align 4
  %i1 = alloca %struct.rtx_def*, align 8
  %i1set = alloca %struct.rtx_def*, align 8
  %tmp34 = alloca %struct.rtx_def*, align 8
  %limit = alloca %struct.rtx_def*, align 8
  %i1src = alloca %struct.rtx_def*, align 8
  %i1dest = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !5847, metadata !DIExpression()), !dbg !5848
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !5849, metadata !DIExpression()), !dbg !5850
  store %struct.rtx_def* %reg, %struct.rtx_def** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg.addr, metadata !5851, metadata !DIExpression()), !dbg !5852
  call void @llvm.dbg.declare(metadata i32* %hard_regno, metadata !5853, metadata !DIExpression()), !dbg !5854
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %swap_rtx, metadata !5855, metadata !DIExpression()), !dbg !5856
  call void @llvm.dbg.declare(metadata i32* %tmp, metadata !5857, metadata !DIExpression()), !dbg !5858
  call void @llvm.dbg.declare(metadata i32* %other_reg, metadata !5859, metadata !DIExpression()), !dbg !5860
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %i1, metadata !5861, metadata !DIExpression()), !dbg !5862
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %i1set, metadata !5863, metadata !DIExpression()), !dbg !5864
  store %struct.rtx_def* null, %struct.rtx_def** %i1set, align 8, !dbg !5864
  %0 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5865
  %1 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !5866
  %call = call i32 @get_hard_regnum(%struct.stack_def* %0, %struct.rtx_def* %1), !dbg !5867
  store i32 %call, i32* %hard_regno, align 4, !dbg !5868
  %2 = load i32, i32* %hard_regno, align 4, !dbg !5869
  %cmp = icmp eq i32 %2, 8, !dbg !5871
  br i1 %cmp, label %if.then, label %if.end, !dbg !5872

if.then:                                          ; preds = %entry
  br label %if.end208, !dbg !5873

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %hard_regno, align 4, !dbg !5874
  %cmp1 = icmp eq i32 %3, -1, !dbg !5876
  br i1 %cmp1, label %if.then2, label %if.end5, !dbg !5877

if.then2:                                         ; preds = %if.end
  %4 = load i8, i8* @any_malformed_asm, align 1, !dbg !5878
  %tobool = icmp ne i8 %4, 0, !dbg !5878
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5878

cond.true:                                        ; preds = %if.then2
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 817, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5878
  br label %cond.end, !dbg !5878

cond.false:                                       ; preds = %if.then2
  br label %cond.end, !dbg !5878

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5878
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg.addr, align 8, !dbg !5880
  %call3 = call i32 @rhs_regno(%struct.rtx_def* %5), !dbg !5880
  %conv = trunc i32 %call3 to i8, !dbg !5880
  %6 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5881
  %reg4 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %6, i32 0, i32 2, !dbg !5882
  %7 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5883
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %7, i32 0, i32 0, !dbg !5884
  %8 = load i32, i32* %top, align 8, !dbg !5885
  %inc = add nsw i32 %8, 1, !dbg !5885
  store i32 %inc, i32* %top, align 8, !dbg !5885
  %idxprom = sext i32 %inc to i64, !dbg !5881
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %reg4, i64 0, i64 %idxprom, !dbg !5881
  store i8 %conv, i8* %arrayidx, align 1, !dbg !5886
  br label %if.end208, !dbg !5887

if.end5:                                          ; preds = %if.end
  %9 = load i32, i32* %hard_regno, align 4, !dbg !5888
  %cmp6 = icmp sge i32 %9, 8, !dbg !5888
  br i1 %cmp6, label %cond.false9, label %cond.true8, !dbg !5888

cond.true8:                                       ; preds = %if.end5
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 821, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !5888
  br label %cond.end10, !dbg !5888

cond.false9:                                      ; preds = %if.end5
  br label %cond.end10, !dbg !5888

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !5888
  %10 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5889
  %top12 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %10, i32 0, i32 0, !dbg !5890
  %11 = load i32, i32* %top12, align 8, !dbg !5890
  %12 = load i32, i32* %hard_regno, align 4, !dbg !5891
  %sub = sub nsw i32 %12, 8, !dbg !5892
  %sub13 = sub nsw i32 %11, %sub, !dbg !5893
  store i32 %sub13, i32* %other_reg, align 4, !dbg !5894
  %13 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5895
  %reg14 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %13, i32 0, i32 2, !dbg !5896
  %14 = load i32, i32* %other_reg, align 4, !dbg !5897
  %idxprom15 = sext i32 %14 to i64, !dbg !5895
  %arrayidx16 = getelementptr inbounds [8 x i8], [8 x i8]* %reg14, i64 0, i64 %idxprom15, !dbg !5895
  %15 = load i8, i8* %arrayidx16, align 1, !dbg !5895
  %conv17 = zext i8 %15 to i32, !dbg !5895
  store i32 %conv17, i32* %tmp, align 4, !dbg !5898
  %16 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5899
  %reg18 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %16, i32 0, i32 2, !dbg !5900
  %17 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5901
  %top19 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %17, i32 0, i32 0, !dbg !5902
  %18 = load i32, i32* %top19, align 8, !dbg !5902
  %idxprom20 = sext i32 %18 to i64, !dbg !5899
  %arrayidx21 = getelementptr inbounds [8 x i8], [8 x i8]* %reg18, i64 0, i64 %idxprom20, !dbg !5899
  %19 = load i8, i8* %arrayidx21, align 1, !dbg !5899
  %20 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5903
  %reg22 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %20, i32 0, i32 2, !dbg !5904
  %21 = load i32, i32* %other_reg, align 4, !dbg !5905
  %idxprom23 = sext i32 %21 to i64, !dbg !5903
  %arrayidx24 = getelementptr inbounds [8 x i8], [8 x i8]* %reg22, i64 0, i64 %idxprom23, !dbg !5903
  store i8 %19, i8* %arrayidx24, align 1, !dbg !5906
  %22 = load i32, i32* %tmp, align 4, !dbg !5907
  %conv25 = trunc i32 %22 to i8, !dbg !5907
  %23 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5908
  %reg26 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %23, i32 0, i32 2, !dbg !5909
  %24 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !5910
  %top27 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %24, i32 0, i32 0, !dbg !5911
  %25 = load i32, i32* %top27, align 8, !dbg !5911
  %idxprom28 = sext i32 %25 to i64, !dbg !5908
  %arrayidx29 = getelementptr inbounds [8 x i8], [8 x i8]* %reg26, i64 0, i64 %idxprom28, !dbg !5908
  store i8 %conv25, i8* %arrayidx29, align 1, !dbg !5912
  store %struct.rtx_def* null, %struct.rtx_def** %i1, align 8, !dbg !5913
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !5914
  %tobool30 = icmp ne %struct.basic_block_def* %26, null, !dbg !5914
  br i1 %tobool30, label %land.lhs.true, label %if.end76, !dbg !5916

land.lhs.true:                                    ; preds = %cond.end10
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5917
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !5918
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 7, !dbg !5918
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5918
  %29 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5918
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %29, i32 0, i32 0, !dbg !5918
  %30 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5918
  %cmp31 = icmp ne %struct.rtx_def* %27, %30, !dbg !5919
  br i1 %cmp31, label %if.then33, label %if.end76, !dbg !5920

if.then33:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp34, metadata !5921, metadata !DIExpression()), !dbg !5923
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !5924
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !5924
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5924
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5924
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !5924
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5924
  store %struct.rtx_def* %32, %struct.rtx_def** %tmp34, align 8, !dbg !5923
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %limit, metadata !5925, metadata !DIExpression()), !dbg !5926
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !5927
  %il36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 7, !dbg !5927
  %rtl37 = bitcast %union.basic_block_il_dependent* %il36 to %struct.rtl_bb_info**, !dbg !5927
  %34 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl37, align 8, !dbg !5927
  %head_38 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %34, i32 0, i32 0, !dbg !5927
  %35 = load %struct.rtx_def*, %struct.rtx_def** %head_38, align 8, !dbg !5927
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !5927
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !5927
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 1, !dbg !5927
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !5927
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !5927
  store %struct.rtx_def* %36, %struct.rtx_def** %limit, align 8, !dbg !5926
  br label %while.cond, !dbg !5928

while.cond:                                       ; preds = %if.end71, %if.then33
  %37 = load %struct.rtx_def*, %struct.rtx_def** %tmp34, align 8, !dbg !5929
  %38 = load %struct.rtx_def*, %struct.rtx_def** %limit, align 8, !dbg !5930
  %cmp43 = icmp ne %struct.rtx_def* %37, %38, !dbg !5931
  br i1 %cmp43, label %while.body, label %while.end, !dbg !5928

while.body:                                       ; preds = %while.cond
  %39 = load %struct.rtx_def*, %struct.rtx_def** %tmp34, align 8, !dbg !5932
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !5932
  %bf.load = load i32, i32* %40, align 8, !dbg !5932
  %bf.clear = and i32 %bf.load, 65535, !dbg !5932
  %cmp45 = icmp eq i32 %bf.clear, 12, !dbg !5932
  br i1 %cmp45, label %if.then70, label %lor.lhs.false, !dbg !5935

lor.lhs.false:                                    ; preds = %while.body
  %41 = load %struct.rtx_def*, %struct.rtx_def** %tmp34, align 8, !dbg !5936
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !5936
  %bf.load47 = load i32, i32* %42, align 8, !dbg !5936
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !5936
  %cmp49 = icmp eq i32 %bf.clear48, 10, !dbg !5936
  br i1 %cmp49, label %if.then70, label %lor.lhs.false51, !dbg !5937

lor.lhs.false51:                                  ; preds = %lor.lhs.false
  %43 = load %struct.rtx_def*, %struct.rtx_def** %tmp34, align 8, !dbg !5938
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !5938
  %bf.load52 = load i32, i32* %44, align 8, !dbg !5938
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !5938
  %cmp54 = icmp eq i32 %bf.clear53, 13, !dbg !5938
  br i1 %cmp54, label %land.lhs.true56, label %lor.lhs.false62, !dbg !5938

land.lhs.true56:                                  ; preds = %lor.lhs.false51
  %45 = load %struct.rtx_def*, %struct.rtx_def** %tmp34, align 8, !dbg !5938
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !5938
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !5938
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 5, !dbg !5938
  %rt_int = bitcast %union.rtunion_def* %arrayidx59 to i32*, !dbg !5938
  %46 = load i32, i32* %rt_int, align 8, !dbg !5938
  %cmp60 = icmp eq i32 %46, 10, !dbg !5938
  br i1 %cmp60, label %if.then70, label %lor.lhs.false62, !dbg !5939

lor.lhs.false62:                                  ; preds = %land.lhs.true56, %lor.lhs.false51
  %47 = load %struct.rtx_def*, %struct.rtx_def** %tmp34, align 8, !dbg !5940
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !5940
  %bf.load63 = load i32, i32* %48, align 8, !dbg !5940
  %bf.clear64 = and i32 %bf.load63, 65535, !dbg !5940
  %cmp65 = icmp eq i32 %bf.clear64, 8, !dbg !5940
  br i1 %cmp65, label %land.lhs.true67, label %if.end71, !dbg !5941

land.lhs.true67:                                  ; preds = %lor.lhs.false62
  %49 = load %struct.rtx_def*, %struct.rtx_def** %tmp34, align 8, !dbg !5942
  %call68 = call i32 @stack_regs_mentioned(%struct.rtx_def* %49), !dbg !5943
  %tobool69 = icmp ne i32 %call68, 0, !dbg !5943
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !5944

if.then70:                                        ; preds = %land.lhs.true67, %land.lhs.true56, %lor.lhs.false, %while.body
  %50 = load %struct.rtx_def*, %struct.rtx_def** %tmp34, align 8, !dbg !5945
  store %struct.rtx_def* %50, %struct.rtx_def** %i1, align 8, !dbg !5947
  br label %while.end, !dbg !5948

if.end71:                                         ; preds = %land.lhs.true67, %lor.lhs.false62
  %51 = load %struct.rtx_def*, %struct.rtx_def** %tmp34, align 8, !dbg !5949
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !5949
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !5949
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 1, !dbg !5949
  %rt_rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**, !dbg !5949
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx75, align 8, !dbg !5949
  store %struct.rtx_def* %52, %struct.rtx_def** %tmp34, align 8, !dbg !5950
  br label %while.cond, !dbg !5928, !llvm.loop !5951

while.end:                                        ; preds = %if.then70, %while.cond
  br label %if.end76, !dbg !5953

if.end76:                                         ; preds = %while.end, %land.lhs.true, %cond.end10
  %53 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5954
  %cmp77 = icmp ne %struct.rtx_def* %53, null, !dbg !5956
  br i1 %cmp77, label %land.lhs.true79, label %if.end184, !dbg !5957

land.lhs.true79:                                  ; preds = %if.end76
  %54 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5958
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !5958
  %bf.load80 = load i32, i32* %55, align 8, !dbg !5958
  %bf.clear81 = and i32 %bf.load80, 65535, !dbg !5958
  %cmp82 = icmp eq i32 %bf.clear81, 8, !dbg !5958
  br i1 %cmp82, label %cond.true99, label %lor.lhs.false84, !dbg !5958

lor.lhs.false84:                                  ; preds = %land.lhs.true79
  %56 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5958
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !5958
  %bf.load85 = load i32, i32* %57, align 8, !dbg !5958
  %bf.clear86 = and i32 %bf.load85, 65535, !dbg !5958
  %cmp87 = icmp eq i32 %bf.clear86, 7, !dbg !5958
  br i1 %cmp87, label %cond.true99, label %lor.lhs.false89, !dbg !5958

lor.lhs.false89:                                  ; preds = %lor.lhs.false84
  %58 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5958
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !5958
  %bf.load90 = load i32, i32* %59, align 8, !dbg !5958
  %bf.clear91 = and i32 %bf.load90, 65535, !dbg !5958
  %cmp92 = icmp eq i32 %bf.clear91, 9, !dbg !5958
  br i1 %cmp92, label %cond.true99, label %lor.lhs.false94, !dbg !5958

lor.lhs.false94:                                  ; preds = %lor.lhs.false89
  %60 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5958
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !5958
  %bf.load95 = load i32, i32* %61, align 8, !dbg !5958
  %bf.clear96 = and i32 %bf.load95, 65535, !dbg !5958
  %cmp97 = icmp eq i32 %bf.clear96, 10, !dbg !5958
  br i1 %cmp97, label %cond.true99, label %cond.false121, !dbg !5958

cond.true99:                                      ; preds = %lor.lhs.false94, %lor.lhs.false89, %lor.lhs.false84, %land.lhs.true79
  %62 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5958
  %u100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !5958
  %fld101 = bitcast %union.u* %u100 to [1 x %union.rtunion_def]*, !dbg !5958
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i64 0, i64 5, !dbg !5958
  %rt_rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**, !dbg !5958
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx103, align 8, !dbg !5958
  %64 = bitcast %struct.rtx_def* %63 to i32*, !dbg !5958
  %bf.load104 = load i32, i32* %64, align 8, !dbg !5958
  %bf.clear105 = and i32 %bf.load104, 65535, !dbg !5958
  %cmp106 = icmp eq i32 %bf.clear105, 23, !dbg !5958
  br i1 %cmp106, label %cond.true108, label %cond.false113, !dbg !5958

cond.true108:                                     ; preds = %cond.true99
  %65 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5958
  %u109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !5958
  %fld110 = bitcast %union.u* %u109 to [1 x %union.rtunion_def]*, !dbg !5958
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i64 0, i64 5, !dbg !5958
  %rt_rtx112 = bitcast %union.rtunion_def* %arrayidx111 to %struct.rtx_def**, !dbg !5958
  %66 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx112, align 8, !dbg !5958
  br label %cond.end119, !dbg !5958

cond.false113:                                    ; preds = %cond.true99
  %67 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5958
  %68 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5958
  %u114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !5958
  %fld115 = bitcast %union.u* %u114 to [1 x %union.rtunion_def]*, !dbg !5958
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld115, i64 0, i64 5, !dbg !5958
  %rt_rtx117 = bitcast %union.rtunion_def* %arrayidx116 to %struct.rtx_def**, !dbg !5958
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx117, align 8, !dbg !5958
  %call118 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %67, %struct.rtx_def* %69), !dbg !5958
  br label %cond.end119, !dbg !5958

cond.end119:                                      ; preds = %cond.false113, %cond.true108
  %cond120 = phi %struct.rtx_def* [ %66, %cond.true108 ], [ %call118, %cond.false113 ], !dbg !5958
  br label %cond.end122, !dbg !5958

cond.false121:                                    ; preds = %lor.lhs.false94
  br label %cond.end122, !dbg !5958

cond.end122:                                      ; preds = %cond.false121, %cond.end119
  %cond123 = phi %struct.rtx_def* [ %cond120, %cond.end119 ], [ null, %cond.false121 ], !dbg !5958
  store %struct.rtx_def* %cond123, %struct.rtx_def** %i1set, align 8, !dbg !5959
  %cmp124 = icmp ne %struct.rtx_def* %cond123, null, !dbg !5960
  br i1 %cmp124, label %if.then126, label %if.end184, !dbg !5961

if.then126:                                       ; preds = %cond.end122
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %i1src, metadata !5962, metadata !DIExpression()), !dbg !5964
  %70 = load %struct.rtx_def*, %struct.rtx_def** %i1set, align 8, !dbg !5965
  %u127 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !5965
  %fld128 = bitcast %union.u* %u127 to [1 x %union.rtunion_def]*, !dbg !5965
  %arrayidx129 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld128, i64 0, i64 1, !dbg !5965
  %rt_rtx130 = bitcast %union.rtunion_def* %arrayidx129 to %struct.rtx_def**, !dbg !5965
  %call131 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx130), !dbg !5966
  %71 = load %struct.rtx_def*, %struct.rtx_def** %call131, align 8, !dbg !5967
  store %struct.rtx_def* %71, %struct.rtx_def** %i1src, align 8, !dbg !5964
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %i1dest, metadata !5968, metadata !DIExpression()), !dbg !5969
  %72 = load %struct.rtx_def*, %struct.rtx_def** %i1set, align 8, !dbg !5970
  %u132 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !5970
  %fld133 = bitcast %union.u* %u132 to [1 x %union.rtunion_def]*, !dbg !5970
  %arrayidx134 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld133, i64 0, i64 0, !dbg !5970
  %rt_rtx135 = bitcast %union.rtunion_def* %arrayidx134 to %struct.rtx_def**, !dbg !5970
  %call136 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx135), !dbg !5971
  %73 = load %struct.rtx_def*, %struct.rtx_def** %call136, align 8, !dbg !5972
  store %struct.rtx_def* %73, %struct.rtx_def** %i1dest, align 8, !dbg !5969
  %74 = load %struct.rtx_def*, %struct.rtx_def** %i1dest, align 8, !dbg !5973
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !5973
  %bf.load137 = load i32, i32* %75, align 8, !dbg !5973
  %bf.clear138 = and i32 %bf.load137, 65535, !dbg !5973
  %cmp139 = icmp eq i32 %bf.clear138, 37, !dbg !5973
  br i1 %cmp139, label %land.lhs.true141, label %if.end160, !dbg !5975

land.lhs.true141:                                 ; preds = %if.then126
  %76 = load %struct.rtx_def*, %struct.rtx_def** %i1dest, align 8, !dbg !5976
  %call142 = call i32 @rhs_regno(%struct.rtx_def* %76), !dbg !5976
  %cmp143 = icmp eq i32 %call142, 8, !dbg !5977
  br i1 %cmp143, label %land.lhs.true145, label %if.end160, !dbg !5978

land.lhs.true145:                                 ; preds = %land.lhs.true141
  %77 = load %struct.rtx_def*, %struct.rtx_def** %i1src, align 8, !dbg !5979
  %78 = bitcast %struct.rtx_def* %77 to i32*, !dbg !5979
  %bf.load146 = load i32, i32* %78, align 8, !dbg !5979
  %bf.clear147 = and i32 %bf.load146, 65535, !dbg !5979
  %cmp148 = icmp eq i32 %bf.clear147, 37, !dbg !5979
  br i1 %cmp148, label %land.lhs.true150, label %if.end160, !dbg !5980

land.lhs.true150:                                 ; preds = %land.lhs.true145
  %79 = load %struct.rtx_def*, %struct.rtx_def** %i1src, align 8, !dbg !5981
  %call151 = call i32 @rhs_regno(%struct.rtx_def* %79), !dbg !5981
  %80 = load i32, i32* %hard_regno, align 4, !dbg !5982
  %sub152 = sub i32 %80, 1, !dbg !5983
  %cmp153 = icmp eq i32 %call151, %sub152, !dbg !5984
  br i1 %cmp153, label %land.lhs.true155, label %if.end160, !dbg !5985

land.lhs.true155:                                 ; preds = %land.lhs.true150
  %81 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !5986
  %call156 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %81, i32 1, i32 8), !dbg !5987
  %cmp157 = icmp eq %struct.rtx_def* %call156, null, !dbg !5988
  br i1 %cmp157, label %if.then159, label %if.end160, !dbg !5989

if.then159:                                       ; preds = %land.lhs.true155
  br label %if.end208, !dbg !5990

if.end160:                                        ; preds = %land.lhs.true155, %land.lhs.true150, %land.lhs.true145, %land.lhs.true141, %if.then126
  %82 = load %struct.rtx_def*, %struct.rtx_def** %i1dest, align 8, !dbg !5991
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !5991
  %bf.load161 = load i32, i32* %83, align 8, !dbg !5991
  %bf.clear162 = and i32 %bf.load161, 65535, !dbg !5991
  %cmp163 = icmp eq i32 %bf.clear162, 37, !dbg !5991
  br i1 %cmp163, label %land.lhs.true165, label %if.end183, !dbg !5993

land.lhs.true165:                                 ; preds = %if.end160
  %84 = load %struct.rtx_def*, %struct.rtx_def** %i1dest, align 8, !dbg !5994
  %call166 = call i32 @rhs_regno(%struct.rtx_def* %84), !dbg !5994
  %85 = load i32, i32* %hard_regno, align 4, !dbg !5995
  %cmp167 = icmp eq i32 %call166, %85, !dbg !5996
  br i1 %cmp167, label %land.lhs.true169, label %if.end183, !dbg !5997

land.lhs.true169:                                 ; preds = %land.lhs.true165
  %86 = load %struct.rtx_def*, %struct.rtx_def** %i1src, align 8, !dbg !5998
  %87 = bitcast %struct.rtx_def* %86 to i32*, !dbg !5998
  %bf.load170 = load i32, i32* %87, align 8, !dbg !5998
  %bf.clear171 = and i32 %bf.load170, 65535, !dbg !5998
  %cmp172 = icmp eq i32 %bf.clear171, 37, !dbg !5998
  br i1 %cmp172, label %land.lhs.true174, label %if.end183, !dbg !5999

land.lhs.true174:                                 ; preds = %land.lhs.true169
  %88 = load %struct.rtx_def*, %struct.rtx_def** %i1src, align 8, !dbg !6000
  %call175 = call i32 @rhs_regno(%struct.rtx_def* %88), !dbg !6000
  %cmp176 = icmp eq i32 %call175, 8, !dbg !6001
  br i1 %cmp176, label %land.lhs.true178, label %if.end183, !dbg !6002

land.lhs.true178:                                 ; preds = %land.lhs.true174
  %89 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !6003
  %call179 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %89, i32 1, i32 8), !dbg !6004
  %cmp180 = icmp eq %struct.rtx_def* %call179, null, !dbg !6005
  br i1 %cmp180, label %if.then182, label %if.end183, !dbg !6006

if.then182:                                       ; preds = %land.lhs.true178
  br label %if.end208, !dbg !6007

if.end183:                                        ; preds = %land.lhs.true178, %land.lhs.true174, %land.lhs.true169, %land.lhs.true165, %if.end160
  br label %if.end184, !dbg !6008

if.end184:                                        ; preds = %if.end183, %cond.end122, %if.end76
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !6009
  %tobool185 = icmp ne %struct.basic_block_def* %90, null, !dbg !6009
  br i1 %tobool185, label %land.lhs.true186, label %if.end190, !dbg !6011

land.lhs.true186:                                 ; preds = %if.end184
  %91 = load i8, i8* @starting_stack_p, align 1, !dbg !6012
  %conv187 = zext i8 %91 to i32, !dbg !6012
  %tobool188 = icmp ne i32 %conv187, 0, !dbg !6012
  br i1 %tobool188, label %if.then189, label %if.end190, !dbg !6013

if.then189:                                       ; preds = %land.lhs.true186
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !6014
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 2, !dbg !6014
  %93 = load i8*, i8** %aux, align 8, !dbg !6014
  %94 = bitcast i8* %93 to %struct.block_info_def*, !dbg !6014
  %stack_in = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %94, i32 0, i32 0, !dbg !6016
  %95 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6017
  %96 = bitcast %struct.stack_def* %stack_in to i8*, !dbg !6018
  %97 = bitcast %struct.stack_def* %95 to i8*, !dbg !6018
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 24, i1 false), !dbg !6018
  store i8 0, i8* @starting_stack_p, align 1, !dbg !6019
  br label %if.end208, !dbg !6020

if.end190:                                        ; preds = %land.lhs.true186, %if.end184
  %98 = load i32, i32* %hard_regno, align 4, !dbg !6021
  %sub191 = sub nsw i32 %98, 8, !dbg !6021
  %idxprom192 = sext i32 %sub191 to i64, !dbg !6021
  %arrayidx193 = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom192, !dbg !6021
  %arrayidx194 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx193, i64 0, i64 40, !dbg !6021
  %99 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx194, align 8, !dbg !6021
  %100 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 0, i64 40), align 16, !dbg !6022
  %call195 = call %struct.rtx_def* @gen_swapxf(%struct.rtx_def* %99, %struct.rtx_def* %100), !dbg !6023
  store %struct.rtx_def* %call195, %struct.rtx_def** %swap_rtx, align 8, !dbg !6024
  %101 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !6025
  %tobool196 = icmp ne %struct.rtx_def* %101, null, !dbg !6025
  br i1 %tobool196, label %if.then197, label %if.else, !dbg !6027

if.then197:                                       ; preds = %if.end190
  %102 = load %struct.rtx_def*, %struct.rtx_def** %swap_rtx, align 8, !dbg !6028
  %103 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !6029
  %call198 = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %102, %struct.rtx_def* %103), !dbg !6030
  br label %if.end208, !dbg !6030

if.else:                                          ; preds = %if.end190
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !6031
  %tobool199 = icmp ne %struct.basic_block_def* %104, null, !dbg !6031
  br i1 %tobool199, label %if.then200, label %if.else205, !dbg !6033

if.then200:                                       ; preds = %if.else
  %105 = load %struct.rtx_def*, %struct.rtx_def** %swap_rtx, align 8, !dbg !6034
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !6035
  %il201 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %106, i32 0, i32 7, !dbg !6035
  %rtl202 = bitcast %union.basic_block_il_dependent* %il201 to %struct.rtl_bb_info**, !dbg !6035
  %107 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl202, align 8, !dbg !6035
  %head_203 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %107, i32 0, i32 0, !dbg !6035
  %108 = load %struct.rtx_def*, %struct.rtx_def** %head_203, align 8, !dbg !6035
  %call204 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %105, %struct.rtx_def* %108), !dbg !6036
  br label %if.end207, !dbg !6036

if.else205:                                       ; preds = %if.else
  %109 = load %struct.rtx_def*, %struct.rtx_def** %swap_rtx, align 8, !dbg !6037
  %110 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6038
  %call206 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %109, %struct.rtx_def* %110), !dbg !6039
  br label %if.end207

if.end207:                                        ; preds = %if.else205, %if.then200
  br label %if.end208

if.end208:                                        ; preds = %if.then, %cond.end, %if.then159, %if.then182, %if.then189, %if.end207, %if.then197
  ret void, !dbg !6040
}

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #3

declare dso_local %struct.rtx_def* @find_regno_note(%struct.rtx_def*, i32, i32) #3

declare dso_local %struct.rtx_def* @gen_swapxf(%struct.rtx_def*, %struct.rtx_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_asm_stack_operands(%struct.rtx_def* %insn) #0 !dbg !6041 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %n_clobbers = alloca i32, align 4
  %malformed_asm = alloca i32, align 4
  %body = alloca %struct.rtx_def*, align 8
  %reg_used_as_output = alloca [53 x i8], align 16
  %implicitly_dies = alloca [53 x i8], align 16
  %alt = alloca i32, align 4
  %clobber_reg = alloca %struct.rtx_def**, align 8
  %n_inputs = alloca i32, align 4
  %n_outputs = alloca i32, align 4
  %clobber = alloca %struct.rtx_def*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %j = alloca i32, align 4
  %j220 = alloca i32, align 4
  %j296 = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6044, metadata !DIExpression()), !dbg !6045
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6046, metadata !DIExpression()), !dbg !6047
  call void @llvm.dbg.declare(metadata i32* %n_clobbers, metadata !6048, metadata !DIExpression()), !dbg !6049
  call void @llvm.dbg.declare(metadata i32* %malformed_asm, metadata !6050, metadata !DIExpression()), !dbg !6051
  store i32 0, i32* %malformed_asm, align 4, !dbg !6051
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %body, metadata !6052, metadata !DIExpression()), !dbg !6053
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6054
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6054
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6054
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6054
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6054
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6054
  store %struct.rtx_def* %1, %struct.rtx_def** %body, align 8, !dbg !6053
  call void @llvm.dbg.declare(metadata [53 x i8]* %reg_used_as_output, metadata !6055, metadata !DIExpression()), !dbg !6059
  call void @llvm.dbg.declare(metadata [53 x i8]* %implicitly_dies, metadata !6060, metadata !DIExpression()), !dbg !6061
  call void @llvm.dbg.declare(metadata i32* %alt, metadata !6062, metadata !DIExpression()), !dbg !6063
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %clobber_reg, metadata !6064, metadata !DIExpression()), !dbg !6065
  store %struct.rtx_def** null, %struct.rtx_def*** %clobber_reg, align 8, !dbg !6065
  call void @llvm.dbg.declare(metadata i32* %n_inputs, metadata !6066, metadata !DIExpression()), !dbg !6067
  call void @llvm.dbg.declare(metadata i32* %n_outputs, metadata !6068, metadata !DIExpression()), !dbg !6069
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6070
  call void @extract_insn(%struct.rtx_def* %2), !dbg !6071
  %call = call i32 @constrain_operands(i32 1), !dbg !6072
  %3 = load i32, i32* @which_alternative, align 4, !dbg !6073
  store i32 %3, i32* %alt, align 4, !dbg !6074
  call void @preprocess_constraints(), !dbg !6075
  %4 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !6076
  call void @get_asm_operands_in_out(%struct.rtx_def* %4, i32* %n_outputs, i32* %n_inputs), !dbg !6077
  %5 = load i32, i32* %alt, align 4, !dbg !6078
  %cmp = icmp slt i32 %5, 0, !dbg !6080
  br i1 %cmp, label %if.then, label %if.end, !dbg !6081

if.then:                                          ; preds = %entry
  store i32 1, i32* %malformed_asm, align 4, !dbg !6082
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6084
  %call1 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 24, i32 0, %struct.rtx_def* %6), !dbg !6084
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6085
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !6085
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !6085
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 5, !dbg !6085
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !6085
  store %struct.rtx_def* %call1, %struct.rtx_def** %rt_rtx5, align 8, !dbg !6086
  store i32 0, i32* %retval, align 4, !dbg !6087
  br label %return, !dbg !6087

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !6088
  br label %for.cond, !dbg !6090

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4, !dbg !6091
  %9 = load i8, i8* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 7), align 2, !dbg !6093
  %conv = sext i8 %9 to i32, !dbg !6094
  %cmp6 = icmp slt i32 %8, %conv, !dbg !6095
  br i1 %cmp6, label %for.body, label %for.end, !dbg !6096

for.body:                                         ; preds = %for.cond
  %10 = load i32, i32* %i, align 4, !dbg !6097
  %idxprom = sext i32 %10 to i64, !dbg !6097
  %arrayidx8 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom, !dbg !6097
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx8, align 8, !dbg !6097
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6097
  %bf.load = load i32, i32* %12, align 8, !dbg !6097
  %bf.clear = and i32 %bf.load, 65535, !dbg !6097
  %cmp9 = icmp eq i32 %bf.clear, 39, !dbg !6099
  br i1 %cmp9, label %land.lhs.true, label %if.end30, !dbg !6100

land.lhs.true:                                    ; preds = %for.body
  %13 = load i32, i32* %i, align 4, !dbg !6101
  %idxprom11 = sext i32 %13 to i64, !dbg !6101
  %arrayidx12 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom11, !dbg !6101
  %14 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx12, align 8, !dbg !6101
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !6101
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !6101
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 0, !dbg !6101
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !6101
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !6101
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !6101
  %bf.load17 = load i32, i32* %16, align 8, !dbg !6101
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !6101
  %cmp19 = icmp eq i32 %bf.clear18, 37, !dbg !6101
  br i1 %cmp19, label %if.then21, label %if.end30, !dbg !6102

if.then21:                                        ; preds = %land.lhs.true
  %17 = load i32, i32* %i, align 4, !dbg !6103
  %idxprom22 = sext i32 %17 to i64, !dbg !6103
  %arrayidx23 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom22, !dbg !6103
  %18 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8, !dbg !6103
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !6103
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !6103
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !6103
  %rt_rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !6103
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx27, align 8, !dbg !6103
  %20 = load i32, i32* %i, align 4, !dbg !6104
  %idxprom28 = sext i32 %20 to i64, !dbg !6105
  %arrayidx29 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom28, !dbg !6105
  store %struct.rtx_def* %19, %struct.rtx_def** %arrayidx29, align 8, !dbg !6106
  br label %if.end30, !dbg !6105

if.end30:                                         ; preds = %if.then21, %land.lhs.true, %for.body
  br label %for.inc, !dbg !6101

for.inc:                                          ; preds = %if.end30
  %21 = load i32, i32* %i, align 4, !dbg !6107
  %inc = add nsw i32 %21, 1, !dbg !6107
  store i32 %inc, i32* %i, align 4, !dbg !6107
  br label %for.cond, !dbg !6108, !llvm.loop !6109

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %n_clobbers, align 4, !dbg !6111
  %22 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !6112
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !6112
  %bf.load31 = load i32, i32* %23, align 8, !dbg !6112
  %bf.clear32 = and i32 %bf.load31, 65535, !dbg !6112
  %cmp33 = icmp eq i32 %bf.clear32, 15, !dbg !6114
  br i1 %cmp33, label %if.then35, label %if.end108, !dbg !6115

if.then35:                                        ; preds = %for.end
  %24 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !6116
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !6116
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !6116
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 0, !dbg !6116
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtvec_def**, !dbg !6116
  %25 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6116
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %25, i32 0, i32 0, !dbg !6116
  %26 = load i32, i32* %num_elem, align 8, !dbg !6116
  %conv39 = sext i32 %26 to i64, !dbg !6116
  %mul = mul i64 8, %conv39, !dbg !6116
  %27 = alloca i8, i64 %mul, align 16, !dbg !6116
  %28 = bitcast i8* %27 to %struct.rtx_def**, !dbg !6116
  store %struct.rtx_def** %28, %struct.rtx_def*** %clobber_reg, align 8, !dbg !6118
  store i32 0, i32* %i, align 4, !dbg !6119
  br label %for.cond40, !dbg !6121

for.cond40:                                       ; preds = %for.inc105, %if.then35
  %29 = load i32, i32* %i, align 4, !dbg !6122
  %30 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !6124
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !6124
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !6124
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 0, !dbg !6124
  %rt_rtvec44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtvec_def**, !dbg !6124
  %31 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec44, align 8, !dbg !6124
  %num_elem45 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %31, i32 0, i32 0, !dbg !6124
  %32 = load i32, i32* %num_elem45, align 8, !dbg !6124
  %cmp46 = icmp slt i32 %29, %32, !dbg !6125
  br i1 %cmp46, label %for.body48, label %for.end107, !dbg !6126

for.body48:                                       ; preds = %for.cond40
  %33 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !6127
  %u49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !6127
  %fld50 = bitcast %union.u* %u49 to [1 x %union.rtunion_def]*, !dbg !6127
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i64 0, i64 0, !dbg !6127
  %rt_rtvec52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtvec_def**, !dbg !6127
  %34 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec52, align 8, !dbg !6127
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %34, i32 0, i32 1, !dbg !6127
  %35 = load i32, i32* %i, align 4, !dbg !6127
  %idxprom53 = sext i32 %35 to i64, !dbg !6127
  %arrayidx54 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom53, !dbg !6127
  %36 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx54, align 8, !dbg !6127
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !6127
  %bf.load55 = load i32, i32* %37, align 8, !dbg !6127
  %bf.clear56 = and i32 %bf.load55, 65535, !dbg !6127
  %cmp57 = icmp eq i32 %bf.clear56, 25, !dbg !6129
  br i1 %cmp57, label %if.then59, label %if.end104, !dbg !6130

if.then59:                                        ; preds = %for.body48
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %clobber, metadata !6131, metadata !DIExpression()), !dbg !6133
  %38 = load %struct.rtx_def*, %struct.rtx_def** %body, align 8, !dbg !6134
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !6134
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !6134
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 0, !dbg !6134
  %rt_rtvec63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtvec_def**, !dbg !6134
  %39 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec63, align 8, !dbg !6134
  %elem64 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %39, i32 0, i32 1, !dbg !6134
  %40 = load i32, i32* %i, align 4, !dbg !6134
  %idxprom65 = sext i32 %40 to i64, !dbg !6134
  %arrayidx66 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem64, i64 0, i64 %idxprom65, !dbg !6134
  %41 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx66, align 8, !dbg !6134
  store %struct.rtx_def* %41, %struct.rtx_def** %clobber, align 8, !dbg !6133
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !6135, metadata !DIExpression()), !dbg !6136
  %42 = load %struct.rtx_def*, %struct.rtx_def** %clobber, align 8, !dbg !6137
  %u67 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !6137
  %fld68 = bitcast %union.u* %u67 to [1 x %union.rtunion_def]*, !dbg !6137
  %arrayidx69 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld68, i64 0, i64 0, !dbg !6137
  %rt_rtx70 = bitcast %union.rtunion_def* %arrayidx69 to %struct.rtx_def**, !dbg !6137
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx70, align 8, !dbg !6137
  store %struct.rtx_def* %43, %struct.rtx_def** %reg, align 8, !dbg !6136
  %44 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6138
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !6138
  %bf.load71 = load i32, i32* %45, align 8, !dbg !6138
  %bf.clear72 = and i32 %bf.load71, 65535, !dbg !6138
  %cmp73 = icmp eq i32 %bf.clear72, 39, !dbg !6140
  br i1 %cmp73, label %land.lhs.true75, label %if.end89, !dbg !6141

land.lhs.true75:                                  ; preds = %if.then59
  %46 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6142
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !6142
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !6142
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 0, !dbg !6142
  %rt_rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**, !dbg !6142
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx79, align 8, !dbg !6142
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !6142
  %bf.load80 = load i32, i32* %48, align 8, !dbg !6142
  %bf.clear81 = and i32 %bf.load80, 65535, !dbg !6142
  %cmp82 = icmp eq i32 %bf.clear81, 37, !dbg !6142
  br i1 %cmp82, label %if.then84, label %if.end89, !dbg !6143

if.then84:                                        ; preds = %land.lhs.true75
  %49 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6144
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !6144
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !6144
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 0, !dbg !6144
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !6144
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx88, align 8, !dbg !6144
  store %struct.rtx_def* %50, %struct.rtx_def** %reg, align 8, !dbg !6145
  br label %if.end89, !dbg !6146

if.end89:                                         ; preds = %if.then84, %land.lhs.true75, %if.then59
  %51 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6147
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !6147
  %bf.load90 = load i32, i32* %52, align 8, !dbg !6147
  %bf.clear91 = and i32 %bf.load90, 65535, !dbg !6147
  %cmp92 = icmp eq i32 %bf.clear91, 37, !dbg !6147
  br i1 %cmp92, label %land.lhs.true94, label %if.end103, !dbg !6147

land.lhs.true94:                                  ; preds = %if.end89
  %53 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6147
  %call95 = call i32 @rhs_regno(%struct.rtx_def* %53), !dbg !6147
  %conv96 = zext i32 %call95 to i64, !dbg !6147
  %sub = sub i64 %conv96, 8, !dbg !6147
  %cmp97 = icmp ule i64 %sub, 7, !dbg !6147
  br i1 %cmp97, label %if.then99, label %if.end103, !dbg !6149

if.then99:                                        ; preds = %land.lhs.true94
  %54 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6150
  %55 = load %struct.rtx_def**, %struct.rtx_def*** %clobber_reg, align 8, !dbg !6152
  %56 = load i32, i32* %n_clobbers, align 4, !dbg !6153
  %idxprom100 = sext i32 %56 to i64, !dbg !6152
  %arrayidx101 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %55, i64 %idxprom100, !dbg !6152
  store %struct.rtx_def* %54, %struct.rtx_def** %arrayidx101, align 8, !dbg !6154
  %57 = load i32, i32* %n_clobbers, align 4, !dbg !6155
  %inc102 = add nsw i32 %57, 1, !dbg !6155
  store i32 %inc102, i32* %n_clobbers, align 4, !dbg !6155
  br label %if.end103, !dbg !6156

if.end103:                                        ; preds = %if.then99, %land.lhs.true94, %if.end89
  br label %if.end104, !dbg !6157

if.end104:                                        ; preds = %if.end103, %for.body48
  br label %for.inc105, !dbg !6158

for.inc105:                                       ; preds = %if.end104
  %58 = load i32, i32* %i, align 4, !dbg !6159
  %inc106 = add nsw i32 %58, 1, !dbg !6159
  store i32 %inc106, i32* %i, align 4, !dbg !6159
  br label %for.cond40, !dbg !6160, !llvm.loop !6161

for.end107:                                       ; preds = %for.cond40
  br label %if.end108, !dbg !6163

if.end108:                                        ; preds = %for.end107, %for.end
  %arraydecay = getelementptr inbounds [53 x i8], [53 x i8]* %reg_used_as_output, i64 0, i64 0, !dbg !6164
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay, i8 0, i64 53, i1 false), !dbg !6164
  store i32 0, i32* %i, align 4, !dbg !6165
  br label %for.cond109, !dbg !6167

for.cond109:                                      ; preds = %for.inc170, %if.end108
  %59 = load i32, i32* %i, align 4, !dbg !6168
  %60 = load i32, i32* %n_outputs, align 4, !dbg !6170
  %cmp110 = icmp slt i32 %59, %60, !dbg !6171
  br i1 %cmp110, label %for.body112, label %for.end172, !dbg !6172

for.body112:                                      ; preds = %for.cond109
  %61 = load i32, i32* %i, align 4, !dbg !6173
  %idxprom113 = sext i32 %61 to i64, !dbg !6173
  %arrayidx114 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom113, !dbg !6173
  %62 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx114, align 8, !dbg !6173
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !6173
  %bf.load115 = load i32, i32* %63, align 8, !dbg !6173
  %bf.clear116 = and i32 %bf.load115, 65535, !dbg !6173
  %cmp117 = icmp eq i32 %bf.clear116, 37, !dbg !6173
  br i1 %cmp117, label %land.lhs.true119, label %if.end169, !dbg !6173

land.lhs.true119:                                 ; preds = %for.body112
  %64 = load i32, i32* %i, align 4, !dbg !6173
  %idxprom120 = sext i32 %64 to i64, !dbg !6173
  %arrayidx121 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom120, !dbg !6173
  %65 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx121, align 8, !dbg !6173
  %call122 = call i32 @rhs_regno(%struct.rtx_def* %65), !dbg !6173
  %conv123 = zext i32 %call122 to i64, !dbg !6173
  %sub124 = sub i64 %conv123, 8, !dbg !6173
  %cmp125 = icmp ule i64 %sub124, 7, !dbg !6173
  br i1 %cmp125, label %if.then127, label %if.end169, !dbg !6175

if.then127:                                       ; preds = %land.lhs.true119
  %66 = load i32, i32* %i, align 4, !dbg !6176
  %idxprom128 = sext i32 %66 to i64, !dbg !6179
  %arrayidx129 = getelementptr inbounds [30 x [30 x %struct.operand_alternative]], [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %idxprom128, !dbg !6179
  %67 = load i32, i32* %alt, align 4, !dbg !6180
  %idxprom130 = sext i32 %67 to i64, !dbg !6179
  %arrayidx131 = getelementptr inbounds [30 x %struct.operand_alternative], [30 x %struct.operand_alternative]* %arrayidx129, i64 0, i64 %idxprom130, !dbg !6179
  %cl = getelementptr inbounds %struct.operand_alternative, %struct.operand_alternative* %arrayidx131, i32 0, i32 1, !dbg !6181
  %68 = load i32, i32* %cl, align 8, !dbg !6181
  %idxprom132 = sext i32 %68 to i64, !dbg !6182
  %arrayidx133 = getelementptr inbounds [27 x i32], [27 x i32]* @reg_class_size, i64 0, i64 %idxprom132, !dbg !6182
  %69 = load i32, i32* %arrayidx133, align 4, !dbg !6182
  %cmp134 = icmp ne i32 %69, 1, !dbg !6183
  br i1 %cmp134, label %if.then136, label %if.else, !dbg !6184

if.then136:                                       ; preds = %if.then127
  %70 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6185
  %71 = load i32, i32* %i, align 4, !dbg !6187
  call void (%struct.rtx_def*, i8*, ...) @error_for_asm(%struct.rtx_def* %70, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.17, i64 0, i64 0), i32 %71), !dbg !6188
  store i32 1, i32* %malformed_asm, align 4, !dbg !6189
  br label %if.end168, !dbg !6190

if.else:                                          ; preds = %if.then127
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6191, metadata !DIExpression()), !dbg !6193
  store i32 0, i32* %j, align 4, !dbg !6194
  br label %for.cond137, !dbg !6196

for.cond137:                                      ; preds = %for.inc156, %if.else
  %72 = load i32, i32* %j, align 4, !dbg !6197
  %73 = load i32, i32* %n_clobbers, align 4, !dbg !6199
  %cmp138 = icmp slt i32 %72, %73, !dbg !6200
  br i1 %cmp138, label %for.body140, label %for.end158, !dbg !6201

for.body140:                                      ; preds = %for.cond137
  %74 = load i32, i32* %i, align 4, !dbg !6202
  %idxprom141 = sext i32 %74 to i64, !dbg !6202
  %arrayidx142 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom141, !dbg !6202
  %75 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx142, align 8, !dbg !6202
  %call143 = call i32 @rhs_regno(%struct.rtx_def* %75), !dbg !6202
  %76 = load %struct.rtx_def**, %struct.rtx_def*** %clobber_reg, align 8, !dbg !6204
  %77 = load i32, i32* %j, align 4, !dbg !6204
  %idxprom144 = sext i32 %77 to i64, !dbg !6204
  %arrayidx145 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %76, i64 %idxprom144, !dbg !6204
  %78 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx145, align 8, !dbg !6204
  %call146 = call i32 @rhs_regno(%struct.rtx_def* %78), !dbg !6204
  %cmp147 = icmp eq i32 %call143, %call146, !dbg !6205
  br i1 %cmp147, label %if.then149, label %if.end155, !dbg !6206

if.then149:                                       ; preds = %for.body140
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6207
  %80 = load i32, i32* %i, align 4, !dbg !6209
  %81 = load %struct.rtx_def**, %struct.rtx_def*** %clobber_reg, align 8, !dbg !6210
  %82 = load i32, i32* %j, align 4, !dbg !6210
  %idxprom150 = sext i32 %82 to i64, !dbg !6210
  %arrayidx151 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %81, i64 %idxprom150, !dbg !6210
  %83 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx151, align 8, !dbg !6210
  %call152 = call i32 @rhs_regno(%struct.rtx_def* %83), !dbg !6210
  %idxprom153 = zext i32 %call152 to i64, !dbg !6211
  %arrayidx154 = getelementptr inbounds [53 x i8*], [53 x i8*]* @reg_names, i64 0, i64 %idxprom153, !dbg !6211
  %84 = load i8*, i8** %arrayidx154, align 8, !dbg !6211
  call void (%struct.rtx_def*, i8*, ...) @error_for_asm(%struct.rtx_def* %79, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.18, i64 0, i64 0), i32 %80, i8* %84), !dbg !6212
  store i32 1, i32* %malformed_asm, align 4, !dbg !6213
  br label %for.end158, !dbg !6214

if.end155:                                        ; preds = %for.body140
  br label %for.inc156, !dbg !6204

for.inc156:                                       ; preds = %if.end155
  %85 = load i32, i32* %j, align 4, !dbg !6215
  %inc157 = add nsw i32 %85, 1, !dbg !6215
  store i32 %inc157, i32* %j, align 4, !dbg !6215
  br label %for.cond137, !dbg !6216, !llvm.loop !6217

for.end158:                                       ; preds = %if.then149, %for.cond137
  %86 = load i32, i32* %j, align 4, !dbg !6219
  %87 = load i32, i32* %n_clobbers, align 4, !dbg !6221
  %cmp159 = icmp eq i32 %86, %87, !dbg !6222
  br i1 %cmp159, label %if.then161, label %if.end167, !dbg !6223

if.then161:                                       ; preds = %for.end158
  %88 = load i32, i32* %i, align 4, !dbg !6224
  %idxprom162 = sext i32 %88 to i64, !dbg !6224
  %arrayidx163 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom162, !dbg !6224
  %89 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx163, align 8, !dbg !6224
  %call164 = call i32 @rhs_regno(%struct.rtx_def* %89), !dbg !6224
  %idxprom165 = zext i32 %call164 to i64, !dbg !6225
  %arrayidx166 = getelementptr inbounds [53 x i8], [53 x i8]* %reg_used_as_output, i64 0, i64 %idxprom165, !dbg !6225
  store i8 1, i8* %arrayidx166, align 1, !dbg !6226
  br label %if.end167, !dbg !6225

if.end167:                                        ; preds = %if.then161, %for.end158
  br label %if.end168

if.end168:                                        ; preds = %if.end167, %if.then136
  br label %if.end169, !dbg !6227

if.end169:                                        ; preds = %if.end168, %land.lhs.true119, %for.body112
  br label %for.inc170, !dbg !6173

for.inc170:                                       ; preds = %if.end169
  %90 = load i32, i32* %i, align 4, !dbg !6228
  %inc171 = add nsw i32 %90, 1, !dbg !6228
  store i32 %inc171, i32* %i, align 4, !dbg !6228
  br label %for.cond109, !dbg !6229, !llvm.loop !6230

for.end172:                                       ; preds = %for.cond109
  store i32 8, i32* %i, align 4, !dbg !6232
  br label %for.cond173, !dbg !6234

for.cond173:                                      ; preds = %for.inc181, %for.end172
  %91 = load i32, i32* %i, align 4, !dbg !6235
  %cmp174 = icmp slt i32 %91, 16, !dbg !6237
  br i1 %cmp174, label %for.body176, label %for.end183, !dbg !6238

for.body176:                                      ; preds = %for.cond173
  %92 = load i32, i32* %i, align 4, !dbg !6239
  %idxprom177 = sext i32 %92 to i64, !dbg !6241
  %arrayidx178 = getelementptr inbounds [53 x i8], [53 x i8]* %reg_used_as_output, i64 0, i64 %idxprom177, !dbg !6241
  %93 = load i8, i8* %arrayidx178, align 1, !dbg !6241
  %tobool = icmp ne i8 %93, 0, !dbg !6241
  br i1 %tobool, label %if.end180, label %if.then179, !dbg !6242

if.then179:                                       ; preds = %for.body176
  br label %for.end183, !dbg !6243

if.end180:                                        ; preds = %for.body176
  br label %for.inc181, !dbg !6244

for.inc181:                                       ; preds = %if.end180
  %94 = load i32, i32* %i, align 4, !dbg !6245
  %inc182 = add nsw i32 %94, 1, !dbg !6245
  store i32 %inc182, i32* %i, align 4, !dbg !6245
  br label %for.cond173, !dbg !6246, !llvm.loop !6247

for.end183:                                       ; preds = %if.then179, %for.cond173
  br label %for.cond184, !dbg !6249

for.cond184:                                      ; preds = %for.inc193, %for.end183
  %95 = load i32, i32* %i, align 4, !dbg !6250
  %cmp185 = icmp slt i32 %95, 16, !dbg !6253
  br i1 %cmp185, label %for.body187, label %for.end195, !dbg !6254

for.body187:                                      ; preds = %for.cond184
  %96 = load i32, i32* %i, align 4, !dbg !6255
  %idxprom188 = sext i32 %96 to i64, !dbg !6257
  %arrayidx189 = getelementptr inbounds [53 x i8], [53 x i8]* %reg_used_as_output, i64 0, i64 %idxprom188, !dbg !6257
  %97 = load i8, i8* %arrayidx189, align 1, !dbg !6257
  %tobool190 = icmp ne i8 %97, 0, !dbg !6257
  br i1 %tobool190, label %if.then191, label %if.end192, !dbg !6258

if.then191:                                       ; preds = %for.body187
  br label %for.end195, !dbg !6259

if.end192:                                        ; preds = %for.body187
  br label %for.inc193, !dbg !6260

for.inc193:                                       ; preds = %if.end192
  %98 = load i32, i32* %i, align 4, !dbg !6261
  %inc194 = add nsw i32 %98, 1, !dbg !6261
  store i32 %inc194, i32* %i, align 4, !dbg !6261
  br label %for.cond184, !dbg !6262, !llvm.loop !6263

for.end195:                                       ; preds = %if.then191, %for.cond184
  %99 = load i32, i32* %i, align 4, !dbg !6265
  %cmp196 = icmp ne i32 %99, 16, !dbg !6267
  br i1 %cmp196, label %if.then198, label %if.end199, !dbg !6268

if.then198:                                       ; preds = %for.end195
  %100 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6269
  call void (%struct.rtx_def*, i8*, ...) @error_for_asm(%struct.rtx_def* %100, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.19, i64 0, i64 0)), !dbg !6271
  store i32 1, i32* %malformed_asm, align 4, !dbg !6272
  br label %if.end199, !dbg !6273

if.end199:                                        ; preds = %if.then198, %for.end195
  %arraydecay200 = getelementptr inbounds [53 x i8], [53 x i8]* %implicitly_dies, i64 0, i64 0, !dbg !6274
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay200, i8 0, i64 53, i1 false), !dbg !6274
  %101 = load i32, i32* %n_outputs, align 4, !dbg !6275
  store i32 %101, i32* %i, align 4, !dbg !6277
  br label %for.cond201, !dbg !6278

for.cond201:                                      ; preds = %for.inc252, %if.end199
  %102 = load i32, i32* %i, align 4, !dbg !6279
  %103 = load i32, i32* %n_outputs, align 4, !dbg !6281
  %104 = load i32, i32* %n_inputs, align 4, !dbg !6282
  %add = add nsw i32 %103, %104, !dbg !6283
  %cmp202 = icmp slt i32 %102, %add, !dbg !6284
  br i1 %cmp202, label %for.body204, label %for.end254, !dbg !6285

for.body204:                                      ; preds = %for.cond201
  %105 = load i32, i32* %i, align 4, !dbg !6286
  %idxprom205 = sext i32 %105 to i64, !dbg !6286
  %arrayidx206 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom205, !dbg !6286
  %106 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx206, align 8, !dbg !6286
  %107 = bitcast %struct.rtx_def* %106 to i32*, !dbg !6286
  %bf.load207 = load i32, i32* %107, align 8, !dbg !6286
  %bf.clear208 = and i32 %bf.load207, 65535, !dbg !6286
  %cmp209 = icmp eq i32 %bf.clear208, 37, !dbg !6286
  br i1 %cmp209, label %land.lhs.true211, label %if.end251, !dbg !6286

land.lhs.true211:                                 ; preds = %for.body204
  %108 = load i32, i32* %i, align 4, !dbg !6286
  %idxprom212 = sext i32 %108 to i64, !dbg !6286
  %arrayidx213 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom212, !dbg !6286
  %109 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx213, align 8, !dbg !6286
  %call214 = call i32 @rhs_regno(%struct.rtx_def* %109), !dbg !6286
  %conv215 = zext i32 %call214 to i64, !dbg !6286
  %sub216 = sub i64 %conv215, 8, !dbg !6286
  %cmp217 = icmp ule i64 %sub216, 7, !dbg !6286
  br i1 %cmp217, label %if.then219, label %if.end251, !dbg !6288

if.then219:                                       ; preds = %land.lhs.true211
  call void @llvm.dbg.declare(metadata i32* %j220, metadata !6289, metadata !DIExpression()), !dbg !6291
  store i32 0, i32* %j220, align 4, !dbg !6292
  br label %for.cond221, !dbg !6294

for.cond221:                                      ; preds = %for.inc233, %if.then219
  %110 = load i32, i32* %j220, align 4, !dbg !6295
  %111 = load i32, i32* %n_clobbers, align 4, !dbg !6297
  %cmp222 = icmp slt i32 %110, %111, !dbg !6298
  br i1 %cmp222, label %for.body224, label %for.end235, !dbg !6299

for.body224:                                      ; preds = %for.cond221
  %112 = load %struct.rtx_def**, %struct.rtx_def*** %clobber_reg, align 8, !dbg !6300
  %113 = load i32, i32* %j220, align 4, !dbg !6302
  %idxprom225 = sext i32 %113 to i64, !dbg !6300
  %arrayidx226 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %112, i64 %idxprom225, !dbg !6300
  %114 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx226, align 8, !dbg !6300
  %115 = load i32, i32* %i, align 4, !dbg !6303
  %idxprom227 = sext i32 %115 to i64, !dbg !6304
  %arrayidx228 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom227, !dbg !6304
  %116 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx228, align 8, !dbg !6304
  %call229 = call i32 @operands_match_p(%struct.rtx_def* %114, %struct.rtx_def* %116), !dbg !6305
  %tobool230 = icmp ne i32 %call229, 0, !dbg !6305
  br i1 %tobool230, label %if.then231, label %if.end232, !dbg !6306

if.then231:                                       ; preds = %for.body224
  br label %for.end235, !dbg !6307

if.end232:                                        ; preds = %for.body224
  br label %for.inc233, !dbg !6308

for.inc233:                                       ; preds = %if.end232
  %117 = load i32, i32* %j220, align 4, !dbg !6309
  %inc234 = add nsw i32 %117, 1, !dbg !6309
  store i32 %inc234, i32* %j220, align 4, !dbg !6309
  br label %for.cond221, !dbg !6310, !llvm.loop !6311

for.end235:                                       ; preds = %if.then231, %for.cond221
  %118 = load i32, i32* %j220, align 4, !dbg !6313
  %119 = load i32, i32* %n_clobbers, align 4, !dbg !6315
  %cmp236 = icmp slt i32 %118, %119, !dbg !6316
  br i1 %cmp236, label %if.then244, label %lor.lhs.false, !dbg !6317

lor.lhs.false:                                    ; preds = %for.end235
  %120 = load i32, i32* %i, align 4, !dbg !6318
  %idxprom238 = sext i32 %120 to i64, !dbg !6319
  %arrayidx239 = getelementptr inbounds [30 x [30 x %struct.operand_alternative]], [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %idxprom238, !dbg !6319
  %121 = load i32, i32* %alt, align 4, !dbg !6320
  %idxprom240 = sext i32 %121 to i64, !dbg !6319
  %arrayidx241 = getelementptr inbounds [30 x %struct.operand_alternative], [30 x %struct.operand_alternative]* %arrayidx239, i64 0, i64 %idxprom240, !dbg !6319
  %matches = getelementptr inbounds %struct.operand_alternative, %struct.operand_alternative* %arrayidx241, i32 0, i32 3, !dbg !6321
  %122 = load i32, i32* %matches, align 16, !dbg !6321
  %cmp242 = icmp sge i32 %122, 0, !dbg !6322
  br i1 %cmp242, label %if.then244, label %if.end250, !dbg !6323

if.then244:                                       ; preds = %lor.lhs.false, %for.end235
  %123 = load i32, i32* %i, align 4, !dbg !6324
  %idxprom245 = sext i32 %123 to i64, !dbg !6324
  %arrayidx246 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom245, !dbg !6324
  %124 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx246, align 8, !dbg !6324
  %call247 = call i32 @rhs_regno(%struct.rtx_def* %124), !dbg !6324
  %idxprom248 = zext i32 %call247 to i64, !dbg !6325
  %arrayidx249 = getelementptr inbounds [53 x i8], [53 x i8]* %implicitly_dies, i64 0, i64 %idxprom248, !dbg !6325
  store i8 1, i8* %arrayidx249, align 1, !dbg !6326
  br label %if.end250, !dbg !6325

if.end250:                                        ; preds = %if.then244, %lor.lhs.false
  br label %if.end251, !dbg !6327

if.end251:                                        ; preds = %if.end250, %land.lhs.true211, %for.body204
  br label %for.inc252, !dbg !6286

for.inc252:                                       ; preds = %if.end251
  %125 = load i32, i32* %i, align 4, !dbg !6328
  %inc253 = add nsw i32 %125, 1, !dbg !6328
  store i32 %inc253, i32* %i, align 4, !dbg !6328
  br label %for.cond201, !dbg !6329, !llvm.loop !6330

for.end254:                                       ; preds = %for.cond201
  store i32 8, i32* %i, align 4, !dbg !6332
  br label %for.cond255, !dbg !6334

for.cond255:                                      ; preds = %for.inc264, %for.end254
  %126 = load i32, i32* %i, align 4, !dbg !6335
  %cmp256 = icmp slt i32 %126, 16, !dbg !6337
  br i1 %cmp256, label %for.body258, label %for.end266, !dbg !6338

for.body258:                                      ; preds = %for.cond255
  %127 = load i32, i32* %i, align 4, !dbg !6339
  %idxprom259 = sext i32 %127 to i64, !dbg !6341
  %arrayidx260 = getelementptr inbounds [53 x i8], [53 x i8]* %implicitly_dies, i64 0, i64 %idxprom259, !dbg !6341
  %128 = load i8, i8* %arrayidx260, align 1, !dbg !6341
  %tobool261 = icmp ne i8 %128, 0, !dbg !6341
  br i1 %tobool261, label %if.end263, label %if.then262, !dbg !6342

if.then262:                                       ; preds = %for.body258
  br label %for.end266, !dbg !6343

if.end263:                                        ; preds = %for.body258
  br label %for.inc264, !dbg !6344

for.inc264:                                       ; preds = %if.end263
  %129 = load i32, i32* %i, align 4, !dbg !6345
  %inc265 = add nsw i32 %129, 1, !dbg !6345
  store i32 %inc265, i32* %i, align 4, !dbg !6345
  br label %for.cond255, !dbg !6346, !llvm.loop !6347

for.end266:                                       ; preds = %if.then262, %for.cond255
  br label %for.cond267, !dbg !6349

for.cond267:                                      ; preds = %for.inc276, %for.end266
  %130 = load i32, i32* %i, align 4, !dbg !6350
  %cmp268 = icmp slt i32 %130, 16, !dbg !6353
  br i1 %cmp268, label %for.body270, label %for.end278, !dbg !6354

for.body270:                                      ; preds = %for.cond267
  %131 = load i32, i32* %i, align 4, !dbg !6355
  %idxprom271 = sext i32 %131 to i64, !dbg !6357
  %arrayidx272 = getelementptr inbounds [53 x i8], [53 x i8]* %implicitly_dies, i64 0, i64 %idxprom271, !dbg !6357
  %132 = load i8, i8* %arrayidx272, align 1, !dbg !6357
  %tobool273 = icmp ne i8 %132, 0, !dbg !6357
  br i1 %tobool273, label %if.then274, label %if.end275, !dbg !6358

if.then274:                                       ; preds = %for.body270
  br label %for.end278, !dbg !6359

if.end275:                                        ; preds = %for.body270
  br label %for.inc276, !dbg !6360

for.inc276:                                       ; preds = %if.end275
  %133 = load i32, i32* %i, align 4, !dbg !6361
  %inc277 = add nsw i32 %133, 1, !dbg !6361
  store i32 %inc277, i32* %i, align 4, !dbg !6361
  br label %for.cond267, !dbg !6362, !llvm.loop !6363

for.end278:                                       ; preds = %if.then274, %for.cond267
  %134 = load i32, i32* %i, align 4, !dbg !6365
  %cmp279 = icmp ne i32 %134, 16, !dbg !6367
  br i1 %cmp279, label %if.then281, label %if.end282, !dbg !6368

if.then281:                                       ; preds = %for.end278
  %135 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6369
  call void (%struct.rtx_def*, i8*, ...) @error_for_asm(%struct.rtx_def* %135, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.20, i64 0, i64 0)), !dbg !6371
  store i32 1, i32* %malformed_asm, align 4, !dbg !6372
  br label %if.end282, !dbg !6373

if.end282:                                        ; preds = %if.then281, %for.end278
  %136 = load i32, i32* %n_outputs, align 4, !dbg !6374
  store i32 %136, i32* %i, align 4, !dbg !6376
  br label %for.cond283, !dbg !6377

for.cond283:                                      ; preds = %for.inc313, %if.end282
  %137 = load i32, i32* %i, align 4, !dbg !6378
  %138 = load i32, i32* %n_outputs, align 4, !dbg !6380
  %139 = load i32, i32* %n_inputs, align 4, !dbg !6381
  %add284 = add nsw i32 %138, %139, !dbg !6382
  %cmp285 = icmp slt i32 %137, %add284, !dbg !6383
  br i1 %cmp285, label %for.body287, label %for.end315, !dbg !6384

for.body287:                                      ; preds = %for.cond283
  %140 = load i32, i32* %i, align 4, !dbg !6385
  %idxprom288 = sext i32 %140 to i64, !dbg !6387
  %arrayidx289 = getelementptr inbounds [30 x [30 x %struct.operand_alternative]], [30 x [30 x %struct.operand_alternative]]* @recog_op_alt, i64 0, i64 %idxprom288, !dbg !6387
  %141 = load i32, i32* %alt, align 4, !dbg !6388
  %idxprom290 = sext i32 %141 to i64, !dbg !6387
  %arrayidx291 = getelementptr inbounds [30 x %struct.operand_alternative], [30 x %struct.operand_alternative]* %arrayidx289, i64 0, i64 %idxprom290, !dbg !6387
  %matches292 = getelementptr inbounds %struct.operand_alternative, %struct.operand_alternative* %arrayidx291, i32 0, i32 3, !dbg !6389
  %142 = load i32, i32* %matches292, align 16, !dbg !6389
  %cmp293 = icmp eq i32 %142, -1, !dbg !6390
  br i1 %cmp293, label %if.then295, label %if.end312, !dbg !6391

if.then295:                                       ; preds = %for.body287
  call void @llvm.dbg.declare(metadata i32* %j296, metadata !6392, metadata !DIExpression()), !dbg !6394
  store i32 0, i32* %j296, align 4, !dbg !6395
  br label %for.cond297, !dbg !6397

for.cond297:                                      ; preds = %for.inc309, %if.then295
  %143 = load i32, i32* %j296, align 4, !dbg !6398
  %144 = load i32, i32* %n_outputs, align 4, !dbg !6400
  %cmp298 = icmp slt i32 %143, %144, !dbg !6401
  br i1 %cmp298, label %for.body300, label %for.end311, !dbg !6402

for.body300:                                      ; preds = %for.cond297
  %145 = load i32, i32* %j296, align 4, !dbg !6403
  %idxprom301 = sext i32 %145 to i64, !dbg !6405
  %arrayidx302 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom301, !dbg !6405
  %146 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx302, align 8, !dbg !6405
  %147 = load i32, i32* %i, align 4, !dbg !6406
  %idxprom303 = sext i32 %147 to i64, !dbg !6407
  %arrayidx304 = getelementptr inbounds [30 x %struct.rtx_def*], [30 x %struct.rtx_def*]* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 0), i64 0, i64 %idxprom303, !dbg !6407
  %148 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx304, align 8, !dbg !6407
  %call305 = call i32 @operands_match_p(%struct.rtx_def* %146, %struct.rtx_def* %148), !dbg !6408
  %tobool306 = icmp ne i32 %call305, 0, !dbg !6408
  br i1 %tobool306, label %if.then307, label %if.end308, !dbg !6409

if.then307:                                       ; preds = %for.body300
  %149 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6410
  %150 = load i32, i32* %j296, align 4, !dbg !6412
  call void (%struct.rtx_def*, i8*, ...) @error_for_asm(%struct.rtx_def* %149, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.21, i64 0, i64 0), i32 %150), !dbg !6413
  store i32 1, i32* %malformed_asm, align 4, !dbg !6414
  br label %if.end308, !dbg !6415

if.end308:                                        ; preds = %if.then307, %for.body300
  br label %for.inc309, !dbg !6416

for.inc309:                                       ; preds = %if.end308
  %151 = load i32, i32* %j296, align 4, !dbg !6417
  %inc310 = add nsw i32 %151, 1, !dbg !6417
  store i32 %inc310, i32* %j296, align 4, !dbg !6417
  br label %for.cond297, !dbg !6418, !llvm.loop !6419

for.end311:                                       ; preds = %for.cond297
  br label %if.end312, !dbg !6421

if.end312:                                        ; preds = %for.end311, %for.body287
  br label %for.inc313, !dbg !6422

for.inc313:                                       ; preds = %if.end312
  %152 = load i32, i32* %i, align 4, !dbg !6423
  %inc314 = add nsw i32 %152, 1, !dbg !6423
  store i32 %inc314, i32* %i, align 4, !dbg !6423
  br label %for.cond283, !dbg !6424, !llvm.loop !6425

for.end315:                                       ; preds = %for.cond283
  %153 = load i32, i32* %malformed_asm, align 4, !dbg !6427
  %tobool316 = icmp ne i32 %153, 0, !dbg !6427
  br i1 %tobool316, label %if.then317, label %if.end323, !dbg !6429

if.then317:                                       ; preds = %for.end315
  %154 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6430
  %call318 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 24, i32 0, %struct.rtx_def* %154), !dbg !6430
  %155 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6432
  %u319 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %155, i32 0, i32 1, !dbg !6432
  %fld320 = bitcast %union.u* %u319 to [1 x %union.rtunion_def]*, !dbg !6432
  %arrayidx321 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld320, i64 0, i64 5, !dbg !6432
  %rt_rtx322 = bitcast %union.rtunion_def* %arrayidx321 to %struct.rtx_def**, !dbg !6432
  store %struct.rtx_def* %call318, %struct.rtx_def** %rt_rtx322, align 8, !dbg !6433
  store i8 1, i8* @any_malformed_asm, align 1, !dbg !6434
  store i32 0, i32* %retval, align 4, !dbg !6435
  br label %return, !dbg !6435

if.end323:                                        ; preds = %for.end315
  store i32 1, i32* %retval, align 4, !dbg !6436
  br label %return, !dbg !6436

return:                                           ; preds = %if.end323, %if.then317, %if.then
  %156 = load i32, i32* %retval, align 4, !dbg !6437
  ret i32 %156, !dbg !6437
}

declare dso_local void @extract_insn(%struct.rtx_def*) #3

declare dso_local i32 @constrain_operands(i32) #3

declare dso_local void @preprocess_constraints() #3

; Function Attrs: noinline nounwind uwtable
define internal void @get_asm_operands_in_out(%struct.rtx_def* %body, i32* %pout, i32* %pin) #0 !dbg !6438 {
entry:
  %body.addr = alloca %struct.rtx_def*, align 8
  %pout.addr = alloca i32*, align 8
  %pin.addr = alloca i32*, align 8
  %asmop = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %body, %struct.rtx_def** %body.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %body.addr, metadata !6442, metadata !DIExpression()), !dbg !6443
  store i32* %pout, i32** %pout.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pout.addr, metadata !6444, metadata !DIExpression()), !dbg !6445
  store i32* %pin, i32** %pin.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pin.addr, metadata !6446, metadata !DIExpression()), !dbg !6447
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %asmop, metadata !6448, metadata !DIExpression()), !dbg !6449
  %0 = load %struct.rtx_def*, %struct.rtx_def** %body.addr, align 8, !dbg !6450
  %call = call %struct.rtx_def* @extract_asm_operands(%struct.rtx_def* %0), !dbg !6451
  store %struct.rtx_def* %call, %struct.rtx_def** %asmop, align 8, !dbg !6449
  %1 = load %struct.rtx_def*, %struct.rtx_def** %asmop, align 8, !dbg !6452
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6452
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6452
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !6452
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**, !dbg !6452
  %2 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6452
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %2, i32 0, i32 0, !dbg !6452
  %3 = load i32, i32* %num_elem, align 8, !dbg !6452
  %4 = load i32*, i32** %pin.addr, align 8, !dbg !6453
  store i32 %3, i32* %4, align 4, !dbg !6454
  %5 = load i8, i8* getelementptr inbounds (%struct.recog_data, %struct.recog_data* @recog_data, i32 0, i32 7), align 2, !dbg !6455
  %conv = sext i8 %5 to i32, !dbg !6456
  %6 = load %struct.rtx_def*, %struct.rtx_def** %asmop, align 8, !dbg !6457
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !6457
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !6457
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 3, !dbg !6457
  %rt_rtvec4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtvec_def**, !dbg !6457
  %7 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec4, align 8, !dbg !6457
  %num_elem5 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %7, i32 0, i32 0, !dbg !6457
  %8 = load i32, i32* %num_elem5, align 8, !dbg !6457
  %sub = sub nsw i32 %conv, %8, !dbg !6458
  %9 = load %struct.rtx_def*, %struct.rtx_def** %asmop, align 8, !dbg !6459
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !6459
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !6459
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 5, !dbg !6459
  %rt_rtvec9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtvec_def**, !dbg !6459
  %10 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec9, align 8, !dbg !6459
  %num_elem10 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %10, i32 0, i32 0, !dbg !6459
  %11 = load i32, i32* %num_elem10, align 8, !dbg !6459
  %sub11 = sub nsw i32 %sub, %11, !dbg !6460
  %12 = load i32*, i32** %pout.addr, align 8, !dbg !6461
  store i32 %sub11, i32* %12, align 4, !dbg !6462
  ret void, !dbg !6463
}

declare dso_local i32 @reg_class_subset_p(i32, i32) #3

declare dso_local i32 @operands_match_p(%struct.rtx_def*, %struct.rtx_def*) #3

declare dso_local %struct.rtx_def* @gen_rtx_fmt_e_stat(i32, i32, %struct.rtx_def*) #3

declare dso_local void @error_for_asm(%struct.rtx_def*, i8*, ...) #3

declare dso_local %struct.rtx_def* @extract_asm_operands(%struct.rtx_def*) #3

declare dso_local void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @move_nan_for_stack_reg(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %dest) #0 !dbg !6464 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regstack.addr = alloca %struct.stack_def*, align 8
  %dest.addr = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6465, metadata !DIExpression()), !dbg !6466
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !6467, metadata !DIExpression()), !dbg !6468
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest.addr, metadata !6469, metadata !DIExpression()), !dbg !6470
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !6471, metadata !DIExpression()), !dbg !6472
  %0 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6473
  %call = call i32 @rhs_regno(%struct.rtx_def* %0), !dbg !6473
  %sub = sub i32 %call, 8, !dbg !6473
  %idxprom = zext i32 %sub to i64, !dbg !6473
  %arrayidx = getelementptr inbounds [8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 %idxprom, !dbg !6473
  %arrayidx1 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* %arrayidx, i64 0, i64 38, !dbg !6473
  %1 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx1, align 8, !dbg !6473
  store %struct.rtx_def* %1, %struct.rtx_def** %dest.addr, align 8, !dbg !6474
  %2 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !6475
  %3 = load %struct.rtx_def*, %struct.rtx_def** @not_a_num, align 8, !dbg !6475
  %call2 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %2, %struct.rtx_def* %3), !dbg !6475
  store %struct.rtx_def* %call2, %struct.rtx_def** %pat, align 8, !dbg !6476
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !6477
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6478
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !6478
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6478
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6478
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !6478
  store %struct.rtx_def* %4, %struct.rtx_def** %rt_rtx, align 8, !dbg !6479
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6480
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !6480
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !6480
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 6, !dbg !6480
  %rt_int = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !6480
  store i32 -1, i32* %rt_int, align 8, !dbg !6481
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6482
  %8 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6483
  %9 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !6484
  %call7 = call zeroext i8 @move_for_stack_reg(%struct.rtx_def* %7, %struct.stack_def* %8, %struct.rtx_def* %9), !dbg !6485
  ret i8 %call7, !dbg !6486
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @move_for_stack_reg(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %pat) #0 !dbg !6487 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regstack.addr = alloca %struct.stack_def*, align 8
  %pat.addr = alloca %struct.rtx_def*, align 8
  %psrc = alloca %struct.rtx_def**, align 8
  %pdest = alloca %struct.rtx_def**, align 8
  %src = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %control_flow_insn_deleted = alloca i8, align 1
  %i = alloca i32, align 4
  %push_rtx = alloca %struct.rtx_def*, align 8
  %top_stack_reg = alloca %struct.rtx_def*, align 8
  %pat155 = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6488, metadata !DIExpression()), !dbg !6489
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !6490, metadata !DIExpression()), !dbg !6491
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !6492, metadata !DIExpression()), !dbg !6493
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %psrc, metadata !6494, metadata !DIExpression()), !dbg !6495
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !6496
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6496
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6496
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6496
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6496
  %call = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx), !dbg !6497
  store %struct.rtx_def** %call, %struct.rtx_def*** %psrc, align 8, !dbg !6495
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %pdest, metadata !6498, metadata !DIExpression()), !dbg !6499
  %1 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !6500
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6500
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !6500
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !6500
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !6500
  %call5 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx4), !dbg !6501
  store %struct.rtx_def** %call5, %struct.rtx_def*** %pdest, align 8, !dbg !6499
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !6502, metadata !DIExpression()), !dbg !6503
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !6504, metadata !DIExpression()), !dbg !6505
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !6506, metadata !DIExpression()), !dbg !6507
  call void @llvm.dbg.declare(metadata i8* %control_flow_insn_deleted, metadata !6508, metadata !DIExpression()), !dbg !6509
  store i8 0, i8* %control_flow_insn_deleted, align 1, !dbg !6509
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %psrc, align 8, !dbg !6510
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8, !dbg !6511
  store %struct.rtx_def* %3, %struct.rtx_def** %src, align 8, !dbg !6512
  %4 = load %struct.rtx_def**, %struct.rtx_def*** %pdest, align 8, !dbg !6513
  %5 = load %struct.rtx_def*, %struct.rtx_def** %4, align 8, !dbg !6514
  store %struct.rtx_def* %5, %struct.rtx_def** %dest, align 8, !dbg !6515
  %6 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6516
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6516
  %bf.load = load i32, i32* %7, align 8, !dbg !6516
  %bf.clear = and i32 %bf.load, 65535, !dbg !6516
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !6516
  br i1 %cmp, label %land.lhs.true, label %if.else107, !dbg !6516

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6516
  %call6 = call i32 @rhs_regno(%struct.rtx_def* %8), !dbg !6516
  %conv = zext i32 %call6 to i64, !dbg !6516
  %sub = sub i64 %conv, 8, !dbg !6516
  %cmp7 = icmp ule i64 %sub, 7, !dbg !6516
  br i1 %cmp7, label %land.lhs.true9, label %if.else107, !dbg !6518

land.lhs.true9:                                   ; preds = %land.lhs.true
  %9 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6519
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !6519
  %bf.load10 = load i32, i32* %10, align 8, !dbg !6519
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !6519
  %cmp12 = icmp eq i32 %bf.clear11, 37, !dbg !6519
  br i1 %cmp12, label %land.lhs.true14, label %if.else107, !dbg !6519

land.lhs.true14:                                  ; preds = %land.lhs.true9
  %11 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6519
  %call15 = call i32 @rhs_regno(%struct.rtx_def* %11), !dbg !6519
  %conv16 = zext i32 %call15 to i64, !dbg !6519
  %sub17 = sub i64 %conv16, 8, !dbg !6519
  %cmp18 = icmp ule i64 %sub17, 7, !dbg !6519
  br i1 %cmp18, label %if.then, label %if.else107, !dbg !6520

if.then:                                          ; preds = %land.lhs.true14
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6521
  %13 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6523
  %call20 = call i32 @rhs_regno(%struct.rtx_def* %13), !dbg !6523
  %call21 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %12, i32 1, i32 %call20), !dbg !6524
  store %struct.rtx_def* %call21, %struct.rtx_def** %note, align 8, !dbg !6525
  %14 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6526
  %tobool = icmp ne %struct.rtx_def* %14, null, !dbg !6526
  br i1 %tobool, label %if.then22, label %if.end69, !dbg !6528

if.then22:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6529, metadata !DIExpression()), !dbg !6531
  %15 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6532
  %call23 = call i32 @rhs_regno(%struct.rtx_def* %15), !dbg !6532
  %16 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6532
  %call24 = call i32 @rhs_regno(%struct.rtx_def* %16), !dbg !6532
  %cmp25 = icmp ne i32 %call23, %call24, !dbg !6532
  br i1 %cmp25, label %cond.false, label %cond.true, !dbg !6532

cond.true:                                        ; preds = %if.then22
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 968, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6532
  br label %cond.end, !dbg !6532

cond.false:                                       ; preds = %if.then22
  br label %cond.end, !dbg !6532

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6532
  %17 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6533
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %17, i32 0, i32 0, !dbg !6535
  %18 = load i32, i32* %top, align 8, !dbg !6535
  store i32 %18, i32* %i, align 4, !dbg !6536
  br label %for.cond, !dbg !6537

for.cond:                                         ; preds = %for.inc, %cond.end
  %19 = load i32, i32* %i, align 4, !dbg !6538
  %cmp27 = icmp sge i32 %19, 0, !dbg !6540
  br i1 %cmp27, label %for.body, label %for.end, !dbg !6541

for.body:                                         ; preds = %for.cond
  %20 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6542
  %reg = getelementptr inbounds %struct.stack_def, %struct.stack_def* %20, i32 0, i32 2, !dbg !6544
  %21 = load i32, i32* %i, align 4, !dbg !6545
  %idxprom = sext i32 %21 to i64, !dbg !6542
  %arrayidx29 = getelementptr inbounds [8 x i8], [8 x i8]* %reg, i64 0, i64 %idxprom, !dbg !6542
  %22 = load i8, i8* %arrayidx29, align 1, !dbg !6542
  %conv30 = zext i8 %22 to i32, !dbg !6542
  %23 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6546
  %call31 = call i32 @rhs_regno(%struct.rtx_def* %23), !dbg !6546
  %cmp32 = icmp eq i32 %conv30, %call31, !dbg !6547
  br i1 %cmp32, label %if.then34, label %if.end, !dbg !6548

if.then34:                                        ; preds = %for.body
  br label %for.end, !dbg !6549

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6546

for.inc:                                          ; preds = %if.end
  %24 = load i32, i32* %i, align 4, !dbg !6550
  %dec = add nsw i32 %24, -1, !dbg !6550
  store i32 %dec, i32* %i, align 4, !dbg !6550
  br label %for.cond, !dbg !6551, !llvm.loop !6552

for.end:                                          ; preds = %if.then34, %for.cond
  %25 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6554
  %26 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6554
  %call35 = call i32 @get_hard_regnum(%struct.stack_def* %25, %struct.rtx_def* %26), !dbg !6554
  %cmp36 = icmp slt i32 %call35, 8, !dbg !6554
  br i1 %cmp36, label %cond.false39, label %cond.true38, !dbg !6554

cond.true38:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 975, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6554
  br label %cond.end40, !dbg !6554

cond.false39:                                     ; preds = %for.end
  br label %cond.end40, !dbg !6554

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !6554
  %27 = load i32, i32* %i, align 4, !dbg !6555
  %cmp42 = icmp slt i32 %27, 0, !dbg !6557
  br i1 %cmp42, label %if.then44, label %if.end46, !dbg !6558

if.then44:                                        ; preds = %cond.end40
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6559
  %29 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6560
  %30 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6561
  %call45 = call zeroext i8 @move_nan_for_stack_reg(%struct.rtx_def* %28, %struct.stack_def* %29, %struct.rtx_def* %30), !dbg !6562
  store i8 %call45, i8* %retval, align 1, !dbg !6563
  br label %return, !dbg !6563

if.end46:                                         ; preds = %cond.end40
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6564
  %32 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6566
  %call47 = call i32 @rhs_regno(%struct.rtx_def* %32), !dbg !6566
  %call48 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %31, i32 6, i32 %call47), !dbg !6567
  %tobool49 = icmp ne %struct.rtx_def* %call48, null, !dbg !6567
  br i1 %tobool49, label %if.then50, label %if.else, !dbg !6568

if.then50:                                        ; preds = %if.end46
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6569
  %34 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6570
  %35 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6571
  %call51 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %33, %struct.stack_def* %34, %struct.rtx_def* %35, i32 0), !dbg !6572
  br label %if.end62, !dbg !6572

if.else:                                          ; preds = %if.end46
  %36 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6573
  %call52 = call i32 @rhs_regno(%struct.rtx_def* %36), !dbg !6573
  %conv53 = trunc i32 %call52 to i8, !dbg !6573
  %37 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6575
  %reg54 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %37, i32 0, i32 2, !dbg !6576
  %38 = load i32, i32* %i, align 4, !dbg !6577
  %idxprom55 = sext i32 %38 to i64, !dbg !6575
  %arrayidx56 = getelementptr inbounds [8 x i8], [8 x i8]* %reg54, i64 0, i64 %idxprom55, !dbg !6575
  store i8 %conv53, i8* %arrayidx56, align 1, !dbg !6578
  %39 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6579
  %call57 = call i32 @rhs_regno(%struct.rtx_def* %39), !dbg !6579
  %sh_prom = zext i32 %call57 to i64, !dbg !6579
  %shl = shl i64 1, %sh_prom, !dbg !6579
  %40 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6579
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %40, i32 0, i32 1, !dbg !6579
  %41 = load i64, i64* %reg_set, align 8, !dbg !6579
  %or = or i64 %41, %shl, !dbg !6579
  store i64 %or, i64* %reg_set, align 8, !dbg !6579
  %42 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6580
  %call58 = call i32 @rhs_regno(%struct.rtx_def* %42), !dbg !6580
  %sh_prom59 = zext i32 %call58 to i64, !dbg !6580
  %shl60 = shl i64 1, %sh_prom59, !dbg !6580
  %neg = xor i64 %shl60, -1, !dbg !6580
  %43 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6580
  %reg_set61 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %43, i32 0, i32 1, !dbg !6580
  %44 = load i64, i64* %reg_set61, align 8, !dbg !6580
  %and = and i64 %44, %neg, !dbg !6580
  store i64 %and, i64* %reg_set61, align 8, !dbg !6580
  br label %if.end62

if.end62:                                         ; preds = %if.else, %if.then50
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6581
  %call63 = call zeroext i8 @control_flow_insn_p(%struct.rtx_def* %45), !dbg !6582
  %conv64 = zext i8 %call63 to i32, !dbg !6582
  %46 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !6583
  %conv65 = zext i8 %46 to i32, !dbg !6583
  %or66 = or i32 %conv65, %conv64, !dbg !6583
  %conv67 = trunc i32 %or66 to i8, !dbg !6583
  store i8 %conv67, i8* %control_flow_insn_deleted, align 1, !dbg !6583
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6584
  %call68 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %47), !dbg !6585
  %48 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !6586
  store i8 %48, i8* %retval, align 1, !dbg !6587
  br label %return, !dbg !6587

if.end69:                                         ; preds = %if.then
  %49 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6588
  %call70 = call i32 @rhs_regno(%struct.rtx_def* %49), !dbg !6588
  %50 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6590
  %call71 = call i32 @rhs_regno(%struct.rtx_def* %50), !dbg !6590
  %cmp72 = icmp eq i32 %call70, %call71, !dbg !6591
  br i1 %cmp72, label %if.then74, label %if.end87, !dbg !6592

if.then74:                                        ; preds = %if.end69
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6593
  %52 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6596
  %call75 = call i32 @rhs_regno(%struct.rtx_def* %52), !dbg !6596
  %call76 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %51, i32 6, i32 %call75), !dbg !6597
  %tobool77 = icmp ne %struct.rtx_def* %call76, null, !dbg !6597
  br i1 %tobool77, label %if.then78, label %if.end80, !dbg !6598

if.then78:                                        ; preds = %if.then74
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6599
  %54 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6600
  %55 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6601
  %call79 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %53, %struct.stack_def* %54, %struct.rtx_def* %55, i32 0), !dbg !6602
  br label %if.end80, !dbg !6602

if.end80:                                         ; preds = %if.then78, %if.then74
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6603
  %call81 = call zeroext i8 @control_flow_insn_p(%struct.rtx_def* %56), !dbg !6604
  %conv82 = zext i8 %call81 to i32, !dbg !6604
  %57 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !6605
  %conv83 = zext i8 %57 to i32, !dbg !6605
  %or84 = or i32 %conv83, %conv82, !dbg !6605
  %conv85 = trunc i32 %or84 to i8, !dbg !6605
  store i8 %conv85, i8* %control_flow_insn_deleted, align 1, !dbg !6605
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6606
  %call86 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %58), !dbg !6607
  %59 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !6608
  store i8 %59, i8* %retval, align 1, !dbg !6609
  br label %return, !dbg !6609

if.end87:                                         ; preds = %if.end69
  %60 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6610
  %61 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6610
  %call88 = call i32 @get_hard_regnum(%struct.stack_def* %60, %struct.rtx_def* %61), !dbg !6610
  %cmp89 = icmp slt i32 %call88, 8, !dbg !6610
  br i1 %cmp89, label %cond.false92, label %cond.true91, !dbg !6610

cond.true91:                                      ; preds = %if.end87
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1017, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6610
  br label %cond.end93, !dbg !6610

cond.false92:                                     ; preds = %if.end87
  br label %cond.end93, !dbg !6610

cond.end93:                                       ; preds = %cond.false92, %cond.true91
  %cond94 = phi i32 [ 0, %cond.true91 ], [ 0, %cond.false92 ], !dbg !6610
  %62 = load %struct.rtx_def**, %struct.rtx_def*** %psrc, align 8, !dbg !6611
  %63 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6612
  %64 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6613
  %call95 = call i32 @get_hard_regnum(%struct.stack_def* %63, %struct.rtx_def* %64), !dbg !6614
  call void @replace_reg(%struct.rtx_def** %62, i32 %call95), !dbg !6615
  %65 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6616
  %call96 = call i32 @rhs_regno(%struct.rtx_def* %65), !dbg !6616
  %conv97 = trunc i32 %call96 to i8, !dbg !6616
  %66 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6617
  %reg98 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %66, i32 0, i32 2, !dbg !6618
  %67 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6619
  %top99 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %67, i32 0, i32 0, !dbg !6620
  %68 = load i32, i32* %top99, align 8, !dbg !6621
  %inc = add nsw i32 %68, 1, !dbg !6621
  store i32 %inc, i32* %top99, align 8, !dbg !6621
  %idxprom100 = sext i32 %inc to i64, !dbg !6617
  %arrayidx101 = getelementptr inbounds [8 x i8], [8 x i8]* %reg98, i64 0, i64 %idxprom100, !dbg !6617
  store i8 %conv97, i8* %arrayidx101, align 1, !dbg !6622
  %69 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6623
  %call102 = call i32 @rhs_regno(%struct.rtx_def* %69), !dbg !6623
  %sh_prom103 = zext i32 %call102 to i64, !dbg !6623
  %shl104 = shl i64 1, %sh_prom103, !dbg !6623
  %70 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6623
  %reg_set105 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %70, i32 0, i32 1, !dbg !6623
  %71 = load i64, i64* %reg_set105, align 8, !dbg !6623
  %or106 = or i64 %71, %shl104, !dbg !6623
  store i64 %or106, i64* %reg_set105, align 8, !dbg !6623
  %72 = load %struct.rtx_def**, %struct.rtx_def*** %pdest, align 8, !dbg !6624
  call void @replace_reg(%struct.rtx_def** %72, i32 8), !dbg !6625
  br label %if.end255, !dbg !6626

if.else107:                                       ; preds = %land.lhs.true14, %land.lhs.true9, %land.lhs.true, %entry
  %73 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6627
  %74 = bitcast %struct.rtx_def* %73 to i32*, !dbg !6627
  %bf.load108 = load i32, i32* %74, align 8, !dbg !6627
  %bf.clear109 = and i32 %bf.load108, 65535, !dbg !6627
  %cmp110 = icmp eq i32 %bf.clear109, 37, !dbg !6627
  br i1 %cmp110, label %land.lhs.true112, label %if.else154, !dbg !6627

land.lhs.true112:                                 ; preds = %if.else107
  %75 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6627
  %call113 = call i32 @rhs_regno(%struct.rtx_def* %75), !dbg !6627
  %conv114 = zext i32 %call113 to i64, !dbg !6627
  %sub115 = sub i64 %conv114, 8, !dbg !6627
  %cmp116 = icmp ule i64 %sub115, 7, !dbg !6627
  br i1 %cmp116, label %if.then118, label %if.else154, !dbg !6629

if.then118:                                       ; preds = %land.lhs.true112
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6630
  %77 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6632
  %78 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6633
  call void @emit_swap_insn(%struct.rtx_def* %76, %struct.stack_def* %77, %struct.rtx_def* %78), !dbg !6634
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6635
  %80 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6636
  %call119 = call i32 @rhs_regno(%struct.rtx_def* %80), !dbg !6636
  %call120 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %79, i32 1, i32 %call119), !dbg !6637
  store %struct.rtx_def* %call120, %struct.rtx_def** %note, align 8, !dbg !6638
  %81 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6639
  %tobool121 = icmp ne %struct.rtx_def* %81, null, !dbg !6639
  br i1 %tobool121, label %if.then122, label %if.else135, !dbg !6641

if.then122:                                       ; preds = %if.then118
  %82 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6642
  %u123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %82, i32 0, i32 1, !dbg !6642
  %fld124 = bitcast %union.u* %u123 to [1 x %union.rtunion_def]*, !dbg !6642
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld124, i64 0, i64 0, !dbg !6642
  %rt_rtx126 = bitcast %union.rtunion_def* %arrayidx125 to %struct.rtx_def**, !dbg !6642
  call void @replace_reg(%struct.rtx_def** %rt_rtx126, i32 8), !dbg !6644
  %83 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6645
  %top127 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %83, i32 0, i32 0, !dbg !6646
  %84 = load i32, i32* %top127, align 8, !dbg !6647
  %dec128 = add nsw i32 %84, -1, !dbg !6647
  store i32 %dec128, i32* %top127, align 8, !dbg !6647
  %85 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6648
  %call129 = call i32 @rhs_regno(%struct.rtx_def* %85), !dbg !6648
  %sh_prom130 = zext i32 %call129 to i64, !dbg !6648
  %shl131 = shl i64 1, %sh_prom130, !dbg !6648
  %neg132 = xor i64 %shl131, -1, !dbg !6648
  %86 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6648
  %reg_set133 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %86, i32 0, i32 1, !dbg !6648
  %87 = load i64, i64* %reg_set133, align 8, !dbg !6648
  %and134 = and i64 %87, %neg132, !dbg !6648
  store i64 %and134, i64* %reg_set133, align 8, !dbg !6648
  br label %if.end153, !dbg !6649

if.else135:                                       ; preds = %if.then118
  %88 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6650
  %89 = bitcast %struct.rtx_def* %88 to i32*, !dbg !6650
  %bf.load136 = load i32, i32* %89, align 8, !dbg !6650
  %bf.lshr = lshr i32 %bf.load136, 16, !dbg !6650
  %bf.clear137 = and i32 %bf.lshr, 255, !dbg !6650
  %cmp138 = icmp eq i32 %bf.clear137, 40, !dbg !6652
  br i1 %cmp138, label %land.lhs.true140, label %if.end152, !dbg !6653

land.lhs.true140:                                 ; preds = %if.else135
  %90 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6654
  %top141 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %90, i32 0, i32 0, !dbg !6655
  %91 = load i32, i32* %top141, align 8, !dbg !6655
  %cmp142 = icmp slt i32 %91, 7, !dbg !6656
  br i1 %cmp142, label %if.then144, label %if.end152, !dbg !6657

if.then144:                                       ; preds = %land.lhs.true140
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %push_rtx, metadata !6658, metadata !DIExpression()), !dbg !6660
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %top_stack_reg, metadata !6661, metadata !DIExpression()), !dbg !6662
  %92 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !6663
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !6663
  %bf.load145 = load i32, i32* %93, align 8, !dbg !6663
  %bf.lshr146 = lshr i32 %bf.load145, 16, !dbg !6663
  %bf.clear147 = and i32 %bf.lshr146, 255, !dbg !6663
  %idxprom148 = sext i32 %bf.clear147 to i64, !dbg !6663
  %arrayidx149 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([8 x [87 x %struct.rtx_def*]], [8 x [87 x %struct.rtx_def*]]* @FP_mode_reg, i64 0, i64 0), i64 0, i64 %idxprom148, !dbg !6663
  %94 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx149, align 8, !dbg !6663
  store %struct.rtx_def* %94, %struct.rtx_def** %top_stack_reg, align 8, !dbg !6662
  %95 = load %struct.rtx_def*, %struct.rtx_def** %top_stack_reg, align 8, !dbg !6664
  %96 = load %struct.rtx_def*, %struct.rtx_def** %top_stack_reg, align 8, !dbg !6665
  %call150 = call %struct.rtx_def* @gen_movxf(%struct.rtx_def* %95, %struct.rtx_def* %96), !dbg !6666
  store %struct.rtx_def* %call150, %struct.rtx_def** %push_rtx, align 8, !dbg !6667
  %97 = load %struct.rtx_def*, %struct.rtx_def** %push_rtx, align 8, !dbg !6668
  %98 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6669
  %call151 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %97, %struct.rtx_def* %98), !dbg !6670
  %99 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6671
  %100 = load %struct.rtx_def*, %struct.rtx_def** %top_stack_reg, align 8, !dbg !6672
  call void @add_reg_note(%struct.rtx_def* %99, i32 1, %struct.rtx_def* %100), !dbg !6673
  br label %if.end152, !dbg !6674

if.end152:                                        ; preds = %if.then144, %land.lhs.true140, %if.else135
  br label %if.end153

if.end153:                                        ; preds = %if.end152, %if.then122
  %101 = load %struct.rtx_def**, %struct.rtx_def*** %psrc, align 8, !dbg !6675
  call void @replace_reg(%struct.rtx_def** %101, i32 8), !dbg !6676
  br label %if.end254, !dbg !6677

if.else154:                                       ; preds = %land.lhs.true112, %if.else107
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat155, metadata !6678, metadata !DIExpression()), !dbg !6680
  %102 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6681
  %u156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %102, i32 0, i32 1, !dbg !6681
  %fld157 = bitcast %union.u* %u156 to [1 x %union.rtunion_def]*, !dbg !6681
  %arrayidx158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld157, i64 0, i64 5, !dbg !6681
  %rt_rtx159 = bitcast %union.rtunion_def* %arrayidx158 to %struct.rtx_def**, !dbg !6681
  %103 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx159, align 8, !dbg !6681
  store %struct.rtx_def* %103, %struct.rtx_def** %pat155, align 8, !dbg !6680
  %104 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6682
  %105 = bitcast %struct.rtx_def* %104 to i32*, !dbg !6682
  %bf.load160 = load i32, i32* %105, align 8, !dbg !6682
  %bf.clear161 = and i32 %bf.load160, 65535, !dbg !6682
  %cmp162 = icmp eq i32 %bf.clear161, 37, !dbg !6682
  br i1 %cmp162, label %land.lhs.true164, label %cond.true170, !dbg !6682

land.lhs.true164:                                 ; preds = %if.else154
  %106 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6682
  %call165 = call i32 @rhs_regno(%struct.rtx_def* %106), !dbg !6682
  %conv166 = zext i32 %call165 to i64, !dbg !6682
  %sub167 = sub i64 %conv166, 8, !dbg !6682
  %cmp168 = icmp ule i64 %sub167, 7, !dbg !6682
  br i1 %cmp168, label %cond.false171, label %cond.true170, !dbg !6682

cond.true170:                                     ; preds = %land.lhs.true164, %if.else154
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1064, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6682
  br label %cond.end172, !dbg !6682

cond.false171:                                    ; preds = %land.lhs.true164
  br label %cond.end172, !dbg !6682

cond.end172:                                      ; preds = %cond.false171, %cond.true170
  %cond173 = phi i32 [ 0, %cond.true170 ], [ 0, %cond.false171 ], !dbg !6682
  %107 = load %struct.rtx_def*, %struct.rtx_def** %pat155, align 8, !dbg !6683
  %108 = bitcast %struct.rtx_def* %107 to i32*, !dbg !6683
  %bf.load174 = load i32, i32* %108, align 8, !dbg !6683
  %bf.clear175 = and i32 %bf.load174, 65535, !dbg !6683
  %cmp176 = icmp eq i32 %bf.clear175, 15, !dbg !6685
  br i1 %cmp176, label %land.lhs.true178, label %if.else226, !dbg !6686

land.lhs.true178:                                 ; preds = %cond.end172
  %109 = load %struct.rtx_def*, %struct.rtx_def** %pat155, align 8, !dbg !6687
  %u179 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1, !dbg !6687
  %fld180 = bitcast %union.u* %u179 to [1 x %union.rtunion_def]*, !dbg !6687
  %arrayidx181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld180, i64 0, i64 0, !dbg !6687
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx181 to %struct.rtvec_def**, !dbg !6687
  %110 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6687
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %110, i32 0, i32 0, !dbg !6687
  %111 = load i32, i32* %num_elem, align 8, !dbg !6687
  %cmp182 = icmp eq i32 %111, 2, !dbg !6688
  br i1 %cmp182, label %land.lhs.true184, label %if.else226, !dbg !6689

land.lhs.true184:                                 ; preds = %land.lhs.true178
  %112 = load %struct.rtx_def*, %struct.rtx_def** %pat155, align 8, !dbg !6690
  %u185 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1, !dbg !6690
  %fld186 = bitcast %union.u* %u185 to [1 x %union.rtunion_def]*, !dbg !6690
  %arrayidx187 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld186, i64 0, i64 0, !dbg !6690
  %rt_rtvec188 = bitcast %union.rtunion_def* %arrayidx187 to %struct.rtvec_def**, !dbg !6690
  %113 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec188, align 8, !dbg !6690
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %113, i32 0, i32 1, !dbg !6690
  %arrayidx189 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 1, !dbg !6690
  %114 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx189, align 8, !dbg !6690
  %115 = bitcast %struct.rtx_def* %114 to i32*, !dbg !6690
  %bf.load190 = load i32, i32* %115, align 8, !dbg !6690
  %bf.clear191 = and i32 %bf.load190, 65535, !dbg !6690
  %cmp192 = icmp eq i32 %bf.clear191, 23, !dbg !6691
  br i1 %cmp192, label %land.lhs.true194, label %if.else226, !dbg !6692

land.lhs.true194:                                 ; preds = %land.lhs.true184
  %116 = load %struct.rtx_def*, %struct.rtx_def** %pat155, align 8, !dbg !6693
  %u195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1, !dbg !6693
  %fld196 = bitcast %union.u* %u195 to [1 x %union.rtunion_def]*, !dbg !6693
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i64 0, i64 0, !dbg !6693
  %rt_rtvec198 = bitcast %union.rtunion_def* %arrayidx197 to %struct.rtvec_def**, !dbg !6693
  %117 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec198, align 8, !dbg !6693
  %elem199 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %117, i32 0, i32 1, !dbg !6693
  %arrayidx200 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem199, i64 0, i64 1, !dbg !6693
  %118 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx200, align 8, !dbg !6693
  %u201 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %118, i32 0, i32 1, !dbg !6693
  %fld202 = bitcast %union.u* %u201 to [1 x %union.rtunion_def]*, !dbg !6693
  %arrayidx203 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld202, i64 0, i64 1, !dbg !6693
  %rt_rtx204 = bitcast %union.rtunion_def* %arrayidx203 to %struct.rtx_def**, !dbg !6693
  %119 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx204, align 8, !dbg !6693
  %120 = bitcast %struct.rtx_def* %119 to i32*, !dbg !6693
  %bf.load205 = load i32, i32* %120, align 8, !dbg !6693
  %bf.clear206 = and i32 %bf.load205, 65535, !dbg !6693
  %cmp207 = icmp eq i32 %bf.clear206, 18, !dbg !6694
  br i1 %cmp207, label %land.lhs.true209, label %if.else226, !dbg !6695

land.lhs.true209:                                 ; preds = %land.lhs.true194
  %121 = load %struct.rtx_def*, %struct.rtx_def** %pat155, align 8, !dbg !6696
  %u210 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %121, i32 0, i32 1, !dbg !6696
  %fld211 = bitcast %union.u* %u210 to [1 x %union.rtunion_def]*, !dbg !6696
  %arrayidx212 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld211, i64 0, i64 0, !dbg !6696
  %rt_rtvec213 = bitcast %union.rtunion_def* %arrayidx212 to %struct.rtvec_def**, !dbg !6696
  %122 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec213, align 8, !dbg !6696
  %elem214 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %122, i32 0, i32 1, !dbg !6696
  %arrayidx215 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem214, i64 0, i64 1, !dbg !6696
  %123 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx215, align 8, !dbg !6696
  %u216 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1, !dbg !6696
  %fld217 = bitcast %union.u* %u216 to [1 x %union.rtunion_def]*, !dbg !6696
  %arrayidx218 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld217, i64 0, i64 1, !dbg !6696
  %rt_rtx219 = bitcast %union.rtunion_def* %arrayidx218 to %struct.rtx_def**, !dbg !6696
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx219, align 8, !dbg !6696
  %u220 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %124, i32 0, i32 1, !dbg !6696
  %fld221 = bitcast %union.u* %u220 to [1 x %union.rtunion_def]*, !dbg !6696
  %arrayidx222 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld221, i64 0, i64 1, !dbg !6696
  %rt_int = bitcast %union.rtunion_def* %arrayidx222 to i32*, !dbg !6696
  %125 = load i32, i32* %rt_int, align 8, !dbg !6696
  %cmp223 = icmp eq i32 %125, 68, !dbg !6697
  br i1 %cmp223, label %if.then225, label %if.else226, !dbg !6698

if.then225:                                       ; preds = %land.lhs.true209
  %126 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6699
  %127 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6700
  %128 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6701
  call void @emit_swap_insn(%struct.rtx_def* %126, %struct.stack_def* %127, %struct.rtx_def* %128), !dbg !6702
  br label %if.end234, !dbg !6702

if.else226:                                       ; preds = %land.lhs.true209, %land.lhs.true194, %land.lhs.true184, %land.lhs.true178, %cond.end172
  %129 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6703
  %130 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6703
  %call227 = call i32 @get_hard_regnum(%struct.stack_def* %129, %struct.rtx_def* %130), !dbg !6703
  %cmp228 = icmp slt i32 %call227, 8, !dbg !6703
  br i1 %cmp228, label %cond.false231, label %cond.true230, !dbg !6703

cond.true230:                                     ; preds = %if.else226
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1082, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6703
  br label %cond.end232, !dbg !6703

cond.false231:                                    ; preds = %if.else226
  br label %cond.end232, !dbg !6703

cond.end232:                                      ; preds = %cond.false231, %cond.true230
  %cond233 = phi i32 [ 0, %cond.true230 ], [ 0, %cond.false231 ], !dbg !6703
  br label %if.end234

if.end234:                                        ; preds = %cond.end232, %if.then225
  %131 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6704
  %top235 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %131, i32 0, i32 0, !dbg !6704
  %132 = load i32, i32* %top235, align 8, !dbg !6704
  %cmp236 = icmp slt i32 %132, 8, !dbg !6704
  br i1 %cmp236, label %cond.false239, label %cond.true238, !dbg !6704

cond.true238:                                     ; preds = %if.end234
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1084, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6704
  br label %cond.end240, !dbg !6704

cond.false239:                                    ; preds = %if.end234
  br label %cond.end240, !dbg !6704

cond.end240:                                      ; preds = %cond.false239, %cond.true238
  %cond241 = phi i32 [ 0, %cond.true238 ], [ 0, %cond.false239 ], !dbg !6704
  %133 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6705
  %call242 = call i32 @rhs_regno(%struct.rtx_def* %133), !dbg !6705
  %conv243 = trunc i32 %call242 to i8, !dbg !6705
  %134 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6706
  %reg244 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %134, i32 0, i32 2, !dbg !6707
  %135 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6708
  %top245 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %135, i32 0, i32 0, !dbg !6709
  %136 = load i32, i32* %top245, align 8, !dbg !6710
  %inc246 = add nsw i32 %136, 1, !dbg !6710
  store i32 %inc246, i32* %top245, align 8, !dbg !6710
  %idxprom247 = sext i32 %inc246 to i64, !dbg !6706
  %arrayidx248 = getelementptr inbounds [8 x i8], [8 x i8]* %reg244, i64 0, i64 %idxprom247, !dbg !6706
  store i8 %conv243, i8* %arrayidx248, align 1, !dbg !6711
  %137 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6712
  %call249 = call i32 @rhs_regno(%struct.rtx_def* %137), !dbg !6712
  %sh_prom250 = zext i32 %call249 to i64, !dbg !6712
  %shl251 = shl i64 1, %sh_prom250, !dbg !6712
  %138 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6712
  %reg_set252 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %138, i32 0, i32 1, !dbg !6712
  %139 = load i64, i64* %reg_set252, align 8, !dbg !6712
  %or253 = or i64 %139, %shl251, !dbg !6712
  store i64 %or253, i64* %reg_set252, align 8, !dbg !6712
  %140 = load %struct.rtx_def**, %struct.rtx_def*** %pdest, align 8, !dbg !6713
  call void @replace_reg(%struct.rtx_def** %140, i32 8), !dbg !6714
  br label %if.end254

if.end254:                                        ; preds = %cond.end240, %if.end153
  br label %if.end255

if.end255:                                        ; preds = %if.end254, %cond.end93
  %141 = load i8, i8* %control_flow_insn_deleted, align 1, !dbg !6715
  store i8 %141, i8* %retval, align 1, !dbg !6716
  br label %return, !dbg !6716

return:                                           ; preds = %if.end255, %if.end80, %if.end62, %if.then44
  %142 = load i8, i8* %retval, align 1, !dbg !6717
  ret i8 %142, !dbg !6717
}

; Function Attrs: noinline nounwind uwtable
define internal void @compare_for_stack_reg(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %pat_src) #0 !dbg !6718 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regstack.addr = alloca %struct.stack_def*, align 8
  %pat_src.addr = alloca %struct.rtx_def*, align 8
  %src1 = alloca %struct.rtx_def**, align 8
  %src2 = alloca %struct.rtx_def**, align 8
  %src1_note = alloca %struct.rtx_def*, align 8
  %src2_note = alloca %struct.rtx_def*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6719, metadata !DIExpression()), !dbg !6720
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !6721, metadata !DIExpression()), !dbg !6722
  store %struct.rtx_def* %pat_src, %struct.rtx_def** %pat_src.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat_src.addr, metadata !6723, metadata !DIExpression()), !dbg !6724
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %src1, metadata !6725, metadata !DIExpression()), !dbg !6726
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %src2, metadata !6727, metadata !DIExpression()), !dbg !6728
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src1_note, metadata !6729, metadata !DIExpression()), !dbg !6730
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src2_note, metadata !6731, metadata !DIExpression()), !dbg !6732
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pat_src.addr, align 8, !dbg !6733
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6733
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6733
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6733
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6733
  %call = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx), !dbg !6734
  store %struct.rtx_def** %call, %struct.rtx_def*** %src1, align 8, !dbg !6735
  %1 = load %struct.rtx_def*, %struct.rtx_def** %pat_src.addr, align 8, !dbg !6736
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !6736
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !6736
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !6736
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !6736
  %call5 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx4), !dbg !6737
  store %struct.rtx_def** %call5, %struct.rtx_def*** %src2, align 8, !dbg !6738
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !6739
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8, !dbg !6739
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !6739
  %bf.load = load i32, i32* %4, align 8, !dbg !6739
  %bf.clear = and i32 %bf.load, 65535, !dbg !6739
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !6739
  br i1 %cmp, label %land.lhs.true, label %land.lhs.true23, !dbg !6739

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !6739
  %6 = load %struct.rtx_def*, %struct.rtx_def** %5, align 8, !dbg !6739
  %call6 = call i32 @rhs_regno(%struct.rtx_def* %6), !dbg !6739
  %conv = zext i32 %call6 to i64, !dbg !6739
  %sub = sub i64 %conv, 8, !dbg !6739
  %cmp7 = icmp ule i64 %sub, 7, !dbg !6739
  br i1 %cmp7, label %lor.lhs.false, label %land.lhs.true23, !dbg !6741

lor.lhs.false:                                    ; preds = %land.lhs.true
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6742
  %8 = load %struct.rtx_def*, %struct.rtx_def** %7, align 8, !dbg !6742
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6742
  %bf.load9 = load i32, i32* %9, align 8, !dbg !6742
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !6742
  %cmp11 = icmp eq i32 %bf.clear10, 37, !dbg !6742
  br i1 %cmp11, label %land.lhs.true13, label %if.end, !dbg !6742

land.lhs.true13:                                  ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6742
  %11 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8, !dbg !6742
  %call14 = call i32 @rhs_regno(%struct.rtx_def* %11), !dbg !6742
  %conv15 = zext i32 %call14 to i64, !dbg !6742
  %sub16 = sub i64 %conv15, 8, !dbg !6742
  %cmp17 = icmp ule i64 %sub16, 7, !dbg !6742
  br i1 %cmp17, label %land.lhs.true19, label %if.end, !dbg !6743

land.lhs.true19:                                  ; preds = %land.lhs.true13
  %12 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6744
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6745
  %14 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8, !dbg !6746
  %call20 = call i32 @get_hard_regnum(%struct.stack_def* %12, %struct.rtx_def* %14), !dbg !6747
  %cmp21 = icmp eq i32 %call20, 8, !dbg !6748
  br i1 %cmp21, label %land.lhs.true23, label %if.end, !dbg !6749

land.lhs.true23:                                  ; preds = %land.lhs.true19, %land.lhs.true, %entry
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6750
  %call24 = call i32 @swap_rtx_condition(%struct.rtx_def* %15), !dbg !6751
  %tobool = icmp ne i32 %call24, 0, !dbg !6751
  br i1 %tobool, label %if.then, label %if.end, !dbg !6752

if.then:                                          ; preds = %land.lhs.true23
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !6753, metadata !DIExpression()), !dbg !6755
  %16 = load %struct.rtx_def*, %struct.rtx_def** %pat_src.addr, align 8, !dbg !6756
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6756
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !6756
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !6756
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !6756
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !6756
  store %struct.rtx_def* %17, %struct.rtx_def** %temp, align 8, !dbg !6757
  %18 = load %struct.rtx_def*, %struct.rtx_def** %pat_src.addr, align 8, !dbg !6758
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !6758
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !6758
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 1, !dbg !6758
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !6758
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !6758
  %20 = load %struct.rtx_def*, %struct.rtx_def** %pat_src.addr, align 8, !dbg !6759
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !6759
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !6759
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 0, !dbg !6759
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !6759
  store %struct.rtx_def* %19, %struct.rtx_def** %rt_rtx36, align 8, !dbg !6760
  %21 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !6761
  %22 = load %struct.rtx_def*, %struct.rtx_def** %pat_src.addr, align 8, !dbg !6762
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !6762
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !6762
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 1, !dbg !6762
  %rt_rtx40 = bitcast %union.rtunion_def* %arrayidx39 to %struct.rtx_def**, !dbg !6762
  store %struct.rtx_def* %21, %struct.rtx_def** %rt_rtx40, align 8, !dbg !6763
  %23 = load %struct.rtx_def*, %struct.rtx_def** %pat_src.addr, align 8, !dbg !6764
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !6764
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !6764
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 0, !dbg !6764
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !6764
  %call45 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx44), !dbg !6765
  store %struct.rtx_def** %call45, %struct.rtx_def*** %src1, align 8, !dbg !6766
  %24 = load %struct.rtx_def*, %struct.rtx_def** %pat_src.addr, align 8, !dbg !6767
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !6767
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !6767
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 1, !dbg !6767
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !6767
  %call50 = call %struct.rtx_def** @get_true_reg(%struct.rtx_def** %rt_rtx49), !dbg !6768
  store %struct.rtx_def** %call50, %struct.rtx_def*** %src2, align 8, !dbg !6769
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6770
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !6770
  %fld52 = bitcast %union.u* %u51 to [1 x %union.rtunion_def]*, !dbg !6770
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i64 0, i64 6, !dbg !6770
  %rt_int = bitcast %union.rtunion_def* %arrayidx53 to i32*, !dbg !6770
  store i32 -1, i32* %rt_int, align 8, !dbg !6771
  br label %if.end, !dbg !6772

if.end:                                           ; preds = %if.then, %land.lhs.true23, %land.lhs.true19, %land.lhs.true13, %lor.lhs.false
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6773
  %27 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !6774
  %28 = load %struct.rtx_def*, %struct.rtx_def** %27, align 8, !dbg !6774
  %call54 = call i32 @rhs_regno(%struct.rtx_def* %28), !dbg !6774
  %call55 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %26, i32 1, i32 %call54), !dbg !6775
  store %struct.rtx_def* %call55, %struct.rtx_def** %src1_note, align 8, !dbg !6776
  %29 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6777
  %30 = load %struct.rtx_def*, %struct.rtx_def** %29, align 8, !dbg !6777
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !6777
  %bf.load56 = load i32, i32* %31, align 8, !dbg !6777
  %bf.clear57 = and i32 %bf.load56, 65535, !dbg !6777
  %cmp58 = icmp eq i32 %bf.clear57, 37, !dbg !6777
  br i1 %cmp58, label %land.lhs.true60, label %if.else, !dbg !6777

land.lhs.true60:                                  ; preds = %if.end
  %32 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6777
  %33 = load %struct.rtx_def*, %struct.rtx_def** %32, align 8, !dbg !6777
  %call61 = call i32 @rhs_regno(%struct.rtx_def* %33), !dbg !6777
  %conv62 = zext i32 %call61 to i64, !dbg !6777
  %sub63 = sub i64 %conv62, 8, !dbg !6777
  %cmp64 = icmp ule i64 %sub63, 7, !dbg !6777
  br i1 %cmp64, label %if.then66, label %if.else, !dbg !6779

if.then66:                                        ; preds = %land.lhs.true60
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6780
  %35 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6781
  %36 = load %struct.rtx_def*, %struct.rtx_def** %35, align 8, !dbg !6781
  %call67 = call i32 @rhs_regno(%struct.rtx_def* %36), !dbg !6781
  %call68 = call %struct.rtx_def* @find_regno_note(%struct.rtx_def* %34, i32 1, i32 %call67), !dbg !6782
  store %struct.rtx_def* %call68, %struct.rtx_def** %src2_note, align 8, !dbg !6783
  br label %if.end69, !dbg !6784

if.else:                                          ; preds = %land.lhs.true60, %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %src2_note, align 8, !dbg !6785
  br label %if.end69

if.end69:                                         ; preds = %if.else, %if.then66
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6786
  %38 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6787
  %39 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !6788
  %40 = load %struct.rtx_def*, %struct.rtx_def** %39, align 8, !dbg !6789
  call void @emit_swap_insn(%struct.rtx_def* %37, %struct.stack_def* %38, %struct.rtx_def* %40), !dbg !6790
  %41 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !6791
  call void @replace_reg(%struct.rtx_def** %41, i32 8), !dbg !6792
  %42 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6793
  %43 = load %struct.rtx_def*, %struct.rtx_def** %42, align 8, !dbg !6793
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !6793
  %bf.load70 = load i32, i32* %44, align 8, !dbg !6793
  %bf.clear71 = and i32 %bf.load70, 65535, !dbg !6793
  %cmp72 = icmp eq i32 %bf.clear71, 37, !dbg !6793
  br i1 %cmp72, label %land.lhs.true74, label %if.end82, !dbg !6793

land.lhs.true74:                                  ; preds = %if.end69
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6793
  %46 = load %struct.rtx_def*, %struct.rtx_def** %45, align 8, !dbg !6793
  %call75 = call i32 @rhs_regno(%struct.rtx_def* %46), !dbg !6793
  %conv76 = zext i32 %call75 to i64, !dbg !6793
  %sub77 = sub i64 %conv76, 8, !dbg !6793
  %cmp78 = icmp ule i64 %sub77, 7, !dbg !6793
  br i1 %cmp78, label %if.then80, label %if.end82, !dbg !6795

if.then80:                                        ; preds = %land.lhs.true74
  %47 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6796
  %48 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6797
  %49 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6798
  %50 = load %struct.rtx_def*, %struct.rtx_def** %49, align 8, !dbg !6799
  %call81 = call i32 @get_hard_regnum(%struct.stack_def* %48, %struct.rtx_def* %50), !dbg !6800
  call void @replace_reg(%struct.rtx_def** %47, i32 %call81), !dbg !6801
  br label %if.end82, !dbg !6801

if.end82:                                         ; preds = %if.then80, %land.lhs.true74, %if.end69
  %51 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !6802
  %tobool83 = icmp ne %struct.rtx_def* %51, null, !dbg !6802
  br i1 %tobool83, label %if.then84, label %if.end94, !dbg !6804

if.then84:                                        ; preds = %if.end82
  %52 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6805
  %53 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !6807
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !6807
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !6807
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 0, !dbg !6807
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !6807
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx88, align 8, !dbg !6807
  %call89 = call i32 @rhs_regno(%struct.rtx_def* %54), !dbg !6807
  call void @pop_stack(%struct.stack_def* %52, i32 %call89), !dbg !6808
  %55 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !6809
  %u90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !6809
  %fld91 = bitcast %union.u* %u90 to [1 x %union.rtunion_def]*, !dbg !6809
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i64 0, i64 0, !dbg !6809
  %rt_rtx93 = bitcast %union.rtunion_def* %arrayidx92 to %struct.rtx_def**, !dbg !6809
  call void @replace_reg(%struct.rtx_def** %rt_rtx93, i32 8), !dbg !6810
  br label %if.end94, !dbg !6811

if.end94:                                         ; preds = %if.then84, %if.end82
  %56 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !6812
  %tobool95 = icmp ne %struct.rtx_def* %56, null, !dbg !6812
  br i1 %tobool95, label %land.lhs.true96, label %if.end155, !dbg !6814

land.lhs.true96:                                  ; preds = %if.end94
  %57 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !6815
  %58 = load %struct.rtx_def*, %struct.rtx_def** %57, align 8, !dbg !6815
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !6815
  %bf.load97 = load i32, i32* %59, align 8, !dbg !6815
  %bf.clear98 = and i32 %bf.load97, 65535, !dbg !6815
  %cmp99 = icmp eq i32 %bf.clear98, 37, !dbg !6815
  br i1 %cmp99, label %land.lhs.true101, label %if.then123, !dbg !6815

land.lhs.true101:                                 ; preds = %land.lhs.true96
  %60 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !6815
  %61 = load %struct.rtx_def*, %struct.rtx_def** %60, align 8, !dbg !6815
  %call102 = call i32 @rhs_regno(%struct.rtx_def* %61), !dbg !6815
  %conv103 = zext i32 %call102 to i64, !dbg !6815
  %sub104 = sub i64 %conv103, 8, !dbg !6815
  %cmp105 = icmp ule i64 %sub104, 7, !dbg !6815
  br i1 %cmp105, label %land.lhs.true107, label %if.then123, !dbg !6816

land.lhs.true107:                                 ; preds = %land.lhs.true101
  %62 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6817
  %63 = load %struct.rtx_def*, %struct.rtx_def** %62, align 8, !dbg !6817
  %64 = bitcast %struct.rtx_def* %63 to i32*, !dbg !6817
  %bf.load108 = load i32, i32* %64, align 8, !dbg !6817
  %bf.clear109 = and i32 %bf.load108, 65535, !dbg !6817
  %cmp110 = icmp eq i32 %bf.clear109, 37, !dbg !6817
  br i1 %cmp110, label %land.lhs.true112, label %if.then123, !dbg !6817

land.lhs.true112:                                 ; preds = %land.lhs.true107
  %65 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6817
  %66 = load %struct.rtx_def*, %struct.rtx_def** %65, align 8, !dbg !6817
  %call113 = call i32 @rhs_regno(%struct.rtx_def* %66), !dbg !6817
  %conv114 = zext i32 %call113 to i64, !dbg !6817
  %sub115 = sub i64 %conv114, 8, !dbg !6817
  %cmp116 = icmp ule i64 %sub115, 7, !dbg !6817
  br i1 %cmp116, label %land.lhs.true118, label %if.then123, !dbg !6818

land.lhs.true118:                                 ; preds = %land.lhs.true112
  %67 = load %struct.rtx_def**, %struct.rtx_def*** %src1, align 8, !dbg !6819
  %68 = load %struct.rtx_def*, %struct.rtx_def** %67, align 8, !dbg !6819
  %call119 = call i32 @rhs_regno(%struct.rtx_def* %68), !dbg !6819
  %69 = load %struct.rtx_def**, %struct.rtx_def*** %src2, align 8, !dbg !6820
  %70 = load %struct.rtx_def*, %struct.rtx_def** %69, align 8, !dbg !6820
  %call120 = call i32 @rhs_regno(%struct.rtx_def* %70), !dbg !6820
  %cmp121 = icmp eq i32 %call119, %call120, !dbg !6821
  br i1 %cmp121, label %if.end155, label %if.then123, !dbg !6822

if.then123:                                       ; preds = %land.lhs.true118, %land.lhs.true112, %land.lhs.true107, %land.lhs.true101, %land.lhs.true96
  %71 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6823
  %72 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !6826
  %u124 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !6826
  %fld125 = bitcast %union.u* %u124 to [1 x %union.rtunion_def]*, !dbg !6826
  %arrayidx126 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld125, i64 0, i64 0, !dbg !6826
  %rt_rtx127 = bitcast %union.rtunion_def* %arrayidx126 to %struct.rtx_def**, !dbg !6826
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx127, align 8, !dbg !6826
  %call128 = call i32 @get_hard_regnum(%struct.stack_def* %71, %struct.rtx_def* %73), !dbg !6827
  %cmp129 = icmp eq i32 %call128, 8, !dbg !6828
  br i1 %cmp129, label %land.lhs.true131, label %if.else143, !dbg !6829

land.lhs.true131:                                 ; preds = %if.then123
  %74 = load %struct.rtx_def*, %struct.rtx_def** %src1_note, align 8, !dbg !6830
  %tobool132 = icmp ne %struct.rtx_def* %74, null, !dbg !6830
  br i1 %tobool132, label %if.then133, label %if.else143, !dbg !6831

if.then133:                                       ; preds = %land.lhs.true131
  %75 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6832
  %76 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !6834
  %u134 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !6834
  %fld135 = bitcast %union.u* %u134 to [1 x %union.rtunion_def]*, !dbg !6834
  %arrayidx136 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld135, i64 0, i64 0, !dbg !6834
  %rt_rtx137 = bitcast %union.rtunion_def* %arrayidx136 to %struct.rtx_def**, !dbg !6834
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx137, align 8, !dbg !6834
  %call138 = call i32 @rhs_regno(%struct.rtx_def* %77), !dbg !6834
  call void @pop_stack(%struct.stack_def* %75, i32 %call138), !dbg !6835
  %78 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !6836
  %u139 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1, !dbg !6836
  %fld140 = bitcast %union.u* %u139 to [1 x %union.rtunion_def]*, !dbg !6836
  %arrayidx141 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld140, i64 0, i64 0, !dbg !6836
  %rt_rtx142 = bitcast %union.rtunion_def* %arrayidx141 to %struct.rtx_def**, !dbg !6836
  call void @replace_reg(%struct.rtx_def** %rt_rtx142, i32 9), !dbg !6837
  br label %if.end154, !dbg !6838

if.else143:                                       ; preds = %land.lhs.true131, %if.then123
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6839
  %80 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !6841
  %u144 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !6841
  %fld145 = bitcast %union.u* %u144 to [1 x %union.rtunion_def]*, !dbg !6841
  %arrayidx146 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld145, i64 0, i64 0, !dbg !6841
  %rt_rtx147 = bitcast %union.rtunion_def* %arrayidx146 to %struct.rtx_def**, !dbg !6841
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx147, align 8, !dbg !6841
  %call148 = call i32 @rhs_regno(%struct.rtx_def* %81), !dbg !6841
  call void @remove_regno_note(%struct.rtx_def* %79, i32 1, i32 %call148), !dbg !6842
  %82 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6843
  %83 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6844
  %84 = load %struct.rtx_def*, %struct.rtx_def** %src2_note, align 8, !dbg !6845
  %u149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !6845
  %fld150 = bitcast %union.u* %u149 to [1 x %union.rtunion_def]*, !dbg !6845
  %arrayidx151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld150, i64 0, i64 0, !dbg !6845
  %rt_rtx152 = bitcast %union.rtunion_def* %arrayidx151 to %struct.rtx_def**, !dbg !6845
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx152, align 8, !dbg !6845
  %call153 = call %struct.rtx_def* @emit_pop_insn(%struct.rtx_def* %82, %struct.stack_def* %83, %struct.rtx_def* %85, i32 0), !dbg !6846
  br label %if.end154

if.end154:                                        ; preds = %if.else143, %if.then133
  br label %if.end155, !dbg !6847

if.end155:                                        ; preds = %if.end154, %land.lhs.true118, %if.end94
  ret void, !dbg !6848
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_regno_note(%struct.rtx_def* %insn, i32 %note, i32 %regno) #0 !dbg !6849 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %note.addr = alloca i32, align 4
  %regno.addr = alloca i32, align 4
  %note_link = alloca %struct.rtx_def**, align 8
  %this_rtx = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6852, metadata !DIExpression()), !dbg !6853
  store i32 %note, i32* %note.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %note.addr, metadata !6854, metadata !DIExpression()), !dbg !6855
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !6856, metadata !DIExpression()), !dbg !6857
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %note_link, metadata !6858, metadata !DIExpression()), !dbg !6859
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %this_rtx, metadata !6860, metadata !DIExpression()), !dbg !6861
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6862
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6862
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6862
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 7, !dbg !6862
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6862
  store %struct.rtx_def** %rt_rtx, %struct.rtx_def*** %note_link, align 8, !dbg !6863
  %1 = load %struct.rtx_def**, %struct.rtx_def*** %note_link, align 8, !dbg !6864
  %2 = load %struct.rtx_def*, %struct.rtx_def** %1, align 8, !dbg !6866
  store %struct.rtx_def* %2, %struct.rtx_def** %this_rtx, align 8, !dbg !6867
  br label %for.cond, !dbg !6868

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !6869
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !6871
  br i1 %tobool, label %for.body, label %for.end, !dbg !6871

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !6872
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6872
  %bf.load = load i32, i32* %5, align 8, !dbg !6872
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6872
  %bf.clear = and i32 %bf.lshr, 255, !dbg !6872
  %6 = load i32, i32* %note.addr, align 4, !dbg !6874
  %cmp = icmp eq i32 %bf.clear, %6, !dbg !6875
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !6876

land.lhs.true:                                    ; preds = %for.body
  %7 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !6877
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !6877
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !6877
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !6877
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !6877
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !6877
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6877
  %bf.load5 = load i32, i32* %9, align 8, !dbg !6877
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !6877
  %cmp7 = icmp eq i32 %bf.clear6, 37, !dbg !6877
  br i1 %cmp7, label %land.lhs.true8, label %if.else, !dbg !6878

land.lhs.true8:                                   ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !6879
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !6879
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !6879
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !6879
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !6879
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx12, align 8, !dbg !6879
  %call = call i32 @rhs_regno(%struct.rtx_def* %11), !dbg !6879
  %12 = load i32, i32* %regno.addr, align 4, !dbg !6880
  %cmp13 = icmp eq i32 %call, %12, !dbg !6881
  br i1 %cmp13, label %if.then, label %if.else, !dbg !6882

if.then:                                          ; preds = %land.lhs.true8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !6883
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !6883
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !6883
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 1, !dbg !6883
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !6883
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !6883
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %note_link, align 8, !dbg !6885
  store %struct.rtx_def* %14, %struct.rtx_def** %15, align 8, !dbg !6886
  br label %return, !dbg !6887

if.else:                                          ; preds = %land.lhs.true8, %land.lhs.true, %for.body
  %16 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !6888
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6888
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !6888
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !6888
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !6888
  store %struct.rtx_def** %rt_rtx21, %struct.rtx_def*** %note_link, align 8, !dbg !6889
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %for.inc, !dbg !6880

for.inc:                                          ; preds = %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %this_rtx, align 8, !dbg !6890
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !6890
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !6890
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 1, !dbg !6890
  %rt_rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !6890
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx25, align 8, !dbg !6890
  store %struct.rtx_def* %18, %struct.rtx_def** %this_rtx, align 8, !dbg !6891
  br label %for.cond, !dbg !6892, !llvm.loop !6893

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 719, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6895
  br label %return, !dbg !6896

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !6896
}

; Function Attrs: noinline nounwind uwtable
define internal void @swap_to_top(%struct.rtx_def* %insn, %struct.stack_def* %regstack, %struct.rtx_def* %src1, %struct.rtx_def* %src2) #0 !dbg !6897 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %regstack.addr = alloca %struct.stack_def*, align 8
  %src1.addr = alloca %struct.rtx_def*, align 8
  %src2.addr = alloca %struct.rtx_def*, align 8
  %temp_stack = alloca %struct.stack_def, align 8
  %regno = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %temp = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6900, metadata !DIExpression()), !dbg !6901
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !6902, metadata !DIExpression()), !dbg !6903
  store %struct.rtx_def* %src1, %struct.rtx_def** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src1.addr, metadata !6904, metadata !DIExpression()), !dbg !6905
  store %struct.rtx_def* %src2, %struct.rtx_def** %src2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src2.addr, metadata !6906, metadata !DIExpression()), !dbg !6907
  call void @llvm.dbg.declare(metadata %struct.stack_def* %temp_stack, metadata !6908, metadata !DIExpression()), !dbg !6909
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !6910, metadata !DIExpression()), !dbg !6911
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6912, metadata !DIExpression()), !dbg !6913
  call void @llvm.dbg.declare(metadata i32* %k, metadata !6914, metadata !DIExpression()), !dbg !6915
  call void @llvm.dbg.declare(metadata i32* %temp, metadata !6916, metadata !DIExpression()), !dbg !6917
  %0 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6918
  %1 = bitcast %struct.stack_def* %temp_stack to i8*, !dbg !6919
  %2 = bitcast %struct.stack_def* %0 to i8*, !dbg !6919
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !6919
  %3 = load %struct.rtx_def*, %struct.rtx_def** %src1.addr, align 8, !dbg !6920
  %call = call i32 @get_hard_regnum(%struct.stack_def* %temp_stack, %struct.rtx_def* %3), !dbg !6921
  store i32 %call, i32* %regno, align 4, !dbg !6922
  %4 = load i32, i32* %regno, align 4, !dbg !6923
  %cmp = icmp sge i32 %4, 0, !dbg !6923
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6923

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 915, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6923
  br label %cond.end, !dbg !6923

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6923

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6923
  %5 = load i32, i32* %regno, align 4, !dbg !6924
  %cmp1 = icmp ne i32 %5, 8, !dbg !6926
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6927

if.then:                                          ; preds = %cond.end
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 0, !dbg !6928
  %6 = load i32, i32* %top, align 8, !dbg !6928
  %7 = load i32, i32* %regno, align 4, !dbg !6930
  %sub = sub nsw i32 %7, 8, !dbg !6931
  %sub2 = sub nsw i32 %6, %sub, !dbg !6932
  store i32 %sub2, i32* %k, align 4, !dbg !6933
  %top3 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 0, !dbg !6934
  %8 = load i32, i32* %top3, align 8, !dbg !6934
  store i32 %8, i32* %j, align 4, !dbg !6935
  %reg = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !6936
  %9 = load i32, i32* %k, align 4, !dbg !6937
  %idxprom = sext i32 %9 to i64, !dbg !6938
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %reg, i64 0, i64 %idxprom, !dbg !6938
  %10 = load i8, i8* %arrayidx, align 1, !dbg !6938
  %conv = zext i8 %10 to i32, !dbg !6938
  store i32 %conv, i32* %temp, align 4, !dbg !6939
  %reg4 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !6940
  %11 = load i32, i32* %j, align 4, !dbg !6941
  %idxprom5 = sext i32 %11 to i64, !dbg !6942
  %arrayidx6 = getelementptr inbounds [8 x i8], [8 x i8]* %reg4, i64 0, i64 %idxprom5, !dbg !6942
  %12 = load i8, i8* %arrayidx6, align 1, !dbg !6942
  %reg7 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !6943
  %13 = load i32, i32* %k, align 4, !dbg !6944
  %idxprom8 = sext i32 %13 to i64, !dbg !6945
  %arrayidx9 = getelementptr inbounds [8 x i8], [8 x i8]* %reg7, i64 0, i64 %idxprom8, !dbg !6945
  store i8 %12, i8* %arrayidx9, align 1, !dbg !6946
  %14 = load i32, i32* %temp, align 4, !dbg !6947
  %conv10 = trunc i32 %14 to i8, !dbg !6947
  %reg11 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !6948
  %15 = load i32, i32* %j, align 4, !dbg !6949
  %idxprom12 = sext i32 %15 to i64, !dbg !6950
  %arrayidx13 = getelementptr inbounds [8 x i8], [8 x i8]* %reg11, i64 0, i64 %idxprom12, !dbg !6950
  store i8 %conv10, i8* %arrayidx13, align 1, !dbg !6951
  br label %if.end, !dbg !6952

if.end:                                           ; preds = %if.then, %cond.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %src2.addr, align 8, !dbg !6953
  %call14 = call i32 @get_hard_regnum(%struct.stack_def* %temp_stack, %struct.rtx_def* %16), !dbg !6954
  store i32 %call14, i32* %regno, align 4, !dbg !6955
  %17 = load i32, i32* %regno, align 4, !dbg !6956
  %cmp15 = icmp sge i32 %17, 0, !dbg !6956
  br i1 %cmp15, label %cond.false18, label %cond.true17, !dbg !6956

cond.true17:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 928, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !6956
  br label %cond.end19, !dbg !6956

cond.false18:                                     ; preds = %if.end
  br label %cond.end19, !dbg !6956

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i32 [ 0, %cond.true17 ], [ 0, %cond.false18 ], !dbg !6956
  %18 = load i32, i32* %regno, align 4, !dbg !6957
  %cmp21 = icmp ne i32 %18, 9, !dbg !6959
  br i1 %cmp21, label %if.then23, label %if.end43, !dbg !6960

if.then23:                                        ; preds = %cond.end19
  %top24 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 0, !dbg !6961
  %19 = load i32, i32* %top24, align 8, !dbg !6961
  %20 = load i32, i32* %regno, align 4, !dbg !6963
  %sub25 = sub nsw i32 %20, 8, !dbg !6964
  %sub26 = sub nsw i32 %19, %sub25, !dbg !6965
  store i32 %sub26, i32* %k, align 4, !dbg !6966
  %top27 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 0, !dbg !6967
  %21 = load i32, i32* %top27, align 8, !dbg !6967
  %sub28 = sub nsw i32 %21, 1, !dbg !6968
  store i32 %sub28, i32* %j, align 4, !dbg !6969
  %reg29 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !6970
  %22 = load i32, i32* %k, align 4, !dbg !6971
  %idxprom30 = sext i32 %22 to i64, !dbg !6972
  %arrayidx31 = getelementptr inbounds [8 x i8], [8 x i8]* %reg29, i64 0, i64 %idxprom30, !dbg !6972
  %23 = load i8, i8* %arrayidx31, align 1, !dbg !6972
  %conv32 = zext i8 %23 to i32, !dbg !6972
  store i32 %conv32, i32* %temp, align 4, !dbg !6973
  %reg33 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !6974
  %24 = load i32, i32* %j, align 4, !dbg !6975
  %idxprom34 = sext i32 %24 to i64, !dbg !6976
  %arrayidx35 = getelementptr inbounds [8 x i8], [8 x i8]* %reg33, i64 0, i64 %idxprom34, !dbg !6976
  %25 = load i8, i8* %arrayidx35, align 1, !dbg !6976
  %reg36 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !6977
  %26 = load i32, i32* %k, align 4, !dbg !6978
  %idxprom37 = sext i32 %26 to i64, !dbg !6979
  %arrayidx38 = getelementptr inbounds [8 x i8], [8 x i8]* %reg36, i64 0, i64 %idxprom37, !dbg !6979
  store i8 %25, i8* %arrayidx38, align 1, !dbg !6980
  %27 = load i32, i32* %temp, align 4, !dbg !6981
  %conv39 = trunc i32 %27 to i8, !dbg !6981
  %reg40 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %temp_stack, i32 0, i32 2, !dbg !6982
  %28 = load i32, i32* %j, align 4, !dbg !6983
  %idxprom41 = sext i32 %28 to i64, !dbg !6984
  %arrayidx42 = getelementptr inbounds [8 x i8], [8 x i8]* %reg40, i64 0, i64 %idxprom41, !dbg !6984
  store i8 %conv39, i8* %arrayidx42, align 1, !dbg !6985
  br label %if.end43, !dbg !6986

if.end43:                                         ; preds = %if.then23, %cond.end19
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6987
  %30 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !6988
  call void @change_stack(%struct.rtx_def* %29, %struct.stack_def* %30, %struct.stack_def* %temp_stack, i32 1), !dbg !6989
  ret void, !dbg !6990
}

declare dso_local i32 @reversed_comparison_code(%struct.rtx_def*, %struct.rtx_def*) #3

declare dso_local zeroext i8 @control_flow_insn_p(%struct.rtx_def*) #3

declare dso_local %struct.rtx_def* @delete_insn(%struct.rtx_def*) #3

declare dso_local %struct.rtx_def* @gen_movxf(%struct.rtx_def*, %struct.rtx_def*) #3

declare dso_local void @add_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @swap_rtx_condition(%struct.rtx_def* %insn) #0 !dbg !6991 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %fail = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6992, metadata !DIExpression()), !dbg !6993
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !6994, metadata !DIExpression()), !dbg !6995
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6996
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6996
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6996
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6996
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6996
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6996
  store %struct.rtx_def* %1, %struct.rtx_def** %pat, align 8, !dbg !6995
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !6997
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6997
  %bf.load = load i32, i32* %3, align 8, !dbg !6997
  %bf.clear = and i32 %bf.load, 65535, !dbg !6997
  %cmp = icmp eq i32 %bf.clear, 23, !dbg !6999
  br i1 %cmp, label %land.lhs.true, label %if.end21, !dbg !7000

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7001
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7001
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7001
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !7001
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7001
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !7001
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !7001
  %bf.load5 = load i32, i32* %6, align 8, !dbg !7001
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !7001
  %cmp7 = icmp eq i32 %bf.clear6, 37, !dbg !7001
  br i1 %cmp7, label %land.lhs.true8, label %if.end21, !dbg !7002

land.lhs.true8:                                   ; preds = %land.lhs.true
  %7 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7003
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !7003
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !7003
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !7003
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !7003
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx12, align 8, !dbg !7003
  %call = call i32 @rhs_regno(%struct.rtx_def* %8), !dbg !7003
  %cmp13 = icmp eq i32 %call, 17, !dbg !7004
  br i1 %cmp13, label %if.then, label %if.end21, !dbg !7005

if.then:                                          ; preds = %land.lhs.true8
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7006
  %call14 = call %struct.rtx_def* @next_flags_user(%struct.rtx_def* %9), !dbg !7008
  store %struct.rtx_def* %call14, %struct.rtx_def** %insn.addr, align 8, !dbg !7009
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7010
  %cmp15 = icmp eq %struct.rtx_def* %10, null, !dbg !7012
  br i1 %cmp15, label %if.then16, label %if.end, !dbg !7013

if.then16:                                        ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !7014
  br label %return, !dbg !7014

if.end:                                           ; preds = %if.then
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7015
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !7015
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !7015
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 5, !dbg !7015
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !7015
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !7015
  store %struct.rtx_def* %12, %struct.rtx_def** %pat, align 8, !dbg !7016
  br label %if.end21, !dbg !7017

if.end21:                                         ; preds = %if.end, %land.lhs.true8, %land.lhs.true, %entry
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7018
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !7018
  %bf.load22 = load i32, i32* %14, align 8, !dbg !7018
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !7018
  %cmp24 = icmp eq i32 %bf.clear23, 23, !dbg !7020
  br i1 %cmp24, label %land.lhs.true25, label %if.end119, !dbg !7021

land.lhs.true25:                                  ; preds = %if.end21
  %15 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7022
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !7022
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !7022
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 1, !dbg !7022
  %rt_rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !7022
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx29, align 8, !dbg !7022
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !7022
  %bf.load30 = load i32, i32* %17, align 8, !dbg !7022
  %bf.clear31 = and i32 %bf.load30, 65535, !dbg !7022
  %cmp32 = icmp eq i32 %bf.clear31, 18, !dbg !7023
  br i1 %cmp32, label %land.lhs.true33, label %if.end119, !dbg !7024

land.lhs.true33:                                  ; preds = %land.lhs.true25
  %18 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7025
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !7025
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !7025
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 1, !dbg !7025
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !7025
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx37, align 8, !dbg !7025
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !7025
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !7025
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 1, !dbg !7025
  %rt_int = bitcast %union.rtunion_def* %arrayidx40 to i32*, !dbg !7025
  %20 = load i32, i32* %rt_int, align 8, !dbg !7025
  %cmp41 = icmp eq i32 %20, 31, !dbg !7026
  br i1 %cmp41, label %if.then42, label %if.end119, !dbg !7027

if.then42:                                        ; preds = %land.lhs.true33
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !7028, metadata !DIExpression()), !dbg !7030
  %21 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7031
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !7031
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !7031
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 0, !dbg !7031
  %rt_rtx46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.rtx_def**, !dbg !7031
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx46, align 8, !dbg !7031
  store %struct.rtx_def* %22, %struct.rtx_def** %dest, align 8, !dbg !7030
  br label %while.cond, !dbg !7032

while.cond:                                       ; preds = %if.end74, %if.then42
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7033
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !7034
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 7, !dbg !7034
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7034
  %25 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7034
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %25, i32 0, i32 1, !dbg !7034
  %26 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7034
  %cmp47 = icmp ne %struct.rtx_def* %23, %26, !dbg !7035
  br i1 %cmp47, label %while.body, label %while.end, !dbg !7032

while.body:                                       ; preds = %while.cond
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7036
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !7036
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !7036
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 2, !dbg !7036
  %rt_rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**, !dbg !7036
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx51, align 8, !dbg !7036
  store %struct.rtx_def* %28, %struct.rtx_def** %insn.addr, align 8, !dbg !7038
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7039
  %30 = bitcast %struct.rtx_def* %29 to i32*, !dbg !7039
  %bf.load52 = load i32, i32* %30, align 8, !dbg !7039
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !7039
  %cmp54 = icmp eq i32 %bf.clear53, 8, !dbg !7039
  br i1 %cmp54, label %land.lhs.true66, label %lor.lhs.false, !dbg !7039

lor.lhs.false:                                    ; preds = %while.body
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7039
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !7039
  %bf.load55 = load i32, i32* %32, align 8, !dbg !7039
  %bf.clear56 = and i32 %bf.load55, 65535, !dbg !7039
  %cmp57 = icmp eq i32 %bf.clear56, 7, !dbg !7039
  br i1 %cmp57, label %land.lhs.true66, label %lor.lhs.false58, !dbg !7039

lor.lhs.false58:                                  ; preds = %lor.lhs.false
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7039
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !7039
  %bf.load59 = load i32, i32* %34, align 8, !dbg !7039
  %bf.clear60 = and i32 %bf.load59, 65535, !dbg !7039
  %cmp61 = icmp eq i32 %bf.clear60, 9, !dbg !7039
  br i1 %cmp61, label %land.lhs.true66, label %lor.lhs.false62, !dbg !7039

lor.lhs.false62:                                  ; preds = %lor.lhs.false58
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7039
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !7039
  %bf.load63 = load i32, i32* %36, align 8, !dbg !7039
  %bf.clear64 = and i32 %bf.load63, 65535, !dbg !7039
  %cmp65 = icmp eq i32 %bf.clear64, 10, !dbg !7039
  br i1 %cmp65, label %land.lhs.true66, label %if.end69, !dbg !7041

land.lhs.true66:                                  ; preds = %lor.lhs.false62, %lor.lhs.false58, %lor.lhs.false, %while.body
  %37 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !7042
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7043
  %call67 = call i32 @reg_mentioned_p(%struct.rtx_def* %37, %struct.rtx_def* %38), !dbg !7044
  %tobool = icmp ne i32 %call67, 0, !dbg !7044
  br i1 %tobool, label %if.then68, label %if.end69, !dbg !7045

if.then68:                                        ; preds = %land.lhs.true66
  br label %while.end, !dbg !7046

if.end69:                                         ; preds = %land.lhs.true66, %lor.lhs.false62
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7047
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !7047
  %bf.load70 = load i32, i32* %40, align 8, !dbg !7047
  %bf.clear71 = and i32 %bf.load70, 65535, !dbg !7047
  %cmp72 = icmp eq i32 %bf.clear71, 10, !dbg !7047
  br i1 %cmp72, label %if.then73, label %if.end74, !dbg !7049

if.then73:                                        ; preds = %if.end69
  store i32 0, i32* %retval, align 4, !dbg !7050
  br label %return, !dbg !7050

if.end74:                                         ; preds = %if.end69
  br label %while.cond, !dbg !7032, !llvm.loop !7051

while.end:                                        ; preds = %if.then68, %while.cond
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7053
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !7055
  %il75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 7, !dbg !7055
  %rtl76 = bitcast %union.basic_block_il_dependent* %il75 to %struct.rtl_bb_info**, !dbg !7055
  %43 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl76, align 8, !dbg !7055
  %end_77 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %43, i32 0, i32 1, !dbg !7055
  %44 = load %struct.rtx_def*, %struct.rtx_def** %end_77, align 8, !dbg !7055
  %cmp78 = icmp eq %struct.rtx_def* %41, %44, !dbg !7056
  br i1 %cmp78, label %if.then79, label %if.end80, !dbg !7057

if.then79:                                        ; preds = %while.end
  store i32 0, i32* %retval, align 4, !dbg !7058
  br label %return, !dbg !7058

if.end80:                                         ; preds = %while.end
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7059
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !7059
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !7059
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 5, !dbg !7059
  %rt_rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**, !dbg !7059
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx84, align 8, !dbg !7059
  store %struct.rtx_def* %46, %struct.rtx_def** %pat, align 8, !dbg !7060
  %47 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7061
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !7061
  %bf.load85 = load i32, i32* %48, align 8, !dbg !7061
  %bf.clear86 = and i32 %bf.load85, 65535, !dbg !7061
  %cmp87 = icmp ne i32 %bf.clear86, 23, !dbg !7063
  br i1 %cmp87, label %if.then109, label %lor.lhs.false88, !dbg !7064

lor.lhs.false88:                                  ; preds = %if.end80
  %49 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7065
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !7065
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !7065
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 1, !dbg !7065
  %rt_rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**, !dbg !7065
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx92, align 8, !dbg !7065
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !7065
  %bf.load93 = load i32, i32* %51, align 8, !dbg !7065
  %bf.clear94 = and i32 %bf.load93, 65535, !dbg !7065
  %cmp95 = icmp ne i32 %bf.clear94, 18, !dbg !7066
  br i1 %cmp95, label %if.then109, label %lor.lhs.false96, !dbg !7067

lor.lhs.false96:                                  ; preds = %lor.lhs.false88
  %52 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7068
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !7068
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !7068
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 1, !dbg !7068
  %rt_rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**, !dbg !7068
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx100, align 8, !dbg !7068
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !7068
  %fld102 = bitcast %union.u* %u101 to [1 x %union.rtunion_def]*, !dbg !7068
  %arrayidx103 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld102, i64 0, i64 1, !dbg !7068
  %rt_int104 = bitcast %union.rtunion_def* %arrayidx103 to i32*, !dbg !7068
  %54 = load i32, i32* %rt_int104, align 8, !dbg !7068
  %cmp105 = icmp ne i32 %54, 32, !dbg !7069
  br i1 %cmp105, label %if.then109, label %lor.lhs.false106, !dbg !7070

lor.lhs.false106:                                 ; preds = %lor.lhs.false96
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7071
  %56 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !7072
  %call107 = call i32 @dead_or_set_p(%struct.rtx_def* %55, %struct.rtx_def* %56), !dbg !7073
  %tobool108 = icmp ne i32 %call107, 0, !dbg !7073
  br i1 %tobool108, label %if.end110, label %if.then109, !dbg !7074

if.then109:                                       ; preds = %lor.lhs.false106, %lor.lhs.false96, %lor.lhs.false88, %if.end80
  store i32 0, i32* %retval, align 4, !dbg !7075
  br label %return, !dbg !7075

if.end110:                                        ; preds = %lor.lhs.false106
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7076
  %call111 = call %struct.rtx_def* @next_flags_user(%struct.rtx_def* %57), !dbg !7077
  store %struct.rtx_def* %call111, %struct.rtx_def** %insn.addr, align 8, !dbg !7078
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7079
  %cmp112 = icmp eq %struct.rtx_def* %58, null, !dbg !7081
  br i1 %cmp112, label %if.then113, label %if.end114, !dbg !7082

if.then113:                                       ; preds = %if.end110
  store i32 0, i32* %retval, align 4, !dbg !7083
  br label %return, !dbg !7083

if.end114:                                        ; preds = %if.end110
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7084
  %u115 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !7084
  %fld116 = bitcast %union.u* %u115 to [1 x %union.rtunion_def]*, !dbg !7084
  %arrayidx117 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld116, i64 0, i64 5, !dbg !7084
  %rt_rtx118 = bitcast %union.rtunion_def* %arrayidx117 to %struct.rtx_def**, !dbg !7084
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx118, align 8, !dbg !7084
  store %struct.rtx_def* %60, %struct.rtx_def** %pat, align 8, !dbg !7085
  br label %if.end119, !dbg !7086

if.end119:                                        ; preds = %if.end114, %land.lhs.true33, %land.lhs.true25, %if.end21
  %61 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7087
  %call120 = call i32 @swap_rtx_condition_1(%struct.rtx_def* %61), !dbg !7089
  %tobool121 = icmp ne i32 %call120, 0, !dbg !7089
  br i1 %tobool121, label %if.then122, label %if.end146, !dbg !7090

if.then122:                                       ; preds = %if.end119
  call void @llvm.dbg.declare(metadata i32* %fail, metadata !7091, metadata !DIExpression()), !dbg !7093
  store i32 0, i32* %fail, align 4, !dbg !7093
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7094
  %u123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !7094
  %fld124 = bitcast %union.u* %u123 to [1 x %union.rtunion_def]*, !dbg !7094
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld124, i64 0, i64 6, !dbg !7094
  %rt_int126 = bitcast %union.rtunion_def* %arrayidx125 to i32*, !dbg !7094
  store i32 -1, i32* %rt_int126, align 8, !dbg !7095
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7096
  %call127 = call i32 @recog_memoized(%struct.rtx_def* %63), !dbg !7098
  %cmp128 = icmp eq i32 %call127, -1, !dbg !7099
  br i1 %cmp128, label %if.then129, label %if.else, !dbg !7100

if.then129:                                       ; preds = %if.then122
  store i32 1, i32* %fail, align 4, !dbg !7101
  br label %if.end141, !dbg !7102

if.else:                                          ; preds = %if.then122
  %64 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7103
  %65 = load %struct.rtx_def*, %struct.rtx_def** @ix86_flags_rtx, align 8, !dbg !7105
  %call130 = call i32 @dead_or_set_p(%struct.rtx_def* %64, %struct.rtx_def* %65), !dbg !7106
  %tobool131 = icmp ne i32 %call130, 0, !dbg !7106
  br i1 %tobool131, label %if.end140, label %if.then132, !dbg !7107

if.then132:                                       ; preds = %if.else
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7108
  %call133 = call %struct.rtx_def* @next_flags_user(%struct.rtx_def* %66), !dbg !7110
  store %struct.rtx_def* %call133, %struct.rtx_def** %insn.addr, align 8, !dbg !7111
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7112
  %tobool134 = icmp ne %struct.rtx_def* %67, null, !dbg !7112
  br i1 %tobool134, label %lor.lhs.false135, label %if.then138, !dbg !7114

lor.lhs.false135:                                 ; preds = %if.then132
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7115
  %call136 = call i32 @swap_rtx_condition(%struct.rtx_def* %68), !dbg !7116
  %tobool137 = icmp ne i32 %call136, 0, !dbg !7116
  br i1 %tobool137, label %if.end139, label %if.then138, !dbg !7117

if.then138:                                       ; preds = %lor.lhs.false135, %if.then132
  store i32 1, i32* %fail, align 4, !dbg !7118
  br label %if.end139, !dbg !7119

if.end139:                                        ; preds = %if.then138, %lor.lhs.false135
  br label %if.end140, !dbg !7120

if.end140:                                        ; preds = %if.end139, %if.else
  br label %if.end141

if.end141:                                        ; preds = %if.end140, %if.then129
  %69 = load i32, i32* %fail, align 4, !dbg !7121
  %tobool142 = icmp ne i32 %69, 0, !dbg !7121
  br i1 %tobool142, label %if.then143, label %if.end145, !dbg !7123

if.then143:                                       ; preds = %if.end141
  %70 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7124
  %call144 = call i32 @swap_rtx_condition_1(%struct.rtx_def* %70), !dbg !7126
  store i32 0, i32* %retval, align 4, !dbg !7127
  br label %return, !dbg !7127

if.end145:                                        ; preds = %if.end141
  store i32 1, i32* %retval, align 4, !dbg !7128
  br label %return, !dbg !7128

if.end146:                                        ; preds = %if.end119
  store i32 0, i32* %retval, align 4, !dbg !7129
  br label %return, !dbg !7129

return:                                           ; preds = %if.end146, %if.end145, %if.then143, %if.then113, %if.then109, %if.then79, %if.then73, %if.then16
  %71 = load i32, i32* %retval, align 4, !dbg !7130
  ret i32 %71, !dbg !7130
}

; Function Attrs: noinline nounwind uwtable
define internal void @pop_stack(%struct.stack_def* %regstack, i32 %regno) #0 !dbg !7131 {
entry:
  %regstack.addr = alloca %struct.stack_def*, align 8
  %regno.addr = alloca i32, align 4
  %top = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.stack_def* %regstack, %struct.stack_def** %regstack.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_def** %regstack.addr, metadata !7134, metadata !DIExpression()), !dbg !7135
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !7136, metadata !DIExpression()), !dbg !7137
  call void @llvm.dbg.declare(metadata i32* %top, metadata !7138, metadata !DIExpression()), !dbg !7139
  %0 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !7140
  %top1 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %0, i32 0, i32 0, !dbg !7141
  %1 = load i32, i32* %top1, align 8, !dbg !7141
  store i32 %1, i32* %top, align 4, !dbg !7139
  %2 = load i32, i32* %regno.addr, align 4, !dbg !7142
  %sh_prom = zext i32 %2 to i64, !dbg !7142
  %shl = shl i64 1, %sh_prom, !dbg !7142
  %neg = xor i64 %shl, -1, !dbg !7142
  %3 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !7142
  %reg_set = getelementptr inbounds %struct.stack_def, %struct.stack_def* %3, i32 0, i32 1, !dbg !7142
  %4 = load i64, i64* %reg_set, align 8, !dbg !7142
  %and = and i64 %4, %neg, !dbg !7142
  store i64 %and, i64* %reg_set, align 8, !dbg !7142
  %5 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !7143
  %top2 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %5, i32 0, i32 0, !dbg !7144
  %6 = load i32, i32* %top2, align 8, !dbg !7145
  %dec = add nsw i32 %6, -1, !dbg !7145
  store i32 %dec, i32* %top2, align 8, !dbg !7145
  %7 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !7146
  %reg = getelementptr inbounds %struct.stack_def, %struct.stack_def* %7, i32 0, i32 2, !dbg !7148
  %8 = load i32, i32* %top, align 4, !dbg !7149
  %idxprom = sext i32 %8 to i64, !dbg !7146
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %reg, i64 0, i64 %idxprom, !dbg !7146
  %9 = load i8, i8* %arrayidx, align 1, !dbg !7146
  %conv = zext i8 %9 to i32, !dbg !7146
  %10 = load i32, i32* %regno.addr, align 4, !dbg !7150
  %cmp = icmp ne i32 %conv, %10, !dbg !7151
  br i1 %cmp, label %if.then, label %if.end27, !dbg !7152

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7153, metadata !DIExpression()), !dbg !7155
  %11 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !7156
  %top4 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %11, i32 0, i32 0, !dbg !7158
  %12 = load i32, i32* %top4, align 8, !dbg !7158
  store i32 %12, i32* %i, align 4, !dbg !7159
  br label %for.cond, !dbg !7160

for.cond:                                         ; preds = %for.inc24, %if.then
  %13 = load i32, i32* %i, align 4, !dbg !7161
  %cmp5 = icmp sge i32 %13, 0, !dbg !7163
  br i1 %cmp5, label %for.body, label %for.end26, !dbg !7164

for.body:                                         ; preds = %for.cond
  %14 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !7165
  %reg7 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %14, i32 0, i32 2, !dbg !7167
  %15 = load i32, i32* %i, align 4, !dbg !7168
  %idxprom8 = sext i32 %15 to i64, !dbg !7165
  %arrayidx9 = getelementptr inbounds [8 x i8], [8 x i8]* %reg7, i64 0, i64 %idxprom8, !dbg !7165
  %16 = load i8, i8* %arrayidx9, align 1, !dbg !7165
  %conv10 = zext i8 %16 to i32, !dbg !7165
  %17 = load i32, i32* %regno.addr, align 4, !dbg !7169
  %cmp11 = icmp eq i32 %conv10, %17, !dbg !7170
  br i1 %cmp11, label %if.then13, label %if.end, !dbg !7171

if.then13:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7172, metadata !DIExpression()), !dbg !7174
  %18 = load i32, i32* %i, align 4, !dbg !7175
  store i32 %18, i32* %j, align 4, !dbg !7177
  br label %for.cond14, !dbg !7178

for.cond14:                                       ; preds = %for.inc, %if.then13
  %19 = load i32, i32* %j, align 4, !dbg !7179
  %20 = load i32, i32* %top, align 4, !dbg !7181
  %cmp15 = icmp slt i32 %19, %20, !dbg !7182
  br i1 %cmp15, label %for.body17, label %for.end, !dbg !7183

for.body17:                                       ; preds = %for.cond14
  %21 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !7184
  %reg18 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %21, i32 0, i32 2, !dbg !7185
  %22 = load i32, i32* %j, align 4, !dbg !7186
  %add = add nsw i32 %22, 1, !dbg !7187
  %idxprom19 = sext i32 %add to i64, !dbg !7184
  %arrayidx20 = getelementptr inbounds [8 x i8], [8 x i8]* %reg18, i64 0, i64 %idxprom19, !dbg !7184
  %23 = load i8, i8* %arrayidx20, align 1, !dbg !7184
  %24 = load %struct.stack_def*, %struct.stack_def** %regstack.addr, align 8, !dbg !7188
  %reg21 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %24, i32 0, i32 2, !dbg !7189
  %25 = load i32, i32* %j, align 4, !dbg !7190
  %idxprom22 = sext i32 %25 to i64, !dbg !7188
  %arrayidx23 = getelementptr inbounds [8 x i8], [8 x i8]* %reg21, i64 0, i64 %idxprom22, !dbg !7188
  store i8 %23, i8* %arrayidx23, align 1, !dbg !7191
  br label %for.inc, !dbg !7188

for.inc:                                          ; preds = %for.body17
  %26 = load i32, i32* %j, align 4, !dbg !7192
  %inc = add nsw i32 %26, 1, !dbg !7192
  store i32 %inc, i32* %j, align 4, !dbg !7192
  br label %for.cond14, !dbg !7193, !llvm.loop !7194

for.end:                                          ; preds = %for.cond14
  br label %for.end26, !dbg !7196

if.end:                                           ; preds = %for.body
  br label %for.inc24, !dbg !7169

for.inc24:                                        ; preds = %if.end
  %27 = load i32, i32* %i, align 4, !dbg !7197
  %dec25 = add nsw i32 %27, -1, !dbg !7197
  store i32 %dec25, i32* %i, align 4, !dbg !7197
  br label %for.cond, !dbg !7198, !llvm.loop !7199

for.end26:                                        ; preds = %for.end, %for.cond
  br label %if.end27, !dbg !7201

if.end27:                                         ; preds = %for.end26, %entry
  ret void, !dbg !7202
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @next_flags_user(%struct.rtx_def* %insn) #0 !dbg !7203 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7206, metadata !DIExpression()), !dbg !7207
  br label %while.cond, !dbg !7208

while.cond:                                       ; preds = %if.end21, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7209
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** @current_block, align 8, !dbg !7210
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 7, !dbg !7210
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7210
  %2 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7210
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %2, i32 0, i32 1, !dbg !7210
  %3 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7210
  %cmp = icmp ne %struct.rtx_def* %0, %3, !dbg !7211
  br i1 %cmp, label %while.body, label %while.end, !dbg !7208

while.body:                                       ; preds = %while.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7212
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7212
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7212
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !7212
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7212
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7212
  store %struct.rtx_def* %5, %struct.rtx_def** %insn.addr, align 8, !dbg !7214
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7215
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !7215
  %bf.load = load i32, i32* %7, align 8, !dbg !7215
  %bf.clear = and i32 %bf.load, 65535, !dbg !7215
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !7215
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false, !dbg !7215

lor.lhs.false:                                    ; preds = %while.body
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7215
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !7215
  %bf.load2 = load i32, i32* %9, align 8, !dbg !7215
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !7215
  %cmp4 = icmp eq i32 %bf.clear3, 7, !dbg !7215
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false5, !dbg !7215

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7215
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !7215
  %bf.load6 = load i32, i32* %11, align 8, !dbg !7215
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !7215
  %cmp8 = icmp eq i32 %bf.clear7, 9, !dbg !7215
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false9, !dbg !7215

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7215
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !7215
  %bf.load10 = load i32, i32* %13, align 8, !dbg !7215
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !7215
  %cmp12 = icmp eq i32 %bf.clear11, 10, !dbg !7215
  br i1 %cmp12, label %land.lhs.true, label %if.end, !dbg !7217

land.lhs.true:                                    ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %while.body
  %14 = load %struct.rtx_def*, %struct.rtx_def** @ix86_flags_rtx, align 8, !dbg !7218
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7219
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !7219
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !7219
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 5, !dbg !7219
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !7219
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !7219
  %call = call i32 @reg_mentioned_p(%struct.rtx_def* %14, %struct.rtx_def* %16), !dbg !7220
  %tobool = icmp ne i32 %call, 0, !dbg !7220
  br i1 %tobool, label %if.then, label %if.end, !dbg !7221

if.then:                                          ; preds = %land.lhs.true
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7222
  store %struct.rtx_def* %17, %struct.rtx_def** %retval, align 8, !dbg !7223
  br label %return, !dbg !7223

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false9
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7224
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !7224
  %bf.load17 = load i32, i32* %19, align 8, !dbg !7224
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !7224
  %cmp19 = icmp eq i32 %bf.clear18, 10, !dbg !7224
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !7226

if.then20:                                        ; preds = %if.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7227
  br label %return, !dbg !7227

if.end21:                                         ; preds = %if.end
  br label %while.cond, !dbg !7208, !llvm.loop !7228

while.end:                                        ; preds = %while.cond
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7230
  br label %return, !dbg !7230

return:                                           ; preds = %while.end, %if.then20, %if.then
  %20 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !7231
  ret %struct.rtx_def* %20, !dbg !7231
}

declare dso_local i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #3

declare dso_local i32 @dead_or_set_p(%struct.rtx_def*, %struct.rtx_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @swap_rtx_condition_1(%struct.rtx_def* %pat) #0 !dbg !7232 {
entry:
  %pat.addr = alloca %struct.rtx_def*, align 8
  %fmt = alloca i8*, align 8
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.rtx_def* %pat, %struct.rtx_def** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat.addr, metadata !7233, metadata !DIExpression()), !dbg !7234
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !7235, metadata !DIExpression()), !dbg !7236
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7237, metadata !DIExpression()), !dbg !7238
  call void @llvm.dbg.declare(metadata i32* %r, metadata !7239, metadata !DIExpression()), !dbg !7240
  store i32 0, i32* %r, align 4, !dbg !7240
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !7241
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7241
  %bf.load = load i32, i32* %1, align 8, !dbg !7241
  %bf.clear = and i32 %bf.load, 65535, !dbg !7241
  %idxprom = sext i32 %bf.clear to i64, !dbg !7241
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !7241
  %2 = load i32, i32* %arrayidx, align 4, !dbg !7241
  %and = and i32 %2, -2, !dbg !7241
  %cmp = icmp eq i32 %and, 0, !dbg !7241
  br i1 %cmp, label %if.then, label %if.else, !dbg !7243

if.then:                                          ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !7244
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !7244
  %bf.load1 = load i32, i32* %4, align 8, !dbg !7244
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !7244
  %call = call i32 @swap_condition(i32 %bf.clear2), !dbg !7244
  %5 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !7244
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !7244
  %bf.load3 = load i32, i32* %6, align 8, !dbg !7244
  %bf.value = and i32 %call, 65535, !dbg !7244
  %bf.clear4 = and i32 %bf.load3, -65536, !dbg !7244
  %bf.set = or i32 %bf.clear4, %bf.value, !dbg !7244
  store i32 %bf.set, i32* %6, align 8, !dbg !7244
  store i32 1, i32* %r, align 4, !dbg !7246
  br label %if.end53, !dbg !7247

if.else:                                          ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !7248
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !7248
  %bf.load5 = load i32, i32* %8, align 8, !dbg !7248
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !7248
  %idxprom7 = sext i32 %bf.clear6 to i64, !dbg !7248
  %arrayidx8 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom7, !dbg !7248
  %9 = load i8*, i8** %arrayidx8, align 8, !dbg !7248
  store i8* %9, i8** %fmt, align 8, !dbg !7250
  %10 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !7251
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !7251
  %bf.load9 = load i32, i32* %11, align 8, !dbg !7251
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !7251
  %idxprom11 = sext i32 %bf.clear10 to i64, !dbg !7251
  %arrayidx12 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom11, !dbg !7251
  %12 = load i8, i8* %arrayidx12, align 1, !dbg !7251
  %conv = zext i8 %12 to i32, !dbg !7251
  %sub = sub nsw i32 %conv, 1, !dbg !7253
  store i32 %sub, i32* %i, align 4, !dbg !7254
  br label %for.cond, !dbg !7255

for.cond:                                         ; preds = %for.inc50, %if.else
  %13 = load i32, i32* %i, align 4, !dbg !7256
  %cmp13 = icmp sge i32 %13, 0, !dbg !7258
  br i1 %cmp13, label %for.body, label %for.end52, !dbg !7259

for.body:                                         ; preds = %for.cond
  %14 = load i8*, i8** %fmt, align 8, !dbg !7260
  %15 = load i32, i32* %i, align 4, !dbg !7263
  %idxprom15 = sext i32 %15 to i64, !dbg !7260
  %arrayidx16 = getelementptr inbounds i8, i8* %14, i64 %idxprom15, !dbg !7260
  %16 = load i8, i8* %arrayidx16, align 1, !dbg !7260
  %conv17 = sext i8 %16 to i32, !dbg !7260
  %cmp18 = icmp eq i32 %conv17, 69, !dbg !7264
  br i1 %cmp18, label %if.then20, label %if.else36, !dbg !7265

if.then20:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7266, metadata !DIExpression()), !dbg !7268
  %17 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !7269
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7269
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7269
  %18 = load i32, i32* %i, align 4, !dbg !7269
  %idxprom21 = sext i32 %18 to i64, !dbg !7269
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 %idxprom21, !dbg !7269
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtvec_def**, !dbg !7269
  %19 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !7269
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %19, i32 0, i32 0, !dbg !7269
  %20 = load i32, i32* %num_elem, align 8, !dbg !7269
  %sub23 = sub nsw i32 %20, 1, !dbg !7271
  store i32 %sub23, i32* %j, align 4, !dbg !7272
  br label %for.cond24, !dbg !7273

for.cond24:                                       ; preds = %for.inc, %if.then20
  %21 = load i32, i32* %j, align 4, !dbg !7274
  %cmp25 = icmp sge i32 %21, 0, !dbg !7276
  br i1 %cmp25, label %for.body27, label %for.end, !dbg !7277

for.body27:                                       ; preds = %for.cond24
  %22 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !7278
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !7278
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !7278
  %23 = load i32, i32* %i, align 4, !dbg !7278
  %idxprom30 = sext i32 %23 to i64, !dbg !7278
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 %idxprom30, !dbg !7278
  %rt_rtvec32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtvec_def**, !dbg !7278
  %24 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec32, align 8, !dbg !7278
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %24, i32 0, i32 1, !dbg !7278
  %25 = load i32, i32* %j, align 4, !dbg !7278
  %idxprom33 = sext i32 %25 to i64, !dbg !7278
  %arrayidx34 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom33, !dbg !7278
  %26 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx34, align 8, !dbg !7278
  %call35 = call i32 @swap_rtx_condition_1(%struct.rtx_def* %26), !dbg !7279
  %27 = load i32, i32* %r, align 4, !dbg !7280
  %or = or i32 %27, %call35, !dbg !7280
  store i32 %or, i32* %r, align 4, !dbg !7280
  br label %for.inc, !dbg !7281

for.inc:                                          ; preds = %for.body27
  %28 = load i32, i32* %j, align 4, !dbg !7282
  %dec = add nsw i32 %28, -1, !dbg !7282
  store i32 %dec, i32* %j, align 4, !dbg !7282
  br label %for.cond24, !dbg !7283, !llvm.loop !7284

for.end:                                          ; preds = %for.cond24
  br label %if.end49, !dbg !7286

if.else36:                                        ; preds = %for.body
  %29 = load i8*, i8** %fmt, align 8, !dbg !7287
  %30 = load i32, i32* %i, align 4, !dbg !7289
  %idxprom37 = sext i32 %30 to i64, !dbg !7287
  %arrayidx38 = getelementptr inbounds i8, i8* %29, i64 %idxprom37, !dbg !7287
  %31 = load i8, i8* %arrayidx38, align 1, !dbg !7287
  %conv39 = sext i8 %31 to i32, !dbg !7287
  %cmp40 = icmp eq i32 %conv39, 101, !dbg !7290
  br i1 %cmp40, label %if.then42, label %if.end, !dbg !7291

if.then42:                                        ; preds = %if.else36
  %32 = load %struct.rtx_def*, %struct.rtx_def** %pat.addr, align 8, !dbg !7292
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !7292
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !7292
  %33 = load i32, i32* %i, align 4, !dbg !7292
  %idxprom45 = sext i32 %33 to i64, !dbg !7292
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 %idxprom45, !dbg !7292
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !7292
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7292
  %call47 = call i32 @swap_rtx_condition_1(%struct.rtx_def* %34), !dbg !7293
  %35 = load i32, i32* %r, align 4, !dbg !7294
  %or48 = or i32 %35, %call47, !dbg !7294
  store i32 %or48, i32* %r, align 4, !dbg !7294
  br label %if.end, !dbg !7295

if.end:                                           ; preds = %if.then42, %if.else36
  br label %if.end49

if.end49:                                         ; preds = %if.end, %for.end
  br label %for.inc50, !dbg !7296

for.inc50:                                        ; preds = %if.end49
  %36 = load i32, i32* %i, align 4, !dbg !7297
  %dec51 = add nsw i32 %36, -1, !dbg !7297
  store i32 %dec51, i32* %i, align 4, !dbg !7297
  br label %for.cond, !dbg !7298, !llvm.loop !7299

for.end52:                                        ; preds = %for.cond
  br label %if.end53

if.end53:                                         ; preds = %for.end52, %if.then
  %37 = load i32, i32* %r, align 4, !dbg !7301
  ret i32 %37, !dbg !7302
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @recog_memoized(%struct.rtx_def* %insn) #0 !dbg !7303 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7305, metadata !DIExpression()), !dbg !7306
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7307
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7307
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7307
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 6, !dbg !7307
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7307
  %1 = load i32, i32* %rt_int, align 8, !dbg !7307
  %cmp = icmp slt i32 %1, 0, !dbg !7309
  br i1 %cmp, label %if.then, label %if.end, !dbg !7310

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7311
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !7311
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !7311
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !7311
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !7311
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7311
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7312
  %call = call i32 @recog(%struct.rtx_def* %3, %struct.rtx_def* %4, i32* null), !dbg !7313
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7314
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7314
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !7314
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 6, !dbg !7314
  %rt_int7 = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !7314
  store i32 %call, i32* %rt_int7, align 8, !dbg !7315
  br label %if.end, !dbg !7314

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7316
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7316
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !7316
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 6, !dbg !7316
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !7316
  %7 = load i32, i32* %rt_int11, align 8, !dbg !7316
  ret i32 %7, !dbg !7317
}

declare dso_local i32 @swap_condition(i32) #3

declare dso_local i32 @recog(%struct.rtx_def*, %struct.rtx_def*, i32*) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @compensate_edge(%struct.edge_def* %e) #0 !dbg !7318 {
entry:
  %retval = alloca i8, align 1
  %e.addr = alloca %struct.edge_def*, align 8
  %source = alloca %struct.basic_block_def*, align 8
  %target = alloca %struct.basic_block_def*, align 8
  %target_stack = alloca %struct.stack_def*, align 8
  %source_stack = alloca %struct.stack_def*, align 8
  %regstack = alloca %struct.stack_def, align 8
  %reg = alloca i32, align 4
  %seq = alloca %struct.rtx_def*, align 8
  %after = alloca %struct.rtx_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !7321, metadata !DIExpression()), !dbg !7322
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %source, metadata !7323, metadata !DIExpression()), !dbg !7324
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7325
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !7326
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7326
  store %struct.basic_block_def* %1, %struct.basic_block_def** %source, align 8, !dbg !7324
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target, metadata !7327, metadata !DIExpression()), !dbg !7328
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7329
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !7330
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7330
  store %struct.basic_block_def* %3, %struct.basic_block_def** %target, align 8, !dbg !7328
  call void @llvm.dbg.declare(metadata %struct.stack_def** %target_stack, metadata !7331, metadata !DIExpression()), !dbg !7332
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !7333
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 2, !dbg !7333
  %5 = load i8*, i8** %aux, align 8, !dbg !7333
  %6 = bitcast i8* %5 to %struct.block_info_def*, !dbg !7333
  %stack_in = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %6, i32 0, i32 0, !dbg !7334
  store %struct.stack_def* %stack_in, %struct.stack_def** %target_stack, align 8, !dbg !7332
  call void @llvm.dbg.declare(metadata %struct.stack_def** %source_stack, metadata !7335, metadata !DIExpression()), !dbg !7336
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %source, align 8, !dbg !7337
  %aux1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 2, !dbg !7337
  %8 = load i8*, i8** %aux1, align 8, !dbg !7337
  %9 = bitcast i8* %8 to %struct.block_info_def*, !dbg !7337
  %stack_out = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %9, i32 0, i32 1, !dbg !7338
  store %struct.stack_def* %stack_out, %struct.stack_def** %source_stack, align 8, !dbg !7336
  call void @llvm.dbg.declare(metadata %struct.stack_def* %regstack, metadata !7339, metadata !DIExpression()), !dbg !7340
  call void @llvm.dbg.declare(metadata i32* %reg, metadata !7341, metadata !DIExpression()), !dbg !7342
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7343
  %tobool = icmp ne %struct._IO_FILE* %10, null, !dbg !7343
  br i1 %tobool, label %if.then, label %if.end, !dbg !7345

if.then:                                          ; preds = %entry
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7346
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %source, align 8, !dbg !7347
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !7348
  %13 = load i32, i32* %index, align 8, !dbg !7348
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %target, align 8, !dbg !7349
  %index2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !7350
  %15 = load i32, i32* %index2, align 8, !dbg !7350
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0), i32 %13, i32 %15), !dbg !7351
  br label %if.end, !dbg !7351

if.end:                                           ; preds = %if.then, %entry
  %16 = load %struct.stack_def*, %struct.stack_def** %target_stack, align 8, !dbg !7352
  %top = getelementptr inbounds %struct.stack_def, %struct.stack_def* %16, i32 0, i32 0, !dbg !7352
  %17 = load i32, i32* %top, align 8, !dbg !7352
  %cmp = icmp ne i32 %17, -2, !dbg !7352
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7352

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2741, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7352
  br label %cond.end, !dbg !7352

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7352

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7352
  %18 = load %struct.stack_def*, %struct.stack_def** %target_stack, align 8, !dbg !7353
  %top3 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %18, i32 0, i32 0, !dbg !7355
  %19 = load i32, i32* %top3, align 8, !dbg !7355
  %20 = load %struct.stack_def*, %struct.stack_def** %source_stack, align 8, !dbg !7356
  %top4 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %20, i32 0, i32 0, !dbg !7357
  %21 = load i32, i32* %top4, align 8, !dbg !7357
  %cmp5 = icmp eq i32 %19, %21, !dbg !7358
  br i1 %cmp5, label %if.then6, label %if.end26, !dbg !7359

if.then6:                                         ; preds = %cond.end
  %22 = load %struct.stack_def*, %struct.stack_def** %target_stack, align 8, !dbg !7360
  %top7 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %22, i32 0, i32 0, !dbg !7363
  %23 = load i32, i32* %top7, align 8, !dbg !7363
  store i32 %23, i32* %reg, align 4, !dbg !7364
  br label %for.cond, !dbg !7365

for.cond:                                         ; preds = %for.inc, %if.then6
  %24 = load i32, i32* %reg, align 4, !dbg !7366
  %cmp8 = icmp sge i32 %24, 0, !dbg !7368
  br i1 %cmp8, label %for.body, label %for.end, !dbg !7369

for.body:                                         ; preds = %for.cond
  %25 = load %struct.stack_def*, %struct.stack_def** %target_stack, align 8, !dbg !7370
  %reg9 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %25, i32 0, i32 2, !dbg !7372
  %26 = load i32, i32* %reg, align 4, !dbg !7373
  %idxprom = sext i32 %26 to i64, !dbg !7370
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* %reg9, i64 0, i64 %idxprom, !dbg !7370
  %27 = load i8, i8* %arrayidx, align 1, !dbg !7370
  %conv = zext i8 %27 to i32, !dbg !7370
  %28 = load %struct.stack_def*, %struct.stack_def** %source_stack, align 8, !dbg !7374
  %reg10 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %28, i32 0, i32 2, !dbg !7375
  %29 = load i32, i32* %reg, align 4, !dbg !7376
  %idxprom11 = sext i32 %29 to i64, !dbg !7374
  %arrayidx12 = getelementptr inbounds [8 x i8], [8 x i8]* %reg10, i64 0, i64 %idxprom11, !dbg !7374
  %30 = load i8, i8* %arrayidx12, align 1, !dbg !7374
  %conv13 = zext i8 %30 to i32, !dbg !7374
  %cmp14 = icmp ne i32 %conv, %conv13, !dbg !7377
  br i1 %cmp14, label %if.then16, label %if.end17, !dbg !7378

if.then16:                                        ; preds = %for.body
  br label %for.end, !dbg !7379

if.end17:                                         ; preds = %for.body
  br label %for.inc, !dbg !7380

for.inc:                                          ; preds = %if.end17
  %31 = load i32, i32* %reg, align 4, !dbg !7381
  %dec = add nsw i32 %31, -1, !dbg !7381
  store i32 %dec, i32* %reg, align 4, !dbg !7381
  br label %for.cond, !dbg !7382, !llvm.loop !7383

for.end:                                          ; preds = %if.then16, %for.cond
  %32 = load i32, i32* %reg, align 4, !dbg !7385
  %cmp18 = icmp eq i32 %32, -1, !dbg !7387
  br i1 %cmp18, label %if.then20, label %if.end25, !dbg !7388

if.then20:                                        ; preds = %for.end
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7389
  %tobool21 = icmp ne %struct._IO_FILE* %33, null, !dbg !7389
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !7392

if.then22:                                        ; preds = %if.then20
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7393
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.23, i64 0, i64 0)), !dbg !7394
  br label %if.end24, !dbg !7394

if.end24:                                         ; preds = %if.then22, %if.then20
  store i8 0, i8* %retval, align 1, !dbg !7395
  br label %return, !dbg !7395

if.end25:                                         ; preds = %for.end
  br label %if.end26, !dbg !7396

if.end26:                                         ; preds = %if.end25, %cond.end
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7397
  %tobool27 = icmp ne %struct._IO_FILE* %35, null, !dbg !7397
  br i1 %tobool27, label %if.then28, label %if.end30, !dbg !7399

if.then28:                                        ; preds = %if.end26
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7400
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.24, i64 0, i64 0)), !dbg !7402
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7403
  %38 = load %struct.stack_def*, %struct.stack_def** %target_stack, align 8, !dbg !7404
  call void @print_stack(%struct._IO_FILE* %37, %struct.stack_def* %38), !dbg !7405
  br label %if.end30, !dbg !7406

if.end30:                                         ; preds = %if.then28, %if.end26
  %39 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7407
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 7, !dbg !7409
  %40 = load i32, i32* %flags, align 8, !dbg !7409
  %and = and i32 %40, 4, !dbg !7410
  %tobool31 = icmp ne i32 %and, 0, !dbg !7410
  br i1 %tobool31, label %if.then32, label %if.end50, !dbg !7411

if.then32:                                        ; preds = %if.end30
  %41 = load %struct.stack_def*, %struct.stack_def** %source_stack, align 8, !dbg !7412
  %top33 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %41, i32 0, i32 0, !dbg !7412
  %42 = load i32, i32* %top33, align 8, !dbg !7412
  %cmp34 = icmp eq i32 %42, 0, !dbg !7412
  br i1 %cmp34, label %cond.false40, label %lor.lhs.false, !dbg !7412

lor.lhs.false:                                    ; preds = %if.then32
  %43 = load %struct.stack_def*, %struct.stack_def** %source_stack, align 8, !dbg !7412
  %top36 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %43, i32 0, i32 0, !dbg !7412
  %44 = load i32, i32* %top36, align 8, !dbg !7412
  %cmp37 = icmp eq i32 %44, 1, !dbg !7412
  br i1 %cmp37, label %cond.false40, label %cond.true39, !dbg !7412

cond.true39:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2772, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7412
  br label %cond.end41, !dbg !7412

cond.false40:                                     ; preds = %lor.lhs.false, %if.then32
  br label %cond.end41, !dbg !7412

cond.end41:                                       ; preds = %cond.false40, %cond.true39
  %cond42 = phi i32 [ 0, %cond.true39 ], [ 0, %cond.false40 ], !dbg !7412
  %45 = load %struct.stack_def*, %struct.stack_def** %target_stack, align 8, !dbg !7414
  %top43 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %45, i32 0, i32 0, !dbg !7414
  %46 = load i32, i32* %top43, align 8, !dbg !7414
  %cmp44 = icmp eq i32 %46, -1, !dbg !7414
  br i1 %cmp44, label %cond.false47, label %cond.true46, !dbg !7414

cond.true46:                                      ; preds = %cond.end41
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2773, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7414
  br label %cond.end48, !dbg !7414

cond.false47:                                     ; preds = %cond.end41
  br label %cond.end48, !dbg !7414

cond.end48:                                       ; preds = %cond.false47, %cond.true46
  %cond49 = phi i32 [ 0, %cond.true46 ], [ 0, %cond.false47 ], !dbg !7414
  store i8 0, i8* %retval, align 1, !dbg !7415
  br label %return, !dbg !7415

if.end50:                                         ; preds = %if.end30
  %47 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7416
  %flags51 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 7, !dbg !7418
  %48 = load i32, i32* %flags51, align 8, !dbg !7418
  %and52 = and i32 %48, 8, !dbg !7419
  %tobool53 = icmp ne i32 %and52, 0, !dbg !7419
  br i1 %tobool53, label %if.then54, label %if.end62, !dbg !7420

if.then54:                                        ; preds = %if.end50
  %49 = load %struct.stack_def*, %struct.stack_def** %target_stack, align 8, !dbg !7421
  %top55 = getelementptr inbounds %struct.stack_def, %struct.stack_def* %49, i32 0, i32 0, !dbg !7421
  %50 = load i32, i32* %top55, align 8, !dbg !7421
  %cmp56 = icmp eq i32 %50, -1, !dbg !7421
  br i1 %cmp56, label %cond.false59, label %cond.true58, !dbg !7421

cond.true58:                                      ; preds = %if.then54
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2782, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7421
  br label %cond.end60, !dbg !7421

cond.false59:                                     ; preds = %if.then54
  br label %cond.end60, !dbg !7421

cond.end60:                                       ; preds = %cond.false59, %cond.true58
  %cond61 = phi i32 [ 0, %cond.true58 ], [ 0, %cond.false59 ], !dbg !7421
  store i8 0, i8* %retval, align 1, !dbg !7423
  br label %return, !dbg !7423

if.end62:                                         ; preds = %if.end50
  %51 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7424
  %flags63 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 7, !dbg !7424
  %52 = load i32, i32* %flags63, align 8, !dbg !7424
  %and64 = and i32 %52, 2, !dbg !7424
  %tobool65 = icmp ne i32 %and64, 0, !dbg !7424
  br i1 %tobool65, label %cond.true66, label %cond.false67, !dbg !7424

cond.true66:                                      ; preds = %if.end62
  call void @fancy_abort(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 2789, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)), !dbg !7424
  br label %cond.end68, !dbg !7424

cond.false67:                                     ; preds = %if.end62
  br label %cond.end68, !dbg !7424

cond.end68:                                       ; preds = %cond.false67, %cond.true66
  %cond69 = phi i32 [ 0, %cond.true66 ], [ 0, %cond.false67 ], !dbg !7424
  %53 = load %struct.stack_def*, %struct.stack_def** %source_stack, align 8, !dbg !7425
  %54 = bitcast %struct.stack_def* %regstack to i8*, !dbg !7426
  %55 = bitcast %struct.stack_def* %53 to i8*, !dbg !7426
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 24, i1 false), !dbg !7426
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %source, align 8, !dbg !7427
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 1, !dbg !7427
  %57 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7427
  %tobool70 = icmp ne %struct.VEC_edge_gc* %57, null, !dbg !7427
  br i1 %tobool70, label %cond.true71, label %cond.false73, !dbg !7427

cond.true71:                                      ; preds = %cond.end68
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %source, align 8, !dbg !7427
  %succs72 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 1, !dbg !7427
  %59 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs72, align 8, !dbg !7427
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %59, i32 0, i32 0, !dbg !7427
  br label %cond.end74, !dbg !7427

cond.false73:                                     ; preds = %cond.end68
  br label %cond.end74, !dbg !7427

cond.end74:                                       ; preds = %cond.false73, %cond.true71
  %cond75 = phi %struct.VEC_edge_base* [ %base, %cond.true71 ], [ null, %cond.false73 ], !dbg !7427
  %call76 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond75), !dbg !7427
  %cmp77 = icmp eq i32 %call76, 1, !dbg !7429
  br i1 %cmp77, label %if.then79, label %if.else, !dbg !7430

if.then79:                                        ; preds = %cond.end74
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %source, align 8, !dbg !7431
  store %struct.basic_block_def* %60, %struct.basic_block_def** @current_block, align 8, !dbg !7433
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %source, align 8, !dbg !7434
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 7, !dbg !7434
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7434
  %62 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7434
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %62, i32 0, i32 1, !dbg !7434
  %63 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7434
  %64 = load %struct.stack_def*, %struct.stack_def** %target_stack, align 8, !dbg !7435
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %source, align 8, !dbg !7436
  %il80 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 7, !dbg !7436
  %rtl81 = bitcast %union.basic_block_il_dependent* %il80 to %struct.rtl_bb_info**, !dbg !7436
  %66 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl81, align 8, !dbg !7436
  %end_82 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %66, i32 0, i32 1, !dbg !7436
  %67 = load %struct.rtx_def*, %struct.rtx_def** %end_82, align 8, !dbg !7436
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !7436
  %bf.load = load i32, i32* %68, align 8, !dbg !7436
  %bf.clear = and i32 %bf.load, 65535, !dbg !7436
  %cmp83 = icmp eq i32 %bf.clear, 9, !dbg !7436
  %69 = zext i1 %cmp83 to i64, !dbg !7436
  %cond85 = select i1 %cmp83, i32 1, i32 0, !dbg !7436
  call void @change_stack(%struct.rtx_def* %63, %struct.stack_def* %regstack, %struct.stack_def* %64, i32 %cond85), !dbg !7437
  br label %if.end88, !dbg !7438

if.else:                                          ; preds = %cond.end74
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !7439, metadata !DIExpression()), !dbg !7441
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after, metadata !7442, metadata !DIExpression()), !dbg !7443
  store %struct.basic_block_def* null, %struct.basic_block_def** @current_block, align 8, !dbg !7444
  call void @start_sequence(), !dbg !7445
  %call86 = call %struct.rtx_def* @emit_note(i32 0), !dbg !7446
  store %struct.rtx_def* %call86, %struct.rtx_def** %after, align 8, !dbg !7447
  %70 = load %struct.rtx_def*, %struct.rtx_def** %after, align 8, !dbg !7448
  %71 = load %struct.stack_def*, %struct.stack_def** %target_stack, align 8, !dbg !7449
  call void @change_stack(%struct.rtx_def* %70, %struct.stack_def* %regstack, %struct.stack_def* %71, i32 1), !dbg !7450
  %call87 = call %struct.rtx_def* @get_insns(), !dbg !7451
  store %struct.rtx_def* %call87, %struct.rtx_def** %seq, align 8, !dbg !7452
  call void @end_sequence(), !dbg !7453
  %72 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7454
  %73 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7455
  call void @insert_insn_on_edge(%struct.rtx_def* %72, %struct.edge_def* %73), !dbg !7456
  store i8 1, i8* %retval, align 1, !dbg !7457
  br label %return, !dbg !7457

if.end88:                                         ; preds = %if.then79
  store i8 0, i8* %retval, align 1, !dbg !7458
  br label %return, !dbg !7458

return:                                           ; preds = %if.end88, %if.else, %cond.end60, %cond.end48, %if.end24
  %74 = load i8, i8* %retval, align 1, !dbg !7459
  ret i8 %74, !dbg !7459
}

declare dso_local void @start_sequence() #3

declare dso_local %struct.rtx_def* @emit_note(i32) #3

declare dso_local %struct.rtx_def* @get_insns() #3

declare dso_local void @end_sequence() #3

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2057, !2058, !2059}
!llvm.ident = !{!2060}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "regstack_completed", scope: !2, file: !3, line: 192, type: !886, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !885, globals: !2009, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "reg-stack.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !150, !169, !176, !183, !377, !520, !527, !703, !725, !735, !772, !806, !810, !826, !856, !870}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !146, line: 474, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149}
!148 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !151, line: 280, baseType: !7, size: 32, elements: !152)
!151 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!152 = !{!153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168}
!153 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!154 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!155 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!156 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!157 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!158 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!159 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!160 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!161 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!162 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!163 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!164 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!165 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!166 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!169 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !151, line: 1817, baseType: !7, size: 32, elements: !170)
!170 = !{!171, !172, !173, !174, !175}
!171 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!176 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !151, line: 1805, baseType: !7, size: 32, elements: !177)
!177 = !{!178, !179, !180, !181, !182}
!178 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!183 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !151, line: 39, baseType: !7, size: 32, elements: !184)
!184 = !{!185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376}
!185 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!186 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!187 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!188 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!189 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!190 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!191 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!192 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!193 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!194 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!195 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!196 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!197 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!198 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!199 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!200 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!201 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!202 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!203 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!204 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!205 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!206 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!207 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!208 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!209 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!210 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!213 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!214 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!215 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!216 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!217 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!218 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!219 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!220 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!221 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!222 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!223 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!224 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!225 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!226 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!228 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!229 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!230 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!231 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!232 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!233 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!234 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!235 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!236 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!237 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!238 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!239 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!240 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!241 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!242 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!243 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!244 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!245 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!246 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!247 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!248 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!249 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!250 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!251 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!252 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!253 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!254 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!255 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!256 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!257 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!258 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!259 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!260 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!261 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!262 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!263 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!264 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!265 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!266 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!267 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!268 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!269 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!270 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!271 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!272 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!273 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!274 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!275 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!277 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!278 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!279 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!280 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!281 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!282 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!283 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!284 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!285 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!286 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!287 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!288 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!289 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!290 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!291 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!292 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!293 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!294 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!295 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!296 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!297 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!298 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!299 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!300 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!301 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!302 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!303 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!304 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!305 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!306 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!307 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!308 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!309 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!310 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!311 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!312 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!313 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!314 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!315 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!316 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!317 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!318 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!319 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!320 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!321 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!322 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!323 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!324 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!325 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!326 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!327 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!328 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!329 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!330 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!331 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!332 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!333 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!334 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!335 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!336 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!337 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!338 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!339 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!340 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!341 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!342 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!343 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!344 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!345 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!346 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!347 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!348 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!349 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!350 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!351 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!352 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!353 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!354 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!355 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!356 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!357 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!358 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!359 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!360 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!361 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!362 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!363 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!364 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!365 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!366 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!367 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!370 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!371 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!372 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!373 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!374 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!375 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!376 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !378, line: 45, baseType: !7, size: 32, elements: !379)
!378 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!379 = !{!380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519}
!380 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!381 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!382 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!383 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!384 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!385 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!386 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!387 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!388 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!389 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!390 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!391 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!392 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!393 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!394 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!395 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!396 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!397 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!398 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!399 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!400 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!401 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!402 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!403 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!404 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!405 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!406 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!407 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!408 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!409 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!410 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!411 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!412 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!413 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!414 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!415 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!416 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!417 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!418 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!419 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!420 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!421 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!422 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!423 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!424 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!425 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!426 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!427 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!428 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!429 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!430 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!431 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!432 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!433 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!434 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!435 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!436 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!437 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!438 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!439 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!440 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!441 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!442 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!443 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!444 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!445 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!446 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!447 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!448 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!449 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!450 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!451 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!452 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!453 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!454 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!455 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!456 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!457 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!458 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!459 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!460 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!461 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!462 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!463 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!464 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!465 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!466 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!467 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!468 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!469 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!470 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!471 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!472 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!473 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!474 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!475 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!476 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!477 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!478 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!479 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!480 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!481 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!482 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!483 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!484 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!485 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!486 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!487 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!488 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!489 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!490 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!491 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!492 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!493 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!494 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!495 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!496 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!497 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!498 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!499 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!500 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!501 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!502 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!503 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!504 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!505 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!506 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!507 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!508 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!509 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!510 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!511 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!512 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!513 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!514 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!515 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!516 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!517 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!518 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!519 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!520 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !521, line: 104, baseType: !7, size: 32, elements: !522)
!521 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!522 = !{!523, !524, !525, !526}
!523 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!524 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!525 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!526 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!527 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !528, line: 74, baseType: !7, size: 32, elements: !529)
!528 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!529 = !{!530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702}
!530 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!589 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!590 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!591 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!592 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!593 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!594 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!595 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!596 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!597 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!598 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!599 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!600 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!601 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!602 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!603 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!604 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!605 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!606 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!607 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!608 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!609 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!610 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!611 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!612 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!613 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!614 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!615 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!616 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!617 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!618 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!619 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!620 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!621 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!622 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!623 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!624 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!625 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!626 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!627 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!628 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!629 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!630 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!631 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!632 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!633 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!634 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!635 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!636 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!637 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!638 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!639 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!640 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!641 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!642 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!643 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!644 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!645 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!646 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!647 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!648 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!649 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!650 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!651 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!652 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!653 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!654 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!655 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!656 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!657 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!658 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!659 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!660 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!661 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!662 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!663 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!664 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!665 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!666 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!667 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!668 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!669 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!670 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!671 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!672 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!673 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!674 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!675 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!676 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!677 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!678 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!679 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!680 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!681 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!682 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!683 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!684 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!685 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!686 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!687 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!688 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!689 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!690 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!691 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!692 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!693 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!694 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!695 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!696 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!697 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!698 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!699 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!700 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!701 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!702 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!703 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !704, line: 36, baseType: !7, size: 32, elements: !705)
!704 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!705 = !{!706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724}
!706 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!707 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!708 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!709 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!710 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!711 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!712 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!713 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!714 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!715 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!716 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!717 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!718 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!719 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!720 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!721 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!722 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!723 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!724 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!725 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cmodel", file: !146, line: 2218, baseType: !7, size: 32, elements: !726)
!726 = !{!727, !728, !729, !730, !731, !732, !733, !734}
!727 = !DIEnumerator(name: "CM_32", value: 0, isUnsigned: true)
!728 = !DIEnumerator(name: "CM_SMALL", value: 1, isUnsigned: true)
!729 = !DIEnumerator(name: "CM_KERNEL", value: 2, isUnsigned: true)
!730 = !DIEnumerator(name: "CM_MEDIUM", value: 3, isUnsigned: true)
!731 = !DIEnumerator(name: "CM_LARGE", value: 4, isUnsigned: true)
!732 = !DIEnumerator(name: "CM_SMALL_PIC", value: 5, isUnsigned: true)
!733 = !DIEnumerator(name: "CM_MEDIUM_PIC", value: 6, isUnsigned: true)
!734 = !DIEnumerator(name: "CM_LARGE_PIC", value: 7, isUnsigned: true)
!735 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !151, line: 630, baseType: !7, size: 32, elements: !736)
!736 = !{!737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771}
!737 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!738 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!739 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!740 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!741 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!742 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!743 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!744 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!745 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!746 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!747 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!748 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!749 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!750 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!751 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!752 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!753 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!754 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!755 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!756 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!757 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!758 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!759 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!760 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!761 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!762 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!763 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!764 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!765 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!766 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!767 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!768 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!769 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!770 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!771 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!772 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !378, line: 836, baseType: !7, size: 32, elements: !773)
!773 = !{!774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805}
!774 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!775 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!776 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!777 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!778 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!779 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!780 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!781 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!782 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!783 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!784 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!785 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!786 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!787 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!788 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!789 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!790 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!791 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!792 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!793 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!794 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!795 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!796 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!797 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!798 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!799 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!800 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!801 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!802 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!803 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!804 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!805 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!806 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "emit_where", file: !3, line: 226, baseType: !7, size: 32, elements: !807)
!807 = !{!808, !809}
!808 = !DIEnumerator(name: "EMIT_AFTER", value: 0, isUnsigned: true)
!809 = !DIEnumerator(name: "EMIT_BEFORE", value: 1, isUnsigned: true)
!810 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !378, line: 956, baseType: !7, size: 32, elements: !811)
!811 = !{!812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825}
!812 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!813 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!814 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!815 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!816 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!817 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!818 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!819 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!820 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!821 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!822 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!823 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!824 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!825 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!826 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_class", file: !146, line: 1188, baseType: !7, size: 32, elements: !827)
!827 = !{!828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855}
!828 = !DIEnumerator(name: "NO_REGS", value: 0, isUnsigned: true)
!829 = !DIEnumerator(name: "AREG", value: 1, isUnsigned: true)
!830 = !DIEnumerator(name: "DREG", value: 2, isUnsigned: true)
!831 = !DIEnumerator(name: "CREG", value: 3, isUnsigned: true)
!832 = !DIEnumerator(name: "BREG", value: 4, isUnsigned: true)
!833 = !DIEnumerator(name: "SIREG", value: 5, isUnsigned: true)
!834 = !DIEnumerator(name: "DIREG", value: 6, isUnsigned: true)
!835 = !DIEnumerator(name: "AD_REGS", value: 7, isUnsigned: true)
!836 = !DIEnumerator(name: "CLOBBERED_REGS", value: 8, isUnsigned: true)
!837 = !DIEnumerator(name: "Q_REGS", value: 9, isUnsigned: true)
!838 = !DIEnumerator(name: "NON_Q_REGS", value: 10, isUnsigned: true)
!839 = !DIEnumerator(name: "INDEX_REGS", value: 11, isUnsigned: true)
!840 = !DIEnumerator(name: "LEGACY_REGS", value: 12, isUnsigned: true)
!841 = !DIEnumerator(name: "GENERAL_REGS", value: 13, isUnsigned: true)
!842 = !DIEnumerator(name: "FP_TOP_REG", value: 14, isUnsigned: true)
!843 = !DIEnumerator(name: "FP_SECOND_REG", value: 15, isUnsigned: true)
!844 = !DIEnumerator(name: "FLOAT_REGS", value: 16, isUnsigned: true)
!845 = !DIEnumerator(name: "SSE_FIRST_REG", value: 17, isUnsigned: true)
!846 = !DIEnumerator(name: "SSE_REGS", value: 18, isUnsigned: true)
!847 = !DIEnumerator(name: "MMX_REGS", value: 19, isUnsigned: true)
!848 = !DIEnumerator(name: "FP_TOP_SSE_REGS", value: 20, isUnsigned: true)
!849 = !DIEnumerator(name: "FP_SECOND_SSE_REGS", value: 21, isUnsigned: true)
!850 = !DIEnumerator(name: "FLOAT_SSE_REGS", value: 22, isUnsigned: true)
!851 = !DIEnumerator(name: "FLOAT_INT_REGS", value: 23, isUnsigned: true)
!852 = !DIEnumerator(name: "INT_SSE_REGS", value: 24, isUnsigned: true)
!853 = !DIEnumerator(name: "FLOAT_INT_SSE_REGS", value: 25, isUnsigned: true)
!854 = !DIEnumerator(name: "ALL_REGS", value: 26, isUnsigned: true)
!855 = !DIEnumerator(name: "LIM_REG_CLASSES", value: 27, isUnsigned: true)
!856 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !378, line: 1994, baseType: !7, size: 32, elements: !857)
!857 = !{!858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869}
!858 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!859 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!860 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!861 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!862 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!863 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!864 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!865 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!866 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!867 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!868 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!869 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!870 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !378, line: 60, baseType: !7, size: 32, elements: !871)
!871 = !{!872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884}
!872 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!873 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!874 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!875 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!876 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!877 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!878 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!879 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!880 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!881 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!882 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!883 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!884 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!885 = !{!377, !7, !886, !887, !903, !904, !905, !914, !5, !925, !183, !996, !2004, !703, !772, !1028, !2006, !2007, !2008}
!886 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!887 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !888, size: 64)
!888 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_char_heap", file: !889, line: 24, baseType: !890)
!889 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_char_heap", file: !889, line: 24, size: 96, elements: !891)
!891 = !{!892}
!892 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !890, file: !889, line: 24, baseType: !893, size: 96)
!893 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_char_base", file: !889, line: 23, baseType: !894)
!894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_char_base", file: !889, line: 23, size: 96, elements: !895)
!895 = !{!896, !897, !898}
!896 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !894, file: !889, line: 23, baseType: !7, size: 32)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !894, file: !889, line: 23, baseType: !7, size: 32, offset: 32)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !894, file: !889, line: 23, baseType: !899, size: 8, offset: 64)
!899 = !DICompositeType(tag: DW_TAG_array_type, baseType: !900, size: 8, elements: !901)
!900 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!901 = !{!902}
!902 = !DISubrange(count: 1)
!903 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!905 = !DIDerivedType(tag: DW_TAG_typedef, name: "block_info", file: !3, line: 221, baseType: !906)
!906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !907, size: 64)
!907 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_info_def", file: !3, line: 213, size: 512, elements: !908)
!908 = !{!909, !921, !922, !923, !924}
!909 = !DIDerivedType(tag: DW_TAG_member, name: "stack_in", scope: !907, file: !3, line: 215, baseType: !910, size: 192)
!910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stack_def", file: !3, line: 203, size: 192, elements: !911)
!911 = !{!912, !913, !916}
!912 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !910, file: !3, line: 205, baseType: !886, size: 32)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "reg_set", scope: !910, file: !3, line: 206, baseType: !914, size: 64, offset: 64)
!914 = !DIDerivedType(tag: DW_TAG_typedef, name: "HARD_REG_ELT_TYPE", file: !915, line: 42, baseType: !903)
!915 = !DIFile(filename: "./hard-reg-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!916 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !910, file: !3, line: 207, baseType: !917, size: 64, offset: 128)
!917 = !DICompositeType(tag: DW_TAG_array_type, baseType: !918, size: 64, elements: !919)
!918 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!919 = !{!920}
!920 = !DISubrange(count: 8)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "stack_out", scope: !907, file: !3, line: 216, baseType: !910, size: 192, offset: 192)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "out_reg_set", scope: !907, file: !3, line: 217, baseType: !914, size: 64, offset: 384)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !907, file: !3, line: 218, baseType: !886, size: 32, offset: 448)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "predecessors", scope: !907, file: !3, line: 219, baseType: !886, size: 32, offset: 480)
!925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !926, size: 64)
!926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_lr_bb_info", file: !927, line: 826, size: 256, elements: !928)
!927 = !DIFile(filename: "./df.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!928 = !{!929, !993, !994, !995}
!929 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !926, file: !927, line: 829, baseType: !930, size: 64)
!930 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !931, line: 47, baseType: !932)
!931 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !933, size: 64)
!933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !934, line: 75, size: 256, elements: !935)
!934 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!935 = !{!936, !950, !951, !952}
!936 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !933, file: !934, line: 76, baseType: !937, size: 64)
!937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !938, size: 64)
!938 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !934, line: 68, baseType: !939)
!939 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !934, line: 63, size: 320, elements: !940)
!940 = !{!941, !943, !944, !945}
!941 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !939, file: !934, line: 64, baseType: !942, size: 64)
!942 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !939, size: 64)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !939, file: !934, line: 65, baseType: !942, size: 64, offset: 64)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !939, file: !934, line: 66, baseType: !7, size: 32, offset: 128)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !939, file: !934, line: 67, baseType: !946, size: 128, offset: 192)
!946 = !DICompositeType(tag: DW_TAG_array_type, baseType: !947, size: 128, elements: !948)
!947 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !934, line: 29, baseType: !903)
!948 = !{!949}
!949 = !DISubrange(count: 2)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !933, file: !934, line: 77, baseType: !937, size: 64, offset: 64)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !933, file: !934, line: 78, baseType: !7, size: 32, offset: 128)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !933, file: !934, line: 79, baseType: !953, size: 64, offset: 192)
!953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !954, size: 64)
!954 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !934, line: 49, baseType: !955)
!955 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !934, line: 45, size: 832, elements: !956)
!956 = !{!957, !958, !959}
!957 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !955, file: !934, line: 46, baseType: !942, size: 64)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !955, file: !934, line: 47, baseType: !932, size: 64, offset: 64)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !955, file: !934, line: 48, baseType: !960, size: 704, offset: 128)
!960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !961, line: 164, size: 704, elements: !962)
!961 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!962 = !{!963, !965, !976, !977, !978, !979, !980, !981, !985, !989, !990, !991, !992}
!963 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !960, file: !961, line: 166, baseType: !964, size: 64)
!964 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !960, file: !961, line: 167, baseType: !966, size: 64, offset: 64)
!966 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !967, size: 64)
!967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !961, line: 157, size: 192, elements: !968)
!968 = !{!969, !971, !972}
!969 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !967, file: !961, line: 159, baseType: !970, size: 64)
!970 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !900, size: 64)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !967, file: !961, line: 160, baseType: !966, size: 64, offset: 64)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !967, file: !961, line: 161, baseType: !973, size: 32, offset: 128)
!973 = !DICompositeType(tag: DW_TAG_array_type, baseType: !900, size: 32, elements: !974)
!974 = !{!975}
!975 = !DISubrange(count: 4)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !960, file: !961, line: 168, baseType: !970, size: 64, offset: 128)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !960, file: !961, line: 169, baseType: !970, size: 64, offset: 192)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !960, file: !961, line: 170, baseType: !970, size: 64, offset: 256)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !960, file: !961, line: 171, baseType: !964, size: 64, offset: 320)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !960, file: !961, line: 172, baseType: !886, size: 32, offset: 384)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !960, file: !961, line: 176, baseType: !982, size: 64, offset: 448)
!982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !983, size: 64)
!983 = !DISubroutineType(types: !984)
!984 = !{!966, !904, !964}
!985 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !960, file: !961, line: 177, baseType: !986, size: 64, offset: 512)
!986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !987, size: 64)
!987 = !DISubroutineType(types: !988)
!988 = !{null, !904, !966}
!989 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !960, file: !961, line: 178, baseType: !904, size: 64, offset: 576)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !960, file: !961, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !960, file: !961, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !960, file: !961, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !926, file: !927, line: 831, baseType: !930, size: 64, offset: 64)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !926, file: !927, line: 834, baseType: !930, size: 64, offset: 128)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !926, file: !927, line: 835, baseType: !930, size: 64, offset: 192)
!996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !997, size: 64)
!997 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !931, line: 111, baseType: !998)
!998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !999, size: 64)
!999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !1000)
!1000 = !{!1001, !1969, !1970, !1971, !1974, !1978, !1979, !1980, !1998, !1999, !2000, !2001, !2002, !2003}
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !999, file: !135, line: 219, baseType: !1002, size: 64)
!1002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1003, size: 64)
!1003 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !1004)
!1004 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !1005)
!1005 = !{!1006}
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1004, file: !135, line: 151, baseType: !1007, size: 128)
!1007 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !1008)
!1008 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !1009)
!1009 = !{!1010, !1011, !1012}
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1008, file: !135, line: 150, baseType: !7, size: 32)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1008, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1008, file: !135, line: 150, baseType: !1013, size: 64, offset: 64)
!1013 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1014, size: 64, elements: !901)
!1014 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !931, line: 108, baseType: !1015)
!1015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1016, size: 64)
!1016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !1017)
!1017 = !{!1018, !1019, !1020, !1961, !1962, !1963, !1964, !1965, !1966, !1967}
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1016, file: !135, line: 124, baseType: !998, size: 64)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1016, file: !135, line: 125, baseType: !998, size: 64, offset: 64)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1016, file: !135, line: 131, baseType: !1021, size: 64, offset: 128)
!1021 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !1022)
!1022 = !{!1023, !1027}
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1021, file: !135, line: 129, baseType: !1024, size: 64)
!1024 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !931, line: 66, baseType: !1025)
!1025 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1026, size: 64)
!1026 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !931, line: 65, flags: DIFlagFwdDecl)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1021, file: !135, line: 130, baseType: !1028, size: 64)
!1028 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !931, line: 50, baseType: !1029)
!1029 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1030, size: 64)
!1030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !378, line: 240, size: 384, elements: !1031)
!1031 = !{!1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042}
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1030, file: !378, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1030, file: !378, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1030, file: !378, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1030, file: !378, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1030, file: !378, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1030, file: !378, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1030, file: !378, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1030, file: !378, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1030, file: !378, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1030, file: !378, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1030, file: !378, line: 321, baseType: !1043, size: 320, offset: 64)
!1043 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !378, line: 315, size: 320, elements: !1044)
!1044 = !{!1045, !1896, !1898, !1959, !1960}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1043, file: !378, line: 316, baseType: !1046, size: 64)
!1046 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1047, size: 64, elements: !901)
!1047 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !378, line: 183, baseType: !1048)
!1048 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !378, line: 166, size: 64, elements: !1049)
!1049 = !{!1050, !1051, !1052, !1055, !1056, !1064, !1065, !1077, !1080, !1081, !1874, !1875, !1886, !1893}
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1048, file: !378, line: 168, baseType: !886, size: 32)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1048, file: !378, line: 169, baseType: !7, size: 32)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1048, file: !378, line: 170, baseType: !1053, size: 64)
!1053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1054, size: 64)
!1054 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !900)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1048, file: !378, line: 171, baseType: !1028, size: 64)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1048, file: !378, line: 172, baseType: !1057, size: 64)
!1057 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !931, line: 53, baseType: !1058)
!1058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1059, size: 64)
!1059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !378, line: 359, size: 128, elements: !1060)
!1060 = !{!1061, !1062}
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1059, file: !378, line: 360, baseType: !886, size: 32)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1059, file: !378, line: 361, baseType: !1063, size: 64, offset: 64)
!1063 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1028, size: 64, elements: !901)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1048, file: !378, line: 173, baseType: !5, size: 32)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1048, file: !378, line: 174, baseType: !1066, size: 32)
!1066 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !378, line: 133, baseType: !1067)
!1067 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !378, line: 115, size: 32, elements: !1068)
!1068 = !{!1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076}
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1067, file: !378, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1067, file: !378, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1067, file: !378, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1067, file: !378, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1067, file: !378, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1067, file: !378, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1067, file: !378, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1067, file: !378, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1048, file: !378, line: 175, baseType: !1078, size: 64)
!1078 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1079, size: 64)
!1079 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !378, line: 175, flags: DIFlagFwdDecl)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1048, file: !378, line: 176, baseType: !932, size: 64)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1048, file: !378, line: 177, baseType: !1082, size: 64)
!1082 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !931, line: 56, baseType: !1083)
!1083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1084, size: 64)
!1084 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !151, line: 3371, size: 1792, elements: !1085)
!1085 = !{!1086, !1119, !1125, !1136, !1155, !1166, !1171, !1177, !1183, !1196, !1208, !1246, !1251, !1279, !1287, !1288, !1293, !1302, !1308, !1313, !1317, !1321, !1498, !1547, !1553, !1560, !1567, !1593, !1618, !1635, !1647, !1669, !1684, !1856}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1084, file: !151, line: 3372, baseType: !1087, size: 64)
!1087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !151, line: 360, size: 64, elements: !1088)
!1088 = !{!1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118}
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1087, file: !151, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1087, file: !151, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1087, file: !151, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1087, file: !151, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1087, file: !151, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1087, file: !151, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1087, file: !151, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1087, file: !151, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1087, file: !151, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1087, file: !151, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1087, file: !151, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1087, file: !151, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1087, file: !151, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1087, file: !151, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1087, file: !151, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1087, file: !151, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1087, file: !151, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1087, file: !151, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1087, file: !151, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1087, file: !151, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1087, file: !151, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1087, file: !151, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1087, file: !151, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1087, file: !151, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1087, file: !151, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1087, file: !151, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1087, file: !151, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1087, file: !151, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1087, file: !151, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1087, file: !151, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1084, file: !151, line: 3373, baseType: !1120, size: 192)
!1120 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !151, line: 402, size: 192, elements: !1121)
!1121 = !{!1122, !1123, !1124}
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1120, file: !151, line: 403, baseType: !1087, size: 64)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1120, file: !151, line: 404, baseType: !1082, size: 64, offset: 64)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1120, file: !151, line: 405, baseType: !1082, size: 64, offset: 128)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1084, file: !151, line: 3374, baseType: !1126, size: 320)
!1126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !151, line: 1384, size: 320, elements: !1127)
!1127 = !{!1128, !1129}
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1126, file: !151, line: 1385, baseType: !1120, size: 192)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1126, file: !151, line: 1386, baseType: !1130, size: 128, offset: 192)
!1130 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1131, line: 58, baseType: !1132)
!1131 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1132 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1131, line: 54, size: 128, elements: !1133)
!1133 = !{!1134, !1135}
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1132, file: !1131, line: 56, baseType: !903, size: 64)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1132, file: !1131, line: 57, baseType: !964, size: 64, offset: 64)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1084, file: !151, line: 3375, baseType: !1137, size: 256)
!1137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !151, line: 1397, size: 256, elements: !1138)
!1138 = !{!1139, !1140}
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1137, file: !151, line: 1398, baseType: !1120, size: 192)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1137, file: !151, line: 1399, baseType: !1141, size: 64, offset: 192)
!1141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1142, size: 64)
!1142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1143, line: 52, size: 256, elements: !1144)
!1143 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1144 = !{!1145, !1146, !1147, !1148, !1149, !1150, !1151}
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1142, file: !1143, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1142, file: !1143, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1142, file: !1143, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1142, file: !1143, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1142, file: !1143, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1142, file: !1143, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1142, file: !1143, line: 62, baseType: !1152, size: 192, offset: 64)
!1152 = !DICompositeType(tag: DW_TAG_array_type, baseType: !903, size: 192, elements: !1153)
!1153 = !{!1154}
!1154 = !DISubrange(count: 3)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1084, file: !151, line: 3376, baseType: !1156, size: 256)
!1156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !151, line: 1408, size: 256, elements: !1157)
!1157 = !{!1158, !1159}
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1156, file: !151, line: 1409, baseType: !1120, size: 192)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1156, file: !151, line: 1410, baseType: !1160, size: 64, offset: 192)
!1160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1161, size: 64)
!1161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1162, line: 27, size: 192, elements: !1163)
!1162 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1163 = !{!1164, !1165}
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1161, file: !1162, line: 29, baseType: !1130, size: 128)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1161, file: !1162, line: 30, baseType: !5, size: 32, offset: 128)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1084, file: !151, line: 3377, baseType: !1167, size: 256)
!1167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !151, line: 1437, size: 256, elements: !1168)
!1168 = !{!1169, !1170}
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1167, file: !151, line: 1438, baseType: !1120, size: 192)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1167, file: !151, line: 1439, baseType: !1082, size: 64, offset: 192)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1084, file: !151, line: 3378, baseType: !1172, size: 256)
!1172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !151, line: 1418, size: 256, elements: !1173)
!1173 = !{!1174, !1175, !1176}
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1172, file: !151, line: 1419, baseType: !1120, size: 192)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1172, file: !151, line: 1420, baseType: !886, size: 32, offset: 192)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1172, file: !151, line: 1421, baseType: !899, size: 8, offset: 224)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1084, file: !151, line: 3379, baseType: !1178, size: 320)
!1178 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !151, line: 1428, size: 320, elements: !1179)
!1179 = !{!1180, !1181, !1182}
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1178, file: !151, line: 1429, baseType: !1120, size: 192)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1178, file: !151, line: 1430, baseType: !1082, size: 64, offset: 192)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1178, file: !151, line: 1431, baseType: !1082, size: 64, offset: 256)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1084, file: !151, line: 3380, baseType: !1184, size: 320)
!1184 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !151, line: 1460, size: 320, elements: !1185)
!1185 = !{!1186, !1187}
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1184, file: !151, line: 1461, baseType: !1120, size: 192)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1184, file: !151, line: 1462, baseType: !1188, size: 128, offset: 192)
!1188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1189, line: 31, size: 128, elements: !1190)
!1189 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1190 = !{!1191, !1194, !1195}
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1188, file: !1189, line: 32, baseType: !1192, size: 64)
!1192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1193, size: 64)
!1193 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !918)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1188, file: !1189, line: 33, baseType: !7, size: 32, offset: 64)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1188, file: !1189, line: 34, baseType: !7, size: 32, offset: 96)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1084, file: !151, line: 3381, baseType: !1197, size: 384)
!1197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !151, line: 2507, size: 384, elements: !1198)
!1198 = !{!1199, !1200, !1205, !1206, !1207}
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1197, file: !151, line: 2508, baseType: !1120, size: 192)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1197, file: !151, line: 2509, baseType: !1201, size: 32, offset: 192)
!1201 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1202, line: 58, baseType: !1203)
!1202 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1203 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1204, line: 44, baseType: !7)
!1204 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1197, file: !151, line: 2510, baseType: !7, size: 32, offset: 224)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1197, file: !151, line: 2511, baseType: !1082, size: 64, offset: 256)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1197, file: !151, line: 2512, baseType: !1082, size: 64, offset: 320)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1084, file: !151, line: 3382, baseType: !1209, size: 896)
!1209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !151, line: 2652, size: 896, elements: !1210)
!1210 = !{!1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243}
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1209, file: !151, line: 2653, baseType: !1197, size: 384)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1209, file: !151, line: 2654, baseType: !1082, size: 64, offset: 384)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1209, file: !151, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1209, file: !151, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1209, file: !151, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1209, file: !151, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1209, file: !151, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1209, file: !151, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1209, file: !151, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1209, file: !151, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1209, file: !151, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1209, file: !151, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1209, file: !151, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1209, file: !151, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1209, file: !151, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1209, file: !151, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1209, file: !151, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1209, file: !151, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1209, file: !151, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1209, file: !151, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1209, file: !151, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1209, file: !151, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1209, file: !151, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1209, file: !151, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1209, file: !151, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1209, file: !151, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1209, file: !151, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1209, file: !151, line: 2703, baseType: !7, size: 32, offset: 512)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1209, file: !151, line: 2705, baseType: !1082, size: 64, offset: 576)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1209, file: !151, line: 2706, baseType: !1082, size: 64, offset: 640)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1209, file: !151, line: 2707, baseType: !1082, size: 64, offset: 704)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1209, file: !151, line: 2708, baseType: !1082, size: 64, offset: 768)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1209, file: !151, line: 2711, baseType: !1244, size: 64, offset: 832)
!1244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1245, size: 64)
!1245 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !151, line: 2711, flags: DIFlagFwdDecl)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1084, file: !151, line: 3383, baseType: !1247, size: 960)
!1247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !151, line: 2756, size: 960, elements: !1248)
!1248 = !{!1249, !1250}
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1247, file: !151, line: 2757, baseType: !1209, size: 896)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1247, file: !151, line: 2758, baseType: !1028, size: 64, offset: 896)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1084, file: !151, line: 3384, baseType: !1252, size: 1472)
!1252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !151, line: 3114, size: 1472, elements: !1253)
!1253 = !{!1254, !1275, !1276, !1277, !1278}
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1252, file: !151, line: 3115, baseType: !1255, size: 1216)
!1255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !151, line: 2984, size: 1216, elements: !1256)
!1256 = !{!1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274}
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1255, file: !151, line: 2985, baseType: !1247, size: 960)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1255, file: !151, line: 2986, baseType: !1082, size: 64, offset: 960)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1255, file: !151, line: 2987, baseType: !1082, size: 64, offset: 1024)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1255, file: !151, line: 2988, baseType: !1082, size: 64, offset: 1088)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1255, file: !151, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1255, file: !151, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1255, file: !151, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1255, file: !151, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1255, file: !151, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1255, file: !151, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1255, file: !151, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1255, file: !151, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1255, file: !151, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1255, file: !151, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1255, file: !151, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1255, file: !151, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1255, file: !151, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1255, file: !151, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1252, file: !151, line: 3117, baseType: !1082, size: 64, offset: 1216)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1252, file: !151, line: 3119, baseType: !1082, size: 64, offset: 1280)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1252, file: !151, line: 3121, baseType: !1082, size: 64, offset: 1344)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1252, file: !151, line: 3123, baseType: !1082, size: 64, offset: 1408)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1084, file: !151, line: 3385, baseType: !1280, size: 1088)
!1280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !151, line: 2874, size: 1088, elements: !1281)
!1281 = !{!1282, !1283, !1284}
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1280, file: !151, line: 2875, baseType: !1247, size: 960)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1280, file: !151, line: 2876, baseType: !1028, size: 64, offset: 960)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1280, file: !151, line: 2877, baseType: !1285, size: 64, offset: 1024)
!1285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1286, size: 64)
!1286 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !151, line: 2856, flags: DIFlagFwdDecl)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1084, file: !151, line: 3386, baseType: !1255, size: 1216)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1084, file: !151, line: 3387, baseType: !1289, size: 1280)
!1289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !151, line: 3093, size: 1280, elements: !1290)
!1290 = !{!1291, !1292}
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1289, file: !151, line: 3094, baseType: !1255, size: 1216)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1289, file: !151, line: 3095, baseType: !1285, size: 64, offset: 1216)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1084, file: !151, line: 3388, baseType: !1294, size: 1216)
!1294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !151, line: 2824, size: 1216, elements: !1295)
!1295 = !{!1296, !1297, !1298, !1299, !1300, !1301}
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1294, file: !151, line: 2825, baseType: !1209, size: 896)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1294, file: !151, line: 2827, baseType: !1082, size: 64, offset: 896)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1294, file: !151, line: 2828, baseType: !1082, size: 64, offset: 960)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1294, file: !151, line: 2829, baseType: !1082, size: 64, offset: 1024)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1294, file: !151, line: 2830, baseType: !1082, size: 64, offset: 1088)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1294, file: !151, line: 2831, baseType: !1082, size: 64, offset: 1152)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1084, file: !151, line: 3389, baseType: !1303, size: 1024)
!1303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !151, line: 2850, size: 1024, elements: !1304)
!1304 = !{!1305, !1306, !1307}
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1303, file: !151, line: 2851, baseType: !1247, size: 960)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1303, file: !151, line: 2852, baseType: !886, size: 32, offset: 960)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1303, file: !151, line: 2853, baseType: !886, size: 32, offset: 992)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1084, file: !151, line: 3390, baseType: !1309, size: 1024)
!1309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !151, line: 2857, size: 1024, elements: !1310)
!1310 = !{!1311, !1312}
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1309, file: !151, line: 2858, baseType: !1247, size: 960)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1309, file: !151, line: 2859, baseType: !1285, size: 64, offset: 960)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1084, file: !151, line: 3391, baseType: !1314, size: 960)
!1314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !151, line: 2862, size: 960, elements: !1315)
!1315 = !{!1316}
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1314, file: !151, line: 2863, baseType: !1247, size: 960)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1084, file: !151, line: 3392, baseType: !1318, size: 1472)
!1318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !151, line: 3304, size: 1472, elements: !1319)
!1319 = !{!1320}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1318, file: !151, line: 3305, baseType: !1252, size: 1472)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1084, file: !151, line: 3393, baseType: !1322, size: 1792)
!1322 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !151, line: 3248, size: 1792, elements: !1323)
!1323 = !{!1324, !1325, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497}
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1322, file: !151, line: 3249, baseType: !1252, size: 1472)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1322, file: !151, line: 3251, baseType: !1326, size: 64, offset: 1472)
!1326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1327, size: 64)
!1327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1328, line: 463, size: 1152, elements: !1329)
!1328 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1329 = !{!1330, !1333, !1363, !1364, !1367, !1370, !1422, !1423, !1424, !1425, !1426, !1450, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476}
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1327, file: !1328, line: 464, baseType: !1331, size: 64)
!1331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1332, size: 64)
!1332 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1328, line: 464, flags: DIFlagFwdDecl)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1327, file: !1328, line: 467, baseType: !1334, size: 64, offset: 64)
!1334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1335, size: 64)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !1336)
!1336 = !{!1337, !1338, !1339, !1352, !1353, !1354, !1355, !1356, !1357, !1359, !1361, !1362}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1335, file: !135, line: 377, baseType: !997, size: 64)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1335, file: !135, line: 378, baseType: !997, size: 64, offset: 64)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1335, file: !135, line: 381, baseType: !1340, size: 64, offset: 128)
!1340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1341, size: 64)
!1341 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !1342)
!1342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !1343)
!1343 = !{!1344}
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1342, file: !135, line: 282, baseType: !1345, size: 128)
!1345 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !1346)
!1346 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !1347)
!1347 = !{!1348, !1349, !1350}
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1346, file: !135, line: 281, baseType: !7, size: 32)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1346, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1346, file: !135, line: 281, baseType: !1351, size: 64, offset: 64)
!1351 = !DICompositeType(tag: DW_TAG_array_type, baseType: !997, size: 64, elements: !901)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1335, file: !135, line: 384, baseType: !886, size: 32, offset: 192)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1335, file: !135, line: 387, baseType: !886, size: 32, offset: 224)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1335, file: !135, line: 390, baseType: !886, size: 32, offset: 256)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1335, file: !135, line: 394, baseType: !1340, size: 64, offset: 320)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1335, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1335, file: !135, line: 399, baseType: !1358, size: 64, offset: 416)
!1358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !948)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1335, file: !135, line: 402, baseType: !1360, size: 64, offset: 480)
!1360 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !948)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1335, file: !135, line: 406, baseType: !886, size: 32, offset: 544)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1335, file: !135, line: 409, baseType: !886, size: 32, offset: 576)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1327, file: !1328, line: 470, baseType: !1025, size: 64, offset: 128)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1327, file: !1328, line: 473, baseType: !1365, size: 64, offset: 192)
!1365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1366, size: 64)
!1366 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1328, line: 166, flags: DIFlagFwdDecl)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1327, file: !1328, line: 476, baseType: !1368, size: 64, offset: 256)
!1368 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1369, size: 64)
!1369 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1328, line: 476, flags: DIFlagFwdDecl)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1327, file: !1328, line: 479, baseType: !1371, size: 64, offset: 320)
!1371 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1372, line: 144, baseType: !1373)
!1372 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1374, size: 64)
!1374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1372, line: 100, size: 896, elements: !1375)
!1375 = !{!1376, !1384, !1389, !1394, !1396, !1399, !1400, !1401, !1402, !1403, !1408, !1410, !1411, !1416, !1421}
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1374, file: !1372, line: 102, baseType: !1377, size: 64)
!1377 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1372, line: 52, baseType: !1378)
!1378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1379, size: 64)
!1379 = !DISubroutineType(types: !1380)
!1380 = !{!1381, !1382}
!1381 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1372, line: 47, baseType: !7)
!1382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1383, size: 64)
!1383 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1374, file: !1372, line: 105, baseType: !1385, size: 64, offset: 64)
!1385 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1372, line: 59, baseType: !1386)
!1386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1387, size: 64)
!1387 = !DISubroutineType(types: !1388)
!1388 = !{!886, !1382, !1382}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1374, file: !1372, line: 108, baseType: !1390, size: 64, offset: 128)
!1390 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1372, line: 63, baseType: !1391)
!1391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1392, size: 64)
!1392 = !DISubroutineType(types: !1393)
!1393 = !{null, !904}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1374, file: !1372, line: 111, baseType: !1395, size: 64, offset: 192)
!1395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !904, size: 64)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1374, file: !1372, line: 114, baseType: !1397, size: 64, offset: 256)
!1397 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1398, line: 46, baseType: !903)
!1398 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1374, file: !1372, line: 117, baseType: !1397, size: 64, offset: 320)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1374, file: !1372, line: 120, baseType: !1397, size: 64, offset: 384)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1374, file: !1372, line: 124, baseType: !7, size: 32, offset: 448)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1374, file: !1372, line: 128, baseType: !7, size: 32, offset: 480)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1374, file: !1372, line: 131, baseType: !1404, size: 64, offset: 512)
!1404 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1372, line: 75, baseType: !1405)
!1405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1406, size: 64)
!1406 = !DISubroutineType(types: !1407)
!1407 = !{!904, !1397, !1397}
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1374, file: !1372, line: 132, baseType: !1409, size: 64, offset: 576)
!1409 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1372, line: 78, baseType: !1391)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1374, file: !1372, line: 135, baseType: !904, size: 64, offset: 640)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1374, file: !1372, line: 136, baseType: !1412, size: 64, offset: 704)
!1412 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1372, line: 82, baseType: !1413)
!1413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1414, size: 64)
!1414 = !DISubroutineType(types: !1415)
!1415 = !{!904, !904, !1397, !1397}
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1374, file: !1372, line: 137, baseType: !1417, size: 64, offset: 768)
!1417 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1372, line: 83, baseType: !1418)
!1418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1419, size: 64)
!1419 = !DISubroutineType(types: !1420)
!1420 = !{null, !904, !904}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1374, file: !1372, line: 141, baseType: !7, size: 32, offset: 832)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1327, file: !1328, line: 484, baseType: !1082, size: 64, offset: 384)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1327, file: !1328, line: 488, baseType: !1082, size: 64, offset: 448)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1327, file: !1328, line: 493, baseType: !1082, size: 64, offset: 512)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1327, file: !1328, line: 496, baseType: !1082, size: 64, offset: 576)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1327, file: !1328, line: 501, baseType: !1427, size: 64, offset: 640)
!1427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1428, size: 64)
!1428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !146, line: 2355, size: 576, elements: !1429)
!1429 = !{!1430, !1433, !1434, !1435, !1436, !1438, !1439, !1444, !1445, !1446, !1447, !1448, !1449}
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1428, file: !146, line: 2356, baseType: !1431, size: 64)
!1431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1432, size: 64)
!1432 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !146, line: 2356, flags: DIFlagFwdDecl)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1428, file: !146, line: 2357, baseType: !1053, size: 64, offset: 64)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1428, file: !146, line: 2358, baseType: !886, size: 32, offset: 128)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1428, file: !146, line: 2359, baseType: !886, size: 32, offset: 160)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1428, file: !146, line: 2360, baseType: !1437, size: 128, offset: 192)
!1437 = !DICompositeType(tag: DW_TAG_array_type, baseType: !886, size: 128, elements: !974)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1428, file: !146, line: 2364, baseType: !886, size: 32, offset: 320)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1428, file: !146, line: 2367, baseType: !1440, size: 128, offset: 384)
!1440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !146, line: 2349, size: 128, elements: !1441)
!1441 = !{!1442, !1443}
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1440, file: !146, line: 2351, baseType: !1028, size: 64)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1440, file: !146, line: 2352, baseType: !964, size: 64, offset: 64)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1428, file: !146, line: 2371, baseType: !145, size: 32, offset: 512)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1428, file: !146, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1428, file: !146, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1428, file: !146, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1428, file: !146, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1428, file: !146, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1327, file: !1328, line: 504, baseType: !1451, size: 64, offset: 704)
!1451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1452, size: 64)
!1452 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1328, line: 504, flags: DIFlagFwdDecl)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1327, file: !1328, line: 507, baseType: !1371, size: 64, offset: 768)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1327, file: !1328, line: 510, baseType: !886, size: 32, offset: 832)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1327, file: !1328, line: 513, baseType: !886, size: 32, offset: 864)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1327, file: !1328, line: 516, baseType: !1201, size: 32, offset: 896)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1327, file: !1328, line: 519, baseType: !1201, size: 32, offset: 928)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1327, file: !1328, line: 522, baseType: !7, size: 32, offset: 960)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1327, file: !1328, line: 523, baseType: !7, size: 32, offset: 992)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1327, file: !1328, line: 528, baseType: !1053, size: 64, offset: 1024)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1327, file: !1328, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1327, file: !1328, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1327, file: !1328, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1327, file: !1328, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1327, file: !1328, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1327, file: !1328, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1327, file: !1328, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1327, file: !1328, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1327, file: !1328, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1327, file: !1328, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1327, file: !1328, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1327, file: !1328, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1327, file: !1328, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1327, file: !1328, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1327, file: !1328, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1327, file: !1328, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1322, file: !151, line: 3254, baseType: !1082, size: 64, offset: 1536)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1322, file: !151, line: 3257, baseType: !1082, size: 64, offset: 1600)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1322, file: !151, line: 3258, baseType: !1082, size: 64, offset: 1664)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1322, file: !151, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1322, file: !151, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1322, file: !151, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1322, file: !151, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1322, file: !151, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1322, file: !151, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1322, file: !151, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1322, file: !151, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1322, file: !151, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1322, file: !151, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1322, file: !151, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1322, file: !151, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1322, file: !151, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1322, file: !151, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1322, file: !151, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1322, file: !151, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1322, file: !151, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1322, file: !151, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1084, file: !151, line: 3394, baseType: !1499, size: 1344)
!1499 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !151, line: 2279, size: 1344, elements: !1500)
!1500 = !{!1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1526, !1527, !1528, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544}
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1499, file: !151, line: 2280, baseType: !1120, size: 192)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1499, file: !151, line: 2281, baseType: !1082, size: 64, offset: 192)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1499, file: !151, line: 2282, baseType: !1082, size: 64, offset: 256)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1499, file: !151, line: 2283, baseType: !1082, size: 64, offset: 320)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1499, file: !151, line: 2284, baseType: !1082, size: 64, offset: 384)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1499, file: !151, line: 2285, baseType: !7, size: 32, offset: 448)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1499, file: !151, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1499, file: !151, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1499, file: !151, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1499, file: !151, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1499, file: !151, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1499, file: !151, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1499, file: !151, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1499, file: !151, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1499, file: !151, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1499, file: !151, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1499, file: !151, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1499, file: !151, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1499, file: !151, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1499, file: !151, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1499, file: !151, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1499, file: !151, line: 2305, baseType: !7, size: 32, offset: 512)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1499, file: !151, line: 2306, baseType: !1524, size: 32, offset: 544)
!1524 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1525, line: 31, baseType: !886)
!1525 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1499, file: !151, line: 2307, baseType: !1082, size: 64, offset: 576)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1499, file: !151, line: 2308, baseType: !1082, size: 64, offset: 640)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1499, file: !151, line: 2314, baseType: !1529, size: 64, offset: 704)
!1529 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !151, line: 2309, size: 64, elements: !1530)
!1530 = !{!1531, !1532, !1533}
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1529, file: !151, line: 2310, baseType: !886, size: 32)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1529, file: !151, line: 2311, baseType: !1053, size: 64)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1529, file: !151, line: 2312, baseType: !1534, size: 64)
!1534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1535, size: 64)
!1535 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !151, line: 2277, flags: DIFlagFwdDecl)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1499, file: !151, line: 2315, baseType: !1082, size: 64, offset: 768)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1499, file: !151, line: 2316, baseType: !1082, size: 64, offset: 832)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1499, file: !151, line: 2317, baseType: !1082, size: 64, offset: 896)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1499, file: !151, line: 2318, baseType: !1082, size: 64, offset: 960)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1499, file: !151, line: 2319, baseType: !1082, size: 64, offset: 1024)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1499, file: !151, line: 2320, baseType: !1082, size: 64, offset: 1088)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1499, file: !151, line: 2321, baseType: !1082, size: 64, offset: 1152)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1499, file: !151, line: 2322, baseType: !1082, size: 64, offset: 1216)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1499, file: !151, line: 2324, baseType: !1545, size: 64, offset: 1280)
!1545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1546, size: 64)
!1546 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !151, line: 2324, flags: DIFlagFwdDecl)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1084, file: !151, line: 3395, baseType: !1548, size: 320)
!1548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !151, line: 1469, size: 320, elements: !1549)
!1549 = !{!1550, !1551, !1552}
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1548, file: !151, line: 1470, baseType: !1120, size: 192)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1548, file: !151, line: 1471, baseType: !1082, size: 64, offset: 192)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1548, file: !151, line: 1472, baseType: !1082, size: 64, offset: 256)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1084, file: !151, line: 3396, baseType: !1554, size: 320)
!1554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !151, line: 1482, size: 320, elements: !1555)
!1555 = !{!1556, !1557, !1558}
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1554, file: !151, line: 1483, baseType: !1120, size: 192)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1554, file: !151, line: 1484, baseType: !886, size: 32, offset: 192)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1554, file: !151, line: 1485, baseType: !1559, size: 64, offset: 256)
!1559 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1082, size: 64, elements: !901)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1084, file: !151, line: 3397, baseType: !1561, size: 384)
!1561 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !151, line: 1829, size: 384, elements: !1562)
!1562 = !{!1563, !1564, !1565, !1566}
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1561, file: !151, line: 1830, baseType: !1120, size: 192)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1561, file: !151, line: 1831, baseType: !1201, size: 32, offset: 192)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1561, file: !151, line: 1832, baseType: !1082, size: 64, offset: 256)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1561, file: !151, line: 1835, baseType: !1559, size: 64, offset: 320)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1084, file: !151, line: 3398, baseType: !1568, size: 704)
!1568 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !151, line: 1898, size: 704, elements: !1569)
!1569 = !{!1570, !1571, !1572, !1576, !1577, !1580}
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1568, file: !151, line: 1899, baseType: !1120, size: 192)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1568, file: !151, line: 1902, baseType: !1082, size: 64, offset: 192)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1568, file: !151, line: 1905, baseType: !1573, size: 64, offset: 256)
!1573 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !931, line: 58, baseType: !1574)
!1574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1575, size: 64)
!1575 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !931, line: 57, flags: DIFlagFwdDecl)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1568, file: !151, line: 1908, baseType: !7, size: 32, offset: 320)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1568, file: !151, line: 1911, baseType: !1578, size: 64, offset: 384)
!1578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1579, size: 64)
!1579 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !151, line: 1876, flags: DIFlagFwdDecl)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1568, file: !151, line: 1914, baseType: !1581, size: 256, offset: 448)
!1581 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !151, line: 1883, size: 256, elements: !1582)
!1582 = !{!1583, !1585, !1586, !1591}
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1581, file: !151, line: 1884, baseType: !1584, size: 64)
!1584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1581, size: 64)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1581, file: !151, line: 1885, baseType: !1584, size: 64, offset: 64)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1581, file: !151, line: 1891, baseType: !1587, size: 64, offset: 128)
!1587 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1581, file: !151, line: 1891, size: 64, elements: !1588)
!1588 = !{!1589, !1590}
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1587, file: !151, line: 1891, baseType: !1573, size: 64)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1587, file: !151, line: 1891, baseType: !1082, size: 64)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1581, file: !151, line: 1892, baseType: !1592, size: 64, offset: 192)
!1592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1082, size: 64)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1084, file: !151, line: 3399, baseType: !1594, size: 704)
!1594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !151, line: 2008, size: 704, elements: !1595)
!1595 = !{!1596, !1597, !1598, !1599, !1600, !1601, !1613, !1614, !1615, !1616, !1617}
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1594, file: !151, line: 2009, baseType: !1120, size: 192)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1594, file: !151, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1594, file: !151, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1594, file: !151, line: 2014, baseType: !1201, size: 32, offset: 224)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1594, file: !151, line: 2016, baseType: !1082, size: 64, offset: 256)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1594, file: !151, line: 2017, baseType: !1602, size: 64, offset: 320)
!1602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1603, size: 64)
!1603 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !151, line: 183, baseType: !1604)
!1604 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !151, line: 183, size: 128, elements: !1605)
!1605 = !{!1606}
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1604, file: !151, line: 183, baseType: !1607, size: 128)
!1607 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !151, line: 182, baseType: !1608)
!1608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !151, line: 182, size: 128, elements: !1609)
!1609 = !{!1610, !1611, !1612}
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1608, file: !151, line: 182, baseType: !7, size: 32)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1608, file: !151, line: 182, baseType: !7, size: 32, offset: 32)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1608, file: !151, line: 182, baseType: !1559, size: 64, offset: 64)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1594, file: !151, line: 2019, baseType: !1082, size: 64, offset: 384)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1594, file: !151, line: 2020, baseType: !1082, size: 64, offset: 448)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1594, file: !151, line: 2021, baseType: !1082, size: 64, offset: 512)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1594, file: !151, line: 2022, baseType: !1082, size: 64, offset: 576)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1594, file: !151, line: 2023, baseType: !1082, size: 64, offset: 640)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1084, file: !151, line: 3400, baseType: !1619, size: 832)
!1619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !151, line: 2430, size: 832, elements: !1620)
!1620 = !{!1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630}
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1619, file: !151, line: 2431, baseType: !1120, size: 192)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1619, file: !151, line: 2433, baseType: !1082, size: 64, offset: 192)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1619, file: !151, line: 2434, baseType: !1082, size: 64, offset: 256)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1619, file: !151, line: 2435, baseType: !1082, size: 64, offset: 320)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1619, file: !151, line: 2436, baseType: !1082, size: 64, offset: 384)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1619, file: !151, line: 2437, baseType: !1602, size: 64, offset: 448)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1619, file: !151, line: 2438, baseType: !1082, size: 64, offset: 512)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1619, file: !151, line: 2440, baseType: !1082, size: 64, offset: 576)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1619, file: !151, line: 2441, baseType: !1082, size: 64, offset: 640)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1619, file: !151, line: 2443, baseType: !1631, size: 128, offset: 704)
!1631 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !151, line: 182, baseType: !1632)
!1632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !151, line: 182, size: 128, elements: !1633)
!1633 = !{!1634}
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1632, file: !151, line: 182, baseType: !1607, size: 128)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1084, file: !151, line: 3401, baseType: !1636, size: 320)
!1636 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !151, line: 3327, size: 320, elements: !1637)
!1637 = !{!1638, !1639, !1646}
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1636, file: !151, line: 3329, baseType: !1120, size: 192)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1636, file: !151, line: 3330, baseType: !1640, size: 64, offset: 192)
!1640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1641, size: 64)
!1641 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !151, line: 3320, size: 192, elements: !1642)
!1642 = !{!1643, !1644, !1645}
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1641, file: !151, line: 3322, baseType: !1640, size: 64)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1641, file: !151, line: 3323, baseType: !1640, size: 64, offset: 64)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1641, file: !151, line: 3324, baseType: !1082, size: 64, offset: 128)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1636, file: !151, line: 3331, baseType: !1640, size: 64, offset: 256)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1084, file: !151, line: 3402, baseType: !1648, size: 256)
!1648 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !151, line: 1540, size: 256, elements: !1649)
!1649 = !{!1650, !1651}
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1648, file: !151, line: 1541, baseType: !1120, size: 192)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1648, file: !151, line: 1542, baseType: !1652, size: 64, offset: 192)
!1652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1653, size: 64)
!1653 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !151, line: 1538, baseType: !1654)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !151, line: 1538, size: 192, elements: !1655)
!1655 = !{!1656}
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1654, file: !151, line: 1538, baseType: !1657, size: 192)
!1657 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !151, line: 1537, baseType: !1658)
!1658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !151, line: 1537, size: 192, elements: !1659)
!1659 = !{!1660, !1661, !1662}
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1658, file: !151, line: 1537, baseType: !7, size: 32)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1658, file: !151, line: 1537, baseType: !7, size: 32, offset: 32)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1658, file: !151, line: 1537, baseType: !1663, size: 128, offset: 64)
!1663 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1664, size: 128, elements: !901)
!1664 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !151, line: 1535, baseType: !1665)
!1665 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !151, line: 1532, size: 128, elements: !1666)
!1666 = !{!1667, !1668}
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1665, file: !151, line: 1533, baseType: !1082, size: 64)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1665, file: !151, line: 1534, baseType: !1082, size: 64, offset: 64)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1084, file: !151, line: 3403, baseType: !1670, size: 512)
!1670 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !151, line: 1938, size: 512, elements: !1671)
!1671 = !{!1672, !1673, !1674, !1675, !1681, !1682, !1683}
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1670, file: !151, line: 1939, baseType: !1120, size: 192)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1670, file: !151, line: 1940, baseType: !1201, size: 32, offset: 192)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1670, file: !151, line: 1941, baseType: !150, size: 32, offset: 224)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1670, file: !151, line: 1946, baseType: !1676, size: 32, offset: 256)
!1676 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !151, line: 1942, size: 32, elements: !1677)
!1677 = !{!1678, !1679, !1680}
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1676, file: !151, line: 1943, baseType: !169, size: 32)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1676, file: !151, line: 1944, baseType: !176, size: 32)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1676, file: !151, line: 1945, baseType: !183, size: 32)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1670, file: !151, line: 1950, baseType: !1024, size: 64, offset: 320)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1670, file: !151, line: 1951, baseType: !1024, size: 64, offset: 384)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1670, file: !151, line: 1953, baseType: !1559, size: 64, offset: 448)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1084, file: !151, line: 3404, baseType: !1685, size: 1664)
!1685 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !151, line: 3337, size: 1664, elements: !1686)
!1686 = !{!1687, !1688}
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1685, file: !151, line: 3338, baseType: !1120, size: 192)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1685, file: !151, line: 3341, baseType: !1689, size: 1472, offset: 192)
!1689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1690, line: 410, size: 1472, elements: !1691)
!1690 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1691 = !{!1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1689, file: !1690, line: 412, baseType: !886, size: 32)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1689, file: !1690, line: 413, baseType: !886, size: 32, offset: 32)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1689, file: !1690, line: 414, baseType: !886, size: 32, offset: 64)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1689, file: !1690, line: 415, baseType: !886, size: 32, offset: 96)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1689, file: !1690, line: 416, baseType: !886, size: 32, offset: 128)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1689, file: !1690, line: 417, baseType: !886, size: 32, offset: 160)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1689, file: !1690, line: 418, baseType: !918, size: 8, offset: 192)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1689, file: !1690, line: 419, baseType: !918, size: 8, offset: 200)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1689, file: !1690, line: 420, baseType: !1701, size: 8, offset: 208)
!1701 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1689, file: !1690, line: 421, baseType: !1701, size: 8, offset: 216)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1689, file: !1690, line: 422, baseType: !1701, size: 8, offset: 224)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1689, file: !1690, line: 423, baseType: !1701, size: 8, offset: 232)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1689, file: !1690, line: 424, baseType: !1701, size: 8, offset: 240)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1689, file: !1690, line: 425, baseType: !1701, size: 8, offset: 248)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1689, file: !1690, line: 426, baseType: !1701, size: 8, offset: 256)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1689, file: !1690, line: 427, baseType: !1701, size: 8, offset: 264)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1689, file: !1690, line: 428, baseType: !1701, size: 8, offset: 272)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1689, file: !1690, line: 429, baseType: !1701, size: 8, offset: 280)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1689, file: !1690, line: 430, baseType: !1701, size: 8, offset: 288)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1689, file: !1690, line: 431, baseType: !1701, size: 8, offset: 296)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1689, file: !1690, line: 432, baseType: !1701, size: 8, offset: 304)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1689, file: !1690, line: 433, baseType: !1701, size: 8, offset: 312)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1689, file: !1690, line: 434, baseType: !1701, size: 8, offset: 320)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1689, file: !1690, line: 435, baseType: !1701, size: 8, offset: 328)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1689, file: !1690, line: 436, baseType: !1701, size: 8, offset: 336)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1689, file: !1690, line: 437, baseType: !1701, size: 8, offset: 344)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1689, file: !1690, line: 438, baseType: !1701, size: 8, offset: 352)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1689, file: !1690, line: 439, baseType: !1701, size: 8, offset: 360)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1689, file: !1690, line: 440, baseType: !1701, size: 8, offset: 368)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1689, file: !1690, line: 441, baseType: !1701, size: 8, offset: 376)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1689, file: !1690, line: 442, baseType: !1701, size: 8, offset: 384)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1689, file: !1690, line: 443, baseType: !1701, size: 8, offset: 392)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1689, file: !1690, line: 444, baseType: !1701, size: 8, offset: 400)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1689, file: !1690, line: 445, baseType: !1701, size: 8, offset: 408)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1689, file: !1690, line: 446, baseType: !1701, size: 8, offset: 416)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1689, file: !1690, line: 447, baseType: !1701, size: 8, offset: 424)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1689, file: !1690, line: 448, baseType: !1701, size: 8, offset: 432)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1689, file: !1690, line: 449, baseType: !1701, size: 8, offset: 440)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1689, file: !1690, line: 450, baseType: !1701, size: 8, offset: 448)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1689, file: !1690, line: 451, baseType: !1701, size: 8, offset: 456)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1689, file: !1690, line: 452, baseType: !1701, size: 8, offset: 464)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1689, file: !1690, line: 453, baseType: !1701, size: 8, offset: 472)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1689, file: !1690, line: 454, baseType: !1701, size: 8, offset: 480)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1689, file: !1690, line: 455, baseType: !1701, size: 8, offset: 488)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1689, file: !1690, line: 456, baseType: !1701, size: 8, offset: 496)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1689, file: !1690, line: 457, baseType: !1701, size: 8, offset: 504)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1689, file: !1690, line: 458, baseType: !1701, size: 8, offset: 512)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1689, file: !1690, line: 459, baseType: !1701, size: 8, offset: 520)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1689, file: !1690, line: 460, baseType: !1701, size: 8, offset: 528)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1689, file: !1690, line: 461, baseType: !1701, size: 8, offset: 536)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1689, file: !1690, line: 462, baseType: !1701, size: 8, offset: 544)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1689, file: !1690, line: 463, baseType: !1701, size: 8, offset: 552)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1689, file: !1690, line: 464, baseType: !1701, size: 8, offset: 560)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1689, file: !1690, line: 465, baseType: !1701, size: 8, offset: 568)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1689, file: !1690, line: 466, baseType: !1701, size: 8, offset: 576)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1689, file: !1690, line: 467, baseType: !1701, size: 8, offset: 584)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1689, file: !1690, line: 468, baseType: !1701, size: 8, offset: 592)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1689, file: !1690, line: 469, baseType: !1701, size: 8, offset: 600)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1689, file: !1690, line: 470, baseType: !1701, size: 8, offset: 608)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1689, file: !1690, line: 471, baseType: !1701, size: 8, offset: 616)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1689, file: !1690, line: 472, baseType: !1701, size: 8, offset: 624)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1689, file: !1690, line: 473, baseType: !1701, size: 8, offset: 632)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1689, file: !1690, line: 474, baseType: !1701, size: 8, offset: 640)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1689, file: !1690, line: 475, baseType: !1701, size: 8, offset: 648)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1689, file: !1690, line: 476, baseType: !1701, size: 8, offset: 656)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1689, file: !1690, line: 477, baseType: !1701, size: 8, offset: 664)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1689, file: !1690, line: 478, baseType: !1701, size: 8, offset: 672)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1689, file: !1690, line: 479, baseType: !1701, size: 8, offset: 680)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1689, file: !1690, line: 480, baseType: !1701, size: 8, offset: 688)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1689, file: !1690, line: 481, baseType: !1701, size: 8, offset: 696)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1689, file: !1690, line: 482, baseType: !1701, size: 8, offset: 704)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1689, file: !1690, line: 483, baseType: !1701, size: 8, offset: 712)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1689, file: !1690, line: 484, baseType: !1701, size: 8, offset: 720)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1689, file: !1690, line: 485, baseType: !1701, size: 8, offset: 728)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1689, file: !1690, line: 486, baseType: !1701, size: 8, offset: 736)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1689, file: !1690, line: 487, baseType: !1701, size: 8, offset: 744)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1689, file: !1690, line: 488, baseType: !1701, size: 8, offset: 752)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1689, file: !1690, line: 489, baseType: !1701, size: 8, offset: 760)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1689, file: !1690, line: 490, baseType: !1701, size: 8, offset: 768)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1689, file: !1690, line: 491, baseType: !1701, size: 8, offset: 776)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1689, file: !1690, line: 492, baseType: !1701, size: 8, offset: 784)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1689, file: !1690, line: 493, baseType: !1701, size: 8, offset: 792)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1689, file: !1690, line: 494, baseType: !1701, size: 8, offset: 800)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1689, file: !1690, line: 495, baseType: !1701, size: 8, offset: 808)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1689, file: !1690, line: 496, baseType: !1701, size: 8, offset: 816)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1689, file: !1690, line: 497, baseType: !1701, size: 8, offset: 824)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1689, file: !1690, line: 498, baseType: !1701, size: 8, offset: 832)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1689, file: !1690, line: 499, baseType: !1701, size: 8, offset: 840)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1689, file: !1690, line: 500, baseType: !1701, size: 8, offset: 848)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1689, file: !1690, line: 501, baseType: !1701, size: 8, offset: 856)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1689, file: !1690, line: 502, baseType: !1701, size: 8, offset: 864)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1689, file: !1690, line: 503, baseType: !1701, size: 8, offset: 872)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1689, file: !1690, line: 504, baseType: !1701, size: 8, offset: 880)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1689, file: !1690, line: 505, baseType: !1701, size: 8, offset: 888)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1689, file: !1690, line: 506, baseType: !1701, size: 8, offset: 896)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1689, file: !1690, line: 507, baseType: !1701, size: 8, offset: 904)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1689, file: !1690, line: 508, baseType: !1701, size: 8, offset: 912)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1689, file: !1690, line: 509, baseType: !1701, size: 8, offset: 920)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1689, file: !1690, line: 510, baseType: !1701, size: 8, offset: 928)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1689, file: !1690, line: 511, baseType: !1701, size: 8, offset: 936)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1689, file: !1690, line: 512, baseType: !1701, size: 8, offset: 944)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1689, file: !1690, line: 513, baseType: !1701, size: 8, offset: 952)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1689, file: !1690, line: 514, baseType: !1701, size: 8, offset: 960)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1689, file: !1690, line: 515, baseType: !1701, size: 8, offset: 968)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1689, file: !1690, line: 516, baseType: !1701, size: 8, offset: 976)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1689, file: !1690, line: 517, baseType: !1701, size: 8, offset: 984)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1689, file: !1690, line: 518, baseType: !1701, size: 8, offset: 992)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1689, file: !1690, line: 519, baseType: !1701, size: 8, offset: 1000)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1689, file: !1690, line: 520, baseType: !1701, size: 8, offset: 1008)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1689, file: !1690, line: 521, baseType: !1701, size: 8, offset: 1016)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1689, file: !1690, line: 522, baseType: !1701, size: 8, offset: 1024)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1689, file: !1690, line: 523, baseType: !1701, size: 8, offset: 1032)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1689, file: !1690, line: 524, baseType: !1701, size: 8, offset: 1040)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1689, file: !1690, line: 525, baseType: !1701, size: 8, offset: 1048)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1689, file: !1690, line: 526, baseType: !1701, size: 8, offset: 1056)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1689, file: !1690, line: 527, baseType: !1701, size: 8, offset: 1064)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1689, file: !1690, line: 528, baseType: !1701, size: 8, offset: 1072)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1689, file: !1690, line: 529, baseType: !1701, size: 8, offset: 1080)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1689, file: !1690, line: 530, baseType: !1701, size: 8, offset: 1088)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1689, file: !1690, line: 531, baseType: !1701, size: 8, offset: 1096)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1689, file: !1690, line: 532, baseType: !1701, size: 8, offset: 1104)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1689, file: !1690, line: 533, baseType: !1701, size: 8, offset: 1112)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1689, file: !1690, line: 534, baseType: !1701, size: 8, offset: 1120)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1689, file: !1690, line: 535, baseType: !1701, size: 8, offset: 1128)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1689, file: !1690, line: 536, baseType: !1701, size: 8, offset: 1136)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1689, file: !1690, line: 537, baseType: !1701, size: 8, offset: 1144)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1689, file: !1690, line: 538, baseType: !1701, size: 8, offset: 1152)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1689, file: !1690, line: 539, baseType: !1701, size: 8, offset: 1160)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1689, file: !1690, line: 540, baseType: !1701, size: 8, offset: 1168)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1689, file: !1690, line: 541, baseType: !1701, size: 8, offset: 1176)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1689, file: !1690, line: 542, baseType: !1701, size: 8, offset: 1184)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1689, file: !1690, line: 543, baseType: !1701, size: 8, offset: 1192)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1689, file: !1690, line: 544, baseType: !1701, size: 8, offset: 1200)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1689, file: !1690, line: 545, baseType: !1701, size: 8, offset: 1208)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1689, file: !1690, line: 546, baseType: !1701, size: 8, offset: 1216)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1689, file: !1690, line: 547, baseType: !1701, size: 8, offset: 1224)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1689, file: !1690, line: 548, baseType: !1701, size: 8, offset: 1232)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1689, file: !1690, line: 549, baseType: !1701, size: 8, offset: 1240)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1689, file: !1690, line: 550, baseType: !1701, size: 8, offset: 1248)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1689, file: !1690, line: 551, baseType: !1701, size: 8, offset: 1256)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1689, file: !1690, line: 552, baseType: !1701, size: 8, offset: 1264)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1689, file: !1690, line: 553, baseType: !1701, size: 8, offset: 1272)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1689, file: !1690, line: 554, baseType: !1701, size: 8, offset: 1280)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1689, file: !1690, line: 555, baseType: !1701, size: 8, offset: 1288)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1689, file: !1690, line: 556, baseType: !1701, size: 8, offset: 1296)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1689, file: !1690, line: 557, baseType: !1701, size: 8, offset: 1304)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1689, file: !1690, line: 558, baseType: !1701, size: 8, offset: 1312)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1689, file: !1690, line: 559, baseType: !1701, size: 8, offset: 1320)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1689, file: !1690, line: 560, baseType: !1701, size: 8, offset: 1328)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1689, file: !1690, line: 561, baseType: !1701, size: 8, offset: 1336)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1689, file: !1690, line: 562, baseType: !1701, size: 8, offset: 1344)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1689, file: !1690, line: 563, baseType: !1701, size: 8, offset: 1352)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1689, file: !1690, line: 564, baseType: !1701, size: 8, offset: 1360)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1689, file: !1690, line: 565, baseType: !1701, size: 8, offset: 1368)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1689, file: !1690, line: 566, baseType: !1701, size: 8, offset: 1376)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1689, file: !1690, line: 567, baseType: !1701, size: 8, offset: 1384)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1689, file: !1690, line: 568, baseType: !1701, size: 8, offset: 1392)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1689, file: !1690, line: 569, baseType: !1701, size: 8, offset: 1400)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1689, file: !1690, line: 570, baseType: !1701, size: 8, offset: 1408)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1689, file: !1690, line: 571, baseType: !1701, size: 8, offset: 1416)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1689, file: !1690, line: 572, baseType: !1701, size: 8, offset: 1424)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1689, file: !1690, line: 573, baseType: !1701, size: 8, offset: 1432)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1689, file: !1690, line: 574, baseType: !1701, size: 8, offset: 1440)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1084, file: !151, line: 3405, baseType: !1857, size: 384)
!1857 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !151, line: 3352, size: 384, elements: !1858)
!1858 = !{!1859, !1860}
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1857, file: !151, line: 3353, baseType: !1120, size: 192)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1857, file: !151, line: 3356, baseType: !1861, size: 192, offset: 192)
!1861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1690, line: 578, size: 192, elements: !1862)
!1862 = !{!1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1861, file: !1690, line: 580, baseType: !886, size: 32)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1861, file: !1690, line: 581, baseType: !886, size: 32, offset: 32)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1861, file: !1690, line: 582, baseType: !886, size: 32, offset: 64)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1861, file: !1690, line: 583, baseType: !886, size: 32, offset: 96)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1861, file: !1690, line: 584, baseType: !918, size: 8, offset: 128)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1861, file: !1690, line: 585, baseType: !918, size: 8, offset: 136)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1861, file: !1690, line: 586, baseType: !918, size: 8, offset: 144)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1861, file: !1690, line: 587, baseType: !918, size: 8, offset: 152)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1861, file: !1690, line: 588, baseType: !918, size: 8, offset: 160)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1861, file: !1690, line: 589, baseType: !918, size: 8, offset: 168)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1861, file: !1690, line: 590, baseType: !918, size: 8, offset: 176)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1048, file: !378, line: 178, baseType: !998, size: 64)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1048, file: !378, line: 179, baseType: !1876, size: 64)
!1876 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1877, size: 64)
!1877 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !378, line: 150, baseType: !1878)
!1878 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !378, line: 142, size: 320, elements: !1879)
!1879 = !{!1880, !1881, !1882, !1883, !1884, !1885}
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1878, file: !378, line: 144, baseType: !1082, size: 64)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1878, file: !378, line: 145, baseType: !1028, size: 64, offset: 64)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1878, file: !378, line: 146, baseType: !1028, size: 64, offset: 128)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1878, file: !378, line: 147, baseType: !1524, size: 32, offset: 192)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1878, file: !378, line: 148, baseType: !7, size: 32, offset: 224)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1878, file: !378, line: 149, baseType: !918, size: 8, offset: 256)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1048, file: !378, line: 180, baseType: !1887, size: 64)
!1887 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1888, size: 64)
!1888 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !378, line: 162, baseType: !1889)
!1889 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !378, line: 159, size: 128, elements: !1890)
!1890 = !{!1891, !1892}
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1889, file: !378, line: 160, baseType: !1082, size: 64)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1889, file: !378, line: 161, baseType: !964, size: 64, offset: 64)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1048, file: !378, line: 181, baseType: !1894, size: 64)
!1894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1895, size: 64)
!1895 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !378, line: 181, flags: DIFlagFwdDecl)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1043, file: !378, line: 317, baseType: !1897, size: 64)
!1897 = !DICompositeType(tag: DW_TAG_array_type, baseType: !964, size: 64, elements: !901)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1043, file: !378, line: 318, baseType: !1899, size: 320)
!1899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !378, line: 188, size: 320, elements: !1900)
!1900 = !{!1901, !1903, !1958}
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1899, file: !378, line: 190, baseType: !1902, size: 192)
!1902 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1047, size: 192, elements: !1153)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1899, file: !378, line: 193, baseType: !1904, size: 64, offset: 192)
!1904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1905, size: 64)
!1905 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !378, line: 206, size: 320, elements: !1906)
!1906 = !{!1907, !1943, !1944, !1945, !1957}
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1905, file: !378, line: 208, baseType: !1908, size: 64)
!1908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1909, size: 64)
!1909 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !931, line: 62, baseType: !1910)
!1910 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1911, line: 538, size: 256, elements: !1912)
!1911 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1912 = !{!1913, !1917, !1923, !1934}
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1910, file: !1911, line: 539, baseType: !1914, size: 32)
!1914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1911, line: 482, size: 32, elements: !1915)
!1915 = !{!1916}
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1914, file: !1911, line: 484, baseType: !7, size: 32)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !1910, file: !1911, line: 540, baseType: !1918, size: 192)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1911, line: 488, size: 192, elements: !1919)
!1919 = !{!1920, !1921, !1922}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1918, file: !1911, line: 489, baseType: !1914, size: 32)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1918, file: !1911, line: 492, baseType: !1053, size: 64, offset: 64)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1918, file: !1911, line: 496, baseType: !1082, size: 64, offset: 128)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !1910, file: !1911, line: 541, baseType: !1924, size: 256)
!1924 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1911, line: 504, size: 256, elements: !1925)
!1925 = !{!1926, !1927, !1932, !1933}
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1924, file: !1911, line: 505, baseType: !1914, size: 32)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1924, file: !1911, line: 509, baseType: !1928, size: 64, offset: 64)
!1928 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1911, line: 501, baseType: !1929)
!1929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1930, size: 64)
!1930 = !DISubroutineType(types: !1931)
!1931 = !{null, !1382}
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1924, file: !1911, line: 510, baseType: !1382, size: 64, offset: 128)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1924, file: !1911, line: 513, baseType: !1908, size: 64, offset: 192)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !1910, file: !1911, line: 542, baseType: !1935, size: 128)
!1935 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1911, line: 530, size: 128, elements: !1936)
!1936 = !{!1937, !1938}
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1935, file: !1911, line: 531, baseType: !1914, size: 32)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1935, file: !1911, line: 534, baseType: !1939, size: 64, offset: 64)
!1939 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1911, line: 525, baseType: !1940)
!1940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1941, size: 64)
!1941 = !DISubroutineType(types: !1942)
!1942 = !{!918, !1082, !1053, !903, !903}
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1905, file: !378, line: 211, baseType: !7, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1905, file: !378, line: 214, baseType: !964, size: 64, offset: 128)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1905, file: !378, line: 224, baseType: !1946, size: 64, offset: 192)
!1946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1947, size: 64)
!1947 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !378, line: 202, baseType: !1948)
!1948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !378, line: 202, size: 128, elements: !1949)
!1949 = !{!1950}
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1948, file: !378, line: 202, baseType: !1951, size: 128)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !378, line: 200, baseType: !1952)
!1952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !378, line: 200, size: 128, elements: !1953)
!1953 = !{!1954, !1955, !1956}
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1952, file: !378, line: 200, baseType: !7, size: 32)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1952, file: !378, line: 200, baseType: !7, size: 32, offset: 32)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1952, file: !378, line: 200, baseType: !1063, size: 64, offset: 64)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1905, file: !378, line: 234, baseType: !1946, size: 64, offset: 256)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1899, file: !378, line: 197, baseType: !964, size: 64, offset: 256)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1043, file: !378, line: 319, baseType: !1142, size: 256)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1043, file: !378, line: 320, baseType: !1161, size: 192)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1016, file: !135, line: 134, baseType: !904, size: 64, offset: 192)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1016, file: !135, line: 137, baseType: !1082, size: 64, offset: 256)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1016, file: !135, line: 138, baseType: !1201, size: 32, offset: 320)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1016, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1016, file: !135, line: 144, baseType: !886, size: 32, offset: 384)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1016, file: !135, line: 145, baseType: !886, size: 32, offset: 416)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1016, file: !135, line: 146, baseType: !1968, size: 64, offset: 448)
!1968 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !964)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !999, file: !135, line: 220, baseType: !1002, size: 64, offset: 64)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !999, file: !135, line: 223, baseType: !904, size: 64, offset: 128)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !999, file: !135, line: 226, baseType: !1972, size: 64, offset: 192)
!1972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1973, size: 64)
!1973 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !135, line: 185, flags: DIFlagFwdDecl)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !999, file: !135, line: 229, baseType: !1975, size: 128, offset: 256)
!1975 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1976, size: 128, elements: !948)
!1976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1977, size: 64)
!1977 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !999, file: !135, line: 232, baseType: !998, size: 64, offset: 384)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !999, file: !135, line: 233, baseType: !998, size: 64, offset: 448)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !999, file: !135, line: 238, baseType: !1981, size: 64, offset: 512)
!1981 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !1982)
!1982 = !{!1983, !1989}
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1981, file: !135, line: 236, baseType: !1984, size: 64)
!1984 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1985, size: 64)
!1985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !1986)
!1986 = !{!1987, !1988}
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1985, file: !135, line: 275, baseType: !1024, size: 64)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1985, file: !135, line: 278, baseType: !1024, size: 64, offset: 64)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1981, file: !135, line: 237, baseType: !1990, size: 64)
!1990 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1991, size: 64)
!1991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !1992)
!1992 = !{!1993, !1994, !1995, !1996, !1997}
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1991, file: !135, line: 261, baseType: !1028, size: 64)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1991, file: !135, line: 262, baseType: !1028, size: 64, offset: 64)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1991, file: !135, line: 266, baseType: !1028, size: 64, offset: 128)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1991, file: !135, line: 267, baseType: !1028, size: 64, offset: 192)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1991, file: !135, line: 270, baseType: !886, size: 32, offset: 256)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !999, file: !135, line: 241, baseType: !1968, size: 64, offset: 576)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !999, file: !135, line: 244, baseType: !886, size: 32, offset: 640)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !999, file: !135, line: 247, baseType: !886, size: 32, offset: 672)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !999, file: !135, line: 250, baseType: !886, size: 32, offset: 704)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !999, file: !135, line: 253, baseType: !886, size: 32, offset: 736)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !999, file: !135, line: 256, baseType: !886, size: 32, offset: 768)
!2004 = !DIDerivedType(tag: DW_TAG_typedef, name: "stack", file: !3, line: 208, baseType: !2005)
!2005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !910, size: 64)
!2006 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1028, size: 64)
!2007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2006, size: 64)
!2008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !772, size: 64)
!2009 = !{!0, !2010, !2038, !2040, !2042, !2047, !2049, !2051, !2053, !2055}
!2010 = !DIGlobalVariableExpression(var: !2011, expr: !DIExpression())
!2011 = distinct !DIGlobalVariable(name: "pass_stack_regs", scope: !2, file: !3, line: 3274, type: !2012, isLocal: false, isDefinition: true)
!2012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !521, line: 162, size: 640, elements: !2013)
!2013 = !{!2014}
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2012, file: !521, line: 164, baseType: !2015, size: 640)
!2015 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !521, line: 114, size: 640, elements: !2016)
!2016 = !{!2017, !2018, !2019, !2023, !2027, !2029, !2030, !2031, !2033, !2034, !2035, !2036, !2037}
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2015, file: !521, line: 117, baseType: !520, size: 32)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2015, file: !521, line: 121, baseType: !1053, size: 64, offset: 64)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2015, file: !521, line: 125, baseType: !2020, size: 64, offset: 128)
!2020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2021, size: 64)
!2021 = !DISubroutineType(types: !2022)
!2022 = !{!918}
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2015, file: !521, line: 130, baseType: !2024, size: 64, offset: 192)
!2024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2025, size: 64)
!2025 = !DISubroutineType(types: !2026)
!2026 = !{!7}
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2015, file: !521, line: 133, baseType: !2028, size: 64, offset: 256)
!2028 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2015, size: 64)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2015, file: !521, line: 136, baseType: !2028, size: 64, offset: 320)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2015, file: !521, line: 139, baseType: !886, size: 32, offset: 384)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2015, file: !521, line: 143, baseType: !2032, size: 32, offset: 416)
!2032 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !528, line: 80, baseType: !527)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2015, file: !521, line: 146, baseType: !7, size: 32, offset: 448)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2015, file: !521, line: 147, baseType: !7, size: 32, offset: 480)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2015, file: !521, line: 148, baseType: !7, size: 32, offset: 512)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2015, file: !521, line: 151, baseType: !7, size: 32, offset: 544)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2015, file: !521, line: 152, baseType: !7, size: 32, offset: 576)
!2038 = !DIGlobalVariableExpression(var: !2039, expr: !DIExpression())
!2039 = distinct !DIGlobalVariable(name: "pass_stack_regs_run", scope: !2, file: !3, line: 3305, type: !2012, isLocal: false, isDefinition: true)
!2040 = !DIGlobalVariableExpression(var: !2041, expr: !DIExpression())
!2041 = distinct !DIGlobalVariable(name: "stack_regs_mentioned_data", scope: !2, file: !3, line: 188, type: !887, isLocal: true, isDefinition: true)
!2042 = !DIGlobalVariableExpression(var: !2043, expr: !DIExpression())
!2043 = distinct !DIGlobalVariable(name: "FP_mode_reg", scope: !2, file: !3, line: 242, type: !2044, isLocal: true, isDefinition: true)
!2044 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1028, size: 44544, elements: !2045)
!2045 = !{!920, !2046}
!2046 = !DISubrange(count: 87)
!2047 = !DIGlobalVariableExpression(var: !2048, expr: !DIExpression())
!2048 = distinct !DIGlobalVariable(name: "ix86_flags_rtx", scope: !2, file: !3, line: 337, type: !1028, isLocal: true, isDefinition: true)
!2049 = !DIGlobalVariableExpression(var: !2050, expr: !DIExpression())
!2050 = distinct !DIGlobalVariable(name: "not_a_num", scope: !2, file: !3, line: 248, type: !1028, isLocal: true, isDefinition: true)
!2051 = !DIGlobalVariableExpression(var: !2052, expr: !DIExpression())
!2052 = distinct !DIGlobalVariable(name: "any_malformed_asm", scope: !2, file: !3, line: 454, type: !918, isLocal: true, isDefinition: true)
!2053 = !DIGlobalVariableExpression(var: !2054, expr: !DIExpression())
!2054 = distinct !DIGlobalVariable(name: "current_block", scope: !2, file: !3, line: 233, type: !997, isLocal: true, isDefinition: true)
!2055 = !DIGlobalVariableExpression(var: !2056, expr: !DIExpression())
!2056 = distinct !DIGlobalVariable(name: "starting_stack_p", scope: !2, file: !3, line: 238, type: !918, isLocal: true, isDefinition: true)
!2057 = !{i32 7, !"Dwarf Version", i32 4}
!2058 = !{i32 2, !"Debug Info Version", i32 3}
!2059 = !{i32 1, !"wchar_size", i32 4}
!2060 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2061 = distinct !DISubprogram(name: "stack_regs_mentioned", scope: !3, file: !3, line: 308, type: !2062, scopeLine: 309, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2062 = !DISubroutineType(types: !2063)
!2063 = !{!886, !2064}
!2064 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !931, line: 51, baseType: !2065)
!2065 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2066, size: 64)
!2066 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1030)
!2067 = !{}
!2068 = !DILocalVariable(name: "insn", arg: 1, scope: !2061, file: !3, line: 308, type: !2064)
!2069 = !DILocation(line: 308, column: 33, scope: !2061)
!2070 = !DILocalVariable(name: "uid", scope: !2061, file: !3, line: 310, type: !7)
!2071 = !DILocation(line: 310, column: 16, scope: !2061)
!2072 = !DILocalVariable(name: "max", scope: !2061, file: !3, line: 310, type: !7)
!2073 = !DILocation(line: 310, column: 21, scope: !2061)
!2074 = !DILocalVariable(name: "test", scope: !2061, file: !3, line: 311, type: !886)
!2075 = !DILocation(line: 311, column: 7, scope: !2061)
!2076 = !DILocation(line: 313, column: 9, scope: !2077)
!2077 = distinct !DILexicalBlock(scope: !2061, file: !3, line: 313, column: 7)
!2078 = !DILocation(line: 313, column: 23, scope: !2077)
!2079 = !DILocation(line: 313, column: 27, scope: !2077)
!2080 = !DILocation(line: 313, column: 7, scope: !2061)
!2081 = !DILocation(line: 314, column: 5, scope: !2077)
!2082 = !DILocation(line: 316, column: 9, scope: !2061)
!2083 = !DILocation(line: 316, column: 7, scope: !2061)
!2084 = !DILocation(line: 317, column: 9, scope: !2061)
!2085 = !DILocation(line: 317, column: 7, scope: !2061)
!2086 = !DILocation(line: 318, column: 7, scope: !2087)
!2087 = distinct !DILexicalBlock(scope: !2061, file: !3, line: 318, column: 7)
!2088 = !DILocation(line: 318, column: 14, scope: !2087)
!2089 = !DILocation(line: 318, column: 11, scope: !2087)
!2090 = !DILocation(line: 318, column: 7, scope: !2061)
!2091 = !DILocation(line: 322, column: 13, scope: !2092)
!2092 = distinct !DILexicalBlock(scope: !2087, file: !3, line: 319, column: 5)
!2093 = !DILocation(line: 322, column: 19, scope: !2092)
!2094 = !DILocation(line: 322, column: 23, scope: !2092)
!2095 = !DILocation(line: 322, column: 17, scope: !2092)
!2096 = !DILocation(line: 322, column: 28, scope: !2092)
!2097 = !DILocation(line: 322, column: 11, scope: !2092)
!2098 = !DILocation(line: 323, column: 7, scope: !2092)
!2099 = !DILocation(line: 324, column: 5, scope: !2092)
!2100 = !DILocation(line: 326, column: 10, scope: !2061)
!2101 = !DILocation(line: 326, column: 8, scope: !2061)
!2102 = !DILocation(line: 327, column: 7, scope: !2103)
!2103 = distinct !DILexicalBlock(scope: !2061, file: !3, line: 327, column: 7)
!2104 = !DILocation(line: 327, column: 12, scope: !2103)
!2105 = !DILocation(line: 327, column: 7, scope: !2061)
!2106 = !DILocation(line: 330, column: 38, scope: !2107)
!2107 = distinct !DILexicalBlock(scope: !2103, file: !3, line: 328, column: 5)
!2108 = !DILocation(line: 330, column: 14, scope: !2107)
!2109 = !DILocation(line: 330, column: 12, scope: !2107)
!2110 = !DILocation(line: 331, column: 7, scope: !2107)
!2111 = !DILocation(line: 332, column: 5, scope: !2107)
!2112 = !DILocation(line: 334, column: 10, scope: !2061)
!2113 = !DILocation(line: 334, column: 15, scope: !2061)
!2114 = !DILocation(line: 334, column: 3, scope: !2061)
!2115 = !DILocation(line: 335, column: 1, scope: !2061)
!2116 = distinct !DISubprogram(name: "VEC_char_base_length", scope: !889, file: !889, line: 23, type: !2117, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2117 = !DISubroutineType(types: !2118)
!2118 = !{!7, !2119}
!2119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2120, size: 64)
!2120 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !893)
!2121 = !DILocalVariable(name: "vec_", arg: 1, scope: !2116, file: !889, line: 23, type: !2119)
!2122 = !DILocation(line: 23, column: 1, scope: !2116)
!2123 = distinct !DISubprogram(name: "VEC_char_heap_safe_grow_cleared", scope: !889, file: !889, line: 24, type: !2124, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2124 = !DISubroutineType(types: !2125)
!2125 = !{null, !2126, !886}
!2126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !887, size: 64)
!2127 = !DILocalVariable(name: "vec_", arg: 1, scope: !2123, file: !889, line: 24, type: !2126)
!2128 = !DILocation(line: 24, column: 1, scope: !2123)
!2129 = !DILocalVariable(name: "size_", arg: 2, scope: !2123, file: !889, line: 24, type: !886)
!2130 = !DILocalVariable(name: "oldsize", scope: !2123, file: !889, line: 24, type: !886)
!2131 = distinct !DISubprogram(name: "VEC_char_base_index", scope: !889, file: !889, line: 23, type: !2132, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2132 = !DISubroutineType(types: !2133)
!2133 = !{!900, !2119, !7}
!2134 = !DILocalVariable(name: "vec_", arg: 1, scope: !2131, file: !889, line: 23, type: !2119)
!2135 = !DILocation(line: 23, column: 1, scope: !2131)
!2136 = !DILocalVariable(name: "ix_", arg: 2, scope: !2131, file: !889, line: 23, type: !7)
!2137 = !DILocation(line: 0, scope: !2131)
!2138 = distinct !DISubprogram(name: "stack_regs_mentioned_p", scope: !3, file: !3, line: 279, type: !2062, scopeLine: 280, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2139 = !DILocalVariable(name: "pat", arg: 1, scope: !2138, file: !3, line: 279, type: !2064)
!2140 = !DILocation(line: 279, column: 35, scope: !2138)
!2141 = !DILocalVariable(name: "fmt", scope: !2138, file: !3, line: 281, type: !1053)
!2142 = !DILocation(line: 281, column: 15, scope: !2138)
!2143 = !DILocalVariable(name: "i", scope: !2138, file: !3, line: 282, type: !886)
!2144 = !DILocation(line: 282, column: 7, scope: !2138)
!2145 = !DILocation(line: 284, column: 7, scope: !2146)
!2146 = distinct !DILexicalBlock(scope: !2138, file: !3, line: 284, column: 7)
!2147 = !DILocation(line: 284, column: 7, scope: !2138)
!2148 = !DILocation(line: 285, column: 5, scope: !2146)
!2149 = !DILocation(line: 287, column: 9, scope: !2138)
!2150 = !DILocation(line: 287, column: 7, scope: !2138)
!2151 = !DILocation(line: 288, column: 12, scope: !2152)
!2152 = distinct !DILexicalBlock(scope: !2138, file: !3, line: 288, column: 3)
!2153 = !DILocation(line: 288, column: 44, scope: !2152)
!2154 = !DILocation(line: 288, column: 10, scope: !2152)
!2155 = !DILocation(line: 288, column: 8, scope: !2152)
!2156 = !DILocation(line: 288, column: 49, scope: !2157)
!2157 = distinct !DILexicalBlock(scope: !2152, file: !3, line: 288, column: 3)
!2158 = !DILocation(line: 288, column: 51, scope: !2157)
!2159 = !DILocation(line: 288, column: 3, scope: !2152)
!2160 = !DILocation(line: 290, column: 11, scope: !2161)
!2161 = distinct !DILexicalBlock(scope: !2162, file: !3, line: 290, column: 11)
!2162 = distinct !DILexicalBlock(scope: !2157, file: !3, line: 289, column: 5)
!2163 = !DILocation(line: 290, column: 15, scope: !2161)
!2164 = !DILocation(line: 290, column: 18, scope: !2161)
!2165 = !DILocation(line: 290, column: 11, scope: !2162)
!2166 = !DILocalVariable(name: "j", scope: !2167, file: !3, line: 292, type: !886)
!2167 = distinct !DILexicalBlock(scope: !2161, file: !3, line: 291, column: 2)
!2168 = !DILocation(line: 292, column: 8, scope: !2167)
!2169 = !DILocation(line: 294, column: 13, scope: !2170)
!2170 = distinct !DILexicalBlock(scope: !2167, file: !3, line: 294, column: 4)
!2171 = !DILocation(line: 294, column: 30, scope: !2170)
!2172 = !DILocation(line: 294, column: 11, scope: !2170)
!2173 = !DILocation(line: 294, column: 9, scope: !2170)
!2174 = !DILocation(line: 294, column: 35, scope: !2175)
!2175 = distinct !DILexicalBlock(scope: !2170, file: !3, line: 294, column: 4)
!2176 = !DILocation(line: 294, column: 37, scope: !2175)
!2177 = !DILocation(line: 294, column: 4, scope: !2170)
!2178 = !DILocation(line: 295, column: 34, scope: !2179)
!2179 = distinct !DILexicalBlock(scope: !2175, file: !3, line: 295, column: 10)
!2180 = !DILocation(line: 295, column: 10, scope: !2179)
!2181 = !DILocation(line: 295, column: 10, scope: !2175)
!2182 = !DILocation(line: 296, column: 8, scope: !2179)
!2183 = !DILocation(line: 295, column: 53, scope: !2179)
!2184 = !DILocation(line: 294, column: 44, scope: !2175)
!2185 = !DILocation(line: 294, column: 4, scope: !2175)
!2186 = distinct !{!2186, !2177, !2187}
!2187 = !DILocation(line: 296, column: 15, scope: !2170)
!2188 = !DILocation(line: 297, column: 2, scope: !2167)
!2189 = !DILocation(line: 298, column: 16, scope: !2190)
!2190 = distinct !DILexicalBlock(scope: !2161, file: !3, line: 298, column: 16)
!2191 = !DILocation(line: 298, column: 20, scope: !2190)
!2192 = !DILocation(line: 298, column: 23, scope: !2190)
!2193 = !DILocation(line: 298, column: 30, scope: !2190)
!2194 = !DILocation(line: 298, column: 57, scope: !2190)
!2195 = !DILocation(line: 298, column: 33, scope: !2190)
!2196 = !DILocation(line: 298, column: 16, scope: !2161)
!2197 = !DILocation(line: 299, column: 2, scope: !2190)
!2198 = !DILocation(line: 300, column: 5, scope: !2162)
!2199 = !DILocation(line: 288, column: 58, scope: !2157)
!2200 = !DILocation(line: 288, column: 3, scope: !2157)
!2201 = distinct !{!2201, !2159, !2202}
!2202 = !DILocation(line: 300, column: 5, scope: !2152)
!2203 = !DILocation(line: 302, column: 3, scope: !2138)
!2204 = !DILocation(line: 303, column: 1, scope: !2138)
!2205 = distinct !DISubprogram(name: "VEC_char_base_replace", scope: !889, file: !889, line: 23, type: !2206, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2206 = !DISubroutineType(types: !2207)
!2207 = !{!900, !2208, !7, !900}
!2208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !893, size: 64)
!2209 = !DILocalVariable(name: "vec_", arg: 1, scope: !2205, file: !889, line: 23, type: !2208)
!2210 = !DILocation(line: 23, column: 1, scope: !2205)
!2211 = !DILocalVariable(name: "ix_", arg: 2, scope: !2205, file: !889, line: 23, type: !7)
!2212 = !DILocalVariable(name: "obj_", arg: 3, scope: !2205, file: !889, line: 23, type: !900)
!2213 = !DILocalVariable(name: "old_obj_", scope: !2205, file: !889, line: 23, type: !900)
!2214 = distinct !DISubprogram(name: "gate_handle_stack_regs", scope: !3, file: !3, line: 3265, type: !2021, scopeLine: 3266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2215 = !DILocation(line: 3268, column: 3, scope: !2214)
!2216 = distinct !DISubprogram(name: "rest_of_handle_stack_regs", scope: !3, file: !3, line: 3296, type: !2025, scopeLine: 3297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2217 = !DILocation(line: 3299, column: 3, scope: !2216)
!2218 = !DILocation(line: 3300, column: 22, scope: !2216)
!2219 = !DILocation(line: 3302, column: 3, scope: !2216)
!2220 = distinct !DISubprogram(name: "VEC_char_heap_safe_grow", scope: !889, file: !889, line: 24, type: !2124, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2221 = !DILocalVariable(name: "vec_", arg: 1, scope: !2220, file: !889, line: 24, type: !2126)
!2222 = !DILocation(line: 24, column: 1, scope: !2220)
!2223 = !DILocalVariable(name: "size_", arg: 2, scope: !2220, file: !889, line: 24, type: !886)
!2224 = !DILocation(line: 0, scope: !2220)
!2225 = distinct !DISubprogram(name: "VEC_char_base_address", scope: !889, file: !889, line: 23, type: !2226, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2226 = !DISubroutineType(types: !2227)
!2227 = !{!970, !2208}
!2228 = !DILocalVariable(name: "vec_", arg: 1, scope: !2225, file: !889, line: 23, type: !2208)
!2229 = !DILocation(line: 23, column: 1, scope: !2225)
!2230 = distinct !DISubprogram(name: "VEC_char_heap_reserve_exact", scope: !889, file: !889, line: 24, type: !2231, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2231 = !DISubroutineType(types: !2232)
!2232 = !{!886, !2126, !886}
!2233 = !DILocalVariable(name: "vec_", arg: 1, scope: !2230, file: !889, line: 24, type: !2126)
!2234 = !DILocation(line: 24, column: 1, scope: !2230)
!2235 = !DILocalVariable(name: "alloc_", arg: 2, scope: !2230, file: !889, line: 24, type: !886)
!2236 = !DILocalVariable(name: "extend", scope: !2230, file: !889, line: 24, type: !886)
!2237 = !DILocation(line: 24, column: 1, scope: !2238)
!2238 = distinct !DILexicalBlock(scope: !2230, file: !889, line: 24, column: 1)
!2239 = distinct !DISubprogram(name: "VEC_char_base_space", scope: !889, file: !889, line: 23, type: !2240, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2240 = !DISubroutineType(types: !2241)
!2241 = !{!886, !2208, !886}
!2242 = !DILocalVariable(name: "vec_", arg: 1, scope: !2239, file: !889, line: 23, type: !2208)
!2243 = !DILocation(line: 23, column: 1, scope: !2239)
!2244 = !DILocalVariable(name: "alloc_", arg: 2, scope: !2239, file: !889, line: 23, type: !886)
!2245 = distinct !DISubprogram(name: "rhs_regno", scope: !378, file: !378, line: 1051, type: !2246, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2246 = !DISubroutineType(types: !2247)
!2247 = !{!7, !2064}
!2248 = !DILocalVariable(name: "x", arg: 1, scope: !2245, file: !378, line: 1051, type: !2064)
!2249 = !DILocation(line: 1051, column: 22, scope: !2245)
!2250 = !DILocation(line: 1053, column: 10, scope: !2245)
!2251 = !DILocation(line: 1053, column: 3, scope: !2245)
!2252 = distinct !DISubprogram(name: "reg_to_stack", scope: !3, file: !3, line: 3166, type: !2021, scopeLine: 3167, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2253 = !DILocalVariable(name: "bb", scope: !2252, file: !3, line: 3168, type: !997)
!2254 = !DILocation(line: 3168, column: 15, scope: !2252)
!2255 = !DILocalVariable(name: "i", scope: !2252, file: !3, line: 3169, type: !886)
!2256 = !DILocation(line: 3169, column: 7, scope: !2252)
!2257 = !DILocalVariable(name: "max_uid", scope: !2252, file: !3, line: 3170, type: !886)
!2258 = !DILocation(line: 3170, column: 7, scope: !2252)
!2259 = !DILocation(line: 3173, column: 7, scope: !2260)
!2260 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 3173, column: 7)
!2261 = !DILocation(line: 3173, column: 33, scope: !2260)
!2262 = !DILocation(line: 3173, column: 7, scope: !2252)
!2263 = !DILocation(line: 3174, column: 5, scope: !2260)
!2264 = !DILocation(line: 3178, column: 10, scope: !2265)
!2265 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 3178, column: 3)
!2266 = !DILocation(line: 3178, column: 8, scope: !2265)
!2267 = !DILocation(line: 3178, column: 29, scope: !2268)
!2268 = distinct !DILexicalBlock(scope: !2265, file: !3, line: 3178, column: 3)
!2269 = !DILocation(line: 3178, column: 31, scope: !2268)
!2270 = !DILocation(line: 3178, column: 3, scope: !2265)
!2271 = !DILocation(line: 3179, column: 30, scope: !2272)
!2272 = distinct !DILexicalBlock(scope: !2268, file: !3, line: 3179, column: 9)
!2273 = !DILocation(line: 3179, column: 9, scope: !2272)
!2274 = !DILocation(line: 3179, column: 9, scope: !2268)
!2275 = !DILocation(line: 3180, column: 7, scope: !2272)
!2276 = !DILocation(line: 3179, column: 31, scope: !2272)
!2277 = !DILocation(line: 3178, column: 51, scope: !2268)
!2278 = !DILocation(line: 3178, column: 3, scope: !2268)
!2279 = distinct !{!2279, !2270, !2280}
!2280 = !DILocation(line: 3180, column: 7, scope: !2265)
!2281 = !DILocation(line: 3181, column: 7, scope: !2282)
!2282 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 3181, column: 7)
!2283 = !DILocation(line: 3181, column: 9, scope: !2282)
!2284 = !DILocation(line: 3181, column: 7, scope: !2252)
!2285 = !DILocation(line: 3182, column: 5, scope: !2282)
!2286 = !DILocation(line: 3184, column: 3, scope: !2252)
!2287 = !DILocation(line: 3185, column: 3, scope: !2252)
!2288 = !DILocation(line: 3187, column: 3, scope: !2252)
!2289 = !DILocation(line: 3190, column: 3, scope: !2252)
!2290 = !DILocation(line: 3191, column: 3, scope: !2291)
!2291 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 3191, column: 3)
!2292 = !DILocation(line: 3191, column: 3, scope: !2293)
!2293 = distinct !DILexicalBlock(scope: !2291, file: !3, line: 3191, column: 3)
!2294 = !DILocalVariable(name: "bi", scope: !2295, file: !3, line: 3193, type: !905)
!2295 = distinct !DILexicalBlock(scope: !2293, file: !3, line: 3192, column: 5)
!2296 = !DILocation(line: 3193, column: 18, scope: !2295)
!2297 = !DILocation(line: 3193, column: 23, scope: !2295)
!2298 = !DILocalVariable(name: "ei", scope: !2295, file: !3, line: 3194, type: !2299)
!2299 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !135, line: 682, baseType: !2300)
!2300 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !135, line: 679, size: 128, elements: !2301)
!2301 = !{!2302, !2303}
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2300, file: !135, line: 680, baseType: !7, size: 32)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !2300, file: !135, line: 681, baseType: !2304, size: 64, offset: 64)
!2304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1002, size: 64)
!2305 = !DILocation(line: 3194, column: 21, scope: !2295)
!2306 = !DILocalVariable(name: "e", scope: !2295, file: !3, line: 3195, type: !1014)
!2307 = !DILocation(line: 3195, column: 12, scope: !2295)
!2308 = !DILocalVariable(name: "reg", scope: !2295, file: !3, line: 3196, type: !886)
!2309 = !DILocation(line: 3196, column: 11, scope: !2295)
!2310 = !DILocation(line: 3198, column: 7, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2295, file: !3, line: 3198, column: 7)
!2312 = !DILocation(line: 3198, column: 7, scope: !2313)
!2313 = distinct !DILexicalBlock(scope: !2311, file: !3, line: 3198, column: 7)
!2314 = !DILocation(line: 3199, column: 8, scope: !2315)
!2315 = distinct !DILexicalBlock(scope: !2313, file: !3, line: 3199, column: 6)
!2316 = !DILocation(line: 3199, column: 11, scope: !2315)
!2317 = !DILocation(line: 3199, column: 17, scope: !2315)
!2318 = !DILocation(line: 3200, column: 6, scope: !2315)
!2319 = !DILocation(line: 3200, column: 9, scope: !2315)
!2320 = !DILocation(line: 3200, column: 12, scope: !2315)
!2321 = !DILocation(line: 3200, column: 19, scope: !2315)
!2322 = !DILocation(line: 3200, column: 16, scope: !2315)
!2323 = !DILocation(line: 3199, column: 6, scope: !2313)
!2324 = !DILocation(line: 3201, column: 4, scope: !2315)
!2325 = !DILocation(line: 3201, column: 8, scope: !2315)
!2326 = !DILocation(line: 3201, column: 20, scope: !2315)
!2327 = distinct !{!2327, !2310, !2328}
!2328 = !DILocation(line: 3201, column: 20, scope: !2311)
!2329 = !DILocation(line: 3204, column: 7, scope: !2295)
!2330 = !DILocation(line: 3204, column: 11, scope: !2295)
!2331 = !DILocation(line: 3204, column: 20, scope: !2295)
!2332 = !DILocation(line: 3204, column: 24, scope: !2295)
!2333 = !DILocation(line: 3207, column: 16, scope: !2334)
!2334 = distinct !DILexicalBlock(scope: !2295, file: !3, line: 3207, column: 7)
!2335 = !DILocation(line: 3207, column: 12, scope: !2334)
!2336 = !DILocation(line: 3207, column: 35, scope: !2337)
!2337 = distinct !DILexicalBlock(scope: !2334, file: !3, line: 3207, column: 7)
!2338 = !DILocation(line: 3207, column: 39, scope: !2337)
!2339 = !DILocation(line: 3207, column: 7, scope: !2334)
!2340 = !DILocation(line: 3209, column: 8, scope: !2341)
!2341 = distinct !DILexicalBlock(scope: !2342, file: !3, line: 3209, column: 8)
!2342 = distinct !DILexicalBlock(scope: !2337, file: !3, line: 3208, column: 2)
!2343 = !DILocation(line: 3209, column: 8, scope: !2342)
!2344 = !DILocation(line: 3210, column: 6, scope: !2341)
!2345 = !DILocation(line: 3211, column: 8, scope: !2346)
!2346 = distinct !DILexicalBlock(scope: !2342, file: !3, line: 3211, column: 8)
!2347 = !DILocation(line: 3211, column: 8, scope: !2342)
!2348 = !DILocation(line: 3212, column: 6, scope: !2346)
!2349 = !DILocation(line: 3213, column: 2, scope: !2342)
!2350 = !DILocation(line: 3207, column: 61, scope: !2337)
!2351 = !DILocation(line: 3207, column: 7, scope: !2337)
!2352 = distinct !{!2352, !2339, !2353}
!2353 = !DILocation(line: 3213, column: 2, scope: !2334)
!2354 = !DILocation(line: 3214, column: 5, scope: !2295)
!2355 = distinct !{!2355, !2290, !2356}
!2356 = !DILocation(line: 3214, column: 5, scope: !2291)
!2357 = !DILocation(line: 3217, column: 10, scope: !2358)
!2358 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 3217, column: 3)
!2359 = !DILocation(line: 3217, column: 8, scope: !2358)
!2360 = !DILocation(line: 3217, column: 29, scope: !2361)
!2361 = distinct !DILexicalBlock(scope: !2358, file: !3, line: 3217, column: 3)
!2362 = !DILocation(line: 3217, column: 31, scope: !2361)
!2363 = !DILocation(line: 3217, column: 3, scope: !2358)
!2364 = !DILocalVariable(name: "mode", scope: !2365, file: !3, line: 3219, type: !5)
!2365 = distinct !DILexicalBlock(scope: !2361, file: !3, line: 3218, column: 5)
!2366 = !DILocation(line: 3219, column: 25, scope: !2365)
!2367 = !DILocation(line: 3220, column: 19, scope: !2368)
!2368 = distinct !DILexicalBlock(scope: !2365, file: !3, line: 3220, column: 7)
!2369 = !DILocation(line: 3220, column: 17, scope: !2368)
!2370 = !DILocation(line: 3220, column: 12, scope: !2368)
!2371 = !DILocation(line: 3221, column: 5, scope: !2372)
!2372 = distinct !DILexicalBlock(scope: !2368, file: !3, line: 3220, column: 7)
!2373 = !DILocation(line: 3221, column: 10, scope: !2372)
!2374 = !DILocation(line: 3220, column: 7, scope: !2368)
!2375 = !DILocation(line: 3223, column: 39, scope: !2372)
!2376 = !DILocation(line: 3223, column: 45, scope: !2372)
!2377 = !DILocation(line: 3223, column: 26, scope: !2372)
!2378 = !DILocation(line: 3223, column: 2, scope: !2372)
!2379 = !DILocation(line: 3223, column: 24, scope: !2372)
!2380 = !DILocation(line: 3222, column: 12, scope: !2372)
!2381 = !DILocation(line: 3222, column: 10, scope: !2372)
!2382 = !DILocation(line: 3220, column: 7, scope: !2372)
!2383 = distinct !{!2383, !2374, !2384}
!2384 = !DILocation(line: 3223, column: 46, scope: !2368)
!2385 = !DILocation(line: 3224, column: 19, scope: !2386)
!2386 = distinct !DILexicalBlock(scope: !2365, file: !3, line: 3224, column: 7)
!2387 = !DILocation(line: 3224, column: 17, scope: !2386)
!2388 = !DILocation(line: 3224, column: 12, scope: !2386)
!2389 = !DILocation(line: 3225, column: 5, scope: !2390)
!2390 = distinct !DILexicalBlock(scope: !2386, file: !3, line: 3224, column: 7)
!2391 = !DILocation(line: 3225, column: 10, scope: !2390)
!2392 = !DILocation(line: 3224, column: 7, scope: !2386)
!2393 = !DILocation(line: 3227, column: 39, scope: !2390)
!2394 = !DILocation(line: 3227, column: 45, scope: !2390)
!2395 = !DILocation(line: 3227, column: 26, scope: !2390)
!2396 = !DILocation(line: 3227, column: 2, scope: !2390)
!2397 = !DILocation(line: 3227, column: 24, scope: !2390)
!2398 = !DILocation(line: 3226, column: 12, scope: !2390)
!2399 = !DILocation(line: 3226, column: 10, scope: !2390)
!2400 = !DILocation(line: 3224, column: 7, scope: !2390)
!2401 = distinct !{!2401, !2392, !2402}
!2402 = !DILocation(line: 3227, column: 46, scope: !2386)
!2403 = !DILocation(line: 3228, column: 5, scope: !2365)
!2404 = !DILocation(line: 3217, column: 51, scope: !2361)
!2405 = !DILocation(line: 3217, column: 3, scope: !2361)
!2406 = distinct !{!2406, !2363, !2407}
!2407 = !DILocation(line: 3228, column: 5, scope: !2358)
!2408 = !DILocation(line: 3230, column: 20, scope: !2252)
!2409 = !DILocation(line: 3230, column: 18, scope: !2252)
!2410 = !DILocation(line: 3239, column: 8, scope: !2411)
!2411 = distinct !DILexicalBlock(scope: !2252, file: !3, line: 3239, column: 7)
!2412 = !DILocation(line: 3240, column: 7, scope: !2411)
!2413 = !DILocation(line: 3240, column: 10, scope: !2411)
!2414 = !DILocation(line: 3240, column: 22, scope: !2411)
!2415 = !DILocation(line: 3240, column: 34, scope: !2411)
!2416 = !DILocation(line: 3240, column: 37, scope: !2411)
!2417 = !DILocation(line: 3240, column: 49, scope: !2411)
!2418 = !DILocation(line: 3239, column: 7, scope: !2252)
!2419 = !DILocation(line: 3241, column: 17, scope: !2411)
!2420 = !DILocation(line: 3241, column: 15, scope: !2411)
!2421 = !DILocation(line: 3241, column: 5, scope: !2411)
!2422 = !DILocalVariable(name: "r", scope: !2423, file: !3, line: 3244, type: !1142)
!2423 = distinct !DILexicalBlock(scope: !2411, file: !3, line: 3243, column: 5)
!2424 = !DILocation(line: 3244, column: 23, scope: !2423)
!2425 = !DILocation(line: 3246, column: 7, scope: !2423)
!2426 = !DILocation(line: 3247, column: 19, scope: !2423)
!2427 = !DILocation(line: 3247, column: 17, scope: !2423)
!2428 = !DILocation(line: 3248, column: 44, scope: !2423)
!2429 = !DILocation(line: 3248, column: 19, scope: !2423)
!2430 = !DILocation(line: 3248, column: 17, scope: !2423)
!2431 = !DILocation(line: 3252, column: 13, scope: !2252)
!2432 = !DILocation(line: 3252, column: 11, scope: !2252)
!2433 = !DILocation(line: 3253, column: 31, scope: !2252)
!2434 = !DILocation(line: 3253, column: 29, scope: !2252)
!2435 = !DILocation(line: 3254, column: 11, scope: !2252)
!2436 = !DILocation(line: 3255, column: 24, scope: !2252)
!2437 = !DILocation(line: 3255, column: 32, scope: !2252)
!2438 = !DILocation(line: 3255, column: 23, scope: !2252)
!2439 = !DILocation(line: 3255, column: 21, scope: !2252)
!2440 = !DILocation(line: 3254, column: 3, scope: !2252)
!2441 = !DILocation(line: 3257, column: 3, scope: !2252)
!2442 = !DILocation(line: 3259, column: 3, scope: !2252)
!2443 = !DILocation(line: 3260, column: 3, scope: !2252)
!2444 = !DILocation(line: 3261, column: 1, scope: !2252)
!2445 = distinct !DISubprogram(name: "VEC_char_heap_free", scope: !889, file: !889, line: 24, type: !2446, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2446 = !DISubroutineType(types: !2447)
!2447 = !{null, !2126}
!2448 = !DILocalVariable(name: "vec_", arg: 1, scope: !2445, file: !889, line: 24, type: !2126)
!2449 = !DILocation(line: 24, column: 1, scope: !2445)
!2450 = !DILocation(line: 24, column: 1, scope: !2451)
!2451 = distinct !DILexicalBlock(scope: !2445, file: !889, line: 24, column: 1)
!2452 = distinct !DISubprogram(name: "ei_start_1", scope: !135, file: !135, line: 696, type: !2453, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2453 = !DISubroutineType(types: !2454)
!2454 = !{!2299, !2304}
!2455 = !DILocalVariable(name: "ev", arg: 1, scope: !2452, file: !135, line: 696, type: !2304)
!2456 = !DILocation(line: 696, column: 28, scope: !2452)
!2457 = !DILocalVariable(name: "i", scope: !2452, file: !135, line: 698, type: !2299)
!2458 = !DILocation(line: 698, column: 17, scope: !2452)
!2459 = !DILocation(line: 700, column: 5, scope: !2452)
!2460 = !DILocation(line: 700, column: 11, scope: !2452)
!2461 = !DILocation(line: 701, column: 17, scope: !2452)
!2462 = !DILocation(line: 701, column: 5, scope: !2452)
!2463 = !DILocation(line: 701, column: 15, scope: !2452)
!2464 = !DILocation(line: 703, column: 3, scope: !2452)
!2465 = distinct !DISubprogram(name: "ei_cond", scope: !135, file: !135, line: 771, type: !2466, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2466 = !DISubroutineType(types: !2467)
!2467 = !{!918, !2299, !2468}
!2468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1014, size: 64)
!2469 = !DILocalVariable(name: "ei", arg: 1, scope: !2465, file: !135, line: 771, type: !2299)
!2470 = !DILocation(line: 771, column: 24, scope: !2465)
!2471 = !DILocalVariable(name: "p", arg: 2, scope: !2465, file: !135, line: 771, type: !2468)
!2472 = !DILocation(line: 771, column: 34, scope: !2465)
!2473 = !DILocation(line: 773, column: 8, scope: !2474)
!2474 = distinct !DILexicalBlock(scope: !2465, file: !135, line: 773, column: 7)
!2475 = !DILocation(line: 773, column: 7, scope: !2465)
!2476 = !DILocation(line: 775, column: 12, scope: !2477)
!2477 = distinct !DILexicalBlock(scope: !2474, file: !135, line: 774, column: 5)
!2478 = !DILocation(line: 775, column: 8, scope: !2477)
!2479 = !DILocation(line: 775, column: 10, scope: !2477)
!2480 = !DILocation(line: 776, column: 7, scope: !2477)
!2481 = !DILocation(line: 780, column: 8, scope: !2482)
!2482 = distinct !DILexicalBlock(scope: !2474, file: !135, line: 779, column: 5)
!2483 = !DILocation(line: 780, column: 10, scope: !2482)
!2484 = !DILocation(line: 781, column: 7, scope: !2482)
!2485 = !DILocation(line: 783, column: 1, scope: !2465)
!2486 = distinct !DISubprogram(name: "ei_next", scope: !135, file: !135, line: 736, type: !2487, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2487 = !DISubroutineType(types: !2488)
!2488 = !{null, !2489}
!2489 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2299, size: 64)
!2490 = !DILocalVariable(name: "i", arg: 1, scope: !2486, file: !135, line: 736, type: !2489)
!2491 = !DILocation(line: 736, column: 25, scope: !2486)
!2492 = !DILocation(line: 738, column: 3, scope: !2486)
!2493 = !DILocation(line: 739, column: 3, scope: !2486)
!2494 = !DILocation(line: 739, column: 6, scope: !2486)
!2495 = !DILocation(line: 739, column: 11, scope: !2486)
!2496 = !DILocation(line: 740, column: 1, scope: !2486)
!2497 = distinct !DISubprogram(name: "df_lr_get_bb_info", scope: !927, file: !927, line: 1052, type: !2498, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2498 = !DISubroutineType(types: !2499)
!2499 = !{!925, !7}
!2500 = !DILocalVariable(name: "index", arg: 1, scope: !2497, file: !927, line: 1052, type: !7)
!2501 = !DILocation(line: 1052, column: 33, scope: !2497)
!2502 = !DILocation(line: 1054, column: 7, scope: !2503)
!2503 = distinct !DILexicalBlock(scope: !2497, file: !927, line: 1054, column: 7)
!2504 = !DILocation(line: 1054, column: 15, scope: !2503)
!2505 = !DILocation(line: 1054, column: 22, scope: !2503)
!2506 = !DILocation(line: 1054, column: 13, scope: !2503)
!2507 = !DILocation(line: 1054, column: 7, scope: !2497)
!2508 = !DILocation(line: 1055, column: 37, scope: !2503)
!2509 = !DILocation(line: 1055, column: 44, scope: !2503)
!2510 = !DILocation(line: 1055, column: 55, scope: !2503)
!2511 = !DILocation(line: 1055, column: 12, scope: !2503)
!2512 = !DILocation(line: 1055, column: 5, scope: !2503)
!2513 = !DILocation(line: 1057, column: 5, scope: !2503)
!2514 = !DILocation(line: 1058, column: 1, scope: !2497)
!2515 = distinct !DISubprogram(name: "VEC_char_heap_alloc", scope: !889, file: !889, line: 24, type: !2516, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2516 = !DISubroutineType(types: !2517)
!2517 = !{!887, !886}
!2518 = !DILocalVariable(name: "alloc_", arg: 1, scope: !2515, file: !889, line: 24, type: !886)
!2519 = !DILocation(line: 24, column: 1, scope: !2515)
!2520 = distinct !DISubprogram(name: "convert_regs", scope: !3, file: !3, line: 3113, type: !2521, scopeLine: 3114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2521 = !DISubroutineType(types: !2522)
!2522 = !{null}
!2523 = !DILocalVariable(name: "inserted", scope: !2520, file: !3, line: 3115, type: !886)
!2524 = !DILocation(line: 3115, column: 7, scope: !2520)
!2525 = !DILocalVariable(name: "b", scope: !2520, file: !3, line: 3116, type: !997)
!2526 = !DILocation(line: 3116, column: 15, scope: !2520)
!2527 = !DILocalVariable(name: "e", scope: !2520, file: !3, line: 3117, type: !1014)
!2528 = !DILocation(line: 3117, column: 8, scope: !2520)
!2529 = !DILocalVariable(name: "ei", scope: !2520, file: !3, line: 3118, type: !2299)
!2530 = !DILocation(line: 3118, column: 17, scope: !2520)
!2531 = !DILocation(line: 3121, column: 14, scope: !2520)
!2532 = !DILocation(line: 3121, column: 12, scope: !2520)
!2533 = !DILocation(line: 3124, column: 3, scope: !2520)
!2534 = !DILocation(line: 3125, column: 3, scope: !2520)
!2535 = !DILocation(line: 3125, column: 32, scope: !2520)
!2536 = !DILocation(line: 3125, column: 37, scope: !2520)
!2537 = !DILocation(line: 3132, column: 3, scope: !2538)
!2538 = distinct !DILexicalBlock(scope: !2520, file: !3, line: 3132, column: 3)
!2539 = !DILocation(line: 3132, column: 3, scope: !2540)
!2540 = distinct !DILexicalBlock(scope: !2538, file: !3, line: 3132, column: 3)
!2541 = !DILocation(line: 3133, column: 21, scope: !2540)
!2542 = !DILocation(line: 3133, column: 24, scope: !2540)
!2543 = !DILocation(line: 3133, column: 5, scope: !2540)
!2544 = distinct !{!2544, !2537, !2545}
!2545 = !DILocation(line: 3133, column: 28, scope: !2538)
!2546 = !DILocation(line: 3137, column: 3, scope: !2547)
!2547 = distinct !DILexicalBlock(scope: !2520, file: !3, line: 3137, column: 3)
!2548 = !DILocation(line: 3137, column: 3, scope: !2549)
!2549 = distinct !DILexicalBlock(scope: !2547, file: !3, line: 3137, column: 3)
!2550 = !DILocalVariable(name: "bi", scope: !2551, file: !3, line: 3139, type: !905)
!2551 = distinct !DILexicalBlock(scope: !2549, file: !3, line: 3138, column: 5)
!2552 = !DILocation(line: 3139, column: 18, scope: !2551)
!2553 = !DILocation(line: 3139, column: 23, scope: !2551)
!2554 = !DILocation(line: 3141, column: 13, scope: !2555)
!2555 = distinct !DILexicalBlock(scope: !2551, file: !3, line: 3141, column: 11)
!2556 = !DILocation(line: 3141, column: 17, scope: !2555)
!2557 = !DILocation(line: 3141, column: 11, scope: !2551)
!2558 = !DILocation(line: 3142, column: 18, scope: !2555)
!2559 = !DILocation(line: 3142, column: 2, scope: !2555)
!2560 = !DILocation(line: 3143, column: 5, scope: !2551)
!2561 = distinct !{!2561, !2546, !2562}
!2562 = !DILocation(line: 3143, column: 5, scope: !2547)
!2563 = !DILocation(line: 3145, column: 15, scope: !2520)
!2564 = !DILocation(line: 3145, column: 12, scope: !2520)
!2565 = !DILocation(line: 3147, column: 3, scope: !2520)
!2566 = !DILocation(line: 3149, column: 3, scope: !2520)
!2567 = !DILocation(line: 3150, column: 7, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !2520, file: !3, line: 3150, column: 7)
!2569 = !DILocation(line: 3150, column: 7, scope: !2520)
!2570 = !DILocation(line: 3151, column: 5, scope: !2568)
!2571 = !DILocation(line: 3153, column: 7, scope: !2572)
!2572 = distinct !DILexicalBlock(scope: !2520, file: !3, line: 3153, column: 7)
!2573 = !DILocation(line: 3153, column: 7, scope: !2520)
!2574 = !DILocation(line: 3154, column: 18, scope: !2572)
!2575 = !DILocation(line: 3154, column: 5, scope: !2572)
!2576 = !DILocation(line: 3155, column: 1, scope: !2520)
!2577 = distinct !DISubprogram(name: "ei_end_p", scope: !135, file: !135, line: 721, type: !2578, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2578 = !DISubroutineType(types: !2579)
!2579 = !{!918, !2299}
!2580 = !DILocalVariable(name: "i", arg: 1, scope: !2577, file: !135, line: 721, type: !2299)
!2581 = !DILocation(line: 721, column: 25, scope: !2577)
!2582 = !DILocation(line: 723, column: 13, scope: !2577)
!2583 = !DILocation(line: 723, column: 22, scope: !2577)
!2584 = !DILocation(line: 723, column: 19, scope: !2577)
!2585 = !DILocation(line: 723, column: 10, scope: !2577)
!2586 = !DILocation(line: 723, column: 3, scope: !2577)
!2587 = distinct !DISubprogram(name: "ei_edge", scope: !135, file: !135, line: 752, type: !2588, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2588 = !DISubroutineType(types: !2589)
!2589 = !{!1014, !2299}
!2590 = !DILocalVariable(name: "i", arg: 1, scope: !2587, file: !135, line: 752, type: !2299)
!2591 = !DILocation(line: 752, column: 24, scope: !2587)
!2592 = !DILocation(line: 754, column: 10, scope: !2587)
!2593 = !DILocation(line: 754, column: 3, scope: !2587)
!2594 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !135, file: !135, line: 150, type: !2595, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2595 = !DISubroutineType(types: !2596)
!2596 = !{!7, !2597}
!2597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2598, size: 64)
!2598 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1007)
!2599 = !DILocalVariable(name: "vec_", arg: 1, scope: !2594, file: !135, line: 150, type: !2597)
!2600 = !DILocation(line: 150, column: 1, scope: !2594)
!2601 = distinct !DISubprogram(name: "ei_container", scope: !135, file: !135, line: 685, type: !2602, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2602 = !DISubroutineType(types: !2603)
!2603 = !{!1002, !2299}
!2604 = !DILocalVariable(name: "i", arg: 1, scope: !2601, file: !135, line: 685, type: !2299)
!2605 = !DILocation(line: 685, column: 29, scope: !2601)
!2606 = !DILocation(line: 687, column: 3, scope: !2601)
!2607 = !DILocation(line: 688, column: 13, scope: !2601)
!2608 = !DILocation(line: 688, column: 10, scope: !2601)
!2609 = !DILocation(line: 688, column: 3, scope: !2601)
!2610 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !135, file: !135, line: 150, type: !2611, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2611 = !DISubroutineType(types: !2612)
!2612 = !{!1014, !2597, !7}
!2613 = !DILocalVariable(name: "vec_", arg: 1, scope: !2610, file: !135, line: 150, type: !2597)
!2614 = !DILocation(line: 150, column: 1, scope: !2610)
!2615 = !DILocalVariable(name: "ix_", arg: 2, scope: !2610, file: !135, line: 150, type: !7)
!2616 = !DILocation(line: 0, scope: !2610)
!2617 = distinct !DISubprogram(name: "convert_regs_entry", scope: !3, file: !3, line: 2625, type: !2618, scopeLine: 2626, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2618 = !DISubroutineType(types: !2619)
!2619 = !{!886}
!2620 = !DILocalVariable(name: "inserted", scope: !2617, file: !3, line: 2627, type: !886)
!2621 = !DILocation(line: 2627, column: 7, scope: !2617)
!2622 = !DILocalVariable(name: "e", scope: !2617, file: !3, line: 2628, type: !1014)
!2623 = !DILocation(line: 2628, column: 8, scope: !2617)
!2624 = !DILocalVariable(name: "ei", scope: !2617, file: !3, line: 2629, type: !2299)
!2625 = !DILocation(line: 2629, column: 17, scope: !2617)
!2626 = !DILocation(line: 2640, column: 3, scope: !2627)
!2627 = distinct !DILexicalBlock(scope: !2617, file: !3, line: 2640, column: 3)
!2628 = !DILocation(line: 2640, column: 3, scope: !2629)
!2629 = distinct !DILexicalBlock(scope: !2627, file: !3, line: 2640, column: 3)
!2630 = !DILocalVariable(name: "block", scope: !2631, file: !3, line: 2642, type: !997)
!2631 = distinct !DILexicalBlock(scope: !2629, file: !3, line: 2641, column: 5)
!2632 = !DILocation(line: 2642, column: 19, scope: !2631)
!2633 = !DILocation(line: 2642, column: 27, scope: !2631)
!2634 = !DILocation(line: 2642, column: 30, scope: !2631)
!2635 = !DILocalVariable(name: "bi", scope: !2631, file: !3, line: 2643, type: !905)
!2636 = !DILocation(line: 2643, column: 18, scope: !2631)
!2637 = !DILocation(line: 2643, column: 23, scope: !2631)
!2638 = !DILocalVariable(name: "reg", scope: !2631, file: !3, line: 2644, type: !886)
!2639 = !DILocation(line: 2644, column: 11, scope: !2631)
!2640 = !DILocalVariable(name: "top", scope: !2631, file: !3, line: 2644, type: !886)
!2641 = !DILocation(line: 2644, column: 16, scope: !2631)
!2642 = !DILocation(line: 2646, column: 16, scope: !2643)
!2643 = distinct !DILexicalBlock(scope: !2631, file: !3, line: 2646, column: 7)
!2644 = !DILocation(line: 2646, column: 12, scope: !2643)
!2645 = !DILocation(line: 2646, column: 34, scope: !2646)
!2646 = distinct !DILexicalBlock(scope: !2643, file: !3, line: 2646, column: 7)
!2647 = !DILocation(line: 2646, column: 38, scope: !2646)
!2648 = !DILocation(line: 2646, column: 7, scope: !2643)
!2649 = !DILocation(line: 2647, column: 6, scope: !2650)
!2650 = distinct !DILexicalBlock(scope: !2646, file: !3, line: 2647, column: 6)
!2651 = !DILocation(line: 2647, column: 6, scope: !2646)
!2652 = !DILocalVariable(name: "init", scope: !2653, file: !3, line: 2649, type: !1028)
!2653 = distinct !DILexicalBlock(scope: !2650, file: !3, line: 2648, column: 4)
!2654 = !DILocation(line: 2649, column: 10, scope: !2653)
!2655 = !DILocation(line: 2651, column: 32, scope: !2653)
!2656 = !DILocation(line: 2651, column: 6, scope: !2653)
!2657 = !DILocation(line: 2651, column: 10, scope: !2653)
!2658 = !DILocation(line: 2651, column: 19, scope: !2653)
!2659 = !DILocation(line: 2651, column: 23, scope: !2653)
!2660 = !DILocation(line: 2651, column: 30, scope: !2653)
!2661 = !DILocation(line: 2653, column: 13, scope: !2653)
!2662 = !DILocation(line: 2653, column: 11, scope: !2653)
!2663 = !DILocation(line: 2656, column: 27, scope: !2653)
!2664 = !DILocation(line: 2656, column: 33, scope: !2653)
!2665 = !DILocation(line: 2656, column: 6, scope: !2653)
!2666 = !DILocation(line: 2657, column: 15, scope: !2653)
!2667 = !DILocation(line: 2658, column: 4, scope: !2653)
!2668 = !DILocation(line: 2646, column: 58, scope: !2646)
!2669 = !DILocation(line: 2646, column: 7, scope: !2646)
!2670 = distinct !{!2670, !2648, !2671}
!2671 = !DILocation(line: 2658, column: 4, scope: !2643)
!2672 = !DILocation(line: 2660, column: 26, scope: !2631)
!2673 = !DILocation(line: 2660, column: 7, scope: !2631)
!2674 = !DILocation(line: 2660, column: 11, scope: !2631)
!2675 = !DILocation(line: 2660, column: 20, scope: !2631)
!2676 = !DILocation(line: 2660, column: 24, scope: !2631)
!2677 = !DILocation(line: 2661, column: 5, scope: !2631)
!2678 = distinct !{!2678, !2626, !2679}
!2679 = !DILocation(line: 2661, column: 5, scope: !2627)
!2680 = !DILocation(line: 2663, column: 10, scope: !2617)
!2681 = !DILocation(line: 2663, column: 3, scope: !2617)
!2682 = distinct !DISubprogram(name: "convert_regs_exit", scope: !3, file: !3, line: 2670, type: !2521, scopeLine: 2671, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2683 = !DILocalVariable(name: "value_reg_low", scope: !2682, file: !3, line: 2672, type: !886)
!2684 = !DILocation(line: 2672, column: 7, scope: !2682)
!2685 = !DILocalVariable(name: "value_reg_high", scope: !2682, file: !3, line: 2672, type: !886)
!2686 = !DILocation(line: 2672, column: 22, scope: !2682)
!2687 = !DILocalVariable(name: "output_stack", scope: !2682, file: !3, line: 2673, type: !2004)
!2688 = !DILocation(line: 2673, column: 9, scope: !2682)
!2689 = !DILocalVariable(name: "retvalue", scope: !2682, file: !3, line: 2674, type: !1028)
!2690 = !DILocation(line: 2674, column: 7, scope: !2682)
!2691 = !DILocation(line: 2676, column: 28, scope: !2682)
!2692 = !DILocation(line: 2676, column: 14, scope: !2682)
!2693 = !DILocation(line: 2676, column: 12, scope: !2682)
!2694 = !DILocation(line: 2677, column: 34, scope: !2682)
!2695 = !DILocation(line: 2677, column: 17, scope: !2682)
!2696 = !DILocation(line: 2678, column: 7, scope: !2697)
!2697 = distinct !DILexicalBlock(scope: !2682, file: !3, line: 2678, column: 7)
!2698 = !DILocation(line: 2678, column: 7, scope: !2682)
!2699 = !DILocation(line: 2680, column: 23, scope: !2700)
!2700 = distinct !DILexicalBlock(scope: !2697, file: !3, line: 2679, column: 5)
!2701 = !DILocation(line: 2680, column: 21, scope: !2700)
!2702 = !DILocation(line: 2681, column: 24, scope: !2700)
!2703 = !DILocation(line: 2681, column: 50, scope: !2700)
!2704 = !DILocation(line: 2681, column: 22, scope: !2700)
!2705 = !DILocation(line: 2682, column: 5, scope: !2700)
!2706 = !DILocation(line: 2684, column: 19, scope: !2682)
!2707 = !DILocation(line: 2684, column: 48, scope: !2682)
!2708 = !DILocation(line: 2684, column: 16, scope: !2682)
!2709 = !DILocation(line: 2685, column: 7, scope: !2710)
!2710 = distinct !DILexicalBlock(scope: !2682, file: !3, line: 2685, column: 7)
!2711 = !DILocation(line: 2685, column: 21, scope: !2710)
!2712 = !DILocation(line: 2685, column: 7, scope: !2682)
!2713 = !DILocation(line: 2686, column: 5, scope: !2710)
!2714 = !DILocation(line: 2686, column: 19, scope: !2710)
!2715 = !DILocation(line: 2686, column: 23, scope: !2710)
!2716 = !DILocalVariable(name: "reg", scope: !2717, file: !3, line: 2689, type: !886)
!2717 = distinct !DILexicalBlock(scope: !2710, file: !3, line: 2688, column: 5)
!2718 = !DILocation(line: 2689, column: 11, scope: !2717)
!2719 = !DILocation(line: 2691, column: 27, scope: !2717)
!2720 = !DILocation(line: 2691, column: 44, scope: !2717)
!2721 = !DILocation(line: 2691, column: 42, scope: !2717)
!2722 = !DILocation(line: 2691, column: 7, scope: !2717)
!2723 = !DILocation(line: 2691, column: 21, scope: !2717)
!2724 = !DILocation(line: 2691, column: 25, scope: !2717)
!2725 = !DILocation(line: 2692, column: 18, scope: !2726)
!2726 = distinct !DILexicalBlock(scope: !2717, file: !3, line: 2692, column: 7)
!2727 = !DILocation(line: 2692, column: 16, scope: !2726)
!2728 = !DILocation(line: 2692, column: 12, scope: !2726)
!2729 = !DILocation(line: 2692, column: 33, scope: !2730)
!2730 = distinct !DILexicalBlock(scope: !2726, file: !3, line: 2692, column: 7)
!2731 = !DILocation(line: 2692, column: 40, scope: !2730)
!2732 = !DILocation(line: 2692, column: 37, scope: !2730)
!2733 = !DILocation(line: 2692, column: 7, scope: !2726)
!2734 = !DILocation(line: 2694, column: 46, scope: !2735)
!2735 = distinct !DILexicalBlock(scope: !2730, file: !3, line: 2693, column: 2)
!2736 = !DILocation(line: 2694, column: 4, scope: !2735)
!2737 = !DILocation(line: 2694, column: 18, scope: !2735)
!2738 = !DILocation(line: 2694, column: 22, scope: !2735)
!2739 = !DILocation(line: 2694, column: 39, scope: !2735)
!2740 = !DILocation(line: 2694, column: 37, scope: !2735)
!2741 = !DILocation(line: 2694, column: 44, scope: !2735)
!2742 = !DILocation(line: 2695, column: 4, scope: !2735)
!2743 = !DILocation(line: 2696, column: 2, scope: !2735)
!2744 = !DILocation(line: 2692, column: 56, scope: !2730)
!2745 = !DILocation(line: 2692, column: 7, scope: !2730)
!2746 = distinct !{!2746, !2733, !2747}
!2747 = !DILocation(line: 2696, column: 2, scope: !2726)
!2748 = !DILocation(line: 2698, column: 1, scope: !2682)
!2749 = distinct !DISubprogram(name: "convert_regs_2", scope: !3, file: !3, line: 3060, type: !2750, scopeLine: 3061, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2750 = !DISubroutineType(types: !2751)
!2751 = !{null, !997}
!2752 = !DILocalVariable(name: "block", arg: 1, scope: !2749, file: !3, line: 3060, type: !997)
!2753 = !DILocation(line: 3060, column: 29, scope: !2749)
!2754 = !DILocalVariable(name: "stack", scope: !2749, file: !3, line: 3062, type: !996)
!2755 = !DILocation(line: 3062, column: 16, scope: !2749)
!2756 = !DILocalVariable(name: "sp", scope: !2749, file: !3, line: 3062, type: !996)
!2757 = !DILocation(line: 3062, column: 24, scope: !2749)
!2758 = !DILocation(line: 3068, column: 11, scope: !2749)
!2759 = !DILocation(line: 3068, column: 9, scope: !2749)
!2760 = !DILocation(line: 3069, column: 8, scope: !2749)
!2761 = !DILocation(line: 3069, column: 6, scope: !2749)
!2762 = !DILocation(line: 3071, column: 11, scope: !2749)
!2763 = !DILocation(line: 3071, column: 6, scope: !2749)
!2764 = !DILocation(line: 3071, column: 9, scope: !2749)
!2765 = !DILocation(line: 3073, column: 3, scope: !2749)
!2766 = !DILocalVariable(name: "e", scope: !2767, file: !3, line: 3075, type: !1014)
!2767 = distinct !DILexicalBlock(scope: !2749, file: !3, line: 3074, column: 5)
!2768 = !DILocation(line: 3075, column: 12, scope: !2767)
!2769 = !DILocalVariable(name: "ei", scope: !2767, file: !3, line: 3076, type: !2299)
!2770 = !DILocation(line: 3076, column: 21, scope: !2767)
!2771 = !DILocation(line: 3078, column: 16, scope: !2767)
!2772 = !DILocation(line: 3078, column: 15, scope: !2767)
!2773 = !DILocation(line: 3078, column: 13, scope: !2767)
!2774 = !DILocation(line: 3093, column: 7, scope: !2775)
!2775 = distinct !DILexicalBlock(scope: !2767, file: !3, line: 3093, column: 7)
!2776 = !DILocation(line: 3093, column: 7, scope: !2777)
!2777 = distinct !DILexicalBlock(scope: !2775, file: !3, line: 3093, column: 7)
!2778 = !DILocation(line: 3094, column: 9, scope: !2779)
!2779 = distinct !DILexicalBlock(scope: !2777, file: !3, line: 3094, column: 6)
!2780 = !DILocation(line: 3094, column: 12, scope: !2779)
!2781 = !DILocation(line: 3094, column: 18, scope: !2779)
!2782 = !DILocation(line: 3094, column: 6, scope: !2777)
!2783 = !DILocation(line: 3096, column: 6, scope: !2784)
!2784 = distinct !DILexicalBlock(scope: !2779, file: !3, line: 3095, column: 4)
!2785 = !DILocation(line: 3096, column: 28, scope: !2784)
!2786 = !DILocation(line: 3096, column: 40, scope: !2784)
!2787 = !DILocation(line: 3097, column: 11, scope: !2788)
!2788 = distinct !DILexicalBlock(scope: !2784, file: !3, line: 3097, column: 10)
!2789 = !DILocation(line: 3097, column: 33, scope: !2788)
!2790 = !DILocation(line: 3097, column: 10, scope: !2784)
!2791 = !DILocation(line: 3098, column: 16, scope: !2788)
!2792 = !DILocation(line: 3098, column: 19, scope: !2788)
!2793 = !DILocation(line: 3098, column: 11, scope: !2788)
!2794 = !DILocation(line: 3098, column: 14, scope: !2788)
!2795 = !DILocation(line: 3098, column: 8, scope: !2788)
!2796 = !DILocation(line: 3099, column: 4, scope: !2784)
!2797 = !DILocation(line: 3094, column: 33, scope: !2779)
!2798 = distinct !{!2798, !2774, !2799}
!2799 = !DILocation(line: 3099, column: 4, scope: !2775)
!2800 = !DILocation(line: 3101, column: 23, scope: !2767)
!2801 = !DILocation(line: 3101, column: 7, scope: !2767)
!2802 = !DILocation(line: 3102, column: 5, scope: !2767)
!2803 = !DILocation(line: 3103, column: 10, scope: !2749)
!2804 = !DILocation(line: 3103, column: 16, scope: !2749)
!2805 = !DILocation(line: 3103, column: 13, scope: !2749)
!2806 = distinct !{!2806, !2765, !2807}
!2807 = !DILocation(line: 3103, column: 21, scope: !2749)
!2808 = !DILocation(line: 3105, column: 9, scope: !2749)
!2809 = !DILocation(line: 3105, column: 3, scope: !2749)
!2810 = !DILocation(line: 3106, column: 1, scope: !2749)
!2811 = distinct !DISubprogram(name: "compensate_edges", scope: !3, file: !3, line: 2830, type: !2021, scopeLine: 2831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2812 = !DILocalVariable(name: "inserted", scope: !2811, file: !3, line: 2832, type: !918)
!2813 = !DILocation(line: 2832, column: 8, scope: !2811)
!2814 = !DILocalVariable(name: "bb", scope: !2811, file: !3, line: 2833, type: !997)
!2815 = !DILocation(line: 2833, column: 15, scope: !2811)
!2816 = !DILocation(line: 2835, column: 20, scope: !2811)
!2817 = !DILocation(line: 2837, column: 3, scope: !2818)
!2818 = distinct !DILexicalBlock(scope: !2811, file: !3, line: 2837, column: 3)
!2819 = !DILocation(line: 2837, column: 3, scope: !2820)
!2820 = distinct !DILexicalBlock(scope: !2818, file: !3, line: 2837, column: 3)
!2821 = !DILocation(line: 2838, column: 9, scope: !2822)
!2822 = distinct !DILexicalBlock(scope: !2820, file: !3, line: 2838, column: 9)
!2823 = !DILocation(line: 2838, column: 15, scope: !2822)
!2824 = !DILocation(line: 2838, column: 12, scope: !2822)
!2825 = !DILocation(line: 2838, column: 9, scope: !2820)
!2826 = !DILocalVariable(name: "e", scope: !2827, file: !3, line: 2840, type: !1014)
!2827 = distinct !DILexicalBlock(scope: !2822, file: !3, line: 2839, column: 7)
!2828 = !DILocation(line: 2840, column: 14, scope: !2827)
!2829 = !DILocalVariable(name: "ei", scope: !2827, file: !3, line: 2841, type: !2299)
!2830 = !DILocation(line: 2841, column: 23, scope: !2827)
!2831 = !DILocation(line: 2843, column: 9, scope: !2832)
!2832 = distinct !DILexicalBlock(scope: !2827, file: !3, line: 2843, column: 9)
!2833 = !DILocation(line: 2843, column: 9, scope: !2834)
!2834 = distinct !DILexicalBlock(scope: !2832, file: !3, line: 2843, column: 9)
!2835 = !DILocation(line: 2844, column: 33, scope: !2834)
!2836 = !DILocation(line: 2844, column: 16, scope: !2834)
!2837 = !DILocation(line: 2844, column: 13, scope: !2834)
!2838 = !DILocation(line: 2844, column: 4, scope: !2834)
!2839 = distinct !{!2839, !2831, !2840}
!2840 = !DILocation(line: 2844, column: 34, scope: !2832)
!2841 = !DILocation(line: 2845, column: 7, scope: !2827)
!2842 = distinct !{!2842, !2817, !2843}
!2843 = !DILocation(line: 2845, column: 7, scope: !2818)
!2844 = !DILocation(line: 2846, column: 10, scope: !2811)
!2845 = !DILocation(line: 2846, column: 3, scope: !2811)
!2846 = distinct !DISubprogram(name: "stack_result", scope: !3, file: !3, line: 662, type: !2847, scopeLine: 663, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2847 = !DISubroutineType(types: !2848)
!2848 = !{!1028, !1082}
!2849 = !DILocalVariable(name: "decl", arg: 1, scope: !2846, file: !3, line: 662, type: !1082)
!2850 = !DILocation(line: 662, column: 20, scope: !2846)
!2851 = !DILocalVariable(name: "result", scope: !2846, file: !3, line: 664, type: !1028)
!2852 = !DILocation(line: 664, column: 7, scope: !2846)
!2853 = !DILocation(line: 668, column: 26, scope: !2854)
!2854 = distinct !DILexicalBlock(scope: !2846, file: !3, line: 668, column: 7)
!2855 = !DILocation(line: 668, column: 46, scope: !2854)
!2856 = !DILocation(line: 668, column: 7, scope: !2854)
!2857 = !DILocation(line: 668, column: 7, scope: !2846)
!2858 = !DILocation(line: 669, column: 5, scope: !2854)
!2859 = !DILocation(line: 671, column: 12, scope: !2846)
!2860 = !DILocation(line: 671, column: 10, scope: !2846)
!2861 = !DILocation(line: 672, column: 7, scope: !2862)
!2862 = distinct !DILexicalBlock(scope: !2846, file: !3, line: 672, column: 7)
!2863 = !DILocation(line: 672, column: 14, scope: !2862)
!2864 = !DILocation(line: 672, column: 7, scope: !2846)
!2865 = !DILocation(line: 673, column: 28, scope: !2862)
!2866 = !DILocation(line: 673, column: 44, scope: !2862)
!2867 = !DILocation(line: 674, column: 9, scope: !2862)
!2868 = !DILocation(line: 673, column: 14, scope: !2862)
!2869 = !DILocation(line: 673, column: 12, scope: !2862)
!2870 = !DILocation(line: 673, column: 5, scope: !2862)
!2871 = !DILocation(line: 676, column: 10, scope: !2846)
!2872 = !DILocation(line: 676, column: 17, scope: !2846)
!2873 = !DILocation(line: 676, column: 22, scope: !2846)
!2874 = !DILocation(line: 676, column: 25, scope: !2846)
!2875 = !DILocation(line: 676, column: 48, scope: !2846)
!2876 = !DILocation(line: 676, column: 3, scope: !2846)
!2877 = !DILocation(line: 677, column: 1, scope: !2846)
!2878 = distinct !DISubprogram(name: "end_hard_regno", scope: !2879, file: !2879, line: 290, type: !2880, scopeLine: 291, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2879 = !DIFile(filename: "./regs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2880 = !DISubroutineType(types: !2881)
!2881 = !{!7, !5, !7}
!2882 = !DILocalVariable(name: "mode", arg: 1, scope: !2878, file: !2879, line: 290, type: !5)
!2883 = !DILocation(line: 290, column: 35, scope: !2878)
!2884 = !DILocalVariable(name: "regno", arg: 2, scope: !2878, file: !2879, line: 290, type: !7)
!2885 = !DILocation(line: 290, column: 54, scope: !2878)
!2886 = !DILocation(line: 292, column: 10, scope: !2878)
!2887 = !DILocation(line: 292, column: 35, scope: !2878)
!2888 = !DILocation(line: 292, column: 18, scope: !2878)
!2889 = !DILocation(line: 292, column: 48, scope: !2878)
!2890 = !DILocation(line: 292, column: 16, scope: !2878)
!2891 = !DILocation(line: 292, column: 3, scope: !2878)
!2892 = distinct !DISubprogram(name: "convert_regs_1", scope: !3, file: !3, line: 2883, type: !2750, scopeLine: 2884, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!2893 = !DILocalVariable(name: "block", arg: 1, scope: !2892, file: !3, line: 2883, type: !997)
!2894 = !DILocation(line: 2883, column: 29, scope: !2892)
!2895 = !DILocalVariable(name: "regstack", scope: !2892, file: !3, line: 2885, type: !910)
!2896 = !DILocation(line: 2885, column: 20, scope: !2892)
!2897 = !DILocalVariable(name: "bi", scope: !2892, file: !3, line: 2886, type: !905)
!2898 = !DILocation(line: 2886, column: 14, scope: !2892)
!2899 = !DILocation(line: 2886, column: 19, scope: !2892)
!2900 = !DILocalVariable(name: "reg", scope: !2892, file: !3, line: 2887, type: !886)
!2901 = !DILocation(line: 2887, column: 7, scope: !2892)
!2902 = !DILocalVariable(name: "insn", scope: !2892, file: !3, line: 2888, type: !1028)
!2903 = !DILocation(line: 2888, column: 7, scope: !2892)
!2904 = !DILocalVariable(name: "next", scope: !2892, file: !3, line: 2888, type: !1028)
!2905 = !DILocation(line: 2888, column: 13, scope: !2892)
!2906 = !DILocalVariable(name: "control_flow_insn_deleted", scope: !2892, file: !3, line: 2889, type: !918)
!2907 = !DILocation(line: 2889, column: 8, scope: !2892)
!2908 = !DILocalVariable(name: "debug_insns_with_starting_stack", scope: !2892, file: !3, line: 2890, type: !886)
!2909 = !DILocation(line: 2890, column: 7, scope: !2892)
!2910 = !DILocation(line: 2892, column: 21, scope: !2892)
!2911 = !DILocation(line: 2895, column: 7, scope: !2912)
!2912 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 2895, column: 7)
!2913 = !DILocation(line: 2895, column: 11, scope: !2912)
!2914 = !DILocation(line: 2895, column: 20, scope: !2912)
!2915 = !DILocation(line: 2895, column: 24, scope: !2912)
!2916 = !DILocation(line: 2895, column: 7, scope: !2892)
!2917 = !DILocalVariable(name: "e", scope: !2918, file: !3, line: 2897, type: !1014)
!2918 = distinct !DILexicalBlock(scope: !2912, file: !3, line: 2896, column: 5)
!2919 = !DILocation(line: 2897, column: 12, scope: !2918)
!2920 = !DILocalVariable(name: "beste", scope: !2918, file: !3, line: 2897, type: !1014)
!2921 = !DILocation(line: 2897, column: 15, scope: !2918)
!2922 = !DILocalVariable(name: "ei", scope: !2918, file: !3, line: 2898, type: !2299)
!2923 = !DILocation(line: 2898, column: 21, scope: !2918)
!2924 = !DILocation(line: 2902, column: 7, scope: !2925)
!2925 = distinct !DILexicalBlock(scope: !2918, file: !3, line: 2902, column: 7)
!2926 = !DILocation(line: 2902, column: 7, scope: !2927)
!2927 = distinct !DILexicalBlock(scope: !2925, file: !3, line: 2902, column: 7)
!2928 = !DILocation(line: 2903, column: 6, scope: !2929)
!2929 = distinct !DILexicalBlock(scope: !2927, file: !3, line: 2903, column: 6)
!2930 = !DILocation(line: 2903, column: 27, scope: !2929)
!2931 = !DILocation(line: 2903, column: 6, scope: !2927)
!2932 = !DILocation(line: 2904, column: 25, scope: !2929)
!2933 = !DILocation(line: 2904, column: 32, scope: !2929)
!2934 = !DILocation(line: 2904, column: 12, scope: !2929)
!2935 = !DILocation(line: 2904, column: 10, scope: !2929)
!2936 = !DILocation(line: 2904, column: 4, scope: !2929)
!2937 = distinct !{!2937, !2924, !2938}
!2938 = !DILocation(line: 2904, column: 33, scope: !2925)
!2939 = !DILocation(line: 2906, column: 11, scope: !2940)
!2940 = distinct !DILexicalBlock(scope: !2918, file: !3, line: 2906, column: 11)
!2941 = !DILocation(line: 2906, column: 11, scope: !2918)
!2942 = !DILocation(line: 2907, column: 19, scope: !2940)
!2943 = !DILocation(line: 2907, column: 2, scope: !2940)
!2944 = !DILocation(line: 2911, column: 4, scope: !2945)
!2945 = distinct !DILexicalBlock(scope: !2940, file: !3, line: 2909, column: 2)
!2946 = !DILocation(line: 2911, column: 8, scope: !2945)
!2947 = !DILocation(line: 2911, column: 17, scope: !2945)
!2948 = !DILocation(line: 2911, column: 21, scope: !2945)
!2949 = !DILocation(line: 2912, column: 13, scope: !2950)
!2950 = distinct !DILexicalBlock(scope: !2945, file: !3, line: 2912, column: 4)
!2951 = !DILocation(line: 2912, column: 9, scope: !2950)
!2952 = !DILocation(line: 2912, column: 31, scope: !2953)
!2953 = distinct !DILexicalBlock(scope: !2950, file: !3, line: 2912, column: 4)
!2954 = !DILocation(line: 2912, column: 35, scope: !2953)
!2955 = !DILocation(line: 2912, column: 4, scope: !2950)
!2956 = !DILocation(line: 2913, column: 10, scope: !2957)
!2957 = distinct !DILexicalBlock(scope: !2953, file: !3, line: 2913, column: 10)
!2958 = !DILocation(line: 2913, column: 10, scope: !2953)
!2959 = !DILocation(line: 2914, column: 47, scope: !2957)
!2960 = !DILocation(line: 2914, column: 8, scope: !2957)
!2961 = !DILocation(line: 2914, column: 12, scope: !2957)
!2962 = !DILocation(line: 2914, column: 21, scope: !2957)
!2963 = !DILocation(line: 2914, column: 27, scope: !2957)
!2964 = !DILocation(line: 2914, column: 31, scope: !2957)
!2965 = !DILocation(line: 2914, column: 40, scope: !2957)
!2966 = !DILocation(line: 2914, column: 25, scope: !2957)
!2967 = !DILocation(line: 2914, column: 45, scope: !2957)
!2968 = !DILocation(line: 2912, column: 55, scope: !2953)
!2969 = !DILocation(line: 2912, column: 4, scope: !2953)
!2970 = distinct !{!2970, !2955, !2971}
!2971 = !DILocation(line: 2914, column: 47, scope: !2950)
!2972 = !DILocation(line: 2916, column: 5, scope: !2918)
!2973 = !DILocation(line: 2918, column: 7, scope: !2974)
!2974 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 2918, column: 7)
!2975 = !DILocation(line: 2918, column: 7, scope: !2892)
!2976 = !DILocation(line: 2920, column: 16, scope: !2977)
!2977 = distinct !DILexicalBlock(scope: !2974, file: !3, line: 2919, column: 5)
!2978 = !DILocation(line: 2920, column: 62, scope: !2977)
!2979 = !DILocation(line: 2920, column: 69, scope: !2977)
!2980 = !DILocation(line: 2920, column: 7, scope: !2977)
!2981 = !DILocation(line: 2921, column: 20, scope: !2977)
!2982 = !DILocation(line: 2921, column: 32, scope: !2977)
!2983 = !DILocation(line: 2921, column: 36, scope: !2977)
!2984 = !DILocation(line: 2921, column: 7, scope: !2977)
!2985 = !DILocation(line: 2922, column: 5, scope: !2977)
!2986 = !DILocation(line: 2926, column: 19, scope: !2892)
!2987 = !DILocation(line: 2926, column: 17, scope: !2892)
!2988 = !DILocation(line: 2927, column: 10, scope: !2892)
!2989 = !DILocation(line: 2927, column: 8, scope: !2892)
!2990 = !DILocation(line: 2928, column: 14, scope: !2892)
!2991 = !DILocation(line: 2928, column: 18, scope: !2892)
!2992 = !DILocation(line: 2929, column: 20, scope: !2892)
!2993 = !DILocation(line: 2931, column: 3, scope: !2892)
!2994 = !DILocation(line: 2933, column: 14, scope: !2995)
!2995 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 2932, column: 5)
!2996 = !DILocation(line: 2933, column: 12, scope: !2995)
!2997 = !DILocation(line: 2934, column: 14, scope: !2995)
!2998 = !DILocation(line: 2934, column: 12, scope: !2995)
!2999 = !DILocation(line: 2937, column: 7, scope: !2995)
!3000 = !DILocation(line: 2938, column: 11, scope: !3001)
!3001 = distinct !DILexicalBlock(scope: !2995, file: !3, line: 2938, column: 11)
!3002 = !DILocation(line: 2938, column: 19, scope: !3001)
!3003 = !DILocation(line: 2938, column: 16, scope: !3001)
!3004 = !DILocation(line: 2938, column: 11, scope: !2995)
!3005 = !DILocation(line: 2939, column: 7, scope: !3001)
!3006 = !DILocation(line: 2939, column: 2, scope: !3001)
!3007 = !DILocation(line: 2943, column: 11, scope: !3008)
!3008 = distinct !DILexicalBlock(scope: !2995, file: !3, line: 2943, column: 11)
!3009 = !DILocation(line: 2943, column: 11, scope: !2995)
!3010 = !DILocation(line: 2945, column: 8, scope: !3011)
!3011 = distinct !DILexicalBlock(scope: !3012, file: !3, line: 2945, column: 8)
!3012 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 2944, column: 2)
!3013 = !DILocation(line: 2945, column: 8, scope: !3012)
!3014 = !DILocation(line: 2946, column: 37, scope: !3011)
!3015 = !DILocation(line: 2946, column: 6, scope: !3011)
!3016 = !DILocation(line: 2949, column: 23, scope: !3017)
!3017 = distinct !DILexicalBlock(scope: !3011, file: !3, line: 2948, column: 6)
!3018 = !DILocation(line: 2950, column: 8, scope: !3017)
!3019 = !DILocation(line: 2949, column: 8, scope: !3017)
!3020 = !DILocation(line: 2957, column: 8, scope: !3017)
!3021 = !DILocation(line: 2959, column: 2, scope: !3012)
!3022 = !DILocation(line: 2960, column: 38, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 2960, column: 16)
!3024 = !DILocation(line: 2960, column: 16, scope: !3023)
!3025 = !DILocation(line: 2961, column: 9, scope: !3023)
!3026 = !DILocation(line: 2961, column: 12, scope: !3023)
!3027 = !DILocation(line: 2960, column: 16, scope: !3008)
!3028 = !DILocation(line: 2963, column: 8, scope: !3029)
!3029 = distinct !DILexicalBlock(scope: !3030, file: !3, line: 2963, column: 8)
!3030 = distinct !DILexicalBlock(scope: !3023, file: !3, line: 2962, column: 2)
!3031 = !DILocation(line: 2963, column: 8, scope: !3030)
!3032 = !DILocation(line: 2965, column: 17, scope: !3033)
!3033 = distinct !DILexicalBlock(scope: !3029, file: !3, line: 2964, column: 6)
!3034 = !DILocation(line: 2966, column: 10, scope: !3033)
!3035 = !DILocation(line: 2965, column: 8, scope: !3033)
!3036 = !DILocation(line: 2967, column: 21, scope: !3033)
!3037 = !DILocation(line: 2967, column: 8, scope: !3033)
!3038 = !DILocation(line: 2968, column: 6, scope: !3033)
!3039 = !DILocation(line: 2969, column: 51, scope: !3030)
!3040 = !DILocation(line: 2969, column: 33, scope: !3030)
!3041 = !DILocation(line: 2969, column: 30, scope: !3030)
!3042 = !DILocation(line: 2970, column: 21, scope: !3030)
!3043 = !DILocation(line: 2971, column: 2, scope: !3030)
!3044 = !DILocation(line: 2972, column: 5, scope: !2995)
!3045 = !DILocation(line: 2973, column: 10, scope: !2892)
!3046 = distinct !{!3046, !2993, !3047}
!3047 = !DILocation(line: 2973, column: 14, scope: !2892)
!3048 = !DILocation(line: 2975, column: 7, scope: !3049)
!3049 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 2975, column: 7)
!3050 = !DILocation(line: 2975, column: 7, scope: !2892)
!3051 = !DILocation(line: 2981, column: 19, scope: !3052)
!3052 = distinct !DILexicalBlock(scope: !3053, file: !3, line: 2981, column: 7)
!3053 = distinct !DILexicalBlock(scope: !3049, file: !3, line: 2976, column: 5)
!3054 = !DILocation(line: 2981, column: 17, scope: !3052)
!3055 = !DILocation(line: 2981, column: 12, scope: !3052)
!3056 = !DILocation(line: 2981, column: 36, scope: !3057)
!3057 = distinct !DILexicalBlock(scope: !3052, file: !3, line: 2981, column: 7)
!3058 = !DILocation(line: 2981, column: 7, scope: !3052)
!3059 = !DILocation(line: 2984, column: 9, scope: !3060)
!3060 = distinct !DILexicalBlock(scope: !3061, file: !3, line: 2984, column: 8)
!3061 = distinct !DILexicalBlock(scope: !3057, file: !3, line: 2983, column: 2)
!3062 = !DILocation(line: 2984, column: 8, scope: !3061)
!3063 = !DILocation(line: 2985, column: 6, scope: !3060)
!3064 = !DILocation(line: 2987, column: 35, scope: !3061)
!3065 = !DILocation(line: 2988, column: 19, scope: !3061)
!3066 = !DILocation(line: 2989, column: 5, scope: !3061)
!3067 = !DILocation(line: 2989, column: 9, scope: !3061)
!3068 = !DILocation(line: 2989, column: 4, scope: !3061)
!3069 = !DILocation(line: 2988, column: 4, scope: !3061)
!3070 = !DILocation(line: 2990, column: 2, scope: !3061)
!3071 = !DILocation(line: 2982, column: 12, scope: !3057)
!3072 = !DILocation(line: 2982, column: 10, scope: !3057)
!3073 = !DILocation(line: 2981, column: 7, scope: !3057)
!3074 = distinct !{!3074, !3058, !3075}
!3075 = !DILocation(line: 2990, column: 2, scope: !3052)
!3076 = !DILocation(line: 2991, column: 5, scope: !3053)
!3077 = !DILocation(line: 2993, column: 7, scope: !3078)
!3078 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 2993, column: 7)
!3079 = !DILocation(line: 2993, column: 7, scope: !2892)
!3080 = !DILocation(line: 2995, column: 16, scope: !3081)
!3081 = distinct !DILexicalBlock(scope: !3078, file: !3, line: 2994, column: 5)
!3082 = !DILocation(line: 2995, column: 7, scope: !3081)
!3083 = !DILocation(line: 2996, column: 16, scope: !3084)
!3084 = distinct !DILexicalBlock(scope: !3081, file: !3, line: 2996, column: 7)
!3085 = !DILocation(line: 2996, column: 12, scope: !3084)
!3086 = !DILocation(line: 2996, column: 35, scope: !3087)
!3087 = distinct !DILexicalBlock(scope: !3084, file: !3, line: 2996, column: 7)
!3088 = !DILocation(line: 2996, column: 39, scope: !3087)
!3089 = !DILocation(line: 2996, column: 7, scope: !3084)
!3090 = !DILocation(line: 2997, column: 6, scope: !3091)
!3091 = distinct !DILexicalBlock(scope: !3087, file: !3, line: 2997, column: 6)
!3092 = !DILocation(line: 2997, column: 6, scope: !3087)
!3093 = !DILocation(line: 2998, column: 13, scope: !3091)
!3094 = !DILocation(line: 2998, column: 31, scope: !3091)
!3095 = !DILocation(line: 2998, column: 4, scope: !3091)
!3096 = !DILocation(line: 2996, column: 58, scope: !3087)
!3097 = !DILocation(line: 2996, column: 7, scope: !3087)
!3098 = distinct !{!3098, !3089, !3099}
!3099 = !DILocation(line: 2998, column: 34, scope: !3084)
!3100 = !DILocation(line: 2999, column: 16, scope: !3081)
!3101 = !DILocation(line: 2999, column: 7, scope: !3081)
!3102 = !DILocation(line: 3000, column: 20, scope: !3081)
!3103 = !DILocation(line: 3000, column: 7, scope: !3081)
!3104 = !DILocation(line: 3001, column: 5, scope: !3081)
!3105 = !DILocation(line: 3003, column: 10, scope: !2892)
!3106 = !DILocation(line: 3003, column: 8, scope: !2892)
!3107 = !DILocation(line: 3004, column: 7, scope: !3108)
!3108 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 3004, column: 7)
!3109 = !DILocation(line: 3004, column: 7, scope: !2892)
!3110 = !DILocation(line: 3005, column: 12, scope: !3108)
!3111 = !DILocation(line: 3005, column: 10, scope: !3108)
!3112 = !DILocation(line: 3005, column: 5, scope: !3108)
!3113 = !DILocation(line: 3011, column: 12, scope: !3114)
!3114 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 3011, column: 3)
!3115 = !DILocation(line: 3011, column: 8, scope: !3114)
!3116 = !DILocation(line: 3011, column: 31, scope: !3117)
!3117 = distinct !DILexicalBlock(scope: !3114, file: !3, line: 3011, column: 3)
!3118 = !DILocation(line: 3011, column: 35, scope: !3117)
!3119 = !DILocation(line: 3011, column: 3, scope: !3114)
!3120 = !DILocation(line: 3013, column: 11, scope: !3121)
!3121 = distinct !DILexicalBlock(scope: !3122, file: !3, line: 3013, column: 11)
!3122 = distinct !DILexicalBlock(scope: !3117, file: !3, line: 3012, column: 5)
!3123 = !DILocation(line: 3014, column: 4, scope: !3121)
!3124 = !DILocation(line: 3014, column: 9, scope: !3121)
!3125 = !DILocation(line: 3013, column: 11, scope: !3122)
!3126 = !DILocalVariable(name: "set", scope: !3127, file: !3, line: 3016, type: !1028)
!3127 = distinct !DILexicalBlock(scope: !3121, file: !3, line: 3015, column: 2)
!3128 = !DILocation(line: 3016, column: 8, scope: !3127)
!3129 = !DILocation(line: 3018, column: 8, scope: !3130)
!3130 = distinct !DILexicalBlock(scope: !3127, file: !3, line: 3018, column: 8)
!3131 = !DILocation(line: 3018, column: 8, scope: !3127)
!3132 = !DILocation(line: 3019, column: 15, scope: !3130)
!3133 = !DILocation(line: 3019, column: 65, scope: !3130)
!3134 = !DILocation(line: 3019, column: 6, scope: !3130)
!3135 = !DILocation(line: 3021, column: 10, scope: !3127)
!3136 = !DILocation(line: 3021, column: 8, scope: !3127)
!3137 = !DILocation(line: 3022, column: 28, scope: !3127)
!3138 = !DILocation(line: 3022, column: 33, scope: !3127)
!3139 = !DILocation(line: 3022, column: 11, scope: !3127)
!3140 = !DILocation(line: 3022, column: 9, scope: !3127)
!3141 = !DILocation(line: 3023, column: 51, scope: !3127)
!3142 = !DILocation(line: 3023, column: 33, scope: !3127)
!3143 = !DILocation(line: 3023, column: 30, scope: !3127)
!3144 = !DILocation(line: 3024, column: 2, scope: !3127)
!3145 = !DILocation(line: 3025, column: 5, scope: !3122)
!3146 = !DILocation(line: 3011, column: 54, scope: !3117)
!3147 = !DILocation(line: 3011, column: 3, scope: !3117)
!3148 = distinct !{!3148, !3119, !3149}
!3149 = !DILocation(line: 3025, column: 5, scope: !3114)
!3150 = !DILocation(line: 3044, column: 7, scope: !3151)
!3151 = distinct !DILexicalBlock(scope: !2892, file: !3, line: 3044, column: 7)
!3152 = !DILocation(line: 3044, column: 7, scope: !2892)
!3153 = !DILocation(line: 3045, column: 23, scope: !3151)
!3154 = !DILocation(line: 3045, column: 5, scope: !3151)
!3155 = !DILocation(line: 3051, column: 3, scope: !2892)
!3156 = !DILocation(line: 3053, column: 3, scope: !2892)
!3157 = !DILocation(line: 3053, column: 7, scope: !2892)
!3158 = !DILocation(line: 3053, column: 19, scope: !2892)
!3159 = !DILocation(line: 3054, column: 3, scope: !2892)
!3160 = !DILocation(line: 3054, column: 7, scope: !2892)
!3161 = !DILocation(line: 3054, column: 12, scope: !2892)
!3162 = !DILocation(line: 3055, column: 1, scope: !2892)
!3163 = distinct !DISubprogram(name: "better_edge", scope: !3, file: !3, line: 2855, type: !3164, scopeLine: 2856, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!3164 = !DISubroutineType(types: !3165)
!3165 = !{!1014, !1014, !1014}
!3166 = !DILocalVariable(name: "e1", arg: 1, scope: !3163, file: !3, line: 2855, type: !1014)
!3167 = !DILocation(line: 2855, column: 19, scope: !3163)
!3168 = !DILocalVariable(name: "e2", arg: 2, scope: !3163, file: !3, line: 2855, type: !1014)
!3169 = !DILocation(line: 2855, column: 28, scope: !3163)
!3170 = !DILocation(line: 2857, column: 8, scope: !3171)
!3171 = distinct !DILexicalBlock(scope: !3163, file: !3, line: 2857, column: 7)
!3172 = !DILocation(line: 2857, column: 7, scope: !3163)
!3173 = !DILocation(line: 2858, column: 12, scope: !3171)
!3174 = !DILocation(line: 2858, column: 5, scope: !3171)
!3175 = !DILocation(line: 2860, column: 7, scope: !3176)
!3176 = distinct !DILexicalBlock(scope: !3163, file: !3, line: 2860, column: 7)
!3177 = !DILocation(line: 2860, column: 29, scope: !3176)
!3178 = !DILocation(line: 2860, column: 27, scope: !3176)
!3179 = !DILocation(line: 2860, column: 7, scope: !3163)
!3180 = !DILocation(line: 2861, column: 12, scope: !3176)
!3181 = !DILocation(line: 2861, column: 5, scope: !3176)
!3182 = !DILocation(line: 2862, column: 7, scope: !3183)
!3183 = distinct !DILexicalBlock(scope: !3163, file: !3, line: 2862, column: 7)
!3184 = !DILocation(line: 2862, column: 29, scope: !3183)
!3185 = !DILocation(line: 2862, column: 27, scope: !3183)
!3186 = !DILocation(line: 2862, column: 7, scope: !3163)
!3187 = !DILocation(line: 2863, column: 12, scope: !3183)
!3188 = !DILocation(line: 2863, column: 5, scope: !3183)
!3189 = !DILocation(line: 2865, column: 7, scope: !3190)
!3190 = distinct !DILexicalBlock(scope: !3163, file: !3, line: 2865, column: 7)
!3191 = !DILocation(line: 2865, column: 11, scope: !3190)
!3192 = !DILocation(line: 2865, column: 19, scope: !3190)
!3193 = !DILocation(line: 2865, column: 23, scope: !3190)
!3194 = !DILocation(line: 2865, column: 17, scope: !3190)
!3195 = !DILocation(line: 2865, column: 7, scope: !3163)
!3196 = !DILocation(line: 2866, column: 12, scope: !3190)
!3197 = !DILocation(line: 2866, column: 5, scope: !3190)
!3198 = !DILocation(line: 2867, column: 7, scope: !3199)
!3199 = distinct !DILexicalBlock(scope: !3163, file: !3, line: 2867, column: 7)
!3200 = !DILocation(line: 2867, column: 11, scope: !3199)
!3201 = !DILocation(line: 2867, column: 19, scope: !3199)
!3202 = !DILocation(line: 2867, column: 23, scope: !3199)
!3203 = !DILocation(line: 2867, column: 17, scope: !3199)
!3204 = !DILocation(line: 2867, column: 7, scope: !3163)
!3205 = !DILocation(line: 2868, column: 12, scope: !3199)
!3206 = !DILocation(line: 2868, column: 5, scope: !3199)
!3207 = !DILocation(line: 2873, column: 7, scope: !3208)
!3208 = distinct !DILexicalBlock(scope: !3163, file: !3, line: 2873, column: 7)
!3209 = !DILocation(line: 0, scope: !3208)
!3210 = !DILocation(line: 2873, column: 31, scope: !3208)
!3211 = !DILocation(line: 2873, column: 28, scope: !3208)
!3212 = !DILocation(line: 2873, column: 7, scope: !3163)
!3213 = !DILocation(line: 2874, column: 12, scope: !3208)
!3214 = !DILocation(line: 2874, column: 35, scope: !3208)
!3215 = !DILocation(line: 2874, column: 40, scope: !3208)
!3216 = !DILocation(line: 2874, column: 5, scope: !3208)
!3217 = !DILocation(line: 2877, column: 11, scope: !3163)
!3218 = !DILocation(line: 2877, column: 15, scope: !3163)
!3219 = !DILocation(line: 2877, column: 20, scope: !3163)
!3220 = !DILocation(line: 2877, column: 28, scope: !3163)
!3221 = !DILocation(line: 2877, column: 32, scope: !3163)
!3222 = !DILocation(line: 2877, column: 37, scope: !3163)
!3223 = !DILocation(line: 2877, column: 26, scope: !3163)
!3224 = !DILocation(line: 2877, column: 10, scope: !3163)
!3225 = !DILocation(line: 2877, column: 46, scope: !3163)
!3226 = !DILocation(line: 2877, column: 51, scope: !3163)
!3227 = !DILocation(line: 2877, column: 3, scope: !3163)
!3228 = !DILocation(line: 2878, column: 1, scope: !3163)
!3229 = distinct !DISubprogram(name: "propagate_stack", scope: !3, file: !3, line: 2704, type: !3230, scopeLine: 2705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!3230 = !DISubroutineType(types: !3231)
!3231 = !{null, !1014}
!3232 = !DILocalVariable(name: "e", arg: 1, scope: !3229, file: !3, line: 2704, type: !1014)
!3233 = !DILocation(line: 2704, column: 23, scope: !3229)
!3234 = !DILocalVariable(name: "src_stack", scope: !3229, file: !3, line: 2706, type: !2004)
!3235 = !DILocation(line: 2706, column: 9, scope: !3229)
!3236 = !DILocation(line: 2706, column: 22, scope: !3229)
!3237 = !DILocation(line: 2706, column: 43, scope: !3229)
!3238 = !DILocalVariable(name: "dest_stack", scope: !3229, file: !3, line: 2707, type: !2004)
!3239 = !DILocation(line: 2707, column: 9, scope: !3229)
!3240 = !DILocation(line: 2707, column: 23, scope: !3229)
!3241 = !DILocation(line: 2707, column: 45, scope: !3229)
!3242 = !DILocalVariable(name: "reg", scope: !3229, file: !3, line: 2708, type: !886)
!3243 = !DILocation(line: 2708, column: 7, scope: !3229)
!3244 = !DILocation(line: 2712, column: 3, scope: !3229)
!3245 = !DILocation(line: 2712, column: 15, scope: !3229)
!3246 = !DILocation(line: 2712, column: 19, scope: !3229)
!3247 = !DILocation(line: 2713, column: 12, scope: !3248)
!3248 = distinct !DILexicalBlock(scope: !3229, file: !3, line: 2713, column: 3)
!3249 = !DILocation(line: 2713, column: 8, scope: !3248)
!3250 = !DILocation(line: 2713, column: 17, scope: !3251)
!3251 = distinct !DILexicalBlock(scope: !3248, file: !3, line: 2713, column: 3)
!3252 = !DILocation(line: 2713, column: 24, scope: !3251)
!3253 = !DILocation(line: 2713, column: 35, scope: !3251)
!3254 = !DILocation(line: 2713, column: 21, scope: !3251)
!3255 = !DILocation(line: 2713, column: 3, scope: !3248)
!3256 = !DILocation(line: 2714, column: 9, scope: !3257)
!3257 = distinct !DILexicalBlock(scope: !3251, file: !3, line: 2714, column: 9)
!3258 = !DILocation(line: 2714, column: 9, scope: !3251)
!3259 = !DILocation(line: 2715, column: 44, scope: !3257)
!3260 = !DILocation(line: 2715, column: 55, scope: !3257)
!3261 = !DILocation(line: 2715, column: 59, scope: !3257)
!3262 = !DILocation(line: 2715, column: 7, scope: !3257)
!3263 = !DILocation(line: 2715, column: 19, scope: !3257)
!3264 = !DILocation(line: 2715, column: 25, scope: !3257)
!3265 = !DILocation(line: 2715, column: 37, scope: !3257)
!3266 = !DILocation(line: 2715, column: 23, scope: !3257)
!3267 = !DILocation(line: 2715, column: 42, scope: !3257)
!3268 = !DILocation(line: 2713, column: 40, scope: !3251)
!3269 = !DILocation(line: 2713, column: 3, scope: !3251)
!3270 = distinct !{!3270, !3255, !3271}
!3271 = !DILocation(line: 2715, column: 62, scope: !3248)
!3272 = !DILocation(line: 2718, column: 12, scope: !3273)
!3273 = distinct !DILexicalBlock(scope: !3229, file: !3, line: 2718, column: 3)
!3274 = !DILocation(line: 2718, column: 8, scope: !3273)
!3275 = !DILocation(line: 2718, column: 31, scope: !3276)
!3276 = distinct !DILexicalBlock(scope: !3273, file: !3, line: 2718, column: 3)
!3277 = !DILocation(line: 2718, column: 35, scope: !3276)
!3278 = !DILocation(line: 2718, column: 3, scope: !3273)
!3279 = !DILocation(line: 2719, column: 9, scope: !3280)
!3280 = distinct !DILexicalBlock(scope: !3276, file: !3, line: 2719, column: 9)
!3281 = !DILocation(line: 2720, column: 9, scope: !3280)
!3282 = !DILocation(line: 2720, column: 13, scope: !3280)
!3283 = !DILocation(line: 2719, column: 9, scope: !3276)
!3284 = !DILocation(line: 2721, column: 44, scope: !3280)
!3285 = !DILocation(line: 2721, column: 7, scope: !3280)
!3286 = !DILocation(line: 2721, column: 19, scope: !3280)
!3287 = !DILocation(line: 2721, column: 25, scope: !3280)
!3288 = !DILocation(line: 2721, column: 37, scope: !3280)
!3289 = !DILocation(line: 2721, column: 23, scope: !3280)
!3290 = !DILocation(line: 2721, column: 42, scope: !3280)
!3291 = !DILocation(line: 2718, column: 60, scope: !3276)
!3292 = !DILocation(line: 2718, column: 3, scope: !3276)
!3293 = distinct !{!3293, !3278, !3294}
!3294 = !DILocation(line: 2721, column: 44, scope: !3273)
!3295 = !DILocation(line: 2722, column: 1, scope: !3229)
!3296 = distinct !DISubprogram(name: "print_stack", scope: !3, file: !3, line: 2597, type: !3297, scopeLine: 2598, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!3297 = !DISubroutineType(types: !3298)
!3298 = !{null, !3299, !2004}
!3299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3300, size: 64)
!3300 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3301, line: 7, baseType: !3302)
!3301 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3303, line: 49, size: 1728, elements: !3304)
!3303 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3304 = !{!3305, !3306, !3307, !3308, !3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3320, !3322, !3323, !3324, !3327, !3329, !3330, !3331, !3334, !3336, !3339, !3342, !3343, !3344, !3345, !3346}
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3302, file: !3303, line: 51, baseType: !886, size: 32)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3302, file: !3303, line: 54, baseType: !970, size: 64, offset: 64)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3302, file: !3303, line: 55, baseType: !970, size: 64, offset: 128)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3302, file: !3303, line: 56, baseType: !970, size: 64, offset: 192)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3302, file: !3303, line: 57, baseType: !970, size: 64, offset: 256)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3302, file: !3303, line: 58, baseType: !970, size: 64, offset: 320)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3302, file: !3303, line: 59, baseType: !970, size: 64, offset: 384)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3302, file: !3303, line: 60, baseType: !970, size: 64, offset: 448)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3302, file: !3303, line: 61, baseType: !970, size: 64, offset: 512)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3302, file: !3303, line: 64, baseType: !970, size: 64, offset: 576)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3302, file: !3303, line: 65, baseType: !970, size: 64, offset: 640)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3302, file: !3303, line: 66, baseType: !970, size: 64, offset: 704)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3302, file: !3303, line: 68, baseType: !3318, size: 64, offset: 768)
!3318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3319, size: 64)
!3319 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3303, line: 36, flags: DIFlagFwdDecl)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3302, file: !3303, line: 70, baseType: !3321, size: 64, offset: 832)
!3321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3302, size: 64)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3302, file: !3303, line: 72, baseType: !886, size: 32, offset: 896)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3302, file: !3303, line: 73, baseType: !886, size: 32, offset: 928)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3302, file: !3303, line: 74, baseType: !3325, size: 64, offset: 960)
!3325 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3326, line: 152, baseType: !964)
!3326 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3302, file: !3303, line: 77, baseType: !3328, size: 16, offset: 1024)
!3328 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3302, file: !3303, line: 78, baseType: !1701, size: 8, offset: 1040)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3302, file: !3303, line: 79, baseType: !899, size: 8, offset: 1048)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3302, file: !3303, line: 81, baseType: !3332, size: 64, offset: 1088)
!3332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3333, size: 64)
!3333 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3303, line: 43, baseType: null)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3302, file: !3303, line: 89, baseType: !3335, size: 64, offset: 1152)
!3335 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3326, line: 153, baseType: !964)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3302, file: !3303, line: 91, baseType: !3337, size: 64, offset: 1216)
!3337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3338, size: 64)
!3338 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3303, line: 37, flags: DIFlagFwdDecl)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3302, file: !3303, line: 92, baseType: !3340, size: 64, offset: 1280)
!3340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3341, size: 64)
!3341 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3303, line: 38, flags: DIFlagFwdDecl)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3302, file: !3303, line: 93, baseType: !3321, size: 64, offset: 1344)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3302, file: !3303, line: 94, baseType: !904, size: 64, offset: 1408)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3302, file: !3303, line: 95, baseType: !1397, size: 64, offset: 1472)
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3302, file: !3303, line: 96, baseType: !886, size: 32, offset: 1536)
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3302, file: !3303, line: 98, baseType: !3347, size: 160, offset: 1568)
!3347 = !DICompositeType(tag: DW_TAG_array_type, baseType: !900, size: 160, elements: !3348)
!3348 = !{!3349}
!3349 = !DISubrange(count: 20)
!3350 = !DILocalVariable(name: "file", arg: 1, scope: !3296, file: !3, line: 2597, type: !3299)
!3351 = !DILocation(line: 2597, column: 20, scope: !3296)
!3352 = !DILocalVariable(name: "s", arg: 2, scope: !3296, file: !3, line: 2597, type: !2004)
!3353 = !DILocation(line: 2597, column: 32, scope: !3296)
!3354 = !DILocation(line: 2599, column: 9, scope: !3355)
!3355 = distinct !DILexicalBlock(scope: !3296, file: !3, line: 2599, column: 7)
!3356 = !DILocation(line: 2599, column: 7, scope: !3296)
!3357 = !DILocation(line: 2600, column: 5, scope: !3355)
!3358 = !DILocation(line: 2602, column: 7, scope: !3359)
!3359 = distinct !DILexicalBlock(scope: !3296, file: !3, line: 2602, column: 7)
!3360 = !DILocation(line: 2602, column: 10, scope: !3359)
!3361 = !DILocation(line: 2602, column: 14, scope: !3359)
!3362 = !DILocation(line: 2602, column: 7, scope: !3296)
!3363 = !DILocation(line: 2603, column: 14, scope: !3359)
!3364 = !DILocation(line: 2603, column: 5, scope: !3359)
!3365 = !DILocation(line: 2604, column: 12, scope: !3366)
!3366 = distinct !DILexicalBlock(scope: !3359, file: !3, line: 2604, column: 12)
!3367 = !DILocation(line: 2604, column: 15, scope: !3366)
!3368 = !DILocation(line: 2604, column: 19, scope: !3366)
!3369 = !DILocation(line: 2604, column: 12, scope: !3359)
!3370 = !DILocation(line: 2605, column: 14, scope: !3366)
!3371 = !DILocation(line: 2605, column: 5, scope: !3366)
!3372 = !DILocalVariable(name: "i", scope: !3373, file: !3, line: 2608, type: !886)
!3373 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 2607, column: 5)
!3374 = !DILocation(line: 2608, column: 11, scope: !3373)
!3375 = !DILocation(line: 2609, column: 20, scope: !3373)
!3376 = !DILocation(line: 2609, column: 7, scope: !3373)
!3377 = !DILocation(line: 2610, column: 14, scope: !3378)
!3378 = distinct !DILexicalBlock(scope: !3373, file: !3, line: 2610, column: 7)
!3379 = !DILocation(line: 2610, column: 12, scope: !3378)
!3380 = !DILocation(line: 2610, column: 19, scope: !3381)
!3381 = distinct !DILexicalBlock(scope: !3378, file: !3, line: 2610, column: 7)
!3382 = !DILocation(line: 2610, column: 24, scope: !3381)
!3383 = !DILocation(line: 2610, column: 27, scope: !3381)
!3384 = !DILocation(line: 2610, column: 21, scope: !3381)
!3385 = !DILocation(line: 2610, column: 7, scope: !3378)
!3386 = !DILocation(line: 2611, column: 11, scope: !3381)
!3387 = !DILocation(line: 2611, column: 24, scope: !3381)
!3388 = !DILocation(line: 2611, column: 27, scope: !3381)
!3389 = !DILocation(line: 2611, column: 31, scope: !3381)
!3390 = !DILocation(line: 2611, column: 2, scope: !3381)
!3391 = !DILocation(line: 2610, column: 32, scope: !3381)
!3392 = !DILocation(line: 2610, column: 7, scope: !3381)
!3393 = distinct !{!3393, !3385, !3394}
!3394 = !DILocation(line: 2611, column: 33, scope: !3378)
!3395 = !DILocation(line: 2612, column: 21, scope: !3373)
!3396 = !DILocation(line: 2612, column: 7, scope: !3373)
!3397 = !DILocation(line: 2614, column: 1, scope: !3296)
!3398 = distinct !DISubprogram(name: "subst_stack_regs_in_debug_insn", scope: !3, file: !3, line: 1324, type: !3399, scopeLine: 1325, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!3399 = !DISubroutineType(types: !3400)
!3400 = !{!886, !2006, !904}
!3401 = !DILocalVariable(name: "loc", arg: 1, scope: !3398, file: !3, line: 1324, type: !2006)
!3402 = !DILocation(line: 1324, column: 38, scope: !3398)
!3403 = !DILocalVariable(name: "data", arg: 2, scope: !3398, file: !3, line: 1324, type: !904)
!3404 = !DILocation(line: 1324, column: 49, scope: !3398)
!3405 = !DILocalVariable(name: "tloc", scope: !3398, file: !3, line: 1326, type: !2006)
!3406 = !DILocation(line: 1326, column: 8, scope: !3398)
!3407 = !DILocation(line: 1326, column: 29, scope: !3398)
!3408 = !DILocation(line: 1326, column: 15, scope: !3398)
!3409 = !DILocalVariable(name: "regstack", scope: !3398, file: !3, line: 1327, type: !2004)
!3410 = !DILocation(line: 1327, column: 9, scope: !3398)
!3411 = !DILocation(line: 1327, column: 27, scope: !3398)
!3412 = !DILocation(line: 1327, column: 20, scope: !3398)
!3413 = !DILocalVariable(name: "hard_regno", scope: !3398, file: !3, line: 1328, type: !886)
!3414 = !DILocation(line: 1328, column: 7, scope: !3398)
!3415 = !DILocation(line: 1330, column: 8, scope: !3416)
!3416 = distinct !DILexicalBlock(scope: !3398, file: !3, line: 1330, column: 7)
!3417 = !DILocation(line: 1330, column: 7, scope: !3398)
!3418 = !DILocation(line: 1331, column: 5, scope: !3416)
!3419 = !DILocation(line: 1333, column: 7, scope: !3420)
!3420 = distinct !DILexicalBlock(scope: !3398, file: !3, line: 1333, column: 7)
!3421 = !DILocation(line: 1333, column: 15, scope: !3420)
!3422 = !DILocation(line: 1333, column: 12, scope: !3420)
!3423 = !DILocation(line: 1333, column: 7, scope: !3398)
!3424 = !DILocation(line: 1334, column: 5, scope: !3420)
!3425 = !DILocation(line: 1336, column: 33, scope: !3398)
!3426 = !DILocation(line: 1336, column: 44, scope: !3398)
!3427 = !DILocation(line: 1336, column: 43, scope: !3398)
!3428 = !DILocation(line: 1336, column: 16, scope: !3398)
!3429 = !DILocation(line: 1336, column: 14, scope: !3398)
!3430 = !DILocation(line: 1337, column: 3, scope: !3398)
!3431 = !DILocation(line: 1339, column: 16, scope: !3398)
!3432 = !DILocation(line: 1339, column: 21, scope: !3398)
!3433 = !DILocation(line: 1339, column: 3, scope: !3398)
!3434 = !DILocation(line: 1341, column: 3, scope: !3398)
!3435 = !DILocation(line: 1342, column: 1, scope: !3398)
!3436 = distinct !DISubprogram(name: "subst_stack_regs", scope: !3, file: !3, line: 2279, type: !3437, scopeLine: 2280, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!3437 = !DISubroutineType(types: !3438)
!3438 = !{!918, !1028, !2004}
!3439 = !DILocalVariable(name: "insn", arg: 1, scope: !3436, file: !3, line: 2279, type: !1028)
!3440 = !DILocation(line: 2279, column: 23, scope: !3436)
!3441 = !DILocalVariable(name: "regstack", arg: 2, scope: !3436, file: !3, line: 2279, type: !2004)
!3442 = !DILocation(line: 2279, column: 35, scope: !3436)
!3443 = !DILocalVariable(name: "note_link", scope: !3436, file: !3, line: 2281, type: !2006)
!3444 = !DILocation(line: 2281, column: 8, scope: !3436)
!3445 = !DILocalVariable(name: "note", scope: !3436, file: !3, line: 2281, type: !1028)
!3446 = !DILocation(line: 2281, column: 19, scope: !3436)
!3447 = !DILocalVariable(name: "control_flow_insn_deleted", scope: !3436, file: !3, line: 2282, type: !918)
!3448 = !DILocation(line: 2282, column: 8, scope: !3436)
!3449 = !DILocalVariable(name: "i", scope: !3436, file: !3, line: 2283, type: !886)
!3450 = !DILocation(line: 2283, column: 7, scope: !3436)
!3451 = !DILocation(line: 2285, column: 7, scope: !3452)
!3452 = distinct !DILexicalBlock(scope: !3436, file: !3, line: 2285, column: 7)
!3453 = !DILocation(line: 2285, column: 7, scope: !3436)
!3454 = !DILocalVariable(name: "top", scope: !3455, file: !3, line: 2287, type: !886)
!3455 = distinct !DILexicalBlock(scope: !3452, file: !3, line: 2286, column: 5)
!3456 = !DILocation(line: 2287, column: 11, scope: !3455)
!3457 = !DILocation(line: 2287, column: 17, scope: !3455)
!3458 = !DILocation(line: 2287, column: 27, scope: !3455)
!3459 = !DILocation(line: 2293, column: 11, scope: !3460)
!3460 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 2293, column: 11)
!3461 = !DILocation(line: 2293, column: 15, scope: !3460)
!3462 = !DILocation(line: 2293, column: 11, scope: !3455)
!3463 = !DILocation(line: 2295, column: 22, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3460, file: !3, line: 2294, column: 2)
!3465 = !DILocation(line: 2295, column: 28, scope: !3464)
!3466 = !DILocation(line: 2295, column: 4, scope: !3464)
!3467 = !DILocation(line: 2299, column: 4, scope: !3464)
!3468 = !DILocation(line: 2299, column: 11, scope: !3464)
!3469 = !DILocation(line: 2299, column: 21, scope: !3464)
!3470 = !DILocation(line: 2299, column: 25, scope: !3464)
!3471 = !DILocation(line: 2301, column: 8, scope: !3472)
!3472 = distinct !DILexicalBlock(scope: !3464, file: !3, line: 2300, column: 6)
!3473 = !DILocation(line: 2302, column: 8, scope: !3472)
!3474 = !DILocation(line: 2302, column: 18, scope: !3472)
!3475 = !DILocation(line: 2302, column: 21, scope: !3472)
!3476 = distinct !{!3476, !3467, !3477}
!3477 = !DILocation(line: 2303, column: 6, scope: !3464)
!3478 = !DILocation(line: 2304, column: 2, scope: !3464)
!3479 = !DILocation(line: 2305, column: 5, scope: !3455)
!3480 = !DILocation(line: 2313, column: 29, scope: !3481)
!3481 = distinct !DILexicalBlock(scope: !3436, file: !3, line: 2313, column: 7)
!3482 = !DILocation(line: 2313, column: 7, scope: !3481)
!3483 = !DILocation(line: 2313, column: 7, scope: !3436)
!3484 = !DILocalVariable(name: "n_operands", scope: !3485, file: !3, line: 2315, type: !886)
!3485 = distinct !DILexicalBlock(scope: !3481, file: !3, line: 2314, column: 5)
!3486 = !DILocation(line: 2315, column: 11, scope: !3485)
!3487 = !DILocation(line: 2315, column: 39, scope: !3485)
!3488 = !DILocation(line: 2315, column: 24, scope: !3485)
!3489 = !DILocation(line: 2316, column: 11, scope: !3490)
!3490 = distinct !DILexicalBlock(scope: !3485, file: !3, line: 2316, column: 11)
!3491 = !DILocation(line: 2316, column: 22, scope: !3490)
!3492 = !DILocation(line: 2316, column: 11, scope: !3485)
!3493 = !DILocation(line: 2322, column: 26, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !3490, file: !3, line: 2317, column: 2)
!3495 = !DILocation(line: 2322, column: 32, scope: !3494)
!3496 = !DILocation(line: 2322, column: 4, scope: !3494)
!3497 = !DILocation(line: 2323, column: 11, scope: !3494)
!3498 = !DILocation(line: 2323, column: 4, scope: !3494)
!3499 = !DILocation(line: 2326, column: 11, scope: !3500)
!3500 = distinct !DILexicalBlock(scope: !3485, file: !3, line: 2326, column: 11)
!3501 = !DILocation(line: 2326, column: 37, scope: !3500)
!3502 = !DILocation(line: 2326, column: 11, scope: !3485)
!3503 = !DILocation(line: 2327, column: 9, scope: !3504)
!3504 = distinct !DILexicalBlock(scope: !3500, file: !3, line: 2327, column: 2)
!3505 = !DILocation(line: 2327, column: 7, scope: !3504)
!3506 = !DILocation(line: 2327, column: 14, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 2327, column: 2)
!3508 = !DILocation(line: 2327, column: 18, scope: !3507)
!3509 = !DILocation(line: 2327, column: 16, scope: !3507)
!3510 = !DILocation(line: 2327, column: 2, scope: !3504)
!3511 = !DILocation(line: 2329, column: 34, scope: !3512)
!3512 = distinct !DILexicalBlock(scope: !3513, file: !3, line: 2329, column: 10)
!3513 = distinct !DILexicalBlock(scope: !3507, file: !3, line: 2328, column: 4)
!3514 = !DILocation(line: 2329, column: 10, scope: !3512)
!3515 = !DILocation(line: 2329, column: 10, scope: !3513)
!3516 = !DILocation(line: 2331, column: 14, scope: !3517)
!3517 = distinct !DILexicalBlock(scope: !3518, file: !3, line: 2331, column: 14)
!3518 = distinct !DILexicalBlock(scope: !3512, file: !3, line: 2330, column: 8)
!3519 = !DILocation(line: 2331, column: 56, scope: !3517)
!3520 = !DILocation(line: 2331, column: 14, scope: !3518)
!3521 = !DILocation(line: 2333, column: 10, scope: !3517)
!3522 = !DILocation(line: 2332, column: 13, scope: !3517)
!3523 = !DILocation(line: 2333, column: 8, scope: !3517)
!3524 = !DILocation(line: 2335, column: 30, scope: !3518)
!3525 = !DILocation(line: 2335, column: 36, scope: !3518)
!3526 = !DILocation(line: 2336, column: 9, scope: !3518)
!3527 = !DILocation(line: 2335, column: 8, scope: !3518)
!3528 = !DILocation(line: 2335, column: 5, scope: !3518)
!3529 = !DILocation(line: 2337, column: 8, scope: !3518)
!3530 = !DILocation(line: 2338, column: 4, scope: !3513)
!3531 = !DILocation(line: 2327, column: 48, scope: !3507)
!3532 = !DILocation(line: 2327, column: 2, scope: !3507)
!3533 = distinct !{!3533, !3510, !3534}
!3534 = !DILocation(line: 2338, column: 4, scope: !3504)
!3535 = !DILocation(line: 2341, column: 29, scope: !3500)
!3536 = !DILocation(line: 2341, column: 35, scope: !3500)
!3537 = !DILocation(line: 2341, column: 45, scope: !3500)
!3538 = !DILocation(line: 2341, column: 7, scope: !3500)
!3539 = !DILocation(line: 2341, column: 4, scope: !3500)
!3540 = !DILocation(line: 2342, column: 5, scope: !3485)
!3541 = !DILocation(line: 2347, column: 7, scope: !3542)
!3542 = distinct !DILexicalBlock(scope: !3436, file: !3, line: 2347, column: 7)
!3543 = !DILocation(line: 2347, column: 21, scope: !3542)
!3544 = !DILocation(line: 2347, column: 24, scope: !3542)
!3545 = !DILocation(line: 2347, column: 7, scope: !3436)
!3546 = !DILocation(line: 2348, column: 12, scope: !3542)
!3547 = !DILocation(line: 2348, column: 5, scope: !3542)
!3548 = !DILocation(line: 2352, column: 7, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !3436, file: !3, line: 2352, column: 7)
!3550 = !DILocation(line: 2353, column: 7, scope: !3549)
!3551 = !DILocation(line: 2353, column: 25, scope: !3549)
!3552 = !DILocation(line: 2353, column: 10, scope: !3549)
!3553 = !DILocation(line: 2352, column: 7, scope: !3436)
!3554 = !DILocation(line: 2355, column: 7, scope: !3555)
!3555 = distinct !DILexicalBlock(scope: !3549, file: !3, line: 2354, column: 5)
!3556 = !DILocation(line: 2355, column: 17, scope: !3555)
!3557 = !DILocation(line: 2355, column: 21, scope: !3555)
!3558 = !DILocation(line: 2356, column: 7, scope: !3555)
!3559 = !DILocation(line: 2357, column: 14, scope: !3555)
!3560 = !DILocation(line: 2357, column: 7, scope: !3555)
!3561 = !DILocation(line: 2365, column: 16, scope: !3436)
!3562 = !DILocation(line: 2365, column: 13, scope: !3436)
!3563 = !DILocation(line: 2366, column: 16, scope: !3564)
!3564 = distinct !DILexicalBlock(scope: !3436, file: !3, line: 2366, column: 3)
!3565 = !DILocation(line: 2366, column: 15, scope: !3564)
!3566 = !DILocation(line: 2366, column: 13, scope: !3564)
!3567 = !DILocation(line: 2366, column: 8, scope: !3564)
!3568 = !DILocation(line: 2366, column: 27, scope: !3569)
!3569 = distinct !DILexicalBlock(scope: !3564, file: !3, line: 2366, column: 3)
!3570 = !DILocation(line: 2366, column: 3, scope: !3564)
!3571 = !DILocation(line: 2367, column: 9, scope: !3572)
!3572 = distinct !DILexicalBlock(scope: !3569, file: !3, line: 2367, column: 9)
!3573 = !DILocation(line: 2367, column: 30, scope: !3572)
!3574 = !DILocation(line: 2367, column: 44, scope: !3572)
!3575 = !DILocation(line: 2367, column: 47, scope: !3572)
!3576 = !DILocation(line: 2367, column: 9, scope: !3569)
!3577 = !DILocation(line: 2369, column: 15, scope: !3578)
!3578 = distinct !DILexicalBlock(scope: !3572, file: !3, line: 2368, column: 7)
!3579 = !DILocation(line: 2369, column: 3, scope: !3578)
!3580 = !DILocation(line: 2369, column: 13, scope: !3578)
!3581 = !DILocation(line: 2370, column: 24, scope: !3578)
!3582 = !DILocation(line: 2370, column: 30, scope: !3578)
!3583 = !DILocation(line: 2370, column: 40, scope: !3578)
!3584 = !DILocation(line: 2370, column: 9, scope: !3578)
!3585 = !DILocation(line: 2370, column: 7, scope: !3578)
!3586 = !DILocation(line: 2371, column: 7, scope: !3578)
!3587 = !DILocation(line: 2373, column: 20, scope: !3572)
!3588 = !DILocation(line: 2373, column: 17, scope: !3572)
!3589 = !DILocation(line: 2366, column: 40, scope: !3569)
!3590 = !DILocation(line: 2366, column: 38, scope: !3569)
!3591 = !DILocation(line: 2366, column: 3, scope: !3569)
!3592 = distinct !{!3592, !3570, !3593}
!3593 = !DILocation(line: 2373, column: 20, scope: !3564)
!3594 = !DILocation(line: 2375, column: 10, scope: !3436)
!3595 = !DILocation(line: 2375, column: 3, scope: !3436)
!3596 = !DILocation(line: 2376, column: 1, scope: !3436)
!3597 = distinct !DISubprogram(name: "hard_reg_set_equal_p", scope: !915, file: !915, line: 121, type: !3598, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!3598 = !DISubroutineType(types: !3599)
!3599 = !{!918, !3600, !3600}
!3600 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !914)
!3601 = !DILocalVariable(name: "x", arg: 1, scope: !3597, file: !915, line: 121, type: !3600)
!3602 = !DILocation(line: 121, column: 42, scope: !3597)
!3603 = !DILocalVariable(name: "y", arg: 2, scope: !3597, file: !915, line: 121, type: !3600)
!3604 = !DILocation(line: 121, column: 64, scope: !3597)
!3605 = !DILocation(line: 123, column: 10, scope: !3597)
!3606 = !DILocation(line: 123, column: 15, scope: !3597)
!3607 = !DILocation(line: 123, column: 12, scope: !3597)
!3608 = !DILocation(line: 123, column: 3, scope: !3597)
!3609 = distinct !DISubprogram(name: "get_true_reg", scope: !3, file: !3, line: 410, type: !3610, scopeLine: 411, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!3610 = !DISubroutineType(types: !3611)
!3611 = !{!2006, !2006}
!3612 = !DILocalVariable(name: "pat", arg: 1, scope: !3609, file: !3, line: 410, type: !2006)
!3613 = !DILocation(line: 410, column: 20, scope: !3609)
!3614 = !DILocation(line: 412, column: 3, scope: !3609)
!3615 = !DILocation(line: 413, column: 13, scope: !3616)
!3616 = distinct !DILexicalBlock(scope: !3617, file: !3, line: 412, column: 3)
!3617 = distinct !DILexicalBlock(scope: !3609, file: !3, line: 412, column: 3)
!3618 = !DILocation(line: 413, column: 5, scope: !3616)
!3619 = !DILocalVariable(name: "subreg", scope: !3620, file: !3, line: 419, type: !1028)
!3620 = distinct !DILexicalBlock(scope: !3621, file: !3, line: 418, column: 2)
!3621 = distinct !DILexicalBlock(scope: !3616, file: !3, line: 414, column: 7)
!3622 = !DILocation(line: 419, column: 8, scope: !3620)
!3623 = !DILocation(line: 420, column: 8, scope: !3624)
!3624 = distinct !DILexicalBlock(scope: !3620, file: !3, line: 420, column: 8)
!3625 = !DILocation(line: 420, column: 8, scope: !3620)
!3626 = !DILocalVariable(name: "regno_off", scope: !3627, file: !3, line: 422, type: !886)
!3627 = distinct !DILexicalBlock(scope: !3624, file: !3, line: 421, column: 6)
!3628 = !DILocation(line: 422, column: 12, scope: !3627)
!3629 = !DILocation(line: 422, column: 45, scope: !3627)
!3630 = !DILocation(line: 423, column: 10, scope: !3627)
!3631 = !DILocation(line: 424, column: 10, scope: !3627)
!3632 = !DILocation(line: 425, column: 10, scope: !3627)
!3633 = !DILocation(line: 422, column: 24, scope: !3627)
!3634 = !DILocation(line: 426, column: 15, scope: !3627)
!3635 = !DILocation(line: 426, column: 9, scope: !3627)
!3636 = !DILocation(line: 426, column: 13, scope: !3627)
!3637 = !DILocation(line: 428, column: 15, scope: !3627)
!3638 = !DILocation(line: 428, column: 8, scope: !3627)
!3639 = !DILocation(line: 430, column: 2, scope: !3620)
!3640 = !DILocation(line: 434, column: 10, scope: !3621)
!3641 = !DILocation(line: 434, column: 6, scope: !3621)
!3642 = !DILocation(line: 435, column: 2, scope: !3621)
!3643 = !DILocation(line: 438, column: 6, scope: !3644)
!3644 = distinct !DILexicalBlock(scope: !3621, file: !3, line: 438, column: 6)
!3645 = !DILocation(line: 438, column: 21, scope: !3644)
!3646 = !DILocation(line: 438, column: 6, scope: !3621)
!3647 = !DILocation(line: 439, column: 12, scope: !3644)
!3648 = !DILocation(line: 439, column: 8, scope: !3644)
!3649 = !DILocation(line: 439, column: 4, scope: !3644)
!3650 = !DILocation(line: 440, column: 9, scope: !3621)
!3651 = !DILocation(line: 440, column: 2, scope: !3621)
!3652 = !DILocation(line: 443, column: 7, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3621, file: !3, line: 443, column: 6)
!3654 = !DILocation(line: 443, column: 6, scope: !3621)
!3655 = !DILocation(line: 444, column: 11, scope: !3653)
!3656 = !DILocation(line: 444, column: 4, scope: !3653)
!3657 = !DILocation(line: 445, column: 10, scope: !3621)
!3658 = !DILocation(line: 445, column: 6, scope: !3621)
!3659 = !DILocation(line: 446, column: 2, scope: !3621)
!3660 = !DILocation(line: 449, column: 9, scope: !3621)
!3661 = !DILocation(line: 449, column: 2, scope: !3621)
!3662 = !DILocation(line: 412, column: 3, scope: !3616)
!3663 = distinct !{!3663, !3664, !3665}
!3664 = !DILocation(line: 412, column: 3, scope: !3617)
!3665 = !DILocation(line: 450, column: 7, scope: !3617)
!3666 = !DILocation(line: 451, column: 1, scope: !3609)
!3667 = distinct !DISubprogram(name: "get_hard_regnum", scope: !3, file: !3, line: 727, type: !3668, scopeLine: 728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!3668 = !DISubroutineType(types: !3669)
!3669 = !{!886, !2004, !1028}
!3670 = !DILocalVariable(name: "regstack", arg: 1, scope: !3667, file: !3, line: 727, type: !2004)
!3671 = !DILocation(line: 727, column: 24, scope: !3667)
!3672 = !DILocalVariable(name: "reg", arg: 2, scope: !3667, file: !3, line: 727, type: !1028)
!3673 = !DILocation(line: 727, column: 38, scope: !3667)
!3674 = !DILocalVariable(name: "i", scope: !3667, file: !3, line: 729, type: !886)
!3675 = !DILocation(line: 729, column: 7, scope: !3667)
!3676 = !DILocation(line: 731, column: 3, scope: !3667)
!3677 = !DILocation(line: 733, column: 12, scope: !3678)
!3678 = distinct !DILexicalBlock(scope: !3667, file: !3, line: 733, column: 3)
!3679 = !DILocation(line: 733, column: 22, scope: !3678)
!3680 = !DILocation(line: 733, column: 10, scope: !3678)
!3681 = !DILocation(line: 733, column: 8, scope: !3678)
!3682 = !DILocation(line: 733, column: 27, scope: !3683)
!3683 = distinct !DILexicalBlock(scope: !3678, file: !3, line: 733, column: 3)
!3684 = !DILocation(line: 733, column: 29, scope: !3683)
!3685 = !DILocation(line: 733, column: 3, scope: !3678)
!3686 = !DILocation(line: 734, column: 9, scope: !3687)
!3687 = distinct !DILexicalBlock(scope: !3683, file: !3, line: 734, column: 9)
!3688 = !DILocation(line: 734, column: 19, scope: !3687)
!3689 = !DILocation(line: 734, column: 23, scope: !3687)
!3690 = !DILocation(line: 734, column: 29, scope: !3687)
!3691 = !DILocation(line: 734, column: 26, scope: !3687)
!3692 = !DILocation(line: 734, column: 9, scope: !3683)
!3693 = !DILocation(line: 735, column: 7, scope: !3687)
!3694 = !DILocation(line: 733, column: 36, scope: !3683)
!3695 = !DILocation(line: 733, column: 3, scope: !3683)
!3696 = distinct !{!3696, !3685, !3697}
!3697 = !DILocation(line: 735, column: 7, scope: !3678)
!3698 = !DILocation(line: 737, column: 10, scope: !3667)
!3699 = !DILocation(line: 737, column: 12, scope: !3667)
!3700 = !DILocation(line: 737, column: 38, scope: !3667)
!3701 = !DILocation(line: 737, column: 48, scope: !3667)
!3702 = !DILocation(line: 737, column: 36, scope: !3667)
!3703 = !DILocation(line: 737, column: 54, scope: !3667)
!3704 = !DILocation(line: 737, column: 52, scope: !3667)
!3705 = !DILocation(line: 737, column: 3, scope: !3667)
!3706 = distinct !DISubprogram(name: "replace_reg", scope: !3, file: !3, line: 689, type: !3707, scopeLine: 690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!3707 = !DISubroutineType(types: !3708)
!3708 = !{null, !2006, !886}
!3709 = !DILocalVariable(name: "reg", arg: 1, scope: !3706, file: !3, line: 689, type: !2006)
!3710 = !DILocation(line: 689, column: 19, scope: !3706)
!3711 = !DILocalVariable(name: "regno", arg: 2, scope: !3706, file: !3, line: 689, type: !886)
!3712 = !DILocation(line: 689, column: 28, scope: !3706)
!3713 = !DILocation(line: 691, column: 3, scope: !3706)
!3714 = !DILocation(line: 692, column: 3, scope: !3706)
!3715 = !DILocation(line: 694, column: 3, scope: !3706)
!3716 = !DILocation(line: 697, column: 10, scope: !3706)
!3717 = !DILocation(line: 697, column: 4, scope: !3706)
!3718 = !DILocation(line: 697, column: 8, scope: !3706)
!3719 = !DILocation(line: 698, column: 1, scope: !3706)
!3720 = distinct !DISubprogram(name: "straighten_stack", scope: !3, file: !3, line: 361, type: !3721, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!3721 = !DISubroutineType(types: !3722)
!3722 = !{null, !1028, !2004}
!3723 = !DILocalVariable(name: "insn", arg: 1, scope: !3720, file: !3, line: 361, type: !1028)
!3724 = !DILocation(line: 361, column: 23, scope: !3720)
!3725 = !DILocalVariable(name: "regstack", arg: 2, scope: !3720, file: !3, line: 361, type: !2004)
!3726 = !DILocation(line: 361, column: 35, scope: !3720)
!3727 = !DILocalVariable(name: "temp_stack", scope: !3720, file: !3, line: 363, type: !910)
!3728 = !DILocation(line: 363, column: 20, scope: !3720)
!3729 = !DILocalVariable(name: "top", scope: !3720, file: !3, line: 364, type: !886)
!3730 = !DILocation(line: 364, column: 7, scope: !3720)
!3731 = !DILocation(line: 370, column: 7, scope: !3732)
!3732 = distinct !DILexicalBlock(scope: !3720, file: !3, line: 370, column: 7)
!3733 = !DILocation(line: 370, column: 17, scope: !3732)
!3734 = !DILocation(line: 370, column: 21, scope: !3732)
!3735 = !DILocation(line: 370, column: 7, scope: !3720)
!3736 = !DILocation(line: 371, column: 5, scope: !3732)
!3737 = !DILocation(line: 373, column: 3, scope: !3720)
!3738 = !DILocation(line: 375, column: 31, scope: !3739)
!3739 = distinct !DILexicalBlock(scope: !3720, file: !3, line: 375, column: 3)
!3740 = !DILocation(line: 375, column: 41, scope: !3739)
!3741 = !DILocation(line: 375, column: 25, scope: !3739)
!3742 = !DILocation(line: 375, column: 29, scope: !3739)
!3743 = !DILocation(line: 375, column: 12, scope: !3739)
!3744 = !DILocation(line: 375, column: 8, scope: !3739)
!3745 = !DILocation(line: 375, column: 46, scope: !3746)
!3746 = distinct !DILexicalBlock(scope: !3739, file: !3, line: 375, column: 3)
!3747 = !DILocation(line: 375, column: 50, scope: !3746)
!3748 = !DILocation(line: 375, column: 3, scope: !3739)
!3749 = !DILocation(line: 376, column: 56, scope: !3746)
!3750 = !DILocation(line: 376, column: 43, scope: !3746)
!3751 = !DILocation(line: 376, column: 62, scope: !3746)
!3752 = !DILocation(line: 376, column: 60, scope: !3746)
!3753 = !DILocation(line: 376, column: 27, scope: !3746)
!3754 = !DILocation(line: 376, column: 16, scope: !3746)
!3755 = !DILocation(line: 376, column: 20, scope: !3746)
!3756 = !DILocation(line: 376, column: 5, scope: !3746)
!3757 = !DILocation(line: 376, column: 25, scope: !3746)
!3758 = !DILocation(line: 375, column: 59, scope: !3746)
!3759 = !DILocation(line: 375, column: 3, scope: !3746)
!3760 = distinct !{!3760, !3748, !3761}
!3761 = !DILocation(line: 376, column: 62, scope: !3739)
!3762 = !DILocation(line: 378, column: 17, scope: !3720)
!3763 = !DILocation(line: 378, column: 23, scope: !3720)
!3764 = !DILocation(line: 378, column: 3, scope: !3720)
!3765 = !DILocation(line: 379, column: 1, scope: !3720)
!3766 = distinct !DISubprogram(name: "subst_asm_stack_regs", scope: !3, file: !3, line: 1996, type: !3721, scopeLine: 1997, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!3767 = !DILocalVariable(name: "insn", arg: 1, scope: !3766, file: !3, line: 1996, type: !1028)
!3768 = !DILocation(line: 1996, column: 27, scope: !3766)
!3769 = !DILocalVariable(name: "regstack", arg: 2, scope: !3766, file: !3, line: 1996, type: !2004)
!3770 = !DILocation(line: 1996, column: 39, scope: !3766)
!3771 = !DILocalVariable(name: "body", scope: !3766, file: !3, line: 1998, type: !1028)
!3772 = !DILocation(line: 1998, column: 7, scope: !3766)
!3773 = !DILocation(line: 1998, column: 14, scope: !3766)
!3774 = !DILocalVariable(name: "alt", scope: !3766, file: !3, line: 1999, type: !886)
!3775 = !DILocation(line: 1999, column: 7, scope: !3766)
!3776 = !DILocalVariable(name: "note_reg", scope: !3766, file: !3, line: 2001, type: !2006)
!3777 = !DILocation(line: 2001, column: 8, scope: !3766)
!3778 = !DILocalVariable(name: "note_loc", scope: !3766, file: !3, line: 2002, type: !2007)
!3779 = !DILocation(line: 2002, column: 9, scope: !3766)
!3780 = !DILocalVariable(name: "note_kind", scope: !3766, file: !3, line: 2003, type: !2008)
!3781 = !DILocation(line: 2003, column: 18, scope: !3766)
!3782 = !DILocalVariable(name: "clobber_reg", scope: !3766, file: !3, line: 2005, type: !2006)
!3783 = !DILocation(line: 2005, column: 8, scope: !3766)
!3784 = !DILocalVariable(name: "clobber_loc", scope: !3766, file: !3, line: 2006, type: !2007)
!3785 = !DILocation(line: 2006, column: 9, scope: !3766)
!3786 = !DILocalVariable(name: "temp_stack", scope: !3766, file: !3, line: 2008, type: !910)
!3787 = !DILocation(line: 2008, column: 20, scope: !3766)
!3788 = !DILocalVariable(name: "n_notes", scope: !3766, file: !3, line: 2009, type: !886)
!3789 = !DILocation(line: 2009, column: 7, scope: !3766)
!3790 = !DILocalVariable(name: "n_clobbers", scope: !3766, file: !3, line: 2010, type: !886)
!3791 = !DILocation(line: 2010, column: 7, scope: !3766)
!3792 = !DILocalVariable(name: "note", scope: !3766, file: !3, line: 2011, type: !1028)
!3793 = !DILocation(line: 2011, column: 7, scope: !3766)
!3794 = !DILocalVariable(name: "i", scope: !3766, file: !3, line: 2012, type: !886)
!3795 = !DILocation(line: 2012, column: 7, scope: !3766)
!3796 = !DILocalVariable(name: "n_inputs", scope: !3766, file: !3, line: 2013, type: !886)
!3797 = !DILocation(line: 2013, column: 7, scope: !3766)
!3798 = !DILocalVariable(name: "n_outputs", scope: !3766, file: !3, line: 2013, type: !886)
!3799 = !DILocation(line: 2013, column: 17, scope: !3766)
!3800 = !DILocation(line: 2015, column: 35, scope: !3801)
!3801 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2015, column: 7)
!3802 = !DILocation(line: 2015, column: 9, scope: !3801)
!3803 = !DILocation(line: 2015, column: 7, scope: !3766)
!3804 = !DILocation(line: 2016, column: 5, scope: !3801)
!3805 = !DILocation(line: 2021, column: 17, scope: !3766)
!3806 = !DILocation(line: 2021, column: 3, scope: !3766)
!3807 = !DILocation(line: 2022, column: 3, scope: !3766)
!3808 = !DILocation(line: 2023, column: 9, scope: !3766)
!3809 = !DILocation(line: 2023, column: 7, scope: !3766)
!3810 = !DILocation(line: 2025, column: 3, scope: !3766)
!3811 = !DILocation(line: 2027, column: 28, scope: !3766)
!3812 = !DILocation(line: 2027, column: 3, scope: !3766)
!3813 = !DILocation(line: 2029, column: 3, scope: !3766)
!3814 = !DILocation(line: 2032, column: 10, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2032, column: 3)
!3816 = !DILocation(line: 2032, column: 8, scope: !3815)
!3817 = !DILocation(line: 2032, column: 15, scope: !3818)
!3818 = distinct !DILexicalBlock(scope: !3815, file: !3, line: 2032, column: 3)
!3819 = !DILocation(line: 2032, column: 30, scope: !3818)
!3820 = !DILocation(line: 2032, column: 19, scope: !3818)
!3821 = !DILocation(line: 2032, column: 17, scope: !3818)
!3822 = !DILocation(line: 2032, column: 3, scope: !3815)
!3823 = !DILocation(line: 2033, column: 9, scope: !3824)
!3824 = distinct !DILexicalBlock(scope: !3818, file: !3, line: 2033, column: 9)
!3825 = !DILocation(line: 2033, column: 42, scope: !3824)
!3826 = !DILocation(line: 2034, column: 2, scope: !3824)
!3827 = !DILocation(line: 2034, column: 5, scope: !3824)
!3828 = !DILocation(line: 2033, column: 9, scope: !3818)
!3829 = !DILocation(line: 2036, column: 32, scope: !3830)
!3830 = distinct !DILexicalBlock(scope: !3824, file: !3, line: 2035, column: 7)
!3831 = !DILocation(line: 2036, column: 25, scope: !3830)
!3832 = !DILocation(line: 2036, column: 2, scope: !3830)
!3833 = !DILocation(line: 2036, column: 28, scope: !3830)
!3834 = !DILocation(line: 2037, column: 26, scope: !3830)
!3835 = !DILocation(line: 2037, column: 21, scope: !3830)
!3836 = !DILocation(line: 2037, column: 2, scope: !3830)
!3837 = !DILocation(line: 2037, column: 24, scope: !3830)
!3838 = !DILocation(line: 2038, column: 7, scope: !3830)
!3839 = !DILocation(line: 2032, column: 43, scope: !3818)
!3840 = !DILocation(line: 2032, column: 3, scope: !3818)
!3841 = distinct !{!3841, !3822, !3842}
!3842 = !DILocation(line: 2038, column: 7, scope: !3815)
!3843 = !DILocation(line: 2042, column: 10, scope: !3844)
!3844 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2042, column: 3)
!3845 = !DILocation(line: 2042, column: 22, scope: !3844)
!3846 = !DILocation(line: 2042, column: 20, scope: !3844)
!3847 = !DILocation(line: 2042, column: 8, scope: !3844)
!3848 = !DILocation(line: 2042, column: 40, scope: !3849)
!3849 = distinct !DILexicalBlock(scope: !3844, file: !3, line: 2042, column: 3)
!3850 = !DILocation(line: 2042, column: 3, scope: !3844)
!3851 = !DILocation(line: 2043, column: 6, scope: !3849)
!3852 = !DILocation(line: 2043, column: 5, scope: !3849)
!3853 = !DILocation(line: 2042, column: 53, scope: !3849)
!3854 = !DILocation(line: 2042, column: 51, scope: !3849)
!3855 = !DILocation(line: 2042, column: 3, scope: !3849)
!3856 = distinct !{!3856, !3850, !3857}
!3857 = !DILocation(line: 2043, column: 6, scope: !3844)
!3858 = !DILocation(line: 2045, column: 14, scope: !3766)
!3859 = !DILocation(line: 2045, column: 12, scope: !3766)
!3860 = !DILocation(line: 2046, column: 14, scope: !3766)
!3861 = !DILocation(line: 2046, column: 12, scope: !3766)
!3862 = !DILocation(line: 2047, column: 15, scope: !3766)
!3863 = !DILocation(line: 2047, column: 13, scope: !3766)
!3864 = !DILocation(line: 2049, column: 11, scope: !3766)
!3865 = !DILocation(line: 2050, column: 15, scope: !3866)
!3866 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2050, column: 3)
!3867 = !DILocation(line: 2050, column: 13, scope: !3866)
!3868 = !DILocation(line: 2050, column: 8, scope: !3866)
!3869 = !DILocation(line: 2050, column: 33, scope: !3870)
!3870 = distinct !DILexicalBlock(scope: !3866, file: !3, line: 2050, column: 3)
!3871 = !DILocation(line: 2050, column: 3, scope: !3866)
!3872 = !DILocalVariable(name: "reg", scope: !3873, file: !3, line: 2052, type: !1028)
!3873 = distinct !DILexicalBlock(scope: !3870, file: !3, line: 2051, column: 5)
!3874 = !DILocation(line: 2052, column: 11, scope: !3873)
!3875 = !DILocation(line: 2052, column: 17, scope: !3873)
!3876 = !DILocalVariable(name: "loc", scope: !3873, file: !3, line: 2053, type: !2006)
!3877 = !DILocation(line: 2053, column: 12, scope: !3873)
!3878 = !DILocation(line: 2053, column: 20, scope: !3873)
!3879 = !DILocation(line: 2055, column: 11, scope: !3880)
!3880 = distinct !DILexicalBlock(scope: !3873, file: !3, line: 2055, column: 11)
!3881 = !DILocation(line: 2055, column: 26, scope: !3880)
!3882 = !DILocation(line: 2055, column: 36, scope: !3880)
!3883 = !DILocation(line: 2055, column: 39, scope: !3880)
!3884 = !DILocation(line: 2055, column: 11, scope: !3873)
!3885 = !DILocation(line: 2057, column: 12, scope: !3886)
!3886 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 2056, column: 2)
!3887 = !DILocation(line: 2057, column: 8, scope: !3886)
!3888 = !DILocation(line: 2058, column: 10, scope: !3886)
!3889 = !DILocation(line: 2058, column: 8, scope: !3886)
!3890 = !DILocation(line: 2059, column: 2, scope: !3886)
!3891 = !DILocation(line: 2061, column: 11, scope: !3892)
!3892 = distinct !DILexicalBlock(scope: !3873, file: !3, line: 2061, column: 11)
!3893 = !DILocation(line: 2062, column: 4, scope: !3892)
!3894 = !DILocation(line: 2062, column: 8, scope: !3892)
!3895 = !DILocation(line: 2062, column: 29, scope: !3892)
!3896 = !DILocation(line: 2063, column: 8, scope: !3892)
!3897 = !DILocation(line: 2063, column: 11, scope: !3892)
!3898 = !DILocation(line: 2063, column: 32, scope: !3892)
!3899 = !DILocation(line: 2061, column: 11, scope: !3873)
!3900 = !DILocation(line: 2065, column: 24, scope: !3901)
!3901 = distinct !DILexicalBlock(scope: !3892, file: !3, line: 2064, column: 2)
!3902 = !DILocation(line: 2065, column: 4, scope: !3901)
!3903 = !DILocation(line: 2065, column: 13, scope: !3901)
!3904 = !DILocation(line: 2065, column: 22, scope: !3901)
!3905 = !DILocation(line: 2066, column: 24, scope: !3901)
!3906 = !DILocation(line: 2066, column: 4, scope: !3901)
!3907 = !DILocation(line: 2066, column: 13, scope: !3901)
!3908 = !DILocation(line: 2066, column: 22, scope: !3901)
!3909 = !DILocation(line: 2067, column: 25, scope: !3901)
!3910 = !DILocation(line: 2067, column: 4, scope: !3901)
!3911 = !DILocation(line: 2067, column: 14, scope: !3901)
!3912 = !DILocation(line: 2067, column: 23, scope: !3901)
!3913 = !DILocation(line: 2068, column: 11, scope: !3901)
!3914 = !DILocation(line: 2069, column: 2, scope: !3901)
!3915 = !DILocation(line: 2070, column: 5, scope: !3873)
!3916 = !DILocation(line: 2050, column: 46, scope: !3870)
!3917 = !DILocation(line: 2050, column: 44, scope: !3870)
!3918 = !DILocation(line: 2050, column: 3, scope: !3870)
!3919 = distinct !{!3919, !3871, !3920}
!3920 = !DILocation(line: 2070, column: 5, scope: !3866)
!3921 = !DILocation(line: 2074, column: 14, scope: !3766)
!3922 = !DILocation(line: 2076, column: 7, scope: !3923)
!3923 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2076, column: 7)
!3924 = !DILocation(line: 2076, column: 23, scope: !3923)
!3925 = !DILocation(line: 2076, column: 7, scope: !3766)
!3926 = !DILocation(line: 2078, column: 21, scope: !3927)
!3927 = distinct !DILexicalBlock(scope: !3923, file: !3, line: 2077, column: 5)
!3928 = !DILocation(line: 2078, column: 19, scope: !3927)
!3929 = !DILocation(line: 2079, column: 21, scope: !3927)
!3930 = !DILocation(line: 2079, column: 19, scope: !3927)
!3931 = !DILocation(line: 2081, column: 14, scope: !3932)
!3932 = distinct !DILexicalBlock(scope: !3927, file: !3, line: 2081, column: 7)
!3933 = !DILocation(line: 2081, column: 12, scope: !3932)
!3934 = !DILocation(line: 2081, column: 19, scope: !3935)
!3935 = distinct !DILexicalBlock(scope: !3932, file: !3, line: 2081, column: 7)
!3936 = !DILocation(line: 2081, column: 23, scope: !3935)
!3937 = !DILocation(line: 2081, column: 21, scope: !3935)
!3938 = !DILocation(line: 2081, column: 7, scope: !3932)
!3939 = !DILocation(line: 2082, column: 6, scope: !3940)
!3940 = distinct !DILexicalBlock(scope: !3935, file: !3, line: 2082, column: 6)
!3941 = !DILocation(line: 2082, column: 38, scope: !3940)
!3942 = !DILocation(line: 2082, column: 6, scope: !3935)
!3943 = !DILocalVariable(name: "clobber", scope: !3944, file: !3, line: 2084, type: !1028)
!3944 = distinct !DILexicalBlock(scope: !3940, file: !3, line: 2083, column: 4)
!3945 = !DILocation(line: 2084, column: 10, scope: !3944)
!3946 = !DILocation(line: 2084, column: 20, scope: !3944)
!3947 = !DILocalVariable(name: "reg", scope: !3944, file: !3, line: 2085, type: !1028)
!3948 = !DILocation(line: 2085, column: 10, scope: !3944)
!3949 = !DILocation(line: 2085, column: 16, scope: !3944)
!3950 = !DILocalVariable(name: "loc", scope: !3944, file: !3, line: 2086, type: !2006)
!3951 = !DILocation(line: 2086, column: 11, scope: !3944)
!3952 = !DILocation(line: 2086, column: 19, scope: !3944)
!3953 = !DILocation(line: 2088, column: 10, scope: !3954)
!3954 = distinct !DILexicalBlock(scope: !3944, file: !3, line: 2088, column: 10)
!3955 = !DILocation(line: 2088, column: 25, scope: !3954)
!3956 = !DILocation(line: 2088, column: 35, scope: !3954)
!3957 = !DILocation(line: 2088, column: 38, scope: !3954)
!3958 = !DILocation(line: 2088, column: 10, scope: !3944)
!3959 = !DILocation(line: 2090, column: 11, scope: !3960)
!3960 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 2089, column: 8)
!3961 = !DILocation(line: 2090, column: 7, scope: !3960)
!3962 = !DILocation(line: 2091, column: 9, scope: !3960)
!3963 = !DILocation(line: 2091, column: 7, scope: !3960)
!3964 = !DILocation(line: 2092, column: 8, scope: !3960)
!3965 = !DILocation(line: 2094, column: 10, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3944, file: !3, line: 2094, column: 10)
!3967 = !DILocation(line: 2094, column: 10, scope: !3944)
!3968 = !DILocation(line: 2096, column: 29, scope: !3969)
!3969 = distinct !DILexicalBlock(scope: !3966, file: !3, line: 2095, column: 8)
!3970 = !DILocation(line: 2096, column: 3, scope: !3969)
!3971 = !DILocation(line: 2096, column: 15, scope: !3969)
!3972 = !DILocation(line: 2096, column: 27, scope: !3969)
!3973 = !DILocation(line: 2097, column: 29, scope: !3969)
!3974 = !DILocation(line: 2097, column: 3, scope: !3969)
!3975 = !DILocation(line: 2097, column: 15, scope: !3969)
!3976 = !DILocation(line: 2097, column: 27, scope: !3969)
!3977 = !DILocation(line: 2098, column: 13, scope: !3969)
!3978 = !DILocation(line: 2099, column: 8, scope: !3969)
!3979 = !DILocation(line: 2100, column: 4, scope: !3944)
!3980 = !DILocation(line: 2082, column: 41, scope: !3940)
!3981 = !DILocation(line: 2081, column: 43, scope: !3935)
!3982 = !DILocation(line: 2081, column: 7, scope: !3935)
!3983 = distinct !{!3983, !3938, !3984}
!3984 = !DILocation(line: 2100, column: 4, scope: !3932)
!3985 = !DILocation(line: 2101, column: 5, scope: !3927)
!3986 = !DILocation(line: 2103, column: 17, scope: !3766)
!3987 = !DILocation(line: 2103, column: 16, scope: !3766)
!3988 = !DILocation(line: 2107, column: 12, scope: !3989)
!3989 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2107, column: 3)
!3990 = !DILocation(line: 2107, column: 10, scope: !3989)
!3991 = !DILocation(line: 2107, column: 8, scope: !3989)
!3992 = !DILocation(line: 2107, column: 23, scope: !3993)
!3993 = distinct !DILexicalBlock(scope: !3989, file: !3, line: 2107, column: 3)
!3994 = !DILocation(line: 2107, column: 27, scope: !3993)
!3995 = !DILocation(line: 2107, column: 39, scope: !3993)
!3996 = !DILocation(line: 2107, column: 37, scope: !3993)
!3997 = !DILocation(line: 2107, column: 25, scope: !3993)
!3998 = !DILocation(line: 2107, column: 3, scope: !3989)
!3999 = !DILocation(line: 2108, column: 9, scope: !4000)
!4000 = distinct !DILexicalBlock(scope: !3993, file: !3, line: 2108, column: 9)
!4001 = !DILocation(line: 2109, column: 2, scope: !4000)
!4002 = !DILocation(line: 2109, column: 38, scope: !4000)
!4003 = !DILocation(line: 2109, column: 25, scope: !4000)
!4004 = !DILocation(line: 2109, column: 41, scope: !4000)
!4005 = !DILocation(line: 2109, column: 46, scope: !4000)
!4006 = !DILocation(line: 2109, column: 5, scope: !4000)
!4007 = !DILocation(line: 2111, column: 2, scope: !4000)
!4008 = !DILocation(line: 2111, column: 18, scope: !4000)
!4009 = !DILocation(line: 2111, column: 5, scope: !4000)
!4010 = !DILocation(line: 2111, column: 21, scope: !4000)
!4011 = !DILocation(line: 2111, column: 26, scope: !4000)
!4012 = !DILocation(line: 2111, column: 29, scope: !4000)
!4013 = !DILocation(line: 2108, column: 9, scope: !3993)
!4014 = !DILocalVariable(name: "regno", scope: !4015, file: !3, line: 2120, type: !886)
!4015 = distinct !DILexicalBlock(scope: !4000, file: !3, line: 2112, column: 7)
!4016 = !DILocation(line: 2120, column: 6, scope: !4015)
!4017 = !DILocation(line: 2120, column: 63, scope: !4015)
!4018 = !DILocation(line: 2120, column: 44, scope: !4015)
!4019 = !DILocation(line: 2120, column: 14, scope: !4015)
!4020 = !DILocation(line: 2122, column: 2, scope: !4015)
!4021 = !DILocation(line: 2124, column: 21, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !4015, file: !3, line: 2124, column: 6)
!4023 = !DILocation(line: 2124, column: 30, scope: !4022)
!4024 = !DILocation(line: 2124, column: 27, scope: !4022)
!4025 = !DILocation(line: 2124, column: 6, scope: !4015)
!4026 = !DILocalVariable(name: "j", scope: !4027, file: !3, line: 2130, type: !886)
!4027 = distinct !DILexicalBlock(scope: !4022, file: !3, line: 2125, column: 4)
!4028 = !DILocation(line: 2130, column: 10, scope: !4027)
!4029 = !DILocalVariable(name: "k", scope: !4027, file: !3, line: 2130, type: !886)
!4030 = !DILocation(line: 2130, column: 13, scope: !4027)
!4031 = !DILocalVariable(name: "temp", scope: !4027, file: !3, line: 2130, type: !886)
!4032 = !DILocation(line: 2130, column: 16, scope: !4027)
!4033 = !DILocation(line: 2132, column: 21, scope: !4027)
!4034 = !DILocation(line: 2132, column: 28, scope: !4027)
!4035 = !DILocation(line: 2132, column: 34, scope: !4027)
!4036 = !DILocation(line: 2132, column: 25, scope: !4027)
!4037 = !DILocation(line: 2132, column: 8, scope: !4027)
!4038 = !DILocation(line: 2133, column: 22, scope: !4027)
!4039 = !DILocation(line: 2134, column: 7, scope: !4027)
!4040 = !DILocation(line: 2134, column: 37, scope: !4027)
!4041 = !DILocation(line: 2134, column: 4, scope: !4027)
!4042 = !DILocation(line: 2133, column: 8, scope: !4027)
!4043 = !DILocation(line: 2136, column: 24, scope: !4027)
!4044 = !DILocation(line: 2136, column: 28, scope: !4027)
!4045 = !DILocation(line: 2136, column: 13, scope: !4027)
!4046 = !DILocation(line: 2136, column: 11, scope: !4027)
!4047 = !DILocation(line: 2137, column: 37, scope: !4027)
!4048 = !DILocation(line: 2137, column: 41, scope: !4027)
!4049 = !DILocation(line: 2137, column: 26, scope: !4027)
!4050 = !DILocation(line: 2137, column: 17, scope: !4027)
!4051 = !DILocation(line: 2137, column: 21, scope: !4027)
!4052 = !DILocation(line: 2137, column: 6, scope: !4027)
!4053 = !DILocation(line: 2137, column: 24, scope: !4027)
!4054 = !DILocation(line: 2138, column: 26, scope: !4027)
!4055 = !DILocation(line: 2138, column: 17, scope: !4027)
!4056 = !DILocation(line: 2138, column: 21, scope: !4027)
!4057 = !DILocation(line: 2138, column: 6, scope: !4027)
!4058 = !DILocation(line: 2138, column: 24, scope: !4027)
!4059 = !DILocation(line: 2139, column: 4, scope: !4027)
!4060 = !DILocation(line: 2140, column: 7, scope: !4015)
!4061 = !DILocation(line: 2111, column: 32, scope: !4000)
!4062 = !DILocation(line: 2107, column: 50, scope: !3993)
!4063 = !DILocation(line: 2107, column: 3, scope: !3993)
!4064 = distinct !{!4064, !3998, !4065}
!4065 = !DILocation(line: 2140, column: 7, scope: !3989)
!4066 = !DILocation(line: 2145, column: 17, scope: !3766)
!4067 = !DILocation(line: 2145, column: 23, scope: !3766)
!4068 = !DILocation(line: 2145, column: 3, scope: !3766)
!4069 = !DILocation(line: 2150, column: 12, scope: !4070)
!4070 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2150, column: 3)
!4071 = !DILocation(line: 2150, column: 10, scope: !4070)
!4072 = !DILocation(line: 2150, column: 8, scope: !4070)
!4073 = !DILocation(line: 2150, column: 23, scope: !4074)
!4074 = distinct !DILexicalBlock(scope: !4070, file: !3, line: 2150, column: 3)
!4075 = !DILocation(line: 2150, column: 27, scope: !4074)
!4076 = !DILocation(line: 2150, column: 39, scope: !4074)
!4077 = !DILocation(line: 2150, column: 37, scope: !4074)
!4078 = !DILocation(line: 2150, column: 25, scope: !4074)
!4079 = !DILocation(line: 2150, column: 3, scope: !4070)
!4080 = !DILocation(line: 2151, column: 9, scope: !4081)
!4081 = distinct !DILexicalBlock(scope: !4074, file: !3, line: 2151, column: 9)
!4082 = !DILocation(line: 2151, column: 9, scope: !4074)
!4083 = !DILocalVariable(name: "regnum", scope: !4084, file: !3, line: 2153, type: !886)
!4084 = distinct !DILexicalBlock(scope: !4081, file: !3, line: 2152, column: 7)
!4085 = !DILocation(line: 2153, column: 6, scope: !4084)
!4086 = !DILocation(line: 2153, column: 32, scope: !4084)
!4087 = !DILocation(line: 2153, column: 61, scope: !4084)
!4088 = !DILocation(line: 2153, column: 42, scope: !4084)
!4089 = !DILocation(line: 2153, column: 15, scope: !4084)
!4090 = !DILocation(line: 2155, column: 2, scope: !4084)
!4091 = !DILocation(line: 2157, column: 38, scope: !4084)
!4092 = !DILocation(line: 2157, column: 15, scope: !4084)
!4093 = !DILocation(line: 2157, column: 42, scope: !4084)
!4094 = !DILocation(line: 2157, column: 2, scope: !4084)
!4095 = !DILocation(line: 2158, column: 7, scope: !4084)
!4096 = !DILocation(line: 2150, column: 50, scope: !4074)
!4097 = !DILocation(line: 2150, column: 3, scope: !4074)
!4098 = distinct !{!4098, !4079, !4099}
!4099 = !DILocation(line: 2158, column: 7, scope: !4070)
!4100 = !DILocation(line: 2160, column: 10, scope: !4101)
!4101 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2160, column: 3)
!4102 = !DILocation(line: 2160, column: 8, scope: !4101)
!4103 = !DILocation(line: 2160, column: 15, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4101, file: !3, line: 2160, column: 3)
!4105 = !DILocation(line: 2160, column: 19, scope: !4104)
!4106 = !DILocation(line: 2160, column: 17, scope: !4104)
!4107 = !DILocation(line: 2160, column: 3, scope: !4101)
!4108 = !DILocation(line: 2161, column: 9, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !4104, file: !3, line: 2161, column: 9)
!4110 = !DILocation(line: 2161, column: 19, scope: !4109)
!4111 = !DILocation(line: 2161, column: 22, scope: !4109)
!4112 = !DILocation(line: 2161, column: 9, scope: !4104)
!4113 = !DILocalVariable(name: "regnum", scope: !4114, file: !3, line: 2163, type: !886)
!4114 = distinct !DILexicalBlock(scope: !4109, file: !3, line: 2162, column: 7)
!4115 = !DILocation(line: 2163, column: 6, scope: !4114)
!4116 = !DILocation(line: 2163, column: 32, scope: !4114)
!4117 = !DILocation(line: 2163, column: 42, scope: !4114)
!4118 = !DILocation(line: 2163, column: 51, scope: !4114)
!4119 = !DILocation(line: 2163, column: 15, scope: !4114)
!4120 = !DILocation(line: 2165, column: 2, scope: !4114)
!4121 = !DILocation(line: 2167, column: 15, scope: !4114)
!4122 = !DILocation(line: 2167, column: 24, scope: !4114)
!4123 = !DILocation(line: 2167, column: 28, scope: !4114)
!4124 = !DILocation(line: 2167, column: 2, scope: !4114)
!4125 = !DILocation(line: 2168, column: 7, scope: !4114)
!4126 = !DILocation(line: 2161, column: 25, scope: !4109)
!4127 = !DILocation(line: 2160, column: 29, scope: !4104)
!4128 = !DILocation(line: 2160, column: 3, scope: !4104)
!4129 = distinct !{!4129, !4107, !4130}
!4130 = !DILocation(line: 2168, column: 7, scope: !4101)
!4131 = !DILocation(line: 2170, column: 10, scope: !4132)
!4132 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2170, column: 3)
!4133 = !DILocation(line: 2170, column: 8, scope: !4132)
!4134 = !DILocation(line: 2170, column: 15, scope: !4135)
!4135 = distinct !DILexicalBlock(scope: !4132, file: !3, line: 2170, column: 3)
!4136 = !DILocation(line: 2170, column: 19, scope: !4135)
!4137 = !DILocation(line: 2170, column: 17, scope: !4135)
!4138 = !DILocation(line: 2170, column: 3, scope: !4132)
!4139 = !DILocalVariable(name: "regnum", scope: !4140, file: !3, line: 2174, type: !886)
!4140 = distinct !DILexicalBlock(scope: !4135, file: !3, line: 2171, column: 5)
!4141 = !DILocation(line: 2174, column: 11, scope: !4140)
!4142 = !DILocation(line: 2174, column: 37, scope: !4140)
!4143 = !DILocation(line: 2174, column: 47, scope: !4140)
!4144 = !DILocation(line: 2174, column: 59, scope: !4140)
!4145 = !DILocation(line: 2174, column: 20, scope: !4140)
!4146 = !DILocation(line: 2176, column: 11, scope: !4147)
!4147 = distinct !DILexicalBlock(scope: !4140, file: !3, line: 2176, column: 11)
!4148 = !DILocation(line: 2176, column: 18, scope: !4147)
!4149 = !DILocation(line: 2176, column: 11, scope: !4140)
!4150 = !DILocation(line: 2182, column: 22, scope: !4151)
!4151 = distinct !DILexicalBlock(scope: !4147, file: !3, line: 2177, column: 2)
!4152 = !DILocation(line: 2182, column: 5, scope: !4151)
!4153 = !DILocation(line: 2182, column: 17, scope: !4151)
!4154 = !DILocation(line: 2182, column: 20, scope: !4151)
!4155 = !DILocation(line: 2183, column: 2, scope: !4151)
!4156 = !DILocation(line: 2184, column: 5, scope: !4140)
!4157 = !DILocation(line: 2170, column: 32, scope: !4135)
!4158 = !DILocation(line: 2170, column: 3, scope: !4135)
!4159 = distinct !{!4159, !4138, !4160}
!4160 = !DILocation(line: 2184, column: 5, scope: !4132)
!4161 = !DILocation(line: 2188, column: 12, scope: !4162)
!4162 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2188, column: 3)
!4163 = !DILocation(line: 2188, column: 10, scope: !4162)
!4164 = !DILocation(line: 2188, column: 8, scope: !4162)
!4165 = !DILocation(line: 2188, column: 23, scope: !4166)
!4166 = distinct !DILexicalBlock(scope: !4162, file: !3, line: 2188, column: 3)
!4167 = !DILocation(line: 2188, column: 27, scope: !4166)
!4168 = !DILocation(line: 2188, column: 39, scope: !4166)
!4169 = !DILocation(line: 2188, column: 37, scope: !4166)
!4170 = !DILocation(line: 2188, column: 25, scope: !4166)
!4171 = !DILocation(line: 2188, column: 3, scope: !4162)
!4172 = !DILocation(line: 2189, column: 9, scope: !4173)
!4173 = distinct !DILexicalBlock(scope: !4166, file: !3, line: 2189, column: 9)
!4174 = !DILocation(line: 2189, column: 9, scope: !4166)
!4175 = !DILocalVariable(name: "j", scope: !4176, file: !3, line: 2193, type: !886)
!4176 = distinct !DILexicalBlock(scope: !4173, file: !3, line: 2190, column: 7)
!4177 = !DILocation(line: 2193, column: 6, scope: !4176)
!4178 = !DILocation(line: 2195, column: 9, scope: !4179)
!4179 = distinct !DILexicalBlock(scope: !4176, file: !3, line: 2195, column: 2)
!4180 = !DILocation(line: 2195, column: 7, scope: !4179)
!4181 = !DILocation(line: 2195, column: 14, scope: !4182)
!4182 = distinct !DILexicalBlock(scope: !4179, file: !3, line: 2195, column: 2)
!4183 = !DILocation(line: 2195, column: 18, scope: !4182)
!4184 = !DILocation(line: 2195, column: 16, scope: !4182)
!4185 = !DILocation(line: 2195, column: 2, scope: !4179)
!4186 = !DILocation(line: 2196, column: 26, scope: !4187)
!4187 = distinct !DILexicalBlock(scope: !4182, file: !3, line: 2196, column: 8)
!4188 = !DILocation(line: 2196, column: 38, scope: !4187)
!4189 = !DILocation(line: 2196, column: 61, scope: !4187)
!4190 = !DILocation(line: 2196, column: 42, scope: !4187)
!4191 = !DILocation(line: 2196, column: 8, scope: !4187)
!4192 = !DILocation(line: 2196, column: 8, scope: !4182)
!4193 = !DILocation(line: 2197, column: 6, scope: !4187)
!4194 = !DILocation(line: 2196, column: 63, scope: !4187)
!4195 = !DILocation(line: 2195, column: 31, scope: !4182)
!4196 = !DILocation(line: 2195, column: 2, scope: !4182)
!4197 = distinct !{!4197, !4185, !4198}
!4198 = !DILocation(line: 2197, column: 6, scope: !4179)
!4199 = !DILocation(line: 2199, column: 6, scope: !4200)
!4200 = distinct !DILexicalBlock(scope: !4176, file: !3, line: 2199, column: 6)
!4201 = !DILocation(line: 2199, column: 10, scope: !4200)
!4202 = !DILocation(line: 2199, column: 8, scope: !4200)
!4203 = !DILocation(line: 2199, column: 21, scope: !4200)
!4204 = !DILocation(line: 2199, column: 37, scope: !4200)
!4205 = !DILocation(line: 2199, column: 24, scope: !4200)
!4206 = !DILocation(line: 2199, column: 40, scope: !4200)
!4207 = !DILocation(line: 2199, column: 45, scope: !4200)
!4208 = !DILocation(line: 2199, column: 53, scope: !4200)
!4209 = !DILocation(line: 2199, column: 6, scope: !4176)
!4210 = !DILocation(line: 2207, column: 6, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !4200, file: !3, line: 2200, column: 4)
!4212 = !DILocation(line: 2209, column: 6, scope: !4211)
!4213 = !DILocation(line: 2209, column: 16, scope: !4211)
!4214 = !DILocation(line: 2209, column: 19, scope: !4211)
!4215 = !DILocation(line: 2210, column: 4, scope: !4211)
!4216 = !DILocation(line: 2211, column: 7, scope: !4176)
!4217 = !DILocation(line: 2188, column: 50, scope: !4166)
!4218 = !DILocation(line: 2188, column: 3, scope: !4166)
!4219 = distinct !{!4219, !4171, !4220}
!4220 = !DILocation(line: 2211, column: 7, scope: !4162)
!4221 = !DILocation(line: 2217, column: 10, scope: !4222)
!4222 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2217, column: 3)
!4223 = !DILocation(line: 2217, column: 8, scope: !4222)
!4224 = !DILocation(line: 2217, column: 28, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4222, file: !3, line: 2217, column: 3)
!4226 = !DILocation(line: 2217, column: 30, scope: !4225)
!4227 = !DILocation(line: 2217, column: 3, scope: !4222)
!4228 = !DILocalVariable(name: "j", scope: !4229, file: !3, line: 2220, type: !886)
!4229 = distinct !DILexicalBlock(scope: !4225, file: !3, line: 2218, column: 5)
!4230 = !DILocation(line: 2220, column: 11, scope: !4229)
!4231 = !DILocation(line: 2222, column: 14, scope: !4232)
!4232 = distinct !DILexicalBlock(scope: !4229, file: !3, line: 2222, column: 7)
!4233 = !DILocation(line: 2222, column: 12, scope: !4232)
!4234 = !DILocation(line: 2222, column: 19, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 2222, column: 7)
!4236 = !DILocation(line: 2222, column: 23, scope: !4235)
!4237 = !DILocation(line: 2222, column: 21, scope: !4235)
!4238 = !DILocation(line: 2222, column: 7, scope: !4232)
!4239 = !DILocation(line: 2223, column: 6, scope: !4240)
!4240 = distinct !DILexicalBlock(scope: !4235, file: !3, line: 2223, column: 6)
!4241 = !DILocation(line: 2224, column: 6, scope: !4240)
!4242 = !DILocation(line: 2224, column: 9, scope: !4240)
!4243 = !DILocation(line: 2224, column: 53, scope: !4240)
!4244 = !DILocation(line: 2224, column: 39, scope: !4240)
!4245 = !DILocation(line: 2223, column: 6, scope: !4235)
!4246 = !DILocation(line: 2226, column: 39, scope: !4247)
!4247 = distinct !DILexicalBlock(scope: !4240, file: !3, line: 2225, column: 4)
!4248 = !DILocation(line: 2226, column: 6, scope: !4247)
!4249 = !DILocation(line: 2226, column: 16, scope: !4247)
!4250 = !DILocation(line: 2226, column: 22, scope: !4247)
!4251 = !DILocation(line: 2226, column: 32, scope: !4247)
!4252 = !DILocation(line: 2226, column: 20, scope: !4247)
!4253 = !DILocation(line: 2226, column: 37, scope: !4247)
!4254 = !DILocation(line: 2227, column: 6, scope: !4247)
!4255 = !DILocation(line: 2228, column: 6, scope: !4247)
!4256 = !DILocation(line: 2222, column: 35, scope: !4235)
!4257 = !DILocation(line: 2222, column: 7, scope: !4235)
!4258 = distinct !{!4258, !4238, !4259}
!4259 = !DILocation(line: 2229, column: 4, scope: !4232)
!4260 = !DILocation(line: 2230, column: 5, scope: !4229)
!4261 = !DILocation(line: 2217, column: 51, scope: !4225)
!4262 = !DILocation(line: 2217, column: 3, scope: !4225)
!4263 = distinct !{!4263, !4227, !4264}
!4264 = !DILocation(line: 2230, column: 5, scope: !4222)
!4265 = !DILocation(line: 2239, column: 10, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2239, column: 3)
!4267 = !DILocation(line: 2239, column: 8, scope: !4266)
!4268 = !DILocation(line: 2239, column: 15, scope: !4269)
!4269 = distinct !DILexicalBlock(scope: !4266, file: !3, line: 2239, column: 3)
!4270 = !DILocation(line: 2239, column: 19, scope: !4269)
!4271 = !DILocation(line: 2239, column: 17, scope: !4269)
!4272 = !DILocation(line: 2239, column: 3, scope: !4266)
!4273 = !DILocation(line: 2240, column: 9, scope: !4274)
!4274 = distinct !DILexicalBlock(scope: !4269, file: !3, line: 2240, column: 9)
!4275 = !DILocation(line: 2240, column: 9, scope: !4269)
!4276 = !DILocalVariable(name: "j", scope: !4277, file: !3, line: 2242, type: !886)
!4277 = distinct !DILexicalBlock(scope: !4274, file: !3, line: 2241, column: 7)
!4278 = !DILocation(line: 2242, column: 6, scope: !4277)
!4279 = !DILocation(line: 2244, column: 9, scope: !4280)
!4280 = distinct !DILexicalBlock(scope: !4277, file: !3, line: 2244, column: 2)
!4281 = !DILocation(line: 2244, column: 7, scope: !4280)
!4282 = !DILocation(line: 2244, column: 14, scope: !4283)
!4283 = distinct !DILexicalBlock(scope: !4280, file: !3, line: 2244, column: 2)
!4284 = !DILocation(line: 2244, column: 18, scope: !4283)
!4285 = !DILocation(line: 2244, column: 16, scope: !4283)
!4286 = !DILocation(line: 2244, column: 2, scope: !4280)
!4287 = !DILocation(line: 2245, column: 8, scope: !4288)
!4288 = distinct !DILexicalBlock(scope: !4283, file: !3, line: 2245, column: 8)
!4289 = !DILocation(line: 2245, column: 41, scope: !4288)
!4290 = !DILocation(line: 2245, column: 38, scope: !4288)
!4291 = !DILocation(line: 2246, column: 8, scope: !4288)
!4292 = !DILocation(line: 2246, column: 11, scope: !4288)
!4293 = !DILocation(line: 2246, column: 21, scope: !4288)
!4294 = !DILocation(line: 2246, column: 24, scope: !4288)
!4295 = !DILocation(line: 2245, column: 8, scope: !4283)
!4296 = !DILocation(line: 2248, column: 30, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4288, file: !3, line: 2247, column: 6)
!4298 = !DILocation(line: 2248, column: 36, scope: !4297)
!4299 = !DILocation(line: 2248, column: 65, scope: !4297)
!4300 = !DILocation(line: 2248, column: 46, scope: !4297)
!4301 = !DILocation(line: 2248, column: 15, scope: !4297)
!4302 = !DILocation(line: 2248, column: 13, scope: !4297)
!4303 = !DILocation(line: 2250, column: 8, scope: !4297)
!4304 = !DILocation(line: 2246, column: 27, scope: !4288)
!4305 = !DILocation(line: 2244, column: 28, scope: !4283)
!4306 = !DILocation(line: 2244, column: 2, scope: !4283)
!4307 = distinct !{!4307, !4286, !4308}
!4308 = !DILocation(line: 2251, column: 6, scope: !4280)
!4309 = !DILocation(line: 2252, column: 7, scope: !4277)
!4310 = !DILocation(line: 2239, column: 31, scope: !4269)
!4311 = !DILocation(line: 2239, column: 3, scope: !4269)
!4312 = distinct !{!4312, !4272, !4313}
!4313 = !DILocation(line: 2252, column: 7, scope: !4266)
!4314 = !DILocation(line: 2254, column: 12, scope: !4315)
!4315 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 2254, column: 3)
!4316 = !DILocation(line: 2254, column: 10, scope: !4315)
!4317 = !DILocation(line: 2254, column: 8, scope: !4315)
!4318 = !DILocation(line: 2254, column: 23, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4315, file: !3, line: 2254, column: 3)
!4320 = !DILocation(line: 2254, column: 27, scope: !4319)
!4321 = !DILocation(line: 2254, column: 39, scope: !4319)
!4322 = !DILocation(line: 2254, column: 37, scope: !4319)
!4323 = !DILocation(line: 2254, column: 25, scope: !4319)
!4324 = !DILocation(line: 2254, column: 3, scope: !4315)
!4325 = !DILocation(line: 2255, column: 9, scope: !4326)
!4326 = distinct !DILexicalBlock(scope: !4319, file: !3, line: 2255, column: 9)
!4327 = !DILocation(line: 2255, column: 9, scope: !4319)
!4328 = !DILocalVariable(name: "j", scope: !4329, file: !3, line: 2257, type: !886)
!4329 = distinct !DILexicalBlock(scope: !4326, file: !3, line: 2256, column: 7)
!4330 = !DILocation(line: 2257, column: 6, scope: !4329)
!4331 = !DILocation(line: 2259, column: 9, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4329, file: !3, line: 2259, column: 2)
!4333 = !DILocation(line: 2259, column: 7, scope: !4332)
!4334 = !DILocation(line: 2259, column: 14, scope: !4335)
!4335 = distinct !DILexicalBlock(scope: !4332, file: !3, line: 2259, column: 2)
!4336 = !DILocation(line: 2259, column: 18, scope: !4335)
!4337 = !DILocation(line: 2259, column: 16, scope: !4335)
!4338 = !DILocation(line: 2259, column: 2, scope: !4332)
!4339 = !DILocation(line: 2260, column: 8, scope: !4340)
!4340 = distinct !DILexicalBlock(scope: !4335, file: !3, line: 2260, column: 8)
!4341 = !DILocation(line: 2260, column: 41, scope: !4340)
!4342 = !DILocation(line: 2260, column: 38, scope: !4340)
!4343 = !DILocation(line: 2261, column: 8, scope: !4340)
!4344 = !DILocation(line: 2261, column: 11, scope: !4340)
!4345 = !DILocation(line: 2261, column: 21, scope: !4340)
!4346 = !DILocation(line: 2261, column: 24, scope: !4340)
!4347 = !DILocation(line: 2262, column: 8, scope: !4340)
!4348 = !DILocation(line: 2262, column: 11, scope: !4340)
!4349 = !DILocation(line: 2260, column: 8, scope: !4335)
!4350 = !DILocation(line: 2265, column: 30, scope: !4351)
!4351 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 2264, column: 6)
!4352 = !DILocation(line: 2265, column: 36, scope: !4351)
!4353 = !DILocation(line: 2265, column: 65, scope: !4351)
!4354 = !DILocation(line: 2265, column: 46, scope: !4351)
!4355 = !DILocation(line: 2265, column: 15, scope: !4351)
!4356 = !DILocation(line: 2265, column: 13, scope: !4351)
!4357 = !DILocation(line: 2267, column: 8, scope: !4351)
!4358 = !DILocation(line: 2259, column: 28, scope: !4335)
!4359 = !DILocation(line: 2259, column: 2, scope: !4335)
!4360 = distinct !{!4360, !4338, !4361}
!4361 = !DILocation(line: 2268, column: 6, scope: !4332)
!4362 = !DILocation(line: 2269, column: 7, scope: !4329)
!4363 = !DILocation(line: 2254, column: 50, scope: !4319)
!4364 = !DILocation(line: 2254, column: 3, scope: !4319)
!4365 = distinct !{!4365, !4324, !4366}
!4366 = !DILocation(line: 2269, column: 7, scope: !4315)
!4367 = !DILocation(line: 2270, column: 1, scope: !3766)
!4368 = distinct !DISubprogram(name: "subst_stack_regs_pat", scope: !3, file: !3, line: 1349, type: !4369, scopeLine: 1350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!4369 = !DISubroutineType(types: !4370)
!4370 = !{!918, !1028, !2004, !1028}
!4371 = !DILocalVariable(name: "insn", arg: 1, scope: !4368, file: !3, line: 1349, type: !1028)
!4372 = !DILocation(line: 1349, column: 27, scope: !4368)
!4373 = !DILocalVariable(name: "regstack", arg: 2, scope: !4368, file: !3, line: 1349, type: !2004)
!4374 = !DILocation(line: 1349, column: 39, scope: !4368)
!4375 = !DILocalVariable(name: "pat", arg: 3, scope: !4368, file: !3, line: 1349, type: !1028)
!4376 = !DILocation(line: 1349, column: 53, scope: !4368)
!4377 = !DILocalVariable(name: "dest", scope: !4368, file: !3, line: 1351, type: !2006)
!4378 = !DILocation(line: 1351, column: 8, scope: !4368)
!4379 = !DILocalVariable(name: "src", scope: !4368, file: !3, line: 1351, type: !2006)
!4380 = !DILocation(line: 1351, column: 15, scope: !4368)
!4381 = !DILocalVariable(name: "control_flow_insn_deleted", scope: !4368, file: !3, line: 1352, type: !918)
!4382 = !DILocation(line: 1352, column: 8, scope: !4368)
!4383 = !DILocation(line: 1354, column: 11, scope: !4368)
!4384 = !DILocation(line: 1354, column: 3, scope: !4368)
!4385 = !DILocation(line: 1359, column: 28, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !4368, file: !3, line: 1355, column: 5)
!4387 = !DILocation(line: 1359, column: 13, scope: !4386)
!4388 = !DILocation(line: 1359, column: 11, scope: !4386)
!4389 = !DILocation(line: 1360, column: 11, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !4386, file: !3, line: 1360, column: 11)
!4391 = !DILocation(line: 1361, column: 4, scope: !4390)
!4392 = !DILocation(line: 1361, column: 24, scope: !4390)
!4393 = !DILocation(line: 1361, column: 40, scope: !4390)
!4394 = !DILocation(line: 1361, column: 7, scope: !4390)
!4395 = !DILocation(line: 1360, column: 11, scope: !4386)
!4396 = !DILocation(line: 1365, column: 15, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4398, file: !3, line: 1365, column: 15)
!4398 = distinct !DILexicalBlock(scope: !4390, file: !3, line: 1362, column: 2)
!4399 = !DILocation(line: 1365, column: 15, scope: !4398)
!4400 = !DILocation(line: 1366, column: 21, scope: !4397)
!4401 = !DILocation(line: 1366, column: 27, scope: !4397)
!4402 = !DILocation(line: 1366, column: 38, scope: !4397)
!4403 = !DILocation(line: 1366, column: 37, scope: !4397)
!4404 = !DILocation(line: 1366, column: 6, scope: !4397)
!4405 = !DILocation(line: 1367, column: 11, scope: !4398)
!4406 = !DILocation(line: 1367, column: 4, scope: !4398)
!4407 = !DILocation(line: 1375, column: 7, scope: !4386)
!4408 = !DILocation(line: 1378, column: 7, scope: !4386)
!4409 = !DILocalVariable(name: "note", scope: !4410, file: !3, line: 1382, type: !1028)
!4410 = distinct !DILexicalBlock(scope: !4386, file: !3, line: 1381, column: 7)
!4411 = !DILocation(line: 1382, column: 6, scope: !4410)
!4412 = !DILocation(line: 1384, column: 24, scope: !4410)
!4413 = !DILocation(line: 1384, column: 9, scope: !4410)
!4414 = !DILocation(line: 1384, column: 7, scope: !4410)
!4415 = !DILocation(line: 1385, column: 6, scope: !4416)
!4416 = distinct !DILexicalBlock(scope: !4410, file: !3, line: 1385, column: 6)
!4417 = !DILocation(line: 1385, column: 6, scope: !4410)
!4418 = !DILocation(line: 1387, column: 28, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4416, file: !3, line: 1386, column: 4)
!4420 = !DILocation(line: 1387, column: 45, scope: !4419)
!4421 = !DILocation(line: 1387, column: 44, scope: !4419)
!4422 = !DILocation(line: 1387, column: 13, scope: !4419)
!4423 = !DILocation(line: 1387, column: 11, scope: !4419)
!4424 = !DILocation(line: 1389, column: 10, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4419, file: !3, line: 1389, column: 10)
!4426 = !DILocation(line: 1389, column: 17, scope: !4425)
!4427 = !DILocation(line: 1389, column: 14, scope: !4425)
!4428 = !DILocation(line: 1389, column: 10, scope: !4419)
!4429 = !DILocation(line: 1402, column: 7, scope: !4430)
!4430 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 1402, column: 7)
!4431 = distinct !DILexicalBlock(scope: !4425, file: !3, line: 1390, column: 8)
!4432 = !DILocation(line: 1402, column: 7, scope: !4431)
!4433 = !DILocation(line: 1403, column: 20, scope: !4430)
!4434 = !DILocation(line: 1403, column: 26, scope: !4430)
!4435 = !DILocation(line: 1403, column: 37, scope: !4430)
!4436 = !DILocation(line: 1403, column: 36, scope: !4430)
!4437 = !DILocation(line: 1403, column: 5, scope: !4430)
!4438 = !DILocation(line: 1405, column: 27, scope: !4430)
!4439 = !DILocation(line: 1405, column: 46, scope: !4430)
!4440 = !DILocation(line: 1405, column: 45, scope: !4430)
!4441 = !DILocation(line: 1405, column: 12, scope: !4430)
!4442 = !DILocation(line: 1405, column: 10, scope: !4430)
!4443 = !DILocation(line: 1406, column: 7, scope: !4444)
!4444 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 1406, column: 7)
!4445 = !DILocation(line: 1406, column: 7, scope: !4431)
!4446 = !DILocation(line: 1407, column: 18, scope: !4444)
!4447 = !DILocation(line: 1407, column: 24, scope: !4444)
!4448 = !DILocation(line: 1407, column: 5, scope: !4444)
!4449 = !DILocation(line: 1408, column: 16, scope: !4431)
!4450 = !DILocation(line: 1408, column: 3, scope: !4431)
!4451 = !DILocation(line: 1409, column: 8, scope: !4431)
!4452 = !DILocation(line: 1417, column: 8, scope: !4453)
!4453 = distinct !DILexicalBlock(scope: !4454, file: !3, line: 1417, column: 7)
!4454 = distinct !DILexicalBlock(scope: !4425, file: !3, line: 1411, column: 8)
!4455 = !DILocation(line: 1417, column: 7, scope: !4454)
!4456 = !DILocalVariable(name: "t", scope: !4457, file: !3, line: 1419, type: !1028)
!4457 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 1418, column: 5)
!4458 = !DILocation(line: 1419, column: 11, scope: !4457)
!4459 = !DILocation(line: 1419, column: 16, scope: !4457)
!4460 = !DILocation(line: 1419, column: 15, scope: !4457)
!4461 = !DILocation(line: 1420, column: 11, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !4457, file: !3, line: 1420, column: 11)
!4463 = !DILocation(line: 1420, column: 11, scope: !4457)
!4464 = !DILocalVariable(name: "u", scope: !4465, file: !3, line: 1422, type: !1028)
!4465 = distinct !DILexicalBlock(scope: !4462, file: !3, line: 1421, column: 9)
!4466 = !DILocation(line: 1422, column: 8, scope: !4465)
!4467 = !DILocation(line: 1422, column: 12, scope: !4465)
!4468 = !DILocation(line: 1423, column: 25, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4465, file: !3, line: 1423, column: 8)
!4470 = !DILocation(line: 1423, column: 35, scope: !4469)
!4471 = !DILocation(line: 1423, column: 8, scope: !4469)
!4472 = !DILocation(line: 1423, column: 38, scope: !4469)
!4473 = !DILocation(line: 1423, column: 8, scope: !4465)
!4474 = !DILocalVariable(name: "pat2", scope: !4475, file: !3, line: 1425, type: !1028)
!4475 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 1424, column: 6)
!4476 = !DILocation(line: 1425, column: 12, scope: !4475)
!4477 = !DILocation(line: 1425, column: 19, scope: !4475)
!4478 = !DILocalVariable(name: "insn2", scope: !4475, file: !3, line: 1426, type: !1028)
!4479 = !DILocation(line: 1426, column: 12, scope: !4475)
!4480 = !DILocation(line: 1426, column: 38, scope: !4475)
!4481 = !DILocation(line: 1426, column: 44, scope: !4475)
!4482 = !DILocation(line: 1426, column: 20, scope: !4475)
!4483 = !DILocation(line: 1428, column: 37, scope: !4475)
!4484 = !DILocation(line: 1428, column: 44, scope: !4475)
!4485 = !DILocation(line: 1428, column: 54, scope: !4475)
!4486 = !DILocation(line: 1428, column: 13, scope: !4475)
!4487 = !DILocation(line: 1428, column: 10, scope: !4475)
!4488 = !DILocation(line: 1429, column: 6, scope: !4475)
!4489 = !DILocation(line: 1430, column: 9, scope: !4465)
!4490 = !DILocation(line: 1431, column: 28, scope: !4491)
!4491 = distinct !DILexicalBlock(scope: !4457, file: !3, line: 1431, column: 11)
!4492 = !DILocation(line: 1431, column: 38, scope: !4491)
!4493 = !DILocation(line: 1431, column: 11, scope: !4491)
!4494 = !DILocation(line: 1431, column: 41, scope: !4491)
!4495 = !DILocation(line: 1431, column: 11, scope: !4457)
!4496 = !DILocation(line: 1433, column: 31, scope: !4491)
!4497 = !DILocation(line: 1433, column: 37, scope: !4491)
!4498 = !DILocation(line: 1433, column: 47, scope: !4491)
!4499 = !DILocation(line: 1433, column: 7, scope: !4491)
!4500 = !DILocation(line: 1433, column: 4, scope: !4491)
!4501 = !DILocation(line: 1432, column: 9, scope: !4491)
!4502 = !DILocation(line: 1434, column: 5, scope: !4457)
!4503 = !DILocation(line: 1436, column: 4, scope: !4419)
!4504 = !DILocation(line: 1437, column: 2, scope: !4410)
!4505 = !DILocalVariable(name: "src1", scope: !4506, file: !3, line: 1442, type: !2006)
!4506 = distinct !DILexicalBlock(scope: !4386, file: !3, line: 1441, column: 7)
!4507 = !DILocation(line: 1442, column: 7, scope: !4506)
!4508 = !DILocalVariable(name: "src2", scope: !4506, file: !3, line: 1442, type: !2006)
!4509 = !DILocation(line: 1442, column: 26, scope: !4506)
!4510 = !DILocalVariable(name: "src1_note", scope: !4506, file: !3, line: 1443, type: !1028)
!4511 = !DILocation(line: 1443, column: 6, scope: !4506)
!4512 = !DILocalVariable(name: "src2_note", scope: !4506, file: !3, line: 1443, type: !1028)
!4513 = !DILocation(line: 1443, column: 17, scope: !4506)
!4514 = !DILocalVariable(name: "pat_src", scope: !4506, file: !3, line: 1444, type: !1028)
!4515 = !DILocation(line: 1444, column: 6, scope: !4506)
!4516 = !DILocation(line: 1446, column: 24, scope: !4506)
!4517 = !DILocation(line: 1446, column: 9, scope: !4506)
!4518 = !DILocation(line: 1446, column: 7, scope: !4506)
!4519 = !DILocation(line: 1447, column: 24, scope: !4506)
!4520 = !DILocation(line: 1447, column: 9, scope: !4506)
!4521 = !DILocation(line: 1447, column: 7, scope: !4506)
!4522 = !DILocation(line: 1448, column: 12, scope: !4506)
!4523 = !DILocation(line: 1448, column: 10, scope: !4506)
!4524 = !DILocation(line: 1451, column: 6, scope: !4525)
!4525 = distinct !DILexicalBlock(scope: !4506, file: !3, line: 1451, column: 6)
!4526 = !DILocation(line: 1452, column: 6, scope: !4525)
!4527 = !DILocation(line: 1452, column: 10, scope: !4525)
!4528 = !DILocation(line: 1453, column: 3, scope: !4525)
!4529 = !DILocation(line: 1453, column: 7, scope: !4525)
!4530 = !DILocation(line: 1453, column: 20, scope: !4525)
!4531 = !DILocation(line: 1453, column: 23, scope: !4525)
!4532 = !DILocation(line: 1454, column: 7, scope: !4525)
!4533 = !DILocation(line: 1454, column: 10, scope: !4525)
!4534 = !DILocation(line: 1454, column: 26, scope: !4525)
!4535 = !DILocation(line: 1451, column: 6, scope: !4506)
!4536 = !DILocation(line: 1456, column: 55, scope: !4537)
!4537 = distinct !DILexicalBlock(scope: !4525, file: !3, line: 1455, column: 4)
!4538 = !DILocation(line: 1456, column: 61, scope: !4537)
!4539 = !DILocation(line: 1456, column: 71, scope: !4537)
!4540 = !DILocation(line: 1456, column: 35, scope: !4537)
!4541 = !DILocation(line: 1456, column: 32, scope: !4537)
!4542 = !DILocation(line: 1457, column: 6, scope: !4537)
!4543 = !DILocation(line: 1460, column: 10, scope: !4506)
!4544 = !DILocation(line: 1460, column: 2, scope: !4506)
!4545 = !DILocation(line: 1463, column: 29, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4506, file: !3, line: 1461, column: 4)
!4547 = !DILocation(line: 1463, column: 35, scope: !4546)
!4548 = !DILocation(line: 1463, column: 45, scope: !4546)
!4549 = !DILocation(line: 1463, column: 6, scope: !4546)
!4550 = !DILocation(line: 1464, column: 6, scope: !4546)
!4551 = !DILocalVariable(name: "count", scope: !4552, file: !3, line: 1468, type: !886)
!4552 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1467, column: 6)
!4553 = !DILocation(line: 1468, column: 12, scope: !4552)
!4554 = !DILocation(line: 1469, column: 38, scope: !4555)
!4555 = distinct !DILexicalBlock(scope: !4552, file: !3, line: 1469, column: 8)
!4556 = !DILocation(line: 1469, column: 21, scope: !4555)
!4557 = !DILocation(line: 1469, column: 53, scope: !4555)
!4558 = !DILocation(line: 1469, column: 19, scope: !4555)
!4559 = !DILocation(line: 1469, column: 13, scope: !4555)
!4560 = !DILocation(line: 1470, column: 6, scope: !4561)
!4561 = distinct !DILexicalBlock(scope: !4555, file: !3, line: 1469, column: 8)
!4562 = !DILocation(line: 1470, column: 14, scope: !4561)
!4563 = !DILocation(line: 1469, column: 8, scope: !4555)
!4564 = !DILocation(line: 1472, column: 38, scope: !4565)
!4565 = distinct !DILexicalBlock(scope: !4561, file: !3, line: 1471, column: 3)
!4566 = !DILocation(line: 1472, column: 54, scope: !4565)
!4567 = !DILocation(line: 1472, column: 52, scope: !4565)
!4568 = !DILocation(line: 1472, column: 5, scope: !4565)
!4569 = !DILocation(line: 1472, column: 15, scope: !4565)
!4570 = !DILocation(line: 1472, column: 21, scope: !4565)
!4571 = !DILocation(line: 1472, column: 31, scope: !4565)
!4572 = !DILocation(line: 1472, column: 19, scope: !4565)
!4573 = !DILocation(line: 1472, column: 36, scope: !4565)
!4574 = !DILocation(line: 1473, column: 5, scope: !4565)
!4575 = !DILocation(line: 1469, column: 8, scope: !4561)
!4576 = distinct !{!4576, !4563, !4577}
!4577 = !DILocation(line: 1474, column: 3, scope: !4555)
!4578 = !DILocation(line: 1476, column: 19, scope: !4546)
!4579 = !DILocation(line: 1476, column: 6, scope: !4546)
!4580 = !DILocation(line: 1477, column: 6, scope: !4546)
!4581 = !DILocation(line: 1481, column: 6, scope: !4546)
!4582 = !DILocation(line: 1482, column: 13, scope: !4546)
!4583 = !DILocation(line: 1482, column: 11, scope: !4546)
!4584 = !DILocation(line: 1482, column: 6, scope: !4546)
!4585 = !DILocation(line: 1495, column: 10, scope: !4586)
!4586 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1495, column: 10)
!4587 = !DILocation(line: 1495, column: 15, scope: !4586)
!4588 = !DILocation(line: 1495, column: 10, scope: !4546)
!4589 = !DILocation(line: 1496, column: 30, scope: !4586)
!4590 = !DILocation(line: 1496, column: 15, scope: !4586)
!4591 = !DILocation(line: 1496, column: 13, scope: !4586)
!4592 = !DILocation(line: 1496, column: 8, scope: !4586)
!4593 = !DILocation(line: 1498, column: 22, scope: !4546)
!4594 = !DILocation(line: 1498, column: 28, scope: !4546)
!4595 = !DILocation(line: 1498, column: 39, scope: !4546)
!4596 = !DILocation(line: 1498, column: 38, scope: !4546)
!4597 = !DILocation(line: 1498, column: 6, scope: !4546)
!4598 = !DILocation(line: 1500, column: 35, scope: !4546)
!4599 = !DILocation(line: 1500, column: 51, scope: !4546)
!4600 = !DILocation(line: 1500, column: 18, scope: !4546)
!4601 = !DILocation(line: 1500, column: 16, scope: !4546)
!4602 = !DILocation(line: 1502, column: 10, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1502, column: 10)
!4604 = !DILocation(line: 1502, column: 10, scope: !4546)
!4605 = !DILocation(line: 1503, column: 21, scope: !4603)
!4606 = !DILocation(line: 1503, column: 8, scope: !4603)
!4607 = !DILocation(line: 1505, column: 10, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1505, column: 10)
!4609 = !DILocation(line: 1505, column: 10, scope: !4546)
!4610 = !DILocation(line: 1507, column: 17, scope: !4611)
!4611 = distinct !DILexicalBlock(scope: !4608, file: !3, line: 1506, column: 8)
!4612 = !DILocation(line: 1507, column: 3, scope: !4611)
!4613 = !DILocation(line: 1508, column: 3, scope: !4611)
!4614 = !DILocation(line: 1508, column: 13, scope: !4611)
!4615 = !DILocation(line: 1508, column: 16, scope: !4611)
!4616 = !DILocation(line: 1509, column: 3, scope: !4611)
!4617 = !DILocation(line: 1510, column: 8, scope: !4611)
!4618 = !DILocation(line: 1512, column: 19, scope: !4546)
!4619 = !DILocation(line: 1512, column: 6, scope: !4546)
!4620 = !DILocation(line: 1513, column: 6, scope: !4546)
!4621 = !DILocation(line: 1527, column: 28, scope: !4546)
!4622 = !DILocation(line: 1527, column: 13, scope: !4546)
!4623 = !DILocation(line: 1527, column: 11, scope: !4546)
!4624 = !DILocation(line: 1528, column: 28, scope: !4546)
!4625 = !DILocation(line: 1528, column: 13, scope: !4546)
!4626 = !DILocation(line: 1528, column: 11, scope: !4546)
!4627 = !DILocation(line: 1532, column: 10, scope: !4628)
!4628 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1532, column: 10)
!4629 = !DILocation(line: 1532, column: 10, scope: !4546)
!4630 = !DILocation(line: 1533, column: 37, scope: !4628)
!4631 = !DILocation(line: 1533, column: 53, scope: !4628)
!4632 = !DILocation(line: 1533, column: 20, scope: !4628)
!4633 = !DILocation(line: 1533, column: 18, scope: !4628)
!4634 = !DILocation(line: 1533, column: 8, scope: !4628)
!4635 = !DILocation(line: 1535, column: 18, scope: !4628)
!4636 = !DILocation(line: 1536, column: 10, scope: !4637)
!4637 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1536, column: 10)
!4638 = !DILocation(line: 1536, column: 10, scope: !4546)
!4639 = !DILocation(line: 1537, column: 37, scope: !4637)
!4640 = !DILocation(line: 1537, column: 53, scope: !4637)
!4641 = !DILocation(line: 1537, column: 20, scope: !4637)
!4642 = !DILocation(line: 1537, column: 18, scope: !4637)
!4643 = !DILocation(line: 1537, column: 8, scope: !4637)
!4644 = !DILocation(line: 1539, column: 18, scope: !4637)
!4645 = !DILocation(line: 1544, column: 12, scope: !4646)
!4646 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1544, column: 10)
!4647 = !DILocation(line: 1544, column: 32, scope: !4646)
!4648 = !DILocation(line: 1544, column: 37, scope: !4646)
!4649 = !DILocation(line: 1544, column: 10, scope: !4546)
!4650 = !DILocation(line: 1545, column: 24, scope: !4646)
!4651 = !DILocation(line: 1545, column: 30, scope: !4646)
!4652 = !DILocation(line: 1545, column: 41, scope: !4646)
!4653 = !DILocation(line: 1545, column: 40, scope: !4646)
!4654 = !DILocation(line: 1545, column: 8, scope: !4646)
!4655 = !DILocalVariable(name: "src1_hard_regnum", scope: !4656, file: !3, line: 1552, type: !886)
!4656 = distinct !DILexicalBlock(scope: !4646, file: !3, line: 1547, column: 8)
!4657 = !DILocation(line: 1552, column: 7, scope: !4656)
!4658 = !DILocalVariable(name: "src2_hard_regnum", scope: !4656, file: !3, line: 1552, type: !886)
!4659 = !DILocation(line: 1552, column: 25, scope: !4656)
!4660 = !DILocation(line: 1554, column: 39, scope: !4656)
!4661 = !DILocation(line: 1554, column: 50, scope: !4656)
!4662 = !DILocation(line: 1554, column: 49, scope: !4656)
!4663 = !DILocation(line: 1554, column: 22, scope: !4656)
!4664 = !DILocation(line: 1554, column: 20, scope: !4656)
!4665 = !DILocation(line: 1555, column: 39, scope: !4656)
!4666 = !DILocation(line: 1555, column: 50, scope: !4656)
!4667 = !DILocation(line: 1555, column: 49, scope: !4656)
!4668 = !DILocation(line: 1555, column: 22, scope: !4656)
!4669 = !DILocation(line: 1555, column: 20, scope: !4656)
!4670 = !DILocation(line: 1559, column: 7, scope: !4671)
!4671 = distinct !DILexicalBlock(scope: !4656, file: !3, line: 1559, column: 7)
!4672 = !DILocation(line: 1559, column: 24, scope: !4671)
!4673 = !DILocation(line: 1559, column: 7, scope: !4656)
!4674 = !DILocalVariable(name: "pat2", scope: !4675, file: !3, line: 1561, type: !1028)
!4675 = distinct !DILexicalBlock(scope: !4671, file: !3, line: 1560, column: 5)
!4676 = !DILocation(line: 1561, column: 11, scope: !4675)
!4677 = !DILocation(line: 1561, column: 18, scope: !4675)
!4678 = !DILocalVariable(name: "insn2", scope: !4675, file: !3, line: 1562, type: !1028)
!4679 = !DILocation(line: 1562, column: 11, scope: !4675)
!4680 = !DILocation(line: 1562, column: 37, scope: !4675)
!4681 = !DILocation(line: 1562, column: 43, scope: !4675)
!4682 = !DILocation(line: 1562, column: 19, scope: !4675)
!4683 = !DILocation(line: 1564, column: 36, scope: !4675)
!4684 = !DILocation(line: 1564, column: 43, scope: !4675)
!4685 = !DILocation(line: 1564, column: 54, scope: !4675)
!4686 = !DILocation(line: 1564, column: 53, scope: !4675)
!4687 = !DILocation(line: 1564, column: 12, scope: !4675)
!4688 = !DILocation(line: 1564, column: 9, scope: !4675)
!4689 = !DILocation(line: 1565, column: 5, scope: !4675)
!4690 = !DILocation(line: 1566, column: 7, scope: !4691)
!4691 = distinct !DILexicalBlock(scope: !4656, file: !3, line: 1566, column: 7)
!4692 = !DILocation(line: 1566, column: 24, scope: !4691)
!4693 = !DILocation(line: 1566, column: 7, scope: !4656)
!4694 = !DILocalVariable(name: "pat2", scope: !4695, file: !3, line: 1568, type: !1028)
!4695 = distinct !DILexicalBlock(scope: !4691, file: !3, line: 1567, column: 5)
!4696 = !DILocation(line: 1568, column: 11, scope: !4695)
!4697 = !DILocation(line: 1568, column: 18, scope: !4695)
!4698 = !DILocalVariable(name: "insn2", scope: !4695, file: !3, line: 1569, type: !1028)
!4699 = !DILocation(line: 1569, column: 11, scope: !4695)
!4700 = !DILocation(line: 1569, column: 37, scope: !4695)
!4701 = !DILocation(line: 1569, column: 43, scope: !4695)
!4702 = !DILocation(line: 1569, column: 19, scope: !4695)
!4703 = !DILocation(line: 1571, column: 36, scope: !4695)
!4704 = !DILocation(line: 1571, column: 43, scope: !4695)
!4705 = !DILocation(line: 1571, column: 54, scope: !4695)
!4706 = !DILocation(line: 1571, column: 53, scope: !4695)
!4707 = !DILocation(line: 1571, column: 12, scope: !4695)
!4708 = !DILocation(line: 1571, column: 9, scope: !4695)
!4709 = !DILocation(line: 1572, column: 5, scope: !4695)
!4710 = !DILocation(line: 1574, column: 7, scope: !4711)
!4711 = distinct !DILexicalBlock(scope: !4656, file: !3, line: 1574, column: 7)
!4712 = !DILocation(line: 1574, column: 24, scope: !4711)
!4713 = !DILocation(line: 1575, column: 7, scope: !4711)
!4714 = !DILocation(line: 1575, column: 10, scope: !4711)
!4715 = !DILocation(line: 1575, column: 27, scope: !4711)
!4716 = !DILocation(line: 1574, column: 7, scope: !4656)
!4717 = !DILocation(line: 1576, column: 21, scope: !4711)
!4718 = !DILocation(line: 1576, column: 27, scope: !4711)
!4719 = !DILocation(line: 1576, column: 38, scope: !4711)
!4720 = !DILocation(line: 1576, column: 37, scope: !4711)
!4721 = !DILocation(line: 1576, column: 5, scope: !4711)
!4722 = !DILocation(line: 1579, column: 10, scope: !4723)
!4723 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1579, column: 10)
!4724 = !DILocation(line: 1579, column: 10, scope: !4546)
!4725 = !DILocation(line: 1580, column: 21, scope: !4723)
!4726 = !DILocation(line: 1580, column: 44, scope: !4723)
!4727 = !DILocation(line: 1580, column: 55, scope: !4723)
!4728 = !DILocation(line: 1580, column: 54, scope: !4723)
!4729 = !DILocation(line: 1580, column: 27, scope: !4723)
!4730 = !DILocation(line: 1580, column: 8, scope: !4723)
!4731 = !DILocation(line: 1581, column: 10, scope: !4732)
!4732 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1581, column: 10)
!4733 = !DILocation(line: 1581, column: 10, scope: !4546)
!4734 = !DILocation(line: 1582, column: 21, scope: !4732)
!4735 = !DILocation(line: 1582, column: 44, scope: !4732)
!4736 = !DILocation(line: 1582, column: 55, scope: !4732)
!4737 = !DILocation(line: 1582, column: 54, scope: !4732)
!4738 = !DILocation(line: 1582, column: 27, scope: !4732)
!4739 = !DILocation(line: 1582, column: 8, scope: !4732)
!4740 = !DILocation(line: 1584, column: 10, scope: !4741)
!4741 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1584, column: 10)
!4742 = !DILocation(line: 1584, column: 10, scope: !4546)
!4743 = !DILocalVariable(name: "src1_reg", scope: !4744, file: !3, line: 1586, type: !1028)
!4744 = distinct !DILexicalBlock(scope: !4741, file: !3, line: 1585, column: 8)
!4745 = !DILocation(line: 1586, column: 7, scope: !4744)
!4746 = !DILocation(line: 1586, column: 18, scope: !4744)
!4747 = !DILocation(line: 1594, column: 7, scope: !4748)
!4748 = distinct !DILexicalBlock(scope: !4744, file: !3, line: 1594, column: 7)
!4749 = !DILocation(line: 1594, column: 27, scope: !4748)
!4750 = !DILocation(line: 1594, column: 37, scope: !4748)
!4751 = !DILocation(line: 1594, column: 41, scope: !4748)
!4752 = !DILocation(line: 1594, column: 51, scope: !4748)
!4753 = !DILocation(line: 1594, column: 24, scope: !4748)
!4754 = !DILocation(line: 1594, column: 7, scope: !4744)
!4755 = !DILocation(line: 1596, column: 7, scope: !4756)
!4756 = distinct !DILexicalBlock(scope: !4748, file: !3, line: 1595, column: 5)
!4757 = !DILocation(line: 1597, column: 20, scope: !4756)
!4758 = !DILocation(line: 1597, column: 43, scope: !4756)
!4759 = !DILocation(line: 1597, column: 54, scope: !4756)
!4760 = !DILocation(line: 1597, column: 53, scope: !4756)
!4761 = !DILocation(line: 1597, column: 26, scope: !4756)
!4762 = !DILocation(line: 1597, column: 7, scope: !4756)
!4763 = !DILocation(line: 1598, column: 5, scope: !4756)
!4764 = !DILocalVariable(name: "regno", scope: !4765, file: !3, line: 1601, type: !886)
!4765 = distinct !DILexicalBlock(scope: !4748, file: !3, line: 1600, column: 5)
!4766 = !DILocation(line: 1601, column: 11, scope: !4765)
!4767 = !DILocation(line: 1601, column: 36, scope: !4765)
!4768 = !DILocation(line: 1601, column: 46, scope: !4765)
!4769 = !DILocation(line: 1601, column: 19, scope: !4765)
!4770 = !DILocation(line: 1603, column: 7, scope: !4765)
!4771 = !DILocation(line: 1604, column: 20, scope: !4765)
!4772 = !DILocation(line: 1604, column: 26, scope: !4765)
!4773 = !DILocation(line: 1604, column: 7, scope: !4765)
!4774 = !DILocation(line: 1607, column: 11, scope: !4765)
!4775 = !DILocation(line: 1607, column: 21, scope: !4765)
!4776 = !DILocation(line: 1607, column: 25, scope: !4765)
!4777 = !DILocation(line: 1607, column: 35, scope: !4765)
!4778 = !DILocation(line: 1606, column: 7, scope: !4765)
!4779 = !DILocation(line: 1606, column: 17, scope: !4765)
!4780 = !DILocation(line: 1606, column: 21, scope: !4765)
!4781 = !DILocation(line: 1606, column: 31, scope: !4765)
!4782 = !DILocation(line: 1606, column: 38, scope: !4765)
!4783 = !DILocation(line: 1606, column: 44, scope: !4765)
!4784 = !DILocation(line: 1606, column: 35, scope: !4765)
!4785 = !DILocation(line: 1607, column: 9, scope: !4765)
!4786 = !DILocation(line: 1610, column: 3, scope: !4744)
!4787 = !DILocation(line: 1612, column: 17, scope: !4744)
!4788 = !DILocation(line: 1612, column: 3, scope: !4744)
!4789 = !DILocation(line: 1613, column: 3, scope: !4744)
!4790 = !DILocation(line: 1613, column: 13, scope: !4744)
!4791 = !DILocation(line: 1613, column: 16, scope: !4744)
!4792 = !DILocation(line: 1614, column: 8, scope: !4744)
!4793 = !DILocation(line: 1615, column: 15, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4741, file: !3, line: 1615, column: 15)
!4795 = !DILocation(line: 1615, column: 15, scope: !4741)
!4796 = !DILocalVariable(name: "src2_reg", scope: !4797, file: !3, line: 1617, type: !1028)
!4797 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 1616, column: 8)
!4798 = !DILocation(line: 1617, column: 7, scope: !4797)
!4799 = !DILocation(line: 1617, column: 18, scope: !4797)
!4800 = !DILocation(line: 1618, column: 7, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4797, file: !3, line: 1618, column: 7)
!4802 = !DILocation(line: 1618, column: 27, scope: !4801)
!4803 = !DILocation(line: 1618, column: 37, scope: !4801)
!4804 = !DILocation(line: 1618, column: 41, scope: !4801)
!4805 = !DILocation(line: 1618, column: 51, scope: !4801)
!4806 = !DILocation(line: 1618, column: 24, scope: !4801)
!4807 = !DILocation(line: 1618, column: 7, scope: !4797)
!4808 = !DILocation(line: 1620, column: 7, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 1619, column: 5)
!4810 = !DILocation(line: 1621, column: 20, scope: !4809)
!4811 = !DILocation(line: 1621, column: 43, scope: !4809)
!4812 = !DILocation(line: 1621, column: 54, scope: !4809)
!4813 = !DILocation(line: 1621, column: 53, scope: !4809)
!4814 = !DILocation(line: 1621, column: 26, scope: !4809)
!4815 = !DILocation(line: 1621, column: 7, scope: !4809)
!4816 = !DILocation(line: 1622, column: 5, scope: !4809)
!4817 = !DILocalVariable(name: "regno", scope: !4818, file: !3, line: 1625, type: !886)
!4818 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 1624, column: 5)
!4819 = !DILocation(line: 1625, column: 11, scope: !4818)
!4820 = !DILocation(line: 1625, column: 36, scope: !4818)
!4821 = !DILocation(line: 1625, column: 46, scope: !4818)
!4822 = !DILocation(line: 1625, column: 19, scope: !4818)
!4823 = !DILocation(line: 1627, column: 7, scope: !4818)
!4824 = !DILocation(line: 1628, column: 20, scope: !4818)
!4825 = !DILocation(line: 1628, column: 26, scope: !4818)
!4826 = !DILocation(line: 1628, column: 7, scope: !4818)
!4827 = !DILocation(line: 1631, column: 11, scope: !4818)
!4828 = !DILocation(line: 1631, column: 21, scope: !4818)
!4829 = !DILocation(line: 1631, column: 25, scope: !4818)
!4830 = !DILocation(line: 1631, column: 35, scope: !4818)
!4831 = !DILocation(line: 1630, column: 7, scope: !4818)
!4832 = !DILocation(line: 1630, column: 17, scope: !4818)
!4833 = !DILocation(line: 1630, column: 21, scope: !4818)
!4834 = !DILocation(line: 1630, column: 31, scope: !4818)
!4835 = !DILocation(line: 1630, column: 38, scope: !4818)
!4836 = !DILocation(line: 1630, column: 44, scope: !4818)
!4837 = !DILocation(line: 1630, column: 35, scope: !4818)
!4838 = !DILocation(line: 1631, column: 9, scope: !4818)
!4839 = !DILocation(line: 1634, column: 3, scope: !4797)
!4840 = !DILocation(line: 1636, column: 17, scope: !4797)
!4841 = !DILocation(line: 1636, column: 3, scope: !4797)
!4842 = !DILocation(line: 1637, column: 3, scope: !4797)
!4843 = !DILocation(line: 1637, column: 13, scope: !4797)
!4844 = !DILocation(line: 1637, column: 16, scope: !4797)
!4845 = !DILocation(line: 1638, column: 8, scope: !4797)
!4846 = !DILocation(line: 1641, column: 3, scope: !4847)
!4847 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 1640, column: 8)
!4848 = !DILocation(line: 1642, column: 16, scope: !4847)
!4849 = !DILocation(line: 1642, column: 39, scope: !4847)
!4850 = !DILocation(line: 1642, column: 50, scope: !4847)
!4851 = !DILocation(line: 1642, column: 49, scope: !4847)
!4852 = !DILocation(line: 1642, column: 22, scope: !4847)
!4853 = !DILocation(line: 1642, column: 3, scope: !4847)
!4854 = !DILocation(line: 1646, column: 10, scope: !4855)
!4855 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1646, column: 10)
!4856 = !DILocation(line: 1647, column: 3, scope: !4855)
!4857 = !DILocation(line: 1647, column: 6, scope: !4855)
!4858 = !DILocation(line: 1647, column: 20, scope: !4855)
!4859 = !DILocation(line: 1647, column: 23, scope: !4855)
!4860 = !DILocation(line: 1648, column: 3, scope: !4855)
!4861 = !DILocation(line: 1648, column: 6, scope: !4855)
!4862 = !DILocation(line: 1648, column: 23, scope: !4855)
!4863 = !DILocation(line: 1648, column: 20, scope: !4855)
!4864 = !DILocation(line: 1646, column: 10, scope: !4546)
!4865 = !DILocalVariable(name: "tmp", scope: !4866, file: !3, line: 1650, type: !886)
!4866 = distinct !DILexicalBlock(scope: !4855, file: !3, line: 1649, column: 7)
!4867 = !DILocation(line: 1650, column: 7, scope: !4866)
!4868 = !DILocation(line: 1650, column: 13, scope: !4866)
!4869 = !DILocation(line: 1651, column: 16, scope: !4866)
!4870 = !DILocation(line: 1651, column: 22, scope: !4866)
!4871 = !DILocation(line: 1651, column: 3, scope: !4866)
!4872 = !DILocation(line: 1652, column: 16, scope: !4866)
!4873 = !DILocation(line: 1652, column: 22, scope: !4866)
!4874 = !DILocation(line: 1652, column: 3, scope: !4866)
!4875 = !DILocation(line: 1653, column: 7, scope: !4866)
!4876 = !DILocation(line: 1654, column: 6, scope: !4546)
!4877 = !DILocation(line: 1657, column: 14, scope: !4546)
!4878 = !DILocation(line: 1657, column: 6, scope: !4546)
!4879 = !DILocation(line: 1666, column: 25, scope: !4880)
!4880 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1658, column: 8)
!4881 = !DILocation(line: 1666, column: 10, scope: !4880)
!4882 = !DILocation(line: 1666, column: 8, scope: !4880)
!4883 = !DILocation(line: 1667, column: 19, scope: !4880)
!4884 = !DILocation(line: 1667, column: 25, scope: !4880)
!4885 = !DILocation(line: 1667, column: 36, scope: !4880)
!4886 = !DILocation(line: 1667, column: 35, scope: !4880)
!4887 = !DILocation(line: 1667, column: 3, scope: !4880)
!4888 = !DILocation(line: 1669, column: 32, scope: !4880)
!4889 = !DILocation(line: 1669, column: 48, scope: !4880)
!4890 = !DILocation(line: 1669, column: 15, scope: !4880)
!4891 = !DILocation(line: 1669, column: 13, scope: !4880)
!4892 = !DILocation(line: 1671, column: 7, scope: !4893)
!4893 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 1671, column: 7)
!4894 = !DILocation(line: 1671, column: 7, scope: !4880)
!4895 = !DILocation(line: 1672, column: 18, scope: !4893)
!4896 = !DILocation(line: 1672, column: 5, scope: !4893)
!4897 = !DILocation(line: 1674, column: 7, scope: !4898)
!4898 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 1674, column: 7)
!4899 = !DILocation(line: 1674, column: 7, scope: !4880)
!4900 = !DILocation(line: 1676, column: 21, scope: !4901)
!4901 = distinct !DILexicalBlock(scope: !4898, file: !3, line: 1675, column: 5)
!4902 = !DILocation(line: 1676, column: 7, scope: !4901)
!4903 = !DILocation(line: 1677, column: 7, scope: !4901)
!4904 = !DILocation(line: 1677, column: 17, scope: !4901)
!4905 = !DILocation(line: 1677, column: 20, scope: !4901)
!4906 = !DILocation(line: 1678, column: 7, scope: !4901)
!4907 = !DILocation(line: 1679, column: 5, scope: !4901)
!4908 = !DILocation(line: 1681, column: 16, scope: !4880)
!4909 = !DILocation(line: 1681, column: 3, scope: !4880)
!4910 = !DILocation(line: 1682, column: 3, scope: !4880)
!4911 = !DILocation(line: 1688, column: 25, scope: !4880)
!4912 = !DILocation(line: 1688, column: 10, scope: !4880)
!4913 = !DILocation(line: 1688, column: 8, scope: !4880)
!4914 = !DILocation(line: 1689, column: 19, scope: !4880)
!4915 = !DILocation(line: 1689, column: 25, scope: !4880)
!4916 = !DILocation(line: 1689, column: 36, scope: !4880)
!4917 = !DILocation(line: 1689, column: 35, scope: !4880)
!4918 = !DILocation(line: 1689, column: 3, scope: !4880)
!4919 = !DILocation(line: 1691, column: 32, scope: !4880)
!4920 = !DILocation(line: 1691, column: 48, scope: !4880)
!4921 = !DILocation(line: 1691, column: 15, scope: !4880)
!4922 = !DILocation(line: 1691, column: 13, scope: !4880)
!4923 = !DILocation(line: 1693, column: 16, scope: !4880)
!4924 = !DILocation(line: 1693, column: 3, scope: !4880)
!4925 = !DILocation(line: 1695, column: 7, scope: !4926)
!4926 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 1695, column: 7)
!4927 = !DILocation(line: 1695, column: 7, scope: !4880)
!4928 = !DILocation(line: 1697, column: 26, scope: !4929)
!4929 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 1696, column: 5)
!4930 = !DILocation(line: 1698, column: 12, scope: !4929)
!4931 = !DILocation(line: 1697, column: 7, scope: !4929)
!4932 = !DILocation(line: 1699, column: 22, scope: !4929)
!4933 = !DILocation(line: 1699, column: 28, scope: !4929)
!4934 = !DILocation(line: 1699, column: 38, scope: !4929)
!4935 = !DILocation(line: 1699, column: 7, scope: !4929)
!4936 = !DILocation(line: 1701, column: 5, scope: !4929)
!4937 = !DILocation(line: 1703, column: 3, scope: !4880)
!4938 = !DILocation(line: 1723, column: 25, scope: !4880)
!4939 = !DILocation(line: 1723, column: 10, scope: !4880)
!4940 = !DILocation(line: 1723, column: 8, scope: !4880)
!4941 = !DILocation(line: 1725, column: 19, scope: !4880)
!4942 = !DILocation(line: 1725, column: 25, scope: !4880)
!4943 = !DILocation(line: 1725, column: 36, scope: !4880)
!4944 = !DILocation(line: 1725, column: 35, scope: !4880)
!4945 = !DILocation(line: 1725, column: 3, scope: !4880)
!4946 = !DILocation(line: 1728, column: 32, scope: !4880)
!4947 = !DILocation(line: 1728, column: 48, scope: !4880)
!4948 = !DILocation(line: 1728, column: 15, scope: !4880)
!4949 = !DILocation(line: 1728, column: 13, scope: !4880)
!4950 = !DILocation(line: 1729, column: 3, scope: !4880)
!4951 = !DILocation(line: 1731, column: 7, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 1731, column: 7)
!4953 = !DILocation(line: 1731, column: 7, scope: !4880)
!4954 = !DILocation(line: 1732, column: 18, scope: !4952)
!4955 = !DILocation(line: 1732, column: 5, scope: !4952)
!4956 = !DILocation(line: 1734, column: 16, scope: !4880)
!4957 = !DILocation(line: 1734, column: 3, scope: !4880)
!4958 = !DILocation(line: 1735, column: 3, scope: !4880)
!4959 = !DILocation(line: 1743, column: 3, scope: !4880)
!4960 = !DILocation(line: 1743, column: 13, scope: !4880)
!4961 = !DILocation(line: 1743, column: 16, scope: !4880)
!4962 = !DILocation(line: 1754, column: 7, scope: !4880)
!4963 = !DILocation(line: 1754, column: 17, scope: !4880)
!4964 = !DILocation(line: 1754, column: 21, scope: !4880)
!4965 = !DILocation(line: 1754, column: 31, scope: !4880)
!4966 = !DILocation(line: 1754, column: 35, scope: !4880)
!4967 = !DILocation(line: 1753, column: 3, scope: !4880)
!4968 = !DILocation(line: 1753, column: 13, scope: !4880)
!4969 = !DILocation(line: 1753, column: 17, scope: !4880)
!4970 = !DILocation(line: 1753, column: 27, scope: !4880)
!4971 = !DILocation(line: 1754, column: 5, scope: !4880)
!4972 = !DILocation(line: 1756, column: 3, scope: !4880)
!4973 = !DILocation(line: 1758, column: 38, scope: !4880)
!4974 = !DILocation(line: 1758, column: 3, scope: !4880)
!4975 = !DILocation(line: 1758, column: 13, scope: !4880)
!4976 = !DILocation(line: 1758, column: 17, scope: !4880)
!4977 = !DILocation(line: 1758, column: 27, scope: !4880)
!4978 = !DILocation(line: 1758, column: 31, scope: !4880)
!4979 = !DILocation(line: 1758, column: 36, scope: !4880)
!4980 = !DILocation(line: 1759, column: 3, scope: !4880)
!4981 = !DILocation(line: 1760, column: 16, scope: !4880)
!4982 = !DILocation(line: 1760, column: 3, scope: !4880)
!4983 = !DILocation(line: 1762, column: 25, scope: !4880)
!4984 = !DILocation(line: 1762, column: 10, scope: !4880)
!4985 = !DILocation(line: 1762, column: 8, scope: !4880)
!4986 = !DILocation(line: 1764, column: 16, scope: !4880)
!4987 = !DILocation(line: 1764, column: 3, scope: !4880)
!4988 = !DILocation(line: 1765, column: 3, scope: !4880)
!4989 = !DILocation(line: 1772, column: 25, scope: !4880)
!4990 = !DILocation(line: 1772, column: 10, scope: !4880)
!4991 = !DILocation(line: 1772, column: 8, scope: !4880)
!4992 = !DILocation(line: 1773, column: 25, scope: !4880)
!4993 = !DILocation(line: 1773, column: 10, scope: !4880)
!4994 = !DILocation(line: 1773, column: 8, scope: !4880)
!4995 = !DILocation(line: 1775, column: 32, scope: !4880)
!4996 = !DILocation(line: 1775, column: 48, scope: !4880)
!4997 = !DILocation(line: 1775, column: 15, scope: !4880)
!4998 = !DILocation(line: 1775, column: 13, scope: !4880)
!4999 = !DILocation(line: 1776, column: 32, scope: !4880)
!5000 = !DILocation(line: 1776, column: 48, scope: !4880)
!5001 = !DILocation(line: 1776, column: 15, scope: !4880)
!5002 = !DILocation(line: 1776, column: 13, scope: !4880)
!5003 = !DILocation(line: 1778, column: 16, scope: !4880)
!5004 = !DILocation(line: 1778, column: 22, scope: !4880)
!5005 = !DILocation(line: 1778, column: 33, scope: !4880)
!5006 = !DILocation(line: 1778, column: 32, scope: !4880)
!5007 = !DILocation(line: 1778, column: 40, scope: !4880)
!5008 = !DILocation(line: 1778, column: 39, scope: !4880)
!5009 = !DILocation(line: 1778, column: 3, scope: !4880)
!5010 = !DILocation(line: 1780, column: 16, scope: !4880)
!5011 = !DILocation(line: 1780, column: 3, scope: !4880)
!5012 = !DILocation(line: 1781, column: 16, scope: !4880)
!5013 = !DILocation(line: 1781, column: 3, scope: !4880)
!5014 = !DILocation(line: 1783, column: 7, scope: !5015)
!5015 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 1783, column: 7)
!5016 = !DILocation(line: 1783, column: 7, scope: !4880)
!5017 = !DILocation(line: 1784, column: 19, scope: !5015)
!5018 = !DILocation(line: 1784, column: 5, scope: !5015)
!5019 = !DILocation(line: 1785, column: 7, scope: !5020)
!5020 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 1785, column: 7)
!5021 = !DILocation(line: 1785, column: 7, scope: !4880)
!5022 = !DILocation(line: 1786, column: 19, scope: !5020)
!5023 = !DILocation(line: 1786, column: 5, scope: !5020)
!5024 = !DILocation(line: 1789, column: 3, scope: !4880)
!5025 = !DILocation(line: 1791, column: 3, scope: !4880)
!5026 = !DILocation(line: 1793, column: 3, scope: !4880)
!5027 = !DILocation(line: 1793, column: 13, scope: !4880)
!5028 = !DILocation(line: 1793, column: 17, scope: !4880)
!5029 = !DILocation(line: 1796, column: 36, scope: !4880)
!5030 = !DILocation(line: 1796, column: 3, scope: !4880)
!5031 = !DILocation(line: 1796, column: 13, scope: !4880)
!5032 = !DILocation(line: 1796, column: 19, scope: !4880)
!5033 = !DILocation(line: 1796, column: 29, scope: !4880)
!5034 = !DILocation(line: 1796, column: 17, scope: !4880)
!5035 = !DILocation(line: 1796, column: 34, scope: !4880)
!5036 = !DILocation(line: 1797, column: 3, scope: !4880)
!5037 = !DILocation(line: 1798, column: 16, scope: !4880)
!5038 = !DILocation(line: 1798, column: 3, scope: !4880)
!5039 = !DILocation(line: 1799, column: 3, scope: !4880)
!5040 = !DILocation(line: 1807, column: 25, scope: !4880)
!5041 = !DILocation(line: 1807, column: 10, scope: !4880)
!5042 = !DILocation(line: 1807, column: 8, scope: !4880)
!5043 = !DILocation(line: 1808, column: 25, scope: !4880)
!5044 = !DILocation(line: 1808, column: 10, scope: !4880)
!5045 = !DILocation(line: 1808, column: 8, scope: !4880)
!5046 = !DILocation(line: 1810, column: 32, scope: !4880)
!5047 = !DILocation(line: 1810, column: 48, scope: !4880)
!5048 = !DILocation(line: 1810, column: 15, scope: !4880)
!5049 = !DILocation(line: 1810, column: 13, scope: !4880)
!5050 = !DILocation(line: 1811, column: 32, scope: !4880)
!5051 = !DILocation(line: 1811, column: 48, scope: !4880)
!5052 = !DILocation(line: 1811, column: 15, scope: !4880)
!5053 = !DILocation(line: 1811, column: 13, scope: !4880)
!5054 = !DILocation(line: 1815, column: 3, scope: !4880)
!5055 = !DILocation(line: 1816, column: 3, scope: !4880)
!5056 = !DILocation(line: 1818, column: 16, scope: !4880)
!5057 = !DILocation(line: 1818, column: 22, scope: !4880)
!5058 = !DILocation(line: 1818, column: 33, scope: !4880)
!5059 = !DILocation(line: 1818, column: 32, scope: !4880)
!5060 = !DILocation(line: 1818, column: 40, scope: !4880)
!5061 = !DILocation(line: 1818, column: 39, scope: !4880)
!5062 = !DILocation(line: 1818, column: 3, scope: !4880)
!5063 = !DILocation(line: 1822, column: 7, scope: !5064)
!5064 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 1822, column: 7)
!5065 = !DILocation(line: 1822, column: 7, scope: !4880)
!5066 = !DILocation(line: 1824, column: 38, scope: !5067)
!5067 = distinct !DILexicalBlock(scope: !5064, file: !3, line: 1823, column: 5)
!5068 = !DILocation(line: 1824, column: 7, scope: !5067)
!5069 = !DILocation(line: 1824, column: 17, scope: !5067)
!5070 = !DILocation(line: 1824, column: 21, scope: !5067)
!5071 = !DILocation(line: 1824, column: 31, scope: !5067)
!5072 = !DILocation(line: 1824, column: 36, scope: !5067)
!5073 = !DILocation(line: 1825, column: 7, scope: !5067)
!5074 = !DILocation(line: 1826, column: 20, scope: !5067)
!5075 = !DILocation(line: 1826, column: 7, scope: !5067)
!5076 = !DILocation(line: 1827, column: 5, scope: !5067)
!5077 = !DILocation(line: 1829, column: 16, scope: !4880)
!5078 = !DILocation(line: 1829, column: 3, scope: !4880)
!5079 = !DILocation(line: 1830, column: 16, scope: !4880)
!5080 = !DILocation(line: 1830, column: 3, scope: !4880)
!5081 = !DILocation(line: 1831, column: 3, scope: !4880)
!5082 = !DILocation(line: 1839, column: 25, scope: !4880)
!5083 = !DILocation(line: 1839, column: 10, scope: !4880)
!5084 = !DILocation(line: 1839, column: 8, scope: !4880)
!5085 = !DILocation(line: 1840, column: 25, scope: !4880)
!5086 = !DILocation(line: 1840, column: 10, scope: !4880)
!5087 = !DILocation(line: 1840, column: 8, scope: !4880)
!5088 = !DILocation(line: 1844, column: 7, scope: !5089)
!5089 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 1844, column: 7)
!5090 = !DILocation(line: 1844, column: 7, scope: !4880)
!5091 = !DILocation(line: 1846, column: 42, scope: !5092)
!5092 = distinct !DILexicalBlock(scope: !5089, file: !3, line: 1845, column: 5)
!5093 = !DILocation(line: 1846, column: 7, scope: !5092)
!5094 = !DILocation(line: 1846, column: 17, scope: !5092)
!5095 = !DILocation(line: 1846, column: 21, scope: !5092)
!5096 = !DILocation(line: 1846, column: 31, scope: !5092)
!5097 = !DILocation(line: 1846, column: 35, scope: !5092)
!5098 = !DILocation(line: 1846, column: 40, scope: !5092)
!5099 = !DILocation(line: 1847, column: 7, scope: !5092)
!5100 = !DILocation(line: 1848, column: 20, scope: !5092)
!5101 = !DILocation(line: 1848, column: 7, scope: !5092)
!5102 = !DILocation(line: 1849, column: 5, scope: !5092)
!5103 = !DILocation(line: 1851, column: 16, scope: !4880)
!5104 = !DILocation(line: 1851, column: 3, scope: !4880)
!5105 = !DILocation(line: 1852, column: 16, scope: !4880)
!5106 = !DILocation(line: 1852, column: 3, scope: !4880)
!5107 = !DILocation(line: 1853, column: 3, scope: !4880)
!5108 = !DILocation(line: 1859, column: 25, scope: !4880)
!5109 = !DILocation(line: 1859, column: 10, scope: !4880)
!5110 = !DILocation(line: 1859, column: 8, scope: !4880)
!5111 = !DILocation(line: 1860, column: 25, scope: !4880)
!5112 = !DILocation(line: 1860, column: 10, scope: !4880)
!5113 = !DILocation(line: 1860, column: 8, scope: !4880)
!5114 = !DILocation(line: 1862, column: 16, scope: !4880)
!5115 = !DILocation(line: 1862, column: 3, scope: !4880)
!5116 = !DILocation(line: 1863, column: 16, scope: !4880)
!5117 = !DILocation(line: 1863, column: 3, scope: !4880)
!5118 = !DILocation(line: 1864, column: 3, scope: !4880)
!5119 = !DILocation(line: 1870, column: 13, scope: !4880)
!5120 = !DILocation(line: 1870, column: 11, scope: !4880)
!5121 = !DILocation(line: 1871, column: 3, scope: !4880)
!5122 = !DILocation(line: 1872, column: 3, scope: !4880)
!5123 = !DILocation(line: 1880, column: 13, scope: !4880)
!5124 = !DILocation(line: 1880, column: 11, scope: !4880)
!5125 = !DILocation(line: 1881, column: 3, scope: !4880)
!5126 = !DILocation(line: 1883, column: 26, scope: !4880)
!5127 = !DILocation(line: 1883, column: 32, scope: !4880)
!5128 = !DILocation(line: 1883, column: 42, scope: !4880)
!5129 = !DILocation(line: 1883, column: 3, scope: !4880)
!5130 = !DILocation(line: 1884, column: 3, scope: !4880)
!5131 = !DILocation(line: 1887, column: 3, scope: !4880)
!5132 = !DILocation(line: 1888, column: 8, scope: !4880)
!5133 = !DILocation(line: 1889, column: 6, scope: !4546)
!5134 = !DILocation(line: 1894, column: 28, scope: !4546)
!5135 = !DILocation(line: 1894, column: 13, scope: !4546)
!5136 = !DILocation(line: 1894, column: 11, scope: !4546)
!5137 = !DILocation(line: 1895, column: 28, scope: !4546)
!5138 = !DILocation(line: 1895, column: 13, scope: !4546)
!5139 = !DILocation(line: 1895, column: 11, scope: !4546)
!5140 = !DILocation(line: 1897, column: 35, scope: !4546)
!5141 = !DILocation(line: 1897, column: 51, scope: !4546)
!5142 = !DILocation(line: 1897, column: 18, scope: !4546)
!5143 = !DILocation(line: 1897, column: 16, scope: !4546)
!5144 = !DILocation(line: 1898, column: 35, scope: !4546)
!5145 = !DILocation(line: 1898, column: 51, scope: !4546)
!5146 = !DILocation(line: 1898, column: 18, scope: !4546)
!5147 = !DILocation(line: 1898, column: 16, scope: !4546)
!5148 = !DILocation(line: 1905, column: 27, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1905, column: 10)
!5150 = !DILocation(line: 1905, column: 38, scope: !5149)
!5151 = !DILocation(line: 1905, column: 37, scope: !5149)
!5152 = !DILocation(line: 1905, column: 10, scope: !5149)
!5153 = !DILocation(line: 1905, column: 44, scope: !5149)
!5154 = !DILocation(line: 1906, column: 3, scope: !5149)
!5155 = !DILocation(line: 1906, column: 6, scope: !5149)
!5156 = !DILocation(line: 1906, column: 23, scope: !5149)
!5157 = !DILocation(line: 1906, column: 33, scope: !5149)
!5158 = !DILocation(line: 1906, column: 37, scope: !5149)
!5159 = !DILocation(line: 1906, column: 47, scope: !5149)
!5160 = !DILocation(line: 1906, column: 20, scope: !5149)
!5161 = !DILocation(line: 1905, column: 10, scope: !4546)
!5162 = !DILocation(line: 1911, column: 8, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5164, file: !3, line: 1911, column: 7)
!5164 = distinct !DILexicalBlock(scope: !5149, file: !3, line: 1907, column: 8)
!5165 = !DILocation(line: 1911, column: 25, scope: !5163)
!5166 = !DILocation(line: 1911, column: 35, scope: !5163)
!5167 = !DILocation(line: 1911, column: 39, scope: !5163)
!5168 = !DILocation(line: 1911, column: 49, scope: !5163)
!5169 = !DILocation(line: 1911, column: 22, scope: !5163)
!5170 = !DILocation(line: 1912, column: 8, scope: !5163)
!5171 = !DILocation(line: 1912, column: 11, scope: !5163)
!5172 = !DILocation(line: 1913, column: 7, scope: !5163)
!5173 = !DILocation(line: 1913, column: 11, scope: !5163)
!5174 = !DILocation(line: 1913, column: 28, scope: !5163)
!5175 = !DILocation(line: 1913, column: 38, scope: !5163)
!5176 = !DILocation(line: 1913, column: 42, scope: !5163)
!5177 = !DILocation(line: 1913, column: 52, scope: !5163)
!5178 = !DILocation(line: 1913, column: 25, scope: !5163)
!5179 = !DILocation(line: 1914, column: 4, scope: !5163)
!5180 = !DILocation(line: 1914, column: 7, scope: !5163)
!5181 = !DILocation(line: 1911, column: 7, scope: !5164)
!5182 = !DILocalVariable(name: "idx1", scope: !5183, file: !3, line: 1916, type: !886)
!5183 = distinct !DILexicalBlock(scope: !5163, file: !3, line: 1915, column: 5)
!5184 = !DILocation(line: 1916, column: 11, scope: !5183)
!5185 = !DILocation(line: 1916, column: 36, scope: !5183)
!5186 = !DILocation(line: 1916, column: 47, scope: !5183)
!5187 = !DILocation(line: 1916, column: 46, scope: !5183)
!5188 = !DILocation(line: 1916, column: 19, scope: !5183)
!5189 = !DILocation(line: 1917, column: 5, scope: !5183)
!5190 = !DILocalVariable(name: "idx2", scope: !5183, file: !3, line: 1918, type: !886)
!5191 = !DILocation(line: 1918, column: 11, scope: !5183)
!5192 = !DILocation(line: 1918, column: 36, scope: !5183)
!5193 = !DILocation(line: 1918, column: 47, scope: !5183)
!5194 = !DILocation(line: 1918, column: 46, scope: !5183)
!5195 = !DILocation(line: 1918, column: 19, scope: !5183)
!5196 = !DILocation(line: 1919, column: 5, scope: !5183)
!5197 = !DILocation(line: 1923, column: 45, scope: !5183)
!5198 = !DILocation(line: 1923, column: 7, scope: !5183)
!5199 = !DILocation(line: 1923, column: 17, scope: !5183)
!5200 = !DILocation(line: 1923, column: 21, scope: !5183)
!5201 = !DILocation(line: 1923, column: 31, scope: !5183)
!5202 = !DILocation(line: 1923, column: 37, scope: !5183)
!5203 = !DILocation(line: 1923, column: 35, scope: !5183)
!5204 = !DILocation(line: 1923, column: 43, scope: !5183)
!5205 = !DILocation(line: 1924, column: 45, scope: !5183)
!5206 = !DILocation(line: 1924, column: 7, scope: !5183)
!5207 = !DILocation(line: 1924, column: 17, scope: !5183)
!5208 = !DILocation(line: 1924, column: 21, scope: !5183)
!5209 = !DILocation(line: 1924, column: 31, scope: !5183)
!5210 = !DILocation(line: 1924, column: 37, scope: !5183)
!5211 = !DILocation(line: 1924, column: 35, scope: !5183)
!5212 = !DILocation(line: 1924, column: 43, scope: !5183)
!5213 = !DILocation(line: 1928, column: 7, scope: !5183)
!5214 = !DILocation(line: 1930, column: 5, scope: !5183)
!5215 = !DILocation(line: 1932, column: 28, scope: !5163)
!5216 = !DILocation(line: 1932, column: 34, scope: !5163)
!5217 = !DILocation(line: 1932, column: 45, scope: !5163)
!5218 = !DILocation(line: 1932, column: 44, scope: !5163)
!5219 = !DILocation(line: 1932, column: 12, scope: !5163)
!5220 = !DILocation(line: 1933, column: 8, scope: !5164)
!5221 = !DILocalVariable(name: "src_note", scope: !5222, file: !3, line: 1936, type: !5223)
!5222 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1935, column: 6)
!5223 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1028, size: 192, elements: !1153)
!5224 = !DILocation(line: 1936, column: 12, scope: !5222)
!5225 = !DILocalVariable(name: "i", scope: !5222, file: !3, line: 1937, type: !886)
!5226 = !DILocation(line: 1937, column: 12, scope: !5222)
!5227 = !DILocation(line: 1939, column: 8, scope: !5222)
!5228 = !DILocation(line: 1939, column: 20, scope: !5222)
!5229 = !DILocation(line: 1940, column: 22, scope: !5222)
!5230 = !DILocation(line: 1940, column: 8, scope: !5222)
!5231 = !DILocation(line: 1940, column: 20, scope: !5222)
!5232 = !DILocation(line: 1941, column: 22, scope: !5222)
!5233 = !DILocation(line: 1941, column: 8, scope: !5222)
!5234 = !DILocation(line: 1941, column: 20, scope: !5222)
!5235 = !DILocation(line: 1943, column: 12, scope: !5236)
!5236 = distinct !DILexicalBlock(scope: !5222, file: !3, line: 1943, column: 12)
!5237 = !DILocation(line: 1943, column: 12, scope: !5222)
!5238 = !DILocation(line: 1944, column: 16, scope: !5236)
!5239 = !DILocation(line: 1944, column: 39, scope: !5236)
!5240 = !DILocation(line: 1944, column: 50, scope: !5236)
!5241 = !DILocation(line: 1944, column: 49, scope: !5236)
!5242 = !DILocation(line: 1944, column: 22, scope: !5236)
!5243 = !DILocation(line: 1944, column: 3, scope: !5236)
!5244 = !DILocation(line: 1945, column: 12, scope: !5245)
!5245 = distinct !DILexicalBlock(scope: !5222, file: !3, line: 1945, column: 12)
!5246 = !DILocation(line: 1945, column: 12, scope: !5222)
!5247 = !DILocation(line: 1946, column: 16, scope: !5245)
!5248 = !DILocation(line: 1946, column: 39, scope: !5245)
!5249 = !DILocation(line: 1946, column: 50, scope: !5245)
!5250 = !DILocation(line: 1946, column: 49, scope: !5245)
!5251 = !DILocation(line: 1946, column: 22, scope: !5245)
!5252 = !DILocation(line: 1946, column: 3, scope: !5245)
!5253 = !DILocation(line: 1948, column: 15, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5222, file: !3, line: 1948, column: 8)
!5255 = !DILocation(line: 1948, column: 13, scope: !5254)
!5256 = !DILocation(line: 1948, column: 20, scope: !5257)
!5257 = distinct !DILexicalBlock(scope: !5254, file: !3, line: 1948, column: 8)
!5258 = !DILocation(line: 1948, column: 22, scope: !5257)
!5259 = !DILocation(line: 1948, column: 8, scope: !5254)
!5260 = !DILocation(line: 1949, column: 17, scope: !5261)
!5261 = distinct !DILexicalBlock(scope: !5257, file: !3, line: 1949, column: 7)
!5262 = !DILocation(line: 1949, column: 7, scope: !5261)
!5263 = !DILocation(line: 1949, column: 7, scope: !5257)
!5264 = !DILocalVariable(name: "regno", scope: !5265, file: !3, line: 1951, type: !886)
!5265 = distinct !DILexicalBlock(scope: !5261, file: !3, line: 1950, column: 5)
!5266 = !DILocation(line: 1951, column: 11, scope: !5265)
!5267 = !DILocation(line: 1951, column: 19, scope: !5265)
!5268 = !DILocation(line: 1957, column: 7, scope: !5265)
!5269 = !DILocation(line: 1958, column: 26, scope: !5265)
!5270 = !DILocation(line: 1958, column: 42, scope: !5265)
!5271 = !DILocation(line: 1958, column: 7, scope: !5265)
!5272 = !DILocation(line: 1959, column: 22, scope: !5265)
!5273 = !DILocation(line: 1959, column: 28, scope: !5265)
!5274 = !DILocation(line: 1959, column: 38, scope: !5265)
!5275 = !DILocation(line: 1959, column: 7, scope: !5265)
!5276 = !DILocation(line: 1961, column: 5, scope: !5265)
!5277 = !DILocation(line: 1949, column: 18, scope: !5261)
!5278 = !DILocation(line: 1948, column: 29, scope: !5257)
!5279 = !DILocation(line: 1948, column: 8, scope: !5257)
!5280 = distinct !{!5280, !5259, !5281}
!5281 = !DILocation(line: 1961, column: 5, scope: !5254)
!5282 = !DILocation(line: 1966, column: 27, scope: !5283)
!5283 = distinct !DILexicalBlock(scope: !4546, file: !3, line: 1966, column: 10)
!5284 = !DILocation(line: 1966, column: 38, scope: !5283)
!5285 = !DILocation(line: 1966, column: 37, scope: !5283)
!5286 = !DILocation(line: 1966, column: 10, scope: !5283)
!5287 = !DILocation(line: 1966, column: 44, scope: !5283)
!5288 = !DILocation(line: 1966, column: 10, scope: !4546)
!5289 = !DILocation(line: 1967, column: 41, scope: !5283)
!5290 = !DILocation(line: 1967, column: 8, scope: !5283)
!5291 = !DILocation(line: 1967, column: 18, scope: !5283)
!5292 = !DILocation(line: 1967, column: 24, scope: !5283)
!5293 = !DILocation(line: 1967, column: 34, scope: !5283)
!5294 = !DILocation(line: 1967, column: 22, scope: !5283)
!5295 = !DILocation(line: 1967, column: 39, scope: !5283)
!5296 = !DILocation(line: 1968, column: 6, scope: !4546)
!5297 = !DILocation(line: 1969, column: 19, scope: !4546)
!5298 = !DILocation(line: 1969, column: 6, scope: !4546)
!5299 = !DILocation(line: 1970, column: 6, scope: !4546)
!5300 = !DILocation(line: 1973, column: 6, scope: !4546)
!5301 = !DILocation(line: 1974, column: 4, scope: !4546)
!5302 = !DILocation(line: 1975, column: 2, scope: !4506)
!5303 = !DILocation(line: 1979, column: 7, scope: !4386)
!5304 = !DILocation(line: 1982, column: 10, scope: !4368)
!5305 = !DILocation(line: 1982, column: 3, scope: !4368)
!5306 = !DILocation(line: 1983, column: 1, scope: !4368)
!5307 = distinct !DISubprogram(name: "emit_pop_insn", scope: !3, file: !3, line: 748, type: !5308, scopeLine: 749, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!5308 = !DISubroutineType(types: !5309)
!5309 = !{!1028, !1028, !2004, !1028, !806}
!5310 = !DILocalVariable(name: "insn", arg: 1, scope: !5307, file: !3, line: 748, type: !1028)
!5311 = !DILocation(line: 748, column: 20, scope: !5307)
!5312 = !DILocalVariable(name: "regstack", arg: 2, scope: !5307, file: !3, line: 748, type: !2004)
!5313 = !DILocation(line: 748, column: 32, scope: !5307)
!5314 = !DILocalVariable(name: "reg", arg: 3, scope: !5307, file: !3, line: 748, type: !1028)
!5315 = !DILocation(line: 748, column: 46, scope: !5307)
!5316 = !DILocalVariable(name: "where", arg: 4, scope: !5307, file: !3, line: 748, type: !806)
!5317 = !DILocation(line: 748, column: 67, scope: !5307)
!5318 = !DILocalVariable(name: "pop_insn", scope: !5307, file: !3, line: 750, type: !1028)
!5319 = !DILocation(line: 750, column: 7, scope: !5307)
!5320 = !DILocalVariable(name: "pop_rtx", scope: !5307, file: !3, line: 750, type: !1028)
!5321 = !DILocation(line: 750, column: 17, scope: !5307)
!5322 = !DILocalVariable(name: "hard_regno", scope: !5307, file: !3, line: 751, type: !886)
!5323 = !DILocation(line: 751, column: 7, scope: !5307)
!5324 = !DILocation(line: 755, column: 7, scope: !5325)
!5325 = distinct !DILexicalBlock(scope: !5307, file: !3, line: 755, column: 7)
!5326 = !DILocation(line: 755, column: 7, scope: !5307)
!5327 = !DILocalVariable(name: "reg1", scope: !5328, file: !3, line: 757, type: !1028)
!5328 = distinct !DILexicalBlock(scope: !5325, file: !3, line: 756, column: 5)
!5329 = !DILocation(line: 757, column: 11, scope: !5328)
!5330 = !DILocation(line: 757, column: 18, scope: !5328)
!5331 = !DILocalVariable(name: "reg2", scope: !5328, file: !3, line: 758, type: !1028)
!5332 = !DILocation(line: 758, column: 11, scope: !5328)
!5333 = !DILocation(line: 758, column: 18, scope: !5328)
!5334 = !DILocation(line: 760, column: 16, scope: !5328)
!5335 = !DILocation(line: 761, column: 28, scope: !5336)
!5336 = distinct !DILexicalBlock(scope: !5328, file: !3, line: 761, column: 11)
!5337 = !DILocation(line: 761, column: 38, scope: !5336)
!5338 = !DILocation(line: 761, column: 11, scope: !5336)
!5339 = !DILocation(line: 761, column: 44, scope: !5336)
!5340 = !DILocation(line: 761, column: 11, scope: !5328)
!5341 = !DILocation(line: 762, column: 28, scope: !5336)
!5342 = !DILocation(line: 762, column: 34, scope: !5336)
!5343 = !DILocation(line: 762, column: 44, scope: !5336)
!5344 = !DILocation(line: 762, column: 50, scope: !5336)
!5345 = !DILocation(line: 762, column: 13, scope: !5336)
!5346 = !DILocation(line: 762, column: 11, scope: !5336)
!5347 = !DILocation(line: 762, column: 2, scope: !5336)
!5348 = !DILocation(line: 763, column: 28, scope: !5349)
!5349 = distinct !DILexicalBlock(scope: !5328, file: !3, line: 763, column: 11)
!5350 = !DILocation(line: 763, column: 38, scope: !5349)
!5351 = !DILocation(line: 763, column: 11, scope: !5349)
!5352 = !DILocation(line: 763, column: 44, scope: !5349)
!5353 = !DILocation(line: 763, column: 11, scope: !5328)
!5354 = !DILocation(line: 764, column: 28, scope: !5349)
!5355 = !DILocation(line: 764, column: 34, scope: !5349)
!5356 = !DILocation(line: 764, column: 44, scope: !5349)
!5357 = !DILocation(line: 764, column: 50, scope: !5349)
!5358 = !DILocation(line: 764, column: 13, scope: !5349)
!5359 = !DILocation(line: 764, column: 11, scope: !5349)
!5360 = !DILocation(line: 764, column: 2, scope: !5349)
!5361 = !DILocation(line: 765, column: 7, scope: !5328)
!5362 = !DILocation(line: 766, column: 14, scope: !5328)
!5363 = !DILocation(line: 766, column: 7, scope: !5328)
!5364 = !DILocation(line: 769, column: 33, scope: !5307)
!5365 = !DILocation(line: 769, column: 43, scope: !5307)
!5366 = !DILocation(line: 769, column: 16, scope: !5307)
!5367 = !DILocation(line: 769, column: 14, scope: !5307)
!5368 = !DILocation(line: 771, column: 3, scope: !5307)
!5369 = !DILocation(line: 773, column: 13, scope: !5307)
!5370 = !DILocation(line: 773, column: 11, scope: !5307)
!5371 = !DILocation(line: 776, column: 7, scope: !5372)
!5372 = distinct !DILexicalBlock(scope: !5307, file: !3, line: 776, column: 7)
!5373 = !DILocation(line: 776, column: 13, scope: !5372)
!5374 = !DILocation(line: 776, column: 7, scope: !5307)
!5375 = !DILocation(line: 777, column: 33, scope: !5372)
!5376 = !DILocation(line: 777, column: 42, scope: !5372)
!5377 = !DILocation(line: 777, column: 16, scope: !5372)
!5378 = !DILocation(line: 777, column: 14, scope: !5372)
!5379 = !DILocation(line: 777, column: 5, scope: !5372)
!5380 = !DILocation(line: 779, column: 34, scope: !5372)
!5381 = !DILocation(line: 779, column: 43, scope: !5372)
!5382 = !DILocation(line: 779, column: 16, scope: !5372)
!5383 = !DILocation(line: 779, column: 14, scope: !5372)
!5384 = !DILocation(line: 781, column: 17, scope: !5307)
!5385 = !DILocation(line: 781, column: 37, scope: !5307)
!5386 = !DILocation(line: 781, column: 3, scope: !5307)
!5387 = !DILocation(line: 784, column: 7, scope: !5307)
!5388 = !DILocation(line: 784, column: 17, scope: !5307)
!5389 = !DILocation(line: 784, column: 21, scope: !5307)
!5390 = !DILocation(line: 784, column: 31, scope: !5307)
!5391 = !DILocation(line: 783, column: 3, scope: !5307)
!5392 = !DILocation(line: 783, column: 13, scope: !5307)
!5393 = !DILocation(line: 783, column: 17, scope: !5307)
!5394 = !DILocation(line: 783, column: 27, scope: !5307)
!5395 = !DILocation(line: 783, column: 34, scope: !5307)
!5396 = !DILocation(line: 783, column: 45, scope: !5307)
!5397 = !DILocation(line: 783, column: 31, scope: !5307)
!5398 = !DILocation(line: 784, column: 5, scope: !5307)
!5399 = !DILocation(line: 785, column: 3, scope: !5307)
!5400 = !DILocation(line: 785, column: 13, scope: !5307)
!5401 = !DILocation(line: 785, column: 17, scope: !5307)
!5402 = !DILocation(line: 786, column: 3, scope: !5307)
!5403 = !DILocation(line: 788, column: 10, scope: !5307)
!5404 = !DILocation(line: 788, column: 3, scope: !5307)
!5405 = !DILocation(line: 789, column: 1, scope: !5307)
!5406 = distinct !DISubprogram(name: "change_stack", scope: !3, file: !3, line: 2391, type: !5407, scopeLine: 2392, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!5407 = !DISubroutineType(types: !5408)
!5408 = !{null, !1028, !2004, !2004, !806}
!5409 = !DILocalVariable(name: "insn", arg: 1, scope: !5406, file: !3, line: 2391, type: !1028)
!5410 = !DILocation(line: 2391, column: 19, scope: !5406)
!5411 = !DILocalVariable(name: "old", arg: 2, scope: !5406, file: !3, line: 2391, type: !2004)
!5412 = !DILocation(line: 2391, column: 31, scope: !5406)
!5413 = !DILocalVariable(name: "new_stack", arg: 3, scope: !5406, file: !3, line: 2391, type: !2004)
!5414 = !DILocation(line: 2391, column: 42, scope: !5406)
!5415 = !DILocalVariable(name: "where", arg: 4, scope: !5406, file: !3, line: 2391, type: !806)
!5416 = !DILocation(line: 2391, column: 69, scope: !5406)
!5417 = !DILocalVariable(name: "reg", scope: !5406, file: !3, line: 2393, type: !886)
!5418 = !DILocation(line: 2393, column: 7, scope: !5406)
!5419 = !DILocalVariable(name: "update_end", scope: !5406, file: !3, line: 2394, type: !886)
!5420 = !DILocation(line: 2394, column: 7, scope: !5406)
!5421 = !DILocalVariable(name: "i", scope: !5406, file: !3, line: 2395, type: !886)
!5422 = !DILocation(line: 2395, column: 7, scope: !5406)
!5423 = !DILocation(line: 2400, column: 7, scope: !5424)
!5424 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 2400, column: 7)
!5425 = !DILocation(line: 2401, column: 7, scope: !5424)
!5426 = !DILocation(line: 2401, column: 10, scope: !5424)
!5427 = !DILocation(line: 2402, column: 7, scope: !5424)
!5428 = !DILocation(line: 2402, column: 10, scope: !5424)
!5429 = !DILocation(line: 2402, column: 16, scope: !5424)
!5430 = !DILocation(line: 2400, column: 7, scope: !5406)
!5431 = !DILocation(line: 2404, column: 7, scope: !5432)
!5432 = distinct !DILexicalBlock(scope: !5424, file: !3, line: 2403, column: 5)
!5433 = !DILocation(line: 2404, column: 35, scope: !5432)
!5434 = !DILocation(line: 2404, column: 47, scope: !5432)
!5435 = !DILocation(line: 2404, column: 46, scope: !5432)
!5436 = !DILocation(line: 2405, column: 24, scope: !5432)
!5437 = !DILocation(line: 2406, column: 8, scope: !5432)
!5438 = !DILocation(line: 2406, column: 15, scope: !5432)
!5439 = !DILocation(line: 2406, column: 14, scope: !5432)
!5440 = !DILocation(line: 2407, column: 7, scope: !5432)
!5441 = !DILocation(line: 2413, column: 7, scope: !5442)
!5442 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 2413, column: 7)
!5443 = !DILocation(line: 2413, column: 13, scope: !5442)
!5444 = !DILocation(line: 2413, column: 7, scope: !5406)
!5445 = !DILocation(line: 2415, column: 11, scope: !5446)
!5446 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 2415, column: 11)
!5447 = distinct !DILexicalBlock(scope: !5442, file: !3, line: 2414, column: 5)
!5448 = !DILocation(line: 2415, column: 25, scope: !5446)
!5449 = !DILocation(line: 2415, column: 28, scope: !5446)
!5450 = !DILocation(line: 2415, column: 54, scope: !5446)
!5451 = !DILocation(line: 2415, column: 51, scope: !5446)
!5452 = !DILocation(line: 2415, column: 11, scope: !5447)
!5453 = !DILocation(line: 2416, column: 13, scope: !5446)
!5454 = !DILocation(line: 2416, column: 2, scope: !5446)
!5455 = !DILocation(line: 2417, column: 14, scope: !5447)
!5456 = !DILocation(line: 2417, column: 12, scope: !5447)
!5457 = !DILocation(line: 2418, column: 5, scope: !5447)
!5458 = !DILocation(line: 2421, column: 10, scope: !5459)
!5459 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 2421, column: 3)
!5460 = !DILocation(line: 2421, column: 8, scope: !5459)
!5461 = !DILocation(line: 2421, column: 29, scope: !5462)
!5462 = distinct !DILexicalBlock(scope: !5459, file: !3, line: 2421, column: 3)
!5463 = !DILocation(line: 2421, column: 31, scope: !5462)
!5464 = !DILocation(line: 2421, column: 3, scope: !5459)
!5465 = !DILocation(line: 2422, column: 9, scope: !5466)
!5466 = distinct !DILexicalBlock(scope: !5462, file: !3, line: 2422, column: 9)
!5467 = !DILocation(line: 2423, column: 2, scope: !5466)
!5468 = !DILocation(line: 2423, column: 6, scope: !5466)
!5469 = !DILocation(line: 2422, column: 9, scope: !5462)
!5470 = !DILocation(line: 2425, column: 25, scope: !5471)
!5471 = distinct !DILexicalBlock(scope: !5466, file: !3, line: 2424, column: 7)
!5472 = !DILocation(line: 2425, column: 2, scope: !5471)
!5473 = !DILocation(line: 2425, column: 7, scope: !5471)
!5474 = !DILocation(line: 2425, column: 13, scope: !5471)
!5475 = !DILocation(line: 2425, column: 18, scope: !5471)
!5476 = !DILocation(line: 2425, column: 11, scope: !5471)
!5477 = !DILocation(line: 2425, column: 23, scope: !5471)
!5478 = !DILocation(line: 2426, column: 9, scope: !5471)
!5479 = !DILocation(line: 2427, column: 20, scope: !5471)
!5480 = !DILocation(line: 2428, column: 49, scope: !5471)
!5481 = !DILocation(line: 2427, column: 2, scope: !5471)
!5482 = !DILocation(line: 2429, column: 7, scope: !5471)
!5483 = !DILocation(line: 2421, column: 54, scope: !5462)
!5484 = !DILocation(line: 2421, column: 3, scope: !5462)
!5485 = distinct !{!5485, !5464, !5486}
!5486 = !DILocation(line: 2429, column: 7, scope: !5459)
!5487 = !DILocation(line: 2436, column: 7, scope: !5488)
!5488 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 2436, column: 7)
!5489 = !DILocation(line: 2436, column: 18, scope: !5488)
!5490 = !DILocation(line: 2436, column: 22, scope: !5488)
!5491 = !DILocation(line: 2436, column: 7, scope: !5406)
!5492 = !DILocalVariable(name: "slots", scope: !5493, file: !3, line: 2438, type: !917)
!5493 = distinct !DILexicalBlock(scope: !5488, file: !3, line: 2437, column: 5)
!5494 = !DILocation(line: 2438, column: 12, scope: !5493)
!5495 = !DILocalVariable(name: "pops", scope: !5493, file: !3, line: 2439, type: !5496)
!5496 = !DICompositeType(tag: DW_TAG_array_type, baseType: !886, size: 256, elements: !919)
!5497 = !DILocation(line: 2439, column: 11, scope: !5493)
!5498 = !DILocalVariable(name: "next", scope: !5493, file: !3, line: 2440, type: !886)
!5499 = !DILocation(line: 2440, column: 11, scope: !5493)
!5500 = !DILocalVariable(name: "dest", scope: !5493, file: !3, line: 2440, type: !886)
!5501 = !DILocation(line: 2440, column: 17, scope: !5493)
!5502 = !DILocalVariable(name: "topsrc", scope: !5493, file: !3, line: 2440, type: !886)
!5503 = !DILocation(line: 2440, column: 23, scope: !5493)
!5504 = !DILocation(line: 2443, column: 16, scope: !5505)
!5505 = distinct !DILexicalBlock(scope: !5493, file: !3, line: 2443, column: 7)
!5506 = !DILocation(line: 2443, column: 12, scope: !5505)
!5507 = !DILocation(line: 2443, column: 21, scope: !5508)
!5508 = distinct !DILexicalBlock(scope: !5505, file: !3, line: 2443, column: 7)
!5509 = !DILocation(line: 2443, column: 28, scope: !5508)
!5510 = !DILocation(line: 2443, column: 39, scope: !5508)
!5511 = !DILocation(line: 2443, column: 25, scope: !5508)
!5512 = !DILocation(line: 2443, column: 7, scope: !5505)
!5513 = !DILocation(line: 2444, column: 15, scope: !5508)
!5514 = !DILocation(line: 2444, column: 8, scope: !5508)
!5515 = !DILocation(line: 2444, column: 2, scope: !5508)
!5516 = !DILocation(line: 2444, column: 13, scope: !5508)
!5517 = !DILocation(line: 2443, column: 47, scope: !5508)
!5518 = !DILocation(line: 2443, column: 7, scope: !5508)
!5519 = distinct !{!5519, !5512, !5520}
!5520 = !DILocation(line: 2444, column: 15, scope: !5505)
!5521 = !DILocation(line: 2447, column: 14, scope: !5493)
!5522 = !DILocation(line: 2448, column: 18, scope: !5523)
!5523 = distinct !DILexicalBlock(scope: !5493, file: !3, line: 2448, column: 7)
!5524 = !DILocation(line: 2448, column: 23, scope: !5523)
!5525 = !DILocation(line: 2448, column: 16, scope: !5523)
!5526 = !DILocation(line: 2448, column: 12, scope: !5523)
!5527 = !DILocation(line: 2448, column: 28, scope: !5528)
!5528 = distinct !DILexicalBlock(scope: !5523, file: !3, line: 2448, column: 7)
!5529 = !DILocation(line: 2448, column: 34, scope: !5528)
!5530 = !DILocation(line: 2448, column: 45, scope: !5528)
!5531 = !DILocation(line: 2448, column: 32, scope: !5528)
!5532 = !DILocation(line: 2448, column: 7, scope: !5523)
!5533 = !DILocation(line: 2449, column: 6, scope: !5534)
!5534 = distinct !DILexicalBlock(scope: !5528, file: !3, line: 2449, column: 6)
!5535 = !DILocation(line: 2449, column: 6, scope: !5528)
!5536 = !DILocation(line: 2451, column: 11, scope: !5537)
!5537 = distinct !DILexicalBlock(scope: !5534, file: !3, line: 2450, column: 4)
!5538 = !DILocation(line: 2452, column: 16, scope: !5539)
!5539 = distinct !DILexicalBlock(scope: !5537, file: !3, line: 2452, column: 6)
!5540 = !DILocation(line: 2452, column: 11, scope: !5539)
!5541 = !DILocation(line: 2452, column: 21, scope: !5542)
!5542 = distinct !DILexicalBlock(scope: !5539, file: !3, line: 2452, column: 6)
!5543 = !DILocation(line: 2452, column: 29, scope: !5542)
!5544 = !DILocation(line: 2452, column: 40, scope: !5542)
!5545 = !DILocation(line: 2452, column: 26, scope: !5542)
!5546 = !DILocation(line: 2452, column: 6, scope: !5539)
!5547 = !DILocation(line: 2453, column: 19, scope: !5548)
!5548 = distinct !DILexicalBlock(scope: !5542, file: !3, line: 2453, column: 12)
!5549 = !DILocation(line: 2453, column: 13, scope: !5548)
!5550 = !DILocation(line: 2453, column: 25, scope: !5548)
!5551 = !DILocation(line: 2453, column: 28, scope: !5548)
!5552 = !DILocation(line: 2453, column: 39, scope: !5548)
!5553 = !DILocation(line: 2453, column: 43, scope: !5548)
!5554 = !DILocation(line: 2453, column: 52, scope: !5548)
!5555 = !DILocation(line: 2453, column: 57, scope: !5548)
!5556 = !DILocation(line: 2453, column: 61, scope: !5548)
!5557 = !DILocation(line: 2453, column: 49, scope: !5548)
!5558 = !DILocation(line: 2453, column: 12, scope: !5542)
!5559 = !DILocation(line: 2457, column: 23, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !5561, file: !3, line: 2457, column: 23)
!5561 = distinct !DILexicalBlock(scope: !5548, file: !3, line: 2454, column: 3)
!5562 = !DILocation(line: 2457, column: 31, scope: !5560)
!5563 = !DILocation(line: 2457, column: 42, scope: !5560)
!5564 = !DILocation(line: 2457, column: 28, scope: !5560)
!5565 = !DILocation(line: 2457, column: 23, scope: !5561)
!5566 = !DILocation(line: 2458, column: 16, scope: !5560)
!5567 = !DILocation(line: 2458, column: 14, scope: !5560)
!5568 = !DILocation(line: 2458, column: 7, scope: !5560)
!5569 = !DILocation(line: 2459, column: 11, scope: !5561)
!5570 = !DILocation(line: 2459, column: 5, scope: !5561)
!5571 = !DILocation(line: 2459, column: 17, scope: !5561)
!5572 = !DILocation(line: 2460, column: 12, scope: !5561)
!5573 = !DILocation(line: 2460, column: 10, scope: !5561)
!5574 = !DILocation(line: 2461, column: 5, scope: !5561)
!5575 = !DILocation(line: 2453, column: 64, scope: !5548)
!5576 = !DILocation(line: 2452, column: 49, scope: !5542)
!5577 = !DILocation(line: 2452, column: 6, scope: !5542)
!5578 = distinct !{!5578, !5546, !5579}
!5579 = !DILocation(line: 2462, column: 3, scope: !5539)
!5580 = !DILocation(line: 2463, column: 18, scope: !5537)
!5581 = !DILocation(line: 2463, column: 11, scope: !5537)
!5582 = !DILocation(line: 2463, column: 6, scope: !5537)
!5583 = !DILocation(line: 2463, column: 16, scope: !5537)
!5584 = !DILocation(line: 2464, column: 4, scope: !5537)
!5585 = !DILocation(line: 2466, column: 16, scope: !5534)
!5586 = !DILocation(line: 2466, column: 9, scope: !5534)
!5587 = !DILocation(line: 2466, column: 4, scope: !5534)
!5588 = !DILocation(line: 2466, column: 14, scope: !5534)
!5589 = !DILocation(line: 2448, column: 53, scope: !5528)
!5590 = !DILocation(line: 2448, column: 7, scope: !5528)
!5591 = distinct !{!5591, !5532, !5592}
!5592 = !DILocation(line: 2466, column: 16, scope: !5523)
!5593 = !DILocation(line: 2473, column: 11, scope: !5594)
!5594 = distinct !DILexicalBlock(scope: !5493, file: !3, line: 2473, column: 11)
!5595 = !DILocation(line: 2473, column: 18, scope: !5594)
!5596 = !DILocation(line: 2473, column: 11, scope: !5493)
!5597 = !DILocation(line: 2474, column: 11, scope: !5598)
!5598 = distinct !DILexicalBlock(scope: !5594, file: !3, line: 2474, column: 2)
!5599 = !DILocation(line: 2474, column: 7, scope: !5598)
!5600 = !DILocation(line: 2474, column: 16, scope: !5601)
!5601 = distinct !DILexicalBlock(scope: !5598, file: !3, line: 2474, column: 2)
!5602 = !DILocation(line: 2474, column: 22, scope: !5601)
!5603 = !DILocation(line: 2474, column: 33, scope: !5601)
!5604 = !DILocation(line: 2474, column: 20, scope: !5601)
!5605 = !DILocation(line: 2474, column: 2, scope: !5598)
!5606 = !DILocation(line: 2475, column: 15, scope: !5607)
!5607 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 2475, column: 8)
!5608 = !DILocation(line: 2475, column: 9, scope: !5607)
!5609 = !DILocation(line: 2475, column: 8, scope: !5601)
!5610 = !DILocation(line: 2477, column: 23, scope: !5611)
!5611 = distinct !DILexicalBlock(scope: !5607, file: !3, line: 2476, column: 6)
!5612 = !DILocation(line: 2477, column: 13, scope: !5611)
!5613 = !DILocation(line: 2477, column: 8, scope: !5611)
!5614 = !DILocation(line: 2477, column: 21, scope: !5611)
!5615 = !DILocation(line: 2478, column: 14, scope: !5611)
!5616 = !DILocation(line: 2478, column: 25, scope: !5611)
!5617 = !DILocation(line: 2478, column: 8, scope: !5611)
!5618 = !DILocation(line: 2478, column: 30, scope: !5611)
!5619 = !DILocation(line: 2479, column: 14, scope: !5611)
!5620 = !DILocation(line: 2479, column: 8, scope: !5611)
!5621 = !DILocation(line: 2479, column: 19, scope: !5611)
!5622 = !DILocation(line: 2480, column: 8, scope: !5611)
!5623 = !DILocation(line: 2475, column: 18, scope: !5607)
!5624 = !DILocation(line: 2474, column: 41, scope: !5601)
!5625 = !DILocation(line: 2474, column: 2, scope: !5601)
!5626 = distinct !{!5626, !5605, !5627}
!5627 = !DILocation(line: 2481, column: 6, scope: !5598)
!5628 = !DILocation(line: 2484, column: 14, scope: !5493)
!5629 = !DILocation(line: 2484, column: 25, scope: !5493)
!5630 = !DILocation(line: 2484, column: 12, scope: !5493)
!5631 = !DILocation(line: 2485, column: 18, scope: !5632)
!5632 = distinct !DILexicalBlock(scope: !5493, file: !3, line: 2485, column: 7)
!5633 = !DILocation(line: 2485, column: 23, scope: !5632)
!5634 = !DILocation(line: 2485, column: 16, scope: !5632)
!5635 = !DILocation(line: 2485, column: 12, scope: !5632)
!5636 = !DILocation(line: 2485, column: 28, scope: !5637)
!5637 = distinct !DILexicalBlock(scope: !5632, file: !3, line: 2485, column: 7)
!5638 = !DILocation(line: 2485, column: 34, scope: !5637)
!5639 = !DILocation(line: 2485, column: 45, scope: !5637)
!5640 = !DILocation(line: 2485, column: 32, scope: !5637)
!5641 = !DILocation(line: 2485, column: 7, scope: !5632)
!5642 = !DILocation(line: 2487, column: 16, scope: !5643)
!5643 = distinct !DILexicalBlock(scope: !5637, file: !3, line: 2486, column: 2)
!5644 = !DILocation(line: 2487, column: 11, scope: !5643)
!5645 = !DILocation(line: 2487, column: 9, scope: !5643)
!5646 = !DILocation(line: 2488, column: 8, scope: !5647)
!5647 = distinct !DILexicalBlock(scope: !5643, file: !3, line: 2488, column: 8)
!5648 = !DILocation(line: 2488, column: 13, scope: !5647)
!5649 = !DILocation(line: 2488, column: 8, scope: !5643)
!5650 = !DILocation(line: 2491, column: 8, scope: !5651)
!5651 = distinct !DILexicalBlock(scope: !5647, file: !3, line: 2489, column: 6)
!5652 = !DILocation(line: 2491, column: 21, scope: !5651)
!5653 = !DILocation(line: 2491, column: 15, scope: !5651)
!5654 = !DILocation(line: 2492, column: 7, scope: !5651)
!5655 = distinct !{!5655, !5650, !5654}
!5656 = !DILocation(line: 2493, column: 19, scope: !5651)
!5657 = !DILocation(line: 2493, column: 13, scope: !5651)
!5658 = !DILocation(line: 2494, column: 6, scope: !5651)
!5659 = !DILocation(line: 2495, column: 19, scope: !5643)
!5660 = !DILocation(line: 2495, column: 25, scope: !5643)
!5661 = !DILocation(line: 2495, column: 30, scope: !5643)
!5662 = !DILocation(line: 2495, column: 4, scope: !5643)
!5663 = !DILocation(line: 2497, column: 2, scope: !5643)
!5664 = !DILocation(line: 2485, column: 53, scope: !5637)
!5665 = !DILocation(line: 2485, column: 7, scope: !5637)
!5666 = distinct !{!5666, !5641, !5667}
!5667 = !DILocation(line: 2497, column: 2, scope: !5632)
!5668 = !DILocation(line: 2498, column: 5, scope: !5493)
!5669 = !DILocalVariable(name: "live", scope: !5670, file: !3, line: 2504, type: !886)
!5670 = distinct !DILexicalBlock(scope: !5488, file: !3, line: 2500, column: 5)
!5671 = !DILocation(line: 2504, column: 11, scope: !5670)
!5672 = !DILocalVariable(name: "next", scope: !5670, file: !3, line: 2504, type: !886)
!5673 = !DILocation(line: 2504, column: 17, scope: !5670)
!5674 = !DILocation(line: 2506, column: 12, scope: !5670)
!5675 = !DILocation(line: 2507, column: 16, scope: !5676)
!5676 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 2507, column: 7)
!5677 = !DILocation(line: 2507, column: 12, scope: !5676)
!5678 = !DILocation(line: 2507, column: 21, scope: !5679)
!5679 = distinct !DILexicalBlock(scope: !5676, file: !3, line: 2507, column: 7)
!5680 = !DILocation(line: 2507, column: 28, scope: !5679)
!5681 = !DILocation(line: 2507, column: 33, scope: !5679)
!5682 = !DILocation(line: 2507, column: 25, scope: !5679)
!5683 = !DILocation(line: 2507, column: 7, scope: !5676)
!5684 = !DILocation(line: 2508, column: 13, scope: !5685)
!5685 = distinct !DILexicalBlock(scope: !5679, file: !3, line: 2508, column: 13)
!5686 = !DILocation(line: 2508, column: 13, scope: !5679)
!5687 = !DILocation(line: 2509, column: 15, scope: !5685)
!5688 = !DILocation(line: 2509, column: 11, scope: !5685)
!5689 = !DILocation(line: 2507, column: 41, scope: !5679)
!5690 = !DILocation(line: 2507, column: 7, scope: !5679)
!5691 = distinct !{!5691, !5683, !5692}
!5692 = !DILocation(line: 2509, column: 15, scope: !5676)
!5693 = !DILocation(line: 2511, column: 14, scope: !5670)
!5694 = !DILocation(line: 2511, column: 12, scope: !5670)
!5695 = !DILocation(line: 2512, column: 7, scope: !5670)
!5696 = !DILocation(line: 2512, column: 14, scope: !5670)
!5697 = !DILocation(line: 2512, column: 19, scope: !5670)
!5698 = !DILocation(line: 2512, column: 26, scope: !5670)
!5699 = !DILocation(line: 2512, column: 23, scope: !5670)
!5700 = !DILocation(line: 2513, column: 13, scope: !5701)
!5701 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 2513, column: 13)
!5702 = !DILocation(line: 2513, column: 13, scope: !5670)
!5703 = !DILocation(line: 2515, column: 6, scope: !5704)
!5704 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 2514, column: 4)
!5705 = !DILocation(line: 2515, column: 13, scope: !5704)
!5706 = !DILocation(line: 2516, column: 12, scope: !5704)
!5707 = distinct !{!5707, !5703, !5706}
!5708 = !DILocation(line: 2517, column: 21, scope: !5704)
!5709 = !DILocation(line: 2517, column: 27, scope: !5704)
!5710 = !DILocation(line: 2517, column: 32, scope: !5704)
!5711 = !DILocation(line: 2517, column: 6, scope: !5704)
!5712 = !DILocation(line: 2519, column: 4, scope: !5704)
!5713 = !DILocation(line: 2521, column: 19, scope: !5701)
!5714 = !DILocation(line: 2521, column: 25, scope: !5701)
!5715 = !DILocation(line: 2521, column: 30, scope: !5701)
!5716 = !DILocation(line: 2521, column: 4, scope: !5701)
!5717 = distinct !{!5717, !5695, !5718}
!5718 = !DILocation(line: 2522, column: 16, scope: !5670)
!5719 = !DILocation(line: 2525, column: 7, scope: !5720)
!5720 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 2525, column: 7)
!5721 = !DILocation(line: 2525, column: 18, scope: !5720)
!5722 = !DILocation(line: 2525, column: 22, scope: !5720)
!5723 = !DILocation(line: 2525, column: 7, scope: !5406)
!5724 = !DILocation(line: 2530, column: 24, scope: !5725)
!5725 = distinct !DILexicalBlock(scope: !5720, file: !3, line: 2526, column: 5)
!5726 = !DILocation(line: 2530, column: 29, scope: !5725)
!5727 = !DILocation(line: 2530, column: 7, scope: !5725)
!5728 = !DILocation(line: 2530, column: 18, scope: !5725)
!5729 = !DILocation(line: 2530, column: 22, scope: !5725)
!5730 = !DILocation(line: 2531, column: 15, scope: !5725)
!5731 = !DILocation(line: 2531, column: 26, scope: !5725)
!5732 = !DILocation(line: 2531, column: 7, scope: !5725)
!5733 = !DILocation(line: 2531, column: 31, scope: !5725)
!5734 = !DILocation(line: 2531, column: 36, scope: !5725)
!5735 = !DILocation(line: 2532, column: 5, scope: !5725)
!5736 = !DILocation(line: 2541, column: 7, scope: !5737)
!5737 = distinct !DILexicalBlock(scope: !5720, file: !3, line: 2534, column: 5)
!5738 = !DILocation(line: 2542, column: 7, scope: !5737)
!5739 = !DILocation(line: 2553, column: 11, scope: !5740)
!5740 = distinct !DILexicalBlock(scope: !5737, file: !3, line: 2553, column: 11)
!5741 = !DILocation(line: 2553, column: 22, scope: !5740)
!5742 = !DILocation(line: 2553, column: 26, scope: !5740)
!5743 = !DILocation(line: 2553, column: 11, scope: !5737)
!5744 = !DILocation(line: 2554, column: 2, scope: !5740)
!5745 = !DILocation(line: 2559, column: 6, scope: !5746)
!5746 = distinct !DILexicalBlock(scope: !5740, file: !3, line: 2555, column: 4)
!5747 = !DILocation(line: 2559, column: 13, scope: !5746)
!5748 = !DILocation(line: 2559, column: 18, scope: !5746)
!5749 = !DILocation(line: 2559, column: 22, scope: !5746)
!5750 = !DILocation(line: 2559, column: 27, scope: !5746)
!5751 = !DILocation(line: 2559, column: 35, scope: !5746)
!5752 = !DILocation(line: 2559, column: 46, scope: !5746)
!5753 = !DILocation(line: 2559, column: 50, scope: !5746)
!5754 = !DILocation(line: 2559, column: 61, scope: !5746)
!5755 = !DILocation(line: 2559, column: 32, scope: !5746)
!5756 = !DILocation(line: 2561, column: 14, scope: !5757)
!5757 = distinct !DILexicalBlock(scope: !5758, file: !3, line: 2561, column: 3)
!5758 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 2560, column: 8)
!5759 = !DILocation(line: 2561, column: 25, scope: !5757)
!5760 = !DILocation(line: 2561, column: 12, scope: !5757)
!5761 = !DILocation(line: 2561, column: 8, scope: !5757)
!5762 = !DILocation(line: 2561, column: 30, scope: !5763)
!5763 = distinct !DILexicalBlock(scope: !5757, file: !3, line: 2561, column: 3)
!5764 = !DILocation(line: 2561, column: 34, scope: !5763)
!5765 = !DILocation(line: 2561, column: 3, scope: !5757)
!5766 = !DILocation(line: 2562, column: 9, scope: !5767)
!5767 = distinct !DILexicalBlock(scope: !5763, file: !3, line: 2562, column: 9)
!5768 = !DILocation(line: 2562, column: 20, scope: !5767)
!5769 = !DILocation(line: 2562, column: 24, scope: !5767)
!5770 = !DILocation(line: 2562, column: 32, scope: !5767)
!5771 = !DILocation(line: 2562, column: 37, scope: !5767)
!5772 = !DILocation(line: 2562, column: 41, scope: !5767)
!5773 = !DILocation(line: 2562, column: 46, scope: !5767)
!5774 = !DILocation(line: 2562, column: 29, scope: !5767)
!5775 = !DILocation(line: 2562, column: 9, scope: !5763)
!5776 = !DILocation(line: 2563, column: 7, scope: !5767)
!5777 = !DILocation(line: 2562, column: 49, scope: !5767)
!5778 = !DILocation(line: 2561, column: 43, scope: !5763)
!5779 = !DILocation(line: 2561, column: 3, scope: !5763)
!5780 = distinct !{!5780, !5765, !5781}
!5781 = !DILocation(line: 2563, column: 7, scope: !5757)
!5782 = !DILocation(line: 2565, column: 3, scope: !5758)
!5783 = !DILocation(line: 2567, column: 19, scope: !5758)
!5784 = !DILocation(line: 2567, column: 25, scope: !5758)
!5785 = !DILocation(line: 2568, column: 5, scope: !5758)
!5786 = !DILocation(line: 2567, column: 3, scope: !5758)
!5787 = distinct !{!5787, !5745, !5788}
!5788 = !DILocation(line: 2569, column: 8, scope: !5746)
!5789 = !DILocation(line: 2575, column: 17, scope: !5790)
!5790 = distinct !DILexicalBlock(scope: !5746, file: !3, line: 2575, column: 6)
!5791 = !DILocation(line: 2575, column: 28, scope: !5790)
!5792 = !DILocation(line: 2575, column: 15, scope: !5790)
!5793 = !DILocation(line: 2575, column: 11, scope: !5790)
!5794 = !DILocation(line: 2575, column: 33, scope: !5795)
!5795 = distinct !DILexicalBlock(scope: !5790, file: !3, line: 2575, column: 6)
!5796 = !DILocation(line: 2575, column: 37, scope: !5795)
!5797 = !DILocation(line: 2575, column: 6, scope: !5790)
!5798 = !DILocation(line: 2576, column: 12, scope: !5799)
!5799 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 2576, column: 12)
!5800 = !DILocation(line: 2576, column: 23, scope: !5799)
!5801 = !DILocation(line: 2576, column: 27, scope: !5799)
!5802 = !DILocation(line: 2576, column: 35, scope: !5799)
!5803 = !DILocation(line: 2576, column: 40, scope: !5799)
!5804 = !DILocation(line: 2576, column: 44, scope: !5799)
!5805 = !DILocation(line: 2576, column: 32, scope: !5799)
!5806 = !DILocation(line: 2576, column: 12, scope: !5795)
!5807 = !DILocation(line: 2578, column: 21, scope: !5808)
!5808 = distinct !DILexicalBlock(scope: !5799, file: !3, line: 2577, column: 3)
!5809 = !DILocation(line: 2578, column: 27, scope: !5808)
!5810 = !DILocation(line: 2579, column: 7, scope: !5808)
!5811 = !DILocation(line: 2578, column: 5, scope: !5808)
!5812 = !DILocation(line: 2580, column: 5, scope: !5808)
!5813 = !DILocation(line: 2576, column: 47, scope: !5799)
!5814 = !DILocation(line: 2575, column: 46, scope: !5795)
!5815 = !DILocation(line: 2575, column: 6, scope: !5795)
!5816 = distinct !{!5816, !5797, !5817}
!5817 = !DILocation(line: 2581, column: 3, scope: !5790)
!5818 = !DILocation(line: 2582, column: 4, scope: !5746)
!5819 = !DILocation(line: 2582, column: 13, scope: !5740)
!5820 = !DILocation(line: 2582, column: 17, scope: !5740)
!5821 = distinct !{!5821, !5744, !5822}
!5822 = !DILocation(line: 2582, column: 21, scope: !5740)
!5823 = !DILocation(line: 2586, column: 18, scope: !5824)
!5824 = distinct !DILexicalBlock(scope: !5737, file: !3, line: 2586, column: 7)
!5825 = !DILocation(line: 2586, column: 23, scope: !5824)
!5826 = !DILocation(line: 2586, column: 16, scope: !5824)
!5827 = !DILocation(line: 2586, column: 12, scope: !5824)
!5828 = !DILocation(line: 2586, column: 28, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !5824, file: !3, line: 2586, column: 7)
!5830 = !DILocation(line: 2586, column: 32, scope: !5829)
!5831 = !DILocation(line: 2586, column: 7, scope: !5824)
!5832 = !DILocation(line: 2587, column: 2, scope: !5829)
!5833 = !DILocation(line: 2586, column: 41, scope: !5829)
!5834 = !DILocation(line: 2586, column: 7, scope: !5829)
!5835 = distinct !{!5835, !5831, !5836}
!5836 = !DILocation(line: 2587, column: 2, scope: !5824)
!5837 = !DILocation(line: 2590, column: 7, scope: !5838)
!5838 = distinct !DILexicalBlock(scope: !5406, file: !3, line: 2590, column: 7)
!5839 = !DILocation(line: 2590, column: 7, scope: !5406)
!5840 = !DILocation(line: 2591, column: 30, scope: !5838)
!5841 = !DILocation(line: 2591, column: 5, scope: !5838)
!5842 = !DILocation(line: 2591, column: 28, scope: !5838)
!5843 = !DILocation(line: 2592, column: 1, scope: !5406)
!5844 = distinct !DISubprogram(name: "emit_swap_insn", scope: !3, file: !3, line: 799, type: !5845, scopeLine: 800, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!5845 = !DISubroutineType(types: !5846)
!5846 = !{null, !1028, !2004, !1028}
!5847 = !DILocalVariable(name: "insn", arg: 1, scope: !5844, file: !3, line: 799, type: !1028)
!5848 = !DILocation(line: 799, column: 21, scope: !5844)
!5849 = !DILocalVariable(name: "regstack", arg: 2, scope: !5844, file: !3, line: 799, type: !2004)
!5850 = !DILocation(line: 799, column: 33, scope: !5844)
!5851 = !DILocalVariable(name: "reg", arg: 3, scope: !5844, file: !3, line: 799, type: !1028)
!5852 = !DILocation(line: 799, column: 47, scope: !5844)
!5853 = !DILocalVariable(name: "hard_regno", scope: !5844, file: !3, line: 801, type: !886)
!5854 = !DILocation(line: 801, column: 7, scope: !5844)
!5855 = !DILocalVariable(name: "swap_rtx", scope: !5844, file: !3, line: 802, type: !1028)
!5856 = !DILocation(line: 802, column: 7, scope: !5844)
!5857 = !DILocalVariable(name: "tmp", scope: !5844, file: !3, line: 803, type: !886)
!5858 = !DILocation(line: 803, column: 7, scope: !5844)
!5859 = !DILocalVariable(name: "other_reg", scope: !5844, file: !3, line: 803, type: !886)
!5860 = !DILocation(line: 803, column: 12, scope: !5844)
!5861 = !DILocalVariable(name: "i1", scope: !5844, file: !3, line: 804, type: !1028)
!5862 = !DILocation(line: 804, column: 7, scope: !5844)
!5863 = !DILocalVariable(name: "i1set", scope: !5844, file: !3, line: 805, type: !1028)
!5864 = !DILocation(line: 805, column: 7, scope: !5844)
!5865 = !DILocation(line: 807, column: 33, scope: !5844)
!5866 = !DILocation(line: 807, column: 43, scope: !5844)
!5867 = !DILocation(line: 807, column: 16, scope: !5844)
!5868 = !DILocation(line: 807, column: 14, scope: !5844)
!5869 = !DILocation(line: 809, column: 7, scope: !5870)
!5870 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 809, column: 7)
!5871 = !DILocation(line: 809, column: 18, scope: !5870)
!5872 = !DILocation(line: 809, column: 7, scope: !5844)
!5873 = !DILocation(line: 810, column: 5, scope: !5870)
!5874 = !DILocation(line: 811, column: 7, scope: !5875)
!5875 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 811, column: 7)
!5876 = !DILocation(line: 811, column: 18, scope: !5875)
!5877 = !DILocation(line: 811, column: 7, scope: !5844)
!5878 = !DILocation(line: 817, column: 7, scope: !5879)
!5879 = distinct !DILexicalBlock(scope: !5875, file: !3, line: 812, column: 5)
!5880 = !DILocation(line: 818, column: 40, scope: !5879)
!5881 = !DILocation(line: 818, column: 7, scope: !5879)
!5882 = !DILocation(line: 818, column: 17, scope: !5879)
!5883 = !DILocation(line: 818, column: 23, scope: !5879)
!5884 = !DILocation(line: 818, column: 33, scope: !5879)
!5885 = !DILocation(line: 818, column: 21, scope: !5879)
!5886 = !DILocation(line: 818, column: 38, scope: !5879)
!5887 = !DILocation(line: 819, column: 7, scope: !5879)
!5888 = !DILocation(line: 821, column: 3, scope: !5844)
!5889 = !DILocation(line: 823, column: 15, scope: !5844)
!5890 = !DILocation(line: 823, column: 25, scope: !5844)
!5891 = !DILocation(line: 823, column: 32, scope: !5844)
!5892 = !DILocation(line: 823, column: 43, scope: !5844)
!5893 = !DILocation(line: 823, column: 29, scope: !5844)
!5894 = !DILocation(line: 823, column: 13, scope: !5844)
!5895 = !DILocation(line: 825, column: 9, scope: !5844)
!5896 = !DILocation(line: 825, column: 19, scope: !5844)
!5897 = !DILocation(line: 825, column: 23, scope: !5844)
!5898 = !DILocation(line: 825, column: 7, scope: !5844)
!5899 = !DILocation(line: 826, column: 30, scope: !5844)
!5900 = !DILocation(line: 826, column: 40, scope: !5844)
!5901 = !DILocation(line: 826, column: 44, scope: !5844)
!5902 = !DILocation(line: 826, column: 54, scope: !5844)
!5903 = !DILocation(line: 826, column: 3, scope: !5844)
!5904 = !DILocation(line: 826, column: 13, scope: !5844)
!5905 = !DILocation(line: 826, column: 17, scope: !5844)
!5906 = !DILocation(line: 826, column: 28, scope: !5844)
!5907 = !DILocation(line: 827, column: 34, scope: !5844)
!5908 = !DILocation(line: 827, column: 3, scope: !5844)
!5909 = !DILocation(line: 827, column: 13, scope: !5844)
!5910 = !DILocation(line: 827, column: 17, scope: !5844)
!5911 = !DILocation(line: 827, column: 27, scope: !5844)
!5912 = !DILocation(line: 827, column: 32, scope: !5844)
!5913 = !DILocation(line: 831, column: 6, scope: !5844)
!5914 = !DILocation(line: 832, column: 7, scope: !5915)
!5915 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 832, column: 7)
!5916 = !DILocation(line: 832, column: 21, scope: !5915)
!5917 = !DILocation(line: 832, column: 24, scope: !5915)
!5918 = !DILocation(line: 832, column: 32, scope: !5915)
!5919 = !DILocation(line: 832, column: 29, scope: !5915)
!5920 = !DILocation(line: 832, column: 7, scope: !5844)
!5921 = !DILocalVariable(name: "tmp", scope: !5922, file: !3, line: 834, type: !1028)
!5922 = distinct !DILexicalBlock(scope: !5915, file: !3, line: 833, column: 5)
!5923 = !DILocation(line: 834, column: 11, scope: !5922)
!5924 = !DILocation(line: 834, column: 17, scope: !5922)
!5925 = !DILocalVariable(name: "limit", scope: !5922, file: !3, line: 835, type: !1028)
!5926 = !DILocation(line: 835, column: 11, scope: !5922)
!5927 = !DILocation(line: 835, column: 19, scope: !5922)
!5928 = !DILocation(line: 836, column: 7, scope: !5922)
!5929 = !DILocation(line: 836, column: 14, scope: !5922)
!5930 = !DILocation(line: 836, column: 21, scope: !5922)
!5931 = !DILocation(line: 836, column: 18, scope: !5922)
!5932 = !DILocation(line: 838, column: 8, scope: !5933)
!5933 = distinct !DILexicalBlock(scope: !5934, file: !3, line: 838, column: 8)
!5934 = distinct !DILexicalBlock(scope: !5922, file: !3, line: 837, column: 2)
!5935 = !DILocation(line: 839, column: 8, scope: !5933)
!5936 = !DILocation(line: 839, column: 11, scope: !5933)
!5937 = !DILocation(line: 840, column: 8, scope: !5933)
!5938 = !DILocation(line: 840, column: 11, scope: !5933)
!5939 = !DILocation(line: 841, column: 8, scope: !5933)
!5940 = !DILocation(line: 841, column: 12, scope: !5933)
!5941 = !DILocation(line: 842, column: 5, scope: !5933)
!5942 = !DILocation(line: 842, column: 30, scope: !5933)
!5943 = !DILocation(line: 842, column: 8, scope: !5933)
!5944 = !DILocation(line: 838, column: 8, scope: !5934)
!5945 = !DILocation(line: 844, column: 13, scope: !5946)
!5946 = distinct !DILexicalBlock(scope: !5933, file: !3, line: 843, column: 6)
!5947 = !DILocation(line: 844, column: 11, scope: !5946)
!5948 = !DILocation(line: 845, column: 8, scope: !5946)
!5949 = !DILocation(line: 847, column: 10, scope: !5934)
!5950 = !DILocation(line: 847, column: 8, scope: !5934)
!5951 = distinct !{!5951, !5928, !5952}
!5952 = !DILocation(line: 848, column: 2, scope: !5922)
!5953 = !DILocation(line: 849, column: 5, scope: !5922)
!5954 = !DILocation(line: 851, column: 7, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 851, column: 7)
!5956 = !DILocation(line: 851, column: 10, scope: !5955)
!5957 = !DILocation(line: 852, column: 7, scope: !5955)
!5958 = !DILocation(line: 852, column: 19, scope: !5955)
!5959 = !DILocation(line: 852, column: 17, scope: !5955)
!5960 = !DILocation(line: 852, column: 36, scope: !5955)
!5961 = !DILocation(line: 851, column: 7, scope: !5844)
!5962 = !DILocalVariable(name: "i1src", scope: !5963, file: !3, line: 854, type: !1028)
!5963 = distinct !DILexicalBlock(scope: !5955, file: !3, line: 853, column: 5)
!5964 = !DILocation(line: 854, column: 11, scope: !5963)
!5965 = !DILocation(line: 854, column: 35, scope: !5963)
!5966 = !DILocation(line: 854, column: 20, scope: !5963)
!5967 = !DILocation(line: 854, column: 19, scope: !5963)
!5968 = !DILocalVariable(name: "i1dest", scope: !5963, file: !3, line: 855, type: !1028)
!5969 = !DILocation(line: 855, column: 11, scope: !5963)
!5970 = !DILocation(line: 855, column: 36, scope: !5963)
!5971 = !DILocation(line: 855, column: 21, scope: !5963)
!5972 = !DILocation(line: 855, column: 20, scope: !5963)
!5973 = !DILocation(line: 860, column: 11, scope: !5974)
!5974 = distinct !DILexicalBlock(scope: !5963, file: !3, line: 860, column: 11)
!5975 = !DILocation(line: 860, column: 26, scope: !5974)
!5976 = !DILocation(line: 860, column: 29, scope: !5974)
!5977 = !DILocation(line: 860, column: 44, scope: !5974)
!5978 = !DILocation(line: 861, column: 4, scope: !5974)
!5979 = !DILocation(line: 861, column: 7, scope: !5974)
!5980 = !DILocation(line: 862, column: 4, scope: !5974)
!5981 = !DILocation(line: 862, column: 7, scope: !5974)
!5982 = !DILocation(line: 862, column: 35, scope: !5974)
!5983 = !DILocation(line: 862, column: 46, scope: !5974)
!5984 = !DILocation(line: 862, column: 21, scope: !5974)
!5985 = !DILocation(line: 863, column: 4, scope: !5974)
!5986 = !DILocation(line: 863, column: 24, scope: !5974)
!5987 = !DILocation(line: 863, column: 7, scope: !5974)
!5988 = !DILocation(line: 863, column: 55, scope: !5974)
!5989 = !DILocation(line: 860, column: 11, scope: !5963)
!5990 = !DILocation(line: 864, column: 2, scope: !5974)
!5991 = !DILocation(line: 869, column: 11, scope: !5992)
!5992 = distinct !DILexicalBlock(scope: !5963, file: !3, line: 869, column: 11)
!5993 = !DILocation(line: 869, column: 26, scope: !5992)
!5994 = !DILocation(line: 869, column: 29, scope: !5992)
!5995 = !DILocation(line: 869, column: 58, scope: !5992)
!5996 = !DILocation(line: 869, column: 44, scope: !5992)
!5997 = !DILocation(line: 870, column: 4, scope: !5992)
!5998 = !DILocation(line: 870, column: 7, scope: !5992)
!5999 = !DILocation(line: 870, column: 21, scope: !5992)
!6000 = !DILocation(line: 870, column: 24, scope: !5992)
!6001 = !DILocation(line: 870, column: 38, scope: !5992)
!6002 = !DILocation(line: 871, column: 4, scope: !5992)
!6003 = !DILocation(line: 871, column: 24, scope: !5992)
!6004 = !DILocation(line: 871, column: 7, scope: !5992)
!6005 = !DILocation(line: 871, column: 55, scope: !5992)
!6006 = !DILocation(line: 869, column: 11, scope: !5963)
!6007 = !DILocation(line: 872, column: 2, scope: !5992)
!6008 = !DILocation(line: 873, column: 5, scope: !5963)
!6009 = !DILocation(line: 878, column: 7, scope: !6010)
!6010 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 878, column: 7)
!6011 = !DILocation(line: 878, column: 21, scope: !6010)
!6012 = !DILocation(line: 878, column: 24, scope: !6010)
!6013 = !DILocation(line: 878, column: 7, scope: !5844)
!6014 = !DILocation(line: 880, column: 7, scope: !6015)
!6015 = distinct !DILexicalBlock(scope: !6010, file: !3, line: 879, column: 5)
!6016 = !DILocation(line: 880, column: 35, scope: !6015)
!6017 = !DILocation(line: 880, column: 47, scope: !6015)
!6018 = !DILocation(line: 880, column: 46, scope: !6015)
!6019 = !DILocation(line: 881, column: 24, scope: !6015)
!6020 = !DILocation(line: 882, column: 7, scope: !6015)
!6021 = !DILocation(line: 885, column: 26, scope: !5844)
!6022 = !DILocation(line: 886, column: 5, scope: !5844)
!6023 = !DILocation(line: 885, column: 14, scope: !5844)
!6024 = !DILocation(line: 885, column: 12, scope: !5844)
!6025 = !DILocation(line: 888, column: 7, scope: !6026)
!6026 = distinct !DILexicalBlock(scope: !5844, file: !3, line: 888, column: 7)
!6027 = !DILocation(line: 888, column: 7, scope: !5844)
!6028 = !DILocation(line: 889, column: 22, scope: !6026)
!6029 = !DILocation(line: 889, column: 32, scope: !6026)
!6030 = !DILocation(line: 889, column: 5, scope: !6026)
!6031 = !DILocation(line: 890, column: 12, scope: !6032)
!6032 = distinct !DILexicalBlock(scope: !6026, file: !3, line: 890, column: 12)
!6033 = !DILocation(line: 890, column: 12, scope: !6026)
!6034 = !DILocation(line: 891, column: 23, scope: !6032)
!6035 = !DILocation(line: 891, column: 33, scope: !6032)
!6036 = !DILocation(line: 891, column: 5, scope: !6032)
!6037 = !DILocation(line: 893, column: 23, scope: !6032)
!6038 = !DILocation(line: 893, column: 33, scope: !6032)
!6039 = !DILocation(line: 893, column: 5, scope: !6032)
!6040 = !DILocation(line: 894, column: 1, scope: !5844)
!6041 = distinct !DISubprogram(name: "check_asm_stack_operands", scope: !3, file: !3, line: 461, type: !6042, scopeLine: 462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!6042 = !DISubroutineType(types: !6043)
!6043 = !{!886, !1028}
!6044 = !DILocalVariable(name: "insn", arg: 1, scope: !6041, file: !3, line: 461, type: !1028)
!6045 = !DILocation(line: 461, column: 31, scope: !6041)
!6046 = !DILocalVariable(name: "i", scope: !6041, file: !3, line: 463, type: !886)
!6047 = !DILocation(line: 463, column: 7, scope: !6041)
!6048 = !DILocalVariable(name: "n_clobbers", scope: !6041, file: !3, line: 464, type: !886)
!6049 = !DILocation(line: 464, column: 7, scope: !6041)
!6050 = !DILocalVariable(name: "malformed_asm", scope: !6041, file: !3, line: 465, type: !886)
!6051 = !DILocation(line: 465, column: 7, scope: !6041)
!6052 = !DILocalVariable(name: "body", scope: !6041, file: !3, line: 466, type: !1028)
!6053 = !DILocation(line: 466, column: 7, scope: !6041)
!6054 = !DILocation(line: 466, column: 14, scope: !6041)
!6055 = !DILocalVariable(name: "reg_used_as_output", scope: !6041, file: !3, line: 468, type: !6056)
!6056 = !DICompositeType(tag: DW_TAG_array_type, baseType: !900, size: 424, elements: !6057)
!6057 = !{!6058}
!6058 = !DISubrange(count: 53)
!6059 = !DILocation(line: 468, column: 8, scope: !6041)
!6060 = !DILocalVariable(name: "implicitly_dies", scope: !6041, file: !3, line: 469, type: !6056)
!6061 = !DILocation(line: 469, column: 8, scope: !6041)
!6062 = !DILocalVariable(name: "alt", scope: !6041, file: !3, line: 470, type: !886)
!6063 = !DILocation(line: 470, column: 7, scope: !6041)
!6064 = !DILocalVariable(name: "clobber_reg", scope: !6041, file: !3, line: 472, type: !2006)
!6065 = !DILocation(line: 472, column: 8, scope: !6041)
!6066 = !DILocalVariable(name: "n_inputs", scope: !6041, file: !3, line: 473, type: !886)
!6067 = !DILocation(line: 473, column: 7, scope: !6041)
!6068 = !DILocalVariable(name: "n_outputs", scope: !6041, file: !3, line: 473, type: !886)
!6069 = !DILocation(line: 473, column: 17, scope: !6041)
!6070 = !DILocation(line: 477, column: 17, scope: !6041)
!6071 = !DILocation(line: 477, column: 3, scope: !6041)
!6072 = !DILocation(line: 478, column: 3, scope: !6041)
!6073 = !DILocation(line: 479, column: 9, scope: !6041)
!6074 = !DILocation(line: 479, column: 7, scope: !6041)
!6075 = !DILocation(line: 481, column: 3, scope: !6041)
!6076 = !DILocation(line: 483, column: 28, scope: !6041)
!6077 = !DILocation(line: 483, column: 3, scope: !6041)
!6078 = !DILocation(line: 485, column: 7, scope: !6079)
!6079 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 485, column: 7)
!6080 = !DILocation(line: 485, column: 11, scope: !6079)
!6081 = !DILocation(line: 485, column: 7, scope: !6041)
!6082 = !DILocation(line: 487, column: 21, scope: !6083)
!6083 = distinct !DILexicalBlock(scope: !6079, file: !3, line: 486, column: 5)
!6084 = !DILocation(line: 489, column: 24, scope: !6083)
!6085 = !DILocation(line: 489, column: 7, scope: !6083)
!6086 = !DILocation(line: 489, column: 22, scope: !6083)
!6087 = !DILocation(line: 490, column: 7, scope: !6083)
!6088 = !DILocation(line: 494, column: 10, scope: !6089)
!6089 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 494, column: 3)
!6090 = !DILocation(line: 494, column: 8, scope: !6089)
!6091 = !DILocation(line: 494, column: 15, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !6089, file: !3, line: 494, column: 3)
!6093 = !DILocation(line: 494, column: 30, scope: !6092)
!6094 = !DILocation(line: 494, column: 19, scope: !6092)
!6095 = !DILocation(line: 494, column: 17, scope: !6092)
!6096 = !DILocation(line: 494, column: 3, scope: !6089)
!6097 = !DILocation(line: 495, column: 9, scope: !6098)
!6098 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 495, column: 9)
!6099 = !DILocation(line: 495, column: 42, scope: !6098)
!6100 = !DILocation(line: 496, column: 2, scope: !6098)
!6101 = !DILocation(line: 496, column: 5, scope: !6098)
!6102 = !DILocation(line: 495, column: 9, scope: !6092)
!6103 = !DILocation(line: 497, column: 31, scope: !6098)
!6104 = !DILocation(line: 497, column: 26, scope: !6098)
!6105 = !DILocation(line: 497, column: 7, scope: !6098)
!6106 = !DILocation(line: 497, column: 29, scope: !6098)
!6107 = !DILocation(line: 494, column: 43, scope: !6092)
!6108 = !DILocation(line: 494, column: 3, scope: !6092)
!6109 = distinct !{!6109, !6096, !6110}
!6110 = !DILocation(line: 497, column: 31, scope: !6089)
!6111 = !DILocation(line: 501, column: 14, scope: !6041)
!6112 = !DILocation(line: 503, column: 7, scope: !6113)
!6113 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 503, column: 7)
!6114 = !DILocation(line: 503, column: 23, scope: !6113)
!6115 = !DILocation(line: 503, column: 7, scope: !6041)
!6116 = !DILocation(line: 505, column: 21, scope: !6117)
!6117 = distinct !DILexicalBlock(scope: !6113, file: !3, line: 504, column: 5)
!6118 = !DILocation(line: 505, column: 19, scope: !6117)
!6119 = !DILocation(line: 507, column: 14, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6117, file: !3, line: 507, column: 7)
!6121 = !DILocation(line: 507, column: 12, scope: !6120)
!6122 = !DILocation(line: 507, column: 19, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !6120, file: !3, line: 507, column: 7)
!6124 = !DILocation(line: 507, column: 23, scope: !6123)
!6125 = !DILocation(line: 507, column: 21, scope: !6123)
!6126 = !DILocation(line: 507, column: 7, scope: !6120)
!6127 = !DILocation(line: 508, column: 6, scope: !6128)
!6128 = distinct !DILexicalBlock(scope: !6123, file: !3, line: 508, column: 6)
!6129 = !DILocation(line: 508, column: 38, scope: !6128)
!6130 = !DILocation(line: 508, column: 6, scope: !6123)
!6131 = !DILocalVariable(name: "clobber", scope: !6132, file: !3, line: 510, type: !1028)
!6132 = distinct !DILexicalBlock(scope: !6128, file: !3, line: 509, column: 4)
!6133 = !DILocation(line: 510, column: 10, scope: !6132)
!6134 = !DILocation(line: 510, column: 20, scope: !6132)
!6135 = !DILocalVariable(name: "reg", scope: !6132, file: !3, line: 511, type: !1028)
!6136 = !DILocation(line: 511, column: 10, scope: !6132)
!6137 = !DILocation(line: 511, column: 16, scope: !6132)
!6138 = !DILocation(line: 513, column: 10, scope: !6139)
!6139 = distinct !DILexicalBlock(scope: !6132, file: !3, line: 513, column: 10)
!6140 = !DILocation(line: 513, column: 25, scope: !6139)
!6141 = !DILocation(line: 513, column: 35, scope: !6139)
!6142 = !DILocation(line: 513, column: 38, scope: !6139)
!6143 = !DILocation(line: 513, column: 10, scope: !6132)
!6144 = !DILocation(line: 514, column: 14, scope: !6139)
!6145 = !DILocation(line: 514, column: 12, scope: !6139)
!6146 = !DILocation(line: 514, column: 8, scope: !6139)
!6147 = !DILocation(line: 516, column: 10, scope: !6148)
!6148 = distinct !DILexicalBlock(scope: !6132, file: !3, line: 516, column: 10)
!6149 = !DILocation(line: 516, column: 10, scope: !6132)
!6150 = !DILocation(line: 518, column: 29, scope: !6151)
!6151 = distinct !DILexicalBlock(scope: !6148, file: !3, line: 517, column: 8)
!6152 = !DILocation(line: 518, column: 3, scope: !6151)
!6153 = !DILocation(line: 518, column: 15, scope: !6151)
!6154 = !DILocation(line: 518, column: 27, scope: !6151)
!6155 = !DILocation(line: 519, column: 13, scope: !6151)
!6156 = !DILocation(line: 520, column: 8, scope: !6151)
!6157 = !DILocation(line: 521, column: 4, scope: !6132)
!6158 = !DILocation(line: 508, column: 41, scope: !6128)
!6159 = !DILocation(line: 507, column: 43, scope: !6123)
!6160 = !DILocation(line: 507, column: 7, scope: !6123)
!6161 = distinct !{!6161, !6126, !6162}
!6162 = !DILocation(line: 521, column: 4, scope: !6120)
!6163 = !DILocation(line: 522, column: 5, scope: !6117)
!6164 = !DILocation(line: 531, column: 3, scope: !6041)
!6165 = !DILocation(line: 532, column: 10, scope: !6166)
!6166 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 532, column: 3)
!6167 = !DILocation(line: 532, column: 8, scope: !6166)
!6168 = !DILocation(line: 532, column: 15, scope: !6169)
!6169 = distinct !DILexicalBlock(scope: !6166, file: !3, line: 532, column: 3)
!6170 = !DILocation(line: 532, column: 19, scope: !6169)
!6171 = !DILocation(line: 532, column: 17, scope: !6169)
!6172 = !DILocation(line: 532, column: 3, scope: !6166)
!6173 = !DILocation(line: 533, column: 9, scope: !6174)
!6174 = distinct !DILexicalBlock(scope: !6169, file: !3, line: 533, column: 9)
!6175 = !DILocation(line: 533, column: 9, scope: !6169)
!6176 = !DILocation(line: 535, column: 40, scope: !6177)
!6177 = distinct !DILexicalBlock(scope: !6178, file: !3, line: 535, column: 6)
!6178 = distinct !DILexicalBlock(scope: !6174, file: !3, line: 534, column: 7)
!6179 = !DILocation(line: 535, column: 27, scope: !6177)
!6180 = !DILocation(line: 535, column: 43, scope: !6177)
!6181 = !DILocation(line: 535, column: 48, scope: !6177)
!6182 = !DILocation(line: 535, column: 6, scope: !6177)
!6183 = !DILocation(line: 535, column: 52, scope: !6177)
!6184 = !DILocation(line: 535, column: 6, scope: !6178)
!6185 = !DILocation(line: 537, column: 21, scope: !6186)
!6186 = distinct !DILexicalBlock(scope: !6177, file: !3, line: 536, column: 4)
!6187 = !DILocation(line: 537, column: 82, scope: !6186)
!6188 = !DILocation(line: 537, column: 6, scope: !6186)
!6189 = !DILocation(line: 538, column: 20, scope: !6186)
!6190 = !DILocation(line: 539, column: 4, scope: !6186)
!6191 = !DILocalVariable(name: "j", scope: !6192, file: !3, line: 542, type: !886)
!6192 = distinct !DILexicalBlock(scope: !6177, file: !3, line: 541, column: 4)
!6193 = !DILocation(line: 542, column: 10, scope: !6192)
!6194 = !DILocation(line: 544, column: 13, scope: !6195)
!6195 = distinct !DILexicalBlock(scope: !6192, file: !3, line: 544, column: 6)
!6196 = !DILocation(line: 544, column: 11, scope: !6195)
!6197 = !DILocation(line: 544, column: 18, scope: !6198)
!6198 = distinct !DILexicalBlock(scope: !6195, file: !3, line: 544, column: 6)
!6199 = !DILocation(line: 544, column: 22, scope: !6198)
!6200 = !DILocation(line: 544, column: 20, scope: !6198)
!6201 = !DILocation(line: 544, column: 6, scope: !6195)
!6202 = !DILocation(line: 545, column: 12, scope: !6203)
!6203 = distinct !DILexicalBlock(scope: !6198, file: !3, line: 545, column: 12)
!6204 = !DILocation(line: 545, column: 45, scope: !6203)
!6205 = !DILocation(line: 545, column: 42, scope: !6203)
!6206 = !DILocation(line: 545, column: 12, scope: !6198)
!6207 = !DILocation(line: 547, column: 20, scope: !6208)
!6208 = distinct !DILexicalBlock(scope: !6203, file: !3, line: 546, column: 3)
!6209 = !DILocation(line: 548, column: 6, scope: !6208)
!6210 = !DILocation(line: 548, column: 20, scope: !6208)
!6211 = !DILocation(line: 548, column: 9, scope: !6208)
!6212 = !DILocation(line: 547, column: 5, scope: !6208)
!6213 = !DILocation(line: 549, column: 19, scope: !6208)
!6214 = !DILocation(line: 550, column: 5, scope: !6208)
!6215 = !DILocation(line: 544, column: 35, scope: !6198)
!6216 = !DILocation(line: 544, column: 6, scope: !6198)
!6217 = distinct !{!6217, !6201, !6218}
!6218 = !DILocation(line: 551, column: 3, scope: !6195)
!6219 = !DILocation(line: 552, column: 10, scope: !6220)
!6220 = distinct !DILexicalBlock(scope: !6192, file: !3, line: 552, column: 10)
!6221 = !DILocation(line: 552, column: 15, scope: !6220)
!6222 = !DILocation(line: 552, column: 12, scope: !6220)
!6223 = !DILocation(line: 552, column: 10, scope: !6192)
!6224 = !DILocation(line: 553, column: 27, scope: !6220)
!6225 = !DILocation(line: 553, column: 8, scope: !6220)
!6226 = !DILocation(line: 553, column: 58, scope: !6220)
!6227 = !DILocation(line: 555, column: 7, scope: !6178)
!6228 = !DILocation(line: 532, column: 31, scope: !6169)
!6229 = !DILocation(line: 532, column: 3, scope: !6169)
!6230 = distinct !{!6230, !6172, !6231}
!6231 = !DILocation(line: 555, column: 7, scope: !6166)
!6232 = !DILocation(line: 559, column: 10, scope: !6233)
!6233 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 559, column: 3)
!6234 = !DILocation(line: 559, column: 8, scope: !6233)
!6235 = !DILocation(line: 559, column: 29, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6233, file: !3, line: 559, column: 3)
!6237 = !DILocation(line: 559, column: 31, scope: !6236)
!6238 = !DILocation(line: 559, column: 3, scope: !6233)
!6239 = !DILocation(line: 560, column: 30, scope: !6240)
!6240 = distinct !DILexicalBlock(scope: !6236, file: !3, line: 560, column: 9)
!6241 = !DILocation(line: 560, column: 11, scope: !6240)
!6242 = !DILocation(line: 560, column: 9, scope: !6236)
!6243 = !DILocation(line: 561, column: 7, scope: !6240)
!6244 = !DILocation(line: 560, column: 31, scope: !6240)
!6245 = !DILocation(line: 559, column: 54, scope: !6236)
!6246 = !DILocation(line: 559, column: 3, scope: !6236)
!6247 = distinct !{!6247, !6238, !6248}
!6248 = !DILocation(line: 561, column: 7, scope: !6233)
!6249 = !DILocation(line: 564, column: 3, scope: !6041)
!6250 = !DILocation(line: 564, column: 10, scope: !6251)
!6251 = distinct !DILexicalBlock(scope: !6252, file: !3, line: 564, column: 3)
!6252 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 564, column: 3)
!6253 = !DILocation(line: 564, column: 12, scope: !6251)
!6254 = !DILocation(line: 564, column: 3, scope: !6252)
!6255 = !DILocation(line: 565, column: 28, scope: !6256)
!6256 = distinct !DILexicalBlock(scope: !6251, file: !3, line: 565, column: 9)
!6257 = !DILocation(line: 565, column: 9, scope: !6256)
!6258 = !DILocation(line: 565, column: 9, scope: !6251)
!6259 = !DILocation(line: 566, column: 7, scope: !6256)
!6260 = !DILocation(line: 565, column: 29, scope: !6256)
!6261 = !DILocation(line: 564, column: 35, scope: !6251)
!6262 = !DILocation(line: 564, column: 3, scope: !6251)
!6263 = distinct !{!6263, !6254, !6264}
!6264 = !DILocation(line: 566, column: 7, scope: !6252)
!6265 = !DILocation(line: 568, column: 7, scope: !6266)
!6266 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 568, column: 7)
!6267 = !DILocation(line: 568, column: 9, scope: !6266)
!6268 = !DILocation(line: 568, column: 7, scope: !6041)
!6269 = !DILocation(line: 570, column: 22, scope: !6270)
!6270 = distinct !DILexicalBlock(scope: !6266, file: !3, line: 569, column: 5)
!6271 = !DILocation(line: 570, column: 7, scope: !6270)
!6272 = !DILocation(line: 571, column: 21, scope: !6270)
!6273 = !DILocation(line: 572, column: 5, scope: !6270)
!6274 = !DILocation(line: 578, column: 3, scope: !6041)
!6275 = !DILocation(line: 579, column: 12, scope: !6276)
!6276 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 579, column: 3)
!6277 = !DILocation(line: 579, column: 10, scope: !6276)
!6278 = !DILocation(line: 579, column: 8, scope: !6276)
!6279 = !DILocation(line: 579, column: 23, scope: !6280)
!6280 = distinct !DILexicalBlock(scope: !6276, file: !3, line: 579, column: 3)
!6281 = !DILocation(line: 579, column: 27, scope: !6280)
!6282 = !DILocation(line: 579, column: 39, scope: !6280)
!6283 = !DILocation(line: 579, column: 37, scope: !6280)
!6284 = !DILocation(line: 579, column: 25, scope: !6280)
!6285 = !DILocation(line: 579, column: 3, scope: !6276)
!6286 = !DILocation(line: 580, column: 9, scope: !6287)
!6287 = distinct !DILexicalBlock(scope: !6280, file: !3, line: 580, column: 9)
!6288 = !DILocation(line: 580, column: 9, scope: !6280)
!6289 = !DILocalVariable(name: "j", scope: !6290, file: !3, line: 584, type: !886)
!6290 = distinct !DILexicalBlock(scope: !6287, file: !3, line: 581, column: 7)
!6291 = !DILocation(line: 584, column: 6, scope: !6290)
!6292 = !DILocation(line: 586, column: 9, scope: !6293)
!6293 = distinct !DILexicalBlock(scope: !6290, file: !3, line: 586, column: 2)
!6294 = !DILocation(line: 586, column: 7, scope: !6293)
!6295 = !DILocation(line: 586, column: 14, scope: !6296)
!6296 = distinct !DILexicalBlock(scope: !6293, file: !3, line: 586, column: 2)
!6297 = !DILocation(line: 586, column: 18, scope: !6296)
!6298 = !DILocation(line: 586, column: 16, scope: !6296)
!6299 = !DILocation(line: 586, column: 2, scope: !6293)
!6300 = !DILocation(line: 587, column: 26, scope: !6301)
!6301 = distinct !DILexicalBlock(scope: !6296, file: !3, line: 587, column: 8)
!6302 = !DILocation(line: 587, column: 38, scope: !6301)
!6303 = !DILocation(line: 587, column: 61, scope: !6301)
!6304 = !DILocation(line: 587, column: 42, scope: !6301)
!6305 = !DILocation(line: 587, column: 8, scope: !6301)
!6306 = !DILocation(line: 587, column: 8, scope: !6296)
!6307 = !DILocation(line: 588, column: 6, scope: !6301)
!6308 = !DILocation(line: 587, column: 63, scope: !6301)
!6309 = !DILocation(line: 586, column: 31, scope: !6296)
!6310 = !DILocation(line: 586, column: 2, scope: !6296)
!6311 = distinct !{!6311, !6299, !6312}
!6312 = !DILocation(line: 588, column: 6, scope: !6293)
!6313 = !DILocation(line: 590, column: 6, scope: !6314)
!6314 = distinct !DILexicalBlock(scope: !6290, file: !3, line: 590, column: 6)
!6315 = !DILocation(line: 590, column: 10, scope: !6314)
!6316 = !DILocation(line: 590, column: 8, scope: !6314)
!6317 = !DILocation(line: 590, column: 21, scope: !6314)
!6318 = !DILocation(line: 590, column: 37, scope: !6314)
!6319 = !DILocation(line: 590, column: 24, scope: !6314)
!6320 = !DILocation(line: 590, column: 40, scope: !6314)
!6321 = !DILocation(line: 590, column: 45, scope: !6314)
!6322 = !DILocation(line: 590, column: 53, scope: !6314)
!6323 = !DILocation(line: 590, column: 6, scope: !6290)
!6324 = !DILocation(line: 591, column: 20, scope: !6314)
!6325 = !DILocation(line: 591, column: 4, scope: !6314)
!6326 = !DILocation(line: 591, column: 51, scope: !6314)
!6327 = !DILocation(line: 592, column: 7, scope: !6290)
!6328 = !DILocation(line: 579, column: 50, scope: !6280)
!6329 = !DILocation(line: 579, column: 3, scope: !6280)
!6330 = distinct !{!6330, !6285, !6331}
!6331 = !DILocation(line: 592, column: 7, scope: !6276)
!6332 = !DILocation(line: 595, column: 10, scope: !6333)
!6333 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 595, column: 3)
!6334 = !DILocation(line: 595, column: 8, scope: !6333)
!6335 = !DILocation(line: 595, column: 29, scope: !6336)
!6336 = distinct !DILexicalBlock(scope: !6333, file: !3, line: 595, column: 3)
!6337 = !DILocation(line: 595, column: 31, scope: !6336)
!6338 = !DILocation(line: 595, column: 3, scope: !6333)
!6339 = !DILocation(line: 596, column: 27, scope: !6340)
!6340 = distinct !DILexicalBlock(scope: !6336, file: !3, line: 596, column: 9)
!6341 = !DILocation(line: 596, column: 11, scope: !6340)
!6342 = !DILocation(line: 596, column: 9, scope: !6336)
!6343 = !DILocation(line: 597, column: 7, scope: !6340)
!6344 = !DILocation(line: 596, column: 28, scope: !6340)
!6345 = !DILocation(line: 595, column: 54, scope: !6336)
!6346 = !DILocation(line: 595, column: 3, scope: !6336)
!6347 = distinct !{!6347, !6338, !6348}
!6348 = !DILocation(line: 597, column: 7, scope: !6333)
!6349 = !DILocation(line: 600, column: 3, scope: !6041)
!6350 = !DILocation(line: 600, column: 10, scope: !6351)
!6351 = distinct !DILexicalBlock(scope: !6352, file: !3, line: 600, column: 3)
!6352 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 600, column: 3)
!6353 = !DILocation(line: 600, column: 12, scope: !6351)
!6354 = !DILocation(line: 600, column: 3, scope: !6352)
!6355 = !DILocation(line: 601, column: 25, scope: !6356)
!6356 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 601, column: 9)
!6357 = !DILocation(line: 601, column: 9, scope: !6356)
!6358 = !DILocation(line: 601, column: 9, scope: !6351)
!6359 = !DILocation(line: 602, column: 7, scope: !6356)
!6360 = !DILocation(line: 601, column: 26, scope: !6356)
!6361 = !DILocation(line: 600, column: 35, scope: !6351)
!6362 = !DILocation(line: 600, column: 3, scope: !6351)
!6363 = distinct !{!6363, !6354, !6364}
!6364 = !DILocation(line: 602, column: 7, scope: !6352)
!6365 = !DILocation(line: 604, column: 7, scope: !6366)
!6366 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 604, column: 7)
!6367 = !DILocation(line: 604, column: 9, scope: !6366)
!6368 = !DILocation(line: 604, column: 7, scope: !6041)
!6369 = !DILocation(line: 606, column: 22, scope: !6370)
!6370 = distinct !DILexicalBlock(scope: !6366, file: !3, line: 605, column: 5)
!6371 = !DILocation(line: 606, column: 7, scope: !6370)
!6372 = !DILocation(line: 608, column: 21, scope: !6370)
!6373 = !DILocation(line: 609, column: 5, scope: !6370)
!6374 = !DILocation(line: 617, column: 12, scope: !6375)
!6375 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 617, column: 3)
!6376 = !DILocation(line: 617, column: 10, scope: !6375)
!6377 = !DILocation(line: 617, column: 8, scope: !6375)
!6378 = !DILocation(line: 617, column: 23, scope: !6379)
!6379 = distinct !DILexicalBlock(scope: !6375, file: !3, line: 617, column: 3)
!6380 = !DILocation(line: 617, column: 27, scope: !6379)
!6381 = !DILocation(line: 617, column: 39, scope: !6379)
!6382 = !DILocation(line: 617, column: 37, scope: !6379)
!6383 = !DILocation(line: 617, column: 25, scope: !6379)
!6384 = !DILocation(line: 617, column: 3, scope: !6375)
!6385 = !DILocation(line: 618, column: 22, scope: !6386)
!6386 = distinct !DILexicalBlock(scope: !6379, file: !3, line: 618, column: 9)
!6387 = !DILocation(line: 618, column: 9, scope: !6386)
!6388 = !DILocation(line: 618, column: 25, scope: !6386)
!6389 = !DILocation(line: 618, column: 30, scope: !6386)
!6390 = !DILocation(line: 618, column: 38, scope: !6386)
!6391 = !DILocation(line: 618, column: 9, scope: !6379)
!6392 = !DILocalVariable(name: "j", scope: !6393, file: !3, line: 620, type: !886)
!6393 = distinct !DILexicalBlock(scope: !6386, file: !3, line: 619, column: 7)
!6394 = !DILocation(line: 620, column: 6, scope: !6393)
!6395 = !DILocation(line: 622, column: 9, scope: !6396)
!6396 = distinct !DILexicalBlock(scope: !6393, file: !3, line: 622, column: 2)
!6397 = !DILocation(line: 622, column: 7, scope: !6396)
!6398 = !DILocation(line: 622, column: 14, scope: !6399)
!6399 = distinct !DILexicalBlock(scope: !6396, file: !3, line: 622, column: 2)
!6400 = !DILocation(line: 622, column: 18, scope: !6399)
!6401 = !DILocation(line: 622, column: 16, scope: !6399)
!6402 = !DILocation(line: 622, column: 2, scope: !6396)
!6403 = !DILocation(line: 623, column: 45, scope: !6404)
!6404 = distinct !DILexicalBlock(scope: !6399, file: !3, line: 623, column: 8)
!6405 = !DILocation(line: 623, column: 26, scope: !6404)
!6406 = !DILocation(line: 623, column: 68, scope: !6404)
!6407 = !DILocation(line: 623, column: 49, scope: !6404)
!6408 = !DILocation(line: 623, column: 8, scope: !6404)
!6409 = !DILocation(line: 623, column: 8, scope: !6399)
!6410 = !DILocation(line: 625, column: 23, scope: !6411)
!6411 = distinct !DILexicalBlock(scope: !6404, file: !3, line: 624, column: 6)
!6412 = !DILocation(line: 626, column: 56, scope: !6411)
!6413 = !DILocation(line: 625, column: 8, scope: !6411)
!6414 = !DILocation(line: 627, column: 22, scope: !6411)
!6415 = !DILocation(line: 628, column: 6, scope: !6411)
!6416 = !DILocation(line: 623, column: 70, scope: !6404)
!6417 = !DILocation(line: 622, column: 30, scope: !6399)
!6418 = !DILocation(line: 622, column: 2, scope: !6399)
!6419 = distinct !{!6419, !6402, !6420}
!6420 = !DILocation(line: 628, column: 6, scope: !6396)
!6421 = !DILocation(line: 629, column: 7, scope: !6393)
!6422 = !DILocation(line: 618, column: 42, scope: !6386)
!6423 = !DILocation(line: 617, column: 50, scope: !6379)
!6424 = !DILocation(line: 617, column: 3, scope: !6379)
!6425 = distinct !{!6425, !6384, !6426}
!6426 = !DILocation(line: 629, column: 7, scope: !6375)
!6427 = !DILocation(line: 631, column: 7, scope: !6428)
!6428 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 631, column: 7)
!6429 = !DILocation(line: 631, column: 7, scope: !6041)
!6430 = !DILocation(line: 634, column: 24, scope: !6431)
!6431 = distinct !DILexicalBlock(scope: !6428, file: !3, line: 632, column: 5)
!6432 = !DILocation(line: 634, column: 7, scope: !6431)
!6433 = !DILocation(line: 634, column: 22, scope: !6431)
!6434 = !DILocation(line: 635, column: 25, scope: !6431)
!6435 = !DILocation(line: 636, column: 7, scope: !6431)
!6436 = !DILocation(line: 639, column: 3, scope: !6041)
!6437 = !DILocation(line: 640, column: 1, scope: !6041)
!6438 = distinct !DISubprogram(name: "get_asm_operands_in_out", scope: !3, file: !3, line: 648, type: !6439, scopeLine: 649, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!6439 = !DISubroutineType(types: !6440)
!6440 = !{null, !1028, !6441, !6441}
!6441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !886, size: 64)
!6442 = !DILocalVariable(name: "body", arg: 1, scope: !6438, file: !3, line: 648, type: !1028)
!6443 = !DILocation(line: 648, column: 30, scope: !6438)
!6444 = !DILocalVariable(name: "pout", arg: 2, scope: !6438, file: !3, line: 648, type: !6441)
!6445 = !DILocation(line: 648, column: 41, scope: !6438)
!6446 = !DILocalVariable(name: "pin", arg: 3, scope: !6438, file: !3, line: 648, type: !6441)
!6447 = !DILocation(line: 648, column: 52, scope: !6438)
!6448 = !DILocalVariable(name: "asmop", scope: !6438, file: !3, line: 650, type: !1028)
!6449 = !DILocation(line: 650, column: 7, scope: !6438)
!6450 = !DILocation(line: 650, column: 37, scope: !6438)
!6451 = !DILocation(line: 650, column: 15, scope: !6438)
!6452 = !DILocation(line: 652, column: 10, scope: !6438)
!6453 = !DILocation(line: 652, column: 4, scope: !6438)
!6454 = !DILocation(line: 652, column: 8, scope: !6438)
!6455 = !DILocation(line: 653, column: 23, scope: !6438)
!6456 = !DILocation(line: 653, column: 12, scope: !6438)
!6457 = !DILocation(line: 654, column: 7, scope: !6438)
!6458 = !DILocation(line: 654, column: 5, scope: !6438)
!6459 = !DILocation(line: 655, column: 7, scope: !6438)
!6460 = !DILocation(line: 655, column: 5, scope: !6438)
!6461 = !DILocation(line: 653, column: 4, scope: !6438)
!6462 = !DILocation(line: 653, column: 9, scope: !6438)
!6463 = !DILocation(line: 656, column: 1, scope: !6438)
!6464 = distinct !DISubprogram(name: "move_nan_for_stack_reg", scope: !3, file: !3, line: 1098, type: !4369, scopeLine: 1099, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!6465 = !DILocalVariable(name: "insn", arg: 1, scope: !6464, file: !3, line: 1098, type: !1028)
!6466 = !DILocation(line: 1098, column: 29, scope: !6464)
!6467 = !DILocalVariable(name: "regstack", arg: 2, scope: !6464, file: !3, line: 1098, type: !2004)
!6468 = !DILocation(line: 1098, column: 41, scope: !6464)
!6469 = !DILocalVariable(name: "dest", arg: 3, scope: !6464, file: !3, line: 1098, type: !1028)
!6470 = !DILocation(line: 1098, column: 55, scope: !6464)
!6471 = !DILocalVariable(name: "pat", scope: !6464, file: !3, line: 1100, type: !1028)
!6472 = !DILocation(line: 1100, column: 7, scope: !6464)
!6473 = !DILocation(line: 1102, column: 10, scope: !6464)
!6474 = !DILocation(line: 1102, column: 8, scope: !6464)
!6475 = !DILocation(line: 1103, column: 9, scope: !6464)
!6476 = !DILocation(line: 1103, column: 7, scope: !6464)
!6477 = !DILocation(line: 1104, column: 20, scope: !6464)
!6478 = !DILocation(line: 1104, column: 3, scope: !6464)
!6479 = !DILocation(line: 1104, column: 18, scope: !6464)
!6480 = !DILocation(line: 1105, column: 3, scope: !6464)
!6481 = !DILocation(line: 1105, column: 20, scope: !6464)
!6482 = !DILocation(line: 1107, column: 30, scope: !6464)
!6483 = !DILocation(line: 1107, column: 36, scope: !6464)
!6484 = !DILocation(line: 1107, column: 46, scope: !6464)
!6485 = !DILocation(line: 1107, column: 10, scope: !6464)
!6486 = !DILocation(line: 1107, column: 3, scope: !6464)
!6487 = distinct !DISubprogram(name: "move_for_stack_reg", scope: !3, file: !3, line: 947, type: !4369, scopeLine: 948, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!6488 = !DILocalVariable(name: "insn", arg: 1, scope: !6487, file: !3, line: 947, type: !1028)
!6489 = !DILocation(line: 947, column: 25, scope: !6487)
!6490 = !DILocalVariable(name: "regstack", arg: 2, scope: !6487, file: !3, line: 947, type: !2004)
!6491 = !DILocation(line: 947, column: 37, scope: !6487)
!6492 = !DILocalVariable(name: "pat", arg: 3, scope: !6487, file: !3, line: 947, type: !1028)
!6493 = !DILocation(line: 947, column: 51, scope: !6487)
!6494 = !DILocalVariable(name: "psrc", scope: !6487, file: !3, line: 949, type: !2006)
!6495 = !DILocation(line: 949, column: 8, scope: !6487)
!6496 = !DILocation(line: 949, column: 31, scope: !6487)
!6497 = !DILocation(line: 949, column: 16, scope: !6487)
!6498 = !DILocalVariable(name: "pdest", scope: !6487, file: !3, line: 950, type: !2006)
!6499 = !DILocation(line: 950, column: 8, scope: !6487)
!6500 = !DILocation(line: 950, column: 31, scope: !6487)
!6501 = !DILocation(line: 950, column: 16, scope: !6487)
!6502 = !DILocalVariable(name: "src", scope: !6487, file: !3, line: 951, type: !1028)
!6503 = !DILocation(line: 951, column: 7, scope: !6487)
!6504 = !DILocalVariable(name: "dest", scope: !6487, file: !3, line: 951, type: !1028)
!6505 = !DILocation(line: 951, column: 12, scope: !6487)
!6506 = !DILocalVariable(name: "note", scope: !6487, file: !3, line: 952, type: !1028)
!6507 = !DILocation(line: 952, column: 7, scope: !6487)
!6508 = !DILocalVariable(name: "control_flow_insn_deleted", scope: !6487, file: !3, line: 953, type: !918)
!6509 = !DILocation(line: 953, column: 8, scope: !6487)
!6510 = !DILocation(line: 955, column: 10, scope: !6487)
!6511 = !DILocation(line: 955, column: 9, scope: !6487)
!6512 = !DILocation(line: 955, column: 7, scope: !6487)
!6513 = !DILocation(line: 955, column: 24, scope: !6487)
!6514 = !DILocation(line: 955, column: 23, scope: !6487)
!6515 = !DILocation(line: 955, column: 21, scope: !6487)
!6516 = !DILocation(line: 957, column: 7, scope: !6517)
!6517 = distinct !DILexicalBlock(scope: !6487, file: !3, line: 957, column: 7)
!6518 = !DILocation(line: 957, column: 25, scope: !6517)
!6519 = !DILocation(line: 957, column: 28, scope: !6517)
!6520 = !DILocation(line: 957, column: 7, scope: !6487)
!6521 = !DILocation(line: 962, column: 31, scope: !6522)
!6522 = distinct !DILexicalBlock(scope: !6517, file: !3, line: 958, column: 5)
!6523 = !DILocation(line: 962, column: 47, scope: !6522)
!6524 = !DILocation(line: 962, column: 14, scope: !6522)
!6525 = !DILocation(line: 962, column: 12, scope: !6522)
!6526 = !DILocation(line: 963, column: 11, scope: !6527)
!6527 = distinct !DILexicalBlock(scope: !6522, file: !3, line: 963, column: 11)
!6528 = !DILocation(line: 963, column: 11, scope: !6522)
!6529 = !DILocalVariable(name: "i", scope: !6530, file: !3, line: 965, type: !886)
!6530 = distinct !DILexicalBlock(scope: !6527, file: !3, line: 964, column: 2)
!6531 = !DILocation(line: 965, column: 8, scope: !6530)
!6532 = !DILocation(line: 968, column: 4, scope: !6530)
!6533 = !DILocation(line: 970, column: 13, scope: !6534)
!6534 = distinct !DILexicalBlock(scope: !6530, file: !3, line: 970, column: 4)
!6535 = !DILocation(line: 970, column: 23, scope: !6534)
!6536 = !DILocation(line: 970, column: 11, scope: !6534)
!6537 = !DILocation(line: 970, column: 9, scope: !6534)
!6538 = !DILocation(line: 970, column: 28, scope: !6539)
!6539 = distinct !DILexicalBlock(scope: !6534, file: !3, line: 970, column: 4)
!6540 = !DILocation(line: 970, column: 30, scope: !6539)
!6541 = !DILocation(line: 970, column: 4, scope: !6534)
!6542 = !DILocation(line: 971, column: 10, scope: !6543)
!6543 = distinct !DILexicalBlock(scope: !6539, file: !3, line: 971, column: 10)
!6544 = !DILocation(line: 971, column: 20, scope: !6543)
!6545 = !DILocation(line: 971, column: 24, scope: !6543)
!6546 = !DILocation(line: 971, column: 30, scope: !6543)
!6547 = !DILocation(line: 971, column: 27, scope: !6543)
!6548 = !DILocation(line: 971, column: 10, scope: !6539)
!6549 = !DILocation(line: 972, column: 8, scope: !6543)
!6550 = !DILocation(line: 970, column: 37, scope: !6539)
!6551 = !DILocation(line: 970, column: 4, scope: !6539)
!6552 = distinct !{!6552, !6541, !6553}
!6553 = !DILocation(line: 972, column: 8, scope: !6534)
!6554 = !DILocation(line: 975, column: 4, scope: !6530)
!6555 = !DILocation(line: 979, column: 8, scope: !6556)
!6556 = distinct !DILexicalBlock(scope: !6530, file: !3, line: 979, column: 8)
!6557 = !DILocation(line: 979, column: 10, scope: !6556)
!6558 = !DILocation(line: 979, column: 8, scope: !6530)
!6559 = !DILocation(line: 980, column: 37, scope: !6556)
!6560 = !DILocation(line: 980, column: 43, scope: !6556)
!6561 = !DILocation(line: 980, column: 53, scope: !6556)
!6562 = !DILocation(line: 980, column: 13, scope: !6556)
!6563 = !DILocation(line: 980, column: 6, scope: !6556)
!6564 = !DILocation(line: 985, column: 25, scope: !6565)
!6565 = distinct !DILexicalBlock(scope: !6530, file: !3, line: 985, column: 8)
!6566 = !DILocation(line: 985, column: 43, scope: !6565)
!6567 = !DILocation(line: 985, column: 8, scope: !6565)
!6568 = !DILocation(line: 985, column: 8, scope: !6530)
!6569 = !DILocation(line: 986, column: 21, scope: !6565)
!6570 = !DILocation(line: 986, column: 27, scope: !6565)
!6571 = !DILocation(line: 986, column: 37, scope: !6565)
!6572 = !DILocation(line: 986, column: 6, scope: !6565)
!6573 = !DILocation(line: 989, column: 27, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6565, file: !3, line: 988, column: 6)
!6575 = !DILocation(line: 989, column: 8, scope: !6574)
!6576 = !DILocation(line: 989, column: 18, scope: !6574)
!6577 = !DILocation(line: 989, column: 22, scope: !6574)
!6578 = !DILocation(line: 989, column: 25, scope: !6574)
!6579 = !DILocation(line: 990, column: 8, scope: !6574)
!6580 = !DILocation(line: 991, column: 8, scope: !6574)
!6581 = !DILocation(line: 994, column: 54, scope: !6530)
!6582 = !DILocation(line: 994, column: 33, scope: !6530)
!6583 = !DILocation(line: 994, column: 30, scope: !6530)
!6584 = !DILocation(line: 995, column: 17, scope: !6530)
!6585 = !DILocation(line: 995, column: 4, scope: !6530)
!6586 = !DILocation(line: 996, column: 11, scope: !6530)
!6587 = !DILocation(line: 996, column: 4, scope: !6530)
!6588 = !DILocation(line: 1006, column: 11, scope: !6589)
!6589 = distinct !DILexicalBlock(scope: !6522, file: !3, line: 1006, column: 11)
!6590 = !DILocation(line: 1006, column: 26, scope: !6589)
!6591 = !DILocation(line: 1006, column: 23, scope: !6589)
!6592 = !DILocation(line: 1006, column: 11, scope: !6522)
!6593 = !DILocation(line: 1008, column: 25, scope: !6594)
!6594 = distinct !DILexicalBlock(scope: !6595, file: !3, line: 1008, column: 8)
!6595 = distinct !DILexicalBlock(scope: !6589, file: !3, line: 1007, column: 2)
!6596 = !DILocation(line: 1008, column: 43, scope: !6594)
!6597 = !DILocation(line: 1008, column: 8, scope: !6594)
!6598 = !DILocation(line: 1008, column: 8, scope: !6595)
!6599 = !DILocation(line: 1009, column: 21, scope: !6594)
!6600 = !DILocation(line: 1009, column: 27, scope: !6594)
!6601 = !DILocation(line: 1009, column: 37, scope: !6594)
!6602 = !DILocation(line: 1009, column: 6, scope: !6594)
!6603 = !DILocation(line: 1011, column: 54, scope: !6595)
!6604 = !DILocation(line: 1011, column: 33, scope: !6595)
!6605 = !DILocation(line: 1011, column: 30, scope: !6595)
!6606 = !DILocation(line: 1012, column: 17, scope: !6595)
!6607 = !DILocation(line: 1012, column: 4, scope: !6595)
!6608 = !DILocation(line: 1013, column: 11, scope: !6595)
!6609 = !DILocation(line: 1013, column: 4, scope: !6595)
!6610 = !DILocation(line: 1017, column: 7, scope: !6522)
!6611 = !DILocation(line: 1019, column: 20, scope: !6522)
!6612 = !DILocation(line: 1019, column: 43, scope: !6522)
!6613 = !DILocation(line: 1019, column: 53, scope: !6522)
!6614 = !DILocation(line: 1019, column: 26, scope: !6522)
!6615 = !DILocation(line: 1019, column: 7, scope: !6522)
!6616 = !DILocation(line: 1021, column: 40, scope: !6522)
!6617 = !DILocation(line: 1021, column: 7, scope: !6522)
!6618 = !DILocation(line: 1021, column: 17, scope: !6522)
!6619 = !DILocation(line: 1021, column: 23, scope: !6522)
!6620 = !DILocation(line: 1021, column: 33, scope: !6522)
!6621 = !DILocation(line: 1021, column: 21, scope: !6522)
!6622 = !DILocation(line: 1021, column: 38, scope: !6522)
!6623 = !DILocation(line: 1022, column: 7, scope: !6522)
!6624 = !DILocation(line: 1023, column: 20, scope: !6522)
!6625 = !DILocation(line: 1023, column: 7, scope: !6522)
!6626 = !DILocation(line: 1024, column: 5, scope: !6522)
!6627 = !DILocation(line: 1025, column: 12, scope: !6628)
!6628 = distinct !DILexicalBlock(scope: !6517, file: !3, line: 1025, column: 12)
!6629 = !DILocation(line: 1025, column: 12, scope: !6517)
!6630 = !DILocation(line: 1031, column: 23, scope: !6631)
!6631 = distinct !DILexicalBlock(scope: !6628, file: !3, line: 1026, column: 5)
!6632 = !DILocation(line: 1031, column: 29, scope: !6631)
!6633 = !DILocation(line: 1031, column: 39, scope: !6631)
!6634 = !DILocation(line: 1031, column: 7, scope: !6631)
!6635 = !DILocation(line: 1033, column: 31, scope: !6631)
!6636 = !DILocation(line: 1033, column: 47, scope: !6631)
!6637 = !DILocation(line: 1033, column: 14, scope: !6631)
!6638 = !DILocation(line: 1033, column: 12, scope: !6631)
!6639 = !DILocation(line: 1034, column: 11, scope: !6640)
!6640 = distinct !DILexicalBlock(scope: !6631, file: !3, line: 1034, column: 11)
!6641 = !DILocation(line: 1034, column: 11, scope: !6631)
!6642 = !DILocation(line: 1036, column: 18, scope: !6643)
!6643 = distinct !DILexicalBlock(scope: !6640, file: !3, line: 1035, column: 2)
!6644 = !DILocation(line: 1036, column: 4, scope: !6643)
!6645 = !DILocation(line: 1037, column: 4, scope: !6643)
!6646 = !DILocation(line: 1037, column: 14, scope: !6643)
!6647 = !DILocation(line: 1037, column: 17, scope: !6643)
!6648 = !DILocation(line: 1038, column: 4, scope: !6643)
!6649 = !DILocation(line: 1039, column: 2, scope: !6643)
!6650 = !DILocation(line: 1040, column: 17, scope: !6651)
!6651 = distinct !DILexicalBlock(scope: !6640, file: !3, line: 1040, column: 16)
!6652 = !DILocation(line: 1040, column: 32, scope: !6651)
!6653 = !DILocation(line: 1041, column: 9, scope: !6651)
!6654 = !DILocation(line: 1041, column: 12, scope: !6651)
!6655 = !DILocation(line: 1041, column: 22, scope: !6651)
!6656 = !DILocation(line: 1041, column: 26, scope: !6651)
!6657 = !DILocation(line: 1040, column: 16, scope: !6640)
!6658 = !DILocalVariable(name: "push_rtx", scope: !6659, file: !3, line: 1050, type: !1028)
!6659 = distinct !DILexicalBlock(scope: !6651, file: !3, line: 1042, column: 2)
!6660 = !DILocation(line: 1050, column: 8, scope: !6659)
!6661 = !DILocalVariable(name: "top_stack_reg", scope: !6659, file: !3, line: 1051, type: !1028)
!6662 = !DILocation(line: 1051, column: 8, scope: !6659)
!6663 = !DILocation(line: 1051, column: 24, scope: !6659)
!6664 = !DILocation(line: 1053, column: 26, scope: !6659)
!6665 = !DILocation(line: 1053, column: 41, scope: !6659)
!6666 = !DILocation(line: 1053, column: 15, scope: !6659)
!6667 = !DILocation(line: 1053, column: 13, scope: !6659)
!6668 = !DILocation(line: 1054, column: 22, scope: !6659)
!6669 = !DILocation(line: 1054, column: 32, scope: !6659)
!6670 = !DILocation(line: 1054, column: 4, scope: !6659)
!6671 = !DILocation(line: 1055, column: 18, scope: !6659)
!6672 = !DILocation(line: 1055, column: 34, scope: !6659)
!6673 = !DILocation(line: 1055, column: 4, scope: !6659)
!6674 = !DILocation(line: 1056, column: 2, scope: !6659)
!6675 = !DILocation(line: 1058, column: 20, scope: !6631)
!6676 = !DILocation(line: 1058, column: 7, scope: !6631)
!6677 = !DILocation(line: 1059, column: 5, scope: !6631)
!6678 = !DILocalVariable(name: "pat", scope: !6679, file: !3, line: 1062, type: !1028)
!6679 = distinct !DILexicalBlock(scope: !6628, file: !3, line: 1061, column: 5)
!6680 = !DILocation(line: 1062, column: 11, scope: !6679)
!6681 = !DILocation(line: 1062, column: 17, scope: !6679)
!6682 = !DILocation(line: 1064, column: 7, scope: !6679)
!6683 = !DILocation(line: 1075, column: 11, scope: !6684)
!6684 = distinct !DILexicalBlock(scope: !6679, file: !3, line: 1075, column: 11)
!6685 = !DILocation(line: 1075, column: 26, scope: !6684)
!6686 = !DILocation(line: 1076, column: 4, scope: !6684)
!6687 = !DILocation(line: 1076, column: 7, scope: !6684)
!6688 = !DILocation(line: 1076, column: 24, scope: !6684)
!6689 = !DILocation(line: 1077, column: 4, scope: !6684)
!6690 = !DILocation(line: 1077, column: 7, scope: !6684)
!6691 = !DILocation(line: 1077, column: 38, scope: !6684)
!6692 = !DILocation(line: 1078, column: 4, scope: !6684)
!6693 = !DILocation(line: 1078, column: 7, scope: !6684)
!6694 = !DILocation(line: 1078, column: 48, scope: !6684)
!6695 = !DILocation(line: 1079, column: 4, scope: !6684)
!6696 = !DILocation(line: 1079, column: 7, scope: !6684)
!6697 = !DILocation(line: 1079, column: 47, scope: !6684)
!6698 = !DILocation(line: 1075, column: 11, scope: !6679)
!6699 = !DILocation(line: 1080, column: 18, scope: !6684)
!6700 = !DILocation(line: 1080, column: 24, scope: !6684)
!6701 = !DILocation(line: 1080, column: 34, scope: !6684)
!6702 = !DILocation(line: 1080, column: 2, scope: !6684)
!6703 = !DILocation(line: 1082, column: 2, scope: !6684)
!6704 = !DILocation(line: 1084, column: 7, scope: !6679)
!6705 = !DILocation(line: 1086, column: 40, scope: !6679)
!6706 = !DILocation(line: 1086, column: 7, scope: !6679)
!6707 = !DILocation(line: 1086, column: 17, scope: !6679)
!6708 = !DILocation(line: 1086, column: 23, scope: !6679)
!6709 = !DILocation(line: 1086, column: 33, scope: !6679)
!6710 = !DILocation(line: 1086, column: 21, scope: !6679)
!6711 = !DILocation(line: 1086, column: 38, scope: !6679)
!6712 = !DILocation(line: 1087, column: 7, scope: !6679)
!6713 = !DILocation(line: 1088, column: 20, scope: !6679)
!6714 = !DILocation(line: 1088, column: 7, scope: !6679)
!6715 = !DILocation(line: 1091, column: 10, scope: !6487)
!6716 = !DILocation(line: 1091, column: 3, scope: !6487)
!6717 = !DILocation(line: 1092, column: 1, scope: !6487)
!6718 = distinct !DISubprogram(name: "compare_for_stack_reg", scope: !3, file: !3, line: 1237, type: !5845, scopeLine: 1238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!6719 = !DILocalVariable(name: "insn", arg: 1, scope: !6718, file: !3, line: 1237, type: !1028)
!6720 = !DILocation(line: 1237, column: 28, scope: !6718)
!6721 = !DILocalVariable(name: "regstack", arg: 2, scope: !6718, file: !3, line: 1237, type: !2004)
!6722 = !DILocation(line: 1237, column: 40, scope: !6718)
!6723 = !DILocalVariable(name: "pat_src", arg: 3, scope: !6718, file: !3, line: 1237, type: !1028)
!6724 = !DILocation(line: 1237, column: 54, scope: !6718)
!6725 = !DILocalVariable(name: "src1", scope: !6718, file: !3, line: 1239, type: !2006)
!6726 = !DILocation(line: 1239, column: 8, scope: !6718)
!6727 = !DILocalVariable(name: "src2", scope: !6718, file: !3, line: 1239, type: !2006)
!6728 = !DILocation(line: 1239, column: 15, scope: !6718)
!6729 = !DILocalVariable(name: "src1_note", scope: !6718, file: !3, line: 1240, type: !1028)
!6730 = !DILocation(line: 1240, column: 7, scope: !6718)
!6731 = !DILocalVariable(name: "src2_note", scope: !6718, file: !3, line: 1240, type: !1028)
!6732 = !DILocation(line: 1240, column: 18, scope: !6718)
!6733 = !DILocation(line: 1242, column: 25, scope: !6718)
!6734 = !DILocation(line: 1242, column: 10, scope: !6718)
!6735 = !DILocation(line: 1242, column: 8, scope: !6718)
!6736 = !DILocation(line: 1243, column: 25, scope: !6718)
!6737 = !DILocation(line: 1243, column: 10, scope: !6718)
!6738 = !DILocation(line: 1243, column: 8, scope: !6718)
!6739 = !DILocation(line: 1247, column: 10, scope: !6740)
!6740 = distinct !DILexicalBlock(scope: !6718, file: !3, line: 1247, column: 7)
!6741 = !DILocation(line: 1248, column: 8, scope: !6740)
!6742 = !DILocation(line: 1248, column: 12, scope: !6740)
!6743 = !DILocation(line: 1249, column: 5, scope: !6740)
!6744 = !DILocation(line: 1249, column: 25, scope: !6740)
!6745 = !DILocation(line: 1249, column: 36, scope: !6740)
!6746 = !DILocation(line: 1249, column: 35, scope: !6740)
!6747 = !DILocation(line: 1249, column: 8, scope: !6740)
!6748 = !DILocation(line: 1249, column: 42, scope: !6740)
!6749 = !DILocation(line: 1250, column: 7, scope: !6740)
!6750 = !DILocation(line: 1250, column: 30, scope: !6740)
!6751 = !DILocation(line: 1250, column: 10, scope: !6740)
!6752 = !DILocation(line: 1247, column: 7, scope: !6718)
!6753 = !DILocalVariable(name: "temp", scope: !6754, file: !3, line: 1252, type: !1028)
!6754 = distinct !DILexicalBlock(scope: !6740, file: !3, line: 1251, column: 5)
!6755 = !DILocation(line: 1252, column: 11, scope: !6754)
!6756 = !DILocation(line: 1253, column: 14, scope: !6754)
!6757 = !DILocation(line: 1253, column: 12, scope: !6754)
!6758 = !DILocation(line: 1254, column: 27, scope: !6754)
!6759 = !DILocation(line: 1254, column: 7, scope: !6754)
!6760 = !DILocation(line: 1254, column: 25, scope: !6754)
!6761 = !DILocation(line: 1255, column: 27, scope: !6754)
!6762 = !DILocation(line: 1255, column: 7, scope: !6754)
!6763 = !DILocation(line: 1255, column: 25, scope: !6754)
!6764 = !DILocation(line: 1257, column: 29, scope: !6754)
!6765 = !DILocation(line: 1257, column: 14, scope: !6754)
!6766 = !DILocation(line: 1257, column: 12, scope: !6754)
!6767 = !DILocation(line: 1258, column: 29, scope: !6754)
!6768 = !DILocation(line: 1258, column: 14, scope: !6754)
!6769 = !DILocation(line: 1258, column: 12, scope: !6754)
!6770 = !DILocation(line: 1260, column: 7, scope: !6754)
!6771 = !DILocation(line: 1260, column: 24, scope: !6754)
!6772 = !DILocation(line: 1261, column: 5, scope: !6754)
!6773 = !DILocation(line: 1265, column: 32, scope: !6718)
!6774 = !DILocation(line: 1265, column: 48, scope: !6718)
!6775 = !DILocation(line: 1265, column: 15, scope: !6718)
!6776 = !DILocation(line: 1265, column: 13, scope: !6718)
!6777 = !DILocation(line: 1267, column: 7, scope: !6778)
!6778 = distinct !DILexicalBlock(scope: !6718, file: !3, line: 1267, column: 7)
!6779 = !DILocation(line: 1267, column: 7, scope: !6718)
!6780 = !DILocation(line: 1268, column: 34, scope: !6778)
!6781 = !DILocation(line: 1268, column: 50, scope: !6778)
!6782 = !DILocation(line: 1268, column: 17, scope: !6778)
!6783 = !DILocation(line: 1268, column: 15, scope: !6778)
!6784 = !DILocation(line: 1268, column: 5, scope: !6778)
!6785 = !DILocation(line: 1270, column: 15, scope: !6778)
!6786 = !DILocation(line: 1272, column: 19, scope: !6718)
!6787 = !DILocation(line: 1272, column: 25, scope: !6718)
!6788 = !DILocation(line: 1272, column: 36, scope: !6718)
!6789 = !DILocation(line: 1272, column: 35, scope: !6718)
!6790 = !DILocation(line: 1272, column: 3, scope: !6718)
!6791 = !DILocation(line: 1274, column: 16, scope: !6718)
!6792 = !DILocation(line: 1274, column: 3, scope: !6718)
!6793 = !DILocation(line: 1276, column: 7, scope: !6794)
!6794 = distinct !DILexicalBlock(scope: !6718, file: !3, line: 1276, column: 7)
!6795 = !DILocation(line: 1276, column: 7, scope: !6718)
!6796 = !DILocation(line: 1277, column: 18, scope: !6794)
!6797 = !DILocation(line: 1277, column: 41, scope: !6794)
!6798 = !DILocation(line: 1277, column: 52, scope: !6794)
!6799 = !DILocation(line: 1277, column: 51, scope: !6794)
!6800 = !DILocation(line: 1277, column: 24, scope: !6794)
!6801 = !DILocation(line: 1277, column: 5, scope: !6794)
!6802 = !DILocation(line: 1279, column: 7, scope: !6803)
!6803 = distinct !DILexicalBlock(scope: !6718, file: !3, line: 1279, column: 7)
!6804 = !DILocation(line: 1279, column: 7, scope: !6718)
!6805 = !DILocation(line: 1281, column: 18, scope: !6806)
!6806 = distinct !DILexicalBlock(scope: !6803, file: !3, line: 1280, column: 5)
!6807 = !DILocation(line: 1281, column: 28, scope: !6806)
!6808 = !DILocation(line: 1281, column: 7, scope: !6806)
!6809 = !DILocation(line: 1282, column: 21, scope: !6806)
!6810 = !DILocation(line: 1282, column: 7, scope: !6806)
!6811 = !DILocation(line: 1283, column: 5, scope: !6806)
!6812 = !DILocation(line: 1289, column: 7, scope: !6813)
!6813 = distinct !DILexicalBlock(scope: !6718, file: !3, line: 1289, column: 7)
!6814 = !DILocation(line: 1290, column: 7, scope: !6813)
!6815 = !DILocation(line: 1290, column: 13, scope: !6813)
!6816 = !DILocation(line: 1290, column: 33, scope: !6813)
!6817 = !DILocation(line: 1290, column: 36, scope: !6813)
!6818 = !DILocation(line: 1291, column: 6, scope: !6813)
!6819 = !DILocation(line: 1291, column: 9, scope: !6813)
!6820 = !DILocation(line: 1291, column: 26, scope: !6813)
!6821 = !DILocation(line: 1291, column: 23, scope: !6813)
!6822 = !DILocation(line: 1289, column: 7, scope: !6718)
!6823 = !DILocation(line: 1298, column: 28, scope: !6824)
!6824 = distinct !DILexicalBlock(scope: !6825, file: !3, line: 1298, column: 11)
!6825 = distinct !DILexicalBlock(scope: !6813, file: !3, line: 1292, column: 5)
!6826 = !DILocation(line: 1298, column: 38, scope: !6824)
!6827 = !DILocation(line: 1298, column: 11, scope: !6824)
!6828 = !DILocation(line: 1298, column: 59, scope: !6824)
!6829 = !DILocation(line: 1299, column: 4, scope: !6824)
!6830 = !DILocation(line: 1299, column: 7, scope: !6824)
!6831 = !DILocation(line: 1298, column: 11, scope: !6825)
!6832 = !DILocation(line: 1301, column: 15, scope: !6833)
!6833 = distinct !DILexicalBlock(scope: !6824, file: !3, line: 1300, column: 2)
!6834 = !DILocation(line: 1301, column: 25, scope: !6833)
!6835 = !DILocation(line: 1301, column: 4, scope: !6833)
!6836 = !DILocation(line: 1302, column: 18, scope: !6833)
!6837 = !DILocation(line: 1302, column: 4, scope: !6833)
!6838 = !DILocation(line: 1303, column: 2, scope: !6833)
!6839 = !DILocation(line: 1312, column: 23, scope: !6840)
!6840 = distinct !DILexicalBlock(scope: !6824, file: !3, line: 1305, column: 2)
!6841 = !DILocation(line: 1312, column: 39, scope: !6840)
!6842 = !DILocation(line: 1312, column: 4, scope: !6840)
!6843 = !DILocation(line: 1314, column: 19, scope: !6840)
!6844 = !DILocation(line: 1314, column: 25, scope: !6840)
!6845 = !DILocation(line: 1314, column: 35, scope: !6840)
!6846 = !DILocation(line: 1314, column: 4, scope: !6840)
!6847 = !DILocation(line: 1317, column: 5, scope: !6825)
!6848 = !DILocation(line: 1318, column: 1, scope: !6718)
!6849 = distinct !DISubprogram(name: "remove_regno_note", scope: !3, file: !3, line: 704, type: !6850, scopeLine: 705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!6850 = !DISubroutineType(types: !6851)
!6851 = !{null, !1028, !772, !7}
!6852 = !DILocalVariable(name: "insn", arg: 1, scope: !6849, file: !3, line: 704, type: !1028)
!6853 = !DILocation(line: 704, column: 24, scope: !6849)
!6854 = !DILocalVariable(name: "note", arg: 2, scope: !6849, file: !3, line: 704, type: !772)
!6855 = !DILocation(line: 704, column: 44, scope: !6849)
!6856 = !DILocalVariable(name: "regno", arg: 3, scope: !6849, file: !3, line: 704, type: !7)
!6857 = !DILocation(line: 704, column: 63, scope: !6849)
!6858 = !DILocalVariable(name: "note_link", scope: !6849, file: !3, line: 706, type: !2006)
!6859 = !DILocation(line: 706, column: 8, scope: !6849)
!6860 = !DILocalVariable(name: "this_rtx", scope: !6849, file: !3, line: 706, type: !1028)
!6861 = !DILocation(line: 706, column: 19, scope: !6849)
!6862 = !DILocation(line: 708, column: 16, scope: !6849)
!6863 = !DILocation(line: 708, column: 13, scope: !6849)
!6864 = !DILocation(line: 709, column: 20, scope: !6865)
!6865 = distinct !DILexicalBlock(scope: !6849, file: !3, line: 709, column: 3)
!6866 = !DILocation(line: 709, column: 19, scope: !6865)
!6867 = !DILocation(line: 709, column: 17, scope: !6865)
!6868 = !DILocation(line: 709, column: 8, scope: !6865)
!6869 = !DILocation(line: 709, column: 31, scope: !6870)
!6870 = distinct !DILexicalBlock(scope: !6865, file: !3, line: 709, column: 3)
!6871 = !DILocation(line: 709, column: 3, scope: !6865)
!6872 = !DILocation(line: 710, column: 9, scope: !6873)
!6873 = distinct !DILexicalBlock(scope: !6870, file: !3, line: 710, column: 9)
!6874 = !DILocation(line: 710, column: 37, scope: !6873)
!6875 = !DILocation(line: 710, column: 34, scope: !6873)
!6876 = !DILocation(line: 711, column: 2, scope: !6873)
!6877 = !DILocation(line: 711, column: 5, scope: !6873)
!6878 = !DILocation(line: 711, column: 32, scope: !6873)
!6879 = !DILocation(line: 711, column: 35, scope: !6873)
!6880 = !DILocation(line: 711, column: 65, scope: !6873)
!6881 = !DILocation(line: 711, column: 62, scope: !6873)
!6882 = !DILocation(line: 710, column: 9, scope: !6870)
!6883 = !DILocation(line: 713, column: 15, scope: !6884)
!6884 = distinct !DILexicalBlock(scope: !6873, file: !3, line: 712, column: 7)
!6885 = !DILocation(line: 713, column: 3, scope: !6884)
!6886 = !DILocation(line: 713, column: 13, scope: !6884)
!6887 = !DILocation(line: 714, column: 2, scope: !6884)
!6888 = !DILocation(line: 717, column: 20, scope: !6873)
!6889 = !DILocation(line: 717, column: 17, scope: !6873)
!6890 = !DILocation(line: 709, column: 52, scope: !6870)
!6891 = !DILocation(line: 709, column: 50, scope: !6870)
!6892 = !DILocation(line: 709, column: 3, scope: !6870)
!6893 = distinct !{!6893, !6871, !6894}
!6894 = !DILocation(line: 717, column: 20, scope: !6865)
!6895 = !DILocation(line: 719, column: 3, scope: !6849)
!6896 = !DILocation(line: 720, column: 1, scope: !6849)
!6897 = distinct !DISubprogram(name: "swap_to_top", scope: !3, file: !3, line: 906, type: !6898, scopeLine: 907, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!6898 = !DISubroutineType(types: !6899)
!6899 = !{null, !1028, !2004, !1028, !1028}
!6900 = !DILocalVariable(name: "insn", arg: 1, scope: !6897, file: !3, line: 906, type: !1028)
!6901 = !DILocation(line: 906, column: 18, scope: !6897)
!6902 = !DILocalVariable(name: "regstack", arg: 2, scope: !6897, file: !3, line: 906, type: !2004)
!6903 = !DILocation(line: 906, column: 30, scope: !6897)
!6904 = !DILocalVariable(name: "src1", arg: 3, scope: !6897, file: !3, line: 906, type: !1028)
!6905 = !DILocation(line: 906, column: 44, scope: !6897)
!6906 = !DILocalVariable(name: "src2", arg: 4, scope: !6897, file: !3, line: 906, type: !1028)
!6907 = !DILocation(line: 906, column: 54, scope: !6897)
!6908 = !DILocalVariable(name: "temp_stack", scope: !6897, file: !3, line: 908, type: !910)
!6909 = !DILocation(line: 908, column: 20, scope: !6897)
!6910 = !DILocalVariable(name: "regno", scope: !6897, file: !3, line: 909, type: !886)
!6911 = !DILocation(line: 909, column: 7, scope: !6897)
!6912 = !DILocalVariable(name: "j", scope: !6897, file: !3, line: 909, type: !886)
!6913 = !DILocation(line: 909, column: 14, scope: !6897)
!6914 = !DILocalVariable(name: "k", scope: !6897, file: !3, line: 909, type: !886)
!6915 = !DILocation(line: 909, column: 17, scope: !6897)
!6916 = !DILocalVariable(name: "temp", scope: !6897, file: !3, line: 909, type: !886)
!6917 = !DILocation(line: 909, column: 20, scope: !6897)
!6918 = !DILocation(line: 911, column: 17, scope: !6897)
!6919 = !DILocation(line: 911, column: 16, scope: !6897)
!6920 = !DILocation(line: 914, column: 41, scope: !6897)
!6921 = !DILocation(line: 914, column: 11, scope: !6897)
!6922 = !DILocation(line: 914, column: 9, scope: !6897)
!6923 = !DILocation(line: 915, column: 3, scope: !6897)
!6924 = !DILocation(line: 916, column: 7, scope: !6925)
!6925 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 916, column: 7)
!6926 = !DILocation(line: 916, column: 13, scope: !6925)
!6927 = !DILocation(line: 916, column: 7, scope: !6897)
!6928 = !DILocation(line: 918, column: 22, scope: !6929)
!6929 = distinct !DILexicalBlock(scope: !6925, file: !3, line: 917, column: 5)
!6930 = !DILocation(line: 918, column: 29, scope: !6929)
!6931 = !DILocation(line: 918, column: 35, scope: !6929)
!6932 = !DILocation(line: 918, column: 26, scope: !6929)
!6933 = !DILocation(line: 918, column: 9, scope: !6929)
!6934 = !DILocation(line: 919, column: 22, scope: !6929)
!6935 = !DILocation(line: 919, column: 9, scope: !6929)
!6936 = !DILocation(line: 921, column: 25, scope: !6929)
!6937 = !DILocation(line: 921, column: 29, scope: !6929)
!6938 = !DILocation(line: 921, column: 14, scope: !6929)
!6939 = !DILocation(line: 921, column: 12, scope: !6929)
!6940 = !DILocation(line: 922, column: 38, scope: !6929)
!6941 = !DILocation(line: 922, column: 42, scope: !6929)
!6942 = !DILocation(line: 922, column: 27, scope: !6929)
!6943 = !DILocation(line: 922, column: 18, scope: !6929)
!6944 = !DILocation(line: 922, column: 22, scope: !6929)
!6945 = !DILocation(line: 922, column: 7, scope: !6929)
!6946 = !DILocation(line: 922, column: 25, scope: !6929)
!6947 = !DILocation(line: 923, column: 27, scope: !6929)
!6948 = !DILocation(line: 923, column: 18, scope: !6929)
!6949 = !DILocation(line: 923, column: 22, scope: !6929)
!6950 = !DILocation(line: 923, column: 7, scope: !6929)
!6951 = !DILocation(line: 923, column: 25, scope: !6929)
!6952 = !DILocation(line: 924, column: 5, scope: !6929)
!6953 = !DILocation(line: 927, column: 41, scope: !6897)
!6954 = !DILocation(line: 927, column: 11, scope: !6897)
!6955 = !DILocation(line: 927, column: 9, scope: !6897)
!6956 = !DILocation(line: 928, column: 3, scope: !6897)
!6957 = !DILocation(line: 929, column: 7, scope: !6958)
!6958 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 929, column: 7)
!6959 = !DILocation(line: 929, column: 13, scope: !6958)
!6960 = !DILocation(line: 929, column: 7, scope: !6897)
!6961 = !DILocation(line: 931, column: 22, scope: !6962)
!6962 = distinct !DILexicalBlock(scope: !6958, file: !3, line: 930, column: 5)
!6963 = !DILocation(line: 931, column: 29, scope: !6962)
!6964 = !DILocation(line: 931, column: 35, scope: !6962)
!6965 = !DILocation(line: 931, column: 26, scope: !6962)
!6966 = !DILocation(line: 931, column: 9, scope: !6962)
!6967 = !DILocation(line: 932, column: 22, scope: !6962)
!6968 = !DILocation(line: 932, column: 26, scope: !6962)
!6969 = !DILocation(line: 932, column: 9, scope: !6962)
!6970 = !DILocation(line: 934, column: 25, scope: !6962)
!6971 = !DILocation(line: 934, column: 29, scope: !6962)
!6972 = !DILocation(line: 934, column: 14, scope: !6962)
!6973 = !DILocation(line: 934, column: 12, scope: !6962)
!6974 = !DILocation(line: 935, column: 38, scope: !6962)
!6975 = !DILocation(line: 935, column: 42, scope: !6962)
!6976 = !DILocation(line: 935, column: 27, scope: !6962)
!6977 = !DILocation(line: 935, column: 18, scope: !6962)
!6978 = !DILocation(line: 935, column: 22, scope: !6962)
!6979 = !DILocation(line: 935, column: 7, scope: !6962)
!6980 = !DILocation(line: 935, column: 25, scope: !6962)
!6981 = !DILocation(line: 936, column: 27, scope: !6962)
!6982 = !DILocation(line: 936, column: 18, scope: !6962)
!6983 = !DILocation(line: 936, column: 22, scope: !6962)
!6984 = !DILocation(line: 936, column: 7, scope: !6962)
!6985 = !DILocation(line: 936, column: 25, scope: !6962)
!6986 = !DILocation(line: 937, column: 5, scope: !6962)
!6987 = !DILocation(line: 939, column: 17, scope: !6897)
!6988 = !DILocation(line: 939, column: 23, scope: !6897)
!6989 = !DILocation(line: 939, column: 3, scope: !6897)
!6990 = !DILocation(line: 940, column: 1, scope: !6897)
!6991 = distinct !DISubprogram(name: "swap_rtx_condition", scope: !3, file: !3, line: 1146, type: !6042, scopeLine: 1147, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!6992 = !DILocalVariable(name: "insn", arg: 1, scope: !6991, file: !3, line: 1146, type: !1028)
!6993 = !DILocation(line: 1146, column: 25, scope: !6991)
!6994 = !DILocalVariable(name: "pat", scope: !6991, file: !3, line: 1148, type: !1028)
!6995 = !DILocation(line: 1148, column: 7, scope: !6991)
!6996 = !DILocation(line: 1148, column: 13, scope: !6991)
!6997 = !DILocation(line: 1152, column: 7, scope: !6998)
!6998 = distinct !DILexicalBlock(scope: !6991, file: !3, line: 1152, column: 7)
!6999 = !DILocation(line: 1152, column: 22, scope: !6998)
!7000 = !DILocation(line: 1153, column: 7, scope: !6998)
!7001 = !DILocation(line: 1153, column: 10, scope: !6998)
!7002 = !DILocation(line: 1154, column: 7, scope: !6998)
!7003 = !DILocation(line: 1154, column: 10, scope: !6998)
!7004 = !DILocation(line: 1154, column: 33, scope: !6998)
!7005 = !DILocation(line: 1152, column: 7, scope: !6991)
!7006 = !DILocation(line: 1156, column: 31, scope: !7007)
!7007 = distinct !DILexicalBlock(scope: !6998, file: !3, line: 1155, column: 5)
!7008 = !DILocation(line: 1156, column: 14, scope: !7007)
!7009 = !DILocation(line: 1156, column: 12, scope: !7007)
!7010 = !DILocation(line: 1157, column: 11, scope: !7011)
!7011 = distinct !DILexicalBlock(scope: !7007, file: !3, line: 1157, column: 11)
!7012 = !DILocation(line: 1157, column: 16, scope: !7011)
!7013 = !DILocation(line: 1157, column: 11, scope: !7007)
!7014 = !DILocation(line: 1158, column: 2, scope: !7011)
!7015 = !DILocation(line: 1159, column: 13, scope: !7007)
!7016 = !DILocation(line: 1159, column: 11, scope: !7007)
!7017 = !DILocation(line: 1160, column: 5, scope: !7007)
!7018 = !DILocation(line: 1166, column: 7, scope: !7019)
!7019 = distinct !DILexicalBlock(scope: !6991, file: !3, line: 1166, column: 7)
!7020 = !DILocation(line: 1166, column: 22, scope: !7019)
!7021 = !DILocation(line: 1167, column: 7, scope: !7019)
!7022 = !DILocation(line: 1167, column: 10, scope: !7019)
!7023 = !DILocation(line: 1167, column: 35, scope: !7019)
!7024 = !DILocation(line: 1168, column: 7, scope: !7019)
!7025 = !DILocation(line: 1168, column: 10, scope: !7019)
!7026 = !DILocation(line: 1168, column: 34, scope: !7019)
!7027 = !DILocation(line: 1166, column: 7, scope: !6991)
!7028 = !DILocalVariable(name: "dest", scope: !7029, file: !3, line: 1170, type: !1028)
!7029 = distinct !DILexicalBlock(scope: !7019, file: !3, line: 1169, column: 5)
!7030 = !DILocation(line: 1170, column: 11, scope: !7029)
!7031 = !DILocation(line: 1170, column: 18, scope: !7029)
!7032 = !DILocation(line: 1174, column: 7, scope: !7029)
!7033 = !DILocation(line: 1174, column: 14, scope: !7029)
!7034 = !DILocation(line: 1174, column: 22, scope: !7029)
!7035 = !DILocation(line: 1174, column: 19, scope: !7029)
!7036 = !DILocation(line: 1176, column: 11, scope: !7037)
!7037 = distinct !DILexicalBlock(scope: !7029, file: !3, line: 1175, column: 2)
!7038 = !DILocation(line: 1176, column: 9, scope: !7037)
!7039 = !DILocation(line: 1177, column: 8, scope: !7040)
!7040 = distinct !DILexicalBlock(scope: !7037, file: !3, line: 1177, column: 8)
!7041 = !DILocation(line: 1177, column: 22, scope: !7040)
!7042 = !DILocation(line: 1177, column: 42, scope: !7040)
!7043 = !DILocation(line: 1177, column: 48, scope: !7040)
!7044 = !DILocation(line: 1177, column: 25, scope: !7040)
!7045 = !DILocation(line: 1177, column: 8, scope: !7037)
!7046 = !DILocation(line: 1178, column: 6, scope: !7040)
!7047 = !DILocation(line: 1179, column: 8, scope: !7048)
!7048 = distinct !DILexicalBlock(scope: !7037, file: !3, line: 1179, column: 8)
!7049 = !DILocation(line: 1179, column: 8, scope: !7037)
!7050 = !DILocation(line: 1180, column: 6, scope: !7048)
!7051 = distinct !{!7051, !7032, !7052}
!7052 = !DILocation(line: 1181, column: 2, scope: !7029)
!7053 = !DILocation(line: 1184, column: 11, scope: !7054)
!7054 = distinct !DILexicalBlock(scope: !7029, file: !3, line: 1184, column: 11)
!7055 = !DILocation(line: 1184, column: 19, scope: !7054)
!7056 = !DILocation(line: 1184, column: 16, scope: !7054)
!7057 = !DILocation(line: 1184, column: 11, scope: !7029)
!7058 = !DILocation(line: 1185, column: 2, scope: !7054)
!7059 = !DILocation(line: 1190, column: 13, scope: !7029)
!7060 = !DILocation(line: 1190, column: 11, scope: !7029)
!7061 = !DILocation(line: 1191, column: 11, scope: !7062)
!7062 = distinct !DILexicalBlock(scope: !7029, file: !3, line: 1191, column: 11)
!7063 = !DILocation(line: 1191, column: 26, scope: !7062)
!7064 = !DILocation(line: 1192, column: 4, scope: !7062)
!7065 = !DILocation(line: 1192, column: 7, scope: !7062)
!7066 = !DILocation(line: 1192, column: 32, scope: !7062)
!7067 = !DILocation(line: 1193, column: 4, scope: !7062)
!7068 = !DILocation(line: 1193, column: 7, scope: !7062)
!7069 = !DILocation(line: 1193, column: 31, scope: !7062)
!7070 = !DILocation(line: 1194, column: 4, scope: !7062)
!7071 = !DILocation(line: 1194, column: 24, scope: !7062)
!7072 = !DILocation(line: 1194, column: 30, scope: !7062)
!7073 = !DILocation(line: 1194, column: 9, scope: !7062)
!7074 = !DILocation(line: 1191, column: 11, scope: !7029)
!7075 = !DILocation(line: 1195, column: 2, scope: !7062)
!7076 = !DILocation(line: 1198, column: 31, scope: !7029)
!7077 = !DILocation(line: 1198, column: 14, scope: !7029)
!7078 = !DILocation(line: 1198, column: 12, scope: !7029)
!7079 = !DILocation(line: 1199, column: 11, scope: !7080)
!7080 = distinct !DILexicalBlock(scope: !7029, file: !3, line: 1199, column: 11)
!7081 = !DILocation(line: 1199, column: 16, scope: !7080)
!7082 = !DILocation(line: 1199, column: 11, scope: !7029)
!7083 = !DILocation(line: 1200, column: 2, scope: !7080)
!7084 = !DILocation(line: 1201, column: 13, scope: !7029)
!7085 = !DILocation(line: 1201, column: 11, scope: !7029)
!7086 = !DILocation(line: 1202, column: 5, scope: !7029)
!7087 = !DILocation(line: 1204, column: 29, scope: !7088)
!7088 = distinct !DILexicalBlock(scope: !6991, file: !3, line: 1204, column: 7)
!7089 = !DILocation(line: 1204, column: 7, scope: !7088)
!7090 = !DILocation(line: 1204, column: 7, scope: !6991)
!7091 = !DILocalVariable(name: "fail", scope: !7092, file: !3, line: 1206, type: !886)
!7092 = distinct !DILexicalBlock(scope: !7088, file: !3, line: 1205, column: 5)
!7093 = !DILocation(line: 1206, column: 11, scope: !7092)
!7094 = !DILocation(line: 1207, column: 7, scope: !7092)
!7095 = !DILocation(line: 1207, column: 24, scope: !7092)
!7096 = !DILocation(line: 1208, column: 27, scope: !7097)
!7097 = distinct !DILexicalBlock(scope: !7092, file: !3, line: 1208, column: 11)
!7098 = !DILocation(line: 1208, column: 11, scope: !7097)
!7099 = !DILocation(line: 1208, column: 33, scope: !7097)
!7100 = !DILocation(line: 1208, column: 11, scope: !7092)
!7101 = !DILocation(line: 1209, column: 7, scope: !7097)
!7102 = !DILocation(line: 1209, column: 2, scope: !7097)
!7103 = !DILocation(line: 1212, column: 33, scope: !7104)
!7104 = distinct !DILexicalBlock(scope: !7097, file: !3, line: 1212, column: 16)
!7105 = !DILocation(line: 1212, column: 39, scope: !7104)
!7106 = !DILocation(line: 1212, column: 18, scope: !7104)
!7107 = !DILocation(line: 1212, column: 16, scope: !7097)
!7108 = !DILocation(line: 1214, column: 28, scope: !7109)
!7109 = distinct !DILexicalBlock(scope: !7104, file: !3, line: 1213, column: 2)
!7110 = !DILocation(line: 1214, column: 11, scope: !7109)
!7111 = !DILocation(line: 1214, column: 9, scope: !7109)
!7112 = !DILocation(line: 1215, column: 9, scope: !7113)
!7113 = distinct !DILexicalBlock(scope: !7109, file: !3, line: 1215, column: 8)
!7114 = !DILocation(line: 1215, column: 14, scope: !7113)
!7115 = !DILocation(line: 1215, column: 38, scope: !7113)
!7116 = !DILocation(line: 1215, column: 18, scope: !7113)
!7117 = !DILocation(line: 1215, column: 8, scope: !7109)
!7118 = !DILocation(line: 1216, column: 11, scope: !7113)
!7119 = !DILocation(line: 1216, column: 6, scope: !7113)
!7120 = !DILocation(line: 1217, column: 2, scope: !7109)
!7121 = !DILocation(line: 1218, column: 11, scope: !7122)
!7122 = distinct !DILexicalBlock(scope: !7092, file: !3, line: 1218, column: 11)
!7123 = !DILocation(line: 1218, column: 11, scope: !7092)
!7124 = !DILocation(line: 1220, column: 26, scope: !7125)
!7125 = distinct !DILexicalBlock(scope: !7122, file: !3, line: 1219, column: 2)
!7126 = !DILocation(line: 1220, column: 4, scope: !7125)
!7127 = !DILocation(line: 1221, column: 4, scope: !7125)
!7128 = !DILocation(line: 1223, column: 7, scope: !7092)
!7129 = !DILocation(line: 1225, column: 3, scope: !6991)
!7130 = !DILocation(line: 1226, column: 1, scope: !6991)
!7131 = distinct !DISubprogram(name: "pop_stack", scope: !3, file: !3, line: 384, type: !7132, scopeLine: 385, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!7132 = !DISubroutineType(types: !7133)
!7133 = !{null, !2004, !886}
!7134 = !DILocalVariable(name: "regstack", arg: 1, scope: !7131, file: !3, line: 384, type: !2004)
!7135 = !DILocation(line: 384, column: 18, scope: !7131)
!7136 = !DILocalVariable(name: "regno", arg: 2, scope: !7131, file: !3, line: 384, type: !886)
!7137 = !DILocation(line: 384, column: 32, scope: !7131)
!7138 = !DILocalVariable(name: "top", scope: !7131, file: !3, line: 386, type: !886)
!7139 = !DILocation(line: 386, column: 7, scope: !7131)
!7140 = !DILocation(line: 386, column: 13, scope: !7131)
!7141 = !DILocation(line: 386, column: 23, scope: !7131)
!7142 = !DILocation(line: 388, column: 3, scope: !7131)
!7143 = !DILocation(line: 389, column: 3, scope: !7131)
!7144 = !DILocation(line: 389, column: 13, scope: !7131)
!7145 = !DILocation(line: 389, column: 16, scope: !7131)
!7146 = !DILocation(line: 391, column: 7, scope: !7147)
!7147 = distinct !DILexicalBlock(scope: !7131, file: !3, line: 391, column: 7)
!7148 = !DILocation(line: 391, column: 17, scope: !7147)
!7149 = !DILocation(line: 391, column: 22, scope: !7147)
!7150 = !DILocation(line: 391, column: 30, scope: !7147)
!7151 = !DILocation(line: 391, column: 27, scope: !7147)
!7152 = !DILocation(line: 391, column: 7, scope: !7131)
!7153 = !DILocalVariable(name: "i", scope: !7154, file: !3, line: 393, type: !886)
!7154 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 392, column: 5)
!7155 = !DILocation(line: 393, column: 11, scope: !7154)
!7156 = !DILocation(line: 394, column: 16, scope: !7157)
!7157 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 394, column: 7)
!7158 = !DILocation(line: 394, column: 26, scope: !7157)
!7159 = !DILocation(line: 394, column: 14, scope: !7157)
!7160 = !DILocation(line: 394, column: 12, scope: !7157)
!7161 = !DILocation(line: 394, column: 31, scope: !7162)
!7162 = distinct !DILexicalBlock(scope: !7157, file: !3, line: 394, column: 7)
!7163 = !DILocation(line: 394, column: 33, scope: !7162)
!7164 = !DILocation(line: 394, column: 7, scope: !7157)
!7165 = !DILocation(line: 395, column: 6, scope: !7166)
!7166 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 395, column: 6)
!7167 = !DILocation(line: 395, column: 16, scope: !7166)
!7168 = !DILocation(line: 395, column: 21, scope: !7166)
!7169 = !DILocation(line: 395, column: 27, scope: !7166)
!7170 = !DILocation(line: 395, column: 24, scope: !7166)
!7171 = !DILocation(line: 395, column: 6, scope: !7162)
!7172 = !DILocalVariable(name: "j", scope: !7173, file: !3, line: 397, type: !886)
!7173 = distinct !DILexicalBlock(scope: !7166, file: !3, line: 396, column: 4)
!7174 = !DILocation(line: 397, column: 10, scope: !7173)
!7175 = !DILocation(line: 398, column: 15, scope: !7176)
!7176 = distinct !DILexicalBlock(scope: !7173, file: !3, line: 398, column: 6)
!7177 = !DILocation(line: 398, column: 13, scope: !7176)
!7178 = !DILocation(line: 398, column: 11, scope: !7176)
!7179 = !DILocation(line: 398, column: 18, scope: !7180)
!7180 = distinct !DILexicalBlock(scope: !7176, file: !3, line: 398, column: 6)
!7181 = !DILocation(line: 398, column: 22, scope: !7180)
!7182 = !DILocation(line: 398, column: 20, scope: !7180)
!7183 = !DILocation(line: 398, column: 6, scope: !7176)
!7184 = !DILocation(line: 399, column: 28, scope: !7180)
!7185 = !DILocation(line: 399, column: 38, scope: !7180)
!7186 = !DILocation(line: 399, column: 43, scope: !7180)
!7187 = !DILocation(line: 399, column: 45, scope: !7180)
!7188 = !DILocation(line: 399, column: 8, scope: !7180)
!7189 = !DILocation(line: 399, column: 18, scope: !7180)
!7190 = !DILocation(line: 399, column: 23, scope: !7180)
!7191 = !DILocation(line: 399, column: 26, scope: !7180)
!7192 = !DILocation(line: 398, column: 28, scope: !7180)
!7193 = !DILocation(line: 398, column: 6, scope: !7180)
!7194 = distinct !{!7194, !7183, !7195}
!7195 = !DILocation(line: 399, column: 48, scope: !7176)
!7196 = !DILocation(line: 400, column: 6, scope: !7173)
!7197 = !DILocation(line: 394, column: 40, scope: !7162)
!7198 = !DILocation(line: 394, column: 7, scope: !7162)
!7199 = distinct !{!7199, !7164, !7200}
!7200 = !DILocation(line: 401, column: 4, scope: !7157)
!7201 = !DILocation(line: 402, column: 5, scope: !7154)
!7202 = !DILocation(line: 403, column: 1, scope: !7131)
!7203 = distinct !DISubprogram(name: "next_flags_user", scope: !3, file: !3, line: 340, type: !7204, scopeLine: 341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!7204 = !DISubroutineType(types: !7205)
!7205 = !{!1028, !1028}
!7206 = !DILocalVariable(name: "insn", arg: 1, scope: !7203, file: !3, line: 340, type: !1028)
!7207 = !DILocation(line: 340, column: 22, scope: !7203)
!7208 = !DILocation(line: 345, column: 3, scope: !7203)
!7209 = !DILocation(line: 345, column: 10, scope: !7203)
!7210 = !DILocation(line: 345, column: 18, scope: !7203)
!7211 = !DILocation(line: 345, column: 15, scope: !7203)
!7212 = !DILocation(line: 347, column: 14, scope: !7213)
!7213 = distinct !DILexicalBlock(scope: !7203, file: !3, line: 346, column: 5)
!7214 = !DILocation(line: 347, column: 12, scope: !7213)
!7215 = !DILocation(line: 349, column: 11, scope: !7216)
!7216 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 349, column: 11)
!7217 = !DILocation(line: 349, column: 25, scope: !7216)
!7218 = !DILocation(line: 349, column: 45, scope: !7216)
!7219 = !DILocation(line: 349, column: 61, scope: !7216)
!7220 = !DILocation(line: 349, column: 28, scope: !7216)
!7221 = !DILocation(line: 349, column: 11, scope: !7213)
!7222 = !DILocation(line: 350, column: 9, scope: !7216)
!7223 = !DILocation(line: 350, column: 2, scope: !7216)
!7224 = !DILocation(line: 352, column: 11, scope: !7225)
!7225 = distinct !DILexicalBlock(scope: !7213, file: !3, line: 352, column: 11)
!7226 = !DILocation(line: 352, column: 11, scope: !7213)
!7227 = !DILocation(line: 353, column: 2, scope: !7225)
!7228 = distinct !{!7228, !7208, !7229}
!7229 = !DILocation(line: 354, column: 5, scope: !7203)
!7230 = !DILocation(line: 355, column: 3, scope: !7203)
!7231 = !DILocation(line: 356, column: 1, scope: !7203)
!7232 = distinct !DISubprogram(name: "swap_rtx_condition_1", scope: !3, file: !3, line: 1115, type: !6042, scopeLine: 1116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!7233 = !DILocalVariable(name: "pat", arg: 1, scope: !7232, file: !3, line: 1115, type: !1028)
!7234 = !DILocation(line: 1115, column: 27, scope: !7232)
!7235 = !DILocalVariable(name: "fmt", scope: !7232, file: !3, line: 1117, type: !1053)
!7236 = !DILocation(line: 1117, column: 15, scope: !7232)
!7237 = !DILocalVariable(name: "i", scope: !7232, file: !3, line: 1118, type: !886)
!7238 = !DILocation(line: 1118, column: 7, scope: !7232)
!7239 = !DILocalVariable(name: "r", scope: !7232, file: !3, line: 1118, type: !886)
!7240 = !DILocation(line: 1118, column: 10, scope: !7232)
!7241 = !DILocation(line: 1120, column: 7, scope: !7242)
!7242 = distinct !DILexicalBlock(scope: !7232, file: !3, line: 1120, column: 7)
!7243 = !DILocation(line: 1120, column: 7, scope: !7232)
!7244 = !DILocation(line: 1122, column: 7, scope: !7245)
!7245 = distinct !DILexicalBlock(scope: !7242, file: !3, line: 1121, column: 5)
!7246 = !DILocation(line: 1123, column: 9, scope: !7245)
!7247 = !DILocation(line: 1124, column: 5, scope: !7245)
!7248 = !DILocation(line: 1127, column: 13, scope: !7249)
!7249 = distinct !DILexicalBlock(scope: !7242, file: !3, line: 1126, column: 5)
!7250 = !DILocation(line: 1127, column: 11, scope: !7249)
!7251 = !DILocation(line: 1128, column: 16, scope: !7252)
!7252 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 1128, column: 7)
!7253 = !DILocation(line: 1128, column: 48, scope: !7252)
!7254 = !DILocation(line: 1128, column: 14, scope: !7252)
!7255 = !DILocation(line: 1128, column: 12, scope: !7252)
!7256 = !DILocation(line: 1128, column: 53, scope: !7257)
!7257 = distinct !DILexicalBlock(scope: !7252, file: !3, line: 1128, column: 7)
!7258 = !DILocation(line: 1128, column: 55, scope: !7257)
!7259 = !DILocation(line: 1128, column: 7, scope: !7252)
!7260 = !DILocation(line: 1130, column: 8, scope: !7261)
!7261 = distinct !DILexicalBlock(scope: !7262, file: !3, line: 1130, column: 8)
!7262 = distinct !DILexicalBlock(scope: !7257, file: !3, line: 1129, column: 2)
!7263 = !DILocation(line: 1130, column: 12, scope: !7261)
!7264 = !DILocation(line: 1130, column: 15, scope: !7261)
!7265 = !DILocation(line: 1130, column: 8, scope: !7262)
!7266 = !DILocalVariable(name: "j", scope: !7267, file: !3, line: 1132, type: !886)
!7267 = distinct !DILexicalBlock(scope: !7261, file: !3, line: 1131, column: 6)
!7268 = !DILocation(line: 1132, column: 12, scope: !7267)
!7269 = !DILocation(line: 1134, column: 17, scope: !7270)
!7270 = distinct !DILexicalBlock(scope: !7267, file: !3, line: 1134, column: 8)
!7271 = !DILocation(line: 1134, column: 34, scope: !7270)
!7272 = !DILocation(line: 1134, column: 15, scope: !7270)
!7273 = !DILocation(line: 1134, column: 13, scope: !7270)
!7274 = !DILocation(line: 1134, column: 39, scope: !7275)
!7275 = distinct !DILexicalBlock(scope: !7270, file: !3, line: 1134, column: 8)
!7276 = !DILocation(line: 1134, column: 41, scope: !7275)
!7277 = !DILocation(line: 1134, column: 8, scope: !7270)
!7278 = !DILocation(line: 1135, column: 30, scope: !7275)
!7279 = !DILocation(line: 1135, column: 8, scope: !7275)
!7280 = !DILocation(line: 1135, column: 5, scope: !7275)
!7281 = !DILocation(line: 1135, column: 3, scope: !7275)
!7282 = !DILocation(line: 1134, column: 48, scope: !7275)
!7283 = !DILocation(line: 1134, column: 8, scope: !7275)
!7284 = distinct !{!7284, !7277, !7285}
!7285 = !DILocation(line: 1135, column: 49, scope: !7270)
!7286 = !DILocation(line: 1136, column: 6, scope: !7267)
!7287 = !DILocation(line: 1137, column: 13, scope: !7288)
!7288 = distinct !DILexicalBlock(scope: !7261, file: !3, line: 1137, column: 13)
!7289 = !DILocation(line: 1137, column: 17, scope: !7288)
!7290 = !DILocation(line: 1137, column: 20, scope: !7288)
!7291 = !DILocation(line: 1137, column: 13, scope: !7261)
!7292 = !DILocation(line: 1138, column: 33, scope: !7288)
!7293 = !DILocation(line: 1138, column: 11, scope: !7288)
!7294 = !DILocation(line: 1138, column: 8, scope: !7288)
!7295 = !DILocation(line: 1138, column: 6, scope: !7288)
!7296 = !DILocation(line: 1139, column: 2, scope: !7262)
!7297 = !DILocation(line: 1128, column: 62, scope: !7257)
!7298 = !DILocation(line: 1128, column: 7, scope: !7257)
!7299 = distinct !{!7299, !7259, !7300}
!7300 = !DILocation(line: 1139, column: 2, scope: !7252)
!7301 = !DILocation(line: 1142, column: 10, scope: !7232)
!7302 = !DILocation(line: 1142, column: 3, scope: !7232)
!7303 = distinct !DISubprogram(name: "recog_memoized", scope: !7304, file: !7304, line: 150, type: !6042, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!7304 = !DIFile(filename: "./recog.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7305 = !DILocalVariable(name: "insn", arg: 1, scope: !7303, file: !7304, line: 150, type: !1028)
!7306 = !DILocation(line: 150, column: 21, scope: !7303)
!7307 = !DILocation(line: 152, column: 7, scope: !7308)
!7308 = distinct !DILexicalBlock(scope: !7303, file: !7304, line: 152, column: 7)
!7309 = !DILocation(line: 152, column: 24, scope: !7308)
!7310 = !DILocation(line: 152, column: 7, scope: !7303)
!7311 = !DILocation(line: 153, column: 31, scope: !7308)
!7312 = !DILocation(line: 153, column: 47, scope: !7308)
!7313 = !DILocation(line: 153, column: 24, scope: !7308)
!7314 = !DILocation(line: 153, column: 5, scope: !7308)
!7315 = !DILocation(line: 153, column: 22, scope: !7308)
!7316 = !DILocation(line: 154, column: 10, scope: !7303)
!7317 = !DILocation(line: 154, column: 3, scope: !7303)
!7318 = distinct !DISubprogram(name: "compensate_edge", scope: !3, file: !3, line: 2730, type: !7319, scopeLine: 2731, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2067)
!7319 = !DISubroutineType(types: !7320)
!7320 = !{!918, !1014}
!7321 = !DILocalVariable(name: "e", arg: 1, scope: !7318, file: !3, line: 2730, type: !1014)
!7322 = !DILocation(line: 2730, column: 23, scope: !7318)
!7323 = !DILocalVariable(name: "source", scope: !7318, file: !3, line: 2732, type: !997)
!7324 = !DILocation(line: 2732, column: 15, scope: !7318)
!7325 = !DILocation(line: 2732, column: 24, scope: !7318)
!7326 = !DILocation(line: 2732, column: 27, scope: !7318)
!7327 = !DILocalVariable(name: "target", scope: !7318, file: !3, line: 2732, type: !997)
!7328 = !DILocation(line: 2732, column: 32, scope: !7318)
!7329 = !DILocation(line: 2732, column: 41, scope: !7318)
!7330 = !DILocation(line: 2732, column: 44, scope: !7318)
!7331 = !DILocalVariable(name: "target_stack", scope: !7318, file: !3, line: 2733, type: !2004)
!7332 = !DILocation(line: 2733, column: 9, scope: !7318)
!7333 = !DILocation(line: 2733, column: 25, scope: !7318)
!7334 = !DILocation(line: 2733, column: 46, scope: !7318)
!7335 = !DILocalVariable(name: "source_stack", scope: !7318, file: !3, line: 2734, type: !2004)
!7336 = !DILocation(line: 2734, column: 9, scope: !7318)
!7337 = !DILocation(line: 2734, column: 25, scope: !7318)
!7338 = !DILocation(line: 2734, column: 46, scope: !7318)
!7339 = !DILocalVariable(name: "regstack", scope: !7318, file: !3, line: 2735, type: !910)
!7340 = !DILocation(line: 2735, column: 20, scope: !7318)
!7341 = !DILocalVariable(name: "reg", scope: !7318, file: !3, line: 2736, type: !886)
!7342 = !DILocation(line: 2736, column: 7, scope: !7318)
!7343 = !DILocation(line: 2738, column: 7, scope: !7344)
!7344 = distinct !DILexicalBlock(scope: !7318, file: !3, line: 2738, column: 7)
!7345 = !DILocation(line: 2738, column: 7, scope: !7318)
!7346 = !DILocation(line: 2739, column: 14, scope: !7344)
!7347 = !DILocation(line: 2739, column: 42, scope: !7344)
!7348 = !DILocation(line: 2739, column: 50, scope: !7344)
!7349 = !DILocation(line: 2739, column: 57, scope: !7344)
!7350 = !DILocation(line: 2739, column: 65, scope: !7344)
!7351 = !DILocation(line: 2739, column: 5, scope: !7344)
!7352 = !DILocation(line: 2741, column: 3, scope: !7318)
!7353 = !DILocation(line: 2744, column: 7, scope: !7354)
!7354 = distinct !DILexicalBlock(scope: !7318, file: !3, line: 2744, column: 7)
!7355 = !DILocation(line: 2744, column: 21, scope: !7354)
!7356 = !DILocation(line: 2744, column: 28, scope: !7354)
!7357 = !DILocation(line: 2744, column: 42, scope: !7354)
!7358 = !DILocation(line: 2744, column: 25, scope: !7354)
!7359 = !DILocation(line: 2744, column: 7, scope: !7318)
!7360 = !DILocation(line: 2746, column: 18, scope: !7361)
!7361 = distinct !DILexicalBlock(scope: !7362, file: !3, line: 2746, column: 7)
!7362 = distinct !DILexicalBlock(scope: !7354, file: !3, line: 2745, column: 5)
!7363 = !DILocation(line: 2746, column: 32, scope: !7361)
!7364 = !DILocation(line: 2746, column: 16, scope: !7361)
!7365 = !DILocation(line: 2746, column: 12, scope: !7361)
!7366 = !DILocation(line: 2746, column: 37, scope: !7367)
!7367 = distinct !DILexicalBlock(scope: !7361, file: !3, line: 2746, column: 7)
!7368 = !DILocation(line: 2746, column: 41, scope: !7367)
!7369 = !DILocation(line: 2746, column: 7, scope: !7361)
!7370 = !DILocation(line: 2747, column: 6, scope: !7371)
!7371 = distinct !DILexicalBlock(scope: !7367, file: !3, line: 2747, column: 6)
!7372 = !DILocation(line: 2747, column: 20, scope: !7371)
!7373 = !DILocation(line: 2747, column: 24, scope: !7371)
!7374 = !DILocation(line: 2747, column: 32, scope: !7371)
!7375 = !DILocation(line: 2747, column: 46, scope: !7371)
!7376 = !DILocation(line: 2747, column: 50, scope: !7371)
!7377 = !DILocation(line: 2747, column: 29, scope: !7371)
!7378 = !DILocation(line: 2747, column: 6, scope: !7367)
!7379 = !DILocation(line: 2748, column: 4, scope: !7371)
!7380 = !DILocation(line: 2747, column: 53, scope: !7371)
!7381 = !DILocation(line: 2746, column: 47, scope: !7367)
!7382 = !DILocation(line: 2746, column: 7, scope: !7367)
!7383 = distinct !{!7383, !7369, !7384}
!7384 = !DILocation(line: 2748, column: 4, scope: !7361)
!7385 = !DILocation(line: 2750, column: 11, scope: !7386)
!7386 = distinct !DILexicalBlock(scope: !7362, file: !3, line: 2750, column: 11)
!7387 = !DILocation(line: 2750, column: 15, scope: !7386)
!7388 = !DILocation(line: 2750, column: 11, scope: !7362)
!7389 = !DILocation(line: 2752, column: 8, scope: !7390)
!7390 = distinct !DILexicalBlock(scope: !7391, file: !3, line: 2752, column: 8)
!7391 = distinct !DILexicalBlock(scope: !7386, file: !3, line: 2751, column: 2)
!7392 = !DILocation(line: 2752, column: 8, scope: !7391)
!7393 = !DILocation(line: 2753, column: 15, scope: !7390)
!7394 = !DILocation(line: 2753, column: 6, scope: !7390)
!7395 = !DILocation(line: 2754, column: 4, scope: !7391)
!7396 = !DILocation(line: 2756, column: 5, scope: !7362)
!7397 = !DILocation(line: 2758, column: 7, scope: !7398)
!7398 = distinct !DILexicalBlock(scope: !7318, file: !3, line: 2758, column: 7)
!7399 = !DILocation(line: 2758, column: 7, scope: !7318)
!7400 = !DILocation(line: 2760, column: 16, scope: !7401)
!7401 = distinct !DILexicalBlock(scope: !7398, file: !3, line: 2759, column: 5)
!7402 = !DILocation(line: 2760, column: 7, scope: !7401)
!7403 = !DILocation(line: 2761, column: 20, scope: !7401)
!7404 = !DILocation(line: 2761, column: 31, scope: !7401)
!7405 = !DILocation(line: 2761, column: 7, scope: !7401)
!7406 = !DILocation(line: 2762, column: 5, scope: !7401)
!7407 = !DILocation(line: 2766, column: 7, scope: !7408)
!7408 = distinct !DILexicalBlock(scope: !7318, file: !3, line: 2766, column: 7)
!7409 = !DILocation(line: 2766, column: 10, scope: !7408)
!7410 = !DILocation(line: 2766, column: 16, scope: !7408)
!7411 = !DILocation(line: 2766, column: 7, scope: !7318)
!7412 = !DILocation(line: 2772, column: 7, scope: !7413)
!7413 = distinct !DILexicalBlock(scope: !7408, file: !3, line: 2767, column: 5)
!7414 = !DILocation(line: 2773, column: 7, scope: !7413)
!7415 = !DILocation(line: 2774, column: 7, scope: !7413)
!7416 = !DILocation(line: 2780, column: 7, scope: !7417)
!7417 = distinct !DILexicalBlock(scope: !7318, file: !3, line: 2780, column: 7)
!7418 = !DILocation(line: 2780, column: 10, scope: !7417)
!7419 = !DILocation(line: 2780, column: 16, scope: !7417)
!7420 = !DILocation(line: 2780, column: 7, scope: !7318)
!7421 = !DILocation(line: 2782, column: 7, scope: !7422)
!7422 = distinct !DILexicalBlock(scope: !7417, file: !3, line: 2781, column: 5)
!7423 = !DILocation(line: 2783, column: 7, scope: !7422)
!7424 = !DILocation(line: 2789, column: 3, scope: !7318)
!7425 = !DILocation(line: 2792, column: 15, scope: !7318)
!7426 = !DILocation(line: 2792, column: 14, scope: !7318)
!7427 = !DILocation(line: 2798, column: 7, scope: !7428)
!7428 = distinct !DILexicalBlock(scope: !7318, file: !3, line: 2798, column: 7)
!7429 = !DILocation(line: 2798, column: 34, scope: !7428)
!7430 = !DILocation(line: 2798, column: 7, scope: !7318)
!7431 = !DILocation(line: 2800, column: 23, scope: !7432)
!7432 = distinct !DILexicalBlock(scope: !7428, file: !3, line: 2799, column: 5)
!7433 = !DILocation(line: 2800, column: 21, scope: !7432)
!7434 = !DILocation(line: 2801, column: 21, scope: !7432)
!7435 = !DILocation(line: 2801, column: 49, scope: !7432)
!7436 = !DILocation(line: 2802, column: 8, scope: !7432)
!7437 = !DILocation(line: 2801, column: 7, scope: !7432)
!7438 = !DILocation(line: 2803, column: 5, scope: !7432)
!7439 = !DILocalVariable(name: "seq", scope: !7440, file: !3, line: 2806, type: !1028)
!7440 = distinct !DILexicalBlock(scope: !7428, file: !3, line: 2805, column: 5)
!7441 = !DILocation(line: 2806, column: 11, scope: !7440)
!7442 = !DILocalVariable(name: "after", scope: !7440, file: !3, line: 2806, type: !1028)
!7443 = !DILocation(line: 2806, column: 16, scope: !7440)
!7444 = !DILocation(line: 2808, column: 21, scope: !7440)
!7445 = !DILocation(line: 2809, column: 7, scope: !7440)
!7446 = !DILocation(line: 2812, column: 15, scope: !7440)
!7447 = !DILocation(line: 2812, column: 13, scope: !7440)
!7448 = !DILocation(line: 2814, column: 21, scope: !7440)
!7449 = !DILocation(line: 2814, column: 39, scope: !7440)
!7450 = !DILocation(line: 2814, column: 7, scope: !7440)
!7451 = !DILocation(line: 2816, column: 13, scope: !7440)
!7452 = !DILocation(line: 2816, column: 11, scope: !7440)
!7453 = !DILocation(line: 2817, column: 7, scope: !7440)
!7454 = !DILocation(line: 2819, column: 28, scope: !7440)
!7455 = !DILocation(line: 2819, column: 33, scope: !7440)
!7456 = !DILocation(line: 2819, column: 7, scope: !7440)
!7457 = !DILocation(line: 2820, column: 7, scope: !7440)
!7458 = !DILocation(line: 2822, column: 3, scope: !7318)
!7459 = !DILocation(line: 2823, column: 1, scope: !7318)
