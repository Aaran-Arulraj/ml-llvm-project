; ModuleID = 'cgraph.c'
source_filename = "cgraph.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cgraph_edge_hook_list = type { void (%struct.cgraph_edge*, i8*)*, i8*, %struct.cgraph_edge_hook_list* }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.cgraph_node_hook_list = type { void (%struct.cgraph_node*, i8*)*, i8*, %struct.cgraph_node_hook_list* }
%struct.cgraph_2edge_hook_list = type { void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)*, i8*, %struct.cgraph_2edge_hook_list* }
%struct.cgraph_2node_hook_list = type { void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)*, i8*, %struct.cgraph_2node_hook_list* }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.cgraph_asm_node = type { %struct.cgraph_asm_node*, %union.tree_node*, i32 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.simple_ipa_opt_pass = type { %struct.opt_pass }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.VEC_cgraph_edge_p_heap = type { %struct.VEC_cgraph_edge_p_base }
%struct.VEC_cgraph_edge_p_base = type { i32, i32, [1 x %struct.cgraph_edge*] }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }

@cgraph_global_info_ready = dso_local global i8 0, align 1, !dbg !0
@cgraph_state = dso_local global i32 0, align 4, !dbg !2725
@cgraph_function_flags_ready = dso_local global i8 0, align 1, !dbg !2727
@first_cgraph_edge_removal_hook = common dso_local global %struct.cgraph_edge_hook_list* null, align 8, !dbg !2787
@first_cgraph_node_removal_hook = common dso_local global %struct.cgraph_node_hook_list* null, align 8, !dbg !2789
@first_cgraph_function_insertion_hook = common dso_local global %struct.cgraph_node_hook_list* null, align 8, !dbg !2795
@first_cgraph_edge_duplicated_hook = common dso_local global %struct.cgraph_2edge_hook_list* null, align 8, !dbg !2791
@first_cgraph_node_duplicated_hook = common dso_local global %struct.cgraph_2node_hook_list* null, align 8, !dbg !2793
@.str = private unnamed_addr constant [9 x i8] c"cgraph.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@cgraph_hash = internal global %struct.htab* null, align 8, !dbg !2763
@assembler_name_hash = internal global %struct.htab* null, align 8, !dbg !2765
@cgraph_nodes = common dso_local global %struct.cgraph_node* null, align 8, !dbg !2767
@htab_hash_pointer = external dso_local global i32 (i8*)*, align 8
@free_edges = internal global %struct.cgraph_edge* null, align 8, !dbg !2799
@cgraph_edge_max_uid = common dso_local global i32 0, align 4, !dbg !2777
@cfun = external dso_local global %struct.function*, align 8
@current_function_decl = external dso_local global %union.tree_node*, align 8
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@free_nodes = internal global %struct.cgraph_node* null, align 8, !dbg !2797
@cgraph_n_nodes = common dso_local global i32 0, align 4, !dbg !2773
@cgraph_nodes_queue = common dso_local global %struct.cgraph_node* null, align 8, !dbg !2769
@cgraph_inline_failed_string.cif_string_table = internal global [19 x i8*] [i8* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.19, i32 0, i32 0)], align 16, !dbg !2729
@.str.2 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"function not considered for inlining\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"function body not available\00", align 1
@.str.5 = private unnamed_addr constant [66 x i8] c"redefined extern inline functions are not considered for inlining\00", align 1
@.str.6 = private unnamed_addr constant [23 x i8] c"function not inlinable\00", align 1
@.str.7 = private unnamed_addr constant [30 x i8] c"function not inline candidate\00", align 1
@.str.8 = private unnamed_addr constant [44 x i8] c"--param large-function-growth limit reached\00", align 1
@.str.9 = private unnamed_addr constant [47 x i8] c"--param large-stack-frame-growth limit reached\00", align 1
@.str.10 = private unnamed_addr constant [46 x i8] c"--param max-inline-insns-single limit reached\00", align 1
@.str.11 = private unnamed_addr constant [44 x i8] c"--param max-inline-insns-auto limit reached\00", align 1
@.str.12 = private unnamed_addr constant [41 x i8] c"--param inline-unit-growth limit reached\00", align 1
@.str.13 = private unnamed_addr constant [19 x i8] c"recursive inlining\00", align 1
@.str.14 = private unnamed_addr constant [42 x i8] c"call is unlikely and code size would grow\00", align 1
@.str.15 = private unnamed_addr constant [54 x i8] c"function not declared inline and code size would grow\00", align 1
@.str.16 = private unnamed_addr constant [45 x i8] c"optimizing for size and code size would grow\00", align 1
@.str.17 = private unnamed_addr constant [32 x i8] c"target specific option mismatch\00", align 1
@.str.18 = private unnamed_addr constant [21 x i8] c"mismatched arguments\00", align 1
@.str.19 = private unnamed_addr constant [62 x i8] c"originally indirect function call not considered for inlining\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@.str.20 = private unnamed_addr constant [6 x i8] c"unset\00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"not_available\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"overwritable\00", align 1
@.str.23 = private unnamed_addr constant [10 x i8] c"available\00", align 1
@.str.24 = private unnamed_addr constant [6 x i8] c"local\00", align 1
@cgraph_availability_names = dso_local constant [5 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i32 0, i32 0)], align 16, !dbg !2738
@.str.25 = private unnamed_addr constant [10 x i8] c"%s/%i(%i)\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c" @\00", align 1
@.str.27 = private unnamed_addr constant [24 x i8] c" (inline copy in %s/%i)\00", align 1
@.str.28 = private unnamed_addr constant [18 x i8] c" (clone of %s/%i)\00", align 1
@.str.29 = private unnamed_addr constant [17 x i8] c" availability:%s\00", align 1
@.str.30 = private unnamed_addr constant [15 x i8] c" executed %ldx\00", align 1
@.str.31 = private unnamed_addr constant [21 x i8] c" %i time, %i benefit\00", align 1
@.str.32 = private unnamed_addr constant [21 x i8] c" (%i after inlining)\00", align 1
@.str.33 = private unnamed_addr constant [21 x i8] c" %i size, %i benefit\00", align 1
@.str.34 = private unnamed_addr constant [22 x i8] c" %i bytes stack usage\00", align 1
@.str.35 = private unnamed_addr constant [25 x i8] c" %i bytes after inlining\00", align 1
@.str.36 = private unnamed_addr constant [15 x i8] c" nested in: %s\00", align 1
@.str.37 = private unnamed_addr constant [8 x i8] c" needed\00", align 1
@.str.38 = private unnamed_addr constant [15 x i8] c" address_taken\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c" reachable\00", align 1
@.str.40 = private unnamed_addr constant [6 x i8] c" body\00", align 1
@.str.41 = private unnamed_addr constant [9 x i8] c" process\00", align 1
@.str.42 = private unnamed_addr constant [7 x i8] c" local\00", align 1
@.str.43 = private unnamed_addr constant [20 x i8] c" externally_visible\00", align 1
@.str.44 = private unnamed_addr constant [11 x i8] c" finalized\00", align 1
@.str.45 = private unnamed_addr constant [15 x i8] c" always_inline\00", align 1
@.str.46 = private unnamed_addr constant [11 x i8] c" inlinable\00", align 1
@.str.47 = private unnamed_addr constant [25 x i8] c" redefined_extern_inline\00", align 1
@.str.48 = private unnamed_addr constant [13 x i8] c" asm_written\00", align 1
@.str.49 = private unnamed_addr constant [15 x i8] c"\0A  called by: \00", align 1
@.str.50 = private unnamed_addr constant [7 x i8] c"%s/%i \00", align 1
@.str.51 = private unnamed_addr constant [8 x i8] c"(%ldx) \00", align 1
@.str.52 = private unnamed_addr constant [17 x i8] c"(%.2f per call) \00", align 1
@.str.53 = private unnamed_addr constant [11 x i8] c"(inlined) \00", align 1
@.str.54 = private unnamed_addr constant [12 x i8] c"(indirect) \00", align 1
@.str.55 = private unnamed_addr constant [22 x i8] c"(can throw external) \00", align 1
@.str.56 = private unnamed_addr constant [11 x i8] c"\0A  calls: \00", align 1
@.str.57 = private unnamed_addr constant [22 x i8] c"(nested in %i loops) \00", align 1
@.str.58 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.59 = private unnamed_addr constant [20 x i8] c"  aliases & thunks:\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c" %s/%i\00", align 1
@.str.61 = private unnamed_addr constant [68 x i8] c" (thunk of %s fixed ofset %i virtual value %i has virtual offset %i\00", align 1
@.str.62 = private unnamed_addr constant [2 x i8] c")\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.63 = private unnamed_addr constant [13 x i8] c"callgraph:\0A\0A\00", align 1
@tree_contains_struct = external dso_local global [191 x [64 x i8]], align 16
@.str.64 = private unnamed_addr constant [46 x i8] c"%D renamed after being referenced in assembly\00", align 1
@cgraph_order = common dso_local global i32 0, align 4, !dbg !2785
@cgraph_asm_nodes = common dso_local global %struct.cgraph_asm_node* null, align 8, !dbg !2781
@cgraph_asm_last_node = internal global %struct.cgraph_asm_node* null, align 8, !dbg !2783
@targetm = external dso_local global %struct.gcc_target, align 8
@cgraph_new_nodes = common dso_local global %struct.cgraph_node* null, align 8, !dbg !2771
@pass_early_local_passes = external dso_local global %struct.simple_ipa_opt_pass, align 8
@gt_ggc_r_gt_cgraph_h = dso_local constant [6 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.cgraph_edge** @free_edges to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_cgraph_edge, void (i8*)* @gt_pch_nx_cgraph_edge }, %struct.ggc_root_tab { i8* bitcast (%struct.cgraph_node** @free_nodes to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_cgraph_node, void (i8*)* @gt_pch_nx_cgraph_node }, %struct.ggc_root_tab { i8* bitcast (%struct.cgraph_asm_node** @cgraph_asm_last_node to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_mx_cgraph_asm_node, void (i8*)* @gt_pch_nx_cgraph_asm_node }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @assembler_name_hash to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P11cgraph_node4htab, void (i8*)* @gt_pch_n_P11cgraph_node4htab }, %struct.ggc_root_tab { i8* bitcast (%struct.htab** @cgraph_hash to i8*), i64 1, i64 8, void (i8*)* @gt_ggc_m_P11cgraph_node4htab, void (i8*)* @gt_pch_n_P11cgraph_node4htab }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2744
@clone_fn_id_num = internal global i32 0, align 4, !dbg !2801
@gt_pch_rs_gt_cgraph_h = dso_local constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (i32* @clone_fn_id_num to i8*), i64 1, i64 4, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !2760
@cgraph_max_uid = common dso_local global i32 0, align 4, !dbg !2775
@cgraph_max_pid = common dso_local global i32 0, align 4, !dbg !2779
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.65 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.66 = private unnamed_addr constant [7 x i8] c"_clone\00", align 1
@.str.67 = private unnamed_addr constant [7 x i8] c"%s.%lu\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_edge_hook_list* @cgraph_add_edge_removal_hook(void (%struct.cgraph_edge*, i8*)* %hook, i8* %data) #0 !dbg !2807 {
entry:
  %hook.addr = alloca void (%struct.cgraph_edge*, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %entry1 = alloca %struct.cgraph_edge_hook_list*, align 8
  %ptr = alloca %struct.cgraph_edge_hook_list**, align 8
  store void (%struct.cgraph_edge*, i8*)* %hook, void (%struct.cgraph_edge*, i8*)** %hook.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.cgraph_edge*, i8*)** %hook.addr, metadata !2810, metadata !DIExpression()), !dbg !2811
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !2812, metadata !DIExpression()), !dbg !2813
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge_hook_list** %entry1, metadata !2814, metadata !DIExpression()), !dbg !2815
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge_hook_list*** %ptr, metadata !2816, metadata !DIExpression()), !dbg !2818
  store %struct.cgraph_edge_hook_list** @first_cgraph_edge_removal_hook, %struct.cgraph_edge_hook_list*** %ptr, align 8, !dbg !2818
  %call = call i8* @xmalloc(i64 24), !dbg !2819
  %0 = bitcast i8* %call to %struct.cgraph_edge_hook_list*, !dbg !2820
  store %struct.cgraph_edge_hook_list* %0, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !2821
  %1 = load void (%struct.cgraph_edge*, i8*)*, void (%struct.cgraph_edge*, i8*)** %hook.addr, align 8, !dbg !2822
  %2 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !2823
  %hook2 = getelementptr inbounds %struct.cgraph_edge_hook_list, %struct.cgraph_edge_hook_list* %2, i32 0, i32 0, !dbg !2824
  store void (%struct.cgraph_edge*, i8*)* %1, void (%struct.cgraph_edge*, i8*)** %hook2, align 8, !dbg !2825
  %3 = load i8*, i8** %data.addr, align 8, !dbg !2826
  %4 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !2827
  %data3 = getelementptr inbounds %struct.cgraph_edge_hook_list, %struct.cgraph_edge_hook_list* %4, i32 0, i32 1, !dbg !2828
  store i8* %3, i8** %data3, align 8, !dbg !2829
  %5 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !2830
  %next = getelementptr inbounds %struct.cgraph_edge_hook_list, %struct.cgraph_edge_hook_list* %5, i32 0, i32 2, !dbg !2831
  store %struct.cgraph_edge_hook_list* null, %struct.cgraph_edge_hook_list** %next, align 8, !dbg !2832
  br label %while.cond, !dbg !2833

while.cond:                                       ; preds = %while.body, %entry
  %6 = load %struct.cgraph_edge_hook_list**, %struct.cgraph_edge_hook_list*** %ptr, align 8, !dbg !2834
  %7 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %6, align 8, !dbg !2835
  %tobool = icmp ne %struct.cgraph_edge_hook_list* %7, null, !dbg !2833
  br i1 %tobool, label %while.body, label %while.end, !dbg !2833

while.body:                                       ; preds = %while.cond
  %8 = load %struct.cgraph_edge_hook_list**, %struct.cgraph_edge_hook_list*** %ptr, align 8, !dbg !2836
  %9 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %8, align 8, !dbg !2837
  %next4 = getelementptr inbounds %struct.cgraph_edge_hook_list, %struct.cgraph_edge_hook_list* %9, i32 0, i32 2, !dbg !2838
  store %struct.cgraph_edge_hook_list** %next4, %struct.cgraph_edge_hook_list*** %ptr, align 8, !dbg !2839
  br label %while.cond, !dbg !2833, !llvm.loop !2840

while.end:                                        ; preds = %while.cond
  %10 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !2841
  %11 = load %struct.cgraph_edge_hook_list**, %struct.cgraph_edge_hook_list*** %ptr, align 8, !dbg !2842
  store %struct.cgraph_edge_hook_list* %10, %struct.cgraph_edge_hook_list** %11, align 8, !dbg !2843
  %12 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !2844
  ret %struct.cgraph_edge_hook_list* %12, !dbg !2845
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_remove_edge_removal_hook(%struct.cgraph_edge_hook_list* %entry1) #0 !dbg !2846 {
entry:
  %entry.addr = alloca %struct.cgraph_edge_hook_list*, align 8
  %ptr = alloca %struct.cgraph_edge_hook_list**, align 8
  store %struct.cgraph_edge_hook_list* %entry1, %struct.cgraph_edge_hook_list** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge_hook_list** %entry.addr, metadata !2849, metadata !DIExpression()), !dbg !2850
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge_hook_list*** %ptr, metadata !2851, metadata !DIExpression()), !dbg !2852
  store %struct.cgraph_edge_hook_list** @first_cgraph_edge_removal_hook, %struct.cgraph_edge_hook_list*** %ptr, align 8, !dbg !2852
  br label %while.cond, !dbg !2853

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.cgraph_edge_hook_list**, %struct.cgraph_edge_hook_list*** %ptr, align 8, !dbg !2854
  %1 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %0, align 8, !dbg !2855
  %2 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry.addr, align 8, !dbg !2856
  %cmp = icmp ne %struct.cgraph_edge_hook_list* %1, %2, !dbg !2857
  br i1 %cmp, label %while.body, label %while.end, !dbg !2853

while.body:                                       ; preds = %while.cond
  %3 = load %struct.cgraph_edge_hook_list**, %struct.cgraph_edge_hook_list*** %ptr, align 8, !dbg !2858
  %4 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %3, align 8, !dbg !2859
  %next = getelementptr inbounds %struct.cgraph_edge_hook_list, %struct.cgraph_edge_hook_list* %4, i32 0, i32 2, !dbg !2860
  store %struct.cgraph_edge_hook_list** %next, %struct.cgraph_edge_hook_list*** %ptr, align 8, !dbg !2861
  br label %while.cond, !dbg !2853, !llvm.loop !2862

while.end:                                        ; preds = %while.cond
  %5 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry.addr, align 8, !dbg !2863
  %next2 = getelementptr inbounds %struct.cgraph_edge_hook_list, %struct.cgraph_edge_hook_list* %5, i32 0, i32 2, !dbg !2864
  %6 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %next2, align 8, !dbg !2864
  %7 = load %struct.cgraph_edge_hook_list**, %struct.cgraph_edge_hook_list*** %ptr, align 8, !dbg !2865
  store %struct.cgraph_edge_hook_list* %6, %struct.cgraph_edge_hook_list** %7, align 8, !dbg !2866
  %8 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry.addr, align 8, !dbg !2867
  %9 = bitcast %struct.cgraph_edge_hook_list* %8 to i8*, !dbg !2867
  call void @free(i8* %9), !dbg !2868
  ret void, !dbg !2869
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_node_hook_list* @cgraph_add_node_removal_hook(void (%struct.cgraph_node*, i8*)* %hook, i8* %data) #0 !dbg !2870 {
entry:
  %hook.addr = alloca void (%struct.cgraph_node*, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %entry1 = alloca %struct.cgraph_node_hook_list*, align 8
  %ptr = alloca %struct.cgraph_node_hook_list**, align 8
  store void (%struct.cgraph_node*, i8*)* %hook, void (%struct.cgraph_node*, i8*)** %hook.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.cgraph_node*, i8*)** %hook.addr, metadata !2873, metadata !DIExpression()), !dbg !2874
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !2875, metadata !DIExpression()), !dbg !2876
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_hook_list** %entry1, metadata !2877, metadata !DIExpression()), !dbg !2878
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_hook_list*** %ptr, metadata !2879, metadata !DIExpression()), !dbg !2881
  store %struct.cgraph_node_hook_list** @first_cgraph_node_removal_hook, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2881
  %call = call i8* @xmalloc(i64 24), !dbg !2882
  %0 = bitcast i8* %call to %struct.cgraph_node_hook_list*, !dbg !2883
  store %struct.cgraph_node_hook_list* %0, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2884
  %1 = load void (%struct.cgraph_node*, i8*)*, void (%struct.cgraph_node*, i8*)** %hook.addr, align 8, !dbg !2885
  %2 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2886
  %hook2 = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %2, i32 0, i32 0, !dbg !2887
  store void (%struct.cgraph_node*, i8*)* %1, void (%struct.cgraph_node*, i8*)** %hook2, align 8, !dbg !2888
  %3 = load i8*, i8** %data.addr, align 8, !dbg !2889
  %4 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2890
  %data3 = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %4, i32 0, i32 1, !dbg !2891
  store i8* %3, i8** %data3, align 8, !dbg !2892
  %5 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2893
  %next = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %5, i32 0, i32 2, !dbg !2894
  store %struct.cgraph_node_hook_list* null, %struct.cgraph_node_hook_list** %next, align 8, !dbg !2895
  br label %while.cond, !dbg !2896

while.cond:                                       ; preds = %while.body, %entry
  %6 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2897
  %7 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %6, align 8, !dbg !2898
  %tobool = icmp ne %struct.cgraph_node_hook_list* %7, null, !dbg !2896
  br i1 %tobool, label %while.body, label %while.end, !dbg !2896

while.body:                                       ; preds = %while.cond
  %8 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2899
  %9 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %8, align 8, !dbg !2900
  %next4 = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %9, i32 0, i32 2, !dbg !2901
  store %struct.cgraph_node_hook_list** %next4, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2902
  br label %while.cond, !dbg !2896, !llvm.loop !2903

while.end:                                        ; preds = %while.cond
  %10 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2904
  %11 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2905
  store %struct.cgraph_node_hook_list* %10, %struct.cgraph_node_hook_list** %11, align 8, !dbg !2906
  %12 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2907
  ret %struct.cgraph_node_hook_list* %12, !dbg !2908
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_remove_node_removal_hook(%struct.cgraph_node_hook_list* %entry1) #0 !dbg !2909 {
entry:
  %entry.addr = alloca %struct.cgraph_node_hook_list*, align 8
  %ptr = alloca %struct.cgraph_node_hook_list**, align 8
  store %struct.cgraph_node_hook_list* %entry1, %struct.cgraph_node_hook_list** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_hook_list** %entry.addr, metadata !2912, metadata !DIExpression()), !dbg !2913
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_hook_list*** %ptr, metadata !2914, metadata !DIExpression()), !dbg !2915
  store %struct.cgraph_node_hook_list** @first_cgraph_node_removal_hook, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2915
  br label %while.cond, !dbg !2916

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2917
  %1 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %0, align 8, !dbg !2918
  %2 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry.addr, align 8, !dbg !2919
  %cmp = icmp ne %struct.cgraph_node_hook_list* %1, %2, !dbg !2920
  br i1 %cmp, label %while.body, label %while.end, !dbg !2916

while.body:                                       ; preds = %while.cond
  %3 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2921
  %4 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %3, align 8, !dbg !2922
  %next = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %4, i32 0, i32 2, !dbg !2923
  store %struct.cgraph_node_hook_list** %next, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2924
  br label %while.cond, !dbg !2916, !llvm.loop !2925

while.end:                                        ; preds = %while.cond
  %5 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry.addr, align 8, !dbg !2926
  %next2 = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %5, i32 0, i32 2, !dbg !2927
  %6 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %next2, align 8, !dbg !2927
  %7 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2928
  store %struct.cgraph_node_hook_list* %6, %struct.cgraph_node_hook_list** %7, align 8, !dbg !2929
  %8 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry.addr, align 8, !dbg !2930
  %9 = bitcast %struct.cgraph_node_hook_list* %8 to i8*, !dbg !2930
  call void @free(i8* %9), !dbg !2931
  ret void, !dbg !2932
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_node_hook_list* @cgraph_add_function_insertion_hook(void (%struct.cgraph_node*, i8*)* %hook, i8* %data) #0 !dbg !2933 {
entry:
  %hook.addr = alloca void (%struct.cgraph_node*, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %entry1 = alloca %struct.cgraph_node_hook_list*, align 8
  %ptr = alloca %struct.cgraph_node_hook_list**, align 8
  store void (%struct.cgraph_node*, i8*)* %hook, void (%struct.cgraph_node*, i8*)** %hook.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.cgraph_node*, i8*)** %hook.addr, metadata !2934, metadata !DIExpression()), !dbg !2935
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !2936, metadata !DIExpression()), !dbg !2937
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_hook_list** %entry1, metadata !2938, metadata !DIExpression()), !dbg !2939
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_hook_list*** %ptr, metadata !2940, metadata !DIExpression()), !dbg !2941
  store %struct.cgraph_node_hook_list** @first_cgraph_function_insertion_hook, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2941
  %call = call i8* @xmalloc(i64 24), !dbg !2942
  %0 = bitcast i8* %call to %struct.cgraph_node_hook_list*, !dbg !2943
  store %struct.cgraph_node_hook_list* %0, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2944
  %1 = load void (%struct.cgraph_node*, i8*)*, void (%struct.cgraph_node*, i8*)** %hook.addr, align 8, !dbg !2945
  %2 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2946
  %hook2 = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %2, i32 0, i32 0, !dbg !2947
  store void (%struct.cgraph_node*, i8*)* %1, void (%struct.cgraph_node*, i8*)** %hook2, align 8, !dbg !2948
  %3 = load i8*, i8** %data.addr, align 8, !dbg !2949
  %4 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2950
  %data3 = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %4, i32 0, i32 1, !dbg !2951
  store i8* %3, i8** %data3, align 8, !dbg !2952
  %5 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2953
  %next = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %5, i32 0, i32 2, !dbg !2954
  store %struct.cgraph_node_hook_list* null, %struct.cgraph_node_hook_list** %next, align 8, !dbg !2955
  br label %while.cond, !dbg !2956

while.cond:                                       ; preds = %while.body, %entry
  %6 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2957
  %7 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %6, align 8, !dbg !2958
  %tobool = icmp ne %struct.cgraph_node_hook_list* %7, null, !dbg !2956
  br i1 %tobool, label %while.body, label %while.end, !dbg !2956

while.body:                                       ; preds = %while.cond
  %8 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2959
  %9 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %8, align 8, !dbg !2960
  %next4 = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %9, i32 0, i32 2, !dbg !2961
  store %struct.cgraph_node_hook_list** %next4, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2962
  br label %while.cond, !dbg !2956, !llvm.loop !2963

while.end:                                        ; preds = %while.cond
  %10 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2964
  %11 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2965
  store %struct.cgraph_node_hook_list* %10, %struct.cgraph_node_hook_list** %11, align 8, !dbg !2966
  %12 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2967
  ret %struct.cgraph_node_hook_list* %12, !dbg !2968
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_remove_function_insertion_hook(%struct.cgraph_node_hook_list* %entry1) #0 !dbg !2969 {
entry:
  %entry.addr = alloca %struct.cgraph_node_hook_list*, align 8
  %ptr = alloca %struct.cgraph_node_hook_list**, align 8
  store %struct.cgraph_node_hook_list* %entry1, %struct.cgraph_node_hook_list** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_hook_list** %entry.addr, metadata !2970, metadata !DIExpression()), !dbg !2971
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_hook_list*** %ptr, metadata !2972, metadata !DIExpression()), !dbg !2973
  store %struct.cgraph_node_hook_list** @first_cgraph_function_insertion_hook, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2973
  br label %while.cond, !dbg !2974

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2975
  %1 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %0, align 8, !dbg !2976
  %2 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry.addr, align 8, !dbg !2977
  %cmp = icmp ne %struct.cgraph_node_hook_list* %1, %2, !dbg !2978
  br i1 %cmp, label %while.body, label %while.end, !dbg !2974

while.body:                                       ; preds = %while.cond
  %3 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2979
  %4 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %3, align 8, !dbg !2980
  %next = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %4, i32 0, i32 2, !dbg !2981
  store %struct.cgraph_node_hook_list** %next, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2982
  br label %while.cond, !dbg !2974, !llvm.loop !2983

while.end:                                        ; preds = %while.cond
  %5 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry.addr, align 8, !dbg !2984
  %next2 = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %5, i32 0, i32 2, !dbg !2985
  %6 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %next2, align 8, !dbg !2985
  %7 = load %struct.cgraph_node_hook_list**, %struct.cgraph_node_hook_list*** %ptr, align 8, !dbg !2986
  store %struct.cgraph_node_hook_list* %6, %struct.cgraph_node_hook_list** %7, align 8, !dbg !2987
  %8 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry.addr, align 8, !dbg !2988
  %9 = bitcast %struct.cgraph_node_hook_list* %8 to i8*, !dbg !2988
  call void @free(i8* %9), !dbg !2989
  ret void, !dbg !2990
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_call_function_insertion_hooks(%struct.cgraph_node* %node) #0 !dbg !2991 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %entry1 = alloca %struct.cgraph_node_hook_list*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !2992, metadata !DIExpression()), !dbg !2993
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_hook_list** %entry1, metadata !2994, metadata !DIExpression()), !dbg !2995
  %0 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** @first_cgraph_function_insertion_hook, align 8, !dbg !2996
  store %struct.cgraph_node_hook_list* %0, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2995
  br label %while.cond, !dbg !2997

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2998
  %tobool = icmp ne %struct.cgraph_node_hook_list* %1, null, !dbg !2997
  br i1 %tobool, label %while.body, label %while.end, !dbg !2997

while.body:                                       ; preds = %while.cond
  %2 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !2999
  %hook = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %2, i32 0, i32 0, !dbg !3001
  %3 = load void (%struct.cgraph_node*, i8*)*, void (%struct.cgraph_node*, i8*)** %hook, align 8, !dbg !3001
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3002
  %5 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !3003
  %data = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %5, i32 0, i32 1, !dbg !3004
  %6 = load i8*, i8** %data, align 8, !dbg !3004
  call void %3(%struct.cgraph_node* %4, i8* %6), !dbg !2999
  %7 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !3005
  %next = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %7, i32 0, i32 2, !dbg !3006
  %8 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %next, align 8, !dbg !3006
  store %struct.cgraph_node_hook_list* %8, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !3007
  br label %while.cond, !dbg !2997, !llvm.loop !3008

while.end:                                        ; preds = %while.cond
  ret void, !dbg !3010
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_2edge_hook_list* @cgraph_add_edge_duplication_hook(void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)* %hook, i8* %data) #0 !dbg !3011 {
entry:
  %hook.addr = alloca void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %entry1 = alloca %struct.cgraph_2edge_hook_list*, align 8
  %ptr = alloca %struct.cgraph_2edge_hook_list**, align 8
  store void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)* %hook, void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)** %hook.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)** %hook.addr, metadata !3014, metadata !DIExpression()), !dbg !3015
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3016, metadata !DIExpression()), !dbg !3017
  call void @llvm.dbg.declare(metadata %struct.cgraph_2edge_hook_list** %entry1, metadata !3018, metadata !DIExpression()), !dbg !3019
  call void @llvm.dbg.declare(metadata %struct.cgraph_2edge_hook_list*** %ptr, metadata !3020, metadata !DIExpression()), !dbg !3022
  store %struct.cgraph_2edge_hook_list** @first_cgraph_edge_duplicated_hook, %struct.cgraph_2edge_hook_list*** %ptr, align 8, !dbg !3022
  %call = call i8* @xmalloc(i64 24), !dbg !3023
  %0 = bitcast i8* %call to %struct.cgraph_2edge_hook_list*, !dbg !3024
  store %struct.cgraph_2edge_hook_list* %0, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !3025
  %1 = load void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)*, void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)** %hook.addr, align 8, !dbg !3026
  %2 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !3027
  %hook2 = getelementptr inbounds %struct.cgraph_2edge_hook_list, %struct.cgraph_2edge_hook_list* %2, i32 0, i32 0, !dbg !3028
  store void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)* %1, void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)** %hook2, align 8, !dbg !3029
  %3 = load i8*, i8** %data.addr, align 8, !dbg !3030
  %4 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !3031
  %data3 = getelementptr inbounds %struct.cgraph_2edge_hook_list, %struct.cgraph_2edge_hook_list* %4, i32 0, i32 1, !dbg !3032
  store i8* %3, i8** %data3, align 8, !dbg !3033
  %5 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !3034
  %next = getelementptr inbounds %struct.cgraph_2edge_hook_list, %struct.cgraph_2edge_hook_list* %5, i32 0, i32 2, !dbg !3035
  store %struct.cgraph_2edge_hook_list* null, %struct.cgraph_2edge_hook_list** %next, align 8, !dbg !3036
  br label %while.cond, !dbg !3037

while.cond:                                       ; preds = %while.body, %entry
  %6 = load %struct.cgraph_2edge_hook_list**, %struct.cgraph_2edge_hook_list*** %ptr, align 8, !dbg !3038
  %7 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %6, align 8, !dbg !3039
  %tobool = icmp ne %struct.cgraph_2edge_hook_list* %7, null, !dbg !3037
  br i1 %tobool, label %while.body, label %while.end, !dbg !3037

while.body:                                       ; preds = %while.cond
  %8 = load %struct.cgraph_2edge_hook_list**, %struct.cgraph_2edge_hook_list*** %ptr, align 8, !dbg !3040
  %9 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %8, align 8, !dbg !3041
  %next4 = getelementptr inbounds %struct.cgraph_2edge_hook_list, %struct.cgraph_2edge_hook_list* %9, i32 0, i32 2, !dbg !3042
  store %struct.cgraph_2edge_hook_list** %next4, %struct.cgraph_2edge_hook_list*** %ptr, align 8, !dbg !3043
  br label %while.cond, !dbg !3037, !llvm.loop !3044

while.end:                                        ; preds = %while.cond
  %10 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !3045
  %11 = load %struct.cgraph_2edge_hook_list**, %struct.cgraph_2edge_hook_list*** %ptr, align 8, !dbg !3046
  store %struct.cgraph_2edge_hook_list* %10, %struct.cgraph_2edge_hook_list** %11, align 8, !dbg !3047
  %12 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !3048
  ret %struct.cgraph_2edge_hook_list* %12, !dbg !3049
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_remove_edge_duplication_hook(%struct.cgraph_2edge_hook_list* %entry1) #0 !dbg !3050 {
entry:
  %entry.addr = alloca %struct.cgraph_2edge_hook_list*, align 8
  %ptr = alloca %struct.cgraph_2edge_hook_list**, align 8
  store %struct.cgraph_2edge_hook_list* %entry1, %struct.cgraph_2edge_hook_list** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_2edge_hook_list** %entry.addr, metadata !3053, metadata !DIExpression()), !dbg !3054
  call void @llvm.dbg.declare(metadata %struct.cgraph_2edge_hook_list*** %ptr, metadata !3055, metadata !DIExpression()), !dbg !3056
  store %struct.cgraph_2edge_hook_list** @first_cgraph_edge_duplicated_hook, %struct.cgraph_2edge_hook_list*** %ptr, align 8, !dbg !3056
  br label %while.cond, !dbg !3057

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.cgraph_2edge_hook_list**, %struct.cgraph_2edge_hook_list*** %ptr, align 8, !dbg !3058
  %1 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %0, align 8, !dbg !3059
  %2 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry.addr, align 8, !dbg !3060
  %cmp = icmp ne %struct.cgraph_2edge_hook_list* %1, %2, !dbg !3061
  br i1 %cmp, label %while.body, label %while.end, !dbg !3057

while.body:                                       ; preds = %while.cond
  %3 = load %struct.cgraph_2edge_hook_list**, %struct.cgraph_2edge_hook_list*** %ptr, align 8, !dbg !3062
  %4 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %3, align 8, !dbg !3063
  %next = getelementptr inbounds %struct.cgraph_2edge_hook_list, %struct.cgraph_2edge_hook_list* %4, i32 0, i32 2, !dbg !3064
  store %struct.cgraph_2edge_hook_list** %next, %struct.cgraph_2edge_hook_list*** %ptr, align 8, !dbg !3065
  br label %while.cond, !dbg !3057, !llvm.loop !3066

while.end:                                        ; preds = %while.cond
  %5 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry.addr, align 8, !dbg !3067
  %next2 = getelementptr inbounds %struct.cgraph_2edge_hook_list, %struct.cgraph_2edge_hook_list* %5, i32 0, i32 2, !dbg !3068
  %6 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %next2, align 8, !dbg !3068
  %7 = load %struct.cgraph_2edge_hook_list**, %struct.cgraph_2edge_hook_list*** %ptr, align 8, !dbg !3069
  store %struct.cgraph_2edge_hook_list* %6, %struct.cgraph_2edge_hook_list** %7, align 8, !dbg !3070
  %8 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry.addr, align 8, !dbg !3071
  %9 = bitcast %struct.cgraph_2edge_hook_list* %8 to i8*, !dbg !3071
  call void @free(i8* %9), !dbg !3072
  ret void, !dbg !3073
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_2node_hook_list* @cgraph_add_node_duplication_hook(void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)* %hook, i8* %data) #0 !dbg !3074 {
entry:
  %hook.addr = alloca void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %entry1 = alloca %struct.cgraph_2node_hook_list*, align 8
  %ptr = alloca %struct.cgraph_2node_hook_list**, align 8
  store void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)* %hook, void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)** %hook.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)** %hook.addr, metadata !3077, metadata !DIExpression()), !dbg !3078
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3079, metadata !DIExpression()), !dbg !3080
  call void @llvm.dbg.declare(metadata %struct.cgraph_2node_hook_list** %entry1, metadata !3081, metadata !DIExpression()), !dbg !3082
  call void @llvm.dbg.declare(metadata %struct.cgraph_2node_hook_list*** %ptr, metadata !3083, metadata !DIExpression()), !dbg !3085
  store %struct.cgraph_2node_hook_list** @first_cgraph_node_duplicated_hook, %struct.cgraph_2node_hook_list*** %ptr, align 8, !dbg !3085
  %call = call i8* @xmalloc(i64 24), !dbg !3086
  %0 = bitcast i8* %call to %struct.cgraph_2node_hook_list*, !dbg !3087
  store %struct.cgraph_2node_hook_list* %0, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !3088
  %1 = load void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)*, void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)** %hook.addr, align 8, !dbg !3089
  %2 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !3090
  %hook2 = getelementptr inbounds %struct.cgraph_2node_hook_list, %struct.cgraph_2node_hook_list* %2, i32 0, i32 0, !dbg !3091
  store void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)* %1, void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)** %hook2, align 8, !dbg !3092
  %3 = load i8*, i8** %data.addr, align 8, !dbg !3093
  %4 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !3094
  %data3 = getelementptr inbounds %struct.cgraph_2node_hook_list, %struct.cgraph_2node_hook_list* %4, i32 0, i32 1, !dbg !3095
  store i8* %3, i8** %data3, align 8, !dbg !3096
  %5 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !3097
  %next = getelementptr inbounds %struct.cgraph_2node_hook_list, %struct.cgraph_2node_hook_list* %5, i32 0, i32 2, !dbg !3098
  store %struct.cgraph_2node_hook_list* null, %struct.cgraph_2node_hook_list** %next, align 8, !dbg !3099
  br label %while.cond, !dbg !3100

while.cond:                                       ; preds = %while.body, %entry
  %6 = load %struct.cgraph_2node_hook_list**, %struct.cgraph_2node_hook_list*** %ptr, align 8, !dbg !3101
  %7 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %6, align 8, !dbg !3102
  %tobool = icmp ne %struct.cgraph_2node_hook_list* %7, null, !dbg !3100
  br i1 %tobool, label %while.body, label %while.end, !dbg !3100

while.body:                                       ; preds = %while.cond
  %8 = load %struct.cgraph_2node_hook_list**, %struct.cgraph_2node_hook_list*** %ptr, align 8, !dbg !3103
  %9 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %8, align 8, !dbg !3104
  %next4 = getelementptr inbounds %struct.cgraph_2node_hook_list, %struct.cgraph_2node_hook_list* %9, i32 0, i32 2, !dbg !3105
  store %struct.cgraph_2node_hook_list** %next4, %struct.cgraph_2node_hook_list*** %ptr, align 8, !dbg !3106
  br label %while.cond, !dbg !3100, !llvm.loop !3107

while.end:                                        ; preds = %while.cond
  %10 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !3108
  %11 = load %struct.cgraph_2node_hook_list**, %struct.cgraph_2node_hook_list*** %ptr, align 8, !dbg !3109
  store %struct.cgraph_2node_hook_list* %10, %struct.cgraph_2node_hook_list** %11, align 8, !dbg !3110
  %12 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !3111
  ret %struct.cgraph_2node_hook_list* %12, !dbg !3112
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_remove_node_duplication_hook(%struct.cgraph_2node_hook_list* %entry1) #0 !dbg !3113 {
entry:
  %entry.addr = alloca %struct.cgraph_2node_hook_list*, align 8
  %ptr = alloca %struct.cgraph_2node_hook_list**, align 8
  store %struct.cgraph_2node_hook_list* %entry1, %struct.cgraph_2node_hook_list** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_2node_hook_list** %entry.addr, metadata !3116, metadata !DIExpression()), !dbg !3117
  call void @llvm.dbg.declare(metadata %struct.cgraph_2node_hook_list*** %ptr, metadata !3118, metadata !DIExpression()), !dbg !3119
  store %struct.cgraph_2node_hook_list** @first_cgraph_node_duplicated_hook, %struct.cgraph_2node_hook_list*** %ptr, align 8, !dbg !3119
  br label %while.cond, !dbg !3120

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.cgraph_2node_hook_list**, %struct.cgraph_2node_hook_list*** %ptr, align 8, !dbg !3121
  %1 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %0, align 8, !dbg !3122
  %2 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry.addr, align 8, !dbg !3123
  %cmp = icmp ne %struct.cgraph_2node_hook_list* %1, %2, !dbg !3124
  br i1 %cmp, label %while.body, label %while.end, !dbg !3120

while.body:                                       ; preds = %while.cond
  %3 = load %struct.cgraph_2node_hook_list**, %struct.cgraph_2node_hook_list*** %ptr, align 8, !dbg !3125
  %4 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %3, align 8, !dbg !3126
  %next = getelementptr inbounds %struct.cgraph_2node_hook_list, %struct.cgraph_2node_hook_list* %4, i32 0, i32 2, !dbg !3127
  store %struct.cgraph_2node_hook_list** %next, %struct.cgraph_2node_hook_list*** %ptr, align 8, !dbg !3128
  br label %while.cond, !dbg !3120, !llvm.loop !3129

while.end:                                        ; preds = %while.cond
  %5 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry.addr, align 8, !dbg !3130
  %next2 = getelementptr inbounds %struct.cgraph_2node_hook_list, %struct.cgraph_2node_hook_list* %5, i32 0, i32 2, !dbg !3131
  %6 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %next2, align 8, !dbg !3131
  %7 = load %struct.cgraph_2node_hook_list**, %struct.cgraph_2node_hook_list*** %ptr, align 8, !dbg !3132
  store %struct.cgraph_2node_hook_list* %6, %struct.cgraph_2node_hook_list** %7, align 8, !dbg !3133
  %8 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry.addr, align 8, !dbg !3134
  %9 = bitcast %struct.cgraph_2node_hook_list* %8 to i8*, !dbg !3134
  call void @free(i8* %9), !dbg !3135
  ret void, !dbg !3136
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node* %decl) #0 !dbg !3137 {
entry:
  %retval = alloca %struct.cgraph_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %key = alloca %struct.cgraph_node, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %slot = alloca %struct.cgraph_node**, align 8
  %aslot = alloca i8**, align 8
  %name = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3140, metadata !DIExpression()), !dbg !3141
  call void @llvm.dbg.declare(metadata %struct.cgraph_node* %key, metadata !3142, metadata !DIExpression()), !dbg !3143
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3144, metadata !DIExpression()), !dbg !3145
  call void @llvm.dbg.declare(metadata %struct.cgraph_node*** %slot, metadata !3146, metadata !DIExpression()), !dbg !3147
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3148
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3148
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3148
  %bf.load = load i64, i64* %1, align 8, !dbg !3148
  %bf.clear = and i64 %bf.load, 65535, !dbg !3148
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3148
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !3148
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3148

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 468, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3148
  br label %cond.end, !dbg !3148

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3148

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3148
  %2 = load %struct.htab*, %struct.htab** @cgraph_hash, align 8, !dbg !3149
  %tobool = icmp ne %struct.htab* %2, null, !dbg !3149
  br i1 %tobool, label %if.end, label %if.then, !dbg !3151

if.then:                                          ; preds = %cond.end
  %call = call %struct.htab* @htab_create_alloc(i64 10, i32 (i8*)* @hash_node, i32 (i8*, i8*)* @eq_node, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !3152
  store %struct.htab* %call, %struct.htab** @cgraph_hash, align 8, !dbg !3153
  br label %if.end, !dbg !3154

if.end:                                           ; preds = %if.then, %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3155
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %key, i32 0, i32 0, !dbg !3156
  store %union.tree_node* %3, %union.tree_node** %decl1, align 8, !dbg !3157
  %4 = load %struct.htab*, %struct.htab** @cgraph_hash, align 8, !dbg !3158
  %5 = bitcast %struct.cgraph_node* %key to i8*, !dbg !3159
  %call2 = call i8** @htab_find_slot(%struct.htab* %4, i8* %5, i32 1), !dbg !3160
  %6 = bitcast i8** %call2 to %struct.cgraph_node**, !dbg !3161
  store %struct.cgraph_node** %6, %struct.cgraph_node*** %slot, align 8, !dbg !3162
  %7 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !3163
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %7, align 8, !dbg !3165
  %tobool3 = icmp ne %struct.cgraph_node* %8, null, !dbg !3165
  br i1 %tobool3, label %if.then4, label %if.end11, !dbg !3166

if.then4:                                         ; preds = %if.end
  %9 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !3167
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %9, align 8, !dbg !3169
  store %struct.cgraph_node* %10, %struct.cgraph_node** %node, align 8, !dbg !3170
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3171
  %same_body_alias = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 27, !dbg !3173
  %bf.load5 = load i16, i16* %same_body_alias, align 4, !dbg !3173
  %bf.lshr = lshr i16 %bf.load5, 9, !dbg !3173
  %bf.clear6 = and i16 %bf.lshr, 1, !dbg !3173
  %bf.cast7 = zext i16 %bf.clear6 to i32, !dbg !3173
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !3171
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !3174

if.then9:                                         ; preds = %if.then4
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3175
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 13, !dbg !3176
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !3176
  store %struct.cgraph_node* %13, %struct.cgraph_node** %node, align 8, !dbg !3177
  br label %if.end10, !dbg !3178

if.end10:                                         ; preds = %if.then9, %if.then4
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3179
  store %struct.cgraph_node* %14, %struct.cgraph_node** %retval, align 8, !dbg !3180
  br label %return, !dbg !3180

if.end11:                                         ; preds = %if.end
  %call12 = call %struct.cgraph_node* @cgraph_create_node(), !dbg !3181
  store %struct.cgraph_node* %call12, %struct.cgraph_node** %node, align 8, !dbg !3182
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3183
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3184
  %decl13 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 0, !dbg !3185
  store %union.tree_node* %15, %union.tree_node** %decl13, align 8, !dbg !3186
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3187
  %18 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !3188
  store %struct.cgraph_node* %17, %struct.cgraph_node** %18, align 8, !dbg !3189
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3190
  %decl_minimal = bitcast %union.tree_node* %19 to %struct.tree_decl_minimal*, !dbg !3190
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 4, !dbg !3190
  %20 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3190
  %tobool14 = icmp ne %union.tree_node* %20, null, !dbg !3190
  br i1 %tobool14, label %land.lhs.true, label %if.end29, !dbg !3192

land.lhs.true:                                    ; preds = %if.end11
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3193
  %decl_minimal15 = bitcast %union.tree_node* %21 to %struct.tree_decl_minimal*, !dbg !3193
  %context16 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal15, i32 0, i32 4, !dbg !3193
  %22 = load %union.tree_node*, %union.tree_node** %context16, align 8, !dbg !3193
  %base17 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !3193
  %23 = bitcast %struct.tree_base* %base17 to i64*, !dbg !3193
  %bf.load18 = load i64, i64* %23, align 8, !dbg !3193
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !3193
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !3193
  %cmp21 = icmp eq i32 %bf.cast20, 29, !dbg !3194
  br i1 %cmp21, label %if.then22, label %if.end29, !dbg !3195

if.then22:                                        ; preds = %land.lhs.true
  %24 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3196
  %decl_minimal23 = bitcast %union.tree_node* %24 to %struct.tree_decl_minimal*, !dbg !3196
  %context24 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal23, i32 0, i32 4, !dbg !3196
  %25 = load %union.tree_node*, %union.tree_node** %context24, align 8, !dbg !3196
  %call25 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %25), !dbg !3198
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3199
  %origin = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 5, !dbg !3200
  store %struct.cgraph_node* %call25, %struct.cgraph_node** %origin, align 8, !dbg !3201
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3202
  %origin26 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %27, i32 0, i32 5, !dbg !3203
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %origin26, align 8, !dbg !3203
  %nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 6, !dbg !3204
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %nested, align 8, !dbg !3204
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3205
  %next_nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 7, !dbg !3206
  store %struct.cgraph_node* %29, %struct.cgraph_node** %next_nested, align 8, !dbg !3207
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3208
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3209
  %origin27 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 5, !dbg !3210
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %origin27, align 8, !dbg !3210
  %nested28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 6, !dbg !3211
  store %struct.cgraph_node* %31, %struct.cgraph_node** %nested28, align 8, !dbg !3212
  br label %if.end29, !dbg !3213

if.end29:                                         ; preds = %if.then22, %land.lhs.true, %if.end11
  %34 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !3214
  %tobool30 = icmp ne %struct.htab* %34, null, !dbg !3214
  br i1 %tobool30, label %if.then31, label %if.end38, !dbg !3216

if.then31:                                        ; preds = %if.end29
  call void @llvm.dbg.declare(metadata i8*** %aslot, metadata !3217, metadata !DIExpression()), !dbg !3219
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !3220, metadata !DIExpression()), !dbg !3221
  %35 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3222
  %call32 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %35), !dbg !3222
  store %union.tree_node* %call32, %union.tree_node** %name, align 8, !dbg !3221
  %36 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !3223
  %37 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3224
  %38 = bitcast %union.tree_node* %37 to i8*, !dbg !3224
  %39 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3225
  %call33 = call i32 @decl_assembler_name_hash(%union.tree_node* %39), !dbg !3226
  %call34 = call i8** @htab_find_slot_with_hash(%struct.htab* %36, i8* %38, i32 %call33, i32 1), !dbg !3227
  store i8** %call34, i8*** %aslot, align 8, !dbg !3228
  %40 = load i8**, i8*** %aslot, align 8, !dbg !3229
  %41 = load i8*, i8** %40, align 8, !dbg !3231
  %cmp35 = icmp eq i8* %41, null, !dbg !3232
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !3233

if.then36:                                        ; preds = %if.then31
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3234
  %43 = bitcast %struct.cgraph_node* %42 to i8*, !dbg !3234
  %44 = load i8**, i8*** %aslot, align 8, !dbg !3235
  store i8* %43, i8** %44, align 8, !dbg !3236
  br label %if.end37, !dbg !3237

if.end37:                                         ; preds = %if.then36, %if.then31
  br label %if.end38, !dbg !3238

if.end38:                                         ; preds = %if.end37, %if.end29
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3239
  store %struct.cgraph_node* %45, %struct.cgraph_node** %retval, align 8, !dbg !3240
  br label %return, !dbg !3240

return:                                           ; preds = %if.end38, %if.end10
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %retval, align 8, !dbg !3241
  ret %struct.cgraph_node* %46, !dbg !3241
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local %struct.htab* @htab_create_alloc(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8* (i64, i64)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_node(i8* %p) #0 !dbg !3242 {
entry:
  %p.addr = alloca i8*, align 8
  %n = alloca %struct.cgraph_node*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !3243, metadata !DIExpression()), !dbg !3244
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n, metadata !3245, metadata !DIExpression()), !dbg !3246
  %0 = load i8*, i8** %p.addr, align 8, !dbg !3247
  %1 = bitcast i8* %0 to %struct.cgraph_node*, !dbg !3248
  store %struct.cgraph_node* %1, %struct.cgraph_node** %n, align 8, !dbg !3246
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !3249
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 0, !dbg !3249
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3249
  %decl_minimal = bitcast %union.tree_node* %3 to %struct.tree_decl_minimal*, !dbg !3249
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !3249
  %4 = load i32, i32* %uid, align 4, !dbg !3249
  ret i32 %4, !dbg !3250
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @eq_node(i8* %p1, i8* %p2) #0 !dbg !3251 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %n1 = alloca %struct.cgraph_node*, align 8
  %n2 = alloca %struct.cgraph_node*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !3252, metadata !DIExpression()), !dbg !3253
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !3254, metadata !DIExpression()), !dbg !3255
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n1, metadata !3256, metadata !DIExpression()), !dbg !3257
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !3258
  %1 = bitcast i8* %0 to %struct.cgraph_node*, !dbg !3259
  store %struct.cgraph_node* %1, %struct.cgraph_node** %n1, align 8, !dbg !3257
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n2, metadata !3260, metadata !DIExpression()), !dbg !3261
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !3262
  %3 = bitcast i8* %2 to %struct.cgraph_node*, !dbg !3263
  store %struct.cgraph_node* %3, %struct.cgraph_node** %n2, align 8, !dbg !3261
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %n1, align 8, !dbg !3264
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 0, !dbg !3264
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3264
  %decl_minimal = bitcast %union.tree_node* %5 to %struct.tree_decl_minimal*, !dbg !3264
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 2, !dbg !3264
  %6 = load i32, i32* %uid, align 4, !dbg !3264
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %n2, align 8, !dbg !3265
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !3265
  %8 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !3265
  %decl_minimal2 = bitcast %union.tree_node* %8 to %struct.tree_decl_minimal*, !dbg !3265
  %uid3 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal2, i32 0, i32 2, !dbg !3265
  %9 = load i32, i32* %uid3, align 4, !dbg !3265
  %cmp = icmp eq i32 %6, %9, !dbg !3266
  %conv = zext i1 %cmp to i32, !dbg !3266
  ret i32 %conv, !dbg !3267
}

declare dso_local i8* @ggc_calloc(i64, i64) #2

declare dso_local void @ggc_free(i8*) #2

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_node* @cgraph_create_node() #0 !dbg !3268 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3271, metadata !DIExpression()), !dbg !3272
  %call = call %struct.cgraph_node* @cgraph_allocate_node(), !dbg !3273
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !3272
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3274
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3275
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 3, !dbg !3276
  store %struct.cgraph_node* %0, %struct.cgraph_node** %next, align 8, !dbg !3277
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3278
  %pid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 26, !dbg !3279
  store i32 -1, i32* %pid, align 8, !dbg !3280
  %3 = load i32, i32* @cgraph_order, align 4, !dbg !3281
  %inc = add nsw i32 %3, 1, !dbg !3281
  store i32 %inc, i32* @cgraph_order, align 4, !dbg !3281
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3282
  %order = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 25, !dbg !3283
  store i32 %3, i32* %order, align 4, !dbg !3284
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3285
  %tobool = icmp ne %struct.cgraph_node* %5, null, !dbg !3285
  br i1 %tobool, label %if.then, label %if.end, !dbg !3287

if.then:                                          ; preds = %entry
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3288
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3289
  %previous = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 4, !dbg !3290
  store %struct.cgraph_node* %6, %struct.cgraph_node** %previous, align 8, !dbg !3291
  br label %if.end, !dbg !3289

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3292
  %previous1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 4, !dbg !3293
  store %struct.cgraph_node* null, %struct.cgraph_node** %previous1, align 8, !dbg !3294
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3295
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 19, !dbg !3296
  %estimated_growth = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 5, !dbg !3297
  store i32 -2147483648, i32* %estimated_growth, align 8, !dbg !3298
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3299
  store %struct.cgraph_node* %10, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3300
  %11 = load i32, i32* @cgraph_n_nodes, align 4, !dbg !3301
  %inc2 = add nsw i32 %11, 1, !dbg !3301
  store i32 %inc2, i32* @cgraph_n_nodes, align 4, !dbg !3301
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3302
  ret %struct.cgraph_node* %12, !dbg !3303
}

declare dso_local %union.tree_node* @decl_assembler_name(%union.tree_node*) #2

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

declare dso_local i32 @decl_assembler_name_hash(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @cgraph_same_body_alias(%union.tree_node* %alias, %union.tree_node* %decl) #0 !dbg !3304 {
entry:
  %alias.addr = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %alias, %union.tree_node** %alias.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %alias.addr, metadata !3307, metadata !DIExpression()), !dbg !3308
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3309, metadata !DIExpression()), !dbg !3310
  %0 = load %union.tree_node*, %union.tree_node** %alias.addr, align 8, !dbg !3311
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3312
  %call = call %struct.cgraph_node* @cgraph_same_body_alias_1(%union.tree_node* %0, %union.tree_node* %1), !dbg !3313
  %cmp = icmp ne %struct.cgraph_node* %call, null, !dbg !3314
  %conv = zext i1 %cmp to i32, !dbg !3314
  %conv1 = trunc i32 %conv to i8, !dbg !3313
  ret i8 %conv1, !dbg !3315
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_node* @cgraph_same_body_alias_1(%union.tree_node* %alias, %union.tree_node* %decl) #0 !dbg !3316 {
entry:
  %retval = alloca %struct.cgraph_node*, align 8
  %alias.addr = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %key = alloca %struct.cgraph_node, align 8
  %alias_node = alloca %struct.cgraph_node*, align 8
  %decl_node = alloca %struct.cgraph_node*, align 8
  %slot = alloca %struct.cgraph_node**, align 8
  store %union.tree_node* %alias, %union.tree_node** %alias.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %alias.addr, metadata !3319, metadata !DIExpression()), !dbg !3320
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3321, metadata !DIExpression()), !dbg !3322
  call void @llvm.dbg.declare(metadata %struct.cgraph_node* %key, metadata !3323, metadata !DIExpression()), !dbg !3324
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %alias_node, metadata !3325, metadata !DIExpression()), !dbg !3326
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %decl_node, metadata !3327, metadata !DIExpression()), !dbg !3328
  call void @llvm.dbg.declare(metadata %struct.cgraph_node*** %slot, metadata !3329, metadata !DIExpression()), !dbg !3330
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3331
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3331
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3331
  %bf.load = load i64, i64* %1, align 8, !dbg !3331
  %bf.clear = and i64 %bf.load, 65535, !dbg !3331
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3331
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !3331
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3331

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 519, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3331
  br label %cond.end, !dbg !3331

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3331

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3331
  %2 = load %union.tree_node*, %union.tree_node** %alias.addr, align 8, !dbg !3332
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !3332
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !3332
  %bf.load2 = load i64, i64* %3, align 8, !dbg !3332
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !3332
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !3332
  %cmp5 = icmp eq i32 %bf.cast4, 29, !dbg !3332
  br i1 %cmp5, label %cond.false7, label %cond.true6, !dbg !3332

cond.true6:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 520, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3332
  br label %cond.end8, !dbg !3332

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !3332

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !3332
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3333
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %4), !dbg !3334
  store %struct.cgraph_node* %call, %struct.cgraph_node** %decl_node, align 8, !dbg !3335
  %5 = load %union.tree_node*, %union.tree_node** %alias.addr, align 8, !dbg !3336
  %decl10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %key, i32 0, i32 0, !dbg !3337
  store %union.tree_node* %5, %union.tree_node** %decl10, align 8, !dbg !3338
  %6 = load %struct.htab*, %struct.htab** @cgraph_hash, align 8, !dbg !3339
  %7 = bitcast %struct.cgraph_node* %key to i8*, !dbg !3340
  %call11 = call i8** @htab_find_slot(%struct.htab* %6, i8* %7, i32 1), !dbg !3341
  %8 = bitcast i8** %call11 to %struct.cgraph_node**, !dbg !3342
  store %struct.cgraph_node** %8, %struct.cgraph_node*** %slot, align 8, !dbg !3343
  %9 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !3344
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %9, align 8, !dbg !3346
  %tobool = icmp ne %struct.cgraph_node* %10, null, !dbg !3346
  br i1 %tobool, label %if.then, label %if.end, !dbg !3347

if.then:                                          ; preds = %cond.end8
  store %struct.cgraph_node* null, %struct.cgraph_node** %retval, align 8, !dbg !3348
  br label %return, !dbg !3348

if.end:                                           ; preds = %cond.end8
  %call12 = call %struct.cgraph_node* @cgraph_allocate_node(), !dbg !3349
  store %struct.cgraph_node* %call12, %struct.cgraph_node** %alias_node, align 8, !dbg !3350
  %11 = load %union.tree_node*, %union.tree_node** %alias.addr, align 8, !dbg !3351
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %alias_node, align 8, !dbg !3352
  %decl13 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 0, !dbg !3353
  store %union.tree_node* %11, %union.tree_node** %decl13, align 8, !dbg !3354
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %alias_node, align 8, !dbg !3355
  %same_body_alias = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 27, !dbg !3356
  %bf.load14 = load i16, i16* %same_body_alias, align 4, !dbg !3357
  %bf.clear15 = and i16 %bf.load14, -513, !dbg !3357
  %bf.set = or i16 %bf.clear15, 512, !dbg !3357
  store i16 %bf.set, i16* %same_body_alias, align 4, !dbg !3357
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %decl_node, align 8, !dbg !3358
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %alias_node, align 8, !dbg !3359
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 13, !dbg !3360
  store %struct.cgraph_node* %14, %struct.cgraph_node** %same_body, align 8, !dbg !3361
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %alias_node, align 8, !dbg !3362
  %previous = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 4, !dbg !3363
  store %struct.cgraph_node* null, %struct.cgraph_node** %previous, align 8, !dbg !3364
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %decl_node, align 8, !dbg !3365
  %same_body16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 13, !dbg !3367
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body16, align 8, !dbg !3367
  %tobool17 = icmp ne %struct.cgraph_node* %18, null, !dbg !3365
  br i1 %tobool17, label %if.then18, label %if.end21, !dbg !3368

if.then18:                                        ; preds = %if.end
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %alias_node, align 8, !dbg !3369
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %decl_node, align 8, !dbg !3370
  %same_body19 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 13, !dbg !3371
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body19, align 8, !dbg !3371
  %previous20 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 4, !dbg !3372
  store %struct.cgraph_node* %19, %struct.cgraph_node** %previous20, align 8, !dbg !3373
  br label %if.end21, !dbg !3370

if.end21:                                         ; preds = %if.then18, %if.end
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %decl_node, align 8, !dbg !3374
  %same_body22 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 13, !dbg !3375
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body22, align 8, !dbg !3375
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %alias_node, align 8, !dbg !3376
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 3, !dbg !3377
  store %struct.cgraph_node* %23, %struct.cgraph_node** %next, align 8, !dbg !3378
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3379
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %alias_node, align 8, !dbg !3380
  %thunk = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 22, !dbg !3381
  %alias23 = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk, i32 0, i32 2, !dbg !3382
  store %union.tree_node* %25, %union.tree_node** %alias23, align 8, !dbg !3383
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %alias_node, align 8, !dbg !3384
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %decl_node, align 8, !dbg !3385
  %same_body24 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 13, !dbg !3386
  store %struct.cgraph_node* %27, %struct.cgraph_node** %same_body24, align 8, !dbg !3387
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %alias_node, align 8, !dbg !3388
  %30 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !3389
  store %struct.cgraph_node* %29, %struct.cgraph_node** %30, align 8, !dbg !3390
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %alias_node, align 8, !dbg !3391
  store %struct.cgraph_node* %31, %struct.cgraph_node** %retval, align 8, !dbg !3392
  br label %return, !dbg !3392

return:                                           ; preds = %if.end21, %if.then
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %retval, align 8, !dbg !3393
  ret %struct.cgraph_node* %32, !dbg !3393
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_add_thunk(%union.tree_node* %alias, %union.tree_node* %decl, i8 zeroext %this_adjusting, i64 %fixed_offset, i64 %virtual_value, %union.tree_node* %virtual_offset, %union.tree_node* %real_alias) #0 !dbg !3394 {
entry:
  %alias.addr = alloca %union.tree_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %this_adjusting.addr = alloca i8, align 1
  %fixed_offset.addr = alloca i64, align 8
  %virtual_value.addr = alloca i64, align 8
  %virtual_offset.addr = alloca %union.tree_node*, align 8
  %real_alias.addr = alloca %union.tree_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %union.tree_node* %alias, %union.tree_node** %alias.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %alias.addr, metadata !3397, metadata !DIExpression()), !dbg !3398
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3399, metadata !DIExpression()), !dbg !3400
  store i8 %this_adjusting, i8* %this_adjusting.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %this_adjusting.addr, metadata !3401, metadata !DIExpression()), !dbg !3402
  store i64 %fixed_offset, i64* %fixed_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %fixed_offset.addr, metadata !3403, metadata !DIExpression()), !dbg !3404
  store i64 %virtual_value, i64* %virtual_value.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %virtual_value.addr, metadata !3405, metadata !DIExpression()), !dbg !3406
  store %union.tree_node* %virtual_offset, %union.tree_node** %virtual_offset.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %virtual_offset.addr, metadata !3407, metadata !DIExpression()), !dbg !3408
  store %union.tree_node* %real_alias, %union.tree_node** %real_alias.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %real_alias.addr, metadata !3409, metadata !DIExpression()), !dbg !3410
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3411, metadata !DIExpression()), !dbg !3412
  %0 = load %union.tree_node*, %union.tree_node** %alias.addr, align 8, !dbg !3413
  %call = call %struct.cgraph_node* @cgraph_get_node(%union.tree_node* %0), !dbg !3414
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !3412
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3415
  %tobool = icmp ne %struct.cgraph_node* %1, null, !dbg !3415
  br i1 %tobool, label %if.then, label %if.end, !dbg !3417

if.then:                                          ; preds = %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3418
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 18, !dbg !3418
  %finalized = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !3418
  %bf.load = load i8, i8* %finalized, align 8, !dbg !3418
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !3418
  %bf.clear = and i8 %bf.lshr, 1, !dbg !3418
  %bf.cast = zext i8 %bf.clear to i32, !dbg !3418
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !3418
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !3418

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 572, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3418
  br label %cond.end, !dbg !3418

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !3418

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3418
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3420
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 13, !dbg !3420
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !3420
  %tobool2 = icmp ne %struct.cgraph_node* %4, null, !dbg !3420
  br i1 %tobool2, label %cond.true3, label %cond.false4, !dbg !3420

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 573, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3420
  br label %cond.end5, !dbg !3420

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3420

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !3420
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3421
  call void @cgraph_remove_node(%struct.cgraph_node* %5), !dbg !3422
  br label %if.end, !dbg !3423

if.end:                                           ; preds = %cond.end5, %entry
  %6 = load %union.tree_node*, %union.tree_node** %alias.addr, align 8, !dbg !3424
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3425
  %call7 = call %struct.cgraph_node* @cgraph_same_body_alias_1(%union.tree_node* %6, %union.tree_node* %7), !dbg !3426
  store %struct.cgraph_node* %call7, %struct.cgraph_node** %node, align 8, !dbg !3427
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3428
  %tobool8 = icmp ne %struct.cgraph_node* %8, null, !dbg !3428
  br i1 %tobool8, label %cond.false10, label %cond.true9, !dbg !3428

cond.true9:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 578, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3428
  br label %cond.end11, !dbg !3428

cond.false10:                                     ; preds = %if.end
  br label %cond.end11, !dbg !3428

cond.end11:                                       ; preds = %cond.false10, %cond.true9
  %cond12 = phi i32 [ 0, %cond.true9 ], [ 0, %cond.false10 ], !dbg !3428
  %9 = load i64, i64* %fixed_offset.addr, align 8, !dbg !3429
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3430
  %thunk = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 22, !dbg !3431
  %fixed_offset13 = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk, i32 0, i32 0, !dbg !3432
  store i64 %9, i64* %fixed_offset13, align 8, !dbg !3433
  %11 = load i8, i8* %this_adjusting.addr, align 1, !dbg !3434
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3435
  %thunk14 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 22, !dbg !3436
  %this_adjusting15 = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk14, i32 0, i32 3, !dbg !3437
  store i8 %11, i8* %this_adjusting15, align 8, !dbg !3438
  %13 = load i64, i64* %virtual_value.addr, align 8, !dbg !3439
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3440
  %thunk16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 22, !dbg !3441
  %virtual_value17 = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk16, i32 0, i32 1, !dbg !3442
  store i64 %13, i64* %virtual_value17, align 8, !dbg !3443
  %15 = load %union.tree_node*, %union.tree_node** %virtual_offset.addr, align 8, !dbg !3444
  %cmp = icmp ne %union.tree_node* %15, null, !dbg !3445
  %conv = zext i1 %cmp to i32, !dbg !3445
  %conv18 = trunc i32 %conv to i8, !dbg !3444
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3446
  %thunk19 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 22, !dbg !3447
  %virtual_offset_p = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk19, i32 0, i32 4, !dbg !3448
  store i8 %conv18, i8* %virtual_offset_p, align 1, !dbg !3449
  %17 = load %union.tree_node*, %union.tree_node** %real_alias.addr, align 8, !dbg !3450
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3451
  %thunk20 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 22, !dbg !3452
  %alias21 = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk20, i32 0, i32 2, !dbg !3453
  store %union.tree_node* %17, %union.tree_node** %alias21, align 8, !dbg !3454
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3455
  %thunk22 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 22, !dbg !3456
  %thunk_p = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk22, i32 0, i32 5, !dbg !3457
  store i8 1, i8* %thunk_p, align 2, !dbg !3458
  ret void, !dbg !3459
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_node* @cgraph_get_node(%union.tree_node* %decl) #0 !dbg !3460 {
entry:
  %retval = alloca %struct.cgraph_node*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %key = alloca %struct.cgraph_node, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %slot = alloca %struct.cgraph_node**, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !3461, metadata !DIExpression()), !dbg !3462
  call void @llvm.dbg.declare(metadata %struct.cgraph_node* %key, metadata !3463, metadata !DIExpression()), !dbg !3464
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !3465, metadata !DIExpression()), !dbg !3466
  store %struct.cgraph_node* null, %struct.cgraph_node** %node, align 8, !dbg !3466
  call void @llvm.dbg.declare(metadata %struct.cgraph_node*** %slot, metadata !3467, metadata !DIExpression()), !dbg !3468
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3469
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3469
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3469
  %bf.load = load i64, i64* %1, align 8, !dbg !3469
  %bf.clear = and i64 %bf.load, 65535, !dbg !3469
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3469
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !3469
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3469

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 599, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3469
  br label %cond.end, !dbg !3469

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3469

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3469
  %2 = load %struct.htab*, %struct.htab** @cgraph_hash, align 8, !dbg !3470
  %tobool = icmp ne %struct.htab* %2, null, !dbg !3470
  br i1 %tobool, label %if.end, label %if.then, !dbg !3472

if.then:                                          ; preds = %cond.end
  store %struct.cgraph_node* null, %struct.cgraph_node** %retval, align 8, !dbg !3473
  br label %return, !dbg !3473

if.end:                                           ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !3474
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %key, i32 0, i32 0, !dbg !3475
  store %union.tree_node* %3, %union.tree_node** %decl1, align 8, !dbg !3476
  %4 = load %struct.htab*, %struct.htab** @cgraph_hash, align 8, !dbg !3477
  %5 = bitcast %struct.cgraph_node* %key to i8*, !dbg !3478
  %call = call i8** @htab_find_slot(%struct.htab* %4, i8* %5, i32 0), !dbg !3479
  %6 = bitcast i8** %call to %struct.cgraph_node**, !dbg !3480
  store %struct.cgraph_node** %6, %struct.cgraph_node*** %slot, align 8, !dbg !3481
  %7 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !3482
  %tobool2 = icmp ne %struct.cgraph_node** %7, null, !dbg !3482
  br i1 %tobool2, label %land.lhs.true, label %if.end11, !dbg !3484

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !3485
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %8, align 8, !dbg !3486
  %tobool3 = icmp ne %struct.cgraph_node* %9, null, !dbg !3486
  br i1 %tobool3, label %if.then4, label %if.end11, !dbg !3487

if.then4:                                         ; preds = %land.lhs.true
  %10 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !3488
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %10, align 8, !dbg !3490
  store %struct.cgraph_node* %11, %struct.cgraph_node** %node, align 8, !dbg !3491
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3492
  %same_body_alias = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 27, !dbg !3494
  %bf.load5 = load i16, i16* %same_body_alias, align 4, !dbg !3494
  %bf.lshr = lshr i16 %bf.load5, 9, !dbg !3494
  %bf.clear6 = and i16 %bf.lshr, 1, !dbg !3494
  %bf.cast7 = zext i16 %bf.clear6 to i32, !dbg !3494
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !3492
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !3495

if.then9:                                         ; preds = %if.then4
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3496
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 13, !dbg !3497
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !3497
  store %struct.cgraph_node* %14, %struct.cgraph_node** %node, align 8, !dbg !3498
  br label %if.end10, !dbg !3499

if.end10:                                         ; preds = %if.then9, %if.then4
  br label %if.end11, !dbg !3500

if.end11:                                         ; preds = %if.end10, %land.lhs.true, %if.end
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !3501
  store %struct.cgraph_node* %15, %struct.cgraph_node** %retval, align 8, !dbg !3502
  br label %return, !dbg !3502

return:                                           ; preds = %if.end11, %if.then
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %retval, align 8, !dbg !3503
  ret %struct.cgraph_node* %16, !dbg !3503
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_remove_node(%struct.cgraph_node* %node) #0 !dbg !3504 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %slot = alloca i8**, align 8
  %kill_body = alloca i8, align 1
  %n = alloca %struct.cgraph_node*, align 8
  %uid = alloca i32, align 4
  %node2 = alloca %struct.cgraph_node**, align 8
  %next_inline_clone = alloca %struct.cgraph_node*, align 8
  %n37 = alloca %struct.cgraph_node*, align 8
  %new_clones = alloca %struct.cgraph_node*, align 8
  %n137 = alloca %struct.cgraph_node*, align 8
  %next138 = alloca %struct.cgraph_node*, align 8
  %prev = alloca %struct.cgraph_node*, align 8
  %n209 = alloca %struct.cgraph_node*, align 8
  %name = alloca %union.tree_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !3505, metadata !DIExpression()), !dbg !3506
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !3507, metadata !DIExpression()), !dbg !3508
  call void @llvm.dbg.declare(metadata i8* %kill_body, metadata !3509, metadata !DIExpression()), !dbg !3510
  store i8 0, i8* %kill_body, align 1, !dbg !3510
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n, metadata !3511, metadata !DIExpression()), !dbg !3512
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !3513, metadata !DIExpression()), !dbg !3514
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3515
  %uid1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 24, !dbg !3516
  %1 = load i32, i32* %uid1, align 8, !dbg !3516
  store i32 %1, i32* %uid, align 4, !dbg !3514
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3517
  call void @cgraph_call_node_removal_hooks(%struct.cgraph_node* %2), !dbg !3518
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3519
  call void @cgraph_node_remove_callers(%struct.cgraph_node* %3), !dbg !3520
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3521
  call void @cgraph_node_remove_callees(%struct.cgraph_node* %4), !dbg !3522
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3523
  %ipa_transforms_to_apply = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 17, !dbg !3523
  call void @VEC_ipa_opt_pass_heap_free(%struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply), !dbg !3523
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3524
  %reachable = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 27, !dbg !3525
  %bf.load = load i16, i16* %reachable, align 4, !dbg !3526
  %bf.clear = and i16 %bf.load, -9, !dbg !3526
  store i16 %bf.clear, i16* %reachable, align 4, !dbg !3526
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3527
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 27, !dbg !3528
  %bf.load2 = load i16, i16* %needed, align 4, !dbg !3529
  %bf.clear3 = and i16 %bf.load2, -2, !dbg !3529
  store i16 %bf.clear3, i16* %needed, align 4, !dbg !3529
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3530
  %nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 6, !dbg !3532
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %nested, align 8, !dbg !3532
  store %struct.cgraph_node* %9, %struct.cgraph_node** %n, align 8, !dbg !3533
  br label %for.cond, !dbg !3534

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !3535
  %tobool = icmp ne %struct.cgraph_node* %10, null, !dbg !3537
  br i1 %tobool, label %for.body, label %for.end, !dbg !3537

for.body:                                         ; preds = %for.cond
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !3538
  %origin = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 5, !dbg !3539
  store %struct.cgraph_node* null, %struct.cgraph_node** %origin, align 8, !dbg !3540
  br label %for.inc, !dbg !3538

for.inc:                                          ; preds = %for.body
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !3541
  %next_nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 7, !dbg !3542
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %next_nested, align 8, !dbg !3542
  store %struct.cgraph_node* %13, %struct.cgraph_node** %n, align 8, !dbg !3543
  br label %for.cond, !dbg !3544, !llvm.loop !3545

for.end:                                          ; preds = %for.cond
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3547
  %nested4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 6, !dbg !3548
  store %struct.cgraph_node* null, %struct.cgraph_node** %nested4, align 8, !dbg !3549
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3550
  %origin5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 5, !dbg !3552
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %origin5, align 8, !dbg !3552
  %tobool6 = icmp ne %struct.cgraph_node* %16, null, !dbg !3550
  br i1 %tobool6, label %if.then, label %if.end, !dbg !3553

if.then:                                          ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.cgraph_node*** %node2, metadata !3554, metadata !DIExpression()), !dbg !3556
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3557
  %origin7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 5, !dbg !3558
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %origin7, align 8, !dbg !3558
  %nested8 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 6, !dbg !3559
  store %struct.cgraph_node** %nested8, %struct.cgraph_node*** %node2, align 8, !dbg !3556
  br label %while.cond, !dbg !3560

while.cond:                                       ; preds = %while.body, %if.then
  %19 = load %struct.cgraph_node**, %struct.cgraph_node*** %node2, align 8, !dbg !3561
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %19, align 8, !dbg !3562
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3563
  %cmp = icmp ne %struct.cgraph_node* %20, %21, !dbg !3564
  br i1 %cmp, label %while.body, label %while.end, !dbg !3560

while.body:                                       ; preds = %while.cond
  %22 = load %struct.cgraph_node**, %struct.cgraph_node*** %node2, align 8, !dbg !3565
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %22, align 8, !dbg !3566
  %next_nested9 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 7, !dbg !3567
  store %struct.cgraph_node** %next_nested9, %struct.cgraph_node*** %node2, align 8, !dbg !3568
  br label %while.cond, !dbg !3560, !llvm.loop !3569

while.end:                                        ; preds = %while.cond
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3570
  %next_nested10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 7, !dbg !3571
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %next_nested10, align 8, !dbg !3571
  %26 = load %struct.cgraph_node**, %struct.cgraph_node*** %node2, align 8, !dbg !3572
  store %struct.cgraph_node* %25, %struct.cgraph_node** %26, align 8, !dbg !3573
  br label %if.end, !dbg !3574

if.end:                                           ; preds = %while.end, %for.end
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3575
  %previous = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %27, i32 0, i32 4, !dbg !3577
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %previous, align 8, !dbg !3577
  %tobool11 = icmp ne %struct.cgraph_node* %28, null, !dbg !3575
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !3578

if.then12:                                        ; preds = %if.end
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3579
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %29, i32 0, i32 3, !dbg !3580
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !3580
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3581
  %previous13 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %31, i32 0, i32 4, !dbg !3582
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %previous13, align 8, !dbg !3582
  %next14 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 3, !dbg !3583
  store %struct.cgraph_node* %30, %struct.cgraph_node** %next14, align 8, !dbg !3584
  br label %if.end16, !dbg !3581

if.else:                                          ; preds = %if.end
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3585
  %next15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 3, !dbg !3586
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %next15, align 8, !dbg !3586
  store %struct.cgraph_node* %34, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !3587
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then12
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3588
  %next17 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %35, i32 0, i32 3, !dbg !3590
  %36 = load %struct.cgraph_node*, %struct.cgraph_node** %next17, align 8, !dbg !3590
  %tobool18 = icmp ne %struct.cgraph_node* %36, null, !dbg !3588
  br i1 %tobool18, label %if.then19, label %if.end23, !dbg !3591

if.then19:                                        ; preds = %if.end16
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3592
  %previous20 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 4, !dbg !3593
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %previous20, align 8, !dbg !3593
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3594
  %next21 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %39, i32 0, i32 3, !dbg !3595
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %next21, align 8, !dbg !3595
  %previous22 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %40, i32 0, i32 4, !dbg !3596
  store %struct.cgraph_node* %38, %struct.cgraph_node** %previous22, align 8, !dbg !3597
  br label %if.end23, !dbg !3594

if.end23:                                         ; preds = %if.then19, %if.end16
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3598
  %next24 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %41, i32 0, i32 3, !dbg !3599
  store %struct.cgraph_node* null, %struct.cgraph_node** %next24, align 8, !dbg !3600
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3601
  %previous25 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i32 0, i32 4, !dbg !3602
  store %struct.cgraph_node* null, %struct.cgraph_node** %previous25, align 8, !dbg !3603
  %43 = load %struct.htab*, %struct.htab** @cgraph_hash, align 8, !dbg !3604
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3605
  %45 = bitcast %struct.cgraph_node* %44 to i8*, !dbg !3605
  %call = call i8** @htab_find_slot(%struct.htab* %43, i8* %45, i32 0), !dbg !3606
  store i8** %call, i8*** %slot, align 8, !dbg !3607
  %46 = load i8**, i8*** %slot, align 8, !dbg !3608
  %47 = load i8*, i8** %46, align 8, !dbg !3610
  %48 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3611
  %49 = bitcast %struct.cgraph_node* %48 to i8*, !dbg !3611
  %cmp26 = icmp eq i8* %47, %49, !dbg !3612
  br i1 %cmp26, label %if.then27, label %if.end111, !dbg !3613

if.then27:                                        ; preds = %if.end23
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %next_inline_clone, metadata !3614, metadata !DIExpression()), !dbg !3616
  %50 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3617
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %50, i32 0, i32 11, !dbg !3619
  %51 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !3619
  store %struct.cgraph_node* %51, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3620
  br label %for.cond28, !dbg !3621

for.cond28:                                       ; preds = %for.inc33, %if.then27
  %52 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3622
  %tobool29 = icmp ne %struct.cgraph_node* %52, null, !dbg !3622
  br i1 %tobool29, label %land.rhs, label %land.end, !dbg !3624

land.rhs:                                         ; preds = %for.cond28
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3625
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %53, i32 0, i32 0, !dbg !3626
  %54 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3626
  %55 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3627
  %decl30 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %55, i32 0, i32 0, !dbg !3628
  %56 = load %union.tree_node*, %union.tree_node** %decl30, align 8, !dbg !3628
  %cmp31 = icmp ne %union.tree_node* %54, %56, !dbg !3629
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond28
  %57 = phi i1 [ false, %for.cond28 ], [ %cmp31, %land.rhs ], !dbg !3630
  br i1 %57, label %for.body32, label %for.end34, !dbg !3631

for.body32:                                       ; preds = %land.end
  br label %for.inc33, !dbg !3631

for.inc33:                                        ; preds = %for.body32
  %58 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3632
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %58, i32 0, i32 9, !dbg !3633
  %59 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !3633
  store %struct.cgraph_node* %59, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3634
  br label %for.cond28, !dbg !3635, !llvm.loop !3636

for.end34:                                        ; preds = %land.end
  %60 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3638
  %tobool35 = icmp ne %struct.cgraph_node* %60, null, !dbg !3638
  br i1 %tobool35, label %if.then36, label %if.else109, !dbg !3640

if.then36:                                        ; preds = %for.end34
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n37, metadata !3641, metadata !DIExpression()), !dbg !3643
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %new_clones, metadata !3644, metadata !DIExpression()), !dbg !3645
  %61 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3646
  %62 = bitcast %struct.cgraph_node* %61 to i8*, !dbg !3646
  %63 = load i8**, i8*** %slot, align 8, !dbg !3647
  store i8* %62, i8** %63, align 8, !dbg !3648
  %64 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3649
  %next_sibling_clone38 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %64, i32 0, i32 9, !dbg !3651
  %65 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone38, align 8, !dbg !3651
  %tobool39 = icmp ne %struct.cgraph_node* %65, null, !dbg !3649
  br i1 %tobool39, label %if.then40, label %if.end43, !dbg !3652

if.then40:                                        ; preds = %if.then36
  %66 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3653
  %prev_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %66, i32 0, i32 10, !dbg !3654
  %67 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone, align 8, !dbg !3654
  %68 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3655
  %next_sibling_clone41 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %68, i32 0, i32 9, !dbg !3656
  %69 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone41, align 8, !dbg !3656
  %prev_sibling_clone42 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %69, i32 0, i32 10, !dbg !3657
  store %struct.cgraph_node* %67, %struct.cgraph_node** %prev_sibling_clone42, align 8, !dbg !3658
  br label %if.end43, !dbg !3655

if.end43:                                         ; preds = %if.then40, %if.then36
  %70 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3659
  %prev_sibling_clone44 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %70, i32 0, i32 10, !dbg !3661
  %71 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone44, align 8, !dbg !3661
  %tobool45 = icmp ne %struct.cgraph_node* %71, null, !dbg !3659
  br i1 %tobool45, label %if.then46, label %if.else52, !dbg !3662

if.then46:                                        ; preds = %if.end43
  %72 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3663
  %clones47 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %72, i32 0, i32 11, !dbg !3663
  %73 = load %struct.cgraph_node*, %struct.cgraph_node** %clones47, align 8, !dbg !3663
  %74 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3663
  %cmp48 = icmp ne %struct.cgraph_node* %73, %74, !dbg !3663
  br i1 %cmp48, label %cond.false, label %cond.true, !dbg !3663

cond.true:                                        ; preds = %if.then46
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1349, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3663
  br label %cond.end, !dbg !3663

cond.false:                                       ; preds = %if.then46
  br label %cond.end, !dbg !3663

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3663
  %75 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3665
  %next_sibling_clone49 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %75, i32 0, i32 9, !dbg !3666
  %76 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone49, align 8, !dbg !3666
  %77 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3667
  %prev_sibling_clone50 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %77, i32 0, i32 10, !dbg !3668
  %78 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone50, align 8, !dbg !3668
  %next_sibling_clone51 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %78, i32 0, i32 9, !dbg !3669
  store %struct.cgraph_node* %76, %struct.cgraph_node** %next_sibling_clone51, align 8, !dbg !3670
  br label %if.end61, !dbg !3671

if.else52:                                        ; preds = %if.end43
  %79 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3672
  %clones53 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %79, i32 0, i32 11, !dbg !3672
  %80 = load %struct.cgraph_node*, %struct.cgraph_node** %clones53, align 8, !dbg !3672
  %81 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3672
  %cmp54 = icmp eq %struct.cgraph_node* %80, %81, !dbg !3672
  br i1 %cmp54, label %cond.false56, label %cond.true55, !dbg !3672

cond.true55:                                      ; preds = %if.else52
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1355, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3672
  br label %cond.end57, !dbg !3672

cond.false56:                                     ; preds = %if.else52
  br label %cond.end57, !dbg !3672

cond.end57:                                       ; preds = %cond.false56, %cond.true55
  %cond58 = phi i32 [ 0, %cond.true55 ], [ 0, %cond.false56 ], !dbg !3672
  %82 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3674
  %next_sibling_clone59 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %82, i32 0, i32 9, !dbg !3675
  %83 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone59, align 8, !dbg !3675
  %84 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3676
  %clones60 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %84, i32 0, i32 11, !dbg !3677
  store %struct.cgraph_node* %83, %struct.cgraph_node** %clones60, align 8, !dbg !3678
  br label %if.end61

if.end61:                                         ; preds = %cond.end57, %cond.end
  %85 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3679
  %clones62 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %85, i32 0, i32 11, !dbg !3680
  %86 = load %struct.cgraph_node*, %struct.cgraph_node** %clones62, align 8, !dbg !3680
  store %struct.cgraph_node* %86, %struct.cgraph_node** %new_clones, align 8, !dbg !3681
  %87 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3682
  %clones63 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %87, i32 0, i32 11, !dbg !3683
  store %struct.cgraph_node* null, %struct.cgraph_node** %clones63, align 8, !dbg !3684
  %88 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3685
  %clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %88, i32 0, i32 21, !dbg !3686
  %89 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3687
  %clone64 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %89, i32 0, i32 21, !dbg !3688
  %90 = bitcast %struct.cgraph_clone_info* %clone to i8*, !dbg !3688
  %91 = bitcast %struct.cgraph_clone_info* %clone64 to i8*, !dbg !3688
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 24, i1 false), !dbg !3688
  %92 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3689
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %92, i32 0, i32 12, !dbg !3690
  %93 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !3690
  %94 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3691
  %clone_of65 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %94, i32 0, i32 12, !dbg !3692
  store %struct.cgraph_node* %93, %struct.cgraph_node** %clone_of65, align 8, !dbg !3693
  %95 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3694
  %prev_sibling_clone66 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %95, i32 0, i32 10, !dbg !3695
  store %struct.cgraph_node* null, %struct.cgraph_node** %prev_sibling_clone66, align 8, !dbg !3696
  %96 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3697
  %next_sibling_clone67 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %96, i32 0, i32 9, !dbg !3698
  store %struct.cgraph_node* null, %struct.cgraph_node** %next_sibling_clone67, align 8, !dbg !3699
  %97 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3700
  %clone_of68 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %97, i32 0, i32 12, !dbg !3702
  %98 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of68, align 8, !dbg !3702
  %tobool69 = icmp ne %struct.cgraph_node* %98, null, !dbg !3700
  br i1 %tobool69, label %if.then70, label %if.end84, !dbg !3703

if.then70:                                        ; preds = %if.end61
  %99 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3704
  %clone_of71 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %99, i32 0, i32 12, !dbg !3707
  %100 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of71, align 8, !dbg !3707
  %clones72 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %100, i32 0, i32 11, !dbg !3708
  %101 = load %struct.cgraph_node*, %struct.cgraph_node** %clones72, align 8, !dbg !3708
  %tobool73 = icmp ne %struct.cgraph_node* %101, null, !dbg !3704
  br i1 %tobool73, label %if.then74, label %if.end78, !dbg !3709

if.then74:                                        ; preds = %if.then70
  %102 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3710
  %103 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3711
  %clone_of75 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %103, i32 0, i32 12, !dbg !3712
  %104 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of75, align 8, !dbg !3712
  %clones76 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %104, i32 0, i32 11, !dbg !3713
  %105 = load %struct.cgraph_node*, %struct.cgraph_node** %clones76, align 8, !dbg !3713
  %prev_sibling_clone77 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %105, i32 0, i32 10, !dbg !3714
  store %struct.cgraph_node* %102, %struct.cgraph_node** %prev_sibling_clone77, align 8, !dbg !3715
  br label %if.end78, !dbg !3711

if.end78:                                         ; preds = %if.then74, %if.then70
  %106 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3716
  %clone_of79 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %106, i32 0, i32 12, !dbg !3717
  %107 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of79, align 8, !dbg !3717
  %clones80 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %107, i32 0, i32 11, !dbg !3718
  %108 = load %struct.cgraph_node*, %struct.cgraph_node** %clones80, align 8, !dbg !3718
  %109 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3719
  %next_sibling_clone81 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %109, i32 0, i32 9, !dbg !3720
  store %struct.cgraph_node* %108, %struct.cgraph_node** %next_sibling_clone81, align 8, !dbg !3721
  %110 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3722
  %111 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3723
  %clone_of82 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %111, i32 0, i32 12, !dbg !3724
  %112 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of82, align 8, !dbg !3724
  %clones83 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %112, i32 0, i32 11, !dbg !3725
  store %struct.cgraph_node* %110, %struct.cgraph_node** %clones83, align 8, !dbg !3726
  br label %if.end84, !dbg !3727

if.end84:                                         ; preds = %if.end78, %if.end61
  %113 = load %struct.cgraph_node*, %struct.cgraph_node** %new_clones, align 8, !dbg !3728
  %tobool85 = icmp ne %struct.cgraph_node* %113, null, !dbg !3728
  br i1 %tobool85, label %if.then86, label %if.end102, !dbg !3730

if.then86:                                        ; preds = %if.end84
  %114 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3731
  %clones87 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %114, i32 0, i32 11, !dbg !3734
  %115 = load %struct.cgraph_node*, %struct.cgraph_node** %clones87, align 8, !dbg !3734
  %tobool88 = icmp ne %struct.cgraph_node* %115, null, !dbg !3731
  br i1 %tobool88, label %if.else91, label %if.then89, !dbg !3735

if.then89:                                        ; preds = %if.then86
  %116 = load %struct.cgraph_node*, %struct.cgraph_node** %new_clones, align 8, !dbg !3736
  %117 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3737
  %clones90 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %117, i32 0, i32 11, !dbg !3738
  store %struct.cgraph_node* %116, %struct.cgraph_node** %clones90, align 8, !dbg !3739
  br label %if.end101, !dbg !3737

if.else91:                                        ; preds = %if.then86
  %118 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3740
  %clones92 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %118, i32 0, i32 11, !dbg !3742
  %119 = load %struct.cgraph_node*, %struct.cgraph_node** %clones92, align 8, !dbg !3742
  store %struct.cgraph_node* %119, %struct.cgraph_node** %n37, align 8, !dbg !3743
  br label %while.cond93, !dbg !3744

while.cond93:                                     ; preds = %while.body96, %if.else91
  %120 = load %struct.cgraph_node*, %struct.cgraph_node** %n37, align 8, !dbg !3745
  %next_sibling_clone94 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %120, i32 0, i32 9, !dbg !3746
  %121 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone94, align 8, !dbg !3746
  %tobool95 = icmp ne %struct.cgraph_node* %121, null, !dbg !3744
  br i1 %tobool95, label %while.body96, label %while.end98, !dbg !3744

while.body96:                                     ; preds = %while.cond93
  %122 = load %struct.cgraph_node*, %struct.cgraph_node** %n37, align 8, !dbg !3747
  %next_sibling_clone97 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %122, i32 0, i32 9, !dbg !3748
  %123 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone97, align 8, !dbg !3748
  store %struct.cgraph_node* %123, %struct.cgraph_node** %n37, align 8, !dbg !3749
  br label %while.cond93, !dbg !3744, !llvm.loop !3750

while.end98:                                      ; preds = %while.cond93
  %124 = load %struct.cgraph_node*, %struct.cgraph_node** %new_clones, align 8, !dbg !3751
  %125 = load %struct.cgraph_node*, %struct.cgraph_node** %n37, align 8, !dbg !3752
  %next_sibling_clone99 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %125, i32 0, i32 9, !dbg !3753
  store %struct.cgraph_node* %124, %struct.cgraph_node** %next_sibling_clone99, align 8, !dbg !3754
  %126 = load %struct.cgraph_node*, %struct.cgraph_node** %n37, align 8, !dbg !3755
  %127 = load %struct.cgraph_node*, %struct.cgraph_node** %new_clones, align 8, !dbg !3756
  %prev_sibling_clone100 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %127, i32 0, i32 10, !dbg !3757
  store %struct.cgraph_node* %126, %struct.cgraph_node** %prev_sibling_clone100, align 8, !dbg !3758
  br label %if.end101

if.end101:                                        ; preds = %while.end98, %if.then89
  br label %if.end102, !dbg !3759

if.end102:                                        ; preds = %if.end101, %if.end84
  %128 = load %struct.cgraph_node*, %struct.cgraph_node** %new_clones, align 8, !dbg !3760
  store %struct.cgraph_node* %128, %struct.cgraph_node** %n37, align 8, !dbg !3761
  br label %while.cond103, !dbg !3762

while.cond103:                                    ; preds = %while.body105, %if.end102
  %129 = load %struct.cgraph_node*, %struct.cgraph_node** %n37, align 8, !dbg !3763
  %tobool104 = icmp ne %struct.cgraph_node* %129, null, !dbg !3762
  br i1 %tobool104, label %while.body105, label %while.end108, !dbg !3762

while.body105:                                    ; preds = %while.cond103
  %130 = load %struct.cgraph_node*, %struct.cgraph_node** %next_inline_clone, align 8, !dbg !3764
  %131 = load %struct.cgraph_node*, %struct.cgraph_node** %n37, align 8, !dbg !3766
  %clone_of106 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %131, i32 0, i32 12, !dbg !3767
  store %struct.cgraph_node* %130, %struct.cgraph_node** %clone_of106, align 8, !dbg !3768
  %132 = load %struct.cgraph_node*, %struct.cgraph_node** %n37, align 8, !dbg !3769
  %next_sibling_clone107 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %132, i32 0, i32 9, !dbg !3770
  %133 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone107, align 8, !dbg !3770
  store %struct.cgraph_node* %133, %struct.cgraph_node** %n37, align 8, !dbg !3771
  br label %while.cond103, !dbg !3762, !llvm.loop !3772

while.end108:                                     ; preds = %while.cond103
  br label %if.end110, !dbg !3774

if.else109:                                       ; preds = %for.end34
  %134 = load %struct.htab*, %struct.htab** @cgraph_hash, align 8, !dbg !3775
  %135 = load i8**, i8*** %slot, align 8, !dbg !3777
  call void @htab_clear_slot(%struct.htab* %134, i8** %135), !dbg !3778
  store i8 1, i8* %kill_body, align 1, !dbg !3779
  br label %if.end110

if.end110:                                        ; preds = %if.else109, %while.end108
  br label %if.end111, !dbg !3780

if.end111:                                        ; preds = %if.end110, %if.end23
  %136 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3781
  %prev_sibling_clone112 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %136, i32 0, i32 10, !dbg !3783
  %137 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone112, align 8, !dbg !3783
  %tobool113 = icmp ne %struct.cgraph_node* %137, null, !dbg !3781
  br i1 %tobool113, label %if.then114, label %if.else118, !dbg !3784

if.then114:                                       ; preds = %if.end111
  %138 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3785
  %next_sibling_clone115 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %138, i32 0, i32 9, !dbg !3786
  %139 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone115, align 8, !dbg !3786
  %140 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3787
  %prev_sibling_clone116 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %140, i32 0, i32 10, !dbg !3788
  %141 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone116, align 8, !dbg !3788
  %next_sibling_clone117 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %141, i32 0, i32 9, !dbg !3789
  store %struct.cgraph_node* %139, %struct.cgraph_node** %next_sibling_clone117, align 8, !dbg !3790
  br label %if.end126, !dbg !3787

if.else118:                                       ; preds = %if.end111
  %142 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3791
  %clone_of119 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %142, i32 0, i32 12, !dbg !3793
  %143 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of119, align 8, !dbg !3793
  %tobool120 = icmp ne %struct.cgraph_node* %143, null, !dbg !3791
  br i1 %tobool120, label %if.then121, label %if.end125, !dbg !3794

if.then121:                                       ; preds = %if.else118
  %144 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3795
  %next_sibling_clone122 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %144, i32 0, i32 9, !dbg !3796
  %145 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone122, align 8, !dbg !3796
  %146 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3797
  %clone_of123 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %146, i32 0, i32 12, !dbg !3798
  %147 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of123, align 8, !dbg !3798
  %clones124 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %147, i32 0, i32 11, !dbg !3799
  store %struct.cgraph_node* %145, %struct.cgraph_node** %clones124, align 8, !dbg !3800
  br label %if.end125, !dbg !3797

if.end125:                                        ; preds = %if.then121, %if.else118
  br label %if.end126

if.end126:                                        ; preds = %if.end125, %if.then114
  %148 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3801
  %next_sibling_clone127 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %148, i32 0, i32 9, !dbg !3803
  %149 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone127, align 8, !dbg !3803
  %tobool128 = icmp ne %struct.cgraph_node* %149, null, !dbg !3801
  br i1 %tobool128, label %if.then129, label %if.end133, !dbg !3804

if.then129:                                       ; preds = %if.end126
  %150 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3805
  %prev_sibling_clone130 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %150, i32 0, i32 10, !dbg !3806
  %151 = load %struct.cgraph_node*, %struct.cgraph_node** %prev_sibling_clone130, align 8, !dbg !3806
  %152 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3807
  %next_sibling_clone131 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %152, i32 0, i32 9, !dbg !3808
  %153 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone131, align 8, !dbg !3808
  %prev_sibling_clone132 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %153, i32 0, i32 10, !dbg !3809
  store %struct.cgraph_node* %151, %struct.cgraph_node** %prev_sibling_clone132, align 8, !dbg !3810
  br label %if.end133, !dbg !3807

if.end133:                                        ; preds = %if.then129, %if.end126
  %154 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3811
  %clones134 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %154, i32 0, i32 11, !dbg !3813
  %155 = load %struct.cgraph_node*, %struct.cgraph_node** %clones134, align 8, !dbg !3813
  %tobool135 = icmp ne %struct.cgraph_node* %155, null, !dbg !3811
  br i1 %tobool135, label %if.then136, label %if.end180, !dbg !3814

if.then136:                                       ; preds = %if.end133
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n137, metadata !3815, metadata !DIExpression()), !dbg !3817
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %next138, metadata !3818, metadata !DIExpression()), !dbg !3819
  %156 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3820
  %clone_of139 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %156, i32 0, i32 12, !dbg !3822
  %157 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of139, align 8, !dbg !3822
  %tobool140 = icmp ne %struct.cgraph_node* %157, null, !dbg !3820
  br i1 %tobool140, label %if.then141, label %if.else168, !dbg !3823

if.then141:                                       ; preds = %if.then136
  %158 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3824
  %clones142 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %158, i32 0, i32 11, !dbg !3827
  %159 = load %struct.cgraph_node*, %struct.cgraph_node** %clones142, align 8, !dbg !3827
  store %struct.cgraph_node* %159, %struct.cgraph_node** %n137, align 8, !dbg !3828
  br label %for.cond143, !dbg !3829

for.cond143:                                      ; preds = %for.inc149, %if.then141
  %160 = load %struct.cgraph_node*, %struct.cgraph_node** %n137, align 8, !dbg !3830
  %next_sibling_clone144 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %160, i32 0, i32 9, !dbg !3832
  %161 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone144, align 8, !dbg !3832
  %tobool145 = icmp ne %struct.cgraph_node* %161, null, !dbg !3833
  br i1 %tobool145, label %for.body146, label %for.end151, !dbg !3833

for.body146:                                      ; preds = %for.cond143
  %162 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3834
  %clone_of147 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %162, i32 0, i32 12, !dbg !3835
  %163 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of147, align 8, !dbg !3835
  %164 = load %struct.cgraph_node*, %struct.cgraph_node** %n137, align 8, !dbg !3836
  %clone_of148 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %164, i32 0, i32 12, !dbg !3837
  store %struct.cgraph_node* %163, %struct.cgraph_node** %clone_of148, align 8, !dbg !3838
  br label %for.inc149, !dbg !3836

for.inc149:                                       ; preds = %for.body146
  %165 = load %struct.cgraph_node*, %struct.cgraph_node** %n137, align 8, !dbg !3839
  %next_sibling_clone150 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %165, i32 0, i32 9, !dbg !3840
  %166 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone150, align 8, !dbg !3840
  store %struct.cgraph_node* %166, %struct.cgraph_node** %n137, align 8, !dbg !3841
  br label %for.cond143, !dbg !3842, !llvm.loop !3843

for.end151:                                       ; preds = %for.cond143
  %167 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3845
  %clone_of152 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %167, i32 0, i32 12, !dbg !3846
  %168 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of152, align 8, !dbg !3846
  %169 = load %struct.cgraph_node*, %struct.cgraph_node** %n137, align 8, !dbg !3847
  %clone_of153 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %169, i32 0, i32 12, !dbg !3848
  store %struct.cgraph_node* %168, %struct.cgraph_node** %clone_of153, align 8, !dbg !3849
  %170 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3850
  %clone_of154 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %170, i32 0, i32 12, !dbg !3851
  %171 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of154, align 8, !dbg !3851
  %clones155 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %171, i32 0, i32 11, !dbg !3852
  %172 = load %struct.cgraph_node*, %struct.cgraph_node** %clones155, align 8, !dbg !3852
  %173 = load %struct.cgraph_node*, %struct.cgraph_node** %n137, align 8, !dbg !3853
  %next_sibling_clone156 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %173, i32 0, i32 9, !dbg !3854
  store %struct.cgraph_node* %172, %struct.cgraph_node** %next_sibling_clone156, align 8, !dbg !3855
  %174 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3856
  %clone_of157 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %174, i32 0, i32 12, !dbg !3858
  %175 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of157, align 8, !dbg !3858
  %clones158 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %175, i32 0, i32 11, !dbg !3859
  %176 = load %struct.cgraph_node*, %struct.cgraph_node** %clones158, align 8, !dbg !3859
  %tobool159 = icmp ne %struct.cgraph_node* %176, null, !dbg !3856
  br i1 %tobool159, label %if.then160, label %if.end164, !dbg !3860

if.then160:                                       ; preds = %for.end151
  %177 = load %struct.cgraph_node*, %struct.cgraph_node** %n137, align 8, !dbg !3861
  %178 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3862
  %clone_of161 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %178, i32 0, i32 12, !dbg !3863
  %179 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of161, align 8, !dbg !3863
  %clones162 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %179, i32 0, i32 11, !dbg !3864
  %180 = load %struct.cgraph_node*, %struct.cgraph_node** %clones162, align 8, !dbg !3864
  %prev_sibling_clone163 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %180, i32 0, i32 10, !dbg !3865
  store %struct.cgraph_node* %177, %struct.cgraph_node** %prev_sibling_clone163, align 8, !dbg !3866
  br label %if.end164, !dbg !3862

if.end164:                                        ; preds = %if.then160, %for.end151
  %181 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3867
  %clones165 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %181, i32 0, i32 11, !dbg !3868
  %182 = load %struct.cgraph_node*, %struct.cgraph_node** %clones165, align 8, !dbg !3868
  %183 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3869
  %clone_of166 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %183, i32 0, i32 12, !dbg !3870
  %184 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of166, align 8, !dbg !3870
  %clones167 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %184, i32 0, i32 11, !dbg !3871
  store %struct.cgraph_node* %182, %struct.cgraph_node** %clones167, align 8, !dbg !3872
  br label %if.end179, !dbg !3873

if.else168:                                       ; preds = %if.then136
  %185 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3874
  %clones169 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %185, i32 0, i32 11, !dbg !3877
  %186 = load %struct.cgraph_node*, %struct.cgraph_node** %clones169, align 8, !dbg !3877
  store %struct.cgraph_node* %186, %struct.cgraph_node** %n137, align 8, !dbg !3878
  br label %for.cond170, !dbg !3879

for.cond170:                                      ; preds = %for.inc177, %if.else168
  %187 = load %struct.cgraph_node*, %struct.cgraph_node** %n137, align 8, !dbg !3880
  %tobool171 = icmp ne %struct.cgraph_node* %187, null, !dbg !3882
  br i1 %tobool171, label %for.body172, label %for.end178, !dbg !3882

for.body172:                                      ; preds = %for.cond170
  %188 = load %struct.cgraph_node*, %struct.cgraph_node** %n137, align 8, !dbg !3883
  %next_sibling_clone173 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %188, i32 0, i32 9, !dbg !3885
  %189 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone173, align 8, !dbg !3885
  store %struct.cgraph_node* %189, %struct.cgraph_node** %next138, align 8, !dbg !3886
  %190 = load %struct.cgraph_node*, %struct.cgraph_node** %n137, align 8, !dbg !3887
  %next_sibling_clone174 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %190, i32 0, i32 9, !dbg !3888
  store %struct.cgraph_node* null, %struct.cgraph_node** %next_sibling_clone174, align 8, !dbg !3889
  %191 = load %struct.cgraph_node*, %struct.cgraph_node** %n137, align 8, !dbg !3890
  %prev_sibling_clone175 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %191, i32 0, i32 10, !dbg !3891
  store %struct.cgraph_node* null, %struct.cgraph_node** %prev_sibling_clone175, align 8, !dbg !3892
  %192 = load %struct.cgraph_node*, %struct.cgraph_node** %n137, align 8, !dbg !3893
  %clone_of176 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %192, i32 0, i32 12, !dbg !3894
  store %struct.cgraph_node* null, %struct.cgraph_node** %clone_of176, align 8, !dbg !3895
  br label %for.inc177, !dbg !3896

for.inc177:                                       ; preds = %for.body172
  %193 = load %struct.cgraph_node*, %struct.cgraph_node** %next138, align 8, !dbg !3897
  store %struct.cgraph_node* %193, %struct.cgraph_node** %n137, align 8, !dbg !3898
  br label %for.cond170, !dbg !3899, !llvm.loop !3900

for.end178:                                       ; preds = %for.cond170
  br label %if.end179

if.end179:                                        ; preds = %for.end178, %if.end164
  br label %if.end180, !dbg !3902

if.end180:                                        ; preds = %if.end179, %if.end133
  br label %while.cond181, !dbg !3903

while.cond181:                                    ; preds = %while.body183, %if.end180
  %194 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3904
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %194, i32 0, i32 13, !dbg !3905
  %195 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !3905
  %tobool182 = icmp ne %struct.cgraph_node* %195, null, !dbg !3903
  br i1 %tobool182, label %while.body183, label %while.end185, !dbg !3903

while.body183:                                    ; preds = %while.cond181
  %196 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3906
  %same_body184 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %196, i32 0, i32 13, !dbg !3907
  %197 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body184, align 8, !dbg !3907
  call void @cgraph_remove_same_body_alias(%struct.cgraph_node* %197), !dbg !3908
  br label %while.cond181, !dbg !3903, !llvm.loop !3909

while.end185:                                     ; preds = %while.cond181
  %198 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3911
  %same_comdat_group = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %198, i32 0, i32 14, !dbg !3913
  %199 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group, align 8, !dbg !3913
  %tobool186 = icmp ne %struct.cgraph_node* %199, null, !dbg !3911
  br i1 %tobool186, label %if.then187, label %if.end205, !dbg !3914

if.then187:                                       ; preds = %while.end185
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %prev, metadata !3915, metadata !DIExpression()), !dbg !3917
  %200 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3918
  %same_comdat_group188 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %200, i32 0, i32 14, !dbg !3920
  %201 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group188, align 8, !dbg !3920
  store %struct.cgraph_node* %201, %struct.cgraph_node** %prev, align 8, !dbg !3921
  br label %for.cond189, !dbg !3922

for.cond189:                                      ; preds = %for.inc193, %if.then187
  %202 = load %struct.cgraph_node*, %struct.cgraph_node** %prev, align 8, !dbg !3923
  %same_comdat_group190 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %202, i32 0, i32 14, !dbg !3925
  %203 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group190, align 8, !dbg !3925
  %204 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3926
  %cmp191 = icmp ne %struct.cgraph_node* %203, %204, !dbg !3927
  br i1 %cmp191, label %for.body192, label %for.end195, !dbg !3928

for.body192:                                      ; preds = %for.cond189
  br label %for.inc193, !dbg !3928

for.inc193:                                       ; preds = %for.body192
  %205 = load %struct.cgraph_node*, %struct.cgraph_node** %prev, align 8, !dbg !3929
  %same_comdat_group194 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %205, i32 0, i32 14, !dbg !3930
  %206 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group194, align 8, !dbg !3930
  store %struct.cgraph_node* %206, %struct.cgraph_node** %prev, align 8, !dbg !3931
  br label %for.cond189, !dbg !3932, !llvm.loop !3933

for.end195:                                       ; preds = %for.cond189
  %207 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3935
  %same_comdat_group196 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %207, i32 0, i32 14, !dbg !3937
  %208 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group196, align 8, !dbg !3937
  %209 = load %struct.cgraph_node*, %struct.cgraph_node** %prev, align 8, !dbg !3938
  %cmp197 = icmp eq %struct.cgraph_node* %208, %209, !dbg !3939
  br i1 %cmp197, label %if.then198, label %if.else200, !dbg !3940

if.then198:                                       ; preds = %for.end195
  %210 = load %struct.cgraph_node*, %struct.cgraph_node** %prev, align 8, !dbg !3941
  %same_comdat_group199 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %210, i32 0, i32 14, !dbg !3942
  store %struct.cgraph_node* null, %struct.cgraph_node** %same_comdat_group199, align 8, !dbg !3943
  br label %if.end203, !dbg !3941

if.else200:                                       ; preds = %for.end195
  %211 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3944
  %same_comdat_group201 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %211, i32 0, i32 14, !dbg !3945
  %212 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group201, align 8, !dbg !3945
  %213 = load %struct.cgraph_node*, %struct.cgraph_node** %prev, align 8, !dbg !3946
  %same_comdat_group202 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %213, i32 0, i32 14, !dbg !3947
  store %struct.cgraph_node* %212, %struct.cgraph_node** %same_comdat_group202, align 8, !dbg !3948
  br label %if.end203

if.end203:                                        ; preds = %if.else200, %if.then198
  %214 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3949
  %same_comdat_group204 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %214, i32 0, i32 14, !dbg !3950
  store %struct.cgraph_node* null, %struct.cgraph_node** %same_comdat_group204, align 8, !dbg !3951
  br label %if.end205, !dbg !3952

if.end205:                                        ; preds = %if.end203, %while.end185
  %215 = load i8, i8* %kill_body, align 1, !dbg !3953
  %tobool206 = icmp ne i8 %215, 0, !dbg !3953
  br i1 %tobool206, label %if.end232, label %land.lhs.true, !dbg !3955

land.lhs.true:                                    ; preds = %if.end205
  %216 = load i8**, i8*** %slot, align 8, !dbg !3956
  %217 = load i8*, i8** %216, align 8, !dbg !3957
  %tobool207 = icmp ne i8* %217, null, !dbg !3957
  br i1 %tobool207, label %if.then208, label %if.end232, !dbg !3958

if.then208:                                       ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n209, metadata !3959, metadata !DIExpression()), !dbg !3961
  %218 = load i8**, i8*** %slot, align 8, !dbg !3962
  %219 = load i8*, i8** %218, align 8, !dbg !3963
  %220 = bitcast i8* %219 to %struct.cgraph_node*, !dbg !3964
  store %struct.cgraph_node* %220, %struct.cgraph_node** %n209, align 8, !dbg !3961
  %221 = load %struct.cgraph_node*, %struct.cgraph_node** %n209, align 8, !dbg !3965
  %clones210 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %221, i32 0, i32 11, !dbg !3967
  %222 = load %struct.cgraph_node*, %struct.cgraph_node** %clones210, align 8, !dbg !3967
  %tobool211 = icmp ne %struct.cgraph_node* %222, null, !dbg !3965
  br i1 %tobool211, label %if.end231, label %land.lhs.true212, !dbg !3968

land.lhs.true212:                                 ; preds = %if.then208
  %223 = load %struct.cgraph_node*, %struct.cgraph_node** %n209, align 8, !dbg !3969
  %clone_of213 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %223, i32 0, i32 12, !dbg !3970
  %224 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of213, align 8, !dbg !3970
  %tobool214 = icmp ne %struct.cgraph_node* %224, null, !dbg !3969
  br i1 %tobool214, label %if.end231, label %land.lhs.true215, !dbg !3971

land.lhs.true215:                                 ; preds = %land.lhs.true212
  %225 = load %struct.cgraph_node*, %struct.cgraph_node** %n209, align 8, !dbg !3972
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %225, i32 0, i32 19, !dbg !3973
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !3974
  %226 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !3974
  %tobool216 = icmp ne %struct.cgraph_node* %226, null, !dbg !3972
  br i1 %tobool216, label %if.end231, label %land.lhs.true217, !dbg !3975

land.lhs.true217:                                 ; preds = %land.lhs.true215
  %227 = load i8, i8* @cgraph_global_info_ready, align 1, !dbg !3976
  %conv = zext i8 %227 to i32, !dbg !3976
  %tobool218 = icmp ne i32 %conv, 0, !dbg !3976
  br i1 %tobool218, label %land.lhs.true219, label %if.end231, !dbg !3977

land.lhs.true219:                                 ; preds = %land.lhs.true217
  %228 = load %struct.cgraph_node*, %struct.cgraph_node** %n209, align 8, !dbg !3978
  %decl220 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %228, i32 0, i32 0, !dbg !3978
  %229 = load %union.tree_node*, %union.tree_node** %decl220, align 8, !dbg !3978
  %base = bitcast %union.tree_node* %229 to %struct.tree_base*, !dbg !3978
  %230 = bitcast %struct.tree_base* %base to i64*, !dbg !3978
  %bf.load221 = load i64, i64* %230, align 8, !dbg !3978
  %bf.lshr = lshr i64 %bf.load221, 22, !dbg !3978
  %bf.clear222 = and i64 %bf.lshr, 1, !dbg !3978
  %bf.cast = trunc i64 %bf.clear222 to i32, !dbg !3978
  %tobool223 = icmp ne i32 %bf.cast, 0, !dbg !3978
  br i1 %tobool223, label %if.then230, label %lor.lhs.false, !dbg !3979

lor.lhs.false:                                    ; preds = %land.lhs.true219
  %231 = load %struct.cgraph_node*, %struct.cgraph_node** %n209, align 8, !dbg !3980
  %decl224 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %231, i32 0, i32 0, !dbg !3980
  %232 = load %union.tree_node*, %union.tree_node** %decl224, align 8, !dbg !3980
  %decl_common = bitcast %union.tree_node* %232 to %struct.tree_decl_common*, !dbg !3980
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !3980
  %233 = bitcast i40* %decl_flag_1 to i64*, !dbg !3980
  %bf.load225 = load i64, i64* %233, align 8, !dbg !3980
  %bf.lshr226 = lshr i64 %bf.load225, 25, !dbg !3980
  %bf.clear227 = and i64 %bf.lshr226, 1, !dbg !3980
  %bf.cast228 = trunc i64 %bf.clear227 to i32, !dbg !3980
  %tobool229 = icmp ne i32 %bf.cast228, 0, !dbg !3980
  br i1 %tobool229, label %if.then230, label %if.end231, !dbg !3981

if.then230:                                       ; preds = %lor.lhs.false, %land.lhs.true219
  store i8 1, i8* %kill_body, align 1, !dbg !3982
  br label %if.end231, !dbg !3983

if.end231:                                        ; preds = %if.then230, %lor.lhs.false, %land.lhs.true217, %land.lhs.true215, %land.lhs.true212, %if.then208
  br label %if.end232, !dbg !3984

if.end232:                                        ; preds = %if.end231, %land.lhs.true, %if.end205
  %234 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !3985
  %tobool233 = icmp ne %struct.htab* %234, null, !dbg !3985
  br i1 %tobool233, label %if.then234, label %if.end245, !dbg !3987

if.then234:                                       ; preds = %if.end232
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !3988, metadata !DIExpression()), !dbg !3990
  %235 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !3991
  %decl235 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %235, i32 0, i32 0, !dbg !3991
  %236 = load %union.tree_node*, %union.tree_node** %decl235, align 8, !dbg !3991
  %call236 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %236), !dbg !3991
  store %union.tree_node* %call236, %union.tree_node** %name, align 8, !dbg !3990
  %237 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !3992
  %238 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3993
  %239 = bitcast %union.tree_node* %238 to i8*, !dbg !3993
  %240 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3994
  %call237 = call i32 @decl_assembler_name_hash(%union.tree_node* %240), !dbg !3995
  %call238 = call i8** @htab_find_slot_with_hash(%struct.htab* %237, i8* %239, i32 %call237, i32 0), !dbg !3996
  store i8** %call238, i8*** %slot, align 8, !dbg !3997
  %241 = load i8**, i8*** %slot, align 8, !dbg !3998
  %tobool239 = icmp ne i8** %241, null, !dbg !3998
  br i1 %tobool239, label %land.lhs.true240, label %if.end244, !dbg !4000

land.lhs.true240:                                 ; preds = %if.then234
  %242 = load i8**, i8*** %slot, align 8, !dbg !4001
  %243 = load i8*, i8** %242, align 8, !dbg !4002
  %244 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4003
  %245 = bitcast %struct.cgraph_node* %244 to i8*, !dbg !4003
  %cmp241 = icmp eq i8* %243, %245, !dbg !4004
  br i1 %cmp241, label %if.then243, label %if.end244, !dbg !4005

if.then243:                                       ; preds = %land.lhs.true240
  %246 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !4006
  %247 = load i8**, i8*** %slot, align 8, !dbg !4007
  call void @htab_clear_slot(%struct.htab* %246, i8** %247), !dbg !4008
  br label %if.end244, !dbg !4008

if.end244:                                        ; preds = %if.then243, %land.lhs.true240, %if.then234
  br label %if.end245, !dbg !4009

if.end245:                                        ; preds = %if.end244, %if.end232
  %248 = load i8, i8* %kill_body, align 1, !dbg !4010
  %tobool246 = icmp ne i8 %248, 0, !dbg !4010
  br i1 %tobool246, label %if.then247, label %if.end248, !dbg !4012

if.then247:                                       ; preds = %if.end245
  %249 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4013
  call void @cgraph_release_function_body(%struct.cgraph_node* %249), !dbg !4014
  br label %if.end248, !dbg !4014

if.end248:                                        ; preds = %if.then247, %if.end245
  %250 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4015
  %decl249 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %250, i32 0, i32 0, !dbg !4016
  store %union.tree_node* null, %union.tree_node** %decl249, align 8, !dbg !4017
  %251 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4018
  %call_site_hash = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %251, i32 0, i32 15, !dbg !4020
  %252 = load %struct.htab*, %struct.htab** %call_site_hash, align 8, !dbg !4020
  %tobool250 = icmp ne %struct.htab* %252, null, !dbg !4018
  br i1 %tobool250, label %if.then251, label %if.end254, !dbg !4021

if.then251:                                       ; preds = %if.end248
  %253 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4022
  %call_site_hash252 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %253, i32 0, i32 15, !dbg !4024
  %254 = load %struct.htab*, %struct.htab** %call_site_hash252, align 8, !dbg !4024
  call void @htab_delete(%struct.htab* %254), !dbg !4025
  %255 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4026
  %call_site_hash253 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %255, i32 0, i32 15, !dbg !4027
  store %struct.htab* null, %struct.htab** %call_site_hash253, align 8, !dbg !4028
  br label %if.end254, !dbg !4029

if.end254:                                        ; preds = %if.then251, %if.end248
  %256 = load i32, i32* @cgraph_n_nodes, align 4, !dbg !4030
  %dec = add nsw i32 %256, -1, !dbg !4030
  store i32 %dec, i32* @cgraph_n_nodes, align 4, !dbg !4030
  %257 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4031
  %258 = bitcast %struct.cgraph_node* %257 to i8*, !dbg !4032
  call void @llvm.memset.p0i8.i64(i8* align 8 %258, i8 0, i64 312, i1 false), !dbg !4032
  %259 = load i32, i32* %uid, align 4, !dbg !4033
  %260 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4034
  %uid255 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %260, i32 0, i32 24, !dbg !4035
  store i32 %259, i32* %uid255, align 8, !dbg !4036
  %261 = load %struct.cgraph_node*, %struct.cgraph_node** @free_nodes, align 8, !dbg !4037
  %262 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4038
  %next256 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %262, i32 0, i32 3, !dbg !4038
  store %struct.cgraph_node* %261, %struct.cgraph_node** %next256, align 8, !dbg !4039
  %263 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4040
  store %struct.cgraph_node* %263, %struct.cgraph_node** @free_nodes, align 8, !dbg !4041
  ret void, !dbg !4042
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_insert_node_to_hashtable(%struct.cgraph_node* %node) #0 !dbg !4043 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %slot = alloca %struct.cgraph_node**, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !4044, metadata !DIExpression()), !dbg !4045
  call void @llvm.dbg.declare(metadata %struct.cgraph_node*** %slot, metadata !4046, metadata !DIExpression()), !dbg !4047
  %0 = load %struct.htab*, %struct.htab** @cgraph_hash, align 8, !dbg !4048
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4049
  %2 = bitcast %struct.cgraph_node* %1 to i8*, !dbg !4049
  %call = call i8** @htab_find_slot(%struct.htab* %0, i8* %2, i32 1), !dbg !4050
  %3 = bitcast i8** %call to %struct.cgraph_node**, !dbg !4051
  store %struct.cgraph_node** %3, %struct.cgraph_node*** %slot, align 8, !dbg !4052
  %4 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !4053
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %4, align 8, !dbg !4053
  %tobool = icmp ne %struct.cgraph_node* %5, null, !dbg !4053
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4053

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 627, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4053
  br label %cond.end, !dbg !4053

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4053

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4053
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4054
  %7 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !4055
  store %struct.cgraph_node* %6, %struct.cgraph_node** %7, align 8, !dbg !4056
  ret void, !dbg !4057
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_node* @cgraph_node_for_asm(%union.tree_node* %asmname) #0 !dbg !4058 {
entry:
  %retval = alloca %struct.cgraph_node*, align 8
  %asmname.addr = alloca %union.tree_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %slot = alloca i8**, align 8
  %name = alloca %union.tree_node*, align 8
  %alias = alloca %struct.cgraph_node*, align 8
  %hash = alloca i32, align 4
  store %union.tree_node* %asmname, %union.tree_node** %asmname.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %asmname.addr, metadata !4059, metadata !DIExpression()), !dbg !4060
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !4061, metadata !DIExpression()), !dbg !4062
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4063, metadata !DIExpression()), !dbg !4064
  %0 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !4065
  %tobool = icmp ne %struct.htab* %0, null, !dbg !4065
  br i1 %tobool, label %if.end27, label %if.then, !dbg !4067

if.then:                                          ; preds = %entry
  %call = call %struct.htab* @htab_create_alloc(i64 10, i32 (i8*)* @hash_node_by_assembler_name, i32 (i8*, i8*)* @eq_assembler_name, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !4068
  store %struct.htab* %call, %struct.htab** @assembler_name_hash, align 8, !dbg !4070
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !4071
  store %struct.cgraph_node* %1, %struct.cgraph_node** %node, align 8, !dbg !4073
  br label %for.cond, !dbg !4074

for.cond:                                         ; preds = %for.inc24, %if.then
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4075
  %tobool1 = icmp ne %struct.cgraph_node* %2, null, !dbg !4077
  br i1 %tobool1, label %for.body, label %for.end26, !dbg !4077

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4078
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 19, !dbg !4080
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !4081
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !4081
  %tobool2 = icmp ne %struct.cgraph_node* %4, null, !dbg !4078
  br i1 %tobool2, label %if.end23, label %if.then3, !dbg !4082

if.then3:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !4083, metadata !DIExpression()), !dbg !4085
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4086
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 0, !dbg !4086
  %6 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4086
  %call4 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %6), !dbg !4086
  store %union.tree_node* %call4, %union.tree_node** %name, align 8, !dbg !4085
  %7 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !4087
  %8 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4088
  %9 = bitcast %union.tree_node* %8 to i8*, !dbg !4088
  %10 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4089
  %call5 = call i32 @decl_assembler_name_hash(%union.tree_node* %10), !dbg !4090
  %call6 = call i8** @htab_find_slot_with_hash(%struct.htab* %7, i8* %9, i32 %call5, i32 1), !dbg !4091
  store i8** %call6, i8*** %slot, align 8, !dbg !4092
  %11 = load i8**, i8*** %slot, align 8, !dbg !4093
  %12 = load i8*, i8** %11, align 8, !dbg !4095
  %tobool7 = icmp ne i8* %12, null, !dbg !4095
  br i1 %tobool7, label %if.end, label %if.then8, !dbg !4096

if.then8:                                         ; preds = %if.then3
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4097
  %14 = bitcast %struct.cgraph_node* %13 to i8*, !dbg !4097
  %15 = load i8**, i8*** %slot, align 8, !dbg !4098
  store i8* %14, i8** %15, align 8, !dbg !4099
  br label %if.end, !dbg !4100

if.end:                                           ; preds = %if.then8, %if.then3
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4101
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 13, !dbg !4103
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !4103
  %tobool9 = icmp ne %struct.cgraph_node* %17, null, !dbg !4101
  br i1 %tobool9, label %if.then10, label %if.end22, !dbg !4104

if.then10:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %alias, metadata !4105, metadata !DIExpression()), !dbg !4107
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4108
  %same_body11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 13, !dbg !4110
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body11, align 8, !dbg !4110
  store %struct.cgraph_node* %19, %struct.cgraph_node** %alias, align 8, !dbg !4111
  br label %for.cond12, !dbg !4112

for.cond12:                                       ; preds = %for.inc, %if.then10
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !4113
  %tobool13 = icmp ne %struct.cgraph_node* %20, null, !dbg !4115
  br i1 %tobool13, label %for.body14, label %for.end, !dbg !4115

for.body14:                                       ; preds = %for.cond12
  call void @llvm.dbg.declare(metadata i32* %hash, metadata !4116, metadata !DIExpression()), !dbg !4118
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !4119
  %decl15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 0, !dbg !4119
  %22 = load %union.tree_node*, %union.tree_node** %decl15, align 8, !dbg !4119
  %call16 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %22), !dbg !4119
  store %union.tree_node* %call16, %union.tree_node** %name, align 8, !dbg !4120
  %23 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4121
  %call17 = call i32 @decl_assembler_name_hash(%union.tree_node* %23), !dbg !4122
  store i32 %call17, i32* %hash, align 4, !dbg !4123
  %24 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !4124
  %25 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4125
  %26 = bitcast %union.tree_node* %25 to i8*, !dbg !4125
  %27 = load i32, i32* %hash, align 4, !dbg !4126
  %call18 = call i8** @htab_find_slot_with_hash(%struct.htab* %24, i8* %26, i32 %27, i32 1), !dbg !4127
  store i8** %call18, i8*** %slot, align 8, !dbg !4128
  %28 = load i8**, i8*** %slot, align 8, !dbg !4129
  %29 = load i8*, i8** %28, align 8, !dbg !4131
  %tobool19 = icmp ne i8* %29, null, !dbg !4131
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !4132

if.then20:                                        ; preds = %for.body14
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !4133
  %31 = bitcast %struct.cgraph_node* %30 to i8*, !dbg !4133
  %32 = load i8**, i8*** %slot, align 8, !dbg !4134
  store i8* %31, i8** %32, align 8, !dbg !4135
  br label %if.end21, !dbg !4136

if.end21:                                         ; preds = %if.then20, %for.body14
  br label %for.inc, !dbg !4137

for.inc:                                          ; preds = %if.end21
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !4138
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 3, !dbg !4139
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !4139
  store %struct.cgraph_node* %34, %struct.cgraph_node** %alias, align 8, !dbg !4140
  br label %for.cond12, !dbg !4141, !llvm.loop !4142

for.end:                                          ; preds = %for.cond12
  br label %if.end22, !dbg !4144

if.end22:                                         ; preds = %for.end, %if.end
  br label %if.end23, !dbg !4145

if.end23:                                         ; preds = %if.end22, %for.body
  br label %for.inc24, !dbg !4081

for.inc24:                                        ; preds = %if.end23
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4146
  %next25 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %35, i32 0, i32 3, !dbg !4147
  %36 = load %struct.cgraph_node*, %struct.cgraph_node** %next25, align 8, !dbg !4147
  store %struct.cgraph_node* %36, %struct.cgraph_node** %node, align 8, !dbg !4148
  br label %for.cond, !dbg !4149, !llvm.loop !4150

for.end26:                                        ; preds = %for.cond
  br label %if.end27, !dbg !4152

if.end27:                                         ; preds = %for.end26, %entry
  %37 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !4153
  %38 = load %union.tree_node*, %union.tree_node** %asmname.addr, align 8, !dbg !4154
  %39 = bitcast %union.tree_node* %38 to i8*, !dbg !4154
  %40 = load %union.tree_node*, %union.tree_node** %asmname.addr, align 8, !dbg !4155
  %call28 = call i32 @decl_assembler_name_hash(%union.tree_node* %40), !dbg !4156
  %call29 = call i8** @htab_find_slot_with_hash(%struct.htab* %37, i8* %39, i32 %call28, i32 0), !dbg !4157
  store i8** %call29, i8*** %slot, align 8, !dbg !4158
  %41 = load i8**, i8*** %slot, align 8, !dbg !4159
  %tobool30 = icmp ne i8** %41, null, !dbg !4159
  br i1 %tobool30, label %if.then31, label %if.end36, !dbg !4161

if.then31:                                        ; preds = %if.end27
  %42 = load i8**, i8*** %slot, align 8, !dbg !4162
  %43 = load i8*, i8** %42, align 8, !dbg !4164
  %44 = bitcast i8* %43 to %struct.cgraph_node*, !dbg !4165
  store %struct.cgraph_node* %44, %struct.cgraph_node** %node, align 8, !dbg !4166
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4167
  %same_body_alias = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %45, i32 0, i32 27, !dbg !4169
  %bf.load = load i16, i16* %same_body_alias, align 4, !dbg !4169
  %bf.lshr = lshr i16 %bf.load, 9, !dbg !4169
  %bf.clear = and i16 %bf.lshr, 1, !dbg !4169
  %bf.cast = zext i16 %bf.clear to i32, !dbg !4169
  %tobool32 = icmp ne i32 %bf.cast, 0, !dbg !4167
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !4170

if.then33:                                        ; preds = %if.then31
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4171
  %same_body34 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %46, i32 0, i32 13, !dbg !4172
  %47 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body34, align 8, !dbg !4172
  store %struct.cgraph_node* %47, %struct.cgraph_node** %node, align 8, !dbg !4173
  br label %if.end35, !dbg !4174

if.end35:                                         ; preds = %if.then33, %if.then31
  %48 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4175
  store %struct.cgraph_node* %48, %struct.cgraph_node** %retval, align 8, !dbg !4176
  br label %return, !dbg !4176

if.end36:                                         ; preds = %if.end27
  store %struct.cgraph_node* null, %struct.cgraph_node** %retval, align 8, !dbg !4177
  br label %return, !dbg !4177

return:                                           ; preds = %if.end36, %if.end35
  %49 = load %struct.cgraph_node*, %struct.cgraph_node** %retval, align 8, !dbg !4178
  ret %struct.cgraph_node* %49, !dbg !4178
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_node_by_assembler_name(i8* %p) #0 !dbg !4179 {
entry:
  %p.addr = alloca i8*, align 8
  %n = alloca %struct.cgraph_node*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !4180, metadata !DIExpression()), !dbg !4181
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n, metadata !4182, metadata !DIExpression()), !dbg !4183
  %0 = load i8*, i8** %p.addr, align 8, !dbg !4184
  %1 = bitcast i8* %0 to %struct.cgraph_node*, !dbg !4185
  store %struct.cgraph_node* %1, %struct.cgraph_node** %n, align 8, !dbg !4183
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !4186
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 0, !dbg !4186
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4186
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %3), !dbg !4186
  %call1 = call i32 @decl_assembler_name_hash(%union.tree_node* %call), !dbg !4187
  ret i32 %call1, !dbg !4188
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @eq_assembler_name(i8* %p1, i8* %p2) #0 !dbg !4189 {
entry:
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %n1 = alloca %struct.cgraph_node*, align 8
  %name = alloca %union.tree_node*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !4190, metadata !DIExpression()), !dbg !4191
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !4192, metadata !DIExpression()), !dbg !4193
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n1, metadata !4194, metadata !DIExpression()), !dbg !4195
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !4196
  %1 = bitcast i8* %0 to %struct.cgraph_node*, !dbg !4197
  store %struct.cgraph_node* %1, %struct.cgraph_node** %n1, align 8, !dbg !4195
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !4198, metadata !DIExpression()), !dbg !4199
  %2 = load i8*, i8** %p2.addr, align 8, !dbg !4200
  %3 = bitcast i8* %2 to %union.tree_node*, !dbg !4201
  store %union.tree_node* %3, %union.tree_node** %name, align 8, !dbg !4199
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %n1, align 8, !dbg !4202
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 0, !dbg !4203
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4203
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !4204
  %call = call zeroext i8 @decl_assembler_name_equal(%union.tree_node* %5, %union.tree_node* %6), !dbg !4205
  %conv = zext i8 %call to i32, !dbg !4206
  ret i32 %conv, !dbg !4207
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %node, %union.gimple_statement_d* %call_stmt) #0 !dbg !4208 {
entry:
  %retval = alloca %struct.cgraph_edge*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %call_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %e2 = alloca %struct.cgraph_edge*, align 8
  %n = alloca i32, align 4
  %slot = alloca i8**, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !4211, metadata !DIExpression()), !dbg !4212
  store %union.gimple_statement_d* %call_stmt, %union.gimple_statement_d** %call_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call_stmt.addr, metadata !4213, metadata !DIExpression()), !dbg !4214
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !4215, metadata !DIExpression()), !dbg !4216
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e2, metadata !4217, metadata !DIExpression()), !dbg !4218
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4219, metadata !DIExpression()), !dbg !4220
  store i32 0, i32* %n, align 4, !dbg !4220
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4221
  %call_site_hash = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 15, !dbg !4223
  %1 = load %struct.htab*, %struct.htab** %call_site_hash, align 8, !dbg !4223
  %tobool = icmp ne %struct.htab* %1, null, !dbg !4221
  br i1 %tobool, label %if.then, label %if.end, !dbg !4224

if.then:                                          ; preds = %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4225
  %call_site_hash1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 15, !dbg !4226
  %3 = load %struct.htab*, %struct.htab** %call_site_hash1, align 8, !dbg !4226
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !4227
  %5 = bitcast %union.gimple_statement_d* %4 to i8*, !dbg !4227
  %6 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4228
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !4229
  %8 = bitcast %union.gimple_statement_d* %7 to i8*, !dbg !4229
  %call = call i32 %6(i8* %8), !dbg !4228
  %call2 = call i8* @htab_find_with_hash(%struct.htab* %3, i8* %5, i32 %call), !dbg !4230
  %9 = bitcast i8* %call2 to %struct.cgraph_edge*, !dbg !4231
  store %struct.cgraph_edge* %9, %struct.cgraph_edge** %retval, align 8, !dbg !4232
  br label %return, !dbg !4232

if.end:                                           ; preds = %entry
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4233
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 1, !dbg !4235
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !4235
  store %struct.cgraph_edge* %11, %struct.cgraph_edge** %e, align 8, !dbg !4236
  br label %for.cond, !dbg !4237

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4238
  %tobool3 = icmp ne %struct.cgraph_edge* %12, null, !dbg !4240
  br i1 %tobool3, label %for.body, label %for.end, !dbg !4240

for.body:                                         ; preds = %for.cond
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4241
  %call_stmt4 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 7, !dbg !4244
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt4, align 8, !dbg !4244
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !4245
  %cmp = icmp eq %union.gimple_statement_d* %14, %15, !dbg !4246
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !4247

if.then5:                                         ; preds = %for.body
  br label %for.end, !dbg !4248

if.end6:                                          ; preds = %for.body
  %16 = load i32, i32* %n, align 4, !dbg !4249
  %inc = add nsw i32 %16, 1, !dbg !4249
  store i32 %inc, i32* %n, align 4, !dbg !4249
  br label %for.inc, !dbg !4250

for.inc:                                          ; preds = %if.end6
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4251
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %17, i32 0, i32 6, !dbg !4252
  %18 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !4252
  store %struct.cgraph_edge* %18, %struct.cgraph_edge** %e, align 8, !dbg !4253
  br label %for.cond, !dbg !4254, !llvm.loop !4255

for.end:                                          ; preds = %if.then5, %for.cond
  %19 = load i32, i32* %n, align 4, !dbg !4257
  %cmp7 = icmp sgt i32 %19, 100, !dbg !4259
  br i1 %cmp7, label %if.then8, label %if.end24, !dbg !4260

if.then8:                                         ; preds = %for.end
  %call9 = call %struct.htab* @htab_create_alloc(i64 120, i32 (i8*)* @edge_hash, i32 (i8*, i8*)* @edge_eq, void (i8*)* null, i8* (i64, i64)* @ggc_calloc, void (i8*)* @ggc_free), !dbg !4261
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4263
  %call_site_hash10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 15, !dbg !4264
  store %struct.htab* %call9, %struct.htab** %call_site_hash10, align 8, !dbg !4265
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4266
  %callees11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 1, !dbg !4268
  %22 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees11, align 8, !dbg !4268
  store %struct.cgraph_edge* %22, %struct.cgraph_edge** %e2, align 8, !dbg !4269
  br label %for.cond12, !dbg !4270

for.cond12:                                       ; preds = %for.inc21, %if.then8
  %23 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e2, align 8, !dbg !4271
  %tobool13 = icmp ne %struct.cgraph_edge* %23, null, !dbg !4273
  br i1 %tobool13, label %for.body14, label %for.end23, !dbg !4273

for.body14:                                       ; preds = %for.cond12
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4274, metadata !DIExpression()), !dbg !4276
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !4277
  %call_site_hash15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 15, !dbg !4278
  %25 = load %struct.htab*, %struct.htab** %call_site_hash15, align 8, !dbg !4278
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e2, align 8, !dbg !4279
  %call_stmt16 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 7, !dbg !4280
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt16, align 8, !dbg !4280
  %28 = bitcast %union.gimple_statement_d* %27 to i8*, !dbg !4279
  %29 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4281
  %30 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e2, align 8, !dbg !4282
  %call_stmt17 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %30, i32 0, i32 7, !dbg !4283
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt17, align 8, !dbg !4283
  %32 = bitcast %union.gimple_statement_d* %31 to i8*, !dbg !4282
  %call18 = call i32 %29(i8* %32), !dbg !4281
  %call19 = call i8** @htab_find_slot_with_hash(%struct.htab* %25, i8* %28, i32 %call18, i32 1), !dbg !4284
  store i8** %call19, i8*** %slot, align 8, !dbg !4285
  %33 = load i8**, i8*** %slot, align 8, !dbg !4286
  %34 = load i8*, i8** %33, align 8, !dbg !4286
  %tobool20 = icmp ne i8* %34, null, !dbg !4286
  br i1 %tobool20, label %cond.true, label %cond.false, !dbg !4286

cond.true:                                        ; preds = %for.body14
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 762, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4286
  br label %cond.end, !dbg !4286

cond.false:                                       ; preds = %for.body14
  br label %cond.end, !dbg !4286

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4286
  %35 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e2, align 8, !dbg !4287
  %36 = bitcast %struct.cgraph_edge* %35 to i8*, !dbg !4287
  %37 = load i8**, i8*** %slot, align 8, !dbg !4288
  store i8* %36, i8** %37, align 8, !dbg !4289
  br label %for.inc21, !dbg !4290

for.inc21:                                        ; preds = %cond.end
  %38 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e2, align 8, !dbg !4291
  %next_callee22 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %38, i32 0, i32 6, !dbg !4292
  %39 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee22, align 8, !dbg !4292
  store %struct.cgraph_edge* %39, %struct.cgraph_edge** %e2, align 8, !dbg !4293
  br label %for.cond12, !dbg !4294, !llvm.loop !4295

for.end23:                                        ; preds = %for.cond12
  br label %if.end24, !dbg !4297

if.end24:                                         ; preds = %for.end23, %for.end
  %40 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !4298
  store %struct.cgraph_edge* %40, %struct.cgraph_edge** %retval, align 8, !dbg !4299
  br label %return, !dbg !4299

return:                                           ; preds = %if.end24, %if.then
  %41 = load %struct.cgraph_edge*, %struct.cgraph_edge** %retval, align 8, !dbg !4300
  ret %struct.cgraph_edge* %41, !dbg !4300
}

declare dso_local i8* @htab_find_with_hash(%struct.htab*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @edge_hash(i8* %x) #0 !dbg !4301 {
entry:
  %x.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !4302, metadata !DIExpression()), !dbg !4303
  %0 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4304
  %1 = load i8*, i8** %x.addr, align 8, !dbg !4305
  %2 = bitcast i8* %1 to %struct.cgraph_edge*, !dbg !4306
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %2, i32 0, i32 7, !dbg !4307
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4307
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !4308
  %call = call i32 %0(i8* %4), !dbg !4304
  ret i32 %call, !dbg !4309
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @edge_eq(i8* %x, i8* %y) #0 !dbg !4310 {
entry:
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !4311, metadata !DIExpression()), !dbg !4312
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !4313, metadata !DIExpression()), !dbg !4314
  %0 = load i8*, i8** %x.addr, align 8, !dbg !4315
  %1 = bitcast i8* %0 to %struct.cgraph_edge*, !dbg !4316
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %1, i32 0, i32 7, !dbg !4317
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4317
  %3 = load i8*, i8** %y.addr, align 8, !dbg !4318
  %4 = bitcast i8* %3 to %union.gimple_statement_d*, !dbg !4318
  %cmp = icmp eq %union.gimple_statement_d* %2, %4, !dbg !4319
  %conv = zext i1 %cmp to i32, !dbg !4319
  ret i32 %conv, !dbg !4320
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_set_call_stmt(%struct.cgraph_edge* %e, %union.gimple_statement_d* %new_stmt) #0 !dbg !4321 {
entry:
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %new_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %slot = alloca i8**, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !4324, metadata !DIExpression()), !dbg !4325
  store %union.gimple_statement_d* %new_stmt, %union.gimple_statement_d** %new_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt.addr, metadata !4326, metadata !DIExpression()), !dbg !4327
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4328
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 1, !dbg !4330
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !4330
  %call_site_hash = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 15, !dbg !4331
  %2 = load %struct.htab*, %struct.htab** %call_site_hash, align 8, !dbg !4331
  %tobool = icmp ne %struct.htab* %2, null, !dbg !4328
  br i1 %tobool, label %if.then, label %if.end, !dbg !4332

if.then:                                          ; preds = %entry
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4333
  %caller1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 1, !dbg !4335
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %caller1, align 8, !dbg !4335
  %call_site_hash2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 15, !dbg !4336
  %5 = load %struct.htab*, %struct.htab** %call_site_hash2, align 8, !dbg !4336
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4337
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 7, !dbg !4338
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4338
  %8 = bitcast %union.gimple_statement_d* %7 to i8*, !dbg !4337
  %9 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4339
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4340
  %call_stmt3 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 7, !dbg !4341
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt3, align 8, !dbg !4341
  %12 = bitcast %union.gimple_statement_d* %11 to i8*, !dbg !4340
  %call = call i32 %9(i8* %12), !dbg !4339
  call void @htab_remove_elt_with_hash(%struct.htab* %5, i8* %8, i32 %call), !dbg !4342
  br label %if.end, !dbg !4343

if.end:                                           ; preds = %if.then, %entry
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !4344
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4345
  %call_stmt4 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %14, i32 0, i32 7, !dbg !4346
  store %union.gimple_statement_d* %13, %union.gimple_statement_d** %call_stmt4, align 8, !dbg !4347
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4348
  %caller5 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %15, i32 0, i32 1, !dbg !4348
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %caller5, align 8, !dbg !4348
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 0, !dbg !4348
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4348
  %function_decl = bitcast %union.tree_node* %17 to %struct.tree_function_decl*, !dbg !4348
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !4348
  %18 = load %struct.function*, %struct.function** %f, align 8, !dbg !4348
  call void @push_cfun(%struct.function* %18), !dbg !4349
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !4350
  %call6 = call zeroext i8 @stmt_can_throw_external(%union.gimple_statement_d* %19), !dbg !4351
  %conv = zext i8 %call6 to i32, !dbg !4351
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4352
  %can_throw_external = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %20, i32 0, i32 14, !dbg !4353
  %21 = trunc i32 %conv to i8, !dbg !4354
  %bf.load = load i8, i8* %can_throw_external, align 2, !dbg !4354
  %bf.value = and i8 %21, 1, !dbg !4354
  %bf.shl = shl i8 %bf.value, 2, !dbg !4354
  %bf.clear = and i8 %bf.load, -5, !dbg !4354
  %bf.set = or i8 %bf.clear, %bf.shl, !dbg !4354
  store i8 %bf.set, i8* %can_throw_external, align 2, !dbg !4354
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !4354
  call void @pop_cfun(), !dbg !4355
  %22 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4356
  %caller7 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %22, i32 0, i32 1, !dbg !4358
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %caller7, align 8, !dbg !4358
  %call_site_hash8 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 15, !dbg !4359
  %24 = load %struct.htab*, %struct.htab** %call_site_hash8, align 8, !dbg !4359
  %tobool9 = icmp ne %struct.htab* %24, null, !dbg !4356
  br i1 %tobool9, label %if.then10, label %if.end18, !dbg !4360

if.then10:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4361, metadata !DIExpression()), !dbg !4363
  %25 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4364
  %caller11 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %25, i32 0, i32 1, !dbg !4365
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %caller11, align 8, !dbg !4365
  %call_site_hash12 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 15, !dbg !4366
  %27 = load %struct.htab*, %struct.htab** %call_site_hash12, align 8, !dbg !4366
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4367
  %call_stmt13 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %28, i32 0, i32 7, !dbg !4368
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt13, align 8, !dbg !4368
  %30 = bitcast %union.gimple_statement_d* %29 to i8*, !dbg !4367
  %31 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4369
  %32 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4370
  %call_stmt14 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %32, i32 0, i32 7, !dbg !4371
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt14, align 8, !dbg !4371
  %34 = bitcast %union.gimple_statement_d* %33 to i8*, !dbg !4370
  %call15 = call i32 %31(i8* %34), !dbg !4369
  %call16 = call i8** @htab_find_slot_with_hash(%struct.htab* %27, i8* %30, i32 %call15, i32 1), !dbg !4372
  store i8** %call16, i8*** %slot, align 8, !dbg !4373
  %35 = load i8**, i8*** %slot, align 8, !dbg !4374
  %36 = load i8*, i8** %35, align 8, !dbg !4374
  %tobool17 = icmp ne i8* %36, null, !dbg !4374
  br i1 %tobool17, label %cond.true, label %cond.false, !dbg !4374

cond.true:                                        ; preds = %if.then10
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 793, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4374
  br label %cond.end, !dbg !4374

cond.false:                                       ; preds = %if.then10
  br label %cond.end, !dbg !4374

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4374
  %37 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4375
  %38 = bitcast %struct.cgraph_edge* %37 to i8*, !dbg !4375
  %39 = load i8**, i8*** %slot, align 8, !dbg !4376
  store i8* %38, i8** %39, align 8, !dbg !4377
  br label %if.end18, !dbg !4378

if.end18:                                         ; preds = %cond.end, %if.end
  ret void, !dbg !4379
}

declare dso_local void @htab_remove_elt_with_hash(%struct.htab*, i8*, i32) #2

declare dso_local void @push_cfun(%struct.function*) #2

declare dso_local zeroext i8 @stmt_can_throw_external(%union.gimple_statement_d*) #2

declare dso_local void @pop_cfun() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_set_call_stmt_including_clones(%struct.cgraph_node* %orig, %union.gimple_statement_d* %old_stmt, %union.gimple_statement_d* %new_stmt) #0 !dbg !4380 {
entry:
  %orig.addr = alloca %struct.cgraph_node*, align 8
  %old_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %new_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  %edge = alloca %struct.cgraph_edge*, align 8
  %edge3 = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %orig, %struct.cgraph_node** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %orig.addr, metadata !4383, metadata !DIExpression()), !dbg !4384
  store %union.gimple_statement_d* %old_stmt, %union.gimple_statement_d** %old_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt.addr, metadata !4385, metadata !DIExpression()), !dbg !4386
  store %union.gimple_statement_d* %new_stmt, %union.gimple_statement_d** %new_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt.addr, metadata !4387, metadata !DIExpression()), !dbg !4388
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !4389, metadata !DIExpression()), !dbg !4390
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge, metadata !4391, metadata !DIExpression()), !dbg !4392
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !4393
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !4394
  %call = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %0, %union.gimple_statement_d* %1), !dbg !4395
  store %struct.cgraph_edge* %call, %struct.cgraph_edge** %edge, align 8, !dbg !4392
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4396
  %tobool = icmp ne %struct.cgraph_edge* %2, null, !dbg !4396
  br i1 %tobool, label %if.then, label %if.end, !dbg !4398

if.then:                                          ; preds = %entry
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4399
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !4400
  call void @cgraph_set_call_stmt(%struct.cgraph_edge* %3, %union.gimple_statement_d* %4), !dbg !4401
  br label %if.end, !dbg !4401

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !4402
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 11, !dbg !4403
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !4403
  store %struct.cgraph_node* %6, %struct.cgraph_node** %node, align 8, !dbg !4404
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4405
  %tobool1 = icmp ne %struct.cgraph_node* %7, null, !dbg !4405
  br i1 %tobool1, label %if.then2, label %if.end28, !dbg !4407

if.then2:                                         ; preds = %if.end
  br label %while.cond, !dbg !4408

while.cond:                                       ; preds = %if.end26, %if.then2
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4409
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !4410
  %cmp = icmp ne %struct.cgraph_node* %8, %9, !dbg !4411
  br i1 %cmp, label %while.body, label %while.end27, !dbg !4408

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge3, metadata !4412, metadata !DIExpression()), !dbg !4414
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4415
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !4416
  %call4 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %10, %union.gimple_statement_d* %11), !dbg !4417
  store %struct.cgraph_edge* %call4, %struct.cgraph_edge** %edge3, align 8, !dbg !4414
  %12 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge3, align 8, !dbg !4418
  %tobool5 = icmp ne %struct.cgraph_edge* %12, null, !dbg !4418
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !4420

if.then6:                                         ; preds = %while.body
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge3, align 8, !dbg !4421
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !4422
  call void @cgraph_set_call_stmt(%struct.cgraph_edge* %13, %union.gimple_statement_d* %14), !dbg !4423
  br label %if.end7, !dbg !4423

if.end7:                                          ; preds = %if.then6, %while.body
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4424
  %clones8 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 11, !dbg !4426
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %clones8, align 8, !dbg !4426
  %tobool9 = icmp ne %struct.cgraph_node* %16, null, !dbg !4424
  br i1 %tobool9, label %if.then10, label %if.else, !dbg !4427

if.then10:                                        ; preds = %if.end7
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4428
  %clones11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 11, !dbg !4429
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %clones11, align 8, !dbg !4429
  store %struct.cgraph_node* %18, %struct.cgraph_node** %node, align 8, !dbg !4430
  br label %if.end26, !dbg !4431

if.else:                                          ; preds = %if.end7
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4432
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 9, !dbg !4434
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !4434
  %tobool12 = icmp ne %struct.cgraph_node* %20, null, !dbg !4432
  br i1 %tobool12, label %if.then13, label %if.else15, !dbg !4435

if.then13:                                        ; preds = %if.else
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4436
  %next_sibling_clone14 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %21, i32 0, i32 9, !dbg !4437
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone14, align 8, !dbg !4437
  store %struct.cgraph_node* %22, %struct.cgraph_node** %node, align 8, !dbg !4438
  br label %if.end25, !dbg !4439

if.else15:                                        ; preds = %if.else
  br label %while.cond16, !dbg !4440

while.cond16:                                     ; preds = %while.body20, %if.else15
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4442
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !4443
  %cmp17 = icmp ne %struct.cgraph_node* %23, %24, !dbg !4444
  br i1 %cmp17, label %land.rhs, label %land.end, !dbg !4445

land.rhs:                                         ; preds = %while.cond16
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4446
  %next_sibling_clone18 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %25, i32 0, i32 9, !dbg !4447
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone18, align 8, !dbg !4447
  %tobool19 = icmp ne %struct.cgraph_node* %26, null, !dbg !4448
  %lnot = xor i1 %tobool19, true, !dbg !4448
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond16
  %27 = phi i1 [ false, %while.cond16 ], [ %lnot, %land.rhs ], !dbg !4449
  br i1 %27, label %while.body20, label %while.end, !dbg !4440

while.body20:                                     ; preds = %land.end
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4450
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 12, !dbg !4451
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !4451
  store %struct.cgraph_node* %29, %struct.cgraph_node** %node, align 8, !dbg !4452
  br label %while.cond16, !dbg !4440, !llvm.loop !4453

while.end:                                        ; preds = %land.end
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4454
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !4456
  %cmp21 = icmp ne %struct.cgraph_node* %30, %31, !dbg !4457
  br i1 %cmp21, label %if.then22, label %if.end24, !dbg !4458

if.then22:                                        ; preds = %while.end
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4459
  %next_sibling_clone23 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 9, !dbg !4460
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone23, align 8, !dbg !4460
  store %struct.cgraph_node* %33, %struct.cgraph_node** %node, align 8, !dbg !4461
  br label %if.end24, !dbg !4462

if.end24:                                         ; preds = %if.then22, %while.end
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then13
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then10
  br label %while.cond, !dbg !4408, !llvm.loop !4463

while.end27:                                      ; preds = %while.cond
  br label %if.end28, !dbg !4408

if.end28:                                         ; preds = %while.end27, %if.end
  ret void, !dbg !4465
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_create_edge_including_clones(%struct.cgraph_node* %orig, %struct.cgraph_node* %callee, %union.gimple_statement_d* %old_stmt, %union.gimple_statement_d* %stmt, i64 %count, i32 %freq, i32 %loop_depth, i32 %reason) #0 !dbg !4466 {
entry:
  %orig.addr = alloca %struct.cgraph_node*, align 8
  %callee.addr = alloca %struct.cgraph_node*, align 8
  %old_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %count.addr = alloca i64, align 8
  %freq.addr = alloca i32, align 4
  %loop_depth.addr = alloca i32, align 4
  %reason.addr = alloca i32, align 4
  %node = alloca %struct.cgraph_node*, align 8
  %edge = alloca %struct.cgraph_edge*, align 8
  %edge4 = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %orig, %struct.cgraph_node** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %orig.addr, metadata !4469, metadata !DIExpression()), !dbg !4470
  store %struct.cgraph_node* %callee, %struct.cgraph_node** %callee.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %callee.addr, metadata !4471, metadata !DIExpression()), !dbg !4472
  store %union.gimple_statement_d* %old_stmt, %union.gimple_statement_d** %old_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt.addr, metadata !4473, metadata !DIExpression()), !dbg !4474
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !4475, metadata !DIExpression()), !dbg !4476
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !4477, metadata !DIExpression()), !dbg !4478
  store i32 %freq, i32* %freq.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %freq.addr, metadata !4479, metadata !DIExpression()), !dbg !4480
  store i32 %loop_depth, i32* %loop_depth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_depth.addr, metadata !4481, metadata !DIExpression()), !dbg !4482
  store i32 %reason, i32* %reason.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reason.addr, metadata !4483, metadata !DIExpression()), !dbg !4484
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !4485, metadata !DIExpression()), !dbg !4486
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge, metadata !4487, metadata !DIExpression()), !dbg !4488
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !4489
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4491
  %call = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %0, %union.gimple_statement_d* %1), !dbg !4492
  %tobool = icmp ne %struct.cgraph_edge* %call, null, !dbg !4492
  br i1 %tobool, label %if.end, label %if.then, !dbg !4493

if.then:                                          ; preds = %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !4494
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %callee.addr, align 8, !dbg !4496
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4497
  %5 = load i64, i64* %count.addr, align 8, !dbg !4498
  %6 = load i32, i32* %freq.addr, align 4, !dbg !4499
  %7 = load i32, i32* %loop_depth.addr, align 4, !dbg !4500
  %call1 = call %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node* %2, %struct.cgraph_node* %3, %union.gimple_statement_d* %4, i64 %5, i32 %6, i32 %7), !dbg !4501
  store %struct.cgraph_edge* %call1, %struct.cgraph_edge** %edge, align 8, !dbg !4502
  %8 = load i32, i32* %reason.addr, align 4, !dbg !4503
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4504
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %9, i32 0, i32 9, !dbg !4505
  store i32 %8, i32* %inline_failed, align 8, !dbg !4506
  br label %if.end, !dbg !4507

if.end:                                           ; preds = %if.then, %entry
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !4508
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 11, !dbg !4509
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !4509
  store %struct.cgraph_node* %11, %struct.cgraph_node** %node, align 8, !dbg !4510
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4511
  %tobool2 = icmp ne %struct.cgraph_node* %12, null, !dbg !4511
  br i1 %tobool2, label %if.then3, label %if.end36, !dbg !4513

if.then3:                                         ; preds = %if.end
  br label %while.cond, !dbg !4514

while.cond:                                       ; preds = %if.end34, %if.then3
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4515
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !4516
  %cmp = icmp ne %struct.cgraph_node* %13, %14, !dbg !4517
  br i1 %cmp, label %while.body, label %while.end35, !dbg !4514

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge4, metadata !4518, metadata !DIExpression()), !dbg !4520
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4521
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !4522
  %call5 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %15, %union.gimple_statement_d* %16), !dbg !4523
  store %struct.cgraph_edge* %call5, %struct.cgraph_edge** %edge4, align 8, !dbg !4520
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge4, align 8, !dbg !4524
  %tobool6 = icmp ne %struct.cgraph_edge* %17, null, !dbg !4524
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !4526

if.then7:                                         ; preds = %while.body
  %18 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge4, align 8, !dbg !4527
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4528
  call void @cgraph_set_call_stmt(%struct.cgraph_edge* %18, %union.gimple_statement_d* %19), !dbg !4529
  br label %if.end14, !dbg !4529

if.else:                                          ; preds = %while.body
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4530
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4532
  %call8 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %20, %union.gimple_statement_d* %21), !dbg !4533
  %tobool9 = icmp ne %struct.cgraph_edge* %call8, null, !dbg !4533
  br i1 %tobool9, label %if.end13, label %if.then10, !dbg !4534

if.then10:                                        ; preds = %if.else
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4535
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %callee.addr, align 8, !dbg !4537
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !4538
  %25 = load i64, i64* %count.addr, align 8, !dbg !4539
  %26 = load i32, i32* %freq.addr, align 4, !dbg !4540
  %27 = load i32, i32* %loop_depth.addr, align 4, !dbg !4541
  %call11 = call %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node* %22, %struct.cgraph_node* %23, %union.gimple_statement_d* %24, i64 %25, i32 %26, i32 %27), !dbg !4542
  store %struct.cgraph_edge* %call11, %struct.cgraph_edge** %edge4, align 8, !dbg !4543
  %28 = load i32, i32* %reason.addr, align 4, !dbg !4544
  %29 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge4, align 8, !dbg !4545
  %inline_failed12 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %29, i32 0, i32 9, !dbg !4546
  store i32 %28, i32* %inline_failed12, align 8, !dbg !4547
  br label %if.end13, !dbg !4548

if.end13:                                         ; preds = %if.then10, %if.else
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.then7
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4549
  %clones15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 11, !dbg !4551
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %clones15, align 8, !dbg !4551
  %tobool16 = icmp ne %struct.cgraph_node* %31, null, !dbg !4549
  br i1 %tobool16, label %if.then17, label %if.else19, !dbg !4552

if.then17:                                        ; preds = %if.end14
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4553
  %clones18 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 11, !dbg !4554
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %clones18, align 8, !dbg !4554
  store %struct.cgraph_node* %33, %struct.cgraph_node** %node, align 8, !dbg !4555
  br label %if.end34, !dbg !4556

if.else19:                                        ; preds = %if.end14
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4557
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %34, i32 0, i32 9, !dbg !4559
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !4559
  %tobool20 = icmp ne %struct.cgraph_node* %35, null, !dbg !4557
  br i1 %tobool20, label %if.then21, label %if.else23, !dbg !4560

if.then21:                                        ; preds = %if.else19
  %36 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4561
  %next_sibling_clone22 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %36, i32 0, i32 9, !dbg !4562
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone22, align 8, !dbg !4562
  store %struct.cgraph_node* %37, %struct.cgraph_node** %node, align 8, !dbg !4563
  br label %if.end33, !dbg !4564

if.else23:                                        ; preds = %if.else19
  br label %while.cond24, !dbg !4565

while.cond24:                                     ; preds = %while.body28, %if.else23
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4567
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !4568
  %cmp25 = icmp ne %struct.cgraph_node* %38, %39, !dbg !4569
  br i1 %cmp25, label %land.rhs, label %land.end, !dbg !4570

land.rhs:                                         ; preds = %while.cond24
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4571
  %next_sibling_clone26 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %40, i32 0, i32 9, !dbg !4572
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone26, align 8, !dbg !4572
  %tobool27 = icmp ne %struct.cgraph_node* %41, null, !dbg !4573
  %lnot = xor i1 %tobool27, true, !dbg !4573
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond24
  %42 = phi i1 [ false, %while.cond24 ], [ %lnot, %land.rhs ], !dbg !4574
  br i1 %42, label %while.body28, label %while.end, !dbg !4565

while.body28:                                     ; preds = %land.end
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4575
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %43, i32 0, i32 12, !dbg !4576
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !4576
  store %struct.cgraph_node* %44, %struct.cgraph_node** %node, align 8, !dbg !4577
  br label %while.cond24, !dbg !4565, !llvm.loop !4578

while.end:                                        ; preds = %land.end
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4579
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %orig.addr, align 8, !dbg !4581
  %cmp29 = icmp ne %struct.cgraph_node* %45, %46, !dbg !4582
  br i1 %cmp29, label %if.then30, label %if.end32, !dbg !4583

if.then30:                                        ; preds = %while.end
  %47 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !4584
  %next_sibling_clone31 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %47, i32 0, i32 9, !dbg !4585
  %48 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone31, align 8, !dbg !4585
  store %struct.cgraph_node* %48, %struct.cgraph_node** %node, align 8, !dbg !4586
  br label %if.end32, !dbg !4587

if.end32:                                         ; preds = %if.then30, %while.end
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then21
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then17
  br label %while.cond, !dbg !4514, !llvm.loop !4588

while.end35:                                      ; preds = %while.cond
  br label %if.end36, !dbg !4514

if.end36:                                         ; preds = %while.end35, %if.end
  ret void, !dbg !4590
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node* %caller, %struct.cgraph_node* %callee, %union.gimple_statement_d* %call_stmt, i64 %count, i32 %freq, i32 %nest) #0 !dbg !4591 {
entry:
  %caller.addr = alloca %struct.cgraph_node*, align 8
  %callee.addr = alloca %struct.cgraph_node*, align 8
  %call_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %count.addr = alloca i64, align 8
  %freq.addr = alloca i32, align 4
  %nest.addr = alloca i32, align 4
  %edge = alloca %struct.cgraph_edge*, align 8
  %slot = alloca i8**, align 8
  store %struct.cgraph_node* %caller, %struct.cgraph_node** %caller.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %caller.addr, metadata !4594, metadata !DIExpression()), !dbg !4595
  store %struct.cgraph_node* %callee, %struct.cgraph_node** %callee.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %callee.addr, metadata !4596, metadata !DIExpression()), !dbg !4597
  store %union.gimple_statement_d* %call_stmt, %union.gimple_statement_d** %call_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call_stmt.addr, metadata !4598, metadata !DIExpression()), !dbg !4599
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !4600, metadata !DIExpression()), !dbg !4601
  store i32 %freq, i32* %freq.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %freq.addr, metadata !4602, metadata !DIExpression()), !dbg !4603
  store i32 %nest, i32* %nest.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nest.addr, metadata !4604, metadata !DIExpression()), !dbg !4605
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge, metadata !4606, metadata !DIExpression()), !dbg !4607
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !4608
  %tobool = icmp ne %union.gimple_statement_d* %0, null, !dbg !4608
  br i1 %tobool, label %if.then, label %if.end, !dbg !4610

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !4611
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %1), !dbg !4611
  %tobool1 = icmp ne i8 %call, 0, !dbg !4611
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !4611

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 928, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4611
  br label %cond.end, !dbg !4611

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !4611

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4611
  br label %if.end, !dbg !4613

if.end:                                           ; preds = %cond.end, %entry
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** @free_edges, align 8, !dbg !4614
  %tobool2 = icmp ne %struct.cgraph_edge* %2, null, !dbg !4614
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !4616

if.then3:                                         ; preds = %if.end
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** @free_edges, align 8, !dbg !4617
  store %struct.cgraph_edge* %3, %struct.cgraph_edge** %edge, align 8, !dbg !4619
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4620
  %prev_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 3, !dbg !4620
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %prev_caller, align 8, !dbg !4620
  store %struct.cgraph_edge* %5, %struct.cgraph_edge** @free_edges, align 8, !dbg !4621
  br label %if.end5, !dbg !4622

if.else:                                          ; preds = %if.end
  %call4 = call i8* @ggc_alloc_stat(i64 96), !dbg !4623
  %6 = bitcast i8* %call4 to %struct.cgraph_edge*, !dbg !4623
  store %struct.cgraph_edge* %6, %struct.cgraph_edge** %edge, align 8, !dbg !4625
  %7 = load i32, i32* @cgraph_edge_max_uid, align 4, !dbg !4626
  %inc = add nsw i32 %7, 1, !dbg !4626
  store i32 %inc, i32* @cgraph_edge_max_uid, align 4, !dbg !4626
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4627
  %uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %8, i32 0, i32 12, !dbg !4628
  store i32 %7, i32* %uid, align 4, !dbg !4629
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then3
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4630
  %aux = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %9, i32 0, i32 8, !dbg !4631
  store i8* null, i8** %aux, align 8, !dbg !4632
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %caller.addr, align 8, !dbg !4633
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4634
  %caller6 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %11, i32 0, i32 1, !dbg !4635
  store %struct.cgraph_node* %10, %struct.cgraph_node** %caller6, align 8, !dbg !4636
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %callee.addr, align 8, !dbg !4637
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4638
  %callee7 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 2, !dbg !4639
  store %struct.cgraph_node* %12, %struct.cgraph_node** %callee7, align 8, !dbg !4640
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !4641
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4642
  %call_stmt8 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %15, i32 0, i32 7, !dbg !4643
  store %union.gimple_statement_d* %14, %union.gimple_statement_d** %call_stmt8, align 8, !dbg !4644
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %caller.addr, align 8, !dbg !4645
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 0, !dbg !4645
  %17 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4645
  %function_decl = bitcast %union.tree_node* %17 to %struct.tree_function_decl*, !dbg !4645
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !4645
  %18 = load %struct.function*, %struct.function** %f, align 8, !dbg !4645
  call void @push_cfun(%struct.function* %18), !dbg !4646
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !4647
  %tobool9 = icmp ne %union.gimple_statement_d* %19, null, !dbg !4647
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !4647

cond.true10:                                      ; preds = %if.end5
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !4648
  %call11 = call zeroext i8 @stmt_can_throw_external(%union.gimple_statement_d* %20), !dbg !4649
  %conv = zext i8 %call11 to i32, !dbg !4649
  br label %cond.end13, !dbg !4647

cond.false12:                                     ; preds = %if.end5
  br label %cond.end13, !dbg !4647

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi i32 [ %conv, %cond.true10 ], [ 0, %cond.false12 ], !dbg !4647
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4650
  %can_throw_external = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %21, i32 0, i32 14, !dbg !4651
  %22 = trunc i32 %cond14 to i8, !dbg !4652
  %bf.load = load i8, i8* %can_throw_external, align 2, !dbg !4652
  %bf.value = and i8 %22, 1, !dbg !4652
  %bf.shl = shl i8 %bf.value, 2, !dbg !4652
  %bf.clear = and i8 %bf.load, -5, !dbg !4652
  %bf.set = or i8 %bf.clear, %bf.shl, !dbg !4652
  store i8 %bf.set, i8* %can_throw_external, align 2, !dbg !4652
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !4652
  call void @pop_cfun(), !dbg !4653
  %23 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4654
  %prev_caller15 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %23, i32 0, i32 3, !dbg !4655
  store %struct.cgraph_edge* null, %struct.cgraph_edge** %prev_caller15, align 8, !dbg !4656
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %callee.addr, align 8, !dbg !4657
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 2, !dbg !4658
  %25 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !4658
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4659
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 4, !dbg !4660
  store %struct.cgraph_edge* %25, %struct.cgraph_edge** %next_caller, align 8, !dbg !4661
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %callee.addr, align 8, !dbg !4662
  %callers16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %27, i32 0, i32 2, !dbg !4664
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers16, align 8, !dbg !4664
  %tobool17 = icmp ne %struct.cgraph_edge* %28, null, !dbg !4662
  br i1 %tobool17, label %if.then18, label %if.end21, !dbg !4665

if.then18:                                        ; preds = %cond.end13
  %29 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4666
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %callee.addr, align 8, !dbg !4667
  %callers19 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %30, i32 0, i32 2, !dbg !4668
  %31 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers19, align 8, !dbg !4668
  %prev_caller20 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %31, i32 0, i32 3, !dbg !4669
  store %struct.cgraph_edge* %29, %struct.cgraph_edge** %prev_caller20, align 8, !dbg !4670
  br label %if.end21, !dbg !4667

if.end21:                                         ; preds = %if.then18, %cond.end13
  %32 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4671
  %prev_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %32, i32 0, i32 5, !dbg !4672
  store %struct.cgraph_edge* null, %struct.cgraph_edge** %prev_callee, align 8, !dbg !4673
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %caller.addr, align 8, !dbg !4674
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 1, !dbg !4675
  %34 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !4675
  %35 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4676
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %35, i32 0, i32 6, !dbg !4677
  store %struct.cgraph_edge* %34, %struct.cgraph_edge** %next_callee, align 8, !dbg !4678
  %36 = load %struct.cgraph_node*, %struct.cgraph_node** %caller.addr, align 8, !dbg !4679
  %callees22 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %36, i32 0, i32 1, !dbg !4681
  %37 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees22, align 8, !dbg !4681
  %tobool23 = icmp ne %struct.cgraph_edge* %37, null, !dbg !4679
  br i1 %tobool23, label %if.then24, label %if.end27, !dbg !4682

if.then24:                                        ; preds = %if.end21
  %38 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4683
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %caller.addr, align 8, !dbg !4684
  %callees25 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %39, i32 0, i32 1, !dbg !4685
  %40 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees25, align 8, !dbg !4685
  %prev_callee26 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %40, i32 0, i32 5, !dbg !4686
  store %struct.cgraph_edge* %38, %struct.cgraph_edge** %prev_callee26, align 8, !dbg !4687
  br label %if.end27, !dbg !4684

if.end27:                                         ; preds = %if.then24, %if.end21
  %41 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4688
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %caller.addr, align 8, !dbg !4689
  %callees28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i32 0, i32 1, !dbg !4690
  store %struct.cgraph_edge* %41, %struct.cgraph_edge** %callees28, align 8, !dbg !4691
  %43 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4692
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %callee.addr, align 8, !dbg !4693
  %callers29 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %44, i32 0, i32 2, !dbg !4694
  store %struct.cgraph_edge* %43, %struct.cgraph_edge** %callers29, align 8, !dbg !4695
  %45 = load i64, i64* %count.addr, align 8, !dbg !4696
  %46 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4697
  %count30 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %46, i32 0, i32 0, !dbg !4698
  store i64 %45, i64* %count30, align 8, !dbg !4699
  %47 = load i64, i64* %count.addr, align 8, !dbg !4700
  %cmp = icmp sge i64 %47, 0, !dbg !4700
  br i1 %cmp, label %cond.false33, label %cond.true32, !dbg !4700

cond.true32:                                      ; preds = %if.end27
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 962, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4700
  br label %cond.end34, !dbg !4700

cond.false33:                                     ; preds = %if.end27
  br label %cond.end34, !dbg !4700

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond35 = phi i32 [ 0, %cond.true32 ], [ 0, %cond.false33 ], !dbg !4700
  %48 = load i32, i32* %freq.addr, align 4, !dbg !4701
  %49 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4702
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %49, i32 0, i32 11, !dbg !4703
  store i32 %48, i32* %frequency, align 8, !dbg !4704
  %50 = load i32, i32* %freq.addr, align 4, !dbg !4705
  %cmp36 = icmp sge i32 %50, 0, !dbg !4705
  br i1 %cmp36, label %cond.false39, label %cond.true38, !dbg !4705

cond.true38:                                      ; preds = %cond.end34
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 964, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4705
  br label %cond.end40, !dbg !4705

cond.false39:                                     ; preds = %cond.end34
  br label %cond.end40, !dbg !4705

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !4705
  %51 = load i32, i32* %freq.addr, align 4, !dbg !4706
  %cmp42 = icmp sle i32 %51, 100000, !dbg !4706
  br i1 %cmp42, label %cond.false45, label %cond.true44, !dbg !4706

cond.true44:                                      ; preds = %cond.end40
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 965, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4706
  br label %cond.end46, !dbg !4706

cond.false45:                                     ; preds = %cond.end40
  br label %cond.end46, !dbg !4706

cond.end46:                                       ; preds = %cond.false45, %cond.true44
  %cond47 = phi i32 [ 0, %cond.true44 ], [ 0, %cond.false45 ], !dbg !4706
  %52 = load i32, i32* %nest.addr, align 4, !dbg !4707
  %conv48 = trunc i32 %52 to i16, !dbg !4707
  %53 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4708
  %loop_nest = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %53, i32 0, i32 13, !dbg !4709
  store i16 %conv48, i16* %loop_nest, align 8, !dbg !4710
  %54 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4711
  %indirect_call = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %54, i32 0, i32 14, !dbg !4712
  %bf.load49 = load i8, i8* %indirect_call, align 2, !dbg !4713
  %bf.clear50 = and i8 %bf.load49, -2, !dbg !4713
  store i8 %bf.clear50, i8* %indirect_call, align 2, !dbg !4713
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !4714
  %tobool51 = icmp ne %union.gimple_statement_d* %55, null, !dbg !4714
  br i1 %tobool51, label %cond.true52, label %cond.false55, !dbg !4714

cond.true52:                                      ; preds = %cond.end46
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !4715
  %call53 = call zeroext i8 @gimple_call_cannot_inline_p(%union.gimple_statement_d* %56), !dbg !4716
  %conv54 = zext i8 %call53 to i32, !dbg !4716
  br label %cond.end56, !dbg !4714

cond.false55:                                     ; preds = %cond.end46
  br label %cond.end56, !dbg !4714

cond.end56:                                       ; preds = %cond.false55, %cond.true52
  %cond57 = phi i32 [ %conv54, %cond.true52 ], [ 0, %cond.false55 ], !dbg !4714
  %57 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4717
  %call_stmt_cannot_inline_p = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %57, i32 0, i32 14, !dbg !4718
  %58 = trunc i32 %cond57 to i8, !dbg !4719
  %bf.load58 = load i8, i8* %call_stmt_cannot_inline_p, align 2, !dbg !4719
  %bf.value59 = and i8 %58, 1, !dbg !4719
  %bf.shl60 = shl i8 %bf.value59, 1, !dbg !4719
  %bf.clear61 = and i8 %bf.load58, -3, !dbg !4719
  %bf.set62 = or i8 %bf.clear61, %bf.shl60, !dbg !4719
  store i8 %bf.set62, i8* %call_stmt_cannot_inline_p, align 2, !dbg !4719
  %bf.result.cast63 = zext i8 %bf.value59 to i32, !dbg !4719
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !4720
  %tobool64 = icmp ne %union.gimple_statement_d* %59, null, !dbg !4720
  br i1 %tobool64, label %land.lhs.true, label %if.end77, !dbg !4722

land.lhs.true:                                    ; preds = %cond.end56
  %60 = load %struct.cgraph_node*, %struct.cgraph_node** %caller.addr, align 8, !dbg !4723
  %call_site_hash = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %60, i32 0, i32 15, !dbg !4724
  %61 = load %struct.htab*, %struct.htab** %call_site_hash, align 8, !dbg !4724
  %tobool65 = icmp ne %struct.htab* %61, null, !dbg !4723
  br i1 %tobool65, label %if.then66, label %if.end77, !dbg !4725

if.then66:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !4726, metadata !DIExpression()), !dbg !4728
  %62 = load %struct.cgraph_node*, %struct.cgraph_node** %caller.addr, align 8, !dbg !4729
  %call_site_hash67 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %62, i32 0, i32 15, !dbg !4730
  %63 = load %struct.htab*, %struct.htab** %call_site_hash67, align 8, !dbg !4730
  %64 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4731
  %call_stmt68 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %64, i32 0, i32 7, !dbg !4732
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt68, align 8, !dbg !4732
  %66 = bitcast %union.gimple_statement_d* %65 to i8*, !dbg !4731
  %67 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4733
  %68 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4734
  %call_stmt69 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %68, i32 0, i32 7, !dbg !4735
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt69, align 8, !dbg !4735
  %70 = bitcast %union.gimple_statement_d* %69 to i8*, !dbg !4734
  %call70 = call i32 %67(i8* %70), !dbg !4733
  %call71 = call i8** @htab_find_slot_with_hash(%struct.htab* %63, i8* %66, i32 %call70, i32 1), !dbg !4736
  store i8** %call71, i8*** %slot, align 8, !dbg !4737
  %71 = load i8**, i8*** %slot, align 8, !dbg !4738
  %72 = load i8*, i8** %71, align 8, !dbg !4738
  %tobool72 = icmp ne i8* %72, null, !dbg !4738
  br i1 %tobool72, label %cond.true73, label %cond.false74, !dbg !4738

cond.true73:                                      ; preds = %if.then66
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 978, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4738
  br label %cond.end75, !dbg !4738

cond.false74:                                     ; preds = %if.then66
  br label %cond.end75, !dbg !4738

cond.end75:                                       ; preds = %cond.false74, %cond.true73
  %cond76 = phi i32 [ 0, %cond.true73 ], [ 0, %cond.false74 ], !dbg !4738
  %73 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4739
  %74 = bitcast %struct.cgraph_edge* %73 to i8*, !dbg !4739
  %75 = load i8**, i8*** %slot, align 8, !dbg !4740
  store i8* %74, i8** %75, align 8, !dbg !4741
  br label %if.end77, !dbg !4742

if.end77:                                         ; preds = %cond.end75, %land.lhs.true, %cond.end56
  %76 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4743
  call void @initialize_inline_failed(%struct.cgraph_edge* %76), !dbg !4744
  %77 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !4745
  ret %struct.cgraph_edge* %77, !dbg !4746
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !4747 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !4751, metadata !DIExpression()), !dbg !4752
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !4753
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4754
  %cmp = icmp eq i32 %call, 8, !dbg !4755
  %conv = zext i1 %cmp to i32, !dbg !4755
  %conv1 = trunc i32 %conv to i8, !dbg !4754
  ret i8 %conv1, !dbg !4756
}

declare dso_local i8* @ggc_alloc_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_call_cannot_inline_p(%union.gimple_statement_d* %s) #0 !dbg !4757 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !4760, metadata !DIExpression()), !dbg !4761
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !4762
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4763
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4764
  %bf.load = load i32, i32* %1, align 8, !dbg !4764
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4764
  %and = and i32 %bf.lshr, 1, !dbg !4765
  %cmp = icmp ne i32 %and, 0, !dbg !4766
  %conv = zext i1 %cmp to i32, !dbg !4766
  %conv1 = trunc i32 %conv to i8, !dbg !4767
  ret i8 %conv1, !dbg !4768
}

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_inline_failed(%struct.cgraph_edge* %e) #0 !dbg !4769 {
entry:
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %callee = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !4772, metadata !DIExpression()), !dbg !4773
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %callee, metadata !4774, metadata !DIExpression()), !dbg !4775
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4776
  %callee1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 2, !dbg !4777
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %callee1, align 8, !dbg !4777
  store %struct.cgraph_node* %1, %struct.cgraph_node** %callee, align 8, !dbg !4775
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4778
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 27, !dbg !4780
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !4780
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !4780
  %bf.clear = and i16 %bf.lshr, 1, !dbg !4780
  %bf.cast = zext i16 %bf.clear to i32, !dbg !4780
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !4778
  br i1 %tobool, label %if.else, label %if.then, !dbg !4781

if.then:                                          ; preds = %entry
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4782
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 9, !dbg !4783
  store i32 3, i32* %inline_failed, align 8, !dbg !4784
  br label %if.end28, !dbg !4782

if.else:                                          ; preds = %entry
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4785
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 18, !dbg !4787
  %redefined_extern_inline = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !4788
  %bf.load2 = load i8, i8* %redefined_extern_inline, align 8, !dbg !4788
  %bf.lshr3 = lshr i8 %bf.load2, 5, !dbg !4788
  %bf.clear4 = and i8 %bf.lshr3, 1, !dbg !4788
  %bf.cast5 = zext i8 %bf.clear4 to i32, !dbg !4788
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !4785
  br i1 %tobool6, label %if.then7, label %if.else9, !dbg !4789

if.then7:                                         ; preds = %if.else
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4790
  %inline_failed8 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %5, i32 0, i32 9, !dbg !4791
  store i32 4, i32* %inline_failed8, align 8, !dbg !4792
  br label %if.end27, !dbg !4790

if.else9:                                         ; preds = %if.else
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4793
  %local10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 18, !dbg !4795
  %inlinable = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local10, i32 0, i32 2, !dbg !4796
  %bf.load11 = load i8, i8* %inlinable, align 8, !dbg !4796
  %bf.lshr12 = lshr i8 %bf.load11, 3, !dbg !4796
  %bf.clear13 = and i8 %bf.lshr12, 1, !dbg !4796
  %bf.cast14 = zext i8 %bf.clear13 to i32, !dbg !4796
  %tobool15 = icmp ne i32 %bf.cast14, 0, !dbg !4793
  br i1 %tobool15, label %if.else18, label %if.then16, !dbg !4797

if.then16:                                        ; preds = %if.else9
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4798
  %inline_failed17 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 9, !dbg !4799
  store i32 5, i32* %inline_failed17, align 8, !dbg !4800
  br label %if.end26, !dbg !4798

if.else18:                                        ; preds = %if.else9
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4801
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %8, i32 0, i32 7, !dbg !4803
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4803
  %tobool19 = icmp ne %union.gimple_statement_d* %9, null, !dbg !4801
  br i1 %tobool19, label %land.lhs.true, label %if.else24, !dbg !4804

land.lhs.true:                                    ; preds = %if.else18
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4805
  %call_stmt20 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 7, !dbg !4806
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt20, align 8, !dbg !4806
  %call = call zeroext i8 @gimple_call_cannot_inline_p(%union.gimple_statement_d* %11), !dbg !4807
  %conv = zext i8 %call to i32, !dbg !4807
  %tobool21 = icmp ne i32 %conv, 0, !dbg !4807
  br i1 %tobool21, label %if.then22, label %if.else24, !dbg !4808

if.then22:                                        ; preds = %land.lhs.true
  %12 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4809
  %inline_failed23 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %12, i32 0, i32 9, !dbg !4810
  store i32 17, i32* %inline_failed23, align 8, !dbg !4811
  br label %if.end, !dbg !4809

if.else24:                                        ; preds = %land.lhs.true, %if.else18
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4812
  %inline_failed25 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 9, !dbg !4813
  store i32 2, i32* %inline_failed25, align 8, !dbg !4814
  br label %if.end

if.end:                                           ; preds = %if.else24, %if.then22
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then16
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then7
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then
  ret void, !dbg !4815
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_remove_edge(%struct.cgraph_edge* %e) #0 !dbg !4816 {
entry:
  %e.addr = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !4817, metadata !DIExpression()), !dbg !4818
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4819
  call void @cgraph_call_edge_removal_hooks(%struct.cgraph_edge* %0), !dbg !4820
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4821
  call void @cgraph_edge_remove_callee(%struct.cgraph_edge* %1), !dbg !4822
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4823
  call void @cgraph_edge_remove_caller(%struct.cgraph_edge* %2), !dbg !4824
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4825
  call void @cgraph_free_edge(%struct.cgraph_edge* %3), !dbg !4826
  ret void, !dbg !4827
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_call_edge_removal_hooks(%struct.cgraph_edge* %e) #0 !dbg !4828 {
entry:
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %entry1 = alloca %struct.cgraph_edge_hook_list*, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !4829, metadata !DIExpression()), !dbg !4830
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge_hook_list** %entry1, metadata !4831, metadata !DIExpression()), !dbg !4832
  %0 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** @first_cgraph_edge_removal_hook, align 8, !dbg !4833
  store %struct.cgraph_edge_hook_list* %0, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !4832
  br label %while.cond, !dbg !4834

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !4835
  %tobool = icmp ne %struct.cgraph_edge_hook_list* %1, null, !dbg !4834
  br i1 %tobool, label %while.body, label %while.end, !dbg !4834

while.body:                                       ; preds = %while.cond
  %2 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !4836
  %hook = getelementptr inbounds %struct.cgraph_edge_hook_list, %struct.cgraph_edge_hook_list* %2, i32 0, i32 0, !dbg !4838
  %3 = load void (%struct.cgraph_edge*, i8*)*, void (%struct.cgraph_edge*, i8*)** %hook, align 8, !dbg !4838
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4839
  %5 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !4840
  %data = getelementptr inbounds %struct.cgraph_edge_hook_list, %struct.cgraph_edge_hook_list* %5, i32 0, i32 1, !dbg !4841
  %6 = load i8*, i8** %data, align 8, !dbg !4841
  call void %3(%struct.cgraph_edge* %4, i8* %6), !dbg !4836
  %7 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !4842
  %next = getelementptr inbounds %struct.cgraph_edge_hook_list, %struct.cgraph_edge_hook_list* %7, i32 0, i32 2, !dbg !4843
  %8 = load %struct.cgraph_edge_hook_list*, %struct.cgraph_edge_hook_list** %next, align 8, !dbg !4843
  store %struct.cgraph_edge_hook_list* %8, %struct.cgraph_edge_hook_list** %entry1, align 8, !dbg !4844
  br label %while.cond, !dbg !4834, !llvm.loop !4845

while.end:                                        ; preds = %while.cond
  ret void, !dbg !4847
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_edge_remove_callee(%struct.cgraph_edge* %e) #0 !dbg !4848 {
entry:
  %e.addr = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !4849, metadata !DIExpression()), !dbg !4850
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4851
  %prev_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 3, !dbg !4853
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %prev_caller, align 8, !dbg !4853
  %tobool = icmp ne %struct.cgraph_edge* %1, null, !dbg !4851
  br i1 %tobool, label %if.then, label %if.end, !dbg !4854

if.then:                                          ; preds = %entry
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4855
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %2, i32 0, i32 4, !dbg !4856
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !4856
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4857
  %prev_caller1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 3, !dbg !4858
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %prev_caller1, align 8, !dbg !4858
  %next_caller2 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %5, i32 0, i32 4, !dbg !4859
  store %struct.cgraph_edge* %3, %struct.cgraph_edge** %next_caller2, align 8, !dbg !4860
  br label %if.end, !dbg !4857

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4861
  %next_caller3 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 4, !dbg !4863
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller3, align 8, !dbg !4863
  %tobool4 = icmp ne %struct.cgraph_edge* %7, null, !dbg !4861
  br i1 %tobool4, label %if.then5, label %if.end9, !dbg !4864

if.then5:                                         ; preds = %if.end
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4865
  %prev_caller6 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %8, i32 0, i32 3, !dbg !4866
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %prev_caller6, align 8, !dbg !4866
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4867
  %next_caller7 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 4, !dbg !4868
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller7, align 8, !dbg !4868
  %prev_caller8 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %11, i32 0, i32 3, !dbg !4869
  store %struct.cgraph_edge* %9, %struct.cgraph_edge** %prev_caller8, align 8, !dbg !4870
  br label %if.end9, !dbg !4867

if.end9:                                          ; preds = %if.then5, %if.end
  %12 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4871
  %prev_caller10 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %12, i32 0, i32 3, !dbg !4873
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %prev_caller10, align 8, !dbg !4873
  %tobool11 = icmp ne %struct.cgraph_edge* %13, null, !dbg !4871
  br i1 %tobool11, label %if.end14, label %if.then12, !dbg !4874

if.then12:                                        ; preds = %if.end9
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4875
  %next_caller13 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %14, i32 0, i32 4, !dbg !4876
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller13, align 8, !dbg !4876
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4877
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %16, i32 0, i32 2, !dbg !4878
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !4878
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 2, !dbg !4879
  store %struct.cgraph_edge* %15, %struct.cgraph_edge** %callers, align 8, !dbg !4880
  br label %if.end14, !dbg !4877

if.end14:                                         ; preds = %if.then12, %if.end9
  ret void, !dbg !4881
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_edge_remove_caller(%struct.cgraph_edge* %e) #0 !dbg !4882 {
entry:
  %e.addr = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !4883, metadata !DIExpression()), !dbg !4884
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4885
  %prev_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 5, !dbg !4887
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %prev_callee, align 8, !dbg !4887
  %tobool = icmp ne %struct.cgraph_edge* %1, null, !dbg !4885
  br i1 %tobool, label %if.then, label %if.end, !dbg !4888

if.then:                                          ; preds = %entry
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4889
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %2, i32 0, i32 6, !dbg !4890
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !4890
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4891
  %prev_callee1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 5, !dbg !4892
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %prev_callee1, align 8, !dbg !4892
  %next_callee2 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %5, i32 0, i32 6, !dbg !4893
  store %struct.cgraph_edge* %3, %struct.cgraph_edge** %next_callee2, align 8, !dbg !4894
  br label %if.end, !dbg !4891

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4895
  %next_callee3 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 6, !dbg !4897
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee3, align 8, !dbg !4897
  %tobool4 = icmp ne %struct.cgraph_edge* %7, null, !dbg !4895
  br i1 %tobool4, label %if.then5, label %if.end9, !dbg !4898

if.then5:                                         ; preds = %if.end
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4899
  %prev_callee6 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %8, i32 0, i32 5, !dbg !4900
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %prev_callee6, align 8, !dbg !4900
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4901
  %next_callee7 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 6, !dbg !4902
  %11 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee7, align 8, !dbg !4902
  %prev_callee8 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %11, i32 0, i32 5, !dbg !4903
  store %struct.cgraph_edge* %9, %struct.cgraph_edge** %prev_callee8, align 8, !dbg !4904
  br label %if.end9, !dbg !4901

if.end9:                                          ; preds = %if.then5, %if.end
  %12 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4905
  %prev_callee10 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %12, i32 0, i32 5, !dbg !4907
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %prev_callee10, align 8, !dbg !4907
  %tobool11 = icmp ne %struct.cgraph_edge* %13, null, !dbg !4905
  br i1 %tobool11, label %if.end14, label %if.then12, !dbg !4908

if.then12:                                        ; preds = %if.end9
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4909
  %next_callee13 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %14, i32 0, i32 6, !dbg !4910
  %15 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee13, align 8, !dbg !4910
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4911
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %16, i32 0, i32 1, !dbg !4912
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !4912
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 1, !dbg !4913
  store %struct.cgraph_edge* %15, %struct.cgraph_edge** %callees, align 8, !dbg !4914
  br label %if.end14, !dbg !4911

if.end14:                                         ; preds = %if.then12, %if.end9
  %18 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4915
  %caller15 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %18, i32 0, i32 1, !dbg !4917
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %caller15, align 8, !dbg !4917
  %call_site_hash = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 15, !dbg !4918
  %20 = load %struct.htab*, %struct.htab** %call_site_hash, align 8, !dbg !4918
  %tobool16 = icmp ne %struct.htab* %20, null, !dbg !4915
  br i1 %tobool16, label %if.then17, label %if.end21, !dbg !4919

if.then17:                                        ; preds = %if.end14
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4920
  %caller18 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %21, i32 0, i32 1, !dbg !4921
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %caller18, align 8, !dbg !4921
  %call_site_hash19 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 15, !dbg !4922
  %23 = load %struct.htab*, %struct.htab** %call_site_hash19, align 8, !dbg !4922
  %24 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4923
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %24, i32 0, i32 7, !dbg !4924
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !4924
  %26 = bitcast %union.gimple_statement_d* %25 to i8*, !dbg !4923
  %27 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !4925
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4926
  %call_stmt20 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %28, i32 0, i32 7, !dbg !4927
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt20, align 8, !dbg !4927
  %30 = bitcast %union.gimple_statement_d* %29 to i8*, !dbg !4926
  %call = call i32 %27(i8* %30), !dbg !4925
  call void @htab_remove_elt_with_hash(%struct.htab* %23, i8* %26, i32 %call), !dbg !4928
  br label %if.end21, !dbg !4928

if.end21:                                         ; preds = %if.then17, %if.end14
  ret void, !dbg !4929
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_free_edge(%struct.cgraph_edge* %e) #0 !dbg !4930 {
entry:
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %uid = alloca i32, align 4
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !4931, metadata !DIExpression()), !dbg !4932
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !4933, metadata !DIExpression()), !dbg !4934
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4935
  %uid1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 12, !dbg !4936
  %1 = load i32, i32* %uid1, align 4, !dbg !4936
  store i32 %1, i32* %uid, align 4, !dbg !4934
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4937
  %3 = bitcast %struct.cgraph_edge* %2 to i8*, !dbg !4938
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 96, i1 false), !dbg !4938
  %4 = load i32, i32* %uid, align 4, !dbg !4939
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4940
  %uid2 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %5, i32 0, i32 12, !dbg !4941
  store i32 %4, i32* %uid2, align 4, !dbg !4942
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** @free_edges, align 8, !dbg !4943
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4944
  %prev_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 3, !dbg !4944
  store %struct.cgraph_edge* %6, %struct.cgraph_edge** %prev_caller, align 8, !dbg !4945
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4946
  store %struct.cgraph_edge* %8, %struct.cgraph_edge** @free_edges, align 8, !dbg !4947
  ret void, !dbg !4948
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_redirect_edge_callee(%struct.cgraph_edge* %e, %struct.cgraph_node* %n) #0 !dbg !4949 {
entry:
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %n.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !4952, metadata !DIExpression()), !dbg !4953
  store %struct.cgraph_node* %n, %struct.cgraph_node** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n.addr, metadata !4954, metadata !DIExpression()), !dbg !4955
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4956
  call void @cgraph_edge_remove_callee(%struct.cgraph_edge* %0), !dbg !4957
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4958
  %prev_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %1, i32 0, i32 3, !dbg !4959
  store %struct.cgraph_edge* null, %struct.cgraph_edge** %prev_caller, align 8, !dbg !4960
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !4961
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 2, !dbg !4963
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !4963
  %tobool = icmp ne %struct.cgraph_edge* %3, null, !dbg !4961
  br i1 %tobool, label %if.then, label %if.end, !dbg !4964

if.then:                                          ; preds = %entry
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4965
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !4966
  %callers1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 2, !dbg !4967
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers1, align 8, !dbg !4967
  %prev_caller2 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %6, i32 0, i32 3, !dbg !4968
  store %struct.cgraph_edge* %4, %struct.cgraph_edge** %prev_caller2, align 8, !dbg !4969
  br label %if.end, !dbg !4966

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !4970
  %callers3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 2, !dbg !4971
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers3, align 8, !dbg !4971
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4972
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %9, i32 0, i32 4, !dbg !4973
  store %struct.cgraph_edge* %8, %struct.cgraph_edge** %next_caller, align 8, !dbg !4974
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4975
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !4976
  %callers4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 2, !dbg !4977
  store %struct.cgraph_edge* %10, %struct.cgraph_edge** %callers4, align 8, !dbg !4978
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !4979
  %13 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !4980
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %13, i32 0, i32 2, !dbg !4981
  store %struct.cgraph_node* %12, %struct.cgraph_node** %callee, align 8, !dbg !4982
  ret void, !dbg !4983
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_update_edges_for_call_stmt(%union.gimple_statement_d* %old_stmt, %union.tree_node* %old_decl, %union.gimple_statement_d* %new_stmt) #0 !dbg !4984 {
entry:
  %old_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %old_decl.addr = alloca %union.tree_node*, align 8
  %new_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %orig = alloca %struct.cgraph_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %union.gimple_statement_d* %old_stmt, %union.gimple_statement_d** %old_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt.addr, metadata !4987, metadata !DIExpression()), !dbg !4988
  store %union.tree_node* %old_decl, %union.tree_node** %old_decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_decl.addr, metadata !4989, metadata !DIExpression()), !dbg !4990
  store %union.gimple_statement_d* %new_stmt, %union.gimple_statement_d** %new_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt.addr, metadata !4991, metadata !DIExpression()), !dbg !4992
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %orig, metadata !4993, metadata !DIExpression()), !dbg !4994
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4995
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4995
  %decl = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 6, !dbg !4996
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !4996
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %1), !dbg !4997
  store %struct.cgraph_node* %call, %struct.cgraph_node** %orig, align 8, !dbg !4994
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !4998, metadata !DIExpression()), !dbg !4999
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %orig, align 8, !dbg !5000
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !5001
  %4 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !5002
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !5003
  call void @cgraph_update_edges_for_call_stmt_node(%struct.cgraph_node* %2, %union.gimple_statement_d* %3, %union.tree_node* %4, %union.gimple_statement_d* %5), !dbg !5004
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %orig, align 8, !dbg !5005
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 11, !dbg !5007
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !5007
  %tobool = icmp ne %struct.cgraph_node* %7, null, !dbg !5005
  br i1 %tobool, label %if.then, label %if.end18, !dbg !5008

if.then:                                          ; preds = %entry
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %orig, align 8, !dbg !5009
  %clones1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 11, !dbg !5011
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %clones1, align 8, !dbg !5011
  store %struct.cgraph_node* %9, %struct.cgraph_node** %node, align 8, !dbg !5012
  br label %for.cond, !dbg !5013

for.cond:                                         ; preds = %if.end17, %if.then
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5014
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %orig, align 8, !dbg !5016
  %cmp = icmp ne %struct.cgraph_node* %10, %11, !dbg !5017
  br i1 %cmp, label %for.body, label %for.end, !dbg !5018

for.body:                                         ; preds = %for.cond
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5019
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !5021
  %14 = load %union.tree_node*, %union.tree_node** %old_decl.addr, align 8, !dbg !5022
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !5023
  call void @cgraph_update_edges_for_call_stmt_node(%struct.cgraph_node* %12, %union.gimple_statement_d* %13, %union.tree_node* %14, %union.gimple_statement_d* %15), !dbg !5024
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5025
  %clones2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 11, !dbg !5027
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %clones2, align 8, !dbg !5027
  %tobool3 = icmp ne %struct.cgraph_node* %17, null, !dbg !5025
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !5028

if.then4:                                         ; preds = %for.body
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5029
  %clones5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 11, !dbg !5030
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %clones5, align 8, !dbg !5030
  store %struct.cgraph_node* %19, %struct.cgraph_node** %node, align 8, !dbg !5031
  br label %if.end17, !dbg !5032

if.else:                                          ; preds = %for.body
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5033
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 9, !dbg !5035
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !5035
  %tobool6 = icmp ne %struct.cgraph_node* %21, null, !dbg !5033
  br i1 %tobool6, label %if.then7, label %if.else9, !dbg !5036

if.then7:                                         ; preds = %if.else
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5037
  %next_sibling_clone8 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 9, !dbg !5038
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone8, align 8, !dbg !5038
  store %struct.cgraph_node* %23, %struct.cgraph_node** %node, align 8, !dbg !5039
  br label %if.end16, !dbg !5040

if.else9:                                         ; preds = %if.else
  br label %while.cond, !dbg !5041

while.cond:                                       ; preds = %while.body, %if.else9
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5043
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %orig, align 8, !dbg !5044
  %cmp10 = icmp ne %struct.cgraph_node* %24, %25, !dbg !5045
  br i1 %cmp10, label %land.rhs, label %land.end, !dbg !5046

land.rhs:                                         ; preds = %while.cond
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5047
  %next_sibling_clone11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %26, i32 0, i32 9, !dbg !5048
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone11, align 8, !dbg !5048
  %tobool12 = icmp ne %struct.cgraph_node* %27, null, !dbg !5049
  %lnot = xor i1 %tobool12, true, !dbg !5049
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %28 = phi i1 [ false, %while.cond ], [ %lnot, %land.rhs ], !dbg !5050
  br i1 %28, label %while.body, label %while.end, !dbg !5041

while.body:                                       ; preds = %land.end
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5051
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %29, i32 0, i32 12, !dbg !5052
  %30 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !5052
  store %struct.cgraph_node* %30, %struct.cgraph_node** %node, align 8, !dbg !5053
  br label %while.cond, !dbg !5041, !llvm.loop !5054

while.end:                                        ; preds = %land.end
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5055
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %orig, align 8, !dbg !5057
  %cmp13 = icmp ne %struct.cgraph_node* %31, %32, !dbg !5058
  br i1 %cmp13, label %if.then14, label %if.end, !dbg !5059

if.then14:                                        ; preds = %while.end
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5060
  %next_sibling_clone15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 9, !dbg !5061
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone15, align 8, !dbg !5061
  store %struct.cgraph_node* %34, %struct.cgraph_node** %node, align 8, !dbg !5062
  br label %if.end, !dbg !5063

if.end:                                           ; preds = %if.then14, %while.end
  br label %if.end16

if.end16:                                         ; preds = %if.end, %if.then7
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.then4
  br label %for.cond, !dbg !5064, !llvm.loop !5065

for.end:                                          ; preds = %for.cond
  br label %if.end18, !dbg !5066

if.end18:                                         ; preds = %for.end, %entry
  ret void, !dbg !5067
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_update_edges_for_call_stmt_node(%struct.cgraph_node* %node, %union.gimple_statement_d* %old_stmt, %union.tree_node* %old_call, %union.gimple_statement_d* %new_stmt) #0 !dbg !5068 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %old_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %old_call.addr = alloca %union.tree_node*, align 8
  %new_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %new_call = alloca %union.tree_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %ne = alloca %struct.cgraph_edge*, align 8
  %count = alloca i64, align 8
  %frequency = alloca i32, align 4
  %loop_nest = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5071, metadata !DIExpression()), !dbg !5072
  store %union.gimple_statement_d* %old_stmt, %union.gimple_statement_d** %old_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt.addr, metadata !5073, metadata !DIExpression()), !dbg !5074
  store %union.tree_node* %old_call, %union.tree_node** %old_call.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_call.addr, metadata !5075, metadata !DIExpression()), !dbg !5076
  store %union.gimple_statement_d* %new_stmt, %union.gimple_statement_d** %new_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt.addr, metadata !5077, metadata !DIExpression()), !dbg !5078
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_call, metadata !5079, metadata !DIExpression()), !dbg !5080
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !5081
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %0), !dbg !5082
  %conv = zext i8 %call to i32, !dbg !5083
  %tobool = icmp ne i32 %conv, 0, !dbg !5083
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5083

cond.true:                                        ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !5084
  %call1 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %1), !dbg !5085
  br label %cond.end, !dbg !5083

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5083

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !5083
  store %union.tree_node* %cond, %union.tree_node** %new_call, align 8, !dbg !5080
  %2 = load %union.tree_node*, %union.tree_node** %new_call, align 8, !dbg !5086
  %tobool2 = icmp ne %union.tree_node* %2, null, !dbg !5086
  br i1 %tobool2, label %if.end, label %land.lhs.true, !dbg !5088

land.lhs.true:                                    ; preds = %cond.end
  %3 = load %union.tree_node*, %union.tree_node** %old_call.addr, align 8, !dbg !5089
  %tobool3 = icmp ne %union.tree_node* %3, null, !dbg !5089
  br i1 %tobool3, label %if.end, label %if.then, !dbg !5090

if.then:                                          ; preds = %land.lhs.true
  br label %if.end39, !dbg !5091

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %old_call.addr, align 8, !dbg !5092
  %5 = load %union.tree_node*, %union.tree_node** %new_call, align 8, !dbg !5094
  %cmp = icmp ne %union.tree_node* %4, %5, !dbg !5095
  br i1 %cmp, label %if.then5, label %if.else33, !dbg !5096

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !5097, metadata !DIExpression()), !dbg !5099
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5100
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !5101
  %call6 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %6, %union.gimple_statement_d* %7), !dbg !5102
  store %struct.cgraph_edge* %call6, %struct.cgraph_edge** %e, align 8, !dbg !5099
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %ne, metadata !5103, metadata !DIExpression()), !dbg !5104
  store %struct.cgraph_edge* null, %struct.cgraph_edge** %ne, align 8, !dbg !5104
  call void @llvm.dbg.declare(metadata i64* %count, metadata !5105, metadata !DIExpression()), !dbg !5106
  call void @llvm.dbg.declare(metadata i32* %frequency, metadata !5107, metadata !DIExpression()), !dbg !5108
  call void @llvm.dbg.declare(metadata i32* %loop_nest, metadata !5109, metadata !DIExpression()), !dbg !5110
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5111
  %tobool7 = icmp ne %struct.cgraph_edge* %8, null, !dbg !5111
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !5113

if.then8:                                         ; preds = %if.then5
  %9 = load %union.tree_node*, %union.tree_node** %new_call, align 8, !dbg !5114
  %tobool9 = icmp ne %union.tree_node* %9, null, !dbg !5114
  br i1 %tobool9, label %land.lhs.true10, label %if.end14, !dbg !5117

land.lhs.true10:                                  ; preds = %if.then8
  %10 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5118
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %10, i32 0, i32 2, !dbg !5119
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !5119
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 0, !dbg !5120
  %12 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5120
  %13 = load %union.tree_node*, %union.tree_node** %new_call, align 8, !dbg !5121
  %cmp11 = icmp eq %union.tree_node* %12, %13, !dbg !5122
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !5123

if.then13:                                        ; preds = %land.lhs.true10
  br label %if.end39, !dbg !5124

if.end14:                                         ; preds = %land.lhs.true10, %if.then8
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5125
  %count15 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %14, i32 0, i32 0, !dbg !5126
  %15 = load i64, i64* %count15, align 8, !dbg !5126
  store i64 %15, i64* %count, align 8, !dbg !5127
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5128
  %frequency16 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %16, i32 0, i32 11, !dbg !5129
  %17 = load i32, i32* %frequency16, align 8, !dbg !5129
  store i32 %17, i32* %frequency, align 4, !dbg !5130
  %18 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5131
  %loop_nest17 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %18, i32 0, i32 13, !dbg !5132
  %19 = load i16, i16* %loop_nest17, align 8, !dbg !5132
  %conv18 = zext i16 %19 to i32, !dbg !5131
  store i32 %conv18, i32* %loop_nest, align 4, !dbg !5133
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5134
  call void @cgraph_remove_edge(%struct.cgraph_edge* %20), !dbg !5135
  br label %if.end22, !dbg !5136

if.else:                                          ; preds = %if.then5
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5137, metadata !DIExpression()), !dbg !5139
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !5140
  %call19 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %21), !dbg !5141
  store %struct.basic_block_def* %call19, %struct.basic_block_def** %bb, align 8, !dbg !5139
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5142
  %count20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 8, !dbg !5143
  %23 = load i64, i64* %count20, align 8, !dbg !5143
  store i64 %23, i64* %count, align 8, !dbg !5144
  %24 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5145
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5146
  %call21 = call i32 @compute_call_stmt_bb_frequency(%union.tree_node* %24, %struct.basic_block_def* %25), !dbg !5147
  store i32 %call21, i32* %frequency, align 4, !dbg !5148
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5149
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 10, !dbg !5150
  %27 = load i32, i32* %loop_depth, align 4, !dbg !5150
  store i32 %27, i32* %loop_nest, align 4, !dbg !5151
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.end14
  %28 = load %union.tree_node*, %union.tree_node** %new_call, align 8, !dbg !5152
  %tobool23 = icmp ne %union.tree_node* %28, null, !dbg !5152
  br i1 %tobool23, label %if.then24, label %if.end32, !dbg !5154

if.then24:                                        ; preds = %if.end22
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5155
  %30 = load %union.tree_node*, %union.tree_node** %new_call, align 8, !dbg !5157
  %call25 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %30), !dbg !5158
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !5159
  %32 = load i64, i64* %count, align 8, !dbg !5160
  %33 = load i32, i32* %frequency, align 4, !dbg !5161
  %34 = load i32, i32* %loop_nest, align 4, !dbg !5162
  %call26 = call %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node* %29, %struct.cgraph_node* %call25, %union.gimple_statement_d* %31, i64 %32, i32 %33, i32 %34), !dbg !5163
  store %struct.cgraph_edge* %call26, %struct.cgraph_edge** %ne, align 8, !dbg !5164
  %35 = load %struct.cgraph_edge*, %struct.cgraph_edge** %ne, align 8, !dbg !5165
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %35, i32 0, i32 9, !dbg !5165
  %36 = load i32, i32* %inline_failed, align 8, !dbg !5165
  %tobool27 = icmp ne i32 %36, 0, !dbg !5165
  br i1 %tobool27, label %cond.false29, label %cond.true28, !dbg !5165

cond.true28:                                      ; preds = %if.then24
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1121, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5165
  br label %cond.end30, !dbg !5165

cond.false29:                                     ; preds = %if.then24
  br label %cond.end30, !dbg !5165

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond31 = phi i32 [ 0, %cond.true28 ], [ 0, %cond.false29 ], !dbg !5165
  br label %if.end32, !dbg !5166

if.end32:                                         ; preds = %cond.end30, %if.end22
  br label %if.end39, !dbg !5167

if.else33:                                        ; preds = %if.end
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !5168
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !5170
  %cmp34 = icmp ne %union.gimple_statement_d* %37, %38, !dbg !5171
  br i1 %cmp34, label %if.then36, label %if.end38, !dbg !5172

if.then36:                                        ; preds = %if.else33
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5173
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt.addr, align 8, !dbg !5174
  %call37 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %39, %union.gimple_statement_d* %40), !dbg !5175
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt.addr, align 8, !dbg !5176
  call void @cgraph_set_call_stmt(%struct.cgraph_edge* %call37, %union.gimple_statement_d* %41), !dbg !5177
  br label %if.end38, !dbg !5177

if.end38:                                         ; preds = %if.then36, %if.else33
  br label %if.end39

if.end39:                                         ; preds = %if.then, %if.then13, %if.end38, %if.end32
  ret void, !dbg !5178
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_node_remove_callees(%struct.cgraph_node* %node) #0 !dbg !5179 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %f = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5180, metadata !DIExpression()), !dbg !5181
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !5182, metadata !DIExpression()), !dbg !5183
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %f, metadata !5184, metadata !DIExpression()), !dbg !5185
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5186
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 1, !dbg !5188
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !5188
  store %struct.cgraph_edge* %1, %struct.cgraph_edge** %e, align 8, !dbg !5189
  br label %for.cond, !dbg !5190

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5191
  %tobool = icmp ne %struct.cgraph_edge* %2, null, !dbg !5193
  br i1 %tobool, label %for.body, label %for.end, !dbg !5193

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5194
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 6, !dbg !5196
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !5196
  store %struct.cgraph_edge* %4, %struct.cgraph_edge** %f, align 8, !dbg !5197
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5198
  call void @cgraph_call_edge_removal_hooks(%struct.cgraph_edge* %5), !dbg !5199
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5200
  call void @cgraph_edge_remove_callee(%struct.cgraph_edge* %6), !dbg !5201
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5202
  call void @cgraph_free_edge(%struct.cgraph_edge* %7), !dbg !5203
  br label %for.inc, !dbg !5204

for.inc:                                          ; preds = %for.body
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %f, align 8, !dbg !5205
  store %struct.cgraph_edge* %8, %struct.cgraph_edge** %e, align 8, !dbg !5206
  br label %for.cond, !dbg !5207, !llvm.loop !5208

for.end:                                          ; preds = %for.cond
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5210
  %callees1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 1, !dbg !5211
  store %struct.cgraph_edge* null, %struct.cgraph_edge** %callees1, align 8, !dbg !5212
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5213
  %call_site_hash = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 15, !dbg !5215
  %11 = load %struct.htab*, %struct.htab** %call_site_hash, align 8, !dbg !5215
  %tobool2 = icmp ne %struct.htab* %11, null, !dbg !5213
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5216

if.then:                                          ; preds = %for.end
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5217
  %call_site_hash3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 15, !dbg !5219
  %13 = load %struct.htab*, %struct.htab** %call_site_hash3, align 8, !dbg !5219
  call void @htab_delete(%struct.htab* %13), !dbg !5220
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5221
  %call_site_hash4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 15, !dbg !5222
  store %struct.htab* null, %struct.htab** %call_site_hash4, align 8, !dbg !5223
  br label %if.end, !dbg !5224

if.end:                                           ; preds = %if.then, %for.end
  ret void, !dbg !5225
}

declare dso_local void @htab_delete(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_release_function_body(%struct.cgraph_node* %node) #0 !dbg !5226 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %old_decl = alloca %union.tree_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5227, metadata !DIExpression()), !dbg !5228
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5229
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !5229
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5229
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !5229
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !5229
  %2 = load %struct.function*, %struct.function** %f, align 8, !dbg !5229
  %tobool = icmp ne %struct.function* %2, null, !dbg !5229
  br i1 %tobool, label %if.then, label %if.end40, !dbg !5231

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_decl, metadata !5232, metadata !DIExpression()), !dbg !5234
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5235
  store %union.tree_node* %3, %union.tree_node** %old_decl, align 8, !dbg !5234
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5236
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 0, !dbg !5236
  %5 = load %union.tree_node*, %union.tree_node** %decl1, align 8, !dbg !5236
  %function_decl2 = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !5236
  %f3 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl2, i32 0, i32 1, !dbg !5236
  %6 = load %struct.function*, %struct.function** %f3, align 8, !dbg !5236
  call void @push_cfun(%struct.function* %6), !dbg !5237
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5238
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !5238
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 3, !dbg !5240
  %8 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5240
  %tobool4 = icmp ne %struct.gimple_df* %8, null, !dbg !5238
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !5241

if.then5:                                         ; preds = %if.then
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5242
  %decl6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 0, !dbg !5244
  %10 = load %union.tree_node*, %union.tree_node** %decl6, align 8, !dbg !5244
  store %union.tree_node* %10, %union.tree_node** @current_function_decl, align 8, !dbg !5245
  call void @delete_tree_ssa(), !dbg !5246
  call void @delete_tree_cfg_annotations(), !dbg !5247
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5248
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !5248
  %eh = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 0, !dbg !5249
  store %struct.eh_status* null, %struct.eh_status** %eh, align 8, !dbg !5250
  %12 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !5251
  store %union.tree_node* %12, %union.tree_node** @current_function_decl, align 8, !dbg !5252
  br label %if.end, !dbg !5253

if.end:                                           ; preds = %if.then5, %if.then
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5254
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !5254
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !5256
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5256
  %tobool9 = icmp ne %struct.control_flow_graph* %14, null, !dbg !5254
  br i1 %tobool9, label %if.then10, label %if.end22, !dbg !5257

if.then10:                                        ; preds = %if.end
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5258
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !5258
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !5258
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !5258
  %x_dom_computed = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 8, !dbg !5258
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %x_dom_computed, i64 0, i64 0, !dbg !5258
  %17 = load i32, i32* %arrayidx, align 4, !dbg !5258
  %cmp = icmp eq i32 %17, 0, !dbg !5258
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5258

cond.true:                                        ; preds = %if.then10
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1223, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5258
  br label %cond.end, !dbg !5258

cond.false:                                       ; preds = %if.then10
  br label %cond.end, !dbg !5258

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5258
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5260
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !5260
  %cfg14 = getelementptr inbounds %struct.function, %struct.function* %add.ptr13, i32 0, i32 1, !dbg !5260
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg14, align 8, !dbg !5260
  %x_dom_computed15 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 8, !dbg !5260
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %x_dom_computed15, i64 0, i64 1, !dbg !5260
  %20 = load i32, i32* %arrayidx16, align 4, !dbg !5260
  %cmp17 = icmp eq i32 %20, 0, !dbg !5260
  br i1 %cmp17, label %cond.false19, label %cond.true18, !dbg !5260

cond.true18:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1224, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5260
  br label %cond.end20, !dbg !5260

cond.false19:                                     ; preds = %cond.end
  br label %cond.end20, !dbg !5260

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ 0, %cond.true18 ], [ 0, %cond.false19 ], !dbg !5260
  call void @clear_edges(), !dbg !5261
  br label %if.end22, !dbg !5262

if.end22:                                         ; preds = %cond.end20, %if.end
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5263
  %add.ptr23 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, !dbg !5263
  %value_histograms = getelementptr inbounds %struct.function, %struct.function* %add.ptr23, i32 0, i32 5, !dbg !5265
  %22 = load %struct.htab*, %struct.htab** %value_histograms, align 8, !dbg !5265
  %tobool24 = icmp ne %struct.htab* %22, null, !dbg !5263
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !5266

if.then25:                                        ; preds = %if.end22
  call void @free_histograms(), !dbg !5267
  br label %if.end26, !dbg !5267

if.end26:                                         ; preds = %if.then25, %if.end22
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5268
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !5268
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 4, !dbg !5268
  %24 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5268
  %tobool28 = icmp ne %struct.loops* %24, null, !dbg !5268
  br i1 %tobool28, label %cond.true29, label %cond.false30, !dbg !5268

cond.true29:                                      ; preds = %if.end26
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1229, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5268
  br label %cond.end31, !dbg !5268

cond.false30:                                     ; preds = %if.end26
  br label %cond.end31, !dbg !5268

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi i32 [ 0, %cond.true29 ], [ 0, %cond.false30 ], !dbg !5268
  call void @pop_cfun(), !dbg !5269
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5270
  %decl33 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %25, i32 0, i32 0, !dbg !5271
  %26 = load %union.tree_node*, %union.tree_node** %decl33, align 8, !dbg !5271
  call void @gimple_set_body(%union.tree_node* %26, %struct.gimple_seq_d* null), !dbg !5272
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5273
  %ipa_transforms_to_apply = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %27, i32 0, i32 17, !dbg !5273
  call void @VEC_ipa_opt_pass_heap_free(%struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply), !dbg !5273
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5274
  %decl34 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 0, !dbg !5274
  %29 = load %union.tree_node*, %union.tree_node** %decl34, align 8, !dbg !5274
  %function_decl35 = bitcast %union.tree_node* %29 to %struct.tree_function_decl*, !dbg !5274
  %f36 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl35, i32 0, i32 1, !dbg !5274
  %30 = load %struct.function*, %struct.function** %f36, align 8, !dbg !5274
  %31 = bitcast %struct.function* %30 to i8*, !dbg !5274
  call void @ggc_free(i8* %31), !dbg !5275
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5276
  %decl37 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 0, !dbg !5276
  %33 = load %union.tree_node*, %union.tree_node** %decl37, align 8, !dbg !5276
  %function_decl38 = bitcast %union.tree_node* %33 to %struct.tree_function_decl*, !dbg !5276
  %f39 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl38, i32 0, i32 1, !dbg !5276
  store %struct.function* null, %struct.function** %f39, align 8, !dbg !5277
  br label %if.end40, !dbg !5278

if.end40:                                         ; preds = %cond.end31, %entry
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5279
  %decl41 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %34, i32 0, i32 0, !dbg !5279
  %35 = load %union.tree_node*, %union.tree_node** %decl41, align 8, !dbg !5279
  %decl_non_common = bitcast %union.tree_node* %35 to %struct.tree_decl_non_common*, !dbg !5279
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 1, !dbg !5279
  store %union.tree_node* null, %union.tree_node** %saved_tree, align 8, !dbg !5280
  %36 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5281
  %abstract_and_needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %36, i32 0, i32 27, !dbg !5283
  %bf.load = load i16, i16* %abstract_and_needed, align 4, !dbg !5283
  %bf.lshr = lshr i16 %bf.load, 2, !dbg !5283
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5283
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5283
  %tobool42 = icmp ne i32 %bf.cast, 0, !dbg !5281
  br i1 %tobool42, label %if.end45, label %if.then43, !dbg !5284

if.then43:                                        ; preds = %if.end40
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5285
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5286
  %decl44 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %38, i32 0, i32 0, !dbg !5286
  %39 = load %union.tree_node*, %union.tree_node** %decl44, align 8, !dbg !5286
  %decl_common = bitcast %union.tree_node* %39 to %struct.tree_decl_common*, !dbg !5286
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 5, !dbg !5286
  store %union.tree_node* %37, %union.tree_node** %initial, align 8, !dbg !5287
  br label %if.end45, !dbg !5286

if.end45:                                         ; preds = %if.then43, %if.end40
  ret void, !dbg !5288
}

declare dso_local void @delete_tree_ssa() #2

declare dso_local void @delete_tree_cfg_annotations() #2

declare dso_local void @clear_edges() #2

declare dso_local void @free_histograms() #2

declare dso_local void @gimple_set_body(%union.tree_node*, %struct.gimple_seq_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_ipa_opt_pass_heap_free(%struct.VEC_ipa_opt_pass_heap** %vec_) #0 !dbg !5289 {
entry:
  %vec_.addr = alloca %struct.VEC_ipa_opt_pass_heap**, align 8
  store %struct.VEC_ipa_opt_pass_heap** %vec_, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, metadata !5293, metadata !DIExpression()), !dbg !5294
  %0 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !5295
  %1 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %0, align 8, !dbg !5295
  %tobool = icmp ne %struct.VEC_ipa_opt_pass_heap* %1, null, !dbg !5295
  br i1 %tobool, label %if.then, label %if.end, !dbg !5294

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !5295
  %3 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %2, align 8, !dbg !5295
  %4 = bitcast %struct.VEC_ipa_opt_pass_heap* %3 to i8*, !dbg !5295
  call void @free(i8* %4), !dbg !5295
  br label %if.end, !dbg !5295

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_ipa_opt_pass_heap**, %struct.VEC_ipa_opt_pass_heap*** %vec_.addr, align 8, !dbg !5294
  store %struct.VEC_ipa_opt_pass_heap* null, %struct.VEC_ipa_opt_pass_heap** %5, align 8, !dbg !5294
  ret void, !dbg !5294
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_remove_same_body_alias(%struct.cgraph_node* %node) #0 !dbg !5297 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %slot = alloca i8**, align 8
  %uid = alloca i32, align 4
  %name = alloca %union.tree_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5298, metadata !DIExpression()), !dbg !5299
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5300, metadata !DIExpression()), !dbg !5301
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !5302, metadata !DIExpression()), !dbg !5303
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5304
  %uid1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 24, !dbg !5305
  %1 = load i32, i32* %uid1, align 8, !dbg !5305
  store i32 %1, i32* %uid, align 4, !dbg !5303
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5306
  %same_body_alias = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 27, !dbg !5306
  %bf.load = load i16, i16* %same_body_alias, align 4, !dbg !5306
  %bf.lshr = lshr i16 %bf.load, 9, !dbg !5306
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5306
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5306
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5306
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5306

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1255, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5306
  br label %cond.end, !dbg !5306

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5306

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5306
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5307
  %previous = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 4, !dbg !5309
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %previous, align 8, !dbg !5309
  %tobool2 = icmp ne %struct.cgraph_node* %4, null, !dbg !5307
  br i1 %tobool2, label %if.then, label %if.else, !dbg !5310

if.then:                                          ; preds = %cond.end
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5311
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 3, !dbg !5312
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !5312
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5313
  %previous3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 4, !dbg !5314
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %previous3, align 8, !dbg !5314
  %next4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 3, !dbg !5315
  store %struct.cgraph_node* %6, %struct.cgraph_node** %next4, align 8, !dbg !5316
  br label %if.end, !dbg !5313

if.else:                                          ; preds = %cond.end
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5317
  %next5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 3, !dbg !5318
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %next5, align 8, !dbg !5318
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5319
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 13, !dbg !5320
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !5320
  %same_body6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 13, !dbg !5321
  store %struct.cgraph_node* %10, %struct.cgraph_node** %same_body6, align 8, !dbg !5322
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5323
  %next7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 3, !dbg !5325
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %next7, align 8, !dbg !5325
  %tobool8 = icmp ne %struct.cgraph_node* %14, null, !dbg !5323
  br i1 %tobool8, label %if.then9, label %if.end13, !dbg !5326

if.then9:                                         ; preds = %if.end
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5327
  %previous10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 4, !dbg !5328
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %previous10, align 8, !dbg !5328
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5329
  %next11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 3, !dbg !5330
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %next11, align 8, !dbg !5330
  %previous12 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 4, !dbg !5331
  store %struct.cgraph_node* %16, %struct.cgraph_node** %previous12, align 8, !dbg !5332
  br label %if.end13, !dbg !5329

if.end13:                                         ; preds = %if.then9, %if.end
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5333
  %next14 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 3, !dbg !5334
  store %struct.cgraph_node* null, %struct.cgraph_node** %next14, align 8, !dbg !5335
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5336
  %previous15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 4, !dbg !5337
  store %struct.cgraph_node* null, %struct.cgraph_node** %previous15, align 8, !dbg !5338
  %21 = load %struct.htab*, %struct.htab** @cgraph_hash, align 8, !dbg !5339
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5340
  %23 = bitcast %struct.cgraph_node* %22 to i8*, !dbg !5340
  %call = call i8** @htab_find_slot(%struct.htab* %21, i8* %23, i32 0), !dbg !5341
  store i8** %call, i8*** %slot, align 8, !dbg !5342
  %24 = load i8**, i8*** %slot, align 8, !dbg !5343
  %25 = load i8*, i8** %24, align 8, !dbg !5345
  %26 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5346
  %27 = bitcast %struct.cgraph_node* %26 to i8*, !dbg !5346
  %cmp = icmp eq i8* %25, %27, !dbg !5347
  br i1 %cmp, label %if.then16, label %if.end17, !dbg !5348

if.then16:                                        ; preds = %if.end13
  %28 = load %struct.htab*, %struct.htab** @cgraph_hash, align 8, !dbg !5349
  %29 = load i8**, i8*** %slot, align 8, !dbg !5350
  call void @htab_clear_slot(%struct.htab* %28, i8** %29), !dbg !5351
  br label %if.end17, !dbg !5351

if.end17:                                         ; preds = %if.then16, %if.end13
  %30 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !5352
  %tobool18 = icmp ne %struct.htab* %30, null, !dbg !5352
  br i1 %tobool18, label %if.then19, label %if.end27, !dbg !5354

if.then19:                                        ; preds = %if.end17
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !5355, metadata !DIExpression()), !dbg !5357
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5358
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %31, i32 0, i32 0, !dbg !5358
  %32 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5358
  %call20 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %32), !dbg !5358
  store %union.tree_node* %call20, %union.tree_node** %name, align 8, !dbg !5357
  %33 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !5359
  %34 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5360
  %35 = bitcast %union.tree_node* %34 to i8*, !dbg !5360
  %36 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !5361
  %call21 = call i32 @decl_assembler_name_hash(%union.tree_node* %36), !dbg !5362
  %call22 = call i8** @htab_find_slot_with_hash(%struct.htab* %33, i8* %35, i32 %call21, i32 0), !dbg !5363
  store i8** %call22, i8*** %slot, align 8, !dbg !5364
  %37 = load i8**, i8*** %slot, align 8, !dbg !5365
  %tobool23 = icmp ne i8** %37, null, !dbg !5365
  br i1 %tobool23, label %land.lhs.true, label %if.end26, !dbg !5367

land.lhs.true:                                    ; preds = %if.then19
  %38 = load i8**, i8*** %slot, align 8, !dbg !5368
  %39 = load i8*, i8** %38, align 8, !dbg !5369
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5370
  %41 = bitcast %struct.cgraph_node* %40 to i8*, !dbg !5370
  %cmp24 = icmp eq i8* %39, %41, !dbg !5371
  br i1 %cmp24, label %if.then25, label %if.end26, !dbg !5372

if.then25:                                        ; preds = %land.lhs.true
  %42 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !5373
  %43 = load i8**, i8*** %slot, align 8, !dbg !5374
  call void @htab_clear_slot(%struct.htab* %42, i8** %43), !dbg !5375
  br label %if.end26, !dbg !5375

if.end26:                                         ; preds = %if.then25, %land.lhs.true, %if.then19
  br label %if.end27, !dbg !5376

if.end27:                                         ; preds = %if.end26, %if.end17
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5377
  %45 = bitcast %struct.cgraph_node* %44 to i8*, !dbg !5378
  call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 312, i1 false), !dbg !5378
  %46 = load i32, i32* %uid, align 4, !dbg !5379
  %47 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5380
  %uid28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %47, i32 0, i32 24, !dbg !5381
  store i32 %46, i32* %uid28, align 8, !dbg !5382
  %48 = load %struct.cgraph_node*, %struct.cgraph_node** @free_nodes, align 8, !dbg !5383
  %49 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5384
  %next29 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %49, i32 0, i32 3, !dbg !5384
  store %struct.cgraph_node* %48, %struct.cgraph_node** %next29, align 8, !dbg !5385
  %50 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5386
  store %struct.cgraph_node* %50, %struct.cgraph_node** @free_nodes, align 8, !dbg !5387
  ret void, !dbg !5388
}

declare dso_local void @htab_clear_slot(%struct.htab*, i8**) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_call_node_removal_hooks(%struct.cgraph_node* %node) #0 !dbg !5389 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %entry1 = alloca %struct.cgraph_node_hook_list*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5390, metadata !DIExpression()), !dbg !5391
  call void @llvm.dbg.declare(metadata %struct.cgraph_node_hook_list** %entry1, metadata !5392, metadata !DIExpression()), !dbg !5393
  %0 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** @first_cgraph_node_removal_hook, align 8, !dbg !5394
  store %struct.cgraph_node_hook_list* %0, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !5393
  br label %while.cond, !dbg !5395

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !5396
  %tobool = icmp ne %struct.cgraph_node_hook_list* %1, null, !dbg !5395
  br i1 %tobool, label %while.body, label %while.end, !dbg !5395

while.body:                                       ; preds = %while.cond
  %2 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !5397
  %hook = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %2, i32 0, i32 0, !dbg !5399
  %3 = load void (%struct.cgraph_node*, i8*)*, void (%struct.cgraph_node*, i8*)** %hook, align 8, !dbg !5399
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5400
  %5 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !5401
  %data = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %5, i32 0, i32 1, !dbg !5402
  %6 = load i8*, i8** %data, align 8, !dbg !5402
  call void %3(%struct.cgraph_node* %4, i8* %6), !dbg !5397
  %7 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !5403
  %next = getelementptr inbounds %struct.cgraph_node_hook_list, %struct.cgraph_node_hook_list* %7, i32 0, i32 2, !dbg !5404
  %8 = load %struct.cgraph_node_hook_list*, %struct.cgraph_node_hook_list** %next, align 8, !dbg !5404
  store %struct.cgraph_node_hook_list* %8, %struct.cgraph_node_hook_list** %entry1, align 8, !dbg !5405
  br label %while.cond, !dbg !5395, !llvm.loop !5406

while.end:                                        ; preds = %while.cond
  ret void, !dbg !5408
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_node_remove_callers(%struct.cgraph_node* %node) #0 !dbg !5409 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %f = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5410, metadata !DIExpression()), !dbg !5411
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !5412, metadata !DIExpression()), !dbg !5413
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %f, metadata !5414, metadata !DIExpression()), !dbg !5415
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5416
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 2, !dbg !5418
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !5418
  store %struct.cgraph_edge* %1, %struct.cgraph_edge** %e, align 8, !dbg !5419
  br label %for.cond, !dbg !5420

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5421
  %tobool = icmp ne %struct.cgraph_edge* %2, null, !dbg !5423
  br i1 %tobool, label %for.body, label %for.end, !dbg !5423

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5424
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 4, !dbg !5426
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !5426
  store %struct.cgraph_edge* %4, %struct.cgraph_edge** %f, align 8, !dbg !5427
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5428
  call void @cgraph_call_edge_removal_hooks(%struct.cgraph_edge* %5), !dbg !5429
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5430
  call void @cgraph_edge_remove_caller(%struct.cgraph_edge* %6), !dbg !5431
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5432
  call void @cgraph_free_edge(%struct.cgraph_edge* %7), !dbg !5433
  br label %for.inc, !dbg !5434

for.inc:                                          ; preds = %for.body
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %f, align 8, !dbg !5435
  store %struct.cgraph_edge* %8, %struct.cgraph_edge** %e, align 8, !dbg !5436
  br label %for.cond, !dbg !5437, !llvm.loop !5438

for.end:                                          ; preds = %for.cond
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5440
  %callers1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 2, !dbg !5441
  store %struct.cgraph_edge* null, %struct.cgraph_edge** %callers1, align 8, !dbg !5442
  ret void, !dbg !5443
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_remove_node_and_inline_clones(%struct.cgraph_node* %node) #0 !dbg !5444 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %next = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5445, metadata !DIExpression()), !dbg !5446
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !5447, metadata !DIExpression()), !dbg !5448
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %next, metadata !5449, metadata !DIExpression()), !dbg !5450
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5451
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 1, !dbg !5453
  %1 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !5453
  store %struct.cgraph_edge* %1, %struct.cgraph_edge** %e, align 8, !dbg !5454
  br label %for.cond, !dbg !5455

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5456
  %tobool = icmp ne %struct.cgraph_edge* %2, null, !dbg !5458
  br i1 %tobool, label %for.body, label %for.end, !dbg !5458

for.body:                                         ; preds = %for.cond
  %3 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5459
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %3, i32 0, i32 6, !dbg !5461
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !5461
  store %struct.cgraph_edge* %4, %struct.cgraph_edge** %next, align 8, !dbg !5462
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5463
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %5, i32 0, i32 9, !dbg !5465
  %6 = load i32, i32* %inline_failed, align 8, !dbg !5465
  %tobool1 = icmp ne i32 %6, 0, !dbg !5463
  br i1 %tobool1, label %if.end, label %if.then, !dbg !5466

if.then:                                          ; preds = %for.body
  %7 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !5467
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %7, i32 0, i32 2, !dbg !5468
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !5468
  call void @cgraph_remove_node_and_inline_clones(%struct.cgraph_node* %8), !dbg !5469
  br label %if.end, !dbg !5469

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5470

for.inc:                                          ; preds = %if.end
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next, align 8, !dbg !5471
  store %struct.cgraph_edge* %9, %struct.cgraph_edge** %e, align 8, !dbg !5472
  br label %for.cond, !dbg !5473, !llvm.loop !5474

for.end:                                          ; preds = %for.cond
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5476
  call void @cgraph_remove_node(%struct.cgraph_node* %10), !dbg !5477
  ret void, !dbg !5478
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_mark_reachable_node(%struct.cgraph_node* %node) #0 !dbg !5479 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5480, metadata !DIExpression()), !dbg !5481
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5482
  %reachable = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 27, !dbg !5484
  %bf.load = load i16, i16* %reachable, align 4, !dbg !5484
  %bf.lshr = lshr i16 %bf.load, 3, !dbg !5484
  %bf.clear = and i16 %bf.lshr, 1, !dbg !5484
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5484
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !5482
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !5485

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5486
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 18, !dbg !5487
  %finalized = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !5488
  %bf.load1 = load i8, i8* %finalized, align 8, !dbg !5488
  %bf.lshr2 = lshr i8 %bf.load1, 2, !dbg !5488
  %bf.clear3 = and i8 %bf.lshr2, 1, !dbg !5488
  %bf.cast4 = zext i8 %bf.clear3 to i32, !dbg !5488
  %tobool5 = icmp ne i32 %bf.cast4, 0, !dbg !5486
  br i1 %tobool5, label %if.then, label %if.end, !dbg !5489

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5490
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 0, !dbg !5492
  %3 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5492
  call void @notice_global_symbol(%union.tree_node* %3), !dbg !5493
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5494
  %reachable6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 27, !dbg !5495
  %bf.load7 = load i16, i16* %reachable6, align 4, !dbg !5496
  %bf.clear8 = and i16 %bf.load7, -9, !dbg !5496
  %bf.set = or i16 %bf.clear8, 8, !dbg !5496
  store i16 %bf.set, i16* %reachable6, align 4, !dbg !5496
  %5 = load i8, i8* @cgraph_global_info_ready, align 1, !dbg !5497
  %tobool9 = icmp ne i8 %5, 0, !dbg !5497
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !5497

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1526, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5497
  br label %cond.end, !dbg !5497

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !5497

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5497
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes_queue, align 8, !dbg !5498
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5499
  %next_needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 8, !dbg !5500
  store %struct.cgraph_node* %6, %struct.cgraph_node** %next_needed, align 8, !dbg !5501
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5502
  store %struct.cgraph_node* %8, %struct.cgraph_node** @cgraph_nodes_queue, align 8, !dbg !5503
  br label %if.end, !dbg !5504

if.end:                                           ; preds = %cond.end, %land.lhs.true, %entry
  ret void, !dbg !5505
}

declare dso_local void @notice_global_symbol(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_mark_needed_node(%struct.cgraph_node* %node) #0 !dbg !5506 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5507, metadata !DIExpression()), !dbg !5508
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5509
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 27, !dbg !5510
  %bf.load = load i16, i16* %needed, align 4, !dbg !5511
  %bf.clear = and i16 %bf.load, -2, !dbg !5511
  %bf.set = or i16 %bf.clear, 1, !dbg !5511
  store i16 %bf.set, i16* %needed, align 4, !dbg !5511
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5512
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 19, !dbg !5512
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !5512
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !5512
  %tobool = icmp ne %struct.cgraph_node* %2, null, !dbg !5512
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5512

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1540, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5512
  br label %cond.end, !dbg !5512

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5512

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5512
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5513
  call void @cgraph_mark_reachable_node(%struct.cgraph_node* %3), !dbg !5514
  ret void, !dbg !5515
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_mark_address_taken_node(%struct.cgraph_node* %node) #0 !dbg !5516 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5517, metadata !DIExpression()), !dbg !5518
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5519
  %address_taken = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 27, !dbg !5520
  %bf.load = load i16, i16* %address_taken, align 4, !dbg !5521
  %bf.clear = and i16 %bf.load, -3, !dbg !5521
  %bf.set = or i16 %bf.clear, 2, !dbg !5521
  store i16 %bf.set, i16* %address_taken, align 4, !dbg !5521
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5522
  call void @cgraph_mark_needed_node(%struct.cgraph_node* %1), !dbg !5523
  ret void, !dbg !5524
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_local_info* @cgraph_local_info(%union.tree_node* %decl) #0 !dbg !5525 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5529, metadata !DIExpression()), !dbg !5530
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5531, metadata !DIExpression()), !dbg !5532
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5533
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5533
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5533
  %bf.load = load i64, i64* %1, align 8, !dbg !5533
  %bf.clear = and i64 %bf.load, 65535, !dbg !5533
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5533
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !5533
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5533

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1560, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5533
  br label %cond.end, !dbg !5533

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5533

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5533
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5534
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %2), !dbg !5535
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !5536
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5537
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 18, !dbg !5538
  ret %struct.cgraph_local_info* %local, !dbg !5539
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_global_info* @cgraph_global_info(%union.tree_node* %decl) #0 !dbg !5540 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5544, metadata !DIExpression()), !dbg !5545
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5546, metadata !DIExpression()), !dbg !5547
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5548
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5548
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5548
  %bf.load = load i64, i64* %1, align 8, !dbg !5548
  %bf.clear = and i64 %bf.load, 65535, !dbg !5548
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5548
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !5548
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !5548

land.lhs.true:                                    ; preds = %entry
  %2 = load i8, i8* @cgraph_global_info_ready, align 1, !dbg !5548
  %conv = zext i8 %2 to i32, !dbg !5548
  %tobool = icmp ne i32 %conv, 0, !dbg !5548
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5548

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1572, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5548
  br label %cond.end, !dbg !5548

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !5548

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5548
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5549
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %3), !dbg !5550
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !5551
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5552
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 19, !dbg !5553
  ret %struct.cgraph_global_info* %global, !dbg !5554
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_rtl_info* @cgraph_rtl_info(%union.tree_node* %decl) #0 !dbg !5555 {
entry:
  %retval = alloca %struct.cgraph_rtl_info*, align 8
  %decl.addr = alloca %union.tree_node*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !5559, metadata !DIExpression()), !dbg !5560
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !5561, metadata !DIExpression()), !dbg !5562
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5563
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5563
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5563
  %bf.load = load i64, i64* %1, align 8, !dbg !5563
  %bf.clear = and i64 %bf.load, 65535, !dbg !5563
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5563
  %cmp = icmp eq i32 %bf.cast, 29, !dbg !5563
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5563

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1584, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5563
  br label %cond.end, !dbg !5563

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5563

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5563
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5564
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %2), !dbg !5565
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !5566
  %3 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !5567
  %4 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !5569
  %cmp1 = icmp ne %union.tree_node* %3, %4, !dbg !5570
  br i1 %cmp1, label %land.lhs.true, label %if.end, !dbg !5571

land.lhs.true:                                    ; preds = %cond.end
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5572
  %decl2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 0, !dbg !5572
  %6 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !5572
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !5572
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !5572
  %bf.load4 = load i64, i64* %7, align 8, !dbg !5572
  %bf.lshr = lshr i64 %bf.load4, 22, !dbg !5572
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !5572
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !5572
  %tobool = icmp ne i32 %bf.cast6, 0, !dbg !5572
  br i1 %tobool, label %if.end, label %if.then, !dbg !5573

if.then:                                          ; preds = %land.lhs.true
  store %struct.cgraph_rtl_info* null, %struct.cgraph_rtl_info** %retval, align 8, !dbg !5574
  br label %return, !dbg !5574

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !5575
  %rtl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 20, !dbg !5576
  store %struct.cgraph_rtl_info* %rtl, %struct.cgraph_rtl_info** %retval, align 8, !dbg !5577
  br label %return, !dbg !5577

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.cgraph_rtl_info*, %struct.cgraph_rtl_info** %retval, align 8, !dbg !5578
  ret %struct.cgraph_rtl_info* %9, !dbg !5578
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @cgraph_inline_failed_string(i32 %reason) #0 !dbg !2731 {
entry:
  %reason.addr = alloca i32, align 4
  store i32 %reason, i32* %reason.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reason.addr, metadata !5579, metadata !DIExpression()), !dbg !5580
  %0 = load i32, i32* %reason.addr, align 4, !dbg !5581
  %cmp = icmp ult i32 %0, 19, !dbg !5581
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5581

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1606, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5581
  br label %cond.end, !dbg !5581

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5581

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5581
  %1 = load i32, i32* %reason.addr, align 4, !dbg !5582
  %idxprom = zext i32 %1 to i64, !dbg !5583
  %arrayidx = getelementptr inbounds [19 x i8*], [19 x i8*]* @cgraph_inline_failed_string.cif_string_table, i64 0, i64 %idxprom, !dbg !5583
  %2 = load i8*, i8** %arrayidx, align 8, !dbg !5583
  ret i8* %2, !dbg !5584
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @cgraph_node_name(%struct.cgraph_node* %node) #0 !dbg !5585 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5588, metadata !DIExpression()), !dbg !5589
  %0 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !5590
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5591
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !5592
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5592
  %call = call i8* %0(%union.tree_node* %2, i32 2), !dbg !5593
  ret i8* %call, !dbg !5594
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_cgraph_node(%struct._IO_FILE* %f, %struct.cgraph_node* %node) #0 !dbg !5595 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %node.addr = alloca %struct.cgraph_node*, align 8
  %edge = alloca %struct.cgraph_edge*, align 8
  %n = alloca %struct.cgraph_node*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !5648, metadata !DIExpression()), !dbg !5649
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !5650, metadata !DIExpression()), !dbg !5651
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge, metadata !5652, metadata !DIExpression()), !dbg !5653
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5654
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5655
  %call = call i8* @cgraph_node_name(%struct.cgraph_node* %1), !dbg !5656
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5657
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 24, !dbg !5658
  %3 = load i32, i32* %uid, align 8, !dbg !5658
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5659
  %pid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 26, !dbg !5660
  %5 = load i32, i32* %pid, align 8, !dbg !5660
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.25, i64 0, i64 0), i8* %call, i32 %3, i32 %5), !dbg !5661
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5662
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5663
  %8 = bitcast %struct.cgraph_node* %7 to i8*, !dbg !5664
  call void @dump_addr(%struct._IO_FILE* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i64 0, i64 0), i8* %8), !dbg !5665
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5666
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 19, !dbg !5668
  %inlined_to = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global, i32 0, i32 2, !dbg !5669
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to, align 8, !dbg !5669
  %tobool = icmp ne %struct.cgraph_node* %10, null, !dbg !5666
  br i1 %tobool, label %if.then, label %if.end, !dbg !5670

if.then:                                          ; preds = %entry
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5671
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5672
  %global2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 19, !dbg !5673
  %inlined_to3 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global2, i32 0, i32 2, !dbg !5674
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to3, align 8, !dbg !5674
  %call4 = call i8* @cgraph_node_name(%struct.cgraph_node* %13), !dbg !5675
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5676
  %global5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 19, !dbg !5677
  %inlined_to6 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global5, i32 0, i32 2, !dbg !5678
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %inlined_to6, align 8, !dbg !5678
  %uid7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 24, !dbg !5679
  %16 = load i32, i32* %uid7, align 8, !dbg !5679
  %call8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.27, i64 0, i64 0), i8* %call4, i32 %16), !dbg !5680
  br label %if.end, !dbg !5680

if.end:                                           ; preds = %if.then, %entry
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5681
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 12, !dbg !5683
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !5683
  %tobool9 = icmp ne %struct.cgraph_node* %18, null, !dbg !5681
  br i1 %tobool9, label %if.then10, label %if.end16, !dbg !5684

if.then10:                                        ; preds = %if.end
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5685
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5686
  %clone_of11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 12, !dbg !5687
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of11, align 8, !dbg !5687
  %call12 = call i8* @cgraph_node_name(%struct.cgraph_node* %21), !dbg !5688
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5689
  %clone_of13 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 12, !dbg !5690
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of13, align 8, !dbg !5690
  %uid14 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 24, !dbg !5691
  %24 = load i32, i32* %uid14, align 8, !dbg !5691
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i64 0, i64 0), i8* %call12, i32 %24), !dbg !5692
  br label %if.end16, !dbg !5692

if.end16:                                         ; preds = %if.then10, %if.end
  %25 = load i8, i8* @cgraph_function_flags_ready, align 1, !dbg !5693
  %tobool17 = icmp ne i8 %25, 0, !dbg !5693
  br i1 %tobool17, label %if.then18, label %if.end21, !dbg !5695

if.then18:                                        ; preds = %if.end16
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5696
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5697
  %call19 = call i32 @cgraph_function_body_availability(%struct.cgraph_node* %27), !dbg !5698
  %idxprom = zext i32 %call19 to i64, !dbg !5699
  %arrayidx = getelementptr inbounds [5 x i8*], [5 x i8*]* @cgraph_availability_names, i64 0, i64 %idxprom, !dbg !5699
  %28 = load i8*, i8** %arrayidx, align 8, !dbg !5699
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.29, i64 0, i64 0), i8* %28), !dbg !5700
  br label %if.end21, !dbg !5700

if.end21:                                         ; preds = %if.then18, %if.end16
  %29 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5701
  %count = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %29, i32 0, i32 23, !dbg !5703
  %30 = load i64, i64* %count, align 8, !dbg !5703
  %tobool22 = icmp ne i64 %30, 0, !dbg !5701
  br i1 %tobool22, label %if.then23, label %if.end26, !dbg !5704

if.then23:                                        ; preds = %if.end21
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5705
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5706
  %count24 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 23, !dbg !5707
  %33 = load i64, i64* %count24, align 8, !dbg !5707
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.30, i64 0, i64 0), i64 %33), !dbg !5708
  br label %if.end26, !dbg !5708

if.end26:                                         ; preds = %if.then23, %if.end21
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5709
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %34, i32 0, i32 18, !dbg !5711
  %inline_summary = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 1, !dbg !5712
  %self_time = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %inline_summary, i32 0, i32 3, !dbg !5713
  %35 = load i32, i32* %self_time, align 8, !dbg !5713
  %tobool27 = icmp ne i32 %35, 0, !dbg !5709
  br i1 %tobool27, label %if.then28, label %if.end35, !dbg !5714

if.then28:                                        ; preds = %if.end26
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5715
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5716
  %local29 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 18, !dbg !5717
  %inline_summary30 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local29, i32 0, i32 1, !dbg !5718
  %self_time31 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %inline_summary30, i32 0, i32 3, !dbg !5719
  %38 = load i32, i32* %self_time31, align 8, !dbg !5719
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5720
  %local32 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %39, i32 0, i32 18, !dbg !5721
  %inline_summary33 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local32, i32 0, i32 1, !dbg !5722
  %time_inlining_benefit = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %inline_summary33, i32 0, i32 4, !dbg !5723
  %40 = load i32, i32* %time_inlining_benefit, align 4, !dbg !5723
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.31, i64 0, i64 0), i32 %38, i32 %40), !dbg !5724
  br label %if.end35, !dbg !5724

if.end35:                                         ; preds = %if.then28, %if.end26
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5725
  %global36 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %41, i32 0, i32 19, !dbg !5727
  %time = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global36, i32 0, i32 3, !dbg !5728
  %42 = load i32, i32* %time, align 8, !dbg !5728
  %tobool37 = icmp ne i32 %42, 0, !dbg !5725
  br i1 %tobool37, label %land.lhs.true, label %if.end47, !dbg !5729

land.lhs.true:                                    ; preds = %if.end35
  %43 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5730
  %global38 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %43, i32 0, i32 19, !dbg !5731
  %time39 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global38, i32 0, i32 3, !dbg !5732
  %44 = load i32, i32* %time39, align 8, !dbg !5732
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5733
  %local40 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %45, i32 0, i32 18, !dbg !5734
  %inline_summary41 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local40, i32 0, i32 1, !dbg !5735
  %self_time42 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %inline_summary41, i32 0, i32 3, !dbg !5736
  %46 = load i32, i32* %self_time42, align 8, !dbg !5736
  %cmp = icmp ne i32 %44, %46, !dbg !5737
  br i1 %cmp, label %if.then43, label %if.end47, !dbg !5738

if.then43:                                        ; preds = %land.lhs.true
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5739
  %48 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5740
  %global44 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %48, i32 0, i32 19, !dbg !5741
  %time45 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global44, i32 0, i32 3, !dbg !5742
  %49 = load i32, i32* %time45, align 8, !dbg !5742
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i64 0, i64 0), i32 %49), !dbg !5743
  br label %if.end47, !dbg !5743

if.end47:                                         ; preds = %if.then43, %land.lhs.true, %if.end35
  %50 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5744
  %local48 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %50, i32 0, i32 18, !dbg !5746
  %inline_summary49 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local48, i32 0, i32 1, !dbg !5747
  %self_size = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %inline_summary49, i32 0, i32 1, !dbg !5748
  %51 = load i32, i32* %self_size, align 8, !dbg !5748
  %tobool50 = icmp ne i32 %51, 0, !dbg !5744
  br i1 %tobool50, label %if.then51, label %if.end58, !dbg !5749

if.then51:                                        ; preds = %if.end47
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5750
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5751
  %local52 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %53, i32 0, i32 18, !dbg !5752
  %inline_summary53 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local52, i32 0, i32 1, !dbg !5753
  %self_size54 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %inline_summary53, i32 0, i32 1, !dbg !5754
  %54 = load i32, i32* %self_size54, align 8, !dbg !5754
  %55 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5755
  %local55 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %55, i32 0, i32 18, !dbg !5756
  %inline_summary56 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local55, i32 0, i32 1, !dbg !5757
  %size_inlining_benefit = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %inline_summary56, i32 0, i32 2, !dbg !5758
  %56 = load i32, i32* %size_inlining_benefit, align 4, !dbg !5758
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.33, i64 0, i64 0), i32 %54, i32 %56), !dbg !5759
  br label %if.end58, !dbg !5759

if.end58:                                         ; preds = %if.then51, %if.end47
  %57 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5760
  %global59 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %57, i32 0, i32 19, !dbg !5762
  %size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global59, i32 0, i32 4, !dbg !5763
  %58 = load i32, i32* %size, align 4, !dbg !5763
  %tobool60 = icmp ne i32 %58, 0, !dbg !5760
  br i1 %tobool60, label %land.lhs.true61, label %if.end72, !dbg !5764

land.lhs.true61:                                  ; preds = %if.end58
  %59 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5765
  %global62 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %59, i32 0, i32 19, !dbg !5766
  %size63 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global62, i32 0, i32 4, !dbg !5767
  %60 = load i32, i32* %size63, align 4, !dbg !5767
  %61 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5768
  %local64 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %61, i32 0, i32 18, !dbg !5769
  %inline_summary65 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local64, i32 0, i32 1, !dbg !5770
  %self_size66 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %inline_summary65, i32 0, i32 1, !dbg !5771
  %62 = load i32, i32* %self_size66, align 8, !dbg !5771
  %cmp67 = icmp ne i32 %60, %62, !dbg !5772
  br i1 %cmp67, label %if.then68, label %if.end72, !dbg !5773

if.then68:                                        ; preds = %land.lhs.true61
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5774
  %64 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5775
  %global69 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %64, i32 0, i32 19, !dbg !5776
  %size70 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global69, i32 0, i32 4, !dbg !5777
  %65 = load i32, i32* %size70, align 4, !dbg !5777
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.32, i64 0, i64 0), i32 %65), !dbg !5778
  br label %if.end72, !dbg !5778

if.end72:                                         ; preds = %if.then68, %land.lhs.true61, %if.end58
  %66 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5779
  %local73 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %66, i32 0, i32 18, !dbg !5781
  %inline_summary74 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local73, i32 0, i32 1, !dbg !5782
  %estimated_self_stack_size = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %inline_summary74, i32 0, i32 0, !dbg !5783
  %67 = load i64, i64* %estimated_self_stack_size, align 8, !dbg !5783
  %tobool75 = icmp ne i64 %67, 0, !dbg !5779
  br i1 %tobool75, label %if.then76, label %if.end81, !dbg !5784

if.then76:                                        ; preds = %if.end72
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5785
  %69 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5786
  %local77 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %69, i32 0, i32 18, !dbg !5787
  %inline_summary78 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local77, i32 0, i32 1, !dbg !5788
  %estimated_self_stack_size79 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %inline_summary78, i32 0, i32 0, !dbg !5789
  %70 = load i64, i64* %estimated_self_stack_size79, align 8, !dbg !5789
  %conv = trunc i64 %70 to i32, !dbg !5790
  %call80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %68, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.34, i64 0, i64 0), i32 %conv), !dbg !5791
  br label %if.end81, !dbg !5791

if.end81:                                         ; preds = %if.then76, %if.end72
  %71 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5792
  %global82 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %71, i32 0, i32 19, !dbg !5794
  %estimated_stack_size = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global82, i32 0, i32 0, !dbg !5795
  %72 = load i64, i64* %estimated_stack_size, align 8, !dbg !5795
  %73 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5796
  %local83 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %73, i32 0, i32 18, !dbg !5797
  %inline_summary84 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local83, i32 0, i32 1, !dbg !5798
  %estimated_self_stack_size85 = getelementptr inbounds %struct.inline_summary, %struct.inline_summary* %inline_summary84, i32 0, i32 0, !dbg !5799
  %74 = load i64, i64* %estimated_self_stack_size85, align 8, !dbg !5799
  %cmp86 = icmp ne i64 %72, %74, !dbg !5800
  br i1 %cmp86, label %if.then88, label %if.end93, !dbg !5801

if.then88:                                        ; preds = %if.end81
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5802
  %76 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5803
  %global89 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %76, i32 0, i32 19, !dbg !5804
  %estimated_stack_size90 = getelementptr inbounds %struct.cgraph_global_info, %struct.cgraph_global_info* %global89, i32 0, i32 0, !dbg !5805
  %77 = load i64, i64* %estimated_stack_size90, align 8, !dbg !5805
  %conv91 = trunc i64 %77 to i32, !dbg !5806
  %call92 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.35, i64 0, i64 0), i32 %conv91), !dbg !5807
  br label %if.end93, !dbg !5807

if.end93:                                         ; preds = %if.then88, %if.end81
  %78 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5808
  %origin = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %78, i32 0, i32 5, !dbg !5810
  %79 = load %struct.cgraph_node*, %struct.cgraph_node** %origin, align 8, !dbg !5810
  %tobool94 = icmp ne %struct.cgraph_node* %79, null, !dbg !5808
  br i1 %tobool94, label %if.then95, label %if.end99, !dbg !5811

if.then95:                                        ; preds = %if.end93
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5812
  %81 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5813
  %origin96 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %81, i32 0, i32 5, !dbg !5814
  %82 = load %struct.cgraph_node*, %struct.cgraph_node** %origin96, align 8, !dbg !5814
  %call97 = call i8* @cgraph_node_name(%struct.cgraph_node* %82), !dbg !5815
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %80, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.36, i64 0, i64 0), i8* %call97), !dbg !5816
  br label %if.end99, !dbg !5816

if.end99:                                         ; preds = %if.then95, %if.end93
  %83 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5817
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %83, i32 0, i32 27, !dbg !5819
  %bf.load = load i16, i16* %needed, align 4, !dbg !5819
  %bf.clear = and i16 %bf.load, 1, !dbg !5819
  %bf.cast = zext i16 %bf.clear to i32, !dbg !5819
  %tobool100 = icmp ne i32 %bf.cast, 0, !dbg !5817
  br i1 %tobool100, label %if.then101, label %if.end103, !dbg !5820

if.then101:                                       ; preds = %if.end99
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5821
  %call102 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.37, i64 0, i64 0)), !dbg !5822
  br label %if.end103, !dbg !5822

if.end103:                                        ; preds = %if.then101, %if.end99
  %85 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5823
  %address_taken = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %85, i32 0, i32 27, !dbg !5825
  %bf.load104 = load i16, i16* %address_taken, align 4, !dbg !5825
  %bf.lshr = lshr i16 %bf.load104, 1, !dbg !5825
  %bf.clear105 = and i16 %bf.lshr, 1, !dbg !5825
  %bf.cast106 = zext i16 %bf.clear105 to i32, !dbg !5825
  %tobool107 = icmp ne i32 %bf.cast106, 0, !dbg !5823
  br i1 %tobool107, label %if.then108, label %if.else, !dbg !5826

if.then108:                                       ; preds = %if.end103
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5827
  %call109 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.38, i64 0, i64 0)), !dbg !5828
  br label %if.end118, !dbg !5828

if.else:                                          ; preds = %if.end103
  %87 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5829
  %reachable = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %87, i32 0, i32 27, !dbg !5831
  %bf.load110 = load i16, i16* %reachable, align 4, !dbg !5831
  %bf.lshr111 = lshr i16 %bf.load110, 3, !dbg !5831
  %bf.clear112 = and i16 %bf.lshr111, 1, !dbg !5831
  %bf.cast113 = zext i16 %bf.clear112 to i32, !dbg !5831
  %tobool114 = icmp ne i32 %bf.cast113, 0, !dbg !5829
  br i1 %tobool114, label %if.then115, label %if.end117, !dbg !5832

if.then115:                                       ; preds = %if.else
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5833
  %call116 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i64 0, i64 0)), !dbg !5834
  br label %if.end117, !dbg !5834

if.end117:                                        ; preds = %if.then115, %if.else
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.then108
  %89 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5835
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %89, i32 0, i32 0, !dbg !5837
  %90 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5837
  %call119 = call zeroext i8 @gimple_has_body_p(%union.tree_node* %90), !dbg !5838
  %tobool120 = icmp ne i8 %call119, 0, !dbg !5838
  br i1 %tobool120, label %if.then121, label %if.end123, !dbg !5839

if.then121:                                       ; preds = %if.end118
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5840
  %call122 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %91, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0)), !dbg !5841
  br label %if.end123, !dbg !5841

if.end123:                                        ; preds = %if.then121, %if.end118
  %92 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5842
  %process = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %92, i32 0, i32 27, !dbg !5844
  %bf.load124 = load i16, i16* %process, align 4, !dbg !5844
  %bf.lshr125 = lshr i16 %bf.load124, 6, !dbg !5844
  %bf.clear126 = and i16 %bf.lshr125, 1, !dbg !5844
  %bf.cast127 = zext i16 %bf.clear126 to i32, !dbg !5844
  %tobool128 = icmp ne i32 %bf.cast127, 0, !dbg !5842
  br i1 %tobool128, label %if.then129, label %if.end131, !dbg !5845

if.then129:                                       ; preds = %if.end123
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5846
  %call130 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %93, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.41, i64 0, i64 0)), !dbg !5847
  br label %if.end131, !dbg !5847

if.end131:                                        ; preds = %if.then129, %if.end123
  %94 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5848
  %local132 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %94, i32 0, i32 18, !dbg !5850
  %local133 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local132, i32 0, i32 2, !dbg !5851
  %bf.load134 = load i8, i8* %local133, align 8, !dbg !5851
  %bf.clear135 = and i8 %bf.load134, 1, !dbg !5851
  %bf.cast136 = zext i8 %bf.clear135 to i32, !dbg !5851
  %tobool137 = icmp ne i32 %bf.cast136, 0, !dbg !5848
  br i1 %tobool137, label %if.then138, label %if.end140, !dbg !5852

if.then138:                                       ; preds = %if.end131
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5853
  %call139 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %95, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.42, i64 0, i64 0)), !dbg !5854
  br label %if.end140, !dbg !5854

if.end140:                                        ; preds = %if.then138, %if.end131
  %96 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5855
  %local141 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %96, i32 0, i32 18, !dbg !5857
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local141, i32 0, i32 2, !dbg !5858
  %bf.load142 = load i8, i8* %externally_visible, align 8, !dbg !5858
  %bf.lshr143 = lshr i8 %bf.load142, 1, !dbg !5858
  %bf.clear144 = and i8 %bf.lshr143, 1, !dbg !5858
  %bf.cast145 = zext i8 %bf.clear144 to i32, !dbg !5858
  %tobool146 = icmp ne i32 %bf.cast145, 0, !dbg !5855
  br i1 %tobool146, label %if.then147, label %if.end149, !dbg !5859

if.then147:                                       ; preds = %if.end140
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5860
  %call148 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %97, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.43, i64 0, i64 0)), !dbg !5861
  br label %if.end149, !dbg !5861

if.end149:                                        ; preds = %if.then147, %if.end140
  %98 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5862
  %local150 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %98, i32 0, i32 18, !dbg !5864
  %finalized = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local150, i32 0, i32 2, !dbg !5865
  %bf.load151 = load i8, i8* %finalized, align 8, !dbg !5865
  %bf.lshr152 = lshr i8 %bf.load151, 2, !dbg !5865
  %bf.clear153 = and i8 %bf.lshr152, 1, !dbg !5865
  %bf.cast154 = zext i8 %bf.clear153 to i32, !dbg !5865
  %tobool155 = icmp ne i32 %bf.cast154, 0, !dbg !5862
  br i1 %tobool155, label %if.then156, label %if.end158, !dbg !5866

if.then156:                                       ; preds = %if.end149
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5867
  %call157 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %99, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.44, i64 0, i64 0)), !dbg !5868
  br label %if.end158, !dbg !5868

if.end158:                                        ; preds = %if.then156, %if.end149
  %100 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5869
  %local159 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %100, i32 0, i32 18, !dbg !5871
  %disregard_inline_limits = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local159, i32 0, i32 2, !dbg !5872
  %bf.load160 = load i8, i8* %disregard_inline_limits, align 8, !dbg !5872
  %bf.lshr161 = lshr i8 %bf.load160, 4, !dbg !5872
  %bf.clear162 = and i8 %bf.lshr161, 1, !dbg !5872
  %bf.cast163 = zext i8 %bf.clear162 to i32, !dbg !5872
  %tobool164 = icmp ne i32 %bf.cast163, 0, !dbg !5869
  br i1 %tobool164, label %if.then165, label %if.else167, !dbg !5873

if.then165:                                       ; preds = %if.end158
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5874
  %call166 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.45, i64 0, i64 0)), !dbg !5875
  br label %if.end177, !dbg !5875

if.else167:                                       ; preds = %if.end158
  %102 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5876
  %local168 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %102, i32 0, i32 18, !dbg !5878
  %inlinable = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local168, i32 0, i32 2, !dbg !5879
  %bf.load169 = load i8, i8* %inlinable, align 8, !dbg !5879
  %bf.lshr170 = lshr i8 %bf.load169, 3, !dbg !5879
  %bf.clear171 = and i8 %bf.lshr170, 1, !dbg !5879
  %bf.cast172 = zext i8 %bf.clear171 to i32, !dbg !5879
  %tobool173 = icmp ne i32 %bf.cast172, 0, !dbg !5876
  br i1 %tobool173, label %if.then174, label %if.end176, !dbg !5880

if.then174:                                       ; preds = %if.else167
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5881
  %call175 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %103, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i64 0, i64 0)), !dbg !5882
  br label %if.end176, !dbg !5882

if.end176:                                        ; preds = %if.then174, %if.else167
  br label %if.end177

if.end177:                                        ; preds = %if.end176, %if.then165
  %104 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5883
  %local178 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %104, i32 0, i32 18, !dbg !5885
  %redefined_extern_inline = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local178, i32 0, i32 2, !dbg !5886
  %bf.load179 = load i8, i8* %redefined_extern_inline, align 8, !dbg !5886
  %bf.lshr180 = lshr i8 %bf.load179, 5, !dbg !5886
  %bf.clear181 = and i8 %bf.lshr180, 1, !dbg !5886
  %bf.cast182 = zext i8 %bf.clear181 to i32, !dbg !5886
  %tobool183 = icmp ne i32 %bf.cast182, 0, !dbg !5883
  br i1 %tobool183, label %if.then184, label %if.end186, !dbg !5887

if.then184:                                       ; preds = %if.end177
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5888
  %call185 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %105, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.47, i64 0, i64 0)), !dbg !5889
  br label %if.end186, !dbg !5889

if.end186:                                        ; preds = %if.then184, %if.end177
  %106 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5890
  %decl187 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %106, i32 0, i32 0, !dbg !5890
  %107 = load %union.tree_node*, %union.tree_node** %decl187, align 8, !dbg !5890
  %base = bitcast %union.tree_node* %107 to %struct.tree_base*, !dbg !5890
  %108 = bitcast %struct.tree_base* %base to i64*, !dbg !5890
  %bf.load188 = load i64, i64* %108, align 8, !dbg !5890
  %bf.lshr189 = lshr i64 %bf.load188, 22, !dbg !5890
  %bf.clear190 = and i64 %bf.lshr189, 1, !dbg !5890
  %bf.cast191 = trunc i64 %bf.clear190 to i32, !dbg !5890
  %tobool192 = icmp ne i32 %bf.cast191, 0, !dbg !5890
  br i1 %tobool192, label %if.then193, label %if.end195, !dbg !5892

if.then193:                                       ; preds = %if.end186
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5893
  %call194 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %109, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i64 0, i64 0)), !dbg !5894
  br label %if.end195, !dbg !5894

if.end195:                                        ; preds = %if.then193, %if.end186
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5895
  %call196 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %110, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.49, i64 0, i64 0)), !dbg !5896
  %111 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5897
  %callers = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %111, i32 0, i32 2, !dbg !5899
  %112 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callers, align 8, !dbg !5899
  store %struct.cgraph_edge* %112, %struct.cgraph_edge** %edge, align 8, !dbg !5900
  br label %for.cond, !dbg !5901

for.cond:                                         ; preds = %for.inc, %if.end195
  %113 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5902
  %tobool197 = icmp ne %struct.cgraph_edge* %113, null, !dbg !5904
  br i1 %tobool197, label %for.body, label %for.end, !dbg !5904

for.body:                                         ; preds = %for.cond
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5905
  %115 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5907
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %115, i32 0, i32 1, !dbg !5908
  %116 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !5908
  %call198 = call i8* @cgraph_node_name(%struct.cgraph_node* %116), !dbg !5909
  %117 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5910
  %caller199 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %117, i32 0, i32 1, !dbg !5911
  %118 = load %struct.cgraph_node*, %struct.cgraph_node** %caller199, align 8, !dbg !5911
  %uid200 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %118, i32 0, i32 24, !dbg !5912
  %119 = load i32, i32* %uid200, align 8, !dbg !5912
  %call201 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %114, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.50, i64 0, i64 0), i8* %call198, i32 %119), !dbg !5913
  %120 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5914
  %count202 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %120, i32 0, i32 0, !dbg !5916
  %121 = load i64, i64* %count202, align 8, !dbg !5916
  %tobool203 = icmp ne i64 %121, 0, !dbg !5914
  br i1 %tobool203, label %if.then204, label %if.end207, !dbg !5917

if.then204:                                       ; preds = %for.body
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5918
  %123 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5919
  %count205 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %123, i32 0, i32 0, !dbg !5920
  %124 = load i64, i64* %count205, align 8, !dbg !5920
  %call206 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %122, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.51, i64 0, i64 0), i64 %124), !dbg !5921
  br label %if.end207, !dbg !5921

if.end207:                                        ; preds = %if.then204, %for.body
  %125 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5922
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %125, i32 0, i32 11, !dbg !5924
  %126 = load i32, i32* %frequency, align 8, !dbg !5924
  %tobool208 = icmp ne i32 %126, 0, !dbg !5922
  br i1 %tobool208, label %if.then209, label %if.end213, !dbg !5925

if.then209:                                       ; preds = %if.end207
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5926
  %128 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5927
  %frequency210 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %128, i32 0, i32 11, !dbg !5928
  %129 = load i32, i32* %frequency210, align 8, !dbg !5928
  %conv211 = sitofp i32 %129 to double, !dbg !5927
  %div = fdiv double %conv211, 1.000000e+03, !dbg !5929
  %call212 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %127, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.52, i64 0, i64 0), double %div), !dbg !5930
  br label %if.end213, !dbg !5930

if.end213:                                        ; preds = %if.then209, %if.end207
  %130 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5931
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %130, i32 0, i32 9, !dbg !5933
  %131 = load i32, i32* %inline_failed, align 8, !dbg !5933
  %tobool214 = icmp ne i32 %131, 0, !dbg !5931
  br i1 %tobool214, label %if.end217, label %if.then215, !dbg !5934

if.then215:                                       ; preds = %if.end213
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5935
  %call216 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %132, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i64 0, i64 0)), !dbg !5936
  br label %if.end217, !dbg !5936

if.end217:                                        ; preds = %if.then215, %if.end213
  %133 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5937
  %indirect_call = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %133, i32 0, i32 14, !dbg !5939
  %bf.load218 = load i8, i8* %indirect_call, align 2, !dbg !5939
  %bf.clear219 = and i8 %bf.load218, 1, !dbg !5939
  %bf.cast220 = zext i8 %bf.clear219 to i32, !dbg !5939
  %tobool221 = icmp ne i32 %bf.cast220, 0, !dbg !5937
  br i1 %tobool221, label %if.then222, label %if.end224, !dbg !5940

if.then222:                                       ; preds = %if.end217
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5941
  %call223 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.54, i64 0, i64 0)), !dbg !5942
  br label %if.end224, !dbg !5942

if.end224:                                        ; preds = %if.then222, %if.end217
  %135 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5943
  %can_throw_external = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %135, i32 0, i32 14, !dbg !5945
  %bf.load225 = load i8, i8* %can_throw_external, align 2, !dbg !5945
  %bf.lshr226 = lshr i8 %bf.load225, 2, !dbg !5945
  %bf.clear227 = and i8 %bf.lshr226, 1, !dbg !5945
  %bf.cast228 = zext i8 %bf.clear227 to i32, !dbg !5945
  %tobool229 = icmp ne i32 %bf.cast228, 0, !dbg !5943
  br i1 %tobool229, label %if.then230, label %if.end232, !dbg !5946

if.then230:                                       ; preds = %if.end224
  %136 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5947
  %call231 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %136, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.55, i64 0, i64 0)), !dbg !5948
  br label %if.end232, !dbg !5948

if.end232:                                        ; preds = %if.then230, %if.end224
  br label %for.inc, !dbg !5949

for.inc:                                          ; preds = %if.end232
  %137 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5950
  %next_caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %137, i32 0, i32 4, !dbg !5951
  %138 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_caller, align 8, !dbg !5951
  store %struct.cgraph_edge* %138, %struct.cgraph_edge** %edge, align 8, !dbg !5952
  br label %for.cond, !dbg !5953, !llvm.loop !5954

for.end:                                          ; preds = %for.cond
  %139 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5956
  %call233 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %139, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.56, i64 0, i64 0)), !dbg !5957
  %140 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !5958
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %140, i32 0, i32 1, !dbg !5960
  %141 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !5960
  store %struct.cgraph_edge* %141, %struct.cgraph_edge** %edge, align 8, !dbg !5961
  br label %for.cond234, !dbg !5962

for.cond234:                                      ; preds = %for.inc283, %for.end
  %142 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5963
  %tobool235 = icmp ne %struct.cgraph_edge* %142, null, !dbg !5965
  br i1 %tobool235, label %for.body236, label %for.end284, !dbg !5965

for.body236:                                      ; preds = %for.cond234
  %143 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5966
  %144 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5968
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %144, i32 0, i32 2, !dbg !5969
  %145 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !5969
  %call237 = call i8* @cgraph_node_name(%struct.cgraph_node* %145), !dbg !5970
  %146 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5971
  %callee238 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %146, i32 0, i32 2, !dbg !5972
  %147 = load %struct.cgraph_node*, %struct.cgraph_node** %callee238, align 8, !dbg !5972
  %uid239 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %147, i32 0, i32 24, !dbg !5973
  %148 = load i32, i32* %uid239, align 8, !dbg !5973
  %call240 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %143, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.50, i64 0, i64 0), i8* %call237, i32 %148), !dbg !5974
  %149 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5975
  %inline_failed241 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %149, i32 0, i32 9, !dbg !5977
  %150 = load i32, i32* %inline_failed241, align 8, !dbg !5977
  %tobool242 = icmp ne i32 %150, 0, !dbg !5975
  br i1 %tobool242, label %if.end245, label %if.then243, !dbg !5978

if.then243:                                       ; preds = %for.body236
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5979
  %call244 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %151, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i64 0, i64 0)), !dbg !5980
  br label %if.end245, !dbg !5980

if.end245:                                        ; preds = %if.then243, %for.body236
  %152 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5981
  %indirect_call246 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %152, i32 0, i32 14, !dbg !5983
  %bf.load247 = load i8, i8* %indirect_call246, align 2, !dbg !5983
  %bf.clear248 = and i8 %bf.load247, 1, !dbg !5983
  %bf.cast249 = zext i8 %bf.clear248 to i32, !dbg !5983
  %tobool250 = icmp ne i32 %bf.cast249, 0, !dbg !5981
  br i1 %tobool250, label %if.then251, label %if.end253, !dbg !5984

if.then251:                                       ; preds = %if.end245
  %153 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5985
  %call252 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %153, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.54, i64 0, i64 0)), !dbg !5986
  br label %if.end253, !dbg !5986

if.end253:                                        ; preds = %if.then251, %if.end245
  %154 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5987
  %count254 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %154, i32 0, i32 0, !dbg !5989
  %155 = load i64, i64* %count254, align 8, !dbg !5989
  %tobool255 = icmp ne i64 %155, 0, !dbg !5987
  br i1 %tobool255, label %if.then256, label %if.end259, !dbg !5990

if.then256:                                       ; preds = %if.end253
  %156 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5991
  %157 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5992
  %count257 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %157, i32 0, i32 0, !dbg !5993
  %158 = load i64, i64* %count257, align 8, !dbg !5993
  %call258 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %156, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.51, i64 0, i64 0), i64 %158), !dbg !5994
  br label %if.end259, !dbg !5994

if.end259:                                        ; preds = %if.then256, %if.end253
  %159 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !5995
  %frequency260 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %159, i32 0, i32 11, !dbg !5997
  %160 = load i32, i32* %frequency260, align 8, !dbg !5997
  %tobool261 = icmp ne i32 %160, 0, !dbg !5995
  br i1 %tobool261, label %if.then262, label %if.end267, !dbg !5998

if.then262:                                       ; preds = %if.end259
  %161 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !5999
  %162 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6000
  %frequency263 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %162, i32 0, i32 11, !dbg !6001
  %163 = load i32, i32* %frequency263, align 8, !dbg !6001
  %conv264 = sitofp i32 %163 to double, !dbg !6000
  %div265 = fdiv double %conv264, 1.000000e+03, !dbg !6002
  %call266 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %161, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.52, i64 0, i64 0), double %div265), !dbg !6003
  br label %if.end267, !dbg !6003

if.end267:                                        ; preds = %if.then262, %if.end259
  %164 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6004
  %loop_nest = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %164, i32 0, i32 13, !dbg !6006
  %165 = load i16, i16* %loop_nest, align 8, !dbg !6006
  %tobool268 = icmp ne i16 %165, 0, !dbg !6004
  br i1 %tobool268, label %if.then269, label %if.end273, !dbg !6007

if.then269:                                       ; preds = %if.end267
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !6008
  %167 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6009
  %loop_nest270 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %167, i32 0, i32 13, !dbg !6010
  %168 = load i16, i16* %loop_nest270, align 8, !dbg !6010
  %conv271 = zext i16 %168 to i32, !dbg !6009
  %call272 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %166, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.57, i64 0, i64 0), i32 %conv271), !dbg !6011
  br label %if.end273, !dbg !6011

if.end273:                                        ; preds = %if.then269, %if.end267
  %169 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6012
  %can_throw_external274 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %169, i32 0, i32 14, !dbg !6014
  %bf.load275 = load i8, i8* %can_throw_external274, align 2, !dbg !6014
  %bf.lshr276 = lshr i8 %bf.load275, 2, !dbg !6014
  %bf.clear277 = and i8 %bf.lshr276, 1, !dbg !6014
  %bf.cast278 = zext i8 %bf.clear277 to i32, !dbg !6014
  %tobool279 = icmp ne i32 %bf.cast278, 0, !dbg !6012
  br i1 %tobool279, label %if.then280, label %if.end282, !dbg !6015

if.then280:                                       ; preds = %if.end273
  %170 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !6016
  %call281 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %170, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.55, i64 0, i64 0)), !dbg !6017
  br label %if.end282, !dbg !6017

if.end282:                                        ; preds = %if.then280, %if.end273
  br label %for.inc283, !dbg !6018

for.inc283:                                       ; preds = %if.end282
  %171 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge, align 8, !dbg !6019
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %171, i32 0, i32 6, !dbg !6020
  %172 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !6020
  store %struct.cgraph_edge* %172, %struct.cgraph_edge** %edge, align 8, !dbg !6021
  br label %for.cond234, !dbg !6022, !llvm.loop !6023

for.end284:                                       ; preds = %for.cond234
  %173 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !6025
  %call285 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %173, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.58, i64 0, i64 0)), !dbg !6026
  %174 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6027
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %174, i32 0, i32 13, !dbg !6029
  %175 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !6029
  %tobool286 = icmp ne %struct.cgraph_node* %175, null, !dbg !6027
  br i1 %tobool286, label %if.then287, label %if.end312, !dbg !6030

if.then287:                                       ; preds = %for.end284
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n, metadata !6031, metadata !DIExpression()), !dbg !6033
  %176 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !6034
  %call288 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %176, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.59, i64 0, i64 0)), !dbg !6035
  %177 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6036
  %same_body289 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %177, i32 0, i32 13, !dbg !6038
  %178 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body289, align 8, !dbg !6038
  store %struct.cgraph_node* %178, %struct.cgraph_node** %n, align 8, !dbg !6039
  br label %for.cond290, !dbg !6040

for.cond290:                                      ; preds = %for.inc309, %if.then287
  %179 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6041
  %tobool291 = icmp ne %struct.cgraph_node* %179, null, !dbg !6043
  br i1 %tobool291, label %for.body292, label %for.end310, !dbg !6043

for.body292:                                      ; preds = %for.cond290
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !6044
  %181 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6046
  %call293 = call i8* @cgraph_node_name(%struct.cgraph_node* %181), !dbg !6047
  %182 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6048
  %uid294 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %182, i32 0, i32 24, !dbg !6049
  %183 = load i32, i32* %uid294, align 8, !dbg !6049
  %call295 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %180, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i64 0, i64 0), i8* %call293, i32 %183), !dbg !6050
  %184 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6051
  %thunk = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %184, i32 0, i32 22, !dbg !6053
  %thunk_p = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk, i32 0, i32 5, !dbg !6054
  %185 = load i8, i8* %thunk_p, align 2, !dbg !6054
  %tobool296 = icmp ne i8 %185, 0, !dbg !6051
  br i1 %tobool296, label %if.then297, label %if.end308, !dbg !6055

if.then297:                                       ; preds = %for.body292
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !6056
  %187 = load i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 22), align 8, !dbg !6058
  %188 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6059
  %thunk298 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %188, i32 0, i32 22, !dbg !6060
  %alias = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk298, i32 0, i32 2, !dbg !6061
  %189 = load %union.tree_node*, %union.tree_node** %alias, align 8, !dbg !6061
  %call299 = call i8* %187(%union.tree_node* %189, i32 2), !dbg !6062
  %190 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6063
  %thunk300 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %190, i32 0, i32 22, !dbg !6064
  %fixed_offset = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk300, i32 0, i32 0, !dbg !6065
  %191 = load i64, i64* %fixed_offset, align 8, !dbg !6065
  %conv301 = trunc i64 %191 to i32, !dbg !6066
  %192 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6067
  %thunk302 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %192, i32 0, i32 22, !dbg !6068
  %virtual_value = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk302, i32 0, i32 1, !dbg !6069
  %193 = load i64, i64* %virtual_value, align 8, !dbg !6069
  %conv303 = trunc i64 %193 to i32, !dbg !6070
  %194 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6071
  %thunk304 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %194, i32 0, i32 22, !dbg !6072
  %virtual_offset_p = getelementptr inbounds %struct.cgraph_thunk_info, %struct.cgraph_thunk_info* %thunk304, i32 0, i32 4, !dbg !6073
  %195 = load i8, i8* %virtual_offset_p, align 1, !dbg !6073
  %conv305 = zext i8 %195 to i32, !dbg !6074
  %call306 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %186, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.61, i64 0, i64 0), i8* %call299, i32 %conv301, i32 %conv303, i32 %conv305), !dbg !6075
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !6076
  %call307 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %196, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.62, i64 0, i64 0)), !dbg !6077
  br label %if.end308, !dbg !6078

if.end308:                                        ; preds = %if.then297, %for.body292
  br label %for.inc309, !dbg !6079

for.inc309:                                       ; preds = %if.end308
  %197 = load %struct.cgraph_node*, %struct.cgraph_node** %n, align 8, !dbg !6080
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %197, i32 0, i32 3, !dbg !6081
  %198 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !6081
  store %struct.cgraph_node* %198, %struct.cgraph_node** %n, align 8, !dbg !6082
  br label %for.cond290, !dbg !6083, !llvm.loop !6084

for.end310:                                       ; preds = %for.cond290
  %199 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !6086
  %call311 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %199, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.58, i64 0, i64 0)), !dbg !6087
  br label %if.end312, !dbg !6088

if.end312:                                        ; preds = %for.end310, %for.end284
  ret void, !dbg !6089
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local void @dump_addr(%struct._IO_FILE*, i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @cgraph_function_body_availability(%struct.cgraph_node* %node) #0 !dbg !6090 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %avail = alloca i32, align 4
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6093, metadata !DIExpression()), !dbg !6094
  call void @llvm.dbg.declare(metadata i32* %avail, metadata !6095, metadata !DIExpression()), !dbg !6096
  %0 = load i8, i8* @cgraph_function_flags_ready, align 1, !dbg !6097
  %tobool = icmp ne i8 %0, 0, !dbg !6097
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6097

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2071, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6097
  br label %cond.end, !dbg !6097

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6097

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6097
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6098
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 27, !dbg !6100
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !6100
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !6100
  %bf.clear = and i16 %bf.lshr, 1, !dbg !6100
  %bf.cast = zext i16 %bf.clear to i32, !dbg !6100
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !6098
  br i1 %tobool1, label %if.else, label %if.then, !dbg !6101

if.then:                                          ; preds = %cond.end
  store i32 1, i32* %avail, align 4, !dbg !6102
  br label %if.end42, !dbg !6103

if.else:                                          ; preds = %cond.end
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6104
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 18, !dbg !6106
  %local2 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !6107
  %bf.load3 = load i8, i8* %local2, align 8, !dbg !6107
  %bf.clear4 = and i8 %bf.load3, 1, !dbg !6107
  %bf.cast5 = zext i8 %bf.clear4 to i32, !dbg !6107
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !6104
  br i1 %tobool6, label %if.then7, label %if.else8, !dbg !6108

if.then7:                                         ; preds = %if.else
  store i32 4, i32* %avail, align 4, !dbg !6109
  br label %if.end41, !dbg !6110

if.else8:                                         ; preds = %if.else
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6111
  %local9 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 18, !dbg !6113
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local9, i32 0, i32 2, !dbg !6114
  %bf.load10 = load i8, i8* %externally_visible, align 8, !dbg !6114
  %bf.lshr11 = lshr i8 %bf.load10, 1, !dbg !6114
  %bf.clear12 = and i8 %bf.lshr11, 1, !dbg !6114
  %bf.cast13 = zext i8 %bf.clear12 to i32, !dbg !6114
  %tobool14 = icmp ne i32 %bf.cast13, 0, !dbg !6111
  br i1 %tobool14, label %if.else16, label %if.then15, !dbg !6115

if.then15:                                        ; preds = %if.else8
  store i32 3, i32* %avail, align 4, !dbg !6116
  br label %if.end40, !dbg !6117

if.else16:                                        ; preds = %if.else8
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6118
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 0, !dbg !6118
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6118
  %function_decl = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !6118
  %declared_inline_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6118
  %bf.load17 = load i32, i32* %declared_inline_flag, align 8, !dbg !6118
  %bf.lshr18 = lshr i32 %bf.load17, 21, !dbg !6118
  %bf.clear19 = and i32 %bf.lshr18, 1, !dbg !6118
  %tobool20 = icmp ne i32 %bf.clear19, 0, !dbg !6118
  br i1 %tobool20, label %if.then21, label %if.else22, !dbg !6120

if.then21:                                        ; preds = %if.else16
  store i32 3, i32* %avail, align 4, !dbg !6121
  br label %if.end39, !dbg !6122

if.else22:                                        ; preds = %if.else16
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6123
  %decl23 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 0, !dbg !6123
  %7 = load %union.tree_node*, %union.tree_node** %decl23, align 8, !dbg !6123
  %decl_with_vis = bitcast %union.tree_node* %7 to %struct.tree_decl_with_vis*, !dbg !6123
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !6123
  %8 = bitcast i24* %comdat_flag to i32*, !dbg !6123
  %bf.load24 = load i32, i32* %8, align 8, !dbg !6123
  %bf.lshr25 = lshr i32 %bf.load24, 9, !dbg !6123
  %bf.clear26 = and i32 %bf.lshr25, 1, !dbg !6123
  %tobool27 = icmp ne i32 %bf.clear26, 0, !dbg !6123
  br i1 %tobool27, label %if.else38, label %land.lhs.true, !dbg !6123

land.lhs.true:                                    ; preds = %if.else22
  %9 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 49), align 8, !dbg !6123
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6123
  %decl28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 0, !dbg !6123
  %11 = load %union.tree_node*, %union.tree_node** %decl28, align 8, !dbg !6123
  %call = call zeroext i8 %9(%union.tree_node* %11), !dbg !6123
  %tobool29 = icmp ne i8 %call, 0, !dbg !6123
  br i1 %tobool29, label %if.else38, label %land.lhs.true30, !dbg !6125

land.lhs.true30:                                  ; preds = %land.lhs.true
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6126
  %decl31 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 0, !dbg !6126
  %13 = load %union.tree_node*, %union.tree_node** %decl31, align 8, !dbg !6126
  %decl_common = bitcast %union.tree_node* %13 to %struct.tree_decl_common*, !dbg !6126
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6126
  %14 = bitcast i40* %decl_flag_1 to i64*, !dbg !6126
  %bf.load32 = load i64, i64* %14, align 8, !dbg !6126
  %bf.lshr33 = lshr i64 %bf.load32, 25, !dbg !6126
  %bf.clear34 = and i64 %bf.lshr33, 1, !dbg !6126
  %bf.cast35 = trunc i64 %bf.clear34 to i32, !dbg !6126
  %tobool36 = icmp ne i32 %bf.cast35, 0, !dbg !6126
  br i1 %tobool36, label %if.else38, label %if.then37, !dbg !6127

if.then37:                                        ; preds = %land.lhs.true30
  store i32 2, i32* %avail, align 4, !dbg !6128
  br label %if.end, !dbg !6129

if.else38:                                        ; preds = %land.lhs.true30, %land.lhs.true, %if.else22
  store i32 3, i32* %avail, align 4, !dbg !6130
  br label %if.end

if.end:                                           ; preds = %if.else38, %if.then37
  br label %if.end39

if.end39:                                         ; preds = %if.end, %if.then21
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.then15
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.then7
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.then
  %15 = load i32, i32* %avail, align 4, !dbg !6131
  ret i32 %15, !dbg !6132
}

declare dso_local zeroext i8 @gimple_has_body_p(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_cgraph_node(%struct.cgraph_node* %node) #0 !dbg !6133 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6134, metadata !DIExpression()), !dbg !6135
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6136
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6137
  call void @dump_cgraph_node(%struct._IO_FILE* %0, %struct.cgraph_node* %1), !dbg !6138
  ret void, !dbg !6139
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_cgraph(%struct._IO_FILE* %f) #0 !dbg !6140 {
entry:
  %f.addr = alloca %struct._IO_FILE*, align 8
  %node = alloca %struct.cgraph_node*, align 8
  store %struct._IO_FILE* %f, %struct._IO_FILE** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f.addr, metadata !6143, metadata !DIExpression()), !dbg !6144
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !6145, metadata !DIExpression()), !dbg !6146
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !6147
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.63, i64 0, i64 0)), !dbg !6148
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_nodes, align 8, !dbg !6149
  store %struct.cgraph_node* %1, %struct.cgraph_node** %node, align 8, !dbg !6151
  br label %for.cond, !dbg !6152

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6153
  %tobool = icmp ne %struct.cgraph_node* %2, null, !dbg !6155
  br i1 %tobool, label %for.body, label %for.end, !dbg !6155

for.body:                                         ; preds = %for.cond
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %f.addr, align 8, !dbg !6156
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6157
  call void @dump_cgraph_node(%struct._IO_FILE* %3, %struct.cgraph_node* %4), !dbg !6158
  br label %for.inc, !dbg !6158

for.inc:                                          ; preds = %for.body
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6159
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 3, !dbg !6160
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !6160
  store %struct.cgraph_node* %6, %struct.cgraph_node** %node, align 8, !dbg !6161
  br label %for.cond, !dbg !6162, !llvm.loop !6163

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6165
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_cgraph() #0 !dbg !6166 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6167
  call void @dump_cgraph(%struct._IO_FILE* %0), !dbg !6168
  ret void, !dbg !6169
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @change_decl_assembler_name(%union.tree_node* %decl, %union.tree_node* %name) #0 !dbg !6170 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6173, metadata !DIExpression()), !dbg !6174
  store %union.tree_node* %name, %union.tree_node** %name.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %name.addr, metadata !6175, metadata !DIExpression()), !dbg !6176
  %0 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !6177
  %tobool = icmp ne %struct.htab* %0, null, !dbg !6177
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6177

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1788, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6177
  br label %cond.end, !dbg !6177

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6177

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6177
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6178
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6178
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6178
  %bf.load = load i64, i64* %2, align 8, !dbg !6178
  %bf.clear = and i64 %bf.load, 65535, !dbg !6178
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6178
  %idxprom = zext i32 %bf.cast to i64, !dbg !6178
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !6178
  %arrayidx1 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 13, !dbg !6178
  %3 = load i8, i8* %arrayidx1, align 1, !dbg !6178
  %conv = zext i8 %3 to i32, !dbg !6178
  %tobool2 = icmp ne i32 %conv, 0, !dbg !6178
  br i1 %tobool2, label %land.lhs.true, label %if.then, !dbg !6178

land.lhs.true:                                    ; preds = %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6178
  %decl_with_vis = bitcast %union.tree_node* %4 to %struct.tree_decl_with_vis*, !dbg !6178
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 1, !dbg !6178
  %5 = load %union.tree_node*, %union.tree_node** %assembler_name, align 8, !dbg !6178
  %cmp = icmp ne %union.tree_node* %5, null, !dbg !6178
  br i1 %cmp, label %if.end, label %if.then, !dbg !6180

if.then:                                          ; preds = %land.lhs.true, %cond.end
  %6 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6181
  %7 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6181
  %decl_with_vis4 = bitcast %union.tree_node* %7 to %struct.tree_decl_with_vis*, !dbg !6181
  %assembler_name5 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis4, i32 0, i32 1, !dbg !6181
  store %union.tree_node* %6, %union.tree_node** %assembler_name5, align 8, !dbg !6181
  br label %return, !dbg !6183

if.end:                                           ; preds = %land.lhs.true
  %8 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6184
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6186
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %9), !dbg !6186
  %cmp6 = icmp eq %union.tree_node* %8, %call, !dbg !6187
  br i1 %cmp6, label %if.then8, label %if.end9, !dbg !6188

if.then8:                                         ; preds = %if.end
  br label %return, !dbg !6189

if.end9:                                          ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6190
  %call10 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %10), !dbg !6190
  %base11 = bitcast %union.tree_node* %call10 to %struct.tree_base*, !dbg !6190
  %11 = bitcast %struct.tree_base* %base11 to i64*, !dbg !6190
  %bf.load12 = load i64, i64* %11, align 8, !dbg !6190
  %bf.lshr = lshr i64 %bf.load12, 26, !dbg !6190
  %bf.clear13 = and i64 %bf.lshr, 1, !dbg !6190
  %bf.cast14 = trunc i64 %bf.clear13 to i32, !dbg !6190
  %tobool15 = icmp ne i32 %bf.cast14, 0, !dbg !6190
  br i1 %tobool15, label %land.lhs.true16, label %if.end31, !dbg !6192

land.lhs.true16:                                  ; preds = %if.end9
  %12 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6193
  %base17 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !6193
  %13 = bitcast %struct.tree_base* %base17 to i64*, !dbg !6193
  %bf.load18 = load i64, i64* %13, align 8, !dbg !6193
  %bf.clear19 = and i64 %bf.load18, 65535, !dbg !6193
  %bf.cast20 = trunc i64 %bf.clear19 to i32, !dbg !6193
  %idxprom21 = zext i32 %bf.cast20 to i64, !dbg !6193
  %arrayidx22 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom21, !dbg !6193
  %arrayidx23 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx22, i64 0, i64 11, !dbg !6193
  %14 = load i8, i8* %arrayidx23, align 1, !dbg !6193
  %conv24 = zext i8 %14 to i32, !dbg !6193
  %tobool25 = icmp ne i32 %conv24, 0, !dbg !6193
  br i1 %tobool25, label %land.lhs.true26, label %if.end31, !dbg !6193

land.lhs.true26:                                  ; preds = %land.lhs.true16
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6193
  %decl_with_rtl = bitcast %union.tree_node* %15 to %struct.tree_decl_with_rtl*, !dbg !6193
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !6193
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !6193
  %cmp27 = icmp ne %struct.rtx_def* %16, null, !dbg !6193
  br i1 %cmp27, label %if.then29, label %if.end31, !dbg !6194

if.then29:                                        ; preds = %land.lhs.true26
  %17 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6195
  %call30 = call zeroext i8 (i32, i8*, ...) @warning(i32 0, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.64, i64 0, i64 0), %union.tree_node* %17), !dbg !6196
  br label %if.end31, !dbg !6196

if.end31:                                         ; preds = %if.then29, %land.lhs.true26, %land.lhs.true16, %if.end9
  %18 = load %union.tree_node*, %union.tree_node** %name.addr, align 8, !dbg !6197
  %19 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6197
  %decl_with_vis32 = bitcast %union.tree_node* %19 to %struct.tree_decl_with_vis*, !dbg !6197
  %assembler_name33 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis32, i32 0, i32 1, !dbg !6197
  store %union.tree_node* %18, %union.tree_node** %assembler_name33, align 8, !dbg !6197
  br label %return, !dbg !6198

return:                                           ; preds = %if.end31, %if.then8, %if.then
  ret void, !dbg !6198
}

declare dso_local zeroext i8 @warning(i32, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_asm_node* @cgraph_add_asm_node(%union.tree_node* %asm_str) #0 !dbg !6199 {
entry:
  %asm_str.addr = alloca %union.tree_node*, align 8
  %node = alloca %struct.cgraph_asm_node*, align 8
  store %union.tree_node* %asm_str, %union.tree_node** %asm_str.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %asm_str.addr, metadata !6202, metadata !DIExpression()), !dbg !6203
  call void @llvm.dbg.declare(metadata %struct.cgraph_asm_node** %node, metadata !6204, metadata !DIExpression()), !dbg !6205
  %call = call i8* @ggc_alloc_cleared_stat(i64 24), !dbg !6206
  %0 = bitcast i8* %call to %struct.cgraph_asm_node*, !dbg !6206
  store %struct.cgraph_asm_node* %0, %struct.cgraph_asm_node** %node, align 8, !dbg !6207
  %1 = load %union.tree_node*, %union.tree_node** %asm_str.addr, align 8, !dbg !6208
  %2 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %node, align 8, !dbg !6209
  %asm_str1 = getelementptr inbounds %struct.cgraph_asm_node, %struct.cgraph_asm_node* %2, i32 0, i32 1, !dbg !6210
  store %union.tree_node* %1, %union.tree_node** %asm_str1, align 8, !dbg !6211
  %3 = load i32, i32* @cgraph_order, align 4, !dbg !6212
  %inc = add nsw i32 %3, 1, !dbg !6212
  store i32 %inc, i32* @cgraph_order, align 4, !dbg !6212
  %4 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %node, align 8, !dbg !6213
  %order = getelementptr inbounds %struct.cgraph_asm_node, %struct.cgraph_asm_node* %4, i32 0, i32 2, !dbg !6214
  store i32 %3, i32* %order, align 8, !dbg !6215
  %5 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %node, align 8, !dbg !6216
  %next = getelementptr inbounds %struct.cgraph_asm_node, %struct.cgraph_asm_node* %5, i32 0, i32 0, !dbg !6217
  store %struct.cgraph_asm_node* null, %struct.cgraph_asm_node** %next, align 8, !dbg !6218
  %6 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** @cgraph_asm_nodes, align 8, !dbg !6219
  %cmp = icmp eq %struct.cgraph_asm_node* %6, null, !dbg !6221
  br i1 %cmp, label %if.then, label %if.else, !dbg !6222

if.then:                                          ; preds = %entry
  %7 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %node, align 8, !dbg !6223
  store %struct.cgraph_asm_node* %7, %struct.cgraph_asm_node** @cgraph_asm_nodes, align 8, !dbg !6224
  br label %if.end, !dbg !6225

if.else:                                          ; preds = %entry
  %8 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %node, align 8, !dbg !6226
  %9 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** @cgraph_asm_last_node, align 8, !dbg !6227
  %next2 = getelementptr inbounds %struct.cgraph_asm_node, %struct.cgraph_asm_node* %9, i32 0, i32 0, !dbg !6228
  store %struct.cgraph_asm_node* %8, %struct.cgraph_asm_node** %next2, align 8, !dbg !6229
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %node, align 8, !dbg !6230
  store %struct.cgraph_asm_node* %10, %struct.cgraph_asm_node** @cgraph_asm_last_node, align 8, !dbg !6231
  %11 = load %struct.cgraph_asm_node*, %struct.cgraph_asm_node** %node, align 8, !dbg !6232
  ret %struct.cgraph_asm_node* %11, !dbg !6233
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @cgraph_function_possibly_inlined_p(%union.tree_node* %decl) #0 !dbg !6234 {
entry:
  %retval = alloca i8, align 1
  %decl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6237, metadata !DIExpression()), !dbg !6238
  %0 = load i8, i8* @cgraph_global_info_ready, align 1, !dbg !6239
  %tobool = icmp ne i8 %0, 0, !dbg !6239
  br i1 %tobool, label %if.end, label %if.then, !dbg !6241

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6242
  %function_decl = bitcast %union.tree_node* %1 to %struct.tree_function_decl*, !dbg !6242
  %uninlinable = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6242
  %bf.load = load i32, i32* %uninlinable, align 8, !dbg !6242
  %bf.lshr = lshr i32 %bf.load, 15, !dbg !6242
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6242
  %tobool1 = icmp ne i32 %bf.clear, 0, !dbg !6243
  %lnot = xor i1 %tobool1, true, !dbg !6243
  %lnot.ext = zext i1 %lnot to i32, !dbg !6243
  %conv = trunc i32 %lnot.ext to i8, !dbg !6243
  store i8 %conv, i8* %retval, align 1, !dbg !6244
  br label %return, !dbg !6244

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6245
  %function_decl2 = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !6245
  %possibly_inlined = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl2, i32 0, i32 5, !dbg !6245
  %bf.load3 = load i32, i32* %possibly_inlined, align 8, !dbg !6245
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !6245
  %bf.clear5 = and i32 %bf.lshr4, 1, !dbg !6245
  %conv6 = trunc i32 %bf.clear5 to i8, !dbg !6245
  store i8 %conv6, i8* %retval, align 1, !dbg !6246
  br label %return, !dbg !6246

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !6247
  ret i8 %3, !dbg !6247
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_edge* @cgraph_clone_edge(%struct.cgraph_edge* %e, %struct.cgraph_node* %n, %union.gimple_statement_d* %call_stmt, i32 %stmt_uid, i64 %count_scale, i32 %freq_scale, i32 %loop_nest, i8 zeroext %update_original) #0 !dbg !6248 {
entry:
  %e.addr = alloca %struct.cgraph_edge*, align 8
  %n.addr = alloca %struct.cgraph_node*, align 8
  %call_stmt.addr = alloca %union.gimple_statement_d*, align 8
  %stmt_uid.addr = alloca i32, align 4
  %count_scale.addr = alloca i64, align 8
  %freq_scale.addr = alloca i32, align 4
  %loop_nest.addr = alloca i32, align 4
  %update_original.addr = alloca i8, align 1
  %new_edge = alloca %struct.cgraph_edge*, align 8
  %count = alloca i64, align 8
  %freq = alloca i64, align 8
  store %struct.cgraph_edge* %e, %struct.cgraph_edge** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e.addr, metadata !6251, metadata !DIExpression()), !dbg !6252
  store %struct.cgraph_node* %n, %struct.cgraph_node** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n.addr, metadata !6253, metadata !DIExpression()), !dbg !6254
  store %union.gimple_statement_d* %call_stmt, %union.gimple_statement_d** %call_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %call_stmt.addr, metadata !6255, metadata !DIExpression()), !dbg !6256
  store i32 %stmt_uid, i32* %stmt_uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stmt_uid.addr, metadata !6257, metadata !DIExpression()), !dbg !6258
  store i64 %count_scale, i64* %count_scale.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count_scale.addr, metadata !6259, metadata !DIExpression()), !dbg !6260
  store i32 %freq_scale, i32* %freq_scale.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %freq_scale.addr, metadata !6261, metadata !DIExpression()), !dbg !6262
  store i32 %loop_nest, i32* %loop_nest.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_nest.addr, metadata !6263, metadata !DIExpression()), !dbg !6264
  store i8 %update_original, i8* %update_original.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %update_original.addr, metadata !6265, metadata !DIExpression()), !dbg !6266
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %new_edge, metadata !6267, metadata !DIExpression()), !dbg !6268
  call void @llvm.dbg.declare(metadata i64* %count, metadata !6269, metadata !DIExpression()), !dbg !6270
  %0 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6271
  %count1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %0, i32 0, i32 0, !dbg !6272
  %1 = load i64, i64* %count1, align 8, !dbg !6272
  %2 = load i64, i64* %count_scale.addr, align 8, !dbg !6273
  %mul = mul nsw i64 %1, %2, !dbg !6274
  %div = sdiv i64 %mul, 10000, !dbg !6275
  store i64 %div, i64* %count, align 8, !dbg !6270
  call void @llvm.dbg.declare(metadata i64* %freq, metadata !6276, metadata !DIExpression()), !dbg !6277
  %3 = load i32, i32* %freq_scale.addr, align 4, !dbg !6278
  %tobool = icmp ne i32 %3, 0, !dbg !6278
  br i1 %tobool, label %if.end, label %if.then, !dbg !6280

if.then:                                          ; preds = %entry
  store i32 1, i32* %freq_scale.addr, align 4, !dbg !6281
  br label %if.end, !dbg !6282

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6283
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %4, i32 0, i32 11, !dbg !6284
  %5 = load i32, i32* %frequency, align 8, !dbg !6284
  %conv = sext i32 %5 to i64, !dbg !6283
  %6 = load i32, i32* %freq_scale.addr, align 4, !dbg !6285
  %conv2 = sext i32 %6 to i64, !dbg !6286
  %mul3 = mul nsw i64 %conv, %conv2, !dbg !6287
  %div4 = sdiv i64 %mul3, 1000, !dbg !6288
  store i64 %div4, i64* %freq, align 8, !dbg !6289
  %7 = load i64, i64* %freq, align 8, !dbg !6290
  %cmp = icmp sgt i64 %7, 100000, !dbg !6292
  br i1 %cmp, label %if.then6, label %if.end7, !dbg !6293

if.then6:                                         ; preds = %if.end
  store i64 100000, i64* %freq, align 8, !dbg !6294
  br label %if.end7, !dbg !6295

if.end7:                                          ; preds = %if.then6, %if.end
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6296
  %9 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6297
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %9, i32 0, i32 2, !dbg !6298
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !6298
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt.addr, align 8, !dbg !6299
  %12 = load i64, i64* %count, align 8, !dbg !6300
  %13 = load i64, i64* %freq, align 8, !dbg !6301
  %conv8 = trunc i64 %13 to i32, !dbg !6301
  %14 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6302
  %loop_nest9 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %14, i32 0, i32 13, !dbg !6303
  %15 = load i16, i16* %loop_nest9, align 8, !dbg !6303
  %conv10 = zext i16 %15 to i32, !dbg !6302
  %16 = load i32, i32* %loop_nest.addr, align 4, !dbg !6304
  %add = add nsw i32 %conv10, %16, !dbg !6305
  %call = call %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node* %8, %struct.cgraph_node* %10, %union.gimple_statement_d* %11, i64 %12, i32 %conv8, i32 %add), !dbg !6306
  store %struct.cgraph_edge* %call, %struct.cgraph_edge** %new_edge, align 8, !dbg !6307
  %17 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6308
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %17, i32 0, i32 9, !dbg !6309
  %18 = load i32, i32* %inline_failed, align 8, !dbg !6309
  %19 = load %struct.cgraph_edge*, %struct.cgraph_edge** %new_edge, align 8, !dbg !6310
  %inline_failed11 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %19, i32 0, i32 9, !dbg !6311
  store i32 %18, i32* %inline_failed11, align 8, !dbg !6312
  %20 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6313
  %indirect_call = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %20, i32 0, i32 14, !dbg !6314
  %bf.load = load i8, i8* %indirect_call, align 2, !dbg !6314
  %bf.clear = and i8 %bf.load, 1, !dbg !6314
  %bf.cast = zext i8 %bf.clear to i32, !dbg !6314
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %new_edge, align 8, !dbg !6315
  %indirect_call12 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %21, i32 0, i32 14, !dbg !6316
  %22 = trunc i32 %bf.cast to i8, !dbg !6317
  %bf.load13 = load i8, i8* %indirect_call12, align 2, !dbg !6317
  %bf.value = and i8 %22, 1, !dbg !6317
  %bf.clear14 = and i8 %bf.load13, -2, !dbg !6317
  %bf.set = or i8 %bf.clear14, %bf.value, !dbg !6317
  store i8 %bf.set, i8* %indirect_call12, align 2, !dbg !6317
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !6317
  %23 = load i32, i32* %stmt_uid.addr, align 4, !dbg !6318
  %24 = load %struct.cgraph_edge*, %struct.cgraph_edge** %new_edge, align 8, !dbg !6319
  %lto_stmt_uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %24, i32 0, i32 10, !dbg !6320
  store i32 %23, i32* %lto_stmt_uid, align 4, !dbg !6321
  %25 = load i8, i8* %update_original.addr, align 1, !dbg !6322
  %tobool15 = icmp ne i8 %25, 0, !dbg !6322
  br i1 %tobool15, label %if.then16, label %if.end25, !dbg !6324

if.then16:                                        ; preds = %if.end7
  %26 = load %struct.cgraph_edge*, %struct.cgraph_edge** %new_edge, align 8, !dbg !6325
  %count17 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %26, i32 0, i32 0, !dbg !6327
  %27 = load i64, i64* %count17, align 8, !dbg !6327
  %28 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6328
  %count18 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %28, i32 0, i32 0, !dbg !6329
  %29 = load i64, i64* %count18, align 8, !dbg !6330
  %sub = sub nsw i64 %29, %27, !dbg !6330
  store i64 %sub, i64* %count18, align 8, !dbg !6330
  %30 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6331
  %count19 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %30, i32 0, i32 0, !dbg !6333
  %31 = load i64, i64* %count19, align 8, !dbg !6333
  %cmp20 = icmp slt i64 %31, 0, !dbg !6334
  br i1 %cmp20, label %if.then22, label %if.end24, !dbg !6335

if.then22:                                        ; preds = %if.then16
  %32 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6336
  %count23 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %32, i32 0, i32 0, !dbg !6337
  store i64 0, i64* %count23, align 8, !dbg !6338
  br label %if.end24, !dbg !6336

if.end24:                                         ; preds = %if.then22, %if.then16
  br label %if.end25, !dbg !6339

if.end25:                                         ; preds = %if.end24, %if.end7
  %33 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e.addr, align 8, !dbg !6340
  %34 = load %struct.cgraph_edge*, %struct.cgraph_edge** %new_edge, align 8, !dbg !6341
  call void @cgraph_call_edge_duplication_hooks(%struct.cgraph_edge* %33, %struct.cgraph_edge* %34), !dbg !6342
  %35 = load %struct.cgraph_edge*, %struct.cgraph_edge** %new_edge, align 8, !dbg !6343
  ret %struct.cgraph_edge* %35, !dbg !6344
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_call_edge_duplication_hooks(%struct.cgraph_edge* %cs1, %struct.cgraph_edge* %cs2) #0 !dbg !6345 {
entry:
  %cs1.addr = alloca %struct.cgraph_edge*, align 8
  %cs2.addr = alloca %struct.cgraph_edge*, align 8
  %entry1 = alloca %struct.cgraph_2edge_hook_list*, align 8
  store %struct.cgraph_edge* %cs1, %struct.cgraph_edge** %cs1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs1.addr, metadata !6348, metadata !DIExpression()), !dbg !6349
  store %struct.cgraph_edge* %cs2, %struct.cgraph_edge** %cs2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %cs2.addr, metadata !6350, metadata !DIExpression()), !dbg !6351
  call void @llvm.dbg.declare(metadata %struct.cgraph_2edge_hook_list** %entry1, metadata !6352, metadata !DIExpression()), !dbg !6353
  %0 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** @first_cgraph_edge_duplicated_hook, align 8, !dbg !6354
  store %struct.cgraph_2edge_hook_list* %0, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !6353
  br label %while.cond, !dbg !6355

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !6356
  %tobool = icmp ne %struct.cgraph_2edge_hook_list* %1, null, !dbg !6355
  br i1 %tobool, label %while.body, label %while.end, !dbg !6355

while.body:                                       ; preds = %while.cond
  %2 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !6357
  %hook = getelementptr inbounds %struct.cgraph_2edge_hook_list, %struct.cgraph_2edge_hook_list* %2, i32 0, i32 0, !dbg !6359
  %3 = load void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)*, void (%struct.cgraph_edge*, %struct.cgraph_edge*, i8*)** %hook, align 8, !dbg !6359
  %4 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs1.addr, align 8, !dbg !6360
  %5 = load %struct.cgraph_edge*, %struct.cgraph_edge** %cs2.addr, align 8, !dbg !6361
  %6 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !6362
  %data = getelementptr inbounds %struct.cgraph_2edge_hook_list, %struct.cgraph_2edge_hook_list* %6, i32 0, i32 1, !dbg !6363
  %7 = load i8*, i8** %data, align 8, !dbg !6363
  call void %3(%struct.cgraph_edge* %4, %struct.cgraph_edge* %5, i8* %7), !dbg !6357
  %8 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !6364
  %next = getelementptr inbounds %struct.cgraph_2edge_hook_list, %struct.cgraph_2edge_hook_list* %8, i32 0, i32 2, !dbg !6365
  %9 = load %struct.cgraph_2edge_hook_list*, %struct.cgraph_2edge_hook_list** %next, align 8, !dbg !6365
  store %struct.cgraph_2edge_hook_list* %9, %struct.cgraph_2edge_hook_list** %entry1, align 8, !dbg !6366
  br label %while.cond, !dbg !6355, !llvm.loop !6367

while.end:                                        ; preds = %while.cond
  ret void, !dbg !6369
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_node* @cgraph_clone_node(%struct.cgraph_node* %n, i64 %count, i32 %freq, i32 %loop_nest, i8 zeroext %update_original, %struct.VEC_cgraph_edge_p_heap* %redirect_callers) #0 !dbg !6370 {
entry:
  %n.addr = alloca %struct.cgraph_node*, align 8
  %count.addr = alloca i64, align 8
  %freq.addr = alloca i32, align 4
  %loop_nest.addr = alloca i32, align 4
  %update_original.addr = alloca i8, align 1
  %redirect_callers.addr = alloca %struct.VEC_cgraph_edge_p_heap*, align 8
  %new_node = alloca %struct.cgraph_node*, align 8
  %e = alloca %struct.cgraph_edge*, align 8
  %count_scale = alloca i64, align 8
  %i = alloca i32, align 4
  store %struct.cgraph_node* %n, %struct.cgraph_node** %n.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %n.addr, metadata !6385, metadata !DIExpression()), !dbg !6386
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !6387, metadata !DIExpression()), !dbg !6388
  store i32 %freq, i32* %freq.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %freq.addr, metadata !6389, metadata !DIExpression()), !dbg !6390
  store i32 %loop_nest, i32* %loop_nest.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %loop_nest.addr, metadata !6391, metadata !DIExpression()), !dbg !6392
  store i8 %update_original, i8* %update_original.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %update_original.addr, metadata !6393, metadata !DIExpression()), !dbg !6394
  store %struct.VEC_cgraph_edge_p_heap* %redirect_callers, %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, metadata !6395, metadata !DIExpression()), !dbg !6396
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %new_node, metadata !6397, metadata !DIExpression()), !dbg !6398
  %call = call %struct.cgraph_node* @cgraph_create_node(), !dbg !6399
  store %struct.cgraph_node* %call, %struct.cgraph_node** %new_node, align 8, !dbg !6398
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %e, metadata !6400, metadata !DIExpression()), !dbg !6401
  call void @llvm.dbg.declare(metadata i64* %count_scale, metadata !6402, metadata !DIExpression()), !dbg !6403
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6404, metadata !DIExpression()), !dbg !6405
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6406
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !6407
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6407
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6408
  %decl1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 0, !dbg !6409
  store %union.tree_node* %1, %union.tree_node** %decl1, align 8, !dbg !6410
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6411
  %origin = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 5, !dbg !6412
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %origin, align 8, !dbg !6412
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6413
  %origin2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 5, !dbg !6414
  store %struct.cgraph_node* %4, %struct.cgraph_node** %origin2, align 8, !dbg !6415
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6416
  %origin3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 5, !dbg !6418
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %origin3, align 8, !dbg !6418
  %tobool = icmp ne %struct.cgraph_node* %7, null, !dbg !6416
  br i1 %tobool, label %if.then, label %if.end, !dbg !6419

if.then:                                          ; preds = %entry
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6420
  %origin4 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 5, !dbg !6422
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %origin4, align 8, !dbg !6422
  %nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 6, !dbg !6423
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %nested, align 8, !dbg !6423
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6424
  %next_nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 7, !dbg !6425
  store %struct.cgraph_node* %10, %struct.cgraph_node** %next_nested, align 8, !dbg !6426
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6427
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6428
  %origin5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 5, !dbg !6429
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %origin5, align 8, !dbg !6429
  %nested6 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 6, !dbg !6430
  store %struct.cgraph_node* %12, %struct.cgraph_node** %nested6, align 8, !dbg !6431
  br label %if.end, !dbg !6432

if.end:                                           ; preds = %if.then, %entry
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6433
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 27, !dbg !6434
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !6434
  %bf.lshr = lshr i16 %bf.load, 5, !dbg !6434
  %bf.clear = and i16 %bf.lshr, 1, !dbg !6434
  %bf.cast = zext i16 %bf.clear to i32, !dbg !6434
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6435
  %analyzed7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 27, !dbg !6436
  %17 = trunc i32 %bf.cast to i16, !dbg !6437
  %bf.load8 = load i16, i16* %analyzed7, align 4, !dbg !6437
  %bf.value = and i16 %17, 1, !dbg !6437
  %bf.shl = shl i16 %bf.value, 5, !dbg !6437
  %bf.clear9 = and i16 %bf.load8, -33, !dbg !6437
  %bf.set = or i16 %bf.clear9, %bf.shl, !dbg !6437
  store i16 %bf.set, i16* %analyzed7, align 4, !dbg !6437
  %bf.result.cast = zext i16 %bf.value to i32, !dbg !6437
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6438
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %18, i32 0, i32 18, !dbg !6439
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6440
  %local10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 18, !dbg !6441
  %20 = bitcast %struct.cgraph_local_info* %local to i8*, !dbg !6441
  %21 = bitcast %struct.cgraph_local_info* %local10 to i8*, !dbg !6441
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 40, i1 false), !dbg !6441
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6442
  %local11 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 18, !dbg !6443
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local11, i32 0, i32 2, !dbg !6444
  %bf.load12 = load i8, i8* %externally_visible, align 8, !dbg !6445
  %bf.clear13 = and i8 %bf.load12, -3, !dbg !6445
  store i8 %bf.clear13, i8* %externally_visible, align 8, !dbg !6445
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6446
  %global = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 19, !dbg !6447
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6448
  %global14 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 19, !dbg !6449
  %25 = bitcast %struct.cgraph_global_info* %global to i8*, !dbg !6449
  %26 = bitcast %struct.cgraph_global_info* %global14 to i8*, !dbg !6449
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 40, i1 false), !dbg !6449
  %27 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6450
  %rtl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %27, i32 0, i32 20, !dbg !6451
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6452
  %rtl15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 20, !dbg !6453
  %29 = bitcast %struct.cgraph_rtl_info* %rtl to i8*, !dbg !6453
  %30 = bitcast %struct.cgraph_rtl_info* %rtl15 to i8*, !dbg !6453
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 4, i1 false), !dbg !6453
  %31 = load i64, i64* %count.addr, align 8, !dbg !6454
  %32 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6455
  %count16 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %32, i32 0, i32 23, !dbg !6456
  store i64 %31, i64* %count16, align 8, !dbg !6457
  %33 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6458
  %clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %33, i32 0, i32 21, !dbg !6459
  %34 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6460
  %clone17 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %34, i32 0, i32 21, !dbg !6461
  %35 = bitcast %struct.cgraph_clone_info* %clone to i8*, !dbg !6461
  %36 = bitcast %struct.cgraph_clone_info* %clone17 to i8*, !dbg !6461
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 24, i1 false), !dbg !6461
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6462
  %clone18 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 21, !dbg !6463
  %tree_map = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone18, i32 0, i32 0, !dbg !6464
  store %struct.VEC_ipa_replace_map_p_gc* null, %struct.VEC_ipa_replace_map_p_gc** %tree_map, align 8, !dbg !6465
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6466
  %count19 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %38, i32 0, i32 23, !dbg !6468
  %39 = load i64, i64* %count19, align 8, !dbg !6468
  %tobool20 = icmp ne i64 %39, 0, !dbg !6466
  br i1 %tobool20, label %if.then21, label %if.else28, !dbg !6469

if.then21:                                        ; preds = %if.end
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6470
  %count22 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %40, i32 0, i32 23, !dbg !6473
  %41 = load i64, i64* %count22, align 8, !dbg !6473
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6474
  %count23 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i32 0, i32 23, !dbg !6475
  %43 = load i64, i64* %count23, align 8, !dbg !6475
  %cmp = icmp sgt i64 %41, %43, !dbg !6476
  br i1 %cmp, label %if.then24, label %if.else, !dbg !6477

if.then24:                                        ; preds = %if.then21
  store i64 10000, i64* %count_scale, align 8, !dbg !6478
  br label %if.end27, !dbg !6479

if.else:                                          ; preds = %if.then21
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6480
  %count25 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %44, i32 0, i32 23, !dbg !6481
  %45 = load i64, i64* %count25, align 8, !dbg !6481
  %mul = mul nsw i64 %45, 10000, !dbg !6482
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6483
  %count26 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %46, i32 0, i32 23, !dbg !6484
  %47 = load i64, i64* %count26, align 8, !dbg !6484
  %div = sdiv i64 %mul, %47, !dbg !6485
  store i64 %div, i64* %count_scale, align 8, !dbg !6486
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then24
  br label %if.end29, !dbg !6487

if.else28:                                        ; preds = %if.end
  store i64 0, i64* %count_scale, align 8, !dbg !6488
  br label %if.end29

if.end29:                                         ; preds = %if.else28, %if.end27
  %48 = load i8, i8* %update_original.addr, align 1, !dbg !6489
  %tobool30 = icmp ne i8 %48, 0, !dbg !6489
  br i1 %tobool30, label %if.then31, label %if.end38, !dbg !6491

if.then31:                                        ; preds = %if.end29
  %49 = load i64, i64* %count.addr, align 8, !dbg !6492
  %50 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6494
  %count32 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %50, i32 0, i32 23, !dbg !6495
  %51 = load i64, i64* %count32, align 8, !dbg !6496
  %sub = sub nsw i64 %51, %49, !dbg !6496
  store i64 %sub, i64* %count32, align 8, !dbg !6496
  %52 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6497
  %count33 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %52, i32 0, i32 23, !dbg !6499
  %53 = load i64, i64* %count33, align 8, !dbg !6499
  %cmp34 = icmp slt i64 %53, 0, !dbg !6500
  br i1 %cmp34, label %if.then35, label %if.end37, !dbg !6501

if.then35:                                        ; preds = %if.then31
  %54 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6502
  %count36 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %54, i32 0, i32 23, !dbg !6503
  store i64 0, i64* %count36, align 8, !dbg !6504
  br label %if.end37, !dbg !6502

if.end37:                                         ; preds = %if.then35, %if.then31
  br label %if.end38, !dbg !6505

if.end38:                                         ; preds = %if.end37, %if.end29
  store i32 0, i32* %i, align 4, !dbg !6506
  br label %for.cond, !dbg !6508

for.cond:                                         ; preds = %for.inc, %if.end38
  %55 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, align 8, !dbg !6509
  %tobool39 = icmp ne %struct.VEC_cgraph_edge_p_heap* %55, null, !dbg !6509
  br i1 %tobool39, label %cond.true, label %cond.false, !dbg !6509

cond.true:                                        ; preds = %for.cond
  %56 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, align 8, !dbg !6509
  %base = getelementptr inbounds %struct.VEC_cgraph_edge_p_heap, %struct.VEC_cgraph_edge_p_heap* %56, i32 0, i32 0, !dbg !6509
  br label %cond.end, !dbg !6509

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !6509

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_cgraph_edge_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6509
  %57 = load i32, i32* %i, align 4, !dbg !6509
  %call40 = call i32 @VEC_cgraph_edge_p_base_iterate(%struct.VEC_cgraph_edge_p_base* %cond, i32 %57, %struct.cgraph_edge** %e), !dbg !6509
  %tobool41 = icmp ne i32 %call40, 0, !dbg !6511
  br i1 %tobool41, label %for.body, label %for.end, !dbg !6511

for.body:                                         ; preds = %cond.end
  %58 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6512
  %59 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6514
  call void @cgraph_redirect_edge_callee(%struct.cgraph_edge* %58, %struct.cgraph_node* %59), !dbg !6515
  br label %for.inc, !dbg !6516

for.inc:                                          ; preds = %for.body
  %60 = load i32, i32* %i, align 4, !dbg !6517
  %inc = add i32 %60, 1, !dbg !6517
  store i32 %inc, i32* %i, align 4, !dbg !6517
  br label %for.cond, !dbg !6518, !llvm.loop !6519

for.end:                                          ; preds = %cond.end
  %61 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6521
  %callees = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %61, i32 0, i32 1, !dbg !6523
  %62 = load %struct.cgraph_edge*, %struct.cgraph_edge** %callees, align 8, !dbg !6523
  store %struct.cgraph_edge* %62, %struct.cgraph_edge** %e, align 8, !dbg !6524
  br label %for.cond42, !dbg !6525

for.cond42:                                       ; preds = %for.inc46, %for.end
  %63 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6526
  %tobool43 = icmp ne %struct.cgraph_edge* %63, null, !dbg !6528
  br i1 %tobool43, label %for.body44, label %for.end47, !dbg !6528

for.body44:                                       ; preds = %for.cond42
  %64 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6529
  %65 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6530
  %66 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6531
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %66, i32 0, i32 7, !dbg !6532
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !6532
  %68 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6533
  %lto_stmt_uid = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %68, i32 0, i32 10, !dbg !6534
  %69 = load i32, i32* %lto_stmt_uid, align 4, !dbg !6534
  %70 = load i64, i64* %count_scale, align 8, !dbg !6535
  %71 = load i32, i32* %freq.addr, align 4, !dbg !6536
  %72 = load i32, i32* %loop_nest.addr, align 4, !dbg !6537
  %73 = load i8, i8* %update_original.addr, align 1, !dbg !6538
  %call45 = call %struct.cgraph_edge* @cgraph_clone_edge(%struct.cgraph_edge* %64, %struct.cgraph_node* %65, %union.gimple_statement_d* %67, i32 %69, i64 %70, i32 %71, i32 %72, i8 zeroext %73), !dbg !6539
  br label %for.inc46, !dbg !6539

for.inc46:                                        ; preds = %for.body44
  %74 = load %struct.cgraph_edge*, %struct.cgraph_edge** %e, align 8, !dbg !6540
  %next_callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %74, i32 0, i32 6, !dbg !6541
  %75 = load %struct.cgraph_edge*, %struct.cgraph_edge** %next_callee, align 8, !dbg !6541
  store %struct.cgraph_edge* %75, %struct.cgraph_edge** %e, align 8, !dbg !6542
  br label %for.cond42, !dbg !6543, !llvm.loop !6544

for.end47:                                        ; preds = %for.cond42
  %76 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6546
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %76, i32 0, i32 11, !dbg !6547
  %77 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !6547
  %78 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6548
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %78, i32 0, i32 9, !dbg !6549
  store %struct.cgraph_node* %77, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !6550
  %79 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6551
  %clones48 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %79, i32 0, i32 11, !dbg !6553
  %80 = load %struct.cgraph_node*, %struct.cgraph_node** %clones48, align 8, !dbg !6553
  %tobool49 = icmp ne %struct.cgraph_node* %80, null, !dbg !6551
  br i1 %tobool49, label %if.then50, label %if.end52, !dbg !6554

if.then50:                                        ; preds = %for.end47
  %81 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6555
  %82 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6556
  %clones51 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %82, i32 0, i32 11, !dbg !6557
  %83 = load %struct.cgraph_node*, %struct.cgraph_node** %clones51, align 8, !dbg !6557
  %prev_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %83, i32 0, i32 10, !dbg !6558
  store %struct.cgraph_node* %81, %struct.cgraph_node** %prev_sibling_clone, align 8, !dbg !6559
  br label %if.end52, !dbg !6556

if.end52:                                         ; preds = %if.then50, %for.end47
  %84 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6560
  %85 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6561
  %clones53 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %85, i32 0, i32 11, !dbg !6562
  store %struct.cgraph_node* %84, %struct.cgraph_node** %clones53, align 8, !dbg !6563
  %86 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6564
  %87 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6565
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %87, i32 0, i32 12, !dbg !6566
  store %struct.cgraph_node* %86, %struct.cgraph_node** %clone_of, align 8, !dbg !6567
  %88 = load %struct.cgraph_node*, %struct.cgraph_node** %n.addr, align 8, !dbg !6568
  %89 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6569
  call void @cgraph_call_node_duplication_hooks(%struct.cgraph_node* %88, %struct.cgraph_node* %89), !dbg !6570
  %90 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6571
  ret %struct.cgraph_node* %90, !dbg !6572
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_cgraph_edge_p_base_iterate(%struct.VEC_cgraph_edge_p_base* %vec_, i32 %ix_, %struct.cgraph_edge** %ptr) #0 !dbg !6573 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_cgraph_edge_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.cgraph_edge**, align 8
  store %struct.VEC_cgraph_edge_p_base* %vec_, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_base** %vec_.addr, metadata !6579, metadata !DIExpression()), !dbg !6580
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6581, metadata !DIExpression()), !dbg !6580
  store %struct.cgraph_edge** %ptr, %struct.cgraph_edge*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge*** %ptr.addr, metadata !6582, metadata !DIExpression()), !dbg !6580
  %0 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !6583
  %tobool = icmp ne %struct.VEC_cgraph_edge_p_base* %0, null, !dbg !6583
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6583

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6583
  %2 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !6583
  %num = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %2, i32 0, i32 0, !dbg !6583
  %3 = load i32, i32* %num, align 8, !dbg !6583
  %cmp = icmp ult i32 %1, %3, !dbg !6583
  br i1 %cmp, label %if.then, label %if.else, !dbg !6580

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_cgraph_edge_p_base*, %struct.VEC_cgraph_edge_p_base** %vec_.addr, align 8, !dbg !6585
  %vec = getelementptr inbounds %struct.VEC_cgraph_edge_p_base, %struct.VEC_cgraph_edge_p_base* %4, i32 0, i32 2, !dbg !6585
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6585
  %idxprom = zext i32 %5 to i64, !dbg !6585
  %arrayidx = getelementptr inbounds [1 x %struct.cgraph_edge*], [1 x %struct.cgraph_edge*]* %vec, i64 0, i64 %idxprom, !dbg !6585
  %6 = load %struct.cgraph_edge*, %struct.cgraph_edge** %arrayidx, align 8, !dbg !6585
  %7 = load %struct.cgraph_edge**, %struct.cgraph_edge*** %ptr.addr, align 8, !dbg !6585
  store %struct.cgraph_edge* %6, %struct.cgraph_edge** %7, align 8, !dbg !6585
  store i32 1, i32* %retval, align 4, !dbg !6585
  br label %return, !dbg !6585

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.cgraph_edge**, %struct.cgraph_edge*** %ptr.addr, align 8, !dbg !6587
  store %struct.cgraph_edge* null, %struct.cgraph_edge** %8, align 8, !dbg !6587
  store i32 0, i32* %retval, align 4, !dbg !6587
  br label %return, !dbg !6587

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6580
  ret i32 %9, !dbg !6580
}

; Function Attrs: noinline nounwind uwtable
define internal void @cgraph_call_node_duplication_hooks(%struct.cgraph_node* %node1, %struct.cgraph_node* %node2) #0 !dbg !6589 {
entry:
  %node1.addr = alloca %struct.cgraph_node*, align 8
  %node2.addr = alloca %struct.cgraph_node*, align 8
  %entry1 = alloca %struct.cgraph_2node_hook_list*, align 8
  store %struct.cgraph_node* %node1, %struct.cgraph_node** %node1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node1.addr, metadata !6592, metadata !DIExpression()), !dbg !6593
  store %struct.cgraph_node* %node2, %struct.cgraph_node** %node2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node2.addr, metadata !6594, metadata !DIExpression()), !dbg !6595
  call void @llvm.dbg.declare(metadata %struct.cgraph_2node_hook_list** %entry1, metadata !6596, metadata !DIExpression()), !dbg !6597
  %0 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** @first_cgraph_node_duplicated_hook, align 8, !dbg !6598
  store %struct.cgraph_2node_hook_list* %0, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !6597
  br label %while.cond, !dbg !6599

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !6600
  %tobool = icmp ne %struct.cgraph_2node_hook_list* %1, null, !dbg !6599
  br i1 %tobool, label %while.body, label %while.end, !dbg !6599

while.body:                                       ; preds = %while.cond
  %2 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !6601
  %hook = getelementptr inbounds %struct.cgraph_2node_hook_list, %struct.cgraph_2node_hook_list* %2, i32 0, i32 0, !dbg !6603
  %3 = load void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)*, void (%struct.cgraph_node*, %struct.cgraph_node*, i8*)** %hook, align 8, !dbg !6603
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node1.addr, align 8, !dbg !6604
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node2.addr, align 8, !dbg !6605
  %6 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !6606
  %data = getelementptr inbounds %struct.cgraph_2node_hook_list, %struct.cgraph_2node_hook_list* %6, i32 0, i32 1, !dbg !6607
  %7 = load i8*, i8** %data, align 8, !dbg !6607
  call void %3(%struct.cgraph_node* %4, %struct.cgraph_node* %5, i8* %7), !dbg !6601
  %8 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !6608
  %next = getelementptr inbounds %struct.cgraph_2node_hook_list, %struct.cgraph_2node_hook_list* %8, i32 0, i32 2, !dbg !6609
  %9 = load %struct.cgraph_2node_hook_list*, %struct.cgraph_2node_hook_list** %next, align 8, !dbg !6609
  store %struct.cgraph_2node_hook_list* %9, %struct.cgraph_2node_hook_list** %entry1, align 8, !dbg !6610
  br label %while.cond, !dbg !6599, !llvm.loop !6611

while.end:                                        ; preds = %while.cond
  ret void, !dbg !6613
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cgraph_node* @cgraph_create_virtual_clone(%struct.cgraph_node* %old_node, %struct.VEC_cgraph_edge_p_heap* %redirect_callers, %struct.VEC_ipa_replace_map_p_gc* %tree_map, %struct.bitmap_head_def* %args_to_skip) #0 !dbg !6614 {
entry:
  %old_node.addr = alloca %struct.cgraph_node*, align 8
  %redirect_callers.addr = alloca %struct.VEC_cgraph_edge_p_heap*, align 8
  %tree_map.addr = alloca %struct.VEC_ipa_replace_map_p_gc*, align 8
  %args_to_skip.addr = alloca %struct.bitmap_head_def*, align 8
  %old_decl = alloca %union.tree_node*, align 8
  %new_node = alloca %struct.cgraph_node*, align 8
  %new_decl = alloca %union.tree_node*, align 8
  %key = alloca %struct.cgraph_node, align 8
  %slot = alloca %struct.cgraph_node**, align 8
  %newi = alloca i32, align 4
  %oldi = alloca i32, align 4
  %arg = alloca %union.tree_node*, align 8
  %new_args_to_skip = alloca %struct.bitmap_head_def*, align 8
  %orig_node = alloca %struct.cgraph_node*, align 8
  %aslot = alloca i8**, align 8
  %name86 = alloca %union.tree_node*, align 8
  store %struct.cgraph_node* %old_node, %struct.cgraph_node** %old_node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %old_node.addr, metadata !6617, metadata !DIExpression()), !dbg !6618
  store %struct.VEC_cgraph_edge_p_heap* %redirect_callers, %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, metadata !6619, metadata !DIExpression()), !dbg !6620
  store %struct.VEC_ipa_replace_map_p_gc* %tree_map, %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, metadata !6621, metadata !DIExpression()), !dbg !6622
  store %struct.bitmap_head_def* %args_to_skip, %struct.bitmap_head_def** %args_to_skip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %args_to_skip.addr, metadata !6623, metadata !DIExpression()), !dbg !6624
  call void @llvm.dbg.declare(metadata %union.tree_node** %old_decl, metadata !6625, metadata !DIExpression()), !dbg !6626
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %old_node.addr, align 8, !dbg !6627
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 0, !dbg !6628
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !6628
  store %union.tree_node* %1, %union.tree_node** %old_decl, align 8, !dbg !6626
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %new_node, metadata !6629, metadata !DIExpression()), !dbg !6630
  store %struct.cgraph_node* null, %struct.cgraph_node** %new_node, align 8, !dbg !6630
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_decl, metadata !6631, metadata !DIExpression()), !dbg !6632
  call void @llvm.dbg.declare(metadata %struct.cgraph_node* %key, metadata !6633, metadata !DIExpression()), !dbg !6634
  call void @llvm.dbg.declare(metadata %struct.cgraph_node*** %slot, metadata !6635, metadata !DIExpression()), !dbg !6636
  %2 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !6637
  %call = call zeroext i8 @tree_versionable_function_p(%union.tree_node* %2), !dbg !6637
  %tobool = icmp ne i8 %call, 0, !dbg !6637
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6637

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 1973, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6637
  br label %cond.end, !dbg !6637

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6637

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6637
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !6638
  %tobool1 = icmp ne %struct.bitmap_head_def* %3, null, !dbg !6638
  br i1 %tobool1, label %if.else, label %if.then, !dbg !6640

if.then:                                          ; preds = %cond.end
  %4 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !6641
  %call2 = call %union.tree_node* @copy_node_stat(%union.tree_node* %4), !dbg !6641
  store %union.tree_node* %call2, %union.tree_node** %new_decl, align 8, !dbg !6642
  br label %if.end, !dbg !6643

if.else:                                          ; preds = %cond.end
  %5 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !6644
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !6645
  %call3 = call %union.tree_node* @build_function_decl_skip_args(%union.tree_node* %5, %struct.bitmap_head_def* %6), !dbg !6646
  store %union.tree_node* %call3, %union.tree_node** %new_decl, align 8, !dbg !6647
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6648
  %function_decl = bitcast %union.tree_node* %7 to %struct.tree_function_decl*, !dbg !6648
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !6648
  store %struct.function* null, %struct.function** %f, align 8, !dbg !6649
  %8 = load %union.tree_node*, %union.tree_node** %old_decl, align 8, !dbg !6650
  %call4 = call %union.tree_node* @clone_function_name(%union.tree_node* %8), !dbg !6651
  %9 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6652
  %decl_minimal = bitcast %union.tree_node* %9 to %struct.tree_decl_minimal*, !dbg !6652
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !6652
  store %union.tree_node* %call4, %union.tree_node** %name, align 8, !dbg !6653
  %10 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6654
  %decl_minimal5 = bitcast %union.tree_node* %10 to %struct.tree_decl_minimal*, !dbg !6654
  %name6 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal5, i32 0, i32 3, !dbg !6654
  %11 = load %union.tree_node*, %union.tree_node** %name6, align 8, !dbg !6654
  %12 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6654
  %decl_with_vis = bitcast %union.tree_node* %12 to %struct.tree_decl_with_vis*, !dbg !6654
  %assembler_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 1, !dbg !6654
  store %union.tree_node* %11, %union.tree_node** %assembler_name, align 8, !dbg !6654
  %13 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6655
  call void @set_decl_rtl(%union.tree_node* %13, %struct.rtx_def* null), !dbg !6655
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %old_node.addr, align 8, !dbg !6656
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %old_node.addr, align 8, !dbg !6657
  %count = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %15, i32 0, i32 23, !dbg !6658
  %16 = load i64, i64* %count, align 8, !dbg !6658
  %17 = load %struct.VEC_cgraph_edge_p_heap*, %struct.VEC_cgraph_edge_p_heap** %redirect_callers.addr, align 8, !dbg !6659
  %call7 = call %struct.cgraph_node* @cgraph_clone_node(%struct.cgraph_node* %14, i64 %16, i32 1000, i32 0, i8 zeroext 0, %struct.VEC_cgraph_edge_p_heap* %17), !dbg !6660
  store %struct.cgraph_node* %call7, %struct.cgraph_node** %new_node, align 8, !dbg !6661
  %18 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6662
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6663
  %decl8 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i32 0, i32 0, !dbg !6664
  store %union.tree_node* %18, %union.tree_node** %decl8, align 8, !dbg !6665
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6666
  %decl9 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i32 0, i32 0, !dbg !6666
  %21 = load %union.tree_node*, %union.tree_node** %decl9, align 8, !dbg !6666
  %decl_common = bitcast %union.tree_node* %21 to %struct.tree_decl_common*, !dbg !6666
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !6666
  %22 = bitcast i40* %decl_flag_1 to i64*, !dbg !6666
  %bf.load = load i64, i64* %22, align 8, !dbg !6667
  %bf.clear = and i64 %bf.load, -33554433, !dbg !6667
  store i64 %bf.clear, i64* %22, align 8, !dbg !6667
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6668
  %decl10 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %23, i32 0, i32 0, !dbg !6668
  %24 = load %union.tree_node*, %union.tree_node** %decl10, align 8, !dbg !6668
  %decl_with_vis11 = bitcast %union.tree_node* %24 to %struct.tree_decl_with_vis*, !dbg !6668
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis11, i32 0, i32 3, !dbg !6668
  store %union.tree_node* null, %union.tree_node** %comdat_group, align 8, !dbg !6669
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6670
  %decl12 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %25, i32 0, i32 0, !dbg !6670
  %26 = load %union.tree_node*, %union.tree_node** %decl12, align 8, !dbg !6670
  %base = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !6670
  %27 = bitcast %struct.tree_base* %base to i64*, !dbg !6670
  %bf.load13 = load i64, i64* %27, align 8, !dbg !6671
  %bf.clear14 = and i64 %bf.load13, -134217729, !dbg !6671
  store i64 %bf.clear14, i64* %27, align 8, !dbg !6671
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6672
  %decl15 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i32 0, i32 0, !dbg !6672
  %29 = load %union.tree_node*, %union.tree_node** %decl15, align 8, !dbg !6672
  %decl_with_vis16 = bitcast %union.tree_node* %29 to %struct.tree_decl_with_vis*, !dbg !6672
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis16, i32 0, i32 4, !dbg !6672
  %30 = bitcast i24* %comdat_flag to i32*, !dbg !6672
  %bf.load17 = load i32, i32* %30, align 8, !dbg !6673
  %bf.clear18 = and i32 %bf.load17, -513, !dbg !6673
  store i32 %bf.clear18, i32* %30, align 8, !dbg !6673
  %31 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6674
  %decl19 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %31, i32 0, i32 0, !dbg !6674
  %32 = load %union.tree_node*, %union.tree_node** %decl19, align 8, !dbg !6674
  %decl_with_vis20 = bitcast %union.tree_node* %32 to %struct.tree_decl_with_vis*, !dbg !6674
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis20, i32 0, i32 4, !dbg !6674
  %33 = bitcast i24* %weak_flag to i32*, !dbg !6674
  %bf.load21 = load i32, i32* %33, align 8, !dbg !6675
  %bf.clear22 = and i32 %bf.load21, -129, !dbg !6675
  store i32 %bf.clear22, i32* %33, align 8, !dbg !6675
  %34 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map.addr, align 8, !dbg !6676
  %35 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6677
  %clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %35, i32 0, i32 21, !dbg !6678
  %tree_map23 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone, i32 0, i32 0, !dbg !6679
  store %struct.VEC_ipa_replace_map_p_gc* %34, %struct.VEC_ipa_replace_map_p_gc** %tree_map23, align 8, !dbg !6680
  %36 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !6681
  %37 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6682
  %clone24 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %37, i32 0, i32 21, !dbg !6683
  %args_to_skip25 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone24, i32 0, i32 1, !dbg !6684
  store %struct.bitmap_head_def* %36, %struct.bitmap_head_def** %args_to_skip25, align 8, !dbg !6685
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !6686
  %tobool26 = icmp ne %struct.bitmap_head_def* %38, null, !dbg !6686
  br i1 %tobool26, label %if.else31, label %if.then27, !dbg !6688

if.then27:                                        ; preds = %if.end
  %39 = load %struct.cgraph_node*, %struct.cgraph_node** %old_node.addr, align 8, !dbg !6689
  %clone28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %39, i32 0, i32 21, !dbg !6690
  %combined_args_to_skip = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone28, i32 0, i32 2, !dbg !6691
  %40 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %combined_args_to_skip, align 8, !dbg !6691
  %41 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6692
  %clone29 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %41, i32 0, i32 21, !dbg !6693
  %combined_args_to_skip30 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone29, i32 0, i32 2, !dbg !6694
  store %struct.bitmap_head_def* %40, %struct.bitmap_head_def** %combined_args_to_skip30, align 8, !dbg !6695
  br label %if.end64, !dbg !6692

if.else31:                                        ; preds = %if.end
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %old_node.addr, align 8, !dbg !6696
  %clone32 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i32 0, i32 21, !dbg !6698
  %combined_args_to_skip33 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone32, i32 0, i32 2, !dbg !6699
  %43 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %combined_args_to_skip33, align 8, !dbg !6699
  %tobool34 = icmp ne %struct.bitmap_head_def* %43, null, !dbg !6696
  br i1 %tobool34, label %if.then35, label %if.else60, !dbg !6700

if.then35:                                        ; preds = %if.else31
  call void @llvm.dbg.declare(metadata i32* %newi, metadata !6701, metadata !DIExpression()), !dbg !6703
  store i32 0, i32* %newi, align 4, !dbg !6703
  call void @llvm.dbg.declare(metadata i32* %oldi, metadata !6704, metadata !DIExpression()), !dbg !6705
  store i32 0, i32* %oldi, align 4, !dbg !6705
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6706, metadata !DIExpression()), !dbg !6707
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %new_args_to_skip, metadata !6708, metadata !DIExpression()), !dbg !6709
  %call36 = call %struct.bitmap_head_def* @bitmap_gc_alloc_stat(), !dbg !6710
  store %struct.bitmap_head_def* %call36, %struct.bitmap_head_def** %new_args_to_skip, align 8, !dbg !6709
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %orig_node, metadata !6711, metadata !DIExpression()), !dbg !6712
  %44 = load %struct.cgraph_node*, %struct.cgraph_node** %old_node.addr, align 8, !dbg !6713
  store %struct.cgraph_node* %44, %struct.cgraph_node** %orig_node, align 8, !dbg !6715
  br label %for.cond, !dbg !6716

for.cond:                                         ; preds = %for.inc, %if.then35
  %45 = load %struct.cgraph_node*, %struct.cgraph_node** %orig_node, align 8, !dbg !6717
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %45, i32 0, i32 12, !dbg !6719
  %46 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !6719
  %tobool37 = icmp ne %struct.cgraph_node* %46, null, !dbg !6720
  br i1 %tobool37, label %for.body, label %for.end, !dbg !6720

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !6720

for.inc:                                          ; preds = %for.body
  %47 = load %struct.cgraph_node*, %struct.cgraph_node** %orig_node, align 8, !dbg !6721
  %clone_of38 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %47, i32 0, i32 12, !dbg !6722
  %48 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of38, align 8, !dbg !6722
  store %struct.cgraph_node* %48, %struct.cgraph_node** %orig_node, align 8, !dbg !6723
  br label %for.cond, !dbg !6724, !llvm.loop !6725

for.end:                                          ; preds = %for.cond
  %49 = load %struct.cgraph_node*, %struct.cgraph_node** %orig_node, align 8, !dbg !6727
  %decl39 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %49, i32 0, i32 0, !dbg !6727
  %50 = load %union.tree_node*, %union.tree_node** %decl39, align 8, !dbg !6727
  %decl_non_common = bitcast %union.tree_node* %50 to %struct.tree_decl_non_common*, !dbg !6727
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 2, !dbg !6727
  %51 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !6727
  store %union.tree_node* %51, %union.tree_node** %arg, align 8, !dbg !6729
  br label %for.cond40, !dbg !6730

for.cond40:                                       ; preds = %for.inc55, %for.end
  %52 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6731
  %tobool41 = icmp ne %union.tree_node* %52, null, !dbg !6733
  br i1 %tobool41, label %for.body42, label %for.end57, !dbg !6733

for.body42:                                       ; preds = %for.cond40
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** %old_node.addr, align 8, !dbg !6734
  %clone43 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %53, i32 0, i32 21, !dbg !6737
  %combined_args_to_skip44 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone43, i32 0, i32 2, !dbg !6738
  %54 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %combined_args_to_skip44, align 8, !dbg !6738
  %55 = load i32, i32* %oldi, align 4, !dbg !6739
  %call45 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %54, i32 %55), !dbg !6740
  %tobool46 = icmp ne i32 %call45, 0, !dbg !6740
  br i1 %tobool46, label %if.then47, label %if.end49, !dbg !6741

if.then47:                                        ; preds = %for.body42
  %56 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_args_to_skip, align 8, !dbg !6742
  %57 = load i32, i32* %oldi, align 4, !dbg !6744
  %call48 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %56, i32 %57), !dbg !6745
  br label %for.inc55, !dbg !6746

if.end49:                                         ; preds = %for.body42
  %58 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !6747
  %59 = load i32, i32* %newi, align 4, !dbg !6749
  %call50 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %58, i32 %59), !dbg !6750
  %tobool51 = icmp ne i32 %call50, 0, !dbg !6750
  br i1 %tobool51, label %if.then52, label %if.end54, !dbg !6751

if.then52:                                        ; preds = %if.end49
  %60 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_args_to_skip, align 8, !dbg !6752
  %61 = load i32, i32* %oldi, align 4, !dbg !6753
  %call53 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %60, i32 %61), !dbg !6754
  br label %if.end54, !dbg !6754

if.end54:                                         ; preds = %if.then52, %if.end49
  %62 = load i32, i32* %newi, align 4, !dbg !6755
  %inc = add nsw i32 %62, 1, !dbg !6755
  store i32 %inc, i32* %newi, align 4, !dbg !6755
  br label %for.inc55, !dbg !6756

for.inc55:                                        ; preds = %if.end54, %if.then47
  %63 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6757
  %common = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !6757
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !6757
  %64 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6757
  store %union.tree_node* %64, %union.tree_node** %arg, align 8, !dbg !6758
  %65 = load i32, i32* %oldi, align 4, !dbg !6759
  %inc56 = add nsw i32 %65, 1, !dbg !6759
  store i32 %inc56, i32* %oldi, align 4, !dbg !6759
  br label %for.cond40, !dbg !6760, !llvm.loop !6761

for.end57:                                        ; preds = %for.cond40
  %66 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %new_args_to_skip, align 8, !dbg !6763
  %67 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6764
  %clone58 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %67, i32 0, i32 21, !dbg !6765
  %combined_args_to_skip59 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone58, i32 0, i32 2, !dbg !6766
  store %struct.bitmap_head_def* %66, %struct.bitmap_head_def** %combined_args_to_skip59, align 8, !dbg !6767
  br label %if.end63, !dbg !6768

if.else60:                                        ; preds = %if.else31
  %68 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %args_to_skip.addr, align 8, !dbg !6769
  %69 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6770
  %clone61 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %69, i32 0, i32 21, !dbg !6771
  %combined_args_to_skip62 = getelementptr inbounds %struct.cgraph_clone_info, %struct.cgraph_clone_info* %clone61, i32 0, i32 2, !dbg !6772
  store %struct.bitmap_head_def* %68, %struct.bitmap_head_def** %combined_args_to_skip62, align 8, !dbg !6773
  br label %if.end63

if.end63:                                         ; preds = %if.else60, %for.end57
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then27
  %70 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6774
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %70, i32 0, i32 18, !dbg !6775
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !6776
  %bf.load65 = load i8, i8* %externally_visible, align 8, !dbg !6777
  %bf.clear66 = and i8 %bf.load65, -3, !dbg !6777
  store i8 %bf.clear66, i8* %externally_visible, align 8, !dbg !6777
  %71 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6778
  %local67 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %71, i32 0, i32 18, !dbg !6779
  %local68 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local67, i32 0, i32 2, !dbg !6780
  %bf.load69 = load i8, i8* %local68, align 8, !dbg !6781
  %bf.clear70 = and i8 %bf.load69, -2, !dbg !6781
  %bf.set = or i8 %bf.clear70, 1, !dbg !6781
  store i8 %bf.set, i8* %local68, align 8, !dbg !6781
  %72 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6782
  %lowered = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %72, i32 0, i32 27, !dbg !6783
  %bf.load71 = load i16, i16* %lowered, align 4, !dbg !6784
  %bf.clear72 = and i16 %bf.load71, -17, !dbg !6784
  %bf.set73 = or i16 %bf.clear72, 16, !dbg !6784
  store i16 %bf.set73, i16* %lowered, align 4, !dbg !6784
  %73 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6785
  %reachable = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %73, i32 0, i32 27, !dbg !6786
  %bf.load74 = load i16, i16* %reachable, align 4, !dbg !6787
  %bf.clear75 = and i16 %bf.load74, -9, !dbg !6787
  %bf.set76 = or i16 %bf.clear75, 8, !dbg !6787
  store i16 %bf.set76, i16* %reachable, align 4, !dbg !6787
  %74 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6788
  %decl77 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %key, i32 0, i32 0, !dbg !6789
  store %union.tree_node* %74, %union.tree_node** %decl77, align 8, !dbg !6790
  %75 = load %struct.htab*, %struct.htab** @cgraph_hash, align 8, !dbg !6791
  %76 = bitcast %struct.cgraph_node* %key to i8*, !dbg !6792
  %call78 = call i8** @htab_find_slot(%struct.htab* %75, i8* %76, i32 1), !dbg !6793
  %77 = bitcast i8** %call78 to %struct.cgraph_node**, !dbg !6794
  store %struct.cgraph_node** %77, %struct.cgraph_node*** %slot, align 8, !dbg !6795
  %78 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !6796
  %79 = load %struct.cgraph_node*, %struct.cgraph_node** %78, align 8, !dbg !6796
  %tobool79 = icmp ne %struct.cgraph_node* %79, null, !dbg !6796
  br i1 %tobool79, label %cond.true80, label %cond.false81, !dbg !6796

cond.true80:                                      ; preds = %if.end64
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2035, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6796
  br label %cond.end82, !dbg !6796

cond.false81:                                     ; preds = %if.end64
  br label %cond.end82, !dbg !6796

cond.end82:                                       ; preds = %cond.false81, %cond.true80
  %cond83 = phi i32 [ 0, %cond.true80 ], [ 0, %cond.false81 ], !dbg !6796
  %80 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6797
  %81 = load %struct.cgraph_node**, %struct.cgraph_node*** %slot, align 8, !dbg !6798
  store %struct.cgraph_node* %80, %struct.cgraph_node** %81, align 8, !dbg !6799
  %82 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !6800
  %tobool84 = icmp ne %struct.htab* %82, null, !dbg !6800
  br i1 %tobool84, label %if.then85, label %if.end95, !dbg !6802

if.then85:                                        ; preds = %cond.end82
  call void @llvm.dbg.declare(metadata i8*** %aslot, metadata !6803, metadata !DIExpression()), !dbg !6805
  call void @llvm.dbg.declare(metadata %union.tree_node** %name86, metadata !6806, metadata !DIExpression()), !dbg !6807
  %83 = load %union.tree_node*, %union.tree_node** %new_decl, align 8, !dbg !6808
  %call87 = call %union.tree_node* @decl_assembler_name(%union.tree_node* %83), !dbg !6808
  store %union.tree_node* %call87, %union.tree_node** %name86, align 8, !dbg !6807
  %84 = load %struct.htab*, %struct.htab** @assembler_name_hash, align 8, !dbg !6809
  %85 = load %union.tree_node*, %union.tree_node** %name86, align 8, !dbg !6810
  %86 = bitcast %union.tree_node* %85 to i8*, !dbg !6810
  %87 = load %union.tree_node*, %union.tree_node** %name86, align 8, !dbg !6811
  %call88 = call i32 @decl_assembler_name_hash(%union.tree_node* %87), !dbg !6812
  %call89 = call i8** @htab_find_slot_with_hash(%struct.htab* %84, i8* %86, i32 %call88, i32 1), !dbg !6813
  store i8** %call89, i8*** %aslot, align 8, !dbg !6814
  %88 = load i8**, i8*** %aslot, align 8, !dbg !6815
  %89 = load i8*, i8** %88, align 8, !dbg !6815
  %tobool90 = icmp ne i8* %89, null, !dbg !6815
  br i1 %tobool90, label %cond.true91, label %cond.false92, !dbg !6815

cond.true91:                                      ; preds = %if.then85
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2045, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6815
  br label %cond.end93, !dbg !6815

cond.false92:                                     ; preds = %if.then85
  br label %cond.end93, !dbg !6815

cond.end93:                                       ; preds = %cond.false92, %cond.true91
  %cond94 = phi i32 [ 0, %cond.true91 ], [ 0, %cond.false92 ], !dbg !6815
  %90 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6816
  %91 = bitcast %struct.cgraph_node* %90 to i8*, !dbg !6816
  %92 = load i8**, i8*** %aslot, align 8, !dbg !6817
  store i8* %91, i8** %92, align 8, !dbg !6818
  br label %if.end95, !dbg !6819

if.end95:                                         ; preds = %cond.end93, %cond.end82
  %93 = load %struct.cgraph_node*, %struct.cgraph_node** %new_node, align 8, !dbg !6820
  ret %struct.cgraph_node* %93, !dbg !6821
}

declare dso_local zeroext i8 @tree_versionable_function_p(%union.tree_node*) #2

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_function_decl_skip_args(%union.tree_node*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @clone_function_name(%union.tree_node* %decl) #0 !dbg !6822 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %name = alloca %union.tree_node*, align 8
  %len = alloca i64, align 8
  %tmp_name = alloca i8*, align 8
  %prefix = alloca i8*, align 8
  %name_ = alloca i8*, align 8
  %output_ = alloca i8*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !6825, metadata !DIExpression()), !dbg !6826
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !6827, metadata !DIExpression()), !dbg !6828
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !6829
  %call = call %union.tree_node* @decl_assembler_name(%union.tree_node* %0), !dbg !6829
  store %union.tree_node* %call, %union.tree_node** %name, align 8, !dbg !6828
  call void @llvm.dbg.declare(metadata i64* %len, metadata !6830, metadata !DIExpression()), !dbg !6831
  %1 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6832
  %identifier = bitcast %union.tree_node* %1 to %struct.tree_identifier*, !dbg !6832
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !6832
  %len1 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !6832
  %2 = load i32, i32* %len1, align 8, !dbg !6832
  %conv = zext i32 %2 to i64, !dbg !6832
  store i64 %conv, i64* %len, align 8, !dbg !6831
  call void @llvm.dbg.declare(metadata i8** %tmp_name, metadata !6833, metadata !DIExpression()), !dbg !6834
  call void @llvm.dbg.declare(metadata i8** %prefix, metadata !6835, metadata !DIExpression()), !dbg !6836
  %3 = load i64, i64* %len, align 8, !dbg !6837
  %add = add i64 %3, 6, !dbg !6837
  %add2 = add i64 %add, 1, !dbg !6837
  %mul = mul i64 1, %add2, !dbg !6837
  %4 = alloca i8, i64 %mul, align 16, !dbg !6837
  store i8* %4, i8** %prefix, align 8, !dbg !6838
  %5 = load i8*, i8** %prefix, align 8, !dbg !6839
  %6 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !6840
  %identifier3 = bitcast %union.tree_node* %6 to %struct.tree_identifier*, !dbg !6840
  %id4 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier3, i32 0, i32 1, !dbg !6840
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id4, i32 0, i32 0, !dbg !6840
  %7 = load i8*, i8** %str, align 8, !dbg !6840
  %8 = load i64, i64* %len, align 8, !dbg !6841
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 %7, i64 %8, i1 false), !dbg !6842
  %9 = load i8*, i8** %prefix, align 8, !dbg !6843
  %10 = load i64, i64* %len, align 8, !dbg !6844
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %10, !dbg !6845
  %call5 = call i8* @strcpy(i8* %add.ptr, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i64 0, i64 0)), !dbg !6846
  %11 = load i8*, i8** %prefix, align 8, !dbg !6847
  %12 = load i64, i64* %len, align 8, !dbg !6848
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !6847
  store i8 46, i8* %arrayidx, align 1, !dbg !6849
  br label %do.body, !dbg !6850

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %name_, metadata !6851, metadata !DIExpression()), !dbg !6853
  %13 = load i8*, i8** %prefix, align 8, !dbg !6853
  store i8* %13, i8** %name_, align 8, !dbg !6853
  call void @llvm.dbg.declare(metadata i8** %output_, metadata !6854, metadata !DIExpression()), !dbg !6853
  %14 = load i8*, i8** %name_, align 8, !dbg !6853
  %call6 = call i64 @strlen(i8* %14), !dbg !6853
  %add7 = add i64 %call6, 32, !dbg !6853
  %15 = alloca i8, i64 %add7, align 16, !dbg !6853
  store i8* %15, i8** %tmp_name, align 8, !dbg !6853
  store i8* %15, i8** %output_, align 8, !dbg !6853
  %16 = load i8*, i8** %output_, align 8, !dbg !6853
  %17 = load i8*, i8** %name_, align 8, !dbg !6853
  %18 = load i32, i32* @clone_fn_id_num, align 4, !dbg !6853
  %inc = add i32 %18, 1, !dbg !6853
  store i32 %inc, i32* @clone_fn_id_num, align 4, !dbg !6853
  %conv8 = zext i32 %18 to i64, !dbg !6853
  %call9 = call i32 (i8*, i8*, ...) @sprintf(i8* %16, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.67, i64 0, i64 0), i8* %17, i64 %conv8), !dbg !6853
  br label %do.end, !dbg !6853

do.end:                                           ; preds = %do.body
  %19 = load i8*, i8** %tmp_name, align 8, !dbg !6856
  %call10 = call %union.tree_node* @get_identifier(i8* %19), !dbg !6857
  ret %union.tree_node* %call10, !dbg !6858
}

declare dso_local void @set_decl_rtl(%union.tree_node*, %struct.rtx_def*) #2

declare dso_local %struct.bitmap_head_def* @bitmap_gc_alloc_stat() #2

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_unnest_node(%struct.cgraph_node* %node) #0 !dbg !6859 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %node2 = alloca %struct.cgraph_node**, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !6860, metadata !DIExpression()), !dbg !6861
  call void @llvm.dbg.declare(metadata %struct.cgraph_node*** %node2, metadata !6862, metadata !DIExpression()), !dbg !6863
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6864
  %origin = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 5, !dbg !6865
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %origin, align 8, !dbg !6865
  %nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 6, !dbg !6866
  store %struct.cgraph_node** %nested, %struct.cgraph_node*** %node2, align 8, !dbg !6863
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6867
  %origin1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 5, !dbg !6867
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %origin1, align 8, !dbg !6867
  %tobool = icmp ne %struct.cgraph_node* %3, null, !dbg !6867
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6867

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2057, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6867
  br label %cond.end, !dbg !6867

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6867

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6867
  br label %while.cond, !dbg !6868

while.cond:                                       ; preds = %while.body, %cond.end
  %4 = load %struct.cgraph_node**, %struct.cgraph_node*** %node2, align 8, !dbg !6869
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %4, align 8, !dbg !6870
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6871
  %cmp = icmp ne %struct.cgraph_node* %5, %6, !dbg !6872
  br i1 %cmp, label %while.body, label %while.end, !dbg !6868

while.body:                                       ; preds = %while.cond
  %7 = load %struct.cgraph_node**, %struct.cgraph_node*** %node2, align 8, !dbg !6873
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %7, align 8, !dbg !6874
  %next_nested = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 7, !dbg !6875
  store %struct.cgraph_node** %next_nested, %struct.cgraph_node*** %node2, align 8, !dbg !6876
  br label %while.cond, !dbg !6868, !llvm.loop !6877

while.end:                                        ; preds = %while.cond
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6878
  %next_nested2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 7, !dbg !6879
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %next_nested2, align 8, !dbg !6879
  %11 = load %struct.cgraph_node**, %struct.cgraph_node*** %node2, align 8, !dbg !6880
  store %struct.cgraph_node* %10, %struct.cgraph_node** %11, align 8, !dbg !6881
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !6882
  %origin3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 5, !dbg !6883
  store %struct.cgraph_node* null, %struct.cgraph_node** %origin3, align 8, !dbg !6884
  ret void, !dbg !6885
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_add_new_function(%union.tree_node* %fndecl, i8 zeroext %lowered) #0 !dbg !6886 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %lowered.addr = alloca i8, align 1
  %node = alloca %struct.cgraph_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6889, metadata !DIExpression()), !dbg !6890
  store i8 %lowered, i8* %lowered.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %lowered.addr, metadata !6891, metadata !DIExpression()), !dbg !6892
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !6893, metadata !DIExpression()), !dbg !6894
  %0 = load i32, i32* @cgraph_state, align 4, !dbg !6895
  switch i32 %0, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb2
    i32 3, label %sw.bb2
    i32 4, label %sw.bb34
  ], !dbg !6896

sw.bb:                                            ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6897
  %call = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %1), !dbg !6899
  store %struct.cgraph_node* %call, %struct.cgraph_node** %node, align 8, !dbg !6900
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_new_nodes, align 8, !dbg !6901
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6902
  %next_needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 8, !dbg !6903
  store %struct.cgraph_node* %2, %struct.cgraph_node** %next_needed, align 8, !dbg !6904
  %4 = load i8, i8* %lowered.addr, align 1, !dbg !6905
  %tobool = icmp ne i8 %4, 0, !dbg !6905
  br i1 %tobool, label %if.then, label %if.end, !dbg !6907

if.then:                                          ; preds = %sw.bb
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6908
  %lowered1 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 27, !dbg !6909
  %bf.load = load i16, i16* %lowered1, align 4, !dbg !6910
  %bf.clear = and i16 %bf.load, -17, !dbg !6910
  %bf.set = or i16 %bf.clear, 16, !dbg !6910
  store i16 %bf.set, i16* %lowered1, align 4, !dbg !6910
  br label %if.end, !dbg !6908

if.end:                                           ; preds = %if.then, %sw.bb
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6911
  store %struct.cgraph_node* %6, %struct.cgraph_node** @cgraph_new_nodes, align 8, !dbg !6912
  br label %sw.epilog, !dbg !6913

sw.bb2:                                           ; preds = %entry, %entry, %entry
  %7 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6914
  %call3 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %7), !dbg !6915
  store %struct.cgraph_node* %call3, %struct.cgraph_node** %node, align 8, !dbg !6916
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6917
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %8, i32 0, i32 18, !dbg !6918
  %local4 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !6919
  %bf.load5 = load i8, i8* %local4, align 8, !dbg !6920
  %bf.clear6 = and i8 %bf.load5, -2, !dbg !6920
  store i8 %bf.clear6, i8* %local4, align 8, !dbg !6920
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6921
  %local7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 18, !dbg !6922
  %finalized = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local7, i32 0, i32 2, !dbg !6923
  %bf.load8 = load i8, i8* %finalized, align 8, !dbg !6924
  %bf.clear9 = and i8 %bf.load8, -5, !dbg !6924
  %bf.set10 = or i8 %bf.clear9, 4, !dbg !6924
  store i8 %bf.set10, i8* %finalized, align 8, !dbg !6924
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6925
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %10, i32 0, i32 27, !dbg !6926
  %bf.load11 = load i16, i16* %needed, align 4, !dbg !6927
  %bf.clear12 = and i16 %bf.load11, -2, !dbg !6927
  %bf.set13 = or i16 %bf.clear12, 1, !dbg !6927
  store i16 %bf.set13, i16* %needed, align 4, !dbg !6927
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6928
  %reachable = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %11, i32 0, i32 27, !dbg !6929
  %bf.load14 = load i16, i16* %reachable, align 4, !dbg !6930
  %bf.clear15 = and i16 %bf.load14, -9, !dbg !6930
  %bf.set16 = or i16 %bf.clear15, 8, !dbg !6930
  store i16 %bf.set16, i16* %reachable, align 4, !dbg !6930
  %12 = load i8, i8* %lowered.addr, align 1, !dbg !6931
  %tobool17 = icmp ne i8 %12, 0, !dbg !6931
  br i1 %tobool17, label %if.end25, label %land.lhs.true, !dbg !6933

land.lhs.true:                                    ; preds = %sw.bb2
  %13 = load i32, i32* @cgraph_state, align 4, !dbg !6934
  %cmp = icmp eq i32 %13, 3, !dbg !6935
  br i1 %cmp, label %if.then18, label %if.end25, !dbg !6936

if.then18:                                        ; preds = %land.lhs.true
  %14 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6937
  %function_decl = bitcast %union.tree_node* %14 to %struct.tree_function_decl*, !dbg !6937
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 1, !dbg !6937
  %15 = load %struct.function*, %struct.function** %f, align 8, !dbg !6937
  call void @push_cfun(%struct.function* %15), !dbg !6939
  %16 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6940
  store %union.tree_node* %16, %union.tree_node** @current_function_decl, align 8, !dbg !6941
  call void @gimple_register_cfg_hooks(), !dbg !6942
  %17 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6943
  call void @tree_lowering_passes(%union.tree_node* %17), !dbg !6944
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* null), !dbg !6945
  %18 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6946
  %function_decl19 = bitcast %union.tree_node* %18 to %struct.tree_function_decl*, !dbg !6946
  %f20 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl19, i32 0, i32 1, !dbg !6946
  %19 = load %struct.function*, %struct.function** %f20, align 8, !dbg !6946
  %call21 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %19), !dbg !6948
  %tobool22 = icmp ne i8 %call21, 0, !dbg !6948
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !6949

if.then23:                                        ; preds = %if.then18
  %20 = load %struct.opt_pass*, %struct.opt_pass** getelementptr inbounds (%struct.simple_ipa_opt_pass, %struct.simple_ipa_opt_pass* @pass_early_local_passes, i32 0, i32 0, i32 4), align 8, !dbg !6950
  call void @execute_pass_list(%struct.opt_pass* %20), !dbg !6951
  br label %if.end24, !dbg !6951

if.end24:                                         ; preds = %if.then23, %if.then18
  call void @bitmap_obstack_release(%struct.bitmap_obstack* null), !dbg !6952
  call void @pop_cfun(), !dbg !6953
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !6954
  store i8 1, i8* %lowered.addr, align 1, !dbg !6955
  br label %if.end25, !dbg !6956

if.end25:                                         ; preds = %if.end24, %land.lhs.true, %sw.bb2
  %21 = load i8, i8* %lowered.addr, align 1, !dbg !6957
  %tobool26 = icmp ne i8 %21, 0, !dbg !6957
  br i1 %tobool26, label %if.then27, label %if.end32, !dbg !6959

if.then27:                                        ; preds = %if.end25
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6960
  %lowered28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %22, i32 0, i32 27, !dbg !6961
  %bf.load29 = load i16, i16* %lowered28, align 4, !dbg !6962
  %bf.clear30 = and i16 %bf.load29, -17, !dbg !6962
  %bf.set31 = or i16 %bf.clear30, 16, !dbg !6962
  store i16 %bf.set31, i16* %lowered28, align 4, !dbg !6962
  br label %if.end32, !dbg !6960

if.end32:                                         ; preds = %if.then27, %if.end25
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** @cgraph_new_nodes, align 8, !dbg !6963
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6964
  %next_needed33 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %24, i32 0, i32 8, !dbg !6965
  store %struct.cgraph_node* %23, %struct.cgraph_node** %next_needed33, align 8, !dbg !6966
  %25 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !6967
  store %struct.cgraph_node* %25, %struct.cgraph_node** @cgraph_new_nodes, align 8, !dbg !6968
  br label %sw.epilog, !dbg !6969

sw.bb34:                                          ; preds = %entry
  %26 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6970
  %function_decl35 = bitcast %union.tree_node* %26 to %struct.tree_function_decl*, !dbg !6970
  %f36 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl35, i32 0, i32 1, !dbg !6970
  %27 = load %struct.function*, %struct.function** %f36, align 8, !dbg !6970
  call void @push_cfun(%struct.function* %27), !dbg !6971
  %28 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6972
  store %union.tree_node* %28, %union.tree_node** @current_function_decl, align 8, !dbg !6973
  call void @gimple_register_cfg_hooks(), !dbg !6974
  %29 = load i8, i8* %lowered.addr, align 1, !dbg !6975
  %tobool37 = icmp ne i8 %29, 0, !dbg !6975
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !6977

if.then38:                                        ; preds = %sw.bb34
  %30 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6978
  call void @tree_lowering_passes(%union.tree_node* %30), !dbg !6979
  br label %if.end39, !dbg !6979

if.end39:                                         ; preds = %if.then38, %sw.bb34
  call void @bitmap_obstack_initialize(%struct.bitmap_obstack* null), !dbg !6980
  %31 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6981
  %function_decl40 = bitcast %union.tree_node* %31 to %struct.tree_function_decl*, !dbg !6981
  %f41 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl40, i32 0, i32 1, !dbg !6981
  %32 = load %struct.function*, %struct.function** %f41, align 8, !dbg !6981
  %call42 = call zeroext i8 @gimple_in_ssa_p(%struct.function* %32), !dbg !6983
  %tobool43 = icmp ne i8 %call42, 0, !dbg !6983
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !6984

if.then44:                                        ; preds = %if.end39
  %33 = load %struct.opt_pass*, %struct.opt_pass** getelementptr inbounds (%struct.simple_ipa_opt_pass, %struct.simple_ipa_opt_pass* @pass_early_local_passes, i32 0, i32 0, i32 4), align 8, !dbg !6985
  call void @execute_pass_list(%struct.opt_pass* %33), !dbg !6986
  br label %if.end45, !dbg !6986

if.end45:                                         ; preds = %if.then44, %if.end39
  call void @bitmap_obstack_release(%struct.bitmap_obstack* null), !dbg !6987
  %34 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6988
  call void @tree_rest_of_compilation(%union.tree_node* %34), !dbg !6989
  call void @pop_cfun(), !dbg !6990
  store %union.tree_node* null, %union.tree_node** @current_function_decl, align 8, !dbg !6991
  br label %sw.epilog, !dbg !6992

sw.epilog:                                        ; preds = %entry, %if.end45, %if.end32, %if.end
  %35 = load i8, i8* %lowered.addr, align 1, !dbg !6993
  %conv = zext i8 %35 to i32, !dbg !6993
  %tobool46 = icmp ne i32 %conv, 0, !dbg !6993
  br i1 %tobool46, label %land.lhs.true47, label %if.end56, !dbg !6995

land.lhs.true47:                                  ; preds = %sw.epilog
  %36 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6996
  %function_decl48 = bitcast %union.tree_node* %36 to %struct.tree_function_decl*, !dbg !6996
  %f49 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl48, i32 0, i32 1, !dbg !6996
  %37 = load %struct.function*, %struct.function** %f49, align 8, !dbg !6996
  %call50 = call i32 @function_needs_eh_personality(%struct.function* %37), !dbg !6997
  %cmp51 = icmp eq i32 %call50, 2, !dbg !6998
  br i1 %cmp51, label %if.then53, label %if.end56, !dbg !6999

if.then53:                                        ; preds = %land.lhs.true47
  %38 = load %union.tree_node* ()*, %union.tree_node* ()** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 45), align 8, !dbg !7000
  %call54 = call %union.tree_node* %38(), !dbg !7001
  %39 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !7002
  %function_decl55 = bitcast %union.tree_node* %39 to %struct.tree_function_decl*, !dbg !7002
  %personality = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl55, i32 0, i32 2, !dbg !7002
  store %union.tree_node* %call54, %union.tree_node** %personality, align 8, !dbg !7003
  br label %if.end56, !dbg !7002

if.end56:                                         ; preds = %if.then53, %land.lhs.true47, %sw.epilog
  ret void, !dbg !7004
}

declare dso_local void @gimple_register_cfg_hooks() #2

declare dso_local void @tree_lowering_passes(%union.tree_node*) #2

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_in_ssa_p(%struct.function* %fun) #0 !dbg !7005 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !7011, metadata !DIExpression()), !dbg !7012
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7013
  %tobool = icmp ne %struct.function* %0, null, !dbg !7013
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !7014

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7015
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !7016
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !7016
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !7015
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !7017

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !7018
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !7019
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !7019
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 10, !dbg !7020
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !7020
  %bf.clear = and i8 %bf.load, 1, !dbg !7020
  %bf.cast = zext i8 %bf.clear to i32, !dbg !7020
  %tobool3 = icmp ne i32 %bf.cast, 0, !dbg !7017
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %5 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !7021
  %land.ext = zext i1 %5 to i32, !dbg !7017
  %conv = trunc i32 %land.ext to i8, !dbg !7013
  ret i8 %conv, !dbg !7022
}

declare dso_local void @execute_pass_list(%struct.opt_pass*) #2

declare dso_local void @bitmap_obstack_release(%struct.bitmap_obstack*) #2

declare dso_local void @tree_rest_of_compilation(%union.tree_node*) #2

declare dso_local i32 @function_needs_eh_personality(%struct.function*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @cgraph_node_can_be_local_p(%struct.cgraph_node* %node) #0 !dbg !7023 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7026, metadata !DIExpression()), !dbg !7027
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7028
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i32 0, i32 27, !dbg !7029
  %bf.load = load i16, i16* %needed, align 4, !dbg !7029
  %bf.clear = and i16 %bf.load, 1, !dbg !7029
  %bf.cast = zext i16 %bf.clear to i32, !dbg !7029
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7028
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !7030

land.rhs:                                         ; preds = %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7031
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !7031
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7031
  %decl_with_vis = bitcast %union.tree_node* %2 to %struct.tree_decl_with_vis*, !dbg !7031
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !7031
  %3 = bitcast i24* %comdat_flag to i32*, !dbg !7031
  %bf.load1 = load i32, i32* %3, align 8, !dbg !7031
  %bf.lshr = lshr i32 %bf.load1, 9, !dbg !7031
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !7031
  %tobool3 = icmp ne i32 %bf.clear2, 0, !dbg !7031
  br i1 %tobool3, label %land.lhs.true, label %lor.rhs, !dbg !7032

land.lhs.true:                                    ; preds = %land.rhs
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7033
  %same_comdat_group = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 14, !dbg !7034
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %same_comdat_group, align 8, !dbg !7034
  %tobool4 = icmp ne %struct.cgraph_node* %5, null, !dbg !7033
  br i1 %tobool4, label %lor.rhs, label %lor.end, !dbg !7035

lor.rhs:                                          ; preds = %land.lhs.true, %land.rhs
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7036
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 18, !dbg !7037
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !7038
  %bf.load5 = load i8, i8* %externally_visible, align 8, !dbg !7038
  %bf.lshr6 = lshr i8 %bf.load5, 1, !dbg !7038
  %bf.clear7 = and i8 %bf.lshr6, 1, !dbg !7038
  %bf.cast8 = zext i8 %bf.clear7 to i32, !dbg !7038
  %tobool9 = icmp ne i32 %bf.cast8, 0, !dbg !7039
  %lnot = xor i1 %tobool9, true, !dbg !7039
  br label %lor.end, !dbg !7035

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true
  %7 = phi i1 [ true, %land.lhs.true ], [ %lnot, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %8 = phi i1 [ false, %entry ], [ %7, %lor.end ], !dbg !7040
  %land.ext = zext i1 %8 to i32, !dbg !7030
  %conv = trunc i32 %land.ext to i8, !dbg !7041
  ret i8 %conv, !dbg !7042
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_make_decl_local(%union.tree_node* %decl) #0 !dbg !7043 {
entry:
  %decl.addr = alloca %union.tree_node*, align 8
  %rtl = alloca %struct.rtx_def*, align 8
  %symbol = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %decl, %union.tree_node** %decl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl.addr, metadata !7046, metadata !DIExpression()), !dbg !7047
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rtl, metadata !7048, metadata !DIExpression()), !dbg !7049
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %symbol, metadata !7050, metadata !DIExpression()), !dbg !7051
  %0 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7052
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7052
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7052
  %bf.load = load i64, i64* %1, align 8, !dbg !7052
  %bf.clear = and i64 %bf.load, 65535, !dbg !7052
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7052
  %cmp = icmp eq i32 %bf.cast, 32, !dbg !7054
  br i1 %cmp, label %if.then, label %if.else, !dbg !7055

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7056
  %decl_with_vis = bitcast %union.tree_node* %2 to %struct.tree_decl_with_vis*, !dbg !7056
  %common_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !7056
  %3 = bitcast i24* %common_flag to i32*, !dbg !7056
  %bf.load1 = load i32, i32* %3, align 8, !dbg !7057
  %bf.clear2 = and i32 %bf.load1, -9, !dbg !7057
  store i32 %bf.clear2, i32* %3, align 8, !dbg !7057
  br label %if.end19, !dbg !7056

if.else:                                          ; preds = %entry
  %4 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7058
  %base3 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !7058
  %5 = bitcast %struct.tree_base* %base3 to i64*, !dbg !7058
  %bf.load4 = load i64, i64* %5, align 8, !dbg !7058
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !7058
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !7058
  %cmp7 = icmp eq i32 %bf.cast6, 29, !dbg !7060
  br i1 %cmp7, label %if.then8, label %if.else18, !dbg !7061

if.then8:                                         ; preds = %if.else
  %6 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7062
  %decl_with_vis9 = bitcast %union.tree_node* %6 to %struct.tree_decl_with_vis*, !dbg !7062
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis9, i32 0, i32 4, !dbg !7062
  %7 = bitcast i24* %comdat_flag to i32*, !dbg !7062
  %bf.load10 = load i32, i32* %7, align 8, !dbg !7064
  %bf.clear11 = and i32 %bf.load10, -513, !dbg !7064
  store i32 %bf.clear11, i32* %7, align 8, !dbg !7064
  %8 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7065
  %decl_with_vis12 = bitcast %union.tree_node* %8 to %struct.tree_decl_with_vis*, !dbg !7065
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis12, i32 0, i32 3, !dbg !7065
  store %union.tree_node* null, %union.tree_node** %comdat_group, align 8, !dbg !7066
  %9 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7067
  %decl_with_vis13 = bitcast %union.tree_node* %9 to %struct.tree_decl_with_vis*, !dbg !7067
  %weak_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis13, i32 0, i32 4, !dbg !7067
  %10 = bitcast i24* %weak_flag to i32*, !dbg !7067
  %bf.load14 = load i32, i32* %10, align 8, !dbg !7068
  %bf.clear15 = and i32 %bf.load14, -129, !dbg !7068
  store i32 %bf.clear15, i32* %10, align 8, !dbg !7068
  %11 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7069
  %decl_common = bitcast %union.tree_node* %11 to %struct.tree_decl_common*, !dbg !7069
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7069
  %12 = bitcast i40* %decl_flag_1 to i64*, !dbg !7069
  %bf.load16 = load i64, i64* %12, align 8, !dbg !7070
  %bf.clear17 = and i64 %bf.load16, -33554433, !dbg !7070
  store i64 %bf.clear17, i64* %12, align 8, !dbg !7070
  br label %if.end, !dbg !7071

if.else18:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2212, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7072
  br label %if.end

if.end:                                           ; preds = %if.else18, %if.then8
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then
  %13 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7073
  %base20 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7073
  %14 = bitcast %struct.tree_base* %base20 to i64*, !dbg !7073
  %bf.load21 = load i64, i64* %14, align 8, !dbg !7074
  %bf.clear22 = and i64 %bf.load21, -134217729, !dbg !7074
  store i64 %bf.clear22, i64* %14, align 8, !dbg !7074
  %15 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7075
  %base23 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !7075
  %16 = bitcast %struct.tree_base* %base23 to i64*, !dbg !7075
  %bf.load24 = load i64, i64* %16, align 8, !dbg !7075
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !7075
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !7075
  %idxprom = zext i32 %bf.cast26 to i64, !dbg !7075
  %arrayidx = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %idxprom, !dbg !7075
  %arrayidx27 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx, i64 0, i64 11, !dbg !7075
  %17 = load i8, i8* %arrayidx27, align 1, !dbg !7075
  %conv = zext i8 %17 to i32, !dbg !7075
  %tobool = icmp ne i32 %conv, 0, !dbg !7075
  br i1 %tobool, label %land.lhs.true, label %if.then31, !dbg !7075

land.lhs.true:                                    ; preds = %if.end19
  %18 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7075
  %decl_with_rtl = bitcast %union.tree_node* %18 to %struct.tree_decl_with_rtl*, !dbg !7075
  %rtl28 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !7075
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rtl28, align 8, !dbg !7075
  %cmp29 = icmp ne %struct.rtx_def* %19, null, !dbg !7075
  br i1 %cmp29, label %if.end32, label %if.then31, !dbg !7077

if.then31:                                        ; preds = %land.lhs.true, %if.end19
  br label %return, !dbg !7078

if.end32:                                         ; preds = %land.lhs.true
  %20 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7079
  call void @make_decl_rtl(%union.tree_node* %20), !dbg !7080
  %21 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7081
  %decl_with_rtl33 = bitcast %union.tree_node* %21 to %struct.tree_decl_with_rtl*, !dbg !7081
  %rtl34 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl33, i32 0, i32 1, !dbg !7081
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rtl34, align 8, !dbg !7081
  %tobool35 = icmp ne %struct.rtx_def* %22, null, !dbg !7081
  br i1 %tobool35, label %cond.true, label %cond.false, !dbg !7081

cond.true:                                        ; preds = %if.end32
  %23 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7081
  %decl_with_rtl36 = bitcast %union.tree_node* %23 to %struct.tree_decl_with_rtl*, !dbg !7081
  %rtl37 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl36, i32 0, i32 1, !dbg !7081
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rtl37, align 8, !dbg !7081
  br label %cond.end, !dbg !7081

cond.false:                                       ; preds = %if.end32
  %25 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7081
  call void @make_decl_rtl(%union.tree_node* %25), !dbg !7081
  %26 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7081
  %decl_with_rtl38 = bitcast %union.tree_node* %26 to %struct.tree_decl_with_rtl*, !dbg !7081
  %rtl39 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl38, i32 0, i32 1, !dbg !7081
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rtl39, align 8, !dbg !7081
  br label %cond.end, !dbg !7081

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %24, %cond.true ], [ %27, %cond.false ], !dbg !7081
  store %struct.rtx_def* %cond, %struct.rtx_def** %rtl, align 8, !dbg !7082
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !7083
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !7083
  %bf.load40 = load i32, i32* %29, align 8, !dbg !7083
  %bf.clear41 = and i32 %bf.load40, 65535, !dbg !7083
  %cmp42 = icmp eq i32 %bf.clear41, 43, !dbg !7083
  br i1 %cmp42, label %if.end45, label %if.then44, !dbg !7085

if.then44:                                        ; preds = %cond.end
  br label %return, !dbg !7086

if.end45:                                         ; preds = %cond.end
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !7087
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !7087
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7087
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7087
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !7087
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7087
  store %struct.rtx_def* %31, %struct.rtx_def** %symbol, align 8, !dbg !7088
  %32 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !7089
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !7089
  %bf.load47 = load i32, i32* %33, align 8, !dbg !7089
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !7089
  %cmp49 = icmp ne i32 %bf.clear48, 45, !dbg !7091
  br i1 %cmp49, label %if.then51, label %if.end52, !dbg !7092

if.then51:                                        ; preds = %if.end45
  br label %return, !dbg !7093

if.end52:                                         ; preds = %if.end45
  %34 = load %union.tree_node*, %union.tree_node** %decl.addr, align 8, !dbg !7094
  %decl_with_vis53 = bitcast %union.tree_node* %34 to %struct.tree_decl_with_vis*, !dbg !7094
  %weak_flag54 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis53, i32 0, i32 4, !dbg !7094
  %35 = bitcast i24* %weak_flag54 to i32*, !dbg !7094
  %bf.load55 = load i32, i32* %35, align 8, !dbg !7094
  %bf.lshr = lshr i32 %bf.load55, 7, !dbg !7094
  %bf.clear56 = and i32 %bf.lshr, 1, !dbg !7094
  %36 = load %struct.rtx_def*, %struct.rtx_def** %symbol, align 8, !dbg !7095
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !7095
  %bf.load57 = load i32, i32* %37, align 8, !dbg !7096
  %bf.value = and i32 %bf.clear56, 1, !dbg !7096
  %bf.shl = shl i32 %bf.value, 31, !dbg !7096
  %bf.clear58 = and i32 %bf.load57, 2147483647, !dbg !7096
  %bf.set = or i32 %bf.clear58, %bf.shl, !dbg !7096
  store i32 %bf.set, i32* %37, align 8, !dbg !7096
  br label %return, !dbg !7097

return:                                           ; preds = %if.end52, %if.then51, %if.then44, %if.then31
  ret void, !dbg !7097
}

declare dso_local void @make_decl_rtl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_make_node_local(%struct.cgraph_node* %node) #0 !dbg !7098 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %alias = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7099, metadata !DIExpression()), !dbg !7100
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7101
  %call = call zeroext i8 @cgraph_node_can_be_local_p(%struct.cgraph_node* %0), !dbg !7101
  %tobool = icmp ne i8 %call, 0, !dbg !7101
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7101

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2235, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7101
  br label %cond.end, !dbg !7101

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7101

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7101
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7102
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !7102
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7102
  %decl_with_vis = bitcast %union.tree_node* %2 to %struct.tree_decl_with_vis*, !dbg !7102
  %comdat_flag = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 4, !dbg !7102
  %3 = bitcast i24* %comdat_flag to i32*, !dbg !7102
  %bf.load = load i32, i32* %3, align 8, !dbg !7102
  %bf.lshr = lshr i32 %bf.load, 9, !dbg !7102
  %bf.clear = and i32 %bf.lshr, 1, !dbg !7102
  %tobool1 = icmp ne i32 %bf.clear, 0, !dbg !7102
  br i1 %tobool1, label %if.then, label %lor.lhs.false, !dbg !7104

lor.lhs.false:                                    ; preds = %cond.end
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7105
  %decl2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %4, i32 0, i32 0, !dbg !7105
  %5 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !7105
  %decl_common = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !7105
  %decl_flag_1 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !7105
  %6 = bitcast i40* %decl_flag_1 to i64*, !dbg !7105
  %bf.load3 = load i64, i64* %6, align 8, !dbg !7105
  %bf.lshr4 = lshr i64 %bf.load3, 25, !dbg !7105
  %bf.clear5 = and i64 %bf.lshr4, 1, !dbg !7105
  %bf.cast = trunc i64 %bf.clear5 to i32, !dbg !7105
  %tobool6 = icmp ne i32 %bf.cast, 0, !dbg !7105
  br i1 %tobool6, label %if.then, label %if.end, !dbg !7106

if.then:                                          ; preds = %lor.lhs.false, %cond.end
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %alias, metadata !7107, metadata !DIExpression()), !dbg !7109
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7110
  %decl7 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !7111
  %8 = load %union.tree_node*, %union.tree_node** %decl7, align 8, !dbg !7111
  call void @cgraph_make_decl_local(%union.tree_node* %8), !dbg !7112
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7113
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 13, !dbg !7115
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !7115
  store %struct.cgraph_node* %10, %struct.cgraph_node** %alias, align 8, !dbg !7116
  br label %for.cond, !dbg !7117

for.cond:                                         ; preds = %for.inc, %if.then
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7118
  %tobool8 = icmp ne %struct.cgraph_node* %11, null, !dbg !7120
  br i1 %tobool8, label %for.body, label %for.end, !dbg !7120

for.body:                                         ; preds = %for.cond
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7121
  %decl9 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %12, i32 0, i32 0, !dbg !7122
  %13 = load %union.tree_node*, %union.tree_node** %decl9, align 8, !dbg !7122
  call void @cgraph_make_decl_local(%union.tree_node* %13), !dbg !7123
  br label %for.inc, !dbg !7123

for.inc:                                          ; preds = %for.body
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7124
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i32 0, i32 3, !dbg !7125
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !7125
  store %struct.cgraph_node* %15, %struct.cgraph_node** %alias, align 8, !dbg !7126
  br label %for.cond, !dbg !7127, !llvm.loop !7128

for.end:                                          ; preds = %for.cond
  %16 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7130
  %local = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %16, i32 0, i32 18, !dbg !7131
  %externally_visible = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local, i32 0, i32 2, !dbg !7132
  %bf.load10 = load i8, i8* %externally_visible, align 8, !dbg !7133
  %bf.clear11 = and i8 %bf.load10, -3, !dbg !7133
  store i8 %bf.clear11, i8* %externally_visible, align 8, !dbg !7133
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7134
  %local12 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 18, !dbg !7135
  %local13 = getelementptr inbounds %struct.cgraph_local_info, %struct.cgraph_local_info* %local12, i32 0, i32 2, !dbg !7136
  %bf.load14 = load i8, i8* %local13, align 8, !dbg !7137
  %bf.clear15 = and i8 %bf.load14, -2, !dbg !7137
  %bf.set = or i8 %bf.clear15, 1, !dbg !7137
  store i8 %bf.set, i8* %local13, align 8, !dbg !7137
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7138
  %call16 = call i32 @cgraph_function_body_availability(%struct.cgraph_node* %18), !dbg !7138
  %cmp = icmp eq i32 %call16, 4, !dbg !7138
  br i1 %cmp, label %cond.false18, label %cond.true17, !dbg !7138

cond.true17:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i32 2246, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7138
  br label %cond.end19, !dbg !7138

cond.false18:                                     ; preds = %for.end
  br label %cond.end19, !dbg !7138

cond.end19:                                       ; preds = %cond.false18, %cond.true17
  %cond20 = phi i32 [ 0, %cond.true17 ], [ 0, %cond.false18 ], !dbg !7138
  br label %if.end, !dbg !7139

if.end:                                           ; preds = %cond.end19, %lor.lhs.false
  ret void, !dbg !7140
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_set_nothrow_flag(%struct.cgraph_node* %node, i8 zeroext %nothrow) #0 !dbg !7141 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %nothrow.addr = alloca i8, align 1
  %alias = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7144, metadata !DIExpression()), !dbg !7145
  store i8 %nothrow, i8* %nothrow.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %nothrow.addr, metadata !7146, metadata !DIExpression()), !dbg !7147
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %alias, metadata !7148, metadata !DIExpression()), !dbg !7149
  %0 = load i8, i8* %nothrow.addr, align 1, !dbg !7150
  %conv = zext i8 %0 to i32, !dbg !7150
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7151
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !7151
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7151
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7151
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7151
  %4 = zext i32 %conv to i64, !dbg !7152
  %bf.load = load i64, i64* %3, align 8, !dbg !7152
  %bf.value = and i64 %4, 1, !dbg !7152
  %bf.shl = shl i64 %bf.value, 25, !dbg !7152
  %bf.clear = and i64 %bf.load, -33554433, !dbg !7152
  %bf.set = or i64 %bf.clear, %bf.shl, !dbg !7152
  store i64 %bf.set, i64* %3, align 8, !dbg !7152
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !7152
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7153
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 13, !dbg !7155
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !7155
  store %struct.cgraph_node* %6, %struct.cgraph_node** %alias, align 8, !dbg !7156
  br label %for.cond, !dbg !7157

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7158
  %tobool = icmp ne %struct.cgraph_node* %7, null, !dbg !7160
  br i1 %tobool, label %for.body, label %for.end, !dbg !7160

for.body:                                         ; preds = %for.cond
  %8 = load i8, i8* %nothrow.addr, align 1, !dbg !7161
  %conv1 = zext i8 %8 to i32, !dbg !7161
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7162
  %decl2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 0, !dbg !7162
  %10 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !7162
  %base3 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7162
  %11 = bitcast %struct.tree_base* %base3 to i64*, !dbg !7162
  %12 = zext i32 %conv1 to i64, !dbg !7163
  %bf.load4 = load i64, i64* %11, align 8, !dbg !7163
  %bf.value5 = and i64 %12, 1, !dbg !7163
  %bf.shl6 = shl i64 %bf.value5, 25, !dbg !7163
  %bf.clear7 = and i64 %bf.load4, -33554433, !dbg !7163
  %bf.set8 = or i64 %bf.clear7, %bf.shl6, !dbg !7163
  store i64 %bf.set8, i64* %11, align 8, !dbg !7163
  %bf.result.cast9 = trunc i64 %bf.value5 to i32, !dbg !7163
  br label %for.inc, !dbg !7162

for.inc:                                          ; preds = %for.body
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7164
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 3, !dbg !7165
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !7165
  store %struct.cgraph_node* %14, %struct.cgraph_node** %alias, align 8, !dbg !7166
  br label %for.cond, !dbg !7167, !llvm.loop !7168

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7170
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_set_readonly_flag(%struct.cgraph_node* %node, i8 zeroext %readonly) #0 !dbg !7171 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %readonly.addr = alloca i8, align 1
  %alias = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7172, metadata !DIExpression()), !dbg !7173
  store i8 %readonly, i8* %readonly.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %readonly.addr, metadata !7174, metadata !DIExpression()), !dbg !7175
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %alias, metadata !7176, metadata !DIExpression()), !dbg !7177
  %0 = load i8, i8* %readonly.addr, align 1, !dbg !7178
  %conv = zext i8 %0 to i32, !dbg !7178
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7179
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !7179
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7179
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7179
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7179
  %4 = zext i32 %conv to i64, !dbg !7180
  %bf.load = load i64, i64* %3, align 8, !dbg !7180
  %bf.value = and i64 %4, 1, !dbg !7180
  %bf.shl = shl i64 %bf.value, 20, !dbg !7180
  %bf.clear = and i64 %bf.load, -1048577, !dbg !7180
  %bf.set = or i64 %bf.clear, %bf.shl, !dbg !7180
  store i64 %bf.set, i64* %3, align 8, !dbg !7180
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !7180
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7181
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %5, i32 0, i32 13, !dbg !7183
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !7183
  store %struct.cgraph_node* %6, %struct.cgraph_node** %alias, align 8, !dbg !7184
  br label %for.cond, !dbg !7185

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7186
  %tobool = icmp ne %struct.cgraph_node* %7, null, !dbg !7188
  br i1 %tobool, label %for.body, label %for.end, !dbg !7188

for.body:                                         ; preds = %for.cond
  %8 = load i8, i8* %readonly.addr, align 1, !dbg !7189
  %conv1 = zext i8 %8 to i32, !dbg !7189
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7190
  %decl2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 0, !dbg !7190
  %10 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !7190
  %base3 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7190
  %11 = bitcast %struct.tree_base* %base3 to i64*, !dbg !7190
  %12 = zext i32 %conv1 to i64, !dbg !7191
  %bf.load4 = load i64, i64* %11, align 8, !dbg !7191
  %bf.value5 = and i64 %12, 1, !dbg !7191
  %bf.shl6 = shl i64 %bf.value5, 20, !dbg !7191
  %bf.clear7 = and i64 %bf.load4, -1048577, !dbg !7191
  %bf.set8 = or i64 %bf.clear7, %bf.shl6, !dbg !7191
  store i64 %bf.set8, i64* %11, align 8, !dbg !7191
  %bf.result.cast9 = trunc i64 %bf.value5 to i32, !dbg !7191
  br label %for.inc, !dbg !7190

for.inc:                                          ; preds = %for.body
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7192
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 3, !dbg !7193
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !7193
  store %struct.cgraph_node* %14, %struct.cgraph_node** %alias, align 8, !dbg !7194
  br label %for.cond, !dbg !7195, !llvm.loop !7196

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7198
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_set_pure_flag(%struct.cgraph_node* %node, i8 zeroext %pure) #0 !dbg !7199 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %pure.addr = alloca i8, align 1
  %alias = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7200, metadata !DIExpression()), !dbg !7201
  store i8 %pure, i8* %pure.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %pure.addr, metadata !7202, metadata !DIExpression()), !dbg !7203
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %alias, metadata !7204, metadata !DIExpression()), !dbg !7205
  %0 = load i8, i8* %pure.addr, align 1, !dbg !7206
  %conv = zext i8 %0 to i32, !dbg !7206
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7207
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !7207
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7207
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !7207
  %pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !7207
  %bf.load = load i32, i32* %pure_flag, align 8, !dbg !7208
  %bf.value = and i32 %conv, 1, !dbg !7208
  %bf.shl = shl i32 %bf.value, 27, !dbg !7208
  %bf.clear = and i32 %bf.load, -134217729, !dbg !7208
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !7208
  store i32 %bf.set, i32* %pure_flag, align 8, !dbg !7208
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7209
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 13, !dbg !7211
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !7211
  store %struct.cgraph_node* %4, %struct.cgraph_node** %alias, align 8, !dbg !7212
  br label %for.cond, !dbg !7213

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7214
  %tobool = icmp ne %struct.cgraph_node* %5, null, !dbg !7216
  br i1 %tobool, label %for.body, label %for.end, !dbg !7216

for.body:                                         ; preds = %for.cond
  %6 = load i8, i8* %pure.addr, align 1, !dbg !7217
  %conv1 = zext i8 %6 to i32, !dbg !7217
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7218
  %decl2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !7218
  %8 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !7218
  %function_decl3 = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !7218
  %pure_flag4 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl3, i32 0, i32 5, !dbg !7218
  %bf.load5 = load i32, i32* %pure_flag4, align 8, !dbg !7219
  %bf.value6 = and i32 %conv1, 1, !dbg !7219
  %bf.shl7 = shl i32 %bf.value6, 27, !dbg !7219
  %bf.clear8 = and i32 %bf.load5, -134217729, !dbg !7219
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !7219
  store i32 %bf.set9, i32* %pure_flag4, align 8, !dbg !7219
  br label %for.inc, !dbg !7218

for.inc:                                          ; preds = %for.body
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7220
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 3, !dbg !7221
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !7221
  store %struct.cgraph_node* %10, %struct.cgraph_node** %alias, align 8, !dbg !7222
  br label %for.cond, !dbg !7223, !llvm.loop !7224

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7226
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @cgraph_set_looping_const_or_pure_flag(%struct.cgraph_node* %node, i8 zeroext %looping_const_or_pure) #0 !dbg !7227 {
entry:
  %node.addr = alloca %struct.cgraph_node*, align 8
  %looping_const_or_pure.addr = alloca i8, align 1
  %alias = alloca %struct.cgraph_node*, align 8
  store %struct.cgraph_node* %node, %struct.cgraph_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node.addr, metadata !7228, metadata !DIExpression()), !dbg !7229
  store i8 %looping_const_or_pure, i8* %looping_const_or_pure.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %looping_const_or_pure.addr, metadata !7230, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %alias, metadata !7232, metadata !DIExpression()), !dbg !7233
  %0 = load i8, i8* %looping_const_or_pure.addr, align 1, !dbg !7234
  %conv = zext i8 %0 to i32, !dbg !7234
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7235
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %1, i32 0, i32 0, !dbg !7235
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7235
  %function_decl = bitcast %union.tree_node* %2 to %struct.tree_function_decl*, !dbg !7235
  %looping_const_or_pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !7235
  %bf.load = load i32, i32* %looping_const_or_pure_flag, align 8, !dbg !7236
  %bf.value = and i32 %conv, 1, !dbg !7236
  %bf.shl = shl i32 %bf.value, 28, !dbg !7236
  %bf.clear = and i32 %bf.load, -268435457, !dbg !7236
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !7236
  store i32 %bf.set, i32* %looping_const_or_pure_flag, align 8, !dbg !7236
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %node.addr, align 8, !dbg !7237
  %same_body = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %3, i32 0, i32 13, !dbg !7239
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %same_body, align 8, !dbg !7239
  store %struct.cgraph_node* %4, %struct.cgraph_node** %alias, align 8, !dbg !7240
  br label %for.cond, !dbg !7241

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7242
  %tobool = icmp ne %struct.cgraph_node* %5, null, !dbg !7244
  br i1 %tobool, label %for.body, label %for.end, !dbg !7244

for.body:                                         ; preds = %for.cond
  %6 = load i8, i8* %looping_const_or_pure.addr, align 1, !dbg !7245
  %conv1 = zext i8 %6 to i32, !dbg !7245
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7246
  %decl2 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %7, i32 0, i32 0, !dbg !7246
  %8 = load %union.tree_node*, %union.tree_node** %decl2, align 8, !dbg !7246
  %function_decl3 = bitcast %union.tree_node* %8 to %struct.tree_function_decl*, !dbg !7246
  %looping_const_or_pure_flag4 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl3, i32 0, i32 5, !dbg !7246
  %bf.load5 = load i32, i32* %looping_const_or_pure_flag4, align 8, !dbg !7247
  %bf.value6 = and i32 %conv1, 1, !dbg !7247
  %bf.shl7 = shl i32 %bf.value6, 28, !dbg !7247
  %bf.clear8 = and i32 %bf.load5, -268435457, !dbg !7247
  %bf.set9 = or i32 %bf.clear8, %bf.shl7, !dbg !7247
  store i32 %bf.set9, i32* %looping_const_or_pure_flag4, align 8, !dbg !7247
  br label %for.inc, !dbg !7246

for.inc:                                          ; preds = %for.body
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %alias, align 8, !dbg !7248
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 3, !dbg !7249
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !7249
  store %struct.cgraph_node* %10, %struct.cgraph_node** %alias, align 8, !dbg !7250
  br label %for.cond, !dbg !7251, !llvm.loop !7252

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7254
}

declare dso_local void @gt_ggc_mx_cgraph_edge(i8*) #2

declare dso_local void @gt_pch_nx_cgraph_edge(i8*) #2

declare dso_local void @gt_ggc_mx_cgraph_node(i8*) #2

declare dso_local void @gt_pch_nx_cgraph_node(i8*) #2

declare dso_local void @gt_ggc_mx_cgraph_asm_node(i8*) #2

declare dso_local void @gt_pch_nx_cgraph_asm_node(i8*) #2

declare dso_local void @gt_ggc_m_P11cgraph_node4htab(i8*) #2

declare dso_local void @gt_pch_n_P11cgraph_node4htab(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.cgraph_node* @cgraph_allocate_node() #0 !dbg !7255 {
entry:
  %node = alloca %struct.cgraph_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_node** %node, metadata !7256, metadata !DIExpression()), !dbg !7257
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** @free_nodes, align 8, !dbg !7258
  %tobool = icmp ne %struct.cgraph_node* %0, null, !dbg !7258
  br i1 %tobool, label %if.then, label %if.else, !dbg !7260

if.then:                                          ; preds = %entry
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** @free_nodes, align 8, !dbg !7261
  store %struct.cgraph_node* %1, %struct.cgraph_node** %node, align 8, !dbg !7263
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7264
  %next = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i32 0, i32 3, !dbg !7264
  %3 = load %struct.cgraph_node*, %struct.cgraph_node** %next, align 8, !dbg !7264
  store %struct.cgraph_node* %3, %struct.cgraph_node** @free_nodes, align 8, !dbg !7265
  br label %if.end, !dbg !7266

if.else:                                          ; preds = %entry
  %call = call i8* @ggc_alloc_cleared_stat(i64 312), !dbg !7267
  %4 = bitcast i8* %call to %struct.cgraph_node*, !dbg !7267
  store %struct.cgraph_node* %4, %struct.cgraph_node** %node, align 8, !dbg !7269
  %5 = load i32, i32* @cgraph_max_uid, align 4, !dbg !7270
  %inc = add nsw i32 %5, 1, !dbg !7270
  store i32 %inc, i32* @cgraph_max_uid, align 4, !dbg !7270
  %6 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7271
  %uid = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %6, i32 0, i32 24, !dbg !7272
  store i32 %5, i32* %uid, align 8, !dbg !7273
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %node, align 8, !dbg !7274
  ret %struct.cgraph_node* %7, !dbg !7275
}

declare dso_local zeroext i8 @decl_assembler_name_equal(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !7276 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7279, metadata !DIExpression()), !dbg !7280
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7281
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7282
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7283
  %bf.load = load i32, i32* %1, align 8, !dbg !7283
  %bf.clear = and i32 %bf.load, 255, !dbg !7283
  ret i32 %bf.clear, !dbg !7284
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !7285 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7288, metadata !DIExpression()), !dbg !7289
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !7290, metadata !DIExpression()), !dbg !7291
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7292
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !7293
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !7291
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7294
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7294
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7294
  %bf.load = load i64, i64* %2, align 8, !dbg !7294
  %bf.clear = and i64 %bf.load, 65535, !dbg !7294
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7294
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !7296
  br i1 %cmp, label %if.then, label %if.end, !dbg !7297

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !7298
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !7298
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7298
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7298
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7298
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !7299
  br label %return, !dbg !7299

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7300
  br label %return, !dbg !7300

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7301
  ret %union.tree_node* %5, !dbg !7301
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !7302 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7305, metadata !DIExpression()), !dbg !7306
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7307
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7308
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !7309
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7309
  ret %struct.basic_block_def* %1, !dbg !7310
}

declare dso_local i32 @compute_call_stmt_bb_frequency(%union.tree_node*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !7311 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7312, metadata !DIExpression()), !dbg !7313
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7314
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7315
  ret %union.tree_node* %call, !dbg !7316
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7317 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7320, metadata !DIExpression()), !dbg !7321
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7322, metadata !DIExpression()), !dbg !7323
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7324
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7326
  %tobool = icmp ne i8 %call, 0, !dbg !7326
  br i1 %tobool, label %if.then, label %if.else, !dbg !7327

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7328
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !7330
  %2 = load i32, i32* %i.addr, align 4, !dbg !7331
  %idxprom = zext i32 %2 to i64, !dbg !7330
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !7330
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7330
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !7332
  br label %return, !dbg !7332

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7333
  br label %return, !dbg !7333

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7334
  ret %union.tree_node* %4, !dbg !7334
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !7335 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7336, metadata !DIExpression()), !dbg !7337
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7338
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7339
  %cmp = icmp uge i32 %call, 1, !dbg !7340
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7341

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7342
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !7343
  %cmp2 = icmp ule i32 %call1, 9, !dbg !7344
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !7345
  %land.ext = zext i1 %2 to i32, !dbg !7341
  %conv = trunc i32 %land.ext to i8, !dbg !7339
  ret i8 %conv, !dbg !7346
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !7347 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7350, metadata !DIExpression()), !dbg !7351
  call void @llvm.dbg.declare(metadata i64* %off, metadata !7352, metadata !DIExpression()), !dbg !7353
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7354
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !7355
  %idxprom = zext i32 %call to i64, !dbg !7356
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !7356
  %1 = load i64, i64* %arrayidx, align 8, !dbg !7356
  store i64 %1, i64* %off, align 8, !dbg !7357
  %2 = load i64, i64* %off, align 8, !dbg !7358
  %cmp = icmp ne i64 %2, 0, !dbg !7358
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7358

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7358
  br label %cond.end, !dbg !7358

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7358

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7358
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7359
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !7360
  %5 = load i64, i64* %off, align 8, !dbg !7361
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !7362
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !7363
  ret %union.tree_node** %6, !dbg !7364
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !7365 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7368, metadata !DIExpression()), !dbg !7369
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7370
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7371
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !7372
  ret i32 %call1, !dbg !7373
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !7374 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7377, metadata !DIExpression()), !dbg !7378
  %0 = load i32, i32* %code.addr, align 4, !dbg !7379
  %idxprom = zext i32 %0 to i64, !dbg !7380
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !7380
  %1 = load i32, i32* %arrayidx, align 4, !dbg !7380
  ret i32 %1, !dbg !7381
}

declare dso_local i8* @strcpy(i8*, i8*) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2803, !2804, !2805}
!llvm.ident = !{!2806}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "cgraph_global_info_ready", scope: !2, file: !3, line: 124, type: !1145, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1006, globals: !2724, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "cgraph.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !14, !142, !337, !344, !350, !355, !360, !378, !385, !392, !399, !575, !597, !602, !736, !773, !780, !785, !928, !967, !980}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cgraph_state", file: !6, line: 407, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13}
!9 = !DIEnumerator(name: "CGRAPH_STATE_CONSTRUCTION", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "CGRAPH_STATE_IPA", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CGRAPH_STATE_IPA_SSA", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CGRAPH_STATE_EXPANSION", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CGRAPH_STATE_FINISHED", value: 4, isUnsigned: true)
!14 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !15, line: 7, baseType: !7, size: 32, elements: !16)
!15 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!16 = !{!17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141}
!17 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!18 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!19 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!20 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!21 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!22 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!23 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!24 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!25 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!26 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!27 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!28 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!29 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!30 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!31 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!32 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!33 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!34 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!35 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!36 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!37 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!38 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!39 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!40 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!41 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!42 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!43 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!44 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!45 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!46 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!47 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!48 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!49 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!50 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!51 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!52 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!53 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!54 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!55 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!56 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!57 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!58 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!59 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!60 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!61 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!62 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!63 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!64 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!65 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!66 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!67 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!68 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!69 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!70 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!71 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!72 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!73 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!74 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!75 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!76 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!77 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!78 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!79 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!80 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!81 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!82 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!83 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!84 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!85 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!86 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!87 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!88 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!89 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!90 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!91 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!92 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!93 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!94 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!95 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!96 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!97 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!98 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!99 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!100 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!101 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!102 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!103 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!133 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!134 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!135 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!137 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!139 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!140 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!141 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!142 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !143, line: 39, baseType: !7, size: 32, elements: !144)
!143 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!144 = !{!145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336}
!145 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!146 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!147 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!148 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!149 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!150 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!151 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!152 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!153 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!154 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!155 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!156 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!157 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!158 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!159 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!160 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!161 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!162 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!163 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!164 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!165 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!166 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!167 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!168 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!169 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!170 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!171 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!172 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!173 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!174 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!175 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!176 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!177 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!178 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!179 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!180 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!181 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!182 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!183 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!184 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!185 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!186 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!187 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!188 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!189 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!190 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!191 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!192 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!193 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!194 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!195 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!196 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!197 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!198 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!199 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!200 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!201 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!202 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!203 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!204 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!205 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!206 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!207 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!208 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!209 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!210 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!211 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!212 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!213 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!214 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!215 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!216 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!217 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!218 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!219 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!220 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!221 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!222 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!223 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!224 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!225 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!226 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!227 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!228 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!229 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!230 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!231 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!232 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!233 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!234 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!235 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!236 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!237 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!238 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!239 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!240 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!241 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!242 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!243 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!244 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!245 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!246 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!247 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!248 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!249 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!250 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!251 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!252 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!253 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!254 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!255 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!256 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!257 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!258 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!259 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!260 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!261 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!262 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!263 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!264 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!265 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!266 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!267 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!268 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!269 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!270 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!271 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!272 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!273 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!274 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!275 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!276 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!277 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!278 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!279 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!280 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!281 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!282 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!283 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!284 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!285 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!286 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!287 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!288 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!289 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!290 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!291 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!292 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!293 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!294 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!295 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!296 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!297 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!301 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!302 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!303 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!304 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!305 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!306 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!307 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!308 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!309 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!310 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!311 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!312 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!313 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!314 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!322 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!323 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!324 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!325 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!326 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!327 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!328 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!329 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!330 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!331 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!332 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!333 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!334 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!335 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!336 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!337 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !338, line: 30, baseType: !7, size: 32, elements: !339)
!338 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!339 = !{!340, !341, !342, !343}
!340 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!341 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!342 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!343 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!344 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !345, line: 363, baseType: !7, size: 32, elements: !346)
!345 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!346 = !{!347, !348, !349}
!347 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!348 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!349 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!350 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !345, line: 355, baseType: !7, size: 32, elements: !351)
!351 = !{!352, !353, !354}
!352 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!353 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!354 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!355 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !356, line: 474, baseType: !7, size: 32, elements: !357)
!356 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!357 = !{!358, !359}
!358 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!359 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!360 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !143, line: 280, baseType: !7, size: 32, elements: !361)
!361 = !{!362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377}
!362 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!377 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!378 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !143, line: 1817, baseType: !7, size: 32, elements: !379)
!379 = !{!380, !381, !382, !383, !384}
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!383 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!384 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!385 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !143, line: 1805, baseType: !7, size: 32, elements: !386)
!386 = !{!387, !388, !389, !390, !391}
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!391 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!392 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !393, line: 104, baseType: !7, size: 32, elements: !394)
!393 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!394 = !{!395, !396, !397, !398}
!395 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!396 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!397 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!398 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!399 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !400, line: 74, baseType: !7, size: 32, elements: !401)
!400 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!401 = !{!402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574}
!402 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!403 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!404 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!405 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!406 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!574 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!575 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 309, baseType: !7, size: 32, elements: !576)
!576 = !{!577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596}
!577 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!578 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!579 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!580 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!581 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!582 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!583 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!584 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!585 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!586 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!587 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!588 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!589 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!590 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!591 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!592 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!593 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!594 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!595 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!596 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!597 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !598, line: 147, baseType: !7, size: 32, elements: !599)
!598 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!599 = !{!600, !601}
!600 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!601 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!602 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !143, line: 3410, baseType: !7, size: 32, elements: !603)
!603 = !{!604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735}
!604 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!605 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!606 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!607 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!608 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!609 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!610 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!611 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!612 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!613 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!614 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!615 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!616 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!617 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!618 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!619 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!620 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!621 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!622 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!623 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!624 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!625 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!626 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!627 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!628 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!629 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!630 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!631 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!632 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!633 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!634 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!635 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!636 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!637 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!638 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!639 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!640 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!641 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!642 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!643 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!644 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!645 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!646 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!647 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!648 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!649 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!650 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!651 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!652 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!653 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!654 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!655 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!656 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!657 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!658 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!659 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!660 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!661 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!662 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!663 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!664 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!665 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!666 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!667 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!668 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!669 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!670 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!671 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!672 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!673 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!674 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!675 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!676 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!677 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!678 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!679 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!680 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!681 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!682 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!683 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!684 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!685 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!686 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!687 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!688 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!689 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!690 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!691 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!692 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!693 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!694 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!695 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!696 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!697 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!698 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!699 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!700 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!701 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!702 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!703 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!704 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!705 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!706 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!707 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!708 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!709 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!710 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!711 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!712 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!713 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!714 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!715 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!716 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!717 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!718 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!719 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!720 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!721 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!722 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!723 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!724 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!725 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!726 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!727 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!728 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!729 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!730 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!731 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!732 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!733 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!734 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!735 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!736 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_node_structure_enum", file: !143, line: 630, baseType: !7, size: 32, elements: !737)
!737 = !{!738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772}
!738 = !DIEnumerator(name: "TS_BASE", value: 0, isUnsigned: true)
!739 = !DIEnumerator(name: "TS_COMMON", value: 1, isUnsigned: true)
!740 = !DIEnumerator(name: "TS_INT_CST", value: 2, isUnsigned: true)
!741 = !DIEnumerator(name: "TS_REAL_CST", value: 3, isUnsigned: true)
!742 = !DIEnumerator(name: "TS_FIXED_CST", value: 4, isUnsigned: true)
!743 = !DIEnumerator(name: "TS_VECTOR", value: 5, isUnsigned: true)
!744 = !DIEnumerator(name: "TS_STRING", value: 6, isUnsigned: true)
!745 = !DIEnumerator(name: "TS_COMPLEX", value: 7, isUnsigned: true)
!746 = !DIEnumerator(name: "TS_IDENTIFIER", value: 8, isUnsigned: true)
!747 = !DIEnumerator(name: "TS_DECL_MINIMAL", value: 9, isUnsigned: true)
!748 = !DIEnumerator(name: "TS_DECL_COMMON", value: 10, isUnsigned: true)
!749 = !DIEnumerator(name: "TS_DECL_WRTL", value: 11, isUnsigned: true)
!750 = !DIEnumerator(name: "TS_DECL_NON_COMMON", value: 12, isUnsigned: true)
!751 = !DIEnumerator(name: "TS_DECL_WITH_VIS", value: 13, isUnsigned: true)
!752 = !DIEnumerator(name: "TS_FIELD_DECL", value: 14, isUnsigned: true)
!753 = !DIEnumerator(name: "TS_VAR_DECL", value: 15, isUnsigned: true)
!754 = !DIEnumerator(name: "TS_PARM_DECL", value: 16, isUnsigned: true)
!755 = !DIEnumerator(name: "TS_LABEL_DECL", value: 17, isUnsigned: true)
!756 = !DIEnumerator(name: "TS_RESULT_DECL", value: 18, isUnsigned: true)
!757 = !DIEnumerator(name: "TS_CONST_DECL", value: 19, isUnsigned: true)
!758 = !DIEnumerator(name: "TS_TYPE_DECL", value: 20, isUnsigned: true)
!759 = !DIEnumerator(name: "TS_FUNCTION_DECL", value: 21, isUnsigned: true)
!760 = !DIEnumerator(name: "TS_TYPE", value: 22, isUnsigned: true)
!761 = !DIEnumerator(name: "TS_LIST", value: 23, isUnsigned: true)
!762 = !DIEnumerator(name: "TS_VEC", value: 24, isUnsigned: true)
!763 = !DIEnumerator(name: "TS_EXP", value: 25, isUnsigned: true)
!764 = !DIEnumerator(name: "TS_SSA_NAME", value: 26, isUnsigned: true)
!765 = !DIEnumerator(name: "TS_BLOCK", value: 27, isUnsigned: true)
!766 = !DIEnumerator(name: "TS_BINFO", value: 28, isUnsigned: true)
!767 = !DIEnumerator(name: "TS_STATEMENT_LIST", value: 29, isUnsigned: true)
!768 = !DIEnumerator(name: "TS_CONSTRUCTOR", value: 30, isUnsigned: true)
!769 = !DIEnumerator(name: "TS_OMP_CLAUSE", value: 31, isUnsigned: true)
!770 = !DIEnumerator(name: "TS_OPTIMIZATION", value: 32, isUnsigned: true)
!771 = !DIEnumerator(name: "TS_TARGET_OPTION", value: 33, isUnsigned: true)
!772 = !DIEnumerator(name: "LAST_TS_ENUM", value: 34, isUnsigned: true)
!773 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "availability", file: !6, line: 27, baseType: !7, size: 32, elements: !774)
!774 = !{!775, !776, !777, !778, !779}
!775 = !DIEnumerator(name: "AVAIL_UNSET", value: 0, isUnsigned: true)
!776 = !DIEnumerator(name: "AVAIL_NOT_AVAILABLE", value: 1, isUnsigned: true)
!777 = !DIEnumerator(name: "AVAIL_OVERWRITABLE", value: 2, isUnsigned: true)
!778 = !DIEnumerator(name: "AVAIL_AVAILABLE", value: 3, isUnsigned: true)
!779 = !DIEnumerator(name: "AVAIL_LOCAL", value: 4, isUnsigned: true)
!780 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_personality_kind", file: !338, line: 352, baseType: !7, size: 32, elements: !781)
!781 = !{!782, !783, !784}
!782 = !DIEnumerator(name: "eh_personality_none", value: 0, isUnsigned: true)
!783 = !DIEnumerator(name: "eh_personality_any", value: 1, isUnsigned: true)
!784 = !DIEnumerator(name: "eh_personality_lang", value: 2, isUnsigned: true)
!785 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !786, line: 45, baseType: !7, size: 32, elements: !787)
!786 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!787 = !{!788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927}
!788 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!789 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!790 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!791 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!792 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!793 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!794 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!795 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!796 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!797 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!798 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!799 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!800 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!801 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!802 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!803 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!804 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!805 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!806 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!807 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!808 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!809 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!810 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!811 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!812 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!813 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!814 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!815 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!816 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!817 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!818 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!819 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!820 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!821 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!822 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!823 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!824 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!825 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!826 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!827 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!828 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!829 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!830 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!831 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!832 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!833 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!834 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!835 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!836 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!837 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!838 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!839 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!840 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!841 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!842 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!843 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!844 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!845 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!846 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!847 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!848 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!849 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!850 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!851 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!852 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!853 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!854 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!855 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!856 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!857 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!858 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!859 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!860 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!861 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!862 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!863 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!864 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!865 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!866 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!867 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!868 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!869 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!870 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!871 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!872 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!873 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!874 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!875 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!876 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!877 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!878 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!879 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!880 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!881 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!882 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!883 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!884 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!885 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!886 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!887 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!888 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!889 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!890 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!891 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!892 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!893 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!894 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!895 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!896 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!897 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!898 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!899 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!900 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!901 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!902 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!903 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!904 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!905 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!906 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!907 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!908 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!909 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!910 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!911 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!912 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!913 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!914 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!915 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!916 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!917 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!918 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!919 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!920 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!921 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!922 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!923 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!924 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!925 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!926 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!927 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!928 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !929, line: 51, baseType: !7, size: 32, elements: !930)
!929 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!930 = !{!931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966}
!931 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!932 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!933 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!934 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!935 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!936 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!937 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!938 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!939 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!940 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!941 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!942 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!943 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!944 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!945 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!946 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!947 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!948 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!949 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!950 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!951 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!952 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!953 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!954 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!955 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!956 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!957 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!958 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!959 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!960 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!961 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!962 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!963 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!964 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!965 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!966 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!967 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !929, line: 100, baseType: !7, size: 32, elements: !968)
!968 = !{!969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979}
!969 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!970 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!971 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!972 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!973 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!974 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!975 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!976 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!977 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!978 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!979 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!980 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !929, line: 727, baseType: !7, size: 32, elements: !981)
!981 = !{!982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005}
!982 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!983 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!984 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!985 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!986 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!987 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!988 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!989 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!990 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!991 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!992 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!993 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!994 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!995 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!996 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!997 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!998 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!999 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!1000 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!1001 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!1002 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!1003 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!1004 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!1005 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!1006 = !{!1007, !2676, !2686, !2696, !142, !2706, !1308, !1022, !1015, !7, !1020, !1122, !2707, !1026, !2708, !1019, !785, !2714, !1870, !2716, !2719, !1356, !2721, !1390, !1293, !2723, !1228, !1080}
!1007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1008, size: 64)
!1008 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge_hook_list", file: !3, line: 144, size: 192, elements: !1009)
!1009 = !{!1010, !2674, !2675}
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "hook", scope: !1008, file: !3, line: 145, baseType: !1011, size: 64)
!1011 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_edge_hook", file: !6, line: 513, baseType: !1012)
!1012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1013, size: 64)
!1013 = !DISubroutineType(types: !1014)
!1014 = !{null, !1015, !1308}
!1015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1016, size: 64)
!1016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !6, line: 314, size: 768, elements: !1017)
!1017 = !{!1018, !1021, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2666, !2667, !2668, !2669, !2671, !2672, !2673}
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1016, file: !6, line: 316, baseType: !1019, size: 64)
!1019 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !345, line: 119, baseType: !1020)
!1020 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !1016, file: !6, line: 317, baseType: !1022, size: 64, offset: 64)
!1022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1023, size: 64)
!1023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !6, line: 181, size: 2496, elements: !1024)
!1024 = !{!1025, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2572, !2594, !2604, !2608, !2634, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656}
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1023, file: !6, line: 182, baseType: !1026, size: 64)
!1026 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1027, line: 56, baseType: !1028)
!1027 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1028 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1029, size: 64)
!1029 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !143, line: 3371, size: 1792, elements: !1030)
!1030 = !{!1031, !1064, !1070, !1082, !1101, !1112, !1117, !1128, !1134, !1148, !1160, !1198, !1692, !1720, !1737, !1738, !1743, !1752, !1758, !1763, !1767, !1771, !2105, !2152, !2158, !2164, !2171, !2184, !2198, !2215, !2227, !2249, !2264, !2436}
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1029, file: !143, line: 3372, baseType: !1032, size: 64)
!1032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !143, line: 360, size: 64, elements: !1033)
!1033 = !{!1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063}
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1032, file: !143, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1032, file: !143, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1032, file: !143, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1032, file: !143, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1032, file: !143, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1032, file: !143, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1032, file: !143, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1032, file: !143, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1032, file: !143, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1032, file: !143, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1032, file: !143, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1032, file: !143, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1032, file: !143, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1032, file: !143, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1032, file: !143, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1032, file: !143, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1032, file: !143, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1032, file: !143, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1032, file: !143, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1032, file: !143, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1032, file: !143, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1032, file: !143, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1032, file: !143, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1032, file: !143, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1032, file: !143, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1032, file: !143, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1032, file: !143, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1032, file: !143, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1032, file: !143, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1032, file: !143, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1029, file: !143, line: 3373, baseType: !1065, size: 192)
!1065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !143, line: 402, size: 192, elements: !1066)
!1066 = !{!1067, !1068, !1069}
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1065, file: !143, line: 403, baseType: !1032, size: 64)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1065, file: !143, line: 404, baseType: !1026, size: 64, offset: 64)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1065, file: !143, line: 405, baseType: !1026, size: 64, offset: 128)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1029, file: !143, line: 3374, baseType: !1071, size: 320)
!1071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !143, line: 1384, size: 320, elements: !1072)
!1072 = !{!1073, !1074}
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1071, file: !143, line: 1385, baseType: !1065, size: 192)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1071, file: !143, line: 1386, baseType: !1075, size: 128, offset: 192)
!1075 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1076, line: 58, baseType: !1077)
!1076 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1077 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1076, line: 54, size: 128, elements: !1078)
!1078 = !{!1079, !1081}
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1077, file: !1076, line: 56, baseType: !1080, size: 64)
!1080 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1077, file: !1076, line: 57, baseType: !1020, size: 64, offset: 64)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1029, file: !143, line: 3375, baseType: !1083, size: 256)
!1083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !143, line: 1397, size: 256, elements: !1084)
!1084 = !{!1085, !1086}
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1083, file: !143, line: 1398, baseType: !1065, size: 192)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1083, file: !143, line: 1399, baseType: !1087, size: 64, offset: 192)
!1087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1088, size: 64)
!1088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1089, line: 52, size: 256, elements: !1090)
!1089 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1090 = !{!1091, !1092, !1093, !1094, !1095, !1096, !1097}
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1088, file: !1089, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1088, file: !1089, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1088, file: !1089, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1088, file: !1089, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1088, file: !1089, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1088, file: !1089, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1088, file: !1089, line: 62, baseType: !1098, size: 192, offset: 64)
!1098 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1080, size: 192, elements: !1099)
!1099 = !{!1100}
!1100 = !DISubrange(count: 3)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1029, file: !143, line: 3376, baseType: !1102, size: 256)
!1102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !143, line: 1408, size: 256, elements: !1103)
!1103 = !{!1104, !1105}
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1102, file: !143, line: 1409, baseType: !1065, size: 192)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1102, file: !143, line: 1410, baseType: !1106, size: 64, offset: 192)
!1106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1107, size: 64)
!1107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1108, line: 27, size: 192, elements: !1109)
!1108 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1109 = !{!1110, !1111}
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1107, file: !1108, line: 29, baseType: !1075, size: 128)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1107, file: !1108, line: 30, baseType: !14, size: 32, offset: 128)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1029, file: !143, line: 3377, baseType: !1113, size: 256)
!1113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !143, line: 1437, size: 256, elements: !1114)
!1114 = !{!1115, !1116}
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1113, file: !143, line: 1438, baseType: !1065, size: 192)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1113, file: !143, line: 1439, baseType: !1026, size: 64, offset: 192)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1029, file: !143, line: 3378, baseType: !1118, size: 256)
!1118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !143, line: 1418, size: 256, elements: !1119)
!1119 = !{!1120, !1121, !1123}
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1118, file: !143, line: 1419, baseType: !1065, size: 192)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1118, file: !143, line: 1420, baseType: !1122, size: 32, offset: 192)
!1122 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1118, file: !143, line: 1421, baseType: !1124, size: 8, offset: 224)
!1124 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1125, size: 8, elements: !1126)
!1125 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1126 = !{!1127}
!1127 = !DISubrange(count: 1)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1029, file: !143, line: 3379, baseType: !1129, size: 320)
!1129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !143, line: 1428, size: 320, elements: !1130)
!1130 = !{!1131, !1132, !1133}
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1129, file: !143, line: 1429, baseType: !1065, size: 192)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1129, file: !143, line: 1430, baseType: !1026, size: 64, offset: 192)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1129, file: !143, line: 1431, baseType: !1026, size: 64, offset: 256)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1029, file: !143, line: 3380, baseType: !1135, size: 320)
!1135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !143, line: 1460, size: 320, elements: !1136)
!1136 = !{!1137, !1138}
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1135, file: !143, line: 1461, baseType: !1065, size: 192)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1135, file: !143, line: 1462, baseType: !1139, size: 128, offset: 192)
!1139 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1140, line: 31, size: 128, elements: !1141)
!1140 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1141 = !{!1142, !1146, !1147}
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1139, file: !1140, line: 32, baseType: !1143, size: 64)
!1143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1144, size: 64)
!1144 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1145)
!1145 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1139, file: !1140, line: 33, baseType: !7, size: 32, offset: 64)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1139, file: !1140, line: 34, baseType: !7, size: 32, offset: 96)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1029, file: !143, line: 3381, baseType: !1149, size: 384)
!1149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !143, line: 2507, size: 384, elements: !1150)
!1150 = !{!1151, !1152, !1157, !1158, !1159}
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1149, file: !143, line: 2508, baseType: !1065, size: 192)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1149, file: !143, line: 2509, baseType: !1153, size: 32, offset: 192)
!1153 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1154, line: 58, baseType: !1155)
!1154 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1155 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1156, line: 44, baseType: !7)
!1156 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1149, file: !143, line: 2510, baseType: !7, size: 32, offset: 224)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1149, file: !143, line: 2511, baseType: !1026, size: 64, offset: 256)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1149, file: !143, line: 2512, baseType: !1026, size: 64, offset: 320)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1029, file: !143, line: 3382, baseType: !1161, size: 896)
!1161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !143, line: 2652, size: 896, elements: !1162)
!1162 = !{!1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195}
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1161, file: !143, line: 2653, baseType: !1149, size: 384)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1161, file: !143, line: 2654, baseType: !1026, size: 64, offset: 384)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1161, file: !143, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1161, file: !143, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1161, file: !143, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1161, file: !143, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1161, file: !143, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1161, file: !143, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1161, file: !143, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1161, file: !143, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1161, file: !143, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1161, file: !143, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1161, file: !143, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1161, file: !143, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1161, file: !143, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1161, file: !143, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1161, file: !143, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1161, file: !143, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1161, file: !143, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1161, file: !143, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1161, file: !143, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1161, file: !143, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1161, file: !143, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1161, file: !143, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1161, file: !143, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1161, file: !143, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1161, file: !143, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1161, file: !143, line: 2703, baseType: !7, size: 32, offset: 512)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1161, file: !143, line: 2705, baseType: !1026, size: 64, offset: 576)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1161, file: !143, line: 2706, baseType: !1026, size: 64, offset: 640)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1161, file: !143, line: 2707, baseType: !1026, size: 64, offset: 704)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1161, file: !143, line: 2708, baseType: !1026, size: 64, offset: 768)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1161, file: !143, line: 2711, baseType: !1196, size: 64, offset: 832)
!1196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1197, size: 64)
!1197 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !143, line: 2711, flags: DIFlagFwdDecl)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1029, file: !143, line: 3383, baseType: !1199, size: 960)
!1199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !143, line: 2756, size: 960, elements: !1200)
!1200 = !{!1201, !1202}
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1199, file: !143, line: 2757, baseType: !1161, size: 896)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1199, file: !143, line: 2758, baseType: !1203, size: 64, offset: 896)
!1203 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1027, line: 50, baseType: !1204)
!1204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1205, size: 64)
!1205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !786, line: 240, size: 384, elements: !1206)
!1206 = !{!1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217}
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1205, file: !786, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1205, file: !786, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1205, file: !786, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1205, file: !786, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1205, file: !786, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1205, file: !786, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1205, file: !786, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1205, file: !786, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1205, file: !786, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1205, file: !786, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1205, file: !786, line: 321, baseType: !1218, size: 320, offset: 64)
!1218 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !786, line: 315, size: 320, elements: !1219)
!1219 = !{!1220, !1625, !1627, !1690, !1691}
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1218, file: !786, line: 316, baseType: !1221, size: 64)
!1221 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1222, size: 64, elements: !1126)
!1222 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !786, line: 183, baseType: !1223)
!1223 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !786, line: 166, size: 64, elements: !1224)
!1224 = !{!1225, !1226, !1227, !1230, !1231, !1239, !1240, !1252, !1255, !1317, !1318, !1602, !1615, !1622}
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1223, file: !786, line: 168, baseType: !1122, size: 32)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1223, file: !786, line: 169, baseType: !7, size: 32)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1223, file: !786, line: 170, baseType: !1228, size: 64)
!1228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1229, size: 64)
!1229 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1125)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1223, file: !786, line: 171, baseType: !1203, size: 64)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1223, file: !786, line: 172, baseType: !1232, size: 64)
!1232 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1027, line: 53, baseType: !1233)
!1233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1234, size: 64)
!1234 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !786, line: 359, size: 128, elements: !1235)
!1235 = !{!1236, !1237}
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1234, file: !786, line: 360, baseType: !1122, size: 32)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1234, file: !786, line: 361, baseType: !1238, size: 64, offset: 64)
!1238 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1203, size: 64, elements: !1126)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1223, file: !786, line: 173, baseType: !14, size: 32)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1223, file: !786, line: 174, baseType: !1241, size: 32)
!1241 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !786, line: 133, baseType: !1242)
!1242 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !786, line: 115, size: 32, elements: !1243)
!1243 = !{!1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251}
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1242, file: !786, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1242, file: !786, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1242, file: !786, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1242, file: !786, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1242, file: !786, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1242, file: !786, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1242, file: !786, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1242, file: !786, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1223, file: !786, line: 175, baseType: !1253, size: 64)
!1253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1254, size: 64)
!1254 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !786, line: 175, flags: DIFlagFwdDecl)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1223, file: !786, line: 176, baseType: !1256, size: 64)
!1256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1257, size: 64)
!1257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1258, line: 75, size: 256, elements: !1259)
!1258 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1259 = !{!1260, !1274, !1275, !1276}
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1257, file: !1258, line: 76, baseType: !1261, size: 64)
!1261 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1262, size: 64)
!1262 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1258, line: 68, baseType: !1263)
!1263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1258, line: 63, size: 320, elements: !1264)
!1264 = !{!1265, !1267, !1268, !1269}
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1263, file: !1258, line: 64, baseType: !1266, size: 64)
!1266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1263, size: 64)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1263, file: !1258, line: 65, baseType: !1266, size: 64, offset: 64)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1263, file: !1258, line: 66, baseType: !7, size: 32, offset: 128)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1263, file: !1258, line: 67, baseType: !1270, size: 128, offset: 192)
!1270 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1271, size: 128, elements: !1272)
!1271 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1258, line: 29, baseType: !1080)
!1272 = !{!1273}
!1273 = !DISubrange(count: 2)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1257, file: !1258, line: 77, baseType: !1261, size: 64, offset: 64)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1257, file: !1258, line: 78, baseType: !7, size: 32, offset: 128)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1257, file: !1258, line: 79, baseType: !1277, size: 64, offset: 192)
!1277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1278, size: 64)
!1278 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1258, line: 49, baseType: !1279)
!1279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1258, line: 45, size: 832, elements: !1280)
!1280 = !{!1281, !1282, !1283}
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1279, file: !1258, line: 46, baseType: !1266, size: 64)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1279, file: !1258, line: 47, baseType: !1256, size: 64, offset: 64)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1279, file: !1258, line: 48, baseType: !1284, size: 704, offset: 128)
!1284 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1285, line: 164, size: 704, elements: !1286)
!1285 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1286 = !{!1287, !1288, !1299, !1300, !1301, !1302, !1303, !1304, !1309, !1313, !1314, !1315, !1316}
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1284, file: !1285, line: 166, baseType: !1020, size: 64)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1284, file: !1285, line: 167, baseType: !1289, size: 64, offset: 64)
!1289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1290, size: 64)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1285, line: 157, size: 192, elements: !1291)
!1291 = !{!1292, !1294, !1295}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1290, file: !1285, line: 159, baseType: !1293, size: 64)
!1293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1125, size: 64)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1290, file: !1285, line: 160, baseType: !1289, size: 64, offset: 64)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1290, file: !1285, line: 161, baseType: !1296, size: 32, offset: 128)
!1296 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1125, size: 32, elements: !1297)
!1297 = !{!1298}
!1298 = !DISubrange(count: 4)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1284, file: !1285, line: 168, baseType: !1293, size: 64, offset: 128)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1284, file: !1285, line: 169, baseType: !1293, size: 64, offset: 192)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1284, file: !1285, line: 170, baseType: !1293, size: 64, offset: 256)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1284, file: !1285, line: 171, baseType: !1020, size: 64, offset: 320)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1284, file: !1285, line: 172, baseType: !1122, size: 32, offset: 384)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1284, file: !1285, line: 176, baseType: !1305, size: 64, offset: 448)
!1305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1306, size: 64)
!1306 = !DISubroutineType(types: !1307)
!1307 = !{!1289, !1308, !1020}
!1308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1284, file: !1285, line: 177, baseType: !1310, size: 64, offset: 512)
!1310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1311, size: 64)
!1311 = !DISubroutineType(types: !1312)
!1312 = !{null, !1308, !1289}
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1284, file: !1285, line: 178, baseType: !1308, size: 64, offset: 576)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1284, file: !1285, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1284, file: !1285, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1284, file: !1285, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1223, file: !786, line: 177, baseType: !1026, size: 64)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1223, file: !786, line: 178, baseType: !1319, size: 64)
!1319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1320, size: 64)
!1320 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !345, line: 217, size: 832, elements: !1321)
!1321 = !{!1322, !1567, !1568, !1569, !1572, !1576, !1577, !1578, !1596, !1597, !1598, !1599, !1600, !1601}
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1320, file: !345, line: 219, baseType: !1323, size: 64)
!1323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1324, size: 64)
!1324 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !345, line: 151, baseType: !1325)
!1325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !345, line: 151, size: 128, elements: !1326)
!1326 = !{!1327}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1325, file: !345, line: 151, baseType: !1328, size: 128)
!1328 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !345, line: 150, baseType: !1329)
!1329 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !345, line: 150, size: 128, elements: !1330)
!1330 = !{!1331, !1332, !1333}
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1329, file: !345, line: 150, baseType: !7, size: 32)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1329, file: !345, line: 150, baseType: !7, size: 32, offset: 32)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1329, file: !345, line: 150, baseType: !1334, size: 64, offset: 64)
!1334 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1335, size: 64, elements: !1126)
!1335 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1027, line: 108, baseType: !1336)
!1336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1337, size: 64)
!1337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !345, line: 122, size: 512, elements: !1338)
!1338 = !{!1339, !1340, !1341, !1560, !1561, !1562, !1563, !1564, !1565, !1566}
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1337, file: !345, line: 124, baseType: !1319, size: 64)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1337, file: !345, line: 125, baseType: !1319, size: 64, offset: 64)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1337, file: !345, line: 131, baseType: !1342, size: 64, offset: 128)
!1342 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !345, line: 128, size: 64, elements: !1343)
!1343 = !{!1344, !1559}
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1342, file: !345, line: 129, baseType: !1345, size: 64)
!1345 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1027, line: 66, baseType: !1346)
!1346 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1347, size: 64)
!1347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !929, line: 143, size: 192, elements: !1348)
!1348 = !{!1349, !1557, !1558}
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1347, file: !929, line: 145, baseType: !1350, size: 64)
!1350 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1027, line: 69, baseType: !1351)
!1351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1352, size: 64)
!1352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !929, line: 136, size: 192, elements: !1353)
!1353 = !{!1354, !1555, !1556}
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1352, file: !929, line: 137, baseType: !1355, size: 64)
!1355 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1027, line: 58, baseType: !1356)
!1356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1357, size: 64)
!1357 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !929, line: 737, size: 768, elements: !1358)
!1358 = !{!1359, !1376, !1410, !1416, !1421, !1426, !1433, !1439, !1445, !1450, !1464, !1469, !1475, !1480, !1490, !1495, !1513, !1520, !1527, !1533, !1538, !1544, !1550}
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1357, file: !929, line: 738, baseType: !1360, size: 256)
!1360 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !929, line: 271, size: 256, elements: !1361)
!1361 = !{!1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375}
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1360, file: !929, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1360, file: !929, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1360, file: !929, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1360, file: !929, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1360, file: !929, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1360, file: !929, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1360, file: !929, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1360, file: !929, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1360, file: !929, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1360, file: !929, line: 312, baseType: !7, size: 32, offset: 32)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1360, file: !929, line: 316, baseType: !1153, size: 32, offset: 64)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1360, file: !929, line: 319, baseType: !7, size: 32, offset: 96)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1360, file: !929, line: 323, baseType: !1319, size: 64, offset: 128)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1360, file: !929, line: 327, baseType: !1026, size: 64, offset: 192)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1357, file: !929, line: 739, baseType: !1377, size: 448)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !929, line: 350, size: 448, elements: !1378)
!1378 = !{!1379, !1408}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1377, file: !929, line: 353, baseType: !1380, size: 384)
!1380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !929, line: 333, size: 384, elements: !1381)
!1381 = !{!1382, !1383, !1391}
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1380, file: !929, line: 336, baseType: !1360, size: 256)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1380, file: !929, line: 343, baseType: !1384, size: 64, offset: 256)
!1384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1385, size: 64)
!1385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1386, line: 37, size: 128, elements: !1387)
!1386 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1387 = !{!1388, !1389}
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1385, file: !1386, line: 39, baseType: !1384, size: 64)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1385, file: !1386, line: 40, baseType: !1390, size: 64, offset: 64)
!1390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1026, size: 64)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1380, file: !929, line: 344, baseType: !1392, size: 64, offset: 320)
!1392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1393, size: 64)
!1393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1386, line: 45, size: 320, elements: !1394)
!1394 = !{!1395, !1396}
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1393, file: !1386, line: 47, baseType: !1392, size: 64)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1393, file: !1386, line: 48, baseType: !1397, size: 256, offset: 64)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !143, line: 1883, size: 256, elements: !1398)
!1398 = !{!1399, !1401, !1402, !1407}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1397, file: !143, line: 1884, baseType: !1400, size: 64)
!1400 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1397, size: 64)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1397, file: !143, line: 1885, baseType: !1400, size: 64, offset: 64)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1397, file: !143, line: 1891, baseType: !1403, size: 64, offset: 128)
!1403 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1397, file: !143, line: 1891, size: 64, elements: !1404)
!1404 = !{!1405, !1406}
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1403, file: !143, line: 1891, baseType: !1355, size: 64)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1403, file: !143, line: 1891, baseType: !1026, size: 64)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1397, file: !143, line: 1892, baseType: !1390, size: 64, offset: 192)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1377, file: !929, line: 359, baseType: !1409, size: 64, offset: 384)
!1409 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1026, size: 64, elements: !1126)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1357, file: !929, line: 740, baseType: !1411, size: 512)
!1411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !929, line: 365, size: 512, elements: !1412)
!1412 = !{!1413, !1414, !1415}
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1411, file: !929, line: 368, baseType: !1380, size: 384)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1411, file: !929, line: 373, baseType: !1026, size: 64, offset: 384)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1411, file: !929, line: 374, baseType: !1026, size: 64, offset: 448)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1357, file: !929, line: 741, baseType: !1417, size: 576)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !929, line: 380, size: 576, elements: !1418)
!1418 = !{!1419, !1420}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1417, file: !929, line: 383, baseType: !1411, size: 512)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1417, file: !929, line: 389, baseType: !1409, size: 64, offset: 512)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1357, file: !929, line: 742, baseType: !1422, size: 320)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !929, line: 395, size: 320, elements: !1423)
!1423 = !{!1424, !1425}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1422, file: !929, line: 397, baseType: !1360, size: 256)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1422, file: !929, line: 400, baseType: !1345, size: 64, offset: 256)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1357, file: !929, line: 743, baseType: !1427, size: 448)
!1427 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !929, line: 406, size: 448, elements: !1428)
!1428 = !{!1429, !1430, !1431, !1432}
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1427, file: !929, line: 408, baseType: !1360, size: 256)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1427, file: !929, line: 412, baseType: !1026, size: 64, offset: 256)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1427, file: !929, line: 420, baseType: !1026, size: 64, offset: 320)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1427, file: !929, line: 423, baseType: !1345, size: 64, offset: 384)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1357, file: !929, line: 744, baseType: !1434, size: 384)
!1434 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !929, line: 429, size: 384, elements: !1435)
!1435 = !{!1436, !1437, !1438}
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1434, file: !929, line: 431, baseType: !1360, size: 256)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1434, file: !929, line: 434, baseType: !1026, size: 64, offset: 256)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1434, file: !929, line: 437, baseType: !1345, size: 64, offset: 320)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1357, file: !929, line: 745, baseType: !1440, size: 384)
!1440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !929, line: 443, size: 384, elements: !1441)
!1441 = !{!1442, !1443, !1444}
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1440, file: !929, line: 445, baseType: !1360, size: 256)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1440, file: !929, line: 449, baseType: !1026, size: 64, offset: 256)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1440, file: !929, line: 453, baseType: !1345, size: 64, offset: 320)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1357, file: !929, line: 746, baseType: !1446, size: 320)
!1446 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !929, line: 459, size: 320, elements: !1447)
!1447 = !{!1448, !1449}
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1446, file: !929, line: 461, baseType: !1360, size: 256)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1446, file: !929, line: 464, baseType: !1026, size: 64, offset: 256)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1357, file: !929, line: 747, baseType: !1451, size: 768)
!1451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !929, line: 469, size: 768, elements: !1452)
!1452 = !{!1453, !1454, !1455, !1456, !1457}
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1451, file: !929, line: 471, baseType: !1360, size: 256)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1451, file: !929, line: 474, baseType: !7, size: 32, offset: 256)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1451, file: !929, line: 475, baseType: !7, size: 32, offset: 288)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1451, file: !929, line: 478, baseType: !1026, size: 64, offset: 320)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1451, file: !929, line: 481, baseType: !1458, size: 384, offset: 384)
!1458 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1459, size: 384, elements: !1126)
!1459 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !143, line: 1917, size: 384, elements: !1460)
!1460 = !{!1461, !1462, !1463}
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1459, file: !143, line: 1920, baseType: !1397, size: 256)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1459, file: !143, line: 1921, baseType: !1026, size: 64, offset: 256)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1459, file: !143, line: 1922, baseType: !1153, size: 32, offset: 320)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1357, file: !929, line: 748, baseType: !1465, size: 320)
!1465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !929, line: 487, size: 320, elements: !1466)
!1466 = !{!1467, !1468}
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1465, file: !929, line: 490, baseType: !1360, size: 256)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1465, file: !929, line: 494, baseType: !1122, size: 32, offset: 256)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1357, file: !929, line: 749, baseType: !1470, size: 384)
!1470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !929, line: 500, size: 384, elements: !1471)
!1471 = !{!1472, !1473, !1474}
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1470, file: !929, line: 502, baseType: !1360, size: 256)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1470, file: !929, line: 506, baseType: !1345, size: 64, offset: 256)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1470, file: !929, line: 510, baseType: !1345, size: 64, offset: 320)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1357, file: !929, line: 750, baseType: !1476, size: 320)
!1476 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !929, line: 529, size: 320, elements: !1477)
!1477 = !{!1478, !1479}
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1476, file: !929, line: 531, baseType: !1360, size: 256)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1476, file: !929, line: 540, baseType: !1345, size: 64, offset: 256)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1357, file: !929, line: 751, baseType: !1481, size: 704)
!1481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !929, line: 546, size: 704, elements: !1482)
!1482 = !{!1483, !1484, !1485, !1486, !1487, !1488, !1489}
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1481, file: !929, line: 549, baseType: !1411, size: 512)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1481, file: !929, line: 553, baseType: !1228, size: 64, offset: 512)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1481, file: !929, line: 557, baseType: !1145, size: 8, offset: 576)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1481, file: !929, line: 558, baseType: !1145, size: 8, offset: 584)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1481, file: !929, line: 559, baseType: !1145, size: 8, offset: 592)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1481, file: !929, line: 560, baseType: !1145, size: 8, offset: 600)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1481, file: !929, line: 566, baseType: !1409, size: 64, offset: 640)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1357, file: !929, line: 752, baseType: !1491, size: 384)
!1491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !929, line: 571, size: 384, elements: !1492)
!1492 = !{!1493, !1494}
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1491, file: !929, line: 573, baseType: !1422, size: 320)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1491, file: !929, line: 577, baseType: !1026, size: 64, offset: 320)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1357, file: !929, line: 753, baseType: !1496, size: 576)
!1496 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !929, line: 600, size: 576, elements: !1497)
!1497 = !{!1498, !1499, !1500, !1503, !1512}
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1496, file: !929, line: 602, baseType: !1422, size: 320)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1496, file: !929, line: 605, baseType: !1026, size: 64, offset: 320)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1496, file: !929, line: 609, baseType: !1501, size: 64, offset: 384)
!1501 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1502, line: 46, baseType: !1080)
!1502 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1496, file: !929, line: 612, baseType: !1504, size: 64, offset: 448)
!1504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1505, size: 64)
!1505 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !929, line: 581, size: 320, elements: !1506)
!1506 = !{!1507, !1508, !1509, !1510, !1511}
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1505, file: !929, line: 583, baseType: !142, size: 32)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1505, file: !929, line: 586, baseType: !1026, size: 64, offset: 64)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1505, file: !929, line: 589, baseType: !1026, size: 64, offset: 128)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1505, file: !929, line: 592, baseType: !1026, size: 64, offset: 192)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1505, file: !929, line: 595, baseType: !1026, size: 64, offset: 256)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1496, file: !929, line: 616, baseType: !1345, size: 64, offset: 512)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1357, file: !929, line: 754, baseType: !1514, size: 512)
!1514 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !929, line: 622, size: 512, elements: !1515)
!1515 = !{!1516, !1517, !1518, !1519}
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1514, file: !929, line: 624, baseType: !1422, size: 320)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1514, file: !929, line: 628, baseType: !1026, size: 64, offset: 320)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1514, file: !929, line: 632, baseType: !1026, size: 64, offset: 384)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1514, file: !929, line: 636, baseType: !1026, size: 64, offset: 448)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1357, file: !929, line: 755, baseType: !1521, size: 704)
!1521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !929, line: 642, size: 704, elements: !1522)
!1522 = !{!1523, !1524, !1525, !1526}
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1521, file: !929, line: 644, baseType: !1514, size: 512)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1521, file: !929, line: 648, baseType: !1026, size: 64, offset: 512)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1521, file: !929, line: 652, baseType: !1026, size: 64, offset: 576)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1521, file: !929, line: 653, baseType: !1026, size: 64, offset: 640)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1357, file: !929, line: 756, baseType: !1528, size: 448)
!1528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !929, line: 663, size: 448, elements: !1529)
!1529 = !{!1530, !1531, !1532}
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1528, file: !929, line: 665, baseType: !1422, size: 320)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1528, file: !929, line: 668, baseType: !1026, size: 64, offset: 320)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1528, file: !929, line: 673, baseType: !1026, size: 64, offset: 384)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1357, file: !929, line: 757, baseType: !1534, size: 384)
!1534 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !929, line: 694, size: 384, elements: !1535)
!1535 = !{!1536, !1537}
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1534, file: !929, line: 696, baseType: !1422, size: 320)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1534, file: !929, line: 699, baseType: !1026, size: 64, offset: 320)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1357, file: !929, line: 758, baseType: !1539, size: 384)
!1539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !929, line: 681, size: 384, elements: !1540)
!1540 = !{!1541, !1542, !1543}
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1539, file: !929, line: 683, baseType: !1360, size: 256)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1539, file: !929, line: 686, baseType: !1026, size: 64, offset: 256)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1539, file: !929, line: 689, baseType: !1026, size: 64, offset: 320)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1357, file: !929, line: 759, baseType: !1545, size: 384)
!1545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !929, line: 707, size: 384, elements: !1546)
!1546 = !{!1547, !1548, !1549}
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1545, file: !929, line: 709, baseType: !1360, size: 256)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1545, file: !929, line: 712, baseType: !1026, size: 64, offset: 256)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1545, file: !929, line: 712, baseType: !1026, size: 64, offset: 320)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1357, file: !929, line: 760, baseType: !1551, size: 320)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !929, line: 718, size: 320, elements: !1552)
!1552 = !{!1553, !1554}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1551, file: !929, line: 720, baseType: !1360, size: 256)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1551, file: !929, line: 723, baseType: !1026, size: 64, offset: 256)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1352, file: !929, line: 138, baseType: !1351, size: 64, offset: 64)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1352, file: !929, line: 139, baseType: !1351, size: 64, offset: 128)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1347, file: !929, line: 146, baseType: !1350, size: 64, offset: 64)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1347, file: !929, line: 152, baseType: !1345, size: 64, offset: 128)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1342, file: !345, line: 130, baseType: !1203, size: 64)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1337, file: !345, line: 134, baseType: !1308, size: 64, offset: 192)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1337, file: !345, line: 137, baseType: !1026, size: 64, offset: 256)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1337, file: !345, line: 138, baseType: !1153, size: 32, offset: 320)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1337, file: !345, line: 142, baseType: !7, size: 32, offset: 352)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1337, file: !345, line: 144, baseType: !1122, size: 32, offset: 384)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1337, file: !345, line: 145, baseType: !1122, size: 32, offset: 416)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1337, file: !345, line: 146, baseType: !1019, size: 64, offset: 448)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1320, file: !345, line: 220, baseType: !1323, size: 64, offset: 64)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1320, file: !345, line: 223, baseType: !1308, size: 64, offset: 128)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1320, file: !345, line: 226, baseType: !1570, size: 64, offset: 192)
!1570 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1571, size: 64)
!1571 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !345, line: 185, flags: DIFlagFwdDecl)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1320, file: !345, line: 229, baseType: !1573, size: 128, offset: 256)
!1573 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1574, size: 128, elements: !1272)
!1574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1575, size: 64)
!1575 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !345, line: 229, flags: DIFlagFwdDecl)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1320, file: !345, line: 232, baseType: !1319, size: 64, offset: 384)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1320, file: !345, line: 233, baseType: !1319, size: 64, offset: 448)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1320, file: !345, line: 238, baseType: !1579, size: 64, offset: 512)
!1579 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !345, line: 235, size: 64, elements: !1580)
!1580 = !{!1581, !1587}
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1579, file: !345, line: 236, baseType: !1582, size: 64)
!1582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1583, size: 64)
!1583 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !345, line: 273, size: 128, elements: !1584)
!1584 = !{!1585, !1586}
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1583, file: !345, line: 275, baseType: !1345, size: 64)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1583, file: !345, line: 278, baseType: !1345, size: 64, offset: 64)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1579, file: !345, line: 237, baseType: !1588, size: 64)
!1588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1589, size: 64)
!1589 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !345, line: 259, size: 320, elements: !1590)
!1590 = !{!1591, !1592, !1593, !1594, !1595}
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1589, file: !345, line: 261, baseType: !1203, size: 64)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1589, file: !345, line: 262, baseType: !1203, size: 64, offset: 64)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1589, file: !345, line: 266, baseType: !1203, size: 64, offset: 128)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1589, file: !345, line: 267, baseType: !1203, size: 64, offset: 192)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1589, file: !345, line: 270, baseType: !1122, size: 32, offset: 256)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1320, file: !345, line: 241, baseType: !1019, size: 64, offset: 576)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1320, file: !345, line: 244, baseType: !1122, size: 32, offset: 640)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1320, file: !345, line: 247, baseType: !1122, size: 32, offset: 672)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1320, file: !345, line: 250, baseType: !1122, size: 32, offset: 704)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1320, file: !345, line: 253, baseType: !1122, size: 32, offset: 736)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1320, file: !345, line: 256, baseType: !1122, size: 32, offset: 768)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1223, file: !786, line: 179, baseType: !1603, size: 64)
!1603 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1604, size: 64)
!1604 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !786, line: 150, baseType: !1605)
!1605 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !786, line: 142, size: 320, elements: !1606)
!1606 = !{!1607, !1608, !1609, !1610, !1613, !1614}
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1605, file: !786, line: 144, baseType: !1026, size: 64)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1605, file: !786, line: 145, baseType: !1203, size: 64, offset: 64)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1605, file: !786, line: 146, baseType: !1203, size: 64, offset: 128)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1605, file: !786, line: 147, baseType: !1611, size: 32, offset: 192)
!1611 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1612, line: 31, baseType: !1122)
!1612 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1605, file: !786, line: 148, baseType: !7, size: 32, offset: 224)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1605, file: !786, line: 149, baseType: !1145, size: 8, offset: 256)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1223, file: !786, line: 180, baseType: !1616, size: 64)
!1616 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1617, size: 64)
!1617 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !786, line: 162, baseType: !1618)
!1618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !786, line: 159, size: 128, elements: !1619)
!1619 = !{!1620, !1621}
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1618, file: !786, line: 160, baseType: !1026, size: 64)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1618, file: !786, line: 161, baseType: !1020, size: 64, offset: 64)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1223, file: !786, line: 181, baseType: !1623, size: 64)
!1623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1624, size: 64)
!1624 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !786, line: 181, flags: DIFlagFwdDecl)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1218, file: !786, line: 317, baseType: !1626, size: 64)
!1626 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1020, size: 64, elements: !1126)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1218, file: !786, line: 318, baseType: !1628, size: 320)
!1628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !786, line: 188, size: 320, elements: !1629)
!1629 = !{!1630, !1632, !1689}
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1628, file: !786, line: 190, baseType: !1631, size: 192)
!1631 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1222, size: 192, elements: !1099)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1628, file: !786, line: 193, baseType: !1633, size: 64, offset: 192)
!1633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1634, size: 64)
!1634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !786, line: 206, size: 320, elements: !1635)
!1635 = !{!1636, !1674, !1675, !1676, !1688}
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1634, file: !786, line: 208, baseType: !1637, size: 64)
!1637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1638, size: 64)
!1638 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1027, line: 62, baseType: !1639)
!1639 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1640, line: 538, size: 256, elements: !1641)
!1640 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1641 = !{!1642, !1646, !1652, !1665}
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1639, file: !1640, line: 539, baseType: !1643, size: 32)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1640, line: 482, size: 32, elements: !1644)
!1644 = !{!1645}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1643, file: !1640, line: 484, baseType: !7, size: 32)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !1639, file: !1640, line: 540, baseType: !1647, size: 192)
!1647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1640, line: 488, size: 192, elements: !1648)
!1648 = !{!1649, !1650, !1651}
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1647, file: !1640, line: 489, baseType: !1643, size: 32)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1647, file: !1640, line: 492, baseType: !1228, size: 64, offset: 64)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1647, file: !1640, line: 496, baseType: !1026, size: 64, offset: 128)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !1639, file: !1640, line: 541, baseType: !1653, size: 256)
!1653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1640, line: 504, size: 256, elements: !1654)
!1654 = !{!1655, !1656, !1663, !1664}
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1653, file: !1640, line: 505, baseType: !1643, size: 32)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1653, file: !1640, line: 509, baseType: !1657, size: 64, offset: 64)
!1657 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1640, line: 501, baseType: !1658)
!1658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1659, size: 64)
!1659 = !DISubroutineType(types: !1660)
!1660 = !{null, !1661}
!1661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1662, size: 64)
!1662 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1653, file: !1640, line: 510, baseType: !1661, size: 64, offset: 128)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1653, file: !1640, line: 513, baseType: !1637, size: 64, offset: 192)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !1639, file: !1640, line: 542, baseType: !1666, size: 128)
!1666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1640, line: 530, size: 128, elements: !1667)
!1667 = !{!1668, !1669}
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1666, file: !1640, line: 531, baseType: !1643, size: 32)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1666, file: !1640, line: 534, baseType: !1670, size: 64, offset: 64)
!1670 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1640, line: 525, baseType: !1671)
!1671 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1672, size: 64)
!1672 = !DISubroutineType(types: !1673)
!1673 = !{!1145, !1026, !1228, !1080, !1080}
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1634, file: !786, line: 211, baseType: !7, size: 32, offset: 64)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1634, file: !786, line: 214, baseType: !1020, size: 64, offset: 128)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1634, file: !786, line: 224, baseType: !1677, size: 64, offset: 192)
!1677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1678, size: 64)
!1678 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !786, line: 202, baseType: !1679)
!1679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !786, line: 202, size: 128, elements: !1680)
!1680 = !{!1681}
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1679, file: !786, line: 202, baseType: !1682, size: 128)
!1682 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !786, line: 200, baseType: !1683)
!1683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !786, line: 200, size: 128, elements: !1684)
!1684 = !{!1685, !1686, !1687}
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1683, file: !786, line: 200, baseType: !7, size: 32)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1683, file: !786, line: 200, baseType: !7, size: 32, offset: 32)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1683, file: !786, line: 200, baseType: !1238, size: 64, offset: 64)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1634, file: !786, line: 234, baseType: !1677, size: 64, offset: 256)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1628, file: !786, line: 197, baseType: !1020, size: 64, offset: 256)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1218, file: !786, line: 319, baseType: !1088, size: 256)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1218, file: !786, line: 320, baseType: !1107, size: 192)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1029, file: !143, line: 3384, baseType: !1693, size: 1472)
!1693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !143, line: 3114, size: 1472, elements: !1694)
!1694 = !{!1695, !1716, !1717, !1718, !1719}
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1693, file: !143, line: 3115, baseType: !1696, size: 1216)
!1696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !143, line: 2984, size: 1216, elements: !1697)
!1697 = !{!1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715}
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1696, file: !143, line: 2985, baseType: !1199, size: 960)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1696, file: !143, line: 2986, baseType: !1026, size: 64, offset: 960)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1696, file: !143, line: 2987, baseType: !1026, size: 64, offset: 1024)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1696, file: !143, line: 2988, baseType: !1026, size: 64, offset: 1088)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1696, file: !143, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1696, file: !143, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1696, file: !143, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1696, file: !143, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1696, file: !143, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1696, file: !143, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1696, file: !143, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1696, file: !143, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1696, file: !143, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1696, file: !143, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1696, file: !143, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1696, file: !143, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1696, file: !143, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1696, file: !143, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1693, file: !143, line: 3117, baseType: !1026, size: 64, offset: 1216)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1693, file: !143, line: 3119, baseType: !1026, size: 64, offset: 1280)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1693, file: !143, line: 3121, baseType: !1026, size: 64, offset: 1344)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1693, file: !143, line: 3123, baseType: !1026, size: 64, offset: 1408)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1029, file: !143, line: 3385, baseType: !1721, size: 1088)
!1721 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !143, line: 2874, size: 1088, elements: !1722)
!1722 = !{!1723, !1724, !1725}
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1721, file: !143, line: 2875, baseType: !1199, size: 960)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1721, file: !143, line: 2876, baseType: !1203, size: 64, offset: 960)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1721, file: !143, line: 2877, baseType: !1726, size: 64, offset: 1024)
!1726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1727, size: 64)
!1727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1728, line: 172, size: 128, elements: !1729)
!1728 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1729 = !{!1730, !1731, !1732, !1733, !1734, !1735, !1736}
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1727, file: !1728, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1727, file: !1728, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1727, file: !1728, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1727, file: !1728, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1727, file: !1728, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1727, file: !1728, line: 195, baseType: !7, size: 32, offset: 32)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1727, file: !1728, line: 199, baseType: !1026, size: 64, offset: 64)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1029, file: !143, line: 3386, baseType: !1696, size: 1216)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1029, file: !143, line: 3387, baseType: !1739, size: 1280)
!1739 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !143, line: 3093, size: 1280, elements: !1740)
!1740 = !{!1741, !1742}
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1739, file: !143, line: 3094, baseType: !1696, size: 1216)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1739, file: !143, line: 3095, baseType: !1726, size: 64, offset: 1216)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1029, file: !143, line: 3388, baseType: !1744, size: 1216)
!1744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !143, line: 2824, size: 1216, elements: !1745)
!1745 = !{!1746, !1747, !1748, !1749, !1750, !1751}
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1744, file: !143, line: 2825, baseType: !1161, size: 896)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1744, file: !143, line: 2827, baseType: !1026, size: 64, offset: 896)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1744, file: !143, line: 2828, baseType: !1026, size: 64, offset: 960)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1744, file: !143, line: 2829, baseType: !1026, size: 64, offset: 1024)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1744, file: !143, line: 2830, baseType: !1026, size: 64, offset: 1088)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1744, file: !143, line: 2831, baseType: !1026, size: 64, offset: 1152)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1029, file: !143, line: 3389, baseType: !1753, size: 1024)
!1753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !143, line: 2850, size: 1024, elements: !1754)
!1754 = !{!1755, !1756, !1757}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1753, file: !143, line: 2851, baseType: !1199, size: 960)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1753, file: !143, line: 2852, baseType: !1122, size: 32, offset: 960)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1753, file: !143, line: 2853, baseType: !1122, size: 32, offset: 992)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1029, file: !143, line: 3390, baseType: !1759, size: 1024)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !143, line: 2857, size: 1024, elements: !1760)
!1760 = !{!1761, !1762}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1759, file: !143, line: 2858, baseType: !1199, size: 960)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1759, file: !143, line: 2859, baseType: !1726, size: 64, offset: 960)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1029, file: !143, line: 3391, baseType: !1764, size: 960)
!1764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !143, line: 2862, size: 960, elements: !1765)
!1765 = !{!1766}
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1764, file: !143, line: 2863, baseType: !1199, size: 960)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1029, file: !143, line: 3392, baseType: !1768, size: 1472)
!1768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !143, line: 3304, size: 1472, elements: !1769)
!1769 = !{!1770}
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1768, file: !143, line: 3305, baseType: !1693, size: 1472)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1029, file: !143, line: 3393, baseType: !1772, size: 1792)
!1772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !143, line: 3248, size: 1792, elements: !1773)
!1773 = !{!1774, !1775, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104}
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1772, file: !143, line: 3249, baseType: !1693, size: 1472)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1772, file: !143, line: 3251, baseType: !1776, size: 64, offset: 1472)
!1776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1777, size: 64)
!1777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1778, line: 463, size: 1152, elements: !1779)
!1778 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1779 = !{!1780, !1938, !1969, !1970, !2025, !2028, !2029, !2030, !2031, !2032, !2033, !2057, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083}
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1777, file: !1778, line: 464, baseType: !1781, size: 64)
!1781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1782, size: 64)
!1782 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !338, line: 194, size: 384, elements: !1783)
!1783 = !{!1784, !1833, !1846, !1860, !1907, !1919}
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1782, file: !338, line: 197, baseType: !1785, size: 64)
!1785 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !338, line: 182, baseType: !1786)
!1786 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1787, size: 64)
!1787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !338, line: 116, size: 704, elements: !1788)
!1788 = !{!1789, !1790, !1791, !1792, !1793, !1794, !1821, !1830, !1831, !1832}
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1787, file: !338, line: 119, baseType: !1786, size: 64)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1787, file: !338, line: 122, baseType: !1786, size: 64, offset: 64)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1787, file: !338, line: 123, baseType: !1786, size: 64, offset: 128)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1787, file: !338, line: 126, baseType: !1122, size: 32, offset: 192)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1787, file: !338, line: 129, baseType: !337, size: 32, offset: 224)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1787, file: !338, line: 165, baseType: !1795, size: 192, offset: 256)
!1795 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !338, line: 132, size: 192, elements: !1796)
!1796 = !{!1797, !1810, !1816}
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1795, file: !338, line: 137, baseType: !1798, size: 128)
!1798 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !338, line: 133, size: 128, elements: !1799)
!1799 = !{!1800, !1809}
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1798, file: !338, line: 135, baseType: !1801, size: 64)
!1801 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1802, size: 64)
!1802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !338, line: 93, size: 320, elements: !1803)
!1803 = !{!1804, !1805, !1806, !1807, !1808}
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1802, file: !338, line: 96, baseType: !1801, size: 64)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1802, file: !338, line: 97, baseType: !1801, size: 64, offset: 64)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1802, file: !338, line: 101, baseType: !1026, size: 64, offset: 128)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1802, file: !338, line: 106, baseType: !1026, size: 64, offset: 192)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1802, file: !338, line: 111, baseType: !1026, size: 64, offset: 256)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1798, file: !338, line: 136, baseType: !1801, size: 64, offset: 64)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1795, file: !338, line: 151, baseType: !1811, size: 192)
!1811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !338, line: 139, size: 192, elements: !1812)
!1812 = !{!1813, !1814, !1815}
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1811, file: !338, line: 141, baseType: !1026, size: 64)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1811, file: !338, line: 145, baseType: !1026, size: 64, offset: 64)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1811, file: !338, line: 150, baseType: !1122, size: 32, offset: 128)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1795, file: !338, line: 164, baseType: !1817, size: 128)
!1817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !338, line: 153, size: 128, elements: !1818)
!1818 = !{!1819, !1820}
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !1817, file: !338, line: 161, baseType: !1026, size: 64)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !1817, file: !338, line: 163, baseType: !1153, size: 32, offset: 64)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1787, file: !338, line: 168, baseType: !1822, size: 64, offset: 448)
!1822 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1823, size: 64)
!1823 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !338, line: 67, size: 320, elements: !1824)
!1824 = !{!1825, !1826, !1827, !1828, !1829}
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !1823, file: !338, line: 70, baseType: !1822, size: 64)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1823, file: !338, line: 73, baseType: !1786, size: 64, offset: 64)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !1823, file: !338, line: 78, baseType: !1026, size: 64, offset: 128)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !1823, file: !338, line: 85, baseType: !1203, size: 64, offset: 192)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1823, file: !338, line: 88, baseType: !1122, size: 32, offset: 256)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1787, file: !338, line: 173, baseType: !1203, size: 64, offset: 512)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1787, file: !338, line: 173, baseType: !1203, size: 64, offset: 576)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1787, file: !338, line: 177, baseType: !1145, size: 8, offset: 640)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1782, file: !338, line: 200, baseType: !1834, size: 64, offset: 64)
!1834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1835, size: 64)
!1835 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !338, line: 185, baseType: !1836)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !338, line: 185, size: 128, elements: !1837)
!1837 = !{!1838}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1836, file: !338, line: 185, baseType: !1839, size: 128)
!1839 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !338, line: 184, baseType: !1840)
!1840 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !338, line: 184, size: 128, elements: !1841)
!1841 = !{!1842, !1843, !1844}
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1840, file: !338, line: 184, baseType: !7, size: 32)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1840, file: !338, line: 184, baseType: !7, size: 32, offset: 32)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1840, file: !338, line: 184, baseType: !1845, size: 64, offset: 64)
!1845 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1785, size: 64, elements: !1126)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1782, file: !338, line: 203, baseType: !1847, size: 64, offset: 128)
!1847 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1848, size: 64)
!1848 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !338, line: 189, baseType: !1849)
!1849 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !338, line: 189, size: 128, elements: !1850)
!1850 = !{!1851}
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1849, file: !338, line: 189, baseType: !1852, size: 128)
!1852 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !338, line: 188, baseType: !1853)
!1853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !338, line: 188, size: 128, elements: !1854)
!1854 = !{!1855, !1856, !1857}
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1853, file: !338, line: 188, baseType: !7, size: 32)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1853, file: !338, line: 188, baseType: !7, size: 32, offset: 32)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1853, file: !338, line: 188, baseType: !1858, size: 64, offset: 64)
!1858 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1859, size: 64, elements: !1126)
!1859 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !338, line: 180, baseType: !1822)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1782, file: !338, line: 207, baseType: !1861, size: 64, offset: 192)
!1861 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !598, line: 144, baseType: !1862)
!1862 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1863, size: 64)
!1863 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !598, line: 100, size: 896, elements: !1864)
!1864 = !{!1865, !1871, !1876, !1881, !1883, !1884, !1885, !1886, !1887, !1888, !1893, !1895, !1896, !1901, !1906}
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1863, file: !598, line: 102, baseType: !1866, size: 64)
!1866 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !598, line: 52, baseType: !1867)
!1867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1868, size: 64)
!1868 = !DISubroutineType(types: !1869)
!1869 = !{!1870, !1661}
!1870 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !598, line: 47, baseType: !7)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1863, file: !598, line: 105, baseType: !1872, size: 64, offset: 64)
!1872 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !598, line: 59, baseType: !1873)
!1873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1874, size: 64)
!1874 = !DISubroutineType(types: !1875)
!1875 = !{!1122, !1661, !1661}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1863, file: !598, line: 108, baseType: !1877, size: 64, offset: 128)
!1877 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !598, line: 63, baseType: !1878)
!1878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1879, size: 64)
!1879 = !DISubroutineType(types: !1880)
!1880 = !{null, !1308}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1863, file: !598, line: 111, baseType: !1882, size: 64, offset: 192)
!1882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1308, size: 64)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1863, file: !598, line: 114, baseType: !1501, size: 64, offset: 256)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1863, file: !598, line: 117, baseType: !1501, size: 64, offset: 320)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1863, file: !598, line: 120, baseType: !1501, size: 64, offset: 384)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1863, file: !598, line: 124, baseType: !7, size: 32, offset: 448)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1863, file: !598, line: 128, baseType: !7, size: 32, offset: 480)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1863, file: !598, line: 131, baseType: !1889, size: 64, offset: 512)
!1889 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !598, line: 75, baseType: !1890)
!1890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1891, size: 64)
!1891 = !DISubroutineType(types: !1892)
!1892 = !{!1308, !1501, !1501}
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1863, file: !598, line: 132, baseType: !1894, size: 64, offset: 576)
!1894 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !598, line: 78, baseType: !1878)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1863, file: !598, line: 135, baseType: !1308, size: 64, offset: 640)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1863, file: !598, line: 136, baseType: !1897, size: 64, offset: 704)
!1897 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !598, line: 82, baseType: !1898)
!1898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1899, size: 64)
!1899 = !DISubroutineType(types: !1900)
!1900 = !{!1308, !1308, !1501, !1501}
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1863, file: !598, line: 137, baseType: !1902, size: 64, offset: 768)
!1902 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !598, line: 83, baseType: !1903)
!1903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1904, size: 64)
!1904 = !DISubroutineType(types: !1905)
!1905 = !{null, !1308, !1308}
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1863, file: !598, line: 141, baseType: !7, size: 32, offset: 832)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1782, file: !338, line: 211, baseType: !1908, size: 64, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1909, size: 64)
!1909 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !143, line: 183, baseType: !1910)
!1910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !143, line: 183, size: 128, elements: !1911)
!1911 = !{!1912}
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1910, file: !143, line: 183, baseType: !1913, size: 128)
!1913 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !143, line: 182, baseType: !1914)
!1914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !143, line: 182, size: 128, elements: !1915)
!1915 = !{!1916, !1917, !1918}
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1914, file: !143, line: 182, baseType: !7, size: 32)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1914, file: !143, line: 182, baseType: !7, size: 32, offset: 32)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1914, file: !143, line: 182, baseType: !1409, size: 64, offset: 64)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1782, file: !338, line: 220, baseType: !1920, size: 64, offset: 320)
!1920 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !338, line: 217, size: 64, elements: !1921)
!1921 = !{!1922, !1923}
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !1920, file: !338, line: 218, baseType: !1908, size: 64)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !1920, file: !338, line: 219, baseType: !1924, size: 64)
!1924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1925, size: 64)
!1925 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !1926, line: 29, baseType: !1927)
!1926 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1927 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !1926, line: 29, size: 96, elements: !1928)
!1928 = !{!1929}
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1927, file: !1926, line: 29, baseType: !1930, size: 96)
!1930 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !1926, line: 27, baseType: !1931)
!1931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !1926, line: 27, size: 96, elements: !1932)
!1932 = !{!1933, !1934, !1935}
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1931, file: !1926, line: 27, baseType: !7, size: 32)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1931, file: !1926, line: 27, baseType: !7, size: 32, offset: 32)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1931, file: !1926, line: 27, baseType: !1936, size: 8, offset: 64)
!1936 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1937, size: 8, elements: !1126)
!1937 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !1926, line: 26, baseType: !1145)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1777, file: !1778, line: 467, baseType: !1939, size: 64, offset: 64)
!1939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1940, size: 64)
!1940 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !345, line: 374, size: 640, elements: !1941)
!1941 = !{!1942, !1944, !1945, !1958, !1959, !1960, !1961, !1962, !1963, !1965, !1967, !1968}
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1940, file: !345, line: 377, baseType: !1943, size: 64)
!1943 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1027, line: 111, baseType: !1319)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1940, file: !345, line: 378, baseType: !1943, size: 64, offset: 64)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1940, file: !345, line: 381, baseType: !1946, size: 64, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1947, size: 64)
!1947 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !345, line: 282, baseType: !1948)
!1948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !345, line: 282, size: 128, elements: !1949)
!1949 = !{!1950}
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1948, file: !345, line: 282, baseType: !1951, size: 128)
!1951 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !345, line: 281, baseType: !1952)
!1952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !345, line: 281, size: 128, elements: !1953)
!1953 = !{!1954, !1955, !1956}
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1952, file: !345, line: 281, baseType: !7, size: 32)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1952, file: !345, line: 281, baseType: !7, size: 32, offset: 32)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1952, file: !345, line: 281, baseType: !1957, size: 64, offset: 64)
!1957 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1943, size: 64, elements: !1126)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1940, file: !345, line: 384, baseType: !1122, size: 32, offset: 192)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1940, file: !345, line: 387, baseType: !1122, size: 32, offset: 224)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1940, file: !345, line: 390, baseType: !1122, size: 32, offset: 256)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1940, file: !345, line: 394, baseType: !1946, size: 64, offset: 320)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1940, file: !345, line: 396, baseType: !344, size: 32, offset: 384)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1940, file: !345, line: 399, baseType: !1964, size: 64, offset: 416)
!1964 = !DICompositeType(tag: DW_TAG_array_type, baseType: !350, size: 64, elements: !1272)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1940, file: !345, line: 402, baseType: !1966, size: 64, offset: 480)
!1966 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1272)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1940, file: !345, line: 406, baseType: !1122, size: 32, offset: 544)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1940, file: !345, line: 409, baseType: !1122, size: 32, offset: 576)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1777, file: !1778, line: 470, baseType: !1346, size: 64, offset: 128)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1777, file: !1778, line: 473, baseType: !1971, size: 64, offset: 192)
!1971 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1972, size: 64)
!1972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1728, line: 39, size: 1152, elements: !1973)
!1973 = !{!1974, !1975, !1988, !1989, !1990, !2002, !2003, !2007, !2008, !2009, !2010, !2011}
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1972, file: !1728, line: 41, baseType: !1861, size: 64)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1972, file: !1728, line: 48, baseType: !1976, size: 64, offset: 64)
!1976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1977, size: 64)
!1977 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !929, line: 35, baseType: !1978)
!1978 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !929, line: 35, size: 128, elements: !1979)
!1979 = !{!1980}
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1978, file: !929, line: 35, baseType: !1981, size: 128)
!1981 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !929, line: 33, baseType: !1982)
!1982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !929, line: 33, size: 128, elements: !1983)
!1983 = !{!1984, !1985, !1986}
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1982, file: !929, line: 33, baseType: !7, size: 32)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1982, file: !929, line: 33, baseType: !7, size: 32, offset: 32)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1982, file: !929, line: 33, baseType: !1987, size: 64, offset: 64)
!1987 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1355, size: 64, elements: !1126)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1972, file: !1728, line: 51, baseType: !1908, size: 64, offset: 128)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1972, file: !1728, line: 54, baseType: !1026, size: 64, offset: 192)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1972, file: !1728, line: 57, baseType: !1991, size: 128, offset: 256)
!1991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1992, line: 31, size: 128, elements: !1993)
!1992 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1993 = !{!1994, !1995, !1996, !1997, !1998, !1999, !2000}
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1991, file: !1992, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1991, file: !1992, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1991, file: !1992, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1991, file: !1992, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1991, file: !1992, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1991, file: !1992, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1991, file: !1992, line: 56, baseType: !2001, size: 64, offset: 64)
!2001 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1027, line: 47, baseType: !1256)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1972, file: !1728, line: 60, baseType: !1991, size: 128, offset: 384)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1972, file: !1728, line: 64, baseType: !2004, size: 64, offset: 512)
!2004 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2005, size: 64)
!2005 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2006, line: 33, flags: DIFlagFwdDecl)
!2006 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1972, file: !1728, line: 67, baseType: !1026, size: 64, offset: 576)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1972, file: !1728, line: 73, baseType: !1861, size: 64, offset: 640)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1972, file: !1728, line: 77, baseType: !2001, size: 64, offset: 704)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1972, file: !1728, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1972, file: !1728, line: 82, baseType: !2012, size: 320, offset: 832)
!2012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1386, line: 62, size: 320, elements: !2013)
!2013 = !{!2014, !2020, !2021, !2022, !2023, !2024}
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2012, file: !1386, line: 63, baseType: !2015, size: 64)
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2016, size: 64)
!2016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1386, line: 56, size: 128, elements: !2017)
!2017 = !{!2018, !2019}
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2016, file: !1386, line: 57, baseType: !2015, size: 64)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2016, file: !1386, line: 58, baseType: !1124, size: 8, offset: 64)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2012, file: !1386, line: 64, baseType: !7, size: 32, offset: 64)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2012, file: !1386, line: 66, baseType: !7, size: 32, offset: 96)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2012, file: !1386, line: 68, baseType: !1145, size: 8, offset: 128)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2012, file: !1386, line: 70, baseType: !1384, size: 64, offset: 192)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2012, file: !1386, line: 71, baseType: !1392, size: 64, offset: 256)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1777, file: !1778, line: 476, baseType: !2026, size: 64, offset: 256)
!2026 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2027, size: 64)
!2027 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1778, line: 476, flags: DIFlagFwdDecl)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1777, file: !1778, line: 479, baseType: !1861, size: 64, offset: 320)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1777, file: !1778, line: 484, baseType: !1026, size: 64, offset: 384)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1777, file: !1778, line: 488, baseType: !1026, size: 64, offset: 448)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1777, file: !1778, line: 493, baseType: !1026, size: 64, offset: 512)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1777, file: !1778, line: 496, baseType: !1026, size: 64, offset: 576)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1777, file: !1778, line: 501, baseType: !2034, size: 64, offset: 640)
!2034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2035, size: 64)
!2035 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !356, line: 2355, size: 576, elements: !2036)
!2036 = !{!2037, !2040, !2041, !2042, !2043, !2045, !2046, !2051, !2052, !2053, !2054, !2055, !2056}
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2035, file: !356, line: 2356, baseType: !2038, size: 64)
!2038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2039, size: 64)
!2039 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !356, line: 2356, flags: DIFlagFwdDecl)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2035, file: !356, line: 2357, baseType: !1228, size: 64, offset: 64)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2035, file: !356, line: 2358, baseType: !1122, size: 32, offset: 128)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2035, file: !356, line: 2359, baseType: !1122, size: 32, offset: 160)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2035, file: !356, line: 2360, baseType: !2044, size: 128, offset: 192)
!2044 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1122, size: 128, elements: !1297)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2035, file: !356, line: 2364, baseType: !1122, size: 32, offset: 320)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2035, file: !356, line: 2367, baseType: !2047, size: 128, offset: 384)
!2047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !356, line: 2349, size: 128, elements: !2048)
!2048 = !{!2049, !2050}
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2047, file: !356, line: 2351, baseType: !1203, size: 64)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2047, file: !356, line: 2352, baseType: !1020, size: 64, offset: 64)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2035, file: !356, line: 2371, baseType: !355, size: 32, offset: 512)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2035, file: !356, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2035, file: !356, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2035, file: !356, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2035, file: !356, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2035, file: !356, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1777, file: !1778, line: 504, baseType: !2058, size: 64, offset: 704)
!2058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2059, size: 64)
!2059 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1778, line: 504, flags: DIFlagFwdDecl)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1777, file: !1778, line: 507, baseType: !1861, size: 64, offset: 768)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1777, file: !1778, line: 510, baseType: !1122, size: 32, offset: 832)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1777, file: !1778, line: 513, baseType: !1122, size: 32, offset: 864)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1777, file: !1778, line: 516, baseType: !1153, size: 32, offset: 896)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1777, file: !1778, line: 519, baseType: !1153, size: 32, offset: 928)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1777, file: !1778, line: 522, baseType: !7, size: 32, offset: 960)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1777, file: !1778, line: 523, baseType: !7, size: 32, offset: 992)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1777, file: !1778, line: 528, baseType: !1228, size: 64, offset: 1024)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1777, file: !1778, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1777, file: !1778, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1777, file: !1778, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1777, file: !1778, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1777, file: !1778, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1777, file: !1778, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1777, file: !1778, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1777, file: !1778, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1777, file: !1778, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1777, file: !1778, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1777, file: !1778, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1777, file: !1778, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1777, file: !1778, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1777, file: !1778, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1777, file: !1778, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1777, file: !1778, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1772, file: !143, line: 3254, baseType: !1026, size: 64, offset: 1536)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1772, file: !143, line: 3257, baseType: !1026, size: 64, offset: 1600)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1772, file: !143, line: 3258, baseType: !1026, size: 64, offset: 1664)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1772, file: !143, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1772, file: !143, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1772, file: !143, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1772, file: !143, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1772, file: !143, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1772, file: !143, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1772, file: !143, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1772, file: !143, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1772, file: !143, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1772, file: !143, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1772, file: !143, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1772, file: !143, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1772, file: !143, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1772, file: !143, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1772, file: !143, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1772, file: !143, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1772, file: !143, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1772, file: !143, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1029, file: !143, line: 3394, baseType: !2106, size: 1344)
!2106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !143, line: 2279, size: 1344, elements: !2107)
!2107 = !{!2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149}
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2106, file: !143, line: 2280, baseType: !1065, size: 192)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2106, file: !143, line: 2281, baseType: !1026, size: 64, offset: 192)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2106, file: !143, line: 2282, baseType: !1026, size: 64, offset: 256)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2106, file: !143, line: 2283, baseType: !1026, size: 64, offset: 320)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2106, file: !143, line: 2284, baseType: !1026, size: 64, offset: 384)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2106, file: !143, line: 2285, baseType: !7, size: 32, offset: 448)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2106, file: !143, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2106, file: !143, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2106, file: !143, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2106, file: !143, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2106, file: !143, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2106, file: !143, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2106, file: !143, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2106, file: !143, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2106, file: !143, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2106, file: !143, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2106, file: !143, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2106, file: !143, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2106, file: !143, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2106, file: !143, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2106, file: !143, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2106, file: !143, line: 2305, baseType: !7, size: 32, offset: 512)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2106, file: !143, line: 2306, baseType: !1611, size: 32, offset: 544)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2106, file: !143, line: 2307, baseType: !1026, size: 64, offset: 576)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2106, file: !143, line: 2308, baseType: !1026, size: 64, offset: 640)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2106, file: !143, line: 2314, baseType: !2134, size: 64, offset: 704)
!2134 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !143, line: 2309, size: 64, elements: !2135)
!2135 = !{!2136, !2137, !2138}
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2134, file: !143, line: 2310, baseType: !1122, size: 32)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2134, file: !143, line: 2311, baseType: !1228, size: 64)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2134, file: !143, line: 2312, baseType: !2139, size: 64)
!2139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2140, size: 64)
!2140 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !143, line: 2277, flags: DIFlagFwdDecl)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2106, file: !143, line: 2315, baseType: !1026, size: 64, offset: 768)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2106, file: !143, line: 2316, baseType: !1026, size: 64, offset: 832)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2106, file: !143, line: 2317, baseType: !1026, size: 64, offset: 896)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2106, file: !143, line: 2318, baseType: !1026, size: 64, offset: 960)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2106, file: !143, line: 2319, baseType: !1026, size: 64, offset: 1024)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2106, file: !143, line: 2320, baseType: !1026, size: 64, offset: 1088)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2106, file: !143, line: 2321, baseType: !1026, size: 64, offset: 1152)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2106, file: !143, line: 2322, baseType: !1026, size: 64, offset: 1216)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2106, file: !143, line: 2324, baseType: !2150, size: 64, offset: 1280)
!2150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2151, size: 64)
!2151 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !143, line: 2324, flags: DIFlagFwdDecl)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1029, file: !143, line: 3395, baseType: !2153, size: 320)
!2153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !143, line: 1469, size: 320, elements: !2154)
!2154 = !{!2155, !2156, !2157}
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2153, file: !143, line: 1470, baseType: !1065, size: 192)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2153, file: !143, line: 1471, baseType: !1026, size: 64, offset: 192)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2153, file: !143, line: 1472, baseType: !1026, size: 64, offset: 256)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1029, file: !143, line: 3396, baseType: !2159, size: 320)
!2159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !143, line: 1482, size: 320, elements: !2160)
!2160 = !{!2161, !2162, !2163}
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2159, file: !143, line: 1483, baseType: !1065, size: 192)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2159, file: !143, line: 1484, baseType: !1122, size: 32, offset: 192)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2159, file: !143, line: 1485, baseType: !1409, size: 64, offset: 256)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1029, file: !143, line: 3397, baseType: !2165, size: 384)
!2165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !143, line: 1829, size: 384, elements: !2166)
!2166 = !{!2167, !2168, !2169, !2170}
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2165, file: !143, line: 1830, baseType: !1065, size: 192)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2165, file: !143, line: 1831, baseType: !1153, size: 32, offset: 192)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2165, file: !143, line: 1832, baseType: !1026, size: 64, offset: 256)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2165, file: !143, line: 1835, baseType: !1409, size: 64, offset: 320)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1029, file: !143, line: 3398, baseType: !2172, size: 704)
!2172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !143, line: 1898, size: 704, elements: !2173)
!2173 = !{!2174, !2175, !2176, !2177, !2178, !2183}
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2172, file: !143, line: 1899, baseType: !1065, size: 192)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2172, file: !143, line: 1902, baseType: !1026, size: 64, offset: 192)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2172, file: !143, line: 1905, baseType: !1355, size: 64, offset: 256)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2172, file: !143, line: 1908, baseType: !7, size: 32, offset: 320)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2172, file: !143, line: 1911, baseType: !2179, size: 64, offset: 384)
!2179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2180, size: 64)
!2180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1728, line: 117, size: 128, elements: !2181)
!2181 = !{!2182}
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2180, file: !1728, line: 120, baseType: !1991, size: 128)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2172, file: !143, line: 1914, baseType: !1397, size: 256, offset: 448)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1029, file: !143, line: 3399, baseType: !2185, size: 704)
!2185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !143, line: 2008, size: 704, elements: !2186)
!2186 = !{!2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197}
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2185, file: !143, line: 2009, baseType: !1065, size: 192)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2185, file: !143, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2185, file: !143, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2185, file: !143, line: 2014, baseType: !1153, size: 32, offset: 224)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2185, file: !143, line: 2016, baseType: !1026, size: 64, offset: 256)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2185, file: !143, line: 2017, baseType: !1908, size: 64, offset: 320)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2185, file: !143, line: 2019, baseType: !1026, size: 64, offset: 384)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2185, file: !143, line: 2020, baseType: !1026, size: 64, offset: 448)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2185, file: !143, line: 2021, baseType: !1026, size: 64, offset: 512)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2185, file: !143, line: 2022, baseType: !1026, size: 64, offset: 576)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2185, file: !143, line: 2023, baseType: !1026, size: 64, offset: 640)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1029, file: !143, line: 3400, baseType: !2199, size: 832)
!2199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !143, line: 2430, size: 832, elements: !2200)
!2200 = !{!2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210}
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2199, file: !143, line: 2431, baseType: !1065, size: 192)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2199, file: !143, line: 2433, baseType: !1026, size: 64, offset: 192)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2199, file: !143, line: 2434, baseType: !1026, size: 64, offset: 256)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2199, file: !143, line: 2435, baseType: !1026, size: 64, offset: 320)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2199, file: !143, line: 2436, baseType: !1026, size: 64, offset: 384)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2199, file: !143, line: 2437, baseType: !1908, size: 64, offset: 448)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2199, file: !143, line: 2438, baseType: !1026, size: 64, offset: 512)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2199, file: !143, line: 2440, baseType: !1026, size: 64, offset: 576)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2199, file: !143, line: 2441, baseType: !1026, size: 64, offset: 640)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2199, file: !143, line: 2443, baseType: !2211, size: 128, offset: 704)
!2211 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !143, line: 182, baseType: !2212)
!2212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !143, line: 182, size: 128, elements: !2213)
!2213 = !{!2214}
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2212, file: !143, line: 182, baseType: !1913, size: 128)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1029, file: !143, line: 3401, baseType: !2216, size: 320)
!2216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !143, line: 3327, size: 320, elements: !2217)
!2217 = !{!2218, !2219, !2226}
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2216, file: !143, line: 3329, baseType: !1065, size: 192)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2216, file: !143, line: 3330, baseType: !2220, size: 64, offset: 192)
!2220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2221, size: 64)
!2221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !143, line: 3320, size: 192, elements: !2222)
!2222 = !{!2223, !2224, !2225}
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2221, file: !143, line: 3322, baseType: !2220, size: 64)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2221, file: !143, line: 3323, baseType: !2220, size: 64, offset: 64)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2221, file: !143, line: 3324, baseType: !1026, size: 64, offset: 128)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2216, file: !143, line: 3331, baseType: !2220, size: 64, offset: 256)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1029, file: !143, line: 3402, baseType: !2228, size: 256)
!2228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !143, line: 1540, size: 256, elements: !2229)
!2229 = !{!2230, !2231}
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2228, file: !143, line: 1541, baseType: !1065, size: 192)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2228, file: !143, line: 1542, baseType: !2232, size: 64, offset: 192)
!2232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2233, size: 64)
!2233 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !143, line: 1538, baseType: !2234)
!2234 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !143, line: 1538, size: 192, elements: !2235)
!2235 = !{!2236}
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2234, file: !143, line: 1538, baseType: !2237, size: 192)
!2237 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !143, line: 1537, baseType: !2238)
!2238 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !143, line: 1537, size: 192, elements: !2239)
!2239 = !{!2240, !2241, !2242}
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2238, file: !143, line: 1537, baseType: !7, size: 32)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2238, file: !143, line: 1537, baseType: !7, size: 32, offset: 32)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2238, file: !143, line: 1537, baseType: !2243, size: 128, offset: 64)
!2243 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2244, size: 128, elements: !1126)
!2244 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !143, line: 1535, baseType: !2245)
!2245 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !143, line: 1532, size: 128, elements: !2246)
!2246 = !{!2247, !2248}
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2245, file: !143, line: 1533, baseType: !1026, size: 64)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2245, file: !143, line: 1534, baseType: !1026, size: 64, offset: 64)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1029, file: !143, line: 3403, baseType: !2250, size: 512)
!2250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !143, line: 1938, size: 512, elements: !2251)
!2251 = !{!2252, !2253, !2254, !2255, !2261, !2262, !2263}
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2250, file: !143, line: 1939, baseType: !1065, size: 192)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2250, file: !143, line: 1940, baseType: !1153, size: 32, offset: 192)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2250, file: !143, line: 1941, baseType: !360, size: 32, offset: 224)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2250, file: !143, line: 1946, baseType: !2256, size: 32, offset: 256)
!2256 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !143, line: 1942, size: 32, elements: !2257)
!2257 = !{!2258, !2259, !2260}
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2256, file: !143, line: 1943, baseType: !378, size: 32)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2256, file: !143, line: 1944, baseType: !385, size: 32)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2256, file: !143, line: 1945, baseType: !142, size: 32)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2250, file: !143, line: 1950, baseType: !1345, size: 64, offset: 320)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2250, file: !143, line: 1951, baseType: !1345, size: 64, offset: 384)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2250, file: !143, line: 1953, baseType: !1409, size: 64, offset: 448)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1029, file: !143, line: 3404, baseType: !2265, size: 1664)
!2265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !143, line: 3337, size: 1664, elements: !2266)
!2266 = !{!2267, !2268}
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2265, file: !143, line: 3338, baseType: !1065, size: 192)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2265, file: !143, line: 3341, baseType: !2269, size: 1472, offset: 192)
!2269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2270, line: 410, size: 1472, elements: !2271)
!2270 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2271 = !{!2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435}
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2269, file: !2270, line: 412, baseType: !1122, size: 32)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2269, file: !2270, line: 413, baseType: !1122, size: 32, offset: 32)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2269, file: !2270, line: 414, baseType: !1122, size: 32, offset: 64)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2269, file: !2270, line: 415, baseType: !1122, size: 32, offset: 96)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2269, file: !2270, line: 416, baseType: !1122, size: 32, offset: 128)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2269, file: !2270, line: 417, baseType: !1122, size: 32, offset: 160)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2269, file: !2270, line: 418, baseType: !1145, size: 8, offset: 192)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2269, file: !2270, line: 419, baseType: !1145, size: 8, offset: 200)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2269, file: !2270, line: 420, baseType: !2281, size: 8, offset: 208)
!2281 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2269, file: !2270, line: 421, baseType: !2281, size: 8, offset: 216)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2269, file: !2270, line: 422, baseType: !2281, size: 8, offset: 224)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2269, file: !2270, line: 423, baseType: !2281, size: 8, offset: 232)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2269, file: !2270, line: 424, baseType: !2281, size: 8, offset: 240)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2269, file: !2270, line: 425, baseType: !2281, size: 8, offset: 248)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2269, file: !2270, line: 426, baseType: !2281, size: 8, offset: 256)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2269, file: !2270, line: 427, baseType: !2281, size: 8, offset: 264)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2269, file: !2270, line: 428, baseType: !2281, size: 8, offset: 272)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2269, file: !2270, line: 429, baseType: !2281, size: 8, offset: 280)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2269, file: !2270, line: 430, baseType: !2281, size: 8, offset: 288)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2269, file: !2270, line: 431, baseType: !2281, size: 8, offset: 296)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2269, file: !2270, line: 432, baseType: !2281, size: 8, offset: 304)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2269, file: !2270, line: 433, baseType: !2281, size: 8, offset: 312)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2269, file: !2270, line: 434, baseType: !2281, size: 8, offset: 320)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2269, file: !2270, line: 435, baseType: !2281, size: 8, offset: 328)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2269, file: !2270, line: 436, baseType: !2281, size: 8, offset: 336)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2269, file: !2270, line: 437, baseType: !2281, size: 8, offset: 344)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2269, file: !2270, line: 438, baseType: !2281, size: 8, offset: 352)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2269, file: !2270, line: 439, baseType: !2281, size: 8, offset: 360)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2269, file: !2270, line: 440, baseType: !2281, size: 8, offset: 368)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2269, file: !2270, line: 441, baseType: !2281, size: 8, offset: 376)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2269, file: !2270, line: 442, baseType: !2281, size: 8, offset: 384)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2269, file: !2270, line: 443, baseType: !2281, size: 8, offset: 392)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2269, file: !2270, line: 444, baseType: !2281, size: 8, offset: 400)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2269, file: !2270, line: 445, baseType: !2281, size: 8, offset: 408)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2269, file: !2270, line: 446, baseType: !2281, size: 8, offset: 416)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2269, file: !2270, line: 447, baseType: !2281, size: 8, offset: 424)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2269, file: !2270, line: 448, baseType: !2281, size: 8, offset: 432)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2269, file: !2270, line: 449, baseType: !2281, size: 8, offset: 440)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2269, file: !2270, line: 450, baseType: !2281, size: 8, offset: 448)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2269, file: !2270, line: 451, baseType: !2281, size: 8, offset: 456)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2269, file: !2270, line: 452, baseType: !2281, size: 8, offset: 464)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2269, file: !2270, line: 453, baseType: !2281, size: 8, offset: 472)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2269, file: !2270, line: 454, baseType: !2281, size: 8, offset: 480)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2269, file: !2270, line: 455, baseType: !2281, size: 8, offset: 488)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2269, file: !2270, line: 456, baseType: !2281, size: 8, offset: 496)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2269, file: !2270, line: 457, baseType: !2281, size: 8, offset: 504)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2269, file: !2270, line: 458, baseType: !2281, size: 8, offset: 512)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2269, file: !2270, line: 459, baseType: !2281, size: 8, offset: 520)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2269, file: !2270, line: 460, baseType: !2281, size: 8, offset: 528)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2269, file: !2270, line: 461, baseType: !2281, size: 8, offset: 536)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2269, file: !2270, line: 462, baseType: !2281, size: 8, offset: 544)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2269, file: !2270, line: 463, baseType: !2281, size: 8, offset: 552)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2269, file: !2270, line: 464, baseType: !2281, size: 8, offset: 560)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2269, file: !2270, line: 465, baseType: !2281, size: 8, offset: 568)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2269, file: !2270, line: 466, baseType: !2281, size: 8, offset: 576)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2269, file: !2270, line: 467, baseType: !2281, size: 8, offset: 584)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2269, file: !2270, line: 468, baseType: !2281, size: 8, offset: 592)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2269, file: !2270, line: 469, baseType: !2281, size: 8, offset: 600)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2269, file: !2270, line: 470, baseType: !2281, size: 8, offset: 608)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2269, file: !2270, line: 471, baseType: !2281, size: 8, offset: 616)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2269, file: !2270, line: 472, baseType: !2281, size: 8, offset: 624)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2269, file: !2270, line: 473, baseType: !2281, size: 8, offset: 632)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2269, file: !2270, line: 474, baseType: !2281, size: 8, offset: 640)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2269, file: !2270, line: 475, baseType: !2281, size: 8, offset: 648)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2269, file: !2270, line: 476, baseType: !2281, size: 8, offset: 656)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2269, file: !2270, line: 477, baseType: !2281, size: 8, offset: 664)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2269, file: !2270, line: 478, baseType: !2281, size: 8, offset: 672)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2269, file: !2270, line: 479, baseType: !2281, size: 8, offset: 680)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2269, file: !2270, line: 480, baseType: !2281, size: 8, offset: 688)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2269, file: !2270, line: 481, baseType: !2281, size: 8, offset: 696)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2269, file: !2270, line: 482, baseType: !2281, size: 8, offset: 704)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2269, file: !2270, line: 483, baseType: !2281, size: 8, offset: 712)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2269, file: !2270, line: 484, baseType: !2281, size: 8, offset: 720)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2269, file: !2270, line: 485, baseType: !2281, size: 8, offset: 728)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2269, file: !2270, line: 486, baseType: !2281, size: 8, offset: 736)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2269, file: !2270, line: 487, baseType: !2281, size: 8, offset: 744)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2269, file: !2270, line: 488, baseType: !2281, size: 8, offset: 752)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2269, file: !2270, line: 489, baseType: !2281, size: 8, offset: 760)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2269, file: !2270, line: 490, baseType: !2281, size: 8, offset: 768)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2269, file: !2270, line: 491, baseType: !2281, size: 8, offset: 776)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2269, file: !2270, line: 492, baseType: !2281, size: 8, offset: 784)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2269, file: !2270, line: 493, baseType: !2281, size: 8, offset: 792)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2269, file: !2270, line: 494, baseType: !2281, size: 8, offset: 800)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2269, file: !2270, line: 495, baseType: !2281, size: 8, offset: 808)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2269, file: !2270, line: 496, baseType: !2281, size: 8, offset: 816)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2269, file: !2270, line: 497, baseType: !2281, size: 8, offset: 824)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2269, file: !2270, line: 498, baseType: !2281, size: 8, offset: 832)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2269, file: !2270, line: 499, baseType: !2281, size: 8, offset: 840)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2269, file: !2270, line: 500, baseType: !2281, size: 8, offset: 848)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2269, file: !2270, line: 501, baseType: !2281, size: 8, offset: 856)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2269, file: !2270, line: 502, baseType: !2281, size: 8, offset: 864)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2269, file: !2270, line: 503, baseType: !2281, size: 8, offset: 872)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2269, file: !2270, line: 504, baseType: !2281, size: 8, offset: 880)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2269, file: !2270, line: 505, baseType: !2281, size: 8, offset: 888)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2269, file: !2270, line: 506, baseType: !2281, size: 8, offset: 896)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2269, file: !2270, line: 507, baseType: !2281, size: 8, offset: 904)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2269, file: !2270, line: 508, baseType: !2281, size: 8, offset: 912)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2269, file: !2270, line: 509, baseType: !2281, size: 8, offset: 920)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2269, file: !2270, line: 510, baseType: !2281, size: 8, offset: 928)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2269, file: !2270, line: 511, baseType: !2281, size: 8, offset: 936)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2269, file: !2270, line: 512, baseType: !2281, size: 8, offset: 944)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2269, file: !2270, line: 513, baseType: !2281, size: 8, offset: 952)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2269, file: !2270, line: 514, baseType: !2281, size: 8, offset: 960)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2269, file: !2270, line: 515, baseType: !2281, size: 8, offset: 968)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2269, file: !2270, line: 516, baseType: !2281, size: 8, offset: 976)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2269, file: !2270, line: 517, baseType: !2281, size: 8, offset: 984)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2269, file: !2270, line: 518, baseType: !2281, size: 8, offset: 992)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2269, file: !2270, line: 519, baseType: !2281, size: 8, offset: 1000)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2269, file: !2270, line: 520, baseType: !2281, size: 8, offset: 1008)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2269, file: !2270, line: 521, baseType: !2281, size: 8, offset: 1016)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2269, file: !2270, line: 522, baseType: !2281, size: 8, offset: 1024)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2269, file: !2270, line: 523, baseType: !2281, size: 8, offset: 1032)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2269, file: !2270, line: 524, baseType: !2281, size: 8, offset: 1040)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2269, file: !2270, line: 525, baseType: !2281, size: 8, offset: 1048)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2269, file: !2270, line: 526, baseType: !2281, size: 8, offset: 1056)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2269, file: !2270, line: 527, baseType: !2281, size: 8, offset: 1064)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2269, file: !2270, line: 528, baseType: !2281, size: 8, offset: 1072)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2269, file: !2270, line: 529, baseType: !2281, size: 8, offset: 1080)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2269, file: !2270, line: 530, baseType: !2281, size: 8, offset: 1088)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2269, file: !2270, line: 531, baseType: !2281, size: 8, offset: 1096)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2269, file: !2270, line: 532, baseType: !2281, size: 8, offset: 1104)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2269, file: !2270, line: 533, baseType: !2281, size: 8, offset: 1112)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2269, file: !2270, line: 534, baseType: !2281, size: 8, offset: 1120)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2269, file: !2270, line: 535, baseType: !2281, size: 8, offset: 1128)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2269, file: !2270, line: 536, baseType: !2281, size: 8, offset: 1136)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2269, file: !2270, line: 537, baseType: !2281, size: 8, offset: 1144)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2269, file: !2270, line: 538, baseType: !2281, size: 8, offset: 1152)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2269, file: !2270, line: 539, baseType: !2281, size: 8, offset: 1160)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2269, file: !2270, line: 540, baseType: !2281, size: 8, offset: 1168)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2269, file: !2270, line: 541, baseType: !2281, size: 8, offset: 1176)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2269, file: !2270, line: 542, baseType: !2281, size: 8, offset: 1184)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2269, file: !2270, line: 543, baseType: !2281, size: 8, offset: 1192)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2269, file: !2270, line: 544, baseType: !2281, size: 8, offset: 1200)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2269, file: !2270, line: 545, baseType: !2281, size: 8, offset: 1208)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2269, file: !2270, line: 546, baseType: !2281, size: 8, offset: 1216)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2269, file: !2270, line: 547, baseType: !2281, size: 8, offset: 1224)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2269, file: !2270, line: 548, baseType: !2281, size: 8, offset: 1232)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2269, file: !2270, line: 549, baseType: !2281, size: 8, offset: 1240)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2269, file: !2270, line: 550, baseType: !2281, size: 8, offset: 1248)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2269, file: !2270, line: 551, baseType: !2281, size: 8, offset: 1256)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2269, file: !2270, line: 552, baseType: !2281, size: 8, offset: 1264)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2269, file: !2270, line: 553, baseType: !2281, size: 8, offset: 1272)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2269, file: !2270, line: 554, baseType: !2281, size: 8, offset: 1280)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2269, file: !2270, line: 555, baseType: !2281, size: 8, offset: 1288)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2269, file: !2270, line: 556, baseType: !2281, size: 8, offset: 1296)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2269, file: !2270, line: 557, baseType: !2281, size: 8, offset: 1304)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2269, file: !2270, line: 558, baseType: !2281, size: 8, offset: 1312)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2269, file: !2270, line: 559, baseType: !2281, size: 8, offset: 1320)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2269, file: !2270, line: 560, baseType: !2281, size: 8, offset: 1328)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2269, file: !2270, line: 561, baseType: !2281, size: 8, offset: 1336)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2269, file: !2270, line: 562, baseType: !2281, size: 8, offset: 1344)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2269, file: !2270, line: 563, baseType: !2281, size: 8, offset: 1352)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2269, file: !2270, line: 564, baseType: !2281, size: 8, offset: 1360)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2269, file: !2270, line: 565, baseType: !2281, size: 8, offset: 1368)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2269, file: !2270, line: 566, baseType: !2281, size: 8, offset: 1376)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2269, file: !2270, line: 567, baseType: !2281, size: 8, offset: 1384)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2269, file: !2270, line: 568, baseType: !2281, size: 8, offset: 1392)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2269, file: !2270, line: 569, baseType: !2281, size: 8, offset: 1400)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2269, file: !2270, line: 570, baseType: !2281, size: 8, offset: 1408)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2269, file: !2270, line: 571, baseType: !2281, size: 8, offset: 1416)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2269, file: !2270, line: 572, baseType: !2281, size: 8, offset: 1424)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2269, file: !2270, line: 573, baseType: !2281, size: 8, offset: 1432)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2269, file: !2270, line: 574, baseType: !2281, size: 8, offset: 1440)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1029, file: !143, line: 3405, baseType: !2437, size: 384)
!2437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !143, line: 3352, size: 384, elements: !2438)
!2438 = !{!2439, !2440}
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2437, file: !143, line: 3353, baseType: !1065, size: 192)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2437, file: !143, line: 3356, baseType: !2441, size: 192, offset: 192)
!2441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2270, line: 578, size: 192, elements: !2442)
!2442 = !{!2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453}
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2441, file: !2270, line: 580, baseType: !1122, size: 32)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2441, file: !2270, line: 581, baseType: !1122, size: 32, offset: 32)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2441, file: !2270, line: 582, baseType: !1122, size: 32, offset: 64)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2441, file: !2270, line: 583, baseType: !1122, size: 32, offset: 96)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2441, file: !2270, line: 584, baseType: !1145, size: 8, offset: 128)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2441, file: !2270, line: 585, baseType: !1145, size: 8, offset: 136)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2441, file: !2270, line: 586, baseType: !1145, size: 8, offset: 144)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2441, file: !2270, line: 587, baseType: !1145, size: 8, offset: 152)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2441, file: !2270, line: 588, baseType: !1145, size: 8, offset: 160)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2441, file: !2270, line: 589, baseType: !1145, size: 8, offset: 168)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2441, file: !2270, line: 590, baseType: !1145, size: 8, offset: 176)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !1023, file: !6, line: 183, baseType: !1015, size: 64, offset: 64)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !1023, file: !6, line: 184, baseType: !1015, size: 64, offset: 128)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1023, file: !6, line: 185, baseType: !1022, size: 64, offset: 192)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !1023, file: !6, line: 186, baseType: !1022, size: 64, offset: 256)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !1023, file: !6, line: 188, baseType: !1022, size: 64, offset: 320)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !1023, file: !6, line: 190, baseType: !1022, size: 64, offset: 384)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !1023, file: !6, line: 192, baseType: !1022, size: 64, offset: 448)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !1023, file: !6, line: 194, baseType: !1022, size: 64, offset: 512)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !1023, file: !6, line: 196, baseType: !1022, size: 64, offset: 576)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !1023, file: !6, line: 197, baseType: !1022, size: 64, offset: 640)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !1023, file: !6, line: 198, baseType: !1022, size: 64, offset: 704)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !1023, file: !6, line: 199, baseType: !1022, size: 64, offset: 768)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !1023, file: !6, line: 202, baseType: !1022, size: 64, offset: 832)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !1023, file: !6, line: 204, baseType: !1022, size: 64, offset: 896)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !1023, file: !6, line: 207, baseType: !1861, size: 64, offset: 960)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1023, file: !6, line: 209, baseType: !1308, size: 64, offset: 1024)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !1023, file: !6, line: 214, baseType: !2471, size: 64, offset: 1088)
!2471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2472, size: 64)
!2472 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !1778, line: 177, baseType: !2473)
!2473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !1778, line: 177, size: 128, elements: !2474)
!2474 = !{!2475}
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2473, file: !1778, line: 177, baseType: !2476, size: 128)
!2476 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !1778, line: 176, baseType: !2477)
!2477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !1778, line: 176, size: 128, elements: !2478)
!2478 = !{!2479, !2480, !2481}
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2477, file: !1778, line: 176, baseType: !7, size: 32)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2477, file: !1778, line: 176, baseType: !7, size: 32, offset: 32)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2477, file: !1778, line: 176, baseType: !2482, size: 64, offset: 64)
!2482 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2483, size: 64, elements: !1126)
!2483 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !1778, line: 174, baseType: !2484)
!2484 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2485, size: 64)
!2485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !393, line: 173, size: 1152, elements: !2486)
!2486 = !{!2487, !2511, !2515, !2538, !2539, !2543, !2548, !2549, !2553}
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2485, file: !393, line: 175, baseType: !2488, size: 640)
!2488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !393, line: 114, size: 640, elements: !2489)
!2489 = !{!2490, !2491, !2492, !2496, !2500, !2502, !2503, !2504, !2506, !2507, !2508, !2509, !2510}
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2488, file: !393, line: 117, baseType: !392, size: 32)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2488, file: !393, line: 121, baseType: !1228, size: 64, offset: 64)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2488, file: !393, line: 125, baseType: !2493, size: 64, offset: 128)
!2493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2494, size: 64)
!2494 = !DISubroutineType(types: !2495)
!2495 = !{!1145}
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2488, file: !393, line: 130, baseType: !2497, size: 64, offset: 192)
!2497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2498, size: 64)
!2498 = !DISubroutineType(types: !2499)
!2499 = !{!7}
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2488, file: !393, line: 133, baseType: !2501, size: 64, offset: 256)
!2501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2488, size: 64)
!2502 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2488, file: !393, line: 136, baseType: !2501, size: 64, offset: 320)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2488, file: !393, line: 139, baseType: !1122, size: 32, offset: 384)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2488, file: !393, line: 143, baseType: !2505, size: 32, offset: 416)
!2505 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !400, line: 80, baseType: !399)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2488, file: !393, line: 146, baseType: !7, size: 32, offset: 448)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2488, file: !393, line: 147, baseType: !7, size: 32, offset: 480)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2488, file: !393, line: 148, baseType: !7, size: 32, offset: 512)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2488, file: !393, line: 151, baseType: !7, size: 32, offset: 544)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2488, file: !393, line: 152, baseType: !7, size: 32, offset: 576)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !2485, file: !393, line: 179, baseType: !2512, size: 64, offset: 640)
!2512 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2513, size: 64)
!2513 = !DISubroutineType(types: !2514)
!2514 = !{null}
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !2485, file: !393, line: 182, baseType: !2516, size: 64, offset: 704)
!2516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2517, size: 64)
!2517 = !DISubroutineType(types: !2518)
!2518 = !{null, !2519}
!2519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2520, size: 64)
!2520 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !6, line: 276, size: 192, elements: !2521)
!2521 = !{!2522, !2523, !2537}
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !2520, file: !6, line: 278, baseType: !1861, size: 64)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !2520, file: !6, line: 279, baseType: !2524, size: 64, offset: 64)
!2524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2525, size: 64)
!2525 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !6, line: 272, baseType: !2526)
!2526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !6, line: 272, size: 128, elements: !2527)
!2527 = !{!2528}
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2526, file: !6, line: 272, baseType: !2529, size: 128)
!2529 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !6, line: 270, baseType: !2530)
!2530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !6, line: 270, size: 128, elements: !2531)
!2531 = !{!2532, !2533, !2534}
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2530, file: !6, line: 270, baseType: !7, size: 32)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2530, file: !6, line: 270, baseType: !7, size: 32, offset: 32)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2530, file: !6, line: 270, baseType: !2535, size: 64, offset: 64)
!2535 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2536, size: 64, elements: !1126)
!2536 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !6, line: 268, baseType: !1022)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2520, file: !6, line: 280, baseType: !1308, size: 64, offset: 128)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !2485, file: !393, line: 187, baseType: !2512, size: 64, offset: 768)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !2485, file: !393, line: 188, baseType: !2540, size: 64, offset: 832)
!2540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2541, size: 64)
!2541 = !DISubroutineType(types: !2542)
!2542 = !{null, !1022}
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !2485, file: !393, line: 191, baseType: !2544, size: 64, offset: 896)
!2544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2545, size: 64)
!2545 = !DISubroutineType(types: !2546)
!2546 = !{null, !1022, !2547}
!2547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1355, size: 64)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !2485, file: !393, line: 195, baseType: !7, size: 32, offset: 960)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !2485, file: !393, line: 196, baseType: !2550, size: 64, offset: 1024)
!2550 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2551, size: 64)
!2551 = !DISubroutineType(types: !2552)
!2552 = !{!7, !1022}
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !2485, file: !393, line: 197, baseType: !2554, size: 64, offset: 1088)
!2554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2555, size: 64)
!2555 = !DISubroutineType(types: !2556)
!2556 = !{null, !2557}
!2557 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2558, size: 64)
!2558 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !6, line: 358, size: 320, elements: !2559)
!2559 = !{!2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571}
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2558, file: !6, line: 359, baseType: !1026, size: 64)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2558, file: !6, line: 361, baseType: !2557, size: 64, offset: 64)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2558, file: !6, line: 363, baseType: !2557, size: 64, offset: 128)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !2558, file: !6, line: 366, baseType: !2557, size: 64, offset: 192)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2558, file: !6, line: 368, baseType: !1122, size: 32, offset: 256)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2558, file: !6, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !2558, file: !6, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2558, file: !6, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2558, file: !6, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !2558, file: !6, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2558, file: !6, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2558, file: !6, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !1023, file: !6, line: 216, baseType: !2573, size: 320, offset: 1152)
!2573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !6, line: 88, size: 320, elements: !2574)
!2574 = !{!2575, !2578, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593}
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !2573, file: !6, line: 90, baseType: !2576, size: 64)
!2576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2577, size: 64)
!2577 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !6, line: 51, flags: DIFlagFwdDecl)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !2573, file: !6, line: 92, baseType: !2579, size: 192, offset: 64)
!2579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !6, line: 57, size: 192, elements: !2580)
!2580 = !{!2581, !2582, !2583, !2584, !2585}
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !2579, file: !6, line: 60, baseType: !1020, size: 64)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !2579, file: !6, line: 63, baseType: !1122, size: 32, offset: 64)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !2579, file: !6, line: 65, baseType: !1122, size: 32, offset: 96)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !2579, file: !6, line: 67, baseType: !1122, size: 32, offset: 128)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !2579, file: !6, line: 69, baseType: !1122, size: 32, offset: 160)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2573, file: !6, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2573, file: !6, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2573, file: !6, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !2573, file: !6, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2573, file: !6, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !2573, file: !6, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !2573, file: !6, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !2573, file: !6, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !1023, file: !6, line: 217, baseType: !2595, size: 320, offset: 1472)
!2595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !6, line: 126, size: 320, elements: !2596)
!2596 = !{!2597, !2598, !2599, !2600, !2601, !2602, !2603}
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !2595, file: !6, line: 128, baseType: !1020, size: 64)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !2595, file: !6, line: 130, baseType: !1020, size: 64, offset: 64)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !2595, file: !6, line: 134, baseType: !1022, size: 64, offset: 128)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !2595, file: !6, line: 137, baseType: !1122, size: 32, offset: 192)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2595, file: !6, line: 138, baseType: !1122, size: 32, offset: 224)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !2595, file: !6, line: 141, baseType: !1122, size: 32, offset: 256)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !2595, file: !6, line: 144, baseType: !1145, size: 8, offset: 288)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1023, file: !6, line: 218, baseType: !2605, size: 32, offset: 1792)
!2605 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !6, line: 150, size: 32, elements: !2606)
!2606 = !{!2607}
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !2605, file: !6, line: 151, baseType: !7, size: 32)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !1023, file: !6, line: 219, baseType: !2609, size: 192, offset: 1856)
!2609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !6, line: 171, size: 192, elements: !2610)
!2610 = !{!2611, !2632, !2633}
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !2609, file: !6, line: 173, baseType: !2612, size: 64)
!2612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2613, size: 64)
!2613 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !6, line: 169, baseType: !2614)
!2614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !6, line: 169, size: 128, elements: !2615)
!2615 = !{!2616}
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2614, file: !6, line: 169, baseType: !2617, size: 128)
!2617 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !6, line: 168, baseType: !2618)
!2618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !6, line: 168, size: 128, elements: !2619)
!2619 = !{!2620, !2621, !2622}
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2618, file: !6, line: 168, baseType: !7, size: 32)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2618, file: !6, line: 168, baseType: !7, size: 32, offset: 32)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2618, file: !6, line: 168, baseType: !2623, size: 64, offset: 64)
!2623 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2624, size: 64, elements: !1126)
!2624 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !6, line: 167, baseType: !2625)
!2625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2626, size: 64)
!2626 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !6, line: 156, size: 192, elements: !2627)
!2627 = !{!2628, !2629, !2630, !2631}
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !2626, file: !6, line: 159, baseType: !1026, size: 64)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !2626, file: !6, line: 161, baseType: !1026, size: 64, offset: 64)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !2626, file: !6, line: 163, baseType: !1145, size: 8, offset: 128)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !2626, file: !6, line: 165, baseType: !1145, size: 8, offset: 136)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !2609, file: !6, line: 174, baseType: !2001, size: 64, offset: 64)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !2609, file: !6, line: 175, baseType: !2001, size: 64, offset: 128)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !1023, file: !6, line: 220, baseType: !2635, size: 256, offset: 2048)
!2635 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !6, line: 74, size: 256, elements: !2636)
!2636 = !{!2637, !2638, !2639, !2640, !2641, !2642}
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !2635, file: !6, line: 76, baseType: !1020, size: 64)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !2635, file: !6, line: 77, baseType: !1020, size: 64, offset: 64)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2635, file: !6, line: 78, baseType: !1026, size: 64, offset: 128)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !2635, file: !6, line: 79, baseType: !1145, size: 8, offset: 192)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !2635, file: !6, line: 80, baseType: !1145, size: 8, offset: 200)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !2635, file: !6, line: 82, baseType: !1145, size: 8, offset: 208)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1023, file: !6, line: 223, baseType: !1019, size: 64, offset: 2304)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1023, file: !6, line: 225, baseType: !1122, size: 32, offset: 2368)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !1023, file: !6, line: 227, baseType: !1122, size: 32, offset: 2400)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !1023, file: !6, line: 231, baseType: !1122, size: 32, offset: 2432)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !1023, file: !6, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !1023, file: !6, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !1023, file: !6, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !1023, file: !6, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !1023, file: !6, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !1023, file: !6, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !1023, file: !6, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1023, file: !6, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !1023, file: !6, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !1023, file: !6, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !1016, file: !6, line: 318, baseType: !1022, size: 64, offset: 128)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !1016, file: !6, line: 319, baseType: !1015, size: 64, offset: 192)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !1016, file: !6, line: 320, baseType: !1015, size: 64, offset: 256)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !1016, file: !6, line: 321, baseType: !1015, size: 64, offset: 320)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !1016, file: !6, line: 322, baseType: !1015, size: 64, offset: 384)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !1016, file: !6, line: 323, baseType: !1355, size: 64, offset: 448)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1016, file: !6, line: 324, baseType: !1308, size: 64, offset: 512)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !1016, file: !6, line: 327, baseType: !2665, size: 32, offset: 576)
!2665 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !6, line: 312, baseType: !575)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !1016, file: !6, line: 330, baseType: !7, size: 32, offset: 608)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1016, file: !6, line: 334, baseType: !1122, size: 32, offset: 640)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1016, file: !6, line: 336, baseType: !1122, size: 32, offset: 672)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !1016, file: !6, line: 338, baseType: !2670, size: 16, offset: 704)
!2670 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !1016, file: !6, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !1016, file: !6, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !1016, file: !6, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1008, file: !3, line: 146, baseType: !1308, size: 64, offset: 64)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1008, file: !3, line: 147, baseType: !1007, size: 64, offset: 128)
!2676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2677, size: 64)
!2677 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_hook_list", file: !3, line: 151, size: 192, elements: !2678)
!2678 = !{!2679, !2684, !2685}
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "hook", scope: !2677, file: !3, line: 152, baseType: !2680, size: 64)
!2680 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_hook", file: !6, line: 514, baseType: !2681)
!2681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2682, size: 64)
!2682 = !DISubroutineType(types: !2683)
!2683 = !{null, !1022, !1308}
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2677, file: !3, line: 153, baseType: !1308, size: 64, offset: 64)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2677, file: !3, line: 154, baseType: !2676, size: 64, offset: 128)
!2686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2687, size: 64)
!2687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_2edge_hook_list", file: !3, line: 158, size: 192, elements: !2688)
!2688 = !{!2689, !2694, !2695}
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "hook", scope: !2687, file: !3, line: 159, baseType: !2690, size: 64)
!2690 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_2edge_hook", file: !6, line: 515, baseType: !2691)
!2691 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2692, size: 64)
!2692 = !DISubroutineType(types: !2693)
!2693 = !{null, !1015, !1015, !1308}
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2687, file: !3, line: 160, baseType: !1308, size: 64, offset: 64)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2687, file: !3, line: 161, baseType: !2686, size: 64, offset: 128)
!2696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2697, size: 64)
!2697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_2node_hook_list", file: !3, line: 165, size: 192, elements: !2698)
!2698 = !{!2699, !2704, !2705}
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "hook", scope: !2697, file: !3, line: 166, baseType: !2700, size: 64)
!2700 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_2node_hook", file: !6, line: 517, baseType: !2701)
!2701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2702, size: 64)
!2702 = !DISubroutineType(types: !2703)
!2703 = !{null, !1022, !1022, !1308}
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2697, file: !3, line: 167, baseType: !1308, size: 64, offset: 64)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2697, file: !3, line: 168, baseType: !2696, size: 64, offset: 128)
!2706 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1022, size: 64)
!2707 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2709, size: 64)
!2709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_asm_node", file: !6, line: 392, size: 192, elements: !2710)
!2710 = !{!2711, !2712, !2713}
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2709, file: !6, line: 394, baseType: !2708, size: 64)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "asm_str", scope: !2709, file: !6, line: 396, baseType: !1026, size: 64, offset: 64)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2709, file: !6, line: 398, baseType: !1122, size: 32, offset: 128)
!2714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2715, size: 64)
!2715 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1023)
!2716 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1027, line: 59, baseType: !2717)
!2717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2718, size: 64)
!2718 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1029)
!2719 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2720, size: 64)
!2720 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1016)
!2721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2722, size: 64)
!2722 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1357)
!2723 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_edge_p", file: !6, line: 350, baseType: !1015)
!2724 = !{!0, !2725, !2727, !2729, !2738, !2744, !2760, !2763, !2765, !2767, !2769, !2771, !2773, !2775, !2777, !2779, !2781, !2783, !2785, !2787, !2789, !2791, !2793, !2795, !2797, !2799, !2801}
!2725 = !DIGlobalVariableExpression(var: !2726, expr: !DIExpression())
!2726 = distinct !DIGlobalVariable(name: "cgraph_state", scope: !2, file: !3, line: 127, type: !5, isLocal: false, isDefinition: true)
!2727 = !DIGlobalVariableExpression(var: !2728, expr: !DIExpression())
!2728 = distinct !DIGlobalVariable(name: "cgraph_function_flags_ready", scope: !2, file: !3, line: 130, type: !1145, isLocal: false, isDefinition: true)
!2729 = !DIGlobalVariableExpression(var: !2730, expr: !DIExpression())
!2730 = distinct !DIGlobalVariable(name: "cif_string_table", scope: !2731, file: !3, line: 1600, type: !2735, isLocal: true, isDefinition: true)
!2731 = distinct !DISubprogram(name: "cgraph_inline_failed_string", scope: !3, file: !3, line: 1595, type: !2732, scopeLine: 1596, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!2732 = !DISubroutineType(types: !2733)
!2733 = !{!1228, !2665}
!2734 = !{}
!2735 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1228, size: 1216, elements: !2736)
!2736 = !{!2737}
!2737 = !DISubrange(count: 19)
!2738 = !DIGlobalVariableExpression(var: !2739, expr: !DIExpression())
!2739 = distinct !DIGlobalVariable(name: "cgraph_availability_names", scope: !2, file: !3, line: 1618, type: !2740, isLocal: false, isDefinition: true)
!2740 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2741, size: 320, elements: !2742)
!2741 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1228)
!2742 = !{!2743}
!2743 = !DISubrange(count: 5)
!2744 = !DIGlobalVariableExpression(var: !2745, expr: !DIExpression())
!2745 = distinct !DIGlobalVariable(name: "gt_ggc_r_gt_cgraph_h", scope: !2, file: !2746, line: 24, type: !2747, isLocal: false, isDefinition: true)
!2746 = !DIFile(filename: "./gt-cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2747 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2748, size: 1920, elements: !2758)
!2748 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2749)
!2749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !2750, line: 69, size: 320, elements: !2751)
!2750 = !DIFile(filename: "./ggc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2751 = !{!2752, !2753, !2754, !2755, !2757}
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2749, file: !2750, line: 70, baseType: !1308, size: 64)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !2749, file: !2750, line: 71, baseType: !1501, size: 64, offset: 64)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !2749, file: !2750, line: 72, baseType: !1501, size: 64, offset: 128)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !2749, file: !2750, line: 73, baseType: !2756, size: 64, offset: 192)
!2756 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !2750, line: 65, baseType: !1878)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !2749, file: !2750, line: 74, baseType: !2756, size: 64, offset: 256)
!2758 = !{!2759}
!2759 = !DISubrange(count: 6)
!2760 = !DIGlobalVariableExpression(var: !2761, expr: !DIExpression())
!2761 = distinct !DIGlobalVariable(name: "gt_pch_rs_gt_cgraph_h", scope: !2, file: !2746, line: 63, type: !2762, isLocal: false, isDefinition: true)
!2762 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2748, size: 640, elements: !1272)
!2763 = !DIGlobalVariableExpression(var: !2764, expr: !DIExpression())
!2764 = distinct !DIGlobalVariable(name: "cgraph_hash", scope: !2, file: !3, line: 96, type: !1861, isLocal: true, isDefinition: true)
!2765 = !DIGlobalVariableExpression(var: !2766, expr: !DIExpression())
!2766 = distinct !DIGlobalVariable(name: "assembler_name_hash", scope: !2, file: !3, line: 98, type: !1861, isLocal: true, isDefinition: true)
!2767 = !DIGlobalVariableExpression(var: !2768, expr: !DIExpression())
!2768 = distinct !DIGlobalVariable(name: "cgraph_nodes", scope: !2, file: !3, line: 101, type: !1022, isLocal: false, isDefinition: true)
!2769 = !DIGlobalVariableExpression(var: !2770, expr: !DIExpression())
!2770 = distinct !DIGlobalVariable(name: "cgraph_nodes_queue", scope: !2, file: !3, line: 104, type: !1022, isLocal: false, isDefinition: true)
!2771 = !DIGlobalVariableExpression(var: !2772, expr: !DIExpression())
!2772 = distinct !DIGlobalVariable(name: "cgraph_new_nodes", scope: !2, file: !3, line: 109, type: !1022, isLocal: false, isDefinition: true)
!2773 = !DIGlobalVariableExpression(var: !2774, expr: !DIExpression())
!2774 = distinct !DIGlobalVariable(name: "cgraph_n_nodes", scope: !2, file: !3, line: 112, type: !1122, isLocal: false, isDefinition: true)
!2775 = !DIGlobalVariableExpression(var: !2776, expr: !DIExpression())
!2776 = distinct !DIGlobalVariable(name: "cgraph_max_uid", scope: !2, file: !3, line: 115, type: !1122, isLocal: false, isDefinition: true)
!2777 = !DIGlobalVariableExpression(var: !2778, expr: !DIExpression())
!2778 = distinct !DIGlobalVariable(name: "cgraph_edge_max_uid", scope: !2, file: !3, line: 118, type: !1122, isLocal: false, isDefinition: true)
!2779 = !DIGlobalVariableExpression(var: !2780, expr: !DIExpression())
!2780 = distinct !DIGlobalVariable(name: "cgraph_max_pid", scope: !2, file: !3, line: 121, type: !1122, isLocal: false, isDefinition: true)
!2781 = !DIGlobalVariableExpression(var: !2782, expr: !DIExpression())
!2782 = distinct !DIGlobalVariable(name: "cgraph_asm_nodes", scope: !2, file: !3, line: 133, type: !2708, isLocal: false, isDefinition: true)
!2783 = !DIGlobalVariableExpression(var: !2784, expr: !DIExpression())
!2784 = distinct !DIGlobalVariable(name: "cgraph_asm_last_node", scope: !2, file: !3, line: 136, type: !2708, isLocal: true, isDefinition: true)
!2785 = !DIGlobalVariableExpression(var: !2786, expr: !DIExpression())
!2786 = distinct !DIGlobalVariable(name: "cgraph_order", scope: !2, file: !3, line: 141, type: !1122, isLocal: false, isDefinition: true)
!2787 = !DIGlobalVariableExpression(var: !2788, expr: !DIExpression())
!2788 = distinct !DIGlobalVariable(name: "first_cgraph_edge_removal_hook", scope: !2, file: !3, line: 172, type: !1007, isLocal: false, isDefinition: true)
!2789 = !DIGlobalVariableExpression(var: !2790, expr: !DIExpression())
!2790 = distinct !DIGlobalVariable(name: "first_cgraph_node_removal_hook", scope: !2, file: !3, line: 174, type: !2676, isLocal: false, isDefinition: true)
!2791 = !DIGlobalVariableExpression(var: !2792, expr: !DIExpression())
!2792 = distinct !DIGlobalVariable(name: "first_cgraph_edge_duplicated_hook", scope: !2, file: !3, line: 176, type: !2686, isLocal: false, isDefinition: true)
!2793 = !DIGlobalVariableExpression(var: !2794, expr: !DIExpression())
!2794 = distinct !DIGlobalVariable(name: "first_cgraph_node_duplicated_hook", scope: !2, file: !3, line: 178, type: !2696, isLocal: false, isDefinition: true)
!2795 = !DIGlobalVariableExpression(var: !2796, expr: !DIExpression())
!2796 = distinct !DIGlobalVariable(name: "first_cgraph_function_insertion_hook", scope: !2, file: !3, line: 180, type: !2676, isLocal: false, isDefinition: true)
!2797 = !DIGlobalVariableExpression(var: !2798, expr: !DIExpression())
!2798 = distinct !DIGlobalVariable(name: "free_nodes", scope: !2, file: !3, line: 184, type: !1022, isLocal: true, isDefinition: true)
!2799 = !DIGlobalVariableExpression(var: !2800, expr: !DIExpression())
!2800 = distinct !DIGlobalVariable(name: "free_edges", scope: !2, file: !3, line: 187, type: !1015, isLocal: true, isDefinition: true)
!2801 = !DIGlobalVariableExpression(var: !2802, expr: !DIExpression())
!2802 = distinct !DIGlobalVariable(name: "clone_fn_id_num", scope: !2, file: !3, line: 1935, type: !7, isLocal: true, isDefinition: true)
!2803 = !{i32 7, !"Dwarf Version", i32 4}
!2804 = !{i32 2, !"Debug Info Version", i32 3}
!2805 = !{i32 1, !"wchar_size", i32 4}
!2806 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2807 = distinct !DISubprogram(name: "cgraph_add_edge_removal_hook", scope: !3, file: !3, line: 196, type: !2808, scopeLine: 197, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!2808 = !DISubroutineType(types: !2809)
!2809 = !{!1007, !1011, !1308}
!2810 = !DILocalVariable(name: "hook", arg: 1, scope: !2807, file: !3, line: 196, type: !1011)
!2811 = !DILocation(line: 196, column: 48, scope: !2807)
!2812 = !DILocalVariable(name: "data", arg: 2, scope: !2807, file: !3, line: 196, type: !1308)
!2813 = !DILocation(line: 196, column: 60, scope: !2807)
!2814 = !DILocalVariable(name: "entry", scope: !2807, file: !3, line: 198, type: !1007)
!2815 = !DILocation(line: 198, column: 33, scope: !2807)
!2816 = !DILocalVariable(name: "ptr", scope: !2807, file: !3, line: 199, type: !2817)
!2817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1007, size: 64)
!2818 = !DILocation(line: 199, column: 34, scope: !2807)
!2819 = !DILocation(line: 201, column: 44, scope: !2807)
!2820 = !DILocation(line: 201, column: 11, scope: !2807)
!2821 = !DILocation(line: 201, column: 9, scope: !2807)
!2822 = !DILocation(line: 202, column: 17, scope: !2807)
!2823 = !DILocation(line: 202, column: 3, scope: !2807)
!2824 = !DILocation(line: 202, column: 10, scope: !2807)
!2825 = !DILocation(line: 202, column: 15, scope: !2807)
!2826 = !DILocation(line: 203, column: 17, scope: !2807)
!2827 = !DILocation(line: 203, column: 3, scope: !2807)
!2828 = !DILocation(line: 203, column: 10, scope: !2807)
!2829 = !DILocation(line: 203, column: 15, scope: !2807)
!2830 = !DILocation(line: 204, column: 3, scope: !2807)
!2831 = !DILocation(line: 204, column: 10, scope: !2807)
!2832 = !DILocation(line: 204, column: 15, scope: !2807)
!2833 = !DILocation(line: 205, column: 3, scope: !2807)
!2834 = !DILocation(line: 205, column: 11, scope: !2807)
!2835 = !DILocation(line: 205, column: 10, scope: !2807)
!2836 = !DILocation(line: 206, column: 14, scope: !2807)
!2837 = !DILocation(line: 206, column: 13, scope: !2807)
!2838 = !DILocation(line: 206, column: 20, scope: !2807)
!2839 = !DILocation(line: 206, column: 9, scope: !2807)
!2840 = distinct !{!2840, !2833, !2838}
!2841 = !DILocation(line: 207, column: 10, scope: !2807)
!2842 = !DILocation(line: 207, column: 4, scope: !2807)
!2843 = !DILocation(line: 207, column: 8, scope: !2807)
!2844 = !DILocation(line: 208, column: 10, scope: !2807)
!2845 = !DILocation(line: 208, column: 3, scope: !2807)
!2846 = distinct !DISubprogram(name: "cgraph_remove_edge_removal_hook", scope: !3, file: !3, line: 213, type: !2847, scopeLine: 214, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!2847 = !DISubroutineType(types: !2848)
!2848 = !{null, !1007}
!2849 = !DILocalVariable(name: "entry", arg: 1, scope: !2846, file: !3, line: 213, type: !1007)
!2850 = !DILocation(line: 213, column: 64, scope: !2846)
!2851 = !DILocalVariable(name: "ptr", scope: !2846, file: !3, line: 215, type: !2817)
!2852 = !DILocation(line: 215, column: 34, scope: !2846)
!2853 = !DILocation(line: 217, column: 3, scope: !2846)
!2854 = !DILocation(line: 217, column: 11, scope: !2846)
!2855 = !DILocation(line: 217, column: 10, scope: !2846)
!2856 = !DILocation(line: 217, column: 18, scope: !2846)
!2857 = !DILocation(line: 217, column: 15, scope: !2846)
!2858 = !DILocation(line: 218, column: 14, scope: !2846)
!2859 = !DILocation(line: 218, column: 13, scope: !2846)
!2860 = !DILocation(line: 218, column: 20, scope: !2846)
!2861 = !DILocation(line: 218, column: 9, scope: !2846)
!2862 = distinct !{!2862, !2853, !2860}
!2863 = !DILocation(line: 219, column: 10, scope: !2846)
!2864 = !DILocation(line: 219, column: 17, scope: !2846)
!2865 = !DILocation(line: 219, column: 4, scope: !2846)
!2866 = !DILocation(line: 219, column: 8, scope: !2846)
!2867 = !DILocation(line: 220, column: 9, scope: !2846)
!2868 = !DILocation(line: 220, column: 3, scope: !2846)
!2869 = !DILocation(line: 221, column: 1, scope: !2846)
!2870 = distinct !DISubprogram(name: "cgraph_add_node_removal_hook", scope: !3, file: !3, line: 237, type: !2871, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!2871 = !DISubroutineType(types: !2872)
!2872 = !{!2676, !2680, !1308}
!2873 = !DILocalVariable(name: "hook", arg: 1, scope: !2870, file: !3, line: 237, type: !2680)
!2874 = !DILocation(line: 237, column: 48, scope: !2870)
!2875 = !DILocalVariable(name: "data", arg: 2, scope: !2870, file: !3, line: 237, type: !1308)
!2876 = !DILocation(line: 237, column: 60, scope: !2870)
!2877 = !DILocalVariable(name: "entry", scope: !2870, file: !3, line: 239, type: !2676)
!2878 = !DILocation(line: 239, column: 33, scope: !2870)
!2879 = !DILocalVariable(name: "ptr", scope: !2870, file: !3, line: 240, type: !2880)
!2880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2676, size: 64)
!2881 = !DILocation(line: 240, column: 34, scope: !2870)
!2882 = !DILocation(line: 242, column: 44, scope: !2870)
!2883 = !DILocation(line: 242, column: 11, scope: !2870)
!2884 = !DILocation(line: 242, column: 9, scope: !2870)
!2885 = !DILocation(line: 243, column: 17, scope: !2870)
!2886 = !DILocation(line: 243, column: 3, scope: !2870)
!2887 = !DILocation(line: 243, column: 10, scope: !2870)
!2888 = !DILocation(line: 243, column: 15, scope: !2870)
!2889 = !DILocation(line: 244, column: 17, scope: !2870)
!2890 = !DILocation(line: 244, column: 3, scope: !2870)
!2891 = !DILocation(line: 244, column: 10, scope: !2870)
!2892 = !DILocation(line: 244, column: 15, scope: !2870)
!2893 = !DILocation(line: 245, column: 3, scope: !2870)
!2894 = !DILocation(line: 245, column: 10, scope: !2870)
!2895 = !DILocation(line: 245, column: 15, scope: !2870)
!2896 = !DILocation(line: 246, column: 3, scope: !2870)
!2897 = !DILocation(line: 246, column: 11, scope: !2870)
!2898 = !DILocation(line: 246, column: 10, scope: !2870)
!2899 = !DILocation(line: 247, column: 14, scope: !2870)
!2900 = !DILocation(line: 247, column: 13, scope: !2870)
!2901 = !DILocation(line: 247, column: 20, scope: !2870)
!2902 = !DILocation(line: 247, column: 9, scope: !2870)
!2903 = distinct !{!2903, !2896, !2901}
!2904 = !DILocation(line: 248, column: 10, scope: !2870)
!2905 = !DILocation(line: 248, column: 4, scope: !2870)
!2906 = !DILocation(line: 248, column: 8, scope: !2870)
!2907 = !DILocation(line: 249, column: 10, scope: !2870)
!2908 = !DILocation(line: 249, column: 3, scope: !2870)
!2909 = distinct !DISubprogram(name: "cgraph_remove_node_removal_hook", scope: !3, file: !3, line: 254, type: !2910, scopeLine: 255, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!2910 = !DISubroutineType(types: !2911)
!2911 = !{null, !2676}
!2912 = !DILocalVariable(name: "entry", arg: 1, scope: !2909, file: !3, line: 254, type: !2676)
!2913 = !DILocation(line: 254, column: 64, scope: !2909)
!2914 = !DILocalVariable(name: "ptr", scope: !2909, file: !3, line: 256, type: !2880)
!2915 = !DILocation(line: 256, column: 34, scope: !2909)
!2916 = !DILocation(line: 258, column: 3, scope: !2909)
!2917 = !DILocation(line: 258, column: 11, scope: !2909)
!2918 = !DILocation(line: 258, column: 10, scope: !2909)
!2919 = !DILocation(line: 258, column: 18, scope: !2909)
!2920 = !DILocation(line: 258, column: 15, scope: !2909)
!2921 = !DILocation(line: 259, column: 14, scope: !2909)
!2922 = !DILocation(line: 259, column: 13, scope: !2909)
!2923 = !DILocation(line: 259, column: 20, scope: !2909)
!2924 = !DILocation(line: 259, column: 9, scope: !2909)
!2925 = distinct !{!2925, !2916, !2923}
!2926 = !DILocation(line: 260, column: 10, scope: !2909)
!2927 = !DILocation(line: 260, column: 17, scope: !2909)
!2928 = !DILocation(line: 260, column: 4, scope: !2909)
!2929 = !DILocation(line: 260, column: 8, scope: !2909)
!2930 = !DILocation(line: 261, column: 9, scope: !2909)
!2931 = !DILocation(line: 261, column: 3, scope: !2909)
!2932 = !DILocation(line: 262, column: 1, scope: !2909)
!2933 = distinct !DISubprogram(name: "cgraph_add_function_insertion_hook", scope: !3, file: !3, line: 278, type: !2871, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!2934 = !DILocalVariable(name: "hook", arg: 1, scope: !2933, file: !3, line: 278, type: !2680)
!2935 = !DILocation(line: 278, column: 54, scope: !2933)
!2936 = !DILocalVariable(name: "data", arg: 2, scope: !2933, file: !3, line: 278, type: !1308)
!2937 = !DILocation(line: 278, column: 66, scope: !2933)
!2938 = !DILocalVariable(name: "entry", scope: !2933, file: !3, line: 280, type: !2676)
!2939 = !DILocation(line: 280, column: 33, scope: !2933)
!2940 = !DILocalVariable(name: "ptr", scope: !2933, file: !3, line: 281, type: !2880)
!2941 = !DILocation(line: 281, column: 34, scope: !2933)
!2942 = !DILocation(line: 283, column: 44, scope: !2933)
!2943 = !DILocation(line: 283, column: 11, scope: !2933)
!2944 = !DILocation(line: 283, column: 9, scope: !2933)
!2945 = !DILocation(line: 284, column: 17, scope: !2933)
!2946 = !DILocation(line: 284, column: 3, scope: !2933)
!2947 = !DILocation(line: 284, column: 10, scope: !2933)
!2948 = !DILocation(line: 284, column: 15, scope: !2933)
!2949 = !DILocation(line: 285, column: 17, scope: !2933)
!2950 = !DILocation(line: 285, column: 3, scope: !2933)
!2951 = !DILocation(line: 285, column: 10, scope: !2933)
!2952 = !DILocation(line: 285, column: 15, scope: !2933)
!2953 = !DILocation(line: 286, column: 3, scope: !2933)
!2954 = !DILocation(line: 286, column: 10, scope: !2933)
!2955 = !DILocation(line: 286, column: 15, scope: !2933)
!2956 = !DILocation(line: 287, column: 3, scope: !2933)
!2957 = !DILocation(line: 287, column: 11, scope: !2933)
!2958 = !DILocation(line: 287, column: 10, scope: !2933)
!2959 = !DILocation(line: 288, column: 14, scope: !2933)
!2960 = !DILocation(line: 288, column: 13, scope: !2933)
!2961 = !DILocation(line: 288, column: 20, scope: !2933)
!2962 = !DILocation(line: 288, column: 9, scope: !2933)
!2963 = distinct !{!2963, !2956, !2961}
!2964 = !DILocation(line: 289, column: 10, scope: !2933)
!2965 = !DILocation(line: 289, column: 4, scope: !2933)
!2966 = !DILocation(line: 289, column: 8, scope: !2933)
!2967 = !DILocation(line: 290, column: 10, scope: !2933)
!2968 = !DILocation(line: 290, column: 3, scope: !2933)
!2969 = distinct !DISubprogram(name: "cgraph_remove_function_insertion_hook", scope: !3, file: !3, line: 295, type: !2910, scopeLine: 296, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!2970 = !DILocalVariable(name: "entry", arg: 1, scope: !2969, file: !3, line: 295, type: !2676)
!2971 = !DILocation(line: 295, column: 70, scope: !2969)
!2972 = !DILocalVariable(name: "ptr", scope: !2969, file: !3, line: 297, type: !2880)
!2973 = !DILocation(line: 297, column: 34, scope: !2969)
!2974 = !DILocation(line: 299, column: 3, scope: !2969)
!2975 = !DILocation(line: 299, column: 11, scope: !2969)
!2976 = !DILocation(line: 299, column: 10, scope: !2969)
!2977 = !DILocation(line: 299, column: 18, scope: !2969)
!2978 = !DILocation(line: 299, column: 15, scope: !2969)
!2979 = !DILocation(line: 300, column: 14, scope: !2969)
!2980 = !DILocation(line: 300, column: 13, scope: !2969)
!2981 = !DILocation(line: 300, column: 20, scope: !2969)
!2982 = !DILocation(line: 300, column: 9, scope: !2969)
!2983 = distinct !{!2983, !2974, !2981}
!2984 = !DILocation(line: 301, column: 10, scope: !2969)
!2985 = !DILocation(line: 301, column: 17, scope: !2969)
!2986 = !DILocation(line: 301, column: 4, scope: !2969)
!2987 = !DILocation(line: 301, column: 8, scope: !2969)
!2988 = !DILocation(line: 302, column: 9, scope: !2969)
!2989 = !DILocation(line: 302, column: 3, scope: !2969)
!2990 = !DILocation(line: 303, column: 1, scope: !2969)
!2991 = distinct !DISubprogram(name: "cgraph_call_function_insertion_hooks", scope: !3, file: !3, line: 307, type: !2541, scopeLine: 308, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!2992 = !DILocalVariable(name: "node", arg: 1, scope: !2991, file: !3, line: 307, type: !1022)
!2993 = !DILocation(line: 307, column: 59, scope: !2991)
!2994 = !DILocalVariable(name: "entry", scope: !2991, file: !3, line: 309, type: !2676)
!2995 = !DILocation(line: 309, column: 33, scope: !2991)
!2996 = !DILocation(line: 309, column: 41, scope: !2991)
!2997 = !DILocation(line: 310, column: 3, scope: !2991)
!2998 = !DILocation(line: 310, column: 10, scope: !2991)
!2999 = !DILocation(line: 312, column: 5, scope: !3000)
!3000 = distinct !DILexicalBlock(scope: !2991, file: !3, line: 311, column: 3)
!3001 = !DILocation(line: 312, column: 12, scope: !3000)
!3002 = !DILocation(line: 312, column: 18, scope: !3000)
!3003 = !DILocation(line: 312, column: 24, scope: !3000)
!3004 = !DILocation(line: 312, column: 31, scope: !3000)
!3005 = !DILocation(line: 313, column: 13, scope: !3000)
!3006 = !DILocation(line: 313, column: 20, scope: !3000)
!3007 = !DILocation(line: 313, column: 11, scope: !3000)
!3008 = distinct !{!3008, !2997, !3009}
!3009 = !DILocation(line: 314, column: 3, scope: !2991)
!3010 = !DILocation(line: 315, column: 1, scope: !2991)
!3011 = distinct !DISubprogram(name: "cgraph_add_edge_duplication_hook", scope: !3, file: !3, line: 319, type: !3012, scopeLine: 320, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3012 = !DISubroutineType(types: !3013)
!3013 = !{!2686, !2690, !1308}
!3014 = !DILocalVariable(name: "hook", arg: 1, scope: !3011, file: !3, line: 319, type: !2690)
!3015 = !DILocation(line: 319, column: 53, scope: !3011)
!3016 = !DILocalVariable(name: "data", arg: 2, scope: !3011, file: !3, line: 319, type: !1308)
!3017 = !DILocation(line: 319, column: 65, scope: !3011)
!3018 = !DILocalVariable(name: "entry", scope: !3011, file: !3, line: 321, type: !2686)
!3019 = !DILocation(line: 321, column: 34, scope: !3011)
!3020 = !DILocalVariable(name: "ptr", scope: !3011, file: !3, line: 322, type: !3021)
!3021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2686, size: 64)
!3022 = !DILocation(line: 322, column: 35, scope: !3011)
!3023 = !DILocation(line: 324, column: 45, scope: !3011)
!3024 = !DILocation(line: 324, column: 11, scope: !3011)
!3025 = !DILocation(line: 324, column: 9, scope: !3011)
!3026 = !DILocation(line: 325, column: 17, scope: !3011)
!3027 = !DILocation(line: 325, column: 3, scope: !3011)
!3028 = !DILocation(line: 325, column: 10, scope: !3011)
!3029 = !DILocation(line: 325, column: 15, scope: !3011)
!3030 = !DILocation(line: 326, column: 17, scope: !3011)
!3031 = !DILocation(line: 326, column: 3, scope: !3011)
!3032 = !DILocation(line: 326, column: 10, scope: !3011)
!3033 = !DILocation(line: 326, column: 15, scope: !3011)
!3034 = !DILocation(line: 327, column: 3, scope: !3011)
!3035 = !DILocation(line: 327, column: 10, scope: !3011)
!3036 = !DILocation(line: 327, column: 15, scope: !3011)
!3037 = !DILocation(line: 328, column: 3, scope: !3011)
!3038 = !DILocation(line: 328, column: 11, scope: !3011)
!3039 = !DILocation(line: 328, column: 10, scope: !3011)
!3040 = !DILocation(line: 329, column: 14, scope: !3011)
!3041 = !DILocation(line: 329, column: 13, scope: !3011)
!3042 = !DILocation(line: 329, column: 20, scope: !3011)
!3043 = !DILocation(line: 329, column: 9, scope: !3011)
!3044 = distinct !{!3044, !3037, !3042}
!3045 = !DILocation(line: 330, column: 10, scope: !3011)
!3046 = !DILocation(line: 330, column: 4, scope: !3011)
!3047 = !DILocation(line: 330, column: 8, scope: !3011)
!3048 = !DILocation(line: 331, column: 10, scope: !3011)
!3049 = !DILocation(line: 331, column: 3, scope: !3011)
!3050 = distinct !DISubprogram(name: "cgraph_remove_edge_duplication_hook", scope: !3, file: !3, line: 336, type: !3051, scopeLine: 337, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3051 = !DISubroutineType(types: !3052)
!3052 = !{null, !2686}
!3053 = !DILocalVariable(name: "entry", arg: 1, scope: !3050, file: !3, line: 336, type: !2686)
!3054 = !DILocation(line: 336, column: 69, scope: !3050)
!3055 = !DILocalVariable(name: "ptr", scope: !3050, file: !3, line: 338, type: !3021)
!3056 = !DILocation(line: 338, column: 35, scope: !3050)
!3057 = !DILocation(line: 340, column: 3, scope: !3050)
!3058 = !DILocation(line: 340, column: 11, scope: !3050)
!3059 = !DILocation(line: 340, column: 10, scope: !3050)
!3060 = !DILocation(line: 340, column: 18, scope: !3050)
!3061 = !DILocation(line: 340, column: 15, scope: !3050)
!3062 = !DILocation(line: 341, column: 14, scope: !3050)
!3063 = !DILocation(line: 341, column: 13, scope: !3050)
!3064 = !DILocation(line: 341, column: 20, scope: !3050)
!3065 = !DILocation(line: 341, column: 9, scope: !3050)
!3066 = distinct !{!3066, !3057, !3064}
!3067 = !DILocation(line: 342, column: 10, scope: !3050)
!3068 = !DILocation(line: 342, column: 17, scope: !3050)
!3069 = !DILocation(line: 342, column: 4, scope: !3050)
!3070 = !DILocation(line: 342, column: 8, scope: !3050)
!3071 = !DILocation(line: 343, column: 9, scope: !3050)
!3072 = !DILocation(line: 343, column: 3, scope: !3050)
!3073 = !DILocation(line: 344, column: 1, scope: !3050)
!3074 = distinct !DISubprogram(name: "cgraph_add_node_duplication_hook", scope: !3, file: !3, line: 361, type: !3075, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3075 = !DISubroutineType(types: !3076)
!3076 = !{!2696, !2700, !1308}
!3077 = !DILocalVariable(name: "hook", arg: 1, scope: !3074, file: !3, line: 361, type: !2700)
!3078 = !DILocation(line: 361, column: 53, scope: !3074)
!3079 = !DILocalVariable(name: "data", arg: 2, scope: !3074, file: !3, line: 361, type: !1308)
!3080 = !DILocation(line: 361, column: 65, scope: !3074)
!3081 = !DILocalVariable(name: "entry", scope: !3074, file: !3, line: 363, type: !2696)
!3082 = !DILocation(line: 363, column: 34, scope: !3074)
!3083 = !DILocalVariable(name: "ptr", scope: !3074, file: !3, line: 364, type: !3084)
!3084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2696, size: 64)
!3085 = !DILocation(line: 364, column: 35, scope: !3074)
!3086 = !DILocation(line: 366, column: 45, scope: !3074)
!3087 = !DILocation(line: 366, column: 11, scope: !3074)
!3088 = !DILocation(line: 366, column: 9, scope: !3074)
!3089 = !DILocation(line: 367, column: 17, scope: !3074)
!3090 = !DILocation(line: 367, column: 3, scope: !3074)
!3091 = !DILocation(line: 367, column: 10, scope: !3074)
!3092 = !DILocation(line: 367, column: 15, scope: !3074)
!3093 = !DILocation(line: 368, column: 17, scope: !3074)
!3094 = !DILocation(line: 368, column: 3, scope: !3074)
!3095 = !DILocation(line: 368, column: 10, scope: !3074)
!3096 = !DILocation(line: 368, column: 15, scope: !3074)
!3097 = !DILocation(line: 369, column: 3, scope: !3074)
!3098 = !DILocation(line: 369, column: 10, scope: !3074)
!3099 = !DILocation(line: 369, column: 15, scope: !3074)
!3100 = !DILocation(line: 370, column: 3, scope: !3074)
!3101 = !DILocation(line: 370, column: 11, scope: !3074)
!3102 = !DILocation(line: 370, column: 10, scope: !3074)
!3103 = !DILocation(line: 371, column: 14, scope: !3074)
!3104 = !DILocation(line: 371, column: 13, scope: !3074)
!3105 = !DILocation(line: 371, column: 20, scope: !3074)
!3106 = !DILocation(line: 371, column: 9, scope: !3074)
!3107 = distinct !{!3107, !3100, !3105}
!3108 = !DILocation(line: 372, column: 10, scope: !3074)
!3109 = !DILocation(line: 372, column: 4, scope: !3074)
!3110 = !DILocation(line: 372, column: 8, scope: !3074)
!3111 = !DILocation(line: 373, column: 10, scope: !3074)
!3112 = !DILocation(line: 373, column: 3, scope: !3074)
!3113 = distinct !DISubprogram(name: "cgraph_remove_node_duplication_hook", scope: !3, file: !3, line: 378, type: !3114, scopeLine: 379, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3114 = !DISubroutineType(types: !3115)
!3115 = !{null, !2696}
!3116 = !DILocalVariable(name: "entry", arg: 1, scope: !3113, file: !3, line: 378, type: !2696)
!3117 = !DILocation(line: 378, column: 69, scope: !3113)
!3118 = !DILocalVariable(name: "ptr", scope: !3113, file: !3, line: 380, type: !3084)
!3119 = !DILocation(line: 380, column: 35, scope: !3113)
!3120 = !DILocation(line: 382, column: 3, scope: !3113)
!3121 = !DILocation(line: 382, column: 11, scope: !3113)
!3122 = !DILocation(line: 382, column: 10, scope: !3113)
!3123 = !DILocation(line: 382, column: 18, scope: !3113)
!3124 = !DILocation(line: 382, column: 15, scope: !3113)
!3125 = !DILocation(line: 383, column: 14, scope: !3113)
!3126 = !DILocation(line: 383, column: 13, scope: !3113)
!3127 = !DILocation(line: 383, column: 20, scope: !3113)
!3128 = !DILocation(line: 383, column: 9, scope: !3113)
!3129 = distinct !{!3129, !3120, !3127}
!3130 = !DILocation(line: 384, column: 10, scope: !3113)
!3131 = !DILocation(line: 384, column: 17, scope: !3113)
!3132 = !DILocation(line: 384, column: 4, scope: !3113)
!3133 = !DILocation(line: 384, column: 8, scope: !3113)
!3134 = !DILocation(line: 385, column: 9, scope: !3113)
!3135 = !DILocation(line: 385, column: 3, scope: !3113)
!3136 = !DILocation(line: 386, column: 1, scope: !3113)
!3137 = distinct !DISubprogram(name: "cgraph_node", scope: !3, file: !3, line: 464, type: !3138, scopeLine: 465, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3138 = !DISubroutineType(types: !3139)
!3139 = !{!1022, !1026}
!3140 = !DILocalVariable(name: "decl", arg: 1, scope: !3137, file: !3, line: 464, type: !1026)
!3141 = !DILocation(line: 464, column: 19, scope: !3137)
!3142 = !DILocalVariable(name: "key", scope: !3137, file: !3, line: 466, type: !1023)
!3143 = !DILocation(line: 466, column: 22, scope: !3137)
!3144 = !DILocalVariable(name: "node", scope: !3137, file: !3, line: 466, type: !1022)
!3145 = !DILocation(line: 466, column: 28, scope: !3137)
!3146 = !DILocalVariable(name: "slot", scope: !3137, file: !3, line: 466, type: !2706)
!3147 = !DILocation(line: 466, column: 36, scope: !3137)
!3148 = !DILocation(line: 468, column: 3, scope: !3137)
!3149 = !DILocation(line: 470, column: 8, scope: !3150)
!3150 = distinct !DILexicalBlock(scope: !3137, file: !3, line: 470, column: 7)
!3151 = !DILocation(line: 470, column: 7, scope: !3137)
!3152 = !DILocation(line: 471, column: 19, scope: !3150)
!3153 = !DILocation(line: 471, column: 17, scope: !3150)
!3154 = !DILocation(line: 471, column: 5, scope: !3150)
!3155 = !DILocation(line: 473, column: 14, scope: !3137)
!3156 = !DILocation(line: 473, column: 7, scope: !3137)
!3157 = !DILocation(line: 473, column: 12, scope: !3137)
!3158 = !DILocation(line: 475, column: 50, scope: !3137)
!3159 = !DILocation(line: 475, column: 63, scope: !3137)
!3160 = !DILocation(line: 475, column: 34, scope: !3137)
!3161 = !DILocation(line: 475, column: 10, scope: !3137)
!3162 = !DILocation(line: 475, column: 8, scope: !3137)
!3163 = !DILocation(line: 477, column: 8, scope: !3164)
!3164 = distinct !DILexicalBlock(scope: !3137, file: !3, line: 477, column: 7)
!3165 = !DILocation(line: 477, column: 7, scope: !3164)
!3166 = !DILocation(line: 477, column: 7, scope: !3137)
!3167 = !DILocation(line: 479, column: 15, scope: !3168)
!3168 = distinct !DILexicalBlock(scope: !3164, file: !3, line: 478, column: 5)
!3169 = !DILocation(line: 479, column: 14, scope: !3168)
!3170 = !DILocation(line: 479, column: 12, scope: !3168)
!3171 = !DILocation(line: 480, column: 11, scope: !3172)
!3172 = distinct !DILexicalBlock(scope: !3168, file: !3, line: 480, column: 11)
!3173 = !DILocation(line: 480, column: 17, scope: !3172)
!3174 = !DILocation(line: 480, column: 11, scope: !3168)
!3175 = !DILocation(line: 481, column: 9, scope: !3172)
!3176 = !DILocation(line: 481, column: 15, scope: !3172)
!3177 = !DILocation(line: 481, column: 7, scope: !3172)
!3178 = !DILocation(line: 481, column: 2, scope: !3172)
!3179 = !DILocation(line: 482, column: 14, scope: !3168)
!3180 = !DILocation(line: 482, column: 7, scope: !3168)
!3181 = !DILocation(line: 485, column: 10, scope: !3137)
!3182 = !DILocation(line: 485, column: 8, scope: !3137)
!3183 = !DILocation(line: 486, column: 16, scope: !3137)
!3184 = !DILocation(line: 486, column: 3, scope: !3137)
!3185 = !DILocation(line: 486, column: 9, scope: !3137)
!3186 = !DILocation(line: 486, column: 14, scope: !3137)
!3187 = !DILocation(line: 487, column: 11, scope: !3137)
!3188 = !DILocation(line: 487, column: 4, scope: !3137)
!3189 = !DILocation(line: 487, column: 9, scope: !3137)
!3190 = !DILocation(line: 488, column: 7, scope: !3191)
!3191 = distinct !DILexicalBlock(scope: !3137, file: !3, line: 488, column: 7)
!3192 = !DILocation(line: 488, column: 27, scope: !3191)
!3193 = !DILocation(line: 488, column: 30, scope: !3191)
!3194 = !DILocation(line: 488, column: 62, scope: !3191)
!3195 = !DILocation(line: 488, column: 7, scope: !3137)
!3196 = !DILocation(line: 490, column: 35, scope: !3197)
!3197 = distinct !DILexicalBlock(scope: !3191, file: !3, line: 489, column: 5)
!3198 = !DILocation(line: 490, column: 22, scope: !3197)
!3199 = !DILocation(line: 490, column: 7, scope: !3197)
!3200 = !DILocation(line: 490, column: 13, scope: !3197)
!3201 = !DILocation(line: 490, column: 20, scope: !3197)
!3202 = !DILocation(line: 491, column: 27, scope: !3197)
!3203 = !DILocation(line: 491, column: 33, scope: !3197)
!3204 = !DILocation(line: 491, column: 41, scope: !3197)
!3205 = !DILocation(line: 491, column: 7, scope: !3197)
!3206 = !DILocation(line: 491, column: 13, scope: !3197)
!3207 = !DILocation(line: 491, column: 25, scope: !3197)
!3208 = !DILocation(line: 492, column: 30, scope: !3197)
!3209 = !DILocation(line: 492, column: 7, scope: !3197)
!3210 = !DILocation(line: 492, column: 13, scope: !3197)
!3211 = !DILocation(line: 492, column: 21, scope: !3197)
!3212 = !DILocation(line: 492, column: 28, scope: !3197)
!3213 = !DILocation(line: 493, column: 5, scope: !3197)
!3214 = !DILocation(line: 494, column: 7, scope: !3215)
!3215 = distinct !DILexicalBlock(scope: !3137, file: !3, line: 494, column: 7)
!3216 = !DILocation(line: 494, column: 7, scope: !3137)
!3217 = !DILocalVariable(name: "aslot", scope: !3218, file: !3, line: 496, type: !1882)
!3218 = distinct !DILexicalBlock(scope: !3215, file: !3, line: 495, column: 5)
!3219 = !DILocation(line: 496, column: 14, scope: !3218)
!3220 = !DILocalVariable(name: "name", scope: !3218, file: !3, line: 497, type: !1026)
!3221 = !DILocation(line: 497, column: 12, scope: !3218)
!3222 = !DILocation(line: 497, column: 19, scope: !3218)
!3223 = !DILocation(line: 499, column: 41, scope: !3218)
!3224 = !DILocation(line: 499, column: 62, scope: !3218)
!3225 = !DILocation(line: 500, column: 32, scope: !3218)
!3226 = !DILocation(line: 500, column: 6, scope: !3218)
!3227 = !DILocation(line: 499, column: 15, scope: !3218)
!3228 = !DILocation(line: 499, column: 13, scope: !3218)
!3229 = !DILocation(line: 506, column: 12, scope: !3230)
!3230 = distinct !DILexicalBlock(scope: !3218, file: !3, line: 506, column: 11)
!3231 = !DILocation(line: 506, column: 11, scope: !3230)
!3232 = !DILocation(line: 506, column: 18, scope: !3230)
!3233 = !DILocation(line: 506, column: 11, scope: !3218)
!3234 = !DILocation(line: 507, column: 11, scope: !3230)
!3235 = !DILocation(line: 507, column: 3, scope: !3230)
!3236 = !DILocation(line: 507, column: 9, scope: !3230)
!3237 = !DILocation(line: 507, column: 2, scope: !3230)
!3238 = !DILocation(line: 508, column: 5, scope: !3218)
!3239 = !DILocation(line: 509, column: 10, scope: !3137)
!3240 = !DILocation(line: 509, column: 3, scope: !3137)
!3241 = !DILocation(line: 510, column: 1, scope: !3137)
!3242 = distinct !DISubprogram(name: "hash_node", scope: !3, file: !3, line: 404, type: !1868, scopeLine: 405, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3243 = !DILocalVariable(name: "p", arg: 1, scope: !3242, file: !3, line: 404, type: !1661)
!3244 = !DILocation(line: 404, column: 24, scope: !3242)
!3245 = !DILocalVariable(name: "n", scope: !3242, file: !3, line: 406, type: !2714)
!3246 = !DILocation(line: 406, column: 29, scope: !3242)
!3247 = !DILocation(line: 406, column: 62, scope: !3242)
!3248 = !DILocation(line: 406, column: 33, scope: !3242)
!3249 = !DILocation(line: 407, column: 22, scope: !3242)
!3250 = !DILocation(line: 407, column: 3, scope: !3242)
!3251 = distinct !DISubprogram(name: "eq_node", scope: !3, file: !3, line: 414, type: !1874, scopeLine: 415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3252 = !DILocalVariable(name: "p1", arg: 1, scope: !3251, file: !3, line: 414, type: !1661)
!3253 = !DILocation(line: 414, column: 22, scope: !3251)
!3254 = !DILocalVariable(name: "p2", arg: 2, scope: !3251, file: !3, line: 414, type: !1661)
!3255 = !DILocation(line: 414, column: 38, scope: !3251)
!3256 = !DILocalVariable(name: "n1", scope: !3251, file: !3, line: 416, type: !2714)
!3257 = !DILocation(line: 416, column: 29, scope: !3251)
!3258 = !DILocation(line: 416, column: 63, scope: !3251)
!3259 = !DILocation(line: 416, column: 34, scope: !3251)
!3260 = !DILocalVariable(name: "n2", scope: !3251, file: !3, line: 417, type: !2714)
!3261 = !DILocation(line: 417, column: 29, scope: !3251)
!3262 = !DILocation(line: 417, column: 63, scope: !3251)
!3263 = !DILocation(line: 417, column: 34, scope: !3251)
!3264 = !DILocation(line: 418, column: 10, scope: !3251)
!3265 = !DILocation(line: 418, column: 33, scope: !3251)
!3266 = !DILocation(line: 418, column: 30, scope: !3251)
!3267 = !DILocation(line: 418, column: 3, scope: !3251)
!3268 = distinct !DISubprogram(name: "cgraph_create_node", scope: !3, file: !3, line: 445, type: !3269, scopeLine: 446, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3269 = !DISubroutineType(types: !3270)
!3270 = !{!1022}
!3271 = !DILocalVariable(name: "node", scope: !3268, file: !3, line: 447, type: !1022)
!3272 = !DILocation(line: 447, column: 23, scope: !3268)
!3273 = !DILocation(line: 447, column: 30, scope: !3268)
!3274 = !DILocation(line: 449, column: 16, scope: !3268)
!3275 = !DILocation(line: 449, column: 3, scope: !3268)
!3276 = !DILocation(line: 449, column: 9, scope: !3268)
!3277 = !DILocation(line: 449, column: 14, scope: !3268)
!3278 = !DILocation(line: 450, column: 3, scope: !3268)
!3279 = !DILocation(line: 450, column: 9, scope: !3268)
!3280 = !DILocation(line: 450, column: 13, scope: !3268)
!3281 = !DILocation(line: 451, column: 29, scope: !3268)
!3282 = !DILocation(line: 451, column: 3, scope: !3268)
!3283 = !DILocation(line: 451, column: 9, scope: !3268)
!3284 = !DILocation(line: 451, column: 15, scope: !3268)
!3285 = !DILocation(line: 452, column: 7, scope: !3286)
!3286 = distinct !DILexicalBlock(scope: !3268, file: !3, line: 452, column: 7)
!3287 = !DILocation(line: 452, column: 7, scope: !3268)
!3288 = !DILocation(line: 453, column: 30, scope: !3286)
!3289 = !DILocation(line: 453, column: 5, scope: !3286)
!3290 = !DILocation(line: 453, column: 19, scope: !3286)
!3291 = !DILocation(line: 453, column: 28, scope: !3286)
!3292 = !DILocation(line: 454, column: 3, scope: !3268)
!3293 = !DILocation(line: 454, column: 9, scope: !3268)
!3294 = !DILocation(line: 454, column: 18, scope: !3268)
!3295 = !DILocation(line: 455, column: 3, scope: !3268)
!3296 = !DILocation(line: 455, column: 9, scope: !3268)
!3297 = !DILocation(line: 455, column: 16, scope: !3268)
!3298 = !DILocation(line: 455, column: 33, scope: !3268)
!3299 = !DILocation(line: 456, column: 18, scope: !3268)
!3300 = !DILocation(line: 456, column: 16, scope: !3268)
!3301 = !DILocation(line: 457, column: 17, scope: !3268)
!3302 = !DILocation(line: 458, column: 10, scope: !3268)
!3303 = !DILocation(line: 458, column: 3, scope: !3268)
!3304 = distinct !DISubprogram(name: "cgraph_same_body_alias", scope: !3, file: !3, line: 550, type: !3305, scopeLine: 551, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3305 = !DISubroutineType(types: !3306)
!3306 = !{!1145, !1026, !1026}
!3307 = !DILocalVariable(name: "alias", arg: 1, scope: !3304, file: !3, line: 550, type: !1026)
!3308 = !DILocation(line: 550, column: 30, scope: !3304)
!3309 = !DILocalVariable(name: "decl", arg: 2, scope: !3304, file: !3, line: 550, type: !1026)
!3310 = !DILocation(line: 550, column: 42, scope: !3304)
!3311 = !DILocation(line: 559, column: 36, scope: !3304)
!3312 = !DILocation(line: 559, column: 43, scope: !3304)
!3313 = !DILocation(line: 559, column: 10, scope: !3304)
!3314 = !DILocation(line: 559, column: 49, scope: !3304)
!3315 = !DILocation(line: 559, column: 3, scope: !3304)
!3316 = distinct !DISubprogram(name: "cgraph_same_body_alias_1", scope: !3, file: !3, line: 515, type: !3317, scopeLine: 516, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3317 = !DISubroutineType(types: !3318)
!3318 = !{!1022, !1026, !1026}
!3319 = !DILocalVariable(name: "alias", arg: 1, scope: !3316, file: !3, line: 515, type: !1026)
!3320 = !DILocation(line: 515, column: 32, scope: !3316)
!3321 = !DILocalVariable(name: "decl", arg: 2, scope: !3316, file: !3, line: 515, type: !1026)
!3322 = !DILocation(line: 515, column: 44, scope: !3316)
!3323 = !DILocalVariable(name: "key", scope: !3316, file: !3, line: 517, type: !1023)
!3324 = !DILocation(line: 517, column: 22, scope: !3316)
!3325 = !DILocalVariable(name: "alias_node", scope: !3316, file: !3, line: 517, type: !1022)
!3326 = !DILocation(line: 517, column: 28, scope: !3316)
!3327 = !DILocalVariable(name: "decl_node", scope: !3316, file: !3, line: 517, type: !1022)
!3328 = !DILocation(line: 517, column: 41, scope: !3316)
!3329 = !DILocalVariable(name: "slot", scope: !3316, file: !3, line: 517, type: !2706)
!3330 = !DILocation(line: 517, column: 54, scope: !3316)
!3331 = !DILocation(line: 519, column: 3, scope: !3316)
!3332 = !DILocation(line: 520, column: 3, scope: !3316)
!3333 = !DILocation(line: 521, column: 28, scope: !3316)
!3334 = !DILocation(line: 521, column: 15, scope: !3316)
!3335 = !DILocation(line: 521, column: 13, scope: !3316)
!3336 = !DILocation(line: 523, column: 14, scope: !3316)
!3337 = !DILocation(line: 523, column: 7, scope: !3316)
!3338 = !DILocation(line: 523, column: 12, scope: !3316)
!3339 = !DILocation(line: 525, column: 50, scope: !3316)
!3340 = !DILocation(line: 525, column: 63, scope: !3316)
!3341 = !DILocation(line: 525, column: 34, scope: !3316)
!3342 = !DILocation(line: 525, column: 10, scope: !3316)
!3343 = !DILocation(line: 525, column: 8, scope: !3316)
!3344 = !DILocation(line: 528, column: 8, scope: !3345)
!3345 = distinct !DILexicalBlock(scope: !3316, file: !3, line: 528, column: 7)
!3346 = !DILocation(line: 528, column: 7, scope: !3345)
!3347 = !DILocation(line: 528, column: 7, scope: !3316)
!3348 = !DILocation(line: 529, column: 5, scope: !3345)
!3349 = !DILocation(line: 531, column: 16, scope: !3316)
!3350 = !DILocation(line: 531, column: 14, scope: !3316)
!3351 = !DILocation(line: 532, column: 22, scope: !3316)
!3352 = !DILocation(line: 532, column: 3, scope: !3316)
!3353 = !DILocation(line: 532, column: 15, scope: !3316)
!3354 = !DILocation(line: 532, column: 20, scope: !3316)
!3355 = !DILocation(line: 533, column: 3, scope: !3316)
!3356 = !DILocation(line: 533, column: 15, scope: !3316)
!3357 = !DILocation(line: 533, column: 31, scope: !3316)
!3358 = !DILocation(line: 534, column: 27, scope: !3316)
!3359 = !DILocation(line: 534, column: 3, scope: !3316)
!3360 = !DILocation(line: 534, column: 15, scope: !3316)
!3361 = !DILocation(line: 534, column: 25, scope: !3316)
!3362 = !DILocation(line: 535, column: 3, scope: !3316)
!3363 = !DILocation(line: 535, column: 15, scope: !3316)
!3364 = !DILocation(line: 535, column: 24, scope: !3316)
!3365 = !DILocation(line: 536, column: 7, scope: !3366)
!3366 = distinct !DILexicalBlock(scope: !3316, file: !3, line: 536, column: 7)
!3367 = !DILocation(line: 536, column: 18, scope: !3366)
!3368 = !DILocation(line: 536, column: 7, scope: !3316)
!3369 = !DILocation(line: 537, column: 38, scope: !3366)
!3370 = !DILocation(line: 537, column: 5, scope: !3366)
!3371 = !DILocation(line: 537, column: 16, scope: !3366)
!3372 = !DILocation(line: 537, column: 27, scope: !3366)
!3373 = !DILocation(line: 537, column: 36, scope: !3366)
!3374 = !DILocation(line: 538, column: 22, scope: !3316)
!3375 = !DILocation(line: 538, column: 33, scope: !3316)
!3376 = !DILocation(line: 538, column: 3, scope: !3316)
!3377 = !DILocation(line: 538, column: 15, scope: !3316)
!3378 = !DILocation(line: 538, column: 20, scope: !3316)
!3379 = !DILocation(line: 539, column: 29, scope: !3316)
!3380 = !DILocation(line: 539, column: 3, scope: !3316)
!3381 = !DILocation(line: 539, column: 15, scope: !3316)
!3382 = !DILocation(line: 539, column: 21, scope: !3316)
!3383 = !DILocation(line: 539, column: 27, scope: !3316)
!3384 = !DILocation(line: 540, column: 26, scope: !3316)
!3385 = !DILocation(line: 540, column: 3, scope: !3316)
!3386 = !DILocation(line: 540, column: 14, scope: !3316)
!3387 = !DILocation(line: 540, column: 24, scope: !3316)
!3388 = !DILocation(line: 541, column: 11, scope: !3316)
!3389 = !DILocation(line: 541, column: 4, scope: !3316)
!3390 = !DILocation(line: 541, column: 9, scope: !3316)
!3391 = !DILocation(line: 542, column: 10, scope: !3316)
!3392 = !DILocation(line: 542, column: 3, scope: !3316)
!3393 = !DILocation(line: 543, column: 1, scope: !3316)
!3394 = distinct !DISubprogram(name: "cgraph_add_thunk", scope: !3, file: !3, line: 563, type: !3395, scopeLine: 567, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3395 = !DISubroutineType(types: !3396)
!3396 = !{null, !1026, !1026, !1145, !1020, !1020, !1026, !1026}
!3397 = !DILocalVariable(name: "alias", arg: 1, scope: !3394, file: !3, line: 563, type: !1026)
!3398 = !DILocation(line: 563, column: 24, scope: !3394)
!3399 = !DILocalVariable(name: "decl", arg: 2, scope: !3394, file: !3, line: 563, type: !1026)
!3400 = !DILocation(line: 563, column: 36, scope: !3394)
!3401 = !DILocalVariable(name: "this_adjusting", arg: 3, scope: !3394, file: !3, line: 563, type: !1145)
!3402 = !DILocation(line: 563, column: 47, scope: !3394)
!3403 = !DILocalVariable(name: "fixed_offset", arg: 4, scope: !3394, file: !3, line: 564, type: !1020)
!3404 = !DILocation(line: 564, column: 19, scope: !3394)
!3405 = !DILocalVariable(name: "virtual_value", arg: 5, scope: !3394, file: !3, line: 564, type: !1020)
!3406 = !DILocation(line: 564, column: 47, scope: !3394)
!3407 = !DILocalVariable(name: "virtual_offset", arg: 6, scope: !3394, file: !3, line: 565, type: !1026)
!3408 = !DILocation(line: 565, column: 10, scope: !3394)
!3409 = !DILocalVariable(name: "real_alias", arg: 7, scope: !3394, file: !3, line: 566, type: !1026)
!3410 = !DILocation(line: 566, column: 10, scope: !3394)
!3411 = !DILocalVariable(name: "node", scope: !3394, file: !3, line: 568, type: !1022)
!3412 = !DILocation(line: 568, column: 23, scope: !3394)
!3413 = !DILocation(line: 568, column: 47, scope: !3394)
!3414 = !DILocation(line: 568, column: 30, scope: !3394)
!3415 = !DILocation(line: 570, column: 7, scope: !3416)
!3416 = distinct !DILexicalBlock(scope: !3394, file: !3, line: 570, column: 7)
!3417 = !DILocation(line: 570, column: 7, scope: !3394)
!3418 = !DILocation(line: 572, column: 7, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3416, file: !3, line: 571, column: 5)
!3420 = !DILocation(line: 573, column: 7, scope: !3419)
!3421 = !DILocation(line: 574, column: 27, scope: !3419)
!3422 = !DILocation(line: 574, column: 7, scope: !3419)
!3423 = !DILocation(line: 575, column: 5, scope: !3419)
!3424 = !DILocation(line: 577, column: 36, scope: !3394)
!3425 = !DILocation(line: 577, column: 43, scope: !3394)
!3426 = !DILocation(line: 577, column: 10, scope: !3394)
!3427 = !DILocation(line: 577, column: 8, scope: !3394)
!3428 = !DILocation(line: 578, column: 3, scope: !3394)
!3429 = !DILocation(line: 583, column: 30, scope: !3394)
!3430 = !DILocation(line: 583, column: 3, scope: !3394)
!3431 = !DILocation(line: 583, column: 9, scope: !3394)
!3432 = !DILocation(line: 583, column: 15, scope: !3394)
!3433 = !DILocation(line: 583, column: 28, scope: !3394)
!3434 = !DILocation(line: 584, column: 32, scope: !3394)
!3435 = !DILocation(line: 584, column: 3, scope: !3394)
!3436 = !DILocation(line: 584, column: 9, scope: !3394)
!3437 = !DILocation(line: 584, column: 15, scope: !3394)
!3438 = !DILocation(line: 584, column: 30, scope: !3394)
!3439 = !DILocation(line: 585, column: 31, scope: !3394)
!3440 = !DILocation(line: 585, column: 3, scope: !3394)
!3441 = !DILocation(line: 585, column: 9, scope: !3394)
!3442 = !DILocation(line: 585, column: 15, scope: !3394)
!3443 = !DILocation(line: 585, column: 29, scope: !3394)
!3444 = !DILocation(line: 586, column: 34, scope: !3394)
!3445 = !DILocation(line: 586, column: 49, scope: !3394)
!3446 = !DILocation(line: 586, column: 3, scope: !3394)
!3447 = !DILocation(line: 586, column: 9, scope: !3394)
!3448 = !DILocation(line: 586, column: 15, scope: !3394)
!3449 = !DILocation(line: 586, column: 32, scope: !3394)
!3450 = !DILocation(line: 587, column: 23, scope: !3394)
!3451 = !DILocation(line: 587, column: 3, scope: !3394)
!3452 = !DILocation(line: 587, column: 9, scope: !3394)
!3453 = !DILocation(line: 587, column: 15, scope: !3394)
!3454 = !DILocation(line: 587, column: 21, scope: !3394)
!3455 = !DILocation(line: 588, column: 3, scope: !3394)
!3456 = !DILocation(line: 588, column: 9, scope: !3394)
!3457 = !DILocation(line: 588, column: 15, scope: !3394)
!3458 = !DILocation(line: 588, column: 23, scope: !3394)
!3459 = !DILocation(line: 589, column: 1, scope: !3394)
!3460 = distinct !DISubprogram(name: "cgraph_get_node", scope: !3, file: !3, line: 595, type: !3138, scopeLine: 596, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3461 = !DILocalVariable(name: "decl", arg: 1, scope: !3460, file: !3, line: 595, type: !1026)
!3462 = !DILocation(line: 595, column: 23, scope: !3460)
!3463 = !DILocalVariable(name: "key", scope: !3460, file: !3, line: 597, type: !1023)
!3464 = !DILocation(line: 597, column: 22, scope: !3460)
!3465 = !DILocalVariable(name: "node", scope: !3460, file: !3, line: 597, type: !1022)
!3466 = !DILocation(line: 597, column: 28, scope: !3460)
!3467 = !DILocalVariable(name: "slot", scope: !3460, file: !3, line: 597, type: !2706)
!3468 = !DILocation(line: 597, column: 43, scope: !3460)
!3469 = !DILocation(line: 599, column: 3, scope: !3460)
!3470 = !DILocation(line: 601, column: 8, scope: !3471)
!3471 = distinct !DILexicalBlock(scope: !3460, file: !3, line: 601, column: 7)
!3472 = !DILocation(line: 601, column: 7, scope: !3460)
!3473 = !DILocation(line: 602, column: 5, scope: !3471)
!3474 = !DILocation(line: 604, column: 14, scope: !3460)
!3475 = !DILocation(line: 604, column: 7, scope: !3460)
!3476 = !DILocation(line: 604, column: 12, scope: !3460)
!3477 = !DILocation(line: 606, column: 50, scope: !3460)
!3478 = !DILocation(line: 606, column: 63, scope: !3460)
!3479 = !DILocation(line: 606, column: 34, scope: !3460)
!3480 = !DILocation(line: 606, column: 10, scope: !3460)
!3481 = !DILocation(line: 606, column: 8, scope: !3460)
!3482 = !DILocation(line: 609, column: 7, scope: !3483)
!3483 = distinct !DILexicalBlock(scope: !3460, file: !3, line: 609, column: 7)
!3484 = !DILocation(line: 609, column: 12, scope: !3483)
!3485 = !DILocation(line: 609, column: 16, scope: !3483)
!3486 = !DILocation(line: 609, column: 15, scope: !3483)
!3487 = !DILocation(line: 609, column: 7, scope: !3460)
!3488 = !DILocation(line: 611, column: 15, scope: !3489)
!3489 = distinct !DILexicalBlock(scope: !3483, file: !3, line: 610, column: 5)
!3490 = !DILocation(line: 611, column: 14, scope: !3489)
!3491 = !DILocation(line: 611, column: 12, scope: !3489)
!3492 = !DILocation(line: 612, column: 11, scope: !3493)
!3493 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 612, column: 11)
!3494 = !DILocation(line: 612, column: 17, scope: !3493)
!3495 = !DILocation(line: 612, column: 11, scope: !3489)
!3496 = !DILocation(line: 613, column: 9, scope: !3493)
!3497 = !DILocation(line: 613, column: 15, scope: !3493)
!3498 = !DILocation(line: 613, column: 7, scope: !3493)
!3499 = !DILocation(line: 613, column: 2, scope: !3493)
!3500 = !DILocation(line: 614, column: 5, scope: !3489)
!3501 = !DILocation(line: 615, column: 10, scope: !3460)
!3502 = !DILocation(line: 615, column: 3, scope: !3460)
!3503 = !DILocation(line: 616, column: 1, scope: !3460)
!3504 = distinct !DISubprogram(name: "cgraph_remove_node", scope: !3, file: !3, line: 1288, type: !2541, scopeLine: 1289, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!3505 = !DILocalVariable(name: "node", arg: 1, scope: !3504, file: !3, line: 1288, type: !1022)
!3506 = !DILocation(line: 1288, column: 41, scope: !3504)
!3507 = !DILocalVariable(name: "slot", scope: !3504, file: !3, line: 1290, type: !1882)
!3508 = !DILocation(line: 1290, column: 10, scope: !3504)
!3509 = !DILocalVariable(name: "kill_body", scope: !3504, file: !3, line: 1291, type: !1145)
!3510 = !DILocation(line: 1291, column: 8, scope: !3504)
!3511 = !DILocalVariable(name: "n", scope: !3504, file: !3, line: 1292, type: !1022)
!3512 = !DILocation(line: 1292, column: 23, scope: !3504)
!3513 = !DILocalVariable(name: "uid", scope: !3504, file: !3, line: 1293, type: !1122)
!3514 = !DILocation(line: 1293, column: 7, scope: !3504)
!3515 = !DILocation(line: 1293, column: 13, scope: !3504)
!3516 = !DILocation(line: 1293, column: 19, scope: !3504)
!3517 = !DILocation(line: 1295, column: 35, scope: !3504)
!3518 = !DILocation(line: 1295, column: 3, scope: !3504)
!3519 = !DILocation(line: 1296, column: 31, scope: !3504)
!3520 = !DILocation(line: 1296, column: 3, scope: !3504)
!3521 = !DILocation(line: 1297, column: 31, scope: !3504)
!3522 = !DILocation(line: 1297, column: 3, scope: !3504)
!3523 = !DILocation(line: 1298, column: 3, scope: !3504)
!3524 = !DILocation(line: 1303, column: 18, scope: !3504)
!3525 = !DILocation(line: 1303, column: 24, scope: !3504)
!3526 = !DILocation(line: 1303, column: 34, scope: !3504)
!3527 = !DILocation(line: 1303, column: 3, scope: !3504)
!3528 = !DILocation(line: 1303, column: 9, scope: !3504)
!3529 = !DILocation(line: 1303, column: 16, scope: !3504)
!3530 = !DILocation(line: 1304, column: 12, scope: !3531)
!3531 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1304, column: 3)
!3532 = !DILocation(line: 1304, column: 18, scope: !3531)
!3533 = !DILocation(line: 1304, column: 10, scope: !3531)
!3534 = !DILocation(line: 1304, column: 8, scope: !3531)
!3535 = !DILocation(line: 1304, column: 26, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3531, file: !3, line: 1304, column: 3)
!3537 = !DILocation(line: 1304, column: 3, scope: !3531)
!3538 = !DILocation(line: 1305, column: 5, scope: !3536)
!3539 = !DILocation(line: 1305, column: 8, scope: !3536)
!3540 = !DILocation(line: 1305, column: 15, scope: !3536)
!3541 = !DILocation(line: 1304, column: 33, scope: !3536)
!3542 = !DILocation(line: 1304, column: 36, scope: !3536)
!3543 = !DILocation(line: 1304, column: 31, scope: !3536)
!3544 = !DILocation(line: 1304, column: 3, scope: !3536)
!3545 = distinct !{!3545, !3537, !3546}
!3546 = !DILocation(line: 1305, column: 17, scope: !3531)
!3547 = !DILocation(line: 1306, column: 3, scope: !3504)
!3548 = !DILocation(line: 1306, column: 9, scope: !3504)
!3549 = !DILocation(line: 1306, column: 16, scope: !3504)
!3550 = !DILocation(line: 1307, column: 7, scope: !3551)
!3551 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1307, column: 7)
!3552 = !DILocation(line: 1307, column: 13, scope: !3551)
!3553 = !DILocation(line: 1307, column: 7, scope: !3504)
!3554 = !DILocalVariable(name: "node2", scope: !3555, file: !3, line: 1309, type: !2706)
!3555 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 1308, column: 5)
!3556 = !DILocation(line: 1309, column: 28, scope: !3555)
!3557 = !DILocation(line: 1309, column: 37, scope: !3555)
!3558 = !DILocation(line: 1309, column: 43, scope: !3555)
!3559 = !DILocation(line: 1309, column: 51, scope: !3555)
!3560 = !DILocation(line: 1311, column: 7, scope: !3555)
!3561 = !DILocation(line: 1311, column: 15, scope: !3555)
!3562 = !DILocation(line: 1311, column: 14, scope: !3555)
!3563 = !DILocation(line: 1311, column: 24, scope: !3555)
!3564 = !DILocation(line: 1311, column: 21, scope: !3555)
!3565 = !DILocation(line: 1312, column: 13, scope: !3555)
!3566 = !DILocation(line: 1312, column: 12, scope: !3555)
!3567 = !DILocation(line: 1312, column: 21, scope: !3555)
!3568 = !DILocation(line: 1312, column: 8, scope: !3555)
!3569 = distinct !{!3569, !3560, !3567}
!3570 = !DILocation(line: 1313, column: 16, scope: !3555)
!3571 = !DILocation(line: 1313, column: 22, scope: !3555)
!3572 = !DILocation(line: 1313, column: 8, scope: !3555)
!3573 = !DILocation(line: 1313, column: 14, scope: !3555)
!3574 = !DILocation(line: 1314, column: 5, scope: !3555)
!3575 = !DILocation(line: 1315, column: 7, scope: !3576)
!3576 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1315, column: 7)
!3577 = !DILocation(line: 1315, column: 13, scope: !3576)
!3578 = !DILocation(line: 1315, column: 7, scope: !3504)
!3579 = !DILocation(line: 1316, column: 28, scope: !3576)
!3580 = !DILocation(line: 1316, column: 34, scope: !3576)
!3581 = !DILocation(line: 1316, column: 5, scope: !3576)
!3582 = !DILocation(line: 1316, column: 11, scope: !3576)
!3583 = !DILocation(line: 1316, column: 21, scope: !3576)
!3584 = !DILocation(line: 1316, column: 26, scope: !3576)
!3585 = !DILocation(line: 1318, column: 20, scope: !3576)
!3586 = !DILocation(line: 1318, column: 26, scope: !3576)
!3587 = !DILocation(line: 1318, column: 18, scope: !3576)
!3588 = !DILocation(line: 1319, column: 7, scope: !3589)
!3589 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1319, column: 7)
!3590 = !DILocation(line: 1319, column: 13, scope: !3589)
!3591 = !DILocation(line: 1319, column: 7, scope: !3504)
!3592 = !DILocation(line: 1320, column: 28, scope: !3589)
!3593 = !DILocation(line: 1320, column: 34, scope: !3589)
!3594 = !DILocation(line: 1320, column: 5, scope: !3589)
!3595 = !DILocation(line: 1320, column: 11, scope: !3589)
!3596 = !DILocation(line: 1320, column: 17, scope: !3589)
!3597 = !DILocation(line: 1320, column: 26, scope: !3589)
!3598 = !DILocation(line: 1321, column: 3, scope: !3504)
!3599 = !DILocation(line: 1321, column: 9, scope: !3504)
!3600 = !DILocation(line: 1321, column: 14, scope: !3504)
!3601 = !DILocation(line: 1322, column: 3, scope: !3504)
!3602 = !DILocation(line: 1322, column: 9, scope: !3504)
!3603 = !DILocation(line: 1322, column: 18, scope: !3504)
!3604 = !DILocation(line: 1323, column: 26, scope: !3504)
!3605 = !DILocation(line: 1323, column: 39, scope: !3504)
!3606 = !DILocation(line: 1323, column: 10, scope: !3504)
!3607 = !DILocation(line: 1323, column: 8, scope: !3504)
!3608 = !DILocation(line: 1324, column: 8, scope: !3609)
!3609 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1324, column: 7)
!3610 = !DILocation(line: 1324, column: 7, scope: !3609)
!3611 = !DILocation(line: 1324, column: 16, scope: !3609)
!3612 = !DILocation(line: 1324, column: 13, scope: !3609)
!3613 = !DILocation(line: 1324, column: 7, scope: !3504)
!3614 = !DILocalVariable(name: "next_inline_clone", scope: !3615, file: !3, line: 1326, type: !1022)
!3615 = distinct !DILexicalBlock(scope: !3609, file: !3, line: 1325, column: 5)
!3616 = !DILocation(line: 1326, column: 27, scope: !3615)
!3617 = !DILocation(line: 1328, column: 32, scope: !3618)
!3618 = distinct !DILexicalBlock(scope: !3615, file: !3, line: 1328, column: 7)
!3619 = !DILocation(line: 1328, column: 38, scope: !3618)
!3620 = !DILocation(line: 1328, column: 30, scope: !3618)
!3621 = !DILocation(line: 1328, column: 12, scope: !3618)
!3622 = !DILocation(line: 1329, column: 11, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3618, file: !3, line: 1328, column: 7)
!3624 = !DILocation(line: 1329, column: 29, scope: !3623)
!3625 = !DILocation(line: 1329, column: 32, scope: !3623)
!3626 = !DILocation(line: 1329, column: 51, scope: !3623)
!3627 = !DILocation(line: 1329, column: 59, scope: !3623)
!3628 = !DILocation(line: 1329, column: 65, scope: !3623)
!3629 = !DILocation(line: 1329, column: 56, scope: !3623)
!3630 = !DILocation(line: 0, scope: !3623)
!3631 = !DILocation(line: 1328, column: 7, scope: !3618)
!3632 = !DILocation(line: 1330, column: 25, scope: !3623)
!3633 = !DILocation(line: 1330, column: 44, scope: !3623)
!3634 = !DILocation(line: 1330, column: 23, scope: !3623)
!3635 = !DILocation(line: 1328, column: 7, scope: !3623)
!3636 = distinct !{!3636, !3631, !3637}
!3637 = !DILocation(line: 1331, column: 2, scope: !3618)
!3638 = !DILocation(line: 1336, column: 11, scope: !3639)
!3639 = distinct !DILexicalBlock(scope: !3615, file: !3, line: 1336, column: 11)
!3640 = !DILocation(line: 1336, column: 11, scope: !3615)
!3641 = !DILocalVariable(name: "n", scope: !3642, file: !3, line: 1338, type: !1022)
!3642 = distinct !DILexicalBlock(scope: !3639, file: !3, line: 1337, column: 2)
!3643 = !DILocation(line: 1338, column: 24, scope: !3642)
!3644 = !DILocalVariable(name: "new_clones", scope: !3642, file: !3, line: 1339, type: !1022)
!3645 = !DILocation(line: 1339, column: 24, scope: !3642)
!3646 = !DILocation(line: 1341, column: 12, scope: !3642)
!3647 = !DILocation(line: 1341, column: 5, scope: !3642)
!3648 = !DILocation(line: 1341, column: 10, scope: !3642)
!3649 = !DILocation(line: 1344, column: 8, scope: !3650)
!3650 = distinct !DILexicalBlock(scope: !3642, file: !3, line: 1344, column: 8)
!3651 = !DILocation(line: 1344, column: 27, scope: !3650)
!3652 = !DILocation(line: 1344, column: 8, scope: !3642)
!3653 = !DILocation(line: 1346, column: 10, scope: !3650)
!3654 = !DILocation(line: 1346, column: 29, scope: !3650)
!3655 = !DILocation(line: 1345, column: 6, scope: !3650)
!3656 = !DILocation(line: 1345, column: 25, scope: !3650)
!3657 = !DILocation(line: 1345, column: 45, scope: !3650)
!3658 = !DILocation(line: 1346, column: 8, scope: !3650)
!3659 = !DILocation(line: 1347, column: 8, scope: !3660)
!3660 = distinct !DILexicalBlock(scope: !3642, file: !3, line: 1347, column: 8)
!3661 = !DILocation(line: 1347, column: 27, scope: !3660)
!3662 = !DILocation(line: 1347, column: 8, scope: !3642)
!3663 = !DILocation(line: 1349, column: 8, scope: !3664)
!3664 = distinct !DILexicalBlock(scope: !3660, file: !3, line: 1348, column: 6)
!3665 = !DILocation(line: 1351, column: 12, scope: !3664)
!3666 = !DILocation(line: 1351, column: 31, scope: !3664)
!3667 = !DILocation(line: 1350, column: 8, scope: !3664)
!3668 = !DILocation(line: 1350, column: 27, scope: !3664)
!3669 = !DILocation(line: 1350, column: 47, scope: !3664)
!3670 = !DILocation(line: 1351, column: 10, scope: !3664)
!3671 = !DILocation(line: 1352, column: 6, scope: !3664)
!3672 = !DILocation(line: 1355, column: 8, scope: !3673)
!3673 = distinct !DILexicalBlock(scope: !3660, file: !3, line: 1354, column: 6)
!3674 = !DILocation(line: 1356, column: 23, scope: !3673)
!3675 = !DILocation(line: 1356, column: 42, scope: !3673)
!3676 = !DILocation(line: 1356, column: 8, scope: !3673)
!3677 = !DILocation(line: 1356, column: 14, scope: !3673)
!3678 = !DILocation(line: 1356, column: 21, scope: !3673)
!3679 = !DILocation(line: 1359, column: 17, scope: !3642)
!3680 = !DILocation(line: 1359, column: 23, scope: !3642)
!3681 = !DILocation(line: 1359, column: 15, scope: !3642)
!3682 = !DILocation(line: 1360, column: 4, scope: !3642)
!3683 = !DILocation(line: 1360, column: 10, scope: !3642)
!3684 = !DILocation(line: 1360, column: 17, scope: !3642)
!3685 = !DILocation(line: 1363, column: 4, scope: !3642)
!3686 = !DILocation(line: 1363, column: 23, scope: !3642)
!3687 = !DILocation(line: 1363, column: 31, scope: !3642)
!3688 = !DILocation(line: 1363, column: 37, scope: !3642)
!3689 = !DILocation(line: 1366, column: 34, scope: !3642)
!3690 = !DILocation(line: 1366, column: 40, scope: !3642)
!3691 = !DILocation(line: 1366, column: 4, scope: !3642)
!3692 = !DILocation(line: 1366, column: 23, scope: !3642)
!3693 = !DILocation(line: 1366, column: 32, scope: !3642)
!3694 = !DILocation(line: 1367, column: 4, scope: !3642)
!3695 = !DILocation(line: 1367, column: 23, scope: !3642)
!3696 = !DILocation(line: 1367, column: 42, scope: !3642)
!3697 = !DILocation(line: 1368, column: 4, scope: !3642)
!3698 = !DILocation(line: 1368, column: 23, scope: !3642)
!3699 = !DILocation(line: 1368, column: 42, scope: !3642)
!3700 = !DILocation(line: 1369, column: 8, scope: !3701)
!3701 = distinct !DILexicalBlock(scope: !3642, file: !3, line: 1369, column: 8)
!3702 = !DILocation(line: 1369, column: 14, scope: !3701)
!3703 = !DILocation(line: 1369, column: 8, scope: !3642)
!3704 = !DILocation(line: 1371, column: 12, scope: !3705)
!3705 = distinct !DILexicalBlock(scope: !3706, file: !3, line: 1371, column: 12)
!3706 = distinct !DILexicalBlock(scope: !3701, file: !3, line: 1370, column: 6)
!3707 = !DILocation(line: 1371, column: 18, scope: !3705)
!3708 = !DILocation(line: 1371, column: 28, scope: !3705)
!3709 = !DILocation(line: 1371, column: 12, scope: !3706)
!3710 = !DILocation(line: 1372, column: 55, scope: !3705)
!3711 = !DILocation(line: 1372, column: 10, scope: !3705)
!3712 = !DILocation(line: 1372, column: 16, scope: !3705)
!3713 = !DILocation(line: 1372, column: 26, scope: !3705)
!3714 = !DILocation(line: 1372, column: 34, scope: !3705)
!3715 = !DILocation(line: 1372, column: 53, scope: !3705)
!3716 = !DILocation(line: 1373, column: 48, scope: !3706)
!3717 = !DILocation(line: 1373, column: 54, scope: !3706)
!3718 = !DILocation(line: 1373, column: 64, scope: !3706)
!3719 = !DILocation(line: 1373, column: 8, scope: !3706)
!3720 = !DILocation(line: 1373, column: 27, scope: !3706)
!3721 = !DILocation(line: 1373, column: 46, scope: !3706)
!3722 = !DILocation(line: 1374, column: 33, scope: !3706)
!3723 = !DILocation(line: 1374, column: 8, scope: !3706)
!3724 = !DILocation(line: 1374, column: 14, scope: !3706)
!3725 = !DILocation(line: 1374, column: 24, scope: !3706)
!3726 = !DILocation(line: 1374, column: 31, scope: !3706)
!3727 = !DILocation(line: 1375, column: 6, scope: !3706)
!3728 = !DILocation(line: 1378, column: 8, scope: !3729)
!3729 = distinct !DILexicalBlock(scope: !3642, file: !3, line: 1378, column: 8)
!3730 = !DILocation(line: 1378, column: 8, scope: !3642)
!3731 = !DILocation(line: 1380, column: 13, scope: !3732)
!3732 = distinct !DILexicalBlock(scope: !3733, file: !3, line: 1380, column: 12)
!3733 = distinct !DILexicalBlock(scope: !3729, file: !3, line: 1379, column: 6)
!3734 = !DILocation(line: 1380, column: 32, scope: !3732)
!3735 = !DILocation(line: 1380, column: 12, scope: !3733)
!3736 = !DILocation(line: 1381, column: 31, scope: !3732)
!3737 = !DILocation(line: 1381, column: 3, scope: !3732)
!3738 = !DILocation(line: 1381, column: 22, scope: !3732)
!3739 = !DILocation(line: 1381, column: 29, scope: !3732)
!3740 = !DILocation(line: 1384, column: 9, scope: !3741)
!3741 = distinct !DILexicalBlock(scope: !3732, file: !3, line: 1383, column: 3)
!3742 = !DILocation(line: 1384, column: 28, scope: !3741)
!3743 = !DILocation(line: 1384, column: 7, scope: !3741)
!3744 = !DILocation(line: 1385, column: 5, scope: !3741)
!3745 = !DILocation(line: 1385, column: 12, scope: !3741)
!3746 = !DILocation(line: 1385, column: 15, scope: !3741)
!3747 = !DILocation(line: 1386, column: 12, scope: !3741)
!3748 = !DILocation(line: 1386, column: 15, scope: !3741)
!3749 = !DILocation(line: 1386, column: 9, scope: !3741)
!3750 = distinct !{!3750, !3744, !3748}
!3751 = !DILocation(line: 1387, column: 29, scope: !3741)
!3752 = !DILocation(line: 1387, column: 5, scope: !3741)
!3753 = !DILocation(line: 1387, column: 8, scope: !3741)
!3754 = !DILocation(line: 1387, column: 27, scope: !3741)
!3755 = !DILocation(line: 1388, column: 38, scope: !3741)
!3756 = !DILocation(line: 1388, column: 5, scope: !3741)
!3757 = !DILocation(line: 1388, column: 17, scope: !3741)
!3758 = !DILocation(line: 1388, column: 36, scope: !3741)
!3759 = !DILocation(line: 1390, column: 6, scope: !3733)
!3760 = !DILocation(line: 1393, column: 8, scope: !3642)
!3761 = !DILocation(line: 1393, column: 6, scope: !3642)
!3762 = !DILocation(line: 1394, column: 4, scope: !3642)
!3763 = !DILocation(line: 1394, column: 11, scope: !3642)
!3764 = !DILocation(line: 1396, column: 22, scope: !3765)
!3765 = distinct !DILexicalBlock(scope: !3642, file: !3, line: 1395, column: 6)
!3766 = !DILocation(line: 1396, column: 8, scope: !3765)
!3767 = !DILocation(line: 1396, column: 11, scope: !3765)
!3768 = !DILocation(line: 1396, column: 20, scope: !3765)
!3769 = !DILocation(line: 1397, column: 12, scope: !3765)
!3770 = !DILocation(line: 1397, column: 15, scope: !3765)
!3771 = !DILocation(line: 1397, column: 10, scope: !3765)
!3772 = distinct !{!3772, !3762, !3773}
!3773 = !DILocation(line: 1398, column: 6, scope: !3642)
!3774 = !DILocation(line: 1399, column: 2, scope: !3642)
!3775 = !DILocation(line: 1402, column: 21, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !3639, file: !3, line: 1401, column: 2)
!3777 = !DILocation(line: 1402, column: 34, scope: !3776)
!3778 = !DILocation(line: 1402, column: 4, scope: !3776)
!3779 = !DILocation(line: 1403, column: 14, scope: !3776)
!3780 = !DILocation(line: 1406, column: 5, scope: !3615)
!3781 = !DILocation(line: 1407, column: 7, scope: !3782)
!3782 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1407, column: 7)
!3783 = !DILocation(line: 1407, column: 13, scope: !3782)
!3784 = !DILocation(line: 1407, column: 7, scope: !3504)
!3785 = !DILocation(line: 1408, column: 52, scope: !3782)
!3786 = !DILocation(line: 1408, column: 58, scope: !3782)
!3787 = !DILocation(line: 1408, column: 5, scope: !3782)
!3788 = !DILocation(line: 1408, column: 11, scope: !3782)
!3789 = !DILocation(line: 1408, column: 31, scope: !3782)
!3790 = !DILocation(line: 1408, column: 50, scope: !3782)
!3791 = !DILocation(line: 1409, column: 12, scope: !3792)
!3792 = distinct !DILexicalBlock(scope: !3782, file: !3, line: 1409, column: 12)
!3793 = !DILocation(line: 1409, column: 18, scope: !3792)
!3794 = !DILocation(line: 1409, column: 12, scope: !3782)
!3795 = !DILocation(line: 1410, column: 30, scope: !3792)
!3796 = !DILocation(line: 1410, column: 36, scope: !3792)
!3797 = !DILocation(line: 1410, column: 5, scope: !3792)
!3798 = !DILocation(line: 1410, column: 11, scope: !3792)
!3799 = !DILocation(line: 1410, column: 21, scope: !3792)
!3800 = !DILocation(line: 1410, column: 28, scope: !3792)
!3801 = !DILocation(line: 1411, column: 7, scope: !3802)
!3802 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1411, column: 7)
!3803 = !DILocation(line: 1411, column: 13, scope: !3802)
!3804 = !DILocation(line: 1411, column: 7, scope: !3504)
!3805 = !DILocation(line: 1412, column: 52, scope: !3802)
!3806 = !DILocation(line: 1412, column: 58, scope: !3802)
!3807 = !DILocation(line: 1412, column: 5, scope: !3802)
!3808 = !DILocation(line: 1412, column: 11, scope: !3802)
!3809 = !DILocation(line: 1412, column: 31, scope: !3802)
!3810 = !DILocation(line: 1412, column: 50, scope: !3802)
!3811 = !DILocation(line: 1413, column: 7, scope: !3812)
!3812 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1413, column: 7)
!3813 = !DILocation(line: 1413, column: 13, scope: !3812)
!3814 = !DILocation(line: 1413, column: 7, scope: !3504)
!3815 = !DILocalVariable(name: "n", scope: !3816, file: !3, line: 1415, type: !1022)
!3816 = distinct !DILexicalBlock(scope: !3812, file: !3, line: 1414, column: 5)
!3817 = !DILocation(line: 1415, column: 27, scope: !3816)
!3818 = !DILocalVariable(name: "next", scope: !3816, file: !3, line: 1415, type: !1022)
!3819 = !DILocation(line: 1415, column: 31, scope: !3816)
!3820 = !DILocation(line: 1417, column: 11, scope: !3821)
!3821 = distinct !DILexicalBlock(scope: !3816, file: !3, line: 1417, column: 11)
!3822 = !DILocation(line: 1417, column: 17, scope: !3821)
!3823 = !DILocation(line: 1417, column: 11, scope: !3816)
!3824 = !DILocation(line: 1419, column: 13, scope: !3825)
!3825 = distinct !DILexicalBlock(scope: !3826, file: !3, line: 1419, column: 4)
!3826 = distinct !DILexicalBlock(scope: !3821, file: !3, line: 1418, column: 9)
!3827 = !DILocation(line: 1419, column: 19, scope: !3825)
!3828 = !DILocation(line: 1419, column: 11, scope: !3825)
!3829 = !DILocation(line: 1419, column: 9, scope: !3825)
!3830 = !DILocation(line: 1419, column: 27, scope: !3831)
!3831 = distinct !DILexicalBlock(scope: !3825, file: !3, line: 1419, column: 4)
!3832 = !DILocation(line: 1419, column: 30, scope: !3831)
!3833 = !DILocation(line: 1419, column: 4, scope: !3825)
!3834 = !DILocation(line: 1420, column: 20, scope: !3831)
!3835 = !DILocation(line: 1420, column: 26, scope: !3831)
!3836 = !DILocation(line: 1420, column: 6, scope: !3831)
!3837 = !DILocation(line: 1420, column: 9, scope: !3831)
!3838 = !DILocation(line: 1420, column: 18, scope: !3831)
!3839 = !DILocation(line: 1419, column: 54, scope: !3831)
!3840 = !DILocation(line: 1419, column: 57, scope: !3831)
!3841 = !DILocation(line: 1419, column: 52, scope: !3831)
!3842 = !DILocation(line: 1419, column: 4, scope: !3831)
!3843 = distinct !{!3843, !3833, !3844}
!3844 = !DILocation(line: 1420, column: 26, scope: !3825)
!3845 = !DILocation(line: 1421, column: 18, scope: !3826)
!3846 = !DILocation(line: 1421, column: 24, scope: !3826)
!3847 = !DILocation(line: 1421, column: 4, scope: !3826)
!3848 = !DILocation(line: 1421, column: 7, scope: !3826)
!3849 = !DILocation(line: 1421, column: 16, scope: !3826)
!3850 = !DILocation(line: 1422, column: 28, scope: !3826)
!3851 = !DILocation(line: 1422, column: 34, scope: !3826)
!3852 = !DILocation(line: 1422, column: 44, scope: !3826)
!3853 = !DILocation(line: 1422, column: 4, scope: !3826)
!3854 = !DILocation(line: 1422, column: 7, scope: !3826)
!3855 = !DILocation(line: 1422, column: 26, scope: !3826)
!3856 = !DILocation(line: 1423, column: 8, scope: !3857)
!3857 = distinct !DILexicalBlock(scope: !3826, file: !3, line: 1423, column: 8)
!3858 = !DILocation(line: 1423, column: 14, scope: !3857)
!3859 = !DILocation(line: 1423, column: 24, scope: !3857)
!3860 = !DILocation(line: 1423, column: 8, scope: !3826)
!3861 = !DILocation(line: 1424, column: 51, scope: !3857)
!3862 = !DILocation(line: 1424, column: 6, scope: !3857)
!3863 = !DILocation(line: 1424, column: 12, scope: !3857)
!3864 = !DILocation(line: 1424, column: 22, scope: !3857)
!3865 = !DILocation(line: 1424, column: 30, scope: !3857)
!3866 = !DILocation(line: 1424, column: 49, scope: !3857)
!3867 = !DILocation(line: 1425, column: 29, scope: !3826)
!3868 = !DILocation(line: 1425, column: 35, scope: !3826)
!3869 = !DILocation(line: 1425, column: 4, scope: !3826)
!3870 = !DILocation(line: 1425, column: 10, scope: !3826)
!3871 = !DILocation(line: 1425, column: 20, scope: !3826)
!3872 = !DILocation(line: 1425, column: 27, scope: !3826)
!3873 = !DILocation(line: 1426, column: 2, scope: !3826)
!3874 = !DILocation(line: 1434, column: 13, scope: !3875)
!3875 = distinct !DILexicalBlock(scope: !3876, file: !3, line: 1434, column: 4)
!3876 = distinct !DILexicalBlock(scope: !3821, file: !3, line: 1428, column: 9)
!3877 = !DILocation(line: 1434, column: 19, scope: !3875)
!3878 = !DILocation(line: 1434, column: 11, scope: !3875)
!3879 = !DILocation(line: 1434, column: 9, scope: !3875)
!3880 = !DILocation(line: 1434, column: 27, scope: !3881)
!3881 = distinct !DILexicalBlock(scope: !3875, file: !3, line: 1434, column: 4)
!3882 = !DILocation(line: 1434, column: 4, scope: !3875)
!3883 = !DILocation(line: 1436, column: 16, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3881, file: !3, line: 1435, column: 6)
!3885 = !DILocation(line: 1436, column: 19, scope: !3884)
!3886 = !DILocation(line: 1436, column: 14, scope: !3884)
!3887 = !DILocation(line: 1437, column: 9, scope: !3884)
!3888 = !DILocation(line: 1437, column: 12, scope: !3884)
!3889 = !DILocation(line: 1437, column: 31, scope: !3884)
!3890 = !DILocation(line: 1438, column: 9, scope: !3884)
!3891 = !DILocation(line: 1438, column: 12, scope: !3884)
!3892 = !DILocation(line: 1438, column: 31, scope: !3884)
!3893 = !DILocation(line: 1439, column: 9, scope: !3884)
!3894 = !DILocation(line: 1439, column: 12, scope: !3884)
!3895 = !DILocation(line: 1439, column: 21, scope: !3884)
!3896 = !DILocation(line: 1440, column: 6, scope: !3884)
!3897 = !DILocation(line: 1434, column: 34, scope: !3881)
!3898 = !DILocation(line: 1434, column: 32, scope: !3881)
!3899 = !DILocation(line: 1434, column: 4, scope: !3881)
!3900 = distinct !{!3900, !3882, !3901}
!3901 = !DILocation(line: 1440, column: 6, scope: !3875)
!3902 = !DILocation(line: 1442, column: 5, scope: !3816)
!3903 = !DILocation(line: 1444, column: 3, scope: !3504)
!3904 = !DILocation(line: 1444, column: 10, scope: !3504)
!3905 = !DILocation(line: 1444, column: 16, scope: !3504)
!3906 = !DILocation(line: 1445, column: 36, scope: !3504)
!3907 = !DILocation(line: 1445, column: 42, scope: !3504)
!3908 = !DILocation(line: 1445, column: 5, scope: !3504)
!3909 = distinct !{!3909, !3903, !3910}
!3910 = !DILocation(line: 1445, column: 51, scope: !3504)
!3911 = !DILocation(line: 1447, column: 7, scope: !3912)
!3912 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1447, column: 7)
!3913 = !DILocation(line: 1447, column: 13, scope: !3912)
!3914 = !DILocation(line: 1447, column: 7, scope: !3504)
!3915 = !DILocalVariable(name: "prev", scope: !3916, file: !3, line: 1449, type: !1022)
!3916 = distinct !DILexicalBlock(scope: !3912, file: !3, line: 1448, column: 5)
!3917 = !DILocation(line: 1449, column: 27, scope: !3916)
!3918 = !DILocation(line: 1450, column: 19, scope: !3919)
!3919 = distinct !DILexicalBlock(scope: !3916, file: !3, line: 1450, column: 7)
!3920 = !DILocation(line: 1450, column: 25, scope: !3919)
!3921 = !DILocation(line: 1450, column: 17, scope: !3919)
!3922 = !DILocation(line: 1450, column: 12, scope: !3919)
!3923 = !DILocation(line: 1451, column: 5, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3919, file: !3, line: 1450, column: 7)
!3925 = !DILocation(line: 1451, column: 11, scope: !3924)
!3926 = !DILocation(line: 1451, column: 32, scope: !3924)
!3927 = !DILocation(line: 1451, column: 29, scope: !3924)
!3928 = !DILocation(line: 1450, column: 7, scope: !3919)
!3929 = !DILocation(line: 1452, column: 12, scope: !3924)
!3930 = !DILocation(line: 1452, column: 18, scope: !3924)
!3931 = !DILocation(line: 1452, column: 10, scope: !3924)
!3932 = !DILocation(line: 1450, column: 7, scope: !3924)
!3933 = distinct !{!3933, !3928, !3934}
!3934 = !DILocation(line: 1453, column: 2, scope: !3919)
!3935 = !DILocation(line: 1454, column: 11, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !3916, file: !3, line: 1454, column: 11)
!3937 = !DILocation(line: 1454, column: 17, scope: !3936)
!3938 = !DILocation(line: 1454, column: 38, scope: !3936)
!3939 = !DILocation(line: 1454, column: 35, scope: !3936)
!3940 = !DILocation(line: 1454, column: 11, scope: !3916)
!3941 = !DILocation(line: 1455, column: 2, scope: !3936)
!3942 = !DILocation(line: 1455, column: 8, scope: !3936)
!3943 = !DILocation(line: 1455, column: 26, scope: !3936)
!3944 = !DILocation(line: 1457, column: 28, scope: !3936)
!3945 = !DILocation(line: 1457, column: 34, scope: !3936)
!3946 = !DILocation(line: 1457, column: 2, scope: !3936)
!3947 = !DILocation(line: 1457, column: 8, scope: !3936)
!3948 = !DILocation(line: 1457, column: 26, scope: !3936)
!3949 = !DILocation(line: 1458, column: 7, scope: !3916)
!3950 = !DILocation(line: 1458, column: 13, scope: !3916)
!3951 = !DILocation(line: 1458, column: 31, scope: !3916)
!3952 = !DILocation(line: 1459, column: 5, scope: !3916)
!3953 = !DILocation(line: 1465, column: 8, scope: !3954)
!3954 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1465, column: 7)
!3955 = !DILocation(line: 1465, column: 18, scope: !3954)
!3956 = !DILocation(line: 1465, column: 22, scope: !3954)
!3957 = !DILocation(line: 1465, column: 21, scope: !3954)
!3958 = !DILocation(line: 1465, column: 7, scope: !3504)
!3959 = !DILocalVariable(name: "n", scope: !3960, file: !3, line: 1467, type: !1022)
!3960 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 1466, column: 5)
!3961 = !DILocation(line: 1467, column: 27, scope: !3960)
!3962 = !DILocation(line: 1467, column: 55, scope: !3960)
!3963 = !DILocation(line: 1467, column: 54, scope: !3960)
!3964 = !DILocation(line: 1467, column: 31, scope: !3960)
!3965 = !DILocation(line: 1468, column: 12, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3960, file: !3, line: 1468, column: 11)
!3967 = !DILocation(line: 1468, column: 15, scope: !3966)
!3968 = !DILocation(line: 1468, column: 22, scope: !3966)
!3969 = !DILocation(line: 1468, column: 26, scope: !3966)
!3970 = !DILocation(line: 1468, column: 29, scope: !3966)
!3971 = !DILocation(line: 1468, column: 38, scope: !3966)
!3972 = !DILocation(line: 1468, column: 42, scope: !3966)
!3973 = !DILocation(line: 1468, column: 45, scope: !3966)
!3974 = !DILocation(line: 1468, column: 52, scope: !3966)
!3975 = !DILocation(line: 1469, column: 4, scope: !3966)
!3976 = !DILocation(line: 1469, column: 8, scope: !3966)
!3977 = !DILocation(line: 1470, column: 8, scope: !3966)
!3978 = !DILocation(line: 1470, column: 12, scope: !3966)
!3979 = !DILocation(line: 1470, column: 39, scope: !3966)
!3980 = !DILocation(line: 1470, column: 42, scope: !3966)
!3981 = !DILocation(line: 1468, column: 11, scope: !3960)
!3982 = !DILocation(line: 1471, column: 12, scope: !3966)
!3983 = !DILocation(line: 1471, column: 2, scope: !3966)
!3984 = !DILocation(line: 1472, column: 5, scope: !3960)
!3985 = !DILocation(line: 1473, column: 7, scope: !3986)
!3986 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1473, column: 7)
!3987 = !DILocation(line: 1473, column: 7, scope: !3504)
!3988 = !DILocalVariable(name: "name", scope: !3989, file: !3, line: 1475, type: !1026)
!3989 = distinct !DILexicalBlock(scope: !3986, file: !3, line: 1474, column: 5)
!3990 = !DILocation(line: 1475, column: 12, scope: !3989)
!3991 = !DILocation(line: 1475, column: 19, scope: !3989)
!3992 = !DILocation(line: 1476, column: 40, scope: !3989)
!3993 = !DILocation(line: 1476, column: 61, scope: !3989)
!3994 = !DILocation(line: 1477, column: 38, scope: !3989)
!3995 = !DILocation(line: 1477, column: 12, scope: !3989)
!3996 = !DILocation(line: 1476, column: 14, scope: !3989)
!3997 = !DILocation(line: 1476, column: 12, scope: !3989)
!3998 = !DILocation(line: 1480, column: 11, scope: !3999)
!3999 = distinct !DILexicalBlock(scope: !3989, file: !3, line: 1480, column: 11)
!4000 = !DILocation(line: 1480, column: 16, scope: !3999)
!4001 = !DILocation(line: 1480, column: 20, scope: !3999)
!4002 = !DILocation(line: 1480, column: 19, scope: !3999)
!4003 = !DILocation(line: 1480, column: 28, scope: !3999)
!4004 = !DILocation(line: 1480, column: 25, scope: !3999)
!4005 = !DILocation(line: 1480, column: 11, scope: !3989)
!4006 = !DILocation(line: 1481, column: 26, scope: !3999)
!4007 = !DILocation(line: 1481, column: 47, scope: !3999)
!4008 = !DILocation(line: 1481, column: 9, scope: !3999)
!4009 = !DILocation(line: 1482, column: 5, scope: !3989)
!4010 = !DILocation(line: 1484, column: 7, scope: !4011)
!4011 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1484, column: 7)
!4012 = !DILocation(line: 1484, column: 7, scope: !3504)
!4013 = !DILocation(line: 1485, column: 35, scope: !4011)
!4014 = !DILocation(line: 1485, column: 5, scope: !4011)
!4015 = !DILocation(line: 1486, column: 3, scope: !3504)
!4016 = !DILocation(line: 1486, column: 9, scope: !3504)
!4017 = !DILocation(line: 1486, column: 14, scope: !3504)
!4018 = !DILocation(line: 1487, column: 7, scope: !4019)
!4019 = distinct !DILexicalBlock(scope: !3504, file: !3, line: 1487, column: 7)
!4020 = !DILocation(line: 1487, column: 13, scope: !4019)
!4021 = !DILocation(line: 1487, column: 7, scope: !3504)
!4022 = !DILocation(line: 1489, column: 20, scope: !4023)
!4023 = distinct !DILexicalBlock(scope: !4019, file: !3, line: 1488, column: 5)
!4024 = !DILocation(line: 1489, column: 26, scope: !4023)
!4025 = !DILocation(line: 1489, column: 7, scope: !4023)
!4026 = !DILocation(line: 1490, column: 7, scope: !4023)
!4027 = !DILocation(line: 1490, column: 13, scope: !4023)
!4028 = !DILocation(line: 1490, column: 28, scope: !4023)
!4029 = !DILocation(line: 1491, column: 5, scope: !4023)
!4030 = !DILocation(line: 1492, column: 17, scope: !3504)
!4031 = !DILocation(line: 1496, column: 11, scope: !3504)
!4032 = !DILocation(line: 1496, column: 3, scope: !3504)
!4033 = !DILocation(line: 1497, column: 15, scope: !3504)
!4034 = !DILocation(line: 1497, column: 3, scope: !3504)
!4035 = !DILocation(line: 1497, column: 9, scope: !3504)
!4036 = !DILocation(line: 1497, column: 13, scope: !3504)
!4037 = !DILocation(line: 1498, column: 27, scope: !3504)
!4038 = !DILocation(line: 1498, column: 3, scope: !3504)
!4039 = !DILocation(line: 1498, column: 25, scope: !3504)
!4040 = !DILocation(line: 1499, column: 16, scope: !3504)
!4041 = !DILocation(line: 1499, column: 14, scope: !3504)
!4042 = !DILocation(line: 1500, column: 1, scope: !3504)
!4043 = distinct !DISubprogram(name: "cgraph_insert_node_to_hashtable", scope: !3, file: !3, line: 621, type: !2541, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4044 = !DILocalVariable(name: "node", arg: 1, scope: !4043, file: !3, line: 621, type: !1022)
!4045 = !DILocation(line: 621, column: 54, scope: !4043)
!4046 = !DILocalVariable(name: "slot", scope: !4043, file: !3, line: 623, type: !2706)
!4047 = !DILocation(line: 623, column: 24, scope: !4043)
!4048 = !DILocation(line: 625, column: 50, scope: !4043)
!4049 = !DILocation(line: 625, column: 63, scope: !4043)
!4050 = !DILocation(line: 625, column: 34, scope: !4043)
!4051 = !DILocation(line: 625, column: 10, scope: !4043)
!4052 = !DILocation(line: 625, column: 8, scope: !4043)
!4053 = !DILocation(line: 627, column: 3, scope: !4043)
!4054 = !DILocation(line: 628, column: 11, scope: !4043)
!4055 = !DILocation(line: 628, column: 4, scope: !4043)
!4056 = !DILocation(line: 628, column: 9, scope: !4043)
!4057 = !DILocation(line: 629, column: 1, scope: !4043)
!4058 = distinct !DISubprogram(name: "cgraph_node_for_asm", scope: !3, file: !3, line: 654, type: !3138, scopeLine: 655, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4059 = !DILocalVariable(name: "asmname", arg: 1, scope: !4058, file: !3, line: 654, type: !1026)
!4060 = !DILocation(line: 654, column: 27, scope: !4058)
!4061 = !DILocalVariable(name: "node", scope: !4058, file: !3, line: 656, type: !1022)
!4062 = !DILocation(line: 656, column: 23, scope: !4058)
!4063 = !DILocalVariable(name: "slot", scope: !4058, file: !3, line: 657, type: !1882)
!4064 = !DILocation(line: 657, column: 10, scope: !4058)
!4065 = !DILocation(line: 659, column: 8, scope: !4066)
!4066 = distinct !DILexicalBlock(scope: !4058, file: !3, line: 659, column: 7)
!4067 = !DILocation(line: 659, column: 7, scope: !4058)
!4068 = !DILocation(line: 662, column: 2, scope: !4069)
!4069 = distinct !DILexicalBlock(scope: !4066, file: !3, line: 660, column: 5)
!4070 = !DILocation(line: 661, column: 27, scope: !4069)
!4071 = !DILocation(line: 664, column: 19, scope: !4072)
!4072 = distinct !DILexicalBlock(scope: !4069, file: !3, line: 664, column: 7)
!4073 = !DILocation(line: 664, column: 17, scope: !4072)
!4074 = !DILocation(line: 664, column: 12, scope: !4072)
!4075 = !DILocation(line: 664, column: 33, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !4072, file: !3, line: 664, column: 7)
!4077 = !DILocation(line: 664, column: 7, scope: !4072)
!4078 = !DILocation(line: 665, column: 14, scope: !4079)
!4079 = distinct !DILexicalBlock(scope: !4076, file: !3, line: 665, column: 13)
!4080 = !DILocation(line: 665, column: 20, scope: !4079)
!4081 = !DILocation(line: 665, column: 27, scope: !4079)
!4082 = !DILocation(line: 665, column: 13, scope: !4076)
!4083 = !DILocalVariable(name: "name", scope: !4084, file: !3, line: 667, type: !1026)
!4084 = distinct !DILexicalBlock(scope: !4079, file: !3, line: 666, column: 4)
!4085 = !DILocation(line: 667, column: 11, scope: !4084)
!4086 = !DILocation(line: 667, column: 18, scope: !4084)
!4087 = !DILocation(line: 668, column: 39, scope: !4084)
!4088 = !DILocation(line: 668, column: 60, scope: !4084)
!4089 = !DILocation(line: 669, column: 37, scope: !4084)
!4090 = !DILocation(line: 669, column: 11, scope: !4084)
!4091 = !DILocation(line: 668, column: 13, scope: !4084)
!4092 = !DILocation(line: 668, column: 11, scope: !4084)
!4093 = !DILocation(line: 675, column: 12, scope: !4094)
!4094 = distinct !DILexicalBlock(scope: !4084, file: !3, line: 675, column: 10)
!4095 = !DILocation(line: 675, column: 11, scope: !4094)
!4096 = !DILocation(line: 675, column: 10, scope: !4084)
!4097 = !DILocation(line: 676, column: 16, scope: !4094)
!4098 = !DILocation(line: 676, column: 9, scope: !4094)
!4099 = !DILocation(line: 676, column: 14, scope: !4094)
!4100 = !DILocation(line: 676, column: 8, scope: !4094)
!4101 = !DILocation(line: 677, column: 10, scope: !4102)
!4102 = distinct !DILexicalBlock(scope: !4084, file: !3, line: 677, column: 10)
!4103 = !DILocation(line: 677, column: 16, scope: !4102)
!4104 = !DILocation(line: 677, column: 10, scope: !4084)
!4105 = !DILocalVariable(name: "alias", scope: !4106, file: !3, line: 679, type: !1022)
!4106 = distinct !DILexicalBlock(scope: !4102, file: !3, line: 678, column: 8)
!4107 = !DILocation(line: 679, column: 23, scope: !4106)
!4108 = !DILocation(line: 681, column: 16, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !4106, file: !3, line: 681, column: 3)
!4110 = !DILocation(line: 681, column: 22, scope: !4109)
!4111 = !DILocation(line: 681, column: 14, scope: !4109)
!4112 = !DILocation(line: 681, column: 8, scope: !4109)
!4113 = !DILocation(line: 681, column: 33, scope: !4114)
!4114 = distinct !DILexicalBlock(scope: !4109, file: !3, line: 681, column: 3)
!4115 = !DILocation(line: 681, column: 3, scope: !4109)
!4116 = !DILocalVariable(name: "hash", scope: !4117, file: !3, line: 683, type: !1870)
!4117 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 682, column: 5)
!4118 = !DILocation(line: 683, column: 17, scope: !4117)
!4119 = !DILocation(line: 684, column: 14, scope: !4117)
!4120 = !DILocation(line: 684, column: 12, scope: !4117)
!4121 = !DILocation(line: 685, column: 40, scope: !4117)
!4122 = !DILocation(line: 685, column: 14, scope: !4117)
!4123 = !DILocation(line: 685, column: 12, scope: !4117)
!4124 = !DILocation(line: 686, column: 40, scope: !4117)
!4125 = !DILocation(line: 686, column: 61, scope: !4117)
!4126 = !DILocation(line: 687, column: 12, scope: !4117)
!4127 = !DILocation(line: 686, column: 14, scope: !4117)
!4128 = !DILocation(line: 686, column: 12, scope: !4117)
!4129 = !DILocation(line: 688, column: 13, scope: !4130)
!4130 = distinct !DILexicalBlock(scope: !4117, file: !3, line: 688, column: 11)
!4131 = !DILocation(line: 688, column: 12, scope: !4130)
!4132 = !DILocation(line: 688, column: 11, scope: !4117)
!4133 = !DILocation(line: 689, column: 17, scope: !4130)
!4134 = !DILocation(line: 689, column: 10, scope: !4130)
!4135 = !DILocation(line: 689, column: 15, scope: !4130)
!4136 = !DILocation(line: 689, column: 9, scope: !4130)
!4137 = !DILocation(line: 690, column: 5, scope: !4117)
!4138 = !DILocation(line: 681, column: 48, scope: !4114)
!4139 = !DILocation(line: 681, column: 55, scope: !4114)
!4140 = !DILocation(line: 681, column: 46, scope: !4114)
!4141 = !DILocation(line: 681, column: 3, scope: !4114)
!4142 = distinct !{!4142, !4115, !4143}
!4143 = !DILocation(line: 690, column: 5, scope: !4109)
!4144 = !DILocation(line: 691, column: 8, scope: !4106)
!4145 = !DILocation(line: 692, column: 4, scope: !4084)
!4146 = !DILocation(line: 664, column: 46, scope: !4076)
!4147 = !DILocation(line: 664, column: 52, scope: !4076)
!4148 = !DILocation(line: 664, column: 44, scope: !4076)
!4149 = !DILocation(line: 664, column: 7, scope: !4076)
!4150 = distinct !{!4150, !4077, !4151}
!4151 = !DILocation(line: 692, column: 4, scope: !4072)
!4152 = !DILocation(line: 693, column: 5, scope: !4069)
!4153 = !DILocation(line: 695, column: 36, scope: !4058)
!4154 = !DILocation(line: 695, column: 57, scope: !4058)
!4155 = !DILocation(line: 696, column: 34, scope: !4058)
!4156 = !DILocation(line: 696, column: 8, scope: !4058)
!4157 = !DILocation(line: 695, column: 10, scope: !4058)
!4158 = !DILocation(line: 695, column: 8, scope: !4058)
!4159 = !DILocation(line: 699, column: 7, scope: !4160)
!4160 = distinct !DILexicalBlock(scope: !4058, file: !3, line: 699, column: 7)
!4161 = !DILocation(line: 699, column: 7, scope: !4058)
!4162 = !DILocation(line: 701, column: 38, scope: !4163)
!4163 = distinct !DILexicalBlock(scope: !4160, file: !3, line: 700, column: 5)
!4164 = !DILocation(line: 701, column: 37, scope: !4163)
!4165 = !DILocation(line: 701, column: 14, scope: !4163)
!4166 = !DILocation(line: 701, column: 12, scope: !4163)
!4167 = !DILocation(line: 702, column: 11, scope: !4168)
!4168 = distinct !DILexicalBlock(scope: !4163, file: !3, line: 702, column: 11)
!4169 = !DILocation(line: 702, column: 17, scope: !4168)
!4170 = !DILocation(line: 702, column: 11, scope: !4163)
!4171 = !DILocation(line: 703, column: 9, scope: !4168)
!4172 = !DILocation(line: 703, column: 15, scope: !4168)
!4173 = !DILocation(line: 703, column: 7, scope: !4168)
!4174 = !DILocation(line: 703, column: 2, scope: !4168)
!4175 = !DILocation(line: 704, column: 14, scope: !4163)
!4176 = !DILocation(line: 704, column: 7, scope: !4163)
!4177 = !DILocation(line: 706, column: 3, scope: !4058)
!4178 = !DILocation(line: 707, column: 1, scope: !4058)
!4179 = distinct !DISubprogram(name: "hash_node_by_assembler_name", scope: !3, file: !3, line: 634, type: !1868, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4180 = !DILocalVariable(name: "p", arg: 1, scope: !4179, file: !3, line: 634, type: !1661)
!4181 = !DILocation(line: 634, column: 42, scope: !4179)
!4182 = !DILocalVariable(name: "n", scope: !4179, file: !3, line: 636, type: !2714)
!4183 = !DILocation(line: 636, column: 29, scope: !4179)
!4184 = !DILocation(line: 636, column: 62, scope: !4179)
!4185 = !DILocation(line: 636, column: 33, scope: !4179)
!4186 = !DILocation(line: 637, column: 48, scope: !4179)
!4187 = !DILocation(line: 637, column: 22, scope: !4179)
!4188 = !DILocation(line: 637, column: 3, scope: !4179)
!4189 = distinct !DISubprogram(name: "eq_assembler_name", scope: !3, file: !3, line: 643, type: !1874, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4190 = !DILocalVariable(name: "p1", arg: 1, scope: !4189, file: !3, line: 643, type: !1661)
!4191 = !DILocation(line: 643, column: 32, scope: !4189)
!4192 = !DILocalVariable(name: "p2", arg: 2, scope: !4189, file: !3, line: 643, type: !1661)
!4193 = !DILocation(line: 643, column: 48, scope: !4189)
!4194 = !DILocalVariable(name: "n1", scope: !4189, file: !3, line: 645, type: !2714)
!4195 = !DILocation(line: 645, column: 29, scope: !4189)
!4196 = !DILocation(line: 645, column: 63, scope: !4189)
!4197 = !DILocation(line: 645, column: 34, scope: !4189)
!4198 = !DILocalVariable(name: "name", scope: !4189, file: !3, line: 646, type: !2716)
!4199 = !DILocation(line: 646, column: 14, scope: !4189)
!4200 = !DILocation(line: 646, column: 33, scope: !4189)
!4201 = !DILocation(line: 646, column: 21, scope: !4189)
!4202 = !DILocation(line: 647, column: 38, scope: !4189)
!4203 = !DILocation(line: 647, column: 42, scope: !4189)
!4204 = !DILocation(line: 647, column: 48, scope: !4189)
!4205 = !DILocation(line: 647, column: 11, scope: !4189)
!4206 = !DILocation(line: 647, column: 10, scope: !4189)
!4207 = !DILocation(line: 647, column: 3, scope: !4189)
!4208 = distinct !DISubprogram(name: "cgraph_edge", scope: !3, file: !3, line: 730, type: !4209, scopeLine: 731, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4209 = !DISubroutineType(types: !4210)
!4210 = !{!1015, !1022, !1355}
!4211 = !DILocalVariable(name: "node", arg: 1, scope: !4208, file: !3, line: 730, type: !1022)
!4212 = !DILocation(line: 730, column: 34, scope: !4208)
!4213 = !DILocalVariable(name: "call_stmt", arg: 2, scope: !4208, file: !3, line: 730, type: !1355)
!4214 = !DILocation(line: 730, column: 47, scope: !4208)
!4215 = !DILocalVariable(name: "e", scope: !4208, file: !3, line: 732, type: !1015)
!4216 = !DILocation(line: 732, column: 23, scope: !4208)
!4217 = !DILocalVariable(name: "e2", scope: !4208, file: !3, line: 732, type: !1015)
!4218 = !DILocation(line: 732, column: 27, scope: !4208)
!4219 = !DILocalVariable(name: "n", scope: !4208, file: !3, line: 733, type: !1122)
!4220 = !DILocation(line: 733, column: 7, scope: !4208)
!4221 = !DILocation(line: 735, column: 7, scope: !4222)
!4222 = distinct !DILexicalBlock(scope: !4208, file: !3, line: 735, column: 7)
!4223 = !DILocation(line: 735, column: 13, scope: !4222)
!4224 = !DILocation(line: 735, column: 7, scope: !4208)
!4225 = !DILocation(line: 737, column: 28, scope: !4222)
!4226 = !DILocation(line: 737, column: 34, scope: !4222)
!4227 = !DILocation(line: 737, column: 50, scope: !4222)
!4228 = !DILocation(line: 738, column: 27, scope: !4222)
!4229 = !DILocation(line: 738, column: 46, scope: !4222)
!4230 = !DILocation(line: 737, column: 7, scope: !4222)
!4231 = !DILocation(line: 736, column: 12, scope: !4222)
!4232 = !DILocation(line: 736, column: 5, scope: !4222)
!4233 = !DILocation(line: 745, column: 12, scope: !4234)
!4234 = distinct !DILexicalBlock(scope: !4208, file: !3, line: 745, column: 3)
!4235 = !DILocation(line: 745, column: 18, scope: !4234)
!4236 = !DILocation(line: 745, column: 10, scope: !4234)
!4237 = !DILocation(line: 745, column: 8, scope: !4234)
!4238 = !DILocation(line: 745, column: 27, scope: !4239)
!4239 = distinct !DILexicalBlock(scope: !4234, file: !3, line: 745, column: 3)
!4240 = !DILocation(line: 745, column: 3, scope: !4234)
!4241 = !DILocation(line: 747, column: 11, scope: !4242)
!4242 = distinct !DILexicalBlock(scope: !4243, file: !3, line: 747, column: 11)
!4243 = distinct !DILexicalBlock(scope: !4239, file: !3, line: 746, column: 5)
!4244 = !DILocation(line: 747, column: 14, scope: !4242)
!4245 = !DILocation(line: 747, column: 27, scope: !4242)
!4246 = !DILocation(line: 747, column: 24, scope: !4242)
!4247 = !DILocation(line: 747, column: 11, scope: !4243)
!4248 = !DILocation(line: 748, column: 2, scope: !4242)
!4249 = !DILocation(line: 749, column: 8, scope: !4243)
!4250 = !DILocation(line: 750, column: 5, scope: !4243)
!4251 = !DILocation(line: 745, column: 33, scope: !4239)
!4252 = !DILocation(line: 745, column: 36, scope: !4239)
!4253 = !DILocation(line: 745, column: 31, scope: !4239)
!4254 = !DILocation(line: 745, column: 3, scope: !4239)
!4255 = distinct !{!4255, !4240, !4256}
!4256 = !DILocation(line: 750, column: 5, scope: !4234)
!4257 = !DILocation(line: 752, column: 7, scope: !4258)
!4258 = distinct !DILexicalBlock(scope: !4208, file: !3, line: 752, column: 7)
!4259 = !DILocation(line: 752, column: 9, scope: !4258)
!4260 = !DILocation(line: 752, column: 7, scope: !4208)
!4261 = !DILocation(line: 754, column: 30, scope: !4262)
!4262 = distinct !DILexicalBlock(scope: !4258, file: !3, line: 753, column: 5)
!4263 = !DILocation(line: 754, column: 7, scope: !4262)
!4264 = !DILocation(line: 754, column: 13, scope: !4262)
!4265 = !DILocation(line: 754, column: 28, scope: !4262)
!4266 = !DILocation(line: 755, column: 17, scope: !4267)
!4267 = distinct !DILexicalBlock(scope: !4262, file: !3, line: 755, column: 7)
!4268 = !DILocation(line: 755, column: 23, scope: !4267)
!4269 = !DILocation(line: 755, column: 15, scope: !4267)
!4270 = !DILocation(line: 755, column: 12, scope: !4267)
!4271 = !DILocation(line: 755, column: 32, scope: !4272)
!4272 = distinct !DILexicalBlock(scope: !4267, file: !3, line: 755, column: 7)
!4273 = !DILocation(line: 755, column: 7, scope: !4267)
!4274 = !DILocalVariable(name: "slot", scope: !4275, file: !3, line: 757, type: !1882)
!4275 = distinct !DILexicalBlock(scope: !4272, file: !3, line: 756, column: 2)
!4276 = !DILocation(line: 757, column: 18, scope: !4275)
!4277 = !DILocation(line: 758, column: 37, scope: !4275)
!4278 = !DILocation(line: 758, column: 43, scope: !4275)
!4279 = !DILocation(line: 759, column: 9, scope: !4275)
!4280 = !DILocation(line: 759, column: 13, scope: !4275)
!4281 = !DILocation(line: 760, column: 9, scope: !4275)
!4282 = !DILocation(line: 760, column: 28, scope: !4275)
!4283 = !DILocation(line: 760, column: 32, scope: !4275)
!4284 = !DILocation(line: 758, column: 11, scope: !4275)
!4285 = !DILocation(line: 758, column: 9, scope: !4275)
!4286 = !DILocation(line: 762, column: 4, scope: !4275)
!4287 = !DILocation(line: 763, column: 12, scope: !4275)
!4288 = !DILocation(line: 763, column: 5, scope: !4275)
!4289 = !DILocation(line: 763, column: 10, scope: !4275)
!4290 = !DILocation(line: 764, column: 2, scope: !4275)
!4291 = !DILocation(line: 755, column: 41, scope: !4272)
!4292 = !DILocation(line: 755, column: 45, scope: !4272)
!4293 = !DILocation(line: 755, column: 39, scope: !4272)
!4294 = !DILocation(line: 755, column: 7, scope: !4272)
!4295 = distinct !{!4295, !4273, !4296}
!4296 = !DILocation(line: 764, column: 2, scope: !4267)
!4297 = !DILocation(line: 765, column: 5, scope: !4262)
!4298 = !DILocation(line: 767, column: 10, scope: !4208)
!4299 = !DILocation(line: 767, column: 3, scope: !4208)
!4300 = !DILocation(line: 768, column: 1, scope: !4208)
!4301 = distinct !DISubprogram(name: "edge_hash", scope: !3, file: !3, line: 712, type: !1868, scopeLine: 713, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4302 = !DILocalVariable(name: "x", arg: 1, scope: !4301, file: !3, line: 712, type: !1661)
!4303 = !DILocation(line: 712, column: 24, scope: !4301)
!4304 = !DILocation(line: 714, column: 10, scope: !4301)
!4305 = !DILocation(line: 714, column: 59, scope: !4301)
!4306 = !DILocation(line: 714, column: 30, scope: !4301)
!4307 = !DILocation(line: 714, column: 63, scope: !4301)
!4308 = !DILocation(line: 714, column: 29, scope: !4301)
!4309 = !DILocation(line: 714, column: 3, scope: !4301)
!4310 = distinct !DISubprogram(name: "edge_eq", scope: !3, file: !3, line: 720, type: !1874, scopeLine: 721, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4311 = !DILocalVariable(name: "x", arg: 1, scope: !4310, file: !3, line: 720, type: !1661)
!4312 = !DILocation(line: 720, column: 22, scope: !4310)
!4313 = !DILocalVariable(name: "y", arg: 2, scope: !4310, file: !3, line: 720, type: !1661)
!4314 = !DILocation(line: 720, column: 37, scope: !4310)
!4315 = !DILocation(line: 722, column: 40, scope: !4310)
!4316 = !DILocation(line: 722, column: 11, scope: !4310)
!4317 = !DILocation(line: 722, column: 44, scope: !4310)
!4318 = !DILocation(line: 722, column: 57, scope: !4310)
!4319 = !DILocation(line: 722, column: 54, scope: !4310)
!4320 = !DILocation(line: 722, column: 3, scope: !4310)
!4321 = distinct !DISubprogram(name: "cgraph_set_call_stmt", scope: !3, file: !3, line: 774, type: !4322, scopeLine: 775, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4322 = !DISubroutineType(types: !4323)
!4323 = !{null, !1015, !1355}
!4324 = !DILocalVariable(name: "e", arg: 1, scope: !4321, file: !3, line: 774, type: !1015)
!4325 = !DILocation(line: 774, column: 43, scope: !4321)
!4326 = !DILocalVariable(name: "new_stmt", arg: 2, scope: !4321, file: !3, line: 774, type: !1355)
!4327 = !DILocation(line: 774, column: 53, scope: !4321)
!4328 = !DILocation(line: 776, column: 7, scope: !4329)
!4329 = distinct !DILexicalBlock(scope: !4321, file: !3, line: 776, column: 7)
!4330 = !DILocation(line: 776, column: 10, scope: !4329)
!4331 = !DILocation(line: 776, column: 18, scope: !4329)
!4332 = !DILocation(line: 776, column: 7, scope: !4321)
!4333 = !DILocation(line: 778, column: 34, scope: !4334)
!4334 = distinct !DILexicalBlock(scope: !4329, file: !3, line: 777, column: 5)
!4335 = !DILocation(line: 778, column: 37, scope: !4334)
!4336 = !DILocation(line: 778, column: 45, scope: !4334)
!4337 = !DILocation(line: 779, column: 6, scope: !4334)
!4338 = !DILocation(line: 779, column: 9, scope: !4334)
!4339 = !DILocation(line: 780, column: 6, scope: !4334)
!4340 = !DILocation(line: 780, column: 25, scope: !4334)
!4341 = !DILocation(line: 780, column: 28, scope: !4334)
!4342 = !DILocation(line: 778, column: 7, scope: !4334)
!4343 = !DILocation(line: 781, column: 5, scope: !4334)
!4344 = !DILocation(line: 782, column: 18, scope: !4321)
!4345 = !DILocation(line: 782, column: 3, scope: !4321)
!4346 = !DILocation(line: 782, column: 6, scope: !4321)
!4347 = !DILocation(line: 782, column: 16, scope: !4321)
!4348 = !DILocation(line: 783, column: 14, scope: !4321)
!4349 = !DILocation(line: 783, column: 3, scope: !4321)
!4350 = !DILocation(line: 784, column: 52, scope: !4321)
!4351 = !DILocation(line: 784, column: 27, scope: !4321)
!4352 = !DILocation(line: 784, column: 3, scope: !4321)
!4353 = !DILocation(line: 784, column: 6, scope: !4321)
!4354 = !DILocation(line: 784, column: 25, scope: !4321)
!4355 = !DILocation(line: 785, column: 3, scope: !4321)
!4356 = !DILocation(line: 786, column: 7, scope: !4357)
!4357 = distinct !DILexicalBlock(scope: !4321, file: !3, line: 786, column: 7)
!4358 = !DILocation(line: 786, column: 10, scope: !4357)
!4359 = !DILocation(line: 786, column: 18, scope: !4357)
!4360 = !DILocation(line: 786, column: 7, scope: !4321)
!4361 = !DILocalVariable(name: "slot", scope: !4362, file: !3, line: 788, type: !1882)
!4362 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 787, column: 5)
!4363 = !DILocation(line: 788, column: 14, scope: !4362)
!4364 = !DILocation(line: 789, column: 40, scope: !4362)
!4365 = !DILocation(line: 789, column: 43, scope: !4362)
!4366 = !DILocation(line: 789, column: 51, scope: !4362)
!4367 = !DILocation(line: 790, column: 12, scope: !4362)
!4368 = !DILocation(line: 790, column: 15, scope: !4362)
!4369 = !DILocation(line: 791, column: 12, scope: !4362)
!4370 = !DILocation(line: 792, column: 13, scope: !4362)
!4371 = !DILocation(line: 792, column: 16, scope: !4362)
!4372 = !DILocation(line: 789, column: 14, scope: !4362)
!4373 = !DILocation(line: 789, column: 12, scope: !4362)
!4374 = !DILocation(line: 793, column: 7, scope: !4362)
!4375 = !DILocation(line: 794, column: 15, scope: !4362)
!4376 = !DILocation(line: 794, column: 8, scope: !4362)
!4377 = !DILocation(line: 794, column: 13, scope: !4362)
!4378 = !DILocation(line: 795, column: 5, scope: !4362)
!4379 = !DILocation(line: 796, column: 1, scope: !4321)
!4380 = distinct !DISubprogram(name: "cgraph_set_call_stmt_including_clones", scope: !3, file: !3, line: 802, type: !4381, scopeLine: 804, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4381 = !DISubroutineType(types: !4382)
!4382 = !{null, !1022, !1355, !1355}
!4383 = !DILocalVariable(name: "orig", arg: 1, scope: !4380, file: !3, line: 802, type: !1022)
!4384 = !DILocation(line: 802, column: 60, scope: !4380)
!4385 = !DILocalVariable(name: "old_stmt", arg: 2, scope: !4380, file: !3, line: 803, type: !1355)
!4386 = !DILocation(line: 803, column: 19, scope: !4380)
!4387 = !DILocalVariable(name: "new_stmt", arg: 3, scope: !4380, file: !3, line: 803, type: !1355)
!4388 = !DILocation(line: 803, column: 36, scope: !4380)
!4389 = !DILocalVariable(name: "node", scope: !4380, file: !3, line: 805, type: !1022)
!4390 = !DILocation(line: 805, column: 23, scope: !4380)
!4391 = !DILocalVariable(name: "edge", scope: !4380, file: !3, line: 806, type: !1015)
!4392 = !DILocation(line: 806, column: 23, scope: !4380)
!4393 = !DILocation(line: 806, column: 43, scope: !4380)
!4394 = !DILocation(line: 806, column: 49, scope: !4380)
!4395 = !DILocation(line: 806, column: 30, scope: !4380)
!4396 = !DILocation(line: 808, column: 7, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 808, column: 7)
!4398 = !DILocation(line: 808, column: 7, scope: !4380)
!4399 = !DILocation(line: 809, column: 27, scope: !4397)
!4400 = !DILocation(line: 809, column: 33, scope: !4397)
!4401 = !DILocation(line: 809, column: 5, scope: !4397)
!4402 = !DILocation(line: 811, column: 10, scope: !4380)
!4403 = !DILocation(line: 811, column: 16, scope: !4380)
!4404 = !DILocation(line: 811, column: 8, scope: !4380)
!4405 = !DILocation(line: 812, column: 7, scope: !4406)
!4406 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 812, column: 7)
!4407 = !DILocation(line: 812, column: 7, scope: !4380)
!4408 = !DILocation(line: 813, column: 5, scope: !4406)
!4409 = !DILocation(line: 813, column: 12, scope: !4406)
!4410 = !DILocation(line: 813, column: 20, scope: !4406)
!4411 = !DILocation(line: 813, column: 17, scope: !4406)
!4412 = !DILocalVariable(name: "edge", scope: !4413, file: !3, line: 815, type: !1015)
!4413 = distinct !DILexicalBlock(scope: !4406, file: !3, line: 814, column: 7)
!4414 = !DILocation(line: 815, column: 22, scope: !4413)
!4415 = !DILocation(line: 815, column: 42, scope: !4413)
!4416 = !DILocation(line: 815, column: 48, scope: !4413)
!4417 = !DILocation(line: 815, column: 29, scope: !4413)
!4418 = !DILocation(line: 816, column: 6, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4413, file: !3, line: 816, column: 6)
!4420 = !DILocation(line: 816, column: 6, scope: !4413)
!4421 = !DILocation(line: 817, column: 26, scope: !4419)
!4422 = !DILocation(line: 817, column: 32, scope: !4419)
!4423 = !DILocation(line: 817, column: 4, scope: !4419)
!4424 = !DILocation(line: 818, column: 6, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4413, file: !3, line: 818, column: 6)
!4426 = !DILocation(line: 818, column: 12, scope: !4425)
!4427 = !DILocation(line: 818, column: 6, scope: !4413)
!4428 = !DILocation(line: 819, column: 11, scope: !4425)
!4429 = !DILocation(line: 819, column: 17, scope: !4425)
!4430 = !DILocation(line: 819, column: 9, scope: !4425)
!4431 = !DILocation(line: 819, column: 4, scope: !4425)
!4432 = !DILocation(line: 820, column: 11, scope: !4433)
!4433 = distinct !DILexicalBlock(scope: !4425, file: !3, line: 820, column: 11)
!4434 = !DILocation(line: 820, column: 17, scope: !4433)
!4435 = !DILocation(line: 820, column: 11, scope: !4425)
!4436 = !DILocation(line: 821, column: 11, scope: !4433)
!4437 = !DILocation(line: 821, column: 17, scope: !4433)
!4438 = !DILocation(line: 821, column: 9, scope: !4433)
!4439 = !DILocation(line: 821, column: 4, scope: !4433)
!4440 = !DILocation(line: 824, column: 6, scope: !4441)
!4441 = distinct !DILexicalBlock(scope: !4433, file: !3, line: 823, column: 4)
!4442 = !DILocation(line: 824, column: 13, scope: !4441)
!4443 = !DILocation(line: 824, column: 21, scope: !4441)
!4444 = !DILocation(line: 824, column: 18, scope: !4441)
!4445 = !DILocation(line: 824, column: 26, scope: !4441)
!4446 = !DILocation(line: 824, column: 30, scope: !4441)
!4447 = !DILocation(line: 824, column: 36, scope: !4441)
!4448 = !DILocation(line: 824, column: 29, scope: !4441)
!4449 = !DILocation(line: 0, scope: !4441)
!4450 = !DILocation(line: 825, column: 15, scope: !4441)
!4451 = !DILocation(line: 825, column: 21, scope: !4441)
!4452 = !DILocation(line: 825, column: 13, scope: !4441)
!4453 = distinct !{!4453, !4440, !4451}
!4454 = !DILocation(line: 826, column: 10, scope: !4455)
!4455 = distinct !DILexicalBlock(scope: !4441, file: !3, line: 826, column: 10)
!4456 = !DILocation(line: 826, column: 18, scope: !4455)
!4457 = !DILocation(line: 826, column: 15, scope: !4455)
!4458 = !DILocation(line: 826, column: 10, scope: !4441)
!4459 = !DILocation(line: 827, column: 15, scope: !4455)
!4460 = !DILocation(line: 827, column: 21, scope: !4455)
!4461 = !DILocation(line: 827, column: 13, scope: !4455)
!4462 = !DILocation(line: 827, column: 8, scope: !4455)
!4463 = distinct !{!4463, !4408, !4464}
!4464 = !DILocation(line: 829, column: 7, scope: !4406)
!4465 = !DILocation(line: 830, column: 1, scope: !4380)
!4466 = distinct !DISubprogram(name: "cgraph_create_edge_including_clones", scope: !3, file: !3, line: 840, type: !4467, scopeLine: 846, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4467 = !DISubroutineType(types: !4468)
!4468 = !{null, !1022, !1022, !1355, !1355, !1019, !1122, !1122, !2665}
!4469 = !DILocalVariable(name: "orig", arg: 1, scope: !4466, file: !3, line: 840, type: !1022)
!4470 = !DILocation(line: 840, column: 58, scope: !4466)
!4471 = !DILocalVariable(name: "callee", arg: 2, scope: !4466, file: !3, line: 841, type: !1022)
!4472 = !DILocation(line: 841, column: 30, scope: !4466)
!4473 = !DILocalVariable(name: "old_stmt", arg: 3, scope: !4466, file: !3, line: 842, type: !1355)
!4474 = !DILocation(line: 842, column: 17, scope: !4466)
!4475 = !DILocalVariable(name: "stmt", arg: 4, scope: !4466, file: !3, line: 843, type: !1355)
!4476 = !DILocation(line: 843, column: 17, scope: !4466)
!4477 = !DILocalVariable(name: "count", arg: 5, scope: !4466, file: !3, line: 843, type: !1019)
!4478 = !DILocation(line: 843, column: 33, scope: !4466)
!4479 = !DILocalVariable(name: "freq", arg: 6, scope: !4466, file: !3, line: 844, type: !1122)
!4480 = !DILocation(line: 844, column: 14, scope: !4466)
!4481 = !DILocalVariable(name: "loop_depth", arg: 7, scope: !4466, file: !3, line: 844, type: !1122)
!4482 = !DILocation(line: 844, column: 24, scope: !4466)
!4483 = !DILocalVariable(name: "reason", arg: 8, scope: !4466, file: !3, line: 845, type: !2665)
!4484 = !DILocation(line: 845, column: 33, scope: !4466)
!4485 = !DILocalVariable(name: "node", scope: !4466, file: !3, line: 847, type: !1022)
!4486 = !DILocation(line: 847, column: 23, scope: !4466)
!4487 = !DILocalVariable(name: "edge", scope: !4466, file: !3, line: 848, type: !1015)
!4488 = !DILocation(line: 848, column: 23, scope: !4466)
!4489 = !DILocation(line: 850, column: 21, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4466, file: !3, line: 850, column: 7)
!4491 = !DILocation(line: 850, column: 27, scope: !4490)
!4492 = !DILocation(line: 850, column: 8, scope: !4490)
!4493 = !DILocation(line: 850, column: 7, scope: !4466)
!4494 = !DILocation(line: 852, column: 34, scope: !4495)
!4495 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 851, column: 5)
!4496 = !DILocation(line: 852, column: 40, scope: !4495)
!4497 = !DILocation(line: 852, column: 48, scope: !4495)
!4498 = !DILocation(line: 852, column: 54, scope: !4495)
!4499 = !DILocation(line: 852, column: 61, scope: !4495)
!4500 = !DILocation(line: 852, column: 67, scope: !4495)
!4501 = !DILocation(line: 852, column: 14, scope: !4495)
!4502 = !DILocation(line: 852, column: 12, scope: !4495)
!4503 = !DILocation(line: 853, column: 29, scope: !4495)
!4504 = !DILocation(line: 853, column: 7, scope: !4495)
!4505 = !DILocation(line: 853, column: 13, scope: !4495)
!4506 = !DILocation(line: 853, column: 27, scope: !4495)
!4507 = !DILocation(line: 854, column: 5, scope: !4495)
!4508 = !DILocation(line: 856, column: 10, scope: !4466)
!4509 = !DILocation(line: 856, column: 16, scope: !4466)
!4510 = !DILocation(line: 856, column: 8, scope: !4466)
!4511 = !DILocation(line: 857, column: 7, scope: !4512)
!4512 = distinct !DILexicalBlock(scope: !4466, file: !3, line: 857, column: 7)
!4513 = !DILocation(line: 857, column: 7, scope: !4466)
!4514 = !DILocation(line: 858, column: 5, scope: !4512)
!4515 = !DILocation(line: 858, column: 12, scope: !4512)
!4516 = !DILocation(line: 858, column: 20, scope: !4512)
!4517 = !DILocation(line: 858, column: 17, scope: !4512)
!4518 = !DILocalVariable(name: "edge", scope: !4519, file: !3, line: 860, type: !1015)
!4519 = distinct !DILexicalBlock(scope: !4512, file: !3, line: 859, column: 7)
!4520 = !DILocation(line: 860, column: 22, scope: !4519)
!4521 = !DILocation(line: 860, column: 42, scope: !4519)
!4522 = !DILocation(line: 860, column: 48, scope: !4519)
!4523 = !DILocation(line: 860, column: 29, scope: !4519)
!4524 = !DILocation(line: 866, column: 6, scope: !4525)
!4525 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 866, column: 6)
!4526 = !DILocation(line: 866, column: 6, scope: !4519)
!4527 = !DILocation(line: 867, column: 26, scope: !4525)
!4528 = !DILocation(line: 867, column: 32, scope: !4525)
!4529 = !DILocation(line: 867, column: 4, scope: !4525)
!4530 = !DILocation(line: 868, column: 25, scope: !4531)
!4531 = distinct !DILexicalBlock(scope: !4525, file: !3, line: 868, column: 11)
!4532 = !DILocation(line: 868, column: 31, scope: !4531)
!4533 = !DILocation(line: 868, column: 12, scope: !4531)
!4534 = !DILocation(line: 868, column: 11, scope: !4525)
!4535 = !DILocation(line: 870, column: 33, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4531, file: !3, line: 869, column: 4)
!4537 = !DILocation(line: 870, column: 39, scope: !4536)
!4538 = !DILocation(line: 870, column: 47, scope: !4536)
!4539 = !DILocation(line: 870, column: 53, scope: !4536)
!4540 = !DILocation(line: 871, column: 12, scope: !4536)
!4541 = !DILocation(line: 871, column: 18, scope: !4536)
!4542 = !DILocation(line: 870, column: 13, scope: !4536)
!4543 = !DILocation(line: 870, column: 11, scope: !4536)
!4544 = !DILocation(line: 872, column: 28, scope: !4536)
!4545 = !DILocation(line: 872, column: 6, scope: !4536)
!4546 = !DILocation(line: 872, column: 12, scope: !4536)
!4547 = !DILocation(line: 872, column: 26, scope: !4536)
!4548 = !DILocation(line: 873, column: 4, scope: !4536)
!4549 = !DILocation(line: 875, column: 6, scope: !4550)
!4550 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 875, column: 6)
!4551 = !DILocation(line: 875, column: 12, scope: !4550)
!4552 = !DILocation(line: 875, column: 6, scope: !4519)
!4553 = !DILocation(line: 876, column: 11, scope: !4550)
!4554 = !DILocation(line: 876, column: 17, scope: !4550)
!4555 = !DILocation(line: 876, column: 9, scope: !4550)
!4556 = !DILocation(line: 876, column: 4, scope: !4550)
!4557 = !DILocation(line: 877, column: 11, scope: !4558)
!4558 = distinct !DILexicalBlock(scope: !4550, file: !3, line: 877, column: 11)
!4559 = !DILocation(line: 877, column: 17, scope: !4558)
!4560 = !DILocation(line: 877, column: 11, scope: !4550)
!4561 = !DILocation(line: 878, column: 11, scope: !4558)
!4562 = !DILocation(line: 878, column: 17, scope: !4558)
!4563 = !DILocation(line: 878, column: 9, scope: !4558)
!4564 = !DILocation(line: 878, column: 4, scope: !4558)
!4565 = !DILocation(line: 881, column: 6, scope: !4566)
!4566 = distinct !DILexicalBlock(scope: !4558, file: !3, line: 880, column: 4)
!4567 = !DILocation(line: 881, column: 13, scope: !4566)
!4568 = !DILocation(line: 881, column: 21, scope: !4566)
!4569 = !DILocation(line: 881, column: 18, scope: !4566)
!4570 = !DILocation(line: 881, column: 26, scope: !4566)
!4571 = !DILocation(line: 881, column: 30, scope: !4566)
!4572 = !DILocation(line: 881, column: 36, scope: !4566)
!4573 = !DILocation(line: 881, column: 29, scope: !4566)
!4574 = !DILocation(line: 0, scope: !4566)
!4575 = !DILocation(line: 882, column: 15, scope: !4566)
!4576 = !DILocation(line: 882, column: 21, scope: !4566)
!4577 = !DILocation(line: 882, column: 13, scope: !4566)
!4578 = distinct !{!4578, !4565, !4576}
!4579 = !DILocation(line: 883, column: 10, scope: !4580)
!4580 = distinct !DILexicalBlock(scope: !4566, file: !3, line: 883, column: 10)
!4581 = !DILocation(line: 883, column: 18, scope: !4580)
!4582 = !DILocation(line: 883, column: 15, scope: !4580)
!4583 = !DILocation(line: 883, column: 10, scope: !4566)
!4584 = !DILocation(line: 884, column: 15, scope: !4580)
!4585 = !DILocation(line: 884, column: 21, scope: !4580)
!4586 = !DILocation(line: 884, column: 13, scope: !4580)
!4587 = !DILocation(line: 884, column: 8, scope: !4580)
!4588 = distinct !{!4588, !4514, !4589}
!4589 = !DILocation(line: 886, column: 7, scope: !4512)
!4590 = !DILocation(line: 887, column: 1, scope: !4466)
!4591 = distinct !DISubprogram(name: "cgraph_create_edge", scope: !3, file: !3, line: 912, type: !4592, scopeLine: 914, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4592 = !DISubroutineType(types: !4593)
!4593 = !{!1015, !1022, !1022, !1355, !1019, !1122, !1122}
!4594 = !DILocalVariable(name: "caller", arg: 1, scope: !4591, file: !3, line: 912, type: !1022)
!4595 = !DILocation(line: 912, column: 41, scope: !4591)
!4596 = !DILocalVariable(name: "callee", arg: 2, scope: !4591, file: !3, line: 912, type: !1022)
!4597 = !DILocation(line: 912, column: 69, scope: !4591)
!4598 = !DILocalVariable(name: "call_stmt", arg: 3, scope: !4591, file: !3, line: 913, type: !1355)
!4599 = !DILocation(line: 913, column: 14, scope: !4591)
!4600 = !DILocalVariable(name: "count", arg: 4, scope: !4591, file: !3, line: 913, type: !1019)
!4601 = !DILocation(line: 913, column: 35, scope: !4591)
!4602 = !DILocalVariable(name: "freq", arg: 5, scope: !4591, file: !3, line: 913, type: !1122)
!4603 = !DILocation(line: 913, column: 46, scope: !4591)
!4604 = !DILocalVariable(name: "nest", arg: 6, scope: !4591, file: !3, line: 913, type: !1122)
!4605 = !DILocation(line: 913, column: 56, scope: !4591)
!4606 = !DILocalVariable(name: "edge", scope: !4591, file: !3, line: 915, type: !1015)
!4607 = !DILocation(line: 915, column: 23, scope: !4591)
!4608 = !DILocation(line: 920, column: 7, scope: !4609)
!4609 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 920, column: 7)
!4610 = !DILocation(line: 920, column: 7, scope: !4591)
!4611 = !DILocation(line: 928, column: 7, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4609, file: !3, line: 921, column: 5)
!4613 = !DILocation(line: 929, column: 5, scope: !4612)
!4614 = !DILocation(line: 931, column: 7, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 931, column: 7)
!4616 = !DILocation(line: 931, column: 7, scope: !4591)
!4617 = !DILocation(line: 933, column: 14, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 932, column: 5)
!4619 = !DILocation(line: 933, column: 12, scope: !4618)
!4620 = !DILocation(line: 934, column: 20, scope: !4618)
!4621 = !DILocation(line: 934, column: 18, scope: !4618)
!4622 = !DILocation(line: 935, column: 5, scope: !4618)
!4623 = !DILocation(line: 938, column: 14, scope: !4624)
!4624 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 937, column: 5)
!4625 = !DILocation(line: 938, column: 12, scope: !4624)
!4626 = !DILocation(line: 939, column: 38, scope: !4624)
!4627 = !DILocation(line: 939, column: 7, scope: !4624)
!4628 = !DILocation(line: 939, column: 13, scope: !4624)
!4629 = !DILocation(line: 939, column: 17, scope: !4624)
!4630 = !DILocation(line: 942, column: 3, scope: !4591)
!4631 = !DILocation(line: 942, column: 9, scope: !4591)
!4632 = !DILocation(line: 942, column: 13, scope: !4591)
!4633 = !DILocation(line: 944, column: 18, scope: !4591)
!4634 = !DILocation(line: 944, column: 3, scope: !4591)
!4635 = !DILocation(line: 944, column: 9, scope: !4591)
!4636 = !DILocation(line: 944, column: 16, scope: !4591)
!4637 = !DILocation(line: 945, column: 18, scope: !4591)
!4638 = !DILocation(line: 945, column: 3, scope: !4591)
!4639 = !DILocation(line: 945, column: 9, scope: !4591)
!4640 = !DILocation(line: 945, column: 16, scope: !4591)
!4641 = !DILocation(line: 946, column: 21, scope: !4591)
!4642 = !DILocation(line: 946, column: 3, scope: !4591)
!4643 = !DILocation(line: 946, column: 9, scope: !4591)
!4644 = !DILocation(line: 946, column: 19, scope: !4591)
!4645 = !DILocation(line: 947, column: 14, scope: !4591)
!4646 = !DILocation(line: 947, column: 3, scope: !4591)
!4647 = !DILocation(line: 949, column: 7, scope: !4591)
!4648 = !DILocation(line: 949, column: 44, scope: !4591)
!4649 = !DILocation(line: 949, column: 19, scope: !4591)
!4650 = !DILocation(line: 948, column: 3, scope: !4591)
!4651 = !DILocation(line: 948, column: 9, scope: !4591)
!4652 = !DILocation(line: 949, column: 5, scope: !4591)
!4653 = !DILocation(line: 950, column: 3, scope: !4591)
!4654 = !DILocation(line: 951, column: 3, scope: !4591)
!4655 = !DILocation(line: 951, column: 9, scope: !4591)
!4656 = !DILocation(line: 951, column: 21, scope: !4591)
!4657 = !DILocation(line: 952, column: 23, scope: !4591)
!4658 = !DILocation(line: 952, column: 31, scope: !4591)
!4659 = !DILocation(line: 952, column: 3, scope: !4591)
!4660 = !DILocation(line: 952, column: 9, scope: !4591)
!4661 = !DILocation(line: 952, column: 21, scope: !4591)
!4662 = !DILocation(line: 953, column: 7, scope: !4663)
!4663 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 953, column: 7)
!4664 = !DILocation(line: 953, column: 15, scope: !4663)
!4665 = !DILocation(line: 953, column: 7, scope: !4591)
!4666 = !DILocation(line: 954, column: 36, scope: !4663)
!4667 = !DILocation(line: 954, column: 5, scope: !4663)
!4668 = !DILocation(line: 954, column: 13, scope: !4663)
!4669 = !DILocation(line: 954, column: 22, scope: !4663)
!4670 = !DILocation(line: 954, column: 34, scope: !4663)
!4671 = !DILocation(line: 955, column: 3, scope: !4591)
!4672 = !DILocation(line: 955, column: 9, scope: !4591)
!4673 = !DILocation(line: 955, column: 21, scope: !4591)
!4674 = !DILocation(line: 956, column: 23, scope: !4591)
!4675 = !DILocation(line: 956, column: 31, scope: !4591)
!4676 = !DILocation(line: 956, column: 3, scope: !4591)
!4677 = !DILocation(line: 956, column: 9, scope: !4591)
!4678 = !DILocation(line: 956, column: 21, scope: !4591)
!4679 = !DILocation(line: 957, column: 7, scope: !4680)
!4680 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 957, column: 7)
!4681 = !DILocation(line: 957, column: 15, scope: !4680)
!4682 = !DILocation(line: 957, column: 7, scope: !4591)
!4683 = !DILocation(line: 958, column: 36, scope: !4680)
!4684 = !DILocation(line: 958, column: 5, scope: !4680)
!4685 = !DILocation(line: 958, column: 13, scope: !4680)
!4686 = !DILocation(line: 958, column: 22, scope: !4680)
!4687 = !DILocation(line: 958, column: 34, scope: !4680)
!4688 = !DILocation(line: 959, column: 21, scope: !4591)
!4689 = !DILocation(line: 959, column: 3, scope: !4591)
!4690 = !DILocation(line: 959, column: 11, scope: !4591)
!4691 = !DILocation(line: 959, column: 19, scope: !4591)
!4692 = !DILocation(line: 960, column: 21, scope: !4591)
!4693 = !DILocation(line: 960, column: 3, scope: !4591)
!4694 = !DILocation(line: 960, column: 11, scope: !4591)
!4695 = !DILocation(line: 960, column: 19, scope: !4591)
!4696 = !DILocation(line: 961, column: 17, scope: !4591)
!4697 = !DILocation(line: 961, column: 3, scope: !4591)
!4698 = !DILocation(line: 961, column: 9, scope: !4591)
!4699 = !DILocation(line: 961, column: 15, scope: !4591)
!4700 = !DILocation(line: 962, column: 3, scope: !4591)
!4701 = !DILocation(line: 963, column: 21, scope: !4591)
!4702 = !DILocation(line: 963, column: 3, scope: !4591)
!4703 = !DILocation(line: 963, column: 9, scope: !4591)
!4704 = !DILocation(line: 963, column: 19, scope: !4591)
!4705 = !DILocation(line: 964, column: 3, scope: !4591)
!4706 = !DILocation(line: 965, column: 3, scope: !4591)
!4707 = !DILocation(line: 966, column: 21, scope: !4591)
!4708 = !DILocation(line: 966, column: 3, scope: !4591)
!4709 = !DILocation(line: 966, column: 9, scope: !4591)
!4710 = !DILocation(line: 966, column: 19, scope: !4591)
!4711 = !DILocation(line: 967, column: 3, scope: !4591)
!4712 = !DILocation(line: 967, column: 9, scope: !4591)
!4713 = !DILocation(line: 967, column: 23, scope: !4591)
!4714 = !DILocation(line: 969, column: 6, scope: !4591)
!4715 = !DILocation(line: 969, column: 47, scope: !4591)
!4716 = !DILocation(line: 969, column: 18, scope: !4591)
!4717 = !DILocation(line: 968, column: 3, scope: !4591)
!4718 = !DILocation(line: 968, column: 9, scope: !4591)
!4719 = !DILocation(line: 968, column: 35, scope: !4591)
!4720 = !DILocation(line: 970, column: 7, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4591, file: !3, line: 970, column: 7)
!4722 = !DILocation(line: 970, column: 17, scope: !4721)
!4723 = !DILocation(line: 970, column: 20, scope: !4721)
!4724 = !DILocation(line: 970, column: 28, scope: !4721)
!4725 = !DILocation(line: 970, column: 7, scope: !4591)
!4726 = !DILocalVariable(name: "slot", scope: !4727, file: !3, line: 972, type: !1882)
!4727 = distinct !DILexicalBlock(scope: !4721, file: !3, line: 971, column: 5)
!4728 = !DILocation(line: 972, column: 14, scope: !4727)
!4729 = !DILocation(line: 973, column: 40, scope: !4727)
!4730 = !DILocation(line: 973, column: 48, scope: !4727)
!4731 = !DILocation(line: 974, column: 12, scope: !4727)
!4732 = !DILocation(line: 974, column: 18, scope: !4727)
!4733 = !DILocation(line: 975, column: 12, scope: !4727)
!4734 = !DILocation(line: 976, column: 8, scope: !4727)
!4735 = !DILocation(line: 976, column: 14, scope: !4727)
!4736 = !DILocation(line: 973, column: 14, scope: !4727)
!4737 = !DILocation(line: 973, column: 12, scope: !4727)
!4738 = !DILocation(line: 978, column: 7, scope: !4727)
!4739 = !DILocation(line: 979, column: 15, scope: !4727)
!4740 = !DILocation(line: 979, column: 8, scope: !4727)
!4741 = !DILocation(line: 979, column: 13, scope: !4727)
!4742 = !DILocation(line: 980, column: 5, scope: !4727)
!4743 = !DILocation(line: 982, column: 29, scope: !4591)
!4744 = !DILocation(line: 982, column: 3, scope: !4591)
!4745 = !DILocation(line: 984, column: 10, scope: !4591)
!4746 = !DILocation(line: 984, column: 3, scope: !4591)
!4747 = distinct !DISubprogram(name: "is_gimple_call", scope: !929, file: !929, line: 1870, type: !4748, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4748 = !DISubroutineType(types: !4749)
!4749 = !{!1145, !4750}
!4750 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1027, line: 60, baseType: !2721)
!4751 = !DILocalVariable(name: "gs", arg: 1, scope: !4747, file: !929, line: 1870, type: !4750)
!4752 = !DILocation(line: 1870, column: 30, scope: !4747)
!4753 = !DILocation(line: 1872, column: 23, scope: !4747)
!4754 = !DILocation(line: 1872, column: 10, scope: !4747)
!4755 = !DILocation(line: 1872, column: 27, scope: !4747)
!4756 = !DILocation(line: 1872, column: 3, scope: !4747)
!4757 = distinct !DISubprogram(name: "gimple_call_cannot_inline_p", scope: !929, file: !929, line: 2094, type: !4758, scopeLine: 2095, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4758 = !DISubroutineType(types: !4759)
!4759 = !{!1145, !1355}
!4760 = !DILocalVariable(name: "s", arg: 1, scope: !4757, file: !929, line: 2094, type: !1355)
!4761 = !DILocation(line: 2094, column: 37, scope: !4757)
!4762 = !DILocation(line: 2097, column: 11, scope: !4757)
!4763 = !DILocation(line: 2097, column: 14, scope: !4757)
!4764 = !DILocation(line: 2097, column: 21, scope: !4757)
!4765 = !DILocation(line: 2097, column: 29, scope: !4757)
!4766 = !DILocation(line: 2097, column: 54, scope: !4757)
!4767 = !DILocation(line: 2097, column: 10, scope: !4757)
!4768 = !DILocation(line: 2097, column: 3, scope: !4757)
!4769 = distinct !DISubprogram(name: "initialize_inline_failed", scope: !3, file: !3, line: 893, type: !4770, scopeLine: 894, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4770 = !DISubroutineType(types: !4771)
!4771 = !{null, !1015}
!4772 = !DILocalVariable(name: "e", arg: 1, scope: !4769, file: !3, line: 893, type: !1015)
!4773 = !DILocation(line: 893, column: 47, scope: !4769)
!4774 = !DILocalVariable(name: "callee", scope: !4769, file: !3, line: 895, type: !1022)
!4775 = !DILocation(line: 895, column: 23, scope: !4769)
!4776 = !DILocation(line: 895, column: 32, scope: !4769)
!4777 = !DILocation(line: 895, column: 35, scope: !4769)
!4778 = !DILocation(line: 897, column: 8, scope: !4779)
!4779 = distinct !DILexicalBlock(scope: !4769, file: !3, line: 897, column: 7)
!4780 = !DILocation(line: 897, column: 16, scope: !4779)
!4781 = !DILocation(line: 897, column: 7, scope: !4769)
!4782 = !DILocation(line: 898, column: 5, scope: !4779)
!4783 = !DILocation(line: 898, column: 8, scope: !4779)
!4784 = !DILocation(line: 898, column: 22, scope: !4779)
!4785 = !DILocation(line: 899, column: 12, scope: !4786)
!4786 = distinct !DILexicalBlock(scope: !4779, file: !3, line: 899, column: 12)
!4787 = !DILocation(line: 899, column: 20, scope: !4786)
!4788 = !DILocation(line: 899, column: 26, scope: !4786)
!4789 = !DILocation(line: 899, column: 12, scope: !4779)
!4790 = !DILocation(line: 900, column: 5, scope: !4786)
!4791 = !DILocation(line: 900, column: 8, scope: !4786)
!4792 = !DILocation(line: 900, column: 22, scope: !4786)
!4793 = !DILocation(line: 901, column: 13, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4786, file: !3, line: 901, column: 12)
!4795 = !DILocation(line: 901, column: 21, scope: !4794)
!4796 = !DILocation(line: 901, column: 27, scope: !4794)
!4797 = !DILocation(line: 901, column: 12, scope: !4786)
!4798 = !DILocation(line: 902, column: 5, scope: !4794)
!4799 = !DILocation(line: 902, column: 8, scope: !4794)
!4800 = !DILocation(line: 902, column: 22, scope: !4794)
!4801 = !DILocation(line: 903, column: 12, scope: !4802)
!4802 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 903, column: 12)
!4803 = !DILocation(line: 903, column: 15, scope: !4802)
!4804 = !DILocation(line: 903, column: 25, scope: !4802)
!4805 = !DILocation(line: 903, column: 57, scope: !4802)
!4806 = !DILocation(line: 903, column: 60, scope: !4802)
!4807 = !DILocation(line: 903, column: 28, scope: !4802)
!4808 = !DILocation(line: 903, column: 12, scope: !4794)
!4809 = !DILocation(line: 904, column: 5, scope: !4802)
!4810 = !DILocation(line: 904, column: 8, scope: !4802)
!4811 = !DILocation(line: 904, column: 22, scope: !4802)
!4812 = !DILocation(line: 906, column: 5, scope: !4802)
!4813 = !DILocation(line: 906, column: 8, scope: !4802)
!4814 = !DILocation(line: 906, column: 22, scope: !4802)
!4815 = !DILocation(line: 907, column: 1, scope: !4769)
!4816 = distinct !DISubprogram(name: "cgraph_remove_edge", scope: !3, file: !3, line: 1034, type: !4770, scopeLine: 1035, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4817 = !DILocalVariable(name: "e", arg: 1, scope: !4816, file: !3, line: 1034, type: !1015)
!4818 = !DILocation(line: 1034, column: 41, scope: !4816)
!4819 = !DILocation(line: 1037, column: 35, scope: !4816)
!4820 = !DILocation(line: 1037, column: 3, scope: !4816)
!4821 = !DILocation(line: 1040, column: 30, scope: !4816)
!4822 = !DILocation(line: 1040, column: 3, scope: !4816)
!4823 = !DILocation(line: 1043, column: 30, scope: !4816)
!4824 = !DILocation(line: 1043, column: 3, scope: !4816)
!4825 = !DILocation(line: 1046, column: 21, scope: !4816)
!4826 = !DILocation(line: 1046, column: 3, scope: !4816)
!4827 = !DILocation(line: 1047, column: 1, scope: !4816)
!4828 = distinct !DISubprogram(name: "cgraph_call_edge_removal_hooks", scope: !3, file: !3, line: 225, type: !4770, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4829 = !DILocalVariable(name: "e", arg: 1, scope: !4828, file: !3, line: 225, type: !1015)
!4830 = !DILocation(line: 225, column: 53, scope: !4828)
!4831 = !DILocalVariable(name: "entry", scope: !4828, file: !3, line: 227, type: !1007)
!4832 = !DILocation(line: 227, column: 33, scope: !4828)
!4833 = !DILocation(line: 227, column: 41, scope: !4828)
!4834 = !DILocation(line: 228, column: 3, scope: !4828)
!4835 = !DILocation(line: 228, column: 10, scope: !4828)
!4836 = !DILocation(line: 230, column: 5, scope: !4837)
!4837 = distinct !DILexicalBlock(scope: !4828, file: !3, line: 229, column: 3)
!4838 = !DILocation(line: 230, column: 12, scope: !4837)
!4839 = !DILocation(line: 230, column: 18, scope: !4837)
!4840 = !DILocation(line: 230, column: 21, scope: !4837)
!4841 = !DILocation(line: 230, column: 28, scope: !4837)
!4842 = !DILocation(line: 231, column: 13, scope: !4837)
!4843 = !DILocation(line: 231, column: 20, scope: !4837)
!4844 = !DILocation(line: 231, column: 11, scope: !4837)
!4845 = distinct !{!4845, !4834, !4846}
!4846 = !DILocation(line: 232, column: 3, scope: !4828)
!4847 = !DILocation(line: 233, column: 1, scope: !4828)
!4848 = distinct !DISubprogram(name: "cgraph_edge_remove_callee", scope: !3, file: !3, line: 990, type: !4770, scopeLine: 991, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4849 = !DILocalVariable(name: "e", arg: 1, scope: !4848, file: !3, line: 990, type: !1015)
!4850 = !DILocation(line: 990, column: 48, scope: !4848)
!4851 = !DILocation(line: 992, column: 7, scope: !4852)
!4852 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 992, column: 7)
!4853 = !DILocation(line: 992, column: 10, scope: !4852)
!4854 = !DILocation(line: 992, column: 7, scope: !4848)
!4855 = !DILocation(line: 993, column: 35, scope: !4852)
!4856 = !DILocation(line: 993, column: 38, scope: !4852)
!4857 = !DILocation(line: 993, column: 5, scope: !4852)
!4858 = !DILocation(line: 993, column: 8, scope: !4852)
!4859 = !DILocation(line: 993, column: 21, scope: !4852)
!4860 = !DILocation(line: 993, column: 33, scope: !4852)
!4861 = !DILocation(line: 994, column: 7, scope: !4862)
!4862 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 994, column: 7)
!4863 = !DILocation(line: 994, column: 10, scope: !4862)
!4864 = !DILocation(line: 994, column: 7, scope: !4848)
!4865 = !DILocation(line: 995, column: 35, scope: !4862)
!4866 = !DILocation(line: 995, column: 38, scope: !4862)
!4867 = !DILocation(line: 995, column: 5, scope: !4862)
!4868 = !DILocation(line: 995, column: 8, scope: !4862)
!4869 = !DILocation(line: 995, column: 21, scope: !4862)
!4870 = !DILocation(line: 995, column: 33, scope: !4862)
!4871 = !DILocation(line: 996, column: 8, scope: !4872)
!4872 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 996, column: 7)
!4873 = !DILocation(line: 996, column: 11, scope: !4872)
!4874 = !DILocation(line: 996, column: 7, scope: !4848)
!4875 = !DILocation(line: 997, column: 26, scope: !4872)
!4876 = !DILocation(line: 997, column: 29, scope: !4872)
!4877 = !DILocation(line: 997, column: 5, scope: !4872)
!4878 = !DILocation(line: 997, column: 8, scope: !4872)
!4879 = !DILocation(line: 997, column: 16, scope: !4872)
!4880 = !DILocation(line: 997, column: 24, scope: !4872)
!4881 = !DILocation(line: 998, column: 1, scope: !4848)
!4882 = distinct !DISubprogram(name: "cgraph_edge_remove_caller", scope: !3, file: !3, line: 1003, type: !4770, scopeLine: 1004, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4883 = !DILocalVariable(name: "e", arg: 1, scope: !4882, file: !3, line: 1003, type: !1015)
!4884 = !DILocation(line: 1003, column: 48, scope: !4882)
!4885 = !DILocation(line: 1005, column: 7, scope: !4886)
!4886 = distinct !DILexicalBlock(scope: !4882, file: !3, line: 1005, column: 7)
!4887 = !DILocation(line: 1005, column: 10, scope: !4886)
!4888 = !DILocation(line: 1005, column: 7, scope: !4882)
!4889 = !DILocation(line: 1006, column: 35, scope: !4886)
!4890 = !DILocation(line: 1006, column: 38, scope: !4886)
!4891 = !DILocation(line: 1006, column: 5, scope: !4886)
!4892 = !DILocation(line: 1006, column: 8, scope: !4886)
!4893 = !DILocation(line: 1006, column: 21, scope: !4886)
!4894 = !DILocation(line: 1006, column: 33, scope: !4886)
!4895 = !DILocation(line: 1007, column: 7, scope: !4896)
!4896 = distinct !DILexicalBlock(scope: !4882, file: !3, line: 1007, column: 7)
!4897 = !DILocation(line: 1007, column: 10, scope: !4896)
!4898 = !DILocation(line: 1007, column: 7, scope: !4882)
!4899 = !DILocation(line: 1008, column: 35, scope: !4896)
!4900 = !DILocation(line: 1008, column: 38, scope: !4896)
!4901 = !DILocation(line: 1008, column: 5, scope: !4896)
!4902 = !DILocation(line: 1008, column: 8, scope: !4896)
!4903 = !DILocation(line: 1008, column: 21, scope: !4896)
!4904 = !DILocation(line: 1008, column: 33, scope: !4896)
!4905 = !DILocation(line: 1009, column: 8, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4882, file: !3, line: 1009, column: 7)
!4907 = !DILocation(line: 1009, column: 11, scope: !4906)
!4908 = !DILocation(line: 1009, column: 7, scope: !4882)
!4909 = !DILocation(line: 1010, column: 26, scope: !4906)
!4910 = !DILocation(line: 1010, column: 29, scope: !4906)
!4911 = !DILocation(line: 1010, column: 5, scope: !4906)
!4912 = !DILocation(line: 1010, column: 8, scope: !4906)
!4913 = !DILocation(line: 1010, column: 16, scope: !4906)
!4914 = !DILocation(line: 1010, column: 24, scope: !4906)
!4915 = !DILocation(line: 1011, column: 7, scope: !4916)
!4916 = distinct !DILexicalBlock(scope: !4882, file: !3, line: 1011, column: 7)
!4917 = !DILocation(line: 1011, column: 10, scope: !4916)
!4918 = !DILocation(line: 1011, column: 18, scope: !4916)
!4919 = !DILocation(line: 1011, column: 7, scope: !4882)
!4920 = !DILocation(line: 1012, column: 32, scope: !4916)
!4921 = !DILocation(line: 1012, column: 35, scope: !4916)
!4922 = !DILocation(line: 1012, column: 43, scope: !4916)
!4923 = !DILocation(line: 1013, column: 11, scope: !4916)
!4924 = !DILocation(line: 1013, column: 14, scope: !4916)
!4925 = !DILocation(line: 1014, column: 13, scope: !4916)
!4926 = !DILocation(line: 1014, column: 32, scope: !4916)
!4927 = !DILocation(line: 1014, column: 35, scope: !4916)
!4928 = !DILocation(line: 1012, column: 5, scope: !4916)
!4929 = !DILocation(line: 1015, column: 1, scope: !4882)
!4930 = distinct !DISubprogram(name: "cgraph_free_edge", scope: !3, file: !3, line: 1020, type: !4770, scopeLine: 1021, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4931 = !DILocalVariable(name: "e", arg: 1, scope: !4930, file: !3, line: 1020, type: !1015)
!4932 = !DILocation(line: 1020, column: 39, scope: !4930)
!4933 = !DILocalVariable(name: "uid", scope: !4930, file: !3, line: 1022, type: !1122)
!4934 = !DILocation(line: 1022, column: 7, scope: !4930)
!4935 = !DILocation(line: 1022, column: 13, scope: !4930)
!4936 = !DILocation(line: 1022, column: 16, scope: !4930)
!4937 = !DILocation(line: 1025, column: 11, scope: !4930)
!4938 = !DILocation(line: 1025, column: 3, scope: !4930)
!4939 = !DILocation(line: 1026, column: 12, scope: !4930)
!4940 = !DILocation(line: 1026, column: 3, scope: !4930)
!4941 = !DILocation(line: 1026, column: 6, scope: !4930)
!4942 = !DILocation(line: 1026, column: 10, scope: !4930)
!4943 = !DILocation(line: 1027, column: 24, scope: !4930)
!4944 = !DILocation(line: 1027, column: 3, scope: !4930)
!4945 = !DILocation(line: 1027, column: 22, scope: !4930)
!4946 = !DILocation(line: 1028, column: 16, scope: !4930)
!4947 = !DILocation(line: 1028, column: 14, scope: !4930)
!4948 = !DILocation(line: 1029, column: 1, scope: !4930)
!4949 = distinct !DISubprogram(name: "cgraph_redirect_edge_callee", scope: !3, file: !3, line: 1053, type: !4950, scopeLine: 1054, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4950 = !DISubroutineType(types: !4951)
!4951 = !{null, !1015, !1022}
!4952 = !DILocalVariable(name: "e", arg: 1, scope: !4949, file: !3, line: 1053, type: !1015)
!4953 = !DILocation(line: 1053, column: 50, scope: !4949)
!4954 = !DILocalVariable(name: "n", arg: 2, scope: !4949, file: !3, line: 1053, type: !1022)
!4955 = !DILocation(line: 1053, column: 73, scope: !4949)
!4956 = !DILocation(line: 1056, column: 30, scope: !4949)
!4957 = !DILocation(line: 1056, column: 3, scope: !4949)
!4958 = !DILocation(line: 1059, column: 3, scope: !4949)
!4959 = !DILocation(line: 1059, column: 6, scope: !4949)
!4960 = !DILocation(line: 1059, column: 18, scope: !4949)
!4961 = !DILocation(line: 1060, column: 7, scope: !4962)
!4962 = distinct !DILexicalBlock(scope: !4949, file: !3, line: 1060, column: 7)
!4963 = !DILocation(line: 1060, column: 10, scope: !4962)
!4964 = !DILocation(line: 1060, column: 7, scope: !4949)
!4965 = !DILocation(line: 1061, column: 31, scope: !4962)
!4966 = !DILocation(line: 1061, column: 5, scope: !4962)
!4967 = !DILocation(line: 1061, column: 8, scope: !4962)
!4968 = !DILocation(line: 1061, column: 17, scope: !4962)
!4969 = !DILocation(line: 1061, column: 29, scope: !4962)
!4970 = !DILocation(line: 1062, column: 20, scope: !4949)
!4971 = !DILocation(line: 1062, column: 23, scope: !4949)
!4972 = !DILocation(line: 1062, column: 3, scope: !4949)
!4973 = !DILocation(line: 1062, column: 6, scope: !4949)
!4974 = !DILocation(line: 1062, column: 18, scope: !4949)
!4975 = !DILocation(line: 1063, column: 16, scope: !4949)
!4976 = !DILocation(line: 1063, column: 3, scope: !4949)
!4977 = !DILocation(line: 1063, column: 6, scope: !4949)
!4978 = !DILocation(line: 1063, column: 14, scope: !4949)
!4979 = !DILocation(line: 1064, column: 15, scope: !4949)
!4980 = !DILocation(line: 1064, column: 3, scope: !4949)
!4981 = !DILocation(line: 1064, column: 6, scope: !4949)
!4982 = !DILocation(line: 1064, column: 13, scope: !4949)
!4983 = !DILocation(line: 1065, column: 1, scope: !4949)
!4984 = distinct !DISubprogram(name: "cgraph_update_edges_for_call_stmt", scope: !3, file: !3, line: 1134, type: !4985, scopeLine: 1135, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!4985 = !DISubroutineType(types: !4986)
!4986 = !{null, !1355, !1026, !1355}
!4987 = !DILocalVariable(name: "old_stmt", arg: 1, scope: !4984, file: !3, line: 1134, type: !1355)
!4988 = !DILocation(line: 1134, column: 43, scope: !4984)
!4989 = !DILocalVariable(name: "old_decl", arg: 2, scope: !4984, file: !3, line: 1134, type: !1026)
!4990 = !DILocation(line: 1134, column: 58, scope: !4984)
!4991 = !DILocalVariable(name: "new_stmt", arg: 3, scope: !4984, file: !3, line: 1134, type: !1355)
!4992 = !DILocation(line: 1134, column: 75, scope: !4984)
!4993 = !DILocalVariable(name: "orig", scope: !4984, file: !3, line: 1136, type: !1022)
!4994 = !DILocation(line: 1136, column: 23, scope: !4984)
!4995 = !DILocation(line: 1136, column: 43, scope: !4984)
!4996 = !DILocation(line: 1136, column: 49, scope: !4984)
!4997 = !DILocation(line: 1136, column: 30, scope: !4984)
!4998 = !DILocalVariable(name: "node", scope: !4984, file: !3, line: 1137, type: !1022)
!4999 = !DILocation(line: 1137, column: 23, scope: !4984)
!5000 = !DILocation(line: 1139, column: 43, scope: !4984)
!5001 = !DILocation(line: 1139, column: 49, scope: !4984)
!5002 = !DILocation(line: 1139, column: 59, scope: !4984)
!5003 = !DILocation(line: 1139, column: 69, scope: !4984)
!5004 = !DILocation(line: 1139, column: 3, scope: !4984)
!5005 = !DILocation(line: 1140, column: 7, scope: !5006)
!5006 = distinct !DILexicalBlock(scope: !4984, file: !3, line: 1140, column: 7)
!5007 = !DILocation(line: 1140, column: 13, scope: !5006)
!5008 = !DILocation(line: 1140, column: 7, scope: !4984)
!5009 = !DILocation(line: 1141, column: 17, scope: !5010)
!5010 = distinct !DILexicalBlock(scope: !5006, file: !3, line: 1141, column: 5)
!5011 = !DILocation(line: 1141, column: 23, scope: !5010)
!5012 = !DILocation(line: 1141, column: 15, scope: !5010)
!5013 = !DILocation(line: 1141, column: 10, scope: !5010)
!5014 = !DILocation(line: 1141, column: 31, scope: !5015)
!5015 = distinct !DILexicalBlock(scope: !5010, file: !3, line: 1141, column: 5)
!5016 = !DILocation(line: 1141, column: 39, scope: !5015)
!5017 = !DILocation(line: 1141, column: 36, scope: !5015)
!5018 = !DILocation(line: 1141, column: 5, scope: !5010)
!5019 = !DILocation(line: 1143, column: 49, scope: !5020)
!5020 = distinct !DILexicalBlock(scope: !5015, file: !3, line: 1142, column: 7)
!5021 = !DILocation(line: 1143, column: 55, scope: !5020)
!5022 = !DILocation(line: 1143, column: 65, scope: !5020)
!5023 = !DILocation(line: 1143, column: 75, scope: !5020)
!5024 = !DILocation(line: 1143, column: 9, scope: !5020)
!5025 = !DILocation(line: 1144, column: 6, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5020, file: !3, line: 1144, column: 6)
!5027 = !DILocation(line: 1144, column: 12, scope: !5026)
!5028 = !DILocation(line: 1144, column: 6, scope: !5020)
!5029 = !DILocation(line: 1145, column: 11, scope: !5026)
!5030 = !DILocation(line: 1145, column: 17, scope: !5026)
!5031 = !DILocation(line: 1145, column: 9, scope: !5026)
!5032 = !DILocation(line: 1145, column: 4, scope: !5026)
!5033 = !DILocation(line: 1146, column: 11, scope: !5034)
!5034 = distinct !DILexicalBlock(scope: !5026, file: !3, line: 1146, column: 11)
!5035 = !DILocation(line: 1146, column: 17, scope: !5034)
!5036 = !DILocation(line: 1146, column: 11, scope: !5026)
!5037 = !DILocation(line: 1147, column: 11, scope: !5034)
!5038 = !DILocation(line: 1147, column: 17, scope: !5034)
!5039 = !DILocation(line: 1147, column: 9, scope: !5034)
!5040 = !DILocation(line: 1147, column: 4, scope: !5034)
!5041 = !DILocation(line: 1150, column: 6, scope: !5042)
!5042 = distinct !DILexicalBlock(scope: !5034, file: !3, line: 1149, column: 4)
!5043 = !DILocation(line: 1150, column: 13, scope: !5042)
!5044 = !DILocation(line: 1150, column: 21, scope: !5042)
!5045 = !DILocation(line: 1150, column: 18, scope: !5042)
!5046 = !DILocation(line: 1150, column: 26, scope: !5042)
!5047 = !DILocation(line: 1150, column: 30, scope: !5042)
!5048 = !DILocation(line: 1150, column: 36, scope: !5042)
!5049 = !DILocation(line: 1150, column: 29, scope: !5042)
!5050 = !DILocation(line: 0, scope: !5042)
!5051 = !DILocation(line: 1151, column: 15, scope: !5042)
!5052 = !DILocation(line: 1151, column: 21, scope: !5042)
!5053 = !DILocation(line: 1151, column: 13, scope: !5042)
!5054 = distinct !{!5054, !5041, !5052}
!5055 = !DILocation(line: 1152, column: 10, scope: !5056)
!5056 = distinct !DILexicalBlock(scope: !5042, file: !3, line: 1152, column: 10)
!5057 = !DILocation(line: 1152, column: 18, scope: !5056)
!5058 = !DILocation(line: 1152, column: 15, scope: !5056)
!5059 = !DILocation(line: 1152, column: 10, scope: !5042)
!5060 = !DILocation(line: 1153, column: 15, scope: !5056)
!5061 = !DILocation(line: 1153, column: 21, scope: !5056)
!5062 = !DILocation(line: 1153, column: 13, scope: !5056)
!5063 = !DILocation(line: 1153, column: 8, scope: !5056)
!5064 = !DILocation(line: 1141, column: 5, scope: !5015)
!5065 = distinct !{!5065, !5018, !5066}
!5066 = !DILocation(line: 1155, column: 7, scope: !5010)
!5067 = !DILocation(line: 1156, column: 1, scope: !4984)
!5068 = distinct !DISubprogram(name: "cgraph_update_edges_for_call_stmt_node", scope: !3, file: !3, line: 1073, type: !5069, scopeLine: 1075, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5069 = !DISubroutineType(types: !5070)
!5070 = !{null, !1022, !1355, !1026, !1355}
!5071 = !DILocalVariable(name: "node", arg: 1, scope: !5068, file: !3, line: 1073, type: !1022)
!5072 = !DILocation(line: 1073, column: 61, scope: !5068)
!5073 = !DILocalVariable(name: "old_stmt", arg: 2, scope: !5068, file: !3, line: 1074, type: !1355)
!5074 = !DILocation(line: 1074, column: 13, scope: !5068)
!5075 = !DILocalVariable(name: "old_call", arg: 3, scope: !5068, file: !3, line: 1074, type: !1026)
!5076 = !DILocation(line: 1074, column: 28, scope: !5068)
!5077 = !DILocalVariable(name: "new_stmt", arg: 4, scope: !5068, file: !3, line: 1074, type: !1355)
!5078 = !DILocation(line: 1074, column: 45, scope: !5068)
!5079 = !DILocalVariable(name: "new_call", scope: !5068, file: !3, line: 1076, type: !1026)
!5080 = !DILocation(line: 1076, column: 8, scope: !5068)
!5081 = !DILocation(line: 1076, column: 36, scope: !5068)
!5082 = !DILocation(line: 1076, column: 20, scope: !5068)
!5083 = !DILocation(line: 1076, column: 19, scope: !5068)
!5084 = !DILocation(line: 1076, column: 69, scope: !5068)
!5085 = !DILocation(line: 1076, column: 49, scope: !5068)
!5086 = !DILocation(line: 1079, column: 8, scope: !5087)
!5087 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 1079, column: 7)
!5088 = !DILocation(line: 1079, column: 17, scope: !5087)
!5089 = !DILocation(line: 1079, column: 21, scope: !5087)
!5090 = !DILocation(line: 1079, column: 7, scope: !5068)
!5091 = !DILocation(line: 1080, column: 5, scope: !5087)
!5092 = !DILocation(line: 1083, column: 7, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 1083, column: 7)
!5094 = !DILocation(line: 1083, column: 19, scope: !5093)
!5095 = !DILocation(line: 1083, column: 16, scope: !5093)
!5096 = !DILocation(line: 1083, column: 7, scope: !5068)
!5097 = !DILocalVariable(name: "e", scope: !5098, file: !3, line: 1085, type: !1015)
!5098 = distinct !DILexicalBlock(scope: !5093, file: !3, line: 1084, column: 5)
!5099 = !DILocation(line: 1085, column: 27, scope: !5098)
!5100 = !DILocation(line: 1085, column: 44, scope: !5098)
!5101 = !DILocation(line: 1085, column: 50, scope: !5098)
!5102 = !DILocation(line: 1085, column: 31, scope: !5098)
!5103 = !DILocalVariable(name: "ne", scope: !5098, file: !3, line: 1086, type: !1015)
!5104 = !DILocation(line: 1086, column: 27, scope: !5098)
!5105 = !DILocalVariable(name: "count", scope: !5098, file: !3, line: 1087, type: !1019)
!5106 = !DILocation(line: 1087, column: 17, scope: !5098)
!5107 = !DILocalVariable(name: "frequency", scope: !5098, file: !3, line: 1088, type: !1122)
!5108 = !DILocation(line: 1088, column: 11, scope: !5098)
!5109 = !DILocalVariable(name: "loop_nest", scope: !5098, file: !3, line: 1089, type: !1122)
!5110 = !DILocation(line: 1089, column: 11, scope: !5098)
!5111 = !DILocation(line: 1091, column: 11, scope: !5112)
!5112 = distinct !DILexicalBlock(scope: !5098, file: !3, line: 1091, column: 11)
!5113 = !DILocation(line: 1091, column: 11, scope: !5098)
!5114 = !DILocation(line: 1095, column: 8, scope: !5115)
!5115 = distinct !DILexicalBlock(scope: !5116, file: !3, line: 1095, column: 8)
!5116 = distinct !DILexicalBlock(scope: !5112, file: !3, line: 1092, column: 2)
!5117 = !DILocation(line: 1095, column: 17, scope: !5115)
!5118 = !DILocation(line: 1095, column: 20, scope: !5115)
!5119 = !DILocation(line: 1095, column: 23, scope: !5115)
!5120 = !DILocation(line: 1095, column: 31, scope: !5115)
!5121 = !DILocation(line: 1095, column: 39, scope: !5115)
!5122 = !DILocation(line: 1095, column: 36, scope: !5115)
!5123 = !DILocation(line: 1095, column: 8, scope: !5116)
!5124 = !DILocation(line: 1096, column: 6, scope: !5115)
!5125 = !DILocation(line: 1101, column: 12, scope: !5116)
!5126 = !DILocation(line: 1101, column: 15, scope: !5116)
!5127 = !DILocation(line: 1101, column: 10, scope: !5116)
!5128 = !DILocation(line: 1102, column: 16, scope: !5116)
!5129 = !DILocation(line: 1102, column: 19, scope: !5116)
!5130 = !DILocation(line: 1102, column: 14, scope: !5116)
!5131 = !DILocation(line: 1103, column: 16, scope: !5116)
!5132 = !DILocation(line: 1103, column: 19, scope: !5116)
!5133 = !DILocation(line: 1103, column: 14, scope: !5116)
!5134 = !DILocation(line: 1104, column: 24, scope: !5116)
!5135 = !DILocation(line: 1104, column: 4, scope: !5116)
!5136 = !DILocation(line: 1105, column: 2, scope: !5116)
!5137 = !DILocalVariable(name: "bb", scope: !5138, file: !3, line: 1109, type: !1943)
!5138 = distinct !DILexicalBlock(scope: !5112, file: !3, line: 1107, column: 2)
!5139 = !DILocation(line: 1109, column: 16, scope: !5138)
!5140 = !DILocation(line: 1109, column: 32, scope: !5138)
!5141 = !DILocation(line: 1109, column: 21, scope: !5138)
!5142 = !DILocation(line: 1110, column: 12, scope: !5138)
!5143 = !DILocation(line: 1110, column: 16, scope: !5138)
!5144 = !DILocation(line: 1110, column: 10, scope: !5138)
!5145 = !DILocation(line: 1111, column: 48, scope: !5138)
!5146 = !DILocation(line: 1112, column: 13, scope: !5138)
!5147 = !DILocation(line: 1111, column: 16, scope: !5138)
!5148 = !DILocation(line: 1111, column: 14, scope: !5138)
!5149 = !DILocation(line: 1113, column: 16, scope: !5138)
!5150 = !DILocation(line: 1113, column: 20, scope: !5138)
!5151 = !DILocation(line: 1113, column: 14, scope: !5138)
!5152 = !DILocation(line: 1116, column: 11, scope: !5153)
!5153 = distinct !DILexicalBlock(scope: !5098, file: !3, line: 1116, column: 11)
!5154 = !DILocation(line: 1116, column: 11, scope: !5098)
!5155 = !DILocation(line: 1118, column: 29, scope: !5156)
!5156 = distinct !DILexicalBlock(scope: !5153, file: !3, line: 1117, column: 2)
!5157 = !DILocation(line: 1118, column: 48, scope: !5156)
!5158 = !DILocation(line: 1118, column: 35, scope: !5156)
!5159 = !DILocation(line: 1119, column: 8, scope: !5156)
!5160 = !DILocation(line: 1119, column: 18, scope: !5156)
!5161 = !DILocation(line: 1119, column: 25, scope: !5156)
!5162 = !DILocation(line: 1120, column: 8, scope: !5156)
!5163 = !DILocation(line: 1118, column: 9, scope: !5156)
!5164 = !DILocation(line: 1118, column: 7, scope: !5156)
!5165 = !DILocation(line: 1121, column: 4, scope: !5156)
!5166 = !DILocation(line: 1122, column: 2, scope: !5156)
!5167 = !DILocation(line: 1123, column: 5, scope: !5098)
!5168 = !DILocation(line: 1125, column: 12, scope: !5169)
!5169 = distinct !DILexicalBlock(scope: !5093, file: !3, line: 1125, column: 12)
!5170 = !DILocation(line: 1125, column: 24, scope: !5169)
!5171 = !DILocation(line: 1125, column: 21, scope: !5169)
!5172 = !DILocation(line: 1125, column: 12, scope: !5093)
!5173 = !DILocation(line: 1126, column: 40, scope: !5169)
!5174 = !DILocation(line: 1126, column: 46, scope: !5169)
!5175 = !DILocation(line: 1126, column: 27, scope: !5169)
!5176 = !DILocation(line: 1126, column: 57, scope: !5169)
!5177 = !DILocation(line: 1126, column: 5, scope: !5169)
!5178 = !DILocation(line: 1127, column: 1, scope: !5068)
!5179 = distinct !DISubprogram(name: "cgraph_node_remove_callees", scope: !3, file: !3, line: 1162, type: !2541, scopeLine: 1163, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5180 = !DILocalVariable(name: "node", arg: 1, scope: !5179, file: !3, line: 1162, type: !1022)
!5181 = !DILocation(line: 1162, column: 49, scope: !5179)
!5182 = !DILocalVariable(name: "e", scope: !5179, file: !3, line: 1164, type: !1015)
!5183 = !DILocation(line: 1164, column: 23, scope: !5179)
!5184 = !DILocalVariable(name: "f", scope: !5179, file: !3, line: 1164, type: !1015)
!5185 = !DILocation(line: 1164, column: 27, scope: !5179)
!5186 = !DILocation(line: 1169, column: 12, scope: !5187)
!5187 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 1169, column: 3)
!5188 = !DILocation(line: 1169, column: 18, scope: !5187)
!5189 = !DILocation(line: 1169, column: 10, scope: !5187)
!5190 = !DILocation(line: 1169, column: 8, scope: !5187)
!5191 = !DILocation(line: 1169, column: 27, scope: !5192)
!5192 = distinct !DILexicalBlock(scope: !5187, file: !3, line: 1169, column: 3)
!5193 = !DILocation(line: 1169, column: 3, scope: !5187)
!5194 = !DILocation(line: 1171, column: 11, scope: !5195)
!5195 = distinct !DILexicalBlock(scope: !5192, file: !3, line: 1170, column: 5)
!5196 = !DILocation(line: 1171, column: 14, scope: !5195)
!5197 = !DILocation(line: 1171, column: 9, scope: !5195)
!5198 = !DILocation(line: 1172, column: 39, scope: !5195)
!5199 = !DILocation(line: 1172, column: 7, scope: !5195)
!5200 = !DILocation(line: 1173, column: 34, scope: !5195)
!5201 = !DILocation(line: 1173, column: 7, scope: !5195)
!5202 = !DILocation(line: 1174, column: 25, scope: !5195)
!5203 = !DILocation(line: 1174, column: 7, scope: !5195)
!5204 = !DILocation(line: 1175, column: 5, scope: !5195)
!5205 = !DILocation(line: 1169, column: 34, scope: !5192)
!5206 = !DILocation(line: 1169, column: 32, scope: !5192)
!5207 = !DILocation(line: 1169, column: 3, scope: !5192)
!5208 = distinct !{!5208, !5193, !5209}
!5209 = !DILocation(line: 1175, column: 5, scope: !5187)
!5210 = !DILocation(line: 1176, column: 3, scope: !5179)
!5211 = !DILocation(line: 1176, column: 9, scope: !5179)
!5212 = !DILocation(line: 1176, column: 17, scope: !5179)
!5213 = !DILocation(line: 1177, column: 7, scope: !5214)
!5214 = distinct !DILexicalBlock(scope: !5179, file: !3, line: 1177, column: 7)
!5215 = !DILocation(line: 1177, column: 13, scope: !5214)
!5216 = !DILocation(line: 1177, column: 7, scope: !5179)
!5217 = !DILocation(line: 1179, column: 20, scope: !5218)
!5218 = distinct !DILexicalBlock(scope: !5214, file: !3, line: 1178, column: 5)
!5219 = !DILocation(line: 1179, column: 26, scope: !5218)
!5220 = !DILocation(line: 1179, column: 7, scope: !5218)
!5221 = !DILocation(line: 1180, column: 7, scope: !5218)
!5222 = !DILocation(line: 1180, column: 13, scope: !5218)
!5223 = !DILocation(line: 1180, column: 28, scope: !5218)
!5224 = !DILocation(line: 1181, column: 5, scope: !5218)
!5225 = !DILocation(line: 1182, column: 1, scope: !5179)
!5226 = distinct !DISubprogram(name: "cgraph_release_function_body", scope: !3, file: !3, line: 1207, type: !2541, scopeLine: 1208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5227 = !DILocalVariable(name: "node", arg: 1, scope: !5226, file: !3, line: 1207, type: !1022)
!5228 = !DILocation(line: 1207, column: 51, scope: !5226)
!5229 = !DILocation(line: 1209, column: 7, scope: !5230)
!5230 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 1209, column: 7)
!5231 = !DILocation(line: 1209, column: 7, scope: !5226)
!5232 = !DILocalVariable(name: "old_decl", scope: !5233, file: !3, line: 1211, type: !1026)
!5233 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 1210, column: 5)
!5234 = !DILocation(line: 1211, column: 12, scope: !5233)
!5235 = !DILocation(line: 1211, column: 23, scope: !5233)
!5236 = !DILocation(line: 1212, column: 18, scope: !5233)
!5237 = !DILocation(line: 1212, column: 7, scope: !5233)
!5238 = !DILocation(line: 1213, column: 11, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5233, file: !3, line: 1213, column: 11)
!5240 = !DILocation(line: 1213, column: 17, scope: !5239)
!5241 = !DILocation(line: 1213, column: 11, scope: !5233)
!5242 = !DILocation(line: 1215, column: 28, scope: !5243)
!5243 = distinct !DILexicalBlock(scope: !5239, file: !3, line: 1214, column: 2)
!5244 = !DILocation(line: 1215, column: 34, scope: !5243)
!5245 = !DILocation(line: 1215, column: 26, scope: !5243)
!5246 = !DILocation(line: 1216, column: 4, scope: !5243)
!5247 = !DILocation(line: 1217, column: 4, scope: !5243)
!5248 = !DILocation(line: 1218, column: 4, scope: !5243)
!5249 = !DILocation(line: 1218, column: 10, scope: !5243)
!5250 = !DILocation(line: 1218, column: 13, scope: !5243)
!5251 = !DILocation(line: 1219, column: 28, scope: !5243)
!5252 = !DILocation(line: 1219, column: 26, scope: !5243)
!5253 = !DILocation(line: 1220, column: 2, scope: !5243)
!5254 = !DILocation(line: 1221, column: 11, scope: !5255)
!5255 = distinct !DILexicalBlock(scope: !5233, file: !3, line: 1221, column: 11)
!5256 = !DILocation(line: 1221, column: 17, scope: !5255)
!5257 = !DILocation(line: 1221, column: 11, scope: !5233)
!5258 = !DILocation(line: 1223, column: 4, scope: !5259)
!5259 = distinct !DILexicalBlock(scope: !5255, file: !3, line: 1222, column: 2)
!5260 = !DILocation(line: 1224, column: 4, scope: !5259)
!5261 = !DILocation(line: 1225, column: 4, scope: !5259)
!5262 = !DILocation(line: 1226, column: 2, scope: !5259)
!5263 = !DILocation(line: 1227, column: 11, scope: !5264)
!5264 = distinct !DILexicalBlock(scope: !5233, file: !3, line: 1227, column: 11)
!5265 = !DILocation(line: 1227, column: 17, scope: !5264)
!5266 = !DILocation(line: 1227, column: 11, scope: !5233)
!5267 = !DILocation(line: 1228, column: 2, scope: !5264)
!5268 = !DILocation(line: 1229, column: 7, scope: !5233)
!5269 = !DILocation(line: 1230, column: 7, scope: !5233)
!5270 = !DILocation(line: 1231, column: 24, scope: !5233)
!5271 = !DILocation(line: 1231, column: 30, scope: !5233)
!5272 = !DILocation(line: 1231, column: 7, scope: !5233)
!5273 = !DILocation(line: 1232, column: 7, scope: !5233)
!5274 = !DILocation(line: 1236, column: 17, scope: !5233)
!5275 = !DILocation(line: 1236, column: 7, scope: !5233)
!5276 = !DILocation(line: 1237, column: 7, scope: !5233)
!5277 = !DILocation(line: 1237, column: 41, scope: !5233)
!5278 = !DILocation(line: 1238, column: 5, scope: !5233)
!5279 = !DILocation(line: 1239, column: 3, scope: !5226)
!5280 = !DILocation(line: 1239, column: 32, scope: !5226)
!5281 = !DILocation(line: 1243, column: 8, scope: !5282)
!5282 = distinct !DILexicalBlock(scope: !5226, file: !3, line: 1243, column: 7)
!5283 = !DILocation(line: 1243, column: 14, scope: !5282)
!5284 = !DILocation(line: 1243, column: 7, scope: !5226)
!5285 = !DILocation(line: 1244, column: 33, scope: !5282)
!5286 = !DILocation(line: 1244, column: 5, scope: !5282)
!5287 = !DILocation(line: 1244, column: 31, scope: !5282)
!5288 = !DILocation(line: 1245, column: 1, scope: !5226)
!5289 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_heap_free", scope: !1778, file: !1778, line: 177, type: !5290, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5290 = !DISubroutineType(types: !5291)
!5291 = !{null, !5292}
!5292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2471, size: 64)
!5293 = !DILocalVariable(name: "vec_", arg: 1, scope: !5289, file: !1778, line: 177, type: !5292)
!5294 = !DILocation(line: 177, column: 1, scope: !5289)
!5295 = !DILocation(line: 177, column: 1, scope: !5296)
!5296 = distinct !DILexicalBlock(scope: !5289, file: !1778, line: 177, column: 1)
!5297 = distinct !DISubprogram(name: "cgraph_remove_same_body_alias", scope: !3, file: !3, line: 1250, type: !2541, scopeLine: 1251, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5298 = !DILocalVariable(name: "node", arg: 1, scope: !5297, file: !3, line: 1250, type: !1022)
!5299 = !DILocation(line: 1250, column: 52, scope: !5297)
!5300 = !DILocalVariable(name: "slot", scope: !5297, file: !3, line: 1252, type: !1882)
!5301 = !DILocation(line: 1252, column: 10, scope: !5297)
!5302 = !DILocalVariable(name: "uid", scope: !5297, file: !3, line: 1253, type: !1122)
!5303 = !DILocation(line: 1253, column: 7, scope: !5297)
!5304 = !DILocation(line: 1253, column: 13, scope: !5297)
!5305 = !DILocation(line: 1253, column: 19, scope: !5297)
!5306 = !DILocation(line: 1255, column: 3, scope: !5297)
!5307 = !DILocation(line: 1256, column: 7, scope: !5308)
!5308 = distinct !DILexicalBlock(scope: !5297, file: !3, line: 1256, column: 7)
!5309 = !DILocation(line: 1256, column: 13, scope: !5308)
!5310 = !DILocation(line: 1256, column: 7, scope: !5297)
!5311 = !DILocation(line: 1257, column: 28, scope: !5308)
!5312 = !DILocation(line: 1257, column: 34, scope: !5308)
!5313 = !DILocation(line: 1257, column: 5, scope: !5308)
!5314 = !DILocation(line: 1257, column: 11, scope: !5308)
!5315 = !DILocation(line: 1257, column: 21, scope: !5308)
!5316 = !DILocation(line: 1257, column: 26, scope: !5308)
!5317 = !DILocation(line: 1259, column: 34, scope: !5308)
!5318 = !DILocation(line: 1259, column: 40, scope: !5308)
!5319 = !DILocation(line: 1259, column: 5, scope: !5308)
!5320 = !DILocation(line: 1259, column: 11, scope: !5308)
!5321 = !DILocation(line: 1259, column: 22, scope: !5308)
!5322 = !DILocation(line: 1259, column: 32, scope: !5308)
!5323 = !DILocation(line: 1260, column: 7, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5297, file: !3, line: 1260, column: 7)
!5325 = !DILocation(line: 1260, column: 13, scope: !5324)
!5326 = !DILocation(line: 1260, column: 7, scope: !5297)
!5327 = !DILocation(line: 1261, column: 28, scope: !5324)
!5328 = !DILocation(line: 1261, column: 34, scope: !5324)
!5329 = !DILocation(line: 1261, column: 5, scope: !5324)
!5330 = !DILocation(line: 1261, column: 11, scope: !5324)
!5331 = !DILocation(line: 1261, column: 17, scope: !5324)
!5332 = !DILocation(line: 1261, column: 26, scope: !5324)
!5333 = !DILocation(line: 1262, column: 3, scope: !5297)
!5334 = !DILocation(line: 1262, column: 9, scope: !5297)
!5335 = !DILocation(line: 1262, column: 14, scope: !5297)
!5336 = !DILocation(line: 1263, column: 3, scope: !5297)
!5337 = !DILocation(line: 1263, column: 9, scope: !5297)
!5338 = !DILocation(line: 1263, column: 18, scope: !5297)
!5339 = !DILocation(line: 1264, column: 26, scope: !5297)
!5340 = !DILocation(line: 1264, column: 39, scope: !5297)
!5341 = !DILocation(line: 1264, column: 10, scope: !5297)
!5342 = !DILocation(line: 1264, column: 8, scope: !5297)
!5343 = !DILocation(line: 1265, column: 8, scope: !5344)
!5344 = distinct !DILexicalBlock(scope: !5297, file: !3, line: 1265, column: 7)
!5345 = !DILocation(line: 1265, column: 7, scope: !5344)
!5346 = !DILocation(line: 1265, column: 16, scope: !5344)
!5347 = !DILocation(line: 1265, column: 13, scope: !5344)
!5348 = !DILocation(line: 1265, column: 7, scope: !5297)
!5349 = !DILocation(line: 1266, column: 22, scope: !5344)
!5350 = !DILocation(line: 1266, column: 35, scope: !5344)
!5351 = !DILocation(line: 1266, column: 5, scope: !5344)
!5352 = !DILocation(line: 1267, column: 7, scope: !5353)
!5353 = distinct !DILexicalBlock(scope: !5297, file: !3, line: 1267, column: 7)
!5354 = !DILocation(line: 1267, column: 7, scope: !5297)
!5355 = !DILocalVariable(name: "name", scope: !5356, file: !3, line: 1269, type: !1026)
!5356 = distinct !DILexicalBlock(scope: !5353, file: !3, line: 1268, column: 5)
!5357 = !DILocation(line: 1269, column: 12, scope: !5356)
!5358 = !DILocation(line: 1269, column: 19, scope: !5356)
!5359 = !DILocation(line: 1270, column: 40, scope: !5356)
!5360 = !DILocation(line: 1270, column: 61, scope: !5356)
!5361 = !DILocation(line: 1271, column: 38, scope: !5356)
!5362 = !DILocation(line: 1271, column: 12, scope: !5356)
!5363 = !DILocation(line: 1270, column: 14, scope: !5356)
!5364 = !DILocation(line: 1270, column: 12, scope: !5356)
!5365 = !DILocation(line: 1273, column: 11, scope: !5366)
!5366 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 1273, column: 11)
!5367 = !DILocation(line: 1273, column: 16, scope: !5366)
!5368 = !DILocation(line: 1273, column: 20, scope: !5366)
!5369 = !DILocation(line: 1273, column: 19, scope: !5366)
!5370 = !DILocation(line: 1273, column: 28, scope: !5366)
!5371 = !DILocation(line: 1273, column: 25, scope: !5366)
!5372 = !DILocation(line: 1273, column: 11, scope: !5356)
!5373 = !DILocation(line: 1274, column: 19, scope: !5366)
!5374 = !DILocation(line: 1274, column: 40, scope: !5366)
!5375 = !DILocation(line: 1274, column: 2, scope: !5366)
!5376 = !DILocation(line: 1275, column: 5, scope: !5356)
!5377 = !DILocation(line: 1279, column: 11, scope: !5297)
!5378 = !DILocation(line: 1279, column: 3, scope: !5297)
!5379 = !DILocation(line: 1280, column: 15, scope: !5297)
!5380 = !DILocation(line: 1280, column: 3, scope: !5297)
!5381 = !DILocation(line: 1280, column: 9, scope: !5297)
!5382 = !DILocation(line: 1280, column: 13, scope: !5297)
!5383 = !DILocation(line: 1281, column: 27, scope: !5297)
!5384 = !DILocation(line: 1281, column: 3, scope: !5297)
!5385 = !DILocation(line: 1281, column: 25, scope: !5297)
!5386 = !DILocation(line: 1282, column: 16, scope: !5297)
!5387 = !DILocation(line: 1282, column: 14, scope: !5297)
!5388 = !DILocation(line: 1283, column: 1, scope: !5297)
!5389 = distinct !DISubprogram(name: "cgraph_call_node_removal_hooks", scope: !3, file: !3, line: 266, type: !2541, scopeLine: 267, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5390 = !DILocalVariable(name: "node", arg: 1, scope: !5389, file: !3, line: 266, type: !1022)
!5391 = !DILocation(line: 266, column: 53, scope: !5389)
!5392 = !DILocalVariable(name: "entry", scope: !5389, file: !3, line: 268, type: !2676)
!5393 = !DILocation(line: 268, column: 33, scope: !5389)
!5394 = !DILocation(line: 268, column: 41, scope: !5389)
!5395 = !DILocation(line: 269, column: 3, scope: !5389)
!5396 = !DILocation(line: 269, column: 10, scope: !5389)
!5397 = !DILocation(line: 271, column: 5, scope: !5398)
!5398 = distinct !DILexicalBlock(scope: !5389, file: !3, line: 270, column: 3)
!5399 = !DILocation(line: 271, column: 12, scope: !5398)
!5400 = !DILocation(line: 271, column: 18, scope: !5398)
!5401 = !DILocation(line: 271, column: 24, scope: !5398)
!5402 = !DILocation(line: 271, column: 31, scope: !5398)
!5403 = !DILocation(line: 272, column: 13, scope: !5398)
!5404 = !DILocation(line: 272, column: 20, scope: !5398)
!5405 = !DILocation(line: 272, column: 11, scope: !5398)
!5406 = distinct !{!5406, !5395, !5407}
!5407 = !DILocation(line: 273, column: 3, scope: !5389)
!5408 = !DILocation(line: 274, column: 1, scope: !5389)
!5409 = distinct !DISubprogram(name: "cgraph_node_remove_callers", scope: !3, file: !3, line: 1187, type: !2541, scopeLine: 1188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5410 = !DILocalVariable(name: "node", arg: 1, scope: !5409, file: !3, line: 1187, type: !1022)
!5411 = !DILocation(line: 1187, column: 49, scope: !5409)
!5412 = !DILocalVariable(name: "e", scope: !5409, file: !3, line: 1189, type: !1015)
!5413 = !DILocation(line: 1189, column: 23, scope: !5409)
!5414 = !DILocalVariable(name: "f", scope: !5409, file: !3, line: 1189, type: !1015)
!5415 = !DILocation(line: 1189, column: 27, scope: !5409)
!5416 = !DILocation(line: 1194, column: 12, scope: !5417)
!5417 = distinct !DILexicalBlock(scope: !5409, file: !3, line: 1194, column: 3)
!5418 = !DILocation(line: 1194, column: 18, scope: !5417)
!5419 = !DILocation(line: 1194, column: 10, scope: !5417)
!5420 = !DILocation(line: 1194, column: 8, scope: !5417)
!5421 = !DILocation(line: 1194, column: 27, scope: !5422)
!5422 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 1194, column: 3)
!5423 = !DILocation(line: 1194, column: 3, scope: !5417)
!5424 = !DILocation(line: 1196, column: 11, scope: !5425)
!5425 = distinct !DILexicalBlock(scope: !5422, file: !3, line: 1195, column: 5)
!5426 = !DILocation(line: 1196, column: 14, scope: !5425)
!5427 = !DILocation(line: 1196, column: 9, scope: !5425)
!5428 = !DILocation(line: 1197, column: 39, scope: !5425)
!5429 = !DILocation(line: 1197, column: 7, scope: !5425)
!5430 = !DILocation(line: 1198, column: 34, scope: !5425)
!5431 = !DILocation(line: 1198, column: 7, scope: !5425)
!5432 = !DILocation(line: 1199, column: 25, scope: !5425)
!5433 = !DILocation(line: 1199, column: 7, scope: !5425)
!5434 = !DILocation(line: 1200, column: 5, scope: !5425)
!5435 = !DILocation(line: 1194, column: 34, scope: !5422)
!5436 = !DILocation(line: 1194, column: 32, scope: !5422)
!5437 = !DILocation(line: 1194, column: 3, scope: !5422)
!5438 = distinct !{!5438, !5423, !5439}
!5439 = !DILocation(line: 1200, column: 5, scope: !5417)
!5440 = !DILocation(line: 1201, column: 3, scope: !5409)
!5441 = !DILocation(line: 1201, column: 9, scope: !5409)
!5442 = !DILocation(line: 1201, column: 17, scope: !5409)
!5443 = !DILocation(line: 1202, column: 1, scope: !5409)
!5444 = distinct !DISubprogram(name: "cgraph_remove_node_and_inline_clones", scope: !3, file: !3, line: 1505, type: !2541, scopeLine: 1506, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5445 = !DILocalVariable(name: "node", arg: 1, scope: !5444, file: !3, line: 1505, type: !1022)
!5446 = !DILocation(line: 1505, column: 59, scope: !5444)
!5447 = !DILocalVariable(name: "e", scope: !5444, file: !3, line: 1507, type: !1015)
!5448 = !DILocation(line: 1507, column: 23, scope: !5444)
!5449 = !DILocalVariable(name: "next", scope: !5444, file: !3, line: 1507, type: !1015)
!5450 = !DILocation(line: 1507, column: 27, scope: !5444)
!5451 = !DILocation(line: 1508, column: 12, scope: !5452)
!5452 = distinct !DILexicalBlock(scope: !5444, file: !3, line: 1508, column: 3)
!5453 = !DILocation(line: 1508, column: 18, scope: !5452)
!5454 = !DILocation(line: 1508, column: 10, scope: !5452)
!5455 = !DILocation(line: 1508, column: 8, scope: !5452)
!5456 = !DILocation(line: 1508, column: 27, scope: !5457)
!5457 = distinct !DILexicalBlock(scope: !5452, file: !3, line: 1508, column: 3)
!5458 = !DILocation(line: 1508, column: 3, scope: !5452)
!5459 = !DILocation(line: 1510, column: 14, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5457, file: !3, line: 1509, column: 5)
!5461 = !DILocation(line: 1510, column: 17, scope: !5460)
!5462 = !DILocation(line: 1510, column: 12, scope: !5460)
!5463 = !DILocation(line: 1511, column: 12, scope: !5464)
!5464 = distinct !DILexicalBlock(scope: !5460, file: !3, line: 1511, column: 11)
!5465 = !DILocation(line: 1511, column: 15, scope: !5464)
!5466 = !DILocation(line: 1511, column: 11, scope: !5460)
!5467 = !DILocation(line: 1512, column: 47, scope: !5464)
!5468 = !DILocation(line: 1512, column: 50, scope: !5464)
!5469 = !DILocation(line: 1512, column: 9, scope: !5464)
!5470 = !DILocation(line: 1513, column: 5, scope: !5460)
!5471 = !DILocation(line: 1508, column: 34, scope: !5457)
!5472 = !DILocation(line: 1508, column: 32, scope: !5457)
!5473 = !DILocation(line: 1508, column: 3, scope: !5457)
!5474 = distinct !{!5474, !5458, !5475}
!5475 = !DILocation(line: 1513, column: 5, scope: !5452)
!5476 = !DILocation(line: 1514, column: 23, scope: !5444)
!5477 = !DILocation(line: 1514, column: 3, scope: !5444)
!5478 = !DILocation(line: 1515, column: 1, scope: !5444)
!5479 = distinct !DISubprogram(name: "cgraph_mark_reachable_node", scope: !3, file: !3, line: 1520, type: !2541, scopeLine: 1521, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5480 = !DILocalVariable(name: "node", arg: 1, scope: !5479, file: !3, line: 1520, type: !1022)
!5481 = !DILocation(line: 1520, column: 49, scope: !5479)
!5482 = !DILocation(line: 1522, column: 8, scope: !5483)
!5483 = distinct !DILexicalBlock(scope: !5479, file: !3, line: 1522, column: 7)
!5484 = !DILocation(line: 1522, column: 14, scope: !5483)
!5485 = !DILocation(line: 1522, column: 24, scope: !5483)
!5486 = !DILocation(line: 1522, column: 27, scope: !5483)
!5487 = !DILocation(line: 1522, column: 33, scope: !5483)
!5488 = !DILocation(line: 1522, column: 39, scope: !5483)
!5489 = !DILocation(line: 1522, column: 7, scope: !5479)
!5490 = !DILocation(line: 1524, column: 29, scope: !5491)
!5491 = distinct !DILexicalBlock(scope: !5483, file: !3, line: 1523, column: 5)
!5492 = !DILocation(line: 1524, column: 35, scope: !5491)
!5493 = !DILocation(line: 1524, column: 7, scope: !5491)
!5494 = !DILocation(line: 1525, column: 7, scope: !5491)
!5495 = !DILocation(line: 1525, column: 13, scope: !5491)
!5496 = !DILocation(line: 1525, column: 23, scope: !5491)
!5497 = !DILocation(line: 1526, column: 7, scope: !5491)
!5498 = !DILocation(line: 1528, column: 27, scope: !5491)
!5499 = !DILocation(line: 1528, column: 7, scope: !5491)
!5500 = !DILocation(line: 1528, column: 13, scope: !5491)
!5501 = !DILocation(line: 1528, column: 25, scope: !5491)
!5502 = !DILocation(line: 1529, column: 28, scope: !5491)
!5503 = !DILocation(line: 1529, column: 26, scope: !5491)
!5504 = !DILocation(line: 1530, column: 5, scope: !5491)
!5505 = !DILocation(line: 1531, column: 1, scope: !5479)
!5506 = distinct !DISubprogram(name: "cgraph_mark_needed_node", scope: !3, file: !3, line: 1537, type: !2541, scopeLine: 1538, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5507 = !DILocalVariable(name: "node", arg: 1, scope: !5506, file: !3, line: 1537, type: !1022)
!5508 = !DILocation(line: 1537, column: 46, scope: !5506)
!5509 = !DILocation(line: 1539, column: 3, scope: !5506)
!5510 = !DILocation(line: 1539, column: 9, scope: !5506)
!5511 = !DILocation(line: 1539, column: 16, scope: !5506)
!5512 = !DILocation(line: 1540, column: 3, scope: !5506)
!5513 = !DILocation(line: 1541, column: 31, scope: !5506)
!5514 = !DILocation(line: 1541, column: 3, scope: !5506)
!5515 = !DILocation(line: 1542, column: 1, scope: !5506)
!5516 = distinct !DISubprogram(name: "cgraph_mark_address_taken_node", scope: !3, file: !3, line: 1547, type: !2541, scopeLine: 1548, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5517 = !DILocalVariable(name: "node", arg: 1, scope: !5516, file: !3, line: 1547, type: !1022)
!5518 = !DILocation(line: 1547, column: 53, scope: !5516)
!5519 = !DILocation(line: 1549, column: 3, scope: !5516)
!5520 = !DILocation(line: 1549, column: 9, scope: !5516)
!5521 = !DILocation(line: 1549, column: 23, scope: !5516)
!5522 = !DILocation(line: 1550, column: 28, scope: !5516)
!5523 = !DILocation(line: 1550, column: 3, scope: !5516)
!5524 = !DILocation(line: 1551, column: 1, scope: !5516)
!5525 = distinct !DISubprogram(name: "cgraph_local_info", scope: !3, file: !3, line: 1556, type: !5526, scopeLine: 1557, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5526 = !DISubroutineType(types: !5527)
!5527 = !{!5528, !1026}
!5528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2573, size: 64)
!5529 = !DILocalVariable(name: "decl", arg: 1, scope: !5525, file: !3, line: 1556, type: !1026)
!5530 = !DILocation(line: 1556, column: 25, scope: !5525)
!5531 = !DILocalVariable(name: "node", scope: !5525, file: !3, line: 1558, type: !1022)
!5532 = !DILocation(line: 1558, column: 23, scope: !5525)
!5533 = !DILocation(line: 1560, column: 3, scope: !5525)
!5534 = !DILocation(line: 1561, column: 23, scope: !5525)
!5535 = !DILocation(line: 1561, column: 10, scope: !5525)
!5536 = !DILocation(line: 1561, column: 8, scope: !5525)
!5537 = !DILocation(line: 1562, column: 11, scope: !5525)
!5538 = !DILocation(line: 1562, column: 17, scope: !5525)
!5539 = !DILocation(line: 1562, column: 3, scope: !5525)
!5540 = distinct !DISubprogram(name: "cgraph_global_info", scope: !3, file: !3, line: 1568, type: !5541, scopeLine: 1569, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5541 = !DISubroutineType(types: !5542)
!5542 = !{!5543, !1026}
!5543 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2595, size: 64)
!5544 = !DILocalVariable(name: "decl", arg: 1, scope: !5540, file: !3, line: 1568, type: !1026)
!5545 = !DILocation(line: 1568, column: 26, scope: !5540)
!5546 = !DILocalVariable(name: "node", scope: !5540, file: !3, line: 1570, type: !1022)
!5547 = !DILocation(line: 1570, column: 23, scope: !5540)
!5548 = !DILocation(line: 1572, column: 3, scope: !5540)
!5549 = !DILocation(line: 1573, column: 23, scope: !5540)
!5550 = !DILocation(line: 1573, column: 10, scope: !5540)
!5551 = !DILocation(line: 1573, column: 8, scope: !5540)
!5552 = !DILocation(line: 1574, column: 11, scope: !5540)
!5553 = !DILocation(line: 1574, column: 17, scope: !5540)
!5554 = !DILocation(line: 1574, column: 3, scope: !5540)
!5555 = distinct !DISubprogram(name: "cgraph_rtl_info", scope: !3, file: !3, line: 1580, type: !5556, scopeLine: 1581, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5556 = !DISubroutineType(types: !5557)
!5557 = !{!5558, !1026}
!5558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2605, size: 64)
!5559 = !DILocalVariable(name: "decl", arg: 1, scope: !5555, file: !3, line: 1580, type: !1026)
!5560 = !DILocation(line: 1580, column: 23, scope: !5555)
!5561 = !DILocalVariable(name: "node", scope: !5555, file: !3, line: 1582, type: !1022)
!5562 = !DILocation(line: 1582, column: 23, scope: !5555)
!5563 = !DILocation(line: 1584, column: 3, scope: !5555)
!5564 = !DILocation(line: 1585, column: 23, scope: !5555)
!5565 = !DILocation(line: 1585, column: 10, scope: !5555)
!5566 = !DILocation(line: 1585, column: 8, scope: !5555)
!5567 = !DILocation(line: 1586, column: 7, scope: !5568)
!5568 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 1586, column: 7)
!5569 = !DILocation(line: 1586, column: 15, scope: !5568)
!5570 = !DILocation(line: 1586, column: 12, scope: !5568)
!5571 = !DILocation(line: 1587, column: 7, scope: !5568)
!5572 = !DILocation(line: 1587, column: 11, scope: !5568)
!5573 = !DILocation(line: 1586, column: 7, scope: !5555)
!5574 = !DILocation(line: 1588, column: 5, scope: !5568)
!5575 = !DILocation(line: 1589, column: 11, scope: !5555)
!5576 = !DILocation(line: 1589, column: 17, scope: !5555)
!5577 = !DILocation(line: 1589, column: 3, scope: !5555)
!5578 = !DILocation(line: 1590, column: 1, scope: !5555)
!5579 = !DILocalVariable(name: "reason", arg: 1, scope: !2731, file: !3, line: 1595, type: !2665)
!5580 = !DILocation(line: 1595, column: 53, scope: !2731)
!5581 = !DILocation(line: 1606, column: 3, scope: !2731)
!5582 = !DILocation(line: 1607, column: 27, scope: !2731)
!5583 = !DILocation(line: 1607, column: 10, scope: !2731)
!5584 = !DILocation(line: 1607, column: 3, scope: !2731)
!5585 = distinct !DISubprogram(name: "cgraph_node_name", scope: !3, file: !3, line: 1612, type: !5586, scopeLine: 1613, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5586 = !DISubroutineType(types: !5587)
!5587 = !{!1228, !1022}
!5588 = !DILocalVariable(name: "node", arg: 1, scope: !5585, file: !3, line: 1612, type: !1022)
!5589 = !DILocation(line: 1612, column: 39, scope: !5585)
!5590 = !DILocation(line: 1614, column: 21, scope: !5585)
!5591 = !DILocation(line: 1614, column: 42, scope: !5585)
!5592 = !DILocation(line: 1614, column: 48, scope: !5585)
!5593 = !DILocation(line: 1614, column: 10, scope: !5585)
!5594 = !DILocation(line: 1614, column: 3, scope: !5585)
!5595 = distinct !DISubprogram(name: "dump_cgraph_node", scope: !3, file: !3, line: 1625, type: !5596, scopeLine: 1626, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!5596 = !DISubroutineType(types: !5597)
!5597 = !{null, !5598, !1022}
!5598 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5599, size: 64)
!5599 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5600, line: 7, baseType: !5601)
!5600 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!5601 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5602, line: 49, size: 1728, elements: !5603)
!5602 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!5603 = !{!5604, !5605, !5606, !5607, !5608, !5609, !5610, !5611, !5612, !5613, !5614, !5615, !5616, !5619, !5621, !5622, !5623, !5626, !5627, !5628, !5629, !5632, !5634, !5637, !5640, !5641, !5642, !5643, !5644}
!5604 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5601, file: !5602, line: 51, baseType: !1122, size: 32)
!5605 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5601, file: !5602, line: 54, baseType: !1293, size: 64, offset: 64)
!5606 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5601, file: !5602, line: 55, baseType: !1293, size: 64, offset: 128)
!5607 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5601, file: !5602, line: 56, baseType: !1293, size: 64, offset: 192)
!5608 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5601, file: !5602, line: 57, baseType: !1293, size: 64, offset: 256)
!5609 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5601, file: !5602, line: 58, baseType: !1293, size: 64, offset: 320)
!5610 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5601, file: !5602, line: 59, baseType: !1293, size: 64, offset: 384)
!5611 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5601, file: !5602, line: 60, baseType: !1293, size: 64, offset: 448)
!5612 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5601, file: !5602, line: 61, baseType: !1293, size: 64, offset: 512)
!5613 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5601, file: !5602, line: 64, baseType: !1293, size: 64, offset: 576)
!5614 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5601, file: !5602, line: 65, baseType: !1293, size: 64, offset: 640)
!5615 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5601, file: !5602, line: 66, baseType: !1293, size: 64, offset: 704)
!5616 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5601, file: !5602, line: 68, baseType: !5617, size: 64, offset: 768)
!5617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5618, size: 64)
!5618 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !5602, line: 36, flags: DIFlagFwdDecl)
!5619 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5601, file: !5602, line: 70, baseType: !5620, size: 64, offset: 832)
!5620 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5601, size: 64)
!5621 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5601, file: !5602, line: 72, baseType: !1122, size: 32, offset: 896)
!5622 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5601, file: !5602, line: 73, baseType: !1122, size: 32, offset: 928)
!5623 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5601, file: !5602, line: 74, baseType: !5624, size: 64, offset: 960)
!5624 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !5625, line: 152, baseType: !1020)
!5625 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!5626 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5601, file: !5602, line: 77, baseType: !2670, size: 16, offset: 1024)
!5627 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5601, file: !5602, line: 78, baseType: !2281, size: 8, offset: 1040)
!5628 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5601, file: !5602, line: 79, baseType: !1124, size: 8, offset: 1048)
!5629 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5601, file: !5602, line: 81, baseType: !5630, size: 64, offset: 1088)
!5630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5631, size: 64)
!5631 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !5602, line: 43, baseType: null)
!5632 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5601, file: !5602, line: 89, baseType: !5633, size: 64, offset: 1152)
!5633 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !5625, line: 153, baseType: !1020)
!5634 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5601, file: !5602, line: 91, baseType: !5635, size: 64, offset: 1216)
!5635 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5636, size: 64)
!5636 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !5602, line: 37, flags: DIFlagFwdDecl)
!5637 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5601, file: !5602, line: 92, baseType: !5638, size: 64, offset: 1280)
!5638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5639, size: 64)
!5639 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !5602, line: 38, flags: DIFlagFwdDecl)
!5640 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5601, file: !5602, line: 93, baseType: !5620, size: 64, offset: 1344)
!5641 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5601, file: !5602, line: 94, baseType: !1308, size: 64, offset: 1408)
!5642 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5601, file: !5602, line: 95, baseType: !1501, size: 64, offset: 1472)
!5643 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5601, file: !5602, line: 96, baseType: !1122, size: 32, offset: 1536)
!5644 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5601, file: !5602, line: 98, baseType: !5645, size: 160, offset: 1568)
!5645 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1125, size: 160, elements: !5646)
!5646 = !{!5647}
!5647 = !DISubrange(count: 20)
!5648 = !DILocalVariable(name: "f", arg: 1, scope: !5595, file: !3, line: 1625, type: !5598)
!5649 = !DILocation(line: 1625, column: 25, scope: !5595)
!5650 = !DILocalVariable(name: "node", arg: 2, scope: !5595, file: !3, line: 1625, type: !1022)
!5651 = !DILocation(line: 1625, column: 48, scope: !5595)
!5652 = !DILocalVariable(name: "edge", scope: !5595, file: !3, line: 1627, type: !1015)
!5653 = !DILocation(line: 1627, column: 23, scope: !5595)
!5654 = !DILocation(line: 1628, column: 12, scope: !5595)
!5655 = !DILocation(line: 1628, column: 46, scope: !5595)
!5656 = !DILocation(line: 1628, column: 28, scope: !5595)
!5657 = !DILocation(line: 1628, column: 53, scope: !5595)
!5658 = !DILocation(line: 1628, column: 59, scope: !5595)
!5659 = !DILocation(line: 1629, column: 5, scope: !5595)
!5660 = !DILocation(line: 1629, column: 11, scope: !5595)
!5661 = !DILocation(line: 1628, column: 3, scope: !5595)
!5662 = !DILocation(line: 1630, column: 14, scope: !5595)
!5663 = !DILocation(line: 1630, column: 31, scope: !5595)
!5664 = !DILocation(line: 1630, column: 23, scope: !5595)
!5665 = !DILocation(line: 1630, column: 3, scope: !5595)
!5666 = !DILocation(line: 1631, column: 7, scope: !5667)
!5667 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1631, column: 7)
!5668 = !DILocation(line: 1631, column: 13, scope: !5667)
!5669 = !DILocation(line: 1631, column: 20, scope: !5667)
!5670 = !DILocation(line: 1631, column: 7, scope: !5595)
!5671 = !DILocation(line: 1632, column: 14, scope: !5667)
!5672 = !DILocation(line: 1633, column: 25, scope: !5667)
!5673 = !DILocation(line: 1633, column: 31, scope: !5667)
!5674 = !DILocation(line: 1633, column: 38, scope: !5667)
!5675 = !DILocation(line: 1633, column: 7, scope: !5667)
!5676 = !DILocation(line: 1634, column: 7, scope: !5667)
!5677 = !DILocation(line: 1634, column: 13, scope: !5667)
!5678 = !DILocation(line: 1634, column: 20, scope: !5667)
!5679 = !DILocation(line: 1634, column: 32, scope: !5667)
!5680 = !DILocation(line: 1632, column: 5, scope: !5667)
!5681 = !DILocation(line: 1635, column: 7, scope: !5682)
!5682 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1635, column: 7)
!5683 = !DILocation(line: 1635, column: 13, scope: !5682)
!5684 = !DILocation(line: 1635, column: 7, scope: !5595)
!5685 = !DILocation(line: 1636, column: 14, scope: !5682)
!5686 = !DILocation(line: 1637, column: 25, scope: !5682)
!5687 = !DILocation(line: 1637, column: 31, scope: !5682)
!5688 = !DILocation(line: 1637, column: 7, scope: !5682)
!5689 = !DILocation(line: 1638, column: 7, scope: !5682)
!5690 = !DILocation(line: 1638, column: 13, scope: !5682)
!5691 = !DILocation(line: 1638, column: 23, scope: !5682)
!5692 = !DILocation(line: 1636, column: 5, scope: !5682)
!5693 = !DILocation(line: 1639, column: 7, scope: !5694)
!5694 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1639, column: 7)
!5695 = !DILocation(line: 1639, column: 7, scope: !5595)
!5696 = !DILocation(line: 1640, column: 14, scope: !5694)
!5697 = !DILocation(line: 1641, column: 69, scope: !5694)
!5698 = !DILocation(line: 1641, column: 34, scope: !5694)
!5699 = !DILocation(line: 1641, column: 7, scope: !5694)
!5700 = !DILocation(line: 1640, column: 5, scope: !5694)
!5701 = !DILocation(line: 1642, column: 7, scope: !5702)
!5702 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1642, column: 7)
!5703 = !DILocation(line: 1642, column: 13, scope: !5702)
!5704 = !DILocation(line: 1642, column: 7, scope: !5595)
!5705 = !DILocation(line: 1643, column: 14, scope: !5702)
!5706 = !DILocation(line: 1644, column: 24, scope: !5702)
!5707 = !DILocation(line: 1644, column: 30, scope: !5702)
!5708 = !DILocation(line: 1643, column: 5, scope: !5702)
!5709 = !DILocation(line: 1645, column: 7, scope: !5710)
!5710 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1645, column: 7)
!5711 = !DILocation(line: 1645, column: 13, scope: !5710)
!5712 = !DILocation(line: 1645, column: 19, scope: !5710)
!5713 = !DILocation(line: 1645, column: 34, scope: !5710)
!5714 = !DILocation(line: 1645, column: 7, scope: !5595)
!5715 = !DILocation(line: 1646, column: 14, scope: !5710)
!5716 = !DILocation(line: 1646, column: 41, scope: !5710)
!5717 = !DILocation(line: 1646, column: 47, scope: !5710)
!5718 = !DILocation(line: 1646, column: 53, scope: !5710)
!5719 = !DILocation(line: 1646, column: 68, scope: !5710)
!5720 = !DILocation(line: 1647, column: 10, scope: !5710)
!5721 = !DILocation(line: 1647, column: 16, scope: !5710)
!5722 = !DILocation(line: 1647, column: 22, scope: !5710)
!5723 = !DILocation(line: 1647, column: 37, scope: !5710)
!5724 = !DILocation(line: 1646, column: 5, scope: !5710)
!5725 = !DILocation(line: 1648, column: 7, scope: !5726)
!5726 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1648, column: 7)
!5727 = !DILocation(line: 1648, column: 13, scope: !5726)
!5728 = !DILocation(line: 1648, column: 20, scope: !5726)
!5729 = !DILocation(line: 1648, column: 25, scope: !5726)
!5730 = !DILocation(line: 1648, column: 28, scope: !5726)
!5731 = !DILocation(line: 1648, column: 34, scope: !5726)
!5732 = !DILocation(line: 1648, column: 41, scope: !5726)
!5733 = !DILocation(line: 1649, column: 10, scope: !5726)
!5734 = !DILocation(line: 1649, column: 16, scope: !5726)
!5735 = !DILocation(line: 1649, column: 22, scope: !5726)
!5736 = !DILocation(line: 1649, column: 37, scope: !5726)
!5737 = !DILocation(line: 1649, column: 7, scope: !5726)
!5738 = !DILocation(line: 1648, column: 7, scope: !5595)
!5739 = !DILocation(line: 1650, column: 14, scope: !5726)
!5740 = !DILocation(line: 1650, column: 41, scope: !5726)
!5741 = !DILocation(line: 1650, column: 47, scope: !5726)
!5742 = !DILocation(line: 1650, column: 54, scope: !5726)
!5743 = !DILocation(line: 1650, column: 5, scope: !5726)
!5744 = !DILocation(line: 1651, column: 7, scope: !5745)
!5745 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1651, column: 7)
!5746 = !DILocation(line: 1651, column: 13, scope: !5745)
!5747 = !DILocation(line: 1651, column: 19, scope: !5745)
!5748 = !DILocation(line: 1651, column: 34, scope: !5745)
!5749 = !DILocation(line: 1651, column: 7, scope: !5595)
!5750 = !DILocation(line: 1652, column: 14, scope: !5745)
!5751 = !DILocation(line: 1652, column: 41, scope: !5745)
!5752 = !DILocation(line: 1652, column: 47, scope: !5745)
!5753 = !DILocation(line: 1652, column: 53, scope: !5745)
!5754 = !DILocation(line: 1652, column: 68, scope: !5745)
!5755 = !DILocation(line: 1653, column: 10, scope: !5745)
!5756 = !DILocation(line: 1653, column: 16, scope: !5745)
!5757 = !DILocation(line: 1653, column: 22, scope: !5745)
!5758 = !DILocation(line: 1653, column: 37, scope: !5745)
!5759 = !DILocation(line: 1652, column: 5, scope: !5745)
!5760 = !DILocation(line: 1654, column: 7, scope: !5761)
!5761 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1654, column: 7)
!5762 = !DILocation(line: 1654, column: 13, scope: !5761)
!5763 = !DILocation(line: 1654, column: 20, scope: !5761)
!5764 = !DILocation(line: 1654, column: 25, scope: !5761)
!5765 = !DILocation(line: 1654, column: 28, scope: !5761)
!5766 = !DILocation(line: 1654, column: 34, scope: !5761)
!5767 = !DILocation(line: 1654, column: 41, scope: !5761)
!5768 = !DILocation(line: 1655, column: 10, scope: !5761)
!5769 = !DILocation(line: 1655, column: 16, scope: !5761)
!5770 = !DILocation(line: 1655, column: 22, scope: !5761)
!5771 = !DILocation(line: 1655, column: 37, scope: !5761)
!5772 = !DILocation(line: 1655, column: 7, scope: !5761)
!5773 = !DILocation(line: 1654, column: 7, scope: !5595)
!5774 = !DILocation(line: 1656, column: 14, scope: !5761)
!5775 = !DILocation(line: 1656, column: 41, scope: !5761)
!5776 = !DILocation(line: 1656, column: 47, scope: !5761)
!5777 = !DILocation(line: 1656, column: 54, scope: !5761)
!5778 = !DILocation(line: 1656, column: 5, scope: !5761)
!5779 = !DILocation(line: 1657, column: 7, scope: !5780)
!5780 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1657, column: 7)
!5781 = !DILocation(line: 1657, column: 13, scope: !5780)
!5782 = !DILocation(line: 1657, column: 19, scope: !5780)
!5783 = !DILocation(line: 1657, column: 34, scope: !5780)
!5784 = !DILocation(line: 1657, column: 7, scope: !5595)
!5785 = !DILocation(line: 1658, column: 14, scope: !5780)
!5786 = !DILocation(line: 1658, column: 47, scope: !5780)
!5787 = !DILocation(line: 1658, column: 53, scope: !5780)
!5788 = !DILocation(line: 1658, column: 59, scope: !5780)
!5789 = !DILocation(line: 1658, column: 74, scope: !5780)
!5790 = !DILocation(line: 1658, column: 42, scope: !5780)
!5791 = !DILocation(line: 1658, column: 5, scope: !5780)
!5792 = !DILocation(line: 1659, column: 7, scope: !5793)
!5793 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1659, column: 7)
!5794 = !DILocation(line: 1659, column: 13, scope: !5793)
!5795 = !DILocation(line: 1659, column: 20, scope: !5793)
!5796 = !DILocation(line: 1659, column: 44, scope: !5793)
!5797 = !DILocation(line: 1659, column: 50, scope: !5793)
!5798 = !DILocation(line: 1659, column: 56, scope: !5793)
!5799 = !DILocation(line: 1659, column: 71, scope: !5793)
!5800 = !DILocation(line: 1659, column: 41, scope: !5793)
!5801 = !DILocation(line: 1659, column: 7, scope: !5595)
!5802 = !DILocation(line: 1660, column: 14, scope: !5793)
!5803 = !DILocation(line: 1660, column: 50, scope: !5793)
!5804 = !DILocation(line: 1660, column: 56, scope: !5793)
!5805 = !DILocation(line: 1660, column: 63, scope: !5793)
!5806 = !DILocation(line: 1660, column: 45, scope: !5793)
!5807 = !DILocation(line: 1660, column: 5, scope: !5793)
!5808 = !DILocation(line: 1661, column: 7, scope: !5809)
!5809 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1661, column: 7)
!5810 = !DILocation(line: 1661, column: 13, scope: !5809)
!5811 = !DILocation(line: 1661, column: 7, scope: !5595)
!5812 = !DILocation(line: 1662, column: 14, scope: !5809)
!5813 = !DILocation(line: 1662, column: 53, scope: !5809)
!5814 = !DILocation(line: 1662, column: 59, scope: !5809)
!5815 = !DILocation(line: 1662, column: 35, scope: !5809)
!5816 = !DILocation(line: 1662, column: 5, scope: !5809)
!5817 = !DILocation(line: 1663, column: 7, scope: !5818)
!5818 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1663, column: 7)
!5819 = !DILocation(line: 1663, column: 13, scope: !5818)
!5820 = !DILocation(line: 1663, column: 7, scope: !5595)
!5821 = !DILocation(line: 1664, column: 14, scope: !5818)
!5822 = !DILocation(line: 1664, column: 5, scope: !5818)
!5823 = !DILocation(line: 1665, column: 7, scope: !5824)
!5824 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1665, column: 7)
!5825 = !DILocation(line: 1665, column: 13, scope: !5824)
!5826 = !DILocation(line: 1665, column: 7, scope: !5595)
!5827 = !DILocation(line: 1666, column: 14, scope: !5824)
!5828 = !DILocation(line: 1666, column: 5, scope: !5824)
!5829 = !DILocation(line: 1667, column: 12, scope: !5830)
!5830 = distinct !DILexicalBlock(scope: !5824, file: !3, line: 1667, column: 12)
!5831 = !DILocation(line: 1667, column: 18, scope: !5830)
!5832 = !DILocation(line: 1667, column: 12, scope: !5824)
!5833 = !DILocation(line: 1668, column: 14, scope: !5830)
!5834 = !DILocation(line: 1668, column: 5, scope: !5830)
!5835 = !DILocation(line: 1669, column: 26, scope: !5836)
!5836 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1669, column: 7)
!5837 = !DILocation(line: 1669, column: 32, scope: !5836)
!5838 = !DILocation(line: 1669, column: 7, scope: !5836)
!5839 = !DILocation(line: 1669, column: 7, scope: !5595)
!5840 = !DILocation(line: 1670, column: 14, scope: !5836)
!5841 = !DILocation(line: 1670, column: 5, scope: !5836)
!5842 = !DILocation(line: 1671, column: 7, scope: !5843)
!5843 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1671, column: 7)
!5844 = !DILocation(line: 1671, column: 13, scope: !5843)
!5845 = !DILocation(line: 1671, column: 7, scope: !5595)
!5846 = !DILocation(line: 1672, column: 14, scope: !5843)
!5847 = !DILocation(line: 1672, column: 5, scope: !5843)
!5848 = !DILocation(line: 1673, column: 7, scope: !5849)
!5849 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1673, column: 7)
!5850 = !DILocation(line: 1673, column: 13, scope: !5849)
!5851 = !DILocation(line: 1673, column: 19, scope: !5849)
!5852 = !DILocation(line: 1673, column: 7, scope: !5595)
!5853 = !DILocation(line: 1674, column: 14, scope: !5849)
!5854 = !DILocation(line: 1674, column: 5, scope: !5849)
!5855 = !DILocation(line: 1675, column: 7, scope: !5856)
!5856 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1675, column: 7)
!5857 = !DILocation(line: 1675, column: 13, scope: !5856)
!5858 = !DILocation(line: 1675, column: 19, scope: !5856)
!5859 = !DILocation(line: 1675, column: 7, scope: !5595)
!5860 = !DILocation(line: 1676, column: 14, scope: !5856)
!5861 = !DILocation(line: 1676, column: 5, scope: !5856)
!5862 = !DILocation(line: 1677, column: 7, scope: !5863)
!5863 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1677, column: 7)
!5864 = !DILocation(line: 1677, column: 13, scope: !5863)
!5865 = !DILocation(line: 1677, column: 19, scope: !5863)
!5866 = !DILocation(line: 1677, column: 7, scope: !5595)
!5867 = !DILocation(line: 1678, column: 14, scope: !5863)
!5868 = !DILocation(line: 1678, column: 5, scope: !5863)
!5869 = !DILocation(line: 1679, column: 7, scope: !5870)
!5870 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1679, column: 7)
!5871 = !DILocation(line: 1679, column: 13, scope: !5870)
!5872 = !DILocation(line: 1679, column: 19, scope: !5870)
!5873 = !DILocation(line: 1679, column: 7, scope: !5595)
!5874 = !DILocation(line: 1680, column: 14, scope: !5870)
!5875 = !DILocation(line: 1680, column: 5, scope: !5870)
!5876 = !DILocation(line: 1681, column: 12, scope: !5877)
!5877 = distinct !DILexicalBlock(scope: !5870, file: !3, line: 1681, column: 12)
!5878 = !DILocation(line: 1681, column: 18, scope: !5877)
!5879 = !DILocation(line: 1681, column: 24, scope: !5877)
!5880 = !DILocation(line: 1681, column: 12, scope: !5870)
!5881 = !DILocation(line: 1682, column: 14, scope: !5877)
!5882 = !DILocation(line: 1682, column: 5, scope: !5877)
!5883 = !DILocation(line: 1683, column: 7, scope: !5884)
!5884 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1683, column: 7)
!5885 = !DILocation(line: 1683, column: 13, scope: !5884)
!5886 = !DILocation(line: 1683, column: 19, scope: !5884)
!5887 = !DILocation(line: 1683, column: 7, scope: !5595)
!5888 = !DILocation(line: 1684, column: 14, scope: !5884)
!5889 = !DILocation(line: 1684, column: 5, scope: !5884)
!5890 = !DILocation(line: 1685, column: 7, scope: !5891)
!5891 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1685, column: 7)
!5892 = !DILocation(line: 1685, column: 7, scope: !5595)
!5893 = !DILocation(line: 1686, column: 14, scope: !5891)
!5894 = !DILocation(line: 1686, column: 5, scope: !5891)
!5895 = !DILocation(line: 1688, column: 12, scope: !5595)
!5896 = !DILocation(line: 1688, column: 3, scope: !5595)
!5897 = !DILocation(line: 1689, column: 15, scope: !5898)
!5898 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1689, column: 3)
!5899 = !DILocation(line: 1689, column: 21, scope: !5898)
!5900 = !DILocation(line: 1689, column: 13, scope: !5898)
!5901 = !DILocation(line: 1689, column: 8, scope: !5898)
!5902 = !DILocation(line: 1689, column: 30, scope: !5903)
!5903 = distinct !DILexicalBlock(scope: !5898, file: !3, line: 1689, column: 3)
!5904 = !DILocation(line: 1689, column: 3, scope: !5898)
!5905 = !DILocation(line: 1691, column: 16, scope: !5906)
!5906 = distinct !DILexicalBlock(scope: !5903, file: !3, line: 1690, column: 5)
!5907 = !DILocation(line: 1691, column: 47, scope: !5906)
!5908 = !DILocation(line: 1691, column: 53, scope: !5906)
!5909 = !DILocation(line: 1691, column: 29, scope: !5906)
!5910 = !DILocation(line: 1692, column: 9, scope: !5906)
!5911 = !DILocation(line: 1692, column: 15, scope: !5906)
!5912 = !DILocation(line: 1692, column: 23, scope: !5906)
!5913 = !DILocation(line: 1691, column: 7, scope: !5906)
!5914 = !DILocation(line: 1693, column: 11, scope: !5915)
!5915 = distinct !DILexicalBlock(scope: !5906, file: !3, line: 1693, column: 11)
!5916 = !DILocation(line: 1693, column: 17, scope: !5915)
!5917 = !DILocation(line: 1693, column: 11, scope: !5906)
!5918 = !DILocation(line: 1694, column: 11, scope: !5915)
!5919 = !DILocation(line: 1695, column: 21, scope: !5915)
!5920 = !DILocation(line: 1695, column: 27, scope: !5915)
!5921 = !DILocation(line: 1694, column: 2, scope: !5915)
!5922 = !DILocation(line: 1696, column: 11, scope: !5923)
!5923 = distinct !DILexicalBlock(scope: !5906, file: !3, line: 1696, column: 11)
!5924 = !DILocation(line: 1696, column: 17, scope: !5923)
!5925 = !DILocation(line: 1696, column: 11, scope: !5906)
!5926 = !DILocation(line: 1697, column: 11, scope: !5923)
!5927 = !DILocation(line: 1698, column: 4, scope: !5923)
!5928 = !DILocation(line: 1698, column: 10, scope: !5923)
!5929 = !DILocation(line: 1698, column: 20, scope: !5923)
!5930 = !DILocation(line: 1697, column: 2, scope: !5923)
!5931 = !DILocation(line: 1699, column: 12, scope: !5932)
!5932 = distinct !DILexicalBlock(scope: !5906, file: !3, line: 1699, column: 11)
!5933 = !DILocation(line: 1699, column: 18, scope: !5932)
!5934 = !DILocation(line: 1699, column: 11, scope: !5906)
!5935 = !DILocation(line: 1700, column: 10, scope: !5932)
!5936 = !DILocation(line: 1700, column: 2, scope: !5932)
!5937 = !DILocation(line: 1701, column: 11, scope: !5938)
!5938 = distinct !DILexicalBlock(scope: !5906, file: !3, line: 1701, column: 11)
!5939 = !DILocation(line: 1701, column: 17, scope: !5938)
!5940 = !DILocation(line: 1701, column: 11, scope: !5906)
!5941 = !DILocation(line: 1702, column: 10, scope: !5938)
!5942 = !DILocation(line: 1702, column: 2, scope: !5938)
!5943 = !DILocation(line: 1703, column: 11, scope: !5944)
!5944 = distinct !DILexicalBlock(scope: !5906, file: !3, line: 1703, column: 11)
!5945 = !DILocation(line: 1703, column: 17, scope: !5944)
!5946 = !DILocation(line: 1703, column: 11, scope: !5906)
!5947 = !DILocation(line: 1704, column: 10, scope: !5944)
!5948 = !DILocation(line: 1704, column: 2, scope: !5944)
!5949 = !DILocation(line: 1705, column: 5, scope: !5906)
!5950 = !DILocation(line: 1689, column: 43, scope: !5903)
!5951 = !DILocation(line: 1689, column: 49, scope: !5903)
!5952 = !DILocation(line: 1689, column: 41, scope: !5903)
!5953 = !DILocation(line: 1689, column: 3, scope: !5903)
!5954 = distinct !{!5954, !5904, !5955}
!5955 = !DILocation(line: 1705, column: 5, scope: !5898)
!5956 = !DILocation(line: 1707, column: 12, scope: !5595)
!5957 = !DILocation(line: 1707, column: 3, scope: !5595)
!5958 = !DILocation(line: 1708, column: 15, scope: !5959)
!5959 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1708, column: 3)
!5960 = !DILocation(line: 1708, column: 21, scope: !5959)
!5961 = !DILocation(line: 1708, column: 13, scope: !5959)
!5962 = !DILocation(line: 1708, column: 8, scope: !5959)
!5963 = !DILocation(line: 1708, column: 30, scope: !5964)
!5964 = distinct !DILexicalBlock(scope: !5959, file: !3, line: 1708, column: 3)
!5965 = !DILocation(line: 1708, column: 3, scope: !5959)
!5966 = !DILocation(line: 1710, column: 16, scope: !5967)
!5967 = distinct !DILexicalBlock(scope: !5964, file: !3, line: 1709, column: 5)
!5968 = !DILocation(line: 1710, column: 47, scope: !5967)
!5969 = !DILocation(line: 1710, column: 53, scope: !5967)
!5970 = !DILocation(line: 1710, column: 29, scope: !5967)
!5971 = !DILocation(line: 1711, column: 9, scope: !5967)
!5972 = !DILocation(line: 1711, column: 15, scope: !5967)
!5973 = !DILocation(line: 1711, column: 23, scope: !5967)
!5974 = !DILocation(line: 1710, column: 7, scope: !5967)
!5975 = !DILocation(line: 1712, column: 12, scope: !5976)
!5976 = distinct !DILexicalBlock(scope: !5967, file: !3, line: 1712, column: 11)
!5977 = !DILocation(line: 1712, column: 18, scope: !5976)
!5978 = !DILocation(line: 1712, column: 11, scope: !5967)
!5979 = !DILocation(line: 1713, column: 10, scope: !5976)
!5980 = !DILocation(line: 1713, column: 2, scope: !5976)
!5981 = !DILocation(line: 1714, column: 11, scope: !5982)
!5982 = distinct !DILexicalBlock(scope: !5967, file: !3, line: 1714, column: 11)
!5983 = !DILocation(line: 1714, column: 17, scope: !5982)
!5984 = !DILocation(line: 1714, column: 11, scope: !5967)
!5985 = !DILocation(line: 1715, column: 10, scope: !5982)
!5986 = !DILocation(line: 1715, column: 2, scope: !5982)
!5987 = !DILocation(line: 1716, column: 11, scope: !5988)
!5988 = distinct !DILexicalBlock(scope: !5967, file: !3, line: 1716, column: 11)
!5989 = !DILocation(line: 1716, column: 17, scope: !5988)
!5990 = !DILocation(line: 1716, column: 11, scope: !5967)
!5991 = !DILocation(line: 1717, column: 11, scope: !5988)
!5992 = !DILocation(line: 1718, column: 21, scope: !5988)
!5993 = !DILocation(line: 1718, column: 27, scope: !5988)
!5994 = !DILocation(line: 1717, column: 2, scope: !5988)
!5995 = !DILocation(line: 1719, column: 11, scope: !5996)
!5996 = distinct !DILexicalBlock(scope: !5967, file: !3, line: 1719, column: 11)
!5997 = !DILocation(line: 1719, column: 17, scope: !5996)
!5998 = !DILocation(line: 1719, column: 11, scope: !5967)
!5999 = !DILocation(line: 1720, column: 11, scope: !5996)
!6000 = !DILocation(line: 1721, column: 4, scope: !5996)
!6001 = !DILocation(line: 1721, column: 10, scope: !5996)
!6002 = !DILocation(line: 1721, column: 20, scope: !5996)
!6003 = !DILocation(line: 1720, column: 2, scope: !5996)
!6004 = !DILocation(line: 1722, column: 11, scope: !6005)
!6005 = distinct !DILexicalBlock(scope: !5967, file: !3, line: 1722, column: 11)
!6006 = !DILocation(line: 1722, column: 17, scope: !6005)
!6007 = !DILocation(line: 1722, column: 11, scope: !5967)
!6008 = !DILocation(line: 1723, column: 11, scope: !6005)
!6009 = !DILocation(line: 1723, column: 39, scope: !6005)
!6010 = !DILocation(line: 1723, column: 45, scope: !6005)
!6011 = !DILocation(line: 1723, column: 2, scope: !6005)
!6012 = !DILocation(line: 1724, column: 11, scope: !6013)
!6013 = distinct !DILexicalBlock(scope: !5967, file: !3, line: 1724, column: 11)
!6014 = !DILocation(line: 1724, column: 17, scope: !6013)
!6015 = !DILocation(line: 1724, column: 11, scope: !5967)
!6016 = !DILocation(line: 1725, column: 10, scope: !6013)
!6017 = !DILocation(line: 1725, column: 2, scope: !6013)
!6018 = !DILocation(line: 1726, column: 5, scope: !5967)
!6019 = !DILocation(line: 1708, column: 43, scope: !5964)
!6020 = !DILocation(line: 1708, column: 49, scope: !5964)
!6021 = !DILocation(line: 1708, column: 41, scope: !5964)
!6022 = !DILocation(line: 1708, column: 3, scope: !5964)
!6023 = distinct !{!6023, !5965, !6024}
!6024 = !DILocation(line: 1726, column: 5, scope: !5959)
!6025 = !DILocation(line: 1727, column: 12, scope: !5595)
!6026 = !DILocation(line: 1727, column: 3, scope: !5595)
!6027 = !DILocation(line: 1729, column: 7, scope: !6028)
!6028 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 1729, column: 7)
!6029 = !DILocation(line: 1729, column: 13, scope: !6028)
!6030 = !DILocation(line: 1729, column: 7, scope: !5595)
!6031 = !DILocalVariable(name: "n", scope: !6032, file: !3, line: 1731, type: !1022)
!6032 = distinct !DILexicalBlock(scope: !6028, file: !3, line: 1730, column: 5)
!6033 = !DILocation(line: 1731, column: 27, scope: !6032)
!6034 = !DILocation(line: 1732, column: 16, scope: !6032)
!6035 = !DILocation(line: 1732, column: 7, scope: !6032)
!6036 = !DILocation(line: 1733, column: 16, scope: !6037)
!6037 = distinct !DILexicalBlock(scope: !6032, file: !3, line: 1733, column: 7)
!6038 = !DILocation(line: 1733, column: 22, scope: !6037)
!6039 = !DILocation(line: 1733, column: 14, scope: !6037)
!6040 = !DILocation(line: 1733, column: 12, scope: !6037)
!6041 = !DILocation(line: 1733, column: 33, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !6037, file: !3, line: 1733, column: 7)
!6043 = !DILocation(line: 1733, column: 7, scope: !6037)
!6044 = !DILocation(line: 1735, column: 20, scope: !6045)
!6045 = distinct !DILexicalBlock(scope: !6042, file: !3, line: 1734, column: 9)
!6046 = !DILocation(line: 1735, column: 51, scope: !6045)
!6047 = !DILocation(line: 1735, column: 33, scope: !6045)
!6048 = !DILocation(line: 1735, column: 55, scope: !6045)
!6049 = !DILocation(line: 1735, column: 58, scope: !6045)
!6050 = !DILocation(line: 1735, column: 11, scope: !6045)
!6051 = !DILocation(line: 1736, column: 8, scope: !6052)
!6052 = distinct !DILexicalBlock(scope: !6045, file: !3, line: 1736, column: 8)
!6053 = !DILocation(line: 1736, column: 11, scope: !6052)
!6054 = !DILocation(line: 1736, column: 17, scope: !6052)
!6055 = !DILocation(line: 1736, column: 8, scope: !6045)
!6056 = !DILocation(line: 1738, column: 17, scope: !6057)
!6057 = distinct !DILexicalBlock(scope: !6052, file: !3, line: 1737, column: 6)
!6058 = !DILocation(line: 1740, column: 27, scope: !6057)
!6059 = !DILocation(line: 1740, column: 48, scope: !6057)
!6060 = !DILocation(line: 1740, column: 51, scope: !6057)
!6061 = !DILocation(line: 1740, column: 57, scope: !6057)
!6062 = !DILocation(line: 1740, column: 16, scope: !6057)
!6063 = !DILocation(line: 1741, column: 15, scope: !6057)
!6064 = !DILocation(line: 1741, column: 18, scope: !6057)
!6065 = !DILocation(line: 1741, column: 24, scope: !6057)
!6066 = !DILocation(line: 1741, column: 10, scope: !6057)
!6067 = !DILocation(line: 1742, column: 15, scope: !6057)
!6068 = !DILocation(line: 1742, column: 18, scope: !6057)
!6069 = !DILocation(line: 1742, column: 24, scope: !6057)
!6070 = !DILocation(line: 1742, column: 10, scope: !6057)
!6071 = !DILocation(line: 1743, column: 15, scope: !6057)
!6072 = !DILocation(line: 1743, column: 18, scope: !6057)
!6073 = !DILocation(line: 1743, column: 24, scope: !6057)
!6074 = !DILocation(line: 1743, column: 10, scope: !6057)
!6075 = !DILocation(line: 1738, column: 8, scope: !6057)
!6076 = !DILocation(line: 1744, column: 17, scope: !6057)
!6077 = !DILocation(line: 1744, column: 8, scope: !6057)
!6078 = !DILocation(line: 1745, column: 6, scope: !6057)
!6079 = !DILocation(line: 1746, column: 2, scope: !6045)
!6080 = !DILocation(line: 1733, column: 40, scope: !6042)
!6081 = !DILocation(line: 1733, column: 43, scope: !6042)
!6082 = !DILocation(line: 1733, column: 38, scope: !6042)
!6083 = !DILocation(line: 1733, column: 7, scope: !6042)
!6084 = distinct !{!6084, !6043, !6085}
!6085 = !DILocation(line: 1746, column: 2, scope: !6037)
!6086 = !DILocation(line: 1747, column: 16, scope: !6032)
!6087 = !DILocation(line: 1747, column: 7, scope: !6032)
!6088 = !DILocation(line: 1748, column: 5, scope: !6032)
!6089 = !DILocation(line: 1749, column: 1, scope: !5595)
!6090 = distinct !DISubprogram(name: "cgraph_function_body_availability", scope: !3, file: !3, line: 2068, type: !6091, scopeLine: 2069, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6091 = !DISubroutineType(types: !6092)
!6092 = !{!773, !1022}
!6093 = !DILocalVariable(name: "node", arg: 1, scope: !6090, file: !3, line: 2068, type: !1022)
!6094 = !DILocation(line: 2068, column: 56, scope: !6090)
!6095 = !DILocalVariable(name: "avail", scope: !6090, file: !3, line: 2070, type: !773)
!6096 = !DILocation(line: 2070, column: 21, scope: !6090)
!6097 = !DILocation(line: 2071, column: 3, scope: !6090)
!6098 = !DILocation(line: 2072, column: 8, scope: !6099)
!6099 = distinct !DILexicalBlock(scope: !6090, file: !3, line: 2072, column: 7)
!6100 = !DILocation(line: 2072, column: 14, scope: !6099)
!6101 = !DILocation(line: 2072, column: 7, scope: !6090)
!6102 = !DILocation(line: 2073, column: 11, scope: !6099)
!6103 = !DILocation(line: 2073, column: 5, scope: !6099)
!6104 = !DILocation(line: 2074, column: 12, scope: !6105)
!6105 = distinct !DILexicalBlock(scope: !6099, file: !3, line: 2074, column: 12)
!6106 = !DILocation(line: 2074, column: 18, scope: !6105)
!6107 = !DILocation(line: 2074, column: 24, scope: !6105)
!6108 = !DILocation(line: 2074, column: 12, scope: !6099)
!6109 = !DILocation(line: 2075, column: 11, scope: !6105)
!6110 = !DILocation(line: 2075, column: 5, scope: !6105)
!6111 = !DILocation(line: 2076, column: 13, scope: !6112)
!6112 = distinct !DILexicalBlock(scope: !6105, file: !3, line: 2076, column: 12)
!6113 = !DILocation(line: 2076, column: 19, scope: !6112)
!6114 = !DILocation(line: 2076, column: 25, scope: !6112)
!6115 = !DILocation(line: 2076, column: 12, scope: !6105)
!6116 = !DILocation(line: 2077, column: 11, scope: !6112)
!6117 = !DILocation(line: 2077, column: 5, scope: !6112)
!6118 = !DILocation(line: 2081, column: 12, scope: !6119)
!6119 = distinct !DILexicalBlock(scope: !6112, file: !3, line: 2081, column: 12)
!6120 = !DILocation(line: 2081, column: 12, scope: !6112)
!6121 = !DILocation(line: 2082, column: 11, scope: !6119)
!6122 = !DILocation(line: 2082, column: 5, scope: !6119)
!6123 = !DILocation(line: 2094, column: 12, scope: !6124)
!6124 = distinct !DILexicalBlock(scope: !6119, file: !3, line: 2094, column: 12)
!6125 = !DILocation(line: 2094, column: 44, scope: !6124)
!6126 = !DILocation(line: 2094, column: 48, scope: !6124)
!6127 = !DILocation(line: 2094, column: 12, scope: !6119)
!6128 = !DILocation(line: 2095, column: 11, scope: !6124)
!6129 = !DILocation(line: 2095, column: 5, scope: !6124)
!6130 = !DILocation(line: 2096, column: 14, scope: !6124)
!6131 = !DILocation(line: 2098, column: 10, scope: !6090)
!6132 = !DILocation(line: 2098, column: 3, scope: !6090)
!6133 = distinct !DISubprogram(name: "debug_cgraph_node", scope: !3, file: !3, line: 1755, type: !2541, scopeLine: 1756, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6134 = !DILocalVariable(name: "node", arg: 1, scope: !6133, file: !3, line: 1755, type: !1022)
!6135 = !DILocation(line: 1755, column: 40, scope: !6133)
!6136 = !DILocation(line: 1757, column: 21, scope: !6133)
!6137 = !DILocation(line: 1757, column: 29, scope: !6133)
!6138 = !DILocation(line: 1757, column: 3, scope: !6133)
!6139 = !DILocation(line: 1758, column: 1, scope: !6133)
!6140 = distinct !DISubprogram(name: "dump_cgraph", scope: !3, file: !3, line: 1764, type: !6141, scopeLine: 1765, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6141 = !DISubroutineType(types: !6142)
!6142 = !{null, !5598}
!6143 = !DILocalVariable(name: "f", arg: 1, scope: !6140, file: !3, line: 1764, type: !5598)
!6144 = !DILocation(line: 1764, column: 20, scope: !6140)
!6145 = !DILocalVariable(name: "node", scope: !6140, file: !3, line: 1766, type: !1022)
!6146 = !DILocation(line: 1766, column: 23, scope: !6140)
!6147 = !DILocation(line: 1768, column: 12, scope: !6140)
!6148 = !DILocation(line: 1768, column: 3, scope: !6140)
!6149 = !DILocation(line: 1769, column: 15, scope: !6150)
!6150 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 1769, column: 3)
!6151 = !DILocation(line: 1769, column: 13, scope: !6150)
!6152 = !DILocation(line: 1769, column: 8, scope: !6150)
!6153 = !DILocation(line: 1769, column: 29, scope: !6154)
!6154 = distinct !DILexicalBlock(scope: !6150, file: !3, line: 1769, column: 3)
!6155 = !DILocation(line: 1769, column: 3, scope: !6150)
!6156 = !DILocation(line: 1770, column: 23, scope: !6154)
!6157 = !DILocation(line: 1770, column: 26, scope: !6154)
!6158 = !DILocation(line: 1770, column: 5, scope: !6154)
!6159 = !DILocation(line: 1769, column: 42, scope: !6154)
!6160 = !DILocation(line: 1769, column: 48, scope: !6154)
!6161 = !DILocation(line: 1769, column: 40, scope: !6154)
!6162 = !DILocation(line: 1769, column: 3, scope: !6154)
!6163 = distinct !{!6163, !6155, !6164}
!6164 = !DILocation(line: 1770, column: 30, scope: !6150)
!6165 = !DILocation(line: 1771, column: 1, scope: !6140)
!6166 = distinct !DISubprogram(name: "debug_cgraph", scope: !3, file: !3, line: 1777, type: !2513, scopeLine: 1778, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6167 = !DILocation(line: 1779, column: 16, scope: !6166)
!6168 = !DILocation(line: 1779, column: 3, scope: !6166)
!6169 = !DILocation(line: 1780, column: 1, scope: !6166)
!6170 = distinct !DISubprogram(name: "change_decl_assembler_name", scope: !3, file: !3, line: 1786, type: !6171, scopeLine: 1787, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6171 = !DISubroutineType(types: !6172)
!6172 = !{null, !1026, !1026}
!6173 = !DILocalVariable(name: "decl", arg: 1, scope: !6170, file: !3, line: 1786, type: !1026)
!6174 = !DILocation(line: 1786, column: 34, scope: !6170)
!6175 = !DILocalVariable(name: "name", arg: 2, scope: !6170, file: !3, line: 1786, type: !1026)
!6176 = !DILocation(line: 1786, column: 45, scope: !6170)
!6177 = !DILocation(line: 1788, column: 3, scope: !6170)
!6178 = !DILocation(line: 1789, column: 8, scope: !6179)
!6179 = distinct !DILexicalBlock(scope: !6170, file: !3, line: 1789, column: 7)
!6180 = !DILocation(line: 1789, column: 7, scope: !6170)
!6181 = !DILocation(line: 1791, column: 7, scope: !6182)
!6182 = distinct !DILexicalBlock(scope: !6179, file: !3, line: 1790, column: 5)
!6183 = !DILocation(line: 1792, column: 7, scope: !6182)
!6184 = !DILocation(line: 1794, column: 7, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !6170, file: !3, line: 1794, column: 7)
!6186 = !DILocation(line: 1794, column: 15, scope: !6185)
!6187 = !DILocation(line: 1794, column: 12, scope: !6185)
!6188 = !DILocation(line: 1794, column: 7, scope: !6170)
!6189 = !DILocation(line: 1795, column: 5, scope: !6185)
!6190 = !DILocation(line: 1797, column: 7, scope: !6191)
!6191 = distinct !DILexicalBlock(scope: !6170, file: !3, line: 1797, column: 7)
!6192 = !DILocation(line: 1798, column: 7, scope: !6191)
!6193 = !DILocation(line: 1798, column: 10, scope: !6191)
!6194 = !DILocation(line: 1797, column: 7, scope: !6170)
!6195 = !DILocation(line: 1799, column: 66, scope: !6191)
!6196 = !DILocation(line: 1799, column: 5, scope: !6191)
!6197 = !DILocation(line: 1801, column: 3, scope: !6170)
!6198 = !DILocation(line: 1802, column: 1, scope: !6170)
!6199 = distinct !DISubprogram(name: "cgraph_add_asm_node", scope: !3, file: !3, line: 1807, type: !6200, scopeLine: 1808, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6200 = !DISubroutineType(types: !6201)
!6201 = !{!2708, !1026}
!6202 = !DILocalVariable(name: "asm_str", arg: 1, scope: !6199, file: !3, line: 1807, type: !1026)
!6203 = !DILocation(line: 1807, column: 27, scope: !6199)
!6204 = !DILocalVariable(name: "node", scope: !6199, file: !3, line: 1809, type: !2708)
!6205 = !DILocation(line: 1809, column: 27, scope: !6199)
!6206 = !DILocation(line: 1811, column: 10, scope: !6199)
!6207 = !DILocation(line: 1811, column: 8, scope: !6199)
!6208 = !DILocation(line: 1812, column: 19, scope: !6199)
!6209 = !DILocation(line: 1812, column: 3, scope: !6199)
!6210 = !DILocation(line: 1812, column: 9, scope: !6199)
!6211 = !DILocation(line: 1812, column: 17, scope: !6199)
!6212 = !DILocation(line: 1813, column: 29, scope: !6199)
!6213 = !DILocation(line: 1813, column: 3, scope: !6199)
!6214 = !DILocation(line: 1813, column: 9, scope: !6199)
!6215 = !DILocation(line: 1813, column: 15, scope: !6199)
!6216 = !DILocation(line: 1814, column: 3, scope: !6199)
!6217 = !DILocation(line: 1814, column: 9, scope: !6199)
!6218 = !DILocation(line: 1814, column: 14, scope: !6199)
!6219 = !DILocation(line: 1815, column: 7, scope: !6220)
!6220 = distinct !DILexicalBlock(scope: !6199, file: !3, line: 1815, column: 7)
!6221 = !DILocation(line: 1815, column: 24, scope: !6220)
!6222 = !DILocation(line: 1815, column: 7, scope: !6199)
!6223 = !DILocation(line: 1816, column: 24, scope: !6220)
!6224 = !DILocation(line: 1816, column: 22, scope: !6220)
!6225 = !DILocation(line: 1816, column: 5, scope: !6220)
!6226 = !DILocation(line: 1818, column: 34, scope: !6220)
!6227 = !DILocation(line: 1818, column: 5, scope: !6220)
!6228 = !DILocation(line: 1818, column: 27, scope: !6220)
!6229 = !DILocation(line: 1818, column: 32, scope: !6220)
!6230 = !DILocation(line: 1819, column: 26, scope: !6199)
!6231 = !DILocation(line: 1819, column: 24, scope: !6199)
!6232 = !DILocation(line: 1820, column: 10, scope: !6199)
!6233 = !DILocation(line: 1820, column: 3, scope: !6199)
!6234 = distinct !DISubprogram(name: "cgraph_function_possibly_inlined_p", scope: !3, file: !3, line: 1825, type: !6235, scopeLine: 1826, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6235 = !DISubroutineType(types: !6236)
!6236 = !{!1145, !1026}
!6237 = !DILocalVariable(name: "decl", arg: 1, scope: !6234, file: !3, line: 1825, type: !1026)
!6238 = !DILocation(line: 1825, column: 42, scope: !6234)
!6239 = !DILocation(line: 1827, column: 8, scope: !6240)
!6240 = distinct !DILexicalBlock(scope: !6234, file: !3, line: 1827, column: 7)
!6241 = !DILocation(line: 1827, column: 7, scope: !6234)
!6242 = !DILocation(line: 1828, column: 13, scope: !6240)
!6243 = !DILocation(line: 1828, column: 12, scope: !6240)
!6244 = !DILocation(line: 1828, column: 5, scope: !6240)
!6245 = !DILocation(line: 1829, column: 10, scope: !6234)
!6246 = !DILocation(line: 1829, column: 3, scope: !6234)
!6247 = !DILocation(line: 1830, column: 1, scope: !6234)
!6248 = distinct !DISubprogram(name: "cgraph_clone_edge", scope: !3, file: !3, line: 1834, type: !6249, scopeLine: 1837, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6249 = !DISubroutineType(types: !6250)
!6250 = !{!1015, !1015, !1022, !1355, !7, !1019, !1122, !1122, !1145}
!6251 = !DILocalVariable(name: "e", arg: 1, scope: !6248, file: !3, line: 1834, type: !1015)
!6252 = !DILocation(line: 1834, column: 40, scope: !6248)
!6253 = !DILocalVariable(name: "n", arg: 2, scope: !6248, file: !3, line: 1834, type: !1022)
!6254 = !DILocation(line: 1834, column: 63, scope: !6248)
!6255 = !DILocalVariable(name: "call_stmt", arg: 3, scope: !6248, file: !3, line: 1835, type: !1355)
!6256 = !DILocation(line: 1835, column: 13, scope: !6248)
!6257 = !DILocalVariable(name: "stmt_uid", arg: 4, scope: !6248, file: !3, line: 1835, type: !7)
!6258 = !DILocation(line: 1835, column: 33, scope: !6248)
!6259 = !DILocalVariable(name: "count_scale", arg: 5, scope: !6248, file: !3, line: 1835, type: !1019)
!6260 = !DILocation(line: 1835, column: 53, scope: !6248)
!6261 = !DILocalVariable(name: "freq_scale", arg: 6, scope: !6248, file: !3, line: 1836, type: !1122)
!6262 = !DILocation(line: 1836, column: 10, scope: !6248)
!6263 = !DILocalVariable(name: "loop_nest", arg: 7, scope: !6248, file: !3, line: 1836, type: !1122)
!6264 = !DILocation(line: 1836, column: 26, scope: !6248)
!6265 = !DILocalVariable(name: "update_original", arg: 8, scope: !6248, file: !3, line: 1836, type: !1145)
!6266 = !DILocation(line: 1836, column: 42, scope: !6248)
!6267 = !DILocalVariable(name: "new_edge", scope: !6248, file: !3, line: 1838, type: !1015)
!6268 = !DILocation(line: 1838, column: 23, scope: !6248)
!6269 = !DILocalVariable(name: "count", scope: !6248, file: !3, line: 1839, type: !1019)
!6270 = !DILocation(line: 1839, column: 13, scope: !6248)
!6271 = !DILocation(line: 1839, column: 21, scope: !6248)
!6272 = !DILocation(line: 1839, column: 24, scope: !6248)
!6273 = !DILocation(line: 1839, column: 32, scope: !6248)
!6274 = !DILocation(line: 1839, column: 30, scope: !6248)
!6275 = !DILocation(line: 1839, column: 44, scope: !6248)
!6276 = !DILocalVariable(name: "freq", scope: !6248, file: !3, line: 1840, type: !1019)
!6277 = !DILocation(line: 1840, column: 13, scope: !6248)
!6278 = !DILocation(line: 1843, column: 8, scope: !6279)
!6279 = distinct !DILexicalBlock(scope: !6248, file: !3, line: 1843, column: 7)
!6280 = !DILocation(line: 1843, column: 7, scope: !6248)
!6281 = !DILocation(line: 1844, column: 16, scope: !6279)
!6282 = !DILocation(line: 1844, column: 5, scope: !6279)
!6283 = !DILocation(line: 1845, column: 10, scope: !6248)
!6284 = !DILocation(line: 1845, column: 13, scope: !6248)
!6285 = !DILocation(line: 1845, column: 37, scope: !6248)
!6286 = !DILocation(line: 1845, column: 25, scope: !6248)
!6287 = !DILocation(line: 1845, column: 23, scope: !6248)
!6288 = !DILocation(line: 1845, column: 48, scope: !6248)
!6289 = !DILocation(line: 1845, column: 8, scope: !6248)
!6290 = !DILocation(line: 1846, column: 7, scope: !6291)
!6291 = distinct !DILexicalBlock(scope: !6248, file: !3, line: 1846, column: 7)
!6292 = !DILocation(line: 1846, column: 12, scope: !6291)
!6293 = !DILocation(line: 1846, column: 7, scope: !6248)
!6294 = !DILocation(line: 1847, column: 10, scope: !6291)
!6295 = !DILocation(line: 1847, column: 5, scope: !6291)
!6296 = !DILocation(line: 1848, column: 34, scope: !6248)
!6297 = !DILocation(line: 1848, column: 37, scope: !6248)
!6298 = !DILocation(line: 1848, column: 40, scope: !6248)
!6299 = !DILocation(line: 1848, column: 48, scope: !6248)
!6300 = !DILocation(line: 1848, column: 59, scope: !6248)
!6301 = !DILocation(line: 1848, column: 66, scope: !6248)
!6302 = !DILocation(line: 1849, column: 8, scope: !6248)
!6303 = !DILocation(line: 1849, column: 11, scope: !6248)
!6304 = !DILocation(line: 1849, column: 23, scope: !6248)
!6305 = !DILocation(line: 1849, column: 21, scope: !6248)
!6306 = !DILocation(line: 1848, column: 14, scope: !6248)
!6307 = !DILocation(line: 1848, column: 12, scope: !6248)
!6308 = !DILocation(line: 1851, column: 29, scope: !6248)
!6309 = !DILocation(line: 1851, column: 32, scope: !6248)
!6310 = !DILocation(line: 1851, column: 3, scope: !6248)
!6311 = !DILocation(line: 1851, column: 13, scope: !6248)
!6312 = !DILocation(line: 1851, column: 27, scope: !6248)
!6313 = !DILocation(line: 1852, column: 29, scope: !6248)
!6314 = !DILocation(line: 1852, column: 32, scope: !6248)
!6315 = !DILocation(line: 1852, column: 3, scope: !6248)
!6316 = !DILocation(line: 1852, column: 13, scope: !6248)
!6317 = !DILocation(line: 1852, column: 27, scope: !6248)
!6318 = !DILocation(line: 1853, column: 28, scope: !6248)
!6319 = !DILocation(line: 1853, column: 3, scope: !6248)
!6320 = !DILocation(line: 1853, column: 13, scope: !6248)
!6321 = !DILocation(line: 1853, column: 26, scope: !6248)
!6322 = !DILocation(line: 1854, column: 7, scope: !6323)
!6323 = distinct !DILexicalBlock(scope: !6248, file: !3, line: 1854, column: 7)
!6324 = !DILocation(line: 1854, column: 7, scope: !6248)
!6325 = !DILocation(line: 1856, column: 19, scope: !6326)
!6326 = distinct !DILexicalBlock(scope: !6323, file: !3, line: 1855, column: 5)
!6327 = !DILocation(line: 1856, column: 29, scope: !6326)
!6328 = !DILocation(line: 1856, column: 7, scope: !6326)
!6329 = !DILocation(line: 1856, column: 10, scope: !6326)
!6330 = !DILocation(line: 1856, column: 16, scope: !6326)
!6331 = !DILocation(line: 1857, column: 11, scope: !6332)
!6332 = distinct !DILexicalBlock(scope: !6326, file: !3, line: 1857, column: 11)
!6333 = !DILocation(line: 1857, column: 14, scope: !6332)
!6334 = !DILocation(line: 1857, column: 20, scope: !6332)
!6335 = !DILocation(line: 1857, column: 11, scope: !6326)
!6336 = !DILocation(line: 1858, column: 2, scope: !6332)
!6337 = !DILocation(line: 1858, column: 5, scope: !6332)
!6338 = !DILocation(line: 1858, column: 11, scope: !6332)
!6339 = !DILocation(line: 1859, column: 5, scope: !6326)
!6340 = !DILocation(line: 1860, column: 39, scope: !6248)
!6341 = !DILocation(line: 1860, column: 42, scope: !6248)
!6342 = !DILocation(line: 1860, column: 3, scope: !6248)
!6343 = !DILocation(line: 1861, column: 10, scope: !6248)
!6344 = !DILocation(line: 1861, column: 3, scope: !6248)
!6345 = distinct !DISubprogram(name: "cgraph_call_edge_duplication_hooks", scope: !3, file: !3, line: 348, type: !6346, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6346 = !DISubroutineType(types: !6347)
!6347 = !{null, !1015, !1015}
!6348 = !DILocalVariable(name: "cs1", arg: 1, scope: !6345, file: !3, line: 348, type: !1015)
!6349 = !DILocation(line: 348, column: 57, scope: !6345)
!6350 = !DILocalVariable(name: "cs2", arg: 2, scope: !6345, file: !3, line: 349, type: !1015)
!6351 = !DILocation(line: 349, column: 29, scope: !6345)
!6352 = !DILocalVariable(name: "entry", scope: !6345, file: !3, line: 351, type: !2686)
!6353 = !DILocation(line: 351, column: 34, scope: !6345)
!6354 = !DILocation(line: 351, column: 42, scope: !6345)
!6355 = !DILocation(line: 352, column: 3, scope: !6345)
!6356 = !DILocation(line: 352, column: 10, scope: !6345)
!6357 = !DILocation(line: 354, column: 5, scope: !6358)
!6358 = distinct !DILexicalBlock(scope: !6345, file: !3, line: 353, column: 3)
!6359 = !DILocation(line: 354, column: 12, scope: !6358)
!6360 = !DILocation(line: 354, column: 18, scope: !6358)
!6361 = !DILocation(line: 354, column: 23, scope: !6358)
!6362 = !DILocation(line: 354, column: 28, scope: !6358)
!6363 = !DILocation(line: 354, column: 35, scope: !6358)
!6364 = !DILocation(line: 355, column: 13, scope: !6358)
!6365 = !DILocation(line: 355, column: 20, scope: !6358)
!6366 = !DILocation(line: 355, column: 11, scope: !6358)
!6367 = distinct !{!6367, !6355, !6368}
!6368 = !DILocation(line: 356, column: 3, scope: !6345)
!6369 = !DILocation(line: 357, column: 1, scope: !6345)
!6370 = distinct !DISubprogram(name: "cgraph_clone_node", scope: !3, file: !3, line: 1871, type: !6371, scopeLine: 1874, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6371 = !DISubroutineType(types: !6372)
!6372 = !{!1022, !1022, !1019, !1122, !1122, !1145, !6373}
!6373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6374, size: 64)
!6374 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_edge_p_heap", file: !6, line: 353, baseType: !6375)
!6375 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_edge_p_heap", file: !6, line: 353, size: 128, elements: !6376)
!6376 = !{!6377}
!6377 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !6375, file: !6, line: 353, baseType: !6378, size: 128)
!6378 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_edge_p_base", file: !6, line: 352, baseType: !6379)
!6379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_edge_p_base", file: !6, line: 352, size: 128, elements: !6380)
!6380 = !{!6381, !6382, !6383}
!6381 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !6379, file: !6, line: 352, baseType: !7, size: 32)
!6382 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !6379, file: !6, line: 352, baseType: !7, size: 32, offset: 32)
!6383 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !6379, file: !6, line: 352, baseType: !6384, size: 64, offset: 64)
!6384 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2723, size: 64, elements: !1126)
!6385 = !DILocalVariable(name: "n", arg: 1, scope: !6370, file: !3, line: 1871, type: !1022)
!6386 = !DILocation(line: 1871, column: 40, scope: !6370)
!6387 = !DILocalVariable(name: "count", arg: 2, scope: !6370, file: !3, line: 1871, type: !1019)
!6388 = !DILocation(line: 1871, column: 53, scope: !6370)
!6389 = !DILocalVariable(name: "freq", arg: 3, scope: !6370, file: !3, line: 1871, type: !1122)
!6390 = !DILocation(line: 1871, column: 64, scope: !6370)
!6391 = !DILocalVariable(name: "loop_nest", arg: 4, scope: !6370, file: !3, line: 1872, type: !1122)
!6392 = !DILocation(line: 1872, column: 10, scope: !6370)
!6393 = !DILocalVariable(name: "update_original", arg: 5, scope: !6370, file: !3, line: 1872, type: !1145)
!6394 = !DILocation(line: 1872, column: 26, scope: !6370)
!6395 = !DILocalVariable(name: "redirect_callers", arg: 6, scope: !6370, file: !3, line: 1873, type: !6373)
!6396 = !DILocation(line: 1873, column: 31, scope: !6370)
!6397 = !DILocalVariable(name: "new_node", scope: !6370, file: !3, line: 1875, type: !1022)
!6398 = !DILocation(line: 1875, column: 23, scope: !6370)
!6399 = !DILocation(line: 1875, column: 34, scope: !6370)
!6400 = !DILocalVariable(name: "e", scope: !6370, file: !3, line: 1876, type: !1015)
!6401 = !DILocation(line: 1876, column: 23, scope: !6370)
!6402 = !DILocalVariable(name: "count_scale", scope: !6370, file: !3, line: 1877, type: !1019)
!6403 = !DILocation(line: 1877, column: 13, scope: !6370)
!6404 = !DILocalVariable(name: "i", scope: !6370, file: !3, line: 1878, type: !7)
!6405 = !DILocation(line: 1878, column: 12, scope: !6370)
!6406 = !DILocation(line: 1880, column: 20, scope: !6370)
!6407 = !DILocation(line: 1880, column: 23, scope: !6370)
!6408 = !DILocation(line: 1880, column: 3, scope: !6370)
!6409 = !DILocation(line: 1880, column: 13, scope: !6370)
!6410 = !DILocation(line: 1880, column: 18, scope: !6370)
!6411 = !DILocation(line: 1881, column: 22, scope: !6370)
!6412 = !DILocation(line: 1881, column: 25, scope: !6370)
!6413 = !DILocation(line: 1881, column: 3, scope: !6370)
!6414 = !DILocation(line: 1881, column: 13, scope: !6370)
!6415 = !DILocation(line: 1881, column: 20, scope: !6370)
!6416 = !DILocation(line: 1882, column: 7, scope: !6417)
!6417 = distinct !DILexicalBlock(scope: !6370, file: !3, line: 1882, column: 7)
!6418 = !DILocation(line: 1882, column: 17, scope: !6417)
!6419 = !DILocation(line: 1882, column: 7, scope: !6370)
!6420 = !DILocation(line: 1884, column: 31, scope: !6421)
!6421 = distinct !DILexicalBlock(scope: !6417, file: !3, line: 1883, column: 5)
!6422 = !DILocation(line: 1884, column: 41, scope: !6421)
!6423 = !DILocation(line: 1884, column: 49, scope: !6421)
!6424 = !DILocation(line: 1884, column: 7, scope: !6421)
!6425 = !DILocation(line: 1884, column: 17, scope: !6421)
!6426 = !DILocation(line: 1884, column: 29, scope: !6421)
!6427 = !DILocation(line: 1885, column: 34, scope: !6421)
!6428 = !DILocation(line: 1885, column: 7, scope: !6421)
!6429 = !DILocation(line: 1885, column: 17, scope: !6421)
!6430 = !DILocation(line: 1885, column: 25, scope: !6421)
!6431 = !DILocation(line: 1885, column: 32, scope: !6421)
!6432 = !DILocation(line: 1886, column: 5, scope: !6421)
!6433 = !DILocation(line: 1887, column: 24, scope: !6370)
!6434 = !DILocation(line: 1887, column: 27, scope: !6370)
!6435 = !DILocation(line: 1887, column: 3, scope: !6370)
!6436 = !DILocation(line: 1887, column: 13, scope: !6370)
!6437 = !DILocation(line: 1887, column: 22, scope: !6370)
!6438 = !DILocation(line: 1888, column: 3, scope: !6370)
!6439 = !DILocation(line: 1888, column: 13, scope: !6370)
!6440 = !DILocation(line: 1888, column: 21, scope: !6370)
!6441 = !DILocation(line: 1888, column: 24, scope: !6370)
!6442 = !DILocation(line: 1889, column: 3, scope: !6370)
!6443 = !DILocation(line: 1889, column: 13, scope: !6370)
!6444 = !DILocation(line: 1889, column: 19, scope: !6370)
!6445 = !DILocation(line: 1889, column: 38, scope: !6370)
!6446 = !DILocation(line: 1890, column: 3, scope: !6370)
!6447 = !DILocation(line: 1890, column: 13, scope: !6370)
!6448 = !DILocation(line: 1890, column: 22, scope: !6370)
!6449 = !DILocation(line: 1890, column: 25, scope: !6370)
!6450 = !DILocation(line: 1891, column: 3, scope: !6370)
!6451 = !DILocation(line: 1891, column: 13, scope: !6370)
!6452 = !DILocation(line: 1891, column: 19, scope: !6370)
!6453 = !DILocation(line: 1891, column: 22, scope: !6370)
!6454 = !DILocation(line: 1892, column: 21, scope: !6370)
!6455 = !DILocation(line: 1892, column: 3, scope: !6370)
!6456 = !DILocation(line: 1892, column: 13, scope: !6370)
!6457 = !DILocation(line: 1892, column: 19, scope: !6370)
!6458 = !DILocation(line: 1893, column: 3, scope: !6370)
!6459 = !DILocation(line: 1893, column: 13, scope: !6370)
!6460 = !DILocation(line: 1893, column: 21, scope: !6370)
!6461 = !DILocation(line: 1893, column: 24, scope: !6370)
!6462 = !DILocation(line: 1894, column: 3, scope: !6370)
!6463 = !DILocation(line: 1894, column: 13, scope: !6370)
!6464 = !DILocation(line: 1894, column: 19, scope: !6370)
!6465 = !DILocation(line: 1894, column: 28, scope: !6370)
!6466 = !DILocation(line: 1895, column: 7, scope: !6467)
!6467 = distinct !DILexicalBlock(scope: !6370, file: !3, line: 1895, column: 7)
!6468 = !DILocation(line: 1895, column: 10, scope: !6467)
!6469 = !DILocation(line: 1895, column: 7, scope: !6370)
!6470 = !DILocation(line: 1897, column: 11, scope: !6471)
!6471 = distinct !DILexicalBlock(scope: !6472, file: !3, line: 1897, column: 11)
!6472 = distinct !DILexicalBlock(scope: !6467, file: !3, line: 1896, column: 5)
!6473 = !DILocation(line: 1897, column: 21, scope: !6471)
!6474 = !DILocation(line: 1897, column: 29, scope: !6471)
!6475 = !DILocation(line: 1897, column: 32, scope: !6471)
!6476 = !DILocation(line: 1897, column: 27, scope: !6471)
!6477 = !DILocation(line: 1897, column: 11, scope: !6472)
!6478 = !DILocation(line: 1898, column: 21, scope: !6471)
!6479 = !DILocation(line: 1898, column: 9, scope: !6471)
!6480 = !DILocation(line: 1900, column: 23, scope: !6471)
!6481 = !DILocation(line: 1900, column: 33, scope: !6471)
!6482 = !DILocation(line: 1900, column: 39, scope: !6471)
!6483 = !DILocation(line: 1900, column: 60, scope: !6471)
!6484 = !DILocation(line: 1900, column: 63, scope: !6471)
!6485 = !DILocation(line: 1900, column: 58, scope: !6471)
!6486 = !DILocation(line: 1900, column: 21, scope: !6471)
!6487 = !DILocation(line: 1901, column: 5, scope: !6472)
!6488 = !DILocation(line: 1903, column: 17, scope: !6467)
!6489 = !DILocation(line: 1904, column: 7, scope: !6490)
!6490 = distinct !DILexicalBlock(scope: !6370, file: !3, line: 1904, column: 7)
!6491 = !DILocation(line: 1904, column: 7, scope: !6370)
!6492 = !DILocation(line: 1906, column: 19, scope: !6493)
!6493 = distinct !DILexicalBlock(scope: !6490, file: !3, line: 1905, column: 5)
!6494 = !DILocation(line: 1906, column: 7, scope: !6493)
!6495 = !DILocation(line: 1906, column: 10, scope: !6493)
!6496 = !DILocation(line: 1906, column: 16, scope: !6493)
!6497 = !DILocation(line: 1907, column: 11, scope: !6498)
!6498 = distinct !DILexicalBlock(scope: !6493, file: !3, line: 1907, column: 11)
!6499 = !DILocation(line: 1907, column: 14, scope: !6498)
!6500 = !DILocation(line: 1907, column: 20, scope: !6498)
!6501 = !DILocation(line: 1907, column: 11, scope: !6493)
!6502 = !DILocation(line: 1908, column: 2, scope: !6498)
!6503 = !DILocation(line: 1908, column: 5, scope: !6498)
!6504 = !DILocation(line: 1908, column: 11, scope: !6498)
!6505 = !DILocation(line: 1909, column: 5, scope: !6493)
!6506 = !DILocation(line: 1911, column: 10, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !6370, file: !3, line: 1911, column: 3)
!6508 = !DILocation(line: 1911, column: 8, scope: !6507)
!6509 = !DILocation(line: 1911, column: 15, scope: !6510)
!6510 = distinct !DILexicalBlock(scope: !6507, file: !3, line: 1911, column: 3)
!6511 = !DILocation(line: 1911, column: 3, scope: !6507)
!6512 = !DILocation(line: 1915, column: 36, scope: !6513)
!6513 = distinct !DILexicalBlock(scope: !6510, file: !3, line: 1912, column: 5)
!6514 = !DILocation(line: 1915, column: 39, scope: !6513)
!6515 = !DILocation(line: 1915, column: 7, scope: !6513)
!6516 = !DILocation(line: 1916, column: 5, scope: !6513)
!6517 = !DILocation(line: 1911, column: 69, scope: !6510)
!6518 = !DILocation(line: 1911, column: 3, scope: !6510)
!6519 = distinct !{!6519, !6511, !6520}
!6520 = !DILocation(line: 1916, column: 5, scope: !6507)
!6521 = !DILocation(line: 1919, column: 12, scope: !6522)
!6522 = distinct !DILexicalBlock(scope: !6370, file: !3, line: 1919, column: 3)
!6523 = !DILocation(line: 1919, column: 15, scope: !6522)
!6524 = !DILocation(line: 1919, column: 10, scope: !6522)
!6525 = !DILocation(line: 1919, column: 8, scope: !6522)
!6526 = !DILocation(line: 1919, column: 23, scope: !6527)
!6527 = distinct !DILexicalBlock(scope: !6522, file: !3, line: 1919, column: 3)
!6528 = !DILocation(line: 1919, column: 3, scope: !6522)
!6529 = !DILocation(line: 1920, column: 24, scope: !6527)
!6530 = !DILocation(line: 1920, column: 27, scope: !6527)
!6531 = !DILocation(line: 1920, column: 37, scope: !6527)
!6532 = !DILocation(line: 1920, column: 40, scope: !6527)
!6533 = !DILocation(line: 1920, column: 51, scope: !6527)
!6534 = !DILocation(line: 1920, column: 54, scope: !6527)
!6535 = !DILocation(line: 1921, column: 10, scope: !6527)
!6536 = !DILocation(line: 1921, column: 23, scope: !6527)
!6537 = !DILocation(line: 1921, column: 29, scope: !6527)
!6538 = !DILocation(line: 1921, column: 40, scope: !6527)
!6539 = !DILocation(line: 1920, column: 5, scope: !6527)
!6540 = !DILocation(line: 1919, column: 28, scope: !6527)
!6541 = !DILocation(line: 1919, column: 31, scope: !6527)
!6542 = !DILocation(line: 1919, column: 27, scope: !6527)
!6543 = !DILocation(line: 1919, column: 3, scope: !6527)
!6544 = distinct !{!6544, !6528, !6545}
!6545 = !DILocation(line: 1921, column: 55, scope: !6522)
!6546 = !DILocation(line: 1923, column: 34, scope: !6370)
!6547 = !DILocation(line: 1923, column: 37, scope: !6370)
!6548 = !DILocation(line: 1923, column: 3, scope: !6370)
!6549 = !DILocation(line: 1923, column: 13, scope: !6370)
!6550 = !DILocation(line: 1923, column: 32, scope: !6370)
!6551 = !DILocation(line: 1924, column: 7, scope: !6552)
!6552 = distinct !DILexicalBlock(scope: !6370, file: !3, line: 1924, column: 7)
!6553 = !DILocation(line: 1924, column: 10, scope: !6552)
!6554 = !DILocation(line: 1924, column: 7, scope: !6370)
!6555 = !DILocation(line: 1925, column: 37, scope: !6552)
!6556 = !DILocation(line: 1925, column: 5, scope: !6552)
!6557 = !DILocation(line: 1925, column: 8, scope: !6552)
!6558 = !DILocation(line: 1925, column: 16, scope: !6552)
!6559 = !DILocation(line: 1925, column: 35, scope: !6552)
!6560 = !DILocation(line: 1926, column: 15, scope: !6370)
!6561 = !DILocation(line: 1926, column: 3, scope: !6370)
!6562 = !DILocation(line: 1926, column: 6, scope: !6370)
!6563 = !DILocation(line: 1926, column: 13, scope: !6370)
!6564 = !DILocation(line: 1927, column: 24, scope: !6370)
!6565 = !DILocation(line: 1927, column: 3, scope: !6370)
!6566 = !DILocation(line: 1927, column: 13, scope: !6370)
!6567 = !DILocation(line: 1927, column: 22, scope: !6370)
!6568 = !DILocation(line: 1929, column: 39, scope: !6370)
!6569 = !DILocation(line: 1929, column: 42, scope: !6370)
!6570 = !DILocation(line: 1929, column: 3, scope: !6370)
!6571 = !DILocation(line: 1930, column: 10, scope: !6370)
!6572 = !DILocation(line: 1930, column: 3, scope: !6370)
!6573 = distinct !DISubprogram(name: "VEC_cgraph_edge_p_base_iterate", scope: !6, file: !6, line: 352, type: !6574, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6574 = !DISubroutineType(types: !6575)
!6575 = !{!1122, !6576, !7, !6578}
!6576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6577, size: 64)
!6577 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6378)
!6578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2723, size: 64)
!6579 = !DILocalVariable(name: "vec_", arg: 1, scope: !6573, file: !6, line: 352, type: !6576)
!6580 = !DILocation(line: 352, column: 1, scope: !6573)
!6581 = !DILocalVariable(name: "ix_", arg: 2, scope: !6573, file: !6, line: 352, type: !7)
!6582 = !DILocalVariable(name: "ptr", arg: 3, scope: !6573, file: !6, line: 352, type: !6578)
!6583 = !DILocation(line: 352, column: 1, scope: !6584)
!6584 = distinct !DILexicalBlock(scope: !6573, file: !6, line: 352, column: 1)
!6585 = !DILocation(line: 352, column: 1, scope: !6586)
!6586 = distinct !DILexicalBlock(scope: !6584, file: !6, line: 352, column: 1)
!6587 = !DILocation(line: 352, column: 1, scope: !6588)
!6588 = distinct !DILexicalBlock(scope: !6584, file: !6, line: 352, column: 1)
!6589 = distinct !DISubprogram(name: "cgraph_call_node_duplication_hooks", scope: !3, file: !3, line: 390, type: !6590, scopeLine: 392, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6590 = !DISubroutineType(types: !6591)
!6591 = !{null, !1022, !1022}
!6592 = !DILocalVariable(name: "node1", arg: 1, scope: !6589, file: !3, line: 390, type: !1022)
!6593 = !DILocation(line: 390, column: 57, scope: !6589)
!6594 = !DILocalVariable(name: "node2", arg: 2, scope: !6589, file: !3, line: 391, type: !1022)
!6595 = !DILocation(line: 391, column: 29, scope: !6589)
!6596 = !DILocalVariable(name: "entry", scope: !6589, file: !3, line: 393, type: !2696)
!6597 = !DILocation(line: 393, column: 34, scope: !6589)
!6598 = !DILocation(line: 393, column: 42, scope: !6589)
!6599 = !DILocation(line: 394, column: 3, scope: !6589)
!6600 = !DILocation(line: 394, column: 10, scope: !6589)
!6601 = !DILocation(line: 396, column: 5, scope: !6602)
!6602 = distinct !DILexicalBlock(scope: !6589, file: !3, line: 395, column: 3)
!6603 = !DILocation(line: 396, column: 12, scope: !6602)
!6604 = !DILocation(line: 396, column: 18, scope: !6602)
!6605 = !DILocation(line: 396, column: 25, scope: !6602)
!6606 = !DILocation(line: 396, column: 32, scope: !6602)
!6607 = !DILocation(line: 396, column: 39, scope: !6602)
!6608 = !DILocation(line: 397, column: 13, scope: !6602)
!6609 = !DILocation(line: 397, column: 20, scope: !6602)
!6610 = !DILocation(line: 397, column: 11, scope: !6602)
!6611 = distinct !{!6611, !6599, !6612}
!6612 = !DILocation(line: 398, column: 3, scope: !6589)
!6613 = !DILocation(line: 399, column: 1, scope: !6589)
!6614 = distinct !DISubprogram(name: "cgraph_create_virtual_clone", scope: !3, file: !3, line: 1963, type: !6615, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6615 = !DISubroutineType(types: !6616)
!6616 = !{!1022, !1022, !6373, !2612, !2001}
!6617 = !DILocalVariable(name: "old_node", arg: 1, scope: !6614, file: !3, line: 1963, type: !1022)
!6618 = !DILocation(line: 1963, column: 50, scope: !6614)
!6619 = !DILocalVariable(name: "redirect_callers", arg: 2, scope: !6614, file: !3, line: 1964, type: !6373)
!6620 = !DILocation(line: 1964, column: 34, scope: !6614)
!6621 = !DILocalVariable(name: "tree_map", arg: 3, scope: !6614, file: !3, line: 1965, type: !2612)
!6622 = !DILocation(line: 1965, column: 36, scope: !6614)
!6623 = !DILocalVariable(name: "args_to_skip", arg: 4, scope: !6614, file: !3, line: 1966, type: !2001)
!6624 = !DILocation(line: 1966, column: 16, scope: !6614)
!6625 = !DILocalVariable(name: "old_decl", scope: !6614, file: !3, line: 1968, type: !1026)
!6626 = !DILocation(line: 1968, column: 8, scope: !6614)
!6627 = !DILocation(line: 1968, column: 19, scope: !6614)
!6628 = !DILocation(line: 1968, column: 29, scope: !6614)
!6629 = !DILocalVariable(name: "new_node", scope: !6614, file: !3, line: 1969, type: !1022)
!6630 = !DILocation(line: 1969, column: 23, scope: !6614)
!6631 = !DILocalVariable(name: "new_decl", scope: !6614, file: !3, line: 1970, type: !1026)
!6632 = !DILocation(line: 1970, column: 8, scope: !6614)
!6633 = !DILocalVariable(name: "key", scope: !6614, file: !3, line: 1971, type: !1023)
!6634 = !DILocation(line: 1971, column: 22, scope: !6614)
!6635 = !DILocalVariable(name: "slot", scope: !6614, file: !3, line: 1971, type: !2706)
!6636 = !DILocation(line: 1971, column: 29, scope: !6614)
!6637 = !DILocation(line: 1973, column: 3, scope: !6614)
!6638 = !DILocation(line: 1976, column: 8, scope: !6639)
!6639 = distinct !DILexicalBlock(scope: !6614, file: !3, line: 1976, column: 7)
!6640 = !DILocation(line: 1976, column: 7, scope: !6614)
!6641 = !DILocation(line: 1977, column: 16, scope: !6639)
!6642 = !DILocation(line: 1977, column: 14, scope: !6639)
!6643 = !DILocation(line: 1977, column: 5, scope: !6639)
!6644 = !DILocation(line: 1979, column: 47, scope: !6639)
!6645 = !DILocation(line: 1979, column: 57, scope: !6639)
!6646 = !DILocation(line: 1979, column: 16, scope: !6639)
!6647 = !DILocation(line: 1979, column: 14, scope: !6639)
!6648 = !DILocation(line: 1980, column: 3, scope: !6614)
!6649 = !DILocation(line: 1980, column: 35, scope: !6614)
!6650 = !DILocation(line: 1983, column: 47, scope: !6614)
!6651 = !DILocation(line: 1983, column: 26, scope: !6614)
!6652 = !DILocation(line: 1983, column: 3, scope: !6614)
!6653 = !DILocation(line: 1983, column: 24, scope: !6614)
!6654 = !DILocation(line: 1984, column: 3, scope: !6614)
!6655 = !DILocation(line: 1985, column: 3, scope: !6614)
!6656 = !DILocation(line: 1987, column: 33, scope: !6614)
!6657 = !DILocation(line: 1987, column: 43, scope: !6614)
!6658 = !DILocation(line: 1987, column: 53, scope: !6614)
!6659 = !DILocation(line: 1989, column: 5, scope: !6614)
!6660 = !DILocation(line: 1987, column: 14, scope: !6614)
!6661 = !DILocation(line: 1987, column: 12, scope: !6614)
!6662 = !DILocation(line: 1990, column: 20, scope: !6614)
!6663 = !DILocation(line: 1990, column: 3, scope: !6614)
!6664 = !DILocation(line: 1990, column: 13, scope: !6614)
!6665 = !DILocation(line: 1990, column: 18, scope: !6614)
!6666 = !DILocation(line: 1996, column: 3, scope: !6614)
!6667 = !DILocation(line: 1996, column: 34, scope: !6614)
!6668 = !DILocation(line: 1997, column: 3, scope: !6614)
!6669 = !DILocation(line: 1997, column: 38, scope: !6614)
!6670 = !DILocation(line: 1998, column: 3, scope: !6614)
!6671 = !DILocation(line: 1998, column: 32, scope: !6614)
!6672 = !DILocation(line: 1999, column: 3, scope: !6614)
!6673 = !DILocation(line: 1999, column: 32, scope: !6614)
!6674 = !DILocation(line: 2000, column: 3, scope: !6614)
!6675 = !DILocation(line: 2000, column: 30, scope: !6614)
!6676 = !DILocation(line: 2001, column: 30, scope: !6614)
!6677 = !DILocation(line: 2001, column: 3, scope: !6614)
!6678 = !DILocation(line: 2001, column: 13, scope: !6614)
!6679 = !DILocation(line: 2001, column: 19, scope: !6614)
!6680 = !DILocation(line: 2001, column: 28, scope: !6614)
!6681 = !DILocation(line: 2002, column: 34, scope: !6614)
!6682 = !DILocation(line: 2002, column: 3, scope: !6614)
!6683 = !DILocation(line: 2002, column: 13, scope: !6614)
!6684 = !DILocation(line: 2002, column: 19, scope: !6614)
!6685 = !DILocation(line: 2002, column: 32, scope: !6614)
!6686 = !DILocation(line: 2003, column: 8, scope: !6687)
!6687 = distinct !DILexicalBlock(scope: !6614, file: !3, line: 2003, column: 7)
!6688 = !DILocation(line: 2003, column: 7, scope: !6614)
!6689 = !DILocation(line: 2004, column: 45, scope: !6687)
!6690 = !DILocation(line: 2004, column: 55, scope: !6687)
!6691 = !DILocation(line: 2004, column: 61, scope: !6687)
!6692 = !DILocation(line: 2004, column: 5, scope: !6687)
!6693 = !DILocation(line: 2004, column: 15, scope: !6687)
!6694 = !DILocation(line: 2004, column: 21, scope: !6687)
!6695 = !DILocation(line: 2004, column: 43, scope: !6687)
!6696 = !DILocation(line: 2005, column: 12, scope: !6697)
!6697 = distinct !DILexicalBlock(scope: !6687, file: !3, line: 2005, column: 12)
!6698 = !DILocation(line: 2005, column: 22, scope: !6697)
!6699 = !DILocation(line: 2005, column: 28, scope: !6697)
!6700 = !DILocation(line: 2005, column: 12, scope: !6687)
!6701 = !DILocalVariable(name: "newi", scope: !6702, file: !3, line: 2007, type: !1122)
!6702 = distinct !DILexicalBlock(scope: !6697, file: !3, line: 2006, column: 5)
!6703 = !DILocation(line: 2007, column: 11, scope: !6702)
!6704 = !DILocalVariable(name: "oldi", scope: !6702, file: !3, line: 2007, type: !1122)
!6705 = !DILocation(line: 2007, column: 21, scope: !6702)
!6706 = !DILocalVariable(name: "arg", scope: !6702, file: !3, line: 2008, type: !1026)
!6707 = !DILocation(line: 2008, column: 12, scope: !6702)
!6708 = !DILocalVariable(name: "new_args_to_skip", scope: !6702, file: !3, line: 2009, type: !2001)
!6709 = !DILocation(line: 2009, column: 14, scope: !6702)
!6710 = !DILocation(line: 2009, column: 33, scope: !6702)
!6711 = !DILocalVariable(name: "orig_node", scope: !6702, file: !3, line: 2010, type: !1022)
!6712 = !DILocation(line: 2010, column: 27, scope: !6702)
!6713 = !DILocation(line: 2011, column: 24, scope: !6714)
!6714 = distinct !DILexicalBlock(scope: !6702, file: !3, line: 2011, column: 7)
!6715 = !DILocation(line: 2011, column: 22, scope: !6714)
!6716 = !DILocation(line: 2011, column: 12, scope: !6714)
!6717 = !DILocation(line: 2011, column: 34, scope: !6718)
!6718 = distinct !DILexicalBlock(scope: !6714, file: !3, line: 2011, column: 7)
!6719 = !DILocation(line: 2011, column: 45, scope: !6718)
!6720 = !DILocation(line: 2011, column: 7, scope: !6714)
!6721 = !DILocation(line: 2011, column: 67, scope: !6718)
!6722 = !DILocation(line: 2011, column: 78, scope: !6718)
!6723 = !DILocation(line: 2011, column: 65, scope: !6718)
!6724 = !DILocation(line: 2011, column: 7, scope: !6718)
!6725 = distinct !{!6725, !6720, !6726}
!6726 = !DILocation(line: 2012, column: 9, scope: !6714)
!6727 = !DILocation(line: 2013, column: 18, scope: !6728)
!6728 = distinct !DILexicalBlock(scope: !6702, file: !3, line: 2013, column: 7)
!6729 = !DILocation(line: 2013, column: 16, scope: !6728)
!6730 = !DILocation(line: 2013, column: 12, scope: !6728)
!6731 = !DILocation(line: 2013, column: 52, scope: !6732)
!6732 = distinct !DILexicalBlock(scope: !6728, file: !3, line: 2013, column: 7)
!6733 = !DILocation(line: 2013, column: 7, scope: !6728)
!6734 = !DILocation(line: 2015, column: 22, scope: !6735)
!6735 = distinct !DILexicalBlock(scope: !6736, file: !3, line: 2015, column: 8)
!6736 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 2014, column: 2)
!6737 = !DILocation(line: 2015, column: 32, scope: !6735)
!6738 = !DILocation(line: 2015, column: 38, scope: !6735)
!6739 = !DILocation(line: 2015, column: 61, scope: !6735)
!6740 = !DILocation(line: 2015, column: 8, scope: !6735)
!6741 = !DILocation(line: 2015, column: 8, scope: !6736)
!6742 = !DILocation(line: 2017, column: 24, scope: !6743)
!6743 = distinct !DILexicalBlock(scope: !6735, file: !3, line: 2016, column: 6)
!6744 = !DILocation(line: 2017, column: 42, scope: !6743)
!6745 = !DILocation(line: 2017, column: 8, scope: !6743)
!6746 = !DILocation(line: 2018, column: 8, scope: !6743)
!6747 = !DILocation(line: 2020, column: 22, scope: !6748)
!6748 = distinct !DILexicalBlock(scope: !6736, file: !3, line: 2020, column: 8)
!6749 = !DILocation(line: 2020, column: 36, scope: !6748)
!6750 = !DILocation(line: 2020, column: 8, scope: !6748)
!6751 = !DILocation(line: 2020, column: 8, scope: !6736)
!6752 = !DILocation(line: 2021, column: 22, scope: !6748)
!6753 = !DILocation(line: 2021, column: 40, scope: !6748)
!6754 = !DILocation(line: 2021, column: 6, scope: !6748)
!6755 = !DILocation(line: 2022, column: 8, scope: !6736)
!6756 = !DILocation(line: 2023, column: 2, scope: !6736)
!6757 = !DILocation(line: 2013, column: 63, scope: !6732)
!6758 = !DILocation(line: 2013, column: 61, scope: !6732)
!6759 = !DILocation(line: 2013, column: 85, scope: !6732)
!6760 = !DILocation(line: 2013, column: 7, scope: !6732)
!6761 = distinct !{!6761, !6733, !6762}
!6762 = !DILocation(line: 2023, column: 2, scope: !6728)
!6763 = !DILocation(line: 2024, column: 47, scope: !6702)
!6764 = !DILocation(line: 2024, column: 7, scope: !6702)
!6765 = !DILocation(line: 2024, column: 17, scope: !6702)
!6766 = !DILocation(line: 2024, column: 23, scope: !6702)
!6767 = !DILocation(line: 2024, column: 45, scope: !6702)
!6768 = !DILocation(line: 2025, column: 5, scope: !6702)
!6769 = !DILocation(line: 2027, column: 45, scope: !6697)
!6770 = !DILocation(line: 2027, column: 5, scope: !6697)
!6771 = !DILocation(line: 2027, column: 15, scope: !6697)
!6772 = !DILocation(line: 2027, column: 21, scope: !6697)
!6773 = !DILocation(line: 2027, column: 43, scope: !6697)
!6774 = !DILocation(line: 2028, column: 3, scope: !6614)
!6775 = !DILocation(line: 2028, column: 13, scope: !6614)
!6776 = !DILocation(line: 2028, column: 19, scope: !6614)
!6777 = !DILocation(line: 2028, column: 38, scope: !6614)
!6778 = !DILocation(line: 2029, column: 3, scope: !6614)
!6779 = !DILocation(line: 2029, column: 13, scope: !6614)
!6780 = !DILocation(line: 2029, column: 19, scope: !6614)
!6781 = !DILocation(line: 2029, column: 25, scope: !6614)
!6782 = !DILocation(line: 2030, column: 3, scope: !6614)
!6783 = !DILocation(line: 2030, column: 13, scope: !6614)
!6784 = !DILocation(line: 2030, column: 21, scope: !6614)
!6785 = !DILocation(line: 2031, column: 3, scope: !6614)
!6786 = !DILocation(line: 2031, column: 13, scope: !6614)
!6787 = !DILocation(line: 2031, column: 23, scope: !6614)
!6788 = !DILocation(line: 2033, column: 14, scope: !6614)
!6789 = !DILocation(line: 2033, column: 7, scope: !6614)
!6790 = !DILocation(line: 2033, column: 12, scope: !6614)
!6791 = !DILocation(line: 2034, column: 50, scope: !6614)
!6792 = !DILocation(line: 2034, column: 63, scope: !6614)
!6793 = !DILocation(line: 2034, column: 34, scope: !6614)
!6794 = !DILocation(line: 2034, column: 10, scope: !6614)
!6795 = !DILocation(line: 2034, column: 8, scope: !6614)
!6796 = !DILocation(line: 2035, column: 3, scope: !6614)
!6797 = !DILocation(line: 2036, column: 11, scope: !6614)
!6798 = !DILocation(line: 2036, column: 4, scope: !6614)
!6799 = !DILocation(line: 2036, column: 9, scope: !6614)
!6800 = !DILocation(line: 2037, column: 7, scope: !6801)
!6801 = distinct !DILexicalBlock(scope: !6614, file: !3, line: 2037, column: 7)
!6802 = !DILocation(line: 2037, column: 7, scope: !6614)
!6803 = !DILocalVariable(name: "aslot", scope: !6804, file: !3, line: 2039, type: !1882)
!6804 = distinct !DILexicalBlock(scope: !6801, file: !3, line: 2038, column: 5)
!6805 = !DILocation(line: 2039, column: 14, scope: !6804)
!6806 = !DILocalVariable(name: "name", scope: !6804, file: !3, line: 2040, type: !1026)
!6807 = !DILocation(line: 2040, column: 12, scope: !6804)
!6808 = !DILocation(line: 2040, column: 19, scope: !6804)
!6809 = !DILocation(line: 2042, column: 41, scope: !6804)
!6810 = !DILocation(line: 2042, column: 62, scope: !6804)
!6811 = !DILocation(line: 2043, column: 32, scope: !6804)
!6812 = !DILocation(line: 2043, column: 6, scope: !6804)
!6813 = !DILocation(line: 2042, column: 15, scope: !6804)
!6814 = !DILocation(line: 2042, column: 13, scope: !6804)
!6815 = !DILocation(line: 2045, column: 7, scope: !6804)
!6816 = !DILocation(line: 2046, column: 16, scope: !6804)
!6817 = !DILocation(line: 2046, column: 8, scope: !6804)
!6818 = !DILocation(line: 2046, column: 14, scope: !6804)
!6819 = !DILocation(line: 2047, column: 5, scope: !6804)
!6820 = !DILocation(line: 2049, column: 10, scope: !6614)
!6821 = !DILocation(line: 2049, column: 3, scope: !6614)
!6822 = distinct !DISubprogram(name: "clone_function_name", scope: !3, file: !3, line: 1938, type: !6823, scopeLine: 1939, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6823 = !DISubroutineType(types: !6824)
!6824 = !{!1026, !1026}
!6825 = !DILocalVariable(name: "decl", arg: 1, scope: !6822, file: !3, line: 1938, type: !1026)
!6826 = !DILocation(line: 1938, column: 27, scope: !6822)
!6827 = !DILocalVariable(name: "name", scope: !6822, file: !3, line: 1940, type: !1026)
!6828 = !DILocation(line: 1940, column: 8, scope: !6822)
!6829 = !DILocation(line: 1940, column: 15, scope: !6822)
!6830 = !DILocalVariable(name: "len", scope: !6822, file: !3, line: 1941, type: !1501)
!6831 = !DILocation(line: 1941, column: 10, scope: !6822)
!6832 = !DILocation(line: 1941, column: 16, scope: !6822)
!6833 = !DILocalVariable(name: "tmp_name", scope: !6822, file: !3, line: 1942, type: !1293)
!6834 = !DILocation(line: 1942, column: 9, scope: !6822)
!6835 = !DILocalVariable(name: "prefix", scope: !6822, file: !3, line: 1942, type: !1293)
!6836 = !DILocation(line: 1942, column: 20, scope: !6822)
!6837 = !DILocation(line: 1944, column: 12, scope: !6822)
!6838 = !DILocation(line: 1944, column: 10, scope: !6822)
!6839 = !DILocation(line: 1945, column: 11, scope: !6822)
!6840 = !DILocation(line: 1945, column: 19, scope: !6822)
!6841 = !DILocation(line: 1945, column: 46, scope: !6822)
!6842 = !DILocation(line: 1945, column: 3, scope: !6822)
!6843 = !DILocation(line: 1946, column: 11, scope: !6822)
!6844 = !DILocation(line: 1946, column: 20, scope: !6822)
!6845 = !DILocation(line: 1946, column: 18, scope: !6822)
!6846 = !DILocation(line: 1946, column: 3, scope: !6822)
!6847 = !DILocation(line: 1948, column: 3, scope: !6822)
!6848 = !DILocation(line: 1948, column: 10, scope: !6822)
!6849 = !DILocation(line: 1948, column: 15, scope: !6822)
!6850 = !DILocation(line: 1952, column: 3, scope: !6822)
!6851 = !DILocalVariable(name: "name_", scope: !6852, file: !3, line: 1952, type: !2741)
!6852 = distinct !DILexicalBlock(scope: !6822, file: !3, line: 1952, column: 3)
!6853 = !DILocation(line: 1952, column: 3, scope: !6852)
!6854 = !DILocalVariable(name: "output_", scope: !6852, file: !3, line: 1952, type: !6855)
!6855 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1293)
!6856 = !DILocation(line: 1953, column: 26, scope: !6822)
!6857 = !DILocation(line: 1953, column: 10, scope: !6822)
!6858 = !DILocation(line: 1953, column: 3, scope: !6822)
!6859 = distinct !DISubprogram(name: "cgraph_unnest_node", scope: !3, file: !3, line: 2054, type: !2541, scopeLine: 2055, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6860 = !DILocalVariable(name: "node", arg: 1, scope: !6859, file: !3, line: 2054, type: !1022)
!6861 = !DILocation(line: 2054, column: 41, scope: !6859)
!6862 = !DILocalVariable(name: "node2", scope: !6859, file: !3, line: 2056, type: !2706)
!6863 = !DILocation(line: 2056, column: 24, scope: !6859)
!6864 = !DILocation(line: 2056, column: 33, scope: !6859)
!6865 = !DILocation(line: 2056, column: 39, scope: !6859)
!6866 = !DILocation(line: 2056, column: 47, scope: !6859)
!6867 = !DILocation(line: 2057, column: 3, scope: !6859)
!6868 = !DILocation(line: 2059, column: 3, scope: !6859)
!6869 = !DILocation(line: 2059, column: 11, scope: !6859)
!6870 = !DILocation(line: 2059, column: 10, scope: !6859)
!6871 = !DILocation(line: 2059, column: 20, scope: !6859)
!6872 = !DILocation(line: 2059, column: 17, scope: !6859)
!6873 = !DILocation(line: 2060, column: 16, scope: !6859)
!6874 = !DILocation(line: 2060, column: 15, scope: !6859)
!6875 = !DILocation(line: 2060, column: 24, scope: !6859)
!6876 = !DILocation(line: 2060, column: 11, scope: !6859)
!6877 = distinct !{!6877, !6868, !6875}
!6878 = !DILocation(line: 2061, column: 12, scope: !6859)
!6879 = !DILocation(line: 2061, column: 18, scope: !6859)
!6880 = !DILocation(line: 2061, column: 4, scope: !6859)
!6881 = !DILocation(line: 2061, column: 10, scope: !6859)
!6882 = !DILocation(line: 2062, column: 3, scope: !6859)
!6883 = !DILocation(line: 2062, column: 9, scope: !6859)
!6884 = !DILocation(line: 2062, column: 16, scope: !6859)
!6885 = !DILocation(line: 2063, column: 1, scope: !6859)
!6886 = distinct !DISubprogram(name: "cgraph_add_new_function", scope: !3, file: !3, line: 2114, type: !6887, scopeLine: 2115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!6887 = !DISubroutineType(types: !6888)
!6888 = !{null, !1026, !1145}
!6889 = !DILocalVariable(name: "fndecl", arg: 1, scope: !6886, file: !3, line: 2114, type: !1026)
!6890 = !DILocation(line: 2114, column: 31, scope: !6886)
!6891 = !DILocalVariable(name: "lowered", arg: 2, scope: !6886, file: !3, line: 2114, type: !1145)
!6892 = !DILocation(line: 2114, column: 44, scope: !6886)
!6893 = !DILocalVariable(name: "node", scope: !6886, file: !3, line: 2116, type: !1022)
!6894 = !DILocation(line: 2116, column: 23, scope: !6886)
!6895 = !DILocation(line: 2117, column: 11, scope: !6886)
!6896 = !DILocation(line: 2117, column: 3, scope: !6886)
!6897 = !DILocation(line: 2121, column: 22, scope: !6898)
!6898 = distinct !DILexicalBlock(scope: !6886, file: !3, line: 2118, column: 5)
!6899 = !DILocation(line: 2121, column: 9, scope: !6898)
!6900 = !DILocation(line: 2121, column: 7, scope: !6898)
!6901 = !DILocation(line: 2122, column: 22, scope: !6898)
!6902 = !DILocation(line: 2122, column: 2, scope: !6898)
!6903 = !DILocation(line: 2122, column: 8, scope: !6898)
!6904 = !DILocation(line: 2122, column: 20, scope: !6898)
!6905 = !DILocation(line: 2123, column: 6, scope: !6906)
!6906 = distinct !DILexicalBlock(scope: !6898, file: !3, line: 2123, column: 6)
!6907 = !DILocation(line: 2123, column: 6, scope: !6898)
!6908 = !DILocation(line: 2124, column: 4, scope: !6906)
!6909 = !DILocation(line: 2124, column: 10, scope: !6906)
!6910 = !DILocation(line: 2124, column: 18, scope: !6906)
!6911 = !DILocation(line: 2125, column: 21, scope: !6898)
!6912 = !DILocation(line: 2125, column: 19, scope: !6898)
!6913 = !DILocation(line: 2126, column: 9, scope: !6898)
!6914 = !DILocation(line: 2133, column: 22, scope: !6898)
!6915 = !DILocation(line: 2133, column: 9, scope: !6898)
!6916 = !DILocation(line: 2133, column: 7, scope: !6898)
!6917 = !DILocation(line: 2134, column: 2, scope: !6898)
!6918 = !DILocation(line: 2134, column: 8, scope: !6898)
!6919 = !DILocation(line: 2134, column: 14, scope: !6898)
!6920 = !DILocation(line: 2134, column: 20, scope: !6898)
!6921 = !DILocation(line: 2135, column: 2, scope: !6898)
!6922 = !DILocation(line: 2135, column: 8, scope: !6898)
!6923 = !DILocation(line: 2135, column: 14, scope: !6898)
!6924 = !DILocation(line: 2135, column: 24, scope: !6898)
!6925 = !DILocation(line: 2136, column: 20, scope: !6898)
!6926 = !DILocation(line: 2136, column: 26, scope: !6898)
!6927 = !DILocation(line: 2136, column: 33, scope: !6898)
!6928 = !DILocation(line: 2136, column: 2, scope: !6898)
!6929 = !DILocation(line: 2136, column: 8, scope: !6898)
!6930 = !DILocation(line: 2136, column: 18, scope: !6898)
!6931 = !DILocation(line: 2137, column: 7, scope: !6932)
!6932 = distinct !DILexicalBlock(scope: !6898, file: !3, line: 2137, column: 6)
!6933 = !DILocation(line: 2137, column: 15, scope: !6932)
!6934 = !DILocation(line: 2137, column: 18, scope: !6932)
!6935 = !DILocation(line: 2137, column: 31, scope: !6932)
!6936 = !DILocation(line: 2137, column: 6, scope: !6898)
!6937 = !DILocation(line: 2139, column: 17, scope: !6938)
!6938 = distinct !DILexicalBlock(scope: !6932, file: !3, line: 2138, column: 4)
!6939 = !DILocation(line: 2139, column: 6, scope: !6938)
!6940 = !DILocation(line: 2140, column: 30, scope: !6938)
!6941 = !DILocation(line: 2140, column: 28, scope: !6938)
!6942 = !DILocation(line: 2141, column: 6, scope: !6938)
!6943 = !DILocation(line: 2142, column: 28, scope: !6938)
!6944 = !DILocation(line: 2142, column: 6, scope: !6938)
!6945 = !DILocation(line: 2143, column: 6, scope: !6938)
!6946 = !DILocation(line: 2144, column: 28, scope: !6947)
!6947 = distinct !DILexicalBlock(scope: !6938, file: !3, line: 2144, column: 10)
!6948 = !DILocation(line: 2144, column: 11, scope: !6947)
!6949 = !DILocation(line: 2144, column: 10, scope: !6938)
!6950 = !DILocation(line: 2145, column: 56, scope: !6947)
!6951 = !DILocation(line: 2145, column: 8, scope: !6947)
!6952 = !DILocation(line: 2146, column: 6, scope: !6938)
!6953 = !DILocation(line: 2147, column: 6, scope: !6938)
!6954 = !DILocation(line: 2148, column: 28, scope: !6938)
!6955 = !DILocation(line: 2150, column: 14, scope: !6938)
!6956 = !DILocation(line: 2151, column: 4, scope: !6938)
!6957 = !DILocation(line: 2152, column: 6, scope: !6958)
!6958 = distinct !DILexicalBlock(scope: !6898, file: !3, line: 2152, column: 6)
!6959 = !DILocation(line: 2152, column: 6, scope: !6898)
!6960 = !DILocation(line: 2153, column: 4, scope: !6958)
!6961 = !DILocation(line: 2153, column: 10, scope: !6958)
!6962 = !DILocation(line: 2153, column: 18, scope: !6958)
!6963 = !DILocation(line: 2154, column: 22, scope: !6898)
!6964 = !DILocation(line: 2154, column: 2, scope: !6898)
!6965 = !DILocation(line: 2154, column: 8, scope: !6898)
!6966 = !DILocation(line: 2154, column: 20, scope: !6898)
!6967 = !DILocation(line: 2155, column: 21, scope: !6898)
!6968 = !DILocation(line: 2155, column: 19, scope: !6898)
!6969 = !DILocation(line: 2156, column: 9, scope: !6898)
!6970 = !DILocation(line: 2161, column: 13, scope: !6898)
!6971 = !DILocation(line: 2161, column: 2, scope: !6898)
!6972 = !DILocation(line: 2162, column: 26, scope: !6898)
!6973 = !DILocation(line: 2162, column: 24, scope: !6898)
!6974 = !DILocation(line: 2163, column: 2, scope: !6898)
!6975 = !DILocation(line: 2164, column: 7, scope: !6976)
!6976 = distinct !DILexicalBlock(scope: !6898, file: !3, line: 2164, column: 6)
!6977 = !DILocation(line: 2164, column: 6, scope: !6898)
!6978 = !DILocation(line: 2165, column: 33, scope: !6976)
!6979 = !DILocation(line: 2165, column: 11, scope: !6976)
!6980 = !DILocation(line: 2166, column: 2, scope: !6898)
!6981 = !DILocation(line: 2167, column: 24, scope: !6982)
!6982 = distinct !DILexicalBlock(scope: !6898, file: !3, line: 2167, column: 6)
!6983 = !DILocation(line: 2167, column: 7, scope: !6982)
!6984 = !DILocation(line: 2167, column: 6, scope: !6898)
!6985 = !DILocation(line: 2168, column: 52, scope: !6982)
!6986 = !DILocation(line: 2168, column: 4, scope: !6982)
!6987 = !DILocation(line: 2169, column: 2, scope: !6898)
!6988 = !DILocation(line: 2170, column: 28, scope: !6898)
!6989 = !DILocation(line: 2170, column: 2, scope: !6898)
!6990 = !DILocation(line: 2171, column: 2, scope: !6898)
!6991 = !DILocation(line: 2172, column: 24, scope: !6898)
!6992 = !DILocation(line: 2173, column: 2, scope: !6898)
!6993 = !DILocation(line: 2177, column: 7, scope: !6994)
!6994 = distinct !DILexicalBlock(scope: !6886, file: !3, line: 2177, column: 7)
!6995 = !DILocation(line: 2178, column: 7, scope: !6994)
!6996 = !DILocation(line: 2178, column: 42, scope: !6994)
!6997 = !DILocation(line: 2178, column: 11, scope: !6994)
!6998 = !DILocation(line: 2179, column: 4, scope: !6994)
!6999 = !DILocation(line: 2177, column: 7, scope: !6886)
!7000 = !DILocation(line: 2180, column: 53, scope: !6994)
!7001 = !DILocation(line: 2180, column: 42, scope: !6994)
!7002 = !DILocation(line: 2180, column: 5, scope: !6994)
!7003 = !DILocation(line: 2180, column: 40, scope: !6994)
!7004 = !DILocation(line: 2181, column: 1, scope: !6886)
!7005 = distinct !DISubprogram(name: "gimple_in_ssa_p", scope: !7006, file: !7006, line: 33, type: !7007, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7006 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7007 = !DISubroutineType(types: !7008)
!7008 = !{!1145, !7009}
!7009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7010, size: 64)
!7010 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1777)
!7011 = !DILocalVariable(name: "fun", arg: 1, scope: !7005, file: !7006, line: 33, type: !7009)
!7012 = !DILocation(line: 33, column: 41, scope: !7005)
!7013 = !DILocation(line: 35, column: 10, scope: !7005)
!7014 = !DILocation(line: 35, column: 14, scope: !7005)
!7015 = !DILocation(line: 35, column: 17, scope: !7005)
!7016 = !DILocation(line: 35, column: 22, scope: !7005)
!7017 = !DILocation(line: 35, column: 32, scope: !7005)
!7018 = !DILocation(line: 35, column: 35, scope: !7005)
!7019 = !DILocation(line: 35, column: 40, scope: !7005)
!7020 = !DILocation(line: 35, column: 51, scope: !7005)
!7021 = !DILocation(line: 0, scope: !7005)
!7022 = !DILocation(line: 35, column: 3, scope: !7005)
!7023 = distinct !DISubprogram(name: "cgraph_node_can_be_local_p", scope: !3, file: !3, line: 2188, type: !7024, scopeLine: 2189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7024 = !DISubroutineType(types: !7025)
!7025 = !{!1145, !1022}
!7026 = !DILocalVariable(name: "node", arg: 1, scope: !7023, file: !3, line: 2188, type: !1022)
!7027 = !DILocation(line: 2188, column: 49, scope: !7023)
!7028 = !DILocation(line: 2190, column: 12, scope: !7023)
!7029 = !DILocation(line: 2190, column: 18, scope: !7023)
!7030 = !DILocation(line: 2191, column: 4, scope: !7023)
!7031 = !DILocation(line: 2191, column: 9, scope: !7023)
!7032 = !DILocation(line: 2191, column: 34, scope: !7023)
!7033 = !DILocation(line: 2191, column: 38, scope: !7023)
!7034 = !DILocation(line: 2191, column: 44, scope: !7023)
!7035 = !DILocation(line: 2192, column: 8, scope: !7023)
!7036 = !DILocation(line: 2192, column: 12, scope: !7023)
!7037 = !DILocation(line: 2192, column: 18, scope: !7023)
!7038 = !DILocation(line: 2192, column: 24, scope: !7023)
!7039 = !DILocation(line: 2192, column: 11, scope: !7023)
!7040 = !DILocation(line: 0, scope: !7023)
!7041 = !DILocation(line: 2190, column: 10, scope: !7023)
!7042 = !DILocation(line: 2190, column: 3, scope: !7023)
!7043 = distinct !DISubprogram(name: "cgraph_make_decl_local", scope: !3, file: !3, line: 2198, type: !7044, scopeLine: 2199, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7044 = !DISubroutineType(types: !7045)
!7045 = !{null, !1026}
!7046 = !DILocalVariable(name: "decl", arg: 1, scope: !7043, file: !3, line: 2198, type: !1026)
!7047 = !DILocation(line: 2198, column: 30, scope: !7043)
!7048 = !DILocalVariable(name: "rtl", scope: !7043, file: !3, line: 2200, type: !1203)
!7049 = !DILocation(line: 2200, column: 7, scope: !7043)
!7050 = !DILocalVariable(name: "symbol", scope: !7043, file: !3, line: 2200, type: !1203)
!7051 = !DILocation(line: 2200, column: 12, scope: !7043)
!7052 = !DILocation(line: 2202, column: 7, scope: !7053)
!7053 = distinct !DILexicalBlock(scope: !7043, file: !3, line: 2202, column: 7)
!7054 = !DILocation(line: 2202, column: 24, scope: !7053)
!7055 = !DILocation(line: 2202, column: 7, scope: !7043)
!7056 = !DILocation(line: 2203, column: 5, scope: !7053)
!7057 = !DILocation(line: 2203, column: 24, scope: !7053)
!7058 = !DILocation(line: 2204, column: 12, scope: !7059)
!7059 = distinct !DILexicalBlock(scope: !7053, file: !3, line: 2204, column: 12)
!7060 = !DILocation(line: 2204, column: 29, scope: !7059)
!7061 = !DILocation(line: 2204, column: 12, scope: !7053)
!7062 = !DILocation(line: 2206, column: 7, scope: !7063)
!7063 = distinct !DILexicalBlock(scope: !7059, file: !3, line: 2205, column: 5)
!7064 = !DILocation(line: 2206, column: 26, scope: !7063)
!7065 = !DILocation(line: 2207, column: 7, scope: !7063)
!7066 = !DILocation(line: 2207, column: 32, scope: !7063)
!7067 = !DILocation(line: 2208, column: 7, scope: !7063)
!7068 = !DILocation(line: 2208, column: 24, scope: !7063)
!7069 = !DILocation(line: 2209, column: 7, scope: !7063)
!7070 = !DILocation(line: 2209, column: 28, scope: !7063)
!7071 = !DILocation(line: 2210, column: 5, scope: !7063)
!7072 = !DILocation(line: 2212, column: 5, scope: !7059)
!7073 = !DILocation(line: 2213, column: 3, scope: !7043)
!7074 = !DILocation(line: 2213, column: 22, scope: !7043)
!7075 = !DILocation(line: 2214, column: 8, scope: !7076)
!7076 = distinct !DILexicalBlock(scope: !7043, file: !3, line: 2214, column: 7)
!7077 = !DILocation(line: 2214, column: 7, scope: !7043)
!7078 = !DILocation(line: 2215, column: 5, scope: !7076)
!7079 = !DILocation(line: 2218, column: 18, scope: !7043)
!7080 = !DILocation(line: 2218, column: 3, scope: !7043)
!7081 = !DILocation(line: 2220, column: 9, scope: !7043)
!7082 = !DILocation(line: 2220, column: 7, scope: !7043)
!7083 = !DILocation(line: 2221, column: 8, scope: !7084)
!7084 = distinct !DILexicalBlock(scope: !7043, file: !3, line: 2221, column: 7)
!7085 = !DILocation(line: 2221, column: 7, scope: !7043)
!7086 = !DILocation(line: 2222, column: 5, scope: !7084)
!7087 = !DILocation(line: 2224, column: 12, scope: !7043)
!7088 = !DILocation(line: 2224, column: 10, scope: !7043)
!7089 = !DILocation(line: 2225, column: 7, scope: !7090)
!7090 = distinct !DILexicalBlock(scope: !7043, file: !3, line: 2225, column: 7)
!7091 = !DILocation(line: 2225, column: 25, scope: !7090)
!7092 = !DILocation(line: 2225, column: 7, scope: !7043)
!7093 = !DILocation(line: 2226, column: 5, scope: !7090)
!7094 = !DILocation(line: 2228, column: 30, scope: !7043)
!7095 = !DILocation(line: 2228, column: 3, scope: !7043)
!7096 = !DILocation(line: 2228, column: 28, scope: !7043)
!7097 = !DILocation(line: 2229, column: 1, scope: !7043)
!7098 = distinct !DISubprogram(name: "cgraph_make_node_local", scope: !3, file: !3, line: 2233, type: !2541, scopeLine: 2234, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7099 = !DILocalVariable(name: "node", arg: 1, scope: !7098, file: !3, line: 2233, type: !1022)
!7100 = !DILocation(line: 2233, column: 45, scope: !7098)
!7101 = !DILocation(line: 2235, column: 3, scope: !7098)
!7102 = !DILocation(line: 2236, column: 7, scope: !7103)
!7103 = distinct !DILexicalBlock(scope: !7098, file: !3, line: 2236, column: 7)
!7104 = !DILocation(line: 2236, column: 32, scope: !7103)
!7105 = !DILocation(line: 2236, column: 35, scope: !7103)
!7106 = !DILocation(line: 2236, column: 7, scope: !7098)
!7107 = !DILocalVariable(name: "alias", scope: !7108, file: !3, line: 2238, type: !1022)
!7108 = distinct !DILexicalBlock(scope: !7103, file: !3, line: 2237, column: 5)
!7109 = !DILocation(line: 2238, column: 27, scope: !7108)
!7110 = !DILocation(line: 2239, column: 31, scope: !7108)
!7111 = !DILocation(line: 2239, column: 37, scope: !7108)
!7112 = !DILocation(line: 2239, column: 7, scope: !7108)
!7113 = !DILocation(line: 2241, column: 20, scope: !7114)
!7114 = distinct !DILexicalBlock(scope: !7108, file: !3, line: 2241, column: 7)
!7115 = !DILocation(line: 2241, column: 26, scope: !7114)
!7116 = !DILocation(line: 2241, column: 18, scope: !7114)
!7117 = !DILocation(line: 2241, column: 12, scope: !7114)
!7118 = !DILocation(line: 2241, column: 37, scope: !7119)
!7119 = distinct !DILexicalBlock(scope: !7114, file: !3, line: 2241, column: 7)
!7120 = !DILocation(line: 2241, column: 7, scope: !7114)
!7121 = !DILocation(line: 2242, column: 26, scope: !7119)
!7122 = !DILocation(line: 2242, column: 33, scope: !7119)
!7123 = !DILocation(line: 2242, column: 2, scope: !7119)
!7124 = !DILocation(line: 2241, column: 52, scope: !7119)
!7125 = !DILocation(line: 2241, column: 59, scope: !7119)
!7126 = !DILocation(line: 2241, column: 50, scope: !7119)
!7127 = !DILocation(line: 2241, column: 7, scope: !7119)
!7128 = distinct !{!7128, !7120, !7129}
!7129 = !DILocation(line: 2242, column: 37, scope: !7114)
!7130 = !DILocation(line: 2244, column: 7, scope: !7108)
!7131 = !DILocation(line: 2244, column: 13, scope: !7108)
!7132 = !DILocation(line: 2244, column: 19, scope: !7108)
!7133 = !DILocation(line: 2244, column: 38, scope: !7108)
!7134 = !DILocation(line: 2245, column: 7, scope: !7108)
!7135 = !DILocation(line: 2245, column: 13, scope: !7108)
!7136 = !DILocation(line: 2245, column: 19, scope: !7108)
!7137 = !DILocation(line: 2245, column: 25, scope: !7108)
!7138 = !DILocation(line: 2246, column: 7, scope: !7108)
!7139 = !DILocation(line: 2247, column: 5, scope: !7108)
!7140 = !DILocation(line: 2248, column: 1, scope: !7098)
!7141 = distinct !DISubprogram(name: "cgraph_set_nothrow_flag", scope: !3, file: !3, line: 2254, type: !7142, scopeLine: 2255, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7142 = !DISubroutineType(types: !7143)
!7143 = !{null, !1022, !1145}
!7144 = !DILocalVariable(name: "node", arg: 1, scope: !7141, file: !3, line: 2254, type: !1022)
!7145 = !DILocation(line: 2254, column: 46, scope: !7141)
!7146 = !DILocalVariable(name: "nothrow", arg: 2, scope: !7141, file: !3, line: 2254, type: !1145)
!7147 = !DILocation(line: 2254, column: 57, scope: !7141)
!7148 = !DILocalVariable(name: "alias", scope: !7141, file: !3, line: 2256, type: !1022)
!7149 = !DILocation(line: 2256, column: 23, scope: !7141)
!7150 = !DILocation(line: 2257, column: 31, scope: !7141)
!7151 = !DILocation(line: 2257, column: 3, scope: !7141)
!7152 = !DILocation(line: 2257, column: 29, scope: !7141)
!7153 = !DILocation(line: 2258, column: 16, scope: !7154)
!7154 = distinct !DILexicalBlock(scope: !7141, file: !3, line: 2258, column: 3)
!7155 = !DILocation(line: 2258, column: 22, scope: !7154)
!7156 = !DILocation(line: 2258, column: 14, scope: !7154)
!7157 = !DILocation(line: 2258, column: 8, scope: !7154)
!7158 = !DILocation(line: 2258, column: 33, scope: !7159)
!7159 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 2258, column: 3)
!7160 = !DILocation(line: 2258, column: 3, scope: !7154)
!7161 = !DILocation(line: 2259, column: 34, scope: !7159)
!7162 = !DILocation(line: 2259, column: 5, scope: !7159)
!7163 = !DILocation(line: 2259, column: 32, scope: !7159)
!7164 = !DILocation(line: 2258, column: 48, scope: !7159)
!7165 = !DILocation(line: 2258, column: 55, scope: !7159)
!7166 = !DILocation(line: 2258, column: 46, scope: !7159)
!7167 = !DILocation(line: 2258, column: 3, scope: !7159)
!7168 = distinct !{!7168, !7160, !7169}
!7169 = !DILocation(line: 2259, column: 34, scope: !7154)
!7170 = !DILocation(line: 2260, column: 1, scope: !7141)
!7171 = distinct !DISubprogram(name: "cgraph_set_readonly_flag", scope: !3, file: !3, line: 2266, type: !7142, scopeLine: 2267, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7172 = !DILocalVariable(name: "node", arg: 1, scope: !7171, file: !3, line: 2266, type: !1022)
!7173 = !DILocation(line: 2266, column: 47, scope: !7171)
!7174 = !DILocalVariable(name: "readonly", arg: 2, scope: !7171, file: !3, line: 2266, type: !1145)
!7175 = !DILocation(line: 2266, column: 58, scope: !7171)
!7176 = !DILocalVariable(name: "alias", scope: !7171, file: !3, line: 2268, type: !1022)
!7177 = !DILocation(line: 2268, column: 23, scope: !7171)
!7178 = !DILocation(line: 2269, column: 32, scope: !7171)
!7179 = !DILocation(line: 2269, column: 3, scope: !7171)
!7180 = !DILocation(line: 2269, column: 30, scope: !7171)
!7181 = !DILocation(line: 2270, column: 16, scope: !7182)
!7182 = distinct !DILexicalBlock(scope: !7171, file: !3, line: 2270, column: 3)
!7183 = !DILocation(line: 2270, column: 22, scope: !7182)
!7184 = !DILocation(line: 2270, column: 14, scope: !7182)
!7185 = !DILocation(line: 2270, column: 8, scope: !7182)
!7186 = !DILocation(line: 2270, column: 33, scope: !7187)
!7187 = distinct !DILexicalBlock(scope: !7182, file: !3, line: 2270, column: 3)
!7188 = !DILocation(line: 2270, column: 3, scope: !7182)
!7189 = !DILocation(line: 2271, column: 35, scope: !7187)
!7190 = !DILocation(line: 2271, column: 5, scope: !7187)
!7191 = !DILocation(line: 2271, column: 33, scope: !7187)
!7192 = !DILocation(line: 2270, column: 48, scope: !7187)
!7193 = !DILocation(line: 2270, column: 55, scope: !7187)
!7194 = !DILocation(line: 2270, column: 46, scope: !7187)
!7195 = !DILocation(line: 2270, column: 3, scope: !7187)
!7196 = distinct !{!7196, !7188, !7197}
!7197 = !DILocation(line: 2271, column: 35, scope: !7182)
!7198 = !DILocation(line: 2272, column: 1, scope: !7171)
!7199 = distinct !DISubprogram(name: "cgraph_set_pure_flag", scope: !3, file: !3, line: 2278, type: !7142, scopeLine: 2279, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7200 = !DILocalVariable(name: "node", arg: 1, scope: !7199, file: !3, line: 2278, type: !1022)
!7201 = !DILocation(line: 2278, column: 43, scope: !7199)
!7202 = !DILocalVariable(name: "pure", arg: 2, scope: !7199, file: !3, line: 2278, type: !1145)
!7203 = !DILocation(line: 2278, column: 54, scope: !7199)
!7204 = !DILocalVariable(name: "alias", scope: !7199, file: !3, line: 2280, type: !1022)
!7205 = !DILocation(line: 2280, column: 23, scope: !7199)
!7206 = !DILocation(line: 2281, column: 30, scope: !7199)
!7207 = !DILocation(line: 2281, column: 3, scope: !7199)
!7208 = !DILocation(line: 2281, column: 28, scope: !7199)
!7209 = !DILocation(line: 2282, column: 16, scope: !7210)
!7210 = distinct !DILexicalBlock(scope: !7199, file: !3, line: 2282, column: 3)
!7211 = !DILocation(line: 2282, column: 22, scope: !7210)
!7212 = !DILocation(line: 2282, column: 14, scope: !7210)
!7213 = !DILocation(line: 2282, column: 8, scope: !7210)
!7214 = !DILocation(line: 2282, column: 33, scope: !7215)
!7215 = distinct !DILexicalBlock(scope: !7210, file: !3, line: 2282, column: 3)
!7216 = !DILocation(line: 2282, column: 3, scope: !7210)
!7217 = !DILocation(line: 2283, column: 33, scope: !7215)
!7218 = !DILocation(line: 2283, column: 5, scope: !7215)
!7219 = !DILocation(line: 2283, column: 31, scope: !7215)
!7220 = !DILocation(line: 2282, column: 48, scope: !7215)
!7221 = !DILocation(line: 2282, column: 55, scope: !7215)
!7222 = !DILocation(line: 2282, column: 46, scope: !7215)
!7223 = !DILocation(line: 2282, column: 3, scope: !7215)
!7224 = distinct !{!7224, !7216, !7225}
!7225 = !DILocation(line: 2283, column: 33, scope: !7210)
!7226 = !DILocation(line: 2284, column: 1, scope: !7199)
!7227 = distinct !DISubprogram(name: "cgraph_set_looping_const_or_pure_flag", scope: !3, file: !3, line: 2290, type: !7142, scopeLine: 2292, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7228 = !DILocalVariable(name: "node", arg: 1, scope: !7227, file: !3, line: 2290, type: !1022)
!7229 = !DILocation(line: 2290, column: 60, scope: !7227)
!7230 = !DILocalVariable(name: "looping_const_or_pure", arg: 2, scope: !7227, file: !3, line: 2291, type: !1145)
!7231 = !DILocation(line: 2291, column: 17, scope: !7227)
!7232 = !DILocalVariable(name: "alias", scope: !7227, file: !3, line: 2293, type: !1022)
!7233 = !DILocation(line: 2293, column: 23, scope: !7227)
!7234 = !DILocation(line: 2294, column: 47, scope: !7227)
!7235 = !DILocation(line: 2294, column: 3, scope: !7227)
!7236 = !DILocation(line: 2294, column: 45, scope: !7227)
!7237 = !DILocation(line: 2295, column: 16, scope: !7238)
!7238 = distinct !DILexicalBlock(scope: !7227, file: !3, line: 2295, column: 3)
!7239 = !DILocation(line: 2295, column: 22, scope: !7238)
!7240 = !DILocation(line: 2295, column: 14, scope: !7238)
!7241 = !DILocation(line: 2295, column: 8, scope: !7238)
!7242 = !DILocation(line: 2295, column: 33, scope: !7243)
!7243 = distinct !DILexicalBlock(scope: !7238, file: !3, line: 2295, column: 3)
!7244 = !DILocation(line: 2295, column: 3, scope: !7238)
!7245 = !DILocation(line: 2296, column: 50, scope: !7243)
!7246 = !DILocation(line: 2296, column: 5, scope: !7243)
!7247 = !DILocation(line: 2296, column: 48, scope: !7243)
!7248 = !DILocation(line: 2295, column: 48, scope: !7243)
!7249 = !DILocation(line: 2295, column: 55, scope: !7243)
!7250 = !DILocation(line: 2295, column: 46, scope: !7243)
!7251 = !DILocation(line: 2295, column: 3, scope: !7243)
!7252 = distinct !{!7252, !7244, !7253}
!7253 = !DILocation(line: 2296, column: 50, scope: !7238)
!7254 = !DILocation(line: 2297, column: 1, scope: !7227)
!7255 = distinct !DISubprogram(name: "cgraph_allocate_node", scope: !3, file: !3, line: 424, type: !3269, scopeLine: 425, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7256 = !DILocalVariable(name: "node", scope: !7255, file: !3, line: 426, type: !1022)
!7257 = !DILocation(line: 426, column: 23, scope: !7255)
!7258 = !DILocation(line: 428, column: 7, scope: !7259)
!7259 = distinct !DILexicalBlock(scope: !7255, file: !3, line: 428, column: 7)
!7260 = !DILocation(line: 428, column: 7, scope: !7255)
!7261 = !DILocation(line: 430, column: 14, scope: !7262)
!7262 = distinct !DILexicalBlock(scope: !7259, file: !3, line: 429, column: 5)
!7263 = !DILocation(line: 430, column: 12, scope: !7262)
!7264 = !DILocation(line: 431, column: 20, scope: !7262)
!7265 = !DILocation(line: 431, column: 18, scope: !7262)
!7266 = !DILocation(line: 432, column: 5, scope: !7262)
!7267 = !DILocation(line: 435, column: 14, scope: !7268)
!7268 = distinct !DILexicalBlock(scope: !7259, file: !3, line: 434, column: 5)
!7269 = !DILocation(line: 435, column: 12, scope: !7268)
!7270 = !DILocation(line: 436, column: 33, scope: !7268)
!7271 = !DILocation(line: 436, column: 7, scope: !7268)
!7272 = !DILocation(line: 436, column: 13, scope: !7268)
!7273 = !DILocation(line: 436, column: 17, scope: !7268)
!7274 = !DILocation(line: 439, column: 10, scope: !7255)
!7275 = !DILocation(line: 439, column: 3, scope: !7255)
!7276 = distinct !DISubprogram(name: "gimple_code", scope: !929, file: !929, line: 1052, type: !7277, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7277 = !DISubroutineType(types: !7278)
!7278 = !{!928, !4750}
!7279 = !DILocalVariable(name: "g", arg: 1, scope: !7276, file: !929, line: 1052, type: !4750)
!7280 = !DILocation(line: 1052, column: 27, scope: !7276)
!7281 = !DILocation(line: 1054, column: 10, scope: !7276)
!7282 = !DILocation(line: 1054, column: 13, scope: !7276)
!7283 = !DILocation(line: 1054, column: 20, scope: !7276)
!7284 = !DILocation(line: 1054, column: 3, scope: !7276)
!7285 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !929, file: !929, line: 1954, type: !7286, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7286 = !DISubroutineType(types: !7287)
!7287 = !{!1026, !4750}
!7288 = !DILocalVariable(name: "gs", arg: 1, scope: !7285, file: !929, line: 1954, type: !4750)
!7289 = !DILocation(line: 1954, column: 34, scope: !7285)
!7290 = !DILocalVariable(name: "addr", scope: !7285, file: !929, line: 1956, type: !1026)
!7291 = !DILocation(line: 1956, column: 8, scope: !7285)
!7292 = !DILocation(line: 1956, column: 31, scope: !7285)
!7293 = !DILocation(line: 1956, column: 15, scope: !7285)
!7294 = !DILocation(line: 1957, column: 7, scope: !7295)
!7295 = distinct !DILexicalBlock(scope: !7285, file: !929, line: 1957, column: 7)
!7296 = !DILocation(line: 1957, column: 24, scope: !7295)
!7297 = !DILocation(line: 1957, column: 7, scope: !7285)
!7298 = !DILocation(line: 1958, column: 12, scope: !7295)
!7299 = !DILocation(line: 1958, column: 5, scope: !7295)
!7300 = !DILocation(line: 1959, column: 3, scope: !7285)
!7301 = !DILocation(line: 1960, column: 1, scope: !7285)
!7302 = distinct !DISubprogram(name: "gimple_bb", scope: !929, file: !929, line: 1112, type: !7303, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7303 = !DISubroutineType(types: !7304)
!7304 = !{!1319, !4750}
!7305 = !DILocalVariable(name: "g", arg: 1, scope: !7302, file: !929, line: 1112, type: !4750)
!7306 = !DILocation(line: 1112, column: 25, scope: !7302)
!7307 = !DILocation(line: 1114, column: 10, scope: !7302)
!7308 = !DILocation(line: 1114, column: 13, scope: !7302)
!7309 = !DILocation(line: 1114, column: 20, scope: !7302)
!7310 = !DILocation(line: 1114, column: 3, scope: !7302)
!7311 = distinct !DISubprogram(name: "gimple_call_fn", scope: !929, file: !929, line: 1911, type: !7286, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7312 = !DILocalVariable(name: "gs", arg: 1, scope: !7311, file: !929, line: 1911, type: !4750)
!7313 = !DILocation(line: 1911, column: 30, scope: !7311)
!7314 = !DILocation(line: 1914, column: 21, scope: !7311)
!7315 = !DILocation(line: 1914, column: 10, scope: !7311)
!7316 = !DILocation(line: 1914, column: 3, scope: !7311)
!7317 = distinct !DISubprogram(name: "gimple_op", scope: !929, file: !929, line: 1631, type: !7318, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7318 = !DISubroutineType(types: !7319)
!7319 = !{!1026, !4750, !7}
!7320 = !DILocalVariable(name: "gs", arg: 1, scope: !7317, file: !929, line: 1631, type: !4750)
!7321 = !DILocation(line: 1631, column: 25, scope: !7317)
!7322 = !DILocalVariable(name: "i", arg: 2, scope: !7317, file: !929, line: 1631, type: !7)
!7323 = !DILocation(line: 1631, column: 38, scope: !7317)
!7324 = !DILocation(line: 1633, column: 23, scope: !7325)
!7325 = distinct !DILexicalBlock(scope: !7317, file: !929, line: 1633, column: 7)
!7326 = !DILocation(line: 1633, column: 7, scope: !7325)
!7327 = !DILocation(line: 1633, column: 7, scope: !7317)
!7328 = !DILocation(line: 1638, column: 26, scope: !7329)
!7329 = distinct !DILexicalBlock(scope: !7325, file: !929, line: 1634, column: 5)
!7330 = !DILocation(line: 1638, column: 14, scope: !7329)
!7331 = !DILocation(line: 1638, column: 50, scope: !7329)
!7332 = !DILocation(line: 1638, column: 7, scope: !7329)
!7333 = !DILocation(line: 1641, column: 5, scope: !7325)
!7334 = !DILocation(line: 1642, column: 1, scope: !7317)
!7335 = distinct !DISubprogram(name: "gimple_has_ops", scope: !929, file: !929, line: 1274, type: !4748, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7336 = !DILocalVariable(name: "g", arg: 1, scope: !7335, file: !929, line: 1274, type: !4750)
!7337 = !DILocation(line: 1274, column: 30, scope: !7335)
!7338 = !DILocation(line: 1276, column: 23, scope: !7335)
!7339 = !DILocation(line: 1276, column: 10, scope: !7335)
!7340 = !DILocation(line: 1276, column: 26, scope: !7335)
!7341 = !DILocation(line: 1276, column: 41, scope: !7335)
!7342 = !DILocation(line: 1276, column: 57, scope: !7335)
!7343 = !DILocation(line: 1276, column: 44, scope: !7335)
!7344 = !DILocation(line: 1276, column: 60, scope: !7335)
!7345 = !DILocation(line: 0, scope: !7335)
!7346 = !DILocation(line: 1276, column: 3, scope: !7335)
!7347 = distinct !DISubprogram(name: "gimple_ops", scope: !929, file: !929, line: 1614, type: !7348, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7348 = !DISubroutineType(types: !7349)
!7349 = !{!1390, !1355}
!7350 = !DILocalVariable(name: "gs", arg: 1, scope: !7347, file: !929, line: 1614, type: !1355)
!7351 = !DILocation(line: 1614, column: 20, scope: !7347)
!7352 = !DILocalVariable(name: "off", scope: !7347, file: !929, line: 1616, type: !1501)
!7353 = !DILocation(line: 1616, column: 10, scope: !7347)
!7354 = !DILocation(line: 1621, column: 56, scope: !7347)
!7355 = !DILocation(line: 1621, column: 28, scope: !7347)
!7356 = !DILocation(line: 1621, column: 9, scope: !7347)
!7357 = !DILocation(line: 1621, column: 7, scope: !7347)
!7358 = !DILocation(line: 1622, column: 3, scope: !7347)
!7359 = !DILocation(line: 1624, column: 29, scope: !7347)
!7360 = !DILocation(line: 1624, column: 20, scope: !7347)
!7361 = !DILocation(line: 1624, column: 34, scope: !7347)
!7362 = !DILocation(line: 1624, column: 32, scope: !7347)
!7363 = !DILocation(line: 1624, column: 10, scope: !7347)
!7364 = !DILocation(line: 1624, column: 3, scope: !7347)
!7365 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !929, file: !929, line: 1073, type: !7366, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7366 = !DISubroutineType(types: !7367)
!7367 = !{!980, !1355}
!7368 = !DILocalVariable(name: "gs", arg: 1, scope: !7365, file: !929, line: 1073, type: !1355)
!7369 = !DILocation(line: 1073, column: 36, scope: !7365)
!7370 = !DILocation(line: 1075, column: 37, scope: !7365)
!7371 = !DILocation(line: 1075, column: 24, scope: !7365)
!7372 = !DILocation(line: 1075, column: 10, scope: !7365)
!7373 = !DILocation(line: 1075, column: 3, scope: !7365)
!7374 = distinct !DISubprogram(name: "gss_for_code", scope: !929, file: !929, line: 1061, type: !7375, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2734)
!7375 = !DISubroutineType(types: !7376)
!7376 = !{!980, !928}
!7377 = !DILocalVariable(name: "code", arg: 1, scope: !7374, file: !929, line: 1061, type: !928)
!7378 = !DILocation(line: 1061, column: 32, scope: !7374)
!7379 = !DILocation(line: 1066, column: 24, scope: !7374)
!7380 = !DILocation(line: 1066, column: 10, scope: !7374)
!7381 = !DILocation(line: 1066, column: 3, scope: !7374)
