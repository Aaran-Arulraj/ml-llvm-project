; ModuleID = 'decimal64.c'
source_filename = "decimal64.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.decimal64 = type { [8 x i8] }
%struct.decNumber = type { i32, i32, i8, [6 x i16] }
%struct.decContext = type { i32, i32, i32, i32, i32, i32, i8 }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }

@BIN2DPD = dso_local constant [1000 x i16] [i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 16, i16 17, i16 18, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 64, i16 65, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 73, i16 80, i16 81, i16 82, i16 83, i16 84, i16 85, i16 86, i16 87, i16 88, i16 89, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 10, i16 11, i16 42, i16 43, i16 74, i16 75, i16 106, i16 107, i16 78, i16 79, i16 26, i16 27, i16 58, i16 59, i16 90, i16 91, i16 122, i16 123, i16 94, i16 95, i16 128, i16 129, i16 130, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 144, i16 145, i16 146, i16 147, i16 148, i16 149, i16 150, i16 151, i16 152, i16 153, i16 160, i16 161, i16 162, i16 163, i16 164, i16 165, i16 166, i16 167, i16 168, i16 169, i16 176, i16 177, i16 178, i16 179, i16 180, i16 181, i16 182, i16 183, i16 184, i16 185, i16 192, i16 193, i16 194, i16 195, i16 196, i16 197, i16 198, i16 199, i16 200, i16 201, i16 208, i16 209, i16 210, i16 211, i16 212, i16 213, i16 214, i16 215, i16 216, i16 217, i16 224, i16 225, i16 226, i16 227, i16 228, i16 229, i16 230, i16 231, i16 232, i16 233, i16 240, i16 241, i16 242, i16 243, i16 244, i16 245, i16 246, i16 247, i16 248, i16 249, i16 138, i16 139, i16 170, i16 171, i16 202, i16 203, i16 234, i16 235, i16 206, i16 207, i16 154, i16 155, i16 186, i16 187, i16 218, i16 219, i16 250, i16 251, i16 222, i16 223, i16 256, i16 257, i16 258, i16 259, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 272, i16 273, i16 274, i16 275, i16 276, i16 277, i16 278, i16 279, i16 280, i16 281, i16 288, i16 289, i16 290, i16 291, i16 292, i16 293, i16 294, i16 295, i16 296, i16 297, i16 304, i16 305, i16 306, i16 307, i16 308, i16 309, i16 310, i16 311, i16 312, i16 313, i16 320, i16 321, i16 322, i16 323, i16 324, i16 325, i16 326, i16 327, i16 328, i16 329, i16 336, i16 337, i16 338, i16 339, i16 340, i16 341, i16 342, i16 343, i16 344, i16 345, i16 352, i16 353, i16 354, i16 355, i16 356, i16 357, i16 358, i16 359, i16 360, i16 361, i16 368, i16 369, i16 370, i16 371, i16 372, i16 373, i16 374, i16 375, i16 376, i16 377, i16 266, i16 267, i16 298, i16 299, i16 330, i16 331, i16 362, i16 363, i16 334, i16 335, i16 282, i16 283, i16 314, i16 315, i16 346, i16 347, i16 378, i16 379, i16 350, i16 351, i16 384, i16 385, i16 386, i16 387, i16 388, i16 389, i16 390, i16 391, i16 392, i16 393, i16 400, i16 401, i16 402, i16 403, i16 404, i16 405, i16 406, i16 407, i16 408, i16 409, i16 416, i16 417, i16 418, i16 419, i16 420, i16 421, i16 422, i16 423, i16 424, i16 425, i16 432, i16 433, i16 434, i16 435, i16 436, i16 437, i16 438, i16 439, i16 440, i16 441, i16 448, i16 449, i16 450, i16 451, i16 452, i16 453, i16 454, i16 455, i16 456, i16 457, i16 464, i16 465, i16 466, i16 467, i16 468, i16 469, i16 470, i16 471, i16 472, i16 473, i16 480, i16 481, i16 482, i16 483, i16 484, i16 485, i16 486, i16 487, i16 488, i16 489, i16 496, i16 497, i16 498, i16 499, i16 500, i16 501, i16 502, i16 503, i16 504, i16 505, i16 394, i16 395, i16 426, i16 427, i16 458, i16 459, i16 490, i16 491, i16 462, i16 463, i16 410, i16 411, i16 442, i16 443, i16 474, i16 475, i16 506, i16 507, i16 478, i16 479, i16 512, i16 513, i16 514, i16 515, i16 516, i16 517, i16 518, i16 519, i16 520, i16 521, i16 528, i16 529, i16 530, i16 531, i16 532, i16 533, i16 534, i16 535, i16 536, i16 537, i16 544, i16 545, i16 546, i16 547, i16 548, i16 549, i16 550, i16 551, i16 552, i16 553, i16 560, i16 561, i16 562, i16 563, i16 564, i16 565, i16 566, i16 567, i16 568, i16 569, i16 576, i16 577, i16 578, i16 579, i16 580, i16 581, i16 582, i16 583, i16 584, i16 585, i16 592, i16 593, i16 594, i16 595, i16 596, i16 597, i16 598, i16 599, i16 600, i16 601, i16 608, i16 609, i16 610, i16 611, i16 612, i16 613, i16 614, i16 615, i16 616, i16 617, i16 624, i16 625, i16 626, i16 627, i16 628, i16 629, i16 630, i16 631, i16 632, i16 633, i16 522, i16 523, i16 554, i16 555, i16 586, i16 587, i16 618, i16 619, i16 590, i16 591, i16 538, i16 539, i16 570, i16 571, i16 602, i16 603, i16 634, i16 635, i16 606, i16 607, i16 640, i16 641, i16 642, i16 643, i16 644, i16 645, i16 646, i16 647, i16 648, i16 649, i16 656, i16 657, i16 658, i16 659, i16 660, i16 661, i16 662, i16 663, i16 664, i16 665, i16 672, i16 673, i16 674, i16 675, i16 676, i16 677, i16 678, i16 679, i16 680, i16 681, i16 688, i16 689, i16 690, i16 691, i16 692, i16 693, i16 694, i16 695, i16 696, i16 697, i16 704, i16 705, i16 706, i16 707, i16 708, i16 709, i16 710, i16 711, i16 712, i16 713, i16 720, i16 721, i16 722, i16 723, i16 724, i16 725, i16 726, i16 727, i16 728, i16 729, i16 736, i16 737, i16 738, i16 739, i16 740, i16 741, i16 742, i16 743, i16 744, i16 745, i16 752, i16 753, i16 754, i16 755, i16 756, i16 757, i16 758, i16 759, i16 760, i16 761, i16 650, i16 651, i16 682, i16 683, i16 714, i16 715, i16 746, i16 747, i16 718, i16 719, i16 666, i16 667, i16 698, i16 699, i16 730, i16 731, i16 762, i16 763, i16 734, i16 735, i16 768, i16 769, i16 770, i16 771, i16 772, i16 773, i16 774, i16 775, i16 776, i16 777, i16 784, i16 785, i16 786, i16 787, i16 788, i16 789, i16 790, i16 791, i16 792, i16 793, i16 800, i16 801, i16 802, i16 803, i16 804, i16 805, i16 806, i16 807, i16 808, i16 809, i16 816, i16 817, i16 818, i16 819, i16 820, i16 821, i16 822, i16 823, i16 824, i16 825, i16 832, i16 833, i16 834, i16 835, i16 836, i16 837, i16 838, i16 839, i16 840, i16 841, i16 848, i16 849, i16 850, i16 851, i16 852, i16 853, i16 854, i16 855, i16 856, i16 857, i16 864, i16 865, i16 866, i16 867, i16 868, i16 869, i16 870, i16 871, i16 872, i16 873, i16 880, i16 881, i16 882, i16 883, i16 884, i16 885, i16 886, i16 887, i16 888, i16 889, i16 778, i16 779, i16 810, i16 811, i16 842, i16 843, i16 874, i16 875, i16 846, i16 847, i16 794, i16 795, i16 826, i16 827, i16 858, i16 859, i16 890, i16 891, i16 862, i16 863, i16 896, i16 897, i16 898, i16 899, i16 900, i16 901, i16 902, i16 903, i16 904, i16 905, i16 912, i16 913, i16 914, i16 915, i16 916, i16 917, i16 918, i16 919, i16 920, i16 921, i16 928, i16 929, i16 930, i16 931, i16 932, i16 933, i16 934, i16 935, i16 936, i16 937, i16 944, i16 945, i16 946, i16 947, i16 948, i16 949, i16 950, i16 951, i16 952, i16 953, i16 960, i16 961, i16 962, i16 963, i16 964, i16 965, i16 966, i16 967, i16 968, i16 969, i16 976, i16 977, i16 978, i16 979, i16 980, i16 981, i16 982, i16 983, i16 984, i16 985, i16 992, i16 993, i16 994, i16 995, i16 996, i16 997, i16 998, i16 999, i16 1000, i16 1001, i16 1008, i16 1009, i16 1010, i16 1011, i16 1012, i16 1013, i16 1014, i16 1015, i16 1016, i16 1017, i16 906, i16 907, i16 938, i16 939, i16 970, i16 971, i16 1002, i16 1003, i16 974, i16 975, i16 922, i16 923, i16 954, i16 955, i16 986, i16 987, i16 1018, i16 1019, i16 990, i16 991, i16 12, i16 13, i16 268, i16 269, i16 524, i16 525, i16 780, i16 781, i16 46, i16 47, i16 28, i16 29, i16 284, i16 285, i16 540, i16 541, i16 796, i16 797, i16 62, i16 63, i16 44, i16 45, i16 300, i16 301, i16 556, i16 557, i16 812, i16 813, i16 302, i16 303, i16 60, i16 61, i16 316, i16 317, i16 572, i16 573, i16 828, i16 829, i16 318, i16 319, i16 76, i16 77, i16 332, i16 333, i16 588, i16 589, i16 844, i16 845, i16 558, i16 559, i16 92, i16 93, i16 348, i16 349, i16 604, i16 605, i16 860, i16 861, i16 574, i16 575, i16 108, i16 109, i16 364, i16 365, i16 620, i16 621, i16 876, i16 877, i16 814, i16 815, i16 124, i16 125, i16 380, i16 381, i16 636, i16 637, i16 892, i16 893, i16 830, i16 831, i16 14, i16 15, i16 270, i16 271, i16 526, i16 527, i16 782, i16 783, i16 110, i16 111, i16 30, i16 31, i16 286, i16 287, i16 542, i16 543, i16 798, i16 799, i16 126, i16 127, i16 140, i16 141, i16 396, i16 397, i16 652, i16 653, i16 908, i16 909, i16 174, i16 175, i16 156, i16 157, i16 412, i16 413, i16 668, i16 669, i16 924, i16 925, i16 190, i16 191, i16 172, i16 173, i16 428, i16 429, i16 684, i16 685, i16 940, i16 941, i16 430, i16 431, i16 188, i16 189, i16 444, i16 445, i16 700, i16 701, i16 956, i16 957, i16 446, i16 447, i16 204, i16 205, i16 460, i16 461, i16 716, i16 717, i16 972, i16 973, i16 686, i16 687, i16 220, i16 221, i16 476, i16 477, i16 732, i16 733, i16 988, i16 989, i16 702, i16 703, i16 236, i16 237, i16 492, i16 493, i16 748, i16 749, i16 1004, i16 1005, i16 942, i16 943, i16 252, i16 253, i16 508, i16 509, i16 764, i16 765, i16 1020, i16 1021, i16 958, i16 959, i16 142, i16 143, i16 398, i16 399, i16 654, i16 655, i16 910, i16 911, i16 238, i16 239, i16 158, i16 159, i16 414, i16 415, i16 670, i16 671, i16 926, i16 927, i16 254, i16 255], align 16, !dbg !0
@DPD2BIN = dso_local constant [1024 x i16] [i16 0, i16 1, i16 2, i16 3, i16 4, i16 5, i16 6, i16 7, i16 8, i16 9, i16 80, i16 81, i16 800, i16 801, i16 880, i16 881, i16 10, i16 11, i16 12, i16 13, i16 14, i16 15, i16 16, i16 17, i16 18, i16 19, i16 90, i16 91, i16 810, i16 811, i16 890, i16 891, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 82, i16 83, i16 820, i16 821, i16 808, i16 809, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 92, i16 93, i16 830, i16 831, i16 818, i16 819, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 84, i16 85, i16 840, i16 841, i16 88, i16 89, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 59, i16 94, i16 95, i16 850, i16 851, i16 98, i16 99, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 67, i16 68, i16 69, i16 86, i16 87, i16 860, i16 861, i16 888, i16 889, i16 70, i16 71, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 96, i16 97, i16 870, i16 871, i16 898, i16 899, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 180, i16 181, i16 900, i16 901, i16 980, i16 981, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 190, i16 191, i16 910, i16 911, i16 990, i16 991, i16 120, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 128, i16 129, i16 182, i16 183, i16 920, i16 921, i16 908, i16 909, i16 130, i16 131, i16 132, i16 133, i16 134, i16 135, i16 136, i16 137, i16 138, i16 139, i16 192, i16 193, i16 930, i16 931, i16 918, i16 919, i16 140, i16 141, i16 142, i16 143, i16 144, i16 145, i16 146, i16 147, i16 148, i16 149, i16 184, i16 185, i16 940, i16 941, i16 188, i16 189, i16 150, i16 151, i16 152, i16 153, i16 154, i16 155, i16 156, i16 157, i16 158, i16 159, i16 194, i16 195, i16 950, i16 951, i16 198, i16 199, i16 160, i16 161, i16 162, i16 163, i16 164, i16 165, i16 166, i16 167, i16 168, i16 169, i16 186, i16 187, i16 960, i16 961, i16 988, i16 989, i16 170, i16 171, i16 172, i16 173, i16 174, i16 175, i16 176, i16 177, i16 178, i16 179, i16 196, i16 197, i16 970, i16 971, i16 998, i16 999, i16 200, i16 201, i16 202, i16 203, i16 204, i16 205, i16 206, i16 207, i16 208, i16 209, i16 280, i16 281, i16 802, i16 803, i16 882, i16 883, i16 210, i16 211, i16 212, i16 213, i16 214, i16 215, i16 216, i16 217, i16 218, i16 219, i16 290, i16 291, i16 812, i16 813, i16 892, i16 893, i16 220, i16 221, i16 222, i16 223, i16 224, i16 225, i16 226, i16 227, i16 228, i16 229, i16 282, i16 283, i16 822, i16 823, i16 828, i16 829, i16 230, i16 231, i16 232, i16 233, i16 234, i16 235, i16 236, i16 237, i16 238, i16 239, i16 292, i16 293, i16 832, i16 833, i16 838, i16 839, i16 240, i16 241, i16 242, i16 243, i16 244, i16 245, i16 246, i16 247, i16 248, i16 249, i16 284, i16 285, i16 842, i16 843, i16 288, i16 289, i16 250, i16 251, i16 252, i16 253, i16 254, i16 255, i16 256, i16 257, i16 258, i16 259, i16 294, i16 295, i16 852, i16 853, i16 298, i16 299, i16 260, i16 261, i16 262, i16 263, i16 264, i16 265, i16 266, i16 267, i16 268, i16 269, i16 286, i16 287, i16 862, i16 863, i16 888, i16 889, i16 270, i16 271, i16 272, i16 273, i16 274, i16 275, i16 276, i16 277, i16 278, i16 279, i16 296, i16 297, i16 872, i16 873, i16 898, i16 899, i16 300, i16 301, i16 302, i16 303, i16 304, i16 305, i16 306, i16 307, i16 308, i16 309, i16 380, i16 381, i16 902, i16 903, i16 982, i16 983, i16 310, i16 311, i16 312, i16 313, i16 314, i16 315, i16 316, i16 317, i16 318, i16 319, i16 390, i16 391, i16 912, i16 913, i16 992, i16 993, i16 320, i16 321, i16 322, i16 323, i16 324, i16 325, i16 326, i16 327, i16 328, i16 329, i16 382, i16 383, i16 922, i16 923, i16 928, i16 929, i16 330, i16 331, i16 332, i16 333, i16 334, i16 335, i16 336, i16 337, i16 338, i16 339, i16 392, i16 393, i16 932, i16 933, i16 938, i16 939, i16 340, i16 341, i16 342, i16 343, i16 344, i16 345, i16 346, i16 347, i16 348, i16 349, i16 384, i16 385, i16 942, i16 943, i16 388, i16 389, i16 350, i16 351, i16 352, i16 353, i16 354, i16 355, i16 356, i16 357, i16 358, i16 359, i16 394, i16 395, i16 952, i16 953, i16 398, i16 399, i16 360, i16 361, i16 362, i16 363, i16 364, i16 365, i16 366, i16 367, i16 368, i16 369, i16 386, i16 387, i16 962, i16 963, i16 988, i16 989, i16 370, i16 371, i16 372, i16 373, i16 374, i16 375, i16 376, i16 377, i16 378, i16 379, i16 396, i16 397, i16 972, i16 973, i16 998, i16 999, i16 400, i16 401, i16 402, i16 403, i16 404, i16 405, i16 406, i16 407, i16 408, i16 409, i16 480, i16 481, i16 804, i16 805, i16 884, i16 885, i16 410, i16 411, i16 412, i16 413, i16 414, i16 415, i16 416, i16 417, i16 418, i16 419, i16 490, i16 491, i16 814, i16 815, i16 894, i16 895, i16 420, i16 421, i16 422, i16 423, i16 424, i16 425, i16 426, i16 427, i16 428, i16 429, i16 482, i16 483, i16 824, i16 825, i16 848, i16 849, i16 430, i16 431, i16 432, i16 433, i16 434, i16 435, i16 436, i16 437, i16 438, i16 439, i16 492, i16 493, i16 834, i16 835, i16 858, i16 859, i16 440, i16 441, i16 442, i16 443, i16 444, i16 445, i16 446, i16 447, i16 448, i16 449, i16 484, i16 485, i16 844, i16 845, i16 488, i16 489, i16 450, i16 451, i16 452, i16 453, i16 454, i16 455, i16 456, i16 457, i16 458, i16 459, i16 494, i16 495, i16 854, i16 855, i16 498, i16 499, i16 460, i16 461, i16 462, i16 463, i16 464, i16 465, i16 466, i16 467, i16 468, i16 469, i16 486, i16 487, i16 864, i16 865, i16 888, i16 889, i16 470, i16 471, i16 472, i16 473, i16 474, i16 475, i16 476, i16 477, i16 478, i16 479, i16 496, i16 497, i16 874, i16 875, i16 898, i16 899, i16 500, i16 501, i16 502, i16 503, i16 504, i16 505, i16 506, i16 507, i16 508, i16 509, i16 580, i16 581, i16 904, i16 905, i16 984, i16 985, i16 510, i16 511, i16 512, i16 513, i16 514, i16 515, i16 516, i16 517, i16 518, i16 519, i16 590, i16 591, i16 914, i16 915, i16 994, i16 995, i16 520, i16 521, i16 522, i16 523, i16 524, i16 525, i16 526, i16 527, i16 528, i16 529, i16 582, i16 583, i16 924, i16 925, i16 948, i16 949, i16 530, i16 531, i16 532, i16 533, i16 534, i16 535, i16 536, i16 537, i16 538, i16 539, i16 592, i16 593, i16 934, i16 935, i16 958, i16 959, i16 540, i16 541, i16 542, i16 543, i16 544, i16 545, i16 546, i16 547, i16 548, i16 549, i16 584, i16 585, i16 944, i16 945, i16 588, i16 589, i16 550, i16 551, i16 552, i16 553, i16 554, i16 555, i16 556, i16 557, i16 558, i16 559, i16 594, i16 595, i16 954, i16 955, i16 598, i16 599, i16 560, i16 561, i16 562, i16 563, i16 564, i16 565, i16 566, i16 567, i16 568, i16 569, i16 586, i16 587, i16 964, i16 965, i16 988, i16 989, i16 570, i16 571, i16 572, i16 573, i16 574, i16 575, i16 576, i16 577, i16 578, i16 579, i16 596, i16 597, i16 974, i16 975, i16 998, i16 999, i16 600, i16 601, i16 602, i16 603, i16 604, i16 605, i16 606, i16 607, i16 608, i16 609, i16 680, i16 681, i16 806, i16 807, i16 886, i16 887, i16 610, i16 611, i16 612, i16 613, i16 614, i16 615, i16 616, i16 617, i16 618, i16 619, i16 690, i16 691, i16 816, i16 817, i16 896, i16 897, i16 620, i16 621, i16 622, i16 623, i16 624, i16 625, i16 626, i16 627, i16 628, i16 629, i16 682, i16 683, i16 826, i16 827, i16 868, i16 869, i16 630, i16 631, i16 632, i16 633, i16 634, i16 635, i16 636, i16 637, i16 638, i16 639, i16 692, i16 693, i16 836, i16 837, i16 878, i16 879, i16 640, i16 641, i16 642, i16 643, i16 644, i16 645, i16 646, i16 647, i16 648, i16 649, i16 684, i16 685, i16 846, i16 847, i16 688, i16 689, i16 650, i16 651, i16 652, i16 653, i16 654, i16 655, i16 656, i16 657, i16 658, i16 659, i16 694, i16 695, i16 856, i16 857, i16 698, i16 699, i16 660, i16 661, i16 662, i16 663, i16 664, i16 665, i16 666, i16 667, i16 668, i16 669, i16 686, i16 687, i16 866, i16 867, i16 888, i16 889, i16 670, i16 671, i16 672, i16 673, i16 674, i16 675, i16 676, i16 677, i16 678, i16 679, i16 696, i16 697, i16 876, i16 877, i16 898, i16 899, i16 700, i16 701, i16 702, i16 703, i16 704, i16 705, i16 706, i16 707, i16 708, i16 709, i16 780, i16 781, i16 906, i16 907, i16 986, i16 987, i16 710, i16 711, i16 712, i16 713, i16 714, i16 715, i16 716, i16 717, i16 718, i16 719, i16 790, i16 791, i16 916, i16 917, i16 996, i16 997, i16 720, i16 721, i16 722, i16 723, i16 724, i16 725, i16 726, i16 727, i16 728, i16 729, i16 782, i16 783, i16 926, i16 927, i16 968, i16 969, i16 730, i16 731, i16 732, i16 733, i16 734, i16 735, i16 736, i16 737, i16 738, i16 739, i16 792, i16 793, i16 936, i16 937, i16 978, i16 979, i16 740, i16 741, i16 742, i16 743, i16 744, i16 745, i16 746, i16 747, i16 748, i16 749, i16 784, i16 785, i16 946, i16 947, i16 788, i16 789, i16 750, i16 751, i16 752, i16 753, i16 754, i16 755, i16 756, i16 757, i16 758, i16 759, i16 794, i16 795, i16 956, i16 957, i16 798, i16 799, i16 760, i16 761, i16 762, i16 763, i16 764, i16 765, i16 766, i16 767, i16 768, i16 769, i16 786, i16 787, i16 966, i16 967, i16 988, i16 989, i16 770, i16 771, i16 772, i16 773, i16 774, i16 775, i16 776, i16 777, i16 778, i16 779, i16 796, i16 797, i16 976, i16 977, i16 998, i16 999], align 16, !dbg !33
@BIN2CHAR = dso_local constant [4001 x i8] calign 16, !dbg !40
@COMBMSD = dso_local constant [32 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 8, i32 9, i32 0, i32 1], align 16, !dbg !55
@COMBEXP = dso_local constant [32 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3], align 16, !dbg !49
@.str = private unnamed_addr constant [4 x i8] c"Inf\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"inity\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"NaN\00", align 1
@d2utable = external dso_local constant [50 x i8], align 16
@multies = internal constant [5 x i32] [i32 131073, i32 26215, i32 5243, i32 1049, i32 210], align 16, !dbg !57
@DECPOWERS = external dso_local constant [10 x i32], align 16

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.decimal64* @__dpd64FromNumber(%struct.decimal64* %d64, %struct.decNumber* %dn, %struct.decContext* %set) #0 !dbg !69 {
entry:
  %d64.addr = alloca %struct.decimal64*, align 8
  %dn.addr = alloca %struct.decNumber*, align 8
  %set.addr = alloca %struct.decContext*, align 8
  %status = alloca i32, align 4
  %ae = alloca i32, align 4
  %dw = alloca %struct.decNumber, align 4
  %dc = alloca %struct.decContext, align 4
  %comb = alloca i32, align 4
  %exp = alloca i32, align 4
  %uiwork = alloca i32, align 4
  %targar = alloca [2 x i32], align 4
  %msd = alloca i32, align 4
  %pad = alloca i32, align 4
  %dpd = alloca [6 x i32], align 16
  %i = alloca i32, align 4
  %d = alloca i32, align 4
  store %struct.decimal64* %d64, %struct.decimal64** %d64.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %d64.addr, metadata !106, metadata !DIExpression()), !dbg !107
  store %struct.decNumber* %dn, %struct.decNumber** %dn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decNumber** %dn.addr, metadata !108, metadata !DIExpression()), !dbg !109
  store %struct.decContext* %set, %struct.decContext** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decContext** %set.addr, metadata !110, metadata !DIExpression()), !dbg !111
  call void @llvm.dbg.declare(metadata i32* %status, metadata !112, metadata !DIExpression()), !dbg !113
  store i32 0, i32* %status, align 4, !dbg !113
  call void @llvm.dbg.declare(metadata i32* %ae, metadata !114, metadata !DIExpression()), !dbg !115
  call void @llvm.dbg.declare(metadata %struct.decNumber* %dw, metadata !116, metadata !DIExpression()), !dbg !117
  call void @llvm.dbg.declare(metadata %struct.decContext* %dc, metadata !118, metadata !DIExpression()), !dbg !119
  call void @llvm.dbg.declare(metadata i32* %comb, metadata !120, metadata !DIExpression()), !dbg !121
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !122, metadata !DIExpression()), !dbg !123
  call void @llvm.dbg.declare(metadata i32* %uiwork, metadata !124, metadata !DIExpression()), !dbg !125
  call void @llvm.dbg.declare(metadata [2 x i32]* %targar, metadata !126, metadata !DIExpression()), !dbg !130
  %0 = bitcast [2 x i32]* %targar to i8*, !dbg !130
  call void @llvm.memset.p0i8.i64(i8* align 4 %0, i8 0, i64 8, i1 false), !dbg !130
  %1 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !131
  %exponent = getelementptr inbounds %struct.decNumber, %struct.decNumber* %1, i32 0, i32 1, !dbg !132
  %2 = load i32, i32* %exponent, align 4, !dbg !132
  %3 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !133
  %digits = getelementptr inbounds %struct.decNumber, %struct.decNumber* %3, i32 0, i32 0, !dbg !134
  %4 = load i32, i32* %digits, align 4, !dbg !134
  %add = add nsw i32 %2, %4, !dbg !135
  %sub = sub nsw i32 %add, 1, !dbg !136
  store i32 %sub, i32* %ae, align 4, !dbg !137
  %5 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !138
  %digits1 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %5, i32 0, i32 0, !dbg !140
  %6 = load i32, i32* %digits1, align 4, !dbg !140
  %cmp = icmp sgt i32 %6, 16, !dbg !141
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !142

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* %ae, align 4, !dbg !143
  %cmp2 = icmp sgt i32 %7, 384, !dbg !144
  br i1 %cmp2, label %if.then, label %lor.lhs.false3, !dbg !145

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %8 = load i32, i32* %ae, align 4, !dbg !146
  %cmp4 = icmp slt i32 %8, -383, !dbg !147
  br i1 %cmp4, label %if.then, label %if.end, !dbg !148

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  %call = call %struct.decContext* @decContextDefault(%struct.decContext* %dc, i32 64), !dbg !149
  %9 = load %struct.decContext*, %struct.decContext** %set.addr, align 8, !dbg !151
  %round = getelementptr inbounds %struct.decContext, %struct.decContext* %9, i32 0, i32 3, !dbg !152
  %10 = load i32, i32* %round, align 4, !dbg !152
  %round5 = getelementptr inbounds %struct.decContext, %struct.decContext* %dc, i32 0, i32 3, !dbg !153
  store i32 %10, i32* %round5, align 4, !dbg !154
  %11 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !155
  %call6 = call %struct.decNumber* @decNumberPlus(%struct.decNumber* %dw, %struct.decNumber* %11, %struct.decContext* %dc), !dbg !156
  %12 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !157
  %bits = getelementptr inbounds %struct.decNumber, %struct.decNumber* %12, i32 0, i32 2, !dbg !158
  %13 = load i8, i8* %bits, align 4, !dbg !158
  %conv = zext i8 %13 to i32, !dbg !157
  %and = and i32 %conv, 128, !dbg !159
  %bits7 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %dw, i32 0, i32 2, !dbg !160
  %14 = load i8, i8* %bits7, align 4, !dbg !161
  %conv8 = zext i8 %14 to i32, !dbg !161
  %or = or i32 %conv8, %and, !dbg !161
  %conv9 = trunc i32 %or to i8, !dbg !161
  store i8 %conv9, i8* %bits7, align 4, !dbg !161
  %status10 = getelementptr inbounds %struct.decContext, %struct.decContext* %dc, i32 0, i32 5, !dbg !162
  %15 = load i32, i32* %status10, align 4, !dbg !162
  store i32 %15, i32* %status, align 4, !dbg !163
  store %struct.decNumber* %dw, %struct.decNumber** %dn.addr, align 8, !dbg !164
  br label %if.end, !dbg !165

if.end:                                           ; preds = %if.then, %lor.lhs.false3
  %16 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !166
  %bits11 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %16, i32 0, i32 2, !dbg !168
  %17 = load i8, i8* %bits11, align 4, !dbg !168
  %conv12 = zext i8 %17 to i32, !dbg !166
  %and13 = and i32 %conv12, 112, !dbg !169
  %tobool = icmp ne i32 %and13, 0, !dbg !169
  br i1 %tobool, label %if.then14, label %if.else45, !dbg !170

if.then14:                                        ; preds = %if.end
  %18 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !171
  %bits15 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %18, i32 0, i32 2, !dbg !174
  %19 = load i8, i8* %bits15, align 4, !dbg !174
  %conv16 = zext i8 %19 to i32, !dbg !171
  %and17 = and i32 %conv16, 64, !dbg !175
  %tobool18 = icmp ne i32 %and17, 0, !dbg !175
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !176

if.then19:                                        ; preds = %if.then14
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 1, !dbg !177
  store i32 2013265920, i32* %arrayidx, align 4, !dbg !178
  br label %if.end44, !dbg !177

if.else:                                          ; preds = %if.then14
  %20 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !179
  %lsu = getelementptr inbounds %struct.decNumber, %struct.decNumber* %20, i32 0, i32 3, !dbg !182
  %arraydecay = getelementptr inbounds [6 x i16], [6 x i16]* %lsu, i64 0, i64 0, !dbg !183
  %21 = load i16, i16* %arraydecay, align 2, !dbg !183
  %conv20 = zext i16 %21 to i32, !dbg !183
  %cmp21 = icmp ne i32 %conv20, 0, !dbg !184
  br i1 %cmp21, label %land.lhs.true, label %lor.lhs.false23, !dbg !185

lor.lhs.false23:                                  ; preds = %if.else
  %22 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !186
  %digits24 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %22, i32 0, i32 0, !dbg !187
  %23 = load i32, i32* %digits24, align 4, !dbg !187
  %cmp25 = icmp sgt i32 %23, 1, !dbg !188
  br i1 %cmp25, label %land.lhs.true, label %if.end32, !dbg !189

land.lhs.true:                                    ; preds = %lor.lhs.false23, %if.else
  %24 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !190
  %digits27 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %24, i32 0, i32 0, !dbg !191
  %25 = load i32, i32* %digits27, align 4, !dbg !191
  %cmp28 = icmp slt i32 %25, 16, !dbg !192
  br i1 %cmp28, label %if.then30, label %if.end32, !dbg !193

if.then30:                                        ; preds = %land.lhs.true
  %26 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !194
  %arraydecay31 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 0, !dbg !196
  call void @decDigitsToDPD(%struct.decNumber* %26, i32* %arraydecay31, i32 0), !dbg !197
  br label %if.end32, !dbg !198

if.end32:                                         ; preds = %if.then30, %land.lhs.true, %lor.lhs.false23
  %27 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !199
  %bits33 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %27, i32 0, i32 2, !dbg !201
  %28 = load i8, i8* %bits33, align 4, !dbg !201
  %conv34 = zext i8 %28 to i32, !dbg !199
  %and35 = and i32 %conv34, 32, !dbg !202
  %tobool36 = icmp ne i32 %and35, 0, !dbg !202
  br i1 %tobool36, label %if.then37, label %if.else40, !dbg !203

if.then37:                                        ; preds = %if.end32
  %arrayidx38 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 1, !dbg !204
  %29 = load i32, i32* %arrayidx38, align 4, !dbg !205
  %or39 = or i32 %29, 2080374784, !dbg !205
  store i32 %or39, i32* %arrayidx38, align 4, !dbg !205
  br label %if.end43, !dbg !204

if.else40:                                        ; preds = %if.end32
  %arrayidx41 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 1, !dbg !206
  %30 = load i32, i32* %arrayidx41, align 4, !dbg !207
  %or42 = or i32 %30, 2113929216, !dbg !207
  store i32 %or42, i32* %arrayidx41, align 4, !dbg !207
  br label %if.end43

if.end43:                                         ; preds = %if.else40, %if.then37
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then19
  br label %if.end154, !dbg !208

if.else45:                                        ; preds = %if.end
  %31 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !209
  %lsu46 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %31, i32 0, i32 3, !dbg !209
  %arraydecay47 = getelementptr inbounds [6 x i16], [6 x i16]* %lsu46, i64 0, i64 0, !dbg !209
  %32 = load i16, i16* %arraydecay47, align 2, !dbg !209
  %conv48 = zext i16 %32 to i32, !dbg !209
  %cmp49 = icmp eq i32 %conv48, 0, !dbg !209
  br i1 %cmp49, label %land.lhs.true51, label %if.else77, !dbg !209

land.lhs.true51:                                  ; preds = %if.else45
  %33 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !209
  %digits52 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %33, i32 0, i32 0, !dbg !209
  %34 = load i32, i32* %digits52, align 4, !dbg !209
  %cmp53 = icmp eq i32 %34, 1, !dbg !209
  br i1 %cmp53, label %land.lhs.true55, label %if.else77, !dbg !209

land.lhs.true55:                                  ; preds = %land.lhs.true51
  %35 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !209
  %bits56 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %35, i32 0, i32 2, !dbg !209
  %36 = load i8, i8* %bits56, align 4, !dbg !209
  %conv57 = zext i8 %36 to i32, !dbg !209
  %and58 = and i32 %conv57, 112, !dbg !209
  %cmp59 = icmp eq i32 %and58, 0, !dbg !209
  br i1 %cmp59, label %if.then61, label %if.else77, !dbg !212

if.then61:                                        ; preds = %land.lhs.true55
  %37 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !213
  %exponent62 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %37, i32 0, i32 1, !dbg !216
  %38 = load i32, i32* %exponent62, align 4, !dbg !216
  %cmp63 = icmp slt i32 %38, -398, !dbg !217
  br i1 %cmp63, label %if.then65, label %if.else67, !dbg !218

if.then65:                                        ; preds = %if.then61
  store i32 0, i32* %exp, align 4, !dbg !219
  %39 = load i32, i32* %status, align 4, !dbg !221
  %or66 = or i32 %39, 1024, !dbg !221
  store i32 %or66, i32* %status, align 4, !dbg !221
  br label %if.end75, !dbg !222

if.else67:                                        ; preds = %if.then61
  %40 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !223
  %exponent68 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %40, i32 0, i32 1, !dbg !225
  %41 = load i32, i32* %exponent68, align 4, !dbg !225
  %add69 = add nsw i32 %41, 398, !dbg !226
  store i32 %add69, i32* %exp, align 4, !dbg !227
  %42 = load i32, i32* %exp, align 4, !dbg !228
  %cmp70 = icmp ugt i32 %42, 767, !dbg !230
  br i1 %cmp70, label %if.then72, label %if.end74, !dbg !231

if.then72:                                        ; preds = %if.else67
  store i32 767, i32* %exp, align 4, !dbg !232
  %43 = load i32, i32* %status, align 4, !dbg !234
  %or73 = or i32 %43, 1024, !dbg !234
  store i32 %or73, i32* %status, align 4, !dbg !234
  br label %if.end74, !dbg !235

if.end74:                                         ; preds = %if.then72, %if.else67
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.then65
  %44 = load i32, i32* %exp, align 4, !dbg !236
  %shr = lshr i32 %44, 5, !dbg !237
  %and76 = and i32 %shr, 24, !dbg !238
  store i32 %and76, i32* %comb, align 4, !dbg !239
  br label %if.end146, !dbg !240

if.else77:                                        ; preds = %land.lhs.true55, %land.lhs.true51, %if.else45
  call void @llvm.dbg.declare(metadata i32* %msd, metadata !241, metadata !DIExpression()), !dbg !243
  call void @llvm.dbg.declare(metadata i32* %pad, metadata !244, metadata !DIExpression()), !dbg !245
  store i32 0, i32* %pad, align 4, !dbg !245
  %45 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !246
  %exponent78 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %45, i32 0, i32 1, !dbg !247
  %46 = load i32, i32* %exponent78, align 4, !dbg !247
  %add79 = add nsw i32 %46, 398, !dbg !248
  store i32 %add79, i32* %exp, align 4, !dbg !249
  %47 = load i32, i32* %exp, align 4, !dbg !250
  %cmp80 = icmp ugt i32 %47, 767, !dbg !252
  br i1 %cmp80, label %if.then82, label %if.end85, !dbg !253

if.then82:                                        ; preds = %if.else77
  %48 = load i32, i32* %exp, align 4, !dbg !254
  %sub83 = sub i32 %48, 767, !dbg !256
  store i32 %sub83, i32* %pad, align 4, !dbg !257
  store i32 767, i32* %exp, align 4, !dbg !258
  %49 = load i32, i32* %status, align 4, !dbg !259
  %or84 = or i32 %49, 1024, !dbg !259
  store i32 %or84, i32* %status, align 4, !dbg !259
  br label %if.end85, !dbg !260

if.end85:                                         ; preds = %if.then82, %if.else77
  %50 = load i32, i32* %pad, align 4, !dbg !261
  %cmp86 = icmp eq i32 %50, 0, !dbg !263
  br i1 %cmp86, label %if.then88, label %if.else126, !dbg !264

if.then88:                                        ; preds = %if.end85
  call void @llvm.dbg.declare(metadata [6 x i32]* %dpd, metadata !265, metadata !DIExpression()), !dbg !268
  %51 = bitcast [6 x i32]* %dpd to i8*, !dbg !268
  call void @llvm.memset.p0i8.i64(i8* align 16 %51, i8 0, i64 24, i1 false), !dbg !268
  call void @llvm.dbg.declare(metadata i32* %i, metadata !269, metadata !DIExpression()), !dbg !270
  call void @llvm.dbg.declare(metadata i32* %d, metadata !271, metadata !DIExpression()), !dbg !272
  %52 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !273
  %digits89 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %52, i32 0, i32 0, !dbg !274
  %53 = load i32, i32* %digits89, align 4, !dbg !274
  store i32 %53, i32* %d, align 4, !dbg !272
  store i32 0, i32* %i, align 4, !dbg !275
  br label %for.cond, !dbg !277

for.cond:                                         ; preds = %for.inc, %if.then88
  %54 = load i32, i32* %d, align 4, !dbg !278
  %cmp90 = icmp sgt i32 %54, 0, !dbg !280
  br i1 %cmp90, label %for.body, label %for.end, !dbg !281

for.body:                                         ; preds = %for.cond
  %55 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !282
  %lsu92 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %55, i32 0, i32 3, !dbg !283
  %56 = load i32, i32* %i, align 4, !dbg !284
  %idxprom = zext i32 %56 to i64, !dbg !282
  %arrayidx93 = getelementptr inbounds [6 x i16], [6 x i16]* %lsu92, i64 0, i64 %idxprom, !dbg !282
  %57 = load i16, i16* %arrayidx93, align 2, !dbg !282
  %idxprom94 = zext i16 %57 to i64, !dbg !285
  %arrayidx95 = getelementptr inbounds [1000 x i16], [1000 x i16]* @BIN2DPD, i64 0, i64 %idxprom94, !dbg !285
  %58 = load i16, i16* %arrayidx95, align 2, !dbg !285
  %conv96 = zext i16 %58 to i32, !dbg !285
  %59 = load i32, i32* %i, align 4, !dbg !286
  %idxprom97 = zext i32 %59 to i64, !dbg !287
  %arrayidx98 = getelementptr inbounds [6 x i32], [6 x i32]* %dpd, i64 0, i64 %idxprom97, !dbg !287
  store i32 %conv96, i32* %arrayidx98, align 4, !dbg !288
  br label %for.inc, !dbg !287

for.inc:                                          ; preds = %for.body
  %60 = load i32, i32* %i, align 4, !dbg !289
  %inc = add i32 %60, 1, !dbg !289
  store i32 %inc, i32* %i, align 4, !dbg !289
  %61 = load i32, i32* %d, align 4, !dbg !290
  %sub99 = sub nsw i32 %61, 3, !dbg !290
  store i32 %sub99, i32* %d, align 4, !dbg !290
  br label %for.cond, !dbg !291, !llvm.loop !292

for.end:                                          ; preds = %for.cond
  %arrayidx100 = getelementptr inbounds [6 x i32], [6 x i32]* %dpd, i64 0, i64 0, !dbg !294
  %62 = load i32, i32* %arrayidx100, align 16, !dbg !294
  %arrayidx101 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 0, !dbg !295
  store i32 %62, i32* %arrayidx101, align 4, !dbg !296
  %arrayidx102 = getelementptr inbounds [6 x i32], [6 x i32]* %dpd, i64 0, i64 1, !dbg !297
  %63 = load i32, i32* %arrayidx102, align 4, !dbg !297
  %shl = shl i32 %63, 10, !dbg !298
  %arrayidx103 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 0, !dbg !299
  %64 = load i32, i32* %arrayidx103, align 4, !dbg !300
  %or104 = or i32 %64, %shl, !dbg !300
  store i32 %or104, i32* %arrayidx103, align 4, !dbg !300
  %arrayidx105 = getelementptr inbounds [6 x i32], [6 x i32]* %dpd, i64 0, i64 2, !dbg !301
  %65 = load i32, i32* %arrayidx105, align 8, !dbg !301
  %shl106 = shl i32 %65, 20, !dbg !302
  %arrayidx107 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 0, !dbg !303
  %66 = load i32, i32* %arrayidx107, align 4, !dbg !304
  %or108 = or i32 %66, %shl106, !dbg !304
  store i32 %or108, i32* %arrayidx107, align 4, !dbg !304
  %67 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !305
  %digits109 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %67, i32 0, i32 0, !dbg !307
  %68 = load i32, i32* %digits109, align 4, !dbg !307
  %cmp110 = icmp sgt i32 %68, 6, !dbg !308
  br i1 %cmp110, label %if.then112, label %if.end124, !dbg !309

if.then112:                                       ; preds = %for.end
  %arrayidx113 = getelementptr inbounds [6 x i32], [6 x i32]* %dpd, i64 0, i64 3, !dbg !310
  %69 = load i32, i32* %arrayidx113, align 4, !dbg !310
  %shl114 = shl i32 %69, 30, !dbg !312
  %arrayidx115 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 0, !dbg !313
  %70 = load i32, i32* %arrayidx115, align 4, !dbg !314
  %or116 = or i32 %70, %shl114, !dbg !314
  store i32 %or116, i32* %arrayidx115, align 4, !dbg !314
  %arrayidx117 = getelementptr inbounds [6 x i32], [6 x i32]* %dpd, i64 0, i64 3, !dbg !315
  %71 = load i32, i32* %arrayidx117, align 4, !dbg !315
  %shr118 = lshr i32 %71, 2, !dbg !316
  %arrayidx119 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 1, !dbg !317
  store i32 %shr118, i32* %arrayidx119, align 4, !dbg !318
  %arrayidx120 = getelementptr inbounds [6 x i32], [6 x i32]* %dpd, i64 0, i64 4, !dbg !319
  %72 = load i32, i32* %arrayidx120, align 16, !dbg !319
  %shl121 = shl i32 %72, 8, !dbg !320
  %arrayidx122 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 1, !dbg !321
  %73 = load i32, i32* %arrayidx122, align 4, !dbg !322
  %or123 = or i32 %73, %shl121, !dbg !322
  store i32 %or123, i32* %arrayidx122, align 4, !dbg !322
  br label %if.end124, !dbg !323

if.end124:                                        ; preds = %if.then112, %for.end
  %arrayidx125 = getelementptr inbounds [6 x i32], [6 x i32]* %dpd, i64 0, i64 5, !dbg !324
  %74 = load i32, i32* %arrayidx125, align 4, !dbg !324
  store i32 %74, i32* %msd, align 4, !dbg !325
  br label %if.end132, !dbg !326

if.else126:                                       ; preds = %if.end85
  %75 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !327
  %arraydecay127 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 0, !dbg !329
  %76 = load i32, i32* %pad, align 4, !dbg !330
  call void @decDigitsToDPD(%struct.decNumber* %75, i32* %arraydecay127, i32 %76), !dbg !331
  %arrayidx128 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 1, !dbg !332
  %77 = load i32, i32* %arrayidx128, align 4, !dbg !332
  %shr129 = lshr i32 %77, 18, !dbg !333
  store i32 %shr129, i32* %msd, align 4, !dbg !334
  %arrayidx130 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 1, !dbg !335
  %78 = load i32, i32* %arrayidx130, align 4, !dbg !336
  %and131 = and i32 %78, 262143, !dbg !336
  store i32 %and131, i32* %arrayidx130, align 4, !dbg !336
  br label %if.end132

if.end132:                                        ; preds = %if.else126, %if.end124
  %79 = load i32, i32* %msd, align 4, !dbg !337
  %cmp133 = icmp uge i32 %79, 8, !dbg !339
  br i1 %cmp133, label %if.then135, label %if.else141, !dbg !340

if.then135:                                       ; preds = %if.end132
  %80 = load i32, i32* %exp, align 4, !dbg !341
  %shr136 = lshr i32 %80, 7, !dbg !342
  %and137 = and i32 %shr136, 6, !dbg !343
  %or138 = or i32 24, %and137, !dbg !344
  %81 = load i32, i32* %msd, align 4, !dbg !345
  %and139 = and i32 %81, 1, !dbg !346
  %or140 = or i32 %or138, %and139, !dbg !347
  store i32 %or140, i32* %comb, align 4, !dbg !348
  br label %if.end145, !dbg !349

if.else141:                                       ; preds = %if.end132
  %82 = load i32, i32* %exp, align 4, !dbg !350
  %shr142 = lshr i32 %82, 5, !dbg !351
  %and143 = and i32 %shr142, 24, !dbg !352
  %83 = load i32, i32* %msd, align 4, !dbg !353
  %or144 = or i32 %and143, %83, !dbg !354
  store i32 %or144, i32* %comb, align 4, !dbg !355
  br label %if.end145

if.end145:                                        ; preds = %if.else141, %if.then135
  br label %if.end146

if.end146:                                        ; preds = %if.end145, %if.end75
  %84 = load i32, i32* %comb, align 4, !dbg !356
  %shl147 = shl i32 %84, 26, !dbg !357
  %arrayidx148 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 1, !dbg !358
  %85 = load i32, i32* %arrayidx148, align 4, !dbg !359
  %or149 = or i32 %85, %shl147, !dbg !359
  store i32 %or149, i32* %arrayidx148, align 4, !dbg !359
  %86 = load i32, i32* %exp, align 4, !dbg !360
  %and150 = and i32 %86, 255, !dbg !361
  %shl151 = shl i32 %and150, 18, !dbg !362
  %arrayidx152 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 1, !dbg !363
  %87 = load i32, i32* %arrayidx152, align 4, !dbg !364
  %or153 = or i32 %87, %shl151, !dbg !364
  store i32 %or153, i32* %arrayidx152, align 4, !dbg !364
  br label %if.end154

if.end154:                                        ; preds = %if.end146, %if.end44
  %88 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !365
  %bits155 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %88, i32 0, i32 2, !dbg !367
  %89 = load i8, i8* %bits155, align 4, !dbg !367
  %conv156 = zext i8 %89 to i32, !dbg !365
  %and157 = and i32 %conv156, 128, !dbg !368
  %tobool158 = icmp ne i32 %and157, 0, !dbg !368
  br i1 %tobool158, label %if.then159, label %if.end162, !dbg !369

if.then159:                                       ; preds = %if.end154
  %arrayidx160 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 1, !dbg !370
  %90 = load i32, i32* %arrayidx160, align 4, !dbg !371
  %or161 = or i32 %90, -2147483648, !dbg !371
  store i32 %or161, i32* %arrayidx160, align 4, !dbg !371
  br label %if.end162, !dbg !370

if.end162:                                        ; preds = %if.then159, %if.end154
  %arrayidx163 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 0, !dbg !372
  %91 = load i32, i32* %arrayidx163, align 4, !dbg !372
  store i32 %91, i32* %uiwork, align 4, !dbg !372
  %92 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !372
  %bytes = getelementptr inbounds %struct.decimal64, %struct.decimal64* %92, i32 0, i32 0, !dbg !372
  %arraydecay164 = getelementptr inbounds [8 x i8], [8 x i8]* %bytes, i64 0, i64 0, !dbg !372
  %93 = bitcast i32* %uiwork to i8*, !dbg !372
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arraydecay164, i8* align 1 %93, i64 4, i1 false), !dbg !372
  %94 = load i32, i32* %uiwork, align 4, !dbg !372
  %arrayidx165 = getelementptr inbounds [2 x i32], [2 x i32]* %targar, i64 0, i64 1, !dbg !375
  %95 = load i32, i32* %arrayidx165, align 4, !dbg !375
  store i32 %95, i32* %uiwork, align 4, !dbg !375
  %96 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !375
  %bytes166 = getelementptr inbounds %struct.decimal64, %struct.decimal64* %96, i32 0, i32 0, !dbg !375
  %arraydecay167 = getelementptr inbounds [8 x i8], [8 x i8]* %bytes166, i64 0, i64 0, !dbg !375
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay167, i64 4, !dbg !375
  %97 = bitcast i32* %uiwork to i8*, !dbg !375
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %97, i64 4, i1 false), !dbg !375
  %98 = load i32, i32* %uiwork, align 4, !dbg !375
  %99 = load i32, i32* %status, align 4, !dbg !376
  %cmp168 = icmp ne i32 %99, 0, !dbg !378
  br i1 %cmp168, label %if.then170, label %if.end172, !dbg !379

if.then170:                                       ; preds = %if.end162
  %100 = load %struct.decContext*, %struct.decContext** %set.addr, align 8, !dbg !380
  %101 = load i32, i32* %status, align 4, !dbg !381
  %call171 = call %struct.decContext* @decContextSetStatus(%struct.decContext* %100, i32 %101), !dbg !382
  br label %if.end172, !dbg !382

if.end172:                                        ; preds = %if.then170, %if.end162
  %102 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !383
  ret %struct.decimal64* %102, !dbg !384
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local %struct.decContext* @decContextDefault(%struct.decContext*, i32) #3

declare dso_local %struct.decNumber* @decNumberPlus(%struct.decNumber*, %struct.decNumber*, %struct.decContext*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @decDigitsToDPD(%struct.decNumber* %dn, i32* %targ, i32 %shift) #0 !dbg !385 {
entry:
  %dn.addr = alloca %struct.decNumber*, align 8
  %targ.addr = alloca i32*, align 8
  %shift.addr = alloca i32, align 4
  %cut = alloca i32, align 4
  %n = alloca i32, align 4
  %digits = alloca i32, align 4
  %dpd = alloca i32, align 4
  %bin = alloca i32, align 4
  %uout = alloca i32*, align 8
  %uoff = alloca i32, align 4
  %inu = alloca i16*, align 8
  %uar = alloca [12 x i16], align 16
  %source = alloca i16*, align 8
  %target = alloca i16*, align 8
  %first = alloca i16*, align 8
  %next = alloca i32, align 4
  %quot = alloca i32, align 4
  %rem = alloca i32, align 4
  store %struct.decNumber* %dn, %struct.decNumber** %dn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decNumber** %dn.addr, metadata !389, metadata !DIExpression()), !dbg !390
  store i32* %targ, i32** %targ.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %targ.addr, metadata !391, metadata !DIExpression()), !dbg !392
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !393, metadata !DIExpression()), !dbg !394
  call void @llvm.dbg.declare(metadata i32* %cut, metadata !395, metadata !DIExpression()), !dbg !396
  call void @llvm.dbg.declare(metadata i32* %n, metadata !397, metadata !DIExpression()), !dbg !398
  call void @llvm.dbg.declare(metadata i32* %digits, metadata !399, metadata !DIExpression()), !dbg !400
  %0 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !401
  %digits1 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %0, i32 0, i32 0, !dbg !402
  %1 = load i32, i32* %digits1, align 4, !dbg !402
  store i32 %1, i32* %digits, align 4, !dbg !400
  call void @llvm.dbg.declare(metadata i32* %dpd, metadata !403, metadata !DIExpression()), !dbg !404
  call void @llvm.dbg.declare(metadata i32* %bin, metadata !405, metadata !DIExpression()), !dbg !406
  call void @llvm.dbg.declare(metadata i32** %uout, metadata !407, metadata !DIExpression()), !dbg !408
  %2 = load i32*, i32** %targ.addr, align 8, !dbg !409
  store i32* %2, i32** %uout, align 8, !dbg !408
  call void @llvm.dbg.declare(metadata i32* %uoff, metadata !410, metadata !DIExpression()), !dbg !411
  store i32 0, i32* %uoff, align 4, !dbg !411
  call void @llvm.dbg.declare(metadata i16** %inu, metadata !412, metadata !DIExpression()), !dbg !414
  %3 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !415
  %lsu = getelementptr inbounds %struct.decNumber, %struct.decNumber* %3, i32 0, i32 3, !dbg !416
  %arraydecay = getelementptr inbounds [6 x i16], [6 x i16]* %lsu, i64 0, i64 0, !dbg !415
  store i16* %arraydecay, i16** %inu, align 8, !dbg !414
  call void @llvm.dbg.declare(metadata [12 x i16]* %uar, metadata !417, metadata !DIExpression()), !dbg !421
  %4 = load i32, i32* %shift.addr, align 4, !dbg !422
  %cmp = icmp ne i32 %4, 0, !dbg !424
  br i1 %cmp, label %if.then, label %if.end119, !dbg !425

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i16** %source, metadata !426, metadata !DIExpression()), !dbg !428
  call void @llvm.dbg.declare(metadata i16** %target, metadata !429, metadata !DIExpression()), !dbg !431
  call void @llvm.dbg.declare(metadata i16** %first, metadata !432, metadata !DIExpression()), !dbg !433
  call void @llvm.dbg.declare(metadata i32* %next, metadata !434, metadata !DIExpression()), !dbg !435
  store i32 0, i32* %next, align 4, !dbg !435
  %5 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !436
  %lsu2 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %5, i32 0, i32 3, !dbg !437
  %arraydecay3 = getelementptr inbounds [6 x i16], [6 x i16]* %lsu2, i64 0, i64 0, !dbg !436
  %6 = load i32, i32* %digits, align 4, !dbg !438
  %cmp4 = icmp sle i32 %6, 49, !dbg !438
  br i1 %cmp4, label %cond.true, label %cond.false, !dbg !438

cond.true:                                        ; preds = %if.then
  %7 = load i32, i32* %digits, align 4, !dbg !438
  %idxprom = sext i32 %7 to i64, !dbg !438
  %arrayidx = getelementptr inbounds [50 x i8], [50 x i8]* @d2utable, i64 0, i64 %idxprom, !dbg !438
  %8 = load i8, i8* %arrayidx, align 1, !dbg !438
  %conv = zext i8 %8 to i32, !dbg !438
  br label %cond.end, !dbg !438

cond.false:                                       ; preds = %if.then
  %9 = load i32, i32* %digits, align 4, !dbg !438
  %add = add nsw i32 %9, 3, !dbg !438
  %sub = sub nsw i32 %add, 1, !dbg !438
  %div = sdiv i32 %sub, 3, !dbg !438
  br label %cond.end, !dbg !438

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %div, %cond.false ], !dbg !438
  %idx.ext = sext i32 %cond to i64, !dbg !439
  %add.ptr = getelementptr inbounds i16, i16* %arraydecay3, i64 %idx.ext, !dbg !439
  %add.ptr5 = getelementptr inbounds i16, i16* %add.ptr, i64 -1, !dbg !440
  store i16* %add.ptr5, i16** %source, align 8, !dbg !441
  %arraydecay6 = getelementptr inbounds [12 x i16], [12 x i16]* %uar, i64 0, i64 0, !dbg !442
  %10 = load i32, i32* %digits, align 4, !dbg !443
  %cmp7 = icmp sle i32 %10, 49, !dbg !443
  br i1 %cmp7, label %cond.true9, label %cond.false13, !dbg !443

cond.true9:                                       ; preds = %cond.end
  %11 = load i32, i32* %digits, align 4, !dbg !443
  %idxprom10 = sext i32 %11 to i64, !dbg !443
  %arrayidx11 = getelementptr inbounds [50 x i8], [50 x i8]* @d2utable, i64 0, i64 %idxprom10, !dbg !443
  %12 = load i8, i8* %arrayidx11, align 1, !dbg !443
  %conv12 = zext i8 %12 to i32, !dbg !443
  br label %cond.end17, !dbg !443

cond.false13:                                     ; preds = %cond.end
  %13 = load i32, i32* %digits, align 4, !dbg !443
  %add14 = add nsw i32 %13, 3, !dbg !443
  %sub15 = sub nsw i32 %add14, 1, !dbg !443
  %div16 = sdiv i32 %sub15, 3, !dbg !443
  br label %cond.end17, !dbg !443

cond.end17:                                       ; preds = %cond.false13, %cond.true9
  %cond18 = phi i32 [ %conv12, %cond.true9 ], [ %div16, %cond.false13 ], !dbg !443
  %idx.ext19 = sext i32 %cond18 to i64, !dbg !444
  %add.ptr20 = getelementptr inbounds i16, i16* %arraydecay6, i64 %idx.ext19, !dbg !444
  %add.ptr21 = getelementptr inbounds i16, i16* %add.ptr20, i64 -1, !dbg !445
  %14 = load i32, i32* %shift.addr, align 4, !dbg !446
  %cmp22 = icmp sle i32 %14, 49, !dbg !446
  br i1 %cmp22, label %cond.true24, label %cond.false28, !dbg !446

cond.true24:                                      ; preds = %cond.end17
  %15 = load i32, i32* %shift.addr, align 4, !dbg !446
  %idxprom25 = sext i32 %15 to i64, !dbg !446
  %arrayidx26 = getelementptr inbounds [50 x i8], [50 x i8]* @d2utable, i64 0, i64 %idxprom25, !dbg !446
  %16 = load i8, i8* %arrayidx26, align 1, !dbg !446
  %conv27 = zext i8 %16 to i32, !dbg !446
  br label %cond.end32, !dbg !446

cond.false28:                                     ; preds = %cond.end17
  %17 = load i32, i32* %shift.addr, align 4, !dbg !446
  %add29 = add nsw i32 %17, 3, !dbg !446
  %sub30 = sub nsw i32 %add29, 1, !dbg !446
  %div31 = sdiv i32 %sub30, 3, !dbg !446
  br label %cond.end32, !dbg !446

cond.end32:                                       ; preds = %cond.false28, %cond.true24
  %cond33 = phi i32 [ %conv27, %cond.true24 ], [ %div31, %cond.false28 ], !dbg !446
  %idx.ext34 = sext i32 %cond33 to i64, !dbg !447
  %add.ptr35 = getelementptr inbounds i16, i16* %add.ptr21, i64 %idx.ext34, !dbg !447
  store i16* %add.ptr35, i16** %target, align 8, !dbg !448
  %18 = load i32, i32* %shift.addr, align 4, !dbg !449
  %19 = load i32, i32* %shift.addr, align 4, !dbg !449
  %cmp36 = icmp sle i32 %19, 49, !dbg !449
  br i1 %cmp36, label %cond.true38, label %cond.false42, !dbg !449

cond.true38:                                      ; preds = %cond.end32
  %20 = load i32, i32* %shift.addr, align 4, !dbg !449
  %idxprom39 = sext i32 %20 to i64, !dbg !449
  %arrayidx40 = getelementptr inbounds [50 x i8], [50 x i8]* @d2utable, i64 0, i64 %idxprom39, !dbg !449
  %21 = load i8, i8* %arrayidx40, align 1, !dbg !449
  %conv41 = zext i8 %21 to i32, !dbg !449
  br label %cond.end46, !dbg !449

cond.false42:                                     ; preds = %cond.end32
  %22 = load i32, i32* %shift.addr, align 4, !dbg !449
  %add43 = add nsw i32 %22, 3, !dbg !449
  %sub44 = sub nsw i32 %add43, 1, !dbg !449
  %div45 = sdiv i32 %sub44, 3, !dbg !449
  br label %cond.end46, !dbg !449

cond.end46:                                       ; preds = %cond.false42, %cond.true38
  %cond47 = phi i32 [ %conv41, %cond.true38 ], [ %div45, %cond.false42 ], !dbg !449
  %sub48 = sub nsw i32 %cond47, 1, !dbg !449
  %mul = mul nsw i32 %sub48, 3, !dbg !449
  %sub49 = sub nsw i32 %18, %mul, !dbg !449
  %sub50 = sub nsw i32 3, %sub49, !dbg !450
  store i32 %sub50, i32* %cut, align 4, !dbg !451
  %23 = load i32, i32* %cut, align 4, !dbg !452
  %cmp51 = icmp eq i32 %23, 0, !dbg !454
  br i1 %cmp51, label %if.then53, label %if.else, !dbg !455

if.then53:                                        ; preds = %cond.end46
  br label %for.cond, !dbg !456

for.cond:                                         ; preds = %for.inc, %if.then53
  %24 = load i16*, i16** %source, align 8, !dbg !458
  %25 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !461
  %lsu54 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %25, i32 0, i32 3, !dbg !462
  %arraydecay55 = getelementptr inbounds [6 x i16], [6 x i16]* %lsu54, i64 0, i64 0, !dbg !461
  %cmp56 = icmp uge i16* %24, %arraydecay55, !dbg !463
  br i1 %cmp56, label %for.body, label %for.end, !dbg !464

for.body:                                         ; preds = %for.cond
  %26 = load i16*, i16** %source, align 8, !dbg !465
  %27 = load i16, i16* %26, align 2, !dbg !466
  %28 = load i16*, i16** %target, align 8, !dbg !467
  store i16 %27, i16* %28, align 2, !dbg !468
  br label %for.inc, !dbg !469

for.inc:                                          ; preds = %for.body
  %29 = load i16*, i16** %source, align 8, !dbg !470
  %incdec.ptr = getelementptr inbounds i16, i16* %29, i32 -1, !dbg !470
  store i16* %incdec.ptr, i16** %source, align 8, !dbg !470
  %30 = load i16*, i16** %target, align 8, !dbg !471
  %incdec.ptr58 = getelementptr inbounds i16, i16* %30, i32 -1, !dbg !471
  store i16* %incdec.ptr58, i16** %target, align 8, !dbg !471
  br label %for.cond, !dbg !472, !llvm.loop !473

for.end:                                          ; preds = %for.cond
  br label %if.end107, !dbg !475

if.else:                                          ; preds = %cond.end46
  %arraydecay59 = getelementptr inbounds [12 x i16], [12 x i16]* %uar, i64 0, i64 0, !dbg !476
  %31 = load i32, i32* %digits, align 4, !dbg !478
  %32 = load i32, i32* %shift.addr, align 4, !dbg !478
  %add60 = add nsw i32 %31, %32, !dbg !478
  %cmp61 = icmp sle i32 %add60, 49, !dbg !478
  br i1 %cmp61, label %cond.true63, label %cond.false68, !dbg !478

cond.true63:                                      ; preds = %if.else
  %33 = load i32, i32* %digits, align 4, !dbg !478
  %34 = load i32, i32* %shift.addr, align 4, !dbg !478
  %add64 = add nsw i32 %33, %34, !dbg !478
  %idxprom65 = sext i32 %add64 to i64, !dbg !478
  %arrayidx66 = getelementptr inbounds [50 x i8], [50 x i8]* @d2utable, i64 0, i64 %idxprom65, !dbg !478
  %35 = load i8, i8* %arrayidx66, align 1, !dbg !478
  %conv67 = zext i8 %35 to i32, !dbg !478
  br label %cond.end73, !dbg !478

cond.false68:                                     ; preds = %if.else
  %36 = load i32, i32* %digits, align 4, !dbg !478
  %37 = load i32, i32* %shift.addr, align 4, !dbg !478
  %add69 = add nsw i32 %36, %37, !dbg !478
  %add70 = add nsw i32 %add69, 3, !dbg !478
  %sub71 = sub nsw i32 %add70, 1, !dbg !478
  %div72 = sdiv i32 %sub71, 3, !dbg !478
  br label %cond.end73, !dbg !478

cond.end73:                                       ; preds = %cond.false68, %cond.true63
  %cond74 = phi i32 [ %conv67, %cond.true63 ], [ %div72, %cond.false68 ], !dbg !478
  %idx.ext75 = sext i32 %cond74 to i64, !dbg !479
  %add.ptr76 = getelementptr inbounds i16, i16* %arraydecay59, i64 %idx.ext75, !dbg !479
  %add.ptr77 = getelementptr inbounds i16, i16* %add.ptr76, i64 -1, !dbg !480
  store i16* %add.ptr77, i16** %first, align 8, !dbg !481
  br label %for.cond78, !dbg !482

for.cond78:                                       ; preds = %for.inc103, %cond.end73
  %38 = load i16*, i16** %source, align 8, !dbg !483
  %39 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !486
  %lsu79 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %39, i32 0, i32 3, !dbg !487
  %arraydecay80 = getelementptr inbounds [6 x i16], [6 x i16]* %lsu79, i64 0, i64 0, !dbg !486
  %cmp81 = icmp uge i16* %38, %arraydecay80, !dbg !488
  br i1 %cmp81, label %for.body83, label %for.end106, !dbg !489

for.body83:                                       ; preds = %for.cond78
  call void @llvm.dbg.declare(metadata i32* %quot, metadata !490, metadata !DIExpression()), !dbg !492
  %40 = load i16*, i16** %source, align 8, !dbg !493
  %41 = load i16, i16* %40, align 2, !dbg !493
  %conv84 = zext i16 %41 to i32, !dbg !493
  %42 = load i32, i32* %cut, align 4, !dbg !493
  %shr = lshr i32 %conv84, %42, !dbg !493
  %43 = load i32, i32* %cut, align 4, !dbg !493
  %idxprom85 = sext i32 %43 to i64, !dbg !493
  %arrayidx86 = getelementptr inbounds [5 x i32], [5 x i32]* @multies, i64 0, i64 %idxprom85, !dbg !493
  %44 = load i32, i32* %arrayidx86, align 4, !dbg !493
  %mul87 = mul i32 %shr, %44, !dbg !493
  %shr88 = lshr i32 %mul87, 17, !dbg !493
  store i32 %shr88, i32* %quot, align 4, !dbg !492
  call void @llvm.dbg.declare(metadata i32* %rem, metadata !494, metadata !DIExpression()), !dbg !495
  %45 = load i16*, i16** %source, align 8, !dbg !496
  %46 = load i16, i16* %45, align 2, !dbg !497
  %conv89 = zext i16 %46 to i32, !dbg !497
  %47 = load i32, i32* %quot, align 4, !dbg !498
  %48 = load i32, i32* %cut, align 4, !dbg !499
  %idxprom90 = sext i32 %48 to i64, !dbg !500
  %arrayidx91 = getelementptr inbounds [10 x i32], [10 x i32]* @DECPOWERS, i64 0, i64 %idxprom90, !dbg !500
  %49 = load i32, i32* %arrayidx91, align 4, !dbg !500
  %mul92 = mul i32 %47, %49, !dbg !501
  %sub93 = sub i32 %conv89, %mul92, !dbg !502
  store i32 %sub93, i32* %rem, align 4, !dbg !495
  %50 = load i32, i32* %quot, align 4, !dbg !503
  %51 = load i32, i32* %next, align 4, !dbg !504
  %add94 = add i32 %51, %50, !dbg !504
  store i32 %add94, i32* %next, align 4, !dbg !504
  %52 = load i16*, i16** %target, align 8, !dbg !505
  %53 = load i16*, i16** %first, align 8, !dbg !507
  %cmp95 = icmp ule i16* %52, %53, !dbg !508
  br i1 %cmp95, label %if.then97, label %if.end, !dbg !509

if.then97:                                        ; preds = %for.body83
  %54 = load i32, i32* %next, align 4, !dbg !510
  %conv98 = trunc i32 %54 to i16, !dbg !511
  %55 = load i16*, i16** %target, align 8, !dbg !512
  store i16 %conv98, i16* %55, align 2, !dbg !513
  br label %if.end, !dbg !514

if.end:                                           ; preds = %if.then97, %for.body83
  %56 = load i32, i32* %rem, align 4, !dbg !515
  %57 = load i32, i32* %cut, align 4, !dbg !516
  %sub99 = sub nsw i32 3, %57, !dbg !517
  %idxprom100 = sext i32 %sub99 to i64, !dbg !518
  %arrayidx101 = getelementptr inbounds [10 x i32], [10 x i32]* @DECPOWERS, i64 0, i64 %idxprom100, !dbg !518
  %58 = load i32, i32* %arrayidx101, align 4, !dbg !518
  %mul102 = mul i32 %56, %58, !dbg !519
  store i32 %mul102, i32* %next, align 4, !dbg !520
  br label %for.inc103, !dbg !521

for.inc103:                                       ; preds = %if.end
  %59 = load i16*, i16** %source, align 8, !dbg !522
  %incdec.ptr104 = getelementptr inbounds i16, i16* %59, i32 -1, !dbg !522
  store i16* %incdec.ptr104, i16** %source, align 8, !dbg !522
  %60 = load i16*, i16** %target, align 8, !dbg !523
  %incdec.ptr105 = getelementptr inbounds i16, i16* %60, i32 -1, !dbg !523
  store i16* %incdec.ptr105, i16** %target, align 8, !dbg !523
  br label %for.cond78, !dbg !524, !llvm.loop !525

for.end106:                                       ; preds = %for.cond78
  br label %if.end107

if.end107:                                        ; preds = %for.end106, %for.end
  br label %for.cond108, !dbg !527

for.cond108:                                      ; preds = %for.inc114, %if.end107
  %61 = load i16*, i16** %target, align 8, !dbg !528
  %arraydecay109 = getelementptr inbounds [12 x i16], [12 x i16]* %uar, i64 0, i64 0, !dbg !531
  %cmp110 = icmp uge i16* %61, %arraydecay109, !dbg !532
  br i1 %cmp110, label %for.body112, label %for.end116, !dbg !533

for.body112:                                      ; preds = %for.cond108
  %62 = load i32, i32* %next, align 4, !dbg !534
  %conv113 = trunc i32 %62 to i16, !dbg !536
  %63 = load i16*, i16** %target, align 8, !dbg !537
  store i16 %conv113, i16* %63, align 2, !dbg !538
  store i32 0, i32* %next, align 4, !dbg !539
  br label %for.inc114, !dbg !540

for.inc114:                                       ; preds = %for.body112
  %64 = load i16*, i16** %target, align 8, !dbg !541
  %incdec.ptr115 = getelementptr inbounds i16, i16* %64, i32 -1, !dbg !541
  store i16* %incdec.ptr115, i16** %target, align 8, !dbg !541
  br label %for.cond108, !dbg !542, !llvm.loop !543

for.end116:                                       ; preds = %for.cond108
  %65 = load i32, i32* %shift.addr, align 4, !dbg !545
  %66 = load i32, i32* %digits, align 4, !dbg !546
  %add117 = add nsw i32 %66, %65, !dbg !546
  store i32 %add117, i32* %digits, align 4, !dbg !546
  %arraydecay118 = getelementptr inbounds [12 x i16], [12 x i16]* %uar, i64 0, i64 0, !dbg !547
  store i16* %arraydecay118, i16** %inu, align 8, !dbg !548
  br label %if.end119, !dbg !549

if.end119:                                        ; preds = %for.end116, %entry
  store i32 0, i32* %n, align 4, !dbg !550
  br label %for.cond120, !dbg !552

for.cond120:                                      ; preds = %for.inc140, %if.end119
  %67 = load i32, i32* %digits, align 4, !dbg !553
  %cmp121 = icmp sgt i32 %67, 0, !dbg !555
  br i1 %cmp121, label %for.body123, label %for.end141, !dbg !556

for.body123:                                      ; preds = %for.cond120
  %68 = load i16*, i16** %inu, align 8, !dbg !557
  %69 = load i16, i16* %68, align 2, !dbg !559
  %conv124 = zext i16 %69 to i32, !dbg !559
  store i32 %conv124, i32* %bin, align 4, !dbg !560
  %70 = load i32, i32* %digits, align 4, !dbg !561
  %sub125 = sub nsw i32 %70, 3, !dbg !561
  store i32 %sub125, i32* %digits, align 4, !dbg !561
  %71 = load i16*, i16** %inu, align 8, !dbg !562
  %incdec.ptr126 = getelementptr inbounds i16, i16* %71, i32 1, !dbg !562
  store i16* %incdec.ptr126, i16** %inu, align 8, !dbg !562
  %72 = load i32, i32* %bin, align 4, !dbg !563
  %idxprom127 = zext i32 %72 to i64, !dbg !564
  %arrayidx128 = getelementptr inbounds [1000 x i16], [1000 x i16]* @BIN2DPD, i64 0, i64 %idxprom127, !dbg !564
  %73 = load i16, i16* %arrayidx128, align 2, !dbg !564
  %conv129 = zext i16 %73 to i32, !dbg !564
  store i32 %conv129, i32* %dpd, align 4, !dbg !565
  %74 = load i32, i32* %dpd, align 4, !dbg !566
  %75 = load i32, i32* %uoff, align 4, !dbg !567
  %shl = shl i32 %74, %75, !dbg !568
  %76 = load i32*, i32** %uout, align 8, !dbg !569
  %77 = load i32, i32* %76, align 4, !dbg !570
  %or = or i32 %77, %shl, !dbg !570
  store i32 %or, i32* %76, align 4, !dbg !570
  %78 = load i32, i32* %uoff, align 4, !dbg !571
  %add130 = add i32 %78, 10, !dbg !571
  store i32 %add130, i32* %uoff, align 4, !dbg !571
  %79 = load i32, i32* %uoff, align 4, !dbg !572
  %cmp131 = icmp ult i32 %79, 32, !dbg !574
  br i1 %cmp131, label %if.then133, label %if.end134, !dbg !575

if.then133:                                       ; preds = %for.body123
  br label %for.inc140, !dbg !576

if.end134:                                        ; preds = %for.body123
  %80 = load i32*, i32** %uout, align 8, !dbg !577
  %incdec.ptr135 = getelementptr inbounds i32, i32* %80, i32 1, !dbg !577
  store i32* %incdec.ptr135, i32** %uout, align 8, !dbg !577
  %81 = load i32, i32* %uoff, align 4, !dbg !578
  %sub136 = sub i32 %81, 32, !dbg !578
  store i32 %sub136, i32* %uoff, align 4, !dbg !578
  %82 = load i32, i32* %dpd, align 4, !dbg !579
  %83 = load i32, i32* %uoff, align 4, !dbg !580
  %sub137 = sub i32 10, %83, !dbg !581
  %shr138 = lshr i32 %82, %sub137, !dbg !582
  %84 = load i32*, i32** %uout, align 8, !dbg !583
  %85 = load i32, i32* %84, align 4, !dbg !584
  %or139 = or i32 %85, %shr138, !dbg !584
  store i32 %or139, i32* %84, align 4, !dbg !584
  br label %for.inc140, !dbg !585

for.inc140:                                       ; preds = %if.end134, %if.then133
  %86 = load i32, i32* %n, align 4, !dbg !586
  %inc = add nsw i32 %86, 1, !dbg !586
  store i32 %inc, i32* %n, align 4, !dbg !586
  br label %for.cond120, !dbg !587, !llvm.loop !588

for.end141:                                       ; preds = %for.cond120
  ret void, !dbg !590
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local %struct.decContext* @decContextSetStatus(%struct.decContext*, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.decNumber* @__dpd64ToNumber(%struct.decimal64* %d64, %struct.decNumber* %dn) #0 !dbg !591 {
entry:
  %retval = alloca %struct.decNumber*, align 8
  %d64.addr = alloca %struct.decimal64*, align 8
  %dn.addr = alloca %struct.decNumber*, align 8
  %msd = alloca i32, align 4
  %exp = alloca i32, align 4
  %comb = alloca i32, align 4
  %need = alloca i32, align 4
  %uiwork = alloca i32, align 4
  %sourar = alloca [2 x i32], align 4
  store %struct.decimal64* %d64, %struct.decimal64** %d64.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %d64.addr, metadata !597, metadata !DIExpression()), !dbg !598
  store %struct.decNumber* %dn, %struct.decNumber** %dn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decNumber** %dn.addr, metadata !599, metadata !DIExpression()), !dbg !600
  call void @llvm.dbg.declare(metadata i32* %msd, metadata !601, metadata !DIExpression()), !dbg !602
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !603, metadata !DIExpression()), !dbg !604
  call void @llvm.dbg.declare(metadata i32* %comb, metadata !605, metadata !DIExpression()), !dbg !606
  call void @llvm.dbg.declare(metadata i32* %need, metadata !607, metadata !DIExpression()), !dbg !608
  call void @llvm.dbg.declare(metadata i32* %uiwork, metadata !609, metadata !DIExpression()), !dbg !610
  call void @llvm.dbg.declare(metadata [2 x i32]* %sourar, metadata !611, metadata !DIExpression()), !dbg !612
  %0 = bitcast i32* %uiwork to i8*, !dbg !613
  %1 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !613
  %bytes = getelementptr inbounds %struct.decimal64, %struct.decimal64* %1, i32 0, i32 0, !dbg !613
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %bytes, i64 0, i64 0, !dbg !613
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 1 %arraydecay, i64 4, i1 false), !dbg !613
  %2 = load i32, i32* %uiwork, align 4, !dbg !613
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 0, !dbg !616
  store i32 %2, i32* %arrayidx, align 4, !dbg !617
  %3 = bitcast i32* %uiwork to i8*, !dbg !618
  %4 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !618
  %bytes1 = getelementptr inbounds %struct.decimal64, %struct.decimal64* %4, i32 0, i32 0, !dbg !618
  %arraydecay2 = getelementptr inbounds [8 x i8], [8 x i8]* %bytes1, i64 0, i64 0, !dbg !618
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay2, i64 4, !dbg !618
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 1 %add.ptr, i64 4, i1 false), !dbg !618
  %5 = load i32, i32* %uiwork, align 4, !dbg !618
  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !619
  store i32 %5, i32* %arrayidx3, align 4, !dbg !620
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !621
  %6 = load i32, i32* %arrayidx4, align 4, !dbg !621
  %shr = lshr i32 %6, 26, !dbg !622
  %and = and i32 %shr, 31, !dbg !623
  store i32 %and, i32* %comb, align 4, !dbg !624
  %7 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !625
  %call = call %struct.decNumber* @decNumberZero(%struct.decNumber* %7), !dbg !626
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !627
  %8 = load i32, i32* %arrayidx5, align 4, !dbg !627
  %and6 = and i32 %8, -2147483648, !dbg !629
  %tobool = icmp ne i32 %and6, 0, !dbg !629
  br i1 %tobool, label %if.then, label %if.end, !dbg !630

if.then:                                          ; preds = %entry
  %9 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !631
  %bits = getelementptr inbounds %struct.decNumber, %struct.decNumber* %9, i32 0, i32 2, !dbg !632
  store i8 -128, i8* %bits, align 4, !dbg !633
  br label %if.end, !dbg !631

if.end:                                           ; preds = %if.then, %entry
  %10 = load i32, i32* %comb, align 4, !dbg !634
  %idxprom = zext i32 %10 to i64, !dbg !635
  %arrayidx7 = getelementptr inbounds [32 x i32], [32 x i32]* @COMBMSD, i64 0, i64 %idxprom, !dbg !635
  %11 = load i32, i32* %arrayidx7, align 4, !dbg !635
  store i32 %11, i32* %msd, align 4, !dbg !636
  %12 = load i32, i32* %comb, align 4, !dbg !637
  %idxprom8 = zext i32 %12 to i64, !dbg !638
  %arrayidx9 = getelementptr inbounds [32 x i32], [32 x i32]* @COMBEXP, i64 0, i64 %idxprom8, !dbg !638
  %13 = load i32, i32* %arrayidx9, align 4, !dbg !638
  store i32 %13, i32* %exp, align 4, !dbg !639
  %14 = load i32, i32* %exp, align 4, !dbg !640
  %cmp = icmp eq i32 %14, 3, !dbg !642
  br i1 %cmp, label %if.then10, label %if.else30, !dbg !643

if.then10:                                        ; preds = %if.end
  %15 = load i32, i32* %msd, align 4, !dbg !644
  %cmp11 = icmp eq i32 %15, 0, !dbg !647
  br i1 %cmp11, label %if.then12, label %if.else, !dbg !648

if.then12:                                        ; preds = %if.then10
  %16 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !649
  %bits13 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %16, i32 0, i32 2, !dbg !651
  %17 = load i8, i8* %bits13, align 4, !dbg !652
  %conv = zext i8 %17 to i32, !dbg !652
  %or = or i32 %conv, 64, !dbg !652
  %conv14 = trunc i32 %or to i8, !dbg !652
  store i8 %conv14, i8* %bits13, align 4, !dbg !652
  %18 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !653
  store %struct.decNumber* %18, %struct.decNumber** %retval, align 8, !dbg !654
  br label %return, !dbg !654

if.else:                                          ; preds = %if.then10
  %arrayidx15 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !655
  %19 = load i32, i32* %arrayidx15, align 4, !dbg !655
  %and16 = and i32 %19, 33554432, !dbg !657
  %tobool17 = icmp ne i32 %and16, 0, !dbg !657
  br i1 %tobool17, label %if.then18, label %if.else23, !dbg !658

if.then18:                                        ; preds = %if.else
  %20 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !659
  %bits19 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %20, i32 0, i32 2, !dbg !660
  %21 = load i8, i8* %bits19, align 4, !dbg !661
  %conv20 = zext i8 %21 to i32, !dbg !661
  %or21 = or i32 %conv20, 16, !dbg !661
  %conv22 = trunc i32 %or21 to i8, !dbg !661
  store i8 %conv22, i8* %bits19, align 4, !dbg !661
  br label %if.end28, !dbg !659

if.else23:                                        ; preds = %if.else
  %22 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !662
  %bits24 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %22, i32 0, i32 2, !dbg !663
  %23 = load i8, i8* %bits24, align 4, !dbg !664
  %conv25 = zext i8 %23 to i32, !dbg !664
  %or26 = or i32 %conv25, 32, !dbg !664
  %conv27 = trunc i32 %or26 to i8, !dbg !664
  store i8 %conv27, i8* %bits24, align 4, !dbg !664
  br label %if.end28

if.end28:                                         ; preds = %if.else23, %if.then18
  br label %if.end29

if.end29:                                         ; preds = %if.end28
  store i32 0, i32* %msd, align 4, !dbg !665
  br label %if.end34, !dbg !666

if.else30:                                        ; preds = %if.end
  %24 = load i32, i32* %exp, align 4, !dbg !667
  %shl = shl i32 %24, 8, !dbg !669
  %arrayidx31 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !670
  %25 = load i32, i32* %arrayidx31, align 4, !dbg !670
  %shr32 = lshr i32 %25, 18, !dbg !671
  %and33 = and i32 %shr32, 255, !dbg !672
  %add = add i32 %shl, %and33, !dbg !673
  %sub = sub i32 %add, 398, !dbg !674
  %26 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !675
  %exponent = getelementptr inbounds %struct.decNumber, %struct.decNumber* %26, i32 0, i32 1, !dbg !676
  store i32 %sub, i32* %exponent, align 4, !dbg !677
  br label %if.end34

if.end34:                                         ; preds = %if.else30, %if.end29
  %arrayidx35 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !678
  %27 = load i32, i32* %arrayidx35, align 4, !dbg !679
  %and36 = and i32 %27, 262143, !dbg !679
  store i32 %and36, i32* %arrayidx35, align 4, !dbg !679
  %28 = load i32, i32* %msd, align 4, !dbg !680
  %tobool37 = icmp ne i32 %28, 0, !dbg !680
  br i1 %tobool37, label %if.then38, label %if.else42, !dbg !682

if.then38:                                        ; preds = %if.end34
  %29 = load i32, i32* %msd, align 4, !dbg !683
  %shl39 = shl i32 %29, 18, !dbg !685
  %arrayidx40 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !686
  %30 = load i32, i32* %arrayidx40, align 4, !dbg !687
  %or41 = or i32 %30, %shl39, !dbg !687
  store i32 %or41, i32* %arrayidx40, align 4, !dbg !687
  store i32 6, i32* %need, align 4, !dbg !688
  br label %if.end63, !dbg !689

if.else42:                                        ; preds = %if.end34
  %arrayidx43 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !690
  %31 = load i32, i32* %arrayidx43, align 4, !dbg !690
  %tobool44 = icmp ne i32 %31, 0, !dbg !690
  br i1 %tobool44, label %if.else55, label %if.then45, !dbg !693

if.then45:                                        ; preds = %if.else42
  %arrayidx46 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 0, !dbg !694
  %32 = load i32, i32* %arrayidx46, align 4, !dbg !694
  %tobool47 = icmp ne i32 %32, 0, !dbg !694
  br i1 %tobool47, label %if.end49, label %if.then48, !dbg !697

if.then48:                                        ; preds = %if.then45
  %33 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !698
  store %struct.decNumber* %33, %struct.decNumber** %retval, align 8, !dbg !699
  br label %return, !dbg !699

if.end49:                                         ; preds = %if.then45
  store i32 3, i32* %need, align 4, !dbg !700
  %arrayidx50 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 0, !dbg !701
  %34 = load i32, i32* %arrayidx50, align 4, !dbg !701
  %and51 = and i32 %34, -1073741824, !dbg !703
  %tobool52 = icmp ne i32 %and51, 0, !dbg !703
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !704

if.then53:                                        ; preds = %if.end49
  %35 = load i32, i32* %need, align 4, !dbg !705
  %inc = add nsw i32 %35, 1, !dbg !705
  store i32 %inc, i32* %need, align 4, !dbg !705
  br label %if.end54, !dbg !706

if.end54:                                         ; preds = %if.then53, %if.end49
  br label %if.end62, !dbg !707

if.else55:                                        ; preds = %if.else42
  store i32 4, i32* %need, align 4, !dbg !708
  %arrayidx56 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !710
  %36 = load i32, i32* %arrayidx56, align 4, !dbg !710
  %and57 = and i32 %36, 261888, !dbg !712
  %tobool58 = icmp ne i32 %and57, 0, !dbg !712
  br i1 %tobool58, label %if.then59, label %if.end61, !dbg !713

if.then59:                                        ; preds = %if.else55
  %37 = load i32, i32* %need, align 4, !dbg !714
  %inc60 = add nsw i32 %37, 1, !dbg !714
  store i32 %inc60, i32* %need, align 4, !dbg !714
  br label %if.end61, !dbg !715

if.end61:                                         ; preds = %if.then59, %if.else55
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end54
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then38
  %38 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !716
  %arraydecay64 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 0, !dbg !717
  %39 = load i32, i32* %need, align 4, !dbg !718
  call void @decDigitsFromDPD(%struct.decNumber* %38, i32* %arraydecay64, i32 %39), !dbg !719
  %40 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !720
  store %struct.decNumber* %40, %struct.decNumber** %retval, align 8, !dbg !721
  br label %return, !dbg !721

return:                                           ; preds = %if.end63, %if.then48, %if.then12
  %41 = load %struct.decNumber*, %struct.decNumber** %retval, align 8, !dbg !722
  ret %struct.decNumber* %41, !dbg !722
}

declare dso_local %struct.decNumber* @decNumberZero(%struct.decNumber*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @decDigitsFromDPD(%struct.decNumber* %dn, i32* %sour, i32 %declets) #0 !dbg !723 {
entry:
  %dn.addr = alloca %struct.decNumber*, align 8
  %sour.addr = alloca i32*, align 8
  %declets.addr = alloca i32, align 4
  %dpd = alloca i32, align 4
  %n = alloca i32, align 4
  %uout = alloca i16*, align 8
  %last = alloca i16*, align 8
  %uin = alloca i32*, align 8
  %uoff = alloca i32, align 4
  store %struct.decNumber* %dn, %struct.decNumber** %dn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decNumber** %dn.addr, metadata !727, metadata !DIExpression()), !dbg !728
  store i32* %sour, i32** %sour.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %sour.addr, metadata !729, metadata !DIExpression()), !dbg !730
  store i32 %declets, i32* %declets.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %declets.addr, metadata !731, metadata !DIExpression()), !dbg !732
  call void @llvm.dbg.declare(metadata i32* %dpd, metadata !733, metadata !DIExpression()), !dbg !734
  call void @llvm.dbg.declare(metadata i32* %n, metadata !735, metadata !DIExpression()), !dbg !736
  call void @llvm.dbg.declare(metadata i16** %uout, metadata !737, metadata !DIExpression()), !dbg !738
  %0 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !739
  %lsu = getelementptr inbounds %struct.decNumber, %struct.decNumber* %0, i32 0, i32 3, !dbg !740
  %arraydecay = getelementptr inbounds [6 x i16], [6 x i16]* %lsu, i64 0, i64 0, !dbg !739
  store i16* %arraydecay, i16** %uout, align 8, !dbg !738
  call void @llvm.dbg.declare(metadata i16** %last, metadata !741, metadata !DIExpression()), !dbg !742
  %1 = load i16*, i16** %uout, align 8, !dbg !743
  store i16* %1, i16** %last, align 8, !dbg !742
  call void @llvm.dbg.declare(metadata i32** %uin, metadata !744, metadata !DIExpression()), !dbg !745
  %2 = load i32*, i32** %sour.addr, align 8, !dbg !746
  store i32* %2, i32** %uin, align 8, !dbg !745
  call void @llvm.dbg.declare(metadata i32* %uoff, metadata !747, metadata !DIExpression()), !dbg !748
  store i32 0, i32* %uoff, align 4, !dbg !748
  %3 = load i32, i32* %declets.addr, align 4, !dbg !749
  %sub = sub nsw i32 %3, 1, !dbg !751
  store i32 %sub, i32* %n, align 4, !dbg !752
  br label %for.cond, !dbg !753

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %n, align 4, !dbg !754
  %cmp = icmp sge i32 %4, 0, !dbg !756
  br i1 %cmp, label %for.body, label %for.end, !dbg !757

for.body:                                         ; preds = %for.cond
  %5 = load i32*, i32** %uin, align 8, !dbg !758
  %6 = load i32, i32* %5, align 4, !dbg !760
  %7 = load i32, i32* %uoff, align 4, !dbg !761
  %shr = lshr i32 %6, %7, !dbg !762
  store i32 %shr, i32* %dpd, align 4, !dbg !763
  %8 = load i32, i32* %uoff, align 4, !dbg !764
  %add = add i32 %8, 10, !dbg !764
  store i32 %add, i32* %uoff, align 4, !dbg !764
  %9 = load i32, i32* %uoff, align 4, !dbg !765
  %cmp1 = icmp ugt i32 %9, 32, !dbg !767
  br i1 %cmp1, label %if.then, label %if.end, !dbg !768

if.then:                                          ; preds = %for.body
  %10 = load i32*, i32** %uin, align 8, !dbg !769
  %incdec.ptr = getelementptr inbounds i32, i32* %10, i32 1, !dbg !769
  store i32* %incdec.ptr, i32** %uin, align 8, !dbg !769
  %11 = load i32, i32* %uoff, align 4, !dbg !771
  %sub2 = sub i32 %11, 32, !dbg !771
  store i32 %sub2, i32* %uoff, align 4, !dbg !771
  %12 = load i32*, i32** %uin, align 8, !dbg !772
  %13 = load i32, i32* %12, align 4, !dbg !773
  %14 = load i32, i32* %uoff, align 4, !dbg !774
  %sub3 = sub i32 10, %14, !dbg !775
  %shl = shl i32 %13, %sub3, !dbg !776
  %15 = load i32, i32* %dpd, align 4, !dbg !777
  %or = or i32 %15, %shl, !dbg !777
  store i32 %or, i32* %dpd, align 4, !dbg !777
  br label %if.end, !dbg !778

if.end:                                           ; preds = %if.then, %for.body
  %16 = load i32, i32* %dpd, align 4, !dbg !779
  %and = and i32 %16, 1023, !dbg !779
  store i32 %and, i32* %dpd, align 4, !dbg !779
  %17 = load i32, i32* %dpd, align 4, !dbg !780
  %cmp4 = icmp eq i32 %17, 0, !dbg !782
  br i1 %cmp4, label %if.then5, label %if.else, !dbg !783

if.then5:                                         ; preds = %if.end
  %18 = load i16*, i16** %uout, align 8, !dbg !784
  store i16 0, i16* %18, align 2, !dbg !785
  br label %if.end6, !dbg !786

if.else:                                          ; preds = %if.end
  %19 = load i32, i32* %dpd, align 4, !dbg !787
  %idxprom = zext i32 %19 to i64, !dbg !789
  %arrayidx = getelementptr inbounds [1024 x i16], [1024 x i16]* @DPD2BIN, i64 0, i64 %idxprom, !dbg !789
  %20 = load i16, i16* %arrayidx, align 2, !dbg !789
  %21 = load i16*, i16** %uout, align 8, !dbg !790
  store i16 %20, i16* %21, align 2, !dbg !791
  %22 = load i16*, i16** %uout, align 8, !dbg !792
  store i16* %22, i16** %last, align 8, !dbg !793
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then5
  %23 = load i16*, i16** %uout, align 8, !dbg !794
  %incdec.ptr7 = getelementptr inbounds i16, i16* %23, i32 1, !dbg !794
  store i16* %incdec.ptr7, i16** %uout, align 8, !dbg !794
  br label %for.inc, !dbg !795

for.inc:                                          ; preds = %if.end6
  %24 = load i32, i32* %n, align 4, !dbg !796
  %dec = add nsw i32 %24, -1, !dbg !796
  store i32 %dec, i32* %n, align 4, !dbg !796
  br label %for.cond, !dbg !797, !llvm.loop !798

for.end:                                          ; preds = %for.cond
  %25 = load i16*, i16** %last, align 8, !dbg !800
  %26 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !801
  %lsu8 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %26, i32 0, i32 3, !dbg !802
  %arraydecay9 = getelementptr inbounds [6 x i16], [6 x i16]* %lsu8, i64 0, i64 0, !dbg !801
  %sub.ptr.lhs.cast = ptrtoint i16* %25 to i64, !dbg !803
  %sub.ptr.rhs.cast = ptrtoint i16* %arraydecay9 to i64, !dbg !803
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !803
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 2, !dbg !803
  %mul = mul nsw i64 %sub.ptr.div, 3, !dbg !804
  %add10 = add nsw i64 %mul, 1, !dbg !805
  %conv = trunc i64 %add10 to i32, !dbg !806
  %27 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !807
  %digits = getelementptr inbounds %struct.decNumber, %struct.decNumber* %27, i32 0, i32 0, !dbg !808
  store i32 %conv, i32* %digits, align 4, !dbg !809
  %28 = load i16*, i16** %last, align 8, !dbg !810
  %29 = load i16, i16* %28, align 2, !dbg !812
  %conv11 = zext i16 %29 to i32, !dbg !812
  %cmp12 = icmp slt i32 %conv11, 10, !dbg !813
  br i1 %cmp12, label %if.then14, label %if.end15, !dbg !814

if.then14:                                        ; preds = %for.end
  br label %return, !dbg !815

if.end15:                                         ; preds = %for.end
  %30 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !816
  %digits16 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %30, i32 0, i32 0, !dbg !817
  %31 = load i32, i32* %digits16, align 4, !dbg !818
  %inc = add nsw i32 %31, 1, !dbg !818
  store i32 %inc, i32* %digits16, align 4, !dbg !818
  %32 = load i16*, i16** %last, align 8, !dbg !819
  %33 = load i16, i16* %32, align 2, !dbg !821
  %conv17 = zext i16 %33 to i32, !dbg !821
  %cmp18 = icmp slt i32 %conv17, 100, !dbg !822
  br i1 %cmp18, label %if.then20, label %if.end21, !dbg !823

if.then20:                                        ; preds = %if.end15
  br label %return, !dbg !824

if.end21:                                         ; preds = %if.end15
  %34 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !825
  %digits22 = getelementptr inbounds %struct.decNumber, %struct.decNumber* %34, i32 0, i32 0, !dbg !826
  %35 = load i32, i32* %digits22, align 4, !dbg !827
  %inc23 = add nsw i32 %35, 1, !dbg !827
  store i32 %inc23, i32* %digits22, align 4, !dbg !827
  br label %return, !dbg !828

return:                                           ; preds = %if.end21, %if.then20, %if.then14
  ret void, !dbg !829
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @__dpd64ToEngString(%struct.decimal64* %d64, i8* %string) #0 !dbg !830 {
entry:
  %d64.addr = alloca %struct.decimal64*, align 8
  %string.addr = alloca i8*, align 8
  %dn = alloca %struct.decNumber, align 4
  store %struct.decimal64* %d64, %struct.decimal64** %d64.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %d64.addr, metadata !834, metadata !DIExpression()), !dbg !835
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !836, metadata !DIExpression()), !dbg !837
  call void @llvm.dbg.declare(metadata %struct.decNumber* %dn, metadata !838, metadata !DIExpression()), !dbg !839
  %0 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !840
  %call = call %struct.decNumber* @__dpd64ToNumber(%struct.decimal64* %0, %struct.decNumber* %dn), !dbg !841
  %1 = load i8*, i8** %string.addr, align 8, !dbg !842
  %call1 = call i8* @decNumberToEngString(%struct.decNumber* %dn, i8* %1), !dbg !843
  %2 = load i8*, i8** %string.addr, align 8, !dbg !844
  ret i8* %2, !dbg !845
}

declare dso_local i8* @decNumberToEngString(%struct.decNumber*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @__dpd64ToString(%struct.decimal64* %d64, i8* %string) #0 !dbg !846 {
entry:
  %retval = alloca i8*, align 8
  %d64.addr = alloca %struct.decimal64*, align 8
  %string.addr = alloca i8*, align 8
  %msd = alloca i32, align 4
  %exp = alloca i32, align 4
  %comb = alloca i32, align 4
  %cstart = alloca i8*, align 8
  %c = alloca i8*, align 8
  %u = alloca i8*, align 8
  %s = alloca i8*, align 8
  %t = alloca i8*, align 8
  %dpd = alloca i32, align 4
  %pre = alloca i32, align 4
  %e = alloca i32, align 4
  %uiwork = alloca i32, align 4
  %sourar = alloca [2 x i32], align 4
  %dotat = alloca i8*, align 8
  store %struct.decimal64* %d64, %struct.decimal64** %d64.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %d64.addr, metadata !847, metadata !DIExpression()), !dbg !848
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !849, metadata !DIExpression()), !dbg !850
  call void @llvm.dbg.declare(metadata i32* %msd, metadata !851, metadata !DIExpression()), !dbg !852
  call void @llvm.dbg.declare(metadata i32* %exp, metadata !853, metadata !DIExpression()), !dbg !854
  call void @llvm.dbg.declare(metadata i32* %comb, metadata !855, metadata !DIExpression()), !dbg !856
  call void @llvm.dbg.declare(metadata i8** %cstart, metadata !857, metadata !DIExpression()), !dbg !858
  call void @llvm.dbg.declare(metadata i8** %c, metadata !859, metadata !DIExpression()), !dbg !860
  call void @llvm.dbg.declare(metadata i8** %u, metadata !861, metadata !DIExpression()), !dbg !863
  call void @llvm.dbg.declare(metadata i8** %s, metadata !864, metadata !DIExpression()), !dbg !865
  call void @llvm.dbg.declare(metadata i8** %t, metadata !866, metadata !DIExpression()), !dbg !867
  call void @llvm.dbg.declare(metadata i32* %dpd, metadata !868, metadata !DIExpression()), !dbg !869
  call void @llvm.dbg.declare(metadata i32* %pre, metadata !870, metadata !DIExpression()), !dbg !871
  call void @llvm.dbg.declare(metadata i32* %e, metadata !872, metadata !DIExpression()), !dbg !873
  call void @llvm.dbg.declare(metadata i32* %uiwork, metadata !874, metadata !DIExpression()), !dbg !875
  call void @llvm.dbg.declare(metadata [2 x i32]* %sourar, metadata !876, metadata !DIExpression()), !dbg !877
  %0 = bitcast i32* %uiwork to i8*, !dbg !878
  %1 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !878
  %bytes = getelementptr inbounds %struct.decimal64, %struct.decimal64* %1, i32 0, i32 0, !dbg !878
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %bytes, i64 0, i64 0, !dbg !878
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 1 %arraydecay, i64 4, i1 false), !dbg !878
  %2 = load i32, i32* %uiwork, align 4, !dbg !878
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 0, !dbg !881
  store i32 %2, i32* %arrayidx, align 4, !dbg !882
  %3 = bitcast i32* %uiwork to i8*, !dbg !883
  %4 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !883
  %bytes1 = getelementptr inbounds %struct.decimal64, %struct.decimal64* %4, i32 0, i32 0, !dbg !883
  %arraydecay2 = getelementptr inbounds [8 x i8], [8 x i8]* %bytes1, i64 0, i64 0, !dbg !883
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay2, i64 4, !dbg !883
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 1 %add.ptr, i64 4, i1 false), !dbg !883
  %5 = load i32, i32* %uiwork, align 4, !dbg !883
  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !884
  store i32 %5, i32* %arrayidx3, align 4, !dbg !885
  %6 = load i8*, i8** %string.addr, align 8, !dbg !886
  store i8* %6, i8** %c, align 8, !dbg !887
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !888
  %7 = load i32, i32* %arrayidx4, align 4, !dbg !888
  %cmp = icmp slt i32 %7, 0, !dbg !890
  br i1 %cmp, label %if.then, label %if.end, !dbg !891

if.then:                                          ; preds = %entry
  %8 = load i8*, i8** %c, align 8, !dbg !892
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1, !dbg !892
  store i8* %incdec.ptr, i8** %c, align 8, !dbg !892
  store i8 45, i8* %8, align 1, !dbg !893
  br label %if.end, !dbg !894

if.end:                                           ; preds = %if.then, %entry
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !895
  %9 = load i32, i32* %arrayidx5, align 4, !dbg !895
  %shr = lshr i32 %9, 26, !dbg !896
  %and = and i32 %shr, 31, !dbg !897
  store i32 %and, i32* %comb, align 4, !dbg !898
  %10 = load i32, i32* %comb, align 4, !dbg !899
  %idxprom = zext i32 %10 to i64, !dbg !900
  %arrayidx6 = getelementptr inbounds [32 x i32], [32 x i32]* @COMBMSD, i64 0, i64 %idxprom, !dbg !900
  %11 = load i32, i32* %arrayidx6, align 4, !dbg !900
  store i32 %11, i32* %msd, align 4, !dbg !901
  %12 = load i32, i32* %comb, align 4, !dbg !902
  %idxprom7 = zext i32 %12 to i64, !dbg !903
  %arrayidx8 = getelementptr inbounds [32 x i32], [32 x i32]* @COMBEXP, i64 0, i64 %idxprom7, !dbg !903
  %13 = load i32, i32* %arrayidx8, align 4, !dbg !903
  store i32 %13, i32* %exp, align 4, !dbg !904
  %14 = load i32, i32* %exp, align 4, !dbg !905
  %cmp9 = icmp eq i32 %14, 3, !dbg !907
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !908

if.then10:                                        ; preds = %if.end
  %15 = load i32, i32* %msd, align 4, !dbg !909
  %cmp11 = icmp eq i32 %15, 0, !dbg !912
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !913

if.then12:                                        ; preds = %if.then10
  %16 = load i8*, i8** %c, align 8, !dbg !914
  %call = call i8* @strcpy(i8* %16, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0)) #6, !dbg !916
  %17 = load i8*, i8** %c, align 8, !dbg !917
  %add.ptr13 = getelementptr inbounds i8, i8* %17, i64 3, !dbg !918
  %call14 = call i8* @strcpy(i8* %add.ptr13, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !919
  %18 = load i8*, i8** %string.addr, align 8, !dbg !920
  store i8* %18, i8** %retval, align 8, !dbg !921
  br label %return, !dbg !921

if.end15:                                         ; preds = %if.then10
  %arrayidx16 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !922
  %19 = load i32, i32* %arrayidx16, align 4, !dbg !922
  %and17 = and i32 %19, 33554432, !dbg !924
  %tobool = icmp ne i32 %and17, 0, !dbg !924
  br i1 %tobool, label %if.then18, label %if.end20, !dbg !925

if.then18:                                        ; preds = %if.end15
  %20 = load i8*, i8** %c, align 8, !dbg !926
  %incdec.ptr19 = getelementptr inbounds i8, i8* %20, i32 1, !dbg !926
  store i8* %incdec.ptr19, i8** %c, align 8, !dbg !926
  store i8 115, i8* %20, align 1, !dbg !927
  br label %if.end20, !dbg !928

if.end20:                                         ; preds = %if.then18, %if.end15
  %21 = load i8*, i8** %c, align 8, !dbg !929
  %call21 = call i8* @strcpy(i8* %21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0)) #6, !dbg !930
  %22 = load i8*, i8** %c, align 8, !dbg !931
  %add.ptr22 = getelementptr inbounds i8, i8* %22, i64 3, !dbg !931
  store i8* %add.ptr22, i8** %c, align 8, !dbg !931
  %arrayidx23 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 0, !dbg !932
  %23 = load i32, i32* %arrayidx23, align 4, !dbg !932
  %cmp24 = icmp eq i32 %23, 0, !dbg !934
  br i1 %cmp24, label %land.lhs.true, label %if.end29, !dbg !935

land.lhs.true:                                    ; preds = %if.end20
  %arrayidx25 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !936
  %24 = load i32, i32* %arrayidx25, align 4, !dbg !936
  %and26 = and i32 %24, 262143, !dbg !937
  %cmp27 = icmp eq i32 %and26, 0, !dbg !938
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !939

if.then28:                                        ; preds = %land.lhs.true
  %25 = load i8*, i8** %string.addr, align 8, !dbg !940
  store i8* %25, i8** %retval, align 8, !dbg !941
  br label %return, !dbg !941

if.end29:                                         ; preds = %land.lhs.true, %if.end20
  store i32 0, i32* %exp, align 4, !dbg !942
  store i32 0, i32* %msd, align 4, !dbg !943
  br label %if.end33, !dbg !944

if.else:                                          ; preds = %if.end
  %26 = load i32, i32* %exp, align 4, !dbg !945
  %shl = shl i32 %26, 8, !dbg !946
  %arrayidx30 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !947
  %27 = load i32, i32* %arrayidx30, align 4, !dbg !947
  %shr31 = lshr i32 %27, 18, !dbg !948
  %and32 = and i32 %shr31, 255, !dbg !949
  %add = add i32 %shl, %and32, !dbg !950
  %sub = sub i32 %add, 398, !dbg !951
  store i32 %sub, i32* %exp, align 4, !dbg !952
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.end29
  %28 = load i8*, i8** %c, align 8, !dbg !953
  store i8* %28, i8** %cstart, align 8, !dbg !954
  %29 = load i32, i32* %msd, align 4, !dbg !955
  %tobool34 = icmp ne i32 %29, 0, !dbg !955
  br i1 %tobool34, label %if.then35, label %if.end40, !dbg !957

if.then35:                                        ; preds = %if.end33
  %30 = load i32, i32* %msd, align 4, !dbg !958
  %conv = trunc i32 %30 to i8, !dbg !959
  %conv36 = sext i8 %conv to i32, !dbg !959
  %add37 = add nsw i32 48, %conv36, !dbg !960
  %conv38 = trunc i32 %add37 to i8, !dbg !961
  %31 = load i8*, i8** %c, align 8, !dbg !962
  %incdec.ptr39 = getelementptr inbounds i8, i8* %31, i32 1, !dbg !962
  store i8* %incdec.ptr39, i8** %c, align 8, !dbg !962
  store i8 %conv38, i8* %31, align 1, !dbg !963
  br label %if.end40, !dbg !964

if.end40:                                         ; preds = %if.then35, %if.end33
  %arrayidx41 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !965
  %32 = load i32, i32* %arrayidx41, align 4, !dbg !965
  %shr42 = lshr i32 %32, 8, !dbg !966
  %and43 = and i32 %shr42, 1023, !dbg !967
  store i32 %and43, i32* %dpd, align 4, !dbg !968
  %33 = load i32, i32* %dpd, align 4, !dbg !969
  %idxprom44 = sext i32 %33 to i64, !dbg !969
  %arrayidx45 = getelementptr inbounds [1024 x i16], [1024 x i16]* @DPD2BIN, i64 0, i64 %idxprom44, !dbg !969
  %34 = load i16, i16* %arrayidx45, align 2, !dbg !969
  %conv46 = zext i16 %34 to i32, !dbg !969
  %mul = mul nsw i32 %conv46, 4, !dbg !969
  %idxprom47 = sext i32 %mul to i64, !dbg !969
  %arrayidx48 = getelementptr inbounds [4001 x i8], [4001 x i8]* @BIN2CHAR, i64 0, i64 %idxprom47, !dbg !969
  store i8* %arrayidx48, i8** %u, align 8, !dbg !969
  %35 = load i8*, i8** %c, align 8, !dbg !970
  %36 = load i8*, i8** %cstart, align 8, !dbg !970
  %cmp49 = icmp ne i8* %35, %36, !dbg !970
  br i1 %cmp49, label %if.then51, label %if.else54, !dbg !969

if.then51:                                        ; preds = %if.end40
  %37 = load i8*, i8** %c, align 8, !dbg !972
  %38 = load i8*, i8** %u, align 8, !dbg !972
  %add.ptr52 = getelementptr inbounds i8, i8* %38, i64 1, !dbg !972
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %add.ptr52, i64 4, i1 false), !dbg !972
  %39 = load i8*, i8** %c, align 8, !dbg !972
  %add.ptr53 = getelementptr inbounds i8, i8* %39, i64 3, !dbg !972
  store i8* %add.ptr53, i8** %c, align 8, !dbg !972
  br label %if.end64, !dbg !972

if.else54:                                        ; preds = %if.end40
  %40 = load i8*, i8** %u, align 8, !dbg !974
  %41 = load i8, i8* %40, align 1, !dbg !974
  %tobool55 = icmp ne i8 %41, 0, !dbg !974
  br i1 %tobool55, label %if.then56, label %if.end63, !dbg !970

if.then56:                                        ; preds = %if.else54
  %42 = load i8*, i8** %c, align 8, !dbg !976
  %43 = load i8*, i8** %u, align 8, !dbg !976
  %add.ptr57 = getelementptr inbounds i8, i8* %43, i64 4, !dbg !976
  %44 = load i8*, i8** %u, align 8, !dbg !976
  %45 = load i8, i8* %44, align 1, !dbg !976
  %conv58 = zext i8 %45 to i32, !dbg !976
  %idx.ext = sext i32 %conv58 to i64, !dbg !976
  %idx.neg = sub i64 0, %idx.ext, !dbg !976
  %add.ptr59 = getelementptr inbounds i8, i8* %add.ptr57, i64 %idx.neg, !dbg !976
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %add.ptr59, i64 4, i1 false), !dbg !976
  %46 = load i8*, i8** %u, align 8, !dbg !976
  %47 = load i8, i8* %46, align 1, !dbg !976
  %conv60 = zext i8 %47 to i32, !dbg !976
  %48 = load i8*, i8** %c, align 8, !dbg !976
  %idx.ext61 = sext i32 %conv60 to i64, !dbg !976
  %add.ptr62 = getelementptr inbounds i8, i8* %48, i64 %idx.ext61, !dbg !976
  store i8* %add.ptr62, i8** %c, align 8, !dbg !976
  br label %if.end63, !dbg !976

if.end63:                                         ; preds = %if.then56, %if.else54
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then51
  %arrayidx65 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 1, !dbg !978
  %49 = load i32, i32* %arrayidx65, align 4, !dbg !978
  %and66 = and i32 %49, 255, !dbg !979
  %shl67 = shl i32 %and66, 2, !dbg !980
  %arrayidx68 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 0, !dbg !981
  %50 = load i32, i32* %arrayidx68, align 4, !dbg !981
  %shr69 = lshr i32 %50, 30, !dbg !982
  %or = or i32 %shl67, %shr69, !dbg !983
  store i32 %or, i32* %dpd, align 4, !dbg !984
  %51 = load i32, i32* %dpd, align 4, !dbg !985
  %idxprom70 = sext i32 %51 to i64, !dbg !985
  %arrayidx71 = getelementptr inbounds [1024 x i16], [1024 x i16]* @DPD2BIN, i64 0, i64 %idxprom70, !dbg !985
  %52 = load i16, i16* %arrayidx71, align 2, !dbg !985
  %conv72 = zext i16 %52 to i32, !dbg !985
  %mul73 = mul nsw i32 %conv72, 4, !dbg !985
  %idxprom74 = sext i32 %mul73 to i64, !dbg !985
  %arrayidx75 = getelementptr inbounds [4001 x i8], [4001 x i8]* @BIN2CHAR, i64 0, i64 %idxprom74, !dbg !985
  store i8* %arrayidx75, i8** %u, align 8, !dbg !985
  %53 = load i8*, i8** %c, align 8, !dbg !986
  %54 = load i8*, i8** %cstart, align 8, !dbg !986
  %cmp76 = icmp ne i8* %53, %54, !dbg !986
  br i1 %cmp76, label %if.then78, label %if.else81, !dbg !985

if.then78:                                        ; preds = %if.end64
  %55 = load i8*, i8** %c, align 8, !dbg !988
  %56 = load i8*, i8** %u, align 8, !dbg !988
  %add.ptr79 = getelementptr inbounds i8, i8* %56, i64 1, !dbg !988
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %add.ptr79, i64 4, i1 false), !dbg !988
  %57 = load i8*, i8** %c, align 8, !dbg !988
  %add.ptr80 = getelementptr inbounds i8, i8* %57, i64 3, !dbg !988
  store i8* %add.ptr80, i8** %c, align 8, !dbg !988
  br label %if.end93, !dbg !988

if.else81:                                        ; preds = %if.end64
  %58 = load i8*, i8** %u, align 8, !dbg !990
  %59 = load i8, i8* %58, align 1, !dbg !990
  %tobool82 = icmp ne i8 %59, 0, !dbg !990
  br i1 %tobool82, label %if.then83, label %if.end92, !dbg !986

if.then83:                                        ; preds = %if.else81
  %60 = load i8*, i8** %c, align 8, !dbg !992
  %61 = load i8*, i8** %u, align 8, !dbg !992
  %add.ptr84 = getelementptr inbounds i8, i8* %61, i64 4, !dbg !992
  %62 = load i8*, i8** %u, align 8, !dbg !992
  %63 = load i8, i8* %62, align 1, !dbg !992
  %conv85 = zext i8 %63 to i32, !dbg !992
  %idx.ext86 = sext i32 %conv85 to i64, !dbg !992
  %idx.neg87 = sub i64 0, %idx.ext86, !dbg !992
  %add.ptr88 = getelementptr inbounds i8, i8* %add.ptr84, i64 %idx.neg87, !dbg !992
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %add.ptr88, i64 4, i1 false), !dbg !992
  %64 = load i8*, i8** %u, align 8, !dbg !992
  %65 = load i8, i8* %64, align 1, !dbg !992
  %conv89 = zext i8 %65 to i32, !dbg !992
  %66 = load i8*, i8** %c, align 8, !dbg !992
  %idx.ext90 = sext i32 %conv89 to i64, !dbg !992
  %add.ptr91 = getelementptr inbounds i8, i8* %66, i64 %idx.ext90, !dbg !992
  store i8* %add.ptr91, i8** %c, align 8, !dbg !992
  br label %if.end92, !dbg !992

if.end92:                                         ; preds = %if.then83, %if.else81
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %if.then78
  %arrayidx94 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 0, !dbg !994
  %67 = load i32, i32* %arrayidx94, align 4, !dbg !994
  %shr95 = lshr i32 %67, 20, !dbg !995
  %and96 = and i32 %shr95, 1023, !dbg !996
  store i32 %and96, i32* %dpd, align 4, !dbg !997
  %68 = load i32, i32* %dpd, align 4, !dbg !998
  %idxprom97 = sext i32 %68 to i64, !dbg !998
  %arrayidx98 = getelementptr inbounds [1024 x i16], [1024 x i16]* @DPD2BIN, i64 0, i64 %idxprom97, !dbg !998
  %69 = load i16, i16* %arrayidx98, align 2, !dbg !998
  %conv99 = zext i16 %69 to i32, !dbg !998
  %mul100 = mul nsw i32 %conv99, 4, !dbg !998
  %idxprom101 = sext i32 %mul100 to i64, !dbg !998
  %arrayidx102 = getelementptr inbounds [4001 x i8], [4001 x i8]* @BIN2CHAR, i64 0, i64 %idxprom101, !dbg !998
  store i8* %arrayidx102, i8** %u, align 8, !dbg !998
  %70 = load i8*, i8** %c, align 8, !dbg !999
  %71 = load i8*, i8** %cstart, align 8, !dbg !999
  %cmp103 = icmp ne i8* %70, %71, !dbg !999
  br i1 %cmp103, label %if.then105, label %if.else108, !dbg !998

if.then105:                                       ; preds = %if.end93
  %72 = load i8*, i8** %c, align 8, !dbg !1001
  %73 = load i8*, i8** %u, align 8, !dbg !1001
  %add.ptr106 = getelementptr inbounds i8, i8* %73, i64 1, !dbg !1001
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %72, i8* align 1 %add.ptr106, i64 4, i1 false), !dbg !1001
  %74 = load i8*, i8** %c, align 8, !dbg !1001
  %add.ptr107 = getelementptr inbounds i8, i8* %74, i64 3, !dbg !1001
  store i8* %add.ptr107, i8** %c, align 8, !dbg !1001
  br label %if.end120, !dbg !1001

if.else108:                                       ; preds = %if.end93
  %75 = load i8*, i8** %u, align 8, !dbg !1003
  %76 = load i8, i8* %75, align 1, !dbg !1003
  %tobool109 = icmp ne i8 %76, 0, !dbg !1003
  br i1 %tobool109, label %if.then110, label %if.end119, !dbg !999

if.then110:                                       ; preds = %if.else108
  %77 = load i8*, i8** %c, align 8, !dbg !1005
  %78 = load i8*, i8** %u, align 8, !dbg !1005
  %add.ptr111 = getelementptr inbounds i8, i8* %78, i64 4, !dbg !1005
  %79 = load i8*, i8** %u, align 8, !dbg !1005
  %80 = load i8, i8* %79, align 1, !dbg !1005
  %conv112 = zext i8 %80 to i32, !dbg !1005
  %idx.ext113 = sext i32 %conv112 to i64, !dbg !1005
  %idx.neg114 = sub i64 0, %idx.ext113, !dbg !1005
  %add.ptr115 = getelementptr inbounds i8, i8* %add.ptr111, i64 %idx.neg114, !dbg !1005
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %add.ptr115, i64 4, i1 false), !dbg !1005
  %81 = load i8*, i8** %u, align 8, !dbg !1005
  %82 = load i8, i8* %81, align 1, !dbg !1005
  %conv116 = zext i8 %82 to i32, !dbg !1005
  %83 = load i8*, i8** %c, align 8, !dbg !1005
  %idx.ext117 = sext i32 %conv116 to i64, !dbg !1005
  %add.ptr118 = getelementptr inbounds i8, i8* %83, i64 %idx.ext117, !dbg !1005
  store i8* %add.ptr118, i8** %c, align 8, !dbg !1005
  br label %if.end119, !dbg !1005

if.end119:                                        ; preds = %if.then110, %if.else108
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %if.then105
  %arrayidx121 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 0, !dbg !1007
  %84 = load i32, i32* %arrayidx121, align 4, !dbg !1007
  %shr122 = lshr i32 %84, 10, !dbg !1008
  %and123 = and i32 %shr122, 1023, !dbg !1009
  store i32 %and123, i32* %dpd, align 4, !dbg !1010
  %85 = load i32, i32* %dpd, align 4, !dbg !1011
  %idxprom124 = sext i32 %85 to i64, !dbg !1011
  %arrayidx125 = getelementptr inbounds [1024 x i16], [1024 x i16]* @DPD2BIN, i64 0, i64 %idxprom124, !dbg !1011
  %86 = load i16, i16* %arrayidx125, align 2, !dbg !1011
  %conv126 = zext i16 %86 to i32, !dbg !1011
  %mul127 = mul nsw i32 %conv126, 4, !dbg !1011
  %idxprom128 = sext i32 %mul127 to i64, !dbg !1011
  %arrayidx129 = getelementptr inbounds [4001 x i8], [4001 x i8]* @BIN2CHAR, i64 0, i64 %idxprom128, !dbg !1011
  store i8* %arrayidx129, i8** %u, align 8, !dbg !1011
  %87 = load i8*, i8** %c, align 8, !dbg !1012
  %88 = load i8*, i8** %cstart, align 8, !dbg !1012
  %cmp130 = icmp ne i8* %87, %88, !dbg !1012
  br i1 %cmp130, label %if.then132, label %if.else135, !dbg !1011

if.then132:                                       ; preds = %if.end120
  %89 = load i8*, i8** %c, align 8, !dbg !1014
  %90 = load i8*, i8** %u, align 8, !dbg !1014
  %add.ptr133 = getelementptr inbounds i8, i8* %90, i64 1, !dbg !1014
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %add.ptr133, i64 4, i1 false), !dbg !1014
  %91 = load i8*, i8** %c, align 8, !dbg !1014
  %add.ptr134 = getelementptr inbounds i8, i8* %91, i64 3, !dbg !1014
  store i8* %add.ptr134, i8** %c, align 8, !dbg !1014
  br label %if.end147, !dbg !1014

if.else135:                                       ; preds = %if.end120
  %92 = load i8*, i8** %u, align 8, !dbg !1016
  %93 = load i8, i8* %92, align 1, !dbg !1016
  %tobool136 = icmp ne i8 %93, 0, !dbg !1016
  br i1 %tobool136, label %if.then137, label %if.end146, !dbg !1012

if.then137:                                       ; preds = %if.else135
  %94 = load i8*, i8** %c, align 8, !dbg !1018
  %95 = load i8*, i8** %u, align 8, !dbg !1018
  %add.ptr138 = getelementptr inbounds i8, i8* %95, i64 4, !dbg !1018
  %96 = load i8*, i8** %u, align 8, !dbg !1018
  %97 = load i8, i8* %96, align 1, !dbg !1018
  %conv139 = zext i8 %97 to i32, !dbg !1018
  %idx.ext140 = sext i32 %conv139 to i64, !dbg !1018
  %idx.neg141 = sub i64 0, %idx.ext140, !dbg !1018
  %add.ptr142 = getelementptr inbounds i8, i8* %add.ptr138, i64 %idx.neg141, !dbg !1018
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %94, i8* align 1 %add.ptr142, i64 4, i1 false), !dbg !1018
  %98 = load i8*, i8** %u, align 8, !dbg !1018
  %99 = load i8, i8* %98, align 1, !dbg !1018
  %conv143 = zext i8 %99 to i32, !dbg !1018
  %100 = load i8*, i8** %c, align 8, !dbg !1018
  %idx.ext144 = sext i32 %conv143 to i64, !dbg !1018
  %add.ptr145 = getelementptr inbounds i8, i8* %100, i64 %idx.ext144, !dbg !1018
  store i8* %add.ptr145, i8** %c, align 8, !dbg !1018
  br label %if.end146, !dbg !1018

if.end146:                                        ; preds = %if.then137, %if.else135
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %if.then132
  %arrayidx148 = getelementptr inbounds [2 x i32], [2 x i32]* %sourar, i64 0, i64 0, !dbg !1020
  %101 = load i32, i32* %arrayidx148, align 4, !dbg !1020
  %and149 = and i32 %101, 1023, !dbg !1021
  store i32 %and149, i32* %dpd, align 4, !dbg !1022
  %102 = load i32, i32* %dpd, align 4, !dbg !1023
  %idxprom150 = sext i32 %102 to i64, !dbg !1023
  %arrayidx151 = getelementptr inbounds [1024 x i16], [1024 x i16]* @DPD2BIN, i64 0, i64 %idxprom150, !dbg !1023
  %103 = load i16, i16* %arrayidx151, align 2, !dbg !1023
  %conv152 = zext i16 %103 to i32, !dbg !1023
  %mul153 = mul nsw i32 %conv152, 4, !dbg !1023
  %idxprom154 = sext i32 %mul153 to i64, !dbg !1023
  %arrayidx155 = getelementptr inbounds [4001 x i8], [4001 x i8]* @BIN2CHAR, i64 0, i64 %idxprom154, !dbg !1023
  store i8* %arrayidx155, i8** %u, align 8, !dbg !1023
  %104 = load i8*, i8** %c, align 8, !dbg !1024
  %105 = load i8*, i8** %cstart, align 8, !dbg !1024
  %cmp156 = icmp ne i8* %104, %105, !dbg !1024
  br i1 %cmp156, label %if.then158, label %if.else161, !dbg !1023

if.then158:                                       ; preds = %if.end147
  %106 = load i8*, i8** %c, align 8, !dbg !1026
  %107 = load i8*, i8** %u, align 8, !dbg !1026
  %add.ptr159 = getelementptr inbounds i8, i8* %107, i64 1, !dbg !1026
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 1 %add.ptr159, i64 4, i1 false), !dbg !1026
  %108 = load i8*, i8** %c, align 8, !dbg !1026
  %add.ptr160 = getelementptr inbounds i8, i8* %108, i64 3, !dbg !1026
  store i8* %add.ptr160, i8** %c, align 8, !dbg !1026
  br label %if.end173, !dbg !1026

if.else161:                                       ; preds = %if.end147
  %109 = load i8*, i8** %u, align 8, !dbg !1028
  %110 = load i8, i8* %109, align 1, !dbg !1028
  %tobool162 = icmp ne i8 %110, 0, !dbg !1028
  br i1 %tobool162, label %if.then163, label %if.end172, !dbg !1024

if.then163:                                       ; preds = %if.else161
  %111 = load i8*, i8** %c, align 8, !dbg !1030
  %112 = load i8*, i8** %u, align 8, !dbg !1030
  %add.ptr164 = getelementptr inbounds i8, i8* %112, i64 4, !dbg !1030
  %113 = load i8*, i8** %u, align 8, !dbg !1030
  %114 = load i8, i8* %113, align 1, !dbg !1030
  %conv165 = zext i8 %114 to i32, !dbg !1030
  %idx.ext166 = sext i32 %conv165 to i64, !dbg !1030
  %idx.neg167 = sub i64 0, %idx.ext166, !dbg !1030
  %add.ptr168 = getelementptr inbounds i8, i8* %add.ptr164, i64 %idx.neg167, !dbg !1030
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %111, i8* align 1 %add.ptr168, i64 4, i1 false), !dbg !1030
  %115 = load i8*, i8** %u, align 8, !dbg !1030
  %116 = load i8, i8* %115, align 1, !dbg !1030
  %conv169 = zext i8 %116 to i32, !dbg !1030
  %117 = load i8*, i8** %c, align 8, !dbg !1030
  %idx.ext170 = sext i32 %conv169 to i64, !dbg !1030
  %add.ptr171 = getelementptr inbounds i8, i8* %117, i64 %idx.ext170, !dbg !1030
  store i8* %add.ptr171, i8** %c, align 8, !dbg !1030
  br label %if.end172, !dbg !1030

if.end172:                                        ; preds = %if.then163, %if.else161
  br label %if.end173

if.end173:                                        ; preds = %if.end172, %if.then158
  %118 = load i8*, i8** %c, align 8, !dbg !1032
  %119 = load i8*, i8** %cstart, align 8, !dbg !1034
  %cmp174 = icmp eq i8* %118, %119, !dbg !1035
  br i1 %cmp174, label %if.then176, label %if.end178, !dbg !1036

if.then176:                                       ; preds = %if.end173
  %120 = load i8*, i8** %c, align 8, !dbg !1037
  %incdec.ptr177 = getelementptr inbounds i8, i8* %120, i32 1, !dbg !1037
  store i8* %incdec.ptr177, i8** %c, align 8, !dbg !1037
  store i8 48, i8* %120, align 1, !dbg !1038
  br label %if.end178, !dbg !1039

if.end178:                                        ; preds = %if.then176, %if.end173
  %121 = load i32, i32* %exp, align 4, !dbg !1040
  %cmp179 = icmp eq i32 %121, 0, !dbg !1042
  br i1 %cmp179, label %if.then181, label %if.end182, !dbg !1043

if.then181:                                       ; preds = %if.end178
  %122 = load i8*, i8** %c, align 8, !dbg !1044
  store i8 0, i8* %122, align 1, !dbg !1046
  %123 = load i8*, i8** %string.addr, align 8, !dbg !1047
  store i8* %123, i8** %retval, align 8, !dbg !1048
  br label %return, !dbg !1048

if.end182:                                        ; preds = %if.end178
  store i32 0, i32* %e, align 4, !dbg !1049
  %124 = load i8*, i8** %c, align 8, !dbg !1050
  %125 = load i8*, i8** %cstart, align 8, !dbg !1051
  %sub.ptr.lhs.cast = ptrtoint i8* %124 to i64, !dbg !1052
  %sub.ptr.rhs.cast = ptrtoint i8* %125 to i64, !dbg !1052
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !1052
  %126 = load i32, i32* %exp, align 4, !dbg !1053
  %conv183 = sext i32 %126 to i64, !dbg !1053
  %add184 = add nsw i64 %sub.ptr.sub, %conv183, !dbg !1054
  %conv185 = trunc i64 %add184 to i32, !dbg !1050
  store i32 %conv185, i32* %pre, align 4, !dbg !1055
  %127 = load i32, i32* %exp, align 4, !dbg !1056
  %cmp186 = icmp sgt i32 %127, 0, !dbg !1058
  br i1 %cmp186, label %if.then190, label %lor.lhs.false, !dbg !1059

lor.lhs.false:                                    ; preds = %if.end182
  %128 = load i32, i32* %pre, align 4, !dbg !1060
  %cmp188 = icmp slt i32 %128, -5, !dbg !1061
  br i1 %cmp188, label %if.then190, label %if.end192, !dbg !1062

if.then190:                                       ; preds = %lor.lhs.false, %if.end182
  %129 = load i32, i32* %pre, align 4, !dbg !1063
  %sub191 = sub nsw i32 %129, 1, !dbg !1065
  store i32 %sub191, i32* %e, align 4, !dbg !1066
  store i32 1, i32* %pre, align 4, !dbg !1067
  br label %if.end192, !dbg !1068

if.end192:                                        ; preds = %if.then190, %lor.lhs.false
  %130 = load i8*, i8** %c, align 8, !dbg !1069
  %add.ptr193 = getelementptr inbounds i8, i8* %130, i64 -1, !dbg !1070
  store i8* %add.ptr193, i8** %s, align 8, !dbg !1071
  %131 = load i32, i32* %pre, align 4, !dbg !1072
  %cmp194 = icmp sgt i32 %131, 0, !dbg !1074
  br i1 %cmp194, label %if.then196, label %if.end231, !dbg !1075

if.then196:                                       ; preds = %if.end192
  call void @llvm.dbg.declare(metadata i8** %dotat, metadata !1076, metadata !DIExpression()), !dbg !1078
  %132 = load i8*, i8** %cstart, align 8, !dbg !1079
  %133 = load i32, i32* %pre, align 4, !dbg !1080
  %idx.ext197 = sext i32 %133 to i64, !dbg !1081
  %add.ptr198 = getelementptr inbounds i8, i8* %132, i64 %idx.ext197, !dbg !1081
  store i8* %add.ptr198, i8** %dotat, align 8, !dbg !1078
  %134 = load i8*, i8** %dotat, align 8, !dbg !1082
  %135 = load i8*, i8** %c, align 8, !dbg !1084
  %cmp199 = icmp ult i8* %134, %135, !dbg !1085
  br i1 %cmp199, label %if.then201, label %if.end207, !dbg !1086

if.then201:                                       ; preds = %if.then196
  %136 = load i8*, i8** %c, align 8, !dbg !1087
  store i8* %136, i8** %t, align 8, !dbg !1089
  br label %for.cond, !dbg !1090

for.cond:                                         ; preds = %for.inc, %if.then201
  %137 = load i8*, i8** %s, align 8, !dbg !1091
  %138 = load i8*, i8** %dotat, align 8, !dbg !1094
  %cmp202 = icmp uge i8* %137, %138, !dbg !1095
  br i1 %cmp202, label %for.body, label %for.end, !dbg !1096

for.body:                                         ; preds = %for.cond
  %139 = load i8*, i8** %s, align 8, !dbg !1097
  %140 = load i8, i8* %139, align 1, !dbg !1098
  %141 = load i8*, i8** %t, align 8, !dbg !1099
  store i8 %140, i8* %141, align 1, !dbg !1100
  br label %for.inc, !dbg !1101

for.inc:                                          ; preds = %for.body
  %142 = load i8*, i8** %s, align 8, !dbg !1102
  %incdec.ptr204 = getelementptr inbounds i8, i8* %142, i32 -1, !dbg !1102
  store i8* %incdec.ptr204, i8** %s, align 8, !dbg !1102
  %143 = load i8*, i8** %t, align 8, !dbg !1103
  %incdec.ptr205 = getelementptr inbounds i8, i8* %143, i32 -1, !dbg !1103
  store i8* %incdec.ptr205, i8** %t, align 8, !dbg !1103
  br label %for.cond, !dbg !1104, !llvm.loop !1105

for.end:                                          ; preds = %for.cond
  %144 = load i8*, i8** %t, align 8, !dbg !1107
  store i8 46, i8* %144, align 1, !dbg !1108
  %145 = load i8*, i8** %c, align 8, !dbg !1109
  %incdec.ptr206 = getelementptr inbounds i8, i8* %145, i32 1, !dbg !1109
  store i8* %incdec.ptr206, i8** %c, align 8, !dbg !1109
  br label %if.end207, !dbg !1110

if.end207:                                        ; preds = %for.end, %if.then196
  %146 = load i32, i32* %e, align 4, !dbg !1111
  %cmp208 = icmp ne i32 %146, 0, !dbg !1113
  br i1 %cmp208, label %if.then210, label %if.end230, !dbg !1114

if.then210:                                       ; preds = %if.end207
  %147 = load i8*, i8** %c, align 8, !dbg !1115
  %incdec.ptr211 = getelementptr inbounds i8, i8* %147, i32 1, !dbg !1115
  store i8* %incdec.ptr211, i8** %c, align 8, !dbg !1115
  store i8 69, i8* %147, align 1, !dbg !1117
  %148 = load i8*, i8** %c, align 8, !dbg !1118
  %incdec.ptr212 = getelementptr inbounds i8, i8* %148, i32 1, !dbg !1118
  store i8* %incdec.ptr212, i8** %c, align 8, !dbg !1118
  store i8 43, i8* %148, align 1, !dbg !1119
  %149 = load i32, i32* %e, align 4, !dbg !1120
  %cmp213 = icmp slt i32 %149, 0, !dbg !1122
  br i1 %cmp213, label %if.then215, label %if.end218, !dbg !1123

if.then215:                                       ; preds = %if.then210
  %150 = load i8*, i8** %c, align 8, !dbg !1124
  %add.ptr216 = getelementptr inbounds i8, i8* %150, i64 -1, !dbg !1126
  store i8 45, i8* %add.ptr216, align 1, !dbg !1127
  %151 = load i32, i32* %e, align 4, !dbg !1128
  %sub217 = sub nsw i32 0, %151, !dbg !1129
  store i32 %sub217, i32* %e, align 4, !dbg !1130
  br label %if.end218, !dbg !1131

if.end218:                                        ; preds = %if.then215, %if.then210
  %152 = load i32, i32* %e, align 4, !dbg !1132
  %mul219 = mul nsw i32 %152, 4, !dbg !1133
  %idxprom220 = sext i32 %mul219 to i64, !dbg !1134
  %arrayidx221 = getelementptr inbounds [4001 x i8], [4001 x i8]* @BIN2CHAR, i64 0, i64 %idxprom220, !dbg !1134
  store i8* %arrayidx221, i8** %u, align 8, !dbg !1135
  %153 = load i8*, i8** %c, align 8, !dbg !1136
  %154 = load i8*, i8** %u, align 8, !dbg !1137
  %add.ptr222 = getelementptr inbounds i8, i8* %154, i64 4, !dbg !1138
  %155 = load i8*, i8** %u, align 8, !dbg !1139
  %156 = load i8, i8* %155, align 1, !dbg !1140
  %conv223 = zext i8 %156 to i32, !dbg !1140
  %idx.ext224 = sext i32 %conv223 to i64, !dbg !1141
  %idx.neg225 = sub i64 0, %idx.ext224, !dbg !1141
  %add.ptr226 = getelementptr inbounds i8, i8* %add.ptr222, i64 %idx.neg225, !dbg !1141
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %153, i8* align 1 %add.ptr226, i64 4, i1 false), !dbg !1142
  %157 = load i8*, i8** %u, align 8, !dbg !1143
  %158 = load i8, i8* %157, align 1, !dbg !1144
  %conv227 = zext i8 %158 to i32, !dbg !1144
  %159 = load i8*, i8** %c, align 8, !dbg !1145
  %idx.ext228 = sext i32 %conv227 to i64, !dbg !1145
  %add.ptr229 = getelementptr inbounds i8, i8* %159, i64 %idx.ext228, !dbg !1145
  store i8* %add.ptr229, i8** %c, align 8, !dbg !1145
  br label %if.end230, !dbg !1146

if.end230:                                        ; preds = %if.end218, %if.end207
  %160 = load i8*, i8** %c, align 8, !dbg !1147
  store i8 0, i8* %160, align 1, !dbg !1148
  %161 = load i8*, i8** %string.addr, align 8, !dbg !1149
  store i8* %161, i8** %retval, align 8, !dbg !1150
  br label %return, !dbg !1150

if.end231:                                        ; preds = %if.end192
  %162 = load i8*, i8** %c, align 8, !dbg !1151
  %add.ptr232 = getelementptr inbounds i8, i8* %162, i64 1, !dbg !1152
  %163 = load i32, i32* %pre, align 4, !dbg !1153
  %idx.ext233 = sext i32 %163 to i64, !dbg !1154
  %idx.neg234 = sub i64 0, %idx.ext233, !dbg !1154
  %add.ptr235 = getelementptr inbounds i8, i8* %add.ptr232, i64 %idx.neg234, !dbg !1154
  store i8* %add.ptr235, i8** %t, align 8, !dbg !1155
  %164 = load i8*, i8** %t, align 8, !dbg !1156
  %add.ptr236 = getelementptr inbounds i8, i8* %164, i64 1, !dbg !1157
  store i8 0, i8* %add.ptr236, align 1, !dbg !1158
  br label %for.cond237, !dbg !1159

for.cond237:                                      ; preds = %for.inc241, %if.end231
  %165 = load i8*, i8** %s, align 8, !dbg !1160
  %166 = load i8*, i8** %cstart, align 8, !dbg !1163
  %cmp238 = icmp uge i8* %165, %166, !dbg !1164
  br i1 %cmp238, label %for.body240, label %for.end244, !dbg !1165

for.body240:                                      ; preds = %for.cond237
  %167 = load i8*, i8** %s, align 8, !dbg !1166
  %168 = load i8, i8* %167, align 1, !dbg !1167
  %169 = load i8*, i8** %t, align 8, !dbg !1168
  store i8 %168, i8* %169, align 1, !dbg !1169
  br label %for.inc241, !dbg !1170

for.inc241:                                       ; preds = %for.body240
  %170 = load i8*, i8** %s, align 8, !dbg !1171
  %incdec.ptr242 = getelementptr inbounds i8, i8* %170, i32 -1, !dbg !1171
  store i8* %incdec.ptr242, i8** %s, align 8, !dbg !1171
  %171 = load i8*, i8** %t, align 8, !dbg !1172
  %incdec.ptr243 = getelementptr inbounds i8, i8* %171, i32 -1, !dbg !1172
  store i8* %incdec.ptr243, i8** %t, align 8, !dbg !1172
  br label %for.cond237, !dbg !1173, !llvm.loop !1174

for.end244:                                       ; preds = %for.cond237
  %172 = load i8*, i8** %cstart, align 8, !dbg !1176
  store i8* %172, i8** %c, align 8, !dbg !1177
  %173 = load i8*, i8** %c, align 8, !dbg !1178
  %incdec.ptr245 = getelementptr inbounds i8, i8* %173, i32 1, !dbg !1178
  store i8* %incdec.ptr245, i8** %c, align 8, !dbg !1178
  store i8 48, i8* %173, align 1, !dbg !1179
  %174 = load i8*, i8** %c, align 8, !dbg !1180
  %incdec.ptr246 = getelementptr inbounds i8, i8* %174, i32 1, !dbg !1180
  store i8* %incdec.ptr246, i8** %c, align 8, !dbg !1180
  store i8 46, i8* %174, align 1, !dbg !1181
  br label %for.cond247, !dbg !1182

for.cond247:                                      ; preds = %for.inc252, %for.end244
  %175 = load i32, i32* %pre, align 4, !dbg !1183
  %cmp248 = icmp slt i32 %175, 0, !dbg !1186
  br i1 %cmp248, label %for.body250, label %for.end253, !dbg !1187

for.body250:                                      ; preds = %for.cond247
  %176 = load i8*, i8** %c, align 8, !dbg !1188
  %incdec.ptr251 = getelementptr inbounds i8, i8* %176, i32 1, !dbg !1188
  store i8* %incdec.ptr251, i8** %c, align 8, !dbg !1188
  store i8 48, i8* %176, align 1, !dbg !1189
  br label %for.inc252, !dbg !1190

for.inc252:                                       ; preds = %for.body250
  %177 = load i32, i32* %pre, align 4, !dbg !1191
  %inc = add nsw i32 %177, 1, !dbg !1191
  store i32 %inc, i32* %pre, align 4, !dbg !1191
  br label %for.cond247, !dbg !1192, !llvm.loop !1193

for.end253:                                       ; preds = %for.cond247
  %178 = load i8*, i8** %string.addr, align 8, !dbg !1195
  store i8* %178, i8** %retval, align 8, !dbg !1196
  br label %return, !dbg !1196

return:                                           ; preds = %for.end253, %if.end230, %if.then181, %if.then28, %if.then12
  %179 = load i8*, i8** %retval, align 8, !dbg !1197
  ret i8* %179, !dbg !1197
}

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.decimal64* @__dpd64FromString(%struct.decimal64* %result, i8* %string, %struct.decContext* %set) #0 !dbg !1198 {
entry:
  %result.addr = alloca %struct.decimal64*, align 8
  %string.addr = alloca i8*, align 8
  %set.addr = alloca %struct.decContext*, align 8
  %dc = alloca %struct.decContext, align 4
  %dn = alloca %struct.decNumber, align 4
  store %struct.decimal64* %result, %struct.decimal64** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %result.addr, metadata !1203, metadata !DIExpression()), !dbg !1204
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1205, metadata !DIExpression()), !dbg !1206
  store %struct.decContext* %set, %struct.decContext** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decContext** %set.addr, metadata !1207, metadata !DIExpression()), !dbg !1208
  call void @llvm.dbg.declare(metadata %struct.decContext* %dc, metadata !1209, metadata !DIExpression()), !dbg !1210
  call void @llvm.dbg.declare(metadata %struct.decNumber* %dn, metadata !1211, metadata !DIExpression()), !dbg !1212
  %call = call %struct.decContext* @decContextDefault(%struct.decContext* %dc, i32 64), !dbg !1213
  %0 = load %struct.decContext*, %struct.decContext** %set.addr, align 8, !dbg !1214
  %round = getelementptr inbounds %struct.decContext, %struct.decContext* %0, i32 0, i32 3, !dbg !1215
  %1 = load i32, i32* %round, align 4, !dbg !1215
  %round1 = getelementptr inbounds %struct.decContext, %struct.decContext* %dc, i32 0, i32 3, !dbg !1216
  store i32 %1, i32* %round1, align 4, !dbg !1217
  %2 = load i8*, i8** %string.addr, align 8, !dbg !1218
  %call2 = call %struct.decNumber* @decNumberFromString(%struct.decNumber* %dn, i8* %2, %struct.decContext* %dc), !dbg !1219
  %3 = load %struct.decimal64*, %struct.decimal64** %result.addr, align 8, !dbg !1220
  %call3 = call %struct.decimal64* @__dpd64FromNumber(%struct.decimal64* %3, %struct.decNumber* %dn, %struct.decContext* %dc), !dbg !1221
  %status = getelementptr inbounds %struct.decContext, %struct.decContext* %dc, i32 0, i32 5, !dbg !1222
  %4 = load i32, i32* %status, align 4, !dbg !1222
  %cmp = icmp ne i32 %4, 0, !dbg !1224
  br i1 %cmp, label %if.then, label %if.end, !dbg !1225

if.then:                                          ; preds = %entry
  %5 = load %struct.decContext*, %struct.decContext** %set.addr, align 8, !dbg !1226
  %status4 = getelementptr inbounds %struct.decContext, %struct.decContext* %dc, i32 0, i32 5, !dbg !1228
  %6 = load i32, i32* %status4, align 4, !dbg !1228
  %call5 = call %struct.decContext* @decContextSetStatus(%struct.decContext* %5, i32 %6), !dbg !1229
  br label %if.end, !dbg !1230

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.decimal64*, %struct.decimal64** %result.addr, align 8, !dbg !1231
  ret %struct.decimal64* %7, !dbg !1232
}

declare dso_local %struct.decNumber* @decNumberFromString(%struct.decNumber*, i8*, %struct.decContext*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @decimal64IsCanonical(%struct.decimal64* %d64) #0 !dbg !1233 {
entry:
  %d64.addr = alloca %struct.decimal64*, align 8
  %dn = alloca %struct.decNumber, align 4
  %canon = alloca %struct.decimal64, align 1
  %dc = alloca %struct.decContext, align 4
  store %struct.decimal64* %d64, %struct.decimal64** %d64.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %d64.addr, metadata !1236, metadata !DIExpression()), !dbg !1237
  call void @llvm.dbg.declare(metadata %struct.decNumber* %dn, metadata !1238, metadata !DIExpression()), !dbg !1239
  call void @llvm.dbg.declare(metadata %struct.decimal64* %canon, metadata !1240, metadata !DIExpression()), !dbg !1241
  call void @llvm.dbg.declare(metadata %struct.decContext* %dc, metadata !1242, metadata !DIExpression()), !dbg !1243
  %call = call %struct.decContext* @decContextDefault(%struct.decContext* %dc, i32 64), !dbg !1244
  %0 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !1245
  %call1 = call %struct.decNumber* @__dpd64ToNumber(%struct.decimal64* %0, %struct.decNumber* %dn), !dbg !1246
  %call2 = call %struct.decimal64* @__dpd64FromNumber(%struct.decimal64* %canon, %struct.decNumber* %dn, %struct.decContext* %dc), !dbg !1247
  %1 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !1248
  %2 = bitcast %struct.decimal64* %1 to i8*, !dbg !1248
  %3 = bitcast %struct.decimal64* %canon to i8*, !dbg !1249
  %call3 = call i32 @memcmp(i8* %2, i8* %3, i64 8) #7, !dbg !1250
  %cmp = icmp eq i32 %call3, 0, !dbg !1251
  %conv = zext i1 %cmp to i32, !dbg !1251
  ret i32 %conv, !dbg !1252
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #5

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.decimal64* @decimal64Canonical(%struct.decimal64* %result, %struct.decimal64* %d64) #0 !dbg !1253 {
entry:
  %result.addr = alloca %struct.decimal64*, align 8
  %d64.addr = alloca %struct.decimal64*, align 8
  %dn = alloca %struct.decNumber, align 4
  %dc = alloca %struct.decContext, align 4
  store %struct.decimal64* %result, %struct.decimal64** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %result.addr, metadata !1256, metadata !DIExpression()), !dbg !1257
  store %struct.decimal64* %d64, %struct.decimal64** %d64.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %d64.addr, metadata !1258, metadata !DIExpression()), !dbg !1259
  call void @llvm.dbg.declare(metadata %struct.decNumber* %dn, metadata !1260, metadata !DIExpression()), !dbg !1261
  call void @llvm.dbg.declare(metadata %struct.decContext* %dc, metadata !1262, metadata !DIExpression()), !dbg !1263
  %call = call %struct.decContext* @decContextDefault(%struct.decContext* %dc, i32 64), !dbg !1264
  %0 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !1265
  %call1 = call %struct.decNumber* @__dpd64ToNumber(%struct.decimal64* %0, %struct.decNumber* %dn), !dbg !1266
  %1 = load %struct.decimal64*, %struct.decimal64** %result.addr, align 8, !dbg !1267
  %call2 = call %struct.decimal64* @__dpd64FromNumber(%struct.decimal64* %1, %struct.decNumber* %dn, %struct.decContext* %dc), !dbg !1268
  %2 = load %struct.decimal64*, %struct.decimal64** %result.addr, align 8, !dbg !1269
  ret %struct.decimal64* %2, !dbg !1270
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.decimal64* @decimal64FromNumber(%struct.decimal64* %d64, %struct.decNumber* %dn, %struct.decContext* %set) #0 !dbg !1271 {
entry:
  %d64.addr = alloca %struct.decimal64*, align 8
  %dn.addr = alloca %struct.decNumber*, align 8
  %set.addr = alloca %struct.decContext*, align 8
  %u = alloca %union.anon, align 8
  store %struct.decimal64* %d64, %struct.decimal64** %d64.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %d64.addr, metadata !1272, metadata !DIExpression()), !dbg !1273
  store %struct.decNumber* %dn, %struct.decNumber** %dn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decNumber** %dn.addr, metadata !1274, metadata !DIExpression()), !dbg !1275
  store %struct.decContext* %set, %struct.decContext** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decContext** %set.addr, metadata !1276, metadata !DIExpression()), !dbg !1277
  call void @llvm.dbg.declare(metadata %union.anon* %u, metadata !1278, metadata !DIExpression()), !dbg !1286
  %0 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !1287
  %1 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !1288
  %2 = load %struct.decContext*, %struct.decContext** %set.addr, align 8, !dbg !1289
  %call = call %struct.decimal64* @__dpd64FromNumber(%struct.decimal64* %0, %struct.decNumber* %1, %struct.decContext* %2), !dbg !1290
  %3 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !1291
  %_Dec = bitcast %union.anon* %u to i64*, !dbg !1292
  %coerce.dive = getelementptr inbounds %struct.decimal64, %struct.decimal64* %3, i32 0, i32 0, !dbg !1293
  %4 = bitcast [8 x i8]* %coerce.dive to i64*, !dbg !1293
  %5 = load i64, i64* %4, align 1, !dbg !1293
  call void @__ieee_to_host_64(i64 %5, i64* %_Dec), !dbg !1293
  %_Dec1 = bitcast %union.anon* %u to i64*, !dbg !1294
  %_Dec2 = bitcast %union.anon* %u to i64*, !dbg !1295
  call void @_dpd_to_bid64(i64* %_Dec1, i64* %_Dec2), !dbg !1296
  %_Dec3 = bitcast %union.anon* %u to i64*, !dbg !1297
  %6 = load i64, i64* %_Dec3, align 8, !dbg !1297
  %dec = bitcast %union.anon* %u to %struct.decimal64*, !dbg !1298
  call void @__host_to_ieee_64(i64 %6, %struct.decimal64* %dec), !dbg !1299
  %7 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !1300
  %dec4 = bitcast %union.anon* %u to %struct.decimal64*, !dbg !1301
  %8 = bitcast %struct.decimal64* %7 to i8*, !dbg !1301
  %9 = bitcast %struct.decimal64* %dec4 to i8*, !dbg !1301
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 8 %9, i64 8, i1 false), !dbg !1301
  %10 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !1302
  ret %struct.decimal64* %10, !dbg !1303
}

declare dso_local void @__ieee_to_host_64(i64, i64*) #3

declare dso_local void @_dpd_to_bid64(i64*, i64*) #3

declare dso_local void @__host_to_ieee_64(i64, %struct.decimal64*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.decNumber* @decimal64ToNumber(%struct.decimal64* %bid64, %struct.decNumber* %dn) #0 !dbg !1304 {
entry:
  %bid64.addr = alloca %struct.decimal64*, align 8
  %dn.addr = alloca %struct.decNumber*, align 8
  %u = alloca %union.anon.0, align 8
  store %struct.decimal64* %bid64, %struct.decimal64** %bid64.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %bid64.addr, metadata !1305, metadata !DIExpression()), !dbg !1306
  store %struct.decNumber* %dn, %struct.decNumber** %dn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decNumber** %dn.addr, metadata !1307, metadata !DIExpression()), !dbg !1308
  call void @llvm.dbg.declare(metadata %union.anon.0* %u, metadata !1309, metadata !DIExpression()), !dbg !1314
  %0 = load %struct.decimal64*, %struct.decimal64** %bid64.addr, align 8, !dbg !1315
  %_Dec = bitcast %union.anon.0* %u to i64*, !dbg !1316
  %coerce.dive = getelementptr inbounds %struct.decimal64, %struct.decimal64* %0, i32 0, i32 0, !dbg !1317
  %1 = bitcast [8 x i8]* %coerce.dive to i64*, !dbg !1317
  %2 = load i64, i64* %1, align 1, !dbg !1317
  call void @__ieee_to_host_64(i64 %2, i64* %_Dec), !dbg !1317
  %_Dec1 = bitcast %union.anon.0* %u to i64*, !dbg !1318
  %_Dec2 = bitcast %union.anon.0* %u to i64*, !dbg !1319
  call void @_bid_to_dpd64(i64* %_Dec1, i64* %_Dec2), !dbg !1320
  %_Dec3 = bitcast %union.anon.0* %u to i64*, !dbg !1321
  %3 = load i64, i64* %_Dec3, align 8, !dbg !1321
  %dec = bitcast %union.anon.0* %u to %struct.decimal64*, !dbg !1322
  call void @__host_to_ieee_64(i64 %3, %struct.decimal64* %dec), !dbg !1323
  %dec4 = bitcast %union.anon.0* %u to %struct.decimal64*, !dbg !1324
  %4 = load %struct.decNumber*, %struct.decNumber** %dn.addr, align 8, !dbg !1325
  %call = call %struct.decNumber* @__dpd64ToNumber(%struct.decimal64* %dec4, %struct.decNumber* %4), !dbg !1326
  ret %struct.decNumber* %call, !dbg !1327
}

declare dso_local void @_bid_to_dpd64(i64*, i64*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @decimal64ToString(%struct.decimal64* %d64, i8* %string) #0 !dbg !1328 {
entry:
  %d64.addr = alloca %struct.decimal64*, align 8
  %string.addr = alloca i8*, align 8
  %dn = alloca %struct.decNumber, align 4
  store %struct.decimal64* %d64, %struct.decimal64** %d64.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %d64.addr, metadata !1329, metadata !DIExpression()), !dbg !1330
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1331, metadata !DIExpression()), !dbg !1332
  call void @llvm.dbg.declare(metadata %struct.decNumber* %dn, metadata !1333, metadata !DIExpression()), !dbg !1334
  %0 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !1335
  %call = call %struct.decNumber* @decimal64ToNumber(%struct.decimal64* %0, %struct.decNumber* %dn), !dbg !1336
  %1 = load i8*, i8** %string.addr, align 8, !dbg !1337
  %call1 = call i8* @decNumberToString(%struct.decNumber* %dn, i8* %1), !dbg !1338
  %2 = load i8*, i8** %string.addr, align 8, !dbg !1339
  ret i8* %2, !dbg !1340
}

declare dso_local i8* @decNumberToString(%struct.decNumber*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @decimal64ToEngString(%struct.decimal64* %d64, i8* %string) #0 !dbg !1341 {
entry:
  %d64.addr = alloca %struct.decimal64*, align 8
  %string.addr = alloca i8*, align 8
  %dn = alloca %struct.decNumber, align 4
  store %struct.decimal64* %d64, %struct.decimal64** %d64.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %d64.addr, metadata !1342, metadata !DIExpression()), !dbg !1343
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1344, metadata !DIExpression()), !dbg !1345
  call void @llvm.dbg.declare(metadata %struct.decNumber* %dn, metadata !1346, metadata !DIExpression()), !dbg !1347
  %0 = load %struct.decimal64*, %struct.decimal64** %d64.addr, align 8, !dbg !1348
  %call = call %struct.decNumber* @decimal64ToNumber(%struct.decimal64* %0, %struct.decNumber* %dn), !dbg !1349
  %1 = load i8*, i8** %string.addr, align 8, !dbg !1350
  %call1 = call i8* @decNumberToEngString(%struct.decNumber* %dn, i8* %1), !dbg !1351
  %2 = load i8*, i8** %string.addr, align 8, !dbg !1352
  ret i8* %2, !dbg !1353
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.decimal64* @decimal64FromString(%struct.decimal64* %result, i8* %string, %struct.decContext* %set) #0 !dbg !1354 {
entry:
  %result.addr = alloca %struct.decimal64*, align 8
  %string.addr = alloca i8*, align 8
  %set.addr = alloca %struct.decContext*, align 8
  %dc = alloca %struct.decContext, align 4
  %dn = alloca %struct.decNumber, align 4
  store %struct.decimal64* %result, %struct.decimal64** %result.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decimal64** %result.addr, metadata !1355, metadata !DIExpression()), !dbg !1356
  store i8* %string, i8** %string.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %string.addr, metadata !1357, metadata !DIExpression()), !dbg !1358
  store %struct.decContext* %set, %struct.decContext** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.decContext** %set.addr, metadata !1359, metadata !DIExpression()), !dbg !1360
  call void @llvm.dbg.declare(metadata %struct.decContext* %dc, metadata !1361, metadata !DIExpression()), !dbg !1362
  call void @llvm.dbg.declare(metadata %struct.decNumber* %dn, metadata !1363, metadata !DIExpression()), !dbg !1364
  %call = call %struct.decContext* @decContextDefault(%struct.decContext* %dc, i32 64), !dbg !1365
  %0 = load %struct.decContext*, %struct.decContext** %set.addr, align 8, !dbg !1366
  %round = getelementptr inbounds %struct.decContext, %struct.decContext* %0, i32 0, i32 3, !dbg !1367
  %1 = load i32, i32* %round, align 4, !dbg !1367
  %round1 = getelementptr inbounds %struct.decContext, %struct.decContext* %dc, i32 0, i32 3, !dbg !1368
  store i32 %1, i32* %round1, align 4, !dbg !1369
  %2 = load i8*, i8** %string.addr, align 8, !dbg !1370
  %call2 = call %struct.decNumber* @decNumberFromString(%struct.decNumber* %dn, i8* %2, %struct.decContext* %dc), !dbg !1371
  %3 = load %struct.decimal64*, %struct.decimal64** %result.addr, align 8, !dbg !1372
  %call3 = call %struct.decimal64* @decimal64FromNumber(%struct.decimal64* %3, %struct.decNumber* %dn, %struct.decContext* %dc), !dbg !1373
  %status = getelementptr inbounds %struct.decContext, %struct.decContext* %dc, i32 0, i32 5, !dbg !1374
  %4 = load i32, i32* %status, align 4, !dbg !1374
  %cmp = icmp ne i32 %4, 0, !dbg !1376
  br i1 %cmp, label %if.then, label %if.end, !dbg !1377

if.then:                                          ; preds = %entry
  %5 = load %struct.decContext*, %struct.decContext** %set.addr, align 8, !dbg !1378
  %status4 = getelementptr inbounds %struct.decContext, %struct.decContext* %dc, i32 0, i32 5, !dbg !1380
  %6 = load i32, i32* %status4, align 4, !dbg !1380
  %call5 = call %struct.decContext* @decContextSetStatus(%struct.decContext* %5, i32 %6), !dbg !1381
  br label %if.end, !dbg !1382

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.decimal64*, %struct.decimal64** %result.addr, align 8, !dbg !1383
  ret %struct.decimal64* %7, !dbg !1384
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readonly }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!65, !66, !67}
!llvm.ident = !{!68}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "BIN2DPD", scope: !2, file: !35, line: 346, type: !62, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !18, globals: !32, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "decimal64.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rounding", file: !6, line: 69, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./decContext.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17}
!9 = !DIEnumerator(name: "DEC_ROUND_CEILING", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "DEC_ROUND_UP", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "DEC_ROUND_HALF_UP", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "DEC_ROUND_HALF_EVEN", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "DEC_ROUND_HALF_DOWN", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "DEC_ROUND_DOWN", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "DEC_ROUND_FLOOR", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "DEC_ROUND_05UP", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "DEC_ROUND_MAX", value: 8, isUnsigned: true)
!18 = !{!19, !23, !24, !28, !29}
!19 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !20, line: 26, baseType: !21)
!20 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !22, line: 42, baseType: !7)
!22 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !25, line: 26, baseType: !26)
!25 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "")
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !22, line: 41, baseType: !27)
!27 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!28 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!29 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !20, line: 25, baseType: !30)
!30 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint16_t", file: !22, line: 40, baseType: !31)
!31 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!32 = !{!0, !33, !40, !49, !55, !57}
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "DPD2BIN", scope: !2, file: !35, line: 429, type: !36, isLocal: false, isDefinition: true)
!35 = !DIFile(filename: "./decDPD.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!36 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 16384, elements: !38)
!37 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !29)
!38 = !{!39}
!39 = !DISubrange(count: 1024)
!40 = !DIGlobalVariableExpression(var: !41, expr: !DIExpression())
!41 = distinct !DIGlobalVariable(name: "BIN2CHAR", scope: !2, file: !35, line: 774, type: !42, isLocal: false, isDefinition: true)
!42 = !DICompositeType(tag: DW_TAG_array_type, baseType: !43, size: 32008, elements: !47)
!43 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !44)
!44 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !20, line: 24, baseType: !45)
!45 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !22, line: 38, baseType: !46)
!46 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!47 = !{!48}
!48 = !DISubrange(count: 4001)
!49 = !DIGlobalVariableExpression(var: !50, expr: !DIExpression())
!50 = distinct !DIGlobalVariable(name: "COMBEXP", scope: !2, file: !3, line: 623, type: !51, isLocal: false, isDefinition: true)
!51 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, size: 1024, elements: !53)
!52 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !19)
!53 = !{!54}
!54 = !DISubrange(count: 32)
!55 = !DIGlobalVariableExpression(var: !56, expr: !DIExpression())
!56 = distinct !DIGlobalVariable(name: "COMBMSD", scope: !2, file: !3, line: 627, type: !51, isLocal: false, isDefinition: true)
!57 = !DIGlobalVariableExpression(var: !58, expr: !DIExpression())
!58 = distinct !DIGlobalVariable(name: "multies", scope: !2, file: !3, line: 658, type: !59, isLocal: true, isDefinition: true)
!59 = !DICompositeType(tag: DW_TAG_array_type, baseType: !52, size: 160, elements: !60)
!60 = !{!61}
!61 = !DISubrange(count: 5)
!62 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 16000, elements: !63)
!63 = !{!64}
!64 = !DISubrange(count: 1000)
!65 = !{i32 7, !"Dwarf Version", i32 4}
!66 = !{i32 2, !"Debug Info Version", i32 3}
!67 = !{i32 1, !"wchar_size", i32 4}
!68 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!69 = distinct !DISubprogram(name: "__dpd64FromNumber", scope: !3, file: !3, line: 121, type: !70, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!70 = !DISubroutineType(types: !71)
!71 = !{!72, !72, !81, !94}
!72 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !73, size: 64)
!73 = !DIDerivedType(tag: DW_TAG_typedef, name: "decimal64", file: !74, line: 66, baseType: !75)
!74 = !DIFile(filename: "./decimal64.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!75 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !74, line: 64, size: 64, elements: !76)
!76 = !{!77}
!77 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !75, file: !74, line: 65, baseType: !78, size: 64)
!78 = !DICompositeType(tag: DW_TAG_array_type, baseType: !44, size: 64, elements: !79)
!79 = !{!80}
!80 = !DISubrange(count: 8)
!81 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!82 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !83)
!83 = !DIDerivedType(tag: DW_TAG_typedef, name: "decNumber", file: !84, line: 84, baseType: !85)
!84 = !DIFile(filename: "./decNumber.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!85 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !84, line: 77, size: 192, elements: !86)
!86 = !{!87, !88, !89, !90}
!87 = !DIDerivedType(tag: DW_TAG_member, name: "digits", scope: !85, file: !84, line: 78, baseType: !24, size: 32)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "exponent", scope: !85, file: !84, line: 79, baseType: !24, size: 32, offset: 32)
!89 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !85, file: !84, line: 81, baseType: !44, size: 8, offset: 64)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "lsu", scope: !85, file: !84, line: 83, baseType: !91, size: 96, offset: 80)
!91 = !DICompositeType(tag: DW_TAG_array_type, baseType: !29, size: 96, elements: !92)
!92 = !{!93}
!93 = !DISubrange(count: 6)
!94 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64)
!95 = !DIDerivedType(tag: DW_TAG_typedef, name: "decContext", file: !6, line: 93, baseType: !96)
!96 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !6, line: 82, size: 224, elements: !97)
!97 = !{!98, !99, !100, !101, !102, !103, !104}
!98 = !DIDerivedType(tag: DW_TAG_member, name: "digits", scope: !96, file: !6, line: 83, baseType: !24, size: 32)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "emax", scope: !96, file: !6, line: 84, baseType: !24, size: 32, offset: 32)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "emin", scope: !96, file: !6, line: 85, baseType: !24, size: 32, offset: 64)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "round", scope: !96, file: !6, line: 86, baseType: !5, size: 32, offset: 96)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "traps", scope: !96, file: !6, line: 87, baseType: !19, size: 32, offset: 128)
!103 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !96, file: !6, line: 88, baseType: !19, size: 32, offset: 160)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "clamp", scope: !96, file: !6, line: 89, baseType: !44, size: 8, offset: 192)
!105 = !{}
!106 = !DILocalVariable(name: "d64", arg: 1, scope: !69, file: !3, line: 121, type: !72)
!107 = !DILocation(line: 121, column: 44, scope: !69)
!108 = !DILocalVariable(name: "dn", arg: 2, scope: !69, file: !3, line: 121, type: !81)
!109 = !DILocation(line: 121, column: 66, scope: !69)
!110 = !DILocalVariable(name: "set", arg: 3, scope: !69, file: !3, line: 122, type: !94)
!111 = !DILocation(line: 122, column: 17, scope: !69)
!112 = !DILocalVariable(name: "status", scope: !69, file: !3, line: 123, type: !19)
!113 = !DILocation(line: 123, column: 8, scope: !69)
!114 = !DILocalVariable(name: "ae", scope: !69, file: !3, line: 124, type: !24)
!115 = !DILocation(line: 124, column: 7, scope: !69)
!116 = !DILocalVariable(name: "dw", scope: !69, file: !3, line: 125, type: !83)
!117 = !DILocation(line: 125, column: 14, scope: !69)
!118 = !DILocalVariable(name: "dc", scope: !69, file: !3, line: 126, type: !95)
!119 = !DILocation(line: 126, column: 14, scope: !69)
!120 = !DILocalVariable(name: "comb", scope: !69, file: !3, line: 127, type: !19)
!121 = !DILocation(line: 127, column: 8, scope: !69)
!122 = !DILocalVariable(name: "exp", scope: !69, file: !3, line: 127, type: !19)
!123 = !DILocation(line: 127, column: 14, scope: !69)
!124 = !DILocalVariable(name: "uiwork", scope: !69, file: !3, line: 128, type: !19)
!125 = !DILocation(line: 128, column: 8, scope: !69)
!126 = !DILocalVariable(name: "targar", scope: !69, file: !3, line: 129, type: !127)
!127 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 64, elements: !128)
!128 = !{!129}
!129 = !DISubrange(count: 2)
!130 = !DILocation(line: 129, column: 8, scope: !69)
!131 = !DILocation(line: 138, column: 6, scope: !69)
!132 = !DILocation(line: 138, column: 10, scope: !69)
!133 = !DILocation(line: 138, column: 19, scope: !69)
!134 = !DILocation(line: 138, column: 23, scope: !69)
!135 = !DILocation(line: 138, column: 18, scope: !69)
!136 = !DILocation(line: 138, column: 29, scope: !69)
!137 = !DILocation(line: 138, column: 5, scope: !69)
!138 = !DILocation(line: 139, column: 7, scope: !139)
!139 = distinct !DILexicalBlock(scope: !69, file: !3, line: 139, column: 7)
!140 = !DILocation(line: 139, column: 11, scope: !139)
!141 = !DILocation(line: 139, column: 17, scope: !139)
!142 = !DILocation(line: 140, column: 4, scope: !139)
!143 = !DILocation(line: 140, column: 7, scope: !139)
!144 = !DILocation(line: 140, column: 9, scope: !139)
!145 = !DILocation(line: 141, column: 4, scope: !139)
!146 = !DILocation(line: 141, column: 7, scope: !139)
!147 = !DILocation(line: 141, column: 9, scope: !139)
!148 = !DILocation(line: 139, column: 7, scope: !69)
!149 = !DILocation(line: 142, column: 5, scope: !150)
!150 = distinct !DILexicalBlock(scope: !139, file: !3, line: 141, column: 26)
!151 = !DILocation(line: 143, column: 14, scope: !150)
!152 = !DILocation(line: 143, column: 19, scope: !150)
!153 = !DILocation(line: 143, column: 8, scope: !150)
!154 = !DILocation(line: 143, column: 13, scope: !150)
!155 = !DILocation(line: 144, column: 24, scope: !150)
!156 = !DILocation(line: 144, column: 5, scope: !150)
!157 = !DILocation(line: 146, column: 14, scope: !150)
!158 = !DILocation(line: 146, column: 18, scope: !150)
!159 = !DILocation(line: 146, column: 22, scope: !150)
!160 = !DILocation(line: 146, column: 8, scope: !150)
!161 = !DILocation(line: 146, column: 12, scope: !150)
!162 = !DILocation(line: 147, column: 15, scope: !150)
!163 = !DILocation(line: 147, column: 11, scope: !150)
!164 = !DILocation(line: 148, column: 7, scope: !150)
!165 = !DILocation(line: 149, column: 5, scope: !150)
!166 = !DILocation(line: 151, column: 7, scope: !167)
!167 = distinct !DILexicalBlock(scope: !69, file: !3, line: 151, column: 7)
!168 = !DILocation(line: 151, column: 11, scope: !167)
!169 = !DILocation(line: 151, column: 15, scope: !167)
!170 = !DILocation(line: 151, column: 7, scope: !69)
!171 = !DILocation(line: 152, column: 9, scope: !172)
!172 = distinct !DILexicalBlock(scope: !173, file: !3, line: 152, column: 9)
!173 = distinct !DILexicalBlock(scope: !167, file: !3, line: 151, column: 28)
!174 = !DILocation(line: 152, column: 13, scope: !172)
!175 = !DILocation(line: 152, column: 17, scope: !172)
!176 = !DILocation(line: 152, column: 9, scope: !173)
!177 = !DILocation(line: 152, column: 26, scope: !172)
!178 = !DILocation(line: 152, column: 32, scope: !172)
!179 = !DILocation(line: 154, column: 13, scope: !180)
!180 = distinct !DILexicalBlock(scope: !181, file: !3, line: 154, column: 11)
!181 = distinct !DILexicalBlock(scope: !172, file: !3, line: 153, column: 11)
!182 = !DILocation(line: 154, column: 17, scope: !180)
!183 = !DILocation(line: 154, column: 12, scope: !180)
!184 = !DILocation(line: 154, column: 20, scope: !180)
!185 = !DILocation(line: 154, column: 24, scope: !180)
!186 = !DILocation(line: 154, column: 27, scope: !180)
!187 = !DILocation(line: 154, column: 31, scope: !180)
!188 = !DILocation(line: 154, column: 37, scope: !180)
!189 = !DILocation(line: 155, column: 8, scope: !180)
!190 = !DILocation(line: 155, column: 12, scope: !180)
!191 = !DILocation(line: 155, column: 16, scope: !180)
!192 = !DILocation(line: 155, column: 22, scope: !180)
!193 = !DILocation(line: 154, column: 11, scope: !181)
!194 = !DILocation(line: 156, column: 17, scope: !195)
!195 = distinct !DILexicalBlock(scope: !180, file: !3, line: 155, column: 40)
!196 = !DILocation(line: 156, column: 21, scope: !195)
!197 = !DILocation(line: 156, column: 2, scope: !195)
!198 = !DILocation(line: 157, column: 2, scope: !195)
!199 = !DILocation(line: 158, column: 11, scope: !200)
!200 = distinct !DILexicalBlock(scope: !181, file: !3, line: 158, column: 11)
!201 = !DILocation(line: 158, column: 15, scope: !200)
!202 = !DILocation(line: 158, column: 19, scope: !200)
!203 = !DILocation(line: 158, column: 11, scope: !181)
!204 = !DILocation(line: 158, column: 28, scope: !200)
!205 = !DILocation(line: 158, column: 34, scope: !200)
!206 = !DILocation(line: 159, column: 13, scope: !200)
!207 = !DILocation(line: 159, column: 19, scope: !200)
!208 = !DILocation(line: 161, column: 5, scope: !173)
!209 = !DILocation(line: 164, column: 9, scope: !210)
!210 = distinct !DILexicalBlock(scope: !211, file: !3, line: 164, column: 9)
!211 = distinct !DILexicalBlock(scope: !167, file: !3, line: 163, column: 9)
!212 = !DILocation(line: 164, column: 9, scope: !211)
!213 = !DILocation(line: 166, column: 11, scope: !214)
!214 = distinct !DILexicalBlock(scope: !215, file: !3, line: 166, column: 11)
!215 = distinct !DILexicalBlock(scope: !210, file: !3, line: 164, column: 30)
!216 = !DILocation(line: 166, column: 15, scope: !214)
!217 = !DILocation(line: 166, column: 23, scope: !214)
!218 = !DILocation(line: 166, column: 11, scope: !215)
!219 = !DILocation(line: 167, column: 5, scope: !220)
!220 = distinct !DILexicalBlock(scope: !214, file: !3, line: 166, column: 41)
!221 = !DILocation(line: 168, column: 8, scope: !220)
!222 = !DILocation(line: 169, column: 2, scope: !220)
!223 = !DILocation(line: 171, column: 6, scope: !224)
!224 = distinct !DILexicalBlock(scope: !214, file: !3, line: 170, column: 13)
!225 = !DILocation(line: 171, column: 10, scope: !224)
!226 = !DILocation(line: 171, column: 18, scope: !224)
!227 = !DILocation(line: 171, column: 5, scope: !224)
!228 = !DILocation(line: 172, column: 6, scope: !229)
!229 = distinct !DILexicalBlock(scope: !224, file: !3, line: 172, column: 6)
!230 = !DILocation(line: 172, column: 9, scope: !229)
!231 = !DILocation(line: 172, column: 6, scope: !224)
!232 = !DILocation(line: 173, column: 7, scope: !233)
!233 = distinct !DILexicalBlock(scope: !229, file: !3, line: 172, column: 27)
!234 = !DILocation(line: 174, column: 10, scope: !233)
!235 = !DILocation(line: 175, column: 4, scope: !233)
!236 = !DILocation(line: 177, column: 13, scope: !215)
!237 = !DILocation(line: 177, column: 16, scope: !215)
!238 = !DILocation(line: 177, column: 21, scope: !215)
!239 = !DILocation(line: 177, column: 11, scope: !215)
!240 = !DILocation(line: 178, column: 7, scope: !215)
!241 = !DILocalVariable(name: "msd", scope: !242, file: !3, line: 180, type: !19)
!242 = distinct !DILexicalBlock(scope: !210, file: !3, line: 179, column: 11)
!243 = !DILocation(line: 180, column: 12, scope: !242)
!244 = !DILocalVariable(name: "pad", scope: !242, file: !3, line: 181, type: !24)
!245 = !DILocation(line: 181, column: 11, scope: !242)
!246 = !DILocation(line: 184, column: 18, scope: !242)
!247 = !DILocation(line: 184, column: 22, scope: !242)
!248 = !DILocation(line: 184, column: 30, scope: !242)
!249 = !DILocation(line: 184, column: 10, scope: !242)
!250 = !DILocation(line: 185, column: 11, scope: !251)
!251 = distinct !DILexicalBlock(scope: !242, file: !3, line: 185, column: 11)
!252 = !DILocation(line: 185, column: 14, scope: !251)
!253 = !DILocation(line: 185, column: 11, scope: !242)
!254 = !DILocation(line: 186, column: 6, scope: !255)
!255 = distinct !DILexicalBlock(scope: !251, file: !3, line: 185, column: 32)
!256 = !DILocation(line: 186, column: 9, scope: !255)
!257 = !DILocation(line: 186, column: 5, scope: !255)
!258 = !DILocation(line: 187, column: 5, scope: !255)
!259 = !DILocation(line: 188, column: 8, scope: !255)
!260 = !DILocation(line: 189, column: 2, scope: !255)
!261 = !DILocation(line: 192, column: 25, scope: !262)
!262 = distinct !DILexicalBlock(scope: !242, file: !3, line: 192, column: 11)
!263 = !DILocation(line: 192, column: 28, scope: !262)
!264 = !DILocation(line: 192, column: 11, scope: !242)
!265 = !DILocalVariable(name: "dpd", scope: !266, file: !3, line: 193, type: !267)
!266 = distinct !DILexicalBlock(scope: !262, file: !3, line: 192, column: 33)
!267 = !DICompositeType(tag: DW_TAG_array_type, baseType: !19, size: 192, elements: !92)
!268 = !DILocation(line: 193, column: 7, scope: !266)
!269 = !DILocalVariable(name: "i", scope: !266, file: !3, line: 194, type: !19)
!270 = !DILocation(line: 194, column: 7, scope: !266)
!271 = !DILocalVariable(name: "d", scope: !266, file: !3, line: 195, type: !24)
!272 = !DILocation(line: 195, column: 6, scope: !266)
!273 = !DILocation(line: 195, column: 8, scope: !266)
!274 = !DILocation(line: 195, column: 12, scope: !266)
!275 = !DILocation(line: 196, column: 8, scope: !276)
!276 = distinct !DILexicalBlock(scope: !266, file: !3, line: 196, column: 2)
!277 = !DILocation(line: 196, column: 7, scope: !276)
!278 = !DILocation(line: 196, column: 12, scope: !279)
!279 = distinct !DILexicalBlock(scope: !276, file: !3, line: 196, column: 2)
!280 = !DILocation(line: 196, column: 13, scope: !279)
!281 = !DILocation(line: 196, column: 2, scope: !276)
!282 = !DILocation(line: 196, column: 43, scope: !279)
!283 = !DILocation(line: 196, column: 47, scope: !279)
!284 = !DILocation(line: 196, column: 51, scope: !279)
!285 = !DILocation(line: 196, column: 35, scope: !279)
!286 = !DILocation(line: 196, column: 32, scope: !279)
!287 = !DILocation(line: 196, column: 28, scope: !279)
!288 = !DILocation(line: 196, column: 34, scope: !279)
!289 = !DILocation(line: 196, column: 18, scope: !279)
!290 = !DILocation(line: 196, column: 23, scope: !279)
!291 = !DILocation(line: 196, column: 2, scope: !279)
!292 = distinct !{!292, !281, !293}
!293 = !DILocation(line: 196, column: 53, scope: !276)
!294 = !DILocation(line: 197, column: 10, scope: !266)
!295 = !DILocation(line: 197, column: 2, scope: !266)
!296 = !DILocation(line: 197, column: 9, scope: !266)
!297 = !DILocation(line: 198, column: 10, scope: !266)
!298 = !DILocation(line: 198, column: 16, scope: !266)
!299 = !DILocation(line: 198, column: 2, scope: !266)
!300 = !DILocation(line: 198, column: 8, scope: !266)
!301 = !DILocation(line: 199, column: 10, scope: !266)
!302 = !DILocation(line: 199, column: 16, scope: !266)
!303 = !DILocation(line: 199, column: 2, scope: !266)
!304 = !DILocation(line: 199, column: 8, scope: !266)
!305 = !DILocation(line: 200, column: 6, scope: !306)
!306 = distinct !DILexicalBlock(scope: !266, file: !3, line: 200, column: 6)
!307 = !DILocation(line: 200, column: 10, scope: !306)
!308 = !DILocation(line: 200, column: 16, scope: !306)
!309 = !DILocation(line: 200, column: 6, scope: !266)
!310 = !DILocation(line: 201, column: 12, scope: !311)
!311 = distinct !DILexicalBlock(scope: !306, file: !3, line: 200, column: 20)
!312 = !DILocation(line: 201, column: 18, scope: !311)
!313 = !DILocation(line: 201, column: 4, scope: !311)
!314 = !DILocation(line: 201, column: 10, scope: !311)
!315 = !DILocation(line: 202, column: 12, scope: !311)
!316 = !DILocation(line: 202, column: 18, scope: !311)
!317 = !DILocation(line: 202, column: 4, scope: !311)
!318 = !DILocation(line: 202, column: 11, scope: !311)
!319 = !DILocation(line: 203, column: 12, scope: !311)
!320 = !DILocation(line: 203, column: 18, scope: !311)
!321 = !DILocation(line: 203, column: 4, scope: !311)
!322 = !DILocation(line: 203, column: 10, scope: !311)
!323 = !DILocation(line: 204, column: 4, scope: !311)
!324 = !DILocation(line: 205, column: 6, scope: !266)
!325 = !DILocation(line: 205, column: 5, scope: !266)
!326 = !DILocation(line: 206, column: 2, scope: !266)
!327 = !DILocation(line: 208, column: 17, scope: !328)
!328 = distinct !DILexicalBlock(scope: !262, file: !3, line: 207, column: 13)
!329 = !DILocation(line: 208, column: 21, scope: !328)
!330 = !DILocation(line: 208, column: 29, scope: !328)
!331 = !DILocation(line: 208, column: 2, scope: !328)
!332 = !DILocation(line: 210, column: 6, scope: !328)
!333 = !DILocation(line: 210, column: 12, scope: !328)
!334 = !DILocation(line: 210, column: 5, scope: !328)
!335 = !DILocation(line: 211, column: 2, scope: !328)
!336 = !DILocation(line: 211, column: 8, scope: !328)
!337 = !DILocation(line: 215, column: 11, scope: !338)
!338 = distinct !DILexicalBlock(scope: !242, file: !3, line: 215, column: 11)
!339 = !DILocation(line: 215, column: 14, scope: !338)
!340 = !DILocation(line: 215, column: 11, scope: !242)
!341 = !DILocation(line: 215, column: 33, scope: !338)
!342 = !DILocation(line: 215, column: 36, scope: !338)
!343 = !DILocation(line: 215, column: 41, scope: !338)
!344 = !DILocation(line: 215, column: 29, scope: !338)
!345 = !DILocation(line: 215, column: 52, scope: !338)
!346 = !DILocation(line: 215, column: 56, scope: !338)
!347 = !DILocation(line: 215, column: 49, scope: !338)
!348 = !DILocation(line: 215, column: 23, scope: !338)
!349 = !DILocation(line: 215, column: 19, scope: !338)
!350 = !DILocation(line: 216, column: 19, scope: !338)
!351 = !DILocation(line: 216, column: 22, scope: !338)
!352 = !DILocation(line: 216, column: 27, scope: !338)
!353 = !DILocation(line: 216, column: 37, scope: !338)
!354 = !DILocation(line: 216, column: 35, scope: !338)
!355 = !DILocation(line: 216, column: 16, scope: !338)
!356 = !DILocation(line: 218, column: 13, scope: !211)
!357 = !DILocation(line: 218, column: 17, scope: !211)
!358 = !DILocation(line: 218, column: 5, scope: !211)
!359 = !DILocation(line: 218, column: 11, scope: !211)
!360 = !DILocation(line: 219, column: 14, scope: !211)
!361 = !DILocation(line: 219, column: 17, scope: !211)
!362 = !DILocation(line: 219, column: 23, scope: !211)
!363 = !DILocation(line: 219, column: 5, scope: !211)
!364 = !DILocation(line: 219, column: 11, scope: !211)
!365 = !DILocation(line: 222, column: 7, scope: !366)
!366 = distinct !DILexicalBlock(scope: !69, file: !3, line: 222, column: 7)
!367 = !DILocation(line: 222, column: 11, scope: !366)
!368 = !DILocation(line: 222, column: 15, scope: !366)
!369 = !DILocation(line: 222, column: 7, scope: !69)
!370 = !DILocation(line: 222, column: 24, scope: !366)
!371 = !DILocation(line: 222, column: 30, scope: !366)
!372 = !DILocation(line: 228, column: 11, scope: !373)
!373 = distinct !DILexicalBlock(scope: !374, file: !3, line: 226, column: 18)
!374 = distinct !DILexicalBlock(scope: !69, file: !3, line: 226, column: 7)
!375 = !DILocation(line: 229, column: 11, scope: !373)
!376 = !DILocation(line: 249, column: 7, scope: !377)
!377 = distinct !DILexicalBlock(scope: !69, file: !3, line: 249, column: 7)
!378 = !DILocation(line: 249, column: 13, scope: !377)
!379 = !DILocation(line: 249, column: 7, scope: !69)
!380 = !DILocation(line: 249, column: 38, scope: !377)
!381 = !DILocation(line: 249, column: 43, scope: !377)
!382 = !DILocation(line: 249, column: 18, scope: !377)
!383 = !DILocation(line: 251, column: 10, scope: !69)
!384 = !DILocation(line: 251, column: 3, scope: !69)
!385 = distinct !DISubprogram(name: "decDigitsToDPD", scope: !3, file: !3, line: 662, type: !386, scopeLine: 662, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!386 = !DISubroutineType(types: !387)
!387 = !{null, !81, !388, !24}
!388 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!389 = !DILocalVariable(name: "dn", arg: 1, scope: !385, file: !3, line: 662, type: !81)
!390 = !DILocation(line: 662, column: 38, scope: !385)
!391 = !DILocalVariable(name: "targ", arg: 2, scope: !385, file: !3, line: 662, type: !388)
!392 = !DILocation(line: 662, column: 48, scope: !385)
!393 = !DILocalVariable(name: "shift", arg: 3, scope: !385, file: !3, line: 662, type: !24)
!394 = !DILocation(line: 662, column: 58, scope: !385)
!395 = !DILocalVariable(name: "cut", scope: !385, file: !3, line: 663, type: !24)
!396 = !DILocation(line: 663, column: 8, scope: !385)
!397 = !DILocalVariable(name: "n", scope: !385, file: !3, line: 664, type: !24)
!398 = !DILocation(line: 664, column: 8, scope: !385)
!399 = !DILocalVariable(name: "digits", scope: !385, file: !3, line: 665, type: !24)
!400 = !DILocation(line: 665, column: 8, scope: !385)
!401 = !DILocation(line: 665, column: 15, scope: !385)
!402 = !DILocation(line: 665, column: 19, scope: !385)
!403 = !DILocalVariable(name: "dpd", scope: !385, file: !3, line: 666, type: !19)
!404 = !DILocation(line: 666, column: 8, scope: !385)
!405 = !DILocalVariable(name: "bin", scope: !385, file: !3, line: 667, type: !19)
!406 = !DILocation(line: 667, column: 8, scope: !385)
!407 = !DILocalVariable(name: "uout", scope: !385, file: !3, line: 668, type: !388)
!408 = !DILocation(line: 668, column: 9, scope: !385)
!409 = !DILocation(line: 668, column: 14, scope: !385)
!410 = !DILocalVariable(name: "uoff", scope: !385, file: !3, line: 669, type: !19)
!411 = !DILocation(line: 669, column: 8, scope: !385)
!412 = !DILocalVariable(name: "inu", scope: !385, file: !3, line: 670, type: !413)
!413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!414 = !DILocation(line: 670, column: 15, scope: !385)
!415 = !DILocation(line: 670, column: 19, scope: !385)
!416 = !DILocation(line: 670, column: 23, scope: !385)
!417 = !DILocalVariable(name: "uar", scope: !385, file: !3, line: 671, type: !418)
!418 = !DICompositeType(tag: DW_TAG_array_type, baseType: !29, size: 192, elements: !419)
!419 = !{!420}
!420 = !DISubrange(count: 12)
!421 = !DILocation(line: 671, column: 8, scope: !385)
!422 = !DILocation(line: 676, column: 7, scope: !423)
!423 = distinct !DILexicalBlock(scope: !385, file: !3, line: 676, column: 7)
!424 = !DILocation(line: 676, column: 12, scope: !423)
!425 = !DILocation(line: 676, column: 7, scope: !385)
!426 = !DILocalVariable(name: "source", scope: !427, file: !3, line: 680, type: !413)
!427 = distinct !DILexicalBlock(scope: !423, file: !3, line: 676, column: 17)
!428 = !DILocation(line: 680, column: 17, scope: !427)
!429 = !DILocalVariable(name: "target", scope: !427, file: !3, line: 681, type: !430)
!430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!431 = !DILocation(line: 681, column: 12, scope: !427)
!432 = !DILocalVariable(name: "first", scope: !427, file: !3, line: 681, type: !430)
!433 = !DILocation(line: 681, column: 21, scope: !427)
!434 = !DILocalVariable(name: "next", scope: !427, file: !3, line: 682, type: !19)
!435 = !DILocation(line: 682, column: 11, scope: !427)
!436 = !DILocation(line: 684, column: 12, scope: !427)
!437 = !DILocation(line: 684, column: 16, scope: !427)
!438 = !DILocation(line: 684, column: 20, scope: !427)
!439 = !DILocation(line: 684, column: 19, scope: !427)
!440 = !DILocation(line: 684, column: 31, scope: !427)
!441 = !DILocation(line: 684, column: 11, scope: !427)
!442 = !DILocation(line: 685, column: 12, scope: !427)
!443 = !DILocation(line: 685, column: 16, scope: !427)
!444 = !DILocation(line: 685, column: 15, scope: !427)
!445 = !DILocation(line: 685, column: 27, scope: !427)
!446 = !DILocation(line: 685, column: 30, scope: !427)
!447 = !DILocation(line: 685, column: 29, scope: !427)
!448 = !DILocation(line: 685, column: 11, scope: !427)
!449 = !DILocation(line: 686, column: 17, scope: !427)
!450 = !DILocation(line: 686, column: 16, scope: !427)
!451 = !DILocation(line: 686, column: 8, scope: !427)
!452 = !DILocation(line: 687, column: 9, scope: !453)
!453 = distinct !DILexicalBlock(scope: !427, file: !3, line: 687, column: 9)
!454 = !DILocation(line: 687, column: 12, scope: !453)
!455 = !DILocation(line: 687, column: 9, scope: !427)
!456 = !DILocation(line: 688, column: 7, scope: !457)
!457 = distinct !DILexicalBlock(scope: !453, file: !3, line: 687, column: 17)
!458 = !DILocation(line: 688, column: 14, scope: !459)
!459 = distinct !DILexicalBlock(scope: !460, file: !3, line: 688, column: 7)
!460 = distinct !DILexicalBlock(scope: !457, file: !3, line: 688, column: 7)
!461 = !DILocation(line: 688, column: 22, scope: !459)
!462 = !DILocation(line: 688, column: 26, scope: !459)
!463 = !DILocation(line: 688, column: 20, scope: !459)
!464 = !DILocation(line: 688, column: 7, scope: !460)
!465 = !DILocation(line: 688, column: 60, scope: !459)
!466 = !DILocation(line: 688, column: 59, scope: !459)
!467 = !DILocation(line: 688, column: 52, scope: !459)
!468 = !DILocation(line: 688, column: 58, scope: !459)
!469 = !DILocation(line: 688, column: 51, scope: !459)
!470 = !DILocation(line: 688, column: 37, scope: !459)
!471 = !DILocation(line: 688, column: 47, scope: !459)
!472 = !DILocation(line: 688, column: 7, scope: !459)
!473 = distinct !{!473, !464, !474}
!474 = !DILocation(line: 688, column: 60, scope: !460)
!475 = !DILocation(line: 689, column: 7, scope: !457)
!476 = !DILocation(line: 691, column: 13, scope: !477)
!477 = distinct !DILexicalBlock(scope: !453, file: !3, line: 690, column: 11)
!478 = !DILocation(line: 691, column: 17, scope: !477)
!479 = !DILocation(line: 691, column: 16, scope: !477)
!480 = !DILocation(line: 691, column: 34, scope: !477)
!481 = !DILocation(line: 691, column: 12, scope: !477)
!482 = !DILocation(line: 692, column: 7, scope: !477)
!483 = !DILocation(line: 692, column: 14, scope: !484)
!484 = distinct !DILexicalBlock(scope: !485, file: !3, line: 692, column: 7)
!485 = distinct !DILexicalBlock(scope: !477, file: !3, line: 692, column: 7)
!486 = !DILocation(line: 692, column: 22, scope: !484)
!487 = !DILocation(line: 692, column: 26, scope: !484)
!488 = !DILocation(line: 692, column: 20, scope: !484)
!489 = !DILocation(line: 692, column: 7, scope: !485)
!490 = !DILocalVariable(name: "quot", scope: !491, file: !3, line: 695, type: !19)
!491 = distinct !DILexicalBlock(scope: !484, file: !3, line: 692, column: 51)
!492 = !DILocation(line: 695, column: 9, scope: !491)
!493 = !DILocation(line: 695, column: 14, scope: !491)
!494 = !DILocalVariable(name: "rem", scope: !491, file: !3, line: 696, type: !19)
!495 = !DILocation(line: 696, column: 9, scope: !491)
!496 = !DILocation(line: 696, column: 14, scope: !491)
!497 = !DILocation(line: 696, column: 13, scope: !491)
!498 = !DILocation(line: 696, column: 21, scope: !491)
!499 = !DILocation(line: 696, column: 36, scope: !491)
!500 = !DILocation(line: 696, column: 26, scope: !491)
!501 = !DILocation(line: 696, column: 25, scope: !491)
!502 = !DILocation(line: 696, column: 20, scope: !491)
!503 = !DILocation(line: 697, column: 10, scope: !491)
!504 = !DILocation(line: 697, column: 8, scope: !491)
!505 = !DILocation(line: 702, column: 6, scope: !506)
!506 = distinct !DILexicalBlock(scope: !491, file: !3, line: 702, column: 6)
!507 = !DILocation(line: 702, column: 14, scope: !506)
!508 = !DILocation(line: 702, column: 12, scope: !506)
!509 = !DILocation(line: 702, column: 6, scope: !491)
!510 = !DILocation(line: 702, column: 35, scope: !506)
!511 = !DILocation(line: 702, column: 29, scope: !506)
!512 = !DILocation(line: 702, column: 22, scope: !506)
!513 = !DILocation(line: 702, column: 28, scope: !506)
!514 = !DILocation(line: 702, column: 21, scope: !506)
!515 = !DILocation(line: 703, column: 7, scope: !491)
!516 = !DILocation(line: 703, column: 29, scope: !491)
!517 = !DILocation(line: 703, column: 28, scope: !491)
!518 = !DILocation(line: 703, column: 11, scope: !491)
!519 = !DILocation(line: 703, column: 10, scope: !491)
!520 = !DILocation(line: 703, column: 6, scope: !491)
!521 = !DILocation(line: 704, column: 2, scope: !491)
!522 = !DILocation(line: 692, column: 37, scope: !484)
!523 = !DILocation(line: 692, column: 47, scope: !484)
!524 = !DILocation(line: 692, column: 7, scope: !484)
!525 = distinct !{!525, !489, !526}
!526 = !DILocation(line: 704, column: 2, scope: !485)
!527 = !DILocation(line: 707, column: 5, scope: !427)
!528 = !DILocation(line: 707, column: 12, scope: !529)
!529 = distinct !DILexicalBlock(scope: !530, file: !3, line: 707, column: 5)
!530 = distinct !DILexicalBlock(scope: !427, file: !3, line: 707, column: 5)
!531 = !DILocation(line: 707, column: 20, scope: !529)
!532 = !DILocation(line: 707, column: 18, scope: !529)
!533 = !DILocation(line: 707, column: 5, scope: !530)
!534 = !DILocation(line: 708, column: 21, scope: !535)
!535 = distinct !DILexicalBlock(scope: !529, file: !3, line: 707, column: 35)
!536 = !DILocation(line: 708, column: 15, scope: !535)
!537 = !DILocation(line: 708, column: 8, scope: !535)
!538 = !DILocation(line: 708, column: 14, scope: !535)
!539 = !DILocation(line: 709, column: 11, scope: !535)
!540 = !DILocation(line: 710, column: 7, scope: !535)
!541 = !DILocation(line: 707, column: 31, scope: !529)
!542 = !DILocation(line: 707, column: 5, scope: !529)
!543 = distinct !{!543, !533, !544}
!544 = !DILocation(line: 710, column: 7, scope: !530)
!545 = !DILocation(line: 711, column: 13, scope: !427)
!546 = !DILocation(line: 711, column: 11, scope: !427)
!547 = !DILocation(line: 712, column: 9, scope: !427)
!548 = !DILocation(line: 712, column: 8, scope: !427)
!549 = !DILocation(line: 713, column: 5, scope: !427)
!550 = !DILocation(line: 723, column: 8, scope: !551)
!551 = distinct !DILexicalBlock(scope: !385, file: !3, line: 723, column: 3)
!552 = !DILocation(line: 723, column: 7, scope: !551)
!553 = !DILocation(line: 723, column: 12, scope: !554)
!554 = distinct !DILexicalBlock(scope: !551, file: !3, line: 723, column: 3)
!555 = !DILocation(line: 723, column: 18, scope: !554)
!556 = !DILocation(line: 723, column: 3, scope: !551)
!557 = !DILocation(line: 725, column: 12, scope: !558)
!558 = distinct !DILexicalBlock(scope: !554, file: !3, line: 723, column: 27)
!559 = !DILocation(line: 725, column: 11, scope: !558)
!560 = !DILocation(line: 725, column: 10, scope: !558)
!561 = !DILocation(line: 726, column: 13, scope: !558)
!562 = !DILocation(line: 727, column: 10, scope: !558)
!563 = !DILocation(line: 752, column: 17, scope: !558)
!564 = !DILocation(line: 752, column: 9, scope: !558)
!565 = !DILocation(line: 752, column: 8, scope: !558)
!566 = !DILocation(line: 755, column: 12, scope: !558)
!567 = !DILocation(line: 755, column: 17, scope: !558)
!568 = !DILocation(line: 755, column: 15, scope: !558)
!569 = !DILocation(line: 755, column: 6, scope: !558)
!570 = !DILocation(line: 755, column: 10, scope: !558)
!571 = !DILocation(line: 756, column: 9, scope: !558)
!572 = !DILocation(line: 757, column: 9, scope: !573)
!573 = distinct !DILexicalBlock(scope: !558, file: !3, line: 757, column: 9)
!574 = !DILocation(line: 757, column: 13, scope: !573)
!575 = !DILocation(line: 757, column: 9, scope: !558)
!576 = !DILocation(line: 757, column: 18, scope: !573)
!577 = !DILocation(line: 758, column: 9, scope: !558)
!578 = !DILocation(line: 759, column: 9, scope: !558)
!579 = !DILocation(line: 760, column: 12, scope: !558)
!580 = !DILocation(line: 760, column: 21, scope: !558)
!581 = !DILocation(line: 760, column: 20, scope: !558)
!582 = !DILocation(line: 760, column: 15, scope: !558)
!583 = !DILocation(line: 760, column: 6, scope: !558)
!584 = !DILocation(line: 760, column: 10, scope: !558)
!585 = !DILocation(line: 761, column: 5, scope: !558)
!586 = !DILocation(line: 723, column: 23, scope: !554)
!587 = !DILocation(line: 723, column: 3, scope: !554)
!588 = distinct !{!588, !556, !589}
!589 = !DILocation(line: 761, column: 5, scope: !551)
!590 = !DILocation(line: 762, column: 3, scope: !385)
!591 = distinct !DISubprogram(name: "__dpd64ToNumber", scope: !3, file: !3, line: 260, type: !592, scopeLine: 260, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!592 = !DISubroutineType(types: !593)
!593 = !{!594, !595, !594}
!594 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!595 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !596, size: 64)
!596 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !73)
!597 = !DILocalVariable(name: "d64", arg: 1, scope: !591, file: !3, line: 260, type: !595)
!598 = !DILocation(line: 260, column: 48, scope: !591)
!599 = !DILocalVariable(name: "dn", arg: 2, scope: !591, file: !3, line: 260, type: !594)
!600 = !DILocation(line: 260, column: 64, scope: !591)
!601 = !DILocalVariable(name: "msd", scope: !591, file: !3, line: 261, type: !19)
!602 = !DILocation(line: 261, column: 8, scope: !591)
!603 = !DILocalVariable(name: "exp", scope: !591, file: !3, line: 262, type: !19)
!604 = !DILocation(line: 262, column: 8, scope: !591)
!605 = !DILocalVariable(name: "comb", scope: !591, file: !3, line: 263, type: !19)
!606 = !DILocation(line: 263, column: 8, scope: !591)
!607 = !DILocalVariable(name: "need", scope: !591, file: !3, line: 264, type: !24)
!608 = !DILocation(line: 264, column: 8, scope: !591)
!609 = !DILocalVariable(name: "uiwork", scope: !591, file: !3, line: 265, type: !19)
!610 = !DILocation(line: 265, column: 8, scope: !591)
!611 = !DILocalVariable(name: "sourar", scope: !591, file: !3, line: 266, type: !127)
!612 = !DILocation(line: 266, column: 8, scope: !591)
!613 = !DILocation(line: 272, column: 12, scope: !614)
!614 = distinct !DILexicalBlock(scope: !615, file: !3, line: 271, column: 18)
!615 = distinct !DILexicalBlock(scope: !591, file: !3, line: 271, column: 7)
!616 = !DILocation(line: 272, column: 5, scope: !614)
!617 = !DILocation(line: 272, column: 11, scope: !614)
!618 = !DILocation(line: 273, column: 12, scope: !614)
!619 = !DILocation(line: 273, column: 5, scope: !614)
!620 = !DILocation(line: 273, column: 11, scope: !614)
!621 = !DILocation(line: 280, column: 9, scope: !591)
!622 = !DILocation(line: 280, column: 15, scope: !591)
!623 = !DILocation(line: 280, column: 20, scope: !591)
!624 = !DILocation(line: 280, column: 7, scope: !591)
!625 = !DILocation(line: 282, column: 17, scope: !591)
!626 = !DILocation(line: 282, column: 3, scope: !591)
!627 = !DILocation(line: 283, column: 7, scope: !628)
!628 = distinct !DILexicalBlock(scope: !591, file: !3, line: 283, column: 7)
!629 = !DILocation(line: 283, column: 13, scope: !628)
!630 = !DILocation(line: 283, column: 7, scope: !591)
!631 = !DILocation(line: 283, column: 26, scope: !628)
!632 = !DILocation(line: 283, column: 30, scope: !628)
!633 = !DILocation(line: 283, column: 34, scope: !628)
!634 = !DILocation(line: 285, column: 15, scope: !591)
!635 = !DILocation(line: 285, column: 7, scope: !591)
!636 = !DILocation(line: 285, column: 6, scope: !591)
!637 = !DILocation(line: 286, column: 15, scope: !591)
!638 = !DILocation(line: 286, column: 7, scope: !591)
!639 = !DILocation(line: 286, column: 6, scope: !591)
!640 = !DILocation(line: 288, column: 7, scope: !641)
!641 = distinct !DILexicalBlock(scope: !591, file: !3, line: 288, column: 7)
!642 = !DILocation(line: 288, column: 10, scope: !641)
!643 = !DILocation(line: 288, column: 7, scope: !591)
!644 = !DILocation(line: 289, column: 9, scope: !645)
!645 = distinct !DILexicalBlock(scope: !646, file: !3, line: 289, column: 9)
!646 = distinct !DILexicalBlock(scope: !641, file: !3, line: 288, column: 15)
!647 = !DILocation(line: 289, column: 12, scope: !645)
!648 = !DILocation(line: 289, column: 9, scope: !646)
!649 = !DILocation(line: 290, column: 7, scope: !650)
!650 = distinct !DILexicalBlock(scope: !645, file: !3, line: 289, column: 17)
!651 = !DILocation(line: 290, column: 11, scope: !650)
!652 = !DILocation(line: 290, column: 15, scope: !650)
!653 = !DILocation(line: 291, column: 14, scope: !650)
!654 = !DILocation(line: 291, column: 7, scope: !650)
!655 = !DILocation(line: 293, column: 14, scope: !656)
!656 = distinct !DILexicalBlock(scope: !645, file: !3, line: 293, column: 14)
!657 = !DILocation(line: 293, column: 20, scope: !656)
!658 = !DILocation(line: 293, column: 14, scope: !645)
!659 = !DILocation(line: 293, column: 33, scope: !656)
!660 = !DILocation(line: 293, column: 37, scope: !656)
!661 = !DILocation(line: 293, column: 41, scope: !656)
!662 = !DILocation(line: 294, column: 10, scope: !656)
!663 = !DILocation(line: 294, column: 14, scope: !656)
!664 = !DILocation(line: 294, column: 18, scope: !656)
!665 = !DILocation(line: 295, column: 8, scope: !646)
!666 = !DILocation(line: 296, column: 5, scope: !646)
!667 = !DILocation(line: 298, column: 19, scope: !668)
!668 = distinct !DILexicalBlock(scope: !641, file: !3, line: 297, column: 9)
!669 = !DILocation(line: 298, column: 22, scope: !668)
!670 = !DILocation(line: 298, column: 29, scope: !668)
!671 = !DILocation(line: 298, column: 35, scope: !668)
!672 = !DILocation(line: 298, column: 40, scope: !668)
!673 = !DILocation(line: 298, column: 26, scope: !668)
!674 = !DILocation(line: 298, column: 46, scope: !668)
!675 = !DILocation(line: 298, column: 5, scope: !668)
!676 = !DILocation(line: 298, column: 9, scope: !668)
!677 = !DILocation(line: 298, column: 17, scope: !668)
!678 = !DILocation(line: 302, column: 3, scope: !591)
!679 = !DILocation(line: 302, column: 9, scope: !591)
!680 = !DILocation(line: 303, column: 7, scope: !681)
!681 = distinct !DILexicalBlock(scope: !591, file: !3, line: 303, column: 7)
!682 = !DILocation(line: 303, column: 7, scope: !591)
!683 = !DILocation(line: 304, column: 13, scope: !684)
!684 = distinct !DILexicalBlock(scope: !681, file: !3, line: 303, column: 12)
!685 = !DILocation(line: 304, column: 16, scope: !684)
!686 = !DILocation(line: 304, column: 5, scope: !684)
!687 = !DILocation(line: 304, column: 11, scope: !684)
!688 = !DILocation(line: 305, column: 9, scope: !684)
!689 = !DILocation(line: 306, column: 5, scope: !684)
!690 = !DILocation(line: 308, column: 10, scope: !691)
!691 = distinct !DILexicalBlock(scope: !692, file: !3, line: 308, column: 9)
!692 = distinct !DILexicalBlock(scope: !681, file: !3, line: 307, column: 9)
!693 = !DILocation(line: 308, column: 9, scope: !692)
!694 = !DILocation(line: 309, column: 12, scope: !695)
!695 = distinct !DILexicalBlock(scope: !696, file: !3, line: 309, column: 11)
!696 = distinct !DILexicalBlock(scope: !691, file: !3, line: 308, column: 18)
!697 = !DILocation(line: 309, column: 11, scope: !696)
!698 = !DILocation(line: 309, column: 27, scope: !695)
!699 = !DILocation(line: 309, column: 20, scope: !695)
!700 = !DILocation(line: 310, column: 11, scope: !696)
!701 = !DILocation(line: 311, column: 11, scope: !702)
!702 = distinct !DILexicalBlock(scope: !696, file: !3, line: 311, column: 11)
!703 = !DILocation(line: 311, column: 17, scope: !702)
!704 = !DILocation(line: 311, column: 11, scope: !696)
!705 = !DILocation(line: 311, column: 34, scope: !702)
!706 = !DILocation(line: 311, column: 30, scope: !702)
!707 = !DILocation(line: 313, column: 7, scope: !696)
!708 = !DILocation(line: 315, column: 11, scope: !709)
!709 = distinct !DILexicalBlock(scope: !691, file: !3, line: 314, column: 11)
!710 = !DILocation(line: 316, column: 11, scope: !711)
!711 = distinct !DILexicalBlock(scope: !709, file: !3, line: 316, column: 11)
!712 = !DILocation(line: 316, column: 17, scope: !711)
!713 = !DILocation(line: 316, column: 11, scope: !709)
!714 = !DILocation(line: 316, column: 34, scope: !711)
!715 = !DILocation(line: 316, column: 30, scope: !711)
!716 = !DILocation(line: 320, column: 20, scope: !591)
!717 = !DILocation(line: 320, column: 24, scope: !591)
!718 = !DILocation(line: 320, column: 32, scope: !591)
!719 = !DILocation(line: 320, column: 3, scope: !591)
!720 = !DILocation(line: 321, column: 10, scope: !591)
!721 = !DILocation(line: 321, column: 3, scope: !591)
!722 = !DILocation(line: 322, column: 3, scope: !591)
!723 = distinct !DISubprogram(name: "decDigitsFromDPD", scope: !3, file: !3, line: 788, type: !724, scopeLine: 788, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!724 = !DISubroutineType(types: !725)
!725 = !{null, !594, !726, !24}
!726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!727 = !DILocalVariable(name: "dn", arg: 1, scope: !723, file: !3, line: 788, type: !594)
!728 = !DILocation(line: 788, column: 34, scope: !723)
!729 = !DILocalVariable(name: "sour", arg: 2, scope: !723, file: !3, line: 788, type: !726)
!730 = !DILocation(line: 788, column: 50, scope: !723)
!731 = !DILocalVariable(name: "declets", arg: 3, scope: !723, file: !3, line: 788, type: !24)
!732 = !DILocation(line: 788, column: 60, scope: !723)
!733 = !DILocalVariable(name: "dpd", scope: !723, file: !3, line: 790, type: !19)
!734 = !DILocation(line: 790, column: 8, scope: !723)
!735 = !DILocalVariable(name: "n", scope: !723, file: !3, line: 791, type: !24)
!736 = !DILocation(line: 791, column: 7, scope: !723)
!737 = !DILocalVariable(name: "uout", scope: !723, file: !3, line: 792, type: !430)
!738 = !DILocation(line: 792, column: 9, scope: !723)
!739 = !DILocation(line: 792, column: 14, scope: !723)
!740 = !DILocation(line: 792, column: 18, scope: !723)
!741 = !DILocalVariable(name: "last", scope: !723, file: !3, line: 793, type: !430)
!742 = !DILocation(line: 793, column: 9, scope: !723)
!743 = !DILocation(line: 793, column: 14, scope: !723)
!744 = !DILocalVariable(name: "uin", scope: !723, file: !3, line: 794, type: !726)
!745 = !DILocation(line: 794, column: 15, scope: !723)
!746 = !DILocation(line: 794, column: 19, scope: !723)
!747 = !DILocalVariable(name: "uoff", scope: !723, file: !3, line: 795, type: !19)
!748 = !DILocation(line: 795, column: 8, scope: !723)
!749 = !DILocation(line: 808, column: 10, scope: !750)
!750 = distinct !DILexicalBlock(scope: !723, file: !3, line: 808, column: 3)
!751 = !DILocation(line: 808, column: 17, scope: !750)
!752 = !DILocation(line: 808, column: 9, scope: !750)
!753 = !DILocation(line: 808, column: 8, scope: !750)
!754 = !DILocation(line: 808, column: 21, scope: !755)
!755 = distinct !DILexicalBlock(scope: !750, file: !3, line: 808, column: 3)
!756 = !DILocation(line: 808, column: 22, scope: !755)
!757 = !DILocation(line: 808, column: 3, scope: !750)
!758 = !DILocation(line: 809, column: 10, scope: !759)
!759 = distinct !DILexicalBlock(scope: !755, file: !3, line: 808, column: 32)
!760 = !DILocation(line: 809, column: 9, scope: !759)
!761 = !DILocation(line: 809, column: 15, scope: !759)
!762 = !DILocation(line: 809, column: 13, scope: !759)
!763 = !DILocation(line: 809, column: 8, scope: !759)
!764 = !DILocation(line: 810, column: 9, scope: !759)
!765 = !DILocation(line: 811, column: 9, scope: !766)
!766 = distinct !DILexicalBlock(scope: !759, file: !3, line: 811, column: 9)
!767 = !DILocation(line: 811, column: 13, scope: !766)
!768 = !DILocation(line: 811, column: 9, scope: !759)
!769 = !DILocation(line: 812, column: 10, scope: !770)
!770 = distinct !DILexicalBlock(scope: !766, file: !3, line: 811, column: 18)
!771 = !DILocation(line: 813, column: 11, scope: !770)
!772 = !DILocation(line: 814, column: 13, scope: !770)
!773 = !DILocation(line: 814, column: 12, scope: !770)
!774 = !DILocation(line: 814, column: 22, scope: !770)
!775 = !DILocation(line: 814, column: 21, scope: !770)
!776 = !DILocation(line: 814, column: 16, scope: !770)
!777 = !DILocation(line: 814, column: 10, scope: !770)
!778 = !DILocation(line: 815, column: 7, scope: !770)
!779 = !DILocation(line: 816, column: 8, scope: !759)
!780 = !DILocation(line: 819, column: 9, scope: !781)
!781 = distinct !DILexicalBlock(scope: !759, file: !3, line: 819, column: 9)
!782 = !DILocation(line: 819, column: 12, scope: !781)
!783 = !DILocation(line: 819, column: 9, scope: !759)
!784 = !DILocation(line: 819, column: 18, scope: !781)
!785 = !DILocation(line: 819, column: 22, scope: !781)
!786 = !DILocation(line: 819, column: 17, scope: !781)
!787 = !DILocation(line: 821, column: 21, scope: !788)
!788 = distinct !DILexicalBlock(scope: !781, file: !3, line: 820, column: 11)
!789 = !DILocation(line: 821, column: 13, scope: !788)
!790 = !DILocation(line: 821, column: 8, scope: !788)
!791 = !DILocation(line: 821, column: 12, scope: !788)
!792 = !DILocation(line: 822, column: 12, scope: !788)
!793 = !DILocation(line: 822, column: 11, scope: !788)
!794 = !DILocation(line: 824, column: 9, scope: !759)
!795 = !DILocation(line: 825, column: 5, scope: !759)
!796 = !DILocation(line: 808, column: 28, scope: !755)
!797 = !DILocation(line: 808, column: 3, scope: !755)
!798 = distinct !{!798, !757, !799}
!799 = !DILocation(line: 825, column: 5, scope: !750)
!800 = !DILocation(line: 875, column: 15, scope: !723)
!801 = !DILocation(line: 875, column: 20, scope: !723)
!802 = !DILocation(line: 875, column: 24, scope: !723)
!803 = !DILocation(line: 875, column: 19, scope: !723)
!804 = !DILocation(line: 875, column: 28, scope: !723)
!805 = !DILocation(line: 875, column: 36, scope: !723)
!806 = !DILocation(line: 875, column: 14, scope: !723)
!807 = !DILocation(line: 875, column: 3, scope: !723)
!808 = !DILocation(line: 875, column: 7, scope: !723)
!809 = !DILocation(line: 875, column: 13, scope: !723)
!810 = !DILocation(line: 878, column: 8, scope: !811)
!811 = distinct !DILexicalBlock(scope: !723, file: !3, line: 878, column: 7)
!812 = !DILocation(line: 878, column: 7, scope: !811)
!813 = !DILocation(line: 878, column: 12, scope: !811)
!814 = !DILocation(line: 878, column: 7, scope: !723)
!815 = !DILocation(line: 878, column: 17, scope: !811)
!816 = !DILocation(line: 879, column: 3, scope: !723)
!817 = !DILocation(line: 879, column: 7, scope: !723)
!818 = !DILocation(line: 879, column: 13, scope: !723)
!819 = !DILocation(line: 881, column: 8, scope: !820)
!820 = distinct !DILexicalBlock(scope: !723, file: !3, line: 881, column: 7)
!821 = !DILocation(line: 881, column: 7, scope: !820)
!822 = !DILocation(line: 881, column: 12, scope: !820)
!823 = !DILocation(line: 881, column: 7, scope: !723)
!824 = !DILocation(line: 881, column: 18, scope: !820)
!825 = !DILocation(line: 882, column: 3, scope: !723)
!826 = !DILocation(line: 882, column: 7, scope: !723)
!827 = !DILocation(line: 882, column: 13, scope: !723)
!828 = !DILocation(line: 892, column: 3, scope: !723)
!829 = !DILocation(line: 893, column: 3, scope: !723)
!830 = distinct !DISubprogram(name: "__dpd64ToEngString", scope: !3, file: !3, line: 339, type: !831, scopeLine: 339, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!831 = !DISubroutineType(types: !832)
!832 = !{!833, !595, !833}
!833 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !28, size: 64)
!834 = !DILocalVariable(name: "d64", arg: 1, scope: !830, file: !3, line: 339, type: !595)
!835 = !DILocation(line: 339, column: 46, scope: !830)
!836 = !DILocalVariable(name: "string", arg: 2, scope: !830, file: !3, line: 339, type: !833)
!837 = !DILocation(line: 339, column: 57, scope: !830)
!838 = !DILocalVariable(name: "dn", scope: !830, file: !3, line: 340, type: !83)
!839 = !DILocation(line: 340, column: 13, scope: !830)
!840 = !DILocation(line: 341, column: 21, scope: !830)
!841 = !DILocation(line: 341, column: 3, scope: !830)
!842 = !DILocation(line: 342, column: 29, scope: !830)
!843 = !DILocation(line: 342, column: 3, scope: !830)
!844 = !DILocation(line: 343, column: 10, scope: !830)
!845 = !DILocation(line: 343, column: 3, scope: !830)
!846 = distinct !DISubprogram(name: "__dpd64ToString", scope: !3, file: !3, line: 346, type: !831, scopeLine: 346, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!847 = !DILocalVariable(name: "d64", arg: 1, scope: !846, file: !3, line: 346, type: !595)
!848 = !DILocation(line: 346, column: 43, scope: !846)
!849 = !DILocalVariable(name: "string", arg: 2, scope: !846, file: !3, line: 346, type: !833)
!850 = !DILocation(line: 346, column: 54, scope: !846)
!851 = !DILocalVariable(name: "msd", scope: !846, file: !3, line: 347, type: !19)
!852 = !DILocation(line: 347, column: 8, scope: !846)
!853 = !DILocalVariable(name: "exp", scope: !846, file: !3, line: 348, type: !24)
!854 = !DILocation(line: 348, column: 8, scope: !846)
!855 = !DILocalVariable(name: "comb", scope: !846, file: !3, line: 349, type: !19)
!856 = !DILocation(line: 349, column: 8, scope: !846)
!857 = !DILocalVariable(name: "cstart", scope: !846, file: !3, line: 350, type: !833)
!858 = !DILocation(line: 350, column: 9, scope: !846)
!859 = !DILocalVariable(name: "c", scope: !846, file: !3, line: 351, type: !833)
!860 = !DILocation(line: 351, column: 9, scope: !846)
!861 = !DILocalVariable(name: "u", scope: !846, file: !3, line: 352, type: !862)
!862 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64)
!863 = !DILocation(line: 352, column: 16, scope: !846)
!864 = !DILocalVariable(name: "s", scope: !846, file: !3, line: 353, type: !833)
!865 = !DILocation(line: 353, column: 9, scope: !846)
!866 = !DILocalVariable(name: "t", scope: !846, file: !3, line: 353, type: !833)
!867 = !DILocation(line: 353, column: 13, scope: !846)
!868 = !DILocalVariable(name: "dpd", scope: !846, file: !3, line: 354, type: !24)
!869 = !DILocation(line: 354, column: 8, scope: !846)
!870 = !DILocalVariable(name: "pre", scope: !846, file: !3, line: 355, type: !24)
!871 = !DILocation(line: 355, column: 8, scope: !846)
!872 = !DILocalVariable(name: "e", scope: !846, file: !3, line: 355, type: !24)
!873 = !DILocation(line: 355, column: 13, scope: !846)
!874 = !DILocalVariable(name: "uiwork", scope: !846, file: !3, line: 356, type: !19)
!875 = !DILocation(line: 356, column: 8, scope: !846)
!876 = !DILocalVariable(name: "sourar", scope: !846, file: !3, line: 358, type: !127)
!877 = !DILocation(line: 358, column: 8, scope: !846)
!878 = !DILocation(line: 364, column: 12, scope: !879)
!879 = distinct !DILexicalBlock(scope: !880, file: !3, line: 363, column: 18)
!880 = distinct !DILexicalBlock(scope: !846, file: !3, line: 363, column: 7)
!881 = !DILocation(line: 364, column: 5, scope: !879)
!882 = !DILocation(line: 364, column: 11, scope: !879)
!883 = !DILocation(line: 365, column: 12, scope: !879)
!884 = !DILocation(line: 365, column: 5, scope: !879)
!885 = !DILocation(line: 365, column: 11, scope: !879)
!886 = !DILocation(line: 372, column: 5, scope: !846)
!887 = !DILocation(line: 372, column: 4, scope: !846)
!888 = !DILocation(line: 373, column: 13, scope: !889)
!889 = distinct !DILexicalBlock(scope: !846, file: !3, line: 373, column: 7)
!890 = !DILocation(line: 373, column: 20, scope: !889)
!891 = !DILocation(line: 373, column: 7, scope: !846)
!892 = !DILocation(line: 373, column: 26, scope: !889)
!893 = !DILocation(line: 373, column: 28, scope: !889)
!894 = !DILocation(line: 373, column: 24, scope: !889)
!895 = !DILocation(line: 375, column: 9, scope: !846)
!896 = !DILocation(line: 375, column: 15, scope: !846)
!897 = !DILocation(line: 375, column: 20, scope: !846)
!898 = !DILocation(line: 375, column: 7, scope: !846)
!899 = !DILocation(line: 376, column: 15, scope: !846)
!900 = !DILocation(line: 376, column: 7, scope: !846)
!901 = !DILocation(line: 376, column: 6, scope: !846)
!902 = !DILocation(line: 377, column: 15, scope: !846)
!903 = !DILocation(line: 377, column: 7, scope: !846)
!904 = !DILocation(line: 377, column: 6, scope: !846)
!905 = !DILocation(line: 379, column: 7, scope: !906)
!906 = distinct !DILexicalBlock(scope: !846, file: !3, line: 379, column: 7)
!907 = !DILocation(line: 379, column: 10, scope: !906)
!908 = !DILocation(line: 379, column: 7, scope: !846)
!909 = !DILocation(line: 380, column: 9, scope: !910)
!910 = distinct !DILexicalBlock(scope: !911, file: !3, line: 380, column: 9)
!911 = distinct !DILexicalBlock(scope: !906, file: !3, line: 379, column: 15)
!912 = !DILocation(line: 380, column: 12, scope: !910)
!913 = !DILocation(line: 380, column: 9, scope: !911)
!914 = !DILocation(line: 381, column: 14, scope: !915)
!915 = distinct !DILexicalBlock(scope: !910, file: !3, line: 380, column: 17)
!916 = !DILocation(line: 381, column: 7, scope: !915)
!917 = !DILocation(line: 382, column: 14, scope: !915)
!918 = !DILocation(line: 382, column: 15, scope: !915)
!919 = !DILocation(line: 382, column: 7, scope: !915)
!920 = !DILocation(line: 383, column: 14, scope: !915)
!921 = !DILocation(line: 383, column: 7, scope: !915)
!922 = !DILocation(line: 385, column: 9, scope: !923)
!923 = distinct !DILexicalBlock(scope: !911, file: !3, line: 385, column: 9)
!924 = !DILocation(line: 385, column: 15, scope: !923)
!925 = !DILocation(line: 385, column: 9, scope: !911)
!926 = !DILocation(line: 385, column: 30, scope: !923)
!927 = !DILocation(line: 385, column: 32, scope: !923)
!928 = !DILocation(line: 385, column: 28, scope: !923)
!929 = !DILocation(line: 386, column: 12, scope: !911)
!930 = !DILocation(line: 386, column: 5, scope: !911)
!931 = !DILocation(line: 387, column: 6, scope: !911)
!932 = !DILocation(line: 388, column: 9, scope: !933)
!933 = distinct !DILexicalBlock(scope: !911, file: !3, line: 388, column: 9)
!934 = !DILocation(line: 388, column: 15, scope: !933)
!935 = !DILocation(line: 388, column: 19, scope: !933)
!936 = !DILocation(line: 388, column: 23, scope: !933)
!937 = !DILocation(line: 388, column: 29, scope: !933)
!938 = !DILocation(line: 388, column: 41, scope: !933)
!939 = !DILocation(line: 388, column: 9, scope: !911)
!940 = !DILocation(line: 388, column: 53, scope: !933)
!941 = !DILocation(line: 388, column: 46, scope: !933)
!942 = !DILocation(line: 390, column: 8, scope: !911)
!943 = !DILocation(line: 390, column: 15, scope: !911)
!944 = !DILocation(line: 391, column: 5, scope: !911)
!945 = !DILocation(line: 392, column: 14, scope: !906)
!946 = !DILocation(line: 392, column: 17, scope: !906)
!947 = !DILocation(line: 392, column: 24, scope: !906)
!948 = !DILocation(line: 392, column: 30, scope: !906)
!949 = !DILocation(line: 392, column: 35, scope: !906)
!950 = !DILocation(line: 392, column: 21, scope: !906)
!951 = !DILocation(line: 392, column: 41, scope: !906)
!952 = !DILocation(line: 392, column: 12, scope: !906)
!953 = !DILocation(line: 395, column: 10, scope: !846)
!954 = !DILocation(line: 395, column: 9, scope: !846)
!955 = !DILocation(line: 396, column: 7, scope: !956)
!956 = distinct !DILexicalBlock(scope: !846, file: !3, line: 396, column: 7)
!957 = !DILocation(line: 396, column: 7, scope: !846)
!958 = !DILocation(line: 396, column: 27, scope: !956)
!959 = !DILocation(line: 396, column: 21, scope: !956)
!960 = !DILocation(line: 396, column: 20, scope: !956)
!961 = !DILocation(line: 396, column: 17, scope: !956)
!962 = !DILocation(line: 396, column: 14, scope: !956)
!963 = !DILocation(line: 396, column: 16, scope: !956)
!964 = !DILocation(line: 396, column: 12, scope: !956)
!965 = !DILocation(line: 410, column: 8, scope: !846)
!966 = !DILocation(line: 410, column: 14, scope: !846)
!967 = !DILocation(line: 410, column: 18, scope: !846)
!968 = !DILocation(line: 410, column: 6, scope: !846)
!969 = !DILocation(line: 411, column: 3, scope: !846)
!970 = !DILocation(line: 411, column: 3, scope: !971)
!971 = distinct !DILexicalBlock(scope: !846, file: !3, line: 411, column: 3)
!972 = !DILocation(line: 411, column: 3, scope: !973)
!973 = distinct !DILexicalBlock(scope: !971, file: !3, line: 411, column: 3)
!974 = !DILocation(line: 411, column: 3, scope: !975)
!975 = distinct !DILexicalBlock(scope: !971, file: !3, line: 411, column: 3)
!976 = !DILocation(line: 411, column: 3, scope: !977)
!977 = distinct !DILexicalBlock(scope: !975, file: !3, line: 411, column: 3)
!978 = !DILocation(line: 412, column: 9, scope: !846)
!979 = !DILocation(line: 412, column: 15, scope: !846)
!980 = !DILocation(line: 412, column: 21, scope: !846)
!981 = !DILocation(line: 412, column: 29, scope: !846)
!982 = !DILocation(line: 412, column: 35, scope: !846)
!983 = !DILocation(line: 412, column: 26, scope: !846)
!984 = !DILocation(line: 412, column: 6, scope: !846)
!985 = !DILocation(line: 413, column: 3, scope: !846)
!986 = !DILocation(line: 413, column: 3, scope: !987)
!987 = distinct !DILexicalBlock(scope: !846, file: !3, line: 413, column: 3)
!988 = !DILocation(line: 413, column: 3, scope: !989)
!989 = distinct !DILexicalBlock(scope: !987, file: !3, line: 413, column: 3)
!990 = !DILocation(line: 413, column: 3, scope: !991)
!991 = distinct !DILexicalBlock(scope: !987, file: !3, line: 413, column: 3)
!992 = !DILocation(line: 413, column: 3, scope: !993)
!993 = distinct !DILexicalBlock(scope: !991, file: !3, line: 413, column: 3)
!994 = !DILocation(line: 414, column: 8, scope: !846)
!995 = !DILocation(line: 414, column: 14, scope: !846)
!996 = !DILocation(line: 414, column: 19, scope: !846)
!997 = !DILocation(line: 414, column: 6, scope: !846)
!998 = !DILocation(line: 415, column: 3, scope: !846)
!999 = !DILocation(line: 415, column: 3, scope: !1000)
!1000 = distinct !DILexicalBlock(scope: !846, file: !3, line: 415, column: 3)
!1001 = !DILocation(line: 415, column: 3, scope: !1002)
!1002 = distinct !DILexicalBlock(scope: !1000, file: !3, line: 415, column: 3)
!1003 = !DILocation(line: 415, column: 3, scope: !1004)
!1004 = distinct !DILexicalBlock(scope: !1000, file: !3, line: 415, column: 3)
!1005 = !DILocation(line: 415, column: 3, scope: !1006)
!1006 = distinct !DILexicalBlock(scope: !1004, file: !3, line: 415, column: 3)
!1007 = !DILocation(line: 416, column: 8, scope: !846)
!1008 = !DILocation(line: 416, column: 14, scope: !846)
!1009 = !DILocation(line: 416, column: 19, scope: !846)
!1010 = !DILocation(line: 416, column: 6, scope: !846)
!1011 = !DILocation(line: 417, column: 3, scope: !846)
!1012 = !DILocation(line: 417, column: 3, scope: !1013)
!1013 = distinct !DILexicalBlock(scope: !846, file: !3, line: 417, column: 3)
!1014 = !DILocation(line: 417, column: 3, scope: !1015)
!1015 = distinct !DILexicalBlock(scope: !1013, file: !3, line: 417, column: 3)
!1016 = !DILocation(line: 417, column: 3, scope: !1017)
!1017 = distinct !DILexicalBlock(scope: !1013, file: !3, line: 417, column: 3)
!1018 = !DILocation(line: 417, column: 3, scope: !1019)
!1019 = distinct !DILexicalBlock(scope: !1017, file: !3, line: 417, column: 3)
!1020 = !DILocation(line: 418, column: 8, scope: !846)
!1021 = !DILocation(line: 418, column: 15, scope: !846)
!1022 = !DILocation(line: 418, column: 6, scope: !846)
!1023 = !DILocation(line: 419, column: 3, scope: !846)
!1024 = !DILocation(line: 419, column: 3, scope: !1025)
!1025 = distinct !DILexicalBlock(scope: !846, file: !3, line: 419, column: 3)
!1026 = !DILocation(line: 419, column: 3, scope: !1027)
!1027 = distinct !DILexicalBlock(scope: !1025, file: !3, line: 419, column: 3)
!1028 = !DILocation(line: 419, column: 3, scope: !1029)
!1029 = distinct !DILexicalBlock(scope: !1025, file: !3, line: 419, column: 3)
!1030 = !DILocation(line: 419, column: 3, scope: !1031)
!1031 = distinct !DILexicalBlock(scope: !1029, file: !3, line: 419, column: 3)
!1032 = !DILocation(line: 421, column: 7, scope: !1033)
!1033 = distinct !DILexicalBlock(scope: !846, file: !3, line: 421, column: 7)
!1034 = !DILocation(line: 421, column: 10, scope: !1033)
!1035 = !DILocation(line: 421, column: 8, scope: !1033)
!1036 = !DILocation(line: 421, column: 7, scope: !846)
!1037 = !DILocation(line: 421, column: 20, scope: !1033)
!1038 = !DILocation(line: 421, column: 22, scope: !1033)
!1039 = !DILocation(line: 421, column: 18, scope: !1033)
!1040 = !DILocation(line: 423, column: 7, scope: !1041)
!1041 = distinct !DILexicalBlock(scope: !846, file: !3, line: 423, column: 7)
!1042 = !DILocation(line: 423, column: 10, scope: !1041)
!1043 = !DILocation(line: 423, column: 7, scope: !846)
!1044 = !DILocation(line: 424, column: 6, scope: !1045)
!1045 = distinct !DILexicalBlock(scope: !1041, file: !3, line: 423, column: 15)
!1046 = !DILocation(line: 424, column: 7, scope: !1045)
!1047 = !DILocation(line: 425, column: 12, scope: !1045)
!1048 = !DILocation(line: 425, column: 5, scope: !1045)
!1049 = !DILocation(line: 429, column: 4, scope: !846)
!1050 = !DILocation(line: 430, column: 7, scope: !846)
!1051 = !DILocation(line: 430, column: 9, scope: !846)
!1052 = !DILocation(line: 430, column: 8, scope: !846)
!1053 = !DILocation(line: 430, column: 16, scope: !846)
!1054 = !DILocation(line: 430, column: 15, scope: !846)
!1055 = !DILocation(line: 430, column: 6, scope: !846)
!1056 = !DILocation(line: 432, column: 7, scope: !1057)
!1057 = distinct !DILexicalBlock(scope: !846, file: !3, line: 432, column: 7)
!1058 = !DILocation(line: 432, column: 10, scope: !1057)
!1059 = !DILocation(line: 432, column: 13, scope: !1057)
!1060 = !DILocation(line: 432, column: 16, scope: !1057)
!1061 = !DILocation(line: 432, column: 19, scope: !1057)
!1062 = !DILocation(line: 432, column: 7, scope: !846)
!1063 = !DILocation(line: 433, column: 7, scope: !1064)
!1064 = distinct !DILexicalBlock(scope: !1057, file: !3, line: 432, column: 24)
!1065 = !DILocation(line: 433, column: 10, scope: !1064)
!1066 = !DILocation(line: 433, column: 6, scope: !1064)
!1067 = !DILocation(line: 434, column: 8, scope: !1064)
!1068 = !DILocation(line: 435, column: 5, scope: !1064)
!1069 = !DILocation(line: 438, column: 5, scope: !846)
!1070 = !DILocation(line: 438, column: 6, scope: !846)
!1071 = !DILocation(line: 438, column: 4, scope: !846)
!1072 = !DILocation(line: 439, column: 7, scope: !1073)
!1073 = distinct !DILexicalBlock(scope: !846, file: !3, line: 439, column: 7)
!1074 = !DILocation(line: 439, column: 10, scope: !1073)
!1075 = !DILocation(line: 439, column: 7, scope: !846)
!1076 = !DILocalVariable(name: "dotat", scope: !1077, file: !3, line: 440, type: !833)
!1077 = distinct !DILexicalBlock(scope: !1073, file: !3, line: 439, column: 14)
!1078 = !DILocation(line: 440, column: 11, scope: !1077)
!1079 = !DILocation(line: 440, column: 17, scope: !1077)
!1080 = !DILocation(line: 440, column: 24, scope: !1077)
!1081 = !DILocation(line: 440, column: 23, scope: !1077)
!1082 = !DILocation(line: 441, column: 9, scope: !1083)
!1083 = distinct !DILexicalBlock(scope: !1077, file: !3, line: 441, column: 9)
!1084 = !DILocation(line: 441, column: 15, scope: !1083)
!1085 = !DILocation(line: 441, column: 14, scope: !1083)
!1086 = !DILocation(line: 441, column: 9, scope: !1077)
!1087 = !DILocation(line: 442, column: 9, scope: !1088)
!1088 = distinct !DILexicalBlock(scope: !1083, file: !3, line: 441, column: 18)
!1089 = !DILocation(line: 442, column: 8, scope: !1088)
!1090 = !DILocation(line: 443, column: 7, scope: !1088)
!1091 = !DILocation(line: 443, column: 14, scope: !1092)
!1092 = distinct !DILexicalBlock(scope: !1093, file: !3, line: 443, column: 7)
!1093 = distinct !DILexicalBlock(scope: !1088, file: !3, line: 443, column: 7)
!1094 = !DILocation(line: 443, column: 17, scope: !1092)
!1095 = !DILocation(line: 443, column: 15, scope: !1092)
!1096 = !DILocation(line: 443, column: 7, scope: !1093)
!1097 = !DILocation(line: 443, column: 38, scope: !1092)
!1098 = !DILocation(line: 443, column: 37, scope: !1092)
!1099 = !DILocation(line: 443, column: 35, scope: !1092)
!1100 = !DILocation(line: 443, column: 36, scope: !1092)
!1101 = !DILocation(line: 443, column: 34, scope: !1092)
!1102 = !DILocation(line: 443, column: 25, scope: !1092)
!1103 = !DILocation(line: 443, column: 30, scope: !1092)
!1104 = !DILocation(line: 443, column: 7, scope: !1092)
!1105 = distinct !{!1105, !1096, !1106}
!1106 = !DILocation(line: 443, column: 38, scope: !1093)
!1107 = !DILocation(line: 444, column: 8, scope: !1088)
!1108 = !DILocation(line: 444, column: 9, scope: !1088)
!1109 = !DILocation(line: 445, column: 8, scope: !1088)
!1110 = !DILocation(line: 446, column: 7, scope: !1088)
!1111 = !DILocation(line: 450, column: 9, scope: !1112)
!1112 = distinct !DILexicalBlock(scope: !1077, file: !3, line: 450, column: 9)
!1113 = !DILocation(line: 450, column: 10, scope: !1112)
!1114 = !DILocation(line: 450, column: 9, scope: !1077)
!1115 = !DILocation(line: 451, column: 9, scope: !1116)
!1116 = distinct !DILexicalBlock(scope: !1112, file: !3, line: 450, column: 15)
!1117 = !DILocation(line: 451, column: 11, scope: !1116)
!1118 = !DILocation(line: 452, column: 9, scope: !1116)
!1119 = !DILocation(line: 452, column: 11, scope: !1116)
!1120 = !DILocation(line: 453, column: 11, scope: !1121)
!1121 = distinct !DILexicalBlock(scope: !1116, file: !3, line: 453, column: 11)
!1122 = !DILocation(line: 453, column: 12, scope: !1121)
!1123 = !DILocation(line: 453, column: 11, scope: !1116)
!1124 = !DILocation(line: 454, column: 4, scope: !1125)
!1125 = distinct !DILexicalBlock(scope: !1121, file: !3, line: 453, column: 16)
!1126 = !DILocation(line: 454, column: 5, scope: !1125)
!1127 = !DILocation(line: 454, column: 8, scope: !1125)
!1128 = !DILocation(line: 455, column: 5, scope: !1125)
!1129 = !DILocation(line: 455, column: 4, scope: !1125)
!1130 = !DILocation(line: 455, column: 3, scope: !1125)
!1131 = !DILocation(line: 456, column: 2, scope: !1125)
!1132 = !DILocation(line: 457, column: 19, scope: !1116)
!1133 = !DILocation(line: 457, column: 20, scope: !1116)
!1134 = !DILocation(line: 457, column: 10, scope: !1116)
!1135 = !DILocation(line: 457, column: 8, scope: !1116)
!1136 = !DILocation(line: 458, column: 14, scope: !1116)
!1137 = !DILocation(line: 458, column: 17, scope: !1116)
!1138 = !DILocation(line: 458, column: 18, scope: !1116)
!1139 = !DILocation(line: 458, column: 22, scope: !1116)
!1140 = !DILocation(line: 458, column: 21, scope: !1116)
!1141 = !DILocation(line: 458, column: 20, scope: !1116)
!1142 = !DILocation(line: 458, column: 7, scope: !1116)
!1143 = !DILocation(line: 459, column: 11, scope: !1116)
!1144 = !DILocation(line: 459, column: 10, scope: !1116)
!1145 = !DILocation(line: 459, column: 8, scope: !1116)
!1146 = !DILocation(line: 460, column: 7, scope: !1116)
!1147 = !DILocation(line: 461, column: 6, scope: !1077)
!1148 = !DILocation(line: 461, column: 7, scope: !1077)
!1149 = !DILocation(line: 463, column: 12, scope: !1077)
!1150 = !DILocation(line: 463, column: 5, scope: !1077)
!1151 = !DILocation(line: 467, column: 5, scope: !846)
!1152 = !DILocation(line: 467, column: 6, scope: !846)
!1153 = !DILocation(line: 467, column: 9, scope: !846)
!1154 = !DILocation(line: 467, column: 8, scope: !846)
!1155 = !DILocation(line: 467, column: 4, scope: !846)
!1156 = !DILocation(line: 468, column: 5, scope: !846)
!1157 = !DILocation(line: 468, column: 6, scope: !846)
!1158 = !DILocation(line: 468, column: 9, scope: !846)
!1159 = !DILocation(line: 469, column: 3, scope: !846)
!1160 = !DILocation(line: 469, column: 10, scope: !1161)
!1161 = distinct !DILexicalBlock(scope: !1162, file: !3, line: 469, column: 3)
!1162 = distinct !DILexicalBlock(scope: !846, file: !3, line: 469, column: 3)
!1163 = !DILocation(line: 469, column: 13, scope: !1161)
!1164 = !DILocation(line: 469, column: 11, scope: !1161)
!1165 = !DILocation(line: 469, column: 3, scope: !1162)
!1166 = !DILocation(line: 469, column: 35, scope: !1161)
!1167 = !DILocation(line: 469, column: 34, scope: !1161)
!1168 = !DILocation(line: 469, column: 32, scope: !1161)
!1169 = !DILocation(line: 469, column: 33, scope: !1161)
!1170 = !DILocation(line: 469, column: 31, scope: !1161)
!1171 = !DILocation(line: 469, column: 22, scope: !1161)
!1172 = !DILocation(line: 469, column: 27, scope: !1161)
!1173 = !DILocation(line: 469, column: 3, scope: !1161)
!1174 = distinct !{!1174, !1165, !1175}
!1175 = !DILocation(line: 469, column: 35, scope: !1162)
!1176 = !DILocation(line: 470, column: 5, scope: !846)
!1177 = !DILocation(line: 470, column: 4, scope: !846)
!1178 = !DILocation(line: 471, column: 5, scope: !846)
!1179 = !DILocation(line: 471, column: 7, scope: !846)
!1180 = !DILocation(line: 472, column: 5, scope: !846)
!1181 = !DILocation(line: 472, column: 7, scope: !846)
!1182 = !DILocation(line: 473, column: 3, scope: !846)
!1183 = !DILocation(line: 473, column: 10, scope: !1184)
!1184 = distinct !DILexicalBlock(scope: !1185, file: !3, line: 473, column: 3)
!1185 = distinct !DILexicalBlock(scope: !846, file: !3, line: 473, column: 3)
!1186 = !DILocation(line: 473, column: 13, scope: !1184)
!1187 = !DILocation(line: 473, column: 3, scope: !1185)
!1188 = !DILocation(line: 473, column: 26, scope: !1184)
!1189 = !DILocation(line: 473, column: 28, scope: !1184)
!1190 = !DILocation(line: 473, column: 24, scope: !1184)
!1191 = !DILocation(line: 473, column: 20, scope: !1184)
!1192 = !DILocation(line: 473, column: 3, scope: !1184)
!1193 = distinct !{!1193, !1187, !1194}
!1194 = !DILocation(line: 473, column: 29, scope: !1185)
!1195 = !DILocation(line: 475, column: 10, scope: !846)
!1196 = !DILocation(line: 475, column: 3, scope: !846)
!1197 = !DILocation(line: 476, column: 3, scope: !846)
!1198 = distinct !DISubprogram(name: "__dpd64FromString", scope: !3, file: !3, line: 493, type: !1199, scopeLine: 494, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!1199 = !DISubroutineType(types: !1200)
!1200 = !{!72, !72, !1201, !94}
!1201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1202, size: 64)
!1202 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !28)
!1203 = !DILocalVariable(name: "result", arg: 1, scope: !1198, file: !3, line: 493, type: !72)
!1204 = !DILocation(line: 493, column: 44, scope: !1198)
!1205 = !DILocalVariable(name: "string", arg: 2, scope: !1198, file: !3, line: 493, type: !1201)
!1206 = !DILocation(line: 493, column: 64, scope: !1198)
!1207 = !DILocalVariable(name: "set", arg: 3, scope: !1198, file: !3, line: 494, type: !94)
!1208 = !DILocation(line: 494, column: 17, scope: !1198)
!1209 = !DILocalVariable(name: "dc", scope: !1198, file: !3, line: 495, type: !95)
!1210 = !DILocation(line: 495, column: 14, scope: !1198)
!1211 = !DILocalVariable(name: "dn", scope: !1198, file: !3, line: 496, type: !83)
!1212 = !DILocation(line: 496, column: 13, scope: !1198)
!1213 = !DILocation(line: 498, column: 3, scope: !1198)
!1214 = !DILocation(line: 499, column: 12, scope: !1198)
!1215 = !DILocation(line: 499, column: 17, scope: !1198)
!1216 = !DILocation(line: 499, column: 6, scope: !1198)
!1217 = !DILocation(line: 499, column: 11, scope: !1198)
!1218 = !DILocation(line: 501, column: 28, scope: !1198)
!1219 = !DILocation(line: 501, column: 3, scope: !1198)
!1220 = !DILocation(line: 503, column: 23, scope: !1198)
!1221 = !DILocation(line: 503, column: 3, scope: !1198)
!1222 = !DILocation(line: 504, column: 10, scope: !1223)
!1223 = distinct !DILexicalBlock(scope: !1198, file: !3, line: 504, column: 7)
!1224 = !DILocation(line: 504, column: 16, scope: !1223)
!1225 = !DILocation(line: 504, column: 7, scope: !1198)
!1226 = !DILocation(line: 505, column: 25, scope: !1227)
!1227 = distinct !DILexicalBlock(scope: !1223, file: !3, line: 504, column: 21)
!1228 = !DILocation(line: 505, column: 33, scope: !1227)
!1229 = !DILocation(line: 505, column: 5, scope: !1227)
!1230 = !DILocation(line: 506, column: 5, scope: !1227)
!1231 = !DILocation(line: 507, column: 10, scope: !1198)
!1232 = !DILocation(line: 507, column: 3, scope: !1198)
!1233 = distinct !DISubprogram(name: "decimal64IsCanonical", scope: !3, file: !3, line: 516, type: !1234, scopeLine: 516, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!1234 = !DISubroutineType(types: !1235)
!1235 = !{!19, !595}
!1236 = !DILocalVariable(name: "d64", arg: 1, scope: !1233, file: !3, line: 516, type: !595)
!1237 = !DILocation(line: 516, column: 44, scope: !1233)
!1238 = !DILocalVariable(name: "dn", scope: !1233, file: !3, line: 517, type: !83)
!1239 = !DILocation(line: 517, column: 13, scope: !1233)
!1240 = !DILocalVariable(name: "canon", scope: !1233, file: !3, line: 518, type: !73)
!1241 = !DILocation(line: 518, column: 13, scope: !1233)
!1242 = !DILocalVariable(name: "dc", scope: !1233, file: !3, line: 519, type: !95)
!1243 = !DILocation(line: 519, column: 14, scope: !1233)
!1244 = !DILocation(line: 520, column: 3, scope: !1233)
!1245 = !DILocation(line: 521, column: 21, scope: !1233)
!1246 = !DILocation(line: 521, column: 3, scope: !1233)
!1247 = !DILocation(line: 522, column: 3, scope: !1233)
!1248 = !DILocation(line: 523, column: 17, scope: !1233)
!1249 = !DILocation(line: 523, column: 22, scope: !1233)
!1250 = !DILocation(line: 523, column: 10, scope: !1233)
!1251 = !DILocation(line: 523, column: 46, scope: !1233)
!1252 = !DILocation(line: 523, column: 3, scope: !1233)
!1253 = distinct !DISubprogram(name: "decimal64Canonical", scope: !3, file: !3, line: 533, type: !1254, scopeLine: 533, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!1254 = !DISubroutineType(types: !1255)
!1255 = !{!72, !72, !595}
!1256 = !DILocalVariable(name: "result", arg: 1, scope: !1253, file: !3, line: 533, type: !72)
!1257 = !DILocation(line: 533, column: 43, scope: !1253)
!1258 = !DILocalVariable(name: "d64", arg: 2, scope: !1253, file: !3, line: 533, type: !595)
!1259 = !DILocation(line: 533, column: 68, scope: !1253)
!1260 = !DILocalVariable(name: "dn", scope: !1253, file: !3, line: 534, type: !83)
!1261 = !DILocation(line: 534, column: 13, scope: !1253)
!1262 = !DILocalVariable(name: "dc", scope: !1253, file: !3, line: 535, type: !95)
!1263 = !DILocation(line: 535, column: 14, scope: !1253)
!1264 = !DILocation(line: 536, column: 3, scope: !1253)
!1265 = !DILocation(line: 537, column: 21, scope: !1253)
!1266 = !DILocation(line: 537, column: 3, scope: !1253)
!1267 = !DILocation(line: 538, column: 23, scope: !1253)
!1268 = !DILocation(line: 538, column: 3, scope: !1253)
!1269 = !DILocation(line: 539, column: 10, scope: !1253)
!1270 = !DILocation(line: 539, column: 3, scope: !1253)
!1271 = distinct !DISubprogram(name: "decimal64FromNumber", scope: !3, file: !3, line: 922, type: !70, scopeLine: 924, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!1272 = !DILocalVariable(name: "d64", arg: 1, scope: !1271, file: !3, line: 922, type: !72)
!1273 = !DILocation(line: 922, column: 33, scope: !1271)
!1274 = !DILocalVariable(name: "dn", arg: 2, scope: !1271, file: !3, line: 922, type: !81)
!1275 = !DILocation(line: 922, column: 55, scope: !1271)
!1276 = !DILocalVariable(name: "set", arg: 3, scope: !1271, file: !3, line: 923, type: !94)
!1277 = !DILocation(line: 923, column: 21, scope: !1271)
!1278 = !DILocalVariable(name: "u", scope: !1271, file: !3, line: 930, type: !1279)
!1279 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1271, file: !3, line: 926, size: 64, elements: !1280)
!1280 = !{!1281, !1285}
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "_Dec", scope: !1279, file: !3, line: 928, baseType: !1282, size: 64)
!1282 = !DIDerivedType(tag: DW_TAG_typedef, name: "UINT64", file: !1283, line: 26, baseType: !1284)
!1283 = !DIFile(filename: "./bid-dpd.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1284 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "dec", scope: !1279, file: !3, line: 929, baseType: !73, size: 64)
!1286 = !DILocation(line: 930, column: 7, scope: !1271)
!1287 = !DILocation(line: 932, column: 22, scope: !1271)
!1288 = !DILocation(line: 932, column: 27, scope: !1271)
!1289 = !DILocation(line: 932, column: 31, scope: !1271)
!1290 = !DILocation(line: 932, column: 3, scope: !1271)
!1291 = !DILocation(line: 936, column: 23, scope: !1271)
!1292 = !DILocation(line: 936, column: 31, scope: !1271)
!1293 = !DILocation(line: 936, column: 3, scope: !1271)
!1294 = !DILocation(line: 939, column: 21, scope: !1271)
!1295 = !DILocation(line: 939, column: 30, scope: !1271)
!1296 = !DILocation(line: 939, column: 3, scope: !1271)
!1297 = !DILocation(line: 942, column: 24, scope: !1271)
!1298 = !DILocation(line: 942, column: 33, scope: !1271)
!1299 = !DILocation(line: 942, column: 3, scope: !1271)
!1300 = !DILocation(line: 945, column: 4, scope: !1271)
!1301 = !DILocation(line: 945, column: 12, scope: !1271)
!1302 = !DILocation(line: 947, column: 10, scope: !1271)
!1303 = !DILocation(line: 947, column: 3, scope: !1271)
!1304 = distinct !DISubprogram(name: "decimal64ToNumber", scope: !3, file: !3, line: 951, type: !592, scopeLine: 952, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!1305 = !DILocalVariable(name: "bid64", arg: 1, scope: !1304, file: !3, line: 951, type: !595)
!1306 = !DILocation(line: 951, column: 37, scope: !1304)
!1307 = !DILocalVariable(name: "dn", arg: 2, scope: !1304, file: !3, line: 951, type: !594)
!1308 = !DILocation(line: 951, column: 55, scope: !1304)
!1309 = !DILocalVariable(name: "u", scope: !1304, file: !3, line: 958, type: !1310)
!1310 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1304, file: !3, line: 954, size: 64, elements: !1311)
!1311 = !{!1312, !1313}
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "_Dec", scope: !1310, file: !3, line: 956, baseType: !1282, size: 64)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "dec", scope: !1310, file: !3, line: 957, baseType: !73, size: 64)
!1314 = !DILocation(line: 958, column: 7, scope: !1304)
!1315 = !DILocation(line: 962, column: 23, scope: !1304)
!1316 = !DILocation(line: 962, column: 33, scope: !1304)
!1317 = !DILocation(line: 962, column: 3, scope: !1304)
!1318 = !DILocation(line: 965, column: 21, scope: !1304)
!1319 = !DILocation(line: 965, column: 30, scope: !1304)
!1320 = !DILocation(line: 965, column: 3, scope: !1304)
!1321 = !DILocation(line: 968, column: 24, scope: !1304)
!1322 = !DILocation(line: 968, column: 33, scope: !1304)
!1323 = !DILocation(line: 968, column: 3, scope: !1304)
!1324 = !DILocation(line: 970, column: 30, scope: !1304)
!1325 = !DILocation(line: 970, column: 35, scope: !1304)
!1326 = !DILocation(line: 970, column: 10, scope: !1304)
!1327 = !DILocation(line: 970, column: 3, scope: !1304)
!1328 = distinct !DISubprogram(name: "decimal64ToString", scope: !3, file: !3, line: 974, type: !831, scopeLine: 975, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!1329 = !DILocalVariable(name: "d64", arg: 1, scope: !1328, file: !3, line: 974, type: !595)
!1330 = !DILocation(line: 974, column: 37, scope: !1328)
!1331 = !DILocalVariable(name: "string", arg: 2, scope: !1328, file: !3, line: 974, type: !833)
!1332 = !DILocation(line: 974, column: 48, scope: !1328)
!1333 = !DILocalVariable(name: "dn", scope: !1328, file: !3, line: 976, type: !83)
!1334 = !DILocation(line: 976, column: 13, scope: !1328)
!1335 = !DILocation(line: 977, column: 22, scope: !1328)
!1336 = !DILocation(line: 977, column: 3, scope: !1328)
!1337 = !DILocation(line: 978, column: 27, scope: !1328)
!1338 = !DILocation(line: 978, column: 3, scope: !1328)
!1339 = !DILocation(line: 979, column: 10, scope: !1328)
!1340 = !DILocation(line: 979, column: 3, scope: !1328)
!1341 = distinct !DISubprogram(name: "decimal64ToEngString", scope: !3, file: !3, line: 983, type: !831, scopeLine: 984, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!1342 = !DILocalVariable(name: "d64", arg: 1, scope: !1341, file: !3, line: 983, type: !595)
!1343 = !DILocation(line: 983, column: 40, scope: !1341)
!1344 = !DILocalVariable(name: "string", arg: 2, scope: !1341, file: !3, line: 983, type: !833)
!1345 = !DILocation(line: 983, column: 51, scope: !1341)
!1346 = !DILocalVariable(name: "dn", scope: !1341, file: !3, line: 985, type: !83)
!1347 = !DILocation(line: 985, column: 13, scope: !1341)
!1348 = !DILocation(line: 986, column: 22, scope: !1341)
!1349 = !DILocation(line: 986, column: 3, scope: !1341)
!1350 = !DILocation(line: 987, column: 30, scope: !1341)
!1351 = !DILocation(line: 987, column: 3, scope: !1341)
!1352 = !DILocation(line: 988, column: 10, scope: !1341)
!1353 = !DILocation(line: 988, column: 3, scope: !1341)
!1354 = distinct !DISubprogram(name: "decimal64FromString", scope: !3, file: !3, line: 992, type: !1199, scopeLine: 994, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !105)
!1355 = !DILocalVariable(name: "result", arg: 1, scope: !1354, file: !3, line: 992, type: !72)
!1356 = !DILocation(line: 992, column: 33, scope: !1354)
!1357 = !DILocalVariable(name: "string", arg: 2, scope: !1354, file: !3, line: 992, type: !1201)
!1358 = !DILocation(line: 992, column: 53, scope: !1354)
!1359 = !DILocalVariable(name: "set", arg: 3, scope: !1354, file: !3, line: 993, type: !94)
!1360 = !DILocation(line: 993, column: 21, scope: !1354)
!1361 = !DILocalVariable(name: "dc", scope: !1354, file: !3, line: 995, type: !95)
!1362 = !DILocation(line: 995, column: 14, scope: !1354)
!1363 = !DILocalVariable(name: "dn", scope: !1354, file: !3, line: 996, type: !83)
!1364 = !DILocation(line: 996, column: 13, scope: !1354)
!1365 = !DILocation(line: 998, column: 3, scope: !1354)
!1366 = !DILocation(line: 999, column: 14, scope: !1354)
!1367 = !DILocation(line: 999, column: 19, scope: !1354)
!1368 = !DILocation(line: 999, column: 6, scope: !1354)
!1369 = !DILocation(line: 999, column: 12, scope: !1354)
!1370 = !DILocation(line: 1001, column: 29, scope: !1354)
!1371 = !DILocation(line: 1001, column: 3, scope: !1354)
!1372 = !DILocation(line: 1002, column: 24, scope: !1354)
!1373 = !DILocation(line: 1002, column: 3, scope: !1354)
!1374 = !DILocation(line: 1003, column: 10, scope: !1375)
!1375 = distinct !DILexicalBlock(scope: !1354, file: !3, line: 1003, column: 7)
!1376 = !DILocation(line: 1003, column: 17, scope: !1375)
!1377 = !DILocation(line: 1003, column: 7, scope: !1354)
!1378 = !DILocation(line: 1005, column: 28, scope: !1379)
!1379 = distinct !DILexicalBlock(scope: !1375, file: !3, line: 1004, column: 5)
!1380 = !DILocation(line: 1005, column: 36, scope: !1379)
!1381 = !DILocation(line: 1005, column: 7, scope: !1379)
!1382 = !DILocation(line: 1006, column: 5, scope: !1379)
!1383 = !DILocation(line: 1007, column: 10, scope: !1354)
!1384 = !DILocation(line: 1007, column: 3, scope: !1354)
